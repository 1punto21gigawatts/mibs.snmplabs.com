#
# PySNMP MIB module ENVIRONMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENVIRONMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:05:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ntEnterpriseDataTasmanMgmt, = mibBuilder.importSymbols("NT-ENTERPRISE-DATA-MIB", "ntEnterpriseDataTasmanMgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, TimeTicks, ObjectIdentity, IpAddress, MibIdentifier, Counter64, ModuleIdentity, Integer32, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "TimeTicks", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter64", "ModuleIdentity", "Integer32", "Gauge32", "NotificationType")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
nnenvironmentMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3))
nnenvironmentMib.setRevisions(('1900-08-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nnenvironmentMib.setRevisionsDescriptions(('Initial version of Environment MIB.',))
if mibBuilder.loadTexts: nnenvironmentMib.setLastUpdated('0008180000Z')
if mibBuilder.loadTexts: nnenvironmentMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: nnenvironmentMib.setContactInfo(' Nortel Networks 8200 Dixie Road Brampton, Ontario L6T 5P6 Canada 1-800-4Nortel www.nortelnetworks.com ')
if mibBuilder.loadTexts: nnenvironmentMib.setDescription('')
class EnvState(TextualConvention, Integer32):
    description = 'Represents the state of a device being monitored.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("fail", 4), ("turned-off", 5))

class EnvInstalled(TextualConvention, Integer32):
    description = 'Installed flag for power supply.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("not-installed", 1), ("installed", 2))

class EnvStatus(TextualConvention, Integer32):
    description = 'Installed flag for power supply.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("absent", 1), ("failed", 2), ("normal", 3))

class EnvType(TextualConvention, Integer32):
    description = 'Installed flag for power supply.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("supply-AC-ONLY", 1), ("supply-AC-PoE", 2), ("supply-DC", 3), ("unknown", 4))

nnenvObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1))
nnenvNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 2))
nnenvNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 3))
nnenvTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 3, 0))
nnenvTempSensorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 1))
nnenvTempSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnenvTempSensorValue.setStatus('current')
if mibBuilder.loadTexts: nnenvTempSensorValue.setDescription(' The Average value of the temperature sensors. ')
nnenvTempSensorState = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 1, 2), EnvState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnenvTempSensorState.setStatus('current')
if mibBuilder.loadTexts: nnenvTempSensorState.setDescription(' The Average status of the temperature sensors. ')
nnenvFanTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 2), )
if mibBuilder.loadTexts: nnenvFanTable.setStatus('current')
if mibBuilder.loadTexts: nnenvFanTable.setDescription('A list of fan unit entries.')
nnenvFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 2, 1), ).setIndexNames((0, "ENVIRONMENT-MIB", "nnenvFanUnitIndex"))
if mibBuilder.loadTexts: nnenvFanEntry.setStatus('current')
if mibBuilder.loadTexts: nnenvFanEntry.setDescription('Entry containing information about a fan within the chassis.')
nnenvFanUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nnenvFanUnitIndex.setStatus('current')
if mibBuilder.loadTexts: nnenvFanUnitIndex.setDescription('The index to access an entry in the table. ')
nnenvFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 2, 1, 2), EnvState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnenvFanState.setStatus('current')
if mibBuilder.loadTexts: nnenvFanState.setDescription(' The current state of fan 0, normal/fail. ')
nnenvPwrsupPowerFailCount = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnenvPwrsupPowerFailCount.setStatus('current')
if mibBuilder.loadTexts: nnenvPwrsupPowerFailCount.setDescription('Number of failures of either power supply since boot-up.')
nnenvPwrsupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 4), )
if mibBuilder.loadTexts: nnenvPwrsupTable.setStatus('current')
if mibBuilder.loadTexts: nnenvPwrsupTable.setDescription('A list of power supply status information.')
nnenvPwrsupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 4, 1), ).setIndexNames((0, "ENVIRONMENT-MIB", "nnenvPwrsupIndex"))
if mibBuilder.loadTexts: nnenvPwrsupEntry.setStatus('current')
if mibBuilder.loadTexts: nnenvPwrsupEntry.setDescription('Entry containing power supply information.')
nnenvPwrsupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nnenvPwrsupIndex.setStatus('current')
if mibBuilder.loadTexts: nnenvPwrsupIndex.setDescription('Index to access entry.')
nnenvPwrsupInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 4, 1, 2), EnvInstalled()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnenvPwrsupInstalled.setStatus('current')
if mibBuilder.loadTexts: nnenvPwrsupInstalled.setDescription('Power supply installed flag.')
nnenvPwrsupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 4, 1, 3), EnvStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnenvPwrsupStatus.setStatus('current')
if mibBuilder.loadTexts: nnenvPwrsupStatus.setDescription('Power supply up/down status.')
nnenvPwrsupType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 4, 1, 4), EnvType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnenvPwrsupType.setStatus('current')
if mibBuilder.loadTexts: nnenvPwrsupType.setDescription('Power supply type.')
nnenvPwrsupUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnenvPwrsupUptime.setStatus('current')
if mibBuilder.loadTexts: nnenvPwrsupUptime.setDescription('Seconds since power supply came up.')
nnenvPwrsupDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnenvPwrsupDowntime.setStatus('current')
if mibBuilder.loadTexts: nnenvPwrsupDowntime.setDescription('Seconds since power supply went down.')
nnenvEnableTemperatureNotification = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 2, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnenvEnableTemperatureNotification.setStatus('current')
if mibBuilder.loadTexts: nnenvEnableTemperatureNotification.setDescription('Indicates whether the system produces the envTemperatureNotification. The default is yes. Note: implementation is TBD. ')
nnenvEnableFanNotification = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 2, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnenvEnableFanNotification.setStatus('current')
if mibBuilder.loadTexts: nnenvEnableFanNotification.setDescription('Indicates whether the system produces the envFanNotification. The default is yes. ')
nnenvEnablePowerNotification = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 2, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnenvEnablePowerNotification.setStatus('current')
if mibBuilder.loadTexts: nnenvEnablePowerNotification.setDescription('Indicates whether the system produces the envPowerNotification. The default is yes. ')
nnenvTemperatureNotification = NotificationType((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 3, 0, 1)).setObjects(("ENVIRONMENT-MIB", "nnenvTempSensorValue"), ("ENVIRONMENT-MIB", "nnenvTempSensorState"))
if mibBuilder.loadTexts: nnenvTemperatureNotification.setStatus('current')
if mibBuilder.loadTexts: nnenvTemperatureNotification.setDescription(' An envTemeratureNotification is sent if the environmental monitoring detects that the temperature is at a critical state. This may cause the system to shut down. This notification is sent only if envEnableTemperatureNotification is set to true. ')
nnenvFanNotification = NotificationType((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 3, 0, 2)).setObjects(("ENVIRONMENT-MIB", "nnenvFanUnitIndex"), ("ENVIRONMENT-MIB", "nnenvFanState"))
if mibBuilder.loadTexts: nnenvFanNotification.setStatus('current')
if mibBuilder.loadTexts: nnenvFanNotification.setDescription(' An envFanNotification is sent if the environmental monitoring detects that a fan is in a critical state. This may cause the system to shut down. This notification is sent only if envEnableFanNotification is set to true. ')
nnenvPowerSupply1DownNotification = NotificationType((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 3, 0, 3)).setObjects(("ENVIRONMENT-MIB", "nnenvPwrsupPowerFailCount"), ("ENVIRONMENT-MIB", "nnenvPwrsupIndex"), ("ENVIRONMENT-MIB", "nnenvPwrsupInstalled"), ("ENVIRONMENT-MIB", "nnenvPwrsupStatus"), ("ENVIRONMENT-MIB", "nnenvPwrsupType"), ("ENVIRONMENT-MIB", "nnenvPwrsupUptime"), ("ENVIRONMENT-MIB", "nnenvPwrsupDowntime"))
if mibBuilder.loadTexts: nnenvPowerSupply1DownNotification.setStatus('current')
if mibBuilder.loadTexts: nnenvPowerSupply1DownNotification.setDescription(' An envPowerNotification is sent if the environmental monitoring detects that a power supply has changed status. This notification is sent only if envEnablePowerNotification is set to true. ')
nnenvPowerSupply1UpNotification = NotificationType((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 3, 0, 4)).setObjects(("ENVIRONMENT-MIB", "nnenvPwrsupPowerFailCount"), ("ENVIRONMENT-MIB", "nnenvPwrsupIndex"), ("ENVIRONMENT-MIB", "nnenvPwrsupInstalled"), ("ENVIRONMENT-MIB", "nnenvPwrsupStatus"), ("ENVIRONMENT-MIB", "nnenvPwrsupType"), ("ENVIRONMENT-MIB", "nnenvPwrsupUptime"), ("ENVIRONMENT-MIB", "nnenvPwrsupDowntime"))
if mibBuilder.loadTexts: nnenvPowerSupply1UpNotification.setStatus('current')
if mibBuilder.loadTexts: nnenvPowerSupply1UpNotification.setDescription(' An envPowerNotification is sent if the environmental monitoring detects that a power supply has changed status. This notification is sent only if envEnablePowerNotification is set to true. ')
nnenvPowerSupply2DownNotification = NotificationType((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 3, 0, 5)).setObjects(("ENVIRONMENT-MIB", "nnenvPwrsupPowerFailCount"), ("ENVIRONMENT-MIB", "nnenvPwrsupIndex"), ("ENVIRONMENT-MIB", "nnenvPwrsupInstalled"), ("ENVIRONMENT-MIB", "nnenvPwrsupStatus"), ("ENVIRONMENT-MIB", "nnenvPwrsupType"), ("ENVIRONMENT-MIB", "nnenvPwrsupUptime"), ("ENVIRONMENT-MIB", "nnenvPwrsupDowntime"))
if mibBuilder.loadTexts: nnenvPowerSupply2DownNotification.setStatus('current')
if mibBuilder.loadTexts: nnenvPowerSupply2DownNotification.setDescription(' An envPowerNotification is sent if the environmental monitoring detects that a power supply has changed status. This notification is sent only if envEnablePowerNotification is set to true. ')
nnenvPowerSupply2UpNotification = NotificationType((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 3, 0, 6)).setObjects(("ENVIRONMENT-MIB", "nnenvPwrsupPowerFailCount"), ("ENVIRONMENT-MIB", "nnenvPwrsupIndex"), ("ENVIRONMENT-MIB", "nnenvPwrsupInstalled"), ("ENVIRONMENT-MIB", "nnenvPwrsupStatus"), ("ENVIRONMENT-MIB", "nnenvPwrsupType"), ("ENVIRONMENT-MIB", "nnenvPwrsupUptime"), ("ENVIRONMENT-MIB", "nnenvPwrsupDowntime"))
if mibBuilder.loadTexts: nnenvPowerSupply2UpNotification.setStatus('current')
if mibBuilder.loadTexts: nnenvPowerSupply2UpNotification.setDescription(' An envPowerNotification is sent if the environmental monitoring detects that a power supply has changed status. This notification is sent only if envEnablePowerNotification is set to true. ')
nnenvironementNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 1, 3, 4)).setObjects(("ENVIRONMENT-MIB", "nnenvTemperatureNotification"), ("ENVIRONMENT-MIB", "nnenvFanNotification"), ("ENVIRONMENT-MIB", "nnenvPowerSupply1DownNotification"), ("ENVIRONMENT-MIB", "nnenvPowerSupply1UpNotification"), ("ENVIRONMENT-MIB", "nnenvPowerSupply2DownNotification"), ("ENVIRONMENT-MIB", "nnenvPowerSupply2UpNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nnenvironementNotificationGroup = nnenvironementNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: nnenvironementNotificationGroup.setDescription('THE Envrionment MIB Notification Group')
mibBuilder.exportSymbols("ENVIRONMENT-MIB", nnenvPowerSupply1UpNotification=nnenvPowerSupply1UpNotification, nnenvEnableTemperatureNotification=nnenvEnableTemperatureNotification, nnenvObjects=nnenvObjects, nnenvPowerSupply1DownNotification=nnenvPowerSupply1DownNotification, nnenvPwrsupDowntime=nnenvPwrsupDowntime, nnenvTraps=nnenvTraps, nnenvPwrsupEntry=nnenvPwrsupEntry, nnenvPwrsupType=nnenvPwrsupType, nnenvEnablePowerNotification=nnenvEnablePowerNotification, nnenvNotifications=nnenvNotifications, nnenvFanNotification=nnenvFanNotification, nnenvEnableFanNotification=nnenvEnableFanNotification, nnenvPwrsupTable=nnenvPwrsupTable, EnvType=EnvType, nnenvFanTable=nnenvFanTable, EnvStatus=EnvStatus, nnenvironementNotificationGroup=nnenvironementNotificationGroup, PYSNMP_MODULE_ID=nnenvironmentMib, nnenvFanUnitIndex=nnenvFanUnitIndex, nnenvironmentMib=nnenvironmentMib, nnenvPwrsupUptime=nnenvPwrsupUptime, nnenvFanState=nnenvFanState, nnenvFanEntry=nnenvFanEntry, EnvState=EnvState, EnvInstalled=EnvInstalled, nnenvTempSensorGroup=nnenvTempSensorGroup, nnenvTemperatureNotification=nnenvTemperatureNotification, nnenvPowerSupply2UpNotification=nnenvPowerSupply2UpNotification, nnenvPowerSupply2DownNotification=nnenvPowerSupply2DownNotification, nnenvTempSensorState=nnenvTempSensorState, nnenvPwrsupPowerFailCount=nnenvPwrsupPowerFailCount, nnenvPwrsupStatus=nnenvPwrsupStatus, nnenvPwrsupIndex=nnenvPwrsupIndex, nnenvNotificationEnables=nnenvNotificationEnables, nnenvTempSensorValue=nnenvTempSensorValue, nnenvPwrsupInstalled=nnenvPwrsupInstalled)
