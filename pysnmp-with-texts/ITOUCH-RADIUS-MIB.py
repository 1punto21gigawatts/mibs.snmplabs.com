#
# PySNMP MIB module ITOUCH-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
iTouch, = mibBuilder.importSymbols("ITOUCH-MIB", "iTouch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, Integer32, TimeTicks, ModuleIdentity, IpAddress, Bits, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "Integer32", "TimeTicks", "ModuleIdentity", "IpAddress", "Bits", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35))
xRadiusPort = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 1))
xRadiusCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 2))
xRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 3))
xRadiusServers = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 4))
xRadiusCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 5))
xRadiusPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 35, 1, 1), )
if mibBuilder.loadTexts: xRadiusPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortTable.setDescription('Table of fields indexed by port.')
xRadiusPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1), ).setIndexNames((0, "ITOUCH-RADIUS-MIB", "xRadiusPortIndex"))
if mibBuilder.loadTexts: xRadiusPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortEntry.setDescription('A particular entry.')
xRadiusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortIndex.setDescription('The index of the port.')
xRadiusPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortStatus.setDescription('Indicates the state of Radius Authentication on the port.')
xRadiusPortSolicitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusPortSolicitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortSolicitStatus.setDescription('Indicates the state of Radius solicitation mode on the port.')
xRadiusAcctPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("limited", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctPortStatus.setDescription('Indicates the state of Radius Accounting on the port.')
xRadiusCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 33, 35, 2, 1), )
if mibBuilder.loadTexts: xRadiusCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusCircuitTable.setDescription('Table of fields indexed by circuit.')
xRadiusCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 35, 2, 1, 1), ).setIndexNames((0, "ITOUCH-RADIUS-MIB", "xRadiusCircuitIndex"))
if mibBuilder.loadTexts: xRadiusCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusCircuitEntry.setDescription('A particular entry.')
xRadiusCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusCircuitIndex.setDescription('The index of the circuit.')
xRadiusCircAcctOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("limited", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusCircAcctOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusCircAcctOnOff.setDescription('Indicates the state of Radius Accounting on the circuit.')
xRadiusAuthServerPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1645)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusAuthServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAuthServerPort.setDescription('The UDP port on which the Radius authentication request will be made.')
xRadiusAcctServerPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1646)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusAcctServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctServerPort.setDescription('The UDP port on which the Radius accounting request will be made.')
xRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusTimeout.setDescription('The period of time that the Radius client will wait for a reply from the server.')
xRadiusServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusServerRetries.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerRetries.setDescription('The number of times a Radius server will be tried.')
xRadiusAcctLogAttempts = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusAcctLogAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctLogAttempts.setDescription('The number of times the client will attempt to log the accounting record to either the primary or secondary Radius server before giving up and failing.')
xRadiusChapChallengeSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 128)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusChapChallengeSize.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusChapChallengeSize.setDescription('The size of the CHAP challenge that is sent to the peer and the Radius server.')
xRadiusLogging = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusLogging.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusLogging.setDescription('Indicates the state of Radius logging for packet tracing and troubleshooting. Messages are logged to the ITouch event log.')
xRadiusMessage = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusMessage.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusMessage.setDescription('The authentication prompting message for Radius logins.')
xRadServer1SubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 4, 1))
xRadServer2SubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 4, 2))
xRadiusServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(51, 51)).setFixedLength(51)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusServerName1.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerName1.setDescription('The primary Radius server queried for authentication.')
xRadiusSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32).clone('Default_Secret')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusSecret1.setStatus('obsolete')
if mibBuilder.loadTexts: xRadiusSecret1.setDescription('The secret value used to communicate with the primary Radius server.')
xRadiusServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccess1.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerAccess1.setDescription('The number of successful accesses of primary Radius server.')
xRadiusServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccessFailed1.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerAccessFailed1.setDescription('The number of failed accesses of primary Radius server.')
xRadiusServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(51, 51)).setFixedLength(51)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusServerName2.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerName2.setDescription('The secondary Radius server queried for authentication, if the primary one fails.')
xRadiusSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32).clone('Default_Secret')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusSecret2.setStatus('obsolete')
if mibBuilder.loadTexts: xRadiusSecret2.setDescription('The secret value used to communicate with the secondary Radius server.')
xRadiusServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccess2.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerAccess2.setDescription('The number of successful accesses of secondary Radius server.')
xRadiusServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccessFailed2.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerAccessFailed2.setDescription('The number of failed accesses of secondary Radius server.')
xRadAuthCtsSubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 5, 1))
xRadAcctCtsSubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 5, 2))
xRadiusLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusLogins.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusLogins.setDescription('The number of successful logins using Radius.')
xRadiusLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusLoginsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusLoginsFailed.setDescription('The number of failed logins resulting from being rejected by the Radius server.')
xRadiusConfigFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusConfigFailed.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusConfigFailed.setDescription('The number of failed logins resulting from unsupported attribute values.')
xRadiusPolicyFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusPolicyFailed.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPolicyFailed.setDescription('The number of failed logins resulting from failing specific Radius policies on the ITouch unit.')
xRadiusAcctSuccess = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctSuccess.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctSuccess.setDescription('The number of successfully recorded Radius accounting log records.')
xRadiusAcctFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctFailed.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctFailed.setDescription('The number of failed (not logged) Radius accounting log records.')
xRadiusAcctReqWait = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctReqWait.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctReqWait.setDescription('The number of log requests waiting for a reply from the Radius server.')
mibBuilder.exportSymbols("ITOUCH-RADIUS-MIB", xRadiusServers=xRadiusServers, xRadiusTimeout=xRadiusTimeout, xRadiusServerAccessFailed1=xRadiusServerAccessFailed1, xRadiusLogins=xRadiusLogins, xRadius=xRadius, xRadiusConfig=xRadiusConfig, xRadiusCircuitEntry=xRadiusCircuitEntry, xRadiusAcctReqWait=xRadiusAcctReqWait, xRadiusAcctPortStatus=xRadiusAcctPortStatus, xRadiusSecret1=xRadiusSecret1, xRadiusCircAcctOnOff=xRadiusCircAcctOnOff, xRadiusPolicyFailed=xRadiusPolicyFailed, xRadiusPort=xRadiusPort, xRadiusCircuit=xRadiusCircuit, xRadiusServerAccessFailed2=xRadiusServerAccessFailed2, xRadiusLogging=xRadiusLogging, xRadiusPortTable=xRadiusPortTable, xRadiusPortEntry=xRadiusPortEntry, xRadiusPortIndex=xRadiusPortIndex, xRadiusCircuitIndex=xRadiusCircuitIndex, xRadiusServerName1=xRadiusServerName1, xRadiusServerAccess2=xRadiusServerAccess2, xRadiusConfigFailed=xRadiusConfigFailed, xRadiusServerRetries=xRadiusServerRetries, xRadiusAcctFailed=xRadiusAcctFailed, xRadServer1SubGrp=xRadServer1SubGrp, xRadAcctCtsSubGrp=xRadAcctCtsSubGrp, xRadiusPortStatus=xRadiusPortStatus, xRadiusAcctSuccess=xRadiusAcctSuccess, xRadiusPortSolicitStatus=xRadiusPortSolicitStatus, xRadiusSecret2=xRadiusSecret2, xRadiusAcctServerPort=xRadiusAcctServerPort, xRadiusAcctLogAttempts=xRadiusAcctLogAttempts, xRadiusCircuitTable=xRadiusCircuitTable, xRadiusMessage=xRadiusMessage, xRadiusAuthServerPort=xRadiusAuthServerPort, xRadAuthCtsSubGrp=xRadAuthCtsSubGrp, xRadiusLoginsFailed=xRadiusLoginsFailed, xRadiusChapChallengeSize=xRadiusChapChallengeSize, xRadiusServerAccess1=xRadiusServerAccess1, xRadServer2SubGrp=xRadServer2SubGrp, xRadiusCounters=xRadiusCounters, xRadiusServerName2=xRadiusServerName2)
