#
# PySNMP MIB module ITOUCH-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
TypedAddress, DateTime, iTouch, AddressType, HardwareType, ChassisType = mibBuilder.importSymbols("ITOUCH-MIB", "TypedAddress", "DateTime", "iTouch", "AddressType", "HardwareType", "ChassisType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysLocation, = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation")
IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Integer32, Counter32, TimeTicks, iso, Counter64, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Integer32", "Counter32", "TimeTicks", "iso", "Counter64", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 1))
sysIdent = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIdent.setStatus('mandatory')
if mibBuilder.loadTexts: sysIdent.setDescription("An identification string for local and remote displays. Corresponds directly to SERVER IDENTIFICATION and the value labeled 'Identification:' on the SERVER CHARACTERISTICS display.")
sysDefineMode = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permOnly", 1), ("operAndPerm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDefineMode.setStatus('mandatory')
if mibBuilder.loadTexts: sysDefineMode.setDescription("The system's operation with regard to DEFINE commands. 'permOnly' indicates that DEFINE commands modify only the permanent data base. 'operAndPerm' indicates that DEFINE commands modify both operational and permanent data bases, unless specifically documented to the contrary. Corresponds to SERVER CHANGE and the presence of the label CHANGE in the SERVER CHARACTERISTICS display.")
sysDateTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 3), DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: sysDateTime.setDescription("The system's current local date and time. Corresponds directly to SERVER DATE and SERVER TIME and the value in various displays.")
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeZone.setDescription("The adjustment to apply to a universal (Greenwich) time received when down-line loaded, comprising two octets. The first octet is the number of hours west of universal, the second is the number of minutes. Corresponds directly to SERVER TIMEZONE and the value labeled 'Timezone:' in the SERVER CHARACTERISTICS display.")
sysLoadSoftware = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoadSoftware.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoadSoftware.setDescription("The software file name to request for down-line load of the server. Corresponds directly to SERVER SOFTWARE, and the value labeled 'Software:' in the SERVER CHARACTERISTICS display.")
sysDump = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDump.setStatus('mandatory')
if mibBuilder.loadTexts: sysDump.setDescription("Control for dumping the system's memory when the system crashes. Corresponds directly to SERVER DUMP and the presence of 'Dump' under the label 'Enabled Characteristics' in the SERVER CHARACTERISTICS display.")
sysMaintenancePassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMaintenancePassword.setStatus('mandatory')
if mibBuilder.loadTexts: sysMaintenancePassword.setDescription("The password a management system must supply to force the system to reboot or use the system's remote console via the Maintenance Operation Protocol (MOP). Corresponds directly to SERVER MAINTENANCE PASSWORD. When setting this value, the management system must supply eight octets, filling with zeros from the first octet. That is, the value '1ab42' would be expressed as '0.0.0.0.0.1.ab.42'. Setting the value to zero disables the password check. When returning this value, the agent always returns a zero length OCTET STRING.")
sysLocalName = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalName.setStatus('mandatory')
if mibBuilder.loadTexts: sysLocalName.setDescription("The system's local name. Corresponds directly to SERVER NAME and the value labeled 'Name:' in the SERVER CHARACTERISTICS display.")
sysSoftwareVersionType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2), ("production", 3), ("special", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSoftwareVersionType.setStatus('mandatory')
if mibBuilder.loadTexts: sysSoftwareVersionType.setDescription("The software version variant running in the system. Corresponds to the letter in the software version in the SERVER CHARACTERISTICS display. alpha 'A': alpha test beta 'B': beta test production null: normal, production software special 'S': special, custom software ")
sysSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysSoftwareVersion.setDescription("The software version running in the system. In order, the octets contain major version, minor version, ECO, and pre-release number. Corresponds to the numbers in the software version in the SERVER CHARACTERISTICS display. For example, the version display for sysSoftwareVersionType 'production' and sysSoftwareVersion '2.2.0.0' is 'V2.2'. The version display for sysSoftwareVersionType 'beta' and sysSoftwareVersion '3.1.0.4' is 'V3.1B4'.")
sysRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRomVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysRomVersion.setDescription("The firmware version of the bootstrap ROM installed in the system. Corresponds directly to the value labeled 'Rom' in the SERVER CHARACTERISTICS display.")
sysHardwareType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 12), HardwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareType.setStatus('mandatory')
if mibBuilder.loadTexts: sysHardwareType.setDescription("The type of hardware on which the system is running. Corresponds directly to the value labeled 'Hardware Type:' in the UNIT display.")
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysHardwareVersion.setDescription("This version of hardware on which the system is running. Corresponds directly to part of the value labeled 'HW' in the SERVER CHARACTERISTICS display.")
sysChassisType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 14), ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: sysChassisType.setDescription("The type of chassis in which the system is running. Corresponds directly to part of the value labeled 'HW' in the SERVER CHARACTERISTICS display.")
sysChassisVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysChassisVersion.setDescription("This version of chassis in which the system is running. Corresponds directly to part of the value labeled 'HW' in the SERVER CHARACTERISTICS display.")
sysCrash = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCrash.setStatus('mandatory')
if mibBuilder.loadTexts: sysCrash.setDescription("Control to cause this system to crash. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes an immediate crash. Corresponds to the CRASH command.")
sysInitialize = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("conditionalExecute", 2), ("unconditionalExecute", 3), ("cancel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInitialize.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitialize.setDescription("Control to cause this system to reset its software to initial load values, typically by reloading. When executing an initialize command, the system observes the value of sysInitializeDelay as supplied anywhere in the same set request with sysInitialize. If this value is not included in the set request, the system uses its default value. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'conditionalExecute' causes initialization if the overall system state is acceptible (such as not needing to store permanent parameters). Setting it to 'unconditionalExecute' causes initialization regardless of the overall system state. Setting it to 'cancel' aborts an initialization that has not yet started. According to standard SNMP operation, if the system is not in a proper state to accept a given set request for this value, it returns the standard SNMP error 'badValue'. Corresponds to the INITIALIZE command.")
sysInitializeDelay = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInitializeDelay.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitializeDelay.setDescription("The number of minutes to delay before beginning the system initialization process as executed with sysInitialize. This value cannot be set outside a set-request that contains the value 'execute' for sysInitialize. If not included in such a set, the default value is 1. Corresponds to the INITIALIZE command's DELAY parameter and to the value labeled 'Minutes to shutdown:' in the SYSTEM STATUS display.")
sysZeroAll = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysZeroAll.setStatus('mandatory')
if mibBuilder.loadTexts: sysZeroAll.setDescription("Control to zero all counters. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes all the system's counters to be zeroed. Corresponds to the ZERO ALL command.")
sysZeroBase = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysZeroBase.setStatus('mandatory')
if mibBuilder.loadTexts: sysZeroBase.setDescription("Control to zero all base counters. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes all the system's base counters to be zeroed. Examples of counters that are zeroed are the SNMP counters or the counters from the SYSTEM COUNTERS display. Examples of counters that are not zeroed are Ethernet interface counters or port counters. Corresponds to the ZERO SYSTEM command.")
sysZeroBaseTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysZeroBaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sysZeroBaseTime.setDescription("The number hundredths of a second since the most recent zeroing of the base counters, such as through execution of sysZeroAll or sysZeroBase. Corresponds directly to the value labeled 'Seconds Since Zeroed:' in the SERVER COUNTERS display.")
sysLoaderName = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoaderName.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoaderName.setDescription("The name of the system that provided this system's running software. Corresponds directly to the value labeled 'Primary Host:' in the SERVER STATUS display.")
sysLoaderAddressType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 23), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoaderAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoaderAddressType.setDescription("The type of network address contained in sysLoaderAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'local' means there is no address and this system's software was loaded from local storage. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. Corresponds indirectly to the value labeled 'Load Address:' in the SERVER STATUS display.")
sysLoaderAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoaderAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoaderAddress.setDescription("The network address of the system that provided this system's running software. Corresponds directly to the value labeled 'Load Address:' in the SERVER STATUS display.")
sysDumperAddressType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 25), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDumperAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: sysDumperAddressType.setDescription("The type of network address contained in sysDumperAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'local' means there is no address and this system's was dumped to local storage. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. Corresponds indirectly to the value labeled 'Dump Address:' in the SERVER STATUS display.")
sysDumperAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDumperAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysDumperAddress.setDescription("The network address of the system that most recently accepted a crash dump from this system. Corresponds directly to the value labeled 'Dump Address:' in the SERVER STATUS display.")
sysResourceLacks = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResourceLacks.setStatus('mandatory')
if mibBuilder.loadTexts: sysResourceLacks.setDescription("The number of times a local resource allocation failed, for example due to lack of dynamic memory. Corresponds directly to the value labeled 'Resource Errors:' in the SERVER STATUS display.")
sysChassisState = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("noFault", 2), ("fault", 3), ("loop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisState.setStatus('mandatory')
if mibBuilder.loadTexts: sysChassisState.setDescription("For chassis-based systems, the state of the overall chassis. 'notApplicable' indicates the system is not chassis based. 'noFault' indicates no current chassis problem. 'fault' indicates a current chassis problem such as a card or power supply failure. Corresponds directly to the value labeled 'Crate Current State: in the SERVER ALTERNATE STATUS display.")
sysChassisFaultTransitions = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisFaultTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: sysChassisFaultTransitions.setDescription("The number of times this system has seen sysChassisState switch from 'noFault' to 'fault' or from 'fault' to 'noFault'. Corresponds directly to the value labeled 'Crate Transition Count: in the SERVER ALTERNATE STATUS display.")
sysResourceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResourceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sysResourceNumber.setDescription('The number of resource entries in the Resource table.')
sysFeatureNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFeatureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sysFeatureNumber.setDescription('The number of feature entries in the Feature table.')
resTable = MibTable((1, 3, 6, 1, 4, 1, 33, 1, 32), )
if mibBuilder.loadTexts: resTable.setStatus('mandatory')
if mibBuilder.loadTexts: resTable.setDescription('A list of resource entries. The number of entries is given by the value of sysResourceNumber.')
resEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 1, 32, 1), ).setIndexNames((0, "ITOUCH-SYSTEM-MIB", "resType"))
if mibBuilder.loadTexts: resEntry.setStatus('mandatory')
if mibBuilder.loadTexts: resEntry.setDescription('Status values for a system resource.')
resType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))).clone(namedValues=NamedValues(("cpuPercent", 1), ("memoryPercent", 2), ("process", 3), ("timer", 4), ("packetBuffer", 5), ("ipcMessage", 6), ("textPool", 7), ("freeMemory", 8), ("globalMemoryPercent", 9), ("phivDecnetRouteCache", 10), ("ipFilterCache", 11), ("ipRouteCache", 12), ("ipxRouteCache", 13), ("ipPolicyTable", 14), ("ipFilterTable", 15), ("phivDecnetPolicyTable", 16), ("phivDecnetFilterTable", 17), ("appleRouteCache", 18), ("appleFilterTable", 19), ("repeaterPortAccessTable", 20), ("repeaterPortNameTable", 21), ("ipxRipTable", 22), ("ipxSapTable", 23), ("repeaterPortSecurityTable", 24), ("bridgeFilterTable", 25), ("bridgeStaticFilters", 26), ("bridgeSourceFilters", 27), ("bridgeLearnedFilters", 28), ("bridgeInactiveFilters", 29), ("bridgeProtocolFilters", 30), ("latAnnouncementCompressionTable", 31), ("packetCompressionTable", 32), ("ipFragmentTable", 33), ("repeaterRedundancyTable", 34), ("repeaterGlobalSecurityTable", 35), ("packetHeaders", 36), ("interfaces", 37), ("circuits", 38), ("ipIgmpTable", 39), ("ipMulticastTable", 40), ("ipRouteTable", 41), ("ipxRipFilterTable", 42), ("ipxSapFilterTable", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resType.setStatus('mandatory')
if mibBuilder.loadTexts: resType.setDescription("Identification of a resource type. Typically corresponds directly to a label such as 'Processes:' in the SERVER ALTERNATE STATUS display.")
resCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: resCurrent.setDescription("The number of resources currently in use on the system. Typically corresponds directly to a value labeled 'Cur' in the SERVER ALTERNATE STATUS display.")
resWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resWorst.setStatus('mandatory')
if mibBuilder.loadTexts: resWorst.setDescription("The highest or lowest value of resCurrent since system initialization. Typically corresponds directly to a value labeled 'High' or 'Low' in the SERVER ALTERNATE STATUS display.")
resAdminMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resAdminMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: resAdminMaximum.setDescription("The desired maximum possible number of resources in the system. In many cases, ACCESS to this object for a particular resType is read-only. Typically corresponds directly to a value labeled 'Max' in the SERVER ALTERNATE STATUS display for desired, administrative values. When the desired change takes effect is implementation specific, ranging from immediately to the next system initialization.")
resLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resLacks.setStatus('mandatory')
if mibBuilder.loadTexts: resLacks.setDescription("The number of times since system initialization that the system could not obtain the resource because none were available. Typically corresponds directly to a value labeled 'Failure' in the SERVER ALTERNATE STATUS display. If such failures do not apply to the particular resource, such as 'cpuPercent', the agent returns zero for this object.")
resLackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 6), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resLackTime.setStatus('mandatory')
if mibBuilder.loadTexts: resLackTime.setDescription("The local system date and time when resLack last increased. Typically corresponds directly to a value labeled 'Last Occurred' in the SERVER ALTERNATE STATUS display. If such failures do not apply to the particular resource, such as 'cpuPercent', the agent returns all zeroes (unknown) for this object.")
resOperMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resOperMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: resOperMaximum.setDescription("The current maximum possible number of resources in the system. Typically corresponds directly to a value labeled 'Max' in the SERVER ALTERNATE STATUS display for current operational values. This value is based on current or previous value of resAdminMaximum.")
featTable = MibTable((1, 3, 6, 1, 4, 1, 33, 1, 33), )
if mibBuilder.loadTexts: featTable.setStatus('mandatory')
if mibBuilder.loadTexts: featTable.setDescription('A list of feature entries. The number of entries is given by the value of sysFeatureNumber.')
featEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 1, 33, 1), ).setIndexNames((0, "ITOUCH-SYSTEM-MIB", "featType"))
if mibBuilder.loadTexts: featEntry.setStatus('mandatory')
if mibBuilder.loadTexts: featEntry.setDescription('Status values for a system feature.')
featType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("help", 1), ("snmp", 2), ("xremote", 3), ("tn3270", 4), ("menu", 5), ("multisessions", 6), ("lat", 7), ("eventLog", 8), ("internetSecurity", 9), ("slip", 10), ("scriptServer", 11), ("kerberos", 12), ("telnet", 13), ("rlogin", 14), ("allPorts", 15), ("xprinter", 16), ("x25", 17), ("frameRelay", 18), ("ipMulticastSpecial", 19), ("changeEthernetAddress", 20), ("expanded800", 21), ("lpDaemon", 22), ("ppp", 23), ("unixCommands", 24), ("arap", 25), ("fingerDaemon", 26), ("routeDaemon", 27), ("rwhoDaemon", 28), ("securID", 29), ("apd", 30), ("ipxRouting", 31), ("ipxFiltering", 32), ("ipFiltering", 33), ("kerberos5", 34), ("radius", 35), ("enviromentalManager", 36), ("terminalServer", 37), ("ssh", 38), ("tl1", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: featType.setStatus('mandatory')
if mibBuilder.loadTexts: featType.setDescription('Identification of a feature type. Corresponds to a SERVER feature keyword.')
featStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("locked", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: featStatus.setStatus('mandatory')
if mibBuilder.loadTexts: featStatus.setDescription("The status of the feature as of the next system initialization. Corresponds to the presence of the feature's lable following the label 'Enabled Feature(s): in the UNIT display.")
featKey = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 33, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: featKey.setStatus('mandatory')
if mibBuilder.loadTexts: featKey.setDescription("The key a management system must supply to make a locked feature available. When unlocking a feature and the management system does not supply a value for featStatus, that object's value is implementation dependent. When returning this value, the agent always returns a zero length DisplayString.")
xBootControl = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 1, 34))
bootControlLoadInternetFile = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadInternetFile.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadInternetFile.setDescription("The filename to request when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD FILE and the value labeled 'Internet Load File:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadInternetServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadInternetServer.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadInternetServer.setDescription("The internet address of the server to use when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD HOST and the value labeled 'Internet Load Host:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadInternetGateway = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadInternetGateway.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadInternetGateway.setDescription("The internet address of the gateway to use when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD GATEWAY and the value labeled 'Internet Load Gateway:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadBootpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadBootpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadBootpTftp.setDescription("Control for loading via the combination of BOOTP and TFTP. Corresponds to SERVER LOAD PROTOCOL BOOTPTFTP and the presence of 'BOOTP/TFTP/' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadTftpDirect = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadTftpDirect.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadTftpDirect.setDescription("Control for loading via directed TFTP. Corresponds to SERVER LOAD PROTOCOL TFTPDIRECT and the presence of 'TFTPDIRECT' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadLocal = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadLocal.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadLocal.setDescription("Control for loading from a local medium. Corresponds to SERVER LOAD PROTOCOL LOCAL and the presence of 'LOCAL' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadMop = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadMop.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadMop.setDescription("Control for loading via DEC MOP. Corresponds to SERVER LOAD PROTOCOL MOP and the presence of 'MOP' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadProprietary = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadProprietary.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadProprietary.setDescription("Control for loading via ITouch-proprietary extended MOP. Corresponds to SERVER LOAD PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadRarpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadRarpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadRarpTftp.setDescription("Control for loading via the combination of RARP and TFTP. Corresponds to SERVER LOAD PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpBootpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpBootpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpBootpTftp.setDescription("Control for dumping via the combination of BOOTP and TFTP. Corresponds to SERVER DUMP PROTOCOL BOOTPTFTP and the presence of 'BOOTP/TFTP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpLocal = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpLocal.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpLocal.setDescription("Control for dumping to a local medium. Corresponds to SERVER DUMP PROTOCOL LOCAL and the presence of 'Local' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpMop = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpMop.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpMop.setDescription("Control for dumping via DEC MOP. Corresponds to SERVER DUMP PROTOCOL MOP and the presence of 'MOP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpProprietary = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpProprietary.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpProprietary.setDescription("Control for dumping via ITouch-proprietary extended MOP. Corresponds to SERVER DUMP PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpRarpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpRarpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpRarpTftp.setDescription("Control for dumping via the combination of RARP and TFTP. Corresponds to SERVER DUMP PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamBootpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamBootpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamBootpTftp.setDescription("Control for loading parameters via the combination of BOOTP and TFTP. Corresponds to SERVER PARAMETER PROTOCOL MOP and the presence of 'BOOTP/TFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamLocal = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamLocal.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamLocal.setDescription("Control for loading parameters from a local medium. Corresponds to SERVER PARAMETER PROTOCOL LOCAL and the presence of 'LOCAL' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamMop = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamMop.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamMop.setDescription("Control for loading parameters via DEC MOP. Corresponds to SERVER PARAMETER PROTOCOL MOP and the presence of 'MOP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamProprietary = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamProprietary.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamProprietary.setDescription("Control for loading parameters via ITouch-proprietary extended MOP. Corresponds to SERVER PARAMETER PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamRarpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamRarpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamRarpTftp.setDescription("Control for loading parameters via the combination of RARP and TFTP. Corresponds to SERVER PARAMETER PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
sysInstalledMemory = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInstalledMemory.setStatus('mandatory')
if mibBuilder.loadTexts: sysInstalledMemory.setDescription("The total number of bytes of main memory installed in the system. Corresponds directly to the value labeled 'Installed' on the SERVER ALTERNATE STATUS display. A value of 0 indicates standard memory for the particular hardware.")
sysTemperatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTemperatureLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sysTemperatureLevel.setDescription("The temperature level of the system. 'unknown' indicates the system does not support a temperature sensor. 'normal' indicates a normal temperature level. 'high' indicates an excessive temperature level. Corresponds directly to the value labeled 'Temperature Level:' in the SERVER ALTERNATE STATUS display.")
bootRecordTable = MibTable((1, 3, 6, 1, 4, 1, 33, 1, 37), )
if mibBuilder.loadTexts: bootRecordTable.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordTable.setDescription('A list of boot control records.')
bootRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 1, 37, 1), ).setIndexNames((0, "ITOUCH-SYSTEM-MIB", "bootRecordIndex"))
if mibBuilder.loadTexts: bootRecordEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordEntry.setDescription('Values for a boot record.')
bootRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootRecordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordIndex.setDescription('An index value that uniquely identifies a boot control record entry, from 1 to the number of entries for the system.')
bootRecordLoadInternetFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadInternetFile.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadInternetFile.setDescription("The filename to request when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD FILE and the value labeled 'Internet Load File:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadInternetServer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadInternetServer.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadInternetServer.setDescription("The internet address of the server to use when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD HOST and the value labeled 'Internet Load Host:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadInternetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadInternetGateway.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadInternetGateway.setDescription("The internet address of the gateway to use when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD GATEWAY and the value labeled 'Internet Load Gateway:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadBootpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadBootpTftp.setDescription("Control for loading via the combination of BOOTP and TFTP. Corresponds to SERVER LOAD PROTOCOL BOOTPTFTP and the presence of 'BOOTP/TFTP/' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadTftpDirect.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadTftpDirect.setDescription("Control for loading via directed TFTP. Corresponds to SERVER LOAD PROTOCOL TFTPDIRECT and the presence of 'TFTPDIRECT' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadLocal.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadLocal.setDescription("Control for loading from a local medium. Corresponds to SERVER LOAD PROTOCOL LOCAL and the presence of 'LOCAL' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadMop.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadMop.setDescription("Control for loading via DEC MOP. Corresponds to SERVER LOAD PROTOCOL MOP and the presence of 'MOP' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadProprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadProprietary.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadProprietary.setDescription("Control for loading via ITouch-proprietary extended MOP. Corresponds to SERVER LOAD PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadRarpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadRarpTftp.setDescription("Control for loading via the combination of RARP and TFTP. Corresponds to SERVER LOAD PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpBootpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpBootpTftp.setDescription("Control for dumping via the combination of BOOTP and TFTP. Corresponds to SERVER DUMP PROTOCOL BOOTPTFTP and the presence of 'BOOTP/TFTP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpLocal.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpLocal.setDescription("Control for dumping to a local medium. Corresponds to SERVER DUMP PROTOCOL LOCAL and the presence of 'Local' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpMop.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpMop.setDescription("Control for dumping via DEC MOP. Corresponds to SERVER DUMP PROTOCOL MOP and the presence of 'MOP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpProprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpProprietary.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpProprietary.setDescription("Control for dumping via ITouch-proprietary extended MOP. Corresponds to SERVER DUMP PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpRarpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpRarpTftp.setDescription("Control for dumping via the combination of RARP and TFTP. Corresponds to SERVER DUMP PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamBootpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamBootpTftp.setDescription("Control for loading parameters via the combination of BOOTP and TFTP. Corresponds to SERVER PARAMETER PROTOCOL MOP and the presence of 'BOOTP/TFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamLocal.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamLocal.setDescription("Control for loading parameters from a local medium. Corresponds to SERVER PARAMETER PROTOCOL LOCAL and the presence of 'LOCAL' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamMop.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamMop.setDescription("Control for loading parameters via DEC MOP. Corresponds to SERVER PARAMETER PROTOCOL MOP and the presence of 'MOP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamProprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamProprietary.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamProprietary.setDescription("Control for loading parameters via ITouch-proprietary extended MOP. Corresponds to SERVER PARAMETER PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamRarpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamRarpTftp.setDescription("Control for loading parameters via the combination of RARP and TFTP. Corresponds to SERVER PARAMETER PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordStatus.setDescription("The status of the entry. Set to 'disabled' to disable the entry.")
bootRecordMopFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordMopFile.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordMopFile.setDescription('The software file name to request for down-line load of the server via MOP or XMOP.')
bootRecordInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordInternetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordInternetAddress.setDescription('The internet address of the system is to use for itself when loading via TFTP. The value 0.0.0.0 indicates default action.')
bootRecordParamTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamTftpDirect.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamTftpDirect.setDescription("Control for loading parameters via the protocol DTFTP. Corresponds to SERVER PARAMETER PROTOCOL DTFTP and the presence of 'DTFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordInternetDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordInternetDelimiter.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordInternetDelimiter.setDescription('The character separating the load file directory name from the file name.')
sysLastAgentError = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noError", 1), ("tooBig", 2), ("noSuchName", 3), ("badValue", 4), ("readOnly", 5), ("genErr", 6), ("badCommunity", 7), ("badVersion", 8), ("badType", 9), ("badClient", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastAgentError.setStatus('mandatory')
if mibBuilder.loadTexts: sysLastAgentError.setDescription("The most recent error the agent encountered in attempting to satisfy an SNMP request. Reading this value has the side effect of resetting it to 'noError'.")
sysRcpMulticast = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRcpMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: sysRcpMulticast.setDescription("Control for sending of the MOP RCP system identifier message. Corresponds directly to the presence of 'RCP Multicast' under the label 'Enabled Characteristics' in the SERVER CHARACTERISTICS display.")
sysTimeServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 41), TypedAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTimeServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeServerAddress.setDescription('The address of the time server, either an IpAddr or an ethernet address.')
sysTimeServerConfiguredAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 46), TypedAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeServerConfiguredAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeServerConfiguredAddress.setDescription('The address of a configured time server (, either an IpAddr or an ethernet address).')
sysTimeServerConfiguredStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("required", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeServerConfiguredStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeServerConfiguredStatus.setDescription('Control whether the sysTimeServerConfiguredAddress is the only time server used to obtain the time (REQUIRED), the first time server used to obtain the time (ENABLED), or not used to obtain the time (DISABLED).')
sysBootRecordOverrideDefinedAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootRecordOverrideDefinedAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysBootRecordOverrideDefinedAddress.setDescription('Control to override the internally defined Internet address with that obtained from the bootp loading protocol.')
sysBootRecordMessageEnable = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootRecordMessageEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sysBootRecordMessageEnable.setDescription("Control to display load status messages during reboot. Corresponds directly to the value labeled 'Status Message:' in the SERVER LOADDUMP display.")
sysBootRecordParamDefaults = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootRecordParamDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: sysBootRecordParamDefaults.setDescription("Control to use default parameters upon the next reboot after which time this control reverts to disabled. This control only applies to stand-alone devices. Corresponds directly to the value labeled 'Default Parameters:' in the SERVER LOADDUMP display.")
sysLoginAuthFailureTrapType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("loginPassword", 2), ("pap", 3), ("chap", 4), ("kerberos", 5), ("securId", 6), ("radius", 7), ("privilegedPassword", 8), ("limitedPrivilegedPassword", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoginAuthFailureTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoginAuthFailureTrapType.setDescription('Indicates the type of authentication failure which last occurred.')
sysLoginAuthTrapIdentity = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoginAuthTrapIdentity.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoginAuthTrapIdentity.setDescription('An identification string for the circuit or port where an authentication failure last occurred.')
sysLocalScriptServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalScriptServer.setStatus('mandatory')
if mibBuilder.loadTexts: sysLocalScriptServer.setDescription('Control to allow script serving for this system from a script residing in a local flash card.')
sysInReachManagementSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInReachManagementSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysInReachManagementSecurityStatus.setDescription('Indicates whether per port authentication is in use. This includes username, password, privilege level, and list of power outlets controlled by that user, or console connections allowed from that port.')
sysProductName = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductName.setStatus('mandatory')
if mibBuilder.loadTexts: sysProductName.setDescription('Displays the product name of this system.')
sysModemPresent = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noModem", 1), ("modem", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModemPresent.setStatus('mandatory')
if mibBuilder.loadTexts: sysModemPresent.setDescription('Indicates whether this system has a built-in modem.')
sysCauseAction = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCauseAction.setStatus('mandatory')
if mibBuilder.loadTexts: sysCauseAction.setDescription("A control for toggling the cause action feature. Corresponds directly to the presence of 'Trigger/Action' under the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display. The desired change will not take effect until the next system initialization.")
sysWebServerConfigAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebServerConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysWebServerConfigAdminStatus.setDescription("A control for bring the web server up or down. Corresponds directly to the presence of 'Web Server' under the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
sysTl1SourceIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 88), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTl1SourceIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: sysTl1SourceIdentifier.setDescription('The source identifier (SID) is the server name used by TL1 to identify the server.')
sysInitializeDelayParameter = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInitializeDelayParameter.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitializeDelayParameter.setDescription("Control to begin the system initialization process providing that at least one parameter server is current. Corresponds directly to the INITIALIZE DELAY PARAMETER command. In response to a get-request or get-next-request, the agent always returns 'ready' for this value.")
resourceLack = NotificationType((1, 3, 6, 1, 4, 1, 33, 1) + (0,1)).setObjects(("ITOUCH-SYSTEM-MIB", "resType"))
if mibBuilder.loadTexts: resourceLack.setDescription('Indication that the system incremented the corresponding value of resLacks.')
resourceFailure = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,9)).setObjects(("ITOUCH-SYSTEM-MIB", "resType"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: resourceFailure.setDescription('Indication that a system resource lack occurred of the type resType.')
sysLoginAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,28)).setObjects(("ITOUCH-SYSTEM-MIB", "sysLoginAuthFailureTrapType"), ("ITOUCH-SYSTEM-MIB", "sysLoginAuthTrapIdentity"))
if mibBuilder.loadTexts: sysLoginAuthenticationFailure.setDescription('Indicates when and where a user attempted and failed to access the system.')
mibBuilder.exportSymbols("ITOUCH-SYSTEM-MIB", sysLoaderAddressType=sysLoaderAddressType, bootRecordDumpRarpTftp=bootRecordDumpRarpTftp, sysHardwareVersion=sysHardwareVersion, resourceLack=resourceLack, sysCauseAction=sysCauseAction, sysChassisState=sysChassisState, sysInitialize=sysInitialize, bootControlLoadBootpTftp=bootControlLoadBootpTftp, sysLocalScriptServer=sysLocalScriptServer, sysLoginAuthenticationFailure=sysLoginAuthenticationFailure, featTable=featTable, resLackTime=resLackTime, bootRecordInternetDelimiter=bootRecordInternetDelimiter, sysProductName=sysProductName, sysHardwareType=sysHardwareType, sysDateTime=sysDateTime, sysFeatureNumber=sysFeatureNumber, bootRecordDumpMop=bootRecordDumpMop, bootRecordLoadTftpDirect=bootRecordLoadTftpDirect, sysBootRecordParamDefaults=sysBootRecordParamDefaults, sysTl1SourceIdentifier=sysTl1SourceIdentifier, bootControlLoadInternetFile=bootControlLoadInternetFile, bootRecordLoadProprietary=bootRecordLoadProprietary, sysTemperatureLevel=sysTemperatureLevel, resOperMaximum=resOperMaximum, bootControlDumpMop=bootControlDumpMop, sysZeroBase=sysZeroBase, bootControlLoadLocal=bootControlLoadLocal, sysBootRecordOverrideDefinedAddress=sysBootRecordOverrideDefinedAddress, sysMaintenancePassword=sysMaintenancePassword, bootControlLoadMop=bootControlLoadMop, sysResourceLacks=sysResourceLacks, resWorst=resWorst, resTable=resTable, bootRecordDumpBootpTftp=bootRecordDumpBootpTftp, bootRecordInternetAddress=bootRecordInternetAddress, resourceFailure=resourceFailure, bootRecordMopFile=bootRecordMopFile, bootControlLoadInternetServer=bootControlLoadInternetServer, bootRecordLoadInternetFile=bootRecordLoadInternetFile, sysTimeZone=sysTimeZone, bootControlParamProprietary=bootControlParamProprietary, sysBootRecordMessageEnable=sysBootRecordMessageEnable, bootControlDumpProprietary=bootControlDumpProprietary, sysDefineMode=sysDefineMode, bootControlParamBootpTftp=bootControlParamBootpTftp, sysLoadSoftware=sysLoadSoftware, sysInReachManagementSecurityStatus=sysInReachManagementSecurityStatus, sysInstalledMemory=sysInstalledMemory, resAdminMaximum=resAdminMaximum, resEntry=resEntry, featStatus=featStatus, sysLoaderName=sysLoaderName, featType=featType, sysRcpMulticast=sysRcpMulticast, xBootControl=xBootControl, bootRecordTable=bootRecordTable, bootControlDumpRarpTftp=bootControlDumpRarpTftp, bootRecordStatus=bootRecordStatus, sysIdent=sysIdent, bootRecordDumpLocal=bootRecordDumpLocal, bootRecordParamLocal=bootRecordParamLocal, bootRecordLoadBootpTftp=bootRecordLoadBootpTftp, bootRecordLoadInternetServer=bootRecordLoadInternetServer, featEntry=featEntry, sysDumperAddress=sysDumperAddress, sysTimeServerConfiguredStatus=sysTimeServerConfiguredStatus, sysLocalName=sysLocalName, bootRecordLoadInternetGateway=bootRecordLoadInternetGateway, sysChassisType=sysChassisType, bootControlParamLocal=bootControlParamLocal, sysSoftwareVersionType=sysSoftwareVersionType, sysWebServerConfigAdminStatus=sysWebServerConfigAdminStatus, bootRecordParamBootpTftp=bootRecordParamBootpTftp, resType=resType, bootControlDumpLocal=bootControlDumpLocal, bootControlLoadProprietary=bootControlLoadProprietary, bootControlLoadRarpTftp=bootControlLoadRarpTftp, bootControlParamRarpTftp=bootControlParamRarpTftp, sysTimeServerConfiguredAddress=sysTimeServerConfiguredAddress, xSystem=xSystem, bootRecordLoadLocal=bootRecordLoadLocal, bootRecordParamMop=bootRecordParamMop, resLacks=resLacks, sysZeroBaseTime=sysZeroBaseTime, bootRecordEntry=bootRecordEntry, bootControlDumpBootpTftp=bootControlDumpBootpTftp, bootControlParamMop=bootControlParamMop, sysLastAgentError=sysLastAgentError, sysInitializeDelay=sysInitializeDelay, featKey=featKey, bootRecordLoadMop=bootRecordLoadMop, resCurrent=resCurrent, sysZeroAll=sysZeroAll, sysDump=sysDump, bootRecordDumpProprietary=bootRecordDumpProprietary, sysSoftwareVersion=sysSoftwareVersion, sysTimeServerAddress=sysTimeServerAddress, sysDumperAddressType=sysDumperAddressType, bootControlLoadTftpDirect=bootControlLoadTftpDirect, sysLoginAuthTrapIdentity=sysLoginAuthTrapIdentity, bootRecordParamTftpDirect=bootRecordParamTftpDirect, bootRecordIndex=bootRecordIndex, sysLoginAuthFailureTrapType=sysLoginAuthFailureTrapType, sysChassisFaultTransitions=sysChassisFaultTransitions, bootControlLoadInternetGateway=bootControlLoadInternetGateway, bootRecordLoadRarpTftp=bootRecordLoadRarpTftp, bootRecordParamProprietary=bootRecordParamProprietary, bootRecordParamRarpTftp=bootRecordParamRarpTftp, sysInitializeDelayParameter=sysInitializeDelayParameter, sysLoaderAddress=sysLoaderAddress, sysChassisVersion=sysChassisVersion, sysModemPresent=sysModemPresent, sysResourceNumber=sysResourceNumber, sysCrash=sysCrash, sysRomVersion=sysRomVersion)
