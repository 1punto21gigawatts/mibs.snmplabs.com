#
# PySNMP MIB module CISCO-APS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-APS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, Integer32, Counter64, transmission, ModuleIdentity, Unsigned32, iso, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "Integer32", "Counter64", "transmission", "ModuleIdentity", "Unsigned32", "iso", "MibIdentifier", "IpAddress")
RowStatus, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TimeStamp")
cApsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 71))
cApsMIB.setRevisions(('2001-12-26 12:00', '2001-04-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cApsMIB.setRevisionsDescriptions(('Latest version of the IETF draft.', 'A draft version of the APS MIB.',))
if mibBuilder.loadTexts: cApsMIB.setLastUpdated('200112261200Z')
if mibBuilder.loadTexts: cApsMIB.setOrganization('Cisco Systems, inc')
if mibBuilder.loadTexts: cApsMIB.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS Email: gsr-netman@cisco.com')
if mibBuilder.loadTexts: cApsMIB.setDescription('This management information module supports the configuration and management of SONET linear APS groups. The definitions and descriptions used in this mib have been derived from Synchronous Optical Network (SONET) Transport Systems: Common Generic Criteria, GR-253-CORE Revision 2, January 1999,section 5.3. The MIB is also consistent with the Multiplex Section Protection (MSP) protocol as specified in ITU-T Recommendation G.783, Characteristics of synchronous digital hierarchy (SDH) equipment function blocks, Annex A and B. This MIB was extracted from internet draft draft-ietf-atommib-sonetaps-mib-05.txt for SONET Linear APS architectures, by J. Johnson, M. Thatcher, and J. Kuhfeld. ')
cApsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 71, 1))
cApsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 71, 2))
cApsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 71, 3))
class CApsK1K2(TextualConvention, OctetString):
    reference = 'Bellcore (Telcordia Technologies) GR-253-CORE, Issue 2,Revision 2 (January 1999), 5.3.5.'
    description = 'This Textual Convention describes an object that stores a SONET K1 and K2 byte Aps protocol field. K1 is located in the first octet, K2 is located in the second octet. Bits are numbered from left to right, with the most significant bit being the leftmost. Bits 1-4 of the K1 byte indicate a request. 1111 Lockout of Protection 1110 Forced Switch 1101 SF - High Priority 1100 SF - Low Priority 1011 SD - High Priority 1010 SD - Low Priority 1001 not used 1000 Manual Switch 0111 not used 0110 Wait-to-Restore 0101 not used 0100 Exercise 0011 not used 0010 Reverse Request 0001 Do Not Revert 0000 No Request Bits 5-8 of the K1 byte indicate the channel associated with the request defined in bits 1-4. 0000 is the Null channel. 1-14 are working channels. 15 is the extra traffic channel Bits 1-4 of the K2 byte indicate a channel. The channel is defined with the same syntax as K1 Bits 5-8. Bit 5 of the K2 byte indicates the architecture. 0 if the architecture is 1+1 1 if the architecture is 1:n Bits 6-8 of the K2 byte indicates the mode. 000 - 011 are reserved for future use 100 indicates the mode is unidirectional 101 indicates the mode is bidirectional 110 RDI-L 111 AIS-L '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class CApsSwitchCommand(TextualConvention, Integer32):
    description = 'An Aps switch command allows a user to perform protection switch actions. The Switch command values are: noCmd This value should be returned by a read request when no switch command has been written to the object in question since initialization. This value may not be used in a write operation. clear Clears all of the switch commands listed below for the specified channel. lockoutOfProtection Prevents any of the working channels from switching to the protection line. The specified channel should be the protection channel. forcedSwitchWorkToProtect Switches the specified working channel to the protection line. forcedSwitchProtectToWork Switches the working channel back from the protection line to the working line. The specified channel should be the protection channel. manualSwitchWorkToProtect Switches the specified working channel to the protection line. manualSwitchProtectToWork Switches the working channel back from the protection line to the working line. The specified channel should be the protection channel. exercise Exercises the protocol for a protection switch of the specified channel by issuing an Exercise request for that channel and checking the response on the Aps channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("noCmd", 1), ("clear", 2), ("lockoutOfProtection", 3), ("forcedSwitchWorkToProtect", 4), ("forcedSwitchProtectToWork", 5), ("manualSwitchWorkToProtect", 6), ("manualSwitchProtectToWork", 7), ("exercise", 8))

class CApsControlCommand(TextualConvention, Integer32):
    description = 'An APS control command applies only to LTE that support the 1:n architecture and performs the following actions. The Control command values are: noCmd This value should be returned by a read request when no control command has been written to the object in question since initialization. This value may not be used in a write operation. lockoutWorkingChannel Prevents the specified working channel from switching to the protection line. clearLockoutWorkingChannel Clears the lockout a working channel command for the channel specified.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noCmd", 1), ("lockoutWorkingChannel", 2), ("clearLockoutWorkingChannel", 3))

cApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1))
cApsConfigGroups = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsConfigGroups.setStatus('current')
if mibBuilder.loadTexts: cApsConfigGroups.setDescription('The count of APS groups. This count includes all rows in cApsConfigTable.')
cApsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2), )
if mibBuilder.loadTexts: cApsConfigTable.setStatus('current')
if mibBuilder.loadTexts: cApsConfigTable.setDescription('This table lists the APS groups that have been configured on the system.')
cApsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1), ).setIndexNames((1, "CISCO-APS-MIB", "cApsConfigName"))
if mibBuilder.loadTexts: cApsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cApsConfigEntry.setDescription('A conceptual row in the cApsConfigTable.')
cApsConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cApsConfigName.setStatus('current')
if mibBuilder.loadTexts: cApsConfigName.setDescription('A textual name for the APS group. ')
cApsConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cApsConfigRowStatus.setDescription('The status of this APS group entry. An entry may not exist in the active state unless all objects in the entry have an appropriate value. Also, all associated cApsChanConfigEntry rows must represent a set of consecutive channel numbers beginning with 0 or 1, depending on the selected architecture. When set to notInService changes may be made to cApsConfigMode, cApsConfigRevert, cApsConfigDirection, cApsConfigExtraTraffic, cApsConfigSdBerThreshold, cApsConfigSfBerThreshold, and cApsConfigWaitToRestore. Also, associated cApsChanConfigTable objects may be added, deleted and modified.')
cApsConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("onePlusOne", 1), ("oneToN", 2), ("onePlusOneCompatible", 3), ("onePlusOneOptimized", 4))).clone('onePlusOne')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsConfigMode.setStatus('current')
if mibBuilder.loadTexts: cApsConfigMode.setDescription('The architecture of the APS group. onePlusOne The 1+1 architecture permanently bridges the working line to the protection line. oneToN The 1:n architecture allows one protection channel to protect up to n working channels. When a fault is detected on one of the n working channels that channel is bridged over the protection channel. onePlusOneCompatible This refers to 1 + 1 bidirectional switching compatible with 1:n bidirectional switching as specified in ITU-T Recommendation G.783 (04/97) section A.3.4.1. Since this mode necessitates bidirectional switching, cApsConfigDirection must be set to bidirectional whenever onePlusOneCompatible is set. onePlusOneOptimized This refers to 1 + 1 bidirectional switching optimized for a network using predominantly 1 + 1 bidirectional switching as specified in ITU-T Recommendation G.783 (04/97) section B.1. Since this mode necessitates bidirectional switching, cApsConfigDirection must be set to bidirectional whenever onePlusOneOptimized is set. This object may not be modified if the associated cApsConfigRowStatus object is equal to active(1).')
cApsConfigRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonrevertive", 1), ("revertive", 2))).clone('nonrevertive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsConfigRevert.setStatus('current')
if mibBuilder.loadTexts: cApsConfigRevert.setDescription('The revertive mode of the APS group. nonrevertive Traffic remains on the protection line until another switch request is received. revertive When the condition that caused a switch to the protection line has been cleared the signal is switched back to the working line. Since switching is revertive with the 1:n architecture, cApsConfigRevert must be set to revertive if cApsConfigMode is set to oneToN. Switching may optionally be revertive with the 1+1 architecture. This object may not be modified if the associated cApsConfigRowStatus object is equal to active(1). ')
cApsConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2))).clone('unidirectional')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsConfigDirection.setStatus('current')
if mibBuilder.loadTexts: cApsConfigDirection.setDescription('The directional mode of the APS group. unidirectional The unidirectional mode provides protection in one direction. bidirectional The bidirectional mode provides protection in both directions. This object may not be modified if the associated cApsConfigRowStatus object is equal to active(1).')
cApsConfigExtraTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsConfigExtraTraffic.setStatus('current')
if mibBuilder.loadTexts: cApsConfigExtraTraffic.setDescription("This object enables or disables the transfer of extra traffic on the protection channel in a 1:n architecture. This object must be set to disabled if the architecture is 1+1. It may be necessary to disable this in order to interwork with other SONET network elements that don't support extra traffic. This object may not be modified if the associated cApsConfigRowStatus object is equal to active(1).")
cApsConfigSdBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsConfigSdBerThreshold.setStatus('current')
if mibBuilder.loadTexts: cApsConfigSdBerThreshold.setDescription('The Signal Degrade Bit Error Rate. The negated value of this number is used as the exponent of 10 for computing the threshold value for the Bit Error Rate (BER). For example, a value of 5 indicates a BER threshold of 10^-5. This object may be modified if the associated cApsConfigRowStatus object is equal to active(1).')
cApsConfigSfBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsConfigSfBerThreshold.setStatus('current')
if mibBuilder.loadTexts: cApsConfigSfBerThreshold.setDescription('The Signal Failure Bit Error Rate. The negated value of this number is used as the exponent of 10 for computing the threshold value for the Bit Error Rate (BER). For example, a value of 5 indicates a BER threshold of 10^-5. This object may be modified if the associated cApsConfigRowStatus object is equal to active(1).')
cApsConfigWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 720)).clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsConfigWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: cApsConfigWaitToRestore.setDescription('The Wait To Restore period in seconds. After clearing of a condition that necessitated an automatic switch, the wait to restore period must elapse before reverting. This is intended to avoid rapid switch oscillations. GR-253-CORE specifies a Wait To Restore range of 5 to 12 minutes. G.783 defines a 5 to 12 minute Wait To Restore range in section 5.4.1.1.3, but also allows for a shorter WTR period in Table 2-1, WaitToRestore value (MI_WTRtime: 0..(5)..12 minutes). This object may not be modified if the associated cApsConfigRowStatus object is equal to active(1).')
cApsConfigCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 1, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsConfigCreationTime.setStatus('current')
if mibBuilder.loadTexts: cApsConfigCreationTime.setDescription('The value of sysUpTime at the time the row was created')
cApsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2), )
if mibBuilder.loadTexts: cApsStatusTable.setStatus('current')
if mibBuilder.loadTexts: cApsStatusTable.setDescription('This table provides status information about APS groups that have been configured on the system.')
cApsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2, 1), ).setIndexNames((1, "CISCO-APS-MIB", "cApsConfigName"))
if mibBuilder.loadTexts: cApsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cApsStatusEntry.setDescription('A conceptual row in the cApsStatusTable. Entries in this table are created as a side effect of row addition in cApsConfigTable.')
cApsStatusK1K2Rcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2, 1, 1), CApsK1K2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsStatusK1K2Rcv.setStatus('current')
if mibBuilder.loadTexts: cApsStatusK1K2Rcv.setDescription('The current value of the K1 and K2 bytes received on the protection channel.')
cApsStatusK1K2Trans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2, 1, 2), CApsK1K2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsStatusK1K2Trans.setStatus('current')
if mibBuilder.loadTexts: cApsStatusK1K2Trans.setDescription('The current value of the K1 and K2 bytes transmitted on the protection channel.')
cApsStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("modeMismatch", 0), ("channelMismatch", 1), ("psbf", 2), ("feplf", 3), ("extraTraffic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsStatusCurrent.setStatus('current')
if mibBuilder.loadTexts: cApsStatusCurrent.setDescription('The current status of the APS group. modeMismatch Modes other than 1+1 unidirectional monitor protection line K2 bit 5, which indicates the architecture and K2 bits 6-8, which indicate if the mode is unidirectional or bidirectional. A conflict between the current local mode and the received K2 mode information constitutes a mode mismatch. channelMismatch This bit indicates a mismatch between the transmitted K1 channel and the received K2 channel has been detected. psbf This bit indicates a Protection Switch Byte Failure (PSBF) is in effect. This condition occurs when either an inconsistent APS byte or an invalid code is detected. An inconsistent APS byte occurs when no three consecutive K1 bytes of the last 12 successive frames are identical, starting with the last frame containing a previously consistent byte. An invalid code occurs when the incoming K1 byte contains an unused code or a code irrelevant for the specific switching operation (e.g., Reverse Request while no switching request is outstanding) in three consecutive frames. An invalid code also occurs when the incoming K1 byte contains an invalid channel number in three consecutive frames. feplf Modes other than 1+1 unidirectional monitor the K1 byte for Far-End Protection-Line failures. A Far-End Protection-Line defect is declared based on receiving SF on the protection line. extraTraffic This bit indicates whether extra traffic is currently being accepted on the protection line.')
cApsStatusModeMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsStatusModeMismatches.setStatus('current')
if mibBuilder.loadTexts: cApsStatusModeMismatches.setDescription('A count of Mode Mismatch conditions.')
cApsStatusChannelMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsStatusChannelMismatches.setStatus('current')
if mibBuilder.loadTexts: cApsStatusChannelMismatches.setDescription('A count of Channel Mismatch conditions.')
cApsStatusPSBFs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsStatusPSBFs.setStatus('current')
if mibBuilder.loadTexts: cApsStatusPSBFs.setDescription('A count of Protection Switch Byte Failure conditions. This condition occurs when either an inconsistent APS byte or an invalid code is detected. An inconsistent APS byte occurs when no three consecutive K1 bytes of the last 12 successive frames are identical, starting with the last frame containing a previously consistent byte. An invalid code occurs when the incoming K1 byte contains an unused code or a code irrelevant for the specific switching operation (e.g., Reverse Request while no switching request is outstanding) in three consecutive frames. An invalid code also occurs when the incoming K1 byte contains an invalid channel number in three consecutive frames.')
cApsStatusFEPLFs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsStatusFEPLFs.setStatus('current')
if mibBuilder.loadTexts: cApsStatusFEPLFs.setDescription('A count of Far-End Protection-Line Failure conditions. This condition is declared based on receiving SF on the protection line in the K1 byte.')
cApsStatusSwitchedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsStatusSwitchedChannel.setStatus('current')
if mibBuilder.loadTexts: cApsStatusSwitchedChannel.setDescription('This field is set to the number of the channel that is currently switched to protection. The value 0 indicates no channel is switched to protection. The values 1-14 indicate that working channel is switched to protection.')
cApsMap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 3))
cApsChanLTEs = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsChanLTEs.setStatus('current')
if mibBuilder.loadTexts: cApsChanLTEs.setDescription('The count of SONET LTE interfaces on the system. Each interface that is included has an ifType value of sonet(39).')
cApsMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 3, 2), )
if mibBuilder.loadTexts: cApsMapTable.setStatus('current')
if mibBuilder.loadTexts: cApsMapTable.setDescription('This table lists the SONET LTE interfaces on the system. Each interface that is listed has an ifType value of sonet(39).')
cApsMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-APS-MIB", "cApsMapIfIndex"))
if mibBuilder.loadTexts: cApsMapEntry.setStatus('current')
if mibBuilder.loadTexts: cApsMapEntry.setDescription('A conceptual row in the cApsMapTable.')
cApsMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cApsMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: cApsMapIfIndex.setDescription('The Interface Index assigned to a SONET LTE. This is an interface with ifType sonet(39).')
cApsMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsMapGroupName.setStatus('current')
if mibBuilder.loadTexts: cApsMapGroupName.setDescription('A textual name for the APS group which this channel is included in. If the channel is not part of an APS group this value is set to a string of size 0. When an instance of cApsChanConfigIfIndex is set equal to an instance of cApsMapIfIndex, cApsMapGroupName is set equal to the corresponding value of cApsChanConfigGroupName. If the cApsMapIfIndex ceases to be equal to an instance of cApsChanConfigIfIndex, either because of a change in the value of cApsChanConfigIfIndex, or because of row deletion in the CApsChanConfigTable, cApsMapGroupName is set to a string of size 0. ')
cApsMapChanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsMapChanNumber.setStatus('current')
if mibBuilder.loadTexts: cApsMapChanNumber.setDescription('This field is set to a unique channel number within an APS group. The value 0 indicates the null channel. The values 1-14 define a working channel. If the SONET LTE is not part of an APS group this value is set to -1. When an instance of cApsChanConfigIfIndex is set equal to an instance of cApsMapIfIndex, cApsMapChanNumber is set equal to the corresponding value of cApsChanConfigNumber. If the cApsMapIfIndex ceases to be equal to an instance of cApsChanConfigIfIndex, either because of a change in the value of cApsChanConfigIfIndex, or because of row deletion in the CApsChanConfigTable, cApsMapChanNumber is set to -1.')
cApsChanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 4), )
if mibBuilder.loadTexts: cApsChanConfigTable.setStatus('current')
if mibBuilder.loadTexts: cApsChanConfigTable.setDescription('This table lists the APS channels that have been configured in APS groups.')
cApsChanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 4, 1), ).setIndexNames((0, "CISCO-APS-MIB", "cApsChanConfigGroupName"), (0, "CISCO-APS-MIB", "cApsChanConfigNumber"))
if mibBuilder.loadTexts: cApsChanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cApsChanConfigEntry.setDescription('A conceptual row in the cApsChanConfigTable.')
cApsChanConfigGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cApsChanConfigGroupName.setStatus('current')
if mibBuilder.loadTexts: cApsChanConfigGroupName.setDescription('A textual name for the APS group which this channel is included in.')
cApsChanConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14)))
if mibBuilder.loadTexts: cApsChanConfigNumber.setStatus('current')
if mibBuilder.loadTexts: cApsChanConfigNumber.setDescription('This field is set to a unique channel number within an APS group. The value 0 indicates the null channel. The values 1-14 define a working channel. This field must be assigned a unique number within the group.')
cApsChanConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsChanConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cApsChanConfigRowStatus.setDescription('The status of this APS channel entry. An entry may not exist in the active state unless all objects in the entry have an appropriate value. A row in the cApsChanConfigTable may not be created, deleted, set to notInService or otherwise modified if the cApsChanConfigGroupName value is equal to an cApsConfigName value and the associated cApsConfigRowStatus object is equal to active. However, if the cApsConfigRowStatus object is equal to notInService, a row may be created, deleted or modified. In other words, a channel may not be added, deleted or modified if the group is active. A row may be created with an cApsChanConfigGroupName value that is not equal to any existing instance of cApsConfigName. This action is the initial step in adding a SONET LTE to a new APS group. If this object is set to destroy, the associated instance of cApsMapGroupName will be set to a string of size 0 and the cApsMapChanNumber will be set to -1. The channel status entry will also be deleted by this action. cApsChanConfigNumber must be set to a unique channel number within the APS group. The value 0 indicates the null channel. The values 1-14 define a working channel. When an attempt is made to set the corresponding cApsConfigRowStatus field to active the cApsChanConfigNumber values of all entries with equal cApsChanConfigGroupName fields must represent a set of consecutive integer values beginning with 0 or 1, depending on the architecture of the group, and ending with n, where n is greater than or equal to 1 and less than or equal to 14. Otherwise, the error inconsistentValue is returned to the cApsConfigRowStatus set attempt. ')
cApsChanConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 4, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsChanConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: cApsChanConfigIfIndex.setDescription('The Interface Index assigned to a SONET LTE. This is an interface with ifType sonet(39). The value of this object must be unique among all instances of cApsChanConfigIfIndex. In other words, a particular SONET LTE can only be configured n one APS group. This object cannot be set if the cApsChanConfigGroupName instance associated with this row is equal to an instance of cApsConfigName and the corresponding cApsConfigRowStatus object is set to active. In other words this value cannot be changed if the APS group is active. However, This value may be changed if the cApsConfigRowStatus value is equal to notInService. ')
cApsChanConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cApsChanConfigPriority.setStatus('current')
if mibBuilder.loadTexts: cApsChanConfigPriority.setDescription('The priority of the channel. This field deterimines whether high or low priority SD and SF codes are used in K1 requests. This field is only applicable if the channel is to be included in a group using the 1:n architecture. It is not applicable if the channel is to be included in a group using the 1+1 architecture, and is ignored in that case. This object cannot be set if the cApsChanConfigGroupName instance associated with this row is equal to an instance of cApsConfigName and the corresponding cApsConfigRowStatus object is set to active. In other words this value cannot be changed if the APS group is active. However, This value may be changed if the cApsConfigRowStatus value is equal to notInService. ')
cApsCommandTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 5), )
if mibBuilder.loadTexts: cApsCommandTable.setStatus('current')
if mibBuilder.loadTexts: cApsCommandTable.setDescription('This table allows commands to be sent to configured APS groups.')
cApsCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 5, 1), ).setIndexNames((0, "CISCO-APS-MIB", "cApsChanConfigGroupName"), (0, "CISCO-APS-MIB", "cApsChanConfigNumber"))
if mibBuilder.loadTexts: cApsCommandEntry.setStatus('current')
if mibBuilder.loadTexts: cApsCommandEntry.setDescription('A conceptual row in the cApsCommandTable. This row exists only if the associated cApsConfigEntry is active.')
cApsCommandSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 5, 1, 1), CApsSwitchCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cApsCommandSwitch.setStatus('current')
if mibBuilder.loadTexts: cApsCommandSwitch.setDescription('Allows the initiation of an APS switch command on the APS group and channel specified by the index values. If the APS switch command cannot be executed because an equal or higer priority request is in effect, an error is returned. When read this object returns the last command written or noCmd if no command has been written to this channel since initialization. The return of the last command written does not imply that this command is currently in effect. This request may have been preempted by a higher priority local or remote request. In order to determine the current state of the APS group it is necessary to read the objects cApsStatusK1K2Rcv and cApsStatusK1K2Trans. The value lockoutOfProtection should only be applied to the protection line channel since that switch command prevents any of the working channels from switching to the protection line. Following the same logic, forcedSwitchProtectToWork and manualSwitchProtectToWork should only be applied to the protection line channel. forcedSwitchWorkToProtect and manualSwitchWorkToProtect should only be applied to a working channel. ')
cApsCommandControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 5, 1, 2), CApsControlCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cApsCommandControl.setStatus('current')
if mibBuilder.loadTexts: cApsCommandControl.setDescription('Allows the initiation of an APS control command on the APS group and channel specified by the index values. When read this object returns the last command written or noCmd if no command has been written to this channel since initialization. This object does not apply to the protection line. ')
cApsChanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 6), )
if mibBuilder.loadTexts: cApsChanStatusTable.setStatus('current')
if mibBuilder.loadTexts: cApsChanStatusTable.setDescription('This table contains status information for all SONET LTE interfaces that are included in APS groups.')
cApsChanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 6, 1), ).setIndexNames((0, "CISCO-APS-MIB", "cApsChanConfigGroupName"), (0, "CISCO-APS-MIB", "cApsChanConfigNumber"))
if mibBuilder.loadTexts: cApsChanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cApsChanStatusEntry.setDescription('A conceptual row in the cApsChanStatusTable. A row in this table is created as a side effect of row addition in the cApsChanConfigTable. The cApsChanStatusTable row exists as long as the cApsChanConfigTable entry exists, regardless of whether the associated cApsChanConfigRowStatus is active. ')
cApsChanStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 6, 1, 1), Bits().clone(namedValues=NamedValues(("lockedOut", 0), ("sd", 1), ("sf", 2), ("switched", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsChanStatusCurrent.setStatus('current')
if mibBuilder.loadTexts: cApsChanStatusCurrent.setDescription('Indicates the current state of the port. lockedOut This bit, when applied to a working channel, indicates that the channel is prevented from switching to the protection line. When applied to the null channel, this bit indicates that no working channel may switch to the protection line. sd A signal degrade condition is in effect. sf A signal failure condition is in effect. switched The switched bit is applied to a working channel if that channel is currently switched to the protection line. ')
cApsChanStatusSignalDegrades = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsChanStatusSignalDegrades.setStatus('current')
if mibBuilder.loadTexts: cApsChanStatusSignalDegrades.setDescription('A count of Signal Degrade conditions. This condition occurs when the line Bit Error Rate exceeds the currently configured threshold.')
cApsChanStatusSignalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsChanStatusSignalFailures.setStatus('current')
if mibBuilder.loadTexts: cApsChanStatusSignalFailures.setDescription('A count of Signal Failure conditions that have been detected on the incoming signal. This condition occurs when a loss of signal, loss of frame, AIS-L or a Line bit error rate exceeding 10^-3 is detected on an incoming line.')
cApsChanStatusSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsChanStatusSwitchovers.setStatus('current')
if mibBuilder.loadTexts: cApsChanStatusSwitchovers.setDescription('The number of times this channel has switched to the protection line. When queried with index value cApsChanConfigNumber set to 0, which is the protection line, this object will return 0.')
cApsChanStatusLastSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 6, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsChanStatusLastSwitchover.setStatus('current')
if mibBuilder.loadTexts: cApsChanStatusLastSwitchover.setDescription('The value of sysUpTime when this channel last completed a switch to the protection line. If this channel has never switched to the protection line, or this channel is the protection line, the value 0 will be returned.')
cApsChanStatusSwitchoverSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 71, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cApsChanStatusSwitchoverSeconds.setStatus('current')
if mibBuilder.loadTexts: cApsChanStatusSwitchoverSeconds.setDescription('The cumulative Protection Switching Duration (PSD) time in seconds. For a working channel, this is the cumulative number of seconds that service was carried on the protection line.For the protection line, this is the cumulative number of seconds that the protection line has been used to carry any working channel traffic. This information is only valid if revertive switching is enabled. The value 0 will be returned otherwise.')
cApsNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 71, 2, 0))
cApsEventSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 71, 2, 0, 1)).setObjects(("CISCO-APS-MIB", "cApsChanStatusSwitchovers"), ("CISCO-APS-MIB", "cApsChanStatusCurrent"))
if mibBuilder.loadTexts: cApsEventSwitchover.setStatus('current')
if mibBuilder.loadTexts: cApsEventSwitchover.setDescription('An cApsEventSwitchover notification is sent when the value of an instance of cApsChanStatusSwitchovers increments.')
cApsEventModeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 71, 2, 0, 2)).setObjects(("CISCO-APS-MIB", "cApsStatusModeMismatches"), ("CISCO-APS-MIB", "cApsStatusCurrent"))
if mibBuilder.loadTexts: cApsEventModeMismatch.setStatus('current')
if mibBuilder.loadTexts: cApsEventModeMismatch.setDescription('An cApsEventModeMismatch notification is sent when the value of an instance of cApsStatusModeMismatches increments.')
cApsEventChannelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 71, 2, 0, 3)).setObjects(("CISCO-APS-MIB", "cApsStatusChannelMismatches"), ("CISCO-APS-MIB", "cApsStatusCurrent"))
if mibBuilder.loadTexts: cApsEventChannelMismatch.setStatus('current')
if mibBuilder.loadTexts: cApsEventChannelMismatch.setDescription('An cApsEventChannelMismatch notification is sent when the value of an instance of cApsStatusChannelMismatches increments.')
cApsEventPSBF = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 71, 2, 0, 4)).setObjects(("CISCO-APS-MIB", "cApsStatusPSBFs"), ("CISCO-APS-MIB", "cApsStatusCurrent"))
if mibBuilder.loadTexts: cApsEventPSBF.setStatus('current')
if mibBuilder.loadTexts: cApsEventPSBF.setDescription('An cApsEventPSBF notification is sent when the value of an instance of cApsStatusPSBFs increments.')
cApsEventFEPLF = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 71, 2, 0, 5)).setObjects(("CISCO-APS-MIB", "cApsStatusFEPLFs"), ("CISCO-APS-MIB", "cApsStatusCurrent"))
if mibBuilder.loadTexts: cApsEventFEPLF.setStatus('current')
if mibBuilder.loadTexts: cApsEventFEPLF.setDescription('An cApsEventFEPLFs notification is sent when the value of an instance of cApsStatusFEPLFs increments.')
cApsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1))
cApsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 2))
cApsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 2, 1)).setObjects(("CISCO-APS-MIB", "cApsConfigGeneral"), ("CISCO-APS-MIB", "cApsStatusGeneral"), ("CISCO-APS-MIB", "cApsChanGeneral"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsCompliance = cApsCompliance.setStatus('current')
if mibBuilder.loadTexts: cApsCompliance.setDescription('The compliance statement for linear APS groups.')
cApsConfigGeneral = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 1)).setObjects(("CISCO-APS-MIB", "cApsConfigMode"), ("CISCO-APS-MIB", "cApsConfigRevert"), ("CISCO-APS-MIB", "cApsConfigDirection"), ("CISCO-APS-MIB", "cApsConfigExtraTraffic"), ("CISCO-APS-MIB", "cApsConfigSdBerThreshold"), ("CISCO-APS-MIB", "cApsConfigSfBerThreshold"), ("CISCO-APS-MIB", "cApsConfigCreationTime"), ("CISCO-APS-MIB", "cApsConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsConfigGeneral = cApsConfigGeneral.setStatus('current')
if mibBuilder.loadTexts: cApsConfigGeneral.setDescription('A collection of cApsConfigTable objects providing configuration information applicable to all linear APS groups.')
cApsConfigWtr = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 2)).setObjects(("CISCO-APS-MIB", "cApsConfigWaitToRestore"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsConfigWtr = cApsConfigWtr.setStatus('current')
if mibBuilder.loadTexts: cApsConfigWtr.setDescription('The cApsConfigTable object that provides information which is applicable to groups supporting a configurable WTR period.')
cApsCommandOnePlusOne = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 3)).setObjects(("CISCO-APS-MIB", "cApsCommandSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsCommandOnePlusOne = cApsCommandOnePlusOne.setStatus('current')
if mibBuilder.loadTexts: cApsCommandOnePlusOne.setDescription('The cApsCommandTable object which is applicable to groups implementing the linear APS 1+1 architecture. Also, set operations must be supported.')
cApsCommandOneToN = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 4)).setObjects(("CISCO-APS-MIB", "cApsCommandSwitch"), ("CISCO-APS-MIB", "cApsCommandControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsCommandOneToN = cApsCommandOneToN.setStatus('current')
if mibBuilder.loadTexts: cApsCommandOneToN.setDescription('A collection of cApsCommandTable objects which are applicable to groups implementing the linear APS 1:n architecture. Also, set operations must be supported.')
cApsStatusGeneral = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 5)).setObjects(("CISCO-APS-MIB", "cApsStatusK1K2Rcv"), ("CISCO-APS-MIB", "cApsStatusK1K2Trans"), ("CISCO-APS-MIB", "cApsStatusCurrent"), ("CISCO-APS-MIB", "cApsStatusModeMismatches"), ("CISCO-APS-MIB", "cApsStatusChannelMismatches"), ("CISCO-APS-MIB", "cApsStatusPSBFs"), ("CISCO-APS-MIB", "cApsStatusFEPLFs"), ("CISCO-APS-MIB", "cApsStatusSwitchedChannel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsStatusGeneral = cApsStatusGeneral.setStatus('current')
if mibBuilder.loadTexts: cApsStatusGeneral.setDescription('A collection of cApsStatusTable objects providing status information applicable to all linear APS groups.')
cApsChanGeneral = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 6)).setObjects(("CISCO-APS-MIB", "cApsChanConfigIfIndex"), ("CISCO-APS-MIB", "cApsChanConfigRowStatus"), ("CISCO-APS-MIB", "cApsChanStatusCurrent"), ("CISCO-APS-MIB", "cApsChanStatusSignalDegrades"), ("CISCO-APS-MIB", "cApsChanStatusSignalFailures"), ("CISCO-APS-MIB", "cApsChanStatusSwitchovers"), ("CISCO-APS-MIB", "cApsChanStatusLastSwitchover"), ("CISCO-APS-MIB", "cApsChanStatusSwitchoverSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsChanGeneral = cApsChanGeneral.setStatus('current')
if mibBuilder.loadTexts: cApsChanGeneral.setDescription('A collection of channel objects providing information applicable to all linear APS channels.')
cApsChanOneToN = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 7)).setObjects(("CISCO-APS-MIB", "cApsChanConfigPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsChanOneToN = cApsChanOneToN.setStatus('current')
if mibBuilder.loadTexts: cApsChanOneToN.setDescription('The cApsChanConfigTable object that provides information which is only applicable to groups implementing the linear APS 1:n architecture.')
cApsTotalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 8)).setObjects(("CISCO-APS-MIB", "cApsConfigGroups"), ("CISCO-APS-MIB", "cApsChanLTEs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsTotalsGroup = cApsTotalsGroup.setStatus('current')
if mibBuilder.loadTexts: cApsTotalsGroup.setDescription('A collection of objects providing optional counts of configured APS groups and SONET LTE interfaces.')
cApsMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 9)).setObjects(("CISCO-APS-MIB", "cApsMapGroupName"), ("CISCO-APS-MIB", "cApsMapChanNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsMapGroup = cApsMapGroup.setStatus('current')
if mibBuilder.loadTexts: cApsMapGroup.setDescription('A collection of cApsMapTable objects providing a mapping from sonet(39) InterfaceIndex to group name and channel number for assigned APS channels and a list of unassigned sonet(39) interfaces.')
cApsEventOptional = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 71, 3, 1, 10)).setObjects(("CISCO-APS-MIB", "cApsEventSwitchover"), ("CISCO-APS-MIB", "cApsEventModeMismatch"), ("CISCO-APS-MIB", "cApsEventChannelMismatch"), ("CISCO-APS-MIB", "cApsEventPSBF"), ("CISCO-APS-MIB", "cApsEventFEPLF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cApsEventOptional = cApsEventOptional.setStatus('current')
if mibBuilder.loadTexts: cApsEventOptional.setDescription('A collection of SONET linear APS notifications that may optionally be implemented.')
mibBuilder.exportSymbols("CISCO-APS-MIB", cApsStatusEntry=cApsStatusEntry, cApsEventPSBF=cApsEventPSBF, cApsChanStatusSignalDegrades=cApsChanStatusSignalDegrades, cApsConfigEntry=cApsConfigEntry, cApsChanOneToN=cApsChanOneToN, cApsConfigCreationTime=cApsConfigCreationTime, cApsConfigSdBerThreshold=cApsConfigSdBerThreshold, cApsStatusCurrent=cApsStatusCurrent, cApsMIB=cApsMIB, cApsChanConfigPriority=cApsChanConfigPriority, cApsChanStatusLastSwitchover=cApsChanStatusLastSwitchover, cApsChanConfigGroupName=cApsChanConfigGroupName, cApsConfigExtraTraffic=cApsConfigExtraTraffic, cApsCompliances=cApsCompliances, cApsStatusModeMismatches=cApsStatusModeMismatches, cApsMapGroup=cApsMapGroup, cApsChanStatusSwitchovers=cApsChanStatusSwitchovers, cApsEventModeMismatch=cApsEventModeMismatch, cApsConfigTable=cApsConfigTable, cApsChanConfigNumber=cApsChanConfigNumber, PYSNMP_MODULE_ID=cApsMIB, cApsMapGroupName=cApsMapGroupName, CApsSwitchCommand=CApsSwitchCommand, cApsChanConfigTable=cApsChanConfigTable, cApsConfigSfBerThreshold=cApsConfigSfBerThreshold, cApsConfigRevert=cApsConfigRevert, cApsChanStatusEntry=cApsChanStatusEntry, cApsStatusGeneral=cApsStatusGeneral, cApsStatusK1K2Trans=cApsStatusK1K2Trans, cApsEventSwitchover=cApsEventSwitchover, cApsNotificationsPrefix=cApsNotificationsPrefix, cApsConfigName=cApsConfigName, cApsChanConfigRowStatus=cApsChanConfigRowStatus, cApsChanLTEs=cApsChanLTEs, cApsMapIfIndex=cApsMapIfIndex, cApsConfigGeneral=cApsConfigGeneral, cApsCommandOneToN=cApsCommandOneToN, cApsMIBObjects=cApsMIBObjects, cApsStatusFEPLFs=cApsStatusFEPLFs, cApsChanStatusCurrent=cApsChanStatusCurrent, cApsChanGeneral=cApsChanGeneral, cApsChanConfigEntry=cApsChanConfigEntry, cApsMap=cApsMap, cApsStatusPSBFs=cApsStatusPSBFs, cApsMapChanNumber=cApsMapChanNumber, cApsCompliance=cApsCompliance, cApsStatusK1K2Rcv=cApsStatusK1K2Rcv, cApsStatusChannelMismatches=cApsStatusChannelMismatches, cApsConfigGroups=cApsConfigGroups, cApsChanStatusSignalFailures=cApsChanStatusSignalFailures, cApsConfig=cApsConfig, cApsChanStatusSwitchoverSeconds=cApsChanStatusSwitchoverSeconds, cApsCommandControl=cApsCommandControl, cApsStatusTable=cApsStatusTable, cApsCommandTable=cApsCommandTable, cApsConfigWaitToRestore=cApsConfigWaitToRestore, cApsMapEntry=cApsMapEntry, cApsGroups=cApsGroups, CApsControlCommand=CApsControlCommand, cApsChanStatusTable=cApsChanStatusTable, cApsMapTable=cApsMapTable, cApsStatusSwitchedChannel=cApsStatusSwitchedChannel, cApsConfigRowStatus=cApsConfigRowStatus, cApsConfigMode=cApsConfigMode, CApsK1K2=CApsK1K2, cApsConfigWtr=cApsConfigWtr, cApsMIBConformance=cApsMIBConformance, cApsCommandSwitch=cApsCommandSwitch, cApsEventChannelMismatch=cApsEventChannelMismatch, cApsTotalsGroup=cApsTotalsGroup, cApsChanConfigIfIndex=cApsChanConfigIfIndex, cApsCommandOnePlusOne=cApsCommandOnePlusOne, cApsEventOptional=cApsEventOptional, cApsCommandEntry=cApsCommandEntry, cApsMIBNotifications=cApsMIBNotifications, cApsEventFEPLF=cApsEventFEPLF, cApsConfigDirection=cApsConfigDirection)
