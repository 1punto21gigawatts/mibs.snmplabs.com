#
# PySNMP MIB module G6-FACTORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/G6-FACTORY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
g6, = mibBuilder.importSymbols("MICROSENS-G6-MIB", "g6")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, ModuleIdentity, MibIdentifier, enterprises, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Bits, Integer32, Counter64, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "ModuleIdentity", "MibIdentifier", "enterprises", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Bits", "Integer32", "Counter64", "Counter32", "Gauge32")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
device = ModuleIdentity((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1))
device.setRevisions(('2015-05-22 10:59',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: device.setRevisionsDescriptions(('File creation',))
if mibBuilder.loadTexts: device.setLastUpdated('201505221059Z')
if mibBuilder.loadTexts: device.setOrganization('MICROSENS GmbH & Co. KG')
if mibBuilder.loadTexts: device.setContactInfo('Kueferstrasse 16 D-59067 Hamm Germany support@microsens.de http://www.microsens.de')
if mibBuilder.loadTexts: device.setDescription('Microsens private MIB for Generation 6 Ethernet Switches')
factory = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32))
factoryArticleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryArticleNumber.setStatus('current')
if mibBuilder.loadTexts: factoryArticleNumber.setDescription('This device article number.')
factorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factorySerialNumber.setStatus('current')
if mibBuilder.loadTexts: factorySerialNumber.setDescription('This device serial number.')
factoryDeviceMac = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryDeviceMac.setStatus('current')
if mibBuilder.loadTexts: factoryDeviceMac.setDescription('This device MAC address.')
factoryNumberOfMacs = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryNumberOfMacs.setStatus('current')
if mibBuilder.loadTexts: factoryNumberOfMacs.setDescription('Number of MAC addresses this device supports.')
factoryHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: factoryHardwareVersion.setDescription('This device hardware revision number.')
factoryBoardId = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryBoardId.setStatus('current')
if mibBuilder.loadTexts: factoryBoardId.setDescription('This identifies the basic hardware type for internal operation.')
factoryProjectNumber = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryProjectNumber.setStatus('current')
if mibBuilder.loadTexts: factoryProjectNumber.setDescription('Development project number.')
factoryMechanicalFeatures = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 8), Bits().clone(namedValues=NamedValues(("desktop", 0), ("rail", 1), ("ductVertical", 2), ("ductHorizontal", 3), ("rack", 4), ("stackable", 5), ("unused6", 6), ("unused7", 7), ("dc", 8), ("ac", 9), ("dualPwr", 10), ("unused11", 11), ("extTemp", 12), ("extSupply", 13), ("exSecure", 14), ("unused15", 15), ("unused16", 16), ("microSd", 17), ("sdcard", 18), ("internalMemory", 19), ("unused20", 20), ("unused21", 21), ("ip30", 22), ("ip42", 23), ("ip44", 24), ("ip55", 25), ("ip67", 26), ("unused27", 27), ("unused28", 28), ("unused29", 29), ("unused30", 30), ("unused31", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryMechanicalFeatures.setStatus('current')
if mibBuilder.loadTexts: factoryMechanicalFeatures.setDescription('Bit mask which identifies mechanical features of this device.')
factoryHardwareFeatures = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 9), Bits().clone(namedValues=NamedValues(("poePlus", 0), ("poePse", 1), ("poePd", 2), ("unused3", 3), ("unused4", 4), ("unused5", 5), ("eee", 6), ("synce", 7), ("ms1588", 8), ("usb", 9), ("relays", 10), ("rtc", 11), ("unused12", 12), ("unused13", 13), ("unused14", 14), ("csfp", 15), ("sfp", 16), ("lc", 17), ("sc", 18), ("st", 19), ("e2000", 20), ("unused21", 21), ("unused22", 22), ("unused23", 23), ("unused24", 24), ("unused25", 25), ("unused26", 26), ("unused27", 27), ("unused28", 28), ("unused29", 29), ("unused30", 30), ("unused31", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryHardwareFeatures.setStatus('current')
if mibBuilder.loadTexts: factoryHardwareFeatures.setDescription('Bit mask which identifies installed hardware features of this device.')
factoryCompanyName = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryCompanyName.setStatus('current')
if mibBuilder.loadTexts: factoryCompanyName.setDescription('Complete name and address of the manufacturing company.')
factoryCompanyShort = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryCompanyShort.setStatus('current')
if mibBuilder.loadTexts: factoryCompanyShort.setDescription('Shorthand name of the manufacturing company.')
factoryWebLink = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryWebLink.setStatus('current')
if mibBuilder.loadTexts: factoryWebLink.setDescription('Link to company homepage.')
factoryWebDescription = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryWebDescription.setStatus('current')
if mibBuilder.loadTexts: factoryWebDescription.setDescription('Product feature summary.')
factoryCustomInfo = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 32, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: factoryCustomInfo.setStatus('current')
if mibBuilder.loadTexts: factoryCustomInfo.setDescription('This field can be used to permanently store custom inventory or location data. The data are stored within the device in unremovable storage and thus will persist even when the SD card or the entire configuration is changed.')
mibBuilder.exportSymbols("G6-FACTORY-MIB", factoryBoardId=factoryBoardId, factoryWebLink=factoryWebLink, factoryProjectNumber=factoryProjectNumber, factoryHardwareVersion=factoryHardwareVersion, factoryDeviceMac=factoryDeviceMac, factorySerialNumber=factorySerialNumber, factoryCustomInfo=factoryCustomInfo, device=device, factoryHardwareFeatures=factoryHardwareFeatures, factoryCompanyName=factoryCompanyName, factoryCompanyShort=factoryCompanyShort, factoryNumberOfMacs=factoryNumberOfMacs, factoryWebDescription=factoryWebDescription, factoryArticleNumber=factoryArticleNumber, factoryMechanicalFeatures=factoryMechanicalFeatures, factory=factory, PYSNMP_MODULE_ID=device)
