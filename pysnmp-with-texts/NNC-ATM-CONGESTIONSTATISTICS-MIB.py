#
# PySNMP MIB module NNC-ATM-CONGESTIONSTATISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNC-ATM-CONGESTIONSTATISTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
NncExtIntvlStateType, = mibBuilder.importSymbols("NNC-INTERVAL-STATISTICS-TC-MIB", "NncExtIntvlStateType")
NncExtCounter64, nncExtensions = mibBuilder.importSymbols("NNCGNI0001-SMI", "NncExtCounter64", "nncExtensions")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, Bits, Integer32, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, MibIdentifier, TimeTicks, Gauge32, ModuleIdentity, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Integer32", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "MibIdentifier", "TimeTicks", "Gauge32", "ModuleIdentity", "ObjectIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nncAtmCongestionStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 63))
if mibBuilder.loadTexts: nncAtmCongestionStatistics.setLastUpdated('9807141255Z')
if mibBuilder.loadTexts: nncAtmCongestionStatistics.setOrganization('Newbridge Networks Corporation')
if mibBuilder.loadTexts: nncAtmCongestionStatistics.setContactInfo('Newbridge Networks Corporation Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncAtmCongestionStatistics.setDescription('This module contains the definitions for congestion statistics on ATM products. Congestion statistics allow the user to monitor the performance of a particular congestion point in order to alleviate future congestion problems. This MIB module contains the following tables: ATM Congestion Point Information Table ATM Raw Congestion Statistics Table. ATM Current Short Interval Congestion Statistics Table. ATM Short Interval Congestion Statistics Table. ATM Current Long Interval Congestion Statistics Table. ATM Long Interval Congestion Statistics Table. The following tables describe the mapping between a congestion point and the qualities of service available on the 36170. Each card configuration is assigned a hardware type, which is then used to determine which qualities of service are available for that particular card configuration. Release 4.0 of the 36170 supports only OC12-1 hardware. Table 1 associates a number with each hardware type. The hardware type is a function of: - type of card, - queue and QOS configuration based on ASIC used on the card, - fabric type, - switch profile, - congestion point. The Congestion Point Index is to be used as nncAtmCongPointInfoIndex, nncAtmCongPointRawIndex, nncAtmCongPointCurrentShortIntvlIndex, nncAtmCongPointShortIntvlIndex, nncAtmCongPointCurrentLongIntvlIndex, and nncAtmCongPointLongIntvlIndex. Table 2 consists of columns for each hardware type indicating which qualities of service are available for the particular hardware type. The Index column associates a number for each quality of service, which is used as the nncAtmCongStatsQOSRawIndex, nncAtmCongStatsQOSCurrentShortIntvlIndex, nncAtmCongStatsQOSShortIntvlIndex, nncAtmCongStatsQOSCurrentLongIntvlIndex, and nncAtmCongStatsQOSLongIntvlIndex. ________________________________________________________ | | SHub Diablo | SHub NSX | SHub Eagle | |___________|______________|______________|______________| |Congestion | | | | | | | | Point | MUX | SWITCH | MUX | SWITCH | MUX | SWITCH | |___________|_____|________|_____|________|_____|________| |Congestion | | | | | | | |Point Index|1 , 2| 3 , 4 |1 , 2| 3 , 4 |1 , 2| 3 , 4 | |___________|_____|________|_____|________|_____|________| |________________________________________________________| |2K/12K | | | | |Profile 1 | H/W Type 1 | H/W Type 1 | H/W Type 1 | |___________|______________|______________|______________| |2K/12K | | | | |Profile 2 | H/W Type 2 | H/W Type 2 | H/W Type 2 | |___________|______________|______________|______________| |2K/12K | | | | |Profile 3 | H/W Type 3 | H/W Type 3 | H/W Type 3 | |___________|______________|______________|______________| |2K/12K | | | | |Profile 4 | H/W Type 4 | H/W Type 4 | H/W Type 4 | |___________|______________|______________|______________| |32K | H/W Type 3 | H/W Type 3 | 5 | 3 | |___________|______________|______________|_____|________| Table 1: Fabric and linecard Hardware Type configurations ___________________________________________________________________ | | DSC NSX | |___________|_______________________________________________________| |Congestion | | | | | | | | | | Point | DRX1 | DRX2 | DRX3 | DRX4 | DRX5 | DRX6 | DRX7 | DRX8 | |___________|______|______|______|______|______|______|______|______| |Congestion | | | | | | | | | |Point Index| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | |___________|______|______|______|______|______|______|______|______| |___________________________________________________________________| |2K/12K | | |Profile 1 | H/W Type 1 | |___________|_______________________________________________________| |2K/12K | | |Profile 2 | H/W Type 2 | |___________|_______________________________________________________| |2K/12K | | |Profile 3 | H/W Type 3 | |___________|_______________________________________________________| |2K/12K | | |Profile 4 | H/W Type 4 | |___________|_______________________________________________________| |32K | H/W Type 3 | |___________|_______________________________________________________| Table 1: Continued ___________________________________________________________________ | | DSC Diablo | |___________|_______________________________________________________| |Congestion | | | | | | | | | | Point | DRX1 | DRX2 | DRX3 | DRX4 | DRX5 | DRX6 | DRX7 | DRX8 | |___________|______|______|______|______|______|______|______|______| |Congestion | | | | | | | | | |Point Index| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | |___________|______|______|______|______|______|______|______|______| |___________________________________________________________________| |2K/12K | | |Profile 1 | H/W Type 1 | |___________|_______________________________________________________| |2K/12K | | |Profile 2 | H/W Type 2 | |___________|_______________________________________________________| |2K/12K | | |Profile 3 | H/W Type 3 | |___________|_______________________________________________________| |2K/12K | | |Profile 4 | H/W Type 4 | |___________|_______________________________________________________| |32K | H/W Type 3 | |___________|_______________________________________________________| Table 1: Continued ____________________________________________________ | | DHub Diablo | DHub Eagle | LSHub Eagle | |___________|_____________|____________|_____________| |Congestion | | | | | Point | MUX | MUX | MUX | |___________|_____________|____________|_____________| |Congestion | | | | |Point Index| 1 | 1 | 1 | |___________|_____________|____________|_____________| |____________________________________________________| |2K/12K | | | | |Profile 1 | H/W Type 1 | H/W Type 1 | H/W Type 1 | |___________|_____________|____________|_____________| |2K/12K | | | | |Profile 2 | H/W Type 2 | H/W Type 2 | H/W Type 2 | |___________|_____________|____________|_____________| |2K/12K | | | | |Profile 3 | H/W Type 3 | H/W Type 3 | H/W Type 3 | |___________|_____________|____________|_____________| |2K/12K | | | | |Profile 4 | H/W Type 4 | H/W Type 4 | H/W Type 4 | |___________|_____________|____________|_____________| |32K | H/W Type 3 | H/W Type 5 | H/W Type 5 | |___________|_____________|____________|_____________| Table 1: Continued _________________________________________________________ | | OC3-1 | OC3-2 | OC12-1 | OC12-2 | |___________|________|________|________|__________________| |Congestion | | | | | | | Point | Egress | Egress | Egress | Ingress | Egress | |___________|________|________|________|_________|________| |Congestion | | | | | | |Point Index| 1 | 1 | 1 | 1 | 2 | |___________|________|________|________|_________|________| |_________________________________________________________| |2K/12K | H/W | H/W | H/W | H/W | |Profile 1 | Type1 | Type1 | Type1 | Type1 | |___________|________|________|________|__________________| |2K/12K | H/W | H/W | H/W | H/W | |Profile 2 | Type2 | Type2 | Type2 | Type2 | |___________|________|________|________|__________________| |2K/12K | H/W | H/W | H/W | H/W | |Profile 3 | Type3 | Type3 | Type3 | Type3 | |___________|________|________|________|__________________| |2K/12K | H/W | H/W | H/W | H/W | |Profile 4 | Type4 | Type4 | Type4 | Type4 | |___________|________|________|________|__________________| |32K | H/W | H/W | H/W | H/W | | | Type3 | Type5 | Type3 | Type5 | |___________|________|________|________|__________________| Table 1: Continued _________________________________________________________________ | | DS3-1 | DS3-2 | |___________|__________________________|__________________________| |Congestion | | | | | | | | Point | Egress | Egress | Egress | Egress | Egress | Egress | |___________|________|________|________|________|________|________| |Congestion | | | | | | | |Point Index| 1 | 2 | 3 | 1 | 2 | 3 | |___________|________|________|________|________|________|________| |_________________________________________________________________| |2K/12K | H/W | H/W | H/W | H/W | H/W | H/W | |Profile 1 | Type1 | Type1 | Type1 | Type1 | Type1 | Type1 | |___________|________|________|________|________|________|________| |2K/12K | H/W | H/W | H/W | H/W | H/W | H/W | |Profile 2 | Type2 | Type2 | Type2 | Type2 | Type2 | Type2 | |___________|________|________|________|________|________|________| |2K/12K | H/W | H/W | H/W | H/W | H/W | H/W | |Profile 3 | Type3 | Type3 | Type3 | Type3 | Type3 | Type3 | |___________|________|________|________|________|________|________| |2K/12K | H/W | H/W | H/W | H/W | H/W | H/W | |Profile 4 | Type4 | Type4 | Type4 | Type4 | Type4 | Type4 | |___________|________|________|________|________|________|________| |32K | H/W | H/W | H/W | H/W | H/W | H/W | | | Type3 | Type3 | Type3 | Type5 | Type5 | Type5 | |___________|________|________|________|________|________|________| Table 1: Continued _________________________________________________________________ | | E3-1 | E3-2 | |___________|__________________________|__________________________| |Congestion | | | | | | | | Point | Egress | Egress | Egress | Egress | Egress | Egress | |___________|________|________|________|________|________|________| |Congestion | | | | | | | |Point Index| 1 | 2 | 3 | 1 | 2 | 3 | |___________|________|________|________|________|________|________| |_________________________________________________________________| |2K/12K | H/W | H/W | H/W | H/W | H/W | H/W | |Profile 1 | Type1 | Type1 | Type1 | Type1 | Type1 | Type1 | |___________|________|________|________|________|________|________| |2K/12K | H/W | H/W | H/W | H/W | H/W | H/W | |Profile 2 | Type2 | Type2 | Type2 | Type2 | Type2 | Type2 | |___________|________|________|________|________|________|________| |2K/12K | H/W | H/W | H/W | H/W | H/W | H/W | |Profile 3 | Type3 | Type3 | Type3 | Type3 | Type3 | Type3 | |___________|________|________|________|________|________|________| |2K/12K | H/W | H/W | H/W | H/W | H/W | H/W | |Profile 4 | Type4 | Type4 | Type4 | Type4 | Type4 | Type4 | |___________|________|________|________|________|________|________| |32K | H/W | H/W | H/W | H/W | H/W | H/W | | | Type3 | Type3 | Type3 | Type5 | Type5 | Type5 | |___________|________|________|________|________|________|________| Table 1: Continued _______________________________________________ | | T1-1 | T1-2 | E1-1 | E1-2 | |___________|________|________|________|________| |Congestion | | | | | | Point | Egress | Egress | Egress | Egress | |___________|________|________|________|________| |Congestion | | | | | |Point Index| 1 | 1 | 1 | 1 | |___________|________|________|________|________| |_______________________________________________| |2K/12K | H/W | H/W | H/W | H/W | |Profile 1 | Type1 | Type1 | Type1 | Type1 | |___________|________|________|________|________| |2K/12K | H/W | H/W | H/W | H/W | |Profile 2 | Type2 | Type2 | Type2 | Type2 | |___________|________|________|________|________| |2K/12K | H/W | H/W | H/W | H/W | |Profile 3 | Type3 | Type3 | Type3 | Type3 | |___________|________|________|________|________| |2K/12K | H/W | H/W | H/W | H/W | |Profile 4 | Type4 | Type4 | Type4 | Type4 | |___________|________|________|________|________| |32K | H/W | H/W | H/W | H/W | | | Type3 | Type5 | Type3 | Type5 | |___________|________|________|________|________| Table 1: Continued _____________________________________________________________ | Quality | | H/W | H/W | H/W | H/W | H/W | | of Service | Index | Type1 | Type2 | Type3 | Type4 | Type5 | |_____________|_______|_______|_______|_______|_______|_______| | CBR | 1 | | | | | X | |_____________|_______|_______|_______|_______|_______|_______| | UBR | 2 | | | | X | X | |_____________|_______|_______|_______|_______|_______|_______| | rt_VBR1 | 3 | | | | | X | |_____________|_______|_______|_______|_______|_______|_______| | rt_VBR2 | 4 | | | | | X | |_____________|_______|_______|_______|_______|_______|_______| | nrt_VBR1_2 | 5 | | | | | X | |_____________|_______|_______|_______|_______|_______|_______| | nrt_VBR3 | 6 | | | | | X | |_____________|_______|_______|_______|_______|_______|_______| | ABR | 7 | | | | | X | |_____________|_______|_______|_______|_______|_______|_______| | CBR_rtVBR | 8 | X | X | X | X | | |_____________|_______|_______|_______|_______|_______|_______| | nrt_VBR/UBR | 9 | X | | | | | |_____________|_______|_______|_______|_______|_______|_______| | ABR/UBR | 10 | | X | X | | | |_____________|_______|_______|_______|_______|_______|_______| | nrt_VBR | 11 | | | X | X | | |_____________|_______|_______|_______|_______|_______|_______| Table 2: QOS supported by each Hardware Type ')
nncAtmCongStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 63, 1))
nncAtmCongStatsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 63, 2))
nncAtmCongStatsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 63, 3))
nncAtmCongPointInfoTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 1), )
if mibBuilder.loadTexts: nncAtmCongPointInfoTable.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointInfoTable.setDescription('The ATM Congestion Point Information table. This table maintains various information for the congestion point specified.')
nncAtmCongPointInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 1, 1), ).setIndexNames((0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityInfoIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointInfoIndex"))
if mibBuilder.loadTexts: nncAtmCongPointInfoEntry.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointInfoEntry.setDescription('An entry in the ATM Congestion Point Information table.')
entPhysicalEntityInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 1, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: entPhysicalEntityInfoIndex.setStatus('current')
if mibBuilder.loadTexts: entPhysicalEntityInfoIndex.setDescription('A unique value that identifies the physical entity, whether it supports Congestion Statistics or not. This value is equivalent to the value of PhysicalIndex.')
nncAtmCongPointInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: nncAtmCongPointInfoIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointInfoIndex.setDescription('A unique value between 1 and 8 that identifies the congestion point on an entity which supports Congestion Statistics.')
nncAtmCongPointHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongPointHardwareType.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointHardwareType.setDescription('A unique value, 1 to 99, that identifies the current hardware type of the congestion point. See Tables 1 and 2 for further details.')
nncAtmCongStatsRawTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2), )
if mibBuilder.loadTexts: nncAtmCongStatsRawTable.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsRawTable.setDescription('The ATM Raw Congestion Statistics table. This table maintains raw per quality of service statistics since the interface was started.')
nncAtmCongStatsRawEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1), ).setIndexNames((0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityRawIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointRawIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSRawIndex"))
if mibBuilder.loadTexts: nncAtmCongStatsRawEntry.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsRawEntry.setDescription('An entry in the ATM Raw Congestion Statistics table.')
entPhysicalEntityRawIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: entPhysicalEntityRawIndex.setStatus('current')
if mibBuilder.loadTexts: entPhysicalEntityRawIndex.setDescription('A unique value that identifies the physical entity, whether it supports Congestion Statistics or not. This value is equivalent to the value of PhysicalIndex.')
nncAtmCongPointRawIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: nncAtmCongPointRawIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointRawIndex.setDescription('A unique value between 1 and 8 that identifies the congestion point on an entity which supports Congestion Statistics.')
nncAtmCongStatsQOSRawIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: nncAtmCongStatsQOSRawIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsQOSRawIndex.setDescription('A number between 1 and 11 that identifies the quality of service on which the set of statistics was collected for an entity. The following table describes the quality of service categories available and their corresponding index. Quality of Service Quality of Service Index ------------------ ------------------------ CBR 1 UBR 2 rt-VBR1 3 rt-VBR2 4 nrt-VBR1-2 5 nrt-VBR3 6 ABR 7 CBR-rtVBR 8 nrt-VBR/UBR 9 ABR/UBR 10 nrt-VBR 11 ')
nncAtmCongStatsTotalCellsArrived = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsTotalCellsArrived.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsTotalCellsArrived.setDescription('Total number of cells received.')
nncAtmCongStatsTotalCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsTotalCellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsTotalCellsDiscarded.setDescription('Total number of cells discarded due to congestion.')
nncAtmCongStatsClp0CellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsClp0CellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsClp0CellsDiscarded.setDescription('Number of CLP 0 cells discarded due to congestion.')
nncAtmCongStatsLowCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLowCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLowCongestedSeconds.setDescription('Number of seconds the congestion point was in the Low Congestion State.')
nncAtmCongStatsMediumCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsMediumCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsMediumCongestedSeconds.setDescription('Number of seconds the congestion point was in the Medium Congestion State.')
nncAtmCongStatsSevereCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsSevereCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsSevereCongestedSeconds.setDescription('Number of seconds the congestion point was in the Severe Congestion State.')
nncAtmCongStatsTotalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsTotalSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsTotalSeconds.setDescription('Total number of seconds the congestion point was in the Normal, Low, Medium, or Severe congestion states.')
nncAtmCongStatsCurrentCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("congStatsNormalState", 1), ("congStatsLowCongState", 2), ("congStatsMediumCongState", 3), ("congStatsSevereCongState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentCongestionState.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentCongestionState.setDescription('Current congestion state of the congestion point - one of Normal, Low, Medium, or Severe. When the current congestion state is determined, the corresponding congestion time counter will increment.')
nncAtmCongStatsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("congStatsAlarmOn", 1), ("congStatsAlarmOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsAlarmStatus.setDescription('Current alarm status - either ON or OFF. When a congestion point has been severely congested for longer than the allowable threshold time the value of this object is set to congStatsAlarmOn. When severe congestion clears, the value of this object is set to congStatsAlarmOff.')
nncAtmCongStatsVirtualBandwidthAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsVirtualBandwidthAvail.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsVirtualBandwidthAvail.setDescription('Percentage of virtual bandwidth that is available for use for each quality of service.')
nncAtmCongStatsCurrentShortIntvlTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3), )
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlTable.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlTable.setDescription('The ATM Current Short Interval Congestion Statistics table. This table maintains current-short interval statistics per quality of service since the interface was started.')
nncAtmCongStatsCurrentShortIntvlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1), ).setIndexNames((0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityCurrentShortIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointCurrentShortIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSCurrentShortIntvlIndex"))
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlEntry.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlEntry.setDescription('An entry in the ATM current-Short Interval Congestion Statistics table.')
entPhysicalEntityCurrentShortIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: entPhysicalEntityCurrentShortIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: entPhysicalEntityCurrentShortIntvlIndex.setDescription('A unique value that identifies the physical entity, whether it supports Congestion Statistics or not. This value is equivalent to the value of PhysicalIndex.')
nncAtmCongPointCurrentShortIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: nncAtmCongPointCurrentShortIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointCurrentShortIntvlIndex.setDescription('A unique value between 1 and 8 that identifies the congestion point on an entity which supports Congestion Statistics.')
nncAtmCongStatsQOSCurrentShortIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: nncAtmCongStatsQOSCurrentShortIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsQOSCurrentShortIntvlIndex.setDescription('A number between 1 and 11 that identifies the quality of service on which the set of statistics was collected for an entity. The following table describes the quality of service categories available and their corresponding index. Quality of Service Quality of Service Index ------------------ ------------------------ CBR 1 UBR 2 rt-VBR1 3 rt-VBR2 4 nrt-VBR1-2 5 nrt-VBR3 6 ABR 7 CBR-rtVBR 8 nrt-VBR/UBR 9 ABR/UBR 10 nrt-VBR 11 ')
nncAtmCongStatsCurrentShortIntvlState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 4), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlState.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlState.setDescription('The state of the interval in the interval statistics interface. Possible states are: normal (1) - normal interval; no change in time and no resets nonexistent (2) - statistics do not exist for this interval userReset (3) - the user has reset statistics collection during this interval start (4) - this is the first interval timeChange (5) - the system time has been changed during this interval ')
nncAtmCongStatsCurrentShortIntvlAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlAbsoluteIntervalNumber.setDescription('The absolute interval number of the stats interval in the interval statistics interface. If the interval is not defined yet, the absolute interval number will be -1. For the short, 15 minutes intervals the possible values are: absolute interval interval index start end ----------------- ------------ 1 00:00 00:15 2 00:15 00:30 3 00:30 00:45 ... ... ... 95 23:30 23:45 96 23:45 00:00 ')
nncAtmCongStatsCurrentShortIntvlTotalCellsArrived = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlTotalCellsArrived.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlTotalCellsArrived.setDescription('Total number of cells received.')
nncAtmCongStatsCurrentShortIntvlTotalCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlTotalCellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlTotalCellsDiscarded.setDescription('Total number of cells discarded due to congestion.')
nncAtmCongStatsCurrentShortIntvlClp0CellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlClp0CellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlClp0CellsDiscarded.setDescription('Number of CLP 0 cells discarded due to congestion.')
nncAtmCongStatsCurrentShortIntvlLowCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlLowCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlLowCongestedSeconds.setDescription('Number of seconds the congestion point was in the Low Congestion State.')
nncAtmCongStatsCurrentShortIntvlMediumCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlMediumCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlMediumCongestedSeconds.setDescription('Number of seconds the congestion point was in the Medium Congestion State.')
nncAtmCongStatsCurrentShortIntvlSevereCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlSevereCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlSevereCongestedSeconds.setDescription('Number of seconds the congestion point was in the Severe Congestion State.')
nncAtmCongStatsCurrentShortIntvlTotalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlTotalSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlTotalSeconds.setDescription('Total number of seconds the congestion point was in the Normal, Low, Medium, or Severe congestion states.')
nncAtmCongStatsCurrentShortIntvlCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("congStatsNormalState", 1), ("congStatsLowCongState", 2), ("congStatsMediumCongState", 3), ("congStatsSevereCongState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlCongestionState.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlCongestionState.setDescription('Congestion state of the congestion point - one of Normal, Low, Medium, or Severe. When the current congestion state is determined, the corresponding congestion time counter will increment.')
nncAtmCongStatsCurrentShortIntvlAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("congStatsAlarmOn", 1), ("congStatsAlarmOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlAlarmStatus.setDescription('Alarm status - either ON or OFF. When a congestion point has been severely congested for longer than the allowable threshold time the value of this object is set to congStatsAlarmOn. When severe congestion clears, the value of this object is set to congStatsAlarmOff.')
nncAtmCongStatsShortIntvlTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4), )
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlTable.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlTable.setDescription('The ATM Short Interval Congestion Statistics table. This table maintains short interval statistics per quality of service since the interface was started. There are 96 intervals, where the first interval (i.e., interval with index 1) is the most recently completed interval and the length of each interval is 15 minutes.')
nncAtmCongStatsShortIntvlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1), ).setIndexNames((0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityShortIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointShortIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSShortIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlIntervalIndex"))
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlEntry.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlEntry.setDescription('An entry in the ATM Short Interval Congestion Statistics table.')
entPhysicalEntityShortIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: entPhysicalEntityShortIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: entPhysicalEntityShortIntvlIndex.setDescription('A unique value that identifies the physical entity, whether it supports Congestion Statistics or not. This value is equivalent to the value of PhysicalIndex.')
nncAtmCongPointShortIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: nncAtmCongPointShortIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointShortIntvlIndex.setDescription('A unique value between 1 and 8 that identifies the congestion point on an entity which supports Congestion Statistics.')
nncAtmCongStatsQOSShortIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: nncAtmCongStatsQOSShortIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsQOSShortIntvlIndex.setDescription('A number between 1 and 11 that identifies the quality of service on which the set of statistics was collected for an entity. The following table describes the quality of service categories available and their corresponding index. Quality of Service Quality of Service Index ------------------ ------------------------ CBR 1 UBR 2 rt-VBR1 3 rt-VBR2 4 nrt-VBR1-2 5 nrt-VBR3 6 ABR 7 CBR-rtVBR 8 nrt-VBR/UBR 9 ABR/UBR 10 nrt-VBR 11 ')
nncAtmCongStatsShortIntvlIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 95)))
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlIntervalIndex.setDescription('A unique value between 1 and 95 that identifies the interval index of the short interval statistics. Interval index 1 represents the most recently completed interval of 15 minutes period and interval index 2 represents the second most recently completed interval, etc.')
nncAtmCongStatsShortIntvlState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 5), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlState.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlState.setDescription('The state of the interval in the interval statistics interface. Possible states are: normal (1) - normal interval; no change in time and no resets nonexistent (2) - statistics do not exist for this interval userReset (3) - the user has reset statistics collection during this interval start (4) - this is the first interval timeChange (5) - the system time has been changed during this interval ')
nncAtmCongStatsShortIntvlAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlAbsoluteIntervalNumber.setDescription('The absolute interval number of the stats interval in the interval statistics interface. If the interval is not defined yet, the absolute interval number will be -1. For the short, 15 minutes intervals the possible values are: absolute interval interval index start end ----------------- ------------ 1 00:00 00:15 2 00:15 00:30 3 00:30 00:45 ... ... ... 95 23:30 23:45 96 23:45 00:00 ')
nncAtmCongStatsShortIntvlTotalCellsArrived = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlTotalCellsArrived.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlTotalCellsArrived.setDescription('Total number of cells received.')
nncAtmCongStatsShortIntvlTotalCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlTotalCellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlTotalCellsDiscarded.setDescription('Total number of cells discarded due to congestion.')
nncAtmCongStatsShortIntvlClp0CellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlClp0CellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlClp0CellsDiscarded.setDescription('Number of CLP 0 cells discarded due to congestion.')
nncAtmCongStatsShortIntvlLowCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlLowCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlLowCongestedSeconds.setDescription('Number of seconds the congestion point was in the Low Congestion State.')
nncAtmCongStatsShortIntvlMediumCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlMediumCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlMediumCongestedSeconds.setDescription('Number of seconds the congestion point was in the Medium Congestion State.')
nncAtmCongStatsShortIntvlSevereCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlSevereCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlSevereCongestedSeconds.setDescription('Number of seconds the congestion point was in the Severe Congestion State.')
nncAtmCongStatsShortIntvlTotalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlTotalSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlTotalSeconds.setDescription('Total number of seconds the congestion point was in the Normal, Low, Medium, or Severe congestion states.')
nncAtmCongStatsShortIntvlCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("congStatsNormalState", 1), ("congStatsLowCongState", 2), ("congStatsMediumCongState", 3), ("congStatsSevereCongState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlCongestionState.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlCongestionState.setDescription('Congestion state of the congestion point - one of Normal, Low, Medium, or Severe. When the current congestion state is determined, the corresponding congestion time counter will increment.')
nncAtmCongStatsShortIntvlAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("congStatsAlarmOn", 1), ("congStatsAlarmOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlAlarmStatus.setDescription('Current alarm status - either ON or OFF. When a congestion point has been severely congested for longer than the allowable threshold time the value of this object is set to congStatsAlarmOn. When severe congestion clears, the value of this object is set to congStatsAlarmOff.')
nncAtmCongStatsCurrentLongIntvlTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5), )
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlTable.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlTable.setDescription('The ATM Current Long Interval Congestion Statistics table. This table maintains current-long interval per quality of service statistics since the interface was started. There are 7 intervals, where the first interval (i.e., interval with index 1) is the most recently completed interval and the length of each interval is 1 day periode.')
nncAtmCongStatsCurrentLongIntvlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1), ).setIndexNames((0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityCurrentLongIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointCurrentLongIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSCurrentLongIntvlIndex"))
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlEntry.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlEntry.setDescription('An entry in the ATM Current Long Interval Congestion Statistics table.')
entPhysicalEntityCurrentLongIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: entPhysicalEntityCurrentLongIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: entPhysicalEntityCurrentLongIntvlIndex.setDescription('A unique value that identifies the physical entity, whether it supports Congestion Statistics or not. This value is equivalent to the value of PhysicalIndex.')
nncAtmCongPointCurrentLongIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: nncAtmCongPointCurrentLongIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointCurrentLongIntvlIndex.setDescription('A unique value between 1 and 8 that identifies the congestion point on an entity which supports Congestion Statistics.')
nncAtmCongStatsQOSCurrentLongIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: nncAtmCongStatsQOSCurrentLongIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsQOSCurrentLongIntvlIndex.setDescription('A number between 1 and 11 that identifies the quality of service on which the set of statistics was collected for an entity. The following table describes the quality of service categories available and their corresponding index. Quality of Service Quality of Service Index ------------------ ------------------------ CBR 1 UBR 2 rt-VBR1 3 rt-VBR2 4 nrt-VBR1-2 5 nrt-VBR3 6 ABR 7 CBR-rtVBR 8 nrt-VBR/UBR 9 ABR/UBR 10 nrt-VBR 11 ')
nncAtmCongStatsCurrentLongIntvlState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 4), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlState.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlState.setDescription('The state of the interval in the interval statistics interface. Possible states are: normal (1) - normal interval; no change in time and no resets nonexistent (2) - statistics do not exist for this interval userReset (3) - the user has reset statistics collection during this interval start (4) - this is the first interval timeChange (5) - the system time has been changed during this interval ')
nncAtmCongStatsCurrentLongIntvlAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlAbsoluteIntervalNumber.setDescription('The absolute interval number of the stats interval in the interval statistics interface. If the interval is not defined yet, the absolute interval number will be -1. For the long, 1 day intervals the possible values are: absolute interval interval index start end day day ----------------- ------------ 1 0 1 2 1 2 3 2 3 4 3 4 5 4 5 6 5 6 7 6 7 ')
nncAtmCongStatsCurrentLongIntvlTotalCellsArrived = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlTotalCellsArrived.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlTotalCellsArrived.setDescription('Total number of cells received.')
nncAtmCongStatsCurrentLongIntvlTotalCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlTotalCellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlTotalCellsDiscarded.setDescription('Total number of cells discarded due to congestion.')
nncAtmCongStatsCurrentLongIntvlClp0CellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlClp0CellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlClp0CellsDiscarded.setDescription('Number of CLP 0 cells discarded due to congestion.')
nncAtmCongStatsCurrentLongIntvlLowCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlLowCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlLowCongestedSeconds.setDescription('Number of seconds the congestion point was in the Low Congestion State.')
nncAtmCongStatsCurrentLongIntvlMediumCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlMediumCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlMediumCongestedSeconds.setDescription('Number of seconds the congestion point was in the Medium Congestion State.')
nncAtmCongStatsCurrentLongIntvlSevereCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlSevereCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlSevereCongestedSeconds.setDescription('Number of seconds the congestion point was in the Severe Congestion State.')
nncAtmCongStatsCurrentLongIntvlTotalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlTotalSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlTotalSeconds.setDescription('Total number of seconds the congestion point was in the Normal, Low, Medium, or Severe congestion states.')
nncAtmCongStatsCurrentLongIntvlCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("congStatsNormalState", 1), ("congStatsLowCongState", 2), ("congStatsMediumCongState", 3), ("congStatsSevereCongState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlCongestionState.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlCongestionState.setDescription('Congestion state of the congestion point - one of Normal, Low, Medium, or Severe. When the current congestion state is determined, the corresponding congestion time counter will increment.')
nncAtmCongStatsCurrentLongIntvlAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("congStatsAlarmOn", 1), ("congStatsAlarmOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlAlarmStatus.setDescription('Current alarm status - either ON or OFF. When a congestion point has been severely congested for longer than the allowable threshold time the value of this object is set to congStatsAlarmOn. When severe congestion clears, the value of this object is set to congStatsAlarmOff.')
nncAtmCongStatsLongIntvlTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6), )
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlTable.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlTable.setDescription('The ATM Long Interval Congestion Statistics table. This table maintains long interval per quality of service statistics since the interface was started. There are 7 intervals, where the first interval (i.e., interval with index 1) is the most recently completed interval and the length of each interval is 1 day periode.')
nncAtmCongStatsLongIntvlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1), ).setIndexNames((0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityLongIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointLongIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSLongIntvlIndex"), (0, "NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlIntervalIndex"))
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlEntry.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlEntry.setDescription('An entry in the ATM Long Interval Congestion Statistics table.')
entPhysicalEntityLongIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: entPhysicalEntityLongIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: entPhysicalEntityLongIntvlIndex.setDescription('A unique value that identifies the physical entity, whether it supports Congestion Statistics or not. This value is equivalent to the value of PhysicalIndex.')
nncAtmCongPointLongIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: nncAtmCongPointLongIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointLongIntvlIndex.setDescription('A unique value between 1 and 8 that identifies the congestion point on an entity which supports Congestion Statistics.')
nncAtmCongStatsQOSLongIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: nncAtmCongStatsQOSLongIntvlIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsQOSLongIntvlIndex.setDescription('A number between 1 and 11 that identifies the quality of service on which the set of statistics was collected for an entity. The following table describes the quality of service categories available and their corresponding index. Quality of Service Quality of Service Index ------------------ ------------------------ CBR 1 UBR 2 rt-VBR1 3 rt-VBR2 4 nrt-VBR1-2 5 nrt-VBR3 6 ABR 7 CBR-rtVBR 8 nrt-VBR/UBR 9 ABR/UBR 10 nrt-VBR 11 ')
nncAtmCongStatsLongIntvlIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlIntervalIndex.setDescription('A unique value between 1 and 6 that identifies the interval index of the long interval statistics. Interval index 1 represents the most recently completed interval of 1 day period and interval index 2 represents the second most recently completed interval, etc. ')
nncAtmCongStatsLongIntvlState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 5), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlState.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlState.setDescription('The state of the interval in the interval statistics interface. Possible states are: normal (1) - normal interval; no change in time and no resets nonexistent (2) - statistics do not exist for this interval userReset (3) - the user has reset statistics collection during this interval start (4) - this is the first interval timeChange (5) - the system time has been changed during this interval')
nncAtmCongStatsLongIntvlAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlAbsoluteIntervalNumber.setDescription('The absolute interval number of the stats interval in the interval statistics interface. If the interval is not defined yet, the absolute interval number will be -1. For the long, 1 day intervals the possible values are: absolute interval interval index start end day day ----------------- ------------ 1 0 1 2 1 2 3 2 3 4 3 4 5 4 5 6 5 6 7 6 7 ')
nncAtmCongStatsLongIntvlTotalCellsArrived = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlTotalCellsArrived.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlTotalCellsArrived.setDescription('Total number of cells received.')
nncAtmCongStatsLongIntvlTotalCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlTotalCellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlTotalCellsDiscarded.setDescription('Total number of cells discarded due to congestion.')
nncAtmCongStatsLongIntvlClp0CellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlClp0CellsDiscarded.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlClp0CellsDiscarded.setDescription('Number of CLP 0 cells discarded due to congestion.')
nncAtmCongStatsLongIntvlLowCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlLowCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlLowCongestedSeconds.setDescription('Number of seconds the congestion point was in the Low Congestion State.')
nncAtmCongStatsLongIntvlMediumCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlMediumCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlMediumCongestedSeconds.setDescription('Number of seconds the congestion point was in the Medium Congestion State.')
nncAtmCongStatsLongIntvlSevereCongestedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlSevereCongestedSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlSevereCongestedSeconds.setDescription('Number of seconds the congestion point was in the Severe Congestion State.')
nncAtmCongStatsLongIntvlTotalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlTotalSeconds.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlTotalSeconds.setDescription('Total number of seconds the congestion point was in the Normal, Low, Medium, or Severe congestion states.')
nncAtmCongStatsLongIntvlCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("congStatsNormalState", 1), ("congStatsLowCongState", 2), ("congStatsMediumCongState", 3), ("congStatsSevereCongState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlCongestionState.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlCongestionState.setDescription('Congestion state of the congestion point - one of Normal, Low, Medium, or Severe. When the current congestion state is determined, the corresponding congestion time counter will increment.')
nncAtmCongStatsLongIntvlAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 63, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("congStatsAlarmOn", 1), ("congStatsAlarmOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlAlarmStatus.setDescription('Current alarm status - either ON or OFF. When a congestion point has been severely congested for longer than the allowable threshold time the value of this object is set to congStatsAlarmOn. When severe congestion clears, the value of this object is set to congStatsAlarmOff.')
nncAtmCongPointInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 63, 2, 1)).setObjects(("NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityInfoIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointInfoIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointHardwareType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmCongPointInfoGroup = nncAtmCongPointInfoGroup.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongPointInfoGroup.setDescription('An object providing various information for a congestion point.')
nncAtmCongStatsRawGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 63, 2, 2)).setObjects(("NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityRawIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointRawIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSRawIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsTotalCellsArrived"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsTotalCellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsClp0CellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLowCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsMediumCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsSevereCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsTotalSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentCongestionState"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsAlarmStatus"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsVirtualBandwidthAvail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmCongStatsRawGroup = nncAtmCongStatsRawGroup.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsRawGroup.setDescription('A collection of objects providing raw congestion statistics per quality of service.')
nncAtmCongStatsCurrentShortIntvlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 63, 2, 3)).setObjects(("NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityCurrentShortIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointCurrentShortIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSCurrentShortIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlState"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlAbsoluteIntervalNumber"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlTotalCellsArrived"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlTotalCellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlClp0CellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlLowCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlMediumCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlSevereCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlTotalSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlCongestionState"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmCongStatsCurrentShortIntvlGroup = nncAtmCongStatsCurrentShortIntvlGroup.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentShortIntvlGroup.setDescription('A collection of objects providing current-short interval congestion statistics per quality of service.')
nncAtmCongStatsShortIntvlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 63, 2, 4)).setObjects(("NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityShortIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointShortIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSShortIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlIntervalIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlState"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlAbsoluteIntervalNumber"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlTotalCellsArrived"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlTotalCellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlClp0CellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlLowCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlMediumCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlSevereCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlTotalSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlCongestionState"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmCongStatsShortIntvlGroup = nncAtmCongStatsShortIntvlGroup.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsShortIntvlGroup.setDescription('A collection of objects providing short interval congestion statistics per quality of service.')
nncAtmCongStatsCurrentLongIntvlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 63, 2, 5)).setObjects(("NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityCurrentLongIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointCurrentLongIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSCurrentLongIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlState"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlAbsoluteIntervalNumber"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlTotalCellsArrived"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlTotalCellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlClp0CellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlLowCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlMediumCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlSevereCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlTotalSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlCongestionState"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmCongStatsCurrentLongIntvlGroup = nncAtmCongStatsCurrentLongIntvlGroup.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCurrentLongIntvlGroup.setDescription('A collection of objects providing current-long interval congestion statistics per quality of service.')
nncAtmCongStatsLongIntvlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 63, 2, 6)).setObjects(("NNC-ATM-CONGESTIONSTATISTICS-MIB", "entPhysicalEntityLongIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointLongIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsQOSLongIntvlIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlIntervalIndex"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlState"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlAbsoluteIntervalNumber"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlTotalCellsArrived"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlTotalCellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlClp0CellsDiscarded"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlLowCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlMediumCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlSevereCongestedSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlTotalSeconds"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlCongestionState"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmCongStatsLongIntvlGroup = nncAtmCongStatsLongIntvlGroup.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsLongIntvlGroup.setDescription('A collection of objects providing long interval congestion statistics per quality of service.')
nncAtmCongStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 63, 3, 1)).setObjects(("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongPointInfoGroup"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsRawGroup"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentShortIntvlGroup"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsShortIntvlGroup"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsCurrentLongIntvlGroup"), ("NNC-ATM-CONGESTIONSTATISTICS-MIB", "nncAtmCongStatsLongIntvlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmCongStatsCompliance = nncAtmCongStatsCompliance.setStatus('current')
if mibBuilder.loadTexts: nncAtmCongStatsCompliance.setDescription('The compliance statement for Newbridge SNMP entities which have ATM congestion fabric statistics management.')
mibBuilder.exportSymbols("NNC-ATM-CONGESTIONSTATISTICS-MIB", nncAtmCongStatsShortIntvlLowCongestedSeconds=nncAtmCongStatsShortIntvlLowCongestedSeconds, nncAtmCongStatsCurrentShortIntvlAlarmStatus=nncAtmCongStatsCurrentShortIntvlAlarmStatus, nncAtmCongStatsShortIntvlGroup=nncAtmCongStatsShortIntvlGroup, nncAtmCongStatsLongIntvlGroup=nncAtmCongStatsLongIntvlGroup, entPhysicalEntityLongIntvlIndex=entPhysicalEntityLongIntvlIndex, nncAtmCongStatsTotalSeconds=nncAtmCongStatsTotalSeconds, nncAtmCongStatsCompliance=nncAtmCongStatsCompliance, nncAtmCongStatsCurrentCongestionState=nncAtmCongStatsCurrentCongestionState, nncAtmCongStatsShortIntvlClp0CellsDiscarded=nncAtmCongStatsShortIntvlClp0CellsDiscarded, nncAtmCongStatsLongIntvlState=nncAtmCongStatsLongIntvlState, nncAtmCongStatsShortIntvlTotalCellsArrived=nncAtmCongStatsShortIntvlTotalCellsArrived, nncAtmCongStatsCurrentLongIntvlTable=nncAtmCongStatsCurrentLongIntvlTable, nncAtmCongStatsVirtualBandwidthAvail=nncAtmCongStatsVirtualBandwidthAvail, nncAtmCongStatsClp0CellsDiscarded=nncAtmCongStatsClp0CellsDiscarded, nncAtmCongPointCurrentLongIntvlIndex=nncAtmCongPointCurrentLongIntvlIndex, nncAtmCongPointInfoTable=nncAtmCongPointInfoTable, nncAtmCongStatsLongIntvlAlarmStatus=nncAtmCongStatsLongIntvlAlarmStatus, nncAtmCongStatsCurrentShortIntvlGroup=nncAtmCongStatsCurrentShortIntvlGroup, entPhysicalEntityCurrentShortIntvlIndex=entPhysicalEntityCurrentShortIntvlIndex, nncAtmCongStatsCurrentShortIntvlTotalCellsDiscarded=nncAtmCongStatsCurrentShortIntvlTotalCellsDiscarded, nncAtmCongStatsCurrentLongIntvlAbsoluteIntervalNumber=nncAtmCongStatsCurrentLongIntvlAbsoluteIntervalNumber, entPhysicalEntityInfoIndex=entPhysicalEntityInfoIndex, nncAtmCongStatsShortIntvlCongestionState=nncAtmCongStatsShortIntvlCongestionState, nncAtmCongStatsLongIntvlEntry=nncAtmCongStatsLongIntvlEntry, nncAtmCongStatsQOSCurrentLongIntvlIndex=nncAtmCongStatsQOSCurrentLongIntvlIndex, nncAtmCongStatsLongIntvlSevereCongestedSeconds=nncAtmCongStatsLongIntvlSevereCongestedSeconds, nncAtmCongStatsLongIntvlIntervalIndex=nncAtmCongStatsLongIntvlIntervalIndex, nncAtmCongStatsCurrentLongIntvlClp0CellsDiscarded=nncAtmCongStatsCurrentLongIntvlClp0CellsDiscarded, nncAtmCongPointInfoIndex=nncAtmCongPointInfoIndex, nncAtmCongStatsRawTable=nncAtmCongStatsRawTable, nncAtmCongStatsSevereCongestedSeconds=nncAtmCongStatsSevereCongestedSeconds, nncAtmCongStatsLongIntvlLowCongestedSeconds=nncAtmCongStatsLongIntvlLowCongestedSeconds, nncAtmCongStatsLongIntvlTotalSeconds=nncAtmCongStatsLongIntvlTotalSeconds, nncAtmCongStatsShortIntvlAbsoluteIntervalNumber=nncAtmCongStatsShortIntvlAbsoluteIntervalNumber, nncAtmCongStatsCurrentLongIntvlState=nncAtmCongStatsCurrentLongIntvlState, nncAtmCongStatsLongIntvlTable=nncAtmCongStatsLongIntvlTable, nncAtmCongPointInfoEntry=nncAtmCongPointInfoEntry, nncAtmCongStatsShortIntvlEntry=nncAtmCongStatsShortIntvlEntry, nncAtmCongStatsQOSRawIndex=nncAtmCongStatsQOSRawIndex, nncAtmCongStatsCurrentLongIntvlTotalCellsArrived=nncAtmCongStatsCurrentLongIntvlTotalCellsArrived, nncAtmCongStatsAlarmStatus=nncAtmCongStatsAlarmStatus, nncAtmCongStatsCurrentLongIntvlMediumCongestedSeconds=nncAtmCongStatsCurrentLongIntvlMediumCongestedSeconds, nncAtmCongStatsCurrentShortIntvlCongestionState=nncAtmCongStatsCurrentShortIntvlCongestionState, nncAtmCongStatsShortIntvlMediumCongestedSeconds=nncAtmCongStatsShortIntvlMediumCongestedSeconds, nncAtmCongStatsObjects=nncAtmCongStatsObjects, nncAtmCongStatsLowCongestedSeconds=nncAtmCongStatsLowCongestedSeconds, nncAtmCongStatsCurrentShortIntvlEntry=nncAtmCongStatsCurrentShortIntvlEntry, nncAtmCongPointHardwareType=nncAtmCongPointHardwareType, nncAtmCongStatsShortIntvlTable=nncAtmCongStatsShortIntvlTable, nncAtmCongStatsShortIntvlState=nncAtmCongStatsShortIntvlState, nncAtmCongStatsCurrentShortIntvlTotalCellsArrived=nncAtmCongStatsCurrentShortIntvlTotalCellsArrived, nncAtmCongStatsCurrentShortIntvlClp0CellsDiscarded=nncAtmCongStatsCurrentShortIntvlClp0CellsDiscarded, nncAtmCongStatsMediumCongestedSeconds=nncAtmCongStatsMediumCongestedSeconds, nncAtmCongStatsQOSShortIntvlIndex=nncAtmCongStatsQOSShortIntvlIndex, nncAtmCongestionStatistics=nncAtmCongestionStatistics, nncAtmCongStatsCurrentShortIntvlAbsoluteIntervalNumber=nncAtmCongStatsCurrentShortIntvlAbsoluteIntervalNumber, nncAtmCongStatsLongIntvlAbsoluteIntervalNumber=nncAtmCongStatsLongIntvlAbsoluteIntervalNumber, nncAtmCongStatsCurrentShortIntvlTable=nncAtmCongStatsCurrentShortIntvlTable, nncAtmCongPointInfoGroup=nncAtmCongPointInfoGroup, nncAtmCongStatsCurrentLongIntvlCongestionState=nncAtmCongStatsCurrentLongIntvlCongestionState, nncAtmCongStatsCurrentLongIntvlAlarmStatus=nncAtmCongStatsCurrentLongIntvlAlarmStatus, entPhysicalEntityShortIntvlIndex=entPhysicalEntityShortIntvlIndex, nncAtmCongStatsCurrentShortIntvlMediumCongestedSeconds=nncAtmCongStatsCurrentShortIntvlMediumCongestedSeconds, nncAtmCongStatsShortIntvlIntervalIndex=nncAtmCongStatsShortIntvlIntervalIndex, nncAtmCongStatsCurrentShortIntvlTotalSeconds=nncAtmCongStatsCurrentShortIntvlTotalSeconds, nncAtmCongStatsGroups=nncAtmCongStatsGroups, nncAtmCongStatsCurrentShortIntvlLowCongestedSeconds=nncAtmCongStatsCurrentShortIntvlLowCongestedSeconds, nncAtmCongStatsQOSCurrentShortIntvlIndex=nncAtmCongStatsQOSCurrentShortIntvlIndex, nncAtmCongStatsLongIntvlTotalCellsDiscarded=nncAtmCongStatsLongIntvlTotalCellsDiscarded, entPhysicalEntityRawIndex=entPhysicalEntityRawIndex, nncAtmCongStatsShortIntvlTotalSeconds=nncAtmCongStatsShortIntvlTotalSeconds, nncAtmCongPointRawIndex=nncAtmCongPointRawIndex, nncAtmCongStatsLongIntvlClp0CellsDiscarded=nncAtmCongStatsLongIntvlClp0CellsDiscarded, nncAtmCongStatsCurrentLongIntvlLowCongestedSeconds=nncAtmCongStatsCurrentLongIntvlLowCongestedSeconds, nncAtmCongStatsRawGroup=nncAtmCongStatsRawGroup, nncAtmCongPointShortIntvlIndex=nncAtmCongPointShortIntvlIndex, nncAtmCongStatsCompliances=nncAtmCongStatsCompliances, nncAtmCongStatsCurrentLongIntvlEntry=nncAtmCongStatsCurrentLongIntvlEntry, PYSNMP_MODULE_ID=nncAtmCongestionStatistics, nncAtmCongPointCurrentShortIntvlIndex=nncAtmCongPointCurrentShortIntvlIndex, nncAtmCongStatsShortIntvlAlarmStatus=nncAtmCongStatsShortIntvlAlarmStatus, nncAtmCongStatsRawEntry=nncAtmCongStatsRawEntry, nncAtmCongStatsTotalCellsDiscarded=nncAtmCongStatsTotalCellsDiscarded, entPhysicalEntityCurrentLongIntvlIndex=entPhysicalEntityCurrentLongIntvlIndex, nncAtmCongStatsCurrentLongIntvlGroup=nncAtmCongStatsCurrentLongIntvlGroup, nncAtmCongStatsCurrentLongIntvlTotalSeconds=nncAtmCongStatsCurrentLongIntvlTotalSeconds, nncAtmCongPointLongIntvlIndex=nncAtmCongPointLongIntvlIndex, nncAtmCongStatsQOSLongIntvlIndex=nncAtmCongStatsQOSLongIntvlIndex, nncAtmCongStatsCurrentShortIntvlSevereCongestedSeconds=nncAtmCongStatsCurrentShortIntvlSevereCongestedSeconds, nncAtmCongStatsShortIntvlTotalCellsDiscarded=nncAtmCongStatsShortIntvlTotalCellsDiscarded, nncAtmCongStatsLongIntvlCongestionState=nncAtmCongStatsLongIntvlCongestionState, nncAtmCongStatsLongIntvlMediumCongestedSeconds=nncAtmCongStatsLongIntvlMediumCongestedSeconds, nncAtmCongStatsTotalCellsArrived=nncAtmCongStatsTotalCellsArrived, nncAtmCongStatsLongIntvlTotalCellsArrived=nncAtmCongStatsLongIntvlTotalCellsArrived, nncAtmCongStatsCurrentLongIntvlSevereCongestedSeconds=nncAtmCongStatsCurrentLongIntvlSevereCongestedSeconds, nncAtmCongStatsCurrentLongIntvlTotalCellsDiscarded=nncAtmCongStatsCurrentLongIntvlTotalCellsDiscarded, nncAtmCongStatsCurrentShortIntvlState=nncAtmCongStatsCurrentShortIntvlState, nncAtmCongStatsShortIntvlSevereCongestedSeconds=nncAtmCongStatsShortIntvlSevereCongestedSeconds)
