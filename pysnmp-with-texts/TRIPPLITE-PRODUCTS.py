#
# PySNMP MIB module TRIPPLITE-PRODUCTS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRIPPLITE-PRODUCTS
# Produced by pysmi-0.3.4 at Wed May  1 15:27:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, NotificationType, Counter64, ObjectIdentity, enterprises, iso, TimeTicks, Integer32, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "NotificationType", "Counter64", "ObjectIdentity", "enterprises", "iso", "TimeTicks", "Integer32", "Counter32", "MibIdentifier")
TextualConvention, RowStatus, TimeStamp, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeStamp", "DisplayString", "TruthValue")
tripplite, = mibBuilder.importSymbols("TRIPPLITE", "tripplite")
tlpProducts = ModuleIdentity((1, 3, 6, 1, 4, 1, 850, 1))
tlpProducts.setRevisions(('2016-06-22 11:15', '2016-02-02 11:15', '2016-01-25 12:30', '2016-01-20 12:00', '2016-01-08 11:40', '2015-11-25 13:00', '2015-11-10 13:00', '2015-10-16 12:30', '2015-08-19 12:00', '2014-12-04 10:00', '2014-04-14 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tlpProducts.setRevisionsDescriptions(('Refactored MIB to extend from tripplite.mib', 'Redefined tlpUpsAlarmLoadLevelAboveThreshold', 'Redefined Reworked tlpAgentAttributes', 'Added tlpDeviceIdentUptime', 'Added tlpAtsConfigVoltageRangeLimitsTable', 'Refactored UPS, PDU and ATS input sections', 'Refactored tlpUps', 'Added tlpAtsConfigSource#ReturnTime', 'Added tlpAtsConfigThresholdTable', 'Created ATS device-specific section', 'Consolidated and Released for PAL v12.07.007x',))
if mibBuilder.loadTexts: tlpProducts.setLastUpdated('201606221115Z')
if mibBuilder.loadTexts: tlpProducts.setOrganization('Tripp Lite')
if mibBuilder.loadTexts: tlpProducts.setContactInfo('Software Engineering Tripp Lite 1111 W. 35th St. Chicago, IL 60609')
if mibBuilder.loadTexts: tlpProducts.setDescription('This MIB module defines MIB objects which provide mechanisms for remote management capabilities of Tripp Lite PowerAlert and related software.')
tlpHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1))
tlpSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2))
tlpAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3))
tlpNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 4))
tlpDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 1))
tlpDeviceDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 2))
tlpDeviceTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3))
tlpUps = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1))
tlpPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2))
tlpEnvirosense = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3))
tlpAts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4))
tlpCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5))
tlpKvm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6))
tlpRackTrack = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7))
tlpSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8))
tlpUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1))
tlpUpsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2))
tlpUpsDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3))
tlpUpsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4))
tlpUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5))
tlpUpsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1))
tlpUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2))
tlpUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3))
tlpUpsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4))
tlpUpsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5))
tlpUpsWatchdog = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6))
tlpPduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1))
tlpPduDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2))
tlpPduDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3))
tlpPduControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4))
tlpPduConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 5))
tlpPduInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1))
tlpPduOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2))
tlpPduOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3))
tlpPduCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4))
tlpPduBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5))
tlpPduHeatsink = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6))
tlpEnvIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1))
tlpEnvDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3))
tlpEnvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5))
tlpAtsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1))
tlpAtsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2))
tlpAtsDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3))
tlpAtsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4))
tlpAtsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5))
tlpAtsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1))
tlpAtsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2))
tlpAtsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3))
tlpAtsCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4))
tlpAtsBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5))
tlpAtsHeatsink = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6))
tlpCoolingIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1))
tlpCoolingDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 2))
tlpCoolingDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 3))
tlpCoolingControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 4))
tlpCoolingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 5))
tlpCoolingInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 3, 1))
tlpCoolingOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 3, 2))
tlpKvmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 1))
tlpKvmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 2))
tlpKvmDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 3))
tlpKvmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 4))
tlpKvmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 5))
tlpRackTrackIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 1))
tlpRackTrackDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 2))
tlpRackTrackDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 3))
tlpRackTrackControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 4))
tlpRackTrackConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 5))
tlpSwitchIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 1))
tlpSwitchDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 2))
tlpSwitchDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 3))
tlpSwitchControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 4))
tlpSwitchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 5))
tlpAgentDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1))
tlpAgentSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 2))
tlpAgentContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 3))
tlpAgentIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1))
tlpAgentAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2))
tlpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 2, 1))
tlpAgentEmailContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1))
tlpAgentSnmpContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2))
tlpAlarmsWellKnown = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3))
tlpAlarmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 4))
tlpAgentAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 1))
tlpDeviceAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2))
tlpUpsAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3))
tlpPduAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4))
tlpEnvAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5))
tlpAtsAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6))
tlpCoolingAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7))
tlpKvmAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 8))
tlpRackTrackAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 9))
tlpSwitchAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 10))
tlpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 4, 1))
tlpDeviceNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceNumDevices.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceNumDevices.setDescription('The number of devices that this agent is currently managing.')
tlpDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2), )
if mibBuilder.loadTexts: tlpDeviceTable.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceTable.setDescription('A list of device table entries. The number of entries is given by the value of tlpDevicesNumDevices.')
tlpDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceEntry.setDescription('An entry containing information applicable to a particular device managed by this agent.')
tlpDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIndex.setDescription('The table row index for the device.')
tlpDeviceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceRowStatus.setDescription('Used with table edits to indicate the status of a given row in tlDeviceTable.')
tlpDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceType.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceType.setDescription('The type of device. One of the appropriate hardware types: ups, pdu, envirosense, etc.')
tlpDeviceManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceManufacturer.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceManufacturer.setDescription('The name of the manufacturer.')
tlpDeviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceModel.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceModel.setDescription('The model designation.')
tlpDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceName.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceName.setDescription('A user-supplied name for the device.')
tlpDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceID.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceID.setDescription('A user-supplied ID for the device.')
tlpDeviceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceLocation.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceLocation.setDescription('A user-supplied location for the device.')
tlpDeviceRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceRegion.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceRegion.setDescription('A user-supplied region for the device.')
tlpDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("critical", 1), ("warning", 2), ("info", 3), ("status", 4), ("offline", 5), ("custom", 6), ("configuration", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceStatus.setDescription('The currently most critical alarm status for the device.')
tlpDeviceIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1), )
if mibBuilder.loadTexts: tlpDeviceIdentTable.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentTable.setDescription('The identity details of each device in device table. The number of entries is given by the value of tlpDevicesNumDevices.')
tlpDeviceIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpDeviceIdentEntry.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentEntry.setDescription('An entry containing details for a particular device.')
tlpDeviceIdentProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentProtocol.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentProtocol.setDescription('The Tripplite protocol used to communicate with the device.')
tlpDeviceIdentCommPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("serial", 1), ("usb", 2), ("hid", 3), ("simulated", 4), ("unittest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentCommPortType.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentCommPortType.setDescription('The type of communications port used to connect with the device.')
tlpDeviceIdentCommPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentCommPortName.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentCommPortName.setDescription('The name of the communications port.')
tlpDeviceIdentFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentFirmwareVersion.setDescription('The firmware version of the device.')
tlpDeviceIdentSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentSerialNum.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentSerialNum.setDescription('The serial number of the device.')
tlpDeviceIdentDateInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceIdentDateInstalled.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentDateInstalled.setDescription('The installation date for this device in the format of mm/dd/yyyy.')
tlpDeviceIdentHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentHardwareVersion.setDescription('The hardware revision of the device. This value will return ERROR_NO_SUCH_NAME if not supported by the device.')
tlpDeviceIdentCurrentUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentCurrentUptime.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentCurrentUptime.setDescription('The device uptime since its last startup. The format of this value is a comma- delimited string representing days, hours and minutes. For example, the value of 123,4,5 represents 123 days, 4 hours and 5 minutes. This value will return ERROR_NO_SUCH_NAME if not supported by the device.')
tlpDeviceIdentTotalUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentTotalUptime.setStatus('current')
if mibBuilder.loadTexts: tlpDeviceIdentTotalUptime.setDescription('The cumulative (total) uptime for the device. The format of this value is a comma- delimited string representing days, hours and minutes. For example, the value of 123,4,5 represents 123 days, 4 hours and 5 minutes. This value will return ERROR_NO_SUCH_NAME if not supported by the device.')
tlpUpsIdentNumUps = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumUps.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentNumUps.setDescription('The number of ups devices that this agent is currently managing.')
tlpUpsIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: tlpUpsIdentTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentTable.setDescription('The identity details of each ups in device table. This is a sparse dependent table, and will contain some subset of devices that are upss.')
tlpUpsIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsIdentEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentEntry.setDescription('An entry containing details for a particular ups.')
tlpUpsIdentNumInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumInputs.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentNumInputs.setDescription('The number of input lines supported by the ups.')
tlpUpsIdentNumOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumOutputs.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentNumOutputs.setDescription('The number of output lines supported by the ups.')
tlpUpsIdentNumBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumBypass.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentNumBypass.setDescription('The number of bypass lines supported by the ups.')
tlpUpsIdentNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumPhases.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentNumPhases.setDescription('The number of phases supported by the ups.')
tlpUpsIdentNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumOutlets.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentNumOutlets.setDescription('The number of receptacles supported by the ups.')
tlpUpsIdentNumOutletGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumOutletGroups.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentNumOutletGroups.setDescription('The number of receptacle groups supported by the ups.')
tlpUpsIdentNumBatteryPacks = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumBatteryPacks.setStatus('current')
if mibBuilder.loadTexts: tlpUpsIdentNumBatteryPacks.setDescription('The number of battery packs, internal and external combined, supported by the ups.')
tlpUpsSupportsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3), )
if mibBuilder.loadTexts: tlpUpsSupportsTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsSupportsTable.setDescription('The supported details of each ups in device table. This is a sparse dependent table, and will contain some subset of devices that are upss.')
tlpUpsSupportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsSupportsEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsSupportsEntry.setDescription('An entry containing supported details for a particular ups.')
tlpUpsSupportsEnergywise = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsEnergywise.setStatus('current')
if mibBuilder.loadTexts: tlpUpsSupportsEnergywise.setDescription('Indicates whether the ups supports Cisco EnergyWise.')
tlpUpsSupportsRampShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsRampShed.setStatus('current')
if mibBuilder.loadTexts: tlpUpsSupportsRampShed.setDescription('Indicates whether the ups supports ramping and shedding.')
tlpUpsSupportsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsOutletGroup.setStatus('current')
if mibBuilder.loadTexts: tlpUpsSupportsOutletGroup.setDescription('Indicates whether the ups supports outlet groups.')
tlpUpsSupportsOutletCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsOutletCurrentPower.setStatus('current')
if mibBuilder.loadTexts: tlpUpsSupportsOutletCurrentPower.setDescription('Indicates whether the ups reports individual receptacle current and power measurements. Devices that do not support individual receptacle measurements will always return ERROR_NO_SUCH_NAME for tlpUpsOutletCurrent and tlpUpsOutletPower.')
tlpUpsSupportsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsSupportsOutletVoltage.setDescription('Indicates whether the ups reports individual receptacle voltage measurements. Devices that do not support individual receptacle measurements will always return ERROR_NO_SUCH_NAME for tlpUpsOutletVoltage.')
tlpUpsDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1), )
if mibBuilder.loadTexts: tlpUpsDeviceTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDeviceTable.setDescription('The device details of each ups in device table. This is a sparse dependent table, and will contain some subset of devices that are upss.')
tlpUpsDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDeviceEntry.setDescription('An entry containing device details for a particular ups.')
tlpUpsDeviceMainLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceMainLoadState.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDeviceMainLoadState.setDescription('The current state of the main output of the device.')
tlpUpsDeviceMainLoadControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceMainLoadControllable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDeviceMainLoadControllable.setDescription('Indicates whether or not the main output is controllable, and whether the ups can be turned off and on.')
tlpUpsDeviceMainLoadCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsDeviceMainLoadCommand.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDeviceMainLoadCommand.setDescription('Reading this value will always return 0. Setting this value to turnOff(1) will turn off the main output of the ups. Setting this value to turnOn(2) will turn on the main output of the ups. Setting this value to cycle(3) will turn off the main output, then turn it back on.')
tlpUpsDevicePowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsDevicePowerOnDelay.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDevicePowerOnDelay.setDescription('The configurable delay value, which sets the amount of additional time a given device will wait before it connects to a valid AC source. By default the delay value is set to 0.')
tlpUpsDeviceTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceTestDate.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDeviceTestDate.setDescription('The date of the last self-test run on the ups, in the format YYYY-MM-DD.')
tlpUpsDeviceTestResultsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noTest", 0), ("doneAndPassed", 1), ("doneAndWarning", 2), ("doneAndError", 3), ("aborted", 4), ("inProgress", 5), ("noTestInitiated", 6), ("badBattery", 7), ("overCurrent", 8), ("batteryFailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceTestResultsStatus.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDeviceTestResultsStatus.setDescription('The result of the last self-test run on the ups.')
tlpUpsDeviceTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 7), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceTemperatureC.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDeviceTemperatureC.setDescription('The ambient temperature at or near the ups casing. Temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsDeviceTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 8), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceTemperatureF.setStatus('current')
if mibBuilder.loadTexts: tlpUpsDeviceTemperatureF.setDescription('The ambient temperature at or near the ups casing. Temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsBatterySummaryTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1), )
if mibBuilder.loadTexts: tlpUpsBatterySummaryTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatterySummaryTable.setDescription('The battery system summary of each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps.')
tlpUpsBatterySummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsBatterySummaryEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatterySummaryEntry.setDescription('An entry containing information applicable to a particular battery system managed by this agent.')
tlpUpsBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryStatus.setDescription("The indication of the capacity remaining in the UPS system's batteries. A value of batteryNormal indicates that the remaining run-time is greater than tlpUpsConfigLowBattTime. A value of batteryLow indicates that the remaining battery run-time is less than or equal to tlpUpsConfigLowBattTime. A value of batteryDepleted indicates that the UPS will be unable to sustain the present load when and if the utility power is lost (including the possibility that the utility power is currently absent and the UPS is unable to sustain the output).")
tlpUpsSecondsOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSecondsOnBattery.setStatus('current')
if mibBuilder.loadTexts: tlpUpsSecondsOnBattery.setDescription('If the unit is on battery power, the elapsed time since the UPS last switched to battery power, or the time since the network management subsystem was last restarted, whichever is less. Zero shall be returned if the unit is not on battery power.')
tlpUpsEstimatedMinutesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 3), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsEstimatedMinutesRemaining.setStatus('current')
if mibBuilder.loadTexts: tlpUpsEstimatedMinutesRemaining.setDescription('An estimate of the time to battery charge depletion under the present load conditions if the utility power is off and remains off, or if it were to be lost and remain off.')
tlpUpsEstimatedChargeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsEstimatedChargeRemaining.setStatus('current')
if mibBuilder.loadTexts: tlpUpsEstimatedChargeRemaining.setDescription('An estimate of the battery charge remaining expressed as a percent of full charge.')
tlpUpsBatteryRunTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryRunTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryRunTimeRemaining.setDescription('The run time remaining before batteries are exhausted. If the device does not support run time remaining, then the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsBatteryDetailTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2), )
if mibBuilder.loadTexts: tlpUpsBatteryDetailTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryDetailTable.setDescription('The battery detail of each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps.')
tlpUpsBatteryDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsBatteryDetailEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryDetailEntry.setDescription('An entry containing information applicable to a particular battery system managed by this agent.')
tlpUpsBatteryDetailVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 1), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryDetailVoltage.setDescription('The magnitude of the present battery voltage.')
tlpUpsBatteryDetailCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 2), Unsigned32()).setUnits('0.1 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryDetailCurrent.setDescription('The present battery current.')
tlpUpsBatteryDetailCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailCapacity.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryDetailCapacity.setDescription('The estimated remaining battery capacity expressed as a percent of full capacity.')
tlpUpsBatteryDetailCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("floating", 0), ("charging", 1), ("resting", 2), ("discharging", 3), ("normal", 4), ("standby", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailCharge.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryDetailCharge.setDescription('Denotes the charge state of the battery.')
tlpUpsBatteryDetailChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("inFaultCondition", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailChargerStatus.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryDetailChargerStatus.setDescription('The status of the battery charger. If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3), )
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentTable.setDescription('The battery identification details for each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by upsIdentNumUps and the number of battery battery packs per each as reported by tlpUpsNumBatteryPacks.')
tlpUpsBatteryPackIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsBatteryPackIdentIndex"))
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentEntry.setDescription('An entry containing information applicable to a particular battery pack managed by this agent.')
tlpUpsBatteryPackIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentIndex.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentIndex.setDescription('The table row index for the ups battery pack.')
tlpUpsBatteryPackIdentManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentManufacturer.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentManufacturer.setDescription('The manufacturer of the battery pack. If the device does not support this value, then the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackIdentModel = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentModel.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentModel.setDescription('The model or device name of the battery pack. If the device does not support this value, then the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackIdentSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentSerialNum.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentSerialNum.setDescription('The serial number of the battery pack. If the device does not support this value, then the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackIdentFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentFirmware.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentFirmware.setDescription('The firmware of the battery pack. If the device does not support this value, then the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackIdentSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentSKU.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentSKU.setDescription('The SKU of the battery pack. If the device does not support this value, then the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4), )
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigTable.setDescription('The battery configuration details for each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by upsIdentNumUps and the number of battery battery packs per each as reported by tlpUpsNumBatteryPacks.')
tlpUpsBatteryPackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsBatteryPackIdentIndex"))
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigEntry.setDescription('An entry containing information applicable to a particular battery pack managed by this agent.')
tlpUpsBatteryPackConfigChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("leadAcid", 1), ("nickelCadmium", 2), ("lithiumIon", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigChemistry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigChemistry.setDescription('The type of battery pack.')
tlpUpsBatteryPackConfigStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("nonsmart", 1), ("smart", 2), ("bms", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigStyle.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigStyle.setDescription('The style of battery pack.')
tlpUpsBatteryPackConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigLocation.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigLocation.setDescription('The location of the battery pack.')
tlpUpsBatteryPackConfigStrings = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigStrings.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigStrings.setDescription('The number of series strings in parallel contained in the battery pack. If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackConfigBatteriesPerString = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigBatteriesPerString.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigBatteriesPerString.setDescription('The number of battery per each string in the battery pack. If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackConfigCellsPerBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("unknown", 0), ("one", 1), ("two", 2), ("four", 4), ("six", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigCellsPerBattery.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigCellsPerBattery.setDescription('The number of cells per battery..')
tlpUpsBatteryPackConfigNumBatteries = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigNumBatteries.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigNumBatteries.setDescription('The total number of batteries contained in the battery pack. If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackConfigCapacityUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mAHr", 0), ("mWHr", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigCapacityUnits.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigCapacityUnits.setDescription('The units of measurement used for tlpUpsBatteryPackConfigDesignCapacity and tlpUpsBatteryPackConfigCellCapacity. If supported, this value will report either mAHR(1), amps per hour, or mWhr(1), watts per hour. If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackConfigDesignCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigDesignCapacity.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigDesignCapacity.setDescription('The theoretical or nominal capacity of the battery pack in the measurement defined by tlpUpsBatteryPackConfigCapacityUnits. If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackConfigCellCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigCellCapacity.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigCellCapacity.setDescription('The capacity of the batteries in the measurement defined by tlpUpsBatteryPackConfigCapacityUnits. If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackConfigMinCellVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigMinCellVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigMinCellVoltage.setDescription('The minimum cell voltage for the batteries. If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackConfigMaxCellVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigMaxCellVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigMaxCellVoltage.setDescription('The maximum cell voltage for the batteries. If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsBatteryPackDetailTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5), )
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailTable.setDescription('The details of each battery pack for each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss and battery packs managed by the agent as reported by tlpUpsIdentNumUps and tlpUpsIdentNumBatteryPacks.')
tlpUpsBatteryPackDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsBatteryPackIdentIndex"))
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailEntry.setDescription('An entry containing information applicable to a particular battery system managed by this agent.')
tlpUpsBatteryPackDetailCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("weak", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailCondition.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailCondition.setDescription('The condition of the battery. A bad battery should be replaced.')
tlpUpsBatteryPackDetailTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 2), Unsigned32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailTemperatureC.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailTemperatureC.setDescription('The ambient temperature at or near the UPS Battery casing.')
tlpUpsBatteryPackDetailTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 3), Unsigned32()).setUnits('0.1 degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailTemperatureF.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailTemperatureF.setDescription('The ambient temperature at or near the UPS Battery casing.')
tlpUpsBatteryPackDetailAge = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 4), Unsigned32()).setUnits('0.1 Years').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailAge.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailAge.setDescription('The age of the battery in years. This is equal to the current date minus tlpUpsBatteryPackIdentInstallDate.')
tlpUpsBatteryPackDetailLastReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailLastReplaceDate.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailLastReplaceDate.setDescription('The date when the batteries were last replaced in YYYYMMDD format.')
tlpUpsBatteryPackDetailNextReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailNextReplaceDate.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailNextReplaceDate.setDescription('The date when the batteries should next be replaced in YYYYMMDD format.')
tlpUpsBatteryPackDetailCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailCycleCount.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailCycleCount.setDescription('The number of times the battery went into invert mode. This number is incremented by 1 each time the unit goes on battery mode (with the exception of Self Test mode). If the device does not support this value, then the agent will report ERROR_NO_SUCH_NAME.')
tlpUpsInputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1), )
if mibBuilder.loadTexts: tlpUpsInputTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputTable.setDescription('The input details of each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps.')
tlpUpsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsInputEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputEntry.setDescription('An entry containing information applicable to all input lines per each ups managed by this agent.')
tlpUpsInputLineBads = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputLineBads.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputLineBads.setDescription('A count of the number of times the input entered an out-of-tolerance condition as defined by the manufacturer. This count is incremented by one each time the input transitions from zero out-of-tolerance lines to one or more input lines out-of-tolerance. This value is not supported on all units. If the ups does not support this value, then the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsInputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputNominalVoltage.setDescription('The nominal value of the input line voltage. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpUpsInputNominalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputNominalFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputNominalFrequency.setDescription('The nominal value of the input line frequency. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpUpsInputLowTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputLowTransferVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputLowTransferVoltage.setDescription('The minimum line voltage allowed before the ups system transfers to battery backup.')
tlpUpsInputLowTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 5), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputLowTransferVoltageLowerBound.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputLowTransferVoltageLowerBound.setDescription('The lower boundary value of tlpUpsInputLowTransferVoltage as dictated by the hardware of the unit.')
tlpUpsInputLowTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 6), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputLowTransferVoltageUpperBound.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputLowTransferVoltageUpperBound.setDescription('The upper boundary value of tlpUpsInputLowTransferVoltage as dictated by the hardware of the unit.')
tlpUpsInputHighTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 7), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputHighTransferVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputHighTransferVoltage.setDescription('The maximum line voltage allowed before the ups system transfers to battery backup.')
tlpUpsInputHighTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 8), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputHighTransferVoltageLowerBound.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputHighTransferVoltageLowerBound.setDescription('The lower boundary value of tlpUpsInputHighTransferVoltage as dictated by the hardware of the unit.')
tlpUpsInputHighTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 9), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputHighTransferVoltageUpperBound.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputHighTransferVoltageUpperBound.setDescription('The upper boundary value of tlpUpsInputHighTransferVoltage as dictated by the hardware of the unit.')
tlpUpsInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2), )
if mibBuilder.loadTexts: tlpUpsInputPhaseTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputPhaseTable.setDescription('The input phase details of each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps and tlpUpsIdentNumPhases.')
tlpUpsInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsInputPhaseIndex"))
if mibBuilder.loadTexts: tlpUpsInputPhaseEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputPhaseEntry.setDescription('An entry containing information applicable to a particular input phase managed by this agent.')
tlpUpsInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhaseIndex.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputPhaseIndex.setDescription('The table row index for the ups input phase.')
tlpUpsInputPhaseFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 2), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhaseFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputPhaseFrequency.setDescription('The present input frequency for a given input line.')
tlpUpsInputPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 3), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhaseVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputPhaseVoltage.setDescription('The magnitude of the present input voltage for a given input line.')
tlpUpsInputPhaseVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 4), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsInputPhaseVoltageMin.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputPhaseVoltageMin.setDescription('The minimum input voltage value since the last reset of this value for a given input line. If any value is written to either tlpUpsInputVoltageMin or tlpUpsInputVoltageMax, both will be reset to their appropriate minimum and maximum values.')
tlpUpsInputPhaseVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 5), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsInputPhaseVoltageMax.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputPhaseVoltageMax.setDescription('The maximum input voltage value since the last reset of this value for a given input line. If any value is written to either tlpUpsInputVoltageMin or tlpUpsInputVoltageMax, both will be reset to their appropriate minimum and maximum values.')
tlpUpsInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 6), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhaseCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputPhaseCurrent.setDescription('The magnitude of the present input current.')
tlpUpsInputPhasePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 7), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhasePower.setStatus('current')
if mibBuilder.loadTexts: tlpUpsInputPhasePower.setDescription('The magnitude of the present input true power.')
tlpUpsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1), )
if mibBuilder.loadTexts: tlpUpsOutputTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputTable.setDescription('The output details of each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps.')
tlpUpsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsOutputEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputEntry.setDescription('An entry containing information applicable to a particular output line managed by this agent.')
tlpUpsOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("boosting", 6), ("reducing", 7), ("second", 8), ("economy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputSource.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputSource.setDescription('The present source of output power. The enumeration none(2) indicates that there is no source of output power (and therefore no output power), for example, the system has opened the output breaker.')
tlpUpsOutputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputNominalVoltage.setDescription('The nominal value of the output voltage. This value may not be supported on all models. If not supported, the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1, 1, 3), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputFrequency.setDescription('The present output frequency. The output frequency on most ups devices is common across all output lines. Some ups devices, however, maintain the output frequency per each line. If a common frequency is supported by the ups, then this frequency will contain the common frequency value. If not supported, the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsOutputLineTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2), )
if mibBuilder.loadTexts: tlpUpsOutputLineTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputLineTable.setDescription('The output line details of each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps.')
tlpUpsOutputLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsOutputLineIndex"))
if mibBuilder.loadTexts: tlpUpsOutputLineEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputLineEntry.setDescription('An entry containing information applicable to a particular output line managed by this agent.')
tlpUpsOutputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLineIndex.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputLineIndex.setDescription('The table row index for the ups output line.')
tlpUpsOutputLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 2), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLineVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputLineVoltage.setDescription('The magnitude of the present output voltage for a given output line.')
tlpUpsOutputLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 3), Unsigned32()).setUnits('0.1 Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLineCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputLineCurrent.setDescription('The present output current.')
tlpUpsOutputLinePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 4), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLinePower.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputLinePower.setDescription('The present output true power.')
tlpUpsOutputLinePercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLinePercentLoad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputLinePercentLoad.setDescription('The percentage of the UPS power capacity presently being used on this output line, i.e., the greater of the percent load of true power capacity and the percent load of VA.')
tlpUpsOutputLineFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 6), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLineFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutputLineFrequency.setDescription('The present output frequency on this output line. The output frequency on most ups devices is common across all output lines. Some ups devices, however, maintain the output frequency per each line. If a per line frequency is supported by the ups, then this frequency value will reports the value of this line. If not supported, the agent reports ERROR_NO_SUCH_NAME.')
tlpUpsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 1), )
if mibBuilder.loadTexts: tlpUpsBypassTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBypassTable.setDescription('The bypass details of each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps.')
tlpUpsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsBypassEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBypassEntry.setDescription('An entry containing information applicable to all input lines per each ups managed by this agent.')
tlpUpsBypassFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 1, 1, 1), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBypassFrequency.setDescription('The present bypass frequency.')
tlpUpsBypassLineTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2), )
if mibBuilder.loadTexts: tlpUpsBypassLineTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBypassLineTable.setDescription('The bypass line details of each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps.')
tlpUpsBypassLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsBypassLineIndex"))
if mibBuilder.loadTexts: tlpUpsBypassLineEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBypassLineEntry.setDescription('An entry containing information applicable to a particular bypass line managed by this agent.')
tlpUpsBypassLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassLineIndex.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBypassLineIndex.setDescription('The bypass line identifier.')
tlpUpsBypassLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1, 2), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassLineVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBypassLineVoltage.setDescription('The present bypass voltage.')
tlpUpsBypassLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1, 3), Unsigned32()).setUnits('0.1 Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassLineCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBypassLineCurrent.setDescription('The present bypass current.')
tlpUpsBypassLinePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1, 4), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassLinePower.setStatus('current')
if mibBuilder.loadTexts: tlpUpsBypassLinePower.setDescription('The present true power conveyed by the bypass.')
tlpUpsOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1), )
if mibBuilder.loadTexts: tlpUpsOutletTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletTable.setDescription('The details of each ups outlet in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps.')
tlpUpsOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsOutletIndex"))
if mibBuilder.loadTexts: tlpUpsOutletEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletEntry.setDescription('An entry containing information applicable to a particular outlet managed by this agent.')
tlpUpsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletIndex.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletIndex.setDescription('The table row index for the ups outlet.')
tlpUpsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletName.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletName.setDescription('A user-definable string identifying the name of the outlet.')
tlpUpsOutletDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletDescription.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletDescription.setDescription('A user-definable string identifying the device(s) connected to the given outlet.')
tlpUpsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletState.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletState.setDescription('The current state of the outlet.')
tlpUpsOutletControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletControllable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletControllable.setDescription('Denotes whether this outlet is controllable.')
tlpUpsOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletCommand.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletCommand.setDescription('Reading this value will always return 0. Setting this value to turnOff(1) will turn off the outlet. Setting this value to turnOn(2) will turn on the outlet. Setting this value to cycle(3) will turn the outlet off, then turn it back on.')
tlpUpsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 7), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletVoltage.setDescription('The magnitude of the present output voltage for a given outlet. If the voltage measurement is not supported for an individual receptacle regardless whether device-wide or just for this receptacle, then this value will always return ERROR_NO_SUCH_NAME. Device-wide support for receptacle voltage measurements is denoted by tlpUpsSupportsOutletVoltage.')
tlpUpsOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 8), Unsigned32()).setUnits('0.01 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletCurrent.setDescription('The present output current, in hundreths of amps, of a given outlet. If the current measurement is not supported for an individual receptacle regardless whether device-wide or just for this receptacle, then this value will always return ERROR_NO_SUCH_NAME. Device-wide support for receptacle current measurements is denoted by tlpUpsSupportsCurrentPower.')
tlpUpsOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletPower.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletPower.setDescription('The output power of a given outlet. If the power measurement is not supported for an individual receptacle regardless whether device-wide or just for this receptacle, then this value will always return ERROR_NO_SUCH_NAME. Device-wide support for receptacle power measurements is denoted by tlpUpsSupportsCurrentPower.')
tlpUpsOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOff", 0), ("turnOnAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletRampAction.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletRampAction.setDescription('The ramp action to take on a given outlet when powering on the device. If this receptacle is not controllable, as denoted by tlpUpsOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsOutletRampDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 11), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletRampDelay.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletRampDelay.setDescription('The number of seconds to delay before powering on the given outlet. If this receptacle is not controllable, as denoted by tlpUpsOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOn", 0), ("turnOffAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletShedAction.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletShedAction.setDescription('The shed action to take on a given outlet when powering off the device. If this receptacle is not controllable, as denoted by tlpUpsOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsOutletShedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 13), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletShedDelay.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletShedDelay.setDescription('The number of seconds to delay before powering off the given outlet. If this receptacle is not controllable, as denoted by tlpUpsOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroup.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletGroup.setDescription('The tlpUpsOutletGroupIndex group index of the respective group to which the given outlet is assigned, or zero (0) if the given outlet is not grouped.')
tlpUpsOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2), )
if mibBuilder.loadTexts: tlpUpsOutletGroupTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletGroupTable.setDescription('The receptacle grouping details of each ups in device table. This is a sparse dependent table, and will contain the number of entries based upon the value of tlpUpsIdentNumOutletGroups per each device.')
tlpUpsOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsOutletGroupIndex"))
if mibBuilder.loadTexts: tlpUpsOutletGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletGroupEntry.setDescription('An entry containing information applicable to a particular outlet group managed by this agent.')
tlpUpsOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletGroupIndex.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletGroupIndex.setDescription('The table row index for the ups outlet group.')
tlpUpsOutletGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletGroupRowStatus.setDescription('Row status for the tlpUpsOutletGroupTable')
tlpUpsOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroupName.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletGroupName.setDescription('The name of this outlet group.')
tlpUpsOutletGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroupDescription.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletGroupDescription.setDescription('A description for this outlet group.')
tlpUpsOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletGroupState.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletGroupState.setDescription('The current state of the outlet group. This value will report off(1) if all outlets in the group are off, on(2) if all outlets in the group are on, mixed(3) if some outlets in the group are off and others are on, or unknown(0) if the state of the outlets cannot be determined.')
tlpUpsOutletGroupCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroupCommand.setStatus('current')
if mibBuilder.loadTexts: tlpUpsOutletGroupCommand.setDescription('Reading this value will always return 0. Setting this value to turnOff(1) will turn off every outlet associated with the group. Setting this value to turnOn(2) will turn on every outlet associated with the group. Setting this value to cycle(3) will turn off every outlet associated with the group, then turn each outlet back on.')
tlpUpsWatchdogTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6, 1), )
if mibBuilder.loadTexts: tlpUpsWatchdogTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsWatchdogTable.setDescription('The watchdog details of each ups in device table. This is a sparse dependent table, and will contain some subset of devices that are upss.')
tlpUpsWatchdogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsWatchdogEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsWatchdogEntry.setDescription('An entry containing watchdog details for a particular ups.')
tlpUpsWatchdogSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsWatchdogSupported.setStatus('current')
if mibBuilder.loadTexts: tlpUpsWatchdogSupported.setDescription('Indicates whether or not this ups supports a watchdog reboot.')
tlpUpsWatchdogSecsBeforeReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsWatchdogSecsBeforeReboot.setStatus('current')
if mibBuilder.loadTexts: tlpUpsWatchdogSecsBeforeReboot.setDescription('The maximum number of seconds that can expire between polls that the engine makes to the ups for data. If this time runs out, then the ups will cycle its outputs. Set this to zero to turns disable this feature.')
tlpUpsControlTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1), )
if mibBuilder.loadTexts: tlpUpsControlTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsControlTable.setDescription('The actionable controls for each ups in device table. This is a sparse dependent table, and will contain some subset of devices that are upss.')
tlpUpsControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsControlEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsControlEntry.setDescription('An entry containing controls for a particular ups.')
tlpUpsControlSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlSelfTest.setStatus('current')
if mibBuilder.loadTexts: tlpUpsControlSelfTest.setDescription('Set to TRUE to initiate a self test on the ups.')
tlpUpsControlRamp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlRamp.setStatus('current')
if mibBuilder.loadTexts: tlpUpsControlRamp.setDescription('Set to TRUE to initiate the pre-designated ramp sequence on the ups.')
tlpUpsControlShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlShed.setStatus('current')
if mibBuilder.loadTexts: tlpUpsControlShed.setDescription('Set to TRUE to initiate the pre-designated shed sequence on the ups.')
tlpUpsControlUpsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlUpsOn.setStatus('current')
if mibBuilder.loadTexts: tlpUpsControlUpsOn.setDescription('Set to TRUE to turn the ups on.')
tlpUpsControlUpsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlUpsOff.setStatus('current')
if mibBuilder.loadTexts: tlpUpsControlUpsOff.setDescription('Set to TRUE to turn the ups off.')
tlpUpsControlUpsReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlUpsReboot.setStatus('current')
if mibBuilder.loadTexts: tlpUpsControlUpsReboot.setDescription('Set to TRUE to reboot the ups.')
tlpUpsControlBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlBypass.setStatus('current')
if mibBuilder.loadTexts: tlpUpsControlBypass.setDescription('This switches the ups in and out of bypass mode. This value returns the current bypass mode: disable(0) if the ups is not in bypass mode, enable(1) if the ups is in bypass mode. Set to disable(0) to exit bypass mode, or enable(1) to enter bypass mode. If switching bypass mode is not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpUpsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1), )
if mibBuilder.loadTexts: tlpUpsConfigTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigTable.setDescription('The configuration details of each ups in the device table. This is a sparse dependent table, and will contain the number of entries based upon the number of upss managed by the agent as reported by tlpUpsIdentNumUps.')
tlpUpsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigEntry.setDescription('An entry containing information applicable to all input lines per each ups managed by this agent.')
tlpUpsConfigInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 1), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigInputVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigInputVoltage.setDescription('The nominal value of the input line voltage. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME. This value may not be writable on all models. If not writable, the value will be rejected and an appropriate error message will be returned.')
tlpUpsConfigInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 2), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigInputFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigInputFrequency.setDescription('The nominal input frequency. On those systems which support read-write access to this object, if there is an attempt to set this variable to a value that is not supported, the request must be rejected and the agent shall respond with an appropriate error message, i.e., badValue for SNMPv1, or inconsistentValue for SNMPv2.')
tlpUpsConfigOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 3), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigOutputVoltage.setDescription('The nominal value of the output voltage. This value may not be supported on all models. If not supported, the agent reports ERROR_NO_SUCH_NAME. This value may not be writable on all models. If not writable, the value will be rejected and an appropriate error message will be returned.')
tlpUpsConfigOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 4), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigOutputFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigOutputFrequency.setDescription('The nominal output frequency. On those systems which support read-write access to this object, if there is an attempt to set this variable to a value that is not supported, the request will be rejected and the agent will respond with an appropriate error message.')
tlpUpsConfigAudibleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("muted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAudibleStatus.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAudibleStatus.setDescription('The requested state of the audible alarm. When in the disabled state, the audible alarm should never sound. The enabled state is self- describing. Setting this object to muted(3) when the audible alarm is sounding shall temporarily silence the alarm. It will remain muted until it would normally stop sounding and the value returned for read operations during this period shall equal muted(3). At the end of this period, the value shall revert to enabled(2). Writes of the value muted(3) when the audible alarm is not sounding shall be accepted but otherwise shall have no effect.')
tlpUpsConfigAutoBatteryTest = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("biweekly", 1), ("monthly", 2), ("quarterly", 3), ("semiannually", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoBatteryTest.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoBatteryTest.setDescription('When disabled(0), the ups will not perform an automatic battery selftest. When set to another value, the ups will perform an automatic selftest in the approximate period defined by each respective enumerated value. This feature is generally not recommended.')
tlpUpsConfigAutoRestartAfterShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartAfterShutdown.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartAfterShutdown.setDescription('When enabled(1), the ups should autorestart after a shutdown from battery mode if valid AC is applied. When disabled(0), the ups should not autorestart when AC is restored and instead power up into standby mode.')
tlpUpsConfigAutoRampOnTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRampOnTransition.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoRampOnTransition.setDescription('When enabled(1), the ups should perform its preconfigured ramp sequence when valid AC is restored while in battery mode. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigAutoShedOnTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoShedOnTransition.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoShedOnTransition.setDescription('When enabled(1), the ups should perform its preconfigured shed sequence when valid AC is lost causing the ups to enter battery mode. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigBypassLowerLimitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, -5))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBypassLowerLimitPercent.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigBypassLowerLimitPercent.setDescription('The lowest AC input voltage allowed to be output to the load while in bypass mode. This setting is expressed as a percentage from nominal voltage. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigBypassUpperLimitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBypassUpperLimitPercent.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigBypassUpperLimitPercent.setDescription('The highest AC input voltage allowed to be output to the load while in bypass mode. This setting is expressed as a percentage from nominal voltage. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigBypassLowerLimitVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 12), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBypassLowerLimitVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigBypassLowerLimitVoltage.setDescription('The lowest AC input voltage allowed to be output to the load while in bypass mode. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigBypassUpperLimitVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 13), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBypassUpperLimitVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigBypassUpperLimitVoltage.setDescription('The highest AC input voltage allowed to be output to the load while in bypass mode. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigColdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigColdStart.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigColdStart.setDescription('This option enables or disables the ability to turn the ups on without AC supplied. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigEconomicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("online", 0), ("economy", 1), ("constant50Hz", 2), ("constant60Hz", 3), ("constantAuto", 4), ("autoAdaptive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigEconomicMode.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigEconomicMode.setDescription('The configurable economic mode options for the ups. The online(0) mode is the default configuration of most upss, which is synonymous as having the economic mode disabled. The economy(1) mode is the typical configuration to run in economy mode, which is synonymous as having the economic mode enabled. Constant50Hz(2) is a power strategy, which fixes the output frequency at 50Hz. Constant60Hz(3) is a power stragegy, which fixes the output frequency at 60Hz. ConstantAuto(4) regulates the output frequency at nominal input frequency. AutoAdaptive(5) mode will cause the ups to automatically switch between online(0), maximum quality, and economy(1), maximum efficiency, to improve efficiency during stable utility periods and improve output regulation during unstable utility periods. Not all values are supported by all upss. Most upss, if supportive of economic mode, only supports online(0) and economy(1). If the ups does not support economic mode, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigFaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bypass", 0), ("standby", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigFaultAction.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigFaultAction.setDescription('Determines the action to take if the output needs to be shut down due to a fault condition, limited by the type of fault incurred. When configured for bypass(0), the ups will go to bypass on a fault condition. When configured for standby(1), the ups will go to standby mode on a fault condition. Either configuration will be valid as long as AC input is within normal line voltage and frequency limits when the fault condition occurs. If the line is outside these limits, the ups will turn off. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigOffMode = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("bypass", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigOffMode.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigOffMode.setDescription('This option governs what mode the ups should go into when AC input is available, but the load is either off or not battery backed up. If this setting is configured for bypass(1), the intention is that any time the ups would normally go into standby mode, it would instead go into bypass mode. Note that this setting does not dictate the mode for fault conditions, which is governed by tlpUpsConfigFaultAction. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigLineSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reduced", 1), ("fullyReduced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigLineSensitivity.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigLineSensitivity.setDescription('Adjusts the AC line voltage sensitivity setting. If this value is not supported by the ups, then this value will always return ERROR_NO_SUCH_NAME.')
tlpUpsConfigAutoRestartTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2), )
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartTable.setDescription('The configurable automatic restart options of each ups in device table. This is a sparse dependent table, and will contain some subset of devices that are upss. Not all options are available on all upss.')
tlpUpsConfigAutoRestartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartEntry.setDescription('An entry containing configurable automatic restart options for a particular ups.')
tlpUpsConfigAutoRestartInverterShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartInverterShutdown.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartInverterShutdown.setDescription('If enabled(1) and the ups is turned off from invert mode (via user interaction), if line becomes valid, the ups will automatically go to line mode. If disabled(0), the ups will turn back on and go to standby mode instead.')
tlpUpsConfigAutoRestartDelayedWakeup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartDelayedWakeup.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartDelayedWakeup.setDescription('If enabled(1) and power fails during a DelayBeforeStartup and line remains invalid after the timeout expires, the ups will be set to turn back on automatically. If disabled(0), the ups will turn back on and go to standby mode instead.')
tlpUpsConfigAutoRestartLowVoltageCutoff = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartLowVoltageCutoff.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartLowVoltageCutoff.setDescription('If enabled(1) and the ups is turned off from invert mode (via low voltage cutoff), if line becomes valid, the ups will automatically go to line mode. If disabled(0), the ups will turn back on and go to standby mode instead.')
tlpUpsConfigAutoRestartOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartOverLoad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartOverLoad.setDescription('If enabled(1) and the ups is turned off from invert mode (via overload), if line becomes valid, the ups will automatically go to line mode. If disabled(0), the ups will turn back on and go to standby mode instead.')
tlpUpsConfigAutoRestartOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartOverTemperature.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartOverTemperature.setDescription('If enabled(1) and the ups is turned off from invert mode (via over temperature), if line becomes valid, the ups will automatically go to line mode. If disabled(0), the ups will turn back on and go to standby mode instead.')
tlpUpsConfigThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3), )
if mibBuilder.loadTexts: tlpUpsConfigThresholdTable.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigThresholdTable.setDescription('The configurable threshold options of each ups in device table. This is a sparse dependent table, and will contain some subset of devices that are upss. Not all options are available on all upss.')
tlpUpsConfigThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsConfigThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigThresholdEntry.setDescription('An entry containing configurable threshold options for a particular ups.')
tlpUpsConfigBatteryAgeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1, 1), Unsigned32()).setUnits('months').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBatteryAgeThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigBatteryAgeThreshold.setDescription('The number of months for a battery to be in service. The battery age alarm, tlpUpsAlarmBatteryAgeAboveThreshold, is triggered when the current date exceeds tlpUpsBatteryPackIdentInstallDate by tlpUpsConfigBatteryAgeThreshold months.')
tlpUpsConfigLowBatteryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigLowBatteryThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigLowBatteryThreshold.setDescription('This value denotes the percentage of battery capacity remaining warning level. The low battery alarm, tlpUpsAlarmLowBattery, is triggered when tlpUpsEstimatedChargeRemaining drops below this value.')
tlpUpsConfigLowBatteryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigLowBatteryTime.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigLowBatteryTime.setDescription('The value in seconds of tlpUpsEstimatedMinutesRemaining at which a lowBattery condition is declared. For agents which support only discrete (discontinuous) values, then the agent shall round up to the next supported value. If the requested value is larger than the largest supported value, then the largest supported value shall be selected.')
tlpUpsConfigOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 105))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigOverLoadThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpUpsConfigOverLoadThreshold.setDescription('This value denotes the percentage of load at which the overload condition occurs. The overload alarm, tlpUpsAlarmOutputOverload, is triggered when the percentage of output load exceeds this value.')
tlpPduIdentNumPdu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumPdu.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentNumPdu.setDescription('The number of pdu devices that this agent is currently managing.')
tlpPduIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2), )
if mibBuilder.loadTexts: tlpPduIdentTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentTable.setDescription('The identity details of each pdu in device table. This is a sparse dependent table, and will contain some subset of devices that are pdus.')
tlpPduIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduIdentEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentEntry.setDescription('An entry containing details for a particular pdu.')
tlpPduIdentNumInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumInputs.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentNumInputs.setDescription('The number of input lines supported by the pdu.')
tlpPduIdentNumOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumOutputs.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentNumOutputs.setDescription('The number of output lines supported by the pdu.')
tlpPduIdentNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumPhases.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentNumPhases.setDescription('The number of phases supported by the pdu.')
tlpPduIdentNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumOutlets.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentNumOutlets.setDescription('The number of receptacles supported by the pdu.')
tlpPduIdentNumOutletGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumOutletGroups.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentNumOutletGroups.setDescription('The number of receptacle groups supported by the pdu.')
tlpPduIdentNumCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumCircuits.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentNumCircuits.setDescription('The number of circuits supported by the pdu.')
tlpPduIdentNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumBreakers.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentNumBreakers.setDescription('The number of bank breakers supported by the pdu.')
tlpPduIdentNumHeatsinks = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumHeatsinks.setStatus('current')
if mibBuilder.loadTexts: tlpPduIdentNumHeatsinks.setDescription('The number of heatsink thermistors supported by the pdu.')
tlpPduSupportsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3), )
if mibBuilder.loadTexts: tlpPduSupportsTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduSupportsTable.setDescription('The supported details of each pdu in device table. This is a sparse dependent table, and will contain some subset of devices that are pdus.')
tlpPduSupportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduSupportsEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduSupportsEntry.setDescription('An entry containing supported details for a particular pdu.')
tlpPduSupportsEnergywise = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsEnergywise.setStatus('current')
if mibBuilder.loadTexts: tlpPduSupportsEnergywise.setDescription('Indicates whether the pdu supports Cisco EnergyWise.')
tlpPduSupportsRampShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsRampShed.setStatus('current')
if mibBuilder.loadTexts: tlpPduSupportsRampShed.setDescription('Indicates whether the pdu supports ramping and shedding.')
tlpPduSupportsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsOutletGroup.setStatus('current')
if mibBuilder.loadTexts: tlpPduSupportsOutletGroup.setDescription('Indicates whether the pdu supports outlet groups.')
tlpPduSupportsOutletCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsOutletCurrentPower.setStatus('current')
if mibBuilder.loadTexts: tlpPduSupportsOutletCurrentPower.setDescription('Indicates whether the pdu reports individual receptacle current and power measurements. Devices that do not support individual receptacle measurements will always return ERROR_NO_SUCH_NAME for tlpPduOutletCurrent and tlpPduOutletPower.')
tlpPduSupportsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpPduSupportsOutletVoltage.setDescription('Indicates whether the pdu reports individual receptacle voltage measurements. Devices that do not support individual receptacle measurements will always return ERROR_NO_SUCH_NAME for tlpPduOutletVoltage.')
tlpPduDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4), )
if mibBuilder.loadTexts: tlpPduDisplayTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduDisplayTable.setDescription('The display details of each pdu in device table. This is a sparse dependent table, and will contain some subset of devices that are pdus.')
tlpPduDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduDisplayEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduDisplayEntry.setDescription('An entry containing display details for a particular pdu.')
tlpPduDisplayScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("schemeReverse", 0), ("schemeNormal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayScheme.setStatus('current')
if mibBuilder.loadTexts: tlpPduDisplayScheme.setDescription('Indicates the display scheme of the LED display. The value schemeReverse(0) indicates the tricolor LED indicator uses an alternate pattern. The value schemeNormal(1) indicates the LED indicator uses the standard pattern. This value may not be supported on all models. If not supported, the value will always return schemeNormal(1).')
tlpPduDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("displayNormal", 0), ("displayReverse", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayOrientation.setStatus('current')
if mibBuilder.loadTexts: tlpPduDisplayOrientation.setDescription('Indicates the physical orientation of the LED display. The value displayNormal(0) indicates the display is right-side-up (normal). The value displayReverse(1) indicates the display is upside-down. This value may not be supported on all models. If not supported, the value will always return displayNormal(0).')
tlpPduDisplayAutoScroll = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("scrollDisabled", 0), ("scrollEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayAutoScroll.setStatus('current')
if mibBuilder.loadTexts: tlpPduDisplayAutoScroll.setDescription('Indicates whether the LED display automatically scrolls through displaying status values.')
tlpPduDisplayIntensity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("intensity25", 1), ("intensity50", 2), ("intensity75", 3), ("intensity100", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayIntensity.setStatus('current')
if mibBuilder.loadTexts: tlpPduDisplayIntensity.setDescription('Indicates the intensity, as a percentage, of the LED display. The value intensity100(4) indicates the display is at 100% intensity. The other values indicate the display is at a lesser intensity based upon the respective percentage denoted.')
tlpPduDisplayUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("metric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayUnits.setStatus('current')
if mibBuilder.loadTexts: tlpPduDisplayUnits.setDescription('Indicates the units of measurement displayed on the LED display. The value normal(0) indicates that a temperature value, for example, is displayed in degrees Farenheit. The value metric(1) indicates a temperature value is displayed in degrees Celsius.')
tlpPduDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: tlpPduDeviceTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceTable.setDescription('The device details of each pdu in device table. This is a sparse dependent table, and will contain some subset of devices that are pdus.')
tlpPduDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceEntry.setDescription('An entry containing device details for a particular pdu.')
tlpPduDeviceMainLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceMainLoadState.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceMainLoadState.setDescription('The current state of the main output of the device.')
tlpPduDeviceMainLoadControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceMainLoadControllable.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceMainLoadControllable.setDescription('Indicates whether or not the main output is controllable, and whether the ups can be turned off and on.')
tlpPduDeviceMainLoadCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDeviceMainLoadCommand.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceMainLoadCommand.setDescription('Reading this value will always return 0. Setting this value to turnOff(1) will turn off the main output of the ups. Setting this value to turnOn(2) will turn on the main output of the ups. Setting this value to cycle(3) will turn off the main output, then turn it back on.')
tlpPduDevicePowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDevicePowerOnDelay.setStatus('current')
if mibBuilder.loadTexts: tlpPduDevicePowerOnDelay.setDescription('The configurable delay value, which sets the amount of additional time a given device will wait before it connects to a valid AC source. By default the delay value is set to 0. For devices with multiple AC input sources, this delay only applies to the primary input source.')
tlpPduDeviceTotalInputPowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 5), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceTotalInputPowerRating.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceTotalInputPowerRating.setDescription('The total input power rating of all phases on the device. This value may not be supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpPduDeviceTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 6), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceTemperatureC.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceTemperatureC.setDescription('The ambient temperature at or near the PDU casing. Temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpPduDeviceTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 7), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceTemperatureF.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceTemperatureF.setDescription('The ambient temperature at or near the PDU casing. Temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpPduDevicePhaseImbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDevicePhaseImbalance.setStatus('current')
if mibBuilder.loadTexts: tlpPduDevicePhaseImbalance.setDescription('The percentage of imbalance of the three phases. This value is in the range from 0% imbalance to 100% imbalance. The lower the value, the better balanced the phases are. If all load is on a single phase, the imbalance is defined as 100%.')
tlpPduDeviceOutputPowerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceOutputPowerTotal.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceOutputPowerTotal.setDescription('The AC output total power for all circuits.')
tlpPduDeviceAggregatePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 10), Unsigned32()).setUnits('0.1 Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceAggregatePowerFactor.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceAggregatePowerFactor.setDescription('The aggregrate power factor of all phases.')
tlpPduDeviceOutputCurrentPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tenths", 1), ("hundredths", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceOutputCurrentPrecision.setStatus('current')
if mibBuilder.loadTexts: tlpPduDeviceOutputCurrentPrecision.setDescription('Output current is reported by tlpPduOutputCurrent, tlpPduOutputCurrentMin and tlpPduOutputCurrentMax. These values are all reported in hundredths (0.01A), which accommodates all models; however, on any given device the actual precision may vary. This value describes the actual precision, which can be used as a divisor against the output current values to obtain the true output current measurement. For example, if tlpPduOutputCurrent reports 530 and tlpPduDeviceOutputCurrentPrecision is tenths(1), then the actual output current is 5.3.')
tlpPduInputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1), )
if mibBuilder.loadTexts: tlpPduInputTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputTable.setDescription('The input details of each pdu in device table. This is a sparse dependent table, and will contain the number of entries based upon the number of pdus managed by the agent as reported by tlpPduIdentNumPdus.')
tlpPduInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduInputEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputEntry.setDescription('An entry containing information applicable to a particular pdu managed by this agent.')
tlpPduInputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputNominalVoltage.setDescription('The nominal value of the input line voltage. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpPduInputNominalVoltagePhaseToPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 2), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputNominalVoltagePhaseToPhase.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputNominalVoltagePhaseToPhase.setDescription('The nominal value of the input line voltage as measured from phase to phase. This value may not be supported on all models. If not supported, this value will always return zero.')
tlpPduInputNominalVoltagePhaseToNeutral = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 3), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputNominalVoltagePhaseToNeutral.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputNominalVoltagePhaseToNeutral.setDescription('The nominal value of the input line voltage as measured from phase to neutral. This value may not be supported on all models. If not supported, this value will always return zero.')
tlpPduInputLowTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputLowTransferVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputLowTransferVoltage.setDescription('The minimum line voltage allowed before the unit disconnects the AC input connection. This value may not be writable on all models. If not writable, the value will be rejected and an appropriate error message will be returned. When supported, the minimum and maximum values allowed are dictated by tlpPduInputLowTransferVoltageLowerBound and tlpPduInputLowTransferVoltageUpperBound respectively.')
tlpPduInputLowTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 5), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputLowTransferVoltageLowerBound.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputLowTransferVoltageLowerBound.setDescription('The lower boundary value of tlpPduInputLowTransferVoltage as dictated by the hardware of the unit.')
tlpPduInputLowTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 6), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputLowTransferVoltageUpperBound.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputLowTransferVoltageUpperBound.setDescription('The upper boundary value of tlpPduInputLowTransferVoltage as dictated by the hardware of the unit.')
tlpPduInputHighTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 7), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputHighTransferVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputHighTransferVoltage.setDescription('The maximum line voltage allowed before the unit disconnects the AC input connection. This value may not be writable on all models. If not writable, the value will be rejected and an appropriate error message will be returned. When supported, the minimum and maximum values allowed are dictated by tlpPduInputHighTransferVoltageLowerBound and tlpPduInputHighTransferVoltageUpperBound respectively.')
tlpPduInputHighTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 8), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputHighTransferVoltageLowerBound.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputHighTransferVoltageLowerBound.setDescription('The lower boundary value of tlpPduInputHighTransferVoltage as dictated by the hardware of the unit.')
tlpPduInputHighTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 9), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputHighTransferVoltageUpperBound.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputHighTransferVoltageUpperBound.setDescription('The upper boundary value of tlpPduInputHighTransferVoltage as dictated by the hardware of the unit.')
tlpPduInputCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 10), Unsigned32()).setUnits('Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputCurrentLimit.setDescription('The capacity of each phase conductor in the pdu limited by the AC input cord or any other potential limiting factors unique to a given unit.')
tlpPduInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2), )
if mibBuilder.loadTexts: tlpPduInputPhaseTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputPhaseTable.setDescription('The input phase details of each pdu in device table. This is a sparse dependent table, and will contain the number of entries based upon the value of tlpPduIdentNumInputs and tlpPduIdentNumPhases per each device.')
tlpPduInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduInputPhaseIndex"))
if mibBuilder.loadTexts: tlpPduInputPhaseEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputPhaseEntry.setDescription('An entry containing information applicable to a particular input phase managed by this agent.')
tlpPduInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhaseIndex.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputPhaseIndex.setDescription('The table row index for the pdu phase.')
tlpPduInputPhasePhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhasePhaseType.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputPhasePhaseType.setDescription('Denotes whether measurements are phase to neutral(0) or phase to phase(1).')
tlpPduInputPhaseFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 3), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhaseFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputPhaseFrequency.setDescription('The present input frequency for a given phase.')
tlpPduInputPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 4), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhaseVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputPhaseVoltage.setDescription('The magnitude of the present input voltage for a given phase.')
tlpPduInputPhaseVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 5), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduInputPhaseVoltageMin.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputPhaseVoltageMin.setDescription('The minimum input voltage value since the last reset of this value for a given phase. If any value is written to either tlpPduInputVoltageMin or tlpPduInputVoltageMax, both will be reset to their appropriate minimum and maximum values.')
tlpPduInputPhaseVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 6), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduInputPhaseVoltageMax.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputPhaseVoltageMax.setDescription('The maximum input voltage value since the last reset of this value for a given phase. If any value is written to either tlpPduInputVoltageMin or tlpPduInputVoltageMax, both will be reset to their appropriate minimum and maximum values.')
tlpPduInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 7), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhaseCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpPduInputPhaseCurrent.setDescription('The magnitude of the present input current for a given phase.')
tlpPduOutputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1), )
if mibBuilder.loadTexts: tlpPduOutputTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputTable.setDescription('The output details of each pdu in device table. This is a sparse dependent table, and will contain the number of entries based upon the value of tlpPduIdentNumOutputs per each device.')
tlpPduOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduOutputIndex"))
if mibBuilder.loadTexts: tlpPduOutputEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputEntry.setDescription('An entry containing output information applicable to a particular phase managed by this agent.')
tlpPduOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputIndex.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputIndex.setDescription('The table row index for the pdu phase.')
tlpPduOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputPhase.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputPhase.setDescription('Indicates the phase associated with the output line.')
tlpPduOutputPhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputPhaseType.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputPhaseType.setDescription('Denotes whether measurements are phase to neutral(0) or phase to phase(1).')
tlpPduOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 4), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputVoltage.setDescription('The magnitude of the present output voltage for a given output line.')
tlpPduOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 5), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputCurrent.setDescription('The output current, in hundreths of amps, for a given phase.')
tlpPduOutputCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 6), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputCurrentMin.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputCurrentMin.setDescription('The minimum current observed for a given phase since last reset.')
tlpPduOutputCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 7), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputCurrentMax.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputCurrentMax.setDescription('The maximum current observed for a given phase since last reset.')
tlpPduOutputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 8), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputActivePower.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputActivePower.setDescription('The output power for a given phase.')
tlpPduOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 9), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputPowerFactor.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputPowerFactor.setDescription('The output power factor, in hundreths of a percent, for a given phase.')
tlpPduOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputSource.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutputSource.setDescription('The present source of output power. The enumeration none(0) indicates that there is no source of output power (and therefore no output power), for example, the system has opened the output breaker.')
tlpPduOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1), )
if mibBuilder.loadTexts: tlpPduOutletTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletTable.setDescription('The receptacle status details of each pdu in device table. This is a sparse dependent table, and will contain the number of entries based upon the value of tlpPduIdentNumOutlets per each device.')
tlpPduOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduOutletIndex"))
if mibBuilder.loadTexts: tlpPduOutletEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletEntry.setDescription('An entry containing information applicable to a particular outlet managed by this agent.')
tlpPduOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletIndex.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletIndex.setDescription('The table row index for the pdu outlet.')
tlpPduOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletName.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletName.setDescription('A user-definable string identifying the name of the outlet.')
tlpPduOutletDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletDescription.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletDescription.setDescription('A user-definable string identifying the device(s) connected to the given outlet.')
tlpPduOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletState.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletState.setDescription('The current state of the outlet.')
tlpPduOutletControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletControllable.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletControllable.setDescription('Denotes whether this outlet is controllable.')
tlpPduOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletCommand.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletCommand.setDescription('Reading this value will always return 0. Setting this value to turnOff(1) will turn off the outlet. Setting this value to turnOn(2) will turn on the outlet. Setting this value to cycle(3) will turn the outlet off, then turn it back on.')
tlpPduOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 7), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletVoltage.setDescription('The magnitude of the present output voltage for a given outlet. If the voltage measurement is not supported for an individual receptacle regardless whether device-wide or just for this receptacle, then this value will always return ERROR_NO_SUCH_NAME. Device-wide support for receptacle voltage measurements is denoted by tlpPduSupportsOutletVoltage.')
tlpPduOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 8), Unsigned32()).setUnits('0.01 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletCurrent.setDescription('The present output current, in hundreths of amps, of a given outlet. If the current measurement is not supported for an individual receptacle regardless whether device-wide or just for this receptacle, then this value will always return ERROR_NO_SUCH_NAME. Device-wide support for receptacle current measurements is denoted by tlpPduSupportsCurrentPower.')
tlpPduOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletPower.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletPower.setDescription('The output power of a given outlet. If the power measurement is not supported for an individual receptacle regardless whether device-wide or just for this receptacle, then this value will always return ERROR_NO_SUCH_NAME. Device-wide support for receptacle power measurements is denoted by tlpPduSupportsCurrentPower.')
tlpPduOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOff", 0), ("turnOnAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletRampAction.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletRampAction.setDescription('The ramp action to take on a given outlet when powering on the device. If this receptacle is not controllable, as denoted by tlpPduOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpPduOutletRampDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 11), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletRampDelay.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletRampDelay.setDescription('The number of seconds to delay before powering on the given outlet. If this receptacle is not controllable, as denoted by tlpPduOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpPduOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOn", 0), ("turnOffAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletShedAction.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletShedAction.setDescription('The shed action to take on a given outlet when powering off the device. If this receptacle is not controllable, as denoted by tlpPduOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpPduOutletShedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 13), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletShedDelay.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletShedDelay.setDescription('The number of seconds to delay before powering off the given outlet. If this receptacle is not controllable, as denoted by tlpPduOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpPduOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroup.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletGroup.setDescription('The tlpPduOutletGroupIndex group index of the respective group to which the given outlet is assigned, or zero (0) if the given outlet is not grouped.')
tlpPduOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletBank.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletBank.setDescription('Indicates on which bank the given outlet is located.')
tlpPduOutletCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletCircuit.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletCircuit.setDescription('Indicates on which circuit the given outlet is wired.')
tlpPduOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletPhase.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletPhase.setDescription('Indicates on which phase or phases the given outlet is associated. For single phase devices, this object will always return phase1(1). For 3-phase devices with outlets wired to a single phase, this object will return phase1(1), phase2(2) or phase3(3). For 3-phase devices with outlets wired to two phases, this object will return phase1-2(4) for phases 1 and 2, phase2-3(5) for phases 2 and 3, and phase3-1(6) for phases 3 and 1. Devices that do not report phase connections will return unknown(0).')
tlpPduOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2), )
if mibBuilder.loadTexts: tlpPduOutletGroupTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletGroupTable.setDescription('The receptacle grouping details of each pdu in device table. This is a sparse dependent table, and will contain the number of entries based upon the value of tlpPduIdentNumOutletGroups per each device.')
tlpPduOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduOutletGroupIndex"))
if mibBuilder.loadTexts: tlpPduOutletGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletGroupEntry.setDescription('An entry containing information applicable to a particular outlet group managed by this agent.')
tlpPduOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletGroupIndex.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletGroupIndex.setDescription('The table row index for the pdu outlet group.')
tlpPduOutletGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletGroupRowStatus.setDescription('Row status for the tlpPduOutletGroupTable')
tlpPduOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroupName.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletGroupName.setDescription('The name of this outlet group.')
tlpPduOutletGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroupDescription.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletGroupDescription.setDescription('A description for this outlet group.')
tlpPduOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletGroupState.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletGroupState.setDescription('The current state of the outlet group. This value will report off(1) if all outlets in the group are off, on(2) if all outlets in the group are on, mixed(3) if some outlets in the group are off and others are on, or unknown(0) if the state of the outlets cannot be determined.')
tlpPduOutletGroupCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroupCommand.setStatus('current')
if mibBuilder.loadTexts: tlpPduOutletGroupCommand.setDescription('Reading this value will always return 0. Setting this value to turnOff(1) will turn off every outlet associated with the group. Setting this value to turnOn(2) will turn on every outlet associated with the group. Setting this value to cycle(3) will turn off every outlet associated with the group, then turn each outlet back on.')
tlpPduCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1), )
if mibBuilder.loadTexts: tlpPduCircuitTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitTable.setDescription('A list of pdu circuit table entries. The number of entries is given by the value of tlpPduIdentNumCircuits.')
tlpPduCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduCircuitIndex"))
if mibBuilder.loadTexts: tlpPduCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitEntry.setDescription('An entry containing information applicable to a particular circuit managed by this agent.')
tlpPduCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitIndex.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitIndex.setDescription('The table row index for the pdu circuit.')
tlpPduCircuitPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitPhase.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitPhase.setDescription('Indicates on which phase or phases the given circuit is wired. For single phase devices, this object will always return phase1(1). For 3-phase devices with outlets wired to a single phase, this object will return phase1(1), phase2(2) or phase3(3). For 3-phase devices with outlets wired to two phases, this object will return phase1-2(4) for phases 1 and 2, phase2-3(5) for phases 2 and 3, and phase3-1(6) for phases 3 and 1. Devices that do not report phase connections will return unknown(0).')
tlpPduCircuitInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 3), Integer32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitInputVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitInputVoltage.setDescription('The input voltage for a circuit.')
tlpPduCircuitTotalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 4), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitTotalCurrent.setDescription('The total current for all receptacles in a given circuit.')
tlpPduCircuitCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 5), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitCurrentLimit.setDescription('The current capacity of a circuit in the system limited by the circuit breaker or wiring used in a given unit.')
tlpPduCircuitCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 6), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitCurrentMin.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitCurrentMin.setDescription('The minimum total current for all receptacles in a given circuit since last reset.')
tlpPduCircuitCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 7), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitCurrentMax.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitCurrentMax.setDescription('The maximum total current for all receptacles in a given circuit since last reset.')
tlpPduCircuitTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 8), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitTotalPower.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitTotalPower.setDescription('The total power for all receptacles in a given circuit.')
tlpPduCircuitPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitPowerFactor.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitPowerFactor.setDescription('The power factor for all receptacles in a given circuit.')
tlpPduCircuitUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 10), Unsigned32()).setUnits('0.01 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitUtilization.setStatus('current')
if mibBuilder.loadTexts: tlpPduCircuitUtilization.setDescription('The percentage of utilization of a given circuit. This is typically a calculation of tlpPduCircuitTotalCurrent / tlpPduCircuitCurrentLimit.')
tlpPduBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5, 1), )
if mibBuilder.loadTexts: tlpPduBreakerTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduBreakerTable.setDescription('A list of pdu bank breaker table entries. The number of entries is given by the value of tlpPduIdentNumBreakers.')
tlpPduBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduBreakerIndex"))
if mibBuilder.loadTexts: tlpPduBreakerEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduBreakerEntry.setDescription('An entry containing information applicable to a particular bank breaker managed by this agent.')
tlpPduBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduBreakerIndex.setStatus('current')
if mibBuilder.loadTexts: tlpPduBreakerIndex.setDescription('The table row index for the pdu bank breaker.')
tlpPduBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("open", 0), ("closed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduBreakerStatus.setStatus('current')
if mibBuilder.loadTexts: tlpPduBreakerStatus.setDescription('Indicates whether the bank breaker is open(0), closed(1) or not installed(2).')
tlpPduHeatsinkTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1), )
if mibBuilder.loadTexts: tlpPduHeatsinkTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduHeatsinkTable.setDescription('A list of pdu heatsink thermistor table entries. The number of entries is given by the value of tlpPduIdentNumHeatsinks.')
tlpPduHeatsinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduHeatsinkIndex"))
if mibBuilder.loadTexts: tlpPduHeatsinkEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduHeatsinkEntry.setDescription('An entry containing information applicable to a particular heatsink thermistor managed by this agent.')
tlpPduHeatsinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduHeatsinkIndex.setStatus('current')
if mibBuilder.loadTexts: tlpPduHeatsinkIndex.setDescription('The table row index for the pdu heatsink thermistor.')
tlpPduHeatsinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAvailable", 0), ("available", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduHeatsinkStatus.setStatus('current')
if mibBuilder.loadTexts: tlpPduHeatsinkStatus.setDescription('Indicates whether the heatsink thermistor is available. The entry will return notAvailable(0) if a thermistor is either non-existent or disconnected, or available(1) when connected.')
tlpPduHeatsinkTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1, 3), Integer32()).setUnits('0.1 degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduHeatsinkTemperatureC.setStatus('current')
if mibBuilder.loadTexts: tlpPduHeatsinkTemperatureC.setDescription('The temperature at the heatsink termistor in tenths degrees Centigrade. Heatsink temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpPduHeatsinkTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1, 4), Integer32()).setUnits('0.1 degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduHeatsinkTemperatureF.setStatus('current')
if mibBuilder.loadTexts: tlpPduHeatsinkTemperatureF.setDescription('The temperature at the heatsink termistor in tenths degrees Farenheit. Heatsink temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpPduControlTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1), )
if mibBuilder.loadTexts: tlpPduControlTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduControlTable.setDescription('The actionable controls for each pdu in device table. This is a sparse dependent table, and will contain some subset of devices that are pdus.')
tlpPduControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduControlEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduControlEntry.setDescription('An entry containing controls for a particular pdu.')
tlpPduControlRamp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlRamp.setStatus('current')
if mibBuilder.loadTexts: tlpPduControlRamp.setDescription('Set to TRUE to initiate the pre-designated ramp sequence on the pdu.')
tlpPduControlShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlShed.setStatus('current')
if mibBuilder.loadTexts: tlpPduControlShed.setDescription('Set to TRUE to initiate the pre-designated shed sequence on the pdu.')
tlpPduControlPduOn = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlPduOn.setStatus('current')
if mibBuilder.loadTexts: tlpPduControlPduOn.setDescription('Set to TRUE to turn the pdu on.')
tlpPduControlPduOff = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlPduOff.setStatus('current')
if mibBuilder.loadTexts: tlpPduControlPduOff.setDescription('Set to TRUE to turn the pdu off.')
tlpPduControlPduReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlPduReboot.setStatus('current')
if mibBuilder.loadTexts: tlpPduControlPduReboot.setDescription('Set to TRUE to reboot the pdu.')
tlpPduConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 5, 1), )
if mibBuilder.loadTexts: tlpPduConfigTable.setStatus('current')
if mibBuilder.loadTexts: tlpPduConfigTable.setDescription('The configuration options of each pdu in device table. This is a sparse dependent table, and will contain some subset of devices that are pdus. Not all options are available on all pdus.')
tlpPduConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tlpPduConfigEntry.setDescription('An entry containing configuration options for a particular pdu.')
tlpPduConfigInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduConfigInputVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpPduConfigInputVoltage.setDescription('The nominal value of the input line voltage. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME. This value may not be writable on all models. If not writable, the value will be rejected and an appropriate error message will be returned.')
tlpEnvIdentNumEnvirosense = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvIdentNumEnvirosense.setStatus('current')
if mibBuilder.loadTexts: tlpEnvIdentNumEnvirosense.setDescription('The number of envirosense devices that this agent is currently managing.')
tlpEnvIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2), )
if mibBuilder.loadTexts: tlpEnvIdentTable.setStatus('current')
if mibBuilder.loadTexts: tlpEnvIdentTable.setDescription('The identity details of each envirosense in device table. The number of entries is given by the value of tlpDevicesNumDevices.')
tlpEnvIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpEnvIdentEntry.setStatus('current')
if mibBuilder.loadTexts: tlpEnvIdentEntry.setDescription('An entry containing details for a particular envirosense.')
tlpEnvIdentTempSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvIdentTempSupported.setStatus('current')
if mibBuilder.loadTexts: tlpEnvIdentTempSupported.setDescription('Indicates whether or not temperature is supported.')
tlpEnvIdentHumiditySupported = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvIdentHumiditySupported.setStatus('current')
if mibBuilder.loadTexts: tlpEnvIdentHumiditySupported.setDescription('Indicates whether or not temperature is supported.')
tlpEnvNumInputContacts = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvNumInputContacts.setStatus('current')
if mibBuilder.loadTexts: tlpEnvNumInputContacts.setDescription('The number of input contacts supported by the envirosense.')
tlpEnvNumOutputContacts = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvNumOutputContacts.setStatus('current')
if mibBuilder.loadTexts: tlpEnvNumOutputContacts.setDescription('The number of output contacts supported by the envirosense.')
tlpEnvTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: tlpEnvTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: tlpEnvTemperatureTable.setDescription('The temperature details of each envirosense in device table. The number of entries is given by the value of tlpDevicesNumDevices.')
tlpEnvTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpEnvTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: tlpEnvTemperatureEntry.setDescription('An entry containing temperature details for a particular envirosense.')
tlpEnvTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1, 1, 1), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvTemperatureC.setStatus('current')
if mibBuilder.loadTexts: tlpEnvTemperatureC.setDescription('The ambient temperature.')
tlpEnvTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1, 1, 2), Integer32()).setUnits('0.1 degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvTemperatureF.setStatus('current')
if mibBuilder.loadTexts: tlpEnvTemperatureF.setDescription('The ambient temperature.')
tlpEnvTemperatureInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvTemperatureInAlarm.setStatus('current')
if mibBuilder.loadTexts: tlpEnvTemperatureInAlarm.setDescription('Indicates whether or not temperature is in alarm.')
tlpEnvHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 2), )
if mibBuilder.loadTexts: tlpEnvHumidityTable.setStatus('current')
if mibBuilder.loadTexts: tlpEnvHumidityTable.setDescription('The humidity details of each envirosense in device table. The number of entries is given by the value of tlpDevicesNumDevices.')
tlpEnvHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpEnvHumidityEntry.setStatus('current')
if mibBuilder.loadTexts: tlpEnvHumidityEntry.setDescription('An entry containing humidity details for a particular envirosense.')
tlpEnvHumidityHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvHumidityHumidity.setStatus('current')
if mibBuilder.loadTexts: tlpEnvHumidityHumidity.setDescription('The ambient humidity.')
tlpEnvHumidityInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvHumidityInAlarm.setStatus('current')
if mibBuilder.loadTexts: tlpEnvHumidityInAlarm.setDescription('Indicates whether or not humidity is in alarm.')
tlpEnvInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3), )
if mibBuilder.loadTexts: tlpEnvInputContactTable.setStatus('current')
if mibBuilder.loadTexts: tlpEnvInputContactTable.setDescription('The input contact details of each envirosense in device table. The number of entries is given by the value of tlpDevicesNumDevices.')
tlpEnvInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpEnvInputContactIndex"))
if mibBuilder.loadTexts: tlpEnvInputContactEntry.setStatus('current')
if mibBuilder.loadTexts: tlpEnvInputContactEntry.setDescription('An entry containing input contact details for a particular envirosense.')
tlpEnvInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvInputContactIndex.setStatus('current')
if mibBuilder.loadTexts: tlpEnvInputContactIndex.setDescription('The table row index for the envirosense input contact details.')
tlpEnvInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvInputContactName.setStatus('current')
if mibBuilder.loadTexts: tlpEnvInputContactName.setDescription('The name or description of the contact.')
tlpEnvInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvInputContactNormalState.setStatus('current')
if mibBuilder.loadTexts: tlpEnvInputContactNormalState.setDescription('The normal operating position of the contact.')
tlpEnvInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvInputContactCurrentState.setStatus('current')
if mibBuilder.loadTexts: tlpEnvInputContactCurrentState.setDescription('The current state of the contact.')
tlpEnvInputContactInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvInputContactInAlarm.setStatus('current')
if mibBuilder.loadTexts: tlpEnvInputContactInAlarm.setDescription('Indicates whether or not the contact is in alarm.')
tlpEnvOutputContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4), )
if mibBuilder.loadTexts: tlpEnvOutputContactTable.setStatus('current')
if mibBuilder.loadTexts: tlpEnvOutputContactTable.setDescription('The output contact details of each envirosense in device table. The number of entries is given by the value of tlpDevicesNumDevices.')
tlpEnvOutputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpEnvOutputContactIndex"))
if mibBuilder.loadTexts: tlpEnvOutputContactEntry.setStatus('current')
if mibBuilder.loadTexts: tlpEnvOutputContactEntry.setDescription('An entry containing output contact details for a particular envirosense.')
tlpEnvOutputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvOutputContactIndex.setStatus('current')
if mibBuilder.loadTexts: tlpEnvOutputContactIndex.setDescription('The table row index for the envirosense output contact details.')
tlpEnvOutputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvOutputContactName.setStatus('current')
if mibBuilder.loadTexts: tlpEnvOutputContactName.setDescription('The name or description of the contact.')
tlpEnvOutputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvOutputContactNormalState.setStatus('current')
if mibBuilder.loadTexts: tlpEnvOutputContactNormalState.setDescription('The normal operating position of the contact.')
tlpEnvOutputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvOutputContactCurrentState.setStatus('current')
if mibBuilder.loadTexts: tlpEnvOutputContactCurrentState.setDescription('The current state of the contact.')
tlpEnvOutputContactInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvOutputContactInAlarm.setStatus('current')
if mibBuilder.loadTexts: tlpEnvOutputContactInAlarm.setDescription('Indicates whether or not the contact is in alarm.')
tlpEnvConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1), )
if mibBuilder.loadTexts: tlpEnvConfigTable.setStatus('current')
if mibBuilder.loadTexts: tlpEnvConfigTable.setDescription('The configuration options of each envirosense in device table. This is a sparse dependent table, and will contain some subset of devices that are envirosenses. Not all options are available on all envirosenses.')
tlpEnvConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpEnvConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tlpEnvConfigEntry.setDescription('An entry containing configuration options for a particular envirosenses.')
tlpEnvTemperatureLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1, 1), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvTemperatureLowLimit.setStatus('current')
if mibBuilder.loadTexts: tlpEnvTemperatureLowLimit.setDescription('The lower alarm limit for ambient temperature.')
tlpEnvTemperatureHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1, 2), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvTemperatureHighLimit.setStatus('current')
if mibBuilder.loadTexts: tlpEnvTemperatureHighLimit.setDescription('The upper alarm limit for ambient temperature.')
tlpEnvHumidityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvHumidityLowLimit.setStatus('current')
if mibBuilder.loadTexts: tlpEnvHumidityLowLimit.setDescription('The lower alarm limit for ambient humidity.')
tlpEnvHumidityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvHumidityHighLimit.setStatus('current')
if mibBuilder.loadTexts: tlpEnvHumidityHighLimit.setDescription('The upper alarm limit for ambient humidity.')
tlpAtsIdentNumAts = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumAts.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentNumAts.setDescription('The number of ats devices that this agent is currently managing.')
tlpAtsIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2), )
if mibBuilder.loadTexts: tlpAtsIdentTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentTable.setDescription('The identity details of each ats in device table. This is a sparse dependent table, and will contain some subset of devices that are atss.')
tlpAtsIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsIdentEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentEntry.setDescription('An entry containing details for a particular ats.')
tlpAtsIdentNumInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumInputs.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentNumInputs.setDescription('The number of inputs supported by the ats.')
tlpAtsIdentNumOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumOutputs.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentNumOutputs.setDescription('The number of outputs supported by the ats.')
tlpAtsIdentNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumPhases.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentNumPhases.setDescription('The number of phases per input supported by the ats.')
tlpAtsIdentNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumOutlets.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentNumOutlets.setDescription('The number of receptacles supported by the ats.')
tlpAtsIdentNumOutletGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumOutletGroups.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentNumOutletGroups.setDescription('The number of receptacle groups supported by the ats.')
tlpAtsIdentNumCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumCircuits.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentNumCircuits.setDescription('The number of circuits supported by the ats.')
tlpAtsIdentNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumBreakers.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentNumBreakers.setDescription('The number of bank breakers supported by the ats.')
tlpAtsIdentNumHeatsinks = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumHeatsinks.setStatus('current')
if mibBuilder.loadTexts: tlpAtsIdentNumHeatsinks.setDescription('The number of heatsink thermistors supported by the ats.')
tlpAtsSupportsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3), )
if mibBuilder.loadTexts: tlpAtsSupportsTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsSupportsTable.setDescription('The supported details of each ats in device table. This is a sparse dependent table, and will contain some subset of devices that are atss.')
tlpAtsSupportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsSupportsEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsSupportsEntry.setDescription('An entry containing supported details for a particular ats.')
tlpAtsSupportsEnergywise = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsEnergywise.setStatus('current')
if mibBuilder.loadTexts: tlpAtsSupportsEnergywise.setDescription('Indicates whether the ats supports Cisco EnergyWise.')
tlpAtsSupportsRampShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsRampShed.setStatus('current')
if mibBuilder.loadTexts: tlpAtsSupportsRampShed.setDescription('Indicates whether the ats supports ramping and shedding.')
tlpAtsSupportsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsOutletGroup.setStatus('current')
if mibBuilder.loadTexts: tlpAtsSupportsOutletGroup.setDescription('Indicates whether the ats supports outlet groups.')
tlpAtsSupportsOutletCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsOutletCurrentPower.setStatus('current')
if mibBuilder.loadTexts: tlpAtsSupportsOutletCurrentPower.setDescription('Indicates whether the ats reports individual receptacle current and power measurements. Devices that do not support individual receptacle measurements will always return ERROR_NO_SUCH_NAME for tlpAtsOutletCurrent and tlpAtsOutletPower.')
tlpAtsSupportsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsSupportsOutletVoltage.setDescription('Indicates whether the ats reports individual receptacle voltage measurements. Devices that do not support individual receptacle measurements will always return ERROR_NO_SUCH_NAME for tlpAtsOutletVoltage.')
tlpAtsDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4), )
if mibBuilder.loadTexts: tlpAtsDisplayTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDisplayTable.setDescription('The display details of each ats in device table. This is a sparse dependent table, and will contain some subset of devices that are atss.')
tlpAtsDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsDisplayEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDisplayEntry.setDescription('An entry containing display details for a particular ats.')
tlpAtsDisplayScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("schemeReverse", 0), ("schemeNormal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayScheme.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDisplayScheme.setDescription('Indicates the display scheme of the LED display. The value schemeReverse(0) indicates the tricolor LED indicator uses an alternate pattern. The value schemeNormal(1) indicates the LED indicator uses the standard pattern. This value may not be supported on all models. If not supported, the value will always return schemeNormal(1).')
tlpAtsDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("displayNormal", 0), ("displayReverse", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayOrientation.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDisplayOrientation.setDescription('Indicates the physical orientation of the LED display. The value displayNormal(0) indicates the display is right-side-up (normal). The value displayReverse(1) indicates the display is upside-down. This value may not be supported on all models. If not supported, the value will always return displayNormal(0).')
tlpAtsDisplayAutoScroll = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("scrollDisabled", 0), ("scrollEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayAutoScroll.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDisplayAutoScroll.setDescription('Indicates whether the LED display automatically scrolls through displaying status values.')
tlpAtsDisplayIntensity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("intensity25", 1), ("intensity50", 2), ("intensity75", 3), ("intensity100", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayIntensity.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDisplayIntensity.setDescription('Indicates the intensity, as a percentage, of the LED display. The value intensity100(4) indicates the display is at 100% intensity. The other values indicate the display is at a lesser intensity based upon the respective percentage denoted.')
tlpAtsDisplayUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("metric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayUnits.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDisplayUnits.setDescription('Indicates the units of measurement displayed on the LED display. The value normal(0) indicates that a temperature value, for example, is displayed in degrees Farenheit. The value metric(1) indicates a temperature value is displayed in degrees Celsius.')
tlpAtsDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1), )
if mibBuilder.loadTexts: tlpAtsDeviceTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceTable.setDescription('The device details of each ats in device table. This is a sparse dependent table, and will contain some subset of devices that are atss.')
tlpAtsDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceEntry.setDescription('An entry containing device details for a particular ats.')
tlpAtsDeviceMainLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceMainLoadState.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceMainLoadState.setDescription('The current state of the main output of the device.')
tlpAtsDeviceMainLoadControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceMainLoadControllable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceMainLoadControllable.setDescription('Indicates whether or not the main output is controllable, and whether the ups can be turned off and on.')
tlpAtsDeviceMainLoadCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDeviceMainLoadCommand.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceMainLoadCommand.setDescription('Reading this value will always return 0. Setting this value to turnOff(1) will turn off the main output of the ups. Setting this value to turnOn(2) will turn on the main output of the ups. Setting this value to cycle(3) will turn off the main output, then turn it back on.')
tlpAtsDevicePowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDevicePowerOnDelay.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDevicePowerOnDelay.setDescription('The configurable delay value, which sets the amount of additional time a given device will wait before it connects to a valid AC source. By default the delay value is set to 0. For devices with multiple AC input sources, this delay only applies to the primary input source.')
tlpAtsDeviceTotalInputPowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 5), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceTotalInputPowerRating.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceTotalInputPowerRating.setDescription('The total input power rating of all phases on the device. This value may not be supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsDeviceTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 6), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceTemperatureC.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceTemperatureC.setDescription('The ambient temperature at or near the ats casing. Temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsDeviceTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 7), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceTemperatureF.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceTemperatureF.setDescription('The ambient temperature at or near the ats casing. Temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsDevicePhaseImbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDevicePhaseImbalance.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDevicePhaseImbalance.setDescription('The percentage of imbalance of the three phases. This value is in the range from 0% imbalance to 100% imbalance. The lower the value, the better balanced the phases are. If all load is on a single phase, the imbalance is defined as 100%.')
tlpAtsDeviceOutputPowerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceOutputPowerTotal.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceOutputPowerTotal.setDescription('The AC output total power for all circuits.')
tlpAtsDeviceAggregatePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 10), Unsigned32()).setUnits('0.1 Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceAggregatePowerFactor.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceAggregatePowerFactor.setDescription('The aggregrate power factor of all phases.')
tlpAtsDeviceOutputCurrentPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tenths", 1), ("hundredths", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceOutputCurrentPrecision.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceOutputCurrentPrecision.setDescription('Output current is reported by tlpAtsOutputCurrent, tlpAtsOutputCurrentMin and tlpAtsOutputCurrentMax. These values are all reported in hundredths (0.01A), which accommodates all models; however, on any given device the actual precision may vary. This value describes the actual precision, which can be used as a divisor against the output current values to obtain the true output current measurement. For example, if tlpAtsOutputCurrent reports 530 and tlpAtsDeviceOutputCurrentPrecision is tenths(1), then the actual output current is 5.3.')
tlpAtsDeviceGeneralFault = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceGeneralFault.setStatus('current')
if mibBuilder.loadTexts: tlpAtsDeviceGeneralFault.setDescription('Indicates whether or not the ats is in a system fault condition. When the ats is in such a fault condition, the condition can be cleared with tlpAtsControlResetGeneralFault.')
tlpAtsInputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1), )
if mibBuilder.loadTexts: tlpAtsInputTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputTable.setDescription('The input details of each ats in device table. This is a sparse dependent table, and will contain the number of entries based upon the number of atss managed by the agent as reported by tlpAtsIdentNumAts.')
tlpAtsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsInputEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputEntry.setDescription('An entry containing information applicable to a particular primary input phase managed by this agent.')
tlpAtsInputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputNominalVoltage.setDescription('The nominal value of the input line voltage. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsInputNominalVoltagePhaseToPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 2), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputNominalVoltagePhaseToPhase.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputNominalVoltagePhaseToPhase.setDescription('The nominal value of the input line voltage as measured from phase to phase. This value may not be supported on all models. If not supported, this value will always return zero.')
tlpAtsInputNominalVoltagePhaseToNeutral = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 3), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputNominalVoltagePhaseToNeutral.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputNominalVoltagePhaseToNeutral.setDescription('The nominal value of the input line voltage as measured from phase to neutral. This value may not be supported on all models. If not supported, this value will always return zero.')
tlpAtsInputBadTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputBadTransferVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputBadTransferVoltage.setDescription('The minimum line voltage allowed before the unit disconnects the AC input connection.')
tlpAtsInputBadTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 5), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputBadTransferVoltageLowerBound.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputBadTransferVoltageLowerBound.setDescription('The lower boundary value of tlpAtsInputBadTransferVoltage as dictated by the hardware of the unit.')
tlpAtsInputBadTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 6), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputBadTransferVoltageUpperBound.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputBadTransferVoltageUpperBound.setDescription('The upper boundary value of tlpAtsInputBadTransferVoltage as dictated by the hardware of the unit.')
tlpAtsInputHighTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 7), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputHighTransferVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputHighTransferVoltage.setDescription('The maximum line voltage allowed before the unit disconnects the AC input connection.')
tlpAtsInputHighTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 8), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputHighTransferVoltageLowerBound.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputHighTransferVoltageLowerBound.setDescription('The lower boundary value of tlpAtsInputHighTransferVoltage as dictated by the hardware of the unit.')
tlpAtsInputHighTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 9), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputHighTransferVoltageUpperBound.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputHighTransferVoltageUpperBound.setDescription('The upper boundary value of tlpAtsInputHighTransferVoltage as dictated by the hardware of the unit.')
tlpAtsInputFairVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 10), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputFairVoltageThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputFairVoltageThreshold.setDescription('The voltage level at which the device will transition between sources.')
tlpAtsInputBadVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 11), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputBadVoltageThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputBadVoltageThreshold.setDescription('The minimum line voltage allowed before the device disconnects the AC input connection.')
tlpAtsInputSourceAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("inputSourceA", 1), ("inputSourceB", 2), ("inputSourceAB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputSourceAvailability.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputSourceAvailability.setDescription('The determination as to which of two AC input lines are available. The agent will return either inputSourceA(1) or inputSourceB(2) if only one line is available, or inputSourceAB(3) if both lines are available. The agent will never return none(0) since the device will be powered off if neither line is available.')
tlpAtsInputSourceInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inputSourceA", 0), ("inputSourceB", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputSourceInUse.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputSourceInUse.setDescription('The determination as to which one of two AC input lines is in use. Not all devices support the reporting of which source is currently in use. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsInputSourceTransitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputSourceTransitionCount.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputSourceTransitionCount.setDescription('The number of times the device transitions between primary and secondary sources. Most devices are limied to 65533 transitions, after which the value will not increment. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsInputCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 15), Unsigned32()).setUnits('Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputCurrentLimit.setDescription('The capacity of each phase conductor in the ats limited by the AC input cord or any other potential limiting factors unique to a given unit. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2), )
if mibBuilder.loadTexts: tlpAtsInputPhaseTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputPhaseTable.setDescription('The input phase details of each ats in device table. This is a sparse dependent table, and will contain the number of entries based upon the value of tlpAtsIdentNumInputs and tlpAtsIdentNumPhases per each device.')
tlpAtsInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsInputLineIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsInputPhaseIndex"))
if mibBuilder.loadTexts: tlpAtsInputPhaseEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputPhaseEntry.setDescription('An entry containing information applicable to a particular primary input phase managed by this agent.')
tlpAtsInputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputLineIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputLineIndex.setDescription('The table row index for the input line on the ats.')
tlpAtsInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputPhaseIndex.setDescription('The table row index for the input phase for the input line.')
tlpAtsInputPhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseType.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputPhaseType.setDescription('Denotes whether measurements are phase to neutral(0) or phase to phase(1).')
tlpAtsInputPhaseFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 4), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputPhaseFrequency.setDescription('The present input frequency for a given phase.')
tlpAtsInputPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 5), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputPhaseVoltage.setDescription('The magnitude of the present input voltage for a given phase.')
tlpAtsInputPhaseVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 6), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsInputPhaseVoltageMin.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputPhaseVoltageMin.setDescription('The minimum input voltage value since the last reset of this value for a given phase. If any value is written to either tlpAtsInputVoltageMin or tlpAtsInputVoltageMax, both will be reset to their appropriate minimum and maximum values.')
tlpAtsInputPhaseVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 7), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsInputPhaseVoltageMax.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputPhaseVoltageMax.setDescription('The maximum input voltage value since the last reset of this value for a given phase. If any value is written to either tlpAtsInputVoltageMin or tlpAtsInputVoltageMax, both will be reset to their appropriate minimum and maximum values.')
tlpAtsInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 8), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpAtsInputPhaseCurrent.setDescription('The magnitude of the present input current for a given phase.')
tlpAtsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1), )
if mibBuilder.loadTexts: tlpAtsOutputTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputTable.setDescription('The output details of each ats in device table. This is a sparse dependent table, and will contain the number of entries based upon the value of tlpAtsIdentNumOutputs per each device.')
tlpAtsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsOutputIndex"))
if mibBuilder.loadTexts: tlpAtsOutputEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputEntry.setDescription('An entry containing output information applicable to a particular phase managed by this agent.')
tlpAtsOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputIndex.setDescription('The table row index for the ats phase.')
tlpAtsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputPhase.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputPhase.setDescription('Indicates the phase associated with the output line.')
tlpAtsOutputPhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputPhaseType.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputPhaseType.setDescription('Denotes whether measurements are phase to neutral(0) or phase to phase(1).')
tlpAtsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 4), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputVoltage.setDescription('The magnitude of the present output voltage for a given output line.')
tlpAtsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 5), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputCurrent.setDescription('The output current, in hundreths of amps, for a given phase.')
tlpAtsOutputCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 6), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputCurrentMin.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputCurrentMin.setDescription('The minimum current observed for a given phase since last reset.')
tlpAtsOutputCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 7), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputCurrentMax.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputCurrentMax.setDescription('The maximum current observed for a given phase since last reset.')
tlpAtsOutputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 8), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputActivePower.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputActivePower.setDescription('The output power for a given phase.')
tlpAtsOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 9), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputPowerFactor.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputPowerFactor.setDescription('The output power factor, in hundreths of a percent, for a given phase.')
tlpAtsOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputSource.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutputSource.setDescription('The present source of output power. The enumeration none(0) indicates that there is no source of output power (and therefore no output power), for example, the system has opened the output breaker.')
tlpAtsOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1), )
if mibBuilder.loadTexts: tlpAtsOutletTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletTable.setDescription('The receptacle status details of each ats in device table. This is a sparse dependent table, and will contain the number of entries based upon the value of tlpAtsIdentNumOutlets per each device.')
tlpAtsOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsOutletIndex"))
if mibBuilder.loadTexts: tlpAtsOutletEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletEntry.setDescription('An entry containing information applicable to a particular outlet managed by this agent.')
tlpAtsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletIndex.setDescription('The table row index for the ats outlet.')
tlpAtsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletName.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletName.setDescription('A user-definable string identifying the name of the outlet.')
tlpAtsOutletDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletDescription.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletDescription.setDescription('A user-definable string identifying the device(s) connected to the given outlet.')
tlpAtsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletState.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletState.setDescription('The current state of the outlet.')
tlpAtsOutletControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletControllable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletControllable.setDescription('Denotes whether this outlet is controllable.')
tlpAtsOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletCommand.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletCommand.setDescription('Reading this value will always return 0. Setting this value to turnOff(1) will turn off the outlet. Setting this value to turnOn(2) will turn on the outlet. Setting this value to cycle(3) will turn the outlet off, then turn it back on.')
tlpAtsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 7), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletVoltage.setDescription('The magnitude of the present output voltage for a given outlet. If the voltage measurement is not supported for an individual receptacle regardless whether device-wide or just for this receptacle, then this value will always return ERROR_NO_SUCH_NAME. Device-wide support for receptacle voltage measurements is denoted by tlpAtsSupportsOutletVoltage.')
tlpAtsOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 8), Unsigned32()).setUnits('0.01 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletCurrent.setDescription('The present output current, in hundreths of amps, of a given outlet. If the current measurement is not supported for an individual receptacle regardless whether device-wide or just for this receptacle, then this value will always return ERROR_NO_SUCH_NAME. Device-wide support for receptacle current measurements is denoted by tlpAtsSupportsCurrentPower.')
tlpAtsOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletPower.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletPower.setDescription('The output power of a given outlet. If the power measurement is not supported for an individual receptacle regardless whether device-wide or just for this receptacle, then this value will always return ERROR_NO_SUCH_NAME. Device-wide support for receptacle power measurements is denoted by tlpAtsSupportsCurrentPower.')
tlpAtsOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOff", 0), ("turnOnAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletRampAction.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletRampAction.setDescription('The ramp action to take on a given outlet when powering on the device. If this receptacle is not controllable, as denoted by tlpAtsOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsOutletRampDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 11), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletRampDelay.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletRampDelay.setDescription('The number of seconds to delay before powering on the given outlet. If this receptacle is not controllable, as denoted by tlpAtsOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOn", 0), ("turnOffAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletShedAction.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletShedAction.setDescription('The shed action to take on a given outlet when powering off the device. If this receptacle is not controllable, as denoted by tlpAtsOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsOutletShedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 13), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletShedDelay.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletShedDelay.setDescription('The number of seconds to delay before powering off the given outlet. If this receptacle is not controllable, as denoted by tlpAtsOutletControllable, then this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroup.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletGroup.setDescription('The tlpAtsOutletGroupIndex group index of the respective group to which the given outlet is assigned, or zero (0) if the given outlet is not grouped.')
tlpAtsOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletBank.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletBank.setDescription('Indicates on which bank the given outlet is located.')
tlpAtsOutletCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletCircuit.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletCircuit.setDescription('Indicates on which circuit the given outlet is wired.')
tlpAtsOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletPhase.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletPhase.setDescription('Indicates on which phase or phases the given outlet is associated. For single phase devices, this object will always return phase1(1). For 3-phase devices with outlets wired to a single phase, this object will return phase1(1), phase2(2) or phase3(3). For 3-phase devices with outlets wired to two phases, this object will return phase1-2(4) for phases 1 and 2, phase2-3(5) for phases 2 and 3, and phase3-1(6) for phases 3 and 1. Devices that do not report phase connections will return unknown(0).')
tlpAtsOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2), )
if mibBuilder.loadTexts: tlpAtsOutletGroupTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletGroupTable.setDescription('The receptacle grouping details of each ats in device table. This is a sparse dependent table, and will contain the number of entries based upon the value of tlpAtsIdentNumOutletGroups per each device.')
tlpAtsOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsOutletGroupIndex"))
if mibBuilder.loadTexts: tlpAtsOutletGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletGroupEntry.setDescription('An entry containing information applicable to a particular outlet group managed by this agent.')
tlpAtsOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletGroupIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletGroupIndex.setDescription('The table row index for the ats outlet group.')
tlpAtsOutletGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletGroupRowStatus.setDescription('Row status for the tlpAtsOutletGroupTable')
tlpAtsOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroupName.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletGroupName.setDescription('The name of this outlet group.')
tlpAtsOutletGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroupDescription.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletGroupDescription.setDescription('A description for this outlet group.')
tlpAtsOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletGroupState.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletGroupState.setDescription('The current state of the outlet group. This value will report off(1) if all outlets in the group are off, on(2) if all outlets in the group are on, mixed(3) if some outlets in the group are off and others are on, or unknown(0) if the state of the outlets cannot be determined.')
tlpAtsOutletGroupCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroupCommand.setStatus('current')
if mibBuilder.loadTexts: tlpAtsOutletGroupCommand.setDescription('Reading this value will always return 0. Setting this value to turnOff(1) will turn off every outlet associated with the group. Setting this value to turnOn(2) will turn on every outlet associated with the group. Setting this value to cycle(3) will turn off every outlet associated with the group, then turn each outlet back on.')
tlpAtsCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1), )
if mibBuilder.loadTexts: tlpAtsCircuitTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitTable.setDescription('A list of ats circuit table entries. The number of entries is given by the value of tlpAtsIdentNumCircuits.')
tlpAtsCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsCircuitIndex"))
if mibBuilder.loadTexts: tlpAtsCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitEntry.setDescription('An entry containing information applicable to a particular circuit managed by this agent.')
tlpAtsCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitIndex.setDescription('The table row index for the ats circuit.')
tlpAtsCircuitPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitPhase.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitPhase.setDescription('Indicates on which phase or phases the given circuit is wired. For single phase devices, this object will always return phase1(1). For 3-phase devices with outlets wired to a single phase, this object will return phase1(1), phase2(2) or phase3(3). For 3-phase devices with outlets wired to two phases, this object will return phase1-2(4) for phases 1 and 2, phase2-3(5) for phases 2 and 3, and phase3-1(6) for phases 3 and 1. Devices that do not report phase connections will return unknown(0).')
tlpAtsCircuitInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 3), Integer32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitInputVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitInputVoltage.setDescription('The input voltage for a circuit.')
tlpAtsCircuitTotalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 4), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitTotalCurrent.setDescription('The total current for all receptacles in a given circuit.')
tlpAtsCircuitCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 5), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitCurrentLimit.setDescription('The current capacity of a circuit in the system limited by the circuit breaker or wiring used in a given unit.')
tlpAtsCircuitCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 6), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitCurrentMin.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitCurrentMin.setDescription('The minimum total current for all receptacles in a given circuit since last reset.')
tlpAtsCircuitCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 7), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitCurrentMax.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitCurrentMax.setDescription('The maximum total current for all receptacles in a given circuit since last reset.')
tlpAtsCircuitTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 8), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitTotalPower.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitTotalPower.setDescription('The total power for all receptacles in a given circuit.')
tlpAtsCircuitPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitPowerFactor.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitPowerFactor.setDescription('The power factor for all receptacles in a given circuit.')
tlpAtsCircuitUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 10), Unsigned32()).setUnits('0.01 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitUtilization.setStatus('current')
if mibBuilder.loadTexts: tlpAtsCircuitUtilization.setDescription('The percentage of utilization of a given circuit. This is typically a calculation of tlpAtsCircuitTotalCurrent / tlpAtsCircuitCurrentLimit.')
tlpAtsBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5, 1), )
if mibBuilder.loadTexts: tlpAtsBreakerTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsBreakerTable.setDescription('A list of ats bank breaker table entries. The number of entries is given by the value of tlpAtsIdentNumBreakers.')
tlpAtsBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsBreakerIndex"))
if mibBuilder.loadTexts: tlpAtsBreakerEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsBreakerEntry.setDescription('An entry containing information applicable to a particular bank breaker managed by this agent.')
tlpAtsBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsBreakerIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAtsBreakerIndex.setDescription('The table row index for the ats bank breaker.')
tlpAtsBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("open", 0), ("closed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsBreakerStatus.setStatus('current')
if mibBuilder.loadTexts: tlpAtsBreakerStatus.setDescription('Indicates whether the bank breaker is open(0), closed(1) or not installed(2).')
tlpAtsHeatsinkTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1), )
if mibBuilder.loadTexts: tlpAtsHeatsinkTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsHeatsinkTable.setDescription('A list of ats heatsink thermistor table entries. The number of entries is given by the value of tlpAtsIdentNumHeatsinks.')
tlpAtsHeatsinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsHeatsinkIndex"))
if mibBuilder.loadTexts: tlpAtsHeatsinkEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsHeatsinkEntry.setDescription('An entry containing information applicable to a particular heatsink thermistor managed by this agent.')
tlpAtsHeatsinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsHeatsinkIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAtsHeatsinkIndex.setDescription('The table row index for the ats heatsink thermistor.')
tlpAtsHeatsinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAvailable", 0), ("available", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsHeatsinkStatus.setStatus('current')
if mibBuilder.loadTexts: tlpAtsHeatsinkStatus.setDescription('Indicates whether the heatsink thermistor is available. The entry will return notAvailable(0) if a thermistor is either non-existent or disconnected, or available(1) when connected.')
tlpAtsHeatsinkTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1, 3), Integer32()).setUnits('0.1 degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsHeatsinkTemperatureC.setStatus('current')
if mibBuilder.loadTexts: tlpAtsHeatsinkTemperatureC.setDescription('The temperature at the heatsink termistor in tenths degrees Centigrade. Heatsink temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsHeatsinkTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1, 4), Integer32()).setUnits('0.1 degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsHeatsinkTemperatureF.setStatus('current')
if mibBuilder.loadTexts: tlpAtsHeatsinkTemperatureF.setDescription('The temperature at the heatsink termistor in tenths degrees Farenheit. Heatsink temperature measurements are not supported on all models. If not supported, this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsControlTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1), )
if mibBuilder.loadTexts: tlpAtsControlTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsControlTable.setDescription('The actionable controls for each ats in device table. This is a sparse dependent table, and will contain some subset of devices that are atss.')
tlpAtsControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsControlEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsControlEntry.setDescription('An entry containing controls for a particular ats.')
tlpAtsControlRamp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlRamp.setStatus('current')
if mibBuilder.loadTexts: tlpAtsControlRamp.setDescription('Set to TRUE to initiate the pre-designated ramp sequence on the ats.')
tlpAtsControlShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlShed.setStatus('current')
if mibBuilder.loadTexts: tlpAtsControlShed.setDescription('Set to TRUE to initiate the pre-designated shed sequence on the ats.')
tlpAtsControlAtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlAtsOn.setStatus('current')
if mibBuilder.loadTexts: tlpAtsControlAtsOn.setDescription('Set to TRUE to turn the ats on.')
tlpAtsControlAtsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlAtsOff.setStatus('current')
if mibBuilder.loadTexts: tlpAtsControlAtsOff.setDescription('Set to TRUE to turn the ats off.')
tlpAtsControlAtsReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlAtsReboot.setStatus('current')
if mibBuilder.loadTexts: tlpAtsControlAtsReboot.setDescription('Set to TRUE to reboot the ats.')
tlpAtsControlResetGeneralFault = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlResetGeneralFault.setStatus('current')
if mibBuilder.loadTexts: tlpAtsControlResetGeneralFault.setDescription('Set to TRUE to reset the general fault alarm indicated by tlpAtsDeviceGeneralFault.')
tlpAtsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1), )
if mibBuilder.loadTexts: tlpAtsConfigTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigTable.setDescription('The configuration options of each ats in device table. This is a sparse dependent table, and will contain some subset of devices that are atss. Not all options are available on all atss.')
tlpAtsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigEntry.setDescription('An entry containing configuration options for a particular ats.')
tlpAtsConfigInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigInputVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigInputVoltage.setDescription('The nominal value of the input line voltage. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME. This value may not be writable on all models. If not writable, the value will be rejected and an appropriate error message will be returned.')
tlpAtsConfigSourceSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inputSourceA", 1), ("inputSourceB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceSelect.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSourceSelect.setDescription('The determination as to which of two AC input lines is designated as the primary input source. The other is designated as the secondary input source. This value will always return inputSourceA(1) for devices with a single input source. Setting this value is supported only on selected models.')
tlpAtsConfigSource1ReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource1ReturnTime.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSource1ReturnTime.setDescription('The nominal time to delay a transition to Source 1, if it is the preferred source.')
tlpAtsConfigSource2ReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource2ReturnTime.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSource2ReturnTime.setDescription('The nominal time to delay a transition to Source 2, if it is the preferred source.')
tlpAtsConfigAutoRampOnTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigAutoRampOnTransition.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigAutoRampOnTransition.setDescription('When enabled(1), the ats should perform its preconfigured ramp sequence when the input source transfers from its designated secondary source to its designated primary source. This value not supported on all ats devices. If not supported, then this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsConfigAutoShedOnTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigAutoShedOnTransition.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigAutoShedOnTransition.setDescription('When enabled(1), the ats should perform its preconfigured shed sequence when the input source transfers from its designated primary source to its designated secondary source. This value not supported on all ats devices. If not supported, then this value will always return ERROR_NO_SUCH_NAME.')
tlpAtsConfigVoltageRangeTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2), )
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeTable.setDescription('The voltage range options in this table is intended to configure the operating voltages of an ats. This is a sparse dependent table, and will contain some subset of devices that are atss. All voltage points defined in this table are listed in a specific order from high to low. All voltage points must satsify the conditions and ranges defined for each point. Any point violating any of the relative limits will be rejected. For optimal operation, it is recommended that tlpAtsConfigHighVoltageReset be set lower than tlpAtsConfigHighVoltageTransfer by a margin no less than 1% of tlpAtsConfigHighVoltageTransfer; and that tlpAtsConfigSource1TransferReset (tlpAtsConfigSource2TransferReset) be set higher than tlpAtsConfigSource1BrownoutSet (tlpAtsConfigSource2BrownoutSet) by a margin no less than 1% of tlpAtsConfigSource1BrownoutSet (tlpAtsConfigSource2BrownoutSet). *The upper limit of line voltage is tlpAtsInputHighTransferVoltageUpperBound. The lower limit of line voltage is tlpAtsInputBadTransferVoltageLowerBound. All minimum and maximum limits for each voltage point are all exlusive unless indicated otherwise.')
tlpAtsConfigVoltageRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeEntry.setDescription('An entry containing voltage range configuration options for a particular ats.')
tlpAtsConfigHighVoltageTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 1), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigHighVoltageTransfer.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigHighVoltageTransfer.setDescription('The maximum line voltage allowed before the unit disconnects the AC input connection. The maximum value allowed is dictated by tlpAtsInputHighTransferVoltageUpperBound (inclusively). The minimum value allowed is dictated by tlpAtsConfigHighVoltageReset. This value may not be configurable on all models. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigHighVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 2), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigHighVoltageReset.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigHighVoltageReset.setDescription('If a unit is disconnected due to over-voltage, the line voltage has to fall below this value before the unit re-connects the AC input connection. The maximum value allowed is dictated by tlpAtsConfigHighVoltageTransfer. The minimum value allowed is dictated by the greater of tlpAtsConfigSource1TransferReset and tlpAtsConfigSource2TransferReset. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigSource1TransferReset = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 3), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource1TransferReset.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSource1TransferReset.setDescription('If input source 1 voltage level is above this value, a unit connected to source 2 will transition to source 1 (if it is the preferred source). The maximum value allowed is dictated by tlpAtsConfigHighVoltageReset. The minimum value allowed is dictated by tlpAtsConfigSource1BrownoutSet. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigSource1BrownoutSet = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource1BrownoutSet.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSource1BrownoutSet.setDescription('This value dictates the voltage level below which source 1 goes into a brown out condition. The maximum value allowed is dictated by tlpAtsConfigSource1TransferReset. The minimum value allowed is dictated by tlpAtsConfigSource1TransferSet. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigSource1TransferSet = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 5), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource1TransferSet.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSource1TransferSet.setDescription('If input source 1 voltage level falls below this value, a unit connected to source 1 will transition to source 2 (if it is in fair condition as denoted by tlpAtsConfigSource2TransferSet). The maximum value allowed is dictated by tlpAtsConfigSource1BrownoutSet. The minimum value allowed is dictated by tlpAtsConfigLowVoltageReset. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigSource2TransferReset = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 6), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource2TransferReset.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSource2TransferReset.setDescription('If input source 2 voltage level is above this value, a unit connected to source 1 will transition to source 2 (if it is the preferred source). The maximum value allowed is dictated by tlpAtsConfigHighVoltageReset. The minimum value allowed is dictated by tlpAtsConfigSource2BrownoutSet. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigSource2BrownoutSet = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 7), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource2BrownoutSet.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSource2BrownoutSet.setDescription('This value dictates the voltage level below which source 2 goes into a brown out condition. The maximum value allowed is dictated by tlpAtsConfigSource2TransferReset. The minimum value allowed is dictated by tlpAtsConfigSource2TransferSet. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigSource2TransferSet = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 8), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource2TransferSet.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSource2TransferSet.setDescription('If input source 2 voltage level falls below this value, a unit connected to source 2 will transition to source 1 (if it is in fair condition as denoted by tlpAtsConfigSource1TransferSet). The maximum value allowed is dictated by tlpAtsConfigSource2BrownoutSet. The minimum value allowed is dictated by tlpAtsConfigLowVoltageReset. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigLowVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 9), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigLowVoltageReset.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigLowVoltageReset.setDescription('If a unit is disconnected due to under-voltage or is not powered up yet, the line voltage has to rise above this value before the unit gets connected to the AC input connection. The maximum value allowed is dictated by the lesser value of tlpAtsConfigSource1TransferSet and tlpAtsConfigSource2TransferSet. The minimum value allowed is dictated by tlpAtsConfigLowVoltageTransfer. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigLowVoltageTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 10), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigLowVoltageTransfer.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigLowVoltageTransfer.setDescription('The minimum line voltage allowed before the unit disconnects the AC input connection. The maximum value allowed is dictated by tlpAtsConfigLowVoltageReset. The minimum value allowed is dictated by tlpAtsInputBadTransferVoltageLowerBound (inclusively). If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigVoltageRangeLimitsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3), )
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeLimitsTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeLimitsTable.setDescription('The voltage range table, as documented by tlpAtsConfigVoltageRangeTable requires that all changes adhere with stack order, from high transfer voltage down to low transfer voltage. In addition to stack order, certain voltage range values have limits defining the absolute minimum and absolute maximum for such values. Any voltage value violating any respective limit defined herein will be rejected.')
tlpAtsConfigVoltageRangeLimitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeLimitsEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeLimitsEntry.setDescription('An entry containing voltage range limits configuration options for a particular ats.')
tlpAtsConfigSourceBrownoutSetMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1, 1), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceBrownoutSetMinimum.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSourceBrownoutSetMinimum.setDescription('This value dictates the absolute lower limit by which tlpAtsConfigSource1BrownoutSet and tlpAtsConfigSource2BrownoutSet can be set. tlpAtsConfigSource1TransferSet and tlpAtsConfigSource2TransferSet, respectively, are also used when determining the lowest value a brownout value can be set at any given time. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigSourceBrownoutSetMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1, 2), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceBrownoutSetMaximum.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSourceBrownoutSetMaximum.setDescription('This value dictates the absolute upper limit by which tlpAtsConfigSource1BrownoutSet and tlpAtsConfigSource2BrownoutSet can be set. tlpAtsConfigSource1TransferReset and tlpAtsConfigSource2TransferReset, respectively, are also used when determining the greatest value a brownout value can be set at any given time. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigSourceTransferSetMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1, 3), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceTransferSetMinimum.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSourceTransferSetMinimum.setDescription('This value dictates the absolute lower limit by which tlpAtsConfigSource1TransferSet and tlpAtsConfigSource2TransferSet can be set. tlpAtsConfigLowVoltageReset is also used when determining the lowest value a transferset value can be set at any given time. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigSourceTransferSetMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceTransferSetMaximum.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigSourceTransferSetMaximum.setDescription('This value dictates the absolute upper limit by which tlpAtsConfigSource1TransferSet and tlpAtsConfigSource2TransferSet can be set. tlpAtsConfigSource1BrownoutSet and tlpAtsConfigSource2BrownoutSet, respectively, are also used when determining the greatest value a transferset value can be set at any given time. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4), )
if mibBuilder.loadTexts: tlpAtsConfigThresholdTable.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigThresholdTable.setDescription('The configurable threshold options of each ats in device table. This is a sparse dependent table, and will contain some subset of devices that are atss. Not all options are available on all atss.')
tlpAtsConfigThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsConfigThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigThresholdEntry.setDescription('An entry containing configurable threshold options for a particular ats.')
tlpAtsConfigOverCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1, 1), Unsigned32()).setUnits('0.1 Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigOverCurrentThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigOverCurrentThreshold.setDescription('The output current measurement at which an over current condition is reported. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigOverTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1, 2), Unsigned32()).setUnits('0.1 Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigOverTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigOverTemperatureThreshold.setDescription('The system temperature at which an over temperature condition is reported. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigOverVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1, 3), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigOverVoltageThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigOverVoltageThreshold.setDescription('The input voltage measurement at which an over voltage condition is reported. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpAtsConfigOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigOverLoadThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpAtsConfigOverLoadThreshold.setDescription('The system load at which an overload condition is reported. This value may not be supported on all models. If not supported, this value will return ERROR_NO_SUCH_NAME.')
tlpCoolingIdentNumCooling = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpCoolingIdentNumCooling.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingIdentNumCooling.setDescription('The number of cooling devices that this agent is currently managing.')
tlpKvmIdentNumKvm = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpKvmIdentNumKvm.setStatus('current')
if mibBuilder.loadTexts: tlpKvmIdentNumKvm.setDescription('The number of kvm devices that this agent is currently managing.')
tlpRackTrackIdentNumRackTrack = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpRackTrackIdentNumRackTrack.setStatus('current')
if mibBuilder.loadTexts: tlpRackTrackIdentNumRackTrack.setDescription('The number of rack track devices that this agent is currently managing.')
tlpSwitchIdentNumSwitch = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpSwitchIdentNumSwitch.setStatus('current')
if mibBuilder.loadTexts: tlpSwitchIdentNumSwitch.setDescription('The number of switch devices that this agent is currently managing.')
tlpAgentType = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("pal", 1), ("pansa", 2), ("delta", 3), ("sinetica", 4), ("netos6", 5), ("netos7", 6), ("panms", 7), ("nmc5", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentType.setStatus('current')
if mibBuilder.loadTexts: tlpAgentType.setDescription('The type of PowerAlert engine providing this data.')
tlpAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentVersion.setStatus('current')
if mibBuilder.loadTexts: tlpAgentVersion.setDescription('The version of the agent software.')
tlpAgentDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentDriverVersion.setStatus('current')
if mibBuilder.loadTexts: tlpAgentDriverVersion.setDescription('The driver version of the agent software.')
tlpAgentMAC = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentMAC.setStatus('current')
if mibBuilder.loadTexts: tlpAgentMAC.setDescription('The MAC Address of the agent.')
tlpAgentSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentSerialNum.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSerialNum.setDescription('Serial number of the web card providing the agent data. This value is only supported by a web card agent. PowerAlert for PC (PAL) agents do not support this value and will return ERROR_NO_SUCH_NAME.')
tlpAgentUuid = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentUuid.setStatus('current')
if mibBuilder.loadTexts: tlpAgentUuid.setDescription('Universally unique identifier for this host in the form 8-4-4-4-12 for a total of 36 characters (32 alphanumeric characters and four hyphens). For example: 550e8400-e29b-41d4-a716-446655440000.')
tlpAgentAttributesSupports = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1))
tlpAgentAttributesSupportsHTTP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsHTTP.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSupportsHTTP.setDescription('Indicates whether the agent supports HTTP connections.')
tlpAgentAttributesSupportsHTTPS = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsHTTPS.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSupportsHTTPS.setDescription('Indicates whether the agent supports HTTPS connections.')
tlpAgentAttributesSupportsFTP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsFTP.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSupportsFTP.setDescription('Indicates whether the agent supports FTP connections.')
tlpAgentAttributesSupportsTelnetMenu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsTelnetMenu.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSupportsTelnetMenu.setDescription('Indicates whether the agent supports Telnet menu connections.')
tlpAgentAttributesSupportsTelnetCLI = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsTelnetCLI.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSupportsTelnetCLI.setDescription('Indicates whether the agent supports Telnet CLI connections.')
tlpAgentAttributesSupportsSSHMenu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSSHMenu.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSSHMenu.setDescription('Indicates whether the agent supports SSH menu connections.')
tlpAgentAttributesSupportsSSHCLI = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSSHCLI.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSSHCLI.setDescription('Indicates whether the agent supports SSH CLI connections.')
tlpAgentAttributesSupportsSNMP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSNMP.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSNMP.setDescription('Indicates whether the agent supports SNMP connections.')
tlpAgentAttributesSupportsSNMPTrap = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSNMPTrap.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSNMPTrap.setDescription('Indicates whether the agent supports listening for SNMP traps. This is only applicable for network monitoring applications, PowerAlert Shutdown Agent for an example, that connect to a web card or PowerAlert Local and listen for outbound traps. As such, this value is not supported and will always return 2(false) for a web card or PowerAlert Local.')
tlpAgentAttributesAutostart = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2))
tlpAgentAttributesAutostartHTTP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartHTTP.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesAutostartHTTP.setDescription('Indicates whether the agent autostarts HTTP services.')
tlpAgentAttributesAutostartHTTPS = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartHTTPS.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesAutostartHTTPS.setDescription('Indicates whether the agent autostarts HTTPS services.')
tlpAgentAttributesAutostartFTP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartFTP.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesAutostartFTP.setDescription('Indicates whether the agent autostarts FTP services.')
tlpAgentAttributesAutostartTelnetMenu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartTelnetMenu.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesAutostartTelnetMenu.setDescription('Indicates whether the agent autostarts Telnet menu services.')
tlpAgentAttributesAutostartTelnetCLI = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartTelnetCLI.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesAutostartTelnetCLI.setDescription('Indicates whether the agent autostarts Telnet CLI services.')
tlpAgentAttributesAutostartSSHMenu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartSSHMenu.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesAutostartSSHMenu.setDescription('Indicates whether the agent autostarts SSH menu services.')
tlpAgentAttributesAutostartSSHCLI = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartSSHCLI.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesAutostartSSHCLI.setDescription('Indicates whether the agent autostarts SSH CLI services.')
tlpAgentAttributesAutostartSNMP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartSNMP.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesAutostartSNMP.setDescription('Indicates whether the agent autostarts SNMP services.')
tlpAgentAttributesSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 3))
tlpAgentAttributesSNMPv1Enabled = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 3, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPv1Enabled.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSNMPv1Enabled.setDescription('Indicates whether the agent will allow SNMPv1 connections.')
tlpAgentAttributesSNMPv2cEnabled = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 3, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPv2cEnabled.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSNMPv2cEnabled.setDescription('Indicates whether the agent will allow SNMPv2c connections.')
tlpAgentAttributesSNMPv3Enabled = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 3, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPv3Enabled.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSNMPv3Enabled.setDescription('Indicates whether the agent will allow SNMPv3 connections.')
tlpAgentAttributesPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4))
tlpAgentAttributesHTTPPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesHTTPPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesHTTPPort.setDescription('The port used for HTTP communications.')
tlpAgentAttributesHTTPSPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesHTTPSPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesHTTPSPort.setDescription('The port used for HTTPS communications.')
tlpAgentAttributesFTPPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesFTPPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesFTPPort.setDescription('The port used for FTP communications.')
tlpAgentAttributesTelnetMenuPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesTelnetMenuPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesTelnetMenuPort.setDescription('The port used for Telnet Menu communications.')
tlpAgentAttributesTelnetCLIPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesTelnetCLIPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesTelnetCLIPort.setDescription('The port used for Telnet CLI communications.')
tlpAgentAttributesSSHMenuPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSSHMenuPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSSHMenuPort.setDescription('The port used for SSH Menu communications.')
tlpAgentAttributesSSHCLIPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSSHCLIPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSSHCLIPort.setDescription('The port used for SSH CLI communications.')
tlpAgentAttributesSNMPPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSNMPPort.setDescription('The port used for SNMP communications.')
tlpAgentAttributesSNMPTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPTrapPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentAttributesSNMPTrapPort.setDescription('The port used for SNMP trap and notifications.')
tlpAgentConfigRemoteRegistration = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentConfigRemoteRegistration.setStatus('current')
if mibBuilder.loadTexts: tlpAgentConfigRemoteRegistration.setDescription("Registers an SNMP contact's IP address and the port on which the contact is listening for SNMP traps. Setting this value is used to CREATE a table entry in a non-standard way. Getting this value will return a string INADDR_ANY and any port number. The port number should always be included. When unregistering an SNMP contact, the requester's IP address should be provided with a port number of 0. When setting or unsetting this OID, the IP address string should never be 0 nor should it be empty. The registration uses its default community string to register each contact. To use a community other than the default, then it must be appended to the end of the string delimited with a comma. The address should be of the format 0.0.0.0:00000 for IPv4. If IPv6 is supported, use the bracket-enclosed format given in IETF RFC 2732 Section 2, with the following examples: [FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80 [1080:0:0:0:8:800:200C:417A]:162 [3ffe:2a00:100:7031::1]:162 [1080::8:800:200C:417A]:162,myCommunity [::192.9.5.5]:162,myCommunity [::FFFF:129.144.52.38]:80 [2010:836B:4179::836B:4179]:162")
tlpAgentConfigCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentConfigCurrentTime.setStatus('current')
if mibBuilder.loadTexts: tlpAgentConfigCurrentTime.setDescription('The current date and time of the system.')
tlpAgentNumEmailContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentNumEmailContacts.setStatus('current')
if mibBuilder.loadTexts: tlpAgentNumEmailContacts.setDescription('The number of email contacts currently defined in the agent.')
tlpAgentEmailContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2), )
if mibBuilder.loadTexts: tlpAgentEmailContactTable.setStatus('current')
if mibBuilder.loadTexts: tlpAgentEmailContactTable.setDescription('A list of email contact entries. The number of entries is given by the value of tlpAgentNumEmailContacts.')
tlpAgentEmailContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpAgentEmailContactIndex"))
if mibBuilder.loadTexts: tlpAgentEmailContactEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAgentEmailContactEntry.setDescription('An entry containing the details of an email contact.')
tlpAgentEmailContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentEmailContactIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAgentEmailContactIndex.setDescription('The table row index for the email contact.')
tlpAgentEmailContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentEmailContactRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlpAgentEmailContactRowStatus.setDescription('Row status for the tlpAgentEmailContactTable.')
tlpAgentEmailContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentEmailContactName.setStatus('current')
if mibBuilder.loadTexts: tlpAgentEmailContactName.setDescription('The name of the email contact.')
tlpAgentEmailContactAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentEmailContactAddress.setStatus('current')
if mibBuilder.loadTexts: tlpAgentEmailContactAddress.setDescription('The address of the email contact.')
tlpAgentNumSnmpContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentNumSnmpContacts.setStatus('current')
if mibBuilder.loadTexts: tlpAgentNumSnmpContacts.setDescription('The number of SNMP contacts currently defined in the agent.')
tlpAgentSnmpContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2), )
if mibBuilder.loadTexts: tlpAgentSnmpContactTable.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactTable.setDescription('A list of SNMP contact entries. The number of entries is given by the value of tlpAgentNumSnmpContacts.')
tlpAgentSnmpContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpAgentSnmpContactIndex"))
if mibBuilder.loadTexts: tlpAgentSnmpContactEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactEntry.setDescription('An entry containing the details of an SNMP contact.')
tlpAgentSnmpContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentSnmpContactIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactIndex.setDescription('The table row index for the SNMP contact.')
tlpAgentSnmpContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactRowStatus.setDescription('Row status for the tlpAgentSnmpContactTable.')
tlpAgentSnmpContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactName.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactName.setDescription('The name of the SNMP contact.')
tlpAgentSnmpContactIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactIpAddress.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactIpAddress.setDescription('The IP address of the SNMP contact.')
tlpAgentSnmpContactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactPort.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactPort.setDescription('The port of the SNMP contact.')
tlpAgentSnmpContactSnmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2), ("snmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactSnmpVersion.setDescription('The SNMP contact version to use for sending traps.')
tlpAgentSnmpContactSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactSecurityName.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactSecurityName.setDescription('The security name for the SNMP contact.')
tlpAgentSnmpContactPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactPrivPassword.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactPrivPassword.setDescription('The privacy password to use for sending V3 traps to the SNMP contact.')
tlpAgentSnmpContactAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactAuthPassword.setStatus('current')
if mibBuilder.loadTexts: tlpAgentSnmpContactAuthPassword.setDescription('The authentication password to use for sending V3 traps to the SNMP contact.')
tlpAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmsPresent.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmsPresent.setDescription('The present number of active alarm conditions.')
tlpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 3, 2), )
if mibBuilder.loadTexts: tlpAlarmTable.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmTable.setDescription('A list of alarm conditions for all devices managed by this agent. This table contains zero, one, or many rows at any moment, depending upon the number of alarm conditions in effect or conditions not acnowledged. The agent creates a row in the table each time a condition is detected and deletes that row when that condition no longer pertains (becomes inactive and is acknowledged). The agent creates the first row with tlpAlarmId equal to 1, and increments the value of tlpAlarmId each time a new row is created, wrapping to the first free value greater than or equal to 1 when the maximum value of tlpAlarmId would otherwise be exceeded. Consequently, after multiple operations, the table may become sparse (e.g., containing entries for rows 95, 100, 101, and 203) and the entries should not be assumed to be in chronological order because tlpAlarmId might have wrapped. The number of rows in the table at any given time is reflected by the value of tlpAlarmsPresent.')
tlpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpAlarmId"))
if mibBuilder.loadTexts: tlpAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmEntry.setDescription('An entry containing information application to a particular alarm.')
tlpAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmId.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmId.setDescription('A unique identifier for an alarm condition. This value will remain constant for the duration of the alarm condition.')
tlpAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmDescr.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmDescr.setDescription('A reference of the alarm description object. The object referenced should not be accessbile, but rather be used to provide a unique description for the alarm condition. The object referenced will be a well known alarm object associated with the device on which the alarm condition is active.')
tlpAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmTime.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmTime.setDescription('The value of sysUpTime when the alarm condition was detected. If the alarm condition was detected at the time of agent startup and presumably existed before agent startup, the value of tlpAlarmsTime shall equal 0.')
tlpAlarmTableRef = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmTableRef.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmTableRef.setDescription('This value references the OID of a table object applicable to the alarm condition. This, in conjunction with the table row as defined by tlpAlarmTableRowRef, specifies the object/row within this table to which the alarm condition applies. Example 1 -- The following sample values will be returned for a UPS on battery: tlpAlarmId 28 tlpAlarmDescr tlpUpsAlarmOnBattery tlpAlarmTime 12345678 tlpAlarmTableRef tlpDeviceTable tlpAlarmTableRowRef tlpDeviceIndex.2 tlpAlarmDetail On Battery tlpAlarmType warning tlpAlarmState active tlpAlarmAcknowledged notAcknowledged In the above example, tlpAlarmTableRef references the device table and tlpAlarmTableRowRef references the 2nd managed device in that table. Example 2 -- The following sample values will be returned for a PDU with a load turned off: tlpAlarmId 46 tlpAlarmDescr tlpPduAlarmLoadOff tlpAlarmTime 12345678 tlpAlarmTableRef tlpPduOutletTable tlpAlarmTableRowRef tlpOutletIndex.1.4 tlpAlarmDetail Load Off tlpAlarmType warning tlpAlarmState active tlpAlarmAcknowledged acknowledged In the above example, tlpAlarmTableRef references the pdu outlet table and tlpAlarmTableRowRef references the 4th outlet on the 1st managed device.')
tlpAlarmTableRowRef = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmTableRowRef.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmTableRowRef.setDescription('This value is used in conjunction with tlpAlarmTableRef to define the object associated with this alarm condition. See the description of tlpAlarmTableRef for more information.')
tlpAlarmDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmDetail.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmDetail.setDescription('A textual description of the alarm condition.')
tlpAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("info", 3), ("status", 4), ("offline", 5), ("custom", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmType.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmType.setDescription('The category/group of this alarm.')
tlpAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmState.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmState.setDescription('The current state of this alarm condition. An active(1) alarm is a condition that currently exists. An inactive(2) alarm is a condition that no longer exists because the alarm either cleared or was resolved. Each alarm condition must be cleared and acknowledged before it is removed from this table (see tlpAlarmAcknowledged).')
tlpAlarmAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAcknowledged", 1), ("acknowledged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAlarmAcknowledged.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmAcknowledged.setDescription('Denotes whether the alarm condition has been acknowledged. The agent will return notAcknowledged(1) if the condition has not been acknowledged, or acknowledged(2) when acknowledged. Writing the value acknowledged(2) for an alarm acknowledges the alarm condition. Each alarm condition must be cleared and acknowledged before it is removed from this table; therefore, even if acknowledged, the alarm will remain in this table until the alarm becomes inactive as denoted by tlpAlarmState.')
tlpAlarmCommunicationsLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 1))
if mibBuilder.loadTexts: tlpAlarmCommunicationsLost.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmCommunicationsLost.setDescription('A problem has been encountered in the communications between the agent and the device.')
tlpAlarmUserDefined = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2))
tlpAlarmUserDefined01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 1))
if mibBuilder.loadTexts: tlpAlarmUserDefined01.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmUserDefined01.setDescription('User-defined event 1 is in alarm.')
tlpAlarmUserDefined02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 2))
if mibBuilder.loadTexts: tlpAlarmUserDefined02.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmUserDefined02.setDescription('User-defined event 2 is in alarm.')
tlpAlarmUserDefined03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 3))
if mibBuilder.loadTexts: tlpAlarmUserDefined03.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmUserDefined03.setDescription('User-defined event 3 is in alarm.')
tlpAlarmUserDefined04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 4))
if mibBuilder.loadTexts: tlpAlarmUserDefined04.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmUserDefined04.setDescription('User-defined event 4 is in alarm.')
tlpAlarmUserDefined05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 5))
if mibBuilder.loadTexts: tlpAlarmUserDefined05.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmUserDefined05.setDescription('User-defined event 5 is in alarm.')
tlpAlarmUserDefined06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 6))
if mibBuilder.loadTexts: tlpAlarmUserDefined06.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmUserDefined06.setDescription('User-defined event 6 is in alarm.')
tlpAlarmUserDefined07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 7))
if mibBuilder.loadTexts: tlpAlarmUserDefined07.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmUserDefined07.setDescription('User-defined event 7 is in alarm.')
tlpAlarmUserDefined08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 8))
if mibBuilder.loadTexts: tlpAlarmUserDefined08.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmUserDefined08.setDescription('User-defined event 8 is in alarm.')
tlpAlarmUserDefined09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 9))
if mibBuilder.loadTexts: tlpAlarmUserDefined09.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmUserDefined09.setDescription('User-defined event 9 is in alarm.')
tlpUpsAlarmBatteryBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 1))
if mibBuilder.loadTexts: tlpUpsAlarmBatteryBad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBatteryBad.setDescription('One or more batteries have been determined to require replacement.')
tlpUpsAlarmOnBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 2))
if mibBuilder.loadTexts: tlpUpsAlarmOnBattery.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmOnBattery.setDescription('The UPS is drawing power from the batteries.')
tlpUpsAlarmLowBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 3))
if mibBuilder.loadTexts: tlpUpsAlarmLowBattery.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLowBattery.setDescription('The remaining battery charge is less than or equal to the percentage of capacity warning specified by tlpUpsConfigBatteryCapacityThreshold.')
tlpUpsAlarmDepletedBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 4))
if mibBuilder.loadTexts: tlpUpsAlarmDepletedBattery.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmDepletedBattery.setDescription('The UPS will be unable to sustain the present load when and if the utility power is lost.')
tlpUpsAlarmTempBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 5))
if mibBuilder.loadTexts: tlpUpsAlarmTempBad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmTempBad.setDescription('A temperature is out of tolerance.')
tlpUpsAlarmInputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 6))
if mibBuilder.loadTexts: tlpUpsAlarmInputBad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmInputBad.setDescription('An input condition is out of tolerance.')
tlpUpsAlarmOutputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 7))
if mibBuilder.loadTexts: tlpUpsAlarmOutputBad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmOutputBad.setDescription('An output condition (other than OutputOverload) is out of tolerance.')
tlpUpsAlarmOutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 8))
if mibBuilder.loadTexts: tlpUpsAlarmOutputOverload.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmOutputOverload.setDescription('The output load exceeds the UPS output capacity.')
tlpUpsAlarmOnBypass = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 9))
if mibBuilder.loadTexts: tlpUpsAlarmOnBypass.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmOnBypass.setDescription('The Bypass is presently engaged on the UPS.')
tlpUpsAlarmBypassBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 10))
if mibBuilder.loadTexts: tlpUpsAlarmBypassBad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBypassBad.setDescription('The Bypass is out of tolerance.')
tlpUpsAlarmOutputOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 11))
if mibBuilder.loadTexts: tlpUpsAlarmOutputOffAsRequested.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmOutputOffAsRequested.setDescription('The UPS has shutdown as requested, i.e., the output is off.')
tlpUpsAlarmUpsOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 12))
if mibBuilder.loadTexts: tlpUpsAlarmUpsOffAsRequested.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmUpsOffAsRequested.setDescription('The entire UPS has shutdown as commanded.')
tlpUpsAlarmChargerFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 13))
if mibBuilder.loadTexts: tlpUpsAlarmChargerFailed.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmChargerFailed.setDescription('An uncorrected problem has been detected within the UPS charger subsystem.')
tlpUpsAlarmUpsOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 14))
if mibBuilder.loadTexts: tlpUpsAlarmUpsOutputOff.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmUpsOutputOff.setDescription('The output of the UPS is in the off state.')
tlpUpsAlarmUpsSystemOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 15))
if mibBuilder.loadTexts: tlpUpsAlarmUpsSystemOff.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmUpsSystemOff.setDescription('The UPS system is in the off state.')
tlpUpsAlarmFanFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 16))
if mibBuilder.loadTexts: tlpUpsAlarmFanFailure.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmFanFailure.setDescription('The failure of one or more fans in the UPS has been detected.')
tlpUpsAlarmFuseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 17))
if mibBuilder.loadTexts: tlpUpsAlarmFuseFailure.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmFuseFailure.setDescription('The failure of one or more fuses has been detected.')
tlpUpsAlarmGeneralFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 18))
if mibBuilder.loadTexts: tlpUpsAlarmGeneralFault.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmGeneralFault.setDescription('A general fault in the UPS has been detected.')
tlpUpsAlarmDiagnosticTestFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 19))
if mibBuilder.loadTexts: tlpUpsAlarmDiagnosticTestFailed.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmDiagnosticTestFailed.setDescription('The result of the last diagnostic test indicates a failure.')
tlpUpsAlarmAwaitingPower = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 20))
if mibBuilder.loadTexts: tlpUpsAlarmAwaitingPower.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmAwaitingPower.setDescription('The UPS output is off and the UPS is awaiting the return of input power.')
tlpUpsAlarmShutdownPending = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 21))
if mibBuilder.loadTexts: tlpUpsAlarmShutdownPending.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmShutdownPending.setDescription('A tlpUpsShutdownAfterDelay countdown is underway.')
tlpUpsAlarmShutdownImminent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 22))
if mibBuilder.loadTexts: tlpUpsAlarmShutdownImminent.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmShutdownImminent.setDescription('The UPS will turn off power to the load in less than 5 seconds; this may be either a timed shutdown or a low battery shutdown.')
tlpUpsAlarmLoadLevelAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23))
tlpUpsAlarmLoadLevelAboveThresholdTotal = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23, 1))
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdTotal.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdTotal.setDescription('The total load level is above the designated threshold.')
tlpUpsAlarmLoadLevelAboveThresholdPhase1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23, 2))
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdPhase1.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdPhase1.setDescription('The load level on phase 1 exceeds load limits.')
tlpUpsAlarmLoadLevelAboveThresholdPhase2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23, 3))
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdPhase2.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdPhase2.setDescription('The load level on phase 2 exceeds load limits.')
tlpUpsAlarmLoadLevelAboveThresholdPhase3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23, 4))
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdPhase3.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdPhase3.setDescription('The load level on phase 3 exceeds load limits.')
tlpUpsAlarmOutputCurrentChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 24))
if mibBuilder.loadTexts: tlpUpsAlarmOutputCurrentChanged.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmOutputCurrentChanged.setDescription('The output current changed from its last known value.')
tlpUpsAlarmBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 25))
if mibBuilder.loadTexts: tlpUpsAlarmBatteryAgeAboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBatteryAgeAboveThreshold.setDescription('One or more batteries have been determined to require replacement.')
tlpUpsAlarmLoadOff = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26))
tlpUpsAlarmLoadOff01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 1))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff01.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff01.setDescription('Load 1 is off.')
tlpUpsAlarmLoadOff02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 2))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff02.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff02.setDescription('Load 2 is off.')
tlpUpsAlarmLoadOff03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 3))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff03.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff03.setDescription('Load 3 is off.')
tlpUpsAlarmLoadOff04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 4))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff04.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff04.setDescription('Load 4 is off.')
tlpUpsAlarmLoadOff05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 5))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff05.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff05.setDescription('Load 5 is off.')
tlpUpsAlarmLoadOff06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 6))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff06.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff06.setDescription('Load 6 is off.')
tlpUpsAlarmLoadOff07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 7))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff07.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff07.setDescription('Load 7 is off.')
tlpUpsAlarmLoadOff08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 8))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff08.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff08.setDescription('Load 8 is off.')
tlpUpsAlarmLoadOff09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 9))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff09.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff09.setDescription('Load 9 is off.')
tlpUpsAlarmLoadOff10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 10))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff10.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff10.setDescription('Load 10 is off.')
tlpUpsAlarmLoadOff11 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 11))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff11.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff11.setDescription('Load 11 is off.')
tlpUpsAlarmLoadOff12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 12))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff12.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff12.setDescription('Load 12 is off.')
tlpUpsAlarmLoadOff13 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 13))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff13.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff13.setDescription('Load 13 is off.')
tlpUpsAlarmLoadOff14 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 14))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff14.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff14.setDescription('Load 14 is off.')
tlpUpsAlarmLoadOff15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 15))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff15.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff15.setDescription('Load 15 is off.')
tlpUpsAlarmLoadOff16 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 16))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff16.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff16.setDescription('Load 16 is off.')
tlpUpsAlarmLoadOff17 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 17))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff17.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff17.setDescription('Load 17 is off.')
tlpUpsAlarmLoadOff18 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 18))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff18.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff18.setDescription('Load 18 is off.')
tlpUpsAlarmLoadOff19 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 19))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff19.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff19.setDescription('Load 19 is off.')
tlpUpsAlarmLoadOff20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 20))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff20.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff20.setDescription('Load 20 is off.')
tlpUpsAlarmLoadOff21 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 21))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff21.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff21.setDescription('Load 21 is off.')
tlpUpsAlarmLoadOff22 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 22))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff22.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff22.setDescription('Load 22 is off.')
tlpUpsAlarmLoadOff23 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 23))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff23.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff23.setDescription('Load 23 is off.')
tlpUpsAlarmLoadOff24 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 24))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff24.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff24.setDescription('Load 24 is off.')
tlpUpsAlarmLoadOff25 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 25))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff25.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff25.setDescription('Load 25 is off.')
tlpUpsAlarmLoadOff26 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 26))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff26.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff26.setDescription('Load 26 is off.')
tlpUpsAlarmLoadOff27 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 27))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff27.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff27.setDescription('Load 27 is off.')
tlpUpsAlarmLoadOff28 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 28))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff28.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff28.setDescription('Load 28 is off.')
tlpUpsAlarmLoadOff29 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 29))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff29.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff29.setDescription('Load 29 is off.')
tlpUpsAlarmLoadOff30 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 30))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff30.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff30.setDescription('Load 30 is off.')
tlpUpsAlarmLoadOff31 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 31))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff31.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff31.setDescription('Load 31 is off.')
tlpUpsAlarmLoadOff32 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 32))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff32.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff32.setDescription('Load 32 is off.')
tlpUpsAlarmLoadOff33 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 33))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff33.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff33.setDescription('Load 33 is off.')
tlpUpsAlarmLoadOff34 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 34))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff34.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff34.setDescription('Load 34 is off.')
tlpUpsAlarmLoadOff35 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 35))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff35.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff35.setDescription('Load 35 is off.')
tlpUpsAlarmLoadOff36 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 36))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff36.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff36.setDescription('Load 36 is off.')
tlpUpsAlarmLoadOff37 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 37))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff37.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff37.setDescription('Load 37 is off.')
tlpUpsAlarmLoadOff38 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 38))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff38.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff38.setDescription('Load 38 is off.')
tlpUpsAlarmLoadOff39 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 39))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff39.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff39.setDescription('Load 39 is off.')
tlpUpsAlarmLoadOff40 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 40))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff40.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff40.setDescription('Load 40 is off.')
tlpUpsAlarmCurrentAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 27))
tlpUpsAlarmCurrentAboveThreshold1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 27, 1))
if mibBuilder.loadTexts: tlpUpsAlarmCurrentAboveThreshold1.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmCurrentAboveThreshold1.setDescription('The output current on phase 1 exceeds load limits.')
tlpUpsAlarmCurrentAboveThreshold2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 27, 2))
if mibBuilder.loadTexts: tlpUpsAlarmCurrentAboveThreshold2.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmCurrentAboveThreshold2.setDescription('The output current on phase 2 exceeds load limits.')
tlpUpsAlarmCurrentAboveThreshold3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 27, 3))
if mibBuilder.loadTexts: tlpUpsAlarmCurrentAboveThreshold3.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmCurrentAboveThreshold3.setDescription('The output current on phase 3 exceeds load limits.')
tlpUpsAlarmRuntimeBelowWarningLevel = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 28))
if mibBuilder.loadTexts: tlpUpsAlarmRuntimeBelowWarningLevel.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmRuntimeBelowWarningLevel.setDescription('The battery seconds remaining is below warning level.')
tlpUpsAlarmBusStartVoltageLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 29))
if mibBuilder.loadTexts: tlpUpsAlarmBusStartVoltageLow.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBusStartVoltageLow.setDescription('The inverter start up bus voltage is too low.')
tlpUpsAlarmBusOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 30))
if mibBuilder.loadTexts: tlpUpsAlarmBusOverVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBusOverVoltage.setDescription('The inverter bus voltage is too high.')
tlpUpsAlarmBusUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 31))
if mibBuilder.loadTexts: tlpUpsAlarmBusUnderVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBusUnderVoltage.setDescription('The inverter bus voltage is too low.')
tlpUpsAlarmBusVoltageUnbalanced = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 32))
if mibBuilder.loadTexts: tlpUpsAlarmBusVoltageUnbalanced.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBusVoltageUnbalanced.setDescription('The inverter bus voltage is not balanced.')
tlpUpsAlarmInverterSoftStartBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 33))
if mibBuilder.loadTexts: tlpUpsAlarmInverterSoftStartBad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmInverterSoftStartBad.setDescription('The inverter bus voltage cannot reach desired voltage within a specified duration.')
tlpUpsAlarmInverterOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 34))
if mibBuilder.loadTexts: tlpUpsAlarmInverterOverVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmInverterOverVoltage.setDescription('The inverter voltage is too high.')
tlpUpsAlarmInverterUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 35))
if mibBuilder.loadTexts: tlpUpsAlarmInverterUnderVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmInverterUnderVoltage.setDescription('The inverter voltage is too low.')
tlpUpsAlarmInverterCircuitBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 36))
if mibBuilder.loadTexts: tlpUpsAlarmInverterCircuitBad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmInverterCircuitBad.setDescription('The inverter output is shorted.')
tlpUpsAlarmBatteryOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 37))
if mibBuilder.loadTexts: tlpUpsAlarmBatteryOverVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBatteryOverVoltage.setDescription('The battery voltage is too high.')
tlpUpsAlarmBatteryUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 38))
if mibBuilder.loadTexts: tlpUpsAlarmBatteryUnderVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBatteryUnderVoltage.setDescription('The battery voltage is too low.')
tlpUpsAlarmSiteWiringFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 39))
if mibBuilder.loadTexts: tlpUpsAlarmSiteWiringFault.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmSiteWiringFault.setDescription('The utility input wiring is faulty.')
tlpUpsAlarmOverTemperatureProtection = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 40))
if mibBuilder.loadTexts: tlpUpsAlarmOverTemperatureProtection.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmOverTemperatureProtection.setDescription('The over temperature protection is activated.')
tlpUpsAlarmOverCharged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 41))
if mibBuilder.loadTexts: tlpUpsAlarmOverCharged.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmOverCharged.setDescription('The UPS is over charged.')
tlpUpsAlarmEPOActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 42))
if mibBuilder.loadTexts: tlpUpsAlarmEPOActive.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmEPOActive.setDescription('The EPO is currently activate.')
tlpUpsAlarmBypassFrequencyBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 43))
if mibBuilder.loadTexts: tlpUpsAlarmBypassFrequencyBad.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmBypassFrequencyBad.setDescription('The bypass frequency is out of tolerance.')
tlpUpsAlarmExternalSmartBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 44))
if mibBuilder.loadTexts: tlpUpsAlarmExternalSmartBatteryAgeAboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmExternalSmartBatteryAgeAboveThreshold.setDescription('One or more external smart batteries have been determined to require replacement.')
tlpUpsAlarmExternalNonSmartBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 45))
if mibBuilder.loadTexts: tlpUpsAlarmExternalNonSmartBatteryAgeAboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmExternalNonSmartBatteryAgeAboveThreshold.setDescription('One or more external non-smart batteries have been determined to require replacement.')
tlpUpsAlarmSmartBatteryCommLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 46))
if mibBuilder.loadTexts: tlpUpsAlarmSmartBatteryCommLost.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmSmartBatteryCommLost.setDescription('Communications with the smart batteries was lost.')
tlpUpsAlarmLoadsNotAllOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 47))
if mibBuilder.loadTexts: tlpUpsAlarmLoadsNotAllOn.setStatus('current')
if mibBuilder.loadTexts: tlpUpsAlarmLoadsNotAllOn.setDescription('One of more loads are not on.')
tlpPduAlarmLoadLevelAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 1))
if mibBuilder.loadTexts: tlpPduAlarmLoadLevelAboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadLevelAboveThreshold.setDescription('The load level is above the designated threshold.')
tlpPduAlarmInputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 2))
if mibBuilder.loadTexts: tlpPduAlarmInputBad.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmInputBad.setDescription('An input condition is out of tolerance.')
tlpPduAlarmOutputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 3))
if mibBuilder.loadTexts: tlpPduAlarmOutputBad.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmOutputBad.setDescription('An output condition (other than OutputOverload) is out of tolerance.')
tlpPduAlarmOutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 4))
if mibBuilder.loadTexts: tlpPduAlarmOutputOverload.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmOutputOverload.setDescription('The output load exceeds the pdu output capacity.')
tlpPduAlarmOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 5))
if mibBuilder.loadTexts: tlpPduAlarmOutputOff.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmOutputOff.setDescription('The output of the pdu is in the off state.')
tlpPduAlarmLoadOff = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6))
tlpPduAlarmLoadOff01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 1))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff01.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff01.setDescription('Load 1 is off.')
tlpPduAlarmLoadOff02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 2))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff02.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff02.setDescription('Load 2 is off.')
tlpPduAlarmLoadOff03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 3))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff03.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff03.setDescription('Load 3 is off.')
tlpPduAlarmLoadOff04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 4))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff04.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff04.setDescription('Load 4 is off.')
tlpPduAlarmLoadOff05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 5))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff05.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff05.setDescription('Load 5 is off.')
tlpPduAlarmLoadOff06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 6))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff06.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff06.setDescription('Load 6 is off.')
tlpPduAlarmLoadOff07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 7))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff07.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff07.setDescription('Load 7 is off.')
tlpPduAlarmLoadOff08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 8))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff08.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff08.setDescription('Load 8 is off.')
tlpPduAlarmLoadOff09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 9))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff09.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff09.setDescription('Load 9 is off.')
tlpPduAlarmLoadOff10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 10))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff10.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff10.setDescription('Load 10 is off.')
tlpPduAlarmLoadOff11 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 11))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff11.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff11.setDescription('Load 11 is off.')
tlpPduAlarmLoadOff12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 12))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff12.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff12.setDescription('Load 12 is off.')
tlpPduAlarmLoadOff13 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 13))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff13.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff13.setDescription('Load 13 is off.')
tlpPduAlarmLoadOff14 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 14))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff14.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff14.setDescription('Load 14 is off.')
tlpPduAlarmLoadOff15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 15))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff15.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff15.setDescription('Load 15 is off.')
tlpPduAlarmLoadOff16 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 16))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff16.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff16.setDescription('Load 16 is off.')
tlpPduAlarmLoadOff17 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 17))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff17.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff17.setDescription('Load 17 is off.')
tlpPduAlarmLoadOff18 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 18))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff18.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff18.setDescription('Load 18 is off.')
tlpPduAlarmLoadOff19 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 19))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff19.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff19.setDescription('Load 19 is off.')
tlpPduAlarmLoadOff20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 20))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff20.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff20.setDescription('Load 20 is off.')
tlpPduAlarmLoadOff21 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 21))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff21.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff21.setDescription('Load 21 is off.')
tlpPduAlarmLoadOff22 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 22))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff22.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff22.setDescription('Load 22 is off.')
tlpPduAlarmLoadOff23 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 23))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff23.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff23.setDescription('Load 23 is off.')
tlpPduAlarmLoadOff24 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 24))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff24.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff24.setDescription('Load 24 is off.')
tlpPduAlarmLoadOff25 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 25))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff25.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff25.setDescription('Load 25 is off.')
tlpPduAlarmLoadOff26 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 26))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff26.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff26.setDescription('Load 26 is off.')
tlpPduAlarmLoadOff27 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 27))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff27.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff27.setDescription('Load 27 is off.')
tlpPduAlarmLoadOff28 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 28))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff28.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff28.setDescription('Load 28 is off.')
tlpPduAlarmLoadOff29 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 29))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff29.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff29.setDescription('Load 29 is off.')
tlpPduAlarmLoadOff30 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 30))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff30.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff30.setDescription('Load 30 is off.')
tlpPduAlarmLoadOff31 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 31))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff31.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff31.setDescription('Load 31 is off.')
tlpPduAlarmLoadOff32 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 32))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff32.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff32.setDescription('Load 32 is off.')
tlpPduAlarmLoadOff33 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 33))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff33.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff33.setDescription('Load 33 is off.')
tlpPduAlarmLoadOff34 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 34))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff34.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff34.setDescription('Load 34 is off.')
tlpPduAlarmLoadOff35 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 35))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff35.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff35.setDescription('Load 35 is off.')
tlpPduAlarmLoadOff36 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 36))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff36.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff36.setDescription('Load 36 is off.')
tlpPduAlarmLoadOff37 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 37))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff37.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff37.setDescription('Load 37 is off.')
tlpPduAlarmLoadOff38 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 38))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff38.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff38.setDescription('Load 38 is off.')
tlpPduAlarmLoadOff39 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 39))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff39.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff39.setDescription('Load 39 is off.')
tlpPduAlarmLoadOff40 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 40))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff40.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadOff40.setDescription('Load 40 is off.')
tlpPduAlarmCircuitBreakerOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7))
tlpPduAlarmCircuitBreakerOpen01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 1))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen01.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen01.setDescription('Circuit breaker 1 is open.')
tlpPduAlarmCircuitBreakerOpen02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 2))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen02.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen02.setDescription('Circuit breaker 2 is open.')
tlpPduAlarmCircuitBreakerOpen03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 3))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen03.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen03.setDescription('Circuit breaker 3 is open.')
tlpPduAlarmCircuitBreakerOpen04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 4))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen04.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen04.setDescription('Circuit breaker 4 is open.')
tlpPduAlarmCircuitBreakerOpen05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 5))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen05.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen05.setDescription('Circuit breaker 5 is open.')
tlpPduAlarmCircuitBreakerOpen06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 6))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen06.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen06.setDescription('Circuit breaker 6 is open.')
tlpPduAlarmCurrentAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 8))
tlpPduAlarmCurrentAboveThreshold1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 8, 1))
if mibBuilder.loadTexts: tlpPduAlarmCurrentAboveThreshold1.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmCurrentAboveThreshold1.setDescription('The output current on phase 1 exceeds load limits.')
tlpPduAlarmCurrentAboveThreshold2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 8, 2))
if mibBuilder.loadTexts: tlpPduAlarmCurrentAboveThreshold2.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmCurrentAboveThreshold2.setDescription('The output current on phase 2 exceeds load limits.')
tlpPduAlarmCurrentAboveThreshold3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 8, 3))
if mibBuilder.loadTexts: tlpPduAlarmCurrentAboveThreshold3.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmCurrentAboveThreshold3.setDescription('The output current on phase 3 exceeds load limits.')
tlpPduAlarmLoadsNotAllOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 9))
if mibBuilder.loadTexts: tlpPduAlarmLoadsNotAllOn.setStatus('current')
if mibBuilder.loadTexts: tlpPduAlarmLoadsNotAllOn.setDescription('One of more loads are not on.')
tlpEnvAlarmTemperatureBeyondLimits = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 1))
if mibBuilder.loadTexts: tlpEnvAlarmTemperatureBeyondLimits.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmTemperatureBeyondLimits.setDescription('The temperature exceeds limits.')
tlpEnvAlarmHumidityBeyondLimits = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 2))
if mibBuilder.loadTexts: tlpEnvAlarmHumidityBeyondLimits.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmHumidityBeyondLimits.setDescription('The humidity exceeds limits.')
tlpEnvAlarmInputContact = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3))
tlpEnvAlarmInputContact01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3, 1))
if mibBuilder.loadTexts: tlpEnvAlarmInputContact01.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmInputContact01.setDescription('Input contact 1 is in alarm.')
tlpEnvAlarmInputContact02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3, 2))
if mibBuilder.loadTexts: tlpEnvAlarmInputContact02.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmInputContact02.setDescription('Input contact 2 is in alarm.')
tlpEnvAlarmInputContact03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3, 3))
if mibBuilder.loadTexts: tlpEnvAlarmInputContact03.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmInputContact03.setDescription('Input contact 3 is in alarm.')
tlpEnvAlarmInputContact04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3, 4))
if mibBuilder.loadTexts: tlpEnvAlarmInputContact04.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmInputContact04.setDescription('Input contact 4 is in alarm.')
tlpEnvAlarmOutputContact = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4))
tlpEnvAlarmOutputContact01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4, 1))
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact01.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact01.setDescription('Output contact 1 is in alarm.')
tlpEnvAlarmOutputContact02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4, 2))
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact02.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact02.setDescription('Output contact 2 is in alarm.')
tlpEnvAlarmOutputContact03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4, 3))
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact03.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact03.setDescription('Output contact 3 is in alarm.')
tlpEnvAlarmOutputContact04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4, 4))
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact04.setStatus('current')
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact04.setDescription('Output contact 4 is in alarm.')
tlpAtsAlarmOutage = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 1))
tlpAtsAlarmSource1Outage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 1, 1))
if mibBuilder.loadTexts: tlpAtsAlarmSource1Outage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmSource1Outage.setDescription('Input on source 1 is not present. For atss with the designation of primary and secondary, this alarm denotes input on the primary source is not present.')
tlpAtsAlarmSource2Outage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 1, 2))
if mibBuilder.loadTexts: tlpAtsAlarmSource2Outage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmSource2Outage.setDescription('Input on source 2 is not present. For atss with the designation of primary and secondary, this alarm denotes input on the secondary source is not present.')
tlpAtsAlarmTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 2))
tlpAtsAlarmSystemTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 2, 1))
if mibBuilder.loadTexts: tlpAtsAlarmSystemTemperature.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmSystemTemperature.setDescription('The system temperature is out of tolerance.')
tlpAtsAlarmSource1Temperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 2, 2))
if mibBuilder.loadTexts: tlpAtsAlarmSource1Temperature.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmSource1Temperature.setDescription('The source 1 temperature is out of tolerance.')
tlpAtsAlarmSource2Temperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 2, 3))
if mibBuilder.loadTexts: tlpAtsAlarmSource2Temperature.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmSource2Temperature.setDescription('The source 2 temperature is out of tolerance.')
tlpAtsAlarmLoadLevelAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 3))
if mibBuilder.loadTexts: tlpAtsAlarmLoadLevelAboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadLevelAboveThreshold.setDescription('The load level is above the designated threshold.')
tlpAtsAlarmInputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 4))
if mibBuilder.loadTexts: tlpAtsAlarmInputBad.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmInputBad.setDescription('An input condition is out of tolerance.')
tlpAtsAlarmOutputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 5))
if mibBuilder.loadTexts: tlpAtsAlarmOutputBad.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmOutputBad.setDescription('An output condition (other than OutputOverload) is out of tolerance.')
tlpAtsAlarmOutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 6))
if mibBuilder.loadTexts: tlpAtsAlarmOutputOverload.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmOutputOverload.setDescription('The output load exceeds the ats output capacity.')
tlpAtsAlarmOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 7))
if mibBuilder.loadTexts: tlpAtsAlarmOutputOff.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmOutputOff.setDescription('The output of the ats is in the off state.')
tlpAtsAlarmLoadOff = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8))
tlpAtsAlarmLoadOff01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 1))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff01.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff01.setDescription('Load 1 is off.')
tlpAtsAlarmLoadOff02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 2))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff02.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff02.setDescription('Load 2 is off.')
tlpAtsAlarmLoadOff03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 3))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff03.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff03.setDescription('Load 3 is off.')
tlpAtsAlarmLoadOff04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 4))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff04.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff04.setDescription('Load 4 is off.')
tlpAtsAlarmLoadOff05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 5))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff05.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff05.setDescription('Load 5 is off.')
tlpAtsAlarmLoadOff06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 6))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff06.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff06.setDescription('Load 6 is off.')
tlpAtsAlarmLoadOff07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 7))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff07.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff07.setDescription('Load 7 is off.')
tlpAtsAlarmLoadOff08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 8))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff08.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff08.setDescription('Load 8 is off.')
tlpAtsAlarmLoadOff09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 9))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff09.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff09.setDescription('Load 9 is off.')
tlpAtsAlarmLoadOff10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 10))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff10.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff10.setDescription('Load 10 is off.')
tlpAtsAlarmLoadOff11 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 11))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff11.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff11.setDescription('Load 11 is off.')
tlpAtsAlarmLoadOff12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 12))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff12.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff12.setDescription('Load 12 is off.')
tlpAtsAlarmLoadOff13 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 13))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff13.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff13.setDescription('Load 13 is off.')
tlpAtsAlarmLoadOff14 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 14))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff14.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff14.setDescription('Load 14 is off.')
tlpAtsAlarmLoadOff15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 15))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff15.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff15.setDescription('Load 15 is off.')
tlpAtsAlarmLoadOff16 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 16))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff16.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff16.setDescription('Load 16 is off.')
tlpAtsAlarmLoadOff17 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 17))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff17.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff17.setDescription('Load 17 is off.')
tlpAtsAlarmLoadOff18 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 18))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff18.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff18.setDescription('Load 18 is off.')
tlpAtsAlarmLoadOff19 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 19))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff19.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff19.setDescription('Load 19 is off.')
tlpAtsAlarmLoadOff20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 20))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff20.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff20.setDescription('Load 20 is off.')
tlpAtsAlarmLoadOff21 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 21))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff21.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff21.setDescription('Load 21 is off.')
tlpAtsAlarmLoadOff22 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 22))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff22.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff22.setDescription('Load 22 is off.')
tlpAtsAlarmLoadOff23 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 23))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff23.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff23.setDescription('Load 23 is off.')
tlpAtsAlarmLoadOff24 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 24))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff24.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff24.setDescription('Load 24 is off.')
tlpAtsAlarmLoadOff25 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 25))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff25.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff25.setDescription('Load 25 is off.')
tlpAtsAlarmLoadOff26 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 26))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff26.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff26.setDescription('Load 26 is off.')
tlpAtsAlarmLoadOff27 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 27))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff27.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff27.setDescription('Load 27 is off.')
tlpAtsAlarmLoadOff28 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 28))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff28.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff28.setDescription('Load 28 is off.')
tlpAtsAlarmLoadOff29 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 29))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff29.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff29.setDescription('Load 29 is off.')
tlpAtsAlarmLoadOff30 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 30))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff30.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff30.setDescription('Load 30 is off.')
tlpAtsAlarmLoadOff31 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 31))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff31.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff31.setDescription('Load 31 is off.')
tlpAtsAlarmLoadOff32 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 32))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff32.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff32.setDescription('Load 32 is off.')
tlpAtsAlarmLoadOff33 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 33))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff33.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff33.setDescription('Load 33 is off.')
tlpAtsAlarmLoadOff34 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 34))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff34.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff34.setDescription('Load 34 is off.')
tlpAtsAlarmLoadOff35 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 35))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff35.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff35.setDescription('Load 35 is off.')
tlpAtsAlarmLoadOff36 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 36))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff36.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff36.setDescription('Load 36 is off.')
tlpAtsAlarmLoadOff37 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 37))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff37.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff37.setDescription('Load 37 is off.')
tlpAtsAlarmLoadOff38 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 38))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff38.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff38.setDescription('Load 38 is off.')
tlpAtsAlarmLoadOff39 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 39))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff39.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff39.setDescription('Load 39 is off.')
tlpAtsAlarmLoadOff40 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 40))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff40.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff40.setDescription('Load 40 is off.')
tlpAtsAlarmCircuitBreakerOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9))
tlpAtsAlarmCircuitBreakerOpen01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 1))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen01.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen01.setDescription('Circuit breaker 1 is open.')
tlpAtsAlarmCircuitBreakerOpen02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 2))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen02.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen02.setDescription('Circuit breaker 2 is open.')
tlpAtsAlarmCircuitBreakerOpen03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 3))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen03.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen03.setDescription('Circuit breaker 3 is open.')
tlpAtsAlarmCircuitBreakerOpen04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 4))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen04.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen04.setDescription('Circuit breaker 4 is open.')
tlpAtsAlarmCircuitBreakerOpen05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 5))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen05.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen05.setDescription('Circuit breaker 5 is open.')
tlpAtsAlarmCircuitBreakerOpen06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 6))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen06.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen06.setDescription('Circuit breaker 6 is open.')
tlpAtsAlarmCurrentAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10))
tlpAtsAlarmCurrentAboveThresholdA1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 1))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdA1.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdA1.setDescription('The output current on input source 1 phase 1 exceeds load limits.')
tlpAtsAlarmCurrentAboveThresholdA2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 2))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdA2.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdA2.setDescription('The output current on input source 1 phase 2 exceeds load limits.')
tlpAtsAlarmCurrentAboveThresholdA3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 3))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdA3.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdA3.setDescription('The output current on input source 1 phase 3 exceeds load limits.')
tlpAtsAlarmCurrentAboveThresholdB1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 4))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdB1.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdB1.setDescription('The output current on input source 2 phase 1 exceeds load limits.')
tlpAtsAlarmCurrentAboveThresholdB2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 5))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdB2.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdB2.setDescription('The output current on input source 2 phase 2 exceeds load limits.')
tlpAtsAlarmCurrentAboveThresholdB3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 6))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdB3.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdB3.setDescription('The output current on input source 2 phase 3 exceeds load limits.')
tlpAtsAlarmLoadsNotAllOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 11))
if mibBuilder.loadTexts: tlpAtsAlarmLoadsNotAllOn.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmLoadsNotAllOn.setDescription('One of more loads are not on.')
tlpAtsAlarmGeneralFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 12))
if mibBuilder.loadTexts: tlpAtsAlarmGeneralFault.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmGeneralFault.setDescription('A general fault in the ats has been detected.')
tlpAtsAlarmVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 13))
tlpAtsAlarmOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 13, 1))
if mibBuilder.loadTexts: tlpAtsAlarmOverVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmOverVoltage.setDescription('The input voltage is out of tolerance.')
tlpAtsAlarmSource1OverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 13, 2))
if mibBuilder.loadTexts: tlpAtsAlarmSource1OverVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmSource1OverVoltage.setDescription('The voltage on source 1 is out of tolerance.')
tlpAtsAlarmSource2OverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 13, 3))
if mibBuilder.loadTexts: tlpAtsAlarmSource2OverVoltage.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmSource2OverVoltage.setDescription('The voltage on source 2 is out of tolerance.')
tlpAtsAlarmFrequency = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 14))
tlpAtsAlarmSource1InvalidFrequency = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 14, 1))
if mibBuilder.loadTexts: tlpAtsAlarmSource1InvalidFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmSource1InvalidFrequency.setDescription('The voltage on source 1 is out of tolerance.')
tlpAtsAlarmSource2InvalidFrequency = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 14, 2))
if mibBuilder.loadTexts: tlpAtsAlarmSource2InvalidFrequency.setStatus('current')
if mibBuilder.loadTexts: tlpAtsAlarmSource2InvalidFrequency.setDescription('The voltage on source 2 is out of tolerance.')
tlpCoolingAlarmSupplyAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 1))
if mibBuilder.loadTexts: tlpCoolingAlarmSupplyAirSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmSupplyAirSensorFault.setDescription('The supply air sensor is in fault.')
tlpCoolingAlarmReturnAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 2))
if mibBuilder.loadTexts: tlpCoolingAlarmReturnAirSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmReturnAirSensorFault.setDescription('The return air sensor is in fault.')
tlpCoolingAlarmCondenserInletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 3))
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserInletAirSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserInletAirSensorFault.setDescription('The condenser inlet air sensor is in fault.')
tlpCoolingAlarmCondenserOutletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 4))
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserOutletAirSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserOutletAirSensorFault.setDescription('The condenser outlet air sensor is in fault.')
tlpCoolingAlarmSuctionTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 5))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionTemperatureSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionTemperatureSensorFault.setDescription('The suction temperature sensor is in fault.')
tlpCoolingAlarmEvaporatorTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 6))
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorTemperatureSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorTemperatureSensorFault.setDescription('The evaporator temperature sensor is in fault.')
tlpCoolingAlarmAirFilterClogged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 7))
if mibBuilder.loadTexts: tlpCoolingAlarmAirFilterClogged.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmAirFilterClogged.setDescription('The air filter is clogged.')
tlpCoolingAlarmAirFilterRunHoursViolation = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 8))
if mibBuilder.loadTexts: tlpCoolingAlarmAirFilterRunHoursViolation.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmAirFilterRunHoursViolation.setDescription('The air filter run hours was violated.')
tlpCoolingAlarmSuctionPressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 9))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressureSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressureSensorFault.setDescription('The suction pressure sensor is in fault.')
tlpCoolingAlarmInverterCommunicationsFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 10))
if mibBuilder.loadTexts: tlpCoolingAlarmInverterCommunicationsFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmInverterCommunicationsFault.setDescription('The inverter communications is in fault.')
tlpCoolingAlarmRemoteShutdownViaInputContact = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 11))
if mibBuilder.loadTexts: tlpCoolingAlarmRemoteShutdownViaInputContact.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmRemoteShutdownViaInputContact.setDescription('A remote shutdown was triggerd by an input contact.')
tlpCoolingAlarmCondensatePumpFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 12))
if mibBuilder.loadTexts: tlpCoolingAlarmCondensatePumpFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmCondensatePumpFault.setDescription('The condensate pump is in fault.')
tlpCoolingAlarmLowRefrigerantStartupFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 13))
if mibBuilder.loadTexts: tlpCoolingAlarmLowRefrigerantStartupFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmLowRefrigerantStartupFault.setDescription('The low refrigerant startup is in fault.')
tlpCoolingAlarmCondenserFanFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 14))
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserFanFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserFanFault.setDescription('The condenser fan is in fault.')
tlpCoolingAlarmCondenserFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 15))
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserFailure.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserFailure.setDescription('The condenser has failed.')
tlpCoolingAlarmEvaporatorCoolingFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 16))
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorCoolingFailure.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorCoolingFailure.setDescription('The evaporator cooling is in fault.')
tlpCoolingAlarmReturnAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 17))
if mibBuilder.loadTexts: tlpCoolingAlarmReturnAirTempHigh.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmReturnAirTempHigh.setDescription('The return air temperature is high.')
tlpCoolingAlarmSupplyAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 18))
if mibBuilder.loadTexts: tlpCoolingAlarmSupplyAirTempHigh.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmSupplyAirTempHigh.setDescription('The supply air temperature is high.')
tlpCoolingAlarmEvaporatorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 19))
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorFailure.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorFailure.setDescription('The evaporator has failed.')
tlpCoolingAlarmEvaporatorFreezeUp = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 20))
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorFreezeUp.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorFreezeUp.setDescription('The evaporator is frozen.')
tlpCoolingAlarmDischargePressureHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 21))
if mibBuilder.loadTexts: tlpCoolingAlarmDischargePressureHigh.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmDischargePressureHigh.setDescription('The discharge pressure is high.')
tlpCoolingAlarmPressureGaugeFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 22))
if mibBuilder.loadTexts: tlpCoolingAlarmPressureGaugeFailure.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmPressureGaugeFailure.setDescription('The pressure gauge has failed.')
tlpCoolingAlarmDischargePressurePersistentHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 23))
if mibBuilder.loadTexts: tlpCoolingAlarmDischargePressurePersistentHigh.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmDischargePressurePersistentHigh.setDescription('The discharge pressure is persistently high.')
tlpCoolingAlarmSuctionPressureLowStartFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 24))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressureLowStartFailure.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressureLowStartFailure.setDescription('Cannot start due to low suction pressure.')
tlpCoolingAlarmSuctionPressureLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 25))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressureLow.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressureLow.setDescription('The suction pressure is low.')
tlpCoolingAlarmSuctionPressurePersistentLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 26))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressurePersistentLow.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressurePersistentLow.setDescription('The suction pressure is persistently low.')
tlpCoolingAlarmStartupLinePressureImbalance = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 27))
if mibBuilder.loadTexts: tlpCoolingAlarmStartupLinePressureImbalance.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmStartupLinePressureImbalance.setDescription('The startup line pressure is in imbalance.')
tlpCoolingAlarmCompressorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 28))
if mibBuilder.loadTexts: tlpCoolingAlarmCompressorFailure.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmCompressorFailure.setDescription('The compressor has failed.')
tlpCoolingAlarmCurrentLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 29))
if mibBuilder.loadTexts: tlpCoolingAlarmCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmCurrentLimit.setDescription('The current is out of range.')
tlpCoolingAlarmWaterLeak = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 30))
if mibBuilder.loadTexts: tlpCoolingAlarmWaterLeak.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmWaterLeak.setDescription('Water is leaking.')
tlpCoolingAlarmFanUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 31))
if mibBuilder.loadTexts: tlpCoolingAlarmFanUnderCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmFanUnderCurrent.setDescription('The fan is under current.')
tlpCoolingAlarmFanOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 32))
if mibBuilder.loadTexts: tlpCoolingAlarmFanOverCurrent.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmFanOverCurrent.setDescription('The fan is over current.')
tlpCoolingAlarmDischargePressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 33))
if mibBuilder.loadTexts: tlpCoolingAlarmDischargePressureSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmDischargePressureSensorFault.setDescription('The discharge pressure sensor is in fault.')
tlpCoolingAlarmWaterFull = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 34))
if mibBuilder.loadTexts: tlpCoolingAlarmWaterFull.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmWaterFull.setDescription('Water is Full.')
tlpCoolingAlarmAutoCoolingOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 35))
if mibBuilder.loadTexts: tlpCoolingAlarmAutoCoolingOn.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmAutoCoolingOn.setDescription('Automatic cooling was activated to lower the temperature below the remote set point.')
tlpCoolingAlarmPowerButtonPressed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 36))
if mibBuilder.loadTexts: tlpCoolingAlarmPowerButtonPressed.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmPowerButtonPressed.setDescription('Power button was pressed on the front panel.')
tlpCoolingAlarmDisconnectedFromDevice = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 37))
if mibBuilder.loadTexts: tlpCoolingAlarmDisconnectedFromDevice.setStatus('current')
if mibBuilder.loadTexts: tlpCoolingAlarmDisconnectedFromDevice.setDescription('The device communications is disconnected.')
tlpAlarmControlTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1), )
if mibBuilder.loadTexts: tlpAlarmControlTable.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmControlTable.setDescription('A list of alarm conditions supported for each device managed by this agent. This table contains zero, one, or many rows depending upon the number of available alarms managed by each device.')
tlpAlarmControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAlarmControlIndex"))
if mibBuilder.loadTexts: tlpAlarmControlEntry.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmControlEntry.setDescription('An entry containing details for a particular alarm condition.')
tlpAlarmControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmControlIndex.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmControlIndex.setDescription('The table row index for this alarm control entry for this device. The index of any one row represents the index of the alarm entry within the agent system. As such, the index values for any one device is not guaranteed to start with 1 or be numerically sequential.')
tlpAlarmControlDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmControlDescr.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmControlDescr.setDescription('A reference of the alarm description object. The object referenced should not be accessbile, but rather be used to provide a unique description for the alarm condition. The object referenced will be a well known alarm object associated with the device on which the alarm condition is active. This will be the same object description of an alarm when in alarm as referenced by tlpAlarmDescr.')
tlpAlarmControlDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmControlDetail.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmControlDetail.setDescription('A textual description of the alarm condition. This will be the same textual description of an alarm when in alarm as referenced by tlpAlarmDetail.')
tlpAlarmControlSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("info", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAlarmControlSeverity.setStatus('current')
if mibBuilder.loadTexts: tlpAlarmControlSeverity.setDescription('The severity of this alarm, which can be configured as desired for each alarm condition. This will be the same severity used when in alarm as referenced by tlpAlarmType.')
tlpNotificationsAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1)).setObjects(("TRIPPLITE-PRODUCTS", "tlpAlarmId"), ("TRIPPLITE-PRODUCTS", "tlpAlarmDescr"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTime"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTableRef"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTableRowRef"), ("TRIPPLITE-PRODUCTS", "tlpAlarmDetail"), ("TRIPPLITE-PRODUCTS", "tlpAlarmType"))
if mibBuilder.loadTexts: tlpNotificationsAlarmEntryAdded.setStatus('current')
if mibBuilder.loadTexts: tlpNotificationsAlarmEntryAdded.setDescription('This notification is sent each time an alarm condition is inserted into the device alarm table, tlpAlarmTable.')
tlpNotificationsAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 2)).setObjects(("TRIPPLITE-PRODUCTS", "tlpAlarmId"), ("TRIPPLITE-PRODUCTS", "tlpAlarmDescr"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTime"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTableRef"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTableRowRef"), ("TRIPPLITE-PRODUCTS", "tlpAlarmDetail"), ("TRIPPLITE-PRODUCTS", "tlpAlarmType"))
if mibBuilder.loadTexts: tlpNotificationsAlarmEntryRemoved.setStatus('current')
if mibBuilder.loadTexts: tlpNotificationsAlarmEntryRemoved.setDescription('This notification is sent each time an alarm condition is removed from the device alarm table, tlpAlarmTable.')
tlpNotifySystemStartup = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 3))
if mibBuilder.loadTexts: tlpNotifySystemStartup.setStatus('current')
if mibBuilder.loadTexts: tlpNotifySystemStartup.setDescription("Used to inform another entity of an agent's startup. The varbinds that follow are: OBJ1 = tlpAgentType Obj1Value = The type of engine providing this data OBJ2 = tlpAgentVersion Obj2Value = The current version of the engine OBJ3 = tlpAgentMAC Obj3Value = The MAC address of the engine OBJ4 = tlpAgentSerialNum Obj4Value = The serial number of the web card [should be 0 on PC] --- if this trap is extended, place all static OIDs above this mark. all objects below --- the number of devices (tlpDeviceNumDevices) is explicit as per device for enumeration by --- the target receiver OBJ5 = tlpDeviceNumDevices Obj5Value = The number of devices attached --- The following objects will be replicated per each device: OBJ6 = The OID for an entry of tlpDeviceManufacturer, indexed by device Obj6Value = The device's manufacturer OBJ7 = The OID for an entry of tlpDeviceModel, indexed by device Obj7Value = The device's model name OBJ8 = The OID for an entry of tlpDeviceName, indexed by device Obj8Value = The device's display name OBJ9 = The OID for an entry of tlpDeviceLocation, indexed by device Obj9Value = The device's location OBJ10 = The OID for an entry of tlpDeviceRegion, indexed by device Obj10Value= The device's region OBJ11 = The OID for an entry of tlpDeviceProtocol, indexed by device Obj11Value= The device's protocol (display string format) ")
tlpNotifySystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 4))
if mibBuilder.loadTexts: tlpNotifySystemShutdown.setStatus('current')
if mibBuilder.loadTexts: tlpNotifySystemShutdown.setDescription("Used to inform another entity of an agent's shutdown. The varbinds that follow are: OBJ1 = tlpAgentType Obj1Value = The type of engine providing this data OBJ2 = tlpAgentVersion Obj2Value = The current version of the engine OBJ3 = tlpAgentMAC Obj3Value = The MAC address of the engine OBJ4 = tlpAgentSerialNum Obj4Value = The serial number of the web card [should be 0 on PC] --- if this trap is extended, place all static OIDs above this mark. all objects below --- the number of devices (tlpDeviceNumDevices) is explicit as per device for enumeration by --- the target receiver OBJ5 = tlpDeviceNumDevices Obj5Value = The number of devices attached --- The following objects will be replicated per each device: OBJ6 = The OID for an entry of tlpDeviceManufacturer, indexed by device Obj6Value = The device's manufacturer OBJ7 = The OID for an entry of tlpDeviceModel, indexed by device Obj7Value = The device's model name OBJ8 = The OID for an entry of tlpDeviceName, indexed by device Obj8Value = The device's display name OBJ9 = The OID for an entry of tlpDeviceLocation, indexed by device Obj9Value = The device's location OBJ10 = The OID for an entry of tlpDeviceRegion, indexed by device Obj10Value= The device's region OBJ11 = The OID for an entry of tlpDeviceProtocol, indexed by device Obj11Value= The device's protocol (display string format) ")
tlpNotifySystemUpdate = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 5))
if mibBuilder.loadTexts: tlpNotifySystemUpdate.setStatus('current')
if mibBuilder.loadTexts: tlpNotifySystemUpdate.setDescription("Used to inform another entity of an engine's startup. The varbinds that follow are: OBJ1 = tlpAgentType Obj1Value = The type of engine providing this data OBJ2 = tlpAgentVersion Obj2Value = The current version of the engine OBJ3 = tlpAgentMAC Obj3Value = The MAC address of the engine OBJ4 = tlpAgentSerialNum Obj4Value = The serial number of the web card [should be 0 on PC] --- if this trap is extended, place all static OIDs above this mark. all objects below --- the number of devices (tlpDeviceNumDevices) is explicit as per device for enumeration by --- the target receiver OBJ5 = tlpDeviceNumDevices Obj5Value = The number of devices attached --- The following objects will be replicated per each device: OBJ6 = The OID for an entry of tlpDeviceManufacturer, indexed by device Obj6Value = The device's manufacturer OBJ7 = The OID for an entry of tlpDeviceModel, indexed by device Obj7Value = The device's model name OBJ8 = The OID for an entry of tlpDeviceName, indexed by device Obj8Value = The device's display name OBJ9 = The OID for an entry of tlpDeviceLocation, indexed by device Obj9Value = The device's location OBJ10 = The OID for an entry of tlpDeviceRegion, indexed by device Obj10Value= The device's region OBJ11 = The OID for an entry of tlpDeviceProtocol, indexed by device Obj11Value= The device's protocol (display string format) ")
mibBuilder.exportSymbols("TRIPPLITE-PRODUCTS", tlpPduAlarmLoadOff19=tlpPduAlarmLoadOff19, tlpDeviceLocation=tlpDeviceLocation, tlpPduIdentNumOutlets=tlpPduIdentNumOutlets, tlpAtsIdentEntry=tlpAtsIdentEntry, tlpCoolingAlarmAutoCoolingOn=tlpCoolingAlarmAutoCoolingOn, tlpAtsInputBadVoltageThreshold=tlpAtsInputBadVoltageThreshold, tlpSoftware=tlpSoftware, tlpAtsCircuitCurrentMax=tlpAtsCircuitCurrentMax, tlpUpsAlarmBusOverVoltage=tlpUpsAlarmBusOverVoltage, tlpUpsControlUpsOff=tlpUpsControlUpsOff, tlpUpsAlarmTempBad=tlpUpsAlarmTempBad, tlpUpsBatteryPackConfigCapacityUnits=tlpUpsBatteryPackConfigCapacityUnits, tlpUpsBatteryPackDetailEntry=tlpUpsBatteryPackDetailEntry, tlpPduOutletShedDelay=tlpPduOutletShedDelay, tlpUpsAlarmDepletedBattery=tlpUpsAlarmDepletedBattery, tlpPduOutletPhase=tlpPduOutletPhase, tlpAlarmTableRowRef=tlpAlarmTableRowRef, tlpPduDevicePowerOnDelay=tlpPduDevicePowerOnDelay, tlpAtsSupportsTable=tlpAtsSupportsTable, tlpEnvTemperatureTable=tlpEnvTemperatureTable, tlpAtsAlarmSource1Temperature=tlpAtsAlarmSource1Temperature, tlpUpsDevicePowerOnDelay=tlpUpsDevicePowerOnDelay, tlpUpsAlarmOutputCurrentChanged=tlpUpsAlarmOutputCurrentChanged, tlpAtsAlarmLoadOff37=tlpAtsAlarmLoadOff37, tlpAtsOutputActivePower=tlpAtsOutputActivePower, tlpUpsDeviceMainLoadState=tlpUpsDeviceMainLoadState, tlpPduOutputActivePower=tlpPduOutputActivePower, tlpUpsAlarmLoadOff39=tlpUpsAlarmLoadOff39, tlpEnvAlarmInputContact02=tlpEnvAlarmInputContact02, tlpAtsIdentNumOutletGroups=tlpAtsIdentNumOutletGroups, tlpAgentAttributesAutostart=tlpAgentAttributesAutostart, tlpAtsDisplayUnits=tlpAtsDisplayUnits, tlpAtsDeviceEntry=tlpAtsDeviceEntry, tlpCoolingAlarmCompressorFailure=tlpCoolingAlarmCompressorFailure, tlpUpsBypassLineCurrent=tlpUpsBypassLineCurrent, tlpUpsAlarmUpsOutputOff=tlpUpsAlarmUpsOutputOff, tlpUpsConfigOverLoadThreshold=tlpUpsConfigOverLoadThreshold, tlpAtsInputPhaseVoltageMax=tlpAtsInputPhaseVoltageMax, tlpUpsAlarmLoadLevelAboveThresholdPhase2=tlpUpsAlarmLoadLevelAboveThresholdPhase2, tlpPduControlTable=tlpPduControlTable, tlpUpsIdentNumPhases=tlpUpsIdentNumPhases, tlpAtsAlarmCircuitBreakerOpen04=tlpAtsAlarmCircuitBreakerOpen04, tlpUpsOutletGroupDescription=tlpUpsOutletGroupDescription, tlpDeviceName=tlpDeviceName, tlpSwitchControl=tlpSwitchControl, tlpAlarmUserDefined05=tlpAlarmUserDefined05, tlpAgentSnmpContactEntry=tlpAgentSnmpContactEntry, tlpCoolingDevice=tlpCoolingDevice, tlpAtsDeviceAggregatePowerFactor=tlpAtsDeviceAggregatePowerFactor, tlpUpsOutletCurrent=tlpUpsOutletCurrent, tlpPduInputNominalVoltage=tlpPduInputNominalVoltage, tlpUpsBatteryPackIdentModel=tlpUpsBatteryPackIdentModel, tlpAtsConfigVoltageRangeLimitsTable=tlpAtsConfigVoltageRangeLimitsTable, tlpAtsBreaker=tlpAtsBreaker, tlpPduDetail=tlpPduDetail, tlpPduControlPduReboot=tlpPduControlPduReboot, tlpAtsAlarmLoadOff16=tlpAtsAlarmLoadOff16, tlpPduSupportsOutletGroup=tlpPduSupportsOutletGroup, tlpPduOutletGroupCommand=tlpPduOutletGroupCommand, tlpAgentEmailContactEntry=tlpAgentEmailContactEntry, tlpEnvHumidityEntry=tlpEnvHumidityEntry, tlpEnvConfigTable=tlpEnvConfigTable, tlpAtsConfigSource2ReturnTime=tlpAtsConfigSource2ReturnTime, tlpAtsIdent=tlpAtsIdent, tlpCoolingAlarmAirFilterClogged=tlpCoolingAlarmAirFilterClogged, tlpCoolingAlarmAirFilterRunHoursViolation=tlpCoolingAlarmAirFilterRunHoursViolation, tlpUpsOutput=tlpUpsOutput, tlpAtsDeviceOutputPowerTotal=tlpAtsDeviceOutputPowerTotal, tlpPduInputHighTransferVoltageLowerBound=tlpPduInputHighTransferVoltageLowerBound, tlpUpsIdentTable=tlpUpsIdentTable, tlpUpsConfigBypassUpperLimitVoltage=tlpUpsConfigBypassUpperLimitVoltage, tlpPduInputEntry=tlpPduInputEntry, tlpAtsAlarmLoadOff10=tlpAtsAlarmLoadOff10, tlpDeviceTypes=tlpDeviceTypes, tlpPduDeviceAggregatePowerFactor=tlpPduDeviceAggregatePowerFactor, tlpAtsAlarmLoadOff25=tlpAtsAlarmLoadOff25, tlpUpsWatchdogTable=tlpUpsWatchdogTable, tlpEnvIdentTempSupported=tlpEnvIdentTempSupported, tlpPdu=tlpPdu, tlpEnvInputContactEntry=tlpEnvInputContactEntry, tlpAtsAlarmLoadOff32=tlpAtsAlarmLoadOff32, tlpUpsSupportsOutletGroup=tlpUpsSupportsOutletGroup, tlpUpsConfigOutputVoltage=tlpUpsConfigOutputVoltage, tlpUps=tlpUps, tlpUpsBypassLineVoltage=tlpUpsBypassLineVoltage, tlpAtsDeviceTemperatureC=tlpAtsDeviceTemperatureC, tlpPduOutletGroupEntry=tlpPduOutletGroupEntry, tlpDeviceIdentDateInstalled=tlpDeviceIdentDateInstalled, tlpUpsAlarmLoadOff40=tlpUpsAlarmLoadOff40, tlpAgentAlarms=tlpAgentAlarms, tlpAtsHeatsinkTemperatureF=tlpAtsHeatsinkTemperatureF, tlpPduDevicePhaseImbalance=tlpPduDevicePhaseImbalance, tlpPduCircuitPowerFactor=tlpPduCircuitPowerFactor, tlpAgentEmailContactIndex=tlpAgentEmailContactIndex, tlpUpsOutletName=tlpUpsOutletName, tlpPduOutputPowerFactor=tlpPduOutputPowerFactor, tlpUpsAlarmLoadOff13=tlpUpsAlarmLoadOff13, tlpPduOutletGroupIndex=tlpPduOutletGroupIndex, tlpPduOutputVoltage=tlpPduOutputVoltage, tlpAtsControl=tlpAtsControl, tlpEnvirosense=tlpEnvirosense, tlpUpsOutputNominalVoltage=tlpUpsOutputNominalVoltage, tlpUpsConfigAutoRampOnTransition=tlpUpsConfigAutoRampOnTransition, tlpUpsConfig=tlpUpsConfig, tlpSwitchDetail=tlpSwitchDetail, tlpAtsIdentTable=tlpAtsIdentTable, tlpAtsInputCurrentLimit=tlpAtsInputCurrentLimit, tlpAtsCircuitTotalCurrent=tlpAtsCircuitTotalCurrent, tlpAtsDisplayIntensity=tlpAtsDisplayIntensity, tlpAtsConfigThresholdTable=tlpAtsConfigThresholdTable, tlpAgentMAC=tlpAgentMAC, tlpPduAlarmLoadOff03=tlpPduAlarmLoadOff03, tlpAtsAlarmOutputBad=tlpAtsAlarmOutputBad, tlpPduBreaker=tlpPduBreaker, tlpUpsConfigAutoRestartLowVoltageCutoff=tlpUpsConfigAutoRestartLowVoltageCutoff, tlpAtsCircuitEntry=tlpAtsCircuitEntry, tlpAtsAlarmLoadOff11=tlpAtsAlarmLoadOff11, tlpPduControlPduOff=tlpPduControlPduOff, tlpAtsDetail=tlpAtsDetail, tlpPduOutlet=tlpPduOutlet, tlpUpsAlarmLoadOff03=tlpUpsAlarmLoadOff03, tlpPduAlarmLoadOff24=tlpPduAlarmLoadOff24, tlpUpsAlarmLoadOff27=tlpUpsAlarmLoadOff27, tlpPduInputTable=tlpPduInputTable, tlpUpsInputPhaseFrequency=tlpUpsInputPhaseFrequency, tlpAtsOutletEntry=tlpAtsOutletEntry, tlpPduAlarmLoadOff=tlpPduAlarmLoadOff, tlpCoolingAlarmDischargePressureHigh=tlpCoolingAlarmDischargePressureHigh, tlpPduBreakerEntry=tlpPduBreakerEntry, tlpUpsConfigThresholdEntry=tlpUpsConfigThresholdEntry, tlpAlarmControlDetail=tlpAlarmControlDetail, tlpAtsDeviceMainLoadControllable=tlpAtsDeviceMainLoadControllable, tlpUpsBatteryPackIdentManufacturer=tlpUpsBatteryPackIdentManufacturer, tlpEnvAlarms=tlpEnvAlarms, tlpPduDeviceTotalInputPowerRating=tlpPduDeviceTotalInputPowerRating, tlpAtsInputNominalVoltagePhaseToNeutral=tlpAtsInputNominalVoltagePhaseToNeutral, tlpUpsBatteryPackConfigDesignCapacity=tlpUpsBatteryPackConfigDesignCapacity, tlpNotifications=tlpNotifications, tlpAlarmUserDefined=tlpAlarmUserDefined, tlpAgentSnmpContacts=tlpAgentSnmpContacts, tlpDeviceManufacturer=tlpDeviceManufacturer, tlpUpsControlUpsReboot=tlpUpsControlUpsReboot, tlpAtsAlarmCircuitBreakerOpen05=tlpAtsAlarmCircuitBreakerOpen05, tlpUpsBypassLineIndex=tlpUpsBypassLineIndex, tlpPduHeatsinkEntry=tlpPduHeatsinkEntry, tlpUpsConfigLineSensitivity=tlpUpsConfigLineSensitivity, tlpAtsAlarmCurrentAboveThresholdA2=tlpAtsAlarmCurrentAboveThresholdA2, tlpAtsOutletTable=tlpAtsOutletTable, tlpAlarmsPresent=tlpAlarmsPresent, tlpAtsDeviceOutputCurrentPrecision=tlpAtsDeviceOutputCurrentPrecision, tlpAtsIdentNumBreakers=tlpAtsIdentNumBreakers, tlpUpsAlarmAwaitingPower=tlpUpsAlarmAwaitingPower, tlpUpsBatteryPackDetailTable=tlpUpsBatteryPackDetailTable, tlpAgentEmailContactRowStatus=tlpAgentEmailContactRowStatus, tlpEnvDetail=tlpEnvDetail, tlpEnvIdentEntry=tlpEnvIdentEntry, tlpCoolingAlarmDischargePressureSensorFault=tlpCoolingAlarmDischargePressureSensorFault, tlpAtsAlarmLoadOff13=tlpAtsAlarmLoadOff13, tlpPduAlarmInputBad=tlpPduAlarmInputBad, tlpCoolingAlarmSuctionTemperatureSensorFault=tlpCoolingAlarmSuctionTemperatureSensorFault, tlpPduSupportsEnergywise=tlpPduSupportsEnergywise, tlpPduDisplayAutoScroll=tlpPduDisplayAutoScroll, tlpAtsInputNominalVoltagePhaseToPhase=tlpAtsInputNominalVoltagePhaseToPhase, tlpPduAlarmLoadOff02=tlpPduAlarmLoadOff02, tlpUpsOutputSource=tlpUpsOutputSource, tlpPduAlarmLoadOff01=tlpPduAlarmLoadOff01, tlpUpsSupportsEntry=tlpUpsSupportsEntry, tlpUpsOutputLineEntry=tlpUpsOutputLineEntry, tlpUpsAlarmBypassBad=tlpUpsAlarmBypassBad, tlpPduOutletGroupName=tlpPduOutletGroupName, tlpPduOutputCurrent=tlpPduOutputCurrent, tlpAtsOutputSource=tlpAtsOutputSource, tlpEnvAlarmTemperatureBeyondLimits=tlpEnvAlarmTemperatureBeyondLimits, tlpAtsConfigThresholdEntry=tlpAtsConfigThresholdEntry, tlpCoolingAlarmEvaporatorFailure=tlpCoolingAlarmEvaporatorFailure, tlpEnvIdentNumEnvirosense=tlpEnvIdentNumEnvirosense, tlpUpsAlarmLoadOff15=tlpUpsAlarmLoadOff15, tlpAtsAlarmLoadOff28=tlpAtsAlarmLoadOff28, tlpAtsConfigVoltageRangeEntry=tlpAtsConfigVoltageRangeEntry, tlpPduOutletCurrent=tlpPduOutletCurrent, tlpAtsInputSourceInUse=tlpAtsInputSourceInUse, tlpCoolingAlarmSuctionPressureLowStartFailure=tlpCoolingAlarmSuctionPressureLowStartFailure, tlpPduHeatsink=tlpPduHeatsink, tlpUpsIdentNumUps=tlpUpsIdentNumUps, tlpUpsOutletCommand=tlpUpsOutletCommand, tlpUpsConfigEntry=tlpUpsConfigEntry, tlpPduInputPhaseVoltageMin=tlpPduInputPhaseVoltageMin, tlpAtsDisplayScheme=tlpAtsDisplayScheme, tlpUpsAlarmLoadOff21=tlpUpsAlarmLoadOff21, tlpDeviceIdentEntry=tlpDeviceIdentEntry, tlpUpsAlarmFanFailure=tlpUpsAlarmFanFailure, tlpAtsOutletShedAction=tlpAtsOutletShedAction, tlpPduSupportsRampShed=tlpPduSupportsRampShed, tlpUpsDeviceMainLoadControllable=tlpUpsDeviceMainLoadControllable, tlpEnvTemperatureF=tlpEnvTemperatureF, tlpUpsAlarmCurrentAboveThreshold2=tlpUpsAlarmCurrentAboveThreshold2, tlpUpsAlarmInverterSoftStartBad=tlpUpsAlarmInverterSoftStartBad, tlpAlarmControlDescr=tlpAlarmControlDescr, tlpAtsDisplayTable=tlpAtsDisplayTable, tlpAtsAlarmVoltage=tlpAtsAlarmVoltage, tlpUpsControlEntry=tlpUpsControlEntry, tlpUpsInputPhaseVoltage=tlpUpsInputPhaseVoltage, tlpAtsInputPhaseVoltageMin=tlpAtsInputPhaseVoltageMin, tlpPduOutletState=tlpPduOutletState, tlpPduControl=tlpPduControl, tlpPduOutletCircuit=tlpPduOutletCircuit, tlpAgentAttributesSNMPv3Enabled=tlpAgentAttributesSNMPv3Enabled, tlpPduHeatsinkTable=tlpPduHeatsinkTable, tlpAgentAttributes=tlpAgentAttributes, tlpAtsAlarmLoadOff40=tlpAtsAlarmLoadOff40, tlpUpsOutputFrequency=tlpUpsOutputFrequency, tlpUpsConfigLowBatteryThreshold=tlpUpsConfigLowBatteryThreshold, tlpCoolingDetail=tlpCoolingDetail, tlpPduInputNominalVoltagePhaseToPhase=tlpPduInputNominalVoltagePhaseToPhase, tlpPduCircuitCurrentMin=tlpPduCircuitCurrentMin, tlpAtsOutputTable=tlpAtsOutputTable, tlpAtsAlarmLoadOff01=tlpAtsAlarmLoadOff01, tlpPduControlRamp=tlpPduControlRamp, tlpCoolingAlarmReturnAirSensorFault=tlpCoolingAlarmReturnAirSensorFault, tlpCoolingAlarmStartupLinePressureImbalance=tlpCoolingAlarmStartupLinePressureImbalance, tlpPduDevice=tlpPduDevice, tlpRackTrackIdent=tlpRackTrackIdent, tlpPduCircuit=tlpPduCircuit, tlpAtsInputBadTransferVoltageLowerBound=tlpAtsInputBadTransferVoltageLowerBound, tlpAtsHeatsinkEntry=tlpAtsHeatsinkEntry, tlpDeviceType=tlpDeviceType, tlpAtsConfigSource2TransferSet=tlpAtsConfigSource2TransferSet, tlpAtsOutletShedDelay=tlpAtsOutletShedDelay, tlpAtsConfigOverVoltageThreshold=tlpAtsConfigOverVoltageThreshold, tlpAtsAlarmLoadOff04=tlpAtsAlarmLoadOff04, tlpUpsConfigThresholdTable=tlpUpsConfigThresholdTable, tlpDeviceStatus=tlpDeviceStatus, tlpUpsBatteryPackDetailLastReplaceDate=tlpUpsBatteryPackDetailLastReplaceDate, tlpUpsDeviceTestResultsStatus=tlpUpsDeviceTestResultsStatus, tlpAtsAlarmLoadOff15=tlpAtsAlarmLoadOff15, tlpUpsBypassTable=tlpUpsBypassTable, tlpUpsAlarmLoadOff08=tlpUpsAlarmLoadOff08, tlpUpsBypass=tlpUpsBypass, tlpAtsOutletGroup=tlpAtsOutletGroup, tlpCoolingAlarmCurrentLimit=tlpCoolingAlarmCurrentLimit, tlpUpsInputHighTransferVoltageUpperBound=tlpUpsInputHighTransferVoltageUpperBound, tlpKvmIdent=tlpKvmIdent, tlpAgentAttributesSupportsFTP=tlpAgentAttributesSupportsFTP, tlpUpsOutputLinePower=tlpUpsOutputLinePower, tlpAtsOutletGroupIndex=tlpAtsOutletGroupIndex, tlpPduIdentTable=tlpPduIdentTable, tlpUpsOutletVoltage=tlpUpsOutletVoltage, tlpUpsAlarmUpsOffAsRequested=tlpUpsAlarmUpsOffAsRequested, tlpAtsOutletIndex=tlpAtsOutletIndex, tlpAgentSnmpContactPrivPassword=tlpAgentSnmpContactPrivPassword, tlpPduOutputPhase=tlpPduOutputPhase, tlpEnvAlarmHumidityBeyondLimits=tlpEnvAlarmHumidityBeyondLimits, tlpAgentEmailContactTable=tlpAgentEmailContactTable, tlpUpsWatchdogEntry=tlpUpsWatchdogEntry)
mibBuilder.exportSymbols("TRIPPLITE-PRODUCTS", tlpUpsAlarmOnBypass=tlpUpsAlarmOnBypass, tlpAtsConfigEntry=tlpAtsConfigEntry, tlpPduAlarmCircuitBreakerOpen04=tlpPduAlarmCircuitBreakerOpen04, tlpAtsCircuit=tlpAtsCircuit, tlpUpsOutputLineCurrent=tlpUpsOutputLineCurrent, tlpSwitch=tlpSwitch, tlpPduCircuitEntry=tlpPduCircuitEntry, tlpCoolingAlarmEvaporatorCoolingFailure=tlpCoolingAlarmEvaporatorCoolingFailure, tlpUpsInputNominalFrequency=tlpUpsInputNominalFrequency, tlpPduCircuitIndex=tlpPduCircuitIndex, tlpAtsSupportsRampShed=tlpAtsSupportsRampShed, tlpAtsOutletRampDelay=tlpAtsOutletRampDelay, tlpPduAlarmLoadOff37=tlpPduAlarmLoadOff37, tlpAtsAlarmCircuitBreakerOpen02=tlpAtsAlarmCircuitBreakerOpen02, tlpUpsBatteryPackConfigChemistry=tlpUpsBatteryPackConfigChemistry, tlpPduAlarmLoadOff30=tlpPduAlarmLoadOff30, tlpAtsAlarmLoadOff20=tlpAtsAlarmLoadOff20, tlpAtsOutputPhaseType=tlpAtsOutputPhaseType, tlpUpsAlarmOnBattery=tlpUpsAlarmOnBattery, tlpDeviceIdentTotalUptime=tlpDeviceIdentTotalUptime, tlpUpsAlarmInverterCircuitBad=tlpUpsAlarmInverterCircuitBad, tlpAtsIdentNumAts=tlpAtsIdentNumAts, tlpUpsIdent=tlpUpsIdent, tlpAtsCircuitCurrentLimit=tlpAtsCircuitCurrentLimit, tlpAgentSnmpContactIndex=tlpAgentSnmpContactIndex, tlpAtsDeviceMainLoadCommand=tlpAtsDeviceMainLoadCommand, tlpAtsInputBadTransferVoltageUpperBound=tlpAtsInputBadTransferVoltageUpperBound, tlpUpsBatteryPackConfigCellsPerBattery=tlpUpsBatteryPackConfigCellsPerBattery, tlpUpsInputEntry=tlpUpsInputEntry, tlpAgentAttributesSSHCLIPort=tlpAgentAttributesSSHCLIPort, tlpUpsIdentNumInputs=tlpUpsIdentNumInputs, tlpUpsAlarmOutputOffAsRequested=tlpUpsAlarmOutputOffAsRequested, tlpUpsDeviceTable=tlpUpsDeviceTable, tlpPduInputLowTransferVoltage=tlpPduInputLowTransferVoltage, tlpEnvInputContactIndex=tlpEnvInputContactIndex, tlpAtsConfigSourceBrownoutSetMaximum=tlpAtsConfigSourceBrownoutSetMaximum, tlpPduDisplayIntensity=tlpPduDisplayIntensity, tlpUpsBatteryPackDetailNextReplaceDate=tlpUpsBatteryPackDetailNextReplaceDate, tlpAtsInputPhaseVoltage=tlpAtsInputPhaseVoltage, tlpAtsConfigVoltageRangeLimitsEntry=tlpAtsConfigVoltageRangeLimitsEntry, tlpPduIdentEntry=tlpPduIdentEntry, tlpAlarmId=tlpAlarmId, tlpAtsIdentNumPhases=tlpAtsIdentNumPhases, tlpUpsDeviceEntry=tlpUpsDeviceEntry, tlpCoolingAlarmWaterLeak=tlpCoolingAlarmWaterLeak, tlpPduDeviceOutputCurrentPrecision=tlpPduDeviceOutputCurrentPrecision, tlpUpsAlarmLoadOff18=tlpUpsAlarmLoadOff18, tlpUpsAlarmLoadOff19=tlpUpsAlarmLoadOff19, tlpUpsConfigAutoRestartAfterShutdown=tlpUpsConfigAutoRestartAfterShutdown, tlpRackTrackAlarms=tlpRackTrackAlarms, tlpAtsAlarmLoadOff35=tlpAtsAlarmLoadOff35, tlpPduOutputTable=tlpPduOutputTable, tlpPduDisplayScheme=tlpPduDisplayScheme, tlpPduOutletBank=tlpPduOutletBank, tlpUpsBatteryPackConfigBatteriesPerString=tlpUpsBatteryPackConfigBatteriesPerString, tlpCoolingAlarmSupplyAirSensorFault=tlpCoolingAlarmSupplyAirSensorFault, tlpAtsAlarmLoadOff26=tlpAtsAlarmLoadOff26, tlpCoolingAlarmSupplyAirTempHigh=tlpCoolingAlarmSupplyAirTempHigh, tlpUpsInput=tlpUpsInput, tlpUpsBypassFrequency=tlpUpsBypassFrequency, tlpPduAlarmLoadsNotAllOn=tlpPduAlarmLoadsNotAllOn, tlpPduAlarmLoadOff32=tlpPduAlarmLoadOff32, tlpUpsConfigAudibleStatus=tlpUpsConfigAudibleStatus, tlpUpsOutletGroupCommand=tlpUpsOutletGroupCommand, tlpUpsBypassEntry=tlpUpsBypassEntry, tlpUpsDetail=tlpUpsDetail, tlpPduIdentNumPdu=tlpPduIdentNumPdu, tlpAtsInputBadTransferVoltage=tlpAtsInputBadTransferVoltage, tlpUpsBatteryPackDetailTemperatureC=tlpUpsBatteryPackDetailTemperatureC, tlpPduControlEntry=tlpPduControlEntry, tlpPduDeviceMainLoadCommand=tlpPduDeviceMainLoadCommand, tlpUpsAlarms=tlpUpsAlarms, tlpPduSupportsTable=tlpPduSupportsTable, tlpPduHeatsinkTemperatureC=tlpPduHeatsinkTemperatureC, tlpNotifySystemShutdown=tlpNotifySystemShutdown, tlpUpsAlarmInverterUnderVoltage=tlpUpsAlarmInverterUnderVoltage, tlpUpsOutletGroupIndex=tlpUpsOutletGroupIndex, tlpAtsConfigSource1ReturnTime=tlpAtsConfigSource1ReturnTime, tlpUpsBatteryPackIdentFirmware=tlpUpsBatteryPackIdentFirmware, tlpUpsOutletRampAction=tlpUpsOutletRampAction, tlpPduIdentNumCircuits=tlpPduIdentNumCircuits, tlpAtsConfigAutoRampOnTransition=tlpAtsConfigAutoRampOnTransition, tlpCoolingIdentNumCooling=tlpCoolingIdentNumCooling, tlpAgentContacts=tlpAgentContacts, tlpUpsSupportsEnergywise=tlpUpsSupportsEnergywise, tlpAgentAttributesAutostartHTTP=tlpAgentAttributesAutostartHTTP, tlpUpsSupportsTable=tlpUpsSupportsTable, tlpUpsInputPhaseVoltageMin=tlpUpsInputPhaseVoltageMin, tlpUpsWatchdogSecsBeforeReboot=tlpUpsWatchdogSecsBeforeReboot, tlpAgentEmailContactName=tlpAgentEmailContactName, tlpEnvTemperatureC=tlpEnvTemperatureC, tlpAgentAttributesSNMPTrapPort=tlpAgentAttributesSNMPTrapPort, tlpAtsAlarmLoadOff21=tlpAtsAlarmLoadOff21, tlpEnvOutputContactIndex=tlpEnvOutputContactIndex, tlpEnvIdentHumiditySupported=tlpEnvIdentHumiditySupported, tlpUpsAlarmShutdownImminent=tlpUpsAlarmShutdownImminent, tlpAtsAlarms=tlpAtsAlarms, tlpPduDeviceTable=tlpPduDeviceTable, tlpAtsOutputCurrentMax=tlpAtsOutputCurrentMax, tlpUpsConfigAutoBatteryTest=tlpUpsConfigAutoBatteryTest, tlpAtsAlarmLoadOff12=tlpAtsAlarmLoadOff12, tlpEnvAlarmOutputContact01=tlpEnvAlarmOutputContact01, tlpPduAlarmLoadOff29=tlpPduAlarmLoadOff29, tlpUpsInputPhaseCurrent=tlpUpsInputPhaseCurrent, tlpEnvTemperatureLowLimit=tlpEnvTemperatureLowLimit, tlpAtsCircuitPhase=tlpAtsCircuitPhase, tlpAtsConfigHighVoltageTransfer=tlpAtsConfigHighVoltageTransfer, tlpPduAlarmLoadOff22=tlpPduAlarmLoadOff22, tlpAts=tlpAts, tlpPduAlarms=tlpPduAlarms, tlpAgentAttributesAutostartFTP=tlpAgentAttributesAutostartFTP, tlpSwitchIdent=tlpSwitchIdent, tlpUpsAlarmShutdownPending=tlpUpsAlarmShutdownPending, tlpUpsEstimatedChargeRemaining=tlpUpsEstimatedChargeRemaining, tlpUpsInputPhaseEntry=tlpUpsInputPhaseEntry, tlpUpsInputPhaseIndex=tlpUpsInputPhaseIndex, tlpAtsOutletName=tlpAtsOutletName, tlpUpsInputHighTransferVoltageLowerBound=tlpUpsInputHighTransferVoltageLowerBound, tlpUpsBatterySummaryTable=tlpUpsBatterySummaryTable, tlpAtsConfigSource1BrownoutSet=tlpAtsConfigSource1BrownoutSet, tlpUpsOutputTable=tlpUpsOutputTable, tlpPduIdentNumInputs=tlpPduIdentNumInputs, tlpEnvInputContactTable=tlpEnvInputContactTable, tlpPduAlarmLoadOff12=tlpPduAlarmLoadOff12, tlpPduAlarmCircuitBreakerOpen03=tlpPduAlarmCircuitBreakerOpen03, tlpAgentAttributesSNMPPort=tlpAgentAttributesSNMPPort, tlpUpsAlarmLoadOff35=tlpUpsAlarmLoadOff35, tlpPduDeviceMainLoadState=tlpPduDeviceMainLoadState, tlpAgentAttributesAutostartTelnetMenu=tlpAgentAttributesAutostartTelnetMenu, tlpAlarmUserDefined01=tlpAlarmUserDefined01, tlpUpsControlShed=tlpUpsControlShed, tlpAtsControlAtsOn=tlpAtsControlAtsOn, tlpUpsBatteryPackDetailCycleCount=tlpUpsBatteryPackDetailCycleCount, tlpPduInputHighTransferVoltage=tlpPduInputHighTransferVoltage, tlpAlarmEntry=tlpAlarmEntry, tlpPduAlarmCircuitBreakerOpen=tlpPduAlarmCircuitBreakerOpen, tlpUpsOutputLinePercentLoad=tlpUpsOutputLinePercentLoad, tlpUpsDevice=tlpUpsDevice, tlpPduAlarmCurrentAboveThreshold2=tlpPduAlarmCurrentAboveThreshold2, tlpUpsAlarmLoadOff10=tlpUpsAlarmLoadOff10, tlpEnvInputContactName=tlpEnvInputContactName, tlpUpsOutletGroupName=tlpUpsOutletGroupName, tlpAtsConfigOverTemperatureThreshold=tlpAtsConfigOverTemperatureThreshold, tlpAtsAlarmLoadsNotAllOn=tlpAtsAlarmLoadsNotAllOn, tlpPduAlarmLoadOff23=tlpPduAlarmLoadOff23, tlpAtsAlarmLoadOff34=tlpAtsAlarmLoadOff34, tlpAtsOutputCurrent=tlpAtsOutputCurrent, tlpCoolingAlarmDischargePressurePersistentHigh=tlpCoolingAlarmDischargePressurePersistentHigh, tlpRackTrackDevice=tlpRackTrackDevice, tlpEnvTemperatureInAlarm=tlpEnvTemperatureInAlarm, tlpAtsAlarmLoadOff31=tlpAtsAlarmLoadOff31, tlpUpsOutletShedAction=tlpUpsOutletShedAction, tlpAtsAlarmLoadOff29=tlpAtsAlarmLoadOff29, tlpAgentSnmpContactSnmpVersion=tlpAgentSnmpContactSnmpVersion, tlpEnvTemperatureHighLimit=tlpEnvTemperatureHighLimit, tlpPduIdentNumPhases=tlpPduIdentNumPhases, tlpAlarmUserDefined02=tlpAlarmUserDefined02, tlpAtsAlarmCurrentAboveThresholdB2=tlpAtsAlarmCurrentAboveThresholdB2, tlpAtsAlarmLoadOff27=tlpAtsAlarmLoadOff27, tlpPduIdentNumHeatsinks=tlpPduIdentNumHeatsinks, tlpUpsAlarmLoadLevelAboveThresholdPhase3=tlpUpsAlarmLoadLevelAboveThresholdPhase3, tlpUpsBatteryPackConfigMaxCellVoltage=tlpUpsBatteryPackConfigMaxCellVoltage, tlpAtsAlarmOutage=tlpAtsAlarmOutage, tlpPduHeatsinkTemperatureF=tlpPduHeatsinkTemperatureF, tlpUpsAlarmLoadOff33=tlpUpsAlarmLoadOff33, tlpAtsIdentNumHeatsinks=tlpAtsIdentNumHeatsinks, tlpAtsConfigSourceBrownoutSetMinimum=tlpAtsConfigSourceBrownoutSetMinimum, tlpCoolingAlarmCondenserOutletAirSensorFault=tlpCoolingAlarmCondenserOutletAirSensorFault, tlpPduInputPhaseVoltage=tlpPduInputPhaseVoltage, tlpAtsDevicePowerOnDelay=tlpAtsDevicePowerOnDelay, tlpAgentAttributesTelnetCLIPort=tlpAgentAttributesTelnetCLIPort, tlpUpsBatteryPackConfigLocation=tlpUpsBatteryPackConfigLocation, tlpUpsAlarmLoadLevelAboveThresholdPhase1=tlpUpsAlarmLoadLevelAboveThresholdPhase1, tlpUpsAlarmOutputOverload=tlpUpsAlarmOutputOverload, tlpPduAlarmCurrentAboveThreshold=tlpPduAlarmCurrentAboveThreshold, tlpUpsAlarmBusVoltageUnbalanced=tlpUpsAlarmBusVoltageUnbalanced, tlpUpsInputTable=tlpUpsInputTable, tlpPduOutletGroupState=tlpPduOutletGroupState, tlpUpsIdentEntry=tlpUpsIdentEntry, tlpAgentVersion=tlpAgentVersion, tlpUpsAlarmLoadOff37=tlpUpsAlarmLoadOff37, tlpAlarmControlTable=tlpAlarmControlTable, tlpUpsAlarmLoadOff02=tlpUpsAlarmLoadOff02, tlpPduAlarmOutputBad=tlpPduAlarmOutputBad, tlpCoolingAlarmPressureGaugeFailure=tlpCoolingAlarmPressureGaugeFailure, tlpCoolingAlarms=tlpCoolingAlarms, tlpDeviceModel=tlpDeviceModel, tlpPduDisplayEntry=tlpPduDisplayEntry, tlpAtsDisplayAutoScroll=tlpAtsDisplayAutoScroll, tlpPduCircuitUtilization=tlpPduCircuitUtilization, tlpAgentAttributesSnmp=tlpAgentAttributesSnmp, tlpPduAlarmLoadOff04=tlpPduAlarmLoadOff04, tlpAtsAlarmSource1Outage=tlpAtsAlarmSource1Outage, tlpUpsOutputLineIndex=tlpUpsOutputLineIndex, tlpAtsControlRamp=tlpAtsControlRamp, tlpAgentAttributesTelnetMenuPort=tlpAgentAttributesTelnetMenuPort, tlpDevice=tlpDevice, tlpPduDeviceOutputPowerTotal=tlpPduDeviceOutputPowerTotal, tlpUpsAlarmFuseFailure=tlpUpsAlarmFuseFailure, tlpPduAlarmCurrentAboveThreshold3=tlpPduAlarmCurrentAboveThreshold3, tlpAtsConfigLowVoltageReset=tlpAtsConfigLowVoltageReset, tlpAtsInput=tlpAtsInput, tlpUpsAlarmBatteryUnderVoltage=tlpUpsAlarmBatteryUnderVoltage, tlpAtsIdentNumOutlets=tlpAtsIdentNumOutlets, tlpUpsBattery=tlpUpsBattery, tlpAtsConfigHighVoltageReset=tlpAtsConfigHighVoltageReset, tlpAgentAttributesSupports=tlpAgentAttributesSupports, tlpUpsBatteryPackConfigCellCapacity=tlpUpsBatteryPackConfigCellCapacity, tlpAgentAttributesSupportsSNMPTrap=tlpAgentAttributesSupportsSNMPTrap, tlpPduAlarmLoadOff08=tlpPduAlarmLoadOff08, tlpAtsControlAtsReboot=tlpAtsControlAtsReboot, tlpDeviceIdentTable=tlpDeviceIdentTable, tlpAlarmUserDefined06=tlpAlarmUserDefined06, tlpUpsDeviceTemperatureC=tlpUpsDeviceTemperatureC, tlpPduAlarmCircuitBreakerOpen01=tlpPduAlarmCircuitBreakerOpen01, tlpAtsOutletControllable=tlpAtsOutletControllable, tlpPduAlarmLoadOff39=tlpPduAlarmLoadOff39, tlpPduOutletGroupDescription=tlpPduOutletGroupDescription, tlpUpsAlarmLoadLevelAboveThresholdTotal=tlpUpsAlarmLoadLevelAboveThresholdTotal, tlpAtsOutletCircuit=tlpAtsOutletCircuit, tlpEnvHumidityLowLimit=tlpEnvHumidityLowLimit, tlpAgentAttributesSupportsSSHMenu=tlpAgentAttributesSupportsSSHMenu, tlpAtsCircuitIndex=tlpAtsCircuitIndex, tlpUpsOutletRampDelay=tlpUpsOutletRampDelay, tlpAgentAttributesSNMPv2cEnabled=tlpAgentAttributesSNMPv2cEnabled, tlpPduAlarmLoadOff20=tlpPduAlarmLoadOff20, tlpAtsOutletGroupRowStatus=tlpAtsOutletGroupRowStatus, tlpAgentSnmpContactSecurityName=tlpAgentSnmpContactSecurityName, tlpCoolingAlarmInverterCommunicationsFault=tlpCoolingAlarmInverterCommunicationsFault, tlpUpsOutputLineTable=tlpUpsOutputLineTable, tlpUpsOutletGroupState=tlpUpsOutletGroupState, tlpAtsControlTable=tlpAtsControlTable, tlpUpsAlarmInputBad=tlpUpsAlarmInputBad, tlpUpsOutletDescription=tlpUpsOutletDescription, tlpUpsControlBypass=tlpUpsControlBypass, tlpAtsOutputPowerFactor=tlpAtsOutputPowerFactor, tlpAtsAlarmCircuitBreakerOpen=tlpAtsAlarmCircuitBreakerOpen, tlpUpsBatteryPackIdentSerialNum=tlpUpsBatteryPackIdentSerialNum, tlpAtsInputSourceAvailability=tlpAtsInputSourceAvailability, tlpUpsInputLowTransferVoltage=tlpUpsInputLowTransferVoltage, tlpEnvAlarmOutputContact04=tlpEnvAlarmOutputContact04, tlpAtsInputHighTransferVoltageLowerBound=tlpAtsInputHighTransferVoltageLowerBound, tlpAtsOutletCurrent=tlpAtsOutletCurrent, tlpUpsBatteryStatus=tlpUpsBatteryStatus, tlpUpsInputPhasePower=tlpUpsInputPhasePower, tlpUpsOutletGroup=tlpUpsOutletGroup, tlpAgentAttributesHTTPSPort=tlpAgentAttributesHTTPSPort, tlpUpsAlarmBatteryBad=tlpUpsAlarmBatteryBad, tlpEnvInputContactCurrentState=tlpEnvInputContactCurrentState, tlpUpsAlarmLoadOff11=tlpUpsAlarmLoadOff11, tlpUpsAlarmLoadOff30=tlpUpsAlarmLoadOff30, tlpUpsAlarmLoadOff29=tlpUpsAlarmLoadOff29, tlpUpsConfigInputFrequency=tlpUpsConfigInputFrequency, tlpAtsAlarmLoadOff02=tlpAtsAlarmLoadOff02)
mibBuilder.exportSymbols("TRIPPLITE-PRODUCTS", tlpUpsAlarmBatteryOverVoltage=tlpUpsAlarmBatteryOverVoltage, tlpAtsOutletGroupState=tlpAtsOutletGroupState, tlpAtsHeatsinkTable=tlpAtsHeatsinkTable, tlpUpsAlarmGeneralFault=tlpUpsAlarmGeneralFault, tlpUpsAlarmLoadOff=tlpUpsAlarmLoadOff, tlpAtsAlarmCurrentAboveThresholdB1=tlpAtsAlarmCurrentAboveThresholdB1, tlpUpsConfigBatteryAgeThreshold=tlpUpsConfigBatteryAgeThreshold, tlpAtsDeviceGeneralFault=tlpAtsDeviceGeneralFault, tlpPduHeatsinkIndex=tlpPduHeatsinkIndex, tlpUpsBatteryPackConfigTable=tlpUpsBatteryPackConfigTable, tlpAgentSnmpContactRowStatus=tlpAgentSnmpContactRowStatus, tlpUpsInputPhaseVoltageMax=tlpUpsInputPhaseVoltageMax, tlpUpsAlarmLoadsNotAllOn=tlpUpsAlarmLoadsNotAllOn, tlpAtsOutletDescription=tlpAtsOutletDescription, tlpAtsAlarmLoadOff33=tlpAtsAlarmLoadOff33, tlpAgentEmailContactAddress=tlpAgentEmailContactAddress, tlpCoolingAlarmCondensatePumpFault=tlpCoolingAlarmCondensatePumpFault, tlpPduAlarmLoadOff35=tlpPduAlarmLoadOff35, tlpAtsConfigLowVoltageTransfer=tlpAtsConfigLowVoltageTransfer, tlpPduInputPhasePhaseType=tlpPduInputPhasePhaseType, tlpAgentType=tlpAgentType, tlpAgentUuid=tlpAgentUuid, tlpUpsDeviceTemperatureF=tlpUpsDeviceTemperatureF, tlpUpsBatteryPackConfigMinCellVoltage=tlpUpsBatteryPackConfigMinCellVoltage, tlpUpsOutputLineFrequency=tlpUpsOutputLineFrequency, tlpAgentDriverVersion=tlpAgentDriverVersion, tlpPduAlarmLoadOff33=tlpPduAlarmLoadOff33, tlpUpsSupportsOutletCurrentPower=tlpUpsSupportsOutletCurrentPower, tlpAgentAttributesAutostartSSHMenu=tlpAgentAttributesAutostartSSHMenu, tlpPduOutletGroup=tlpPduOutletGroup, tlpAtsConfigOverLoadThreshold=tlpAtsConfigOverLoadThreshold, tlpPduInputPhaseCurrent=tlpPduInputPhaseCurrent, tlpUpsConfigAutoRestartTable=tlpUpsConfigAutoRestartTable, tlpAlarmAcknowledged=tlpAlarmAcknowledged, tlpPduOutletShedAction=tlpPduOutletShedAction, tlpUpsAlarmCurrentAboveThreshold=tlpUpsAlarmCurrentAboveThreshold, tlpPduOutletRampDelay=tlpPduOutletRampDelay, tlpAtsAlarmLoadOff07=tlpAtsAlarmLoadOff07, tlpEnvIdentTable=tlpEnvIdentTable, tlpCoolingIdent=tlpCoolingIdent, tlpDeviceIndex=tlpDeviceIndex, tlpEnvHumidityInAlarm=tlpEnvHumidityInAlarm, tlpEnvOutputContactTable=tlpEnvOutputContactTable, tlpUpsWatchdogSupported=tlpUpsWatchdogSupported, tlpUpsWatchdog=tlpUpsWatchdog, tlpDeviceIdentCommPortName=tlpDeviceIdentCommPortName, tlpAtsAlarmSource2Temperature=tlpAtsAlarmSource2Temperature, tlpUpsBatteryDetailCapacity=tlpUpsBatteryDetailCapacity, tlpAtsOutletGroupEntry=tlpAtsOutletGroupEntry, tlpUpsAlarmLoadOff12=tlpUpsAlarmLoadOff12, tlpPduConfigTable=tlpPduConfigTable, tlpAgentAttributesSSHMenuPort=tlpAgentAttributesSSHMenuPort, tlpAtsAlarmLoadOff14=tlpAtsAlarmLoadOff14, tlpCoolingAlarmSuctionPressurePersistentLow=tlpCoolingAlarmSuctionPressurePersistentLow, tlpPduOutputEntry=tlpPduOutputEntry, tlpDeviceTable=tlpDeviceTable, tlpAtsAlarmLoadOff23=tlpAtsAlarmLoadOff23, tlpPduIdent=tlpPduIdent, tlpRackTrackControl=tlpRackTrackControl, tlpUpsInputPhaseTable=tlpUpsInputPhaseTable, tlpKvmIdentNumKvm=tlpKvmIdentNumKvm, tlpEnvAlarmInputContact01=tlpEnvAlarmInputContact01, tlpPduCircuitTable=tlpPduCircuitTable, tlpAtsOutletRampAction=tlpAtsOutletRampAction, tlpAtsCircuitInputVoltage=tlpAtsCircuitInputVoltage, tlpAtsInputHighTransferVoltage=tlpAtsInputHighTransferVoltage, tlpAgentAttributesHTTPPort=tlpAgentAttributesHTTPPort, tlpPduBreakerStatus=tlpPduBreakerStatus, tlpPduInput=tlpPduInput, tlpAgentNumEmailContacts=tlpAgentNumEmailContacts, tlpAtsDisplayOrientation=tlpAtsDisplayOrientation, tlpPduAlarmLoadOff06=tlpPduAlarmLoadOff06, tlpUpsOutputEntry=tlpUpsOutputEntry, tlpPduOutletEntry=tlpPduOutletEntry, tlpUpsBatteryRunTimeRemaining=tlpUpsBatteryRunTimeRemaining, tlpPduOutputCurrentMin=tlpPduOutputCurrentMin, tlpPduOutletGroupRowStatus=tlpPduOutletGroupRowStatus, tlpAtsOutletPhase=tlpAtsOutletPhase, tlpUpsAlarmBusUnderVoltage=tlpUpsAlarmBusUnderVoltage, tlpUpsConfigOutputFrequency=tlpUpsConfigOutputFrequency, tlpPduAlarmOutputOff=tlpPduAlarmOutputOff, tlpAtsAlarmSource2OverVoltage=tlpAtsAlarmSource2OverVoltage, tlpUpsControlUpsOn=tlpUpsControlUpsOn, tlpAlarmControlSeverity=tlpAlarmControlSeverity, tlpCoolingAlarmPowerButtonPressed=tlpCoolingAlarmPowerButtonPressed, tlpPduCircuitCurrentMax=tlpPduCircuitCurrentMax, tlpUpsOutletGroupEntry=tlpUpsOutletGroupEntry, tlpPduOutput=tlpPduOutput, tlpDeviceIdentCurrentUptime=tlpDeviceIdentCurrentUptime, tlpUpsAlarmEPOActive=tlpUpsAlarmEPOActive, tlpPduOutletControllable=tlpPduOutletControllable, tlpKvmDevice=tlpKvmDevice, tlpDeviceIdentCommPortType=tlpDeviceIdentCommPortType, tlpPduInputNominalVoltagePhaseToNeutral=tlpPduInputNominalVoltagePhaseToNeutral, tlpNotify=tlpNotify, tlpUpsAlarmLoadOff06=tlpUpsAlarmLoadOff06, tlpPduInputLowTransferVoltageUpperBound=tlpPduInputLowTransferVoltageUpperBound, tlpAtsInputSourceTransitionCount=tlpAtsInputSourceTransitionCount, tlpPduOutletGroupTable=tlpPduOutletGroupTable, tlpUpsBatteryDetailTable=tlpUpsBatteryDetailTable, tlpUpsOutletEntry=tlpUpsOutletEntry, tlpAtsConfigSourceSelect=tlpAtsConfigSourceSelect, tlpUpsOutlet=tlpUpsOutlet, tlpPduCircuitPhase=tlpPduCircuitPhase, tlpAtsConfigSource1TransferReset=tlpAtsConfigSource1TransferReset, tlpPduAlarmCircuitBreakerOpen02=tlpPduAlarmCircuitBreakerOpen02, tlpEnvAlarmOutputContact03=tlpEnvAlarmOutputContact03, tlpPduOutputPhaseType=tlpPduOutputPhaseType, tlpAlarmUserDefined08=tlpAlarmUserDefined08, tlpEnvHumidityHumidity=tlpEnvHumidityHumidity, tlpAtsOutputVoltage=tlpAtsOutputVoltage, tlpPduDeviceMainLoadControllable=tlpPduDeviceMainLoadControllable, tlpAtsHeatsinkTemperatureC=tlpAtsHeatsinkTemperatureC, tlpAtsInputPhaseCurrent=tlpAtsInputPhaseCurrent, tlpPduIdentNumOutputs=tlpPduIdentNumOutputs, tlpUpsAlarmLoadOff24=tlpUpsAlarmLoadOff24, tlpPduAlarmLoadOff05=tlpPduAlarmLoadOff05, tlpDeviceIdentHardwareVersion=tlpDeviceIdentHardwareVersion, tlpCoolingAlarmFanOverCurrent=tlpCoolingAlarmFanOverCurrent, tlpPduOutletDescription=tlpPduOutletDescription, tlpEnvIdent=tlpEnvIdent, tlpCoolingAlarmCondenserInletAirSensorFault=tlpCoolingAlarmCondenserInletAirSensorFault, tlpUpsInputHighTransferVoltage=tlpUpsInputHighTransferVoltage, tlpAtsControlEntry=tlpAtsControlEntry, tlpUpsControlSelfTest=tlpUpsControlSelfTest, tlpUpsBatteryPackIdentIndex=tlpUpsBatteryPackIdentIndex, tlpPduControlPduOn=tlpPduControlPduOn, tlpEnvNumOutputContacts=tlpEnvNumOutputContacts, tlpAtsControlAtsOff=tlpAtsControlAtsOff, tlpAgentSnmpContactPort=tlpAgentSnmpContactPort, tlpPduHeatsinkStatus=tlpPduHeatsinkStatus, tlpPduDisplayTable=tlpPduDisplayTable, tlpPduOutputSource=tlpPduOutputSource, tlpAtsHeatsinkIndex=tlpAtsHeatsinkIndex, tlpAgentSnmpContactName=tlpAgentSnmpContactName, tlpUpsBatteryPackDetailTemperatureF=tlpUpsBatteryPackDetailTemperatureF, tlpUpsAlarmLoadOff25=tlpUpsAlarmLoadOff25, tlpUpsConfigAutoRestartDelayedWakeup=tlpUpsConfigAutoRestartDelayedWakeup, tlpPduCircuitTotalCurrent=tlpPduCircuitTotalCurrent, tlpAgentConfig=tlpAgentConfig, tlpUpsConfigEconomicMode=tlpUpsConfigEconomicMode, tlpAtsInputEntry=tlpAtsInputEntry, tlpUpsAlarmLoadOff26=tlpUpsAlarmLoadOff26, tlpAtsAlarmLoadOff24=tlpAtsAlarmLoadOff24, tlpPduInputPhaseEntry=tlpPduInputPhaseEntry, tlpAgentIdent=tlpAgentIdent, tlpCoolingAlarmLowRefrigerantStartupFault=tlpCoolingAlarmLowRefrigerantStartupFault, tlpSwitchConfig=tlpSwitchConfig, tlpSwitchDevice=tlpSwitchDevice, tlpUpsBatteryPackIdentSKU=tlpUpsBatteryPackIdentSKU, tlpPduDisplayUnits=tlpPduDisplayUnits, tlpUpsConfigLowBatteryTime=tlpUpsConfigLowBatteryTime, tlpUpsIdentNumBypass=tlpUpsIdentNumBypass, tlpUpsControlRamp=tlpUpsControlRamp, tlpAtsCircuitUtilization=tlpAtsCircuitUtilization, tlpAgentAttributesAutostartSSHCLI=tlpAgentAttributesAutostartSSHCLI, tlpUpsAlarmExternalNonSmartBatteryAgeAboveThreshold=tlpUpsAlarmExternalNonSmartBatteryAgeAboveThreshold, tlpRackTrackConfig=tlpRackTrackConfig, tlpPduAlarmLoadOff09=tlpPduAlarmLoadOff09, tlpAtsAlarmOutputOff=tlpAtsAlarmOutputOff, tlpEnvInputContactNormalState=tlpEnvInputContactNormalState, tlpUpsOutletState=tlpUpsOutletState, tlpHardware=tlpHardware, tlpAtsConfigSourceTransferSetMaximum=tlpAtsConfigSourceTransferSetMaximum, tlpEnvAlarmOutputContact=tlpEnvAlarmOutputContact, tlpUpsAlarmCurrentAboveThreshold1=tlpUpsAlarmCurrentAboveThreshold1, tlpAtsAlarmOutputOverload=tlpAtsAlarmOutputOverload, tlpUpsAlarmSiteWiringFault=tlpUpsAlarmSiteWiringFault, tlpCoolingAlarmEvaporatorFreezeUp=tlpCoolingAlarmEvaporatorFreezeUp, tlpDeviceNumDevices=tlpDeviceNumDevices, tlpPduAlarmLoadOff26=tlpPduAlarmLoadOff26, tlpUpsAlarmLoadOff32=tlpUpsAlarmLoadOff32, tlpAtsAlarmSource2InvalidFrequency=tlpAtsAlarmSource2InvalidFrequency, tlpKvmAlarms=tlpKvmAlarms, tlpUpsOutletIndex=tlpUpsOutletIndex, tlpAtsConfigTable=tlpAtsConfigTable, tlpAgentAttributesSupportsTelnetCLI=tlpAgentAttributesSupportsTelnetCLI, tlpCoolingAlarmEvaporatorTemperatureSensorFault=tlpCoolingAlarmEvaporatorTemperatureSensorFault, tlpUpsConfigFaultAction=tlpUpsConfigFaultAction, tlpUpsBypassLineEntry=tlpUpsBypassLineEntry, tlpPduConfig=tlpPduConfig, tlpEnvTemperatureEntry=tlpEnvTemperatureEntry, tlpAgentAttributesSupportsTelnetMenu=tlpAgentAttributesSupportsTelnetMenu, tlpAlarmType=tlpAlarmType, tlpPduIdentNumBreakers=tlpPduIdentNumBreakers, tlpAlarms=tlpAlarms, tlpPduCircuitInputVoltage=tlpPduCircuitInputVoltage, tlpAgentSerialNum=tlpAgentSerialNum, tlpPduAlarmLoadOff31=tlpPduAlarmLoadOff31, tlpAtsAlarmOverVoltage=tlpAtsAlarmOverVoltage, tlpAtsOutletCommand=tlpAtsOutletCommand, tlpNotificationsAlarmEntryRemoved=tlpNotificationsAlarmEntryRemoved, tlpAlarmDescr=tlpAlarmDescr, tlpAtsConfig=tlpAtsConfig, tlpAlarmControlIndex=tlpAlarmControlIndex, tlpAtsDisplayEntry=tlpAtsDisplayEntry, tlpPduBreakerTable=tlpPduBreakerTable, tlpAtsCircuitPowerFactor=tlpAtsCircuitPowerFactor, tlpAtsCircuitTable=tlpAtsCircuitTable, tlpCoolingControl=tlpCoolingControl, tlpAtsInputPhaseType=tlpAtsInputPhaseType, tlpDeviceIdentProtocol=tlpDeviceIdentProtocol, tlpAtsAlarmSystemTemperature=tlpAtsAlarmSystemTemperature, tlpAtsAlarmLoadOff09=tlpAtsAlarmLoadOff09, tlpEnvHumidityTable=tlpEnvHumidityTable, tlpAtsOutletState=tlpAtsOutletState, tlpAtsAlarmCurrentAboveThresholdA1=tlpAtsAlarmCurrentAboveThresholdA1, tlpAgentAttributesFTPPort=tlpAgentAttributesFTPPort, tlpUpsAlarmLoadOff07=tlpUpsAlarmLoadOff07, tlpPduAlarmCurrentAboveThreshold1=tlpPduAlarmCurrentAboveThreshold1, tlpUpsConfigAutoRestartInverterShutdown=tlpUpsConfigAutoRestartInverterShutdown, tlpUpsConfigAutoRestartOverTemperature=tlpUpsConfigAutoRestartOverTemperature, tlpAtsInputTable=tlpAtsInputTable, tlpSwitchIdentNumSwitch=tlpSwitchIdentNumSwitch, tlpAtsAlarmLoadOff39=tlpAtsAlarmLoadOff39, tlpAtsOutletVoltage=tlpAtsOutletVoltage, tlpPduControlShed=tlpPduControlShed, tlpAtsAlarmTemperature=tlpAtsAlarmTemperature, tlpUpsAlarmDiagnosticTestFailed=tlpUpsAlarmDiagnosticTestFailed, tlpDeviceRegion=tlpDeviceRegion, tlpAlarmState=tlpAlarmState, tlpUpsAlarmLoadOff17=tlpUpsAlarmLoadOff17, tlpEnvOutputContactCurrentState=tlpEnvOutputContactCurrentState, tlpPduOutletCommand=tlpPduOutletCommand, tlpAtsDeviceMainLoadState=tlpAtsDeviceMainLoadState, tlpPduInputPhaseFrequency=tlpPduInputPhaseFrequency, tlpUpsAlarmLoadOff20=tlpUpsAlarmLoadOff20, tlpAgentAttributesAutostartTelnetCLI=tlpAgentAttributesAutostartTelnetCLI, tlpUpsConfigBypassUpperLimitPercent=tlpUpsConfigBypassUpperLimitPercent, tlpEnvAlarmInputContact03=tlpEnvAlarmInputContact03, tlpUpsAlarmInverterOverVoltage=tlpUpsAlarmInverterOverVoltage, tlpUpsBypassLineTable=tlpUpsBypassLineTable, tlpUpsOutletGroupRowStatus=tlpUpsOutletGroupRowStatus, tlpAtsAlarmLoadOff30=tlpAtsAlarmLoadOff30, tlpEnvConfig=tlpEnvConfig, tlpKvmControl=tlpKvmControl, tlpUpsAlarmLoadOff01=tlpUpsAlarmLoadOff01, tlpAtsSupportsEntry=tlpAtsSupportsEntry, tlpAtsSupportsOutletCurrentPower=tlpAtsSupportsOutletCurrentPower, tlpPduAlarmLoadOff07=tlpPduAlarmLoadOff07, tlpAtsControlShed=tlpAtsControlShed, tlpUpsOutputLineVoltage=tlpUpsOutputLineVoltage, tlpPduInputHighTransferVoltageUpperBound=tlpPduInputHighTransferVoltageUpperBound, tlpUpsConfigOffMode=tlpUpsConfigOffMode, tlpPduOutletPower=tlpPduOutletPower, tlpAlarmsWellKnown=tlpAlarmsWellKnown, tlpUpsOutletGroupTable=tlpUpsOutletGroupTable, tlpUpsAlarmLoadOff16=tlpUpsAlarmLoadOff16, tlpUpsConfigBypassLowerLimitVoltage=tlpUpsConfigBypassLowerLimitVoltage, tlpAtsConfigSource2TransferReset=tlpAtsConfigSource2TransferReset, tlpDeviceIdentSerialNum=tlpDeviceIdentSerialNum, tlpPduDeviceTemperatureF=tlpPduDeviceTemperatureF, tlpDeviceID=tlpDeviceID, tlpAtsInputPhaseEntry=tlpAtsInputPhaseEntry)
mibBuilder.exportSymbols("TRIPPLITE-PRODUCTS", tlpPduDisplayOrientation=tlpPduDisplayOrientation, tlpEnvHumidityHighLimit=tlpEnvHumidityHighLimit, tlpAtsAlarmLoadOff22=tlpAtsAlarmLoadOff22, tlpPduOutletName=tlpPduOutletName, tlpAtsAlarmSource1OverVoltage=tlpAtsAlarmSource1OverVoltage, tlpPduOutletVoltage=tlpPduOutletVoltage, tlpPduAlarmLoadOff13=tlpPduAlarmLoadOff13, tlpPduSupportsEntry=tlpPduSupportsEntry, tlpPduAlarmLoadOff28=tlpPduAlarmLoadOff28, tlpUpsBatteryDetailCurrent=tlpUpsBatteryDetailCurrent, tlpAlarmUserDefined03=tlpAlarmUserDefined03, tlpUpsAlarmCurrentAboveThreshold3=tlpUpsAlarmCurrentAboveThreshold3, tlpPduInputLowTransferVoltageLowerBound=tlpPduInputLowTransferVoltageLowerBound, tlpUpsBatteryPackIdentEntry=tlpUpsBatteryPackIdentEntry, tlpDeviceIdentFirmwareVersion=tlpDeviceIdentFirmwareVersion, tlpUpsAlarmSmartBatteryCommLost=tlpUpsAlarmSmartBatteryCommLost, tlpAtsOutput=tlpAtsOutput, tlpPduSupportsOutletVoltage=tlpPduSupportsOutletVoltage, tlpAlarmTableRef=tlpAlarmTableRef, tlpPduAlarmLoadOff34=tlpPduAlarmLoadOff34, tlpPduInputCurrentLimit=tlpPduInputCurrentLimit, tlpDeviceAlarms=tlpDeviceAlarms, tlpUpsAlarmOverTemperatureProtection=tlpUpsAlarmOverTemperatureProtection, tlpAtsAlarmCircuitBreakerOpen03=tlpAtsAlarmCircuitBreakerOpen03, tlpAtsOutputPhase=tlpAtsOutputPhase, tlpEnvAlarmInputContact04=tlpEnvAlarmInputContact04, tlpPduAlarmLoadLevelAboveThreshold=tlpPduAlarmLoadLevelAboveThreshold, tlpUpsOutletTable=tlpUpsOutletTable, tlpUpsConfigAutoShedOnTransition=tlpUpsConfigAutoShedOnTransition, tlpAtsOutputEntry=tlpAtsOutputEntry, tlpAgentAttributesSupportsSSHCLI=tlpAgentAttributesSupportsSSHCLI, tlpAgentAttributesAutostartSNMP=tlpAgentAttributesAutostartSNMP, tlpPduAlarmLoadOff25=tlpPduAlarmLoadOff25, tlpUpsIdentNumOutlets=tlpUpsIdentNumOutlets, tlpAgentAttributesSupportsHTTPS=tlpAgentAttributesSupportsHTTPS, tlpUpsInputLowTransferVoltageUpperBound=tlpUpsInputLowTransferVoltageUpperBound, tlpPduAlarmOutputOverload=tlpPduAlarmOutputOverload, tlpAtsAlarmLoadOff17=tlpAtsAlarmLoadOff17, tlpUpsIdentNumBatteryPacks=tlpUpsIdentNumBatteryPacks, tlpUpsConfigInputVoltage=tlpUpsConfigInputVoltage, tlpAtsConfigSource2BrownoutSet=tlpAtsConfigSource2BrownoutSet, tlpUpsAlarmUpsSystemOff=tlpUpsAlarmUpsSystemOff, tlpEnvOutputContactName=tlpEnvOutputContactName, tlpCoolingAlarmDisconnectedFromDevice=tlpCoolingAlarmDisconnectedFromDevice, tlpUpsIdentNumOutputs=tlpUpsIdentNumOutputs, tlpAtsAlarmLoadOff=tlpAtsAlarmLoadOff, tlpPduAlarmLoadOff14=tlpPduAlarmLoadOff14, tlpAtsControlResetGeneralFault=tlpAtsControlResetGeneralFault, tlpUpsAlarmLoadOff22=tlpUpsAlarmLoadOff22, tlpEnvInputContactInAlarm=tlpEnvInputContactInAlarm, tlpAtsConfigAutoShedOnTransition=tlpAtsConfigAutoShedOnTransition, tlpAlarmControl=tlpAlarmControl, tlpPduCircuitCurrentLimit=tlpPduCircuitCurrentLimit, tlpCoolingAlarmFanUnderCurrent=tlpCoolingAlarmFanUnderCurrent, tlpAtsAlarmLoadOff36=tlpAtsAlarmLoadOff36, tlpUpsBypassLinePower=tlpUpsBypassLinePower, tlpUpsConfigTable=tlpUpsConfigTable, tlpUpsAlarmLoadOff23=tlpUpsAlarmLoadOff23, tlpPduOutputCurrentMax=tlpPduOutputCurrentMax, tlpUpsAlarmLoadOff34=tlpUpsAlarmLoadOff34, tlpAtsOutletBank=tlpAtsOutletBank, tlpAlarmDetail=tlpAlarmDetail, tlpAtsBreakerEntry=tlpAtsBreakerEntry, tlpSwitchAlarms=tlpSwitchAlarms, tlpAtsAlarmCircuitBreakerOpen01=tlpAtsAlarmCircuitBreakerOpen01, tlpAtsInputPhaseFrequency=tlpAtsInputPhaseFrequency, tlpUpsInputLineBads=tlpUpsInputLineBads, tlpAtsInputPhaseIndex=tlpAtsInputPhaseIndex, tlpAgentSnmpContactIpAddress=tlpAgentSnmpContactIpAddress, tlpAlarmTable=tlpAlarmTable, tlpUpsBatteryPackConfigStyle=tlpUpsBatteryPackConfigStyle, tlpAtsAlarmLoadOff05=tlpAtsAlarmLoadOff05, tlpUpsBatteryDetailVoltage=tlpUpsBatteryDetailVoltage, tlpUpsAlarmBusStartVoltageLow=tlpUpsAlarmBusStartVoltageLow, tlpCooling=tlpCooling, tlpAgentConfigCurrentTime=tlpAgentConfigCurrentTime, tlpPduOutputIndex=tlpPduOutputIndex, tlpAtsAlarmLoadOff06=tlpAtsAlarmLoadOff06, tlpCoolingAlarmWaterFull=tlpCoolingAlarmWaterFull, tlpDeviceEntry=tlpDeviceEntry, tlpUpsDeviceMainLoadCommand=tlpUpsDeviceMainLoadCommand, tlpUpsAlarmLoadOff14=tlpUpsAlarmLoadOff14, tlpDeviceDetail=tlpDeviceDetail, tlpEnvOutputContactInAlarm=tlpEnvOutputContactInAlarm, tlpAtsOutputCurrentMin=tlpAtsOutputCurrentMin, tlpAtsAlarmFrequency=tlpAtsAlarmFrequency, tlpRackTrack=tlpRackTrack, tlpKvmConfig=tlpKvmConfig, tlpUpsBatteryPackIdentTable=tlpUpsBatteryPackIdentTable, tlpEnvOutputContactNormalState=tlpEnvOutputContactNormalState, tlpAtsAlarmLoadOff03=tlpAtsAlarmLoadOff03, tlpUpsAlarmLoadLevelAboveThreshold=tlpUpsAlarmLoadLevelAboveThreshold, tlpUpsAlarmRuntimeBelowWarningLevel=tlpUpsAlarmRuntimeBelowWarningLevel, tlpDeviceRowStatus=tlpDeviceRowStatus, tlpPduDeviceTemperatureC=tlpPduDeviceTemperatureC, tlpCoolingAlarmCondenserFanFault=tlpCoolingAlarmCondenserFanFault, tlpAtsOutlet=tlpAtsOutlet, tlpAtsConfigVoltageRangeTable=tlpAtsConfigVoltageRangeTable, tlpCoolingConfig=tlpCoolingConfig, tlpAtsAlarmCurrentAboveThresholdB3=tlpAtsAlarmCurrentAboveThresholdB3, tlpAlarmUserDefined07=tlpAlarmUserDefined07, tlpAtsOutletGroupTable=tlpAtsOutletGroupTable, tlpEnvAlarmOutputContact02=tlpEnvAlarmOutputContact02, tlpPduCircuitTotalPower=tlpPduCircuitTotalPower, tlpPduConfigInputVoltage=tlpPduConfigInputVoltage, tlpPduIdentNumOutletGroups=tlpPduIdentNumOutletGroups, tlpCoolingAlarmReturnAirTempHigh=tlpCoolingAlarmReturnAirTempHigh, tlpUpsConfigAutoRestartOverLoad=tlpUpsConfigAutoRestartOverLoad, tlpAgentAttributesSupportsHTTP=tlpAgentAttributesSupportsHTTP, tlpAlarmTime=tlpAlarmTime, tlpUpsBatteryDetailEntry=tlpUpsBatteryDetailEntry, tlpAtsOutletGroupDescription=tlpAtsOutletGroupDescription, tlpUpsBatteryDetailChargerStatus=tlpUpsBatteryDetailChargerStatus, tlpUpsInputLowTransferVoltageLowerBound=tlpUpsInputLowTransferVoltageLowerBound, tlpAlarmControlEntry=tlpAlarmControlEntry, tlpAtsDevice=tlpAtsDevice, tlpPduOutletRampAction=tlpPduOutletRampAction, tlpEnvOutputContactEntry=tlpEnvOutputContactEntry, tlpAtsSupportsOutletVoltage=tlpAtsSupportsOutletVoltage, tlpUpsAlarmLoadOff36=tlpUpsAlarmLoadOff36, tlpAtsDevicePhaseImbalance=tlpAtsDevicePhaseImbalance, tlpUpsOutletControllable=tlpUpsOutletControllable, tlpPduAlarmLoadOff40=tlpPduAlarmLoadOff40, tlpEnvAlarmInputContact=tlpEnvAlarmInputContact, tlpAtsAlarmCircuitBreakerOpen06=tlpAtsAlarmCircuitBreakerOpen06, tlpUpsAlarmLoadOff28=tlpUpsAlarmLoadOff28, tlpPduSupportsOutletCurrentPower=tlpPduSupportsOutletCurrentPower, tlpAgentAttributesSNMPv1Enabled=tlpAgentAttributesSNMPv1Enabled, tlpPduConfigEntry=tlpPduConfigEntry, tlpPduAlarmLoadOff18=tlpPduAlarmLoadOff18, tlpAtsBreakerIndex=tlpAtsBreakerIndex, tlpAtsAlarmCurrentAboveThresholdA3=tlpAtsAlarmCurrentAboveThresholdA3, tlpUpsOutletPower=tlpUpsOutletPower, tlpPduOutletTable=tlpPduOutletTable, tlpAtsConfigSource1TransferSet=tlpAtsConfigSource1TransferSet, tlpPduInputPhaseVoltageMax=tlpPduInputPhaseVoltageMax, tlpPduAlarmLoadOff15=tlpPduAlarmLoadOff15, tlpPduAlarmCircuitBreakerOpen05=tlpPduAlarmCircuitBreakerOpen05, tlpAlarmUserDefined09=tlpAlarmUserDefined09, tlpUpsAlarmBatteryAgeAboveThreshold=tlpUpsAlarmBatteryAgeAboveThreshold, tlpAtsBreakerTable=tlpAtsBreakerTable, tlpAgentSettings=tlpAgentSettings, tlpPduAlarmLoadOff36=tlpPduAlarmLoadOff36, tlpAtsIdentNumOutputs=tlpAtsIdentNumOutputs, tlpUpsConfigColdStart=tlpUpsConfigColdStart, tlpKvm=tlpKvm, tlpUpsAlarmLoadOff09=tlpUpsAlarmLoadOff09, tlpAtsAlarmSource1InvalidFrequency=tlpAtsAlarmSource1InvalidFrequency, tlpAtsDeviceTotalInputPowerRating=tlpAtsDeviceTotalInputPowerRating, tlpAtsDeviceTable=tlpAtsDeviceTable, tlpUpsOutletShedDelay=tlpUpsOutletShedDelay, tlpPduBreakerIndex=tlpPduBreakerIndex, tlpAtsConfigInputVoltage=tlpAtsConfigInputVoltage, tlpAgentConfigRemoteRegistration=tlpAgentConfigRemoteRegistration, tlpUpsAlarmOverCharged=tlpUpsAlarmOverCharged, tlpUpsAlarmLoadOff04=tlpUpsAlarmLoadOff04, tlpUpsBatteryPackDetailAge=tlpUpsBatteryPackDetailAge, tlpProducts=tlpProducts, tlpAtsIdentNumCircuits=tlpAtsIdentNumCircuits, tlpPduInputPhaseTable=tlpPduInputPhaseTable, tlpUpsEstimatedMinutesRemaining=tlpUpsEstimatedMinutesRemaining, tlpCoolingAlarmSuctionPressureLow=tlpCoolingAlarmSuctionPressureLow, tlpAtsOutletGroupName=tlpAtsOutletGroupName, tlpUpsAlarmBypassFrequencyBad=tlpUpsAlarmBypassFrequencyBad, tlpAtsOutputIndex=tlpAtsOutputIndex, tlpAtsHeatsinkStatus=tlpAtsHeatsinkStatus, tlpRackTrackIdentNumRackTrack=tlpRackTrackIdentNumRackTrack, tlpUpsAlarmLoadOff31=tlpUpsAlarmLoadOff31, tlpAtsAlarmLoadOff38=tlpAtsAlarmLoadOff38, tlpAtsAlarmCurrentAboveThreshold=tlpAtsAlarmCurrentAboveThreshold, tlpUpsAlarmLoadOff38=tlpUpsAlarmLoadOff38, tlpCoolingAlarmRemoteShutdownViaInputContact=tlpCoolingAlarmRemoteShutdownViaInputContact, tlpAtsOutletGroupCommand=tlpAtsOutletGroupCommand, tlpAtsOutletPower=tlpAtsOutletPower, tlpAgentEmailContacts=tlpAgentEmailContacts, tlpUpsBatteryDetailCharge=tlpUpsBatteryDetailCharge, tlpUpsConfigAutoRestartEntry=tlpUpsConfigAutoRestartEntry, tlpUpsSupportsOutletVoltage=tlpUpsSupportsOutletVoltage, tlpAtsIdentNumInputs=tlpAtsIdentNumInputs, tlpAtsAlarmGeneralFault=tlpAtsAlarmGeneralFault, tlpAtsConfigOverCurrentThreshold=tlpAtsConfigOverCurrentThreshold, tlpAgentSnmpContactTable=tlpAgentSnmpContactTable, tlpUpsDeviceTestDate=tlpUpsDeviceTestDate, tlpAtsAlarmLoadOff18=tlpAtsAlarmLoadOff18, tlpAtsInputFairVoltageThreshold=tlpAtsInputFairVoltageThreshold, tlpUpsAlarmLowBattery=tlpUpsAlarmLowBattery, tlpCoolingAlarmCondenserFailure=tlpCoolingAlarmCondenserFailure, tlpNotifySystemStartup=tlpNotifySystemStartup, tlpRackTrackDetail=tlpRackTrackDetail, tlpNotifySystemUpdate=tlpNotifySystemUpdate, tlpUpsControlTable=tlpUpsControlTable, tlpAtsAlarmLoadLevelAboveThreshold=tlpAtsAlarmLoadLevelAboveThreshold, tlpPduAlarmLoadOff17=tlpPduAlarmLoadOff17, tlpAtsSupportsOutletGroup=tlpAtsSupportsOutletGroup, tlpAgentNumSnmpContacts=tlpAgentNumSnmpContacts, tlpAtsConfigSourceTransferSetMinimum=tlpAtsConfigSourceTransferSetMinimum, tlpEnvConfigEntry=tlpEnvConfigEntry, tlpAgentAttributesAutostartHTTPS=tlpAgentAttributesAutostartHTTPS, tlpPduDeviceEntry=tlpPduDeviceEntry, tlpPduAlarmLoadOff10=tlpPduAlarmLoadOff10, tlpUpsSecondsOnBattery=tlpUpsSecondsOnBattery, tlpAtsAlarmLoadOff19=tlpAtsAlarmLoadOff19, tlpUpsBatteryPackConfigNumBatteries=tlpUpsBatteryPackConfigNumBatteries, tlpUpsAlarmOutputBad=tlpUpsAlarmOutputBad, tlpPduInputPhaseIndex=tlpPduInputPhaseIndex, tlpUpsAlarmExternalSmartBatteryAgeAboveThreshold=tlpUpsAlarmExternalSmartBatteryAgeAboveThreshold, tlpUpsSupportsRampShed=tlpUpsSupportsRampShed, tlpAgentSnmpContactAuthPassword=tlpAgentSnmpContactAuthPassword, tlpAlarmCommunicationsLost=tlpAlarmCommunicationsLost, tlpPduAlarmLoadOff38=tlpPduAlarmLoadOff38, tlpAtsInputPhaseTable=tlpAtsInputPhaseTable, tlpUpsBatteryPackConfigEntry=tlpUpsBatteryPackConfigEntry, tlpCoolingInput=tlpCoolingInput, tlpUpsBatteryPackConfigStrings=tlpUpsBatteryPackConfigStrings, tlpEnvNumInputContacts=tlpEnvNumInputContacts, tlpAgentAttributesPorts=tlpAgentAttributesPorts, tlpPduOutletIndex=tlpPduOutletIndex, tlpAtsInputLineIndex=tlpAtsInputLineIndex, tlpAtsBreakerStatus=tlpAtsBreakerStatus, tlpUpsInputNominalVoltage=tlpUpsInputNominalVoltage, tlpUpsAlarmLoadOff05=tlpUpsAlarmLoadOff05, tlpCoolingOutput=tlpCoolingOutput, tlpKvmDetail=tlpKvmDetail, tlpAgentDetails=tlpAgentDetails, tlpAlarmUserDefined04=tlpAlarmUserDefined04, tlpUpsBatteryPackDetailCondition=tlpUpsBatteryPackDetailCondition, tlpPduAlarmLoadOff11=tlpPduAlarmLoadOff11, tlpPduAlarmLoadOff21=tlpPduAlarmLoadOff21, tlpAtsCircuitTotalPower=tlpAtsCircuitTotalPower, tlpAtsHeatsink=tlpAtsHeatsink, tlpAtsCircuitCurrentMin=tlpAtsCircuitCurrentMin, tlpCoolingAlarmSuctionPressureSensorFault=tlpCoolingAlarmSuctionPressureSensorFault, tlpNotificationsAlarmEntryAdded=tlpNotificationsAlarmEntryAdded, tlpAtsDeviceTemperatureF=tlpAtsDeviceTemperatureF, tlpPduAlarmCircuitBreakerOpen06=tlpPduAlarmCircuitBreakerOpen06, tlpAtsAlarmInputBad=tlpAtsAlarmInputBad, tlpAtsAlarmSource2Outage=tlpAtsAlarmSource2Outage, tlpPduAlarmLoadOff16=tlpPduAlarmLoadOff16, tlpUpsConfigBypassLowerLimitPercent=tlpUpsConfigBypassLowerLimitPercent, tlpUpsIdentNumOutletGroups=tlpUpsIdentNumOutletGroups, tlpUpsBatterySummaryEntry=tlpUpsBatterySummaryEntry, tlpAgentAttributesSupportsSNMP=tlpAgentAttributesSupportsSNMP, tlpUpsAlarmChargerFailed=tlpUpsAlarmChargerFailed, tlpAtsAlarmLoadOff08=tlpAtsAlarmLoadOff08, tlpAtsInputNominalVoltage=tlpAtsInputNominalVoltage, tlpAtsSupportsEnergywise=tlpAtsSupportsEnergywise, tlpAtsInputHighTransferVoltageUpperBound=tlpAtsInputHighTransferVoltageUpperBound, PYSNMP_MODULE_ID=tlpProducts, tlpPduAlarmLoadOff27=tlpPduAlarmLoadOff27, tlpUpsControl=tlpUpsControl)
