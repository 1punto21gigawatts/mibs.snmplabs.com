#
# PySNMP MIB module RFC1232-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1232-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:56:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibIdentifier, transmission, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, Gauge32, Unsigned32, Counter64, NotificationType, iso, Bits, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "transmission", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "Gauge32", "Unsigned32", "Counter64", "NotificationType", "iso", "Bits", "TimeTicks", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ds1 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 18))
ds1ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 1), )
if mibBuilder.loadTexts: ds1ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds1ConfigTable.setDescription('The DS1 Configuration table.')
ds1ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 1, 1), ).setIndexNames((0, "RFC1232-MIB", "ds1CSUIndex"))
if mibBuilder.loadTexts: ds1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds1ConfigEntry.setDescription('An entry in the DS1 Configuration table.')
ds1CSUIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CSUIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CSUIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable.')
ds1Index = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1Index.setStatus('mandatory')
if mibBuilder.loadTexts: ds1Index.setDescription('An index value that uniquely identifies an interface to a ds1. The interface identified by a particular value of this index is the same interface as identified by the same value an ifIndex object instance.')
ds1TimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1TimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurement period. Any fraction is rounded up.')
ds1ValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1ValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ds1ValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 unless the CSU device was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute intervals the CSU has been online.')
ds1LineType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ds1ESF", 2), ("ds1D4", 3), ("ds1ANSI-ESF", 4), ("ds1G704", 5), ("ds1G704-CRC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LineType.setStatus('mandatory')
if mibBuilder.loadTexts: ds1LineType.setDescription('This variable indicates the variety of DS1 Line implementing this circuit. The type of circuit affects the number of bits per second that the circuit can reasonably carry, as well as the interpretation of the usage and error statistics. The values, in sequence, describe: TITLE: SPECIFICATION: ds1ESF AT&T Extended SuperFrame DS1 [10] ds1D4 AT&T D4 format DS1 [16], [17] ds1ANSI-ESF ANSI Extended SuperFrame format [14] ds1G704 CCITT Recommendation G.704 [12] (section 2.1.3.2) ds1G704-CRC CCITT Recommendation G.704 [12] (section 2.1.3.1) ')
ds1ZeroCoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds1JammedBit", 1), ("ds1B8ZS", 2), ("ds1InvertedHDLC", 3), ("ds1HDB3", 4), ("ds1ZBTSI", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1ZeroCoding.setStatus('mandatory')
if mibBuilder.loadTexts: ds1ZeroCoding.setDescription("This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. ds1JammedBit refers the Jammed bit Zero Encoding, in which the AT&T specification of at least one pulse every 8 bit periods is literally implemented by forcing a pulse in bit 8 of each channel. Thus, only seven bits per channel, or 1.344 Mbps, is available for data. ds1B8ZS refers to the use of a specified pattern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits (see [14]). In this context, all eight bits in a channel are technically available for data, but care must be taken with D4 encoded data to avoid having HDLC Flag streams imitate spurious Yellow Alarm conditions. Typically, one bit per frame is ignored to force flag streams to rotate, thereby avoiding this error type. CCITT Recommendation G.703 [11] may be referred to for further definition of these. ds1InvertedHDLC refers to the practice, common on HDLC encoded DS1 data links, of inverting the data between the serial interface chip and the CSU. Since HDLC guarantees one zero every 6 bits in the worst case, while the standards call for (in effect) at least one pulse every eight, inverted HDLC enjoys 4/24 one's density on the line, which may improve the effective clock stability of a DS1 line. As with B8ZS, all eight bits in a channel are technically available for data, but care must be taken with D4 encoded data to avoid having HDLC Flag streams imitate spurious Yellow Alarm conditions. Typically, one bit per frame is ignored to force flag streams to rotate, thereby avoiding this error type. ANSI Clear Channels may use ds1ZBTSI, or Zero Byte Time Slot Interchange (see [14]). G.704 links, with or without CRC, use ds1HDB3 (see [11]). ")
ds1Loopback = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds1NoLoop", 1), ("ds1LocalLoopbackLocalSide", 2), ("ds1LocalLoopbackRemoteSide", 3), ("ds1RemoteLoopbackLocalSide", 4), ("ds1RemoteLoopbackRemoteSide", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1Loopback.setStatus('mandatory')
if mibBuilder.loadTexts: ds1Loopback.setDescription("This variable represents the loopback state of the CSU. Devices supporting read/write access should return badValue in response to a requested loopback state that the CSU does not support. The values mean: ds1NoLoop Not in the loopback state. A device that is not capable of performing a loopback on either interface shall always return this as it's value. ds1LocalLoopbackLocalSide Signal received from the local side of the device is looped back at the local connector (eg, without involving the CSU). ds1LocalLoopbackRemoteSide Signal received from the local side of the device is looped back at the remote connector (eg, through the CSU). ds1RemoteLoopbackLocalSide Signal received from the remote side of the device is looped back at the local connector (eg, through the CSU). ds1RemoteLoopbackRemoteSide Signal received from the remote side of the device is looped back at the remote connector (eg, without involving the CSU).")
ds1SendCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds1OtherTest", 1), ("ds1SendNoCode", 2), ("ds1SendSetCode", 3), ("ds1SendResetCode", 4), ("ds1SendQRSS", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1SendCode.setStatus('mandatory')
if mibBuilder.loadTexts: ds1SendCode.setDescription('This variable indicates what type of code is being sent across the DS1 circuit by the CSU. The values mean: ds1SendNoCode sending looped or normal data ds1SendSetCode sending a loopback request ds1SendResetCode sending a loopback termination request ds1SendQRSS sending the BERT pattern described in ANSI T1.403-1989 section 5.6 ds1OtherTest sending a different BERT/BLERT pattern, such as all zeroes, all ones, etc.')
ds1YellowAlarm = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1NoYellowAlarm", 1), ("ds1YellowAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1YellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1YellowAlarm.setDescription('This variable indicates if a Yellow Alarm condition exists. Note that G.704 interfaces do not support Yellow Alarms. Accordingly, such agents should return the value ds1NoYellowAlarm.')
ds1RedAlarm = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1NoRedAlarm", 1), ("ds1RedAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1RedAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds1RedAlarm.setDescription('This variable indicates if a Red Alarm condition exists. Note that G.704 interfaces do not support Red Alarms. Accordingly, such agents should return the value ds1NoRedAlarm.')
ds1CircuitIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CircuitIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
ds1IntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 2), )
if mibBuilder.loadTexts: ds1IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalTable.setDescription('The DS1 Interval table.')
ds1IntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 2, 1), ).setIndexNames((0, "RFC1232-MIB", "ds1IntervalIndex"), (0, "RFC1232-MIB", "ds1IntervalNumber"))
if mibBuilder.loadTexts: ds1IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalEntry.setDescription('An entry in the DS1 Interval table.')
ds1IntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ds1CSUIndex object instance.')
ds1IntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minute interval (assuming that all 96 intervals are valid).')
ds1IntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1IntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalESs.setDescription('The counter associated with the number of Errored Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU during one of the previous 96 fifteen minute intervals.')
ds1IntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1IntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU during one of the previous 96 fifteen minute intervals.')
ds1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1IntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU during one of the previous 96 fifteen minute intervals.')
ds1IntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1IntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU during one of the previous 96 fifteen minute intervals.')
ds1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1IntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalCSSs.setDescription('The counter associated with the number of Controlled Slip Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU during one of the previous 96 fifteen minute intervals.')
ds1IntervalBPVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1IntervalBPVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalBPVs.setDescription('The counter associated with the number of Bipolar Violations, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU during one of the previous 96 fifteen minute intervals.')
ds1IntervalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1IntervalCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1IntervalCVs.setDescription('The counter associated with the number of Code Violation Error Events, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU during one of the previous 96 fifteen minute intervals. Note that D4 and G.704 (section 2.1.3.2) interfaces do not support Code Violation Error Events. Accordingly, such agents may treat this object as having an ACCESS clause value of not- accessible.')
ds1CurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 3), )
if mibBuilder.loadTexts: ds1CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentTable.setDescription('The DS1 Current table.')
ds1CurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 3, 1), ).setIndexNames((0, "RFC1232-MIB", "ds1CurrentIndex"))
if mibBuilder.loadTexts: ds1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentEntry.setDescription('An entry in the DS1 Current table.')
ds1CurrentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ds1CSUIndex object instance.')
ds1CurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentESs.setDescription('The counter associated with the number of Errored Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the current 15 minute interval.')
ds1CurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the current 15 minute interval.')
ds1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the current 15 minute interval.')
ds1CurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the current 15 minute interval.')
ds1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentCSSs.setDescription('The counter associated with the number of Controlled Slip Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the current 15 minute interval.')
ds1CurrentBPVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CurrentBPVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentBPVs.setDescription('The counter associated with the number of Bipolar Violations, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the current 15 minute interval.')
ds1CurrentCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1CurrentCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1CurrentCVs.setDescription('The counter associated with the number of Code Violation Error Events, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the current 15 minute interval. Note that D4 and G.704 (section 2.1.3.2) interfaces do not support Code Violation Error Events. Accordingly, such agents may treat this object as having an ACCESS clause value of not- accessible.')
ds1TotalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 4), )
if mibBuilder.loadTexts: ds1TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalTable.setDescription('The DS1 Total table. 24 hour interval.')
ds1TotalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 4, 1), ).setIndexNames((0, "RFC1232-MIB", "ds1TotalIndex"))
if mibBuilder.loadTexts: ds1TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalEntry.setDescription('An entry in the DS1 Total table.')
ds1TotalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ds1CSUIndex object instance.')
ds1TotalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1TotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalESs.setDescription('The counter associated with the number of Errored Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the previous 24 hour interval')
ds1TotalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1TotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalSESs.setDescription('The counter associated with the number of Severely Errored Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the previous 24 hour interval.')
ds1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1TotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the previous 24 hour interval.')
ds1TotalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1TotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalUASs.setDescription('The counter associated with the number of Unavailable Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the previous 24 hour interval.')
ds1TotalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1TotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalCSSs.setDescription('The counter associated with the number of Controlled Slip Seconds, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the previous 24 hour interval.')
ds1TotalBPVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1TotalBPVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalBPVs.setDescription('The counter associated with the number of Bipolar Violations, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the previous 24 hour interval.')
ds1TotalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1TotalCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds1TotalCVs.setDescription('The counter associated with the number of Code Violation Error Events, as defined by ANSI Draft Standard T1M1.3/90 - 027R2[15], encountered by a DS1 CSU in the previous 24 hour interval. Note that D4 and G.704 (section 2.1.3.2) interfaces do not support Code Violation Error Events. Accordingly, such agents may treat this object as having an ACCESS clause value of not- accessible.')
ds1FracTable = MibTable((1, 3, 6, 1, 2, 1, 10, 18, 5), )
if mibBuilder.loadTexts: ds1FracTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds1FracTable.setDescription('The DS1 Fractional table.')
ds1FracEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 18, 5, 1), ).setIndexNames((0, "RFC1232-MIB", "ds1FracIndex"), (0, "RFC1232-MIB", "ds1FracNumber"))
if mibBuilder.loadTexts: ds1FracEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds1FracEntry.setDescription('An entry in the DS1 Fractional table.')
ds1FracIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1FracIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds1FracIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ds1CSUIndex object instance.')
ds1FracNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1FracNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ds1FracNumber.setDescription('The channel number for this entry.')
ds1FracIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 18, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1FracIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds1FracIfIndex.setDescription('An index value that uniquely identifies an interface to a ds1. The interface identified by a particular value of this index is the same interface as identified by the same value an ifIndex object instance.')
mibBuilder.exportSymbols("RFC1232-MIB", ds1IntervalESs=ds1IntervalESs, ds1CurrentCSSs=ds1CurrentCSSs, ds1CurrentSESs=ds1CurrentSESs, ds1CurrentESs=ds1CurrentESs, ds1TotalCVs=ds1TotalCVs, ds1FracIfIndex=ds1FracIfIndex, ds1TotalUASs=ds1TotalUASs, ds1IntervalCVs=ds1IntervalCVs, ds1IntervalNumber=ds1IntervalNumber, ds1TotalSESs=ds1TotalSESs, ds1RedAlarm=ds1RedAlarm, ds1IntervalSEFSs=ds1IntervalSEFSs, ds1SendCode=ds1SendCode, ds1ValidIntervals=ds1ValidIntervals, ds1LineType=ds1LineType, ds1TimeElapsed=ds1TimeElapsed, ds1CurrentSEFSs=ds1CurrentSEFSs, ds1TotalESs=ds1TotalESs, ds1FracTable=ds1FracTable, ds1TotalTable=ds1TotalTable, ds1Loopback=ds1Loopback, ds1ZeroCoding=ds1ZeroCoding, ds1ConfigEntry=ds1ConfigEntry, ds1CircuitIdentifier=ds1CircuitIdentifier, ds1TotalBPVs=ds1TotalBPVs, ds1Index=ds1Index, ds1YellowAlarm=ds1YellowAlarm, ds1CurrentTable=ds1CurrentTable, ds1TotalIndex=ds1TotalIndex, ds1=ds1, ds1IntervalIndex=ds1IntervalIndex, ds1CurrentCVs=ds1CurrentCVs, ds1IntervalTable=ds1IntervalTable, ds1ConfigTable=ds1ConfigTable, ds1IntervalCSSs=ds1IntervalCSSs, ds1IntervalBPVs=ds1IntervalBPVs, ds1TotalCSSs=ds1TotalCSSs, ds1CSUIndex=ds1CSUIndex, ds1CurrentEntry=ds1CurrentEntry, ds1FracIndex=ds1FracIndex, ds1CurrentIndex=ds1CurrentIndex, ds1IntervalUASs=ds1IntervalUASs, ds1TotalEntry=ds1TotalEntry, ds1TotalSEFSs=ds1TotalSEFSs, ds1FracNumber=ds1FracNumber, ds1FracEntry=ds1FracEntry, ds1CurrentBPVs=ds1CurrentBPVs, ds1CurrentUASs=ds1CurrentUASs, ds1IntervalSESs=ds1IntervalSESs, ds1IntervalEntry=ds1IntervalEntry)
