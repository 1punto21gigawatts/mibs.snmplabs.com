#
# PySNMP MIB module TY1250I-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TY1250I-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, Unsigned32, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, TimeTicks, ObjectIdentity, IpAddress, enterprises, Bits, Gauge32, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Unsigned32", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "TimeTicks", "ObjectIdentity", "IpAddress", "enterprises", "Bits", "Gauge32", "MibIdentifier", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tylink = MibIdentifier((1, 3, 6, 1, 4, 1, 466))
dsucsu = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 1))
tyview = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 2))
ty1250 = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3))
ty1250SysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 1))
ty1250SysType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysType.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250SysType.setDescription('A textual description of the system model identifier. for example: TYLINK1250')
ty1250SysSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysSoftRev.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250SysSoftRev.setDescription('Displays the Software Revision installed in this node.')
ty1250SysHardRev = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysHardRev.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250SysHardRev.setDescription('Displays the Hardware Revision of the node.')
ty1250SysNumNetInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysNumNetInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250SysNumNetInstalled.setDescription('The number of Network (DDS) ports that are installed. There is 1 on the 1250.')
ty1250SysNumDteInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysNumDteInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250SysNumDteInstalled.setDescription('The number of channels (DTE) that are installed. There is 1 on the 1250.')
ty1250SysNumMaintInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysNumMaintInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250SysNumMaintInstalled.setDescription('The number of Maintenance ports that are installed. There are 2 on the 1250.')
ty1250SysName = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250SysName.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250SysName.setDescription('The user supplied name of the node. This object does not affect operation, but may be useful for network management.')
ty1250CfgAppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 2))
ty1250CfgAppClockSource = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgAppClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgAppClockSource.setDescription('Default timing, or clock, source. There must be only one source on a DDS line. Node should always be network (2) timed on a point-to-network application. Line Driver applications need one node as internal (1), one as network (2).')
ty1250CfgAppCircuitId = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgAppCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgAppCircuitId.setDescription('Circuit identifier provided by the service provider.')
ty1250CfgNetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 3))
ty1250CfgNetType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("switch56", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetType.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgNetType.setDescription('Indicates type of service purchased on the attached network line (DDS or SW56). Valid selections are dedicated (1) and switch56 (2).')
ty1250CfgNetGlareType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external-glare", 1), ("internal-glare", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetGlareType.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgNetGlareType.setDescription('In switched applications, defines who wins when there are simultanious incomming and outgoing calls. If in doubt, select external-glare (2).')
ty1250CfgNetEchoCan = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore-echo-cancellers", 1), ("disable-echo-cancellers", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetEchoCan.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgNetEchoCan.setDescription('In switched applications, some carriers, such as Sprint, require you to disable-echo-cancellors (2) for data apps on most lines. Calls take longer to come up when disabling is done; use ignore-echo-cancellers (1) on clear channel lines.')
ty1250CfgNetAnsMode = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual-answer", 1), ("automatic-answer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetAnsMode.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgNetAnsMode.setDescription('In switched applications, allows for manual-answer (1) or automatic-answer (2) of inbound calls. Calls may be answered in manual mode via vt100, DTR, or the front panel button if so configured.')
ty1250CfgNetDialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetDialTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgNetDialTimeout.setDescription('In switched applications, time in seconds to wait for far end to answer before giving up, and possibly redialing.')
ty1250CfgNetNumRedial = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetNumRedial.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgNetNumRedial.setDescription('In switched applications, number of times to redial if the call fails.')
ty1250CfgNetRedialDelay = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetRedialDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgNetRedialDelay.setDescription('In switched applications, delay in seconds between redial attempts.')
ty1250CfgNetDefNum2Dial = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetDefNum2Dial.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgNetDefNum2Dial.setDescription('In switched applications, default phone number to dial. Numbers and dashes are allowed.')
ty1250CfgNetBPVThresholding = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("thresholding-at-10E-4", 1), ("disable-thresholding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetBPVThresholding.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgNetBPVThresholding.setDescription('Allows the user to turn on and off the BPV thresholding function. Valid values are thresholding_at_10E-4 (1) and disable-thresholding (2).')
ty1250CfgDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 4))
ty1250CfgDteType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v35", 2), ("rs449", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250CfgDteType.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgDteType.setDescription('The Dte channel type identifies the electrical specification of the interface. Read-only.')
ty1250CfgDteClockInvert = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal-dte-clock", 1), ("invert-dte-clock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDteClockInvert.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgDteClockInvert.setDescription('Clock Inversion, invert-dte-clock (2), can be used to solve out of phase timing problems on DTE link. normal-dte-clock (1) can be used in most cases.')
ty1250CfgDteTiming = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop1-timing", 1), ("loop2-timing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDteTiming.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgDteTiming.setDescription('The DTE channel Timing mode. Use loop2-timing (2) when in doubt.')
ty1250CfgDialTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 5))
ty1250CfgDialButton = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-button", 1), ("disable-button", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDialButton.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgDialButton.setDescription('In switched applications, Enables/Disables the button on front of unit. This button can used to manual answer an incomming call, or dial out the default number. The valid values are enable-button (1) and disable-button (2).')
ty1250CfgDialDtr = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-dtr", 1), ("disable-dtr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDialDtr.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgDialDtr.setDescription('In switched applications, Enables/Disables dialing on DTR signal transition. Valid values enable-dtr (1) and disable-dtr (2).')
ty1250CfgDialRtsDisc = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-rts", 1), ("disable-rts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDialRtsDisc.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgDialRtsDisc.setDescription('In switched applications, Enables/Disables disconnecting on RTS signal transition. Valid values are enable-rts (1) and disable-rts (2).')
ty1250CfgDialRi = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-ri", 1), ("disable-ri", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDialRi.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgDialRi.setDescription('In switched applications, Enables/Disables incoming call notification to DTE via RI signal. Valid values are enable-ri (1) and disable-ri (2).')
ty1250CfgMaintTable = MibTable((1, 3, 6, 1, 4, 1, 466, 3, 6), )
if mibBuilder.loadTexts: ty1250CfgMaintTable.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgMaintTable.setDescription('The Maintenance Port Configuration table contains parameters for the Maintenance ports on the 1250. The Terminal Port is Index=1; SLIP port is 2')
ty1250CfgMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 3, 6, 1), ).setIndexNames((0, "TY1250I-MIB", "ty1250CfgMaintIndex"))
if mibBuilder.loadTexts: ty1250CfgMaintEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgMaintEntry.setDescription('Maintenance Port Configuration Object')
ty1250CfgMaintIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250CfgMaintIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgMaintIndex.setDescription('The Maintenance port under consideration. On the 1250, the Terminal Port is Index=1; SLIP port is 2.')
ty1250CfgMaintMode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 7, 8))).clone(namedValues=NamedValues(("ascii-vt100", 4), ("slip", 7), ("cslip", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintMode.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgMaintMode.setDescription('The Mode for this Maintenance Port. Values include ascii-vt100 (4), slip (7), and cslip (8).')
ty1250CfgMaintBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5))).clone(namedValues=NamedValues(("baud-2400", 2), ("baud-9600", 4), ("baud-19200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintBaud.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgMaintBaud.setDescription('Baud rate for this Maintenance port. Values are baud-2400 (2), baud-9600 (4), baud-19200 (5).')
ty1250CfgMaintDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgMaintDataBits.setDescription('Databits for this Maintenance port. Values are databits-7 (1) and databits-8 (2).')
ty1250CfgMaintStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgMaintStopBits.setDescription('Number of Stopbits for this Maintenance port. Values are stopbits-1 (1), stopbits-1-5 (2), and stopbits-2 (3).')
ty1250CfgMaintParity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 1), ("odd-parity", 2), ("even-parity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintParity.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgMaintParity.setDescription('Parity for this Maintenance port. Values are no-parity (1), odd-parity (2), even-parity (3).')
ty1250CfgMaintFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-flow-control", 1), ("software-flow-control", 2), ("hardware-flow-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgMaintFlowCtrl.setDescription('Flow Control for this Maintenance port. Values are no-flow-control (1), software-flow-control (2), and hardware-flow-control (3).')
ty1250CfgSlipTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 8))
ty1250CfgSlipMyIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSlipMyIP.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgSlipMyIP.setDescription('The IP address for this node.')
ty1250CfgSlipPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSlipPeerIP.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgSlipPeerIP.setDescription('The IP address for other end of slip connection.')
ty1250CfgSlipMask = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSlipMask.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgSlipMask.setDescription('The IP Network Mask (eg 255.255.255.0) for the SLIP link.')
ty1250CfgSlipMaxMTU = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSlipMaxMTU.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgSlipMaxMTU.setDescription('The Maximum Transmission Unit is the size of the largest IP packet supported. This value should be set to the lowest value supported by any equipment in the transmission path. A size of 1006 (including header) is suggested.')
ty1250CfgSnmpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 14))
ty1250CfgSnmpManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 14, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgSnmpManagerIP.setDescription("The IP address for the SNMP manager to receive this node's TRAPs.")
ty1250CfgTelnetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 17))
ty1250CfgTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-telnet", 1), ("disable-telnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgTelnetEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgTelnetEnable.setDescription('Enables/Disables the telnet feature. Valid values are enable-telnet (1) and disable-telnet (2).')
ty1250CfgTelnetAutoLogOut = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autologout-at-15-minutes", 1), ("disable-autologout", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgTelnetAutoLogOut.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CfgTelnetAutoLogOut.setDescription('Enables/Disables the telnet auto-logout, logging out the user after a certain length of idle time. Valid values are autologout-at-15-minutes (1) and disable-autologout (2).')
ty1250CallTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 9))
ty1250CallState = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connect", 1), ("disconnect", 2), ("answer", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250CallState.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CallState.setDescription('Call-related actions: a: Connect (initiate a call), b: Disconnect (terminate a call) c: Answer (answer an incoming call).')
ty1250CallStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 253, 254))).clone(namedValues=NamedValues(("none", 1), ("idle", 2), ("dialing", 3), ("busy", 4), ("waiting-for-redial", 5), ("redialing", 6), ("active", 7), ("incoming-call", 8), ("line-in-maintenance", 253), ("line-down", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250CallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CallStatus.setDescription('The call status is shown here.')
ty1250CallNumber = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CallNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CallNumber.setDescription('The last phone number dialed out.')
ty1250CallUpTime = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 9, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250CallUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250CallUpTime.setDescription('Number of seconds the call has been up.')
ty1250DiagUnitTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 10))
ty1250DiagUnitLocLoop = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250DiagUnitLocLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagUnitLocLoop.setDescription('Enables the operator to control and examine the UNIT local loopback. This loopback occurs on all network ports transmit and receive logic. The unit will transmit DTE data out to the network as normal, and will also loop DTE data back to the DTE.')
ty1250DiagUnitReset = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-unit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250DiagUnitReset.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagUnitReset.setDescription('Enables the operator to remotely reset the unit. Using this command will cause the unit to terminate all its connections and drop data.')
ty1250DiagNetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 11))
ty1250DiagNetLineStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("in-sync", 1), ("out-of-service", 2), ("out-of-frame", 3), ("bpv-threshold-failure", 4), ("loss-of-signal", 5), ("simplex-current-loopback", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagNetLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagNetLineStatus.setDescription('The Current status of the physical interface. Your network carrier can send Out-of-Service or Maintenance Mode codes.')
ty1250DiagNetLclLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250DiagNetLclLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagNetLclLpbk.setDescription('Enables the operator to control and examine the network local loopback. This loopback occurs on the net side of the local transmit and receive logic. The unit continues to receive data from the network and also loops received data back to the network.')
ty1250DiagNetRmtLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-loop-from-remote", 1), ("simplex-current-loop", 2), ("non-latching-loop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagNetRmtLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagNetRmtLpbk.setDescription('Enables the operator to examine (ONLY) the status of network loopbacks placed by external equipment, such as your local CO. These loopbacks will loop received network data back out the network, disconnecting the DTE completely.')
ty1250DiagDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 12))
ty1250DiagDteSigRTS = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rts-signal-on", 1), ("rts-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteSigRTS.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteSigRTS.setDescription('The Dte Channel RTS signal. Values are rts-signal-on (1) and rts-signal-off (2).')
ty1250DiagDteSigDTR = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtr-signal-on", 1), ("dtr-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteSigDTR.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteSigDTR.setDescription('The Dte Channel DTR signal. Values are dtr-signal-on (1) and dtr-signal-off (2).')
ty1250DiagDteLclLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250DiagDteLclLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteLclLpbk.setDescription('This selection displays the status or controls the Local DTE Channel Loopback for the selected channel. This is will loop DTE data back towards the DTE interface in addition to passing it on to the network.')
ty1250DiagDteV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteV54Lpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteV54Lpbk.setDescription('This selection displays the status of the DTE Channel V.54 Loopback for the channel. This loopback is initiated by the remote node, causing this node to loop data back to the remote node.')
ty1250DiagDteRmtV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("transmit-code-enable", 3), ("transmit-code-disable", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250DiagDteRmtV54Lpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteRmtV54Lpbk.setDescription('This selection controls the DTE Channel V.54 Remote Loopback. Transmit-code-enable (3) will cause the node to transmit a V.54 code to the remote node which will then loop received data back to this node. transmit-code-disable (4) will transmit the disable code.')
ty1250DiagDteBerState = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start-bert-test", 1), ("stop-bert-test", 2), ("inject-error-bert-test", 3), ("clear-error-bert-test", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250DiagDteBerState.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteBerState.setDescription('BERT test related actions: a: Starts a BERT test on a channel, b: Stops a BERT test on a channel, c: Inject Errors while the BERT test is running, d: Clears BERT test errors.')
ty1250DiagDteBerStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bert-off", 1), ("bert-out-of-sync", 2), ("bert-in-sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteBerStatus.setDescription('Displays the current BERT test sync status.')
ty1250DiagDteBerErrors = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteBerErrors.setDescription('Displays the number of errors detected in Bert Test.')
ty1250DiagDteBerErrSec = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteBerErrSec.setDescription('Displays the number of seconds containing errors in BERT Test.')
ty1250DiagDteBerTimeElaps = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerTimeElaps.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteBerTimeElaps.setDescription('Elapsed time since BERT test was started or cleared.')
ty1250DiagDteBerResyncs = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerResyncs.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250DiagDteBerResyncs.setDescription('Displays the number of times BERT test has synched up on the pattern.')
ty1250StatsDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 15))
ty1250StatsDteTxByteCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsDteTxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250StatsDteTxByteCount.setDescription('The statistic counting the number of bytes transmitted on the DTE channel.')
ty1250StatsDteRxByteCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsDteRxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250StatsDteRxByteCount.setDescription('The statistic counting the number of bytes received on the DTE channel.')
ty1250StatsDteClearStats = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250StatsDteClearStats.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250StatsDteClearStats.setDescription('Allows the user to zero out all the statistics in the DTE statistics table.')
ty1250StatsNetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 16))
ty1250StatsNetLoopLength = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsNetLoopLength.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250StatsNetLoopLength.setDescription('The statistic that estimates line attentuation on the network channel.')
ty1250StatsNetBpvCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsNetBpvCount.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250StatsNetBpvCount.setDescription('The statistic counting the number of BPV errors on the network channel.')
ty1250StatsNetTxByteCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsNetTxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250StatsNetTxByteCount.setDescription('The statistic counting the number of bytes transmitted on the network channel.')
ty1250StatsNetRxByteCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsNetRxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250StatsNetRxByteCount.setDescription('The statistic counting the number of bytes received on the network channel.')
ty1250StatsNetClearStats = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250StatsNetClearStats.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250StatsNetClearStats.setDescription('Allows the user to zero out all the statistics in the network statistics table.')
ty1250AlarmType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("line-failure", 1), ("line-in-service", 2), ("connected", 3), ("connect-failure", 4), ("incoming-call", 5), ("disconnected", 6), ("bad-config-in-set", 7), ("config-local-update", 8), ("bpv-threshold-exceeded", 9), ("bpv-threshold-acceptable", 10), ("local-unit-loopback-enabled", 11), ("local-unit-loopback-disabled", 12), ("local-network-loopback-enabled", 13), ("local-network-loopback-disabled", 14), ("remote-network-simplex-loopback-enabled", 15), ("remote-network-simplex-loopback-disabled", 16), ("remote-network-non-latching-loopback-enabled", 17), ("remote-network-non-latching-loopback-disabled", 18), ("v54-loop-up-initiated", 19), ("v54-loop-down-completed", 20), ("v54-loopback-enabled-by-remote", 21), ("v54-loopback-disabled-by-remote", 22), ("bert-test-pattern-initiated", 23), ("bert-test-pattern-completed", 24), ("local-dte-loopback-enabled", 25), ("local-dte-loopback-disabled", 26), ("local-unit-loopback-failure", 27), ("local-network-loopback-failure", 28), ("bert-test-pattern-failure", 29), ("local-dte-loopback-failure", 30), ("v54-loopback-failure", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250AlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: ty1250AlarmType.setDescription('The type of alarms that are generated on the node')
ty1250Trap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,0)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250Trap.setDescription('A ty1250Trap trap signifies that the sending node had its `ty1250AlarmType` variable modified.')
ty1250LineFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,1)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LineFailureTrap.setDescription('The line has failed.')
ty1250LineInServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,2)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LineInServiceTrap.setDescription('The line is back in service.')
ty1250ConnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,3)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250ConnectedTrap.setDescription('The 1250 unit is connected.')
ty1250ConnectFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,4)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250ConnectFailureTrap.setDescription('The attempted connection failed.')
ty1250IncomingCallTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,5)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250IncomingCallTrap.setDescription('Incoming call.')
ty1250DisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,6)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250DisconnectedTrap.setDescription('Disconnected.')
ty1250BadConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,7)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250BadConfigTrap.setDescription('The configuration specified in the SET command was bad. SET failed.')
ty1250LocalConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,8)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalConfigTrap.setDescription('The configuration has been changed by a means other than SNMP.')
ty1250BPVThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,9)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250BPVThresholdExceededTrap.setDescription('BPV threshold exceeded.')
ty1250BPVThresholdAcceptableTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,10)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250BPVThresholdAcceptableTrap.setDescription('BPV threshold acceptable.')
ty1250LocalUnitLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,11)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalUnitLoopbackEnabledTrap.setDescription('Local unit loopback enabled.')
ty1250LocalUnitLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,12)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalUnitLoopbackDisabledTrap.setDescription('Local unit loopback disabled.')
ty1250LocalNetLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,13)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalNetLoopbackEnabledTrap.setDescription('Local network loopback enabled.')
ty1250LocalNetLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,14)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalNetLoopbackDisabledTrap.setDescription('Local network loopback disabled.')
ty1250SimplexCurrentLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,15)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250SimplexCurrentLoopbackEnabledTrap.setDescription('Simplex current loopback enabled.')
ty1250SimplexCurrentLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,16)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250SimplexCurrentLoopbackDisabledTrap.setDescription('Simplex current loopback disabled.')
ty1250NonLatchingLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,17)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250NonLatchingLoopbackEnabledTrap.setDescription('Nonlatching loopback enabled.')
ty1250NonLatchingLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,18)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250NonLatchingLoopbackDisabledTrap.setDescription('Nonlatching loopback disabled.')
ty1250V54LoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,19)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250V54LoopUpInitiatedTrap.setDescription('Starting to loop up a V54 loopback on the remote unit.')
ty1250V54LoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,20)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250V54LoopDownCompletedTrap.setDescription('Completed the loop down of a V54 loopback on the remote unit.')
ty1250V54LoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,21)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250V54LoopbackEnabledTrap.setDescription('V54 loopback enabled by remote unit.')
ty1250V54LoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,22)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250V54LoopbackDisabledTrap.setDescription('V54 loopback disabled by remote unit.')
ty1250BertInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,23)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250BertInitiatedTrap.setDescription('BERT test pattern initiated.')
ty1250BertCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,24)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250BertCompletedTrap.setDescription('BERT test pattern completed.')
ty1250LocalDteLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,25)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalDteLoopbackEnabledTrap.setDescription('Local DTE loopback enabled.')
ty1250LocalDteLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,26)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalDteLoopbackDisabledTrap.setDescription('Local DTE loopback disabled.')
ty1250LocalUnitLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,27)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalUnitLoopbackFailedTrap.setDescription('Unable to do a local unit loopback.')
ty1250LocalNetLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,28)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalNetLoopbackFailedTrap.setDescription('Unable to do a local network loopback.')
ty1250BertFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,29)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250BertFailedTrap.setDescription('Unable to do a BERT.')
ty1250LocalDteLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,30)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250LocalDteLoopbackFailedTrap.setDescription('Unable to do a local DTE loopback.')
ty1250V54LoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,31)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
if mibBuilder.loadTexts: ty1250V54LoopbackFailedTrap.setDescription('Unable to do a V54 loopback.')
mibBuilder.exportSymbols("TY1250I-MIB", ty1250LocalUnitLoopbackEnabledTrap=ty1250LocalUnitLoopbackEnabledTrap, ty1250CfgAppCircuitId=ty1250CfgAppCircuitId, ty1250CfgMaintIndex=ty1250CfgMaintIndex, ty1250AlarmType=ty1250AlarmType, ty1250LocalNetLoopbackEnabledTrap=ty1250LocalNetLoopbackEnabledTrap, ty1250CfgSlipMask=ty1250CfgSlipMask, ty1250DiagDteBerTimeElaps=ty1250DiagDteBerTimeElaps, ty1250LocalUnitLoopbackDisabledTrap=ty1250LocalUnitLoopbackDisabledTrap, ty1250CallTable=ty1250CallTable, ty1250CfgNetRedialDelay=ty1250CfgNetRedialDelay, ty1250CfgNetEchoCan=ty1250CfgNetEchoCan, ty1250CfgSlipTable=ty1250CfgSlipTable, ty1250CfgDialButton=ty1250CfgDialButton, ty1250CfgMaintParity=ty1250CfgMaintParity, ty1250LineFailureTrap=ty1250LineFailureTrap, ty1250LocalNetLoopbackDisabledTrap=ty1250LocalNetLoopbackDisabledTrap, ty1250CfgNetType=ty1250CfgNetType, ty1250CfgMaintTable=ty1250CfgMaintTable, ty1250ConnectFailureTrap=ty1250ConnectFailureTrap, ty1250LocalDteLoopbackFailedTrap=ty1250LocalDteLoopbackFailedTrap, ty1250BadConfigTrap=ty1250BadConfigTrap, ty1250BertInitiatedTrap=ty1250BertInitiatedTrap, ty1250CfgAppTable=ty1250CfgAppTable, ty1250BPVThresholdExceededTrap=ty1250BPVThresholdExceededTrap, ty1250ConnectedTrap=ty1250ConnectedTrap, ty1250CfgNetGlareType=ty1250CfgNetGlareType, ty1250CfgDteTable=ty1250CfgDteTable, ty1250StatsDteTable=ty1250StatsDteTable, ty1250StatsNetTxByteCount=ty1250StatsNetTxByteCount, ty1250CfgDialRtsDisc=ty1250CfgDialRtsDisc, ty1250SysTable=ty1250SysTable, ty1250CfgNetDialTimeout=ty1250CfgNetDialTimeout, ty1250DiagDteV54Lpbk=ty1250DiagDteV54Lpbk, ty1250CfgDteType=ty1250CfgDteType, ty1250SysHardRev=ty1250SysHardRev, ty1250CfgMaintDataBits=ty1250CfgMaintDataBits, ty1250V54LoopbackEnabledTrap=ty1250V54LoopbackEnabledTrap, ty1250LocalDteLoopbackDisabledTrap=ty1250LocalDteLoopbackDisabledTrap, ty1250CfgDialTable=ty1250CfgDialTable, ty1250CfgNetTable=ty1250CfgNetTable, ty1250V54LoopDownCompletedTrap=ty1250V54LoopDownCompletedTrap, ty1250CfgTelnetAutoLogOut=ty1250CfgTelnetAutoLogOut, ty1250CallNumber=ty1250CallNumber, tylink=tylink, ty1250IncomingCallTrap=ty1250IncomingCallTrap, ty1250V54LoopbackFailedTrap=ty1250V54LoopbackFailedTrap, ty1250CfgDialDtr=ty1250CfgDialDtr, ty1250BertFailedTrap=ty1250BertFailedTrap, ty1250NonLatchingLoopbackDisabledTrap=ty1250NonLatchingLoopbackDisabledTrap, ty1250CfgNetDefNum2Dial=ty1250CfgNetDefNum2Dial, ty1250DiagUnitLocLoop=ty1250DiagUnitLocLoop, ty1250CfgDteTiming=ty1250CfgDteTiming, ty1250StatsNetTable=ty1250StatsNetTable, ty1250CfgDteClockInvert=ty1250CfgDteClockInvert, ty1250NonLatchingLoopbackEnabledTrap=ty1250NonLatchingLoopbackEnabledTrap, ty1250LocalUnitLoopbackFailedTrap=ty1250LocalUnitLoopbackFailedTrap, ty1250DiagDteRmtV54Lpbk=ty1250DiagDteRmtV54Lpbk, ty1250DiagDteSigDTR=ty1250DiagDteSigDTR, ty1250CfgMaintStopBits=ty1250CfgMaintStopBits, ty1250CallStatus=ty1250CallStatus, ty1250Trap=ty1250Trap, ty1250DiagNetTable=ty1250DiagNetTable, ty1250CfgMaintEntry=ty1250CfgMaintEntry, ty1250StatsNetClearStats=ty1250StatsNetClearStats, ty1250CfgSlipPeerIP=ty1250CfgSlipPeerIP, ty1250LocalConfigTrap=ty1250LocalConfigTrap, ty1250V54LoopbackDisabledTrap=ty1250V54LoopbackDisabledTrap, ty1250DisconnectedTrap=ty1250DisconnectedTrap, ty1250CfgMaintMode=ty1250CfgMaintMode, ty1250StatsDteRxByteCount=ty1250StatsDteRxByteCount, ty1250DiagNetLineStatus=ty1250DiagNetLineStatus, ty1250DiagUnitReset=ty1250DiagUnitReset, ty1250DiagDteBerResyncs=ty1250DiagDteBerResyncs, ty1250StatsNetRxByteCount=ty1250StatsNetRxByteCount, ty1250DiagDteSigRTS=ty1250DiagDteSigRTS, ty1250BertCompletedTrap=ty1250BertCompletedTrap, ty1250LocalDteLoopbackEnabledTrap=ty1250LocalDteLoopbackEnabledTrap, ty1250DiagUnitTable=ty1250DiagUnitTable, ty1250LocalNetLoopbackFailedTrap=ty1250LocalNetLoopbackFailedTrap, dsucsu=dsucsu, ty1250LineInServiceTrap=ty1250LineInServiceTrap, ty1250CallUpTime=ty1250CallUpTime, ty1250StatsDteTxByteCount=ty1250StatsDteTxByteCount, ty1250SysNumDteInstalled=ty1250SysNumDteInstalled, ty1250SysSoftRev=ty1250SysSoftRev, ty1250SimplexCurrentLoopbackDisabledTrap=ty1250SimplexCurrentLoopbackDisabledTrap, ty1250SimplexCurrentLoopbackEnabledTrap=ty1250SimplexCurrentLoopbackEnabledTrap, ty1250SysName=ty1250SysName, ty1250CfgSnmpManagerIP=ty1250CfgSnmpManagerIP, ty1250CfgNetBPVThresholding=ty1250CfgNetBPVThresholding, ty1250CfgDialRi=ty1250CfgDialRi, ty1250StatsDteClearStats=ty1250StatsDteClearStats, ty1250CfgTelnetEnable=ty1250CfgTelnetEnable, ty1250DiagDteBerStatus=ty1250DiagDteBerStatus, tyview=tyview, ty1250CfgTelnetTable=ty1250CfgTelnetTable, ty1250CfgNetAnsMode=ty1250CfgNetAnsMode, ty1250SysNumMaintInstalled=ty1250SysNumMaintInstalled, ty1250DiagNetRmtLpbk=ty1250DiagNetRmtLpbk, ty1250V54LoopUpInitiatedTrap=ty1250V54LoopUpInitiatedTrap, ty1250DiagDteBerErrors=ty1250DiagDteBerErrors, ty1250CfgMaintFlowCtrl=ty1250CfgMaintFlowCtrl, ty1250CfgSlipMyIP=ty1250CfgSlipMyIP, ty1250StatsNetBpvCount=ty1250StatsNetBpvCount, ty1250CallState=ty1250CallState, ty1250CfgSlipMaxMTU=ty1250CfgSlipMaxMTU, ty1250CfgAppClockSource=ty1250CfgAppClockSource, ty1250DiagDteBerState=ty1250DiagDteBerState, ty1250CfgNetNumRedial=ty1250CfgNetNumRedial, ty1250DiagDteTable=ty1250DiagDteTable, ty1250StatsNetLoopLength=ty1250StatsNetLoopLength, ty1250DiagNetLclLpbk=ty1250DiagNetLclLpbk, ty1250DiagDteLclLpbk=ty1250DiagDteLclLpbk, ty1250CfgMaintBaud=ty1250CfgMaintBaud, ty1250SysNumNetInstalled=ty1250SysNumNetInstalled, ty1250=ty1250, ty1250BPVThresholdAcceptableTrap=ty1250BPVThresholdAcceptableTrap, ty1250SysType=ty1250SysType, ty1250DiagDteBerErrSec=ty1250DiagDteBerErrSec, ty1250CfgSnmpTable=ty1250CfgSnmpTable)
