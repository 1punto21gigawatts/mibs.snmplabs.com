#
# PySNMP MIB module CISCO-ATM-SWITCH-FR-IWF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-SWITCH-FR-IWF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
AtmTrafficDescrParamIndex, = mibBuilder.importSymbols("ATM-MIB", "AtmTrafficDescrParamIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Unsigned32, = mibBuilder.importSymbols("CISCO-TC", "Unsigned32")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Integer32, Counter32, Bits, iso, Counter64, NotificationType, Gauge32, IpAddress, MibIdentifier, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Counter32", "Bits", "iso", "Counter64", "NotificationType", "Gauge32", "IpAddress", "MibIdentifier", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TruthValue, TimeStamp, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "DisplayString", "TextualConvention", "RowStatus")
ciscoAtmSwitchFrIwfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 112))
ciscoAtmSwitchFrIwfMIB.setRevisions(('2001-05-20 00:00', '2000-02-29 00:00', '1998-07-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmSwitchFrIwfMIB.setRevisionsDescriptions(('Added objects casfVcSignalStandardCalledIe, casfConfIfCledSpvcDeModeDef, casfConfIfCledSpvcClpModeDef.', "New UPC values of 'tag' and 'drop' were added for IDSL support.", 'Initial version.',))
if mibBuilder.loadTexts: ciscoAtmSwitchFrIwfMIB.setLastUpdated('200105200000Z')
if mibBuilder.loadTexts: ciscoAtmSwitchFrIwfMIB.setOrganization('Cisco Systems')
if mibBuilder.loadTexts: ciscoAtmSwitchFrIwfMIB.setContactInfo(' Cisco Systems, Inc. 170 West Tasman Drive, San Jose CA 95134-1706. Phone: +1 408 526 5260 Email: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmSwitchFrIwfMIB.setDescription('A MIB module for managing Frame Relay to ATM interworking connections, and Frame Relay to Frame Relay switched connections via an ATM switching fabric, on a Cisco ATM switch.')
ciscoAtmSwitchFrIwfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1))
casfFrTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1))
casfFrVC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2))
casfFrInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3))
casfFrCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4))
casfMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5))
class CasfTrafficDescrRow(TextualConvention, Unsigned32):
    description = 'Identifies an index into the casfTrafficDescrTable. The value 0 signifies that no row has been identified.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class DlciValue(TextualConvention, Integer32):
    reference = 'ITU Recommendation Q.922, ISDN Data Link Layer Specification For Frame Mode Bearer Services.'
    description = 'A numerical value identifying a Data Link Connection Identifier (DLCI) for a Frame Relay connection. The valid range of values depends on the format of the address field used, as described in ITU Recommendation Q.922. When a 2-octet address field is used, the value ranges from 0 to 1023.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4194303)

class ConnectionKind(TextualConvention, Integer32):
    description = 'The kind of connection, distinguished by the use of call control.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("pvc", 1), ("svcIncoming", 2), ("svcOutgoing", 3), ("spvcInitiator", 4), ("spvcTarget", 5))

class AtmAddr(TextualConvention, OctetString):
    description = 'An ATM address. The semantics are implied by the length. The address types are: - no address (0 octets) - E.164 (8 octets) - NSAP (20 octets) In addition, when subaddresses are used the AtmAddr may represent the concatenation of address and subaddress. The associated address types are: - E.164, E.164 (16 octets) - E.164, NSAP (28 octets) - NSAP, NSAP (40 octets) Address lengths other than defined in this definition imply address types defined elsewhere. Note: The E.164 address is encoded in BCD format.'
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 40)

casfTrafficDescrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1), )
if mibBuilder.loadTexts: casfTrafficDescrTable.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrTable.setDescription("This table contains a set of self-consistent Frame Relay traffic parameters. It is intended to be used to create Frame Relay to ATM interworking connections, hence a ATM traffic service category is also included. An entry in this table is associated with an equivalent entry in the ATM traffic descriptor table (atmTrafficDescrParamTable); the mapping is given by the object casfTrafficDescrAtmIndex. The agent will not permit deletion of the associated atmTrafficDescrEntry while the Frame Relay Traffic Descriptor entry exists. When creating an entry in this table, if the value of casfTrafficDescrAtmIndex is specified, the following cases are possible: (a) if no corresponding row exists in atmTrafficDescrParamTable, the agent will create such a row with the given index value. (b) if a corresponding row does exist in atmTrafficDescrParamTable, the agent compares the parameter values in casfTrafficDescrEntry and the corresponding atmTrafficDescrParamEntry. If the two entries are not equivalent, an error is returned, and row creation fails. When creating an entry in this table, if the value of casfTrafficDescrAtmIndex is not specified, the agent will assign a value to this object so that it refers to an equivalent entry in the atmTrafficDescrParamTable. If such an equivalent entry does not already exist, the agent will create one. The agent creates rows in this table for use with signaled connections. These are called 'transient' rows - they disappear when the connection is torn down, and are not saved in non-volatile memory. By convention, transient rows usually use high-numbered index values. Entries can be deleted by setting the row status to destroy(6). The agent denies the request if the row is in use by existing connections.")
casfTrafficDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrIndex"))
if mibBuilder.loadTexts: casfTrafficDescrEntry.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrEntry.setDescription('Describes a traffic descriptor that is used by Frame Relay connections.')
casfTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 1), CasfTrafficDescrRow())
if mibBuilder.loadTexts: casfTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrIndex.setDescription('Uniquely identifies a row in this table.')
casfTrafficDescrCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 2), Unsigned32()).setUnits('bits/sec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrCIR.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrCIR.setDescription('The value of the Committed Information Rate (CIR) parameter.')
casfTrafficDescrBc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 3), Unsigned32()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrBc.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrBc.setDescription('The value of the Committed Burst Size (Bc) parameter.')
casfTrafficDescrBe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 4), Unsigned32()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrBe.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrBe.setDescription('The value of the Excess Burst Size (Be) parameter.')
casfTrafficDescrPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 5), Unsigned32()).setUnits('bits/sec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrPIR.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrPIR.setDescription('The value of the Peak Information Rate (PIR) parameter.')
casfTrafficDescrServCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vbrNrt", 1), ("abr", 2), ("ubr", 3), ("vbrRt", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrServCategory.setReference('ATM Forum Traffic Management Specification, Version 4.0, af-tm-0056.000, June 1996.')
if mibBuilder.loadTexts: casfTrafficDescrServCategory.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrServCategory.setDescription('The service category, as defined for ATM.')
casfTrafficDescrAtmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 7), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrAtmIndex.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrAtmIndex.setDescription('The index of the equivalent entry in the atmTrafficDescrParamTable.')
casfTrafficDescrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrRowStatus.setStatus('current')
if mibBuilder.loadTexts: casfTrafficDescrRowStatus.setDescription('Used to create, delete and modify this row. None of the columnar values (other than this one) can be modified while the row is active.')
casfVcEndptTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1), )
if mibBuilder.loadTexts: casfVcEndptTable.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptTable.setDescription("This table contains information about Frame Relay end-points of FR-ATM interworking connections on the switch. When an entry is created in this table, the agent creates a corresponding entry in the atmVclTable of ATM-MIB, to represent the configuration on the internal ATM port. The mapping between an entry in this table, and the corresponding entry in the atmVclTable is shown in the casfFAMapTable and the casfAFMapTable. Entries can be created or deleted in this table by an NMS using the casfVcEndptRowStatus object. To create a PVC connection end-point, the value of casfVcEndptConnKind must be 'pvc'. To create a soft VC initiator end-point, set the value of casfVcEndptConnKind to 'spvcInitiator', and specify the value of casfVcEndptSpvcRemoteAddr and casfVcEndptSpvcRemoteType. If the value of casfVcEndptSpvcRemoteType is 'frameRelay', you must also specify the value of casfVcEndptSpvcRemoteDlci. Activating the conceptual row will then cause the agent to attempt to establish a connection to the remote frame relay interface. If the value of casfVcEndptSpvcRemoteType is 'atm', you must specify the values of casfVcEndptSpvcRemoteVpi and casfVcEndptSpvcRemoteVci. Activating the conceptual row will then cause the agent to attempt to establish a connection to the remote ATM interface. The agent creates an entry in this table when an incoming signaling request causes a soft VC connection to be established with a local frame relay interface as the destination. The value of casfVcEndptConnKind in this case will be 'spvcTarget'. Such entries cannot be modified or deleted by network management. They will be deleted when the connection is removed by signaling.")
casfVcEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptDlci"))
if mibBuilder.loadTexts: casfVcEndptEntry.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptEntry.setDescription('Models a bidirectional Frame Relay VC end-point. The ifIndex identifies an ifTable entry for a Frame Relay interface on this device.')
casfVcEndptDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 1), DlciValue())
if mibBuilder.loadTexts: casfVcEndptDlci.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptDlci.setDescription('The value of the Data Link Connection Identifier (DLCI) which identifies this connection end-point.')
casfVcEndptRxTrafficDescrRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 2), CasfTrafficDescrRow()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptRxTrafficDescrRow.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptRxTrafficDescrRow.setDescription('Identifies the entry in the casfTrafficDescrTable which applies to the receive direction at this connection end-point. For connections that negotiate traffic parameters through signaling (e.g. ABR connections), this object points to the desired traffic parameters, while the object casfVcEndptRxNegTrafficDescrRow points to the negotiated traffic parameters, for the receive direction.')
casfVcEndptTxTrafficDescrRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 3), CasfTrafficDescrRow()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptTxTrafficDescrRow.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptTxTrafficDescrRow.setDescription('Identifies the entry in the casfTrafficDescrTable which applies to the transmit direction at this connection end-point. For connections that negotiate traffic parameters through signaling (e.g. ABR connections), this object points to the desired traffic parameters, while the object casfVcEndptTxNegTrafficDescrRow points to the negotiated traffic parameter, for the transmit direction.')
casfVcEndptRxNegTrafficDescrRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 4), CasfTrafficDescrRow()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcEndptRxNegTrafficDescrRow.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptRxNegTrafficDescrRow.setDescription('Identifies the entry in the casfTrafficDescrTable which contains negotiated traffic parameters applied to the receive direction of this connection end-point. This object is not instantiated if this is not the calling side of a soft VC, or if there is no traffic negotiation.')
casfVcEndptTxNegTrafficDescrRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 5), CasfTrafficDescrRow()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcEndptTxNegTrafficDescrRow.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptTxNegTrafficDescrRow.setDescription('Identifies the entry in the casfTrafficDescrTable which contains negotiated traffic parameters applied to the transmit direction of this connection endpoint. This object is not instantiated if this is not the calling side of a soft VC, or if there is no traffic negotiation.')
casfVcEndptConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 6), ConnectionKind().clone('pvc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptConnKind.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptConnKind.setDescription("The connection kind. The value can be set prior to the row becoming 'active'. To create a pvc connection endpoint, set this value to pvc(1). To create a soft VC connection endpoint, set this value to spvcInitiator(4), and specify the value of casfVcEndptSpvcRemoteAddr. The values svcIncoming(2), svcOutgoing(3), and spvcTarget(5) can not be written.")
casfVcEndptIwfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("network", 1), ("serviceTransparent", 2), ("serviceTranslation", 3), ("rfc1973", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptIwfType.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptIwfType.setDescription("The type of the interworking function. The value can be set prior to the row becoming 'active'.")
casfVcEndptClpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clpIfDe", 1), ("clpIsZero", 2), ("clpIsOne", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptClpMode.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptClpMode.setDescription('Specifies how to map from Discard Eligibility (DE) bit on the Frame Relay side to Congestion Loss Priority (CLP) bit on the ATM side. For network interworking, clpIfDe(1) corresponds to Mode 1 as defined in FRF.5, section 4.4.1. clpIsZero(2) and clpIsOne(3) correspond to Mode 2 as defined in FRF.5, section 4.4.1. For service interworking, clpIfDe(1) corresponds to Mode 1 as defined in FRF.8, section 4.2.1. clpIsZero(2) and clpIsOne(3) correspond to Mode 2 as defined in FRF.8, section 4.2.1.')
casfVcEndptDeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deIfClpOrFrsscsDe", 1), ("deIfFrsscsDe", 2), ("deIfClp", 3), ("deIsZero", 4), ("deIsOne", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptDeMode.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptDeMode.setDescription('Specifies how to map from Congestion Loss Priority (CLP) bit on the ATM side to Discard Eligibility (DE) bit on the Frame Relay side. See the Frame Relay Forum specifications FRF.5 and FRF.8 for definitions of Mode 1 and Mode 2. For network interworking, the valid values are: deIfClpOrFrsscsDe(1) -- Mode 1 of FRF.5 section 4.4.2 deIfFrsscsDe(2) -- Mode 2 of FRF.5 section 4.4.2 For service interworking, the valid values are: deIfClp(3) -- Mode 1 of FRF.8 section 4.2.2 deIsZero(4) and deIsOne(5) -- Mode 2 of FRF.8 section 4.2.2 ')
casfVcEndptEfciMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("efciIfFecn", 1), ("efciIsZero", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptEfciMode.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptEfciMode.setDescription('Specifies how to map from FECN field in the Frame Relay PDU to the EFCI field in ATM cells, in case of service interworking. This object does not apply to network interworking. efciIfFecn(1) and efciIsZero(2) correspond to Mode 1 and Mode 2 (as defined in FRF.8, section 4.3.1.1), respectively.')
casfVcEndptUpcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("tagDrop", 2), ("tag", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptUpcMode.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptUpcMode.setDescription('Specifies the action taken by Usage Parameter Control (UPC) at the ingress port.')
casfVcEndptSpvcRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 12), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteAddr.setDescription("The ATM address of the remote end of the soft VC. The value can be set prior to the row becoming 'active', and if the value of casfVcEndptConnKind is spvcInitiator(4). The agent will return an inconsistentValue error on sets if the value of casfVcEndptConnKind is other than spvcInitiator(4). If the value of casfVcEndptConnKind spvcTarget(5), this object is initialized by the agent. This object is instantiated only if the value of casfVcEndptConnKind is spvcInitiator(4) or spvcTarget(5).")
casfVcEndptSpvcRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("frameRelay", 2), ("atm", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteType.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteType.setDescription('The type of the remote end of the soft VC. This object is instantiated only if the value of casfVcEndptConnKind is spvcInitiator(4) or spvcTarget(5). The agent will return an inconsistentValue error on sets if the value of casfVcEndptConnKind is other than spvcInitiator(4) or spvcTarget(5).')
casfVcEndptSpvcRemoteDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 14), DlciValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteDlci.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteDlci.setDescription("The DLCI value to be used at the remote end of the soft VC. The value can be set prior to the row becoming 'active', and if the value of casfVcEndptConnKind is spvcInitiator(4), and the value of casfVcEndptSpvcRemoteType is frameRelay(2). The object is instantiated only if the value of casfVcEndptSpvcRemoteType is frameRelay(2). The agent will return an inconsistentValue error on sets if the value of casfVcEndptSpvcRemoteType is other than frameRelay(2).")
casfVcEndptSpvcRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteVpi.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteVpi.setDescription("The VPI value to be used at the remote end of the soft VC. The value can be set prior to the row becoming 'active', and if the value of casfVcEndptConnKind is spvcInitiator(4), and the value of casfVcEndptSpvcRemoteType is atm(3). The object is instantiated only if the value of casfVcEndptSpvcRemoteType is atm(3). The agent will return an inconsistentValue error on sets if the value of casfVcEndptSpvcRemoteType is other than atm(3).")
casfVcEndptSpvcRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteVci.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteVci.setDescription("The VCI value to be used at the remote end of the soft VC. The value can be set prior to the row becoming 'active', and if the value of casfVcEndptConnKind is spvcInitiator(4), and the value of casfVcEndptSpvcRemoteType is atm(3). The object is instantiated only if the value of casfVcEndptSpvcRemoteType is atm(3). The agent will return an inconsistentValue error on sets if the value of casfVcEndptSpvcRemoteType is other than atm(3).")
casfVcEndptCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcEndptCreationTime.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptCreationTime.setDescription('The time when this row was created.')
casfVcEndptRcvdSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deleted", 1), ("active", 2), ("inactive", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcEndptRcvdSigStatus.setReference(' Q.933 Annex A. This object is a copy of frPVCEndptRcvdSigStatus from RFC1604.')
if mibBuilder.loadTexts: casfVcEndptRcvdSigStatus.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptRcvdSigStatus.setDescription('The value of this object identifies the PVC status received via the local in-channel signaling procedures for this PVC end-point. This object is only pertinent for interfaces that perform the bidirectional procedures. For user-to-network network side procedures, the value of this object should be none(4).')
casfVcEndptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptRowStatus.setStatus('current')
if mibBuilder.loadTexts: casfVcEndptRowStatus.setDescription('Used to create, modify or delete this row.')
casfVcSignalStandardCalledIe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcSignalStandardCalledIe.setReference(' ATM Forum specification AF-CS-0127.000 for standard encoding of Soft PVC IE.')
if mibBuilder.loadTexts: casfVcSignalStandardCalledIe.setStatus('current')
if mibBuilder.loadTexts: casfVcSignalStandardCalledIe.setDescription('Specifies whether or not to signal the standard (from the ATM-Forum PNNI Soft PVC Addendum) format of the Called Soft PVC IE, as opposed to the proprietary encoding we have used for the network-interworking case to a frame-relay destination.')
casfFrLmiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1), )
if mibBuilder.loadTexts: casfFrLmiTable.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiTable.setDescription('This table contains frame relay Local Management Interface (LMI) parameters and counters. There is one entry for each frame relay interface. Entries come and go in this table as frame relay interfaces are created and deleted in the device.')
casfFrLmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: casfFrLmiEntry.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiEntry.setDescription('Frame relay LMI objects for a particular frame relay interface, which is identified by the ifIndex value in the INDEX clause.')
casfFrLmiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("ansiT1617D", 3), ("ansiT1617B", 4), ("ccittQ933A", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiProtocol.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiProtocol.setDescription('Identifies the Local In-Channel Signaling Protocol that is used for this frame relay port.')
casfFrLmiType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiType.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiType.setDescription('Identifies the Local In-Channel Signaling Procedure that is used for this frame relay port. A dte performs only user-side procedures. A dce performs only network-side procedures. An nni performs bidirectional procedures.')
casfFrLmiUserN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiUserN391.setReference('Draft American National Standard T1.617-1991, Section D.7 Counter N391.')
if mibBuilder.loadTexts: casfFrLmiUserN391.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiUserN391.setDescription('Number of status enquiry intervals that pass before issuance of a full status enquiry mes- sage.')
casfFrLmiUserN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiUserN392.setReference('Draft American National Standard T1.617-1991, Section D.5.1 Counter N392.')
if mibBuilder.loadTexts: casfFrLmiUserN392.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiUserN392.setDescription('The maximum number of unanswered Status Enquiries the device shall accept before declaring the interface down.')
casfFrLmiUserN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiUserN393.setReference('Draft American National Standard T1.617-1991, Section D.5.2 Counter N393.')
if mibBuilder.loadTexts: casfFrLmiUserN393.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiUserN393.setDescription('The number of status polling intervals over which the error threshold is counted. For example, if within N393 number of events the device receives N392 number of errors, the interface is marked as down.')
casfFrLmiUserT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiUserT391.setReference('Draft American National Standard T1.617-1991, Section D.7 Timer T391.')
if mibBuilder.loadTexts: casfFrLmiUserT391.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiUserT391.setDescription('The number of seconds between successive status enquiry messages.')
casfFrLmiNetN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiNetN392.setReference('Draft American National Standard T1.617-1991, Section D.7 Timer N392.')
if mibBuilder.loadTexts: casfFrLmiNetN392.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiNetN392.setDescription('The value of the network-side error threshold for this frame relay port.')
casfFrLmiNetN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiNetN393.setReference('Draft American National Standard T1.617-1991, Section D.7 Timer N393.')
if mibBuilder.loadTexts: casfFrLmiNetN393.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiNetN393.setDescription('The value of the network-side monitored events count for this frame relay port. If, within N393 number of events, the network-side receives N392 number of errors, the interface is marked as down.')
casfFrLmiNetT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiNetT392.setReference('Draft American National Standard T1.617-1991, Section D.7 Timer T392.')
if mibBuilder.loadTexts: casfFrLmiNetT392.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiNetT392.setDescription('The value of the network-side polling verification timer for this frame relay port.')
casfFrLmiEnquiryIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiEnquiryIns.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiEnquiryIns.setDescription('Number of Status Enquiry messages received.')
casfFrLmiEnquiryOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiEnquiryOuts.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiEnquiryOuts.setDescription('Number of Status Enquiry messages sent.')
casfFrLmiStatusIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 12), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiStatusIns.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiStatusIns.setDescription('Number of Status messages received.')
casfFrLmiStatusOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 13), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiStatusOuts.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiStatusOuts.setDescription('Number of Status messages sent.')
casfFrLmiStatusTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiStatusTimeouts.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiStatusTimeouts.setDescription('Number of times when timeout occurred on waiting for Status message')
casfFrLmiStatusEnqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiStatusEnqTimeouts.setStatus('current')
if mibBuilder.loadTexts: casfFrLmiStatusEnqTimeouts.setDescription('Number of times when timeout occurred on waiting for Status Enquiry message')
casfConfIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2), )
if mibBuilder.loadTexts: casfConfIfTable.setStatus('current')
if mibBuilder.loadTexts: casfConfIfTable.setDescription('Contains an entry for each Frame Relay interface that supports FR-ATM interworking connections. An entry contains interworking related parameters for the interface.')
casfConfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: casfConfIfEntry.setStatus('current')
if mibBuilder.loadTexts: casfConfIfEntry.setDescription('Configuration parameters for interworking at a Frame Relay interface.')
casfConfIfAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 1), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfConfIfAtmAddress.setStatus('current')
if mibBuilder.loadTexts: casfConfIfAtmAddress.setDescription("The ATM Address that identifies this interface. This address can be used to setup soft VC's to this interface over an ATM network.")
casfConfIfUpcIntent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("tagDrop", 2), ("tag", 3), ("drop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfConfIfUpcIntent.setStatus('current')
if mibBuilder.loadTexts: casfConfIfUpcIntent.setDescription('Specifies the default Usage Parameter Control (UPC) action to use at this interface for connections that do not explicitly specify a UPC action.')
casfConfIfBcDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setUnits('bits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfConfIfBcDefault.setStatus('current')
if mibBuilder.loadTexts: casfConfIfBcDefault.setDescription('Specifies the default Committed Burst Size (Bc) value to use at this interface for connections that do not explicitly specify the value of Bc.')
casfConfIfCledSpvcDeModeDef = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deIfClpOrFrsscsDe", 1), ("deIfFrsscsDe", 2))).clone('deIfClpOrFrsscsDe')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfConfIfCledSpvcDeModeDef.setReference(' ATM Forum specification AF-CS-0127.000 for standard encoding of Soft PVC IE.')
if mibBuilder.loadTexts: casfConfIfCledSpvcDeModeDef.setStatus('current')
if mibBuilder.loadTexts: casfConfIfCledSpvcDeModeDef.setDescription('Specifies the default mapping from Congestion Loss Priority (CLP) bit on the ATM side to Discard Eligibility (DE) bit on the Frame Relay side. This is used when receiving a soft PVC Setup using the standard encoding of the called Soft PVC IE. Otherwise a proprietary encoding provides this information.')
casfConfIfCledSpvcClpModeDef = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clpIfDe", 1), ("clpIfIsZero", 2), ("clpIfIsOne", 3))).clone('clpIfDe')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfConfIfCledSpvcClpModeDef.setReference(' ATM Forum specification AF-CS-0127.000 for standard encoding of Soft PVC IE.')
if mibBuilder.loadTexts: casfConfIfCledSpvcClpModeDef.setStatus('current')
if mibBuilder.loadTexts: casfConfIfCledSpvcClpModeDef.setDescription('Specifies the default mapping from Discard Eligibility (DE) bit on the Frame Relay side to Congestion Loss Priority (CLP) bit on the ATM side.This is used when receiving a soft PVC Setup using the standard encoding of the called Soft PVC IE. Otherwise a proprietary encoding provides this information.')
casfVcCountTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1), )
if mibBuilder.loadTexts: casfVcCountTable.setStatus('current')
if mibBuilder.loadTexts: casfVcCountTable.setDescription('A table containing counters at Frame Relay connection end-points. Entries in this table are created and deleted whenever corresponding entries in the casfVcEndptTable are created and deleted.')
casfVcCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptDlci"))
if mibBuilder.loadTexts: casfVcCountEntry.setStatus('current')
if mibBuilder.loadTexts: casfVcCountEntry.setDescription('Counters at a Frame Relay connection end-point, which is identified by the ifIndex of the Frame Relay interface and the DLCI number.')
casfVcCountReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: casfVcCountReceivedFrames.setDescription('Number of frames received.')
casfVcCountReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 2), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedOctets.setStatus('current')
if mibBuilder.loadTexts: casfVcCountReceivedOctets.setDescription('Number of octets received. This counter counts octets from the beginning of the frame relay header field to the end of user data.')
casfVcCountReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedFECNs.setStatus('current')
if mibBuilder.loadTexts: casfVcCountReceivedFECNs.setDescription('Number of frames received from the network with the FECN (Forward Explicit Congestion Notification) bit set.')
casfVcCountReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedBECNs.setStatus('current')
if mibBuilder.loadTexts: casfVcCountReceivedBECNs.setDescription('Number of frames received from the network with the BECN (Backward Explicit Network Congestion) bit set.')
casfVcCountReceivedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedDEs.setStatus('current')
if mibBuilder.loadTexts: casfVcCountReceivedDEs.setDescription('Number of frames received with the Discard Eligibility (DE) bit set.')
casfVcCountInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountInDiscards.setStatus('current')
if mibBuilder.loadTexts: casfVcCountInDiscards.setDescription('Number of frames received that were discarded at ingress. Possible reasons are policing, congestion.')
casfVcCountOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountOutDiscards.setStatus('current')
if mibBuilder.loadTexts: casfVcCountOutDiscards.setDescription('Number of frames that were to be transmitted but were discarded. Possible reasons are policing, lack of buffers.')
casfVcCountSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentFrames.setStatus('current')
if mibBuilder.loadTexts: casfVcCountSentFrames.setDescription('Number of frames sent.')
casfVcCountSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 9), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentOctets.setStatus('current')
if mibBuilder.loadTexts: casfVcCountSentOctets.setDescription('Number of octets sent. This counter counts octets from the beginning of the frame relay header field to the end of user data.')
casfVcCountSentFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentFECNs.setStatus('current')
if mibBuilder.loadTexts: casfVcCountSentFECNs.setDescription('Number of frames that were sent with the FECN bit set.')
casfVcCountSentBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentBECNs.setStatus('current')
if mibBuilder.loadTexts: casfVcCountSentBECNs.setDescription('Number of frames sent with the BECN bit set.')
casfVcCountSentDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 12), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentDEs.setStatus('current')
if mibBuilder.loadTexts: casfVcCountSentDEs.setDescription('Number of frames sent with the DE bit set.')
casfVcCountTaggedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountTaggedFECNs.setStatus('current')
if mibBuilder.loadTexts: casfVcCountTaggedFECNs.setDescription('Number of frames for which the switch set the FECN bit.')
casfVcCountTaggedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 14), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountTaggedBECNs.setStatus('current')
if mibBuilder.loadTexts: casfVcCountTaggedBECNs.setDescription('Number of frames for which the switch set the BECN bit.')
casfVcCountTaggedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 15), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountTaggedDEs.setStatus('current')
if mibBuilder.loadTexts: casfVcCountTaggedDEs.setDescription('Number of frames for which the switch set the DE bit.')
casfVcIwfCountTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2), )
if mibBuilder.loadTexts: casfVcIwfCountTable.setStatus('current')
if mibBuilder.loadTexts: casfVcIwfCountTable.setDescription('This table contains counters at the Frame Relay endpoint of FR-ATM interworking connections. There is an entry in this table corresponding to each entry in casfVcEndptTable.')
casfVcIwfCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptDlci"))
if mibBuilder.loadTexts: casfVcIwfCountEntry.setStatus('current')
if mibBuilder.loadTexts: casfVcIwfCountEntry.setDescription('A set of counters at the Frame Relay endpoint of a FR-ATM interworking connection.')
casfVcIwfCountInUnknownProts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountInUnknownProts.setStatus('current')
if mibBuilder.loadTexts: casfVcIwfCountInUnknownProts.setDescription('Frames received with unknown protocol. This event is counted only for connections with service interworking in translation mode. For other types of connections, this count will remain at zero.')
casfVcIwfCountOutUnknownProts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountOutUnknownProts.setStatus('current')
if mibBuilder.loadTexts: casfVcIwfCountOutUnknownProts.setDescription('Outbound frames that were not transmitted because they contained an unknown protocol. This event is counted only for connections with service interworking in translation mode. For other types of connections, this count will remain at zero.')
casfVcIwfCountReassemblyTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountReassemblyTimeouts.setStatus('current')
if mibBuilder.loadTexts: casfVcIwfCountReassemblyTimeouts.setDescription('The number of frames which could not be completely reassembled due to a reassembly timeout, and were thus discarded before being transmitted on this connection.')
casfVcIwfCountLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountLengthErrors.setStatus('current')
if mibBuilder.loadTexts: casfVcIwfCountLengthErrors.setDescription('The number of reassembled frames intended to be transmitted on this connection for which the AAL5 PDU trailer length fields did not match the actual PDU length, and were thus discarded.')
casfVcIwfCountCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountCrcErrors.setStatus('current')
if mibBuilder.loadTexts: casfVcIwfCountCrcErrors.setDescription('The number of reassembled frames intended to be transmitted on this connection for which the AAL5 PDU had CRC errors, and were thus discarded.')
casfVcIwfCountTotalDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountTotalDiscardFrames.setStatus('current')
if mibBuilder.loadTexts: casfVcIwfCountTotalDiscardFrames.setDescription('The number of frames intended to be transmitted on this connection that were discarded due to any reason including those described in other objects in this table (e.g., frames that were discarded because insufficient buffer space was available for reassembling the frame).')
casfFAMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1), )
if mibBuilder.loadTexts: casfFAMapTable.setStatus('current')
if mibBuilder.loadTexts: casfFAMapTable.setDescription('This table provides mapping from a DLCI on a Frame Relay interface to a VPI/VCI on an internal ATM interface.')
casfFAMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFAMapDlci"))
if mibBuilder.loadTexts: casfFAMapEntry.setStatus('current')
if mibBuilder.loadTexts: casfFAMapEntry.setDescription('Given the ifIndex of a frame relay interface, and a DLCI on that interface, this entry provides the ifIndex and VPI/VCI on the corresponding internal atm interface.')
casfFAMapDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1, 1), DlciValue())
if mibBuilder.loadTexts: casfFAMapDlci.setStatus('current')
if mibBuilder.loadTexts: casfFAMapDlci.setDescription('The DLCI value.')
casfFAMapInternalAtmInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFAMapInternalAtmInterface.setStatus('current')
if mibBuilder.loadTexts: casfFAMapInternalAtmInterface.setDescription('The ifIndex of the internal ATM interface to which this DLCI is mapped.')
casfFAMapInternalAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFAMapInternalAtmVpi.setStatus('current')
if mibBuilder.loadTexts: casfFAMapInternalAtmVpi.setDescription('The VPI value to which this DLCI is mapped.')
casfFAMapInternalAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFAMapInternalAtmVci.setStatus('current')
if mibBuilder.loadTexts: casfFAMapInternalAtmVci.setDescription('The VCI value to which this DLCI is mapped.')
casfAFMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2), )
if mibBuilder.loadTexts: casfAFMapTable.setStatus('current')
if mibBuilder.loadTexts: casfAFMapTable.setDescription('This table provides mapping from an atmVclEntry on an internal ATM internal to a casfVcEndptEntry on a Frame Relay interface.')
casfAFMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfAFMapAtmVpi"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfAFMapAtmVci"))
if mibBuilder.loadTexts: casfAFMapEntry.setStatus('current')
if mibBuilder.loadTexts: casfAFMapEntry.setDescription('Given the ifIndex of an internal ATM interface, and VPI/VCI, provides the ifIndex of a Frame Relay interface and DLCI, if such mapping exists. The value of ifType for an internal ATM interface is propVirtual(53). For every such interface on the switch, this table contains an entry for each virtual channel link (VCL) that maps to a frame relay connection. Entries in this table come and go as the corresponding frame relay connections come and go.')
casfAFMapAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: casfAFMapAtmVpi.setStatus('current')
if mibBuilder.loadTexts: casfAFMapAtmVpi.setDescription('The VPI value of the Virtual Channel Link (VCL) on the ATM interface.')
casfAFMapAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: casfAFMapAtmVci.setStatus('current')
if mibBuilder.loadTexts: casfAFMapAtmVci.setDescription('The VCI value of the Virtual Channel Link (VCL) on the ATM interface.')
casfAFMapFrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfAFMapFrIndex.setStatus('current')
if mibBuilder.loadTexts: casfAFMapFrIndex.setDescription('The ifIndex of the frame relay interface that this VCL maps to.')
casfAFMapFrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1, 4), DlciValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfAFMapFrDlci.setStatus('current')
if mibBuilder.loadTexts: casfAFMapFrDlci.setDescription('The DLCI on the frame relay interface that this VCL maps to.')
ciscoAtmSFrIwfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 3))
ciscoAtmSFrIwfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 1))
ciscoAtmSFrIwfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2))
ciscoAtmSFrIwfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 1, 1)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfConfConnGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfLmiGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfConfIfGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfVcStatsGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfVcIwStatsGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfMIBCompliance = ciscoAtmSFrIwfMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSFrIwfMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Atm Switch FR IWF MIB.')
ciscoAtmSFrIwfConfConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 1)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrCIR"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrBc"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrBe"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrPIR"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrServCategory"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrAtmIndex"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrRowStatus"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptRxTrafficDescrRow"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptTxTrafficDescrRow"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptRxNegTrafficDescrRow"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptTxNegTrafficDescrRow"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptConnKind"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptIwfType"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptClpMode"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptDeMode"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptEfciMode"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptUpcMode"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptCreationTime"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptRcvdSigStatus"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteAddr"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteType"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteDlci"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteVpi"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteVci"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptRowStatus"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcSignalStandardCalledIe"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfConfConnGroup = ciscoAtmSFrIwfConfConnGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSFrIwfConfConnGroup.setDescription('A collection of objects which allow configuration of FR-ATM connections on an ATM switch.')
ciscoAtmSFrIwfLmiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 2)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiProtocol"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiType"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiUserN391"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiUserN392"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiUserN393"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiUserT391"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiNetN392"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiNetN393"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiNetT392"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiEnquiryIns"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiEnquiryOuts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiStatusIns"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiStatusOuts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiStatusTimeouts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiStatusEnqTimeouts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfLmiGroup = ciscoAtmSFrIwfLmiGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSFrIwfLmiGroup.setDescription('A collection of objects for configuring and monitoring LMI on an FR interface.')
ciscoAtmSFrIwfConfIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 3)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfAtmAddress"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfUpcIntent"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfBcDefault"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfCledSpvcDeModeDef"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfCledSpvcClpModeDef"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfConfIfGroup = ciscoAtmSFrIwfConfIfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSFrIwfConfIfGroup.setDescription('A collection of objects which allow configuration of interworking related parameters on an FR interface.')
ciscoAtmSFrIwfVcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 4)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedFrames"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedOctets"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedFECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedBECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedDEs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountInDiscards"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountOutDiscards"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentFrames"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentOctets"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentFECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentBECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentDEs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountTaggedFECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountTaggedBECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountTaggedDEs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfVcStatsGroup = ciscoAtmSFrIwfVcStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSFrIwfVcStatsGroup.setDescription('A collection of counters at FR VC end-points.')
ciscoAtmSFrIwfVcIwStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 5)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountInUnknownProts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountOutUnknownProts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountReassemblyTimeouts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountLengthErrors"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountCrcErrors"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountTotalDiscardFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfVcIwStatsGroup = ciscoAtmSFrIwfVcIwStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSFrIwfVcIwStatsGroup.setDescription('A collection of counters related to FR-ATM interworking at FR VC end-points.')
ciscoAtmSFrIwfMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 6)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFAMapInternalAtmInterface"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFAMapInternalAtmVpi"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFAMapInternalAtmVci"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfAFMapFrIndex"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfAFMapFrDlci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfMappingGroup = ciscoAtmSFrIwfMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmSFrIwfMappingGroup.setDescription('A collection of objects that describe the mapping from a FR connection end-point to an ATM VCL, and vice versa.')
mibBuilder.exportSymbols("CISCO-ATM-SWITCH-FR-IWF-MIB", casfVcCountReceivedFECNs=casfVcCountReceivedFECNs, casfFrLmiNetN392=casfFrLmiNetN392, casfFrVC=casfFrVC, ciscoAtmSFrIwfMIBCompliances=ciscoAtmSFrIwfMIBCompliances, casfTrafficDescrPIR=casfTrafficDescrPIR, casfTrafficDescrEntry=casfTrafficDescrEntry, casfVcCountReceivedDEs=casfVcCountReceivedDEs, casfVcEndptTxNegTrafficDescrRow=casfVcEndptTxNegTrafficDescrRow, casfVcCountSentOctets=casfVcCountSentOctets, casfVcCountSentFrames=casfVcCountSentFrames, casfVcEndptTxTrafficDescrRow=casfVcEndptTxTrafficDescrRow, casfTrafficDescrBe=casfTrafficDescrBe, ciscoAtmSwitchFrIwfMIBObjects=ciscoAtmSwitchFrIwfMIBObjects, casfVcEndptRowStatus=casfVcEndptRowStatus, casfFrLmiStatusIns=casfFrLmiStatusIns, casfTrafficDescrRowStatus=casfTrafficDescrRowStatus, casfVcEndptIwfType=casfVcEndptIwfType, ciscoAtmSwitchFrIwfMIB=ciscoAtmSwitchFrIwfMIB, casfFrLmiNetT392=casfFrLmiNetT392, casfVcCountInDiscards=casfVcCountInDiscards, casfFrLmiEnquiryOuts=casfFrLmiEnquiryOuts, casfVcIwfCountInUnknownProts=casfVcIwfCountInUnknownProts, casfFAMapInternalAtmVci=casfFAMapInternalAtmVci, ciscoAtmSFrIwfConfIfGroup=ciscoAtmSFrIwfConfIfGroup, ciscoAtmSFrIwfLmiGroup=ciscoAtmSFrIwfLmiGroup, casfVcCountSentDEs=casfVcCountSentDEs, casfVcEndptRxTrafficDescrRow=casfVcEndptRxTrafficDescrRow, casfFAMapInternalAtmInterface=casfFAMapInternalAtmInterface, casfFAMapDlci=casfFAMapDlci, casfTrafficDescrTable=casfTrafficDescrTable, ciscoAtmSFrIwfConfConnGroup=ciscoAtmSFrIwfConfConnGroup, ciscoAtmSFrIwfMIBGroups=ciscoAtmSFrIwfMIBGroups, casfVcEndptSpvcRemoteType=casfVcEndptSpvcRemoteType, casfVcEndptRcvdSigStatus=casfVcEndptRcvdSigStatus, casfConfIfEntry=casfConfIfEntry, casfFrTraffic=casfFrTraffic, casfVcEndptTable=casfVcEndptTable, casfVcEndptEfciMode=casfVcEndptEfciMode, casfFrLmiStatusOuts=casfFrLmiStatusOuts, casfVcIwfCountEntry=casfVcIwfCountEntry, ciscoAtmSFrIwfVcStatsGroup=ciscoAtmSFrIwfVcStatsGroup, ciscoAtmSFrIwfMIBConformance=ciscoAtmSFrIwfMIBConformance, casfFrCounts=casfFrCounts, casfTrafficDescrIndex=casfTrafficDescrIndex, casfFrLmiStatusTimeouts=casfFrLmiStatusTimeouts, casfFrLmiUserN392=casfFrLmiUserN392, ciscoAtmSFrIwfVcIwStatsGroup=ciscoAtmSFrIwfVcIwStatsGroup, PYSNMP_MODULE_ID=ciscoAtmSwitchFrIwfMIB, casfVcIwfCountTable=casfVcIwfCountTable, casfAFMapEntry=casfAFMapEntry, casfTrafficDescrServCategory=casfTrafficDescrServCategory, casfVcCountSentFECNs=casfVcCountSentFECNs, DlciValue=DlciValue, casfFrLmiProtocol=casfFrLmiProtocol, casfConfIfCledSpvcClpModeDef=casfConfIfCledSpvcClpModeDef, casfVcEndptRxNegTrafficDescrRow=casfVcEndptRxNegTrafficDescrRow, casfAFMapFrIndex=casfAFMapFrIndex, casfVcEndptSpvcRemoteVci=casfVcEndptSpvcRemoteVci, casfVcEndptUpcMode=casfVcEndptUpcMode, casfVcCountTaggedDEs=casfVcCountTaggedDEs, casfVcCountSentBECNs=casfVcCountSentBECNs, AtmAddr=AtmAddr, casfVcIwfCountTotalDiscardFrames=casfVcIwfCountTotalDiscardFrames, casfVcEndptConnKind=casfVcEndptConnKind, casfVcSignalStandardCalledIe=casfVcSignalStandardCalledIe, casfVcIwfCountReassemblyTimeouts=casfVcIwfCountReassemblyTimeouts, casfVcCountReceivedFrames=casfVcCountReceivedFrames, casfFrLmiUserT391=casfFrLmiUserT391, casfFrLmiType=casfFrLmiType, casfVcIwfCountLengthErrors=casfVcIwfCountLengthErrors, casfFAMapInternalAtmVpi=casfFAMapInternalAtmVpi, casfFrInterface=casfFrInterface, casfVcEndptSpvcRemoteVpi=casfVcEndptSpvcRemoteVpi, casfFrLmiNetN393=casfFrLmiNetN393, casfAFMapAtmVpi=casfAFMapAtmVpi, casfVcEndptSpvcRemoteAddr=casfVcEndptSpvcRemoteAddr, casfConfIfCledSpvcDeModeDef=casfConfIfCledSpvcDeModeDef, casfFrLmiEntry=casfFrLmiEntry, casfFAMapTable=casfFAMapTable, casfFrLmiUserN393=casfFrLmiUserN393, casfVcEndptSpvcRemoteDlci=casfVcEndptSpvcRemoteDlci, casfVcIwfCountCrcErrors=casfVcIwfCountCrcErrors, casfTrafficDescrBc=casfTrafficDescrBc, casfVcCountReceivedBECNs=casfVcCountReceivedBECNs, CasfTrafficDescrRow=CasfTrafficDescrRow, casfFrLmiStatusEnqTimeouts=casfFrLmiStatusEnqTimeouts, casfAFMapFrDlci=casfAFMapFrDlci, ConnectionKind=ConnectionKind, casfAFMapAtmVci=casfAFMapAtmVci, casfTrafficDescrAtmIndex=casfTrafficDescrAtmIndex, ciscoAtmSFrIwfMappingGroup=ciscoAtmSFrIwfMappingGroup, casfVcEndptDlci=casfVcEndptDlci, casfFrLmiTable=casfFrLmiTable, casfVcIwfCountOutUnknownProts=casfVcIwfCountOutUnknownProts, ciscoAtmSFrIwfMIBCompliance=ciscoAtmSFrIwfMIBCompliance, casfAFMapTable=casfAFMapTable, casfConfIfAtmAddress=casfConfIfAtmAddress, casfVcEndptEntry=casfVcEndptEntry, casfVcCountReceivedOctets=casfVcCountReceivedOctets, casfTrafficDescrCIR=casfTrafficDescrCIR, casfVcCountTaggedBECNs=casfVcCountTaggedBECNs, casfVcEndptCreationTime=casfVcEndptCreationTime, casfFAMapEntry=casfFAMapEntry, casfConfIfTable=casfConfIfTable, casfVcCountTaggedFECNs=casfVcCountTaggedFECNs, casfConfIfUpcIntent=casfConfIfUpcIntent, casfMapping=casfMapping, casfFrLmiEnquiryIns=casfFrLmiEnquiryIns, casfVcCountEntry=casfVcCountEntry, casfVcEndptDeMode=casfVcEndptDeMode, casfVcEndptClpMode=casfVcEndptClpMode, casfConfIfBcDefault=casfConfIfBcDefault, casfFrLmiUserN391=casfFrLmiUserN391, casfVcCountOutDiscards=casfVcCountOutDiscards, casfVcCountTable=casfVcCountTable)
