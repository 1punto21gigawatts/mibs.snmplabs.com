#
# PySNMP MIB module CISCO-MOBILE-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MOBILE-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
InetAddressType, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressPrefixLength", "InetAddress")
faCOAEntry, mnRegAgentAddress, mnRegCOA, haMobilityBindingEntry, mnState, mnRegistrationEntry, RegistrationFlags, mnHAEntry = mibBuilder.importSymbols("MIP-MIB", "faCOAEntry", "mnRegAgentAddress", "mnRegCOA", "haMobilityBindingEntry", "mnState", "mnRegistrationEntry", "RegistrationFlags", "mnHAEntry")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, Counter64, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, NotificationType, iso, Unsigned32, Bits, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Counter64", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "NotificationType", "iso", "Unsigned32", "Bits", "IpAddress", "Integer32")
TextualConvention, MacAddress, TimeStamp, DateAndTime, RowStatus, DisplayString, TimeInterval, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "TimeStamp", "DateAndTime", "RowStatus", "DisplayString", "TimeInterval", "TruthValue")
ciscoMobileIpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 174))
ciscoMobileIpMIB.setRevisions(('2009-06-26 00:00', '2009-01-22 00:00', '2008-12-11 00:00', '2005-05-31 00:00', '2004-05-28 00:00', '2004-01-23 00:00', '2003-11-27 00:00', '2003-09-05 00:00', '2003-06-30 00:00', '2003-01-23 00:00', '2002-11-18 00:00', '2002-05-17 00:00', '2001-07-06 00:00', '2001-01-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMobileIpMIB.setRevisionsDescriptions(('Added cmiHaRegTunnelStatsTable The following objects has been added to cmiHaReg. [1] cmiHaRegIntervalSize [2] cmiHaRegIntervalMaxActiveBindings [3] cmiHaRegInterval3gpp2MaxActiveBindings [4] cmiHaRegIntervalWimaxMaxActiveBindings The following object groups has been added to ciscoMobileIpGroups. [1] ciscoMobileIpHaRegIntervalStatsGroup [2] ciscoMobileIpHaRegTunnelStatsGroup The MODULE-COMPLIANCE ciscoMobileIpComplianceRev1 has been deprecated by ciscoMobileIpComplianceRev2.', 'The following objects have been added [1] cmiHaMaximumBindings [2] cmiHaSystemVersion The following notifications have been added [1] cmiHaMaxBindingsNotif The Object cmiTrapControl has been modified to include a new bit for cmiHaMaxBindingsNotif. The following object-groups have been added [1] ciscoMobileIpHaRegGroupV1 [2] ciscoMobileIpMrNotificationGroupV3 [3] ciscoMobileIpHaSystemGroupV1 The compliance statement ciscoMobileIpComplianceV12R11 has been deprecated by ciscoMobileIpComplianceRev1.', 'Added a new object cmiHaRegMobilityBindingMacAddress to cmiHaRegMobilityBindingTable. Added a new object group ciscoMobileIpHaRegGroupV12R03r2Sup2 and a compliance group ciscoMobileIpComplianceV12R11 which deprecates ciscoMobileIpComplianceV12R10.', 'Added mobile node access interface attribute objects and multi-path specific objects. Following object groups have been created for the objects added for multi-path: ciscoMobileIpHaRegGroupV12R03r2Sup1 ciscoMobileIpHaMobNetGroupSup1 ciscoMobileIpMrSystemGroupV3Sup1', 'Added Mobile router roaming interface objects - cmiMrIfRoamStatus, cmiMrIfRegisteredCoAType, cmiMrIfRegisteredCoA, cmiMrIfRegisteredMaAddrType and cmiMrIfRegisteredMaAddr.', 'Added trap cmiHaMnRegReqFailed', 'Added objects cmiFaTotalRegRequests, miFaTotalRegReplies, cmiFaMnFaAuthFailures, cmiFaMnAAAAuthFailures, cmiHaMnHaAuthFailures, and cmiHaMnAAAAuthFailures.', 'Added object cmiMrIfCCoaEnable', 'Added objects cmiMrIfCCoaRegistration, cmiMrIfCCoaOnly and cmiMrCollocatedTunnel', '1. Duplicated maAdvConfigTable from MIP-MIB with the index changed to IfIndex instead of ip address. 2. Deprecated cmiSecKey object and added cmSecKey2 as the range needs to be extended. It should accept strings of length 1 to 16. 3. Added hmacMD5 type in cmiSecAlgorithmType', 'Added objects for Reverse tunneling, Challenge, VSEs and Mobile Router features.', 'Add HA/FA initial registration,re-registration, de-registration counters for more granularity.', 'Add cmiFaRegVisitorTable, cmiHaRegCounterTable, cmiHaRegMobilityBindingTable, cmiSecAssocTable, and cmiSecViolationTable. Add counters for home agent redundancy feature. Add performance counters for registration function of the mobility agents.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoMobileIpMIB.setLastUpdated('200906260000Z')
if mibBuilder.loadTexts: ciscoMobileIpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMobileIpMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-mobileip@cisco.com')
if mibBuilder.loadTexts: ciscoMobileIpMIB.setDescription("An extension to the IETF MIB module defined in RFC-2006 for managing Mobile IP implementations. Mobile IP introduces the following new functional entities: Mobile Node(MN) A host or router that changes its point of attachment from one network or subnetwork to another. A mobile node may change its location without changing its IP address; it may continue to communicate with other Internet nodes at any location using its (constant) IP address, assuming link-layer connectivity to a point of attachment is available. Home Agent(HA) A router on a mobile node's home network which tunnels datagrams for delivery to the mobile node when it is away from home, and maintains current location information for the mobile node. Foreign Agent(FA) A router on a mobile node's visited network which provides routing services to the mobile node while registered. The foreign agent detunnels and delivers datagrams to the mobile node that were tunneled by the mobile node's home agent. For datagrams sent by a mobile node, the foreign agent may serve as a default router for registered mobile nodes. Mobile Router(MR) A mobile node that is a router. It provides for the mobility for one or more networks moving together. The nodes connected to the network server by the mobile router may themselves be fixed nodes, mobile nodes or routers. Mobile Network Network that moves with the mobile router. Following is the terminology associated with Mobile IP protocol: Agent Advertisement An advertisement message constructed by attaching a special Extension to a router advertisement message. Care-of Address (CoA) The termination point of a tunnel toward a mobile node, for datagrams forwarded to the mobile node while it is away from home. The protocol can use two different types of care-of address: a 'foreign agent care-of address' is an address of a foreign agent with which the mobile node is registered, and a 'co-located care-of address' (CCoA) is an externally obtained local address which the mobile node has associated with one of its own network interfaces. Correspondent Node A peer with which a mobile node is communicating. A correspondent node may be either mobile or stationary. Foreign Network Any network other than the mobile node's Home Network. Home Address An IP address that is assigned for an extended period of time to a mobile node. It remains unchanged regardless of where the node is attached to the Internet. Home Network A network, possibly virtual, having a network prefix matching that of a mobile node's home address. Note that standard IP routing mechanisms will deliver datagrams destined to a mobile node's Home Address to the mobile node's Home Network. Mobility Agent Either a home agent or a foreign agent. Mobility Binding The association of a home address with a care-of address, along with the remaining lifetime of that association. Mobility Security Association A collection of security contexts, between a pair of nodes, which may be applied to Mobile IP protocol messages exchanged between them. Each context indicates an authentication algorithm and mode, a secret (a shared key, or appropriate public/private key pair), and a style of replay protection in use. Node A host or a router. Nonce A randomly chosen value, different from previous choices, inserted in a message to protect against replays. Security Parameter Index (SPI) An index identifying a security context between a pair of nodes among the contexts available in the Mobility Security Association. SPI values 0 through 255 are reserved and MUST NOT be used in any Mobility Security Association. Tunnel The path followed by a datagram while it is encapsulated. The model is that, while it is encapsulated, a datagram is routed to a knowledgeable decapsulating agent, which decapsulates the datagram and then correctly delivers it to its ultimate destination. Visited Network A network other than a mobile node's Home Network, to which the mobile node is currently connected. Visitor List The list of mobile nodes visiting a foreign agent. Keyed Hashing for Message Authentication (HMAC) A mechanism for message authentication using cryptographic hash functions. HMAC can be used with any iterative cryptographic hash function, e.g., MD5, SHA-1, in combination with a secret shared key. The following support services are defined for Mobile IP: Agent Discovery Home agents and foreign agents may advertise their availability on each link for which they provide service. A newly arrived mobile node can send a solicitation on the link to learn if any prospective agents are present. Registration When the mobile node is away from home, it registers its care-of address with its home agent. Depending on its method of attachment, the mobile node will register either directly with its home agent, or through a foreign agent which forwards the registration to the home agent. Following is the terminology associated with the home agent redundancy feature: Peer Home Agent Active home agent and standby home agent are peers to each other. Binding Update A binding update contains the registration request information. The home agent sends the update to its peer after accepting a registration. Binding Information Binding information contains the entries in the mobility binding table. The home agent sends a binding information request to its peer to retrieve all mobility bindings for a specified home agent address. 3GPP2 3rd Generation Partnership Project 2. This is the standardization group for CDMA2000, the set of 3G standards based on earlier 2G CDMA technology. WiMAX Worldwide Interoperability for Microwave Access, Inc. (group promoting IEEE 802.16 wireless broadband standard) MIP Mobile IP This MIB is organized as described below: The IETF Mobile IP MIB module [RFC-2006] has six main groups. Three of them represent the Mobile IP entities i.e. 'MipFA': foreign agent, 'MipHA': home agent and 'MipMN': mobile node. Each of these groups have been further subdivided into different subgroups. Each of these subgroups is a collection of objects related to a particular function, performed by the entity represented by its main group e.g. 'faRegistration' is a subgroup under group 'MipFA' which has collection of objects for registration function within a foreign agent. This MIB also follows the same hierarchical structure to maintain the modularity with respect to Mobile IP.")
ciscoMobileIpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1))
cmiFa = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1))
cmiHa = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2))
cmiSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3))
cmiMa = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4))
cmiMn = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5))
cmiTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6))
cmiFaReg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1))
cmiFaAdvertisement = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2))
cmiFaSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3))
cmiHaReg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1))
cmiHaRedun = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2))
cmiHaMobNet = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3))
cmiHaSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 4))
cmiMaReg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 1))
cmiMaAdvertisement = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2))
cmiMnDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 1))
cmiMnRecentAdvReceived = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 1, 1))
cmiMnRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 2))
cmiMrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3))
cmiMrDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4))
cmiMrRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 5))
class CmiRegistrationFlags(TextualConvention, Bits):
    description = 'This data type is used to define the registration flags for Mobile IP registration extension: reverseTunnel -- Request to support reverse tunneling. gre -- Request to use GRE minEnc -- Request to use minimal encapsulation decapsulationByMN -- Decapsulation by mobile node broadcastDatagram -- Request to receive broadcasts simultaneousBindings -- Request to retain prior binding(s)'
    status = 'current'
    namedValues = NamedValues(("reverseTunnel", 0), ("gre", 1), ("minEnc", 2), ("decapsulationbyMN", 3), ("broadcastDatagram", 4), ("simultaneousBindings", 5))

class CmiEntityIdentifierType(TextualConvention, Integer32):
    description = 'A value that represents a type of Mobile IP entity identifier. other(1) Indicates identifier which is not in one of the formats defined below. ipaddress(2) IP address as defined by InetAddressIPv4 textual convention in INET-ADDRESS-MIB. nai(3) A network access identifier as defined by the CmiEntityIdentifier textual convention.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("ipaddress", 2), ("nai", 3))

class CmiEntityIdentifier(TextualConvention, OctetString):
    description = 'Represents the generic identifier for Mobile IP entities. A CmiEntityIdentifier value is always interpreted within the context of a CmiEntityIdentifierType value. Foreign agents and Home agents are identified by the IP addresses. Mobile nodes can be identified in more than one way e.g. IP addresses, network access identifiers (NAI). If mobile node is identified by something other than IP address say by NAI and it gets IP address dynamically from the home agent then value of object of this type should be same as NAI. This is because then IP address is not tied with mobile node and it can change across registrations over period of time.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class CmiSpi(TextualConvention, Unsigned32):
    reference = 'RFC-2002 - IP Mobility Support, section 3.5.1'
    description = 'An index identifying a security context between a pair of nodes among the contexts available in the Mobility Security Association. SPI values 0 through 255 are reserved and MUST NOT be used in any Mobility Security Association.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(256, 4294967295)

class CmiMultiPathMetricType(TextualConvention, Integer32):
    description = 'An enumerated value that represents a metric type that is used for calculating the metric for routes when multiple routes are created. hopcount(1) Hop count Routes would be inserted with metric as 1 - hop count. bandwidth(2) bandwidth Routes would be inserted with metric using the roaming interface bandwidth.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("hopcount", 1), ("bandwidth", 2))

class CmiTunnelType(TextualConvention, Integer32):
    description = "This textual convention lists the tunneling protocols in use between a HA and CoA. The semantics are as follows. 'ipinip' - This indicates that IP-in-IP protocol is in use for tunnel encapsulation. 'gre' - This indicates that GRE protocol is in use for tunnel encapsulation."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ipinip", 1), ("gre", 2))

cmiFaRegTotalVisitors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegTotalVisitors.setReference('RFC-2006 - Mobile IP MIB Definition using SMIv2')
if mibBuilder.loadTexts: cmiFaRegTotalVisitors.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegTotalVisitors.setDescription("The current number of entries in faVisitorTable. faVisitorTable contains the foreign agent's visitor list. The foreign agent updates this table in response to registration events from mobile nodes.")
cmiFaRegVisitorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2), )
if mibBuilder.loadTexts: cmiFaRegVisitorTable.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorTable.setDescription("A table containing the foreign agent's visitor list. The foreign agent updates this table in response to registration events from mobile nodes. This table provides the same information as faVisitorTable of MIP-MIB. The difference is that indices of the table are changed so that visitors which are not identified by the IP address will also be included in the table.")
cmiFaRegVisitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorIdentifierType"), (0, "CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorIdentifier"))
if mibBuilder.loadTexts: cmiFaRegVisitorEntry.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorEntry.setDescription('Information for one visitor regarding registration.')
cmiFaRegVisitorIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 1), CmiEntityIdentifierType())
if mibBuilder.loadTexts: cmiFaRegVisitorIdentifierType.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorIdentifierType.setDescription("The type of the visitor's identifier.")
cmiFaRegVisitorIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 2), CmiEntityIdentifier())
if mibBuilder.loadTexts: cmiFaRegVisitorIdentifier.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorIdentifier.setDescription('The identifier associated with the visitor.')
cmiFaRegVisitorHomeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorHomeAddress.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorHomeAddress.setDescription('Home (IP) address of visiting mobile node.')
cmiFaRegVisitorHomeAgentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorHomeAgentAddress.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorHomeAgentAddress.setDescription('Home agent IP address for that visiting mobile node.')
cmiFaRegVisitorTimeGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorTimeGranted.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorTimeGranted.setDescription('The lifetime granted to the mobile node for this registration. Only valid if faVisitorRegIsAccepted is true(1).')
cmiFaRegVisitorTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorTimeRemaining.setDescription('The time remaining until the registration is expired. It has the same initial value as cmiFaRegVisitorTimeGranted, and is counted down by the foreign agent.')
cmiFaRegVisitorRegFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 7), RegistrationFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorRegFlags.setStatus('deprecated')
if mibBuilder.loadTexts: cmiFaRegVisitorRegFlags.setDescription('Registration flags sent by the mobile node.')
cmiFaRegVisitorRegIDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorRegIDLow.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorRegIDLow.setDescription('Low 32 bits of Identification used in that registration by the mobile node.')
cmiFaRegVisitorRegIDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorRegIDHigh.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorRegIDHigh.setDescription('High 32 bits of Identification used in that registration by the mobile node.')
cmiFaRegVisitorRegIsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorRegIsAccepted.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorRegIsAccepted.setDescription('Whether the registration has been accepted or not. If it is false(2), this registration is still pending for reply.')
cmiFaRegVisitorRegFlagsRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 11), CmiRegistrationFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorRegFlagsRev1.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorRegFlagsRev1.setDescription('Registration flags sent by the mobile node.')
cmiFaRegVisitorChallengeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRegVisitorChallengeValue.setReference('RFC3012 - Mobile IPv4 Challenge/Response Extensions')
if mibBuilder.loadTexts: cmiFaRegVisitorChallengeValue.setStatus('current')
if mibBuilder.loadTexts: cmiFaRegVisitorChallengeValue.setDescription('Challenge value forwarded to MN in the previous Registration reply, which can be used by MN in the next Registration request')
cmiFaInitRegRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaInitRegRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cmiFaInitRegRequestsReceived.setDescription('Total number of initial Registration Requests received by the foreign agent.')
cmiFaInitRegRequestsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaInitRegRequestsRelayed.setStatus('current')
if mibBuilder.loadTexts: cmiFaInitRegRequestsRelayed.setDescription('Total number of initial Registration Requests relayed by the foreign agent to the home agent.')
cmiFaInitRegRequestsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaInitRegRequestsDenied.setStatus('current')
if mibBuilder.loadTexts: cmiFaInitRegRequestsDenied.setDescription('Total number of initial Registration Requests denied by the foreign agent. The reasons for which FA denies a request include: 1. FA CHAP authentication failures. 2. HA is not reachable. 3. No HA address set in the packet.')
cmiFaInitRegRequestsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaInitRegRequestsDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmiFaInitRegRequestsDiscarded.setDescription('Total number of initial Registration Requests discarded by the foreign agent. The reasons for which FA discards a request include: 1. ip mobile foreign-service is not enabled on the interface on which the request is received. 2. NAI length exceeds the length of the packet. 3. There are no active COAs.')
cmiFaInitRegRepliesValidFromHA = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaInitRegRepliesValidFromHA.setStatus('current')
if mibBuilder.loadTexts: cmiFaInitRegRepliesValidFromHA.setDescription('Total number of initial valid Registration Replies from the home agent to foreign agent.')
cmiFaInitRegRepliesValidRelayMN = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaInitRegRepliesValidRelayMN.setStatus('current')
if mibBuilder.loadTexts: cmiFaInitRegRepliesValidRelayMN.setDescription('Total number of initial Registration Replies relayed to MN by the foreign agent.')
cmiFaReRegRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaReRegRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cmiFaReRegRequestsReceived.setDescription('Total number of Re-Registration Requests received by the foreign agent from mobile nodes.')
cmiFaReRegRequestsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaReRegRequestsRelayed.setStatus('current')
if mibBuilder.loadTexts: cmiFaReRegRequestsRelayed.setDescription('Total number of Re-Registration Requests relayed to MN by the foreign agent.')
cmiFaReRegRequestsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaReRegRequestsDenied.setStatus('current')
if mibBuilder.loadTexts: cmiFaReRegRequestsDenied.setDescription('Total number of Re-Registration Requests denied by the foreign agent. Refer cmiFaInitRegRequestsDenied for the reasons for which FA denies a request.')
cmiFaReRegRequestsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaReRegRequestsDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmiFaReRegRequestsDiscarded.setDescription('Total number of Re-Registration Requests discarded by the foreign agent. Refer cmiFaInitRegRequestsDiscarded for the reasons for which FA discards a request.')
cmiFaReRegRepliesValidFromHA = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaReRegRepliesValidFromHA.setStatus('current')
if mibBuilder.loadTexts: cmiFaReRegRepliesValidFromHA.setDescription('Total number of valid Re-Registration Replies from home agent.')
cmiFaReRegRepliesValidRelayToMN = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaReRegRepliesValidRelayToMN.setStatus('current')
if mibBuilder.loadTexts: cmiFaReRegRepliesValidRelayToMN.setDescription('Total number of valid Re-Registration Replies relayed to MN by the foreign agent.')
cmiFaDeRegRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaDeRegRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cmiFaDeRegRequestsReceived.setDescription('Total number of De-Registration Requests received by the foreign agent.')
cmiFaDeRegRequestsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaDeRegRequestsRelayed.setStatus('current')
if mibBuilder.loadTexts: cmiFaDeRegRequestsRelayed.setDescription('Total number of De-Registration Requests relayed to home agent by the foreign agent.')
cmiFaDeRegRequestsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaDeRegRequestsDenied.setStatus('current')
if mibBuilder.loadTexts: cmiFaDeRegRequestsDenied.setDescription('Total number of De-Registration Requests denied by the foreign agent. Refer cmiFaInitRegRequestsDenied for the reasons for which FA denies a request.')
cmiFaDeRegRequestsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaDeRegRequestsDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmiFaDeRegRequestsDiscarded.setDescription('Total number of De-Registration Requests discarded by the foreign agent. Refer cmiFaInitRegRequestsDiscarded for the reasons for which FA discards a request.')
cmiFaDeRegRepliesValidFromHA = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaDeRegRepliesValidFromHA.setStatus('current')
if mibBuilder.loadTexts: cmiFaDeRegRepliesValidFromHA.setDescription('Total number of valid De-Registration Replies received from the home agent by the foreign agent.')
cmiFaDeRegRepliesValidRelayToMN = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaDeRegRepliesValidRelayToMN.setStatus('current')
if mibBuilder.loadTexts: cmiFaDeRegRepliesValidRelayToMN.setDescription('Total number of De-Registration Replies relayed to the MN by the foreign agent.')
cmiFaReverseTunnelUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaReverseTunnelUnavailable.setReference('RFC3024 - Reverse Tunneling for Mobile IP')
if mibBuilder.loadTexts: cmiFaReverseTunnelUnavailable.setStatus('current')
if mibBuilder.loadTexts: cmiFaReverseTunnelUnavailable.setDescription('Total number of Registration Requests denied by foreign agent -- requested reverse tunnel unavailable (Code 74).')
cmiFaReverseTunnelBitNotSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaReverseTunnelBitNotSet.setReference('RFC3024 - Reverse Tunneling for Mobile IP')
if mibBuilder.loadTexts: cmiFaReverseTunnelBitNotSet.setStatus('current')
if mibBuilder.loadTexts: cmiFaReverseTunnelBitNotSet.setDescription("Total number of Registration Requests denied by foreign agent -- reverse tunnel is mandatory and 'T' bit not set (Code 75).")
cmiFaMnTooDistant = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaMnTooDistant.setReference('RFC3024 - Reverse Tunneling for Mobile IP')
if mibBuilder.loadTexts: cmiFaMnTooDistant.setStatus('current')
if mibBuilder.loadTexts: cmiFaMnTooDistant.setDescription('Total number of Registration Requests denied by foreign agent -- mobile node too distant (Code 76).')
cmiFaDeliveryStyleUnsupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaDeliveryStyleUnsupported.setReference('RFC3024 - Reverse Tunneling for Mobile IP')
if mibBuilder.loadTexts: cmiFaDeliveryStyleUnsupported.setStatus('current')
if mibBuilder.loadTexts: cmiFaDeliveryStyleUnsupported.setDescription('Total number of Registration Requests denied by foreign agent -- delivery style not supported (Code 79).')
cmiFaUnknownChallenge = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaUnknownChallenge.setReference('RFC3012 - Mobile IPv4 Challenge/Response Extensions')
if mibBuilder.loadTexts: cmiFaUnknownChallenge.setStatus('current')
if mibBuilder.loadTexts: cmiFaUnknownChallenge.setDescription('Total number of Registration Requests denied by foreign agent -- challenge was unknown (code 104).')
cmiFaMissingChallenge = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaMissingChallenge.setReference('RFC3012 - Mobile IPv4 Challenge/Response Extensions')
if mibBuilder.loadTexts: cmiFaMissingChallenge.setStatus('current')
if mibBuilder.loadTexts: cmiFaMissingChallenge.setDescription('Total number of Registration Requests denied by foreign agent -- challenge was missing (code 105).')
cmiFaStaleChallenge = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaStaleChallenge.setReference('RFC3012 - Mobile IPv4 Challenge/Response Extensions')
if mibBuilder.loadTexts: cmiFaStaleChallenge.setStatus('current')
if mibBuilder.loadTexts: cmiFaStaleChallenge.setDescription('Total number of Registration Requests denied by foreign agent -- challenge was stale (code 106).')
cmiFaCvsesFromMnRejected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaCvsesFromMnRejected.setReference('RFC3025 - Mobile IP Vendor/Organization-Specific Extensions')
if mibBuilder.loadTexts: cmiFaCvsesFromMnRejected.setStatus('current')
if mibBuilder.loadTexts: cmiFaCvsesFromMnRejected.setDescription('Total number of Registration Requests denied by foreign agent -- Unsupported Vendor-ID or unable to interpret Vendor-CVSE-Type in the CVSE sent by the mobile node to the foreign agent (code 100).')
cmiFaCvsesFromHaRejected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaCvsesFromHaRejected.setReference('RFC3025 - Mobile IP Vendor/Organization-Specific Extensions')
if mibBuilder.loadTexts: cmiFaCvsesFromHaRejected.setStatus('current')
if mibBuilder.loadTexts: cmiFaCvsesFromHaRejected.setDescription('Total number of Registration Replies denied by foreign agent -- Unsupported Vendor-ID or unable to interpret Vendor-CVSE-Type in the CVSE sent by the home agent to the foreign agent (code 101).')
cmiFaNvsesFromMnNeglected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaNvsesFromMnNeglected.setReference('RFC3025 - Mobile IP Vendor/Organization-Specific Extensions')
if mibBuilder.loadTexts: cmiFaNvsesFromMnNeglected.setStatus('current')
if mibBuilder.loadTexts: cmiFaNvsesFromMnNeglected.setDescription('Total number of Registration Requests, which has an NVSE extension with - unsupported Vendor-ID or unable to interpret Vendor-NVSE-Type in the NVSE sent by the mobile node to the foreign agent.')
cmiFaNvsesFromHaNeglected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaNvsesFromHaNeglected.setReference('RFC3025 - Mobile IP Vendor/Organization-Specific Extensions')
if mibBuilder.loadTexts: cmiFaNvsesFromHaNeglected.setStatus('current')
if mibBuilder.loadTexts: cmiFaNvsesFromHaNeglected.setDescription('Total number of Registration Requests, which has an NVSE extension with - unsupported Vendor-ID or unable to interpret Vendor-NVSE-Type in the NVSE sent by the home agent to the foreign agent.')
cmiFaTotalRegRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaTotalRegRequests.setStatus('current')
if mibBuilder.loadTexts: cmiFaTotalRegRequests.setDescription('Total number of Registration Requests received from the MN by the foreign agent.')
cmiFaTotalRegReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaTotalRegReplies.setStatus('current')
if mibBuilder.loadTexts: cmiFaTotalRegReplies.setDescription('Total number of Registration Replies received from the MA by the foreign agent.')
cmiFaMnFaAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaMnFaAuthFailures.setStatus('current')
if mibBuilder.loadTexts: cmiFaMnFaAuthFailures.setDescription('Total number of Registration Requests denied due to MN and foreign agent auth extension failures.')
cmiFaMnAAAAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaMnAAAAuthFailures.setStatus('current')
if mibBuilder.loadTexts: cmiFaMnAAAAuthFailures.setDescription('Total number of Registration Requests denied due to MN-AAA auth extension failures.')
cmiFaAdvertConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cmiFaAdvertConfTable.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertConfTable.setDescription('A table containing additional configurable advertisement parameters beyond that provided by maAdvertConfTable for all advertisement interfaces in the foreign agent.')
cmiFaAdvertConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmiFaAdvertConfEntry.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertConfEntry.setDescription('Additional advertisement parameters beyond that provided by maAdvertConfEntry for one advertisement interface.')
cmiFaAdvertIsBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaAdvertIsBusy.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertIsBusy.setDescription("This object indicates if the foreign agent is busy. If the value of this object is true(1), agent advertisements sent by the agent on this interface will have the 'B' bit set to 1.")
cmiFaAdvertRegRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiFaAdvertRegRequired.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertRegRequired.setDescription("This object specifies if foreign agent registration is required on this interface. If the value of this object is true(1), agent advertisements sent on this interface will have the 'R' bit set to 1.")
cmiFaAdvertChallengeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiFaAdvertChallengeWindow.setReference('RFC3012 - Mobile IPv4 Challenge/Response Extensions')
if mibBuilder.loadTexts: cmiFaAdvertChallengeWindow.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertChallengeWindow.setDescription('Specifies the number of last challenge values which can be used by mobile node in the registration request sent to the foreign agent on this interface.')
cmiFaAdvertChallengeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2, 2), )
if mibBuilder.loadTexts: cmiFaAdvertChallengeTable.setReference('RFC3012 - Mobile IPv4 Challenge/Response Extensions')
if mibBuilder.loadTexts: cmiFaAdvertChallengeTable.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertChallengeTable.setDescription("A table containing challenge values in the challenge window. Foreign agent needs to implement maAdvertisement Group (MIP-MIB), that group's maAdvConfigTable and cmiFaAdvertChallengeWindow should be greater than 0.")
cmiFaAdvertChallengeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-MOBILE-IP-MIB", "cmiFaAdvertChallengeIndex"))
if mibBuilder.loadTexts: cmiFaAdvertChallengeEntry.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertChallengeEntry.setDescription('Challenge values in challenge window specific to an interface. This entry is created whenever the foreign agent sends an agent advertisement with challenge on the interface.')
cmiFaAdvertChallengeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: cmiFaAdvertChallengeIndex.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertChallengeIndex.setDescription('The index of challenge table on an interface')
cmiFaAdvertChallengeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaAdvertChallengeValue.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertChallengeValue.setDescription('Challenge value in the challenge window of the interface.')
cmiFaRevTunnelSupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 1), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaRevTunnelSupported.setReference('RFC3024 - Reverse Tunneling for Mobile IP')
if mibBuilder.loadTexts: cmiFaRevTunnelSupported.setStatus('current')
if mibBuilder.loadTexts: cmiFaRevTunnelSupported.setDescription('Indicates whether Reverse tunnel is supported or not.')
cmiFaChallengeSupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 2), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaChallengeSupported.setReference('RFC3012 - Mobile IPv4 Challenge/Response Extensions')
if mibBuilder.loadTexts: cmiFaChallengeSupported.setStatus('current')
if mibBuilder.loadTexts: cmiFaChallengeSupported.setDescription('Indicates whether Foreign Agent Challenge is supported or not.')
cmiFaEncapDeliveryStyleSupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaEncapDeliveryStyleSupported.setReference('RFC3024 - Reverse Tunneling for Mobile IP')
if mibBuilder.loadTexts: cmiFaEncapDeliveryStyleSupported.setStatus('current')
if mibBuilder.loadTexts: cmiFaEncapDeliveryStyleSupported.setDescription('Indicates whether Encap delivery style is supported or not.')
cmiFaInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 4), )
if mibBuilder.loadTexts: cmiFaInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cmiFaInterfaceTable.setDescription('A table containing interface specific parameters related to the foreign agent service on a FA.')
cmiFaInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmiFaInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cmiFaInterfaceEntry.setDescription('Parameters associated with a particular foreign agent interface. Interfaces on which foreign agent service has been enabled will have a corresponding entry.')
cmiFaReverseTunnelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiFaReverseTunnelEnable.setStatus('current')
if mibBuilder.loadTexts: cmiFaReverseTunnelEnable.setDescription('This object specifies whether reverse tunnel capability is enabled on the interface or not.')
cmiFaChallengeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiFaChallengeEnable.setReference('RFC3012 - Mobile IPv4 Challenge/Response Extensions')
if mibBuilder.loadTexts: cmiFaChallengeEnable.setStatus('current')
if mibBuilder.loadTexts: cmiFaChallengeEnable.setDescription('This object specifies whether FA Challenge capability is enabled on the interface or not.')
cmiFaAdvertChallengeChapSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiFaAdvertChallengeChapSPI.setReference('RFC3012 - Mobile IPv4 Challenge/Response Extensions')
if mibBuilder.loadTexts: cmiFaAdvertChallengeChapSPI.setStatus('current')
if mibBuilder.loadTexts: cmiFaAdvertChallengeChapSPI.setDescription('Specifies the CHAP_SPI number for FA challenge authentication.')
cmiFaCoaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 5), )
if mibBuilder.loadTexts: cmiFaCoaTable.setStatus('current')
if mibBuilder.loadTexts: cmiFaCoaTable.setDescription('A table containing additional parameters for all care-of-addresses in the foreign agent beyond that provided by MIP MIB faCOATable.')
cmiFaCoaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 5, 1), )
faCOAEntry.registerAugmentions(("CISCO-MOBILE-IP-MIB", "cmiFaCoaEntry"))
cmiFaCoaEntry.setIndexNames(*faCOAEntry.getIndexNames())
if mibBuilder.loadTexts: cmiFaCoaEntry.setStatus('current')
if mibBuilder.loadTexts: cmiFaCoaEntry.setDescription('Additional information about a particular entry on the faCOATable beyond that provided by MIP MIB faCOAEntry.')
cmiFaCoaInterfaceOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiFaCoaInterfaceOnly.setStatus('current')
if mibBuilder.loadTexts: cmiFaCoaInterfaceOnly.setDescription('Specifies whether the FA interface associated with this CoA should advertise only this CoA or not. If it is true, all the other configured care-of-addresses will not be advertised.')
cmiFaCoaTransmitOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiFaCoaTransmitOnly.setStatus('current')
if mibBuilder.loadTexts: cmiFaCoaTransmitOnly.setDescription('Specifies whether the FA interface associated with this CoA is a transmit-only (uplink) interface or not. If it is true, the FA treats all registration requests received (on any interface) for this CoA as having arrived on the care-of interface. This object can be set to true only for serial care-of-interfaces.')
cmiFaCoaRegAsymLink = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 1, 3, 5, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiFaCoaRegAsymLink.setStatus('current')
if mibBuilder.loadTexts: cmiFaCoaRegAsymLink.setDescription('The number of registration requests which were received for this CoA on other interfaces (asymmetric links) and have been treated as received on this CoA interface. The count will thus be zero if the CoA interface is not set as transmit-only.')
cmiHaRegTotalMobilityBindings = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTotalMobilityBindings.setReference('RFC-2006 - Mobile IP MIB Definition using SMIv2')
if mibBuilder.loadTexts: cmiHaRegTotalMobilityBindings.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTotalMobilityBindings.setDescription("The current number of entries in haMobilityBindingTable. haMobilityBindingTable contains the home agent's mobility binding list. The home agent updates this table in response to registration events from mobile nodes.")
cmiHaRegMobilityBindingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2), )
if mibBuilder.loadTexts: cmiHaRegMobilityBindingTable.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMobilityBindingTable.setDescription('The home agent updates this table in response to registration events from mobile nodes.')
cmiHaRegMobilityBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2, 1), )
haMobilityBindingEntry.registerAugmentions(("CISCO-MOBILE-IP-MIB", "cmiHaRegMobilityBindingEntry"))
cmiHaRegMobilityBindingEntry.setIndexNames(*haMobilityBindingEntry.getIndexNames())
if mibBuilder.loadTexts: cmiHaRegMobilityBindingEntry.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMobilityBindingEntry.setDescription('Additional information about a particular entry on the mobility binding list beyond that provided by MIP MIB haMobilityBindingEntry.')
cmiHaRegMnIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2, 1, 1), CmiEntityIdentifierType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMnIdentifierType.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMnIdentifierType.setDescription("The type of the mobile node's identifier.")
cmiHaRegMnIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2, 1, 2), CmiEntityIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMnIdentifier.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMnIdentifier.setDescription('The identifier associated with the mobile node.')
cmiHaRegMobilityBindingRegFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2, 1, 3), CmiRegistrationFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMobilityBindingRegFlags.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMobilityBindingRegFlags.setDescription('Registration flags sent by mobile node.')
cmiHaRegMnIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMnIfDescription.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMnIfDescription.setDescription('Description of the access type for the roaming interface of the registering mobile node or router.')
cmiHaRegMnIfBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2, 1, 5), Unsigned32()).setUnits('kilobits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMnIfBandwidth.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMnIfBandwidth.setDescription('Bandwidth of the roaming interface through which mobile node or router is registered.')
cmiHaRegMnIfID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMnIfID.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMnIfID.setDescription('A unique number identifying the roaming interface through which mobile node or router is registered. This is also used as an unique identifier for the tunnel from home agent to the mobile router.')
cmiHaRegMnIfPathMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2, 1, 7), CmiMultiPathMetricType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMnIfPathMetricType.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMnIfPathMetricType.setDescription('Specifies the metric to use when multiple path is enabled.')
cmiHaRegMobilityBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMobilityBindingMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMobilityBindingMacAddress.setDescription('This object represents the MAC address of Mobile Node.')
cmiHaRegCounterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3), )
if mibBuilder.loadTexts: cmiHaRegCounterTable.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegCounterTable.setDescription('A table containing registration statistics for all mobile nodes authorized to use this home agent. This table provides the same information as haCounterTable of MIP MIB. The only difference is that indices of table are changed so that mobile nodes which are not identified by the IP address will also be included in the table.')
cmiHaRegCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiHaRegMnIdType"), (0, "CISCO-MOBILE-IP-MIB", "cmiHaRegMnId"))
if mibBuilder.loadTexts: cmiHaRegCounterEntry.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegCounterEntry.setDescription('Registration statistics for a single mobile node.')
cmiHaRegMnIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3, 1, 1), CmiEntityIdentifierType())
if mibBuilder.loadTexts: cmiHaRegMnIdType.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMnIdType.setDescription("The type of the mobile node's identifier.")
cmiHaRegMnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3, 1, 2), CmiEntityIdentifier())
if mibBuilder.loadTexts: cmiHaRegMnId.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMnId.setDescription('The identifier associated with the mobile node.')
cmiHaRegServAcceptedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegServAcceptedRequests.setReference('RFC-2002 - IP Mobility Support, section 3.4')
if mibBuilder.loadTexts: cmiHaRegServAcceptedRequests.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegServAcceptedRequests.setDescription('Total number of service requests for the mobile node accepted by the home agent (Code 0 + Code 1).')
cmiHaRegServDeniedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegServDeniedRequests.setReference('RFC-2002 - IP Mobility Support, section 3.4')
if mibBuilder.loadTexts: cmiHaRegServDeniedRequests.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegServDeniedRequests.setDescription('Total number of service requests for the mobile node denied by the home agent (sum of all registrations denied with Code 128 through Code 159).')
cmiHaRegOverallServTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegOverallServTime.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegOverallServTime.setDescription('Overall service time that has accumulated for the mobile node since the home agent last rebooted.')
cmiHaRegRecentServAcceptedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegRecentServAcceptedTime.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegRecentServAcceptedTime.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegRecentServAcceptedTime.setDescription('The time at which the most recent Registration Request was accepted by the home agent for this mobile node.')
cmiHaRegRecentServDeniedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegRecentServDeniedTime.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegRecentServDeniedTime.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegRecentServDeniedTime.setDescription('The time at which the most recent Registration Request was denied by the home agent for this mobile node.')
cmiHaRegRecentServDeniedCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139))).clone(namedValues=NamedValues(("reasonUnspecified", 128), ("admProhibited", 129), ("insufficientResource", 130), ("mnAuthenticationFailure", 131), ("faAuthenticationFailure", 132), ("idMismatch", 133), ("poorlyFormedRequest", 134), ("tooManyBindings", 135), ("unknownHA", 136), ("reverseTunnelUnavailable", 137), ("reverseTunnelBitNotSet", 138), ("encapsulationUnavailable", 139)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegRecentServDeniedCode.setReference('RFC-2002 - IP Mobility Support, section 3.4')
if mibBuilder.loadTexts: cmiHaRegRecentServDeniedCode.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegRecentServDeniedCode.setDescription('The Code indicating the reason why the most recent Registration Request for this mobile node was rejected by the home agent.')
cmiHaRegTotalProcLocRegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTotalProcLocRegs.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegTotalProcLocRegs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTotalProcLocRegs.setDescription('The total number of Registration Requests processed by the home agent. It includes only those Registration Requests which were authenticated locally by the home agent.')
cmiHaRegMaxProcLocInMinRegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMaxProcLocInMinRegs.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegMaxProcLocInMinRegs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMaxProcLocInMinRegs.setDescription('The maximum number of Registration Requests processed in a minute by the home agent. It includes only those Registration Requests which were authenticated locally by the home agent.')
cmiHaRegDateMaxRegsProcLoc = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegDateMaxRegsProcLoc.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegDateMaxRegsProcLoc.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegDateMaxRegsProcLoc.setDescription('The time at which number of Registration Requests processed in a minute by the home agent were maximum. It includes only those Registration Requests which were authenticated locally by the home agent.')
cmiHaRegProcLocInLastMinRegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegProcLocInLastMinRegs.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegProcLocInLastMinRegs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegProcLocInLastMinRegs.setDescription('The number of Registration Requests processed in the last minute by the home agent. It includes only those Registration Requests which were authenticated locally by the home agent.')
cmiHaRegTotalProcByAAARegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTotalProcByAAARegs.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegTotalProcByAAARegs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTotalProcByAAARegs.setDescription('The total number of Registration Requests processed by the home agent. It includes only those Registration Requests which were authenticated by the AAA server.')
cmiHaRegMaxProcByAAAInMinRegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMaxProcByAAAInMinRegs.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegMaxProcByAAAInMinRegs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMaxProcByAAAInMinRegs.setDescription('The maximum number of Registration Requests processed in a minute by the home agent. It includes only those Registration Requests which were authenticated by the AAA server.')
cmiHaRegDateMaxRegsProcByAAA = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegDateMaxRegsProcByAAA.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegDateMaxRegsProcByAAA.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegDateMaxRegsProcByAAA.setDescription('The time at which number of Registration Requests processed in a minute by the home agent were maximum. It includes only those Registration Requests which were authenticated by the AAA server.')
cmiHaRegProcAAAInLastByMinRegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegProcAAAInLastByMinRegs.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegProcAAAInLastByMinRegs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegProcAAAInLastByMinRegs.setDescription('The number of Registration Requests processed in the last minute by the home agent. It includes only those Registration Requests which were authenticated by the AAA server.')
cmiHaRegAvgTimeRegsProcByAAA = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milli seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegAvgTimeRegsProcByAAA.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegAvgTimeRegsProcByAAA.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegAvgTimeRegsProcByAAA.setDescription('The average time taken by the home agent to process a Registration Request. It is calculated based on only those Registration Requests which were authenticated by the AAA server.')
cmiHaRegMaxTimeRegsProcByAAA = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milli seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegMaxTimeRegsProcByAAA.setReference('RFC-2002 - IP Mobility Support, section 3')
if mibBuilder.loadTexts: cmiHaRegMaxTimeRegsProcByAAA.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegMaxTimeRegsProcByAAA.setDescription('The maximum time taken by the home agent to process a Registration Request. It considers only those Registration Requests which were authenticated by the AAA server.')
cmiHaRegRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegRequestsReceived.setDescription('Total number of Registration Requests received by the home agent. This include initial registration requests, re-registration requests and de-registration requests.')
cmiHaRegRequestsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegRequestsDenied.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegRequestsDenied.setDescription("Total number of Registration Requests denied by the home agent. The reasons for which HA denies a request include: 1. Can't allocate IP address for MN. 2. Request parsing failed. 3. NAI length exceeds the packet length.")
cmiHaRegRequestsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegRequestsDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegRequestsDiscarded.setDescription('Total number of Registration Requests discarded by the home agent. The reasons for which HA discards a request include: 1. ip mobile home-agent service is not enabled. 2. HA-CHAP authentication failed. 3. MN Security Association retrieval failed.')
cmiHaEncapUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaEncapUnavailable.setStatus('current')
if mibBuilder.loadTexts: cmiHaEncapUnavailable.setDescription('Total number of Registration Requests denied by the home agent due to an unsupported encapsulation.')
cmiHaNAICheckFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaNAICheckFailures.setStatus('current')
if mibBuilder.loadTexts: cmiHaNAICheckFailures.setDescription('Total number of Registration Requests denied by the home agent due to an NAI check failures.')
cmiHaInitRegRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaInitRegRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cmiHaInitRegRequestsReceived.setDescription('Total number of initial Registration Requests received by the home agent.')
cmiHaInitRegRequestsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaInitRegRequestsAccepted.setStatus('current')
if mibBuilder.loadTexts: cmiHaInitRegRequestsAccepted.setDescription('Total number of initial Registration Requests accepted by the home agent.')
cmiHaInitRegRequestsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaInitRegRequestsDenied.setStatus('current')
if mibBuilder.loadTexts: cmiHaInitRegRequestsDenied.setDescription('Total number of initial Registration Requests denied by the home agent. Refer cmiHaRegRequestsReceived for the reasons for which HA denies a request.')
cmiHaInitRegRequestsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaInitRegRequestsDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmiHaInitRegRequestsDiscarded.setDescription('Total number of initial Registration Requests discarded by the home agent. Refer cmiHaRegRequestsDiscarded for the reasons for which HA discards a request.')
cmiHaReRegRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaReRegRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cmiHaReRegRequestsReceived.setDescription('Total number of Re-Registration Requests received by the home agent.')
cmiHaReRegRequestsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaReRegRequestsAccepted.setStatus('current')
if mibBuilder.loadTexts: cmiHaReRegRequestsAccepted.setDescription('Total number of Re-Registration Requests accepted by the home agent.')
cmiHaReRegRequestsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaReRegRequestsDenied.setStatus('current')
if mibBuilder.loadTexts: cmiHaReRegRequestsDenied.setDescription('Total number of Re-Registration Requests denied by the home agent. Refer cmiHaRegRequestsReceived for the reasons for which HA denies a request.')
cmiHaReRegRequestsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaReRegRequestsDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmiHaReRegRequestsDiscarded.setDescription('Total number of Re-Registration Requests discarded by the home agent. Refer cmiHaRegRequestsDiscarded for the reasons for which HA discards a request.')
cmiHaDeRegRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaDeRegRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cmiHaDeRegRequestsReceived.setDescription('Total number of De-Registration Requests received by the home agent.')
cmiHaDeRegRequestsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaDeRegRequestsAccepted.setStatus('current')
if mibBuilder.loadTexts: cmiHaDeRegRequestsAccepted.setDescription('Total number of De-Registration Requests accepted by the home agent.')
cmiHaDeRegRequestsDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaDeRegRequestsDenied.setStatus('current')
if mibBuilder.loadTexts: cmiHaDeRegRequestsDenied.setDescription('Total number of De-Registration Requests denied by the home agent. Refer cmiHaRegRequestsReceived for the reasons for which HA denies a request.')
cmiHaDeRegRequestsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaDeRegRequestsDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmiHaDeRegRequestsDiscarded.setDescription('Total number of De-Registration Requests discarded by the home agent. Refer cmiHaRegRequestsDiscarded for the reasons for which HA discards a request.')
cmiHaReverseTunnelUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaReverseTunnelUnavailable.setReference('RFC3024 - Reverse Tunneling for Mobile IP')
if mibBuilder.loadTexts: cmiHaReverseTunnelUnavailable.setStatus('current')
if mibBuilder.loadTexts: cmiHaReverseTunnelUnavailable.setDescription('Total number of Registration Requests denied by the home agent -- requested reverse tunnel unavailable (Code 137).')
cmiHaReverseTunnelBitNotSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaReverseTunnelBitNotSet.setReference('RFC3024 - Reverse Tunneling for Mobile IP')
if mibBuilder.loadTexts: cmiHaReverseTunnelBitNotSet.setStatus('current')
if mibBuilder.loadTexts: cmiHaReverseTunnelBitNotSet.setDescription("Total number of Registration Requests denied by the home agent -- reverse tunnel is mandatory and 'T' bit not set (Code 138).")
cmiHaEncapsulationUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaEncapsulationUnavailable.setReference('RFC3024 - Reverse Tunneling for Mobile IP')
if mibBuilder.loadTexts: cmiHaEncapsulationUnavailable.setStatus('current')
if mibBuilder.loadTexts: cmiHaEncapsulationUnavailable.setDescription('Total number of Registration Requests denied by the home agent -- requested encapsulation unavailable (Code 72).')
cmiHaCvsesFromMnRejected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaCvsesFromMnRejected.setReference('RFC3025 - Mobile IP Vendor/Organization-Specific Extensions')
if mibBuilder.loadTexts: cmiHaCvsesFromMnRejected.setStatus('current')
if mibBuilder.loadTexts: cmiHaCvsesFromMnRejected.setDescription('Total number of Registration Requests denied by the home agent -- Unsupported Vendor-ID or unable to interpret Vendor-CVSE-Type in the CVSE sent by the mobile node to the home agent (code 140).')
cmiHaCvsesFromFaRejected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaCvsesFromFaRejected.setReference('RFC3025 - Mobile IP Vendor/Organization-Specific Extensions')
if mibBuilder.loadTexts: cmiHaCvsesFromFaRejected.setStatus('current')
if mibBuilder.loadTexts: cmiHaCvsesFromFaRejected.setDescription('Total number of Registration Requests denied by the home agent -- Unsupported Vendor-ID or unable to interpret Vendor-CVSE-Type in the CVSE sent by the foreign agent to the home agent (code 141).')
cmiHaNvsesFromMnNeglected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaNvsesFromMnNeglected.setReference('RFC3025 - Mobile IP Vendor/Organization-Specific Extensions')
if mibBuilder.loadTexts: cmiHaNvsesFromMnNeglected.setStatus('current')
if mibBuilder.loadTexts: cmiHaNvsesFromMnNeglected.setDescription('Total number of Registration Requests, which has an NVSE extension with - unsupported Vendor-ID or unable to interpret Vendor-NVSE-Type in the NVSE sent by the mobile node to the home agent.')
cmiHaNvsesFromFaNeglected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaNvsesFromFaNeglected.setReference('RFC3025 - Mobile IP Vendor/Organization-Specific Extensions')
if mibBuilder.loadTexts: cmiHaNvsesFromFaNeglected.setStatus('current')
if mibBuilder.loadTexts: cmiHaNvsesFromFaNeglected.setDescription('Total number of Registration Requests, which has an NVSE extension with - unsupported Vendor-ID or unable to interpret Vendor-NVSE-Type in the NVSE sent by the foreign agent to the home agent.')
cmiHaMnHaAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaMnHaAuthFailures.setStatus('current')
if mibBuilder.loadTexts: cmiHaMnHaAuthFailures.setDescription('Total number of Registration Requests denied due to MN and home agent auth extension failures.')
cmiHaMnAAAAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaMnAAAAuthFailures.setStatus('current')
if mibBuilder.loadTexts: cmiHaMnAAAAuthFailures.setDescription('Total number of Registration Requests denied due to MN-AAA auth extension failures.')
cmiHaMaximumBindings = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(235000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiHaMaximumBindings.setStatus('current')
if mibBuilder.loadTexts: cmiHaMaximumBindings.setDescription('This object represents the maximum number of registrations allowed by the home agent.')
cmiHaRegIntervalSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 300)).clone(30)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiHaRegIntervalSize.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegIntervalSize.setDescription('This object represents the interval for which cmiHaRegIntervalMaxActiveBindings, cmiHaRegInterval3gpp2MaxActiveBindings, cmiHaRegIntervalWimaxMaxActiveBindings are calculated.')
cmiHaRegIntervalMaxActiveBindings = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 42), Gauge32()).setUnits('MIP call per interval').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegIntervalMaxActiveBindings.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegIntervalMaxActiveBindings.setDescription('This object represents the maximum number of active bindings present at any time during the elapsed time interval configured through cmiHaRegIntervalSize. When the time interval is modified through cmiHaRegIntervalSize, a value of zero will be populated till one complete new interval is elapsed.')
cmiHaRegInterval3gpp2MaxActiveBindings = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 43), Gauge32()).setUnits('MIP call per interval').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegInterval3gpp2MaxActiveBindings.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegInterval3gpp2MaxActiveBindings.setDescription('This object represents the maximum number of active 3GPP2 bindings present at any time during the elapsed time interval configured through cmiHaRegIntervalSize. When the time interval is modified through cmiHaRegIntervalSize, a value of zero will be populated till one complete new interval is elapsed.')
cmiHaRegIntervalWimaxMaxActiveBindings = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 44), Gauge32()).setUnits('MIP call per interval').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegIntervalWimaxMaxActiveBindings.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegIntervalWimaxMaxActiveBindings.setDescription('This object represents the maximum number of active WIMAX bindings present at any time during the elapsed time interval configured through cmiHaRegIntervalSize. When the time interval is modified through cmiHaRegIntervalSize, a value of zero will be populated till one complete new interval is elapsed.')
cmiHaRegTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45), )
if mibBuilder.loadTexts: cmiHaRegTunnelStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsTable.setDescription('This table provides the statistics about the active tunnels between HA and CoA. A row is added to this table when a new tunnel is created between HA and CoA. A row is deleted in this table when an existing tunnel between HA and CoA is deleted.')
cmiHaRegTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsSrcAddrType"), (0, "CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsSrcAddr"), (0, "CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsDestAddrType"), (0, "CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsDestAddr"))
if mibBuilder.loadTexts: cmiHaRegTunnelStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsEntry.setDescription('Each entry represents a conceptual row in cmiHaRegTunnelStatsTable and corresponds to the statistics for a single active tunnel between HA and CoA.')
cmiHaRegTunnelStatsSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cmiHaRegTunnelStatsSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsSrcAddrType.setDescription('This object represents the type of the address stored in cmiHaRegTunnelStatsSrcAddr.')
cmiHaRegTunnelStatsSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 2), InetAddress())
if mibBuilder.loadTexts: cmiHaRegTunnelStatsSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsSrcAddr.setDescription('This object represents the source address of the tunnel.')
cmiHaRegTunnelStatsDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 3), InetAddressType())
if mibBuilder.loadTexts: cmiHaRegTunnelStatsDestAddrType.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsDestAddrType.setDescription('This object represents the type of the address stored in cmiHaRegTunnelStatsDestAddr.')
cmiHaRegTunnelStatsDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 4), InetAddress())
if mibBuilder.loadTexts: cmiHaRegTunnelStatsDestAddr.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsDestAddr.setDescription('This object represents the destination address of the tunnel.')
cmiHaRegTunnelStatsTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 5), CmiTunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsTunnelType.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsTunnelType.setDescription('This object represents the tunneling protocol in use between the HA and CoA.')
cmiHaRegTunnelStatsNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsNumUsers.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsNumUsers.setDescription('This object represents the number of users on the tunnel.')
cmiHaRegTunnelStatsDataRateInt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsDataRateInt.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsDataRateInt.setDescription('This object represents the interval for which cmiHaRegTunnelStatsInBitRate, cmiHaRegTunnelStatsInPktRate, cmiHaRegTunnelStatsOutBitRate and cmiHaRegTunnelStatsOutPktRate are calculated.')
cmiHaRegTunnelStatsInBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 8), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsInBitRate.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsInBitRate.setDescription('This object represents the number of bits received at the tunnel per second in the interval represented by cmiHaRegTunnelStatsDataRateInt.')
cmiHaRegTunnelStatsInPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 9), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsInPktRate.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsInPktRate.setDescription('This object represents the number of packets received at the tunnel per second in the interval represented by cmiHaRegTunnelStatsDataRateInt.')
cmiHaRegTunnelStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsInBytes.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsInBytes.setDescription('This object represents the total number of bytes received at the tunnel.')
cmiHaRegTunnelStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsInPkts.setDescription('This object represents the total number of packets received at the tunnel.')
cmiHaRegTunnelStatsOutBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 12), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsOutBitRate.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsOutBitRate.setDescription('This object represents the number of bits transmitted from the tunnel per second in the interval represented by cmiHaRegTunnelStatsDataRateInt.')
cmiHaRegTunnelStatsOutPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 13), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsOutPktRate.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsOutPktRate.setDescription('This object represents the number of packets transmitted from the tunnel per second in the interval represented by cmiHaRegTunnelStatsDataRateInt.')
cmiHaRegTunnelStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsOutBytes.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsOutBytes.setDescription('This object represents the total number of bytes transmitted from the tunnel.')
cmiHaRegTunnelStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 1, 45, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRegTunnelStatsOutPkts.setStatus('current')
if mibBuilder.loadTexts: cmiHaRegTunnelStatsOutPkts.setDescription('This object represents the total number of packets transmitted from the tunnel.')
cmiHaRedunSentBUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunSentBUs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunSentBUs.setDescription('Total number of binding updates sent by the home agent.')
cmiHaRedunFailedBUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunFailedBUs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunFailedBUs.setDescription('Total number of binding updates sent by the home agent for which no acknowledgement is received from the standby home agent.')
cmiHaRedunReceivedBUAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunReceivedBUAcks.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunReceivedBUAcks.setDescription('Total number of acknowledgements received in response to binding updates sent by the home agent.')
cmiHaRedunTotalSentBUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunTotalSentBUs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunTotalSentBUs.setDescription('Total number of binding updates sent by the home agent including retransmissions of same binding update.')
cmiHaRedunReceivedBUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunReceivedBUs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunReceivedBUs.setDescription('Total number of binding updates received by the home agent.')
cmiHaRedunSentBUAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunSentBUAcks.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunSentBUAcks.setDescription('Total number of acknowledgements sent in response to binding updates received by the home agent.')
cmiHaRedunSentBIReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunSentBIReqs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunSentBIReqs.setDescription('Total number of binding information requests sent by the home agent.')
cmiHaRedunFailedBIReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunFailedBIReqs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunFailedBIReqs.setDescription('Total number of binding information requests sent by the home agent for which no reply is received from the active home agent.')
cmiHaRedunTotalSentBIReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunTotalSentBIReqs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunTotalSentBIReqs.setDescription('Total number of binding information requests sent by the home agent including retransmissions of the same request.')
cmiHaRedunReceivedBIReps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunReceivedBIReps.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunReceivedBIReps.setDescription('Total number of binding information replies received by the home agent.')
cmiHaRedunDroppedBIReps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunDroppedBIReps.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunDroppedBIReps.setDescription('Total number of binding information replies dropped since there is no corresponding binding information request sent by the home agent.')
cmiHaRedunSentBIAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunSentBIAcks.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunSentBIAcks.setDescription('Total number of acknowledgements sent in response to binding information replies received by the home agent.')
cmiHaRedunReceivedBIReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunReceivedBIReqs.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunReceivedBIReqs.setDescription('Total number of binding information requests received by the home agent.')
cmiHaRedunSentBIReps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunSentBIReps.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunSentBIReps.setDescription('Total number of binding information replies sent by the home agent.')
cmiHaRedunFailedBIReps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunFailedBIReps.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunFailedBIReps.setDescription('Total number of binding information replies sent by by the home agent for which no acknowledgement is received from the standby home agent.')
cmiHaRedunTotalSentBIReps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunTotalSentBIReps.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunTotalSentBIReps.setDescription('Total number of binding information replies sent by the home agent including retransmissions of the same reply.')
cmiHaRedunReceivedBIAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunReceivedBIAcks.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunReceivedBIAcks.setDescription('Total number of acknowledgements received in response to binding information replies sent by the home agent.')
cmiHaRedunDroppedBIAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunDroppedBIAcks.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunDroppedBIAcks.setDescription('Total number of acknowledgements dropped by the home agent since there are no corresponding binding information replies sent by it.')
cmiHaRedunSecViolations = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaRedunSecViolations.setStatus('current')
if mibBuilder.loadTexts: cmiHaRedunSecViolations.setDescription('Total number of security violations in the home agent caused by processing of the packets received from the peer home agent. Security violations can occur due to the following reasons. - the authenticator value in the packet is invalid. - value stored in the identification field of the packet is invalid.')
cmiHaMrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 1), )
if mibBuilder.loadTexts: cmiHaMrTable.setStatus('current')
if mibBuilder.loadTexts: cmiHaMrTable.setDescription('A table containing details about all mobile routers associated with the Home Agent.')
cmiHaMrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 1, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiHaMrAddrType"), (0, "CISCO-MOBILE-IP-MIB", "cmiHaMrAddr"))
if mibBuilder.loadTexts: cmiHaMrEntry.setStatus('current')
if mibBuilder.loadTexts: cmiHaMrEntry.setDescription('Information related to a single mobile router associated with the Home Agent.')
cmiHaMrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cmiHaMrAddrType.setStatus('current')
if mibBuilder.loadTexts: cmiHaMrAddrType.setDescription('Represents the type of IP address stored in cmiHaMrAddr. Only IPv4 address type is supported.')
cmiHaMrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cmiHaMrAddr.setStatus('current')
if mibBuilder.loadTexts: cmiHaMrAddr.setDescription('IP address of a mobile router providing mobility to one or more networks. Only IPv4 addresses are supported.')
cmiHaMrDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiHaMrDynamic.setStatus('current')
if mibBuilder.loadTexts: cmiHaMrDynamic.setDescription('Specifies whether the mobile router is capable of registering networks dynamically or not.')
cmiHaMrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiHaMrStatus.setStatus('current')
if mibBuilder.loadTexts: cmiHaMrStatus.setDescription('The row status for the MR entry.')
cmiHaMrMultiPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiHaMrMultiPath.setStatus('current')
if mibBuilder.loadTexts: cmiHaMrMultiPath.setDescription('Specifies whether multiple path is enabled on this mobile router or not.')
cmiHaMrMultiPathMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 1, 1, 6), CmiMultiPathMetricType().clone('bandwidth')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiHaMrMultiPathMetricType.setStatus('current')
if mibBuilder.loadTexts: cmiHaMrMultiPathMetricType.setDescription('Specifies the metric to use when multiple path is enabled.')
cmiHaMobNetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 2), )
if mibBuilder.loadTexts: cmiHaMobNetTable.setStatus('current')
if mibBuilder.loadTexts: cmiHaMobNetTable.setDescription('A table containing information about all the mobile networks associated with a Home Agent.')
cmiHaMobNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 2, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiHaMrAddrType"), (0, "CISCO-MOBILE-IP-MIB", "cmiHaMrAddr"), (0, "CISCO-MOBILE-IP-MIB", "cmiHaMobNetAddressType"), (0, "CISCO-MOBILE-IP-MIB", "cmiHaMobNetAddress"), (0, "CISCO-MOBILE-IP-MIB", "cmiHaMobNetPfxLen"))
if mibBuilder.loadTexts: cmiHaMobNetEntry.setStatus('current')
if mibBuilder.loadTexts: cmiHaMobNetEntry.setDescription('Information of a single mobile network associated with a Home Agent.')
cmiHaMobNetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cmiHaMobNetAddressType.setStatus('current')
if mibBuilder.loadTexts: cmiHaMobNetAddressType.setDescription('Represents the type of IP address stored in cmiHaMobNetAddress. Only IPv4 address type is supported.')
cmiHaMobNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cmiHaMobNetAddress.setStatus('current')
if mibBuilder.loadTexts: cmiHaMobNetAddress.setDescription('IP address of the mobile network. Only IPv4 addresses are supported.')
cmiHaMobNetPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 2, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cmiHaMobNetPfxLen.setStatus('current')
if mibBuilder.loadTexts: cmiHaMobNetPfxLen.setDescription('Prefix length associated with the mobile network ip address.')
cmiHaMobNetDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaMobNetDynamic.setStatus('current')
if mibBuilder.loadTexts: cmiHaMobNetDynamic.setDescription('Indicates whether the mobile network has been registered dynamically or not.')
cmiHaMobNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiHaMobNetStatus.setStatus('current')
if mibBuilder.loadTexts: cmiHaMobNetStatus.setDescription('The row status for the mobile network entry.')
cmiSecAssocsCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiSecAssocsCount.setStatus('current')
if mibBuilder.loadTexts: cmiSecAssocsCount.setDescription('Total number of mobility security associations known to the entity i.e. the number of entries in the cmiSecAssocTable.')
cmiSecAssocTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2), )
if mibBuilder.loadTexts: cmiSecAssocTable.setStatus('current')
if mibBuilder.loadTexts: cmiSecAssocTable.setDescription('A table containing Mobility Security Associations. This table provides the same information as mipSecAssocTable of MIP MIB. The differences are: - indices of the table are changed so that mobile nodes which are not identified by the IP address will also be included in the table. - rowStatus object is added to the table.')
cmiSecAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiSecPeerIdentifierType"), (0, "CISCO-MOBILE-IP-MIB", "cmiSecPeerIdentifier"), (0, "CISCO-MOBILE-IP-MIB", "cmiSecSPI"))
if mibBuilder.loadTexts: cmiSecAssocEntry.setStatus('current')
if mibBuilder.loadTexts: cmiSecAssocEntry.setDescription('One particular Mobility Security Association.')
cmiSecPeerIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1, 1), CmiEntityIdentifierType())
if mibBuilder.loadTexts: cmiSecPeerIdentifierType.setStatus('current')
if mibBuilder.loadTexts: cmiSecPeerIdentifierType.setDescription("The type of the peer entity's identifier.")
cmiSecPeerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1, 2), CmiEntityIdentifier())
if mibBuilder.loadTexts: cmiSecPeerIdentifier.setStatus('current')
if mibBuilder.loadTexts: cmiSecPeerIdentifier.setDescription('The identifier of the peer entity with which this node shares the mobility security association.')
cmiSecSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1, 3), CmiSpi())
if mibBuilder.loadTexts: cmiSecSPI.setStatus('current')
if mibBuilder.loadTexts: cmiSecSPI.setDescription('The SPI is the 4-byte index within the Mobility Security Association which selects the specific security parameters to be used to authenticate the peer, i.e. the rest of the variables in this cmiSecAssocEntry.')
cmiSecAlgorithmType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("md5", 2), ("hmacMD5", 3))).clone('md5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiSecAlgorithmType.setReference('RFC-2002 - IP Mobility Support, section 3.5.1')
if mibBuilder.loadTexts: cmiSecAlgorithmType.setStatus('current')
if mibBuilder.loadTexts: cmiSecAlgorithmType.setDescription('Type of authentication algorithm. other(1) Any other authentication algorithm not specified here. md5(2) MD5 message-digest algorithm. hmacMD5(3) HMAC MD5 message-digest algorithm.')
cmiSecAlgorithmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("prefixSuffix", 2))).clone('prefixSuffix')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiSecAlgorithmMode.setReference('RFC-2002 - IP Mobility Support, section 3.5.1')
if mibBuilder.loadTexts: cmiSecAlgorithmMode.setStatus('current')
if mibBuilder.loadTexts: cmiSecAlgorithmMode.setDescription('Security mode used by this algorithm. other(1) Any other mode not specified here. prefixSuffix(2) In this mode, data over which authenticator value needs to be calculated is preceded and followed by the 128 bit shared secret key.')
cmiSecKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiSecKey.setStatus('deprecated')
if mibBuilder.loadTexts: cmiSecKey.setDescription('The shared secret key for the security associations. Reading this object will always return zero length value.')
cmiSecReplayMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("timestamps", 2), ("nonces", 3))).clone('timestamps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiSecReplayMethod.setReference('RFC-2002 - IP Mobility Support, section 5.6')
if mibBuilder.loadTexts: cmiSecReplayMethod.setStatus('current')
if mibBuilder.loadTexts: cmiSecReplayMethod.setDescription('The replay-protection method supported for this SPI within this Mobility Security Association. other(1) Any other replay protection method not specified here. timestamps(2) Timestamp based replay protection method. nonces(3) Nonce based replay protection method.')
cmiSecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiSecStatus.setStatus('current')
if mibBuilder.loadTexts: cmiSecStatus.setDescription('The row status for this table.')
cmiSecKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiSecKey2.setStatus('current')
if mibBuilder.loadTexts: cmiSecKey2.setDescription('The shared secret key for the security associations. Reading this object will always return zero length value. If the value is given in hex, it should be 16 bytes in length. If it is in ascii, it can vary from 1 to 16 characters.')
cmiHaSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 2, 4, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiHaSystemVersion.setStatus('current')
if mibBuilder.loadTexts: cmiHaSystemVersion.setDescription('MobileIP HA Release Version')
cmiSecViolationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3), )
if mibBuilder.loadTexts: cmiSecViolationTable.setReference('RFC-2002 - IP Mobility Support, sections 3.6.2.1, 3.7.2.1 and 3.8.2.1')
if mibBuilder.loadTexts: cmiSecViolationTable.setStatus('current')
if mibBuilder.loadTexts: cmiSecViolationTable.setDescription('A table containing information about security violations. This table provides the same information as mipSecViolationTable of MIP MIB. The only difference is that indices of the table are changed so that mobile nodes which are not identified by the IP address will also be included in the table.')
cmiSecViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiSecViolatorIdentifierType"), (0, "CISCO-MOBILE-IP-MIB", "cmiSecViolatorIdentifier"))
if mibBuilder.loadTexts: cmiSecViolationEntry.setStatus('current')
if mibBuilder.loadTexts: cmiSecViolationEntry.setDescription('Information about one particular security violation.')
cmiSecViolatorIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3, 1, 1), CmiEntityIdentifierType())
if mibBuilder.loadTexts: cmiSecViolatorIdentifierType.setStatus('current')
if mibBuilder.loadTexts: cmiSecViolatorIdentifierType.setDescription("The type of Violator's identifier.")
cmiSecViolatorIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3, 1, 2), CmiEntityIdentifier())
if mibBuilder.loadTexts: cmiSecViolatorIdentifier.setStatus('current')
if mibBuilder.loadTexts: cmiSecViolatorIdentifier.setDescription("Violator's identifier. The violator is not necessary in the cmiSecAssocTable.")
cmiSecTotalViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiSecTotalViolations.setStatus('current')
if mibBuilder.loadTexts: cmiSecTotalViolations.setDescription('Total number of security violations for this peer.')
cmiSecRecentViolationSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3, 1, 4), CmiSpi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiSecRecentViolationSPI.setStatus('current')
if mibBuilder.loadTexts: cmiSecRecentViolationSPI.setDescription('SPI of the most recent security violation for this peer. If the security violation is due to an identification mismatch, then this is the SPI from the Mobile-Home Authentication Extension. If the security violation is due to an invalid authenticator, then this is the SPI from the offending authentication extension. In all other cases, it should be set to zero.')
cmiSecRecentViolationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiSecRecentViolationTime.setStatus('current')
if mibBuilder.loadTexts: cmiSecRecentViolationTime.setDescription('Time of the most recent security violation for this peer.')
cmiSecRecentViolationIDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiSecRecentViolationIDLow.setStatus('current')
if mibBuilder.loadTexts: cmiSecRecentViolationIDLow.setDescription('Low-order 32 bits of identification used in request or reply of the most recent security violation for this peer.')
cmiSecRecentViolationIDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiSecRecentViolationIDHigh.setStatus('current')
if mibBuilder.loadTexts: cmiSecRecentViolationIDHigh.setDescription('High-order 32 bits of identification used in request or reply of the most recent security violation for this peer.')
cmiSecRecentViolationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noMobilitySecurityAssociation", 1), ("badAuthenticator", 2), ("badIdentifier", 3), ("badSPI", 4), ("missingSecurityExtension", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiSecRecentViolationReason.setReference('RFC-2002 - IP Mobility Support')
if mibBuilder.loadTexts: cmiSecRecentViolationReason.setStatus('current')
if mibBuilder.loadTexts: cmiSecRecentViolationReason.setDescription('Reason for the most recent security violation for this peer.')
cmiMaRegMaxInMinuteRegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMaRegMaxInMinuteRegs.setStatus('current')
if mibBuilder.loadTexts: cmiMaRegMaxInMinuteRegs.setDescription('The maximum number of Registration Requests received in a minute by the mobility agent.')
cmiMaRegDateMaxRegsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMaRegDateMaxRegsReceived.setStatus('current')
if mibBuilder.loadTexts: cmiMaRegDateMaxRegsReceived.setDescription('The time at which number of Registration Requests received in a minute by the mobility agent were maximum.')
cmiMaRegInLastMinuteRegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMaRegInLastMinuteRegs.setStatus('current')
if mibBuilder.loadTexts: cmiMaRegInLastMinuteRegs.setDescription('The number of Registration Requests received in the last minute by the mobility agent.')
cmiMnAdvFlags = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 1, 1, 1), Bits().clone(namedValues=NamedValues(("gre", 0), ("minEnc", 1), ("foreignAgent", 2), ("homeAgent", 3), ("busy", 4), ("regRequired", 5), ("reverseTunnel", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMnAdvFlags.setStatus('current')
if mibBuilder.loadTexts: cmiMnAdvFlags.setDescription('The flags are contained in the 7th byte in the extension of the most recently received mobility agent advertisement: gre -- Agent offers Generic Routing Encapsulation minEnc, -- Agent offers Minimal Encapsulation foreignAgent, -- Agent is a Foreign Agent homeAgent, -- Agent is a Home Agent busy, -- Foreign Agent is busy regRequired, -- FA registration is required reverseTunnel, -- Agent supports reverse tunneling.')
cmiMnRegistrationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 2, 1), )
if mibBuilder.loadTexts: cmiMnRegistrationTable.setStatus('current')
if mibBuilder.loadTexts: cmiMnRegistrationTable.setDescription("A table containing information about the mobile node's attempted registration(s). The mobile node updates this table based upon Registration Requests sent and Registration Replies received in response to these requests. Certain variables within this table are also updated when Registration Requests are retransmitted.")
cmiMnRegistrationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 2, 1, 1), )
mnRegistrationEntry.registerAugmentions(("CISCO-MOBILE-IP-MIB", "cmiMnRegistrationEntry"))
cmiMnRegistrationEntry.setIndexNames(*mnRegistrationEntry.getIndexNames())
if mibBuilder.loadTexts: cmiMnRegistrationEntry.setStatus('current')
if mibBuilder.loadTexts: cmiMnRegistrationEntry.setDescription('Information about one registration attempt.')
cmiMnRegFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 2, 1, 1, 1), CmiRegistrationFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMnRegFlags.setStatus('current')
if mibBuilder.loadTexts: cmiMnRegFlags.setDescription('Registration flags sent by the mobile node. It is the second byte in the Mobile IP Registration Request message.')
cmiMrReverseTunnel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrReverseTunnel.setStatus('current')
if mibBuilder.loadTexts: cmiMrReverseTunnel.setDescription('Specifies whether reverse tunneling is enabled on the mobile router or not.')
cmiMrRedundancyGroup = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrRedundancyGroup.setStatus('current')
if mibBuilder.loadTexts: cmiMrRedundancyGroup.setDescription('Name of the redundancy group used to provide network availability for the mobile router.')
cmiMrMobNetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 3), )
if mibBuilder.loadTexts: cmiMrMobNetTable.setStatus('current')
if mibBuilder.loadTexts: cmiMrMobNetTable.setDescription('A table containing information about all the networks for which mobility is provided by the mobile router.')
cmiMrMobNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 3, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiMrMobNetIfIndex"))
if mibBuilder.loadTexts: cmiMrMobNetEntry.setStatus('current')
if mibBuilder.loadTexts: cmiMrMobNetEntry.setDescription('Details of a single mobile network on mobile router.')
cmiMrMobNetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cmiMrMobNetIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmiMrMobNetIfIndex.setDescription('The ifIndex value from Interfaces table of MIB II for the interface on the mobile router connected to the mobile network.')
cmiMrMobNetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMobNetAddrType.setStatus('current')
if mibBuilder.loadTexts: cmiMrMobNetAddrType.setDescription('Represents the type of IP address stored in cmiMrMobNetAddr.')
cmiMrMobNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMobNetAddr.setStatus('current')
if mibBuilder.loadTexts: cmiMrMobNetAddr.setDescription('IP address of the mobile network.')
cmiMrMobNetPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 3, 1, 4), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMobNetPfxLen.setStatus('current')
if mibBuilder.loadTexts: cmiMrMobNetPfxLen.setDescription('Prefix length associated with the mobile network ip address.')
cmiMrMobNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrMobNetStatus.setStatus('current')
if mibBuilder.loadTexts: cmiMrMobNetStatus.setDescription('The row status for the mobile network entry.')
cmiMrHaTunnelIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrHaTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmiMrHaTunnelIfIndex.setDescription('The ifIndex value from Interfaces table of MIB II for the tunnel interface (to HA) of the mobile router.')
cmiMrHATable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 5), )
if mibBuilder.loadTexts: cmiMrHATable.setStatus('current')
if mibBuilder.loadTexts: cmiMrHATable.setDescription('A table containing additional parameters related to a home agent beyond that provided by MIP MIB mnHATable.')
cmiMrHAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 5, 1), )
mnHAEntry.registerAugmentions(("CISCO-MOBILE-IP-MIB", "cmiMrHAEntry"))
cmiMrHAEntry.setIndexNames(*mnHAEntry.getIndexNames())
if mibBuilder.loadTexts: cmiMrHAEntry.setStatus('current')
if mibBuilder.loadTexts: cmiMrHAEntry.setDescription('Additional information about a particular entry in the mnHATable beyond that provided by MIP MIB mnHAEntry.')
cmiMrHAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrHAPriority.setStatus('current')
if mibBuilder.loadTexts: cmiMrHAPriority.setDescription('The priority for this home agent.')
cmiMrHABest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrHABest.setStatus('current')
if mibBuilder.loadTexts: cmiMrHABest.setDescription('Indicates whether this home agent is the best (in terms of the priority or the configuration time, when multiple home agents have the same priority) or not. When it is true, the mobile router will try to register with this home agent first.')
cmiMrIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6), )
if mibBuilder.loadTexts: cmiMrIfTable.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfTable.setDescription('A table containing roaming/solicitation parameters for all roaming interfaces on the mobile router.')
cmiMrIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiMrIfIndex"))
if mibBuilder.loadTexts: cmiMrIfEntry.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfEntry.setDescription('Roaming/solicitation parameters for one interface.')
cmiMrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cmiMrIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfIndex.setDescription('The ifIndex value from Interfaces table of MIB II for an interface on the Mobile router.')
cmiMRIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMRIfDescription.setStatus('current')
if mibBuilder.loadTexts: cmiMRIfDescription.setDescription('Description of the access type for the mobile router interface.')
cmiMrIfHoldDown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfHoldDown.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfHoldDown.setDescription('Waiting time after which mobile router registers to agents heard on this interface.')
cmiMrIfRoamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfRoamPriority.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfRoamPriority.setDescription('The priority value used to select an interface among multiple interfaces to send registration request.')
cmiMrIfSolicitPeriodic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfSolicitPeriodic.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfSolicitPeriodic.setDescription('Specifies whether periodic agent solicitation is enabled or not. If this object is set to true(1), the mobile router will send solicitations on this interface periodically according to other configured parameters.')
cmiMrIfSolicitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfSolicitInterval.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfSolicitInterval.setDescription('The time interval after which a solicitation has to be sent once an agent advertisement is heard on the interface.')
cmiMrIfSolicitRetransInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfSolicitRetransInitial.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfSolicitRetransInitial.setDescription('The wait period before first retransmission of a solicitation when no agent advertisement is heard.')
cmiMrIfSolicitRetransMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfSolicitRetransMax.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfSolicitRetransMax.setDescription('This value specifies the maximum limit for the solicitation retransmission timeout. For each successive solicit message retransmission timeout period is twice the previous period.')
cmiMrIfSolicitRetransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfSolicitRetransLimit.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfSolicitRetransLimit.setDescription('The maximum number of solicitation retransmissions allowed.')
cmiMrIfSolicitRetransCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfSolicitRetransCurrent.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfSolicitRetransCurrent.setDescription('Current retransmission interval.')
cmiMrIfSolicitRetransRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfSolicitRetransRemaining.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfSolicitRetransRemaining.setDescription('Time remaining before the current retransmission interval expires.')
cmiMrIfSolicitRetransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfSolicitRetransCount.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfSolicitRetransCount.setDescription('The number of retransmissions of the solicitation.')
cmiMrIfCCoaAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 13), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfCCoaAddressType.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfCCoaAddressType.setDescription('Represents the type of IP address stored in cmiMrIfCCoaAddress.')
cmiMrIfCCoaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfCCoaAddress.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfCCoaAddress.setDescription('Interface address to be used as a collocated care-of IP address. Currently, the primary interface IP address is used as the CCoA.')
cmiMrIfCCoaDefaultGwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 15), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfCCoaDefaultGwType.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfCCoaDefaultGwType.setDescription('Represents the type of IP address stored in cmiMrIfCCoaDefaultGw.')
cmiMrIfCCoaDefaultGw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 16), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfCCoaDefaultGw.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfCCoaDefaultGw.setDescription('Gateway IP address to be used with CCoA registrations on an interface other than serial interface with a static (fixed) IP address.')
cmiMrIfCCoaRegRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfCCoaRegRetry.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfCCoaRegRetry.setDescription('Time to wait between successive registration attempts after CCoA registration failure.')
cmiMrIfCCoaRegRetryRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 18), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfCCoaRegRetryRemaining.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfCCoaRegRetryRemaining.setDescription('Time remaining before the current CCoA registration retry interval expires.')
cmiMrIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfStatus.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfStatus.setDescription('The row status for this table.')
cmiMrIfCCoaRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfCCoaRegistration.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfCCoaRegistration.setDescription("This indicates the type of registraton mobile router will currently attempt on this interface. If cmiMrIfCCoaRegistration is false, the mobile router will attempt to register through a foreign agent. If cmiMrIfCCoaRegistration is true, the mobile router will attempt CCoA registration. cmiMrIfCCoaRegistration will be true when cmiMrIfCCoaOnly is set to true. cmiMrIfCCoaRegistration will also be true when cmiMrIfCCoaOnly is set to 'false' and foreign agent advertisements are not heard on the interface.")
cmiMrIfCCoaOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfCCoaOnly.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfCCoaOnly.setDescription("This specifies whether 'ccoa-only' state is enabled or not on this mobile router interface. When this variable is set to true, mobile router will attempt to register directly using a CCoA and will not attempt foreign agent registrations even if foreign agent advertisements are heard on this interface. When set to false, the mobile router will attempt to register via a foreign agent whenever foreign agent advertisements are heard. When foreign agent advertisements are not heard, then the interface will attempt CCoA registration.")
cmiMrIfCCoaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMrIfCCoaEnable.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfCCoaEnable.setDescription('This enables CCoA registrations on the mobile router interface. When this object is set to false, the mobile router will attempt only foreign agent registrations on this interface. When this object is set to true, the interface is enabled for CCoA registration. Depending on the value of the cmiMrIfCCoaOnly object, the mobile router may register with a CCoA or with a foreign agent.')
cmiMrIfRoamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfRoamStatus.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfRoamStatus.setDescription('Indicates whether the mobile router is currently registered through this interface.')
cmiMrIfRegisteredCoAType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 24), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfRegisteredCoAType.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfRegisteredCoAType.setDescription('Represents the type of address stored in cmiMrIfRegisteredCoA.')
cmiMrIfRegisteredCoA = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 25), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfRegisteredCoA.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfRegisteredCoA.setDescription('Represents the care-of address registered by the mobile router through this interface. This will be zero when the mobile router is at home or not registered. If the registration is through a foreign agent, this contains the foreign agent care-of address. If the registration uses a collocated care-of address, this contains the collocated care-of address.')
cmiMrIfRegisteredMaAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfRegisteredMaAddrType.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfRegisteredMaAddrType.setDescription('Represents the type of address stored in cmiMrIfRegisteredMaAddr.')
cmiMrIfRegisteredMaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 27), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfRegisteredMaAddr.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfRegisteredMaAddr.setDescription('Represents the address of the mobility agent through which this mobile router interface is registered. It contains the home agent address if registered using a collocated care-of address. It contains the foreign agent address if registered through a foreign agent. It is zero when the mobile router is at home or not registered.')
cmiMrIfHaTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 28), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfHaTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfHaTunnelIfIndex.setDescription('The ifIndex value from Interfaces table of MIB II for the tunnel interface (to home agent) of the mobile router through this roaming interface.')
cmiMrIfID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 6, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrIfID.setStatus('current')
if mibBuilder.loadTexts: cmiMrIfID.setDescription('A unique number identifying the roaming interface. This is also used as an unique identifier for the tunnel between home agent and mobile router.')
cmiMrBetterIfDetected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrBetterIfDetected.setStatus('current')
if mibBuilder.loadTexts: cmiMrBetterIfDetected.setDescription('Number of times that the mobile router has detected a better interface.')
cmiMrTunnelPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrTunnelPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: cmiMrTunnelPktsRcvd.setDescription('Number of packets received on the MR-HA tunnel.')
cmiMrTunnelPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrTunnelPktsSent.setStatus('current')
if mibBuilder.loadTexts: cmiMrTunnelPktsSent.setDescription('Number of packets sent through the MR-HA tunnel.')
cmiMrTunnelBytesRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrTunnelBytesRcvd.setStatus('current')
if mibBuilder.loadTexts: cmiMrTunnelBytesRcvd.setDescription('Number of bytes received on the MR-HA tunnel.')
cmiMrTunnelBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrTunnelBytesSent.setStatus('current')
if mibBuilder.loadTexts: cmiMrTunnelBytesSent.setDescription('Number of bytes sent through the MR-HA tunnel.')
cmiMrRedStateActive = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrRedStateActive.setStatus('current')
if mibBuilder.loadTexts: cmiMrRedStateActive.setDescription('Number of times the redundancy state of the mobile router changed to active.')
cmiMrRedStatePassive = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrRedStatePassive.setStatus('current')
if mibBuilder.loadTexts: cmiMrRedStatePassive.setDescription('Number of times the redundancy state of the mobile router changed to passive.')
cmiMrCollocatedTunnel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("double", 2))).clone('single')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrCollocatedTunnel.setStatus('current')
if mibBuilder.loadTexts: cmiMrCollocatedTunnel.setDescription('This indicates whether a single tunnel or dual tunnels will be created between MR and HA when the mobile router registers with a CCoA.')
cmiMrMultiPath = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrMultiPath.setStatus('current')
if mibBuilder.loadTexts: cmiMrMultiPath.setDescription('Specifies whether multiple path is enabled on the mobile router or not.')
cmiMrMultiPathMetricType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 3, 16), CmiMultiPathMetricType().clone('bandwidth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrMultiPathMetricType.setStatus('current')
if mibBuilder.loadTexts: cmiMrMultiPathMetricType.setDescription('Specifies the metric to use when multiple path is enabled on the mobile router.')
cmiMrMaAdvTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1), )
if mibBuilder.loadTexts: cmiMrMaAdvTable.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvTable.setDescription('A table with information related to all the agent advertisements heard by the mobile router.')
cmiMrMaAdvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiMrMaAddressType"), (0, "CISCO-MOBILE-IP-MIB", "cmiMrMaAddress"))
if mibBuilder.loadTexts: cmiMrMaAdvEntry.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvEntry.setDescription('Information related to a single agent advertisement.')
cmiMrMaAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cmiMrMaAddressType.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAddressType.setDescription('Represents the type of IP address stored in cmiMrMaAddress. Only IPv4 address type is supported.')
cmiMrMaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cmiMrMaAddress.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAddress.setDescription('IP address of the mobile agent from which the advertisement was received. Only IPv4 addresses are supported.')
cmiMrMaIsHa = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaIsHa.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaIsHa.setDescription("Indicates whether the mobile agent is a home agent for the mobile router or not. If true, it means that the agent is one of the mobile router's configured home agents.")
cmiMrMaAdvRcvIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaAdvRcvIf.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvRcvIf.setDescription('The ifIndex value from Interfaces table of MIB II for the interface of mobile router on which the advertisement from the mobile agent was received.')
cmiMrMaIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaIfMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaIfMacAddress.setDescription('Mobile agent advertising interface MAC address.')
cmiMrMaAdvSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaAdvSequence.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvSequence.setDescription('The sequence number of the most recently received agent advertisement. The sequence number ranges from 0 to 0xffff. After the sequence number attains the value 0xffff, it will roll over to 256.')
cmiMrMaAdvFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 7), Bits().clone(namedValues=NamedValues(("reverseTunnel", 0), ("gre", 1), ("minEnc", 2), ("foreignAgent", 3), ("homeAgent", 4), ("busy", 5), ("regRequired", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaAdvFlags.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvFlags.setDescription('The flags contained in the 7th byte in the extension of the most recently received mobility agent advertisement: reverseTunnel, -- Agent supports reverse tunneling gre, -- Agent offers Generic Routing Encapsulation minEnc, -- Agent offers Minimal Encapsulation foreignAgent, -- Agent is a Foreign Agent homeAgent, -- Agent is a Home Agent busy, -- Foreign Agent is busy regRequired -- FA registration is required.')
cmiMrMaAdvMaxRegLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaAdvMaxRegLifetime.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvMaxRegLifetime.setDescription('The longest registration lifetime in seconds that the agent is willing to accept in any registration request.')
cmiMrMaAdvMaxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaAdvMaxLifetime.setReference('AdvertisementLifeTime in RFC1256.')
if mibBuilder.loadTexts: cmiMrMaAdvMaxLifetime.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvMaxLifetime.setDescription('The maximum length of time that the Advertisement is considered valid in the absence of further Advertisements.')
cmiMrMaAdvLifetimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 10), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaAdvLifetimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvLifetimeRemaining.setDescription('The time remaining for the advertisement lifetime expiration.')
cmiMrMaAdvTimeReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaAdvTimeReceived.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvTimeReceived.setDescription('The time at which the most recently received advertisement was received.')
cmiMrMaAdvTimeFirstHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaAdvTimeFirstHeard.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaAdvTimeFirstHeard.setDescription('The time at which the first Advertisement from the mobile agent was received.')
cmiMrMaHoldDownRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 4, 1, 1, 13), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrMaHoldDownRemaining.setStatus('current')
if mibBuilder.loadTexts: cmiMrMaHoldDownRemaining.setDescription('The time remaining for the hold down period expiration.')
cmiMrRegExtendExpire = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrRegExtendExpire.setStatus('current')
if mibBuilder.loadTexts: cmiMrRegExtendExpire.setDescription('Time in seconds before lifetime expiration to send registration request.')
cmiMrRegExtendRetry = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrRegExtendRetry.setStatus('current')
if mibBuilder.loadTexts: cmiMrRegExtendRetry.setDescription('The number of retries to be sent.')
cmiMrRegExtendInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 5, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrRegExtendInterval.setStatus('current')
if mibBuilder.loadTexts: cmiMrRegExtendInterval.setDescription('Time after which the mobile router is to send another registration request when no reply is received.')
cmiMrRegLifetime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 5, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrRegLifetime.setStatus('current')
if mibBuilder.loadTexts: cmiMrRegLifetime.setDescription('The requested lifetime in registration requests.')
cmiMrRegRetransInitial = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 5, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrRegRetransInitial.setStatus('current')
if mibBuilder.loadTexts: cmiMrRegRetransInitial.setDescription('Time to wait before retransmission for the first time when no reply is received.')
cmiMrRegRetransMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 5, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrRegRetransMax.setStatus('current')
if mibBuilder.loadTexts: cmiMrRegRetransMax.setDescription('Maximum retransmission time allowed.')
cmiMrRegRetransLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 5, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiMrRegRetransLimit.setStatus('current')
if mibBuilder.loadTexts: cmiMrRegRetransLimit.setDescription('The maximum number of retransmissions allowed.')
cmiMrRegNewHa = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 5, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMrRegNewHa.setStatus('current')
if mibBuilder.loadTexts: cmiMrRegNewHa.setDescription('The number of times MR registers with a different HA due to changes in HA / HA priority.')
cmiTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6, 1), Bits().clone(namedValues=NamedValues(("cmiMrStateChangeTrap", 0), ("cmiMrCoaChangeTrap", 1), ("cmiMrNewMATrap", 2), ("cmiHaMnRegFailedTrap", 3), ("cmiHaMaxBindingsNotif", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmiTrapControl.setStatus('current')
if mibBuilder.loadTexts: cmiTrapControl.setDescription("An object to turn Mobile IP notification generation on and off. Setting a notification type's bit to 1 enables generation of notifications of that type, subject to further filtering resulting from entries in the snmpNotificationMIB. Setting the bit to 0 disables generation of notifications of that type.")
cmiNtRegCOAType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiNtRegCOAType.setStatus('current')
if mibBuilder.loadTexts: cmiNtRegCOAType.setDescription('Represents the type of the address stored in cmiHaRegMnCOA.')
cmiNtRegCOA = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiNtRegCOA.setStatus('current')
if mibBuilder.loadTexts: cmiNtRegCOA.setDescription("The Mobile Node's Care-of address.")
cmiNtRegHAAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiNtRegHAAddrType.setStatus('current')
if mibBuilder.loadTexts: cmiNtRegHAAddrType.setDescription('Represents the type of the address stored in cmiHaRegMnHa.')
cmiNtRegHomeAgent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiNtRegHomeAgent.setStatus('current')
if mibBuilder.loadTexts: cmiNtRegHomeAgent.setDescription("The Mobile Node's Home Agent address.")
cmiNtRegHomeAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiNtRegHomeAddressType.setStatus('current')
if mibBuilder.loadTexts: cmiNtRegHomeAddressType.setDescription('Represents the type of the address stored in cmiHaRegRecentHomeAddress.')
cmiNtRegHomeAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiNtRegHomeAddress.setStatus('current')
if mibBuilder.loadTexts: cmiNtRegHomeAddress.setDescription('Home (IP) address of visiting mobile node.')
cmiNtRegNAI = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiNtRegNAI.setStatus('current')
if mibBuilder.loadTexts: cmiNtRegNAI.setDescription('The identifier associated with the mobile node.')
cmiNtRegDeniedCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139))).clone(namedValues=NamedValues(("reasonUnspecified", 128), ("admProhibited", 129), ("insufficientResource", 130), ("mnAuthenticationFailure", 131), ("faAuthenticationFailure", 132), ("idMismatch", 133), ("poorlyFormedRequest", 134), ("tooManyBindings", 135), ("unknownHA", 136), ("reverseTunnelUnavailable", 137), ("reverseTunnelBitNotSet", 138), ("encapsulationUnavailable", 139)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiNtRegDeniedCode.setStatus('current')
if mibBuilder.loadTexts: cmiNtRegDeniedCode.setDescription('The Code indicating the reason why the most recent Registration Request for this mobile node was rejected by the home agent.')
ciscoMobileIpMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 0))
cmiMrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 174, 0, 1)).setObjects(("MIP-MIB", "mnState"))
if mibBuilder.loadTexts: cmiMrStateChange.setStatus('current')
if mibBuilder.loadTexts: cmiMrStateChange.setDescription('The Mobile Router state change notification. This notification is sent when the Mobile Router has undergone a state change from its previous state of Mobile IP. Generation of this notification is controlled by the cmiTrapControl object.')
cmiMrCoaChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 174, 0, 2)).setObjects(("MIP-MIB", "mnRegCOA"), ("MIP-MIB", "mnRegAgentAddress"))
if mibBuilder.loadTexts: cmiMrCoaChange.setStatus('current')
if mibBuilder.loadTexts: cmiMrCoaChange.setDescription('The Mobile Router care-of-address change notification. This notification is sent when the Mobile Router has changed its care-of-address. Generation of this notification is controlled by the cmiTrapControl object.')
cmiMrNewMA = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 174, 0, 3)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrMaIsHa"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvFlags"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvRcvIf"))
if mibBuilder.loadTexts: cmiMrNewMA.setStatus('current')
if mibBuilder.loadTexts: cmiMrNewMA.setDescription('The Mobile Router new agent discovery notification. This notification is sent when the Mobile Router has heard an agent advertisement from a new mobile agent. Generation of this notification is controlled by the cmiTrapControl object.')
cmiHaMnRegReqFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 174, 0, 4)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiNtRegCOAType"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegCOA"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegHAAddrType"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegHomeAgent"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegHomeAddressType"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegHomeAddress"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegNAI"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegDeniedCode"))
if mibBuilder.loadTexts: cmiHaMnRegReqFailed.setStatus('current')
if mibBuilder.loadTexts: cmiHaMnRegReqFailed.setDescription('The MN registration request failed notification. This notification is sent when the registration request from MN is rejected by Home Agent.')
cmiHaMaxBindingsNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 174, 0, 5)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalMobilityBindings"), ("CISCO-MOBILE-IP-MIB", "cmiHaMaximumBindings"))
if mibBuilder.loadTexts: cmiHaMaxBindingsNotif.setStatus('current')
if mibBuilder.loadTexts: cmiHaMaxBindingsNotif.setDescription('This notification is generated when the registration request from an MN is rejected by the home agent, and the total number of registrations on the home agent has already reached the maximum number of allowed bindings represented by cmiHaMaximumBindings.')
cmiMaAdvConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1), )
if mibBuilder.loadTexts: cmiMaAdvConfigTable.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvConfigTable.setDescription('A table containing configurable advertisement parameters for all advertisement interfaces in the mobility agent.')
cmiMaAdvConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1), ).setIndexNames((0, "CISCO-MOBILE-IP-MIB", "cmiMaAdvInterfaceIndex"))
if mibBuilder.loadTexts: cmiMaAdvConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvConfigEntry.setDescription('Advertisement parameters for one advertisement interface.')
cmiMaAdvInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cmiMaAdvInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvInterfaceIndex.setDescription('The ifIndex value from Interfaces table of MIB II for the interface which is advertising.')
cmiMaInterfaceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMaInterfaceAddressType.setStatus('current')
if mibBuilder.loadTexts: cmiMaInterfaceAddressType.setDescription('Represents the type of IP address stored in cmiMaInterfaceAddress.')
cmiMaInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmiMaInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: cmiMaInterfaceAddress.setDescription('IP address for advertisement interface.')
cmiMaAdvMaxRegLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535)).clone(36000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMaAdvMaxRegLifetime.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvMaxRegLifetime.setDescription('The longest lifetime in seconds that mobility agent is willing to accept in any registration request.')
cmiMaAdvPrefixLengthInclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMaAdvPrefixLengthInclusion.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvPrefixLengthInclusion.setDescription('Whether the advertisement should include the Prefix- Lengths Extension. If it is true, all advertisements sent over this interface should include the Prefix-Lengths Extension.')
cmiMaAdvAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMaAdvAddressType.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvAddressType.setDescription('Represents the type of IP address stored in cmiMaAdvAddress.')
cmiMaAdvAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMaAdvAddress.setReference('AdvertisementAddress in RFC1256.')
if mibBuilder.loadTexts: cmiMaAdvAddress.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvAddress.setDescription('The IP destination address to be used for advertisements sent from the interface. The only permissible values are the all-systems multicast address (224.0.0.1) or the limited-broadcast address (255.255.255.255). Default value is 224.0.0.1 if the router supports IP multicast on the interface, else 255.255.255.255')
cmiMaAdvMaxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 1800), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMaAdvMaxInterval.setReference('MaxAdvertisementInterval in RFC1256.')
if mibBuilder.loadTexts: cmiMaAdvMaxInterval.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvMaxInterval.setDescription('The maximum time in seconds between successive transmissions of Agent Advertisements from this interface. The default value will be 600 seconds for an interface which uses IEEE 802 style headers and for ATM interface. In other cases, default value will be zero.')
cmiMaAdvMinInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 1800), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMaAdvMinInterval.setReference('MinAdvertisementInterval in RFC1256.')
if mibBuilder.loadTexts: cmiMaAdvMinInterval.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvMinInterval.setDescription('The minimum time in seconds between successive transmissions of Agent Advertisements from this interface. Default value is 0.75 * cmiMaAdvMaxInterval.')
cmiMaAdvMaxAdvLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 9000), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMaAdvMaxAdvLifetime.setReference('AdvertisementLifetime in RFC1256.')
if mibBuilder.loadTexts: cmiMaAdvMaxAdvLifetime.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvMaxAdvLifetime.setDescription('The time (in seconds) to be placed in the Lifetime field of the RFC 1256-portion of the Agent Advertisements sent over this interface. Default value is 3 * cmiMaAdvMaxInterval.')
cmiMaAdvResponseSolicitationOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMaAdvResponseSolicitationOnly.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvResponseSolicitationOnly.setDescription('The flag indicates whether the advertisement from that interface should be sent only in response to an Agent Solicitation message. This value depends upon cmiMaAdvMaxInterval. If cmiMaAdvMaxInterval is zero, this value will be set to true. If this is set to True, then cmiMaAdvMaxInterval will be set to zero.')
cmiMaAdvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 174, 1, 4, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmiMaAdvStatus.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvStatus.setDescription("The row status for the agent advertisement table. If this column status is 'active', the manager should not change any column in the row. Only cmiMaAdvInterfaceIndex is mandatory for creating a new row. The interface should already exist.")
ciscoMobileIpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 3))
ciscoMobileIpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1))
ciscoMobileIpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2))
ciscoMobileIpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 1)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpCompliance = ciscoMobileIpCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoMobileIpCompliance.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB. Superseded by ciscoMobileIPComplianceV12R02.')
ciscoMobileIpComplianceV12R02 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 2)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R02 = ciscoMobileIpComplianceV12R02.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R02.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB. Superseded by ciscoMobileIPComplianceV12R03.')
ciscoMobileIpComplianceV12R03 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 3)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R03 = ciscoMobileIpComplianceV12R03.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R03.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB. Superseded by ciscoMobileIPComplianceV12R03r1')
ciscoMobileIpComplianceV12R03r1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 4)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R03r1 = ciscoMobileIpComplianceV12R03r1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R03r1.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceV12R04 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 5)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroup"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R04 = ciscoMobileIpComplianceV12R04.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R04.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceV12R05 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 6)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroup"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R05 = ciscoMobileIpComplianceV12R05.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R05.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceV12R06 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 7)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroup"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R06 = ciscoMobileIpComplianceV12R06.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R06.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceV12R07 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 8)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroup"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R07 = ciscoMobileIpComplianceV12R07.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R07.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceV12R08 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 9)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroupV2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroupV2"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R08 = ciscoMobileIpComplianceV12R08.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R08.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceV12R09 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 10)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV3"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroupV2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroupV2"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R09 = ciscoMobileIpComplianceV12R09.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R09.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceV12R10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 11)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2Sup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroupSup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV3"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV3Sup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroupV2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroupV2"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R10 = ciscoMobileIpComplianceV12R10.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R10.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceV12R11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 12)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2Sup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroupSup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV3"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV3Sup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroupV2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroupV2"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2Sup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceV12R11 = ciscoMobileIpComplianceV12R11.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceV12R11.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 13)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaSystemGroupV1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroupV3"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2Sup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroupSup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV3"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV3Sup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroupV2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroupV2"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2Sup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceRev1 = ciscoMobileIpComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpComplianceRev1.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 1, 14)).setObjects(("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaSystemGroupV1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroupV3"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2Sup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRedunGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecAssocGroupV12R02"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpSecViolationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMaRegGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpFaSystemGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMnRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaMobNetGroupSup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV3"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrSystemGroupV3Sup1"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrDiscoveryGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrRegistrationGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpTrapObjectsGroupV2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpMrNotificationGroupV2"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvertisementGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegGroupV12R03r2Sup2"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegIntervalStatsGroup"), ("CISCO-MOBILE-IP-MIB", "ciscoMobileIpHaRegTunnelStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpComplianceRev2 = ciscoMobileIpComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpComplianceRev2.setDescription('The compliance statement for management entities which implement the Cisco Mobile IP MIB.')
ciscoMobileIpFaRegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 1)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiFaRegTotalVisitors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpFaRegGroup = ciscoMobileIpFaRegGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoMobileIpFaRegGroup.setDescription('A collection of objects providing management information for the registration function within a foreign agent. Superseded by ciscoMobileIpFaRegGroupV12R02.')
ciscoMobileIpHaRegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 2)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalMobilityBindings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegGroup = ciscoMobileIpHaRegGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoMobileIpHaRegGroup.setDescription('A collection of objects providing management information for the registration function within a home agent. Superseded by ciscoMobileIpHaRegGroupV12R02.')
ciscoMobileIpFaRegGroupV12R02 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 3)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiFaRegTotalVisitors"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorHomeAddress"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorHomeAgentAddress"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorTimeGranted"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorTimeRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegFlags"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIDLow"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIDHigh"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIsAccepted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpFaRegGroupV12R02 = ciscoMobileIpFaRegGroupV12R02.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpFaRegGroupV12R02.setDescription('A collection of objects providing management information for the registration function within a foreign agent. Superseded by ciscoMobileIpFaRegGroupV12R03.')
ciscoMobileIpHaRegGroupV12R02 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 4)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalMobilityBindings"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIdentifierType"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIdentifier"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegServAcceptedRequests"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegServDeniedRequests"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegOverallServTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServAcceptedTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServDeniedTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServDeniedCode"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalProcLocRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxProcLocInMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegDateMaxRegsProcLoc"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegProcLocInLastMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalProcByAAARegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxProcByAAAInMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegDateMaxRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegProcAAAInLastByMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegAvgTimeRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxTimeRegsProcByAAA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegGroupV12R02 = ciscoMobileIpHaRegGroupV12R02.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpHaRegGroupV12R02.setDescription('A collection of objects providing management information for the registration function within a home agent. Superseded by ciscoMobileIpHaRegGroupV12R03.')
ciscoMobileIpFaRegGroupV12R03 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 9)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiFaRegTotalVisitors"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorHomeAddress"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorHomeAgentAddress"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorTimeGranted"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorTimeRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegFlags"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIDLow"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIDHigh"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsRelayed"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRepliesValidFromHA"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRepliesValidRelayMN"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsRelayed"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRepliesValidFromHA"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRepliesValidRelayToMN"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsRelayed"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRepliesValidFromHA"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRepliesValidRelayToMN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpFaRegGroupV12R03 = ciscoMobileIpFaRegGroupV12R03.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpFaRegGroupV12R03.setDescription('A collection of objects providing management information for the registration function within a foreign agent. Superseded by ciscoMobileIpFaRegGroupV12R03r1')
ciscoMobileIpHaRegGroupV12R03 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 10)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalMobilityBindings"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIdentifierType"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIdentifier"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegServAcceptedRequests"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegServDeniedRequests"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegOverallServTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServAcceptedTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServDeniedTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServDeniedCode"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalProcLocRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxProcLocInMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegDateMaxRegsProcLoc"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegProcLocInLastMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalProcByAAARegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxProcByAAAInMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegDateMaxRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegProcAAAInLastByMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegAvgTimeRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxTimeRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaEncapUnavailable"), ("CISCO-MOBILE-IP-MIB", "cmiHaNAICheckFailures"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsDiscarded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegGroupV12R03 = ciscoMobileIpHaRegGroupV12R03.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpHaRegGroupV12R03.setDescription('A collection of objects providing management information for the registration function within a home agent. Superseded by ciscoMobileIpHaRegGroupV12R03r1')
ciscoMobileIpSecAssocGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 6)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiSecAssocsCount"), ("CISCO-MOBILE-IP-MIB", "cmiSecAlgorithmType"), ("CISCO-MOBILE-IP-MIB", "cmiSecAlgorithmMode"), ("CISCO-MOBILE-IP-MIB", "cmiSecKey"), ("CISCO-MOBILE-IP-MIB", "cmiSecReplayMethod"), ("CISCO-MOBILE-IP-MIB", "cmiSecStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpSecAssocGroup = ciscoMobileIpSecAssocGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpSecAssocGroup.setDescription('A collection of objects providing the management information for security associations of Mobile IP entities. Superseded by ciscoMobileIpSecAssocGroupV12R02')
ciscoMobileIpHaRedunGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 5)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRedunSentBUs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunFailedBUs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunReceivedBUAcks"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunTotalSentBUs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunReceivedBUs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunSentBUAcks"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunSentBIReqs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunFailedBIReqs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunTotalSentBIReqs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunReceivedBIReps"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunDroppedBIReps"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunSentBIAcks"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunReceivedBIReqs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunSentBIReps"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunFailedBIReps"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunTotalSentBIReps"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunReceivedBIAcks"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunDroppedBIAcks"), ("CISCO-MOBILE-IP-MIB", "cmiHaRedunSecViolations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRedunGroup = ciscoMobileIpHaRedunGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaRedunGroup.setDescription('A collection of objects providing management information for the redundancy function within a home agent.')
ciscoMobileIpSecViolationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 7)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiSecTotalViolations"), ("CISCO-MOBILE-IP-MIB", "cmiSecRecentViolationSPI"), ("CISCO-MOBILE-IP-MIB", "cmiSecRecentViolationTime"), ("CISCO-MOBILE-IP-MIB", "cmiSecRecentViolationIDLow"), ("CISCO-MOBILE-IP-MIB", "cmiSecRecentViolationIDHigh"), ("CISCO-MOBILE-IP-MIB", "cmiSecRecentViolationReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpSecViolationGroup = ciscoMobileIpSecViolationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpSecViolationGroup.setDescription('A collection of objects providing the management information for security violation logging of Mobile IP entities.')
ciscoMobileIpMaRegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 8)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMaRegMaxInMinuteRegs"), ("CISCO-MOBILE-IP-MIB", "cmiMaRegDateMaxRegsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiMaRegInLastMinuteRegs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMaRegGroup = ciscoMobileIpMaRegGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpMaRegGroup.setDescription('A collection of objects providing the management information for the registration function within a mobility agent.')
ciscoMobileIpFaRegGroupV12R03r1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 11)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiFaRegTotalVisitors"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorHomeAddress"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorHomeAgentAddress"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorTimeGranted"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorTimeRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIDLow"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIDHigh"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegFlagsRev1"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorChallengeValue"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsRelayed"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRepliesValidFromHA"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRepliesValidRelayMN"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsRelayed"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRepliesValidFromHA"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRepliesValidRelayToMN"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsRelayed"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRepliesValidFromHA"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRepliesValidRelayToMN"), ("CISCO-MOBILE-IP-MIB", "cmiFaReverseTunnelUnavailable"), ("CISCO-MOBILE-IP-MIB", "cmiFaReverseTunnelBitNotSet"), ("CISCO-MOBILE-IP-MIB", "cmiFaMnTooDistant"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeliveryStyleUnsupported"), ("CISCO-MOBILE-IP-MIB", "cmiFaUnknownChallenge"), ("CISCO-MOBILE-IP-MIB", "cmiFaMissingChallenge"), ("CISCO-MOBILE-IP-MIB", "cmiFaStaleChallenge"), ("CISCO-MOBILE-IP-MIB", "cmiFaCvsesFromMnRejected"), ("CISCO-MOBILE-IP-MIB", "cmiFaCvsesFromHaRejected"), ("CISCO-MOBILE-IP-MIB", "cmiFaNvsesFromMnNeglected"), ("CISCO-MOBILE-IP-MIB", "cmiFaNvsesFromHaNeglected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpFaRegGroupV12R03r1 = ciscoMobileIpFaRegGroupV12R03r1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpFaRegGroupV12R03r1.setDescription('A collection of objects providing management information for the registration function within a foreign agent.')
ciscoMobileIpHaRegGroupV12R03r1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 12)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalMobilityBindings"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIdentifierType"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIdentifier"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMobilityBindingRegFlags"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegServAcceptedRequests"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegServDeniedRequests"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegOverallServTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServAcceptedTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServDeniedTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServDeniedCode"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalProcLocRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxProcLocInMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegDateMaxRegsProcLoc"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegProcLocInLastMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalProcByAAARegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxProcByAAAInMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegDateMaxRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegProcAAAInLastByMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegAvgTimeRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxTimeRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaEncapUnavailable"), ("CISCO-MOBILE-IP-MIB", "cmiHaNAICheckFailures"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaReverseTunnelUnavailable"), ("CISCO-MOBILE-IP-MIB", "cmiHaReverseTunnelBitNotSet"), ("CISCO-MOBILE-IP-MIB", "cmiHaEncapsulationUnavailable"), ("CISCO-MOBILE-IP-MIB", "cmiHaCvsesFromMnRejected"), ("CISCO-MOBILE-IP-MIB", "cmiHaCvsesFromFaRejected"), ("CISCO-MOBILE-IP-MIB", "cmiHaNvsesFromMnNeglected"), ("CISCO-MOBILE-IP-MIB", "cmiHaNvsesFromFaNeglected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegGroupV12R03r1 = ciscoMobileIpHaRegGroupV12R03r1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpHaRegGroupV12R03r1.setDescription('A collection of objects providing management information for the registration function within a home agent.')
ciscoMobileIpFaAdvertisementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 13)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiFaAdvertIsBusy"), ("CISCO-MOBILE-IP-MIB", "cmiFaAdvertRegRequired"), ("CISCO-MOBILE-IP-MIB", "cmiFaAdvertChallengeWindow"), ("CISCO-MOBILE-IP-MIB", "cmiFaAdvertChallengeValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpFaAdvertisementGroup = ciscoMobileIpFaAdvertisementGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpFaAdvertisementGroup.setDescription('A collection of objects providing supplemental management information for the Agent Advertisement function within a foreign agent.')
ciscoMobileIpFaSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 14)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiFaRevTunnelSupported"), ("CISCO-MOBILE-IP-MIB", "cmiFaChallengeSupported"), ("CISCO-MOBILE-IP-MIB", "cmiFaEncapDeliveryStyleSupported"), ("CISCO-MOBILE-IP-MIB", "cmiFaReverseTunnelEnable"), ("CISCO-MOBILE-IP-MIB", "cmiFaChallengeEnable"), ("CISCO-MOBILE-IP-MIB", "cmiFaAdvertChallengeChapSPI"), ("CISCO-MOBILE-IP-MIB", "cmiFaCoaInterfaceOnly"), ("CISCO-MOBILE-IP-MIB", "cmiFaCoaTransmitOnly"), ("CISCO-MOBILE-IP-MIB", "cmiFaCoaRegAsymLink"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpFaSystemGroup = ciscoMobileIpFaSystemGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpFaSystemGroup.setDescription('A collection of objects providing the supporting/ enabled feature information within a foreign agent.')
ciscoMobileIpMnDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 15)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMnAdvFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMnDiscoveryGroup = ciscoMobileIpMnDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpMnDiscoveryGroup.setDescription('Group which supports the recently changed Adv Flag')
ciscoMobileIpMnRegistrationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 16)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMnRegFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMnRegistrationGroup = ciscoMobileIpMnRegistrationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpMnRegistrationGroup.setDescription('Group having information about Mn registration')
ciscoMobileIpHaMobNetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 17)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaMrDynamic"), ("CISCO-MOBILE-IP-MIB", "cmiHaMrStatus"), ("CISCO-MOBILE-IP-MIB", "cmiHaMobNetDynamic"), ("CISCO-MOBILE-IP-MIB", "cmiHaMobNetStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaMobNetGroup = ciscoMobileIpHaMobNetGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaMobNetGroup.setDescription('A collection of objects providing the management information related to mobile networks in a home agent.')
ciscoMobileIpMrSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 18)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrReverseTunnel"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedundancyGroup"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetAddrType"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetAddr"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetPfxLen"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetStatus"), ("CISCO-MOBILE-IP-MIB", "cmiMrHaTunnelIfIndex"), ("CISCO-MOBILE-IP-MIB", "cmiMrHAPriority"), ("CISCO-MOBILE-IP-MIB", "cmiMrHABest"), ("CISCO-MOBILE-IP-MIB", "cmiMRIfDescription"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfHoldDown"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfRoamPriority"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitPeriodic"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitInterval"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransInitial"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransMax"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransLimit"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransCurrent"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransCount"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaAddressType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaAddress"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaDefaultGwType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaDefaultGw"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegRetry"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegRetryRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfStatus"), ("CISCO-MOBILE-IP-MIB", "cmiMrBetterIfDetected"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelPktsRcvd"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelPktsSent"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelBytesRcvd"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelBytesSent"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedStateActive"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedStatePassive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrSystemGroup = ciscoMobileIpMrSystemGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpMrSystemGroup.setDescription('A collection of objects providing the management information in a mobile router.')
ciscoMobileIpMrDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 19)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrMaIsHa"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvRcvIf"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaIfMacAddress"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvSequence"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvFlags"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvMaxRegLifetime"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvMaxLifetime"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvLifetimeRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvTimeReceived"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaAdvTimeFirstHeard"), ("CISCO-MOBILE-IP-MIB", "cmiMrMaHoldDownRemaining"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrDiscoveryGroup = ciscoMobileIpMrDiscoveryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpMrDiscoveryGroup.setDescription('A collection of objects providing the management information for the agent discovery function in a mobile router.')
ciscoMobileIpMrRegistrationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 20)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrRegExtendExpire"), ("CISCO-MOBILE-IP-MIB", "cmiMrRegExtendRetry"), ("CISCO-MOBILE-IP-MIB", "cmiMrRegExtendInterval"), ("CISCO-MOBILE-IP-MIB", "cmiMrRegLifetime"), ("CISCO-MOBILE-IP-MIB", "cmiMrRegRetransInitial"), ("CISCO-MOBILE-IP-MIB", "cmiMrRegRetransMax"), ("CISCO-MOBILE-IP-MIB", "cmiMrRegRetransLimit"), ("CISCO-MOBILE-IP-MIB", "cmiMrRegNewHa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrRegistrationGroup = ciscoMobileIpMrRegistrationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpMrRegistrationGroup.setDescription('A collection of objects providing the management information for the registration function within a mobile router.')
ciscoMobileIpTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 21)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiTrapControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpTrapObjectsGroup = ciscoMobileIpTrapObjectsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpTrapObjectsGroup.setDescription('A collection of objects providing the management information related to notifications in Mobile IP entities.')
ciscoMobileIpMrNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 22)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrStateChange"), ("CISCO-MOBILE-IP-MIB", "cmiMrCoaChange"), ("CISCO-MOBILE-IP-MIB", "cmiMrNewMA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrNotificationGroup = ciscoMobileIpMrNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpMrNotificationGroup.setDescription('Group of notifications on a Mobile Router.')
ciscoMobileIpSecAssocGroupV12R02 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 23)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiSecAssocsCount"), ("CISCO-MOBILE-IP-MIB", "cmiSecAlgorithmType"), ("CISCO-MOBILE-IP-MIB", "cmiSecAlgorithmMode"), ("CISCO-MOBILE-IP-MIB", "cmiSecReplayMethod"), ("CISCO-MOBILE-IP-MIB", "cmiSecStatus"), ("CISCO-MOBILE-IP-MIB", "cmiSecKey2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpSecAssocGroupV12R02 = ciscoMobileIpSecAssocGroupV12R02.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpSecAssocGroupV12R02.setDescription('A collection of objects providing the management information for security associations of Mobile IP entities.')
cmiMaAdvertisementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 24)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMaInterfaceAddressType"), ("CISCO-MOBILE-IP-MIB", "cmiMaInterfaceAddress"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvMaxRegLifetime"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvPrefixLengthInclusion"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvAddress"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvAddressType"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvMaxInterval"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvMinInterval"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvMaxAdvLifetime"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvResponseSolicitationOnly"), ("CISCO-MOBILE-IP-MIB", "cmiMaAdvStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmiMaAdvertisementGroup = cmiMaAdvertisementGroup.setStatus('current')
if mibBuilder.loadTexts: cmiMaAdvertisementGroup.setDescription('A collection of objects providing management information for the Agent Advertisement function within mobility agents.')
ciscoMobileIpMrSystemGroupV1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 25)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrReverseTunnel"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedundancyGroup"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetAddrType"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetAddr"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetPfxLen"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetStatus"), ("CISCO-MOBILE-IP-MIB", "cmiMrHaTunnelIfIndex"), ("CISCO-MOBILE-IP-MIB", "cmiMrHAPriority"), ("CISCO-MOBILE-IP-MIB", "cmiMrHABest"), ("CISCO-MOBILE-IP-MIB", "cmiMRIfDescription"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfHoldDown"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfRoamPriority"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitPeriodic"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitInterval"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransInitial"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransMax"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransLimit"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransCurrent"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransCount"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaAddressType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaAddress"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaDefaultGwType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaDefaultGw"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegRetry"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegRetryRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfStatus"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegistration"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaOnly"), ("CISCO-MOBILE-IP-MIB", "cmiMrBetterIfDetected"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelPktsRcvd"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelPktsSent"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelBytesRcvd"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelBytesSent"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedStateActive"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedStatePassive"), ("CISCO-MOBILE-IP-MIB", "cmiMrCollocatedTunnel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrSystemGroupV1 = ciscoMobileIpMrSystemGroupV1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpMrSystemGroupV1.setDescription('A collection of objects providing the management information in a mobile router.')
ciscoMobileIpMrSystemGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 26)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrReverseTunnel"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedundancyGroup"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetAddrType"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetAddr"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetPfxLen"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetStatus"), ("CISCO-MOBILE-IP-MIB", "cmiMrHaTunnelIfIndex"), ("CISCO-MOBILE-IP-MIB", "cmiMrHAPriority"), ("CISCO-MOBILE-IP-MIB", "cmiMrHABest"), ("CISCO-MOBILE-IP-MIB", "cmiMRIfDescription"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfHoldDown"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfRoamPriority"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitPeriodic"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitInterval"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransInitial"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransMax"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransLimit"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransCurrent"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransCount"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaAddressType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaAddress"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaDefaultGwType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaDefaultGw"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegRetry"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegRetryRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfStatus"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegistration"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaOnly"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaEnable"), ("CISCO-MOBILE-IP-MIB", "cmiMrBetterIfDetected"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelPktsRcvd"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelPktsSent"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelBytesRcvd"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelBytesSent"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedStateActive"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedStatePassive"), ("CISCO-MOBILE-IP-MIB", "cmiMrCollocatedTunnel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrSystemGroupV2 = ciscoMobileIpMrSystemGroupV2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMobileIpMrSystemGroupV2.setDescription('A collection of objects providing the management information in a mobile router.')
ciscoMobileIpFaRegGroupV12R03r2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 27)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiFaRegTotalVisitors"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorHomeAddress"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorHomeAgentAddress"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorTimeGranted"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorTimeRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIDLow"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIDHigh"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegIsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorRegFlagsRev1"), ("CISCO-MOBILE-IP-MIB", "cmiFaRegVisitorChallengeValue"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsRelayed"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRepliesValidFromHA"), ("CISCO-MOBILE-IP-MIB", "cmiFaInitRegRepliesValidRelayMN"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsRelayed"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRepliesValidFromHA"), ("CISCO-MOBILE-IP-MIB", "cmiFaReRegRepliesValidRelayToMN"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsRelayed"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRepliesValidFromHA"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeRegRepliesValidRelayToMN"), ("CISCO-MOBILE-IP-MIB", "cmiFaReverseTunnelUnavailable"), ("CISCO-MOBILE-IP-MIB", "cmiFaReverseTunnelBitNotSet"), ("CISCO-MOBILE-IP-MIB", "cmiFaMnTooDistant"), ("CISCO-MOBILE-IP-MIB", "cmiFaDeliveryStyleUnsupported"), ("CISCO-MOBILE-IP-MIB", "cmiFaUnknownChallenge"), ("CISCO-MOBILE-IP-MIB", "cmiFaMissingChallenge"), ("CISCO-MOBILE-IP-MIB", "cmiFaStaleChallenge"), ("CISCO-MOBILE-IP-MIB", "cmiFaCvsesFromMnRejected"), ("CISCO-MOBILE-IP-MIB", "cmiFaCvsesFromHaRejected"), ("CISCO-MOBILE-IP-MIB", "cmiFaNvsesFromMnNeglected"), ("CISCO-MOBILE-IP-MIB", "cmiFaNvsesFromHaNeglected"), ("CISCO-MOBILE-IP-MIB", "cmiFaTotalRegRequests"), ("CISCO-MOBILE-IP-MIB", "cmiFaTotalRegReplies"), ("CISCO-MOBILE-IP-MIB", "cmiFaMnFaAuthFailures"), ("CISCO-MOBILE-IP-MIB", "cmiFaMnAAAAuthFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpFaRegGroupV12R03r2 = ciscoMobileIpFaRegGroupV12R03r2.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpFaRegGroupV12R03r2.setDescription('A collection of objects providing management information for the registration function within a foreign agent.')
ciscoMobileIpHaRegGroupV12R03r2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 28)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalMobilityBindings"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIdentifierType"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIdentifier"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMobilityBindingRegFlags"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegServAcceptedRequests"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegServDeniedRequests"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegOverallServTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServAcceptedTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServDeniedTime"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRecentServDeniedCode"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalProcLocRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxProcLocInMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegDateMaxRegsProcLoc"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegProcLocInLastMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTotalProcByAAARegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxProcByAAAInMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegDateMaxRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegProcAAAInLastByMinRegs"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegAvgTimeRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMaxTimeRegsProcByAAA"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaEncapUnavailable"), ("CISCO-MOBILE-IP-MIB", "cmiHaNAICheckFailures"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaInitRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaReRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsReceived"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsAccepted"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsDenied"), ("CISCO-MOBILE-IP-MIB", "cmiHaDeRegRequestsDiscarded"), ("CISCO-MOBILE-IP-MIB", "cmiHaReverseTunnelUnavailable"), ("CISCO-MOBILE-IP-MIB", "cmiHaReverseTunnelBitNotSet"), ("CISCO-MOBILE-IP-MIB", "cmiHaEncapsulationUnavailable"), ("CISCO-MOBILE-IP-MIB", "cmiHaCvsesFromMnRejected"), ("CISCO-MOBILE-IP-MIB", "cmiHaCvsesFromFaRejected"), ("CISCO-MOBILE-IP-MIB", "cmiHaNvsesFromMnNeglected"), ("CISCO-MOBILE-IP-MIB", "cmiHaNvsesFromFaNeglected"), ("CISCO-MOBILE-IP-MIB", "cmiHaMnHaAuthFailures"), ("CISCO-MOBILE-IP-MIB", "cmiHaMnAAAAuthFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegGroupV12R03r2 = ciscoMobileIpHaRegGroupV12R03r2.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaRegGroupV12R03r2.setDescription('A collection of objects providing management information for the registration function within a home agent.')
ciscoMobileIpTrapObjectsGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 29)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiTrapControl"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegCOA"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegCOAType"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegHAAddrType"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegHomeAgent"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegHomeAddressType"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegHomeAddress"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegNAI"), ("CISCO-MOBILE-IP-MIB", "cmiNtRegDeniedCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpTrapObjectsGroupV2 = ciscoMobileIpTrapObjectsGroupV2.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpTrapObjectsGroupV2.setDescription('A collection of objects providing the management information related to notifications in Mobile IP entities.')
ciscoMobileIpMrNotificationGroupV2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 30)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrStateChange"), ("CISCO-MOBILE-IP-MIB", "cmiMrCoaChange"), ("CISCO-MOBILE-IP-MIB", "cmiMrNewMA"), ("CISCO-MOBILE-IP-MIB", "cmiHaMnRegReqFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrNotificationGroupV2 = ciscoMobileIpMrNotificationGroupV2.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpMrNotificationGroupV2.setDescription('Group of notifications on a Mobile Router.')
ciscoMobileIpMrSystemGroupV3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 31)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrReverseTunnel"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedundancyGroup"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetAddrType"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetAddr"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetPfxLen"), ("CISCO-MOBILE-IP-MIB", "cmiMrMobNetStatus"), ("CISCO-MOBILE-IP-MIB", "cmiMrHaTunnelIfIndex"), ("CISCO-MOBILE-IP-MIB", "cmiMrHAPriority"), ("CISCO-MOBILE-IP-MIB", "cmiMrHABest"), ("CISCO-MOBILE-IP-MIB", "cmiMRIfDescription"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfHoldDown"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfRoamPriority"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitPeriodic"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitInterval"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransInitial"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransMax"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransLimit"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransCurrent"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfSolicitRetransCount"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaAddressType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaAddress"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaDefaultGwType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaDefaultGw"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegRetry"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegRetryRemaining"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfStatus"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaRegistration"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaOnly"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfCCoaEnable"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfRoamStatus"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfRegisteredCoAType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfRegisteredCoA"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfRegisteredMaAddrType"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfRegisteredMaAddr"), ("CISCO-MOBILE-IP-MIB", "cmiMrBetterIfDetected"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelPktsRcvd"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelPktsSent"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelBytesRcvd"), ("CISCO-MOBILE-IP-MIB", "cmiMrTunnelBytesSent"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedStateActive"), ("CISCO-MOBILE-IP-MIB", "cmiMrRedStatePassive"), ("CISCO-MOBILE-IP-MIB", "cmiMrCollocatedTunnel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrSystemGroupV3 = ciscoMobileIpMrSystemGroupV3.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpMrSystemGroupV3.setDescription('A collection of objects providing the management information in a mobile router.')
ciscoMobileIpHaRegGroupV12R03r2Sup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 32)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIfDescription"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIfBandwidth"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIfID"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegMnIfPathMetricType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegGroupV12R03r2Sup1 = ciscoMobileIpHaRegGroupV12R03r2Sup1.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaRegGroupV12R03r2Sup1.setDescription('Additional objects for providing management information for the registration function within a home agent.')
ciscoMobileIpHaMobNetGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 33)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaMrMultiPath"), ("CISCO-MOBILE-IP-MIB", "cmiHaMrMultiPathMetricType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaMobNetGroupSup1 = ciscoMobileIpHaMobNetGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaMobNetGroupSup1.setDescription('Additional objects providing the management information related to mobile networks in a home agent.')
ciscoMobileIpMrSystemGroupV3Sup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 34)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiMrIfHaTunnelIfIndex"), ("CISCO-MOBILE-IP-MIB", "cmiMrIfID"), ("CISCO-MOBILE-IP-MIB", "cmiMrMultiPath"), ("CISCO-MOBILE-IP-MIB", "cmiMrMultiPathMetricType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrSystemGroupV3Sup1 = ciscoMobileIpMrSystemGroupV3Sup1.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpMrSystemGroupV3Sup1.setDescription('Additional objects providing the management information in a mobile router specific to multiple tunnels feature.')
ciscoMobileIpHaRegGroupV12R03r2Sup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 35)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegMobilityBindingMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegGroupV12R03r2Sup2 = ciscoMobileIpHaRegGroupV12R03r2Sup2.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaRegGroupV12R03r2Sup2.setDescription('Additional objects for providing management information for the registration function within a home agent.')
ciscoMobileIpHaSystemGroupV1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 36)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaSystemVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaSystemGroupV1 = ciscoMobileIpHaSystemGroupV1.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaSystemGroupV1.setDescription('A collection of objects providing the management information in a home agent.')
ciscoMobileIpMrNotificationGroupV3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 37)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaMaxBindingsNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpMrNotificationGroupV3 = ciscoMobileIpMrNotificationGroupV3.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpMrNotificationGroupV3.setDescription('This group supplements ciscoMobileIpMrNotificationGroupV2 with the Object cmiHaMaxBindingsNotif.')
ciscoMobileIpHaRegGroupV1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 38)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaMaximumBindings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegGroupV1 = ciscoMobileIpHaRegGroupV1.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaRegGroupV1.setDescription('This group supplements ciscoMobileIpHaRegGroupV13R03r2 to provide the Object to configure the bindings on the home agent.')
ciscoMobileIpHaRegIntervalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 39)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegIntervalSize"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegIntervalMaxActiveBindings"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegInterval3gpp2MaxActiveBindings"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegIntervalWimaxMaxActiveBindings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegIntervalStatsGroup = ciscoMobileIpHaRegIntervalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaRegIntervalStatsGroup.setDescription('This collection of objects provide the management information related to the active bindings on the Home Agent.')
ciscoMobileIpHaRegTunnelStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 174, 3, 2, 40)).setObjects(("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsTunnelType"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsNumUsers"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsDataRateInt"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsInBitRate"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsInPktRate"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsInBytes"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsInPkts"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsOutBitRate"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsOutPktRate"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsOutBytes"), ("CISCO-MOBILE-IP-MIB", "cmiHaRegTunnelStatsOutPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMobileIpHaRegTunnelStatsGroup = ciscoMobileIpHaRegTunnelStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMobileIpHaRegTunnelStatsGroup.setDescription('This collection of objects provide the statistics of all the active tunnels between HA and CoA.')
mibBuilder.exportSymbols("CISCO-MOBILE-IP-MIB", ciscoMobileIpFaRegGroupV12R03=ciscoMobileIpFaRegGroupV12R03, cmiHaRegMaxProcLocInMinRegs=cmiHaRegMaxProcLocInMinRegs, cmiFaAdvertChallengeWindow=cmiFaAdvertChallengeWindow, cmiFaRegVisitorHomeAddress=cmiFaRegVisitorHomeAddress, cmiMnRegistrationTable=cmiMnRegistrationTable, cmiMrIfCCoaRegRetry=cmiMrIfCCoaRegRetry, cmiHaRegIntervalMaxActiveBindings=cmiHaRegIntervalMaxActiveBindings, cmiMrMaAdvFlags=cmiMrMaAdvFlags, cmiSecViolatorIdentifier=cmiSecViolatorIdentifier, cmiMrIfEntry=cmiMrIfEntry, ciscoMobileIpSecAssocGroup=ciscoMobileIpSecAssocGroup, cmiHaRegRequestsDenied=cmiHaRegRequestsDenied, cmiMrIfRegisteredMaAddr=cmiMrIfRegisteredMaAddr, cmiHaRedunDroppedBIReps=cmiHaRedunDroppedBIReps, cmiMrMobNetPfxLen=cmiMrMobNetPfxLen, cmiHaRedunSentBIReqs=cmiHaRedunSentBIReqs, cmiFaEncapDeliveryStyleSupported=cmiFaEncapDeliveryStyleSupported, ciscoMobileIpMrNotificationGroupV3=ciscoMobileIpMrNotificationGroupV3, ciscoMobileIpFaRegGroupV12R03r2=ciscoMobileIpFaRegGroupV12R03r2, cmiHaReRegRequestsDiscarded=cmiHaReRegRequestsDiscarded, cmiHaRedunSentBIAcks=cmiHaRedunSentBIAcks, cmiHaRegMnIfBandwidth=cmiHaRegMnIfBandwidth, cmiHaRegMobilityBindingMacAddress=cmiHaRegMobilityBindingMacAddress, cmiHaRegTunnelStatsInBitRate=cmiHaRegTunnelStatsInBitRate, cmiFaDeRegRequestsRelayed=cmiFaDeRegRequestsRelayed, cmiHaMobNetAddress=cmiHaMobNetAddress, ciscoMobileIpMrSystemGroupV3Sup1=ciscoMobileIpMrSystemGroupV3Sup1, cmiHaRegTunnelStatsInBytes=cmiHaRegTunnelStatsInBytes, cmiHaRegProcLocInLastMinRegs=cmiHaRegProcLocInLastMinRegs, cmiMrSystem=cmiMrSystem, cmiHaRedun=cmiHaRedun, ciscoMobileIpMaRegGroup=ciscoMobileIpMaRegGroup, ciscoMobileIpSecAssocGroupV12R02=ciscoMobileIpSecAssocGroupV12R02, cmiMrIfID=cmiMrIfID, cmiFaMissingChallenge=cmiFaMissingChallenge, CmiRegistrationFlags=CmiRegistrationFlags, cmiMrRegNewHa=cmiMrRegNewHa, cmiMrIfCCoaEnable=cmiMrIfCCoaEnable, ciscoMobileIpFaSystemGroup=ciscoMobileIpFaSystemGroup, cmiFa=cmiFa, cmiHaRegTunnelStatsOutBytes=cmiHaRegTunnelStatsOutBytes, cmiMnRegistrationEntry=cmiMnRegistrationEntry, cmiMrMaAddressType=cmiMrMaAddressType, ciscoMobileIpTrapObjectsGroup=ciscoMobileIpTrapObjectsGroup, cmiTrapControl=cmiTrapControl, cmiHaMrStatus=cmiHaMrStatus, ciscoMobileIpComplianceV12R08=ciscoMobileIpComplianceV12R08, cmiHaInitRegRequestsAccepted=cmiHaInitRegRequestsAccepted, cmiHaRedunTotalSentBIReps=cmiHaRedunTotalSentBIReps, cmiFaDeRegRepliesValidRelayToMN=cmiFaDeRegRepliesValidRelayToMN, cmiFaRegVisitorTimeRemaining=cmiFaRegVisitorTimeRemaining, cmiMrRegistration=cmiMrRegistration, cmiHaRegRecentServDeniedTime=cmiHaRegRecentServDeniedTime, cmiMrIfCCoaRegRetryRemaining=cmiMrIfCCoaRegRetryRemaining, ciscoMobileIpMrRegistrationGroup=ciscoMobileIpMrRegistrationGroup, cmiMaAdvInterfaceIndex=cmiMaAdvInterfaceIndex, cmiHaSystemVersion=cmiHaSystemVersion, cmiFaAdvertConfTable=cmiFaAdvertConfTable, cmiHaRegIntervalSize=cmiHaRegIntervalSize, cmiHaRegMnIfDescription=cmiHaRegMnIfDescription, cmiSecTotalViolations=cmiSecTotalViolations, cmiHaRegMobilityBindingRegFlags=cmiHaRegMobilityBindingRegFlags, cmiFaInitRegRequestsDenied=cmiFaInitRegRequestsDenied, cmiHaDeRegRequestsAccepted=cmiHaDeRegRequestsAccepted, cmiFaDeliveryStyleUnsupported=cmiFaDeliveryStyleUnsupported, cmiHaRegTunnelStatsDestAddr=cmiHaRegTunnelStatsDestAddr, CmiEntityIdentifier=CmiEntityIdentifier, CmiSpi=CmiSpi, ciscoMobileIpCompliances=ciscoMobileIpCompliances, ciscoMobileIpComplianceV12R11=ciscoMobileIpComplianceV12R11, cmiMrIfSolicitRetransLimit=cmiMrIfSolicitRetransLimit, cmiFaReverseTunnelEnable=cmiFaReverseTunnelEnable, cmiFaRegVisitorTable=cmiFaRegVisitorTable, cmiHaMrDynamic=cmiHaMrDynamic, cmiHaMaxBindingsNotif=cmiHaMaxBindingsNotif, cmiHaRegTotalMobilityBindings=cmiHaRegTotalMobilityBindings, cmiFaInitRegRequestsReceived=cmiFaInitRegRequestsReceived, cmiMrMobNetIfIndex=cmiMrMobNetIfIndex, cmiFaAdvertIsBusy=cmiFaAdvertIsBusy, cmiFaReRegRequestsRelayed=cmiFaReRegRequestsRelayed, cmiMrRedundancyGroup=cmiMrRedundancyGroup, cmiHaDeRegRequestsReceived=cmiHaDeRegRequestsReceived, cmiFaRegTotalVisitors=cmiFaRegTotalVisitors, cmiHaRegRequestsReceived=cmiHaRegRequestsReceived, CmiTunnelType=CmiTunnelType, cmiHaRegAvgTimeRegsProcByAAA=cmiHaRegAvgTimeRegsProcByAAA, cmiFaRegVisitorRegIsAccepted=cmiFaRegVisitorRegIsAccepted, cmiFaCoaEntry=cmiFaCoaEntry, cmiMrHAEntry=cmiMrHAEntry, cmiFaCoaTransmitOnly=cmiFaCoaTransmitOnly, cmiMaInterfaceAddress=cmiMaInterfaceAddress, cmiHaRegCounterEntry=cmiHaRegCounterEntry, ciscoMobileIpFaRegGroupV12R03r1=ciscoMobileIpFaRegGroupV12R03r1, CmiEntityIdentifierType=CmiEntityIdentifierType, cmiHaRegTunnelStatsDataRateInt=cmiHaRegTunnelStatsDataRateInt, cmiMrIfCCoaAddress=cmiMrIfCCoaAddress, cmiHaRegServAcceptedRequests=cmiHaRegServAcceptedRequests, cmiMrHATable=cmiMrHATable, cmiHaSystem=cmiHaSystem, cmiFaTotalRegRequests=cmiFaTotalRegRequests, ciscoMobileIpMrDiscoveryGroup=ciscoMobileIpMrDiscoveryGroup, cmiMrTunnelBytesRcvd=cmiMrTunnelBytesRcvd, cmiMrTunnelBytesSent=cmiMrTunnelBytesSent, ciscoMobileIpComplianceV12R07=ciscoMobileIpComplianceV12R07, cmiFaInterfaceEntry=cmiFaInterfaceEntry, cmiSecViolatorIdentifierType=cmiSecViolatorIdentifierType, cmiHaReverseTunnelUnavailable=cmiHaReverseTunnelUnavailable, ciscoMobileIpComplianceV12R06=ciscoMobileIpComplianceV12R06, ciscoMobileIpGroups=ciscoMobileIpGroups, cmiFaRegVisitorRegIDLow=cmiFaRegVisitorRegIDLow, cmiHaRegTotalProcByAAARegs=cmiHaRegTotalProcByAAARegs, cmiMrMultiPathMetricType=cmiMrMultiPathMetricType, cmiFaReg=cmiFaReg, cmiHaReverseTunnelBitNotSet=cmiHaReverseTunnelBitNotSet, cmiHaMrAddrType=cmiHaMrAddrType, cmiMrMultiPath=cmiMrMultiPath, cmiHaRedunTotalSentBUs=cmiHaRedunTotalSentBUs, cmiHaMobNetPfxLen=cmiHaMobNetPfxLen, ciscoMobileIpHaRegGroupV1=ciscoMobileIpHaRegGroupV1, cmiMaAdvResponseSolicitationOnly=cmiMaAdvResponseSolicitationOnly, cmiHaRedunReceivedBUAcks=cmiHaRedunReceivedBUAcks, cmiMrMobNetTable=cmiMrMobNetTable, cmiMaAdvAddressType=cmiMaAdvAddressType, cmiMaAdvPrefixLengthInclusion=cmiMaAdvPrefixLengthInclusion, ciscoMobileIpFaRegGroupV12R02=ciscoMobileIpFaRegGroupV12R02, ciscoMobileIpMrNotificationGroup=ciscoMobileIpMrNotificationGroup, cmiHaRedunFailedBIReqs=cmiHaRedunFailedBIReqs, cmiFaNvsesFromMnNeglected=cmiFaNvsesFromMnNeglected, cmiMrRegExtendRetry=cmiMrRegExtendRetry, cmiHa=cmiHa, cmiSecSPI=cmiSecSPI, cmiMrRedStateActive=cmiMrRedStateActive, cmiFaAdvertChallengeValue=cmiFaAdvertChallengeValue, cmiFaReverseTunnelBitNotSet=cmiFaReverseTunnelBitNotSet, cmiFaAdvertChallengeEntry=cmiFaAdvertChallengeEntry, cmiFaAdvertChallengeIndex=cmiFaAdvertChallengeIndex, cmiHaMaximumBindings=cmiHaMaximumBindings, ciscoMobileIpComplianceV12R03r1=ciscoMobileIpComplianceV12R03r1, cmiFaInitRegRepliesValidRelayMN=cmiFaInitRegRepliesValidRelayMN, cmiFaNvsesFromHaNeglected=cmiFaNvsesFromHaNeglected, ciscoMobileIpHaMobNetGroup=ciscoMobileIpHaMobNetGroup, cmiFaMnAAAAuthFailures=cmiFaMnAAAAuthFailures, cmiHaRegMobilityBindingEntry=cmiHaRegMobilityBindingEntry, cmiFaReRegRepliesValidFromHA=cmiFaReRegRepliesValidFromHA, cmiMrCollocatedTunnel=cmiMrCollocatedTunnel, cmiMaRegMaxInMinuteRegs=cmiMaRegMaxInMinuteRegs, ciscoMobileIpHaRegIntervalStatsGroup=ciscoMobileIpHaRegIntervalStatsGroup, cmiMrIfCCoaAddressType=cmiMrIfCCoaAddressType, cmiMrIfRegisteredCoAType=cmiMrIfRegisteredCoAType, cmiMrRegRetransInitial=cmiMrRegRetransInitial, cmiMrIfCCoaOnly=cmiMrIfCCoaOnly, cmiFaRegVisitorHomeAgentAddress=cmiFaRegVisitorHomeAgentAddress, cmiHaMrEntry=cmiHaMrEntry, cmiMaAdvConfigEntry=cmiMaAdvConfigEntry, cmiMrMobNetStatus=cmiMrMobNetStatus, cmiFaMnTooDistant=cmiFaMnTooDistant, ciscoMobileIpComplianceV12R03=ciscoMobileIpComplianceV12R03, cmiMrIfSolicitPeriodic=cmiMrIfSolicitPeriodic, ciscoMobileIpMIBObjects=ciscoMobileIpMIBObjects, cmiHaRegMnIdentifier=cmiHaRegMnIdentifier, cmiMa=cmiMa, cmiSecRecentViolationIDHigh=cmiSecRecentViolationIDHigh, cmiHaRegRecentServAcceptedTime=cmiHaRegRecentServAcceptedTime, cmiMaAdvertisement=cmiMaAdvertisement, cmiNtRegCOA=cmiNtRegCOA, cmiFaReRegRequestsDenied=cmiFaReRegRequestsDenied, cmiSecRecentViolationTime=cmiSecRecentViolationTime, cmiHaDeRegRequestsDenied=cmiHaDeRegRequestsDenied, cmiNtRegCOAType=cmiNtRegCOAType, cmiSecViolationTable=cmiSecViolationTable, cmiMaAdvConfigTable=cmiMaAdvConfigTable, cmiHaRedunReceivedBIAcks=cmiHaRedunReceivedBIAcks, cmiFaRegVisitorIdentifier=cmiFaRegVisitorIdentifier, cmiHaNvsesFromFaNeglected=cmiHaNvsesFromFaNeglected, cmiMrIfSolicitRetransInitial=cmiMrIfSolicitRetransInitial, cmiSecAssocTable=cmiSecAssocTable, cmiMrMaAdvEntry=cmiMrMaAdvEntry, cmiHaRegIntervalWimaxMaxActiveBindings=cmiHaRegIntervalWimaxMaxActiveBindings, cmiMrIfIndex=cmiMrIfIndex, cmiMrIfSolicitRetransMax=cmiMrIfSolicitRetransMax, cmiFaRevTunnelSupported=cmiFaRevTunnelSupported, cmiHaRegMnIfPathMetricType=cmiHaRegMnIfPathMetricType, cmiNtRegHomeAgent=cmiNtRegHomeAgent, cmiMrMobNetEntry=cmiMrMobNetEntry, cmiFaInitRegRequestsDiscarded=cmiFaInitRegRequestsDiscarded, cmiFaInitRegRepliesValidFromHA=cmiFaInitRegRepliesValidFromHA, cmiHaRedunFailedBUs=cmiHaRedunFailedBUs, cmiMn=cmiMn, cmiHaRegInterval3gpp2MaxActiveBindings=cmiHaRegInterval3gpp2MaxActiveBindings, cmiHaRegOverallServTime=cmiHaRegOverallServTime, cmiMrMaAdvRcvIf=cmiMrMaAdvRcvIf, ciscoMobileIpFaAdvertisementGroup=ciscoMobileIpFaAdvertisementGroup, cmiSecPeerIdentifier=cmiSecPeerIdentifier, cmiHaReRegRequestsAccepted=cmiHaReRegRequestsAccepted, cmiHaMrMultiPathMetricType=cmiHaMrMultiPathMetricType, cmiHaRegMaxProcByAAAInMinRegs=cmiHaRegMaxProcByAAAInMinRegs, cmiFaStaleChallenge=cmiFaStaleChallenge, cmiMRIfDescription=cmiMRIfDescription, cmiHaReRegRequestsDenied=cmiHaReRegRequestsDenied, cmiMrStateChange=cmiMrStateChange, cmiHaRegProcAAAInLastByMinRegs=cmiHaRegProcAAAInLastByMinRegs, cmiSecAlgorithmType=cmiSecAlgorithmType, cmiMrMaAdvTimeFirstHeard=cmiMrMaAdvTimeFirstHeard, cmiFaRegVisitorRegIDHigh=cmiFaRegVisitorRegIDHigh, cmiFaUnknownChallenge=cmiFaUnknownChallenge, cmiNtRegHAAddrType=cmiNtRegHAAddrType, ciscoMobileIpMnDiscoveryGroup=ciscoMobileIpMnDiscoveryGroup, CmiMultiPathMetricType=CmiMultiPathMetricType, cmiSecAlgorithmMode=cmiSecAlgorithmMode, cmiHaRegMnIdType=cmiHaRegMnIdType, cmiHaRedunReceivedBIReps=cmiHaRedunReceivedBIReps, ciscoMobileIpComplianceV12R09=ciscoMobileIpComplianceV12R09, cmiHaRegTunnelStatsDestAddrType=cmiHaRegTunnelStatsDestAddrType, cmiMaAdvStatus=cmiMaAdvStatus, cmiSecStatus=cmiSecStatus, cmiMrMobNetAddr=cmiMrMobNetAddr, cmiSecViolationEntry=cmiSecViolationEntry, cmiFaInitRegRequestsRelayed=cmiFaInitRegRequestsRelayed, cmiMrRegExtendInterval=cmiMrRegExtendInterval, cmiHaRegRequestsDiscarded=cmiHaRegRequestsDiscarded, cmiMnAdvFlags=cmiMnAdvFlags, cmiHaMobNetTable=cmiHaMobNetTable, ciscoMobileIpMIBConformance=ciscoMobileIpMIBConformance, cmiHaMnAAAAuthFailures=cmiHaMnAAAAuthFailures, cmiMrRedStatePassive=cmiMrRedStatePassive, cmiSecAssocEntry=cmiSecAssocEntry, cmiMaAdvMaxAdvLifetime=cmiMaAdvMaxAdvLifetime, cmiMaAdvAddress=cmiMaAdvAddress, cmiSecurity=cmiSecurity, cmiHaRedunReceivedBIReqs=cmiHaRedunReceivedBIReqs, cmiMrMaAdvTimeReceived=cmiMrMaAdvTimeReceived, cmiSecKey2=cmiSecKey2, cmiMnRegistration=cmiMnRegistration, cmiHaMrTable=cmiHaMrTable, ciscoMobileIpHaMobNetGroupSup1=ciscoMobileIpHaMobNetGroupSup1, cmiHaRegDateMaxRegsProcByAAA=cmiHaRegDateMaxRegsProcByAAA, cmiFaChallengeSupported=cmiFaChallengeSupported, cmiHaMobNetDynamic=cmiHaMobNetDynamic, cmiHaNAICheckFailures=cmiHaNAICheckFailures, cmiMrIfSolicitRetransCount=cmiMrIfSolicitRetransCount, ciscoMobileIpSecViolationGroup=ciscoMobileIpSecViolationGroup, cmiHaCvsesFromMnRejected=cmiHaCvsesFromMnRejected, cmiMrIfStatus=cmiMrIfStatus, cmiMrIfRegisteredCoA=cmiMrIfRegisteredCoA, cmiMaInterfaceAddressType=cmiMaInterfaceAddressType, cmiFaRegVisitorRegFlagsRev1=cmiFaRegVisitorRegFlagsRev1, cmiMnRegFlags=cmiMnRegFlags, ciscoMobileIpComplianceV12R05=ciscoMobileIpComplianceV12R05, ciscoMobileIpHaRegGroupV12R03r1=ciscoMobileIpHaRegGroupV12R03r1, cmiMrMaAdvMaxLifetime=cmiMrMaAdvMaxLifetime, cmiFaSystem=cmiFaSystem, cmiMrRegRetransMax=cmiMrRegRetransMax, ciscoMobileIpMrNotificationGroupV2=ciscoMobileIpMrNotificationGroupV2, ciscoMobileIpHaRegGroupV12R03r2=ciscoMobileIpHaRegGroupV12R03r2)
mibBuilder.exportSymbols("CISCO-MOBILE-IP-MIB", ciscoMobileIpHaRegGroupV12R03=ciscoMobileIpHaRegGroupV12R03, cmiMaReg=cmiMaReg, cmiMrMaAddress=cmiMrMaAddress, ciscoMobileIpComplianceV12R10=ciscoMobileIpComplianceV12R10, cmiMrTunnelPktsSent=cmiMrTunnelPktsSent, cmiHaRedunReceivedBUs=cmiHaRedunReceivedBUs, ciscoMobileIpHaRegTunnelStatsGroup=ciscoMobileIpHaRegTunnelStatsGroup, cmiHaRedunDroppedBIAcks=cmiHaRedunDroppedBIAcks, cmiHaRegTunnelStatsOutPkts=cmiHaRegTunnelStatsOutPkts, cmiHaMobNetStatus=cmiHaMobNetStatus, cmiNtRegHomeAddressType=cmiNtRegHomeAddressType, cmiNtRegNAI=cmiNtRegNAI, cmiHaRegDateMaxRegsProcLoc=cmiHaRegDateMaxRegsProcLoc, cmiMaAdvMinInterval=cmiMaAdvMinInterval, cmiHaInitRegRequestsReceived=cmiHaInitRegRequestsReceived, ciscoMobileIpFaRegGroup=ciscoMobileIpFaRegGroup, cmiHaRegMaxTimeRegsProcByAAA=cmiHaRegMaxTimeRegsProcByAAA, cmiHaMrMultiPath=cmiHaMrMultiPath, cmiMrIfTable=cmiMrIfTable, cmiFaCvsesFromHaRejected=cmiFaCvsesFromHaRejected, cmiFaCoaRegAsymLink=cmiFaCoaRegAsymLink, cmiFaRegVisitorTimeGranted=cmiFaRegVisitorTimeGranted, cmiSecRecentViolationReason=cmiSecRecentViolationReason, cmiFaChallengeEnable=cmiFaChallengeEnable, cmiNtRegDeniedCode=cmiNtRegDeniedCode, cmiMrCoaChange=cmiMrCoaChange, cmiHaRegMnIfID=cmiHaRegMnIfID, cmiFaCoaInterfaceOnly=cmiFaCoaInterfaceOnly, cmiHaMrAddr=cmiHaMrAddr, cmiFaAdvertChallengeChapSPI=cmiFaAdvertChallengeChapSPI, cmiFaRegVisitorRegFlags=cmiFaRegVisitorRegFlags, cmiMaAdvertisementGroup=cmiMaAdvertisementGroup, cmiMrMaAdvSequence=cmiMrMaAdvSequence, ciscoMobileIpMIBNotifications=ciscoMobileIpMIBNotifications, cmiSecRecentViolationIDLow=cmiSecRecentViolationIDLow, cmiHaRegTunnelStatsSrcAddr=cmiHaRegTunnelStatsSrcAddr, cmiHaReRegRequestsReceived=cmiHaReRegRequestsReceived, cmiHaRegMobilityBindingTable=cmiHaRegMobilityBindingTable, ciscoMobileIpMIB=ciscoMobileIpMIB, ciscoMobileIpMrSystemGroupV1=ciscoMobileIpMrSystemGroupV1, cmiHaCvsesFromFaRejected=cmiHaCvsesFromFaRejected, cmiHaRegTunnelStatsOutPktRate=cmiHaRegTunnelStatsOutPktRate, cmiFaAdvertisement=cmiFaAdvertisement, cmiMrIfRoamPriority=cmiMrIfRoamPriority, cmiFaDeRegRequestsReceived=cmiFaDeRegRequestsReceived, cmiMrIfCCoaDefaultGwType=cmiMrIfCCoaDefaultGwType, cmiHaDeRegRequestsDiscarded=cmiHaDeRegRequestsDiscarded, ciscoMobileIpComplianceRev1=ciscoMobileIpComplianceRev1, cmiMrMaAdvLifetimeRemaining=cmiMrMaAdvLifetimeRemaining, cmiHaMobNetEntry=cmiHaMobNetEntry, cmiMnRecentAdvReceived=cmiMnRecentAdvReceived, cmiHaRedunFailedBIReps=cmiHaRedunFailedBIReps, cmiHaRedunSentBIReps=cmiHaRedunSentBIReps, cmiMrHaTunnelIfIndex=cmiMrHaTunnelIfIndex, cmiHaRegTunnelStatsEntry=cmiHaRegTunnelStatsEntry, cmiHaMnHaAuthFailures=cmiHaMnHaAuthFailures, PYSNMP_MODULE_ID=ciscoMobileIpMIB, ciscoMobileIpMnRegistrationGroup=ciscoMobileIpMnRegistrationGroup, ciscoMobileIpHaRegGroupV12R03r2Sup1=ciscoMobileIpHaRegGroupV12R03r2Sup1, cmiMrBetterIfDetected=cmiMrBetterIfDetected, ciscoMobileIpComplianceV12R04=ciscoMobileIpComplianceV12R04, cmiMrMaAdvTable=cmiMrMaAdvTable, cmiHaRegTotalProcLocRegs=cmiHaRegTotalProcLocRegs, ciscoMobileIpMrSystemGroupV2=ciscoMobileIpMrSystemGroupV2, cmiFaAdvertConfEntry=cmiFaAdvertConfEntry, cmiHaMobNetAddressType=cmiHaMobNetAddressType, cmiSecReplayMethod=cmiSecReplayMethod, ciscoMobileIpComplianceV12R02=ciscoMobileIpComplianceV12R02, cmiHaRegCounterTable=cmiHaRegCounterTable, cmiSecAssocsCount=cmiSecAssocsCount, cmiMrRegRetransLimit=cmiMrRegRetransLimit, cmiHaReg=cmiHaReg, cmiMrTunnelPktsRcvd=cmiMrTunnelPktsRcvd, cmiFaReRegRequestsDiscarded=cmiFaReRegRequestsDiscarded, cmiMrReverseTunnel=cmiMrReverseTunnel, cmiHaInitRegRequestsDenied=cmiHaInitRegRequestsDenied, cmiHaRegServDeniedRequests=cmiHaRegServDeniedRequests, cmiMrMaIfMacAddress=cmiMrMaIfMacAddress, ciscoMobileIpHaRegGroup=ciscoMobileIpHaRegGroup, ciscoMobileIpMrSystemGroup=ciscoMobileIpMrSystemGroup, cmiFaCvsesFromMnRejected=cmiFaCvsesFromMnRejected, cmiHaRedunSentBUAcks=cmiHaRedunSentBUAcks, cmiFaDeRegRepliesValidFromHA=cmiFaDeRegRepliesValidFromHA, cmiHaRegTunnelStatsInPktRate=cmiHaRegTunnelStatsInPktRate, ciscoMobileIpMrSystemGroupV3=ciscoMobileIpMrSystemGroupV3, ciscoMobileIpHaRedunGroup=ciscoMobileIpHaRedunGroup, cmiMrRegExtendExpire=cmiMrRegExtendExpire, ciscoMobileIpComplianceRev2=ciscoMobileIpComplianceRev2, cmiFaRegVisitorChallengeValue=cmiFaRegVisitorChallengeValue, cmiMaRegInLastMinuteRegs=cmiMaRegInLastMinuteRegs, cmiNtRegHomeAddress=cmiNtRegHomeAddress, cmiHaRedunSentBUs=cmiHaRedunSentBUs, cmiSecRecentViolationSPI=cmiSecRecentViolationSPI, cmiFaRegVisitorIdentifierType=cmiFaRegVisitorIdentifierType, ciscoMobileIpHaRegGroupV12R02=ciscoMobileIpHaRegGroupV12R02, cmiFaReRegRepliesValidRelayToMN=cmiFaReRegRepliesValidRelayToMN, cmiMrMaAdvMaxRegLifetime=cmiMrMaAdvMaxRegLifetime, cmiFaReverseTunnelUnavailable=cmiFaReverseTunnelUnavailable, cmiHaRegTunnelStatsTable=cmiHaRegTunnelStatsTable, cmiMrIfCCoaRegistration=cmiMrIfCCoaRegistration, cmiHaRegMnId=cmiHaRegMnId, cmiFaAdvertRegRequired=cmiFaAdvertRegRequired, cmiHaRegTunnelStatsInPkts=cmiHaRegTunnelStatsInPkts, cmiHaRedunTotalSentBIReqs=cmiHaRedunTotalSentBIReqs, cmiHaMnRegReqFailed=cmiHaMnRegReqFailed, cmiHaEncapsulationUnavailable=cmiHaEncapsulationUnavailable, cmiMrHABest=cmiMrHABest, cmiMrIfCCoaDefaultGw=cmiMrIfCCoaDefaultGw, cmiHaNvsesFromMnNeglected=cmiHaNvsesFromMnNeglected, cmiHaRegTunnelStatsOutBitRate=cmiHaRegTunnelStatsOutBitRate, cmiHaRegMnIdentifierType=cmiHaRegMnIdentifierType, cmiHaEncapUnavailable=cmiHaEncapUnavailable, cmiMaAdvMaxRegLifetime=cmiMaAdvMaxRegLifetime, cmiHaRedunSecViolations=cmiHaRedunSecViolations, cmiFaRegVisitorEntry=cmiFaRegVisitorEntry, cmiHaInitRegRequestsDiscarded=cmiHaInitRegRequestsDiscarded, cmiFaDeRegRequestsDiscarded=cmiFaDeRegRequestsDiscarded, cmiFaDeRegRequestsDenied=cmiFaDeRegRequestsDenied, cmiFaAdvertChallengeTable=cmiFaAdvertChallengeTable, cmiHaRegTunnelStatsTunnelType=cmiHaRegTunnelStatsTunnelType, cmiFaTotalRegReplies=cmiFaTotalRegReplies, cmiHaRegTunnelStatsSrcAddrType=cmiHaRegTunnelStatsSrcAddrType, cmiHaRegTunnelStatsNumUsers=cmiHaRegTunnelStatsNumUsers, cmiMrIfSolicitRetransRemaining=cmiMrIfSolicitRetransRemaining, cmiTrapObjects=cmiTrapObjects, cmiMrDiscovery=cmiMrDiscovery, ciscoMobileIpTrapObjectsGroupV2=ciscoMobileIpTrapObjectsGroupV2, cmiMrIfSolicitRetransCurrent=cmiMrIfSolicitRetransCurrent, ciscoMobileIpCompliance=ciscoMobileIpCompliance, cmiMrIfHaTunnelIfIndex=cmiMrIfHaTunnelIfIndex, cmiHaMobNet=cmiHaMobNet, cmiMrIfSolicitInterval=cmiMrIfSolicitInterval, ciscoMobileIpHaSystemGroupV1=ciscoMobileIpHaSystemGroupV1, cmiMaRegDateMaxRegsReceived=cmiMaRegDateMaxRegsReceived, cmiFaMnFaAuthFailures=cmiFaMnFaAuthFailures, cmiMrHAPriority=cmiMrHAPriority, cmiFaReRegRequestsReceived=cmiFaReRegRequestsReceived, cmiMrMaHoldDownRemaining=cmiMrMaHoldDownRemaining, cmiMrMaIsHa=cmiMrMaIsHa, cmiMrNewMA=cmiMrNewMA, cmiMaAdvMaxInterval=cmiMaAdvMaxInterval, cmiMrIfRoamStatus=cmiMrIfRoamStatus, cmiSecKey=cmiSecKey, cmiMrIfRegisteredMaAddrType=cmiMrIfRegisteredMaAddrType, cmiFaInterfaceTable=cmiFaInterfaceTable, cmiHaRegRecentServDeniedCode=cmiHaRegRecentServDeniedCode, cmiMrRegLifetime=cmiMrRegLifetime, cmiSecPeerIdentifierType=cmiSecPeerIdentifierType, cmiMrIfHoldDown=cmiMrIfHoldDown, cmiMnDiscovery=cmiMnDiscovery, ciscoMobileIpHaRegGroupV12R03r2Sup2=ciscoMobileIpHaRegGroupV12R03r2Sup2, cmiFaCoaTable=cmiFaCoaTable, cmiMrMobNetAddrType=cmiMrMobNetAddrType)
