#
# PySNMP MIB module APPIAN-PPORT-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acPport, AcAdminStatus, AcOpStatus, AcSlotNumber, AcPortNumber, AcNodeId = mibBuilder.importSymbols("APPIAN-SMI-MIB", "acPport", "AcAdminStatus", "AcOpStatus", "AcSlotNumber", "AcPortNumber", "AcNodeId")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
PerfIntervalCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, Counter64, IpAddress, ObjectIdentity, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Gauge32, NotificationType, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Counter64", "IpAddress", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Gauge32", "NotificationType", "Integer32", "Counter32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
acSonet = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6))
acSonet.setRevisions(('1900-02-23 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acSonet.setRevisionsDescriptions(('Engineering draft, not for release.',))
if mibBuilder.loadTexts: acSonet.setLastUpdated('0002231600Z')
if mibBuilder.loadTexts: acSonet.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acSonet.setContactInfo('Douglas Stahl')
if mibBuilder.loadTexts: acSonet.setDescription('The MIB module to describe SONET/SDH objects.')
class AcTraceString(TextualConvention, OctetString):
    description = "A string of up to printable characters, followed by padding NULL characters, and terminated with <CR> and <LF> characters, for a total of 64 characters. The maximum number of printable characters is 62 and if it's less, it's padded with NULL. Therefore the number of padding NULL characters is 0 to 62."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

acSonetObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1))
acSonetObjectsPath = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2))
acSonetObjectsVT = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3))
acSonetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1))
acSonetSection = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2))
acSonetLine = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3))
acSonetFarEndLine = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4))
acSonetPath = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1))
acSonetFarEndPath = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2))
acSonetVT = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1))
acSonetFarEndVT = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2))
acSonetPortTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1), )
if mibBuilder.loadTexts: acSonetPortTable.setStatus('current')
if mibBuilder.loadTexts: acSonetPortTable.setDescription('The SONET/SDH Port table which must be created by the management client.')
acSonetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPortNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPortSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPortPort"))
if mibBuilder.loadTexts: acSonetPortEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetPortEntry.setDescription('An entry in the SONET/SDH Port table.')
acSonetPortNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetPortNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetPortSlot.setDescription('The physical slot number of the port.')
acSonetPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortPort.setStatus('current')
if mibBuilder.loadTexts: acSonetPortPort.setDescription('The physical port number of the port.')
acSonetPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetPortAdminStatus.setDescription('Appian Administrative Status attribute used to set the provisioning state as either activate(1), inactivate(2) or delete(3). Refer to the Appian-SMI.mib file for additional information.')
acSonetPortOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 5), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortOpStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetPortOpStatus.setDescription('The current operational status for the SONET module controlling this port.')
acSonetPortOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortOpCode.setStatus('current')
if mibBuilder.loadTexts: acSonetPortOpCode.setDescription('Provides a detailed status code which can be used to isolate a problem or state condition reported in acSonetPortOpStatus.')
acSonetPortMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2))).clone('sonet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortMediumType.setStatus('current')
if mibBuilder.loadTexts: acSonetPortMediumType.setDescription('This variable identifies whether a SONET or a SDH signal is used across this interface.')
acSonetPortTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: acSonetPortTimeElapsed.setDescription("The number of seconds, including partial seconds, that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
acSonetPortValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortValidIntervals.setStatus('current')
if mibBuilder.loadTexts: acSonetPortValidIntervals.setDescription('The number of previous 15-minute intervals for which data was collected. A SONET/SDH interface must be capable of supporting at least n intervals. The minimum value of n is 4. The default of n is 32. The maximum value of n is 96. The value will be <n> unless the measurement was (re-)started within the last (<n>*15) minutes, in which case the value will be the number of complete 15 minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy) it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available. ')
acSonetPortMediumLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("b3zs", 2), ("cmi", 3), ("nrz", 4), ("rz", 5))).clone('nrz')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortMediumLineCoding.setStatus('current')
if mibBuilder.loadTexts: acSonetPortMediumLineCoding.setDescription('This variable describes the line coding for this interface. The B3ZS and CMI are used for electrical SONET/SDH signals (STS-1 and STS-3). The Non-Return to Zero (NRZ) and the Return to Zero are used for optical SONET/SDH signals.')
acSonetPortMediumLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("short-single", 2), ("long-single", 3), ("multi", 4), ("coax", 5), ("utp", 6), ("intermediate", 7))).clone('multi')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortMediumLineType.setStatus('current')
if mibBuilder.loadTexts: acSonetPortMediumLineType.setDescription('This variable describes the line type for this interface. The line types are Short and Long Range Single Mode fiber or Multi-Mode fiber interfaces, and coax and UTP for electrical interfaces. The value acSonetOther should be used when the Line Type is not one of the listed values.')
acSonetPortTransmitterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortTransmitterEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetPortTransmitterEnable.setDescription('Turns the laser on and off.')
acSonetPortCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortCircuitIdentifier.setStatus('current')
if mibBuilder.loadTexts: acSonetPortCircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting. Note that the circuit identifier, if available, is also represented by ifPhysAddress.")
acSonetPortInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPortInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: acSonetPortInvalidIntervals.setDescription('The number of intervals in the range from 0 to acSonetPortValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acSonetPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("facility", 1), ("terminal", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: acSonetPortLoopbackConfig.setDescription('The current loopback state of the SONET/SDH interface. The values mean: none(0) Not in the loopback state. A device that is not capable of performing a loopback on this interface shall always return this value. facility(1) The received signal at this interface is looped back out through the corresponding transmitter in the return direction. terminal(2) The signal that is about to be transmitted is connected to the associated incoming receiver. other(3) Loopbacks that are not defined here.')
acSonetPortResetCurrentPMregs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortResetCurrentPMregs.setStatus('current')
if mibBuilder.loadTexts: acSonetPortResetCurrentPMregs.setDescription('Reset Performance Monitoring Registers for current 15 minute and day to zero for entity-related statisics. Reset on receiving a 1, will automatically go to 0 at next 15 minute or day interval.')
acSonetPortResetAllPMregs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortResetAllPMregs.setStatus('current')
if mibBuilder.loadTexts: acSonetPortResetAllPMregs.setDescription('Reset Performance Monitoring Registers to zero for all entity-related statisics. Reset on receiving a 1, will automatically go to 0 at next 15 minute or day interval.')
acSonetPortConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ring", 1), ("interconnect", 2))).clone('interconnect')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortConnectionType.setStatus('current')
if mibBuilder.loadTexts: acSonetPortConnectionType.setDescription('Whether the port is used on the ring side or the interconnect side. An interconnect interface is the one that connects to the ADM.')
acSonetPortRingIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 19), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortRingIdentifier.setStatus('current')
if mibBuilder.loadTexts: acSonetPortRingIdentifier.setDescription('This is a number assigned by carrier. It is contained here as a convenience for carrier and the EMS. It is not used by the device. When used, this should be set in east facing port row in this table. It can also be optionally set in the west facing port row in this table but it must be the same as the set in the east facing port row.')
acSonetPortRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSonetPortRingName.setStatus('current')
if mibBuilder.loadTexts: acSonetPortRingName.setDescription('An ASCII text name up to 32 characters in length which is assigned to this optical ring. Like the RingIdentifier, this is contained here as a convenience for the carrier and the EMS. It is not used by the device. When used, this should be set in east facing port row in this table. It can also be optionally set in the west facing port row in this table but it must be the same as the set in the east facing port row.')
acSonetThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2), )
if mibBuilder.loadTexts: acSonetThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acSonetThresholdTable.setDescription('The SONET/SDH Threshold Table.')
acSonetThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetThresholdPort"))
if mibBuilder.loadTexts: acSonetThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetThresholdEntry.setDescription('An entry in the SONET/SDH Port Table.')
acSonetThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetThresholdSlot.setDescription('The physical slot number of the port.')
acSonetThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acSonetThresholdPort.setDescription('The physical port number of the port.')
acSonetThresholdSESSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("bellcore", 2), ("ansi93", 3), ("itu", 4), ("ansi97", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetThresholdSESSet.setStatus('current')
if mibBuilder.loadTexts: acSonetThresholdSESSet.setDescription('An enumerated integer indicating which recognized set of thresholds that the agent uses for determining severely errored seconds and unavailable time. other(1) None of the following. Bellcore1991(2) Bellcore TR-NWT-000253, 1991 [32], or ANSI T1M1.3/93-005R2, 1993 [22]. See also Appendix B. ansi1993(3) ANSI T1.231, 1993 [31], or Bellcore GR-253-CORE, Issue 2, 1995 [34] itu1995(4) ITU Recommendation G.826, 1995 [33] ansi1997(5) ANSI T1.231, 1997 [35] If a manager changes the value of this object then the SES statistics collected prior to this change must be invalidated.')
acSonetDCCTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3), )
if mibBuilder.loadTexts: acSonetDCCTable.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCTable.setDescription('The SONET/SDH DCC Table.')
acSonetDCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetDCCNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetDCCSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetDCCPort"))
if mibBuilder.loadTexts: acSonetDCCEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCEntry.setDescription('An entry in the SONET/SDH Port Table.')
acSonetDCCNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetDCCNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetDCCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetDCCSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCSlot.setDescription('The physical slot number of the port.')
acSonetDCCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetDCCPort.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCPort.setDescription('The physical port number of the port.')
acSonetDCCSectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetDCCSectionEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCSectionEnable.setDescription('This variable indicates that the DCC for the section is enabled.')
acSonetDCCLineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetDCCLineEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCLineEnable.setDescription('This variable indicates that the DCC for the line is enabled.')
acSonetDCCAppianEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetDCCAppianEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCAppianEnable.setDescription('This variable indicates that the Appian DCC is enabled.')
acSonetDCCSectionFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetDCCSectionFail.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCSectionFail.setDescription('This variable indicates that the DCC for the section has failed.')
acSonetDCCLineFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetDCCLineFail.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCLineFail.setDescription('This variable indicates that the DCC for the line has failed.')
acSonetDCCAppianFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetDCCAppianFail.setStatus('current')
if mibBuilder.loadTexts: acSonetDCCAppianFail.setDescription('This variable indicates that the Appian DCC has failed.')
acSonetSection15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1), )
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalTable.setDescription('The SONET/SDH Section 15Minute Interval table.')
acSonetSection15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSection15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSection15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSection15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSection15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalEntry.setDescription('An entry in the SONET/SDH Section 15Minute Interval table.')
acSonetSection15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetSection15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalSlot.setDescription('The physical slot number of the port.')
acSonetSection15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalPort.setDescription('The physical port number of the port.')
acSonetSection15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalNumber.setDescription('A number between 1 and 98, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current 15 minute interval. The interval identified by 2 is the most recently completed 15 minute interval. The interval identified by 97 is the oldest 15 minute interval. The interval identified by 98 is a total of the previous 96 stored 15 minute intervals.')
acSonetSection15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalValidStats.setDescription('This flag indicates if the data for this interval is valid.')
acSonetSection15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalResetStats.setDescription('This flag is used to reset the data for a 15 minute interval.')
acSonetSection15MinuteIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalStatus.setDescription('This variable indicates the status of the interface. The acSonetSectionCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The acSonetSectionNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 acSonetSectionNoDefect 2 acSonetSectionLOS 4 acSonetSectionLOF')
acSonetSection15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
acSonetSection15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
acSonetSection15MinuteIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
acSonetSection15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetSection15MinuteIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
acSonetSectionDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2), )
if mibBuilder.loadTexts: acSonetSectionDayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalTable.setDescription('The SONET/SDH Section Day Interval table.')
acSonetSectionDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetSectionDayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalEntry.setDescription('An entry in the SONET/SDH Section Day Interval table.')
acSonetSectionDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionDayIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetSectionDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionDayIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalSlot.setDescription('The physical slot number of the port.')
acSonetSectionDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionDayIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalPort.setDescription('The physical port number of the port.')
acSonetSectionDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionDayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalNumber.setDescription('A number between 1 and 31, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current day performance monitoring interval. The interval identified by 2 is the most recently completed day interval. The interval identified by 31 is the oldest day interval.')
acSonetSectionDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalValidStats.setDescription('This flag indicates if the data for this interval is valid.')
acSonetSectionDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionDayIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalResetStats.setDescription('Flag used to reset the current day interval stats.')
acSonetSectionDayIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalStatus.setDescription('This variable indicates the status of the interface. The acSonetSectionCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The acSonetSectionNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 acSonetSectionNoDefect 2 acSonetSectionLOS 4 acSonetSectionLOF')
acSonetSectionDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in a particular day interval in the past 30 days.')
acSonetSectionDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in a particular day interval in the past 30 days.')
acSonetSectionDayIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in a particular day interval in the past 30 days.')
acSonetSectionDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionDayIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionDayIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in a particular day interval in the past 30 days.')
acSonetSectionThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3), )
if mibBuilder.loadTexts: acSonetSectionThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdTable.setDescription('The SONET/SDH Section Threshold Table.')
acSonetSectionThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetSectionThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdEntry.setDescription('An entry in the SONET/SDH Section Threshold Table.')
acSonetSectionThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetSectionThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdSlot.setDescription('The physical slot number of the port.')
acSonetSectionThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdPort.setDescription('The physical port number of the port.')
acSonetSectionThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionThresholdSelectionNum.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdSelectionNum.setDescription('A number that selects either the 15 thresholds or the day thresholds.')
acSonetSectionThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 5), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetSectionThresholdAdminStatus.setDescription('This field is used by the administrator to ensure only one client is performing management operations on this sonet port at a time. When the field is read as available(0), the client can write the value locked(1) into this field to prevent a second client from performing managment ops on this instance.')
acSonetSectionThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdESs.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdESs.setDescription('The threshold associated with Errored Seconds.')
acSonetSectionThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdSESs.setDescription('The threshold associated with Severely Errored Seconds.')
acSonetSectionThresholdSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdSEFSs.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdSEFSs.setDescription('The threshold associated with Severely Errored Framing Seconds.')
acSonetSectionThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionThresholdCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionThresholdCVs.setDescription('The threshold associated with Coding Violations.')
acSonetSectionTIMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4), )
if mibBuilder.loadTexts: acSonetSectionTIMTable.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMTable.setDescription('The SONET/SDH Section Trace Identifier Mismatch Table.')
acSonetSectionTIMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionTIMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionTIMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionTIMPort"))
if mibBuilder.loadTexts: acSonetSectionTIMEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMEntry.setDescription('An entry in the SONET/SDH Section Trace Identifier Mismatch Table.')
acSonetSectionTIMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionTIMNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetSectionTIMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionTIMSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMSlot.setDescription('The physical slot number of the port.')
acSonetSectionTIMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionTIMPort.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMPort.setDescription('The physical port number of the port.')
acSonetSectionTIMGenerateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMGenerateEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMGenerateEnable.setDescription('Enables the generation of the Section Trace Identifier.')
acSonetSectionTIMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMDetectEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMDetectEnable.setDescription('Enables the detection of the Section Trace Identifier.')
acSonetSectionTIMTransmitedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 6), AcTraceString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMTransmitedString.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMTransmitedString.setDescription('The string that gets sent to the destination.')
acSonetSectionTIMExpectedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 7), AcTraceString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMExpectedString.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMExpectedString.setDescription('The expected string that is to be received.')
acSonetSectionTIMReceivedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 8), AcTraceString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionTIMReceivedString.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMReceivedString.setDescription('The contents of the string that is received.')
acSonetSectionTIMFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionTIMFailure.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMFailure.setDescription('Failure declared of the Section Trace Identifier.')
acSonetSectionTIMFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("void", 0), ("t64", 1), ("t64-crlf", 2), ("t16", 3), ("t16-msb1", 4), ("t16-crc7", 5))).clone('void')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMFormat.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMFormat.setDescription('Format of Path Trace buffer.')
acSonetSectionTIMMismatchZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionTIMMismatchZeros.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionTIMMismatchZeros.setDescription('Controls whether a received trace message containing all zeros can cause a mismatch defect.')
acSonetSectionSSMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5), )
if mibBuilder.loadTexts: acSonetSectionSSMTable.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionSSMTable.setDescription('The SONET/SDH Section Synchronization Status Message Table.')
acSonetSectionSSMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionSSMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionSSMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetSectionSSMPort"))
if mibBuilder.loadTexts: acSonetSectionSSMEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionSSMEntry.setDescription('An entry in the SONET/SDH Section Synchronization Status Message Table.')
acSonetSectionSSMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionSSMNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionSSMNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetSectionSSMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionSSMSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionSSMSlot.setDescription('The physical slot number of the port.')
acSonetSectionSSMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetSectionSSMPort.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionSSMPort.setDescription('The physical port number of the port.')
acSonetSectionSSMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSectionSSMDetectEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionSSMDetectEnable.setDescription('Enables the detection of the Synchronization Status Message.')
acSonetSectionSSMTransmitedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionSSMTransmitedValue.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionSSMTransmitedValue.setDescription('The S1 byte value that gets sent to the destination.')
acSonetSectionSSMReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetSectionSSMReceivedValue.setStatus('current')
if mibBuilder.loadTexts: acSonetSectionSSMReceivedValue.setDescription('The S1 byte value that is received.')
acSonetLine15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1), )
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalTable.setDescription('The SONET/SDH Line 15Minute Interval Table.')
acSonetLine15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetLine15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLine15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLine15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLine15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalEntry.setDescription('An entry in the SONET/SDH Line 15Minute Interval table.')
acSonetLine15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetLine15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalSlot.setDescription('The physical slot number of the port.')
acSonetLine15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalPort.setDescription('The physical port number of the port.')
acSonetLine15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalNumber.setDescription('A number between 1 and 98, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current 15 minute interval. The interval identified by 2 is the most recently completed 15 minute interval. The interval identified by 97 is the oldest 15 minute interval. The interval identified by 98 is a total of the previous 96 stored 15 minute intervals.')
acSonetLine15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acSonetLine15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalResetStats.setDescription('Flag to reset the 15 minute SONET Line interval statistics.')
acSonetLine15MinuteIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalStatus.setDescription('This variable indicates the status of the interface. The acSonetLineCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The acSonetLineNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 acSonetLineNoDefect 2 acSonetLineAIS 4 acSonetLineRDI')
acSonetLine15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
acSonetLine15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
acSonetLine15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
acSonetLine15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
acSonetLine15MinuteIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 1, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalBER.setStatus('current')
if mibBuilder.loadTexts: acSonetLine15MinuteIntervalBER.setDescription('The counter associated with the max BER encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours. ')
acSonetLineDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2), )
if mibBuilder.loadTexts: acSonetLineDayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalTable.setDescription('The SONET/SDH Line Day Interval Table.')
acSonetLineDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetLineDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetLineDayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalEntry.setDescription('An entry in the SONET/SDH Line Day Interval table.')
acSonetLineDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineDayIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetLineDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineDayIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalSlot.setDescription('The physical slot number of the port.')
acSonetLineDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineDayIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalPort.setDescription('The physical port number of the port.')
acSonetLineDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineDayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalNumber.setDescription('A number between 1 and 31, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current day performance monitoring interval. The interval identified by 2 is the most recently completed day interval. The interval identified by 31 is the oldest day interval.')
acSonetLineDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acSonetLineDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineDayIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalResetStats.setDescription('Flag to reset the SONET Line Day interval statistics.')
acSonetLineDayIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalStatus.setDescription('This variable indicates the status of the interface. The acSonetLineCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The acSonetLineNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 acSonetLineNoDefect 2 acSonetLineAIS 4 acSonetLineRDI')
acSonetLineDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in a particular day interval in the past 30 days.')
acSonetLineDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in a particular day interval in the past 30 days.')
acSonetLineDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line in a particular day interval in the past 30 days.')
acSonetLineDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetLineDayIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in a particular day interval in the past 30 days.')
acSonetLineDayIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineDayIntervalBER.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetLineDayIntervalBER.setDescription('The counter associated with the max BER encountered by a SONET/SDH Line in a particular day interval in the past 30 days.')
acSonetLineThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3), )
if mibBuilder.loadTexts: acSonetLineThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdTable.setDescription('The SONET/SDH Line Threshold Table.')
acSonetLineThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetLineThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetLineThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdEntry.setDescription('An entry in the SONET/SDH Line Threshold Table.')
acSonetLineThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetLineThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdSlot.setDescription('The physical slot number of the port.')
acSonetLineThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdPort.setDescription('The physical port number of the port.')
acSonetLineThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineThresholdSelectionNum.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdSelectionNum.setDescription('A number that selects either the 15 thresholds or the day thresholds. ')
acSonetLineThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 5), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetLineThresholdAdminStatus.setDescription('This field is used by the administrator to ensure only one client is performing management operations on this serial port at a time. When the field is read as available(0), the client can write the value locked(1) into this field to prevent a second client from performing managment ops on this instance.')
acSonetLineThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdESs.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdESs.setDescription('The threshold associated with Errored Seconds.')
acSonetLineThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdSESs.setDescription('The threshold associated with Severely Errored Seconds.')
acSonetLineThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdCVs.setDescription('The threshold associated with Coding Violations.')
acSonetLineThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineThresholdUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetLineThresholdUASs.setDescription('The threshold associated with Unavailable Secondss.')
acSonetFarEndLine15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1), )
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalTable.setDescription('The SONET/SDH FarEndLine 15Minute Interval Table.')
acSonetFarEndLine15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLine15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLine15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLine15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLine15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalEntry.setDescription('An entry in the SONET/SDH FarEndLine 15Minute Interval table.')
acSonetFarEndLine15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetFarEndLine15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalSlot.setDescription('The physical slot number of the port.')
acSonetFarEndLine15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalPort.setDescription('The physical port number of the port.')
acSonetFarEndLine15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalNumber.setDescription('A number between 1 and 98, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current 15 minute interval. The interval identified by 2 is the most recently completed 15 minute interval. The interval identified by 97 is the oldest 15 minute interval. The interval identified by 98 is a total of the previous 96 stored 15 minute intervals.')
acSonetFarEndLine15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acSonetFarEndLine15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalResetStats.setDescription('Flag to reset the SONET Far End Line 15 minute interval statistics.')
acSonetFarEndLine15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH FarEndLine in a particular 15-minute interval in the past 24 hours.')
acSonetFarEndLine15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH FarEndLine in a particular 15-minute interval in the past 24 hours.')
acSonetFarEndLine15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH FarEndLine in a particular 15-minute interval in the past 24 hours.')
acSonetFarEndLine15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLine15MinuteIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH FarEndLine in a particular 15-minute interval in the past 24 hours.')
acSonetFarEndLineDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2), )
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalTable.setDescription('The SONET/SDH FarEndLine Day Interval Table.')
acSonetFarEndLineDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalEntry.setDescription('An entry in the SONET/SDH FarEndLine Day Interval table.')
acSonetFarEndLineDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetFarEndLineDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalSlot.setDescription('The physical slot number of the port.')
acSonetFarEndLineDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalPort.setDescription('The physical port number of the port.')
acSonetFarEndLineDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalNumber.setDescription('A number between 1 and 31, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current day performance monitoring interval. The interval identified by 2 is the most recently completed day interval. The interval identified by 31 is the oldest day interval.')
acSonetFarEndLineDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acSonetFarEndLineDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalResetStats.setDescription('Flag to reset the SONET far end line day interval statistics.')
acSonetFarEndLineDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH FarEndLine in a particular day interval in the past 30 days.')
acSonetFarEndLineDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH FarEndLine in a particular day interval in the past 30 days.')
acSonetFarEndLineDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH FarEndLine in a particular day interval in the past 30 days.')
acSonetFarEndLineDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineDayIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH FarEndLine in a particular day interval in the past 30 days.')
acSonetFarEndLineThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3), )
if mibBuilder.loadTexts: acSonetFarEndLineThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdTable.setDescription('The SONET/SDH FarEndLine Threshold Table.')
acSonetFarEndLineThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndLineThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetFarEndLineThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdEntry.setDescription('An entry in the SONET/SDH FarEndLine Threshold Table.')
acSonetFarEndLineThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetFarEndLineThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdSlot.setDescription('The physical slot number of the port.')
acSonetFarEndLineThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdPort.setDescription('The physical port number of the port.')
acSonetFarEndLineThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdSelectionNum.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdSelectionNum.setDescription('A number that selects either the 15 thresholds or the day thresholds. ')
acSonetFarEndLineThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 5), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdAdminStatus.setDescription('This field is used by the administrator to ensure only one client is performing management operations on this serial port at a time. When the field is read as available(0), the client can write the value locked(1) into this field to prevent a second client from performing managment ops on this instance.')
acSonetFarEndLineThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdESs.setDescription('The threshold associated with Errored Seconds.')
acSonetFarEndLineThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdSESs.setDescription('The threshold associated with Severely Errored Seconds.')
acSonetFarEndLineThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdCVs.setDescription('The threshold associated with Coding Violations.')
acSonetFarEndLineThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndLineThresholdUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndLineThresholdUASs.setDescription('The threshold associated with Unavailable Secondss.')
acSonetPath15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1), )
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalTable.setDescription('The SONET/SDH Path 15Minute Interval table.')
acSonetPath15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPath15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalEntry.setDescription('An entry in the SONET/SDH Path 15Minute Interval table.')
acSonetPath15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetPath15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalSlot.setDescription('The physical slot number of the port.')
acSonetPath15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalPort.setDescription('The physical port number of the port.')
acSonetPath15MinuteIntervalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalPath.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalPath.setDescription('The STS Path for which the set of statistics is available.')
acSonetPath15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalNumber.setDescription('A number between 1 and 98, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current 15 minute interval. The interval identified by 2 is the most recently completed 15 minute interval. The interval identified by 97 is the oldest 15 minute interval. The interval identified by 98 is a total of the previous 96 stored 15 minute intervals.')
acSonetPath15MinuteIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalStatus.setDescription('This variable indicates the status of the interface. The acSonetPathCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The acSonetPathNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 acSonetPathNoDefect 2 acSonetPathSTSLOP 4 acSonetPathSTSAIS 8 acSonetPathSTSRDI 16 acSonetPathUnequipped 32 acSonetPathPayloadLabelMismatch')
acSonetPath15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acSonetPath15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalResetStats.setDescription('This flag is used to reset the data for a 15 minute interval.')
acSonetPath15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in the current 15 minute interval.')
acSonetPath15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in the current 15 minute interval.')
acSonetPath15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path in the current 15 minute interval.')
acSonetPath15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path in the current 15 minute interval.')
acSonetPath15MinuteIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 1, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalBER.setStatus('current')
if mibBuilder.loadTexts: acSonetPath15MinuteIntervalBER.setDescription('The counter associated with the BER encountered by a Path in the current 15 minute interval. Represents the max value for an interval for number > 1.')
acSonetPathDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2), )
if mibBuilder.loadTexts: acSonetPathDayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalTable.setDescription('The SONET/SDH Path Day Interval table.')
acSonetPathDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetPathDayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalEntry.setDescription('An entry in the SONET/SDH Path Day Interval table.')
acSonetPathDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetPathDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalSlot.setDescription('The physical slot number of the port.')
acSonetPathDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalPort.setDescription('The physical port number of the port.')
acSonetPathDayIntervalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalPath.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalPath.setDescription('The STS Path for which the set of statistics is available.')
acSonetPathDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathDayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalNumber.setDescription('A number between 1 and 31, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current day performance monitoring interval. The interval identified by 2 is the most recently completed day interval. The interval identified by 31 is the oldest day interval.')
acSonetPathDayIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalStatus.setDescription('This variable indicates the status of the interface. The acSonetPathCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The acSonetPathNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 acSonetPathNoDefect 2 acSonetPathSTSLOP 4 acSonetPathSTSAIS 8 acSonetPathSTSRDI 16 acSonetPathUnequipped 32 acSonetPathPayloadLabelMismatch')
acSonetPathDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalValidStats.setDescription('This variable indicates if the data for this day is valid.')
acSonetPathDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathDayIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalResetStats.setDescription('This flag is used to reset the data for day interval.')
acSonetPathDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in the past day interval.')
acSonetPathDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in the past day interval.')
acSonetPathDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path in the past day interval.')
acSonetPathDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetPathDayIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path in the past day interval.')
acSonetPathDayIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathDayIntervalBER.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetPathDayIntervalBER.setDescription('The counter associated with the BER encountered by a Path in the past day interval.')
acSonetPathThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3), )
if mibBuilder.loadTexts: acSonetPathThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdTable.setDescription('The SONET/SDH Path Threshold Table.')
acSonetPathThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetPathThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdEntry.setDescription('An entry in the SONET/SDH Path Threshold Table.')
acSonetPathThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetPathThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdSlot.setDescription('The physical slot number of the port.')
acSonetPathThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdPort.setDescription('The physical port number of the port.')
acSonetPathThresholdPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdPath.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdPath.setDescription('The STS Path for which the set of statistics is available.')
acSonetPathThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathThresholdSelectionNum.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdSelectionNum.setDescription('A number that selects either the 15 thresholds or the day thresholds. ')
acSonetPathThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 6), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetPathThresholdAdminStatus.setDescription('This field is used by the administrator to ensure only one client is performing management operations on this serial port at a time. When the field is read as available(0), the client can write the value locked(1) into this field to prevent a second client from performing managment ops on this instance.')
acSonetPathThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdESs.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdESs.setDescription('The threshold associated with Errored Seconds.')
acSonetPathThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdSESs.setDescription('The threshold associated with Severely Errored Seconds.')
acSonetPathThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdCVs.setDescription('The threshold associated with Coding Violations.')
acSonetPathThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathThresholdUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetPathThresholdUASs.setDescription('The threshold associated with Unavailable Seconds.')
acSonetPathRDITable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4), )
if mibBuilder.loadTexts: acSonetPathRDITable.setStatus('current')
if mibBuilder.loadTexts: acSonetPathRDITable.setDescription('The SONET/SDH Path RDI Table.')
acSonetPathRDIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathRDINodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathRDISlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathRDIPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathRDIPath"))
if mibBuilder.loadTexts: acSonetPathRDIEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetPathRDIEntry.setDescription('An entry in the SONET/SDH Path RDI Table.')
acSonetPathRDINodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathRDINodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetPathRDINodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetPathRDISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathRDISlot.setStatus('current')
if mibBuilder.loadTexts: acSonetPathRDISlot.setDescription('The physical slot number of the port.')
acSonetPathRDIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathRDIPort.setStatus('current')
if mibBuilder.loadTexts: acSonetPathRDIPort.setDescription('The physical port number of the port.')
acSonetPathRDIPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathRDIPath.setStatus('current')
if mibBuilder.loadTexts: acSonetPathRDIPath.setDescription('The STS path instance for this port')
acSonetPathRDIOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rdi", 1), ("erdi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathRDIOpMode.setStatus('current')
if mibBuilder.loadTexts: acSonetPathRDIOpMode.setDescription('The Remote Defect Indiction signals have undergone a number of changes over the years, and now encompass two or even three different versions. See GR-253 6.2.1.3.2 for more information.')
acSonetPathTIMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5), )
if mibBuilder.loadTexts: acSonetPathTIMTable.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMTable.setDescription('The SONET/SDH Path Trace Identifier Mismatch Table.')
acSonetPathTIMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathTIMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathTIMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathTIMPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathTIMPath"))
if mibBuilder.loadTexts: acSonetPathTIMEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMEntry.setDescription('An entry in the SONET/SDH Path Trace Identifier Mismatch Table.')
acSonetPathTIMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathTIMNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetPathTIMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathTIMSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMSlot.setDescription('The physical slot number of the port.')
acSonetPathTIMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathTIMPort.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMPort.setDescription('The physical port number of the port.')
acSonetPathTIMPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathTIMPath.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMPath.setDescription('The path instance of the port.')
acSonetPathTIMGenerateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMGenerateEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMGenerateEnable.setDescription('Enables the generation of the Path Trace Identifier.')
acSonetPathTIMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMDetectEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMDetectEnable.setDescription('Enables the detection of the Path Trace Identifier.')
acSonetPathTIMTransmitedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 7), AcTraceString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMTransmitedString.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMTransmitedString.setDescription('The string that gets sent to the destination.')
acSonetPathTIMExpectedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 8), AcTraceString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMExpectedString.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMExpectedString.setDescription('The expected string that is to be received.')
acSonetPathTIMReceivedString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 9), AcTraceString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathTIMReceivedString.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMReceivedString.setDescription('The contents of the string that is received.')
acSonetPathTIMFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathTIMFailure.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMFailure.setDescription('Failure declared of the Path Trace Identifier.')
acSonetPathTIMFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("void", 0), ("t64", 1), ("t64-crlf", 2), ("t16", 3), ("t16-msb1", 4), ("t16-crc7", 5))).clone('void')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMFormat.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMFormat.setDescription('Format of Path Trace buffer.')
acSonetPathTIMMismatchZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 5, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathTIMMismatchZeros.setStatus('current')
if mibBuilder.loadTexts: acSonetPathTIMMismatchZeros.setDescription('Controls whether a received trace message containing all zeros can cause a mismatch defect.')
acSonetPathPLMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6), )
if mibBuilder.loadTexts: acSonetPathPLMTable.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMTable.setDescription('The SONET/SDH Path Payload Label Mismatch Table.')
acSonetPathPLMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathPLMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathPLMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathPLMPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathPLMPath"))
if mibBuilder.loadTexts: acSonetPathPLMEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMEntry.setDescription('An entry in the SONET/SDH Path Payload Label Mismatch Table.')
acSonetPathPLMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathPLMNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetPathPLMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathPLMSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMSlot.setDescription('The physical slot number of the port.')
acSonetPathPLMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathPLMPort.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMPort.setDescription('The physical port number of the port.')
acSonetPathPLMPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathPLMPath.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMPath.setDescription('The path instance of the port.')
acSonetPathPLMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathPLMDetectEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMDetectEnable.setDescription('Enables the detection of the Path Payload Label.')
acSonetPathPLMTransmitedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathPLMTransmitedValue.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMTransmitedValue.setDescription('The Path Payload Label that gets sent to the destination. See GR-253 Tables 3-2, 3-3.')
acSonetPathPLMExpectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathPLMExpectedValue.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMExpectedValue.setDescription('The expected Path Payload Label that is to be received. See GR-253 Tables 3-2, 3-3.')
acSonetPathPLMReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathPLMReceivedValue.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMReceivedValue.setDescription('The contents of the Path Payload Label that is received. See GR-253 Tables 3-2, 3-3.')
acSonetPathPLMMismatchFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathPLMMismatchFailure.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMMismatchFailure.setDescription('Mismatch failure declared for the Path Payload Label.')
acSonetPathPLMUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 6, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathPLMUnequipped.setStatus('current')
if mibBuilder.loadTexts: acSonetPathPLMUnequipped.setDescription('Unequipped failure declared for the Path Payload Label.')
acSonetFarEndPath15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1), )
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalTable.setDescription('The SONET/SDH FarEndPath 15Minute Interval table.')
acSonetFarEndPath15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPath15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalEntry.setDescription('An entry in the SONET/SDH FarEndPath 15Minute Interval table.')
acSonetFarEndPath15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetFarEndPath15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalSlot.setDescription('The physical slot number of the port.')
acSonetFarEndPath15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalPort.setDescription('The physical port number of the port.')
acSonetFarEndPath15MinuteIntervalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalPath.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalPath.setDescription('The STS Path for which the set of statistics is available.')
acSonetFarEndPath15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalNumber.setDescription('A number between 1 and 98, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current 15 minute interval. The interval identified by 2 is the most recently completed 15 minute interval. The interval identified by 97 is the oldest 15 minute interval. The interval identified by 98 is a total of the previous 96 stored 15 minute intervals.')
acSonetFarEndPath15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalValidStats.setDescription('This variable indicates if the data for this far end 15 minute interval is valid.')
acSonetFarEndPath15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalResetStats.setDescription('This flag is used to reset the data for far end 15 minute interval.')
acSonetFarEndPath15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH FarEndPath in the current 15 minute interval.')
acSonetFarEndPath15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH FarEndPath in the current 15 minute interval.')
acSonetFarEndPath15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH FarEndPath in the current 15 minute interval.')
acSonetFarEndPath15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPath15MinuteIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a FarEndPath in the current 15 minute interval.')
acSonetFarEndPathDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2), )
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalTable.setDescription('The SONET/SDH FarEndPath Day Interval table.')
acSonetFarEndPathDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalEntry.setDescription('An entry in the SONET/SDH FarEndPath Day Interval table.')
acSonetFarEndPathDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetFarEndPathDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalSlot.setDescription('The physical slot number of the port.')
acSonetFarEndPathDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalPort.setDescription('The physical port number of the port.')
acSonetFarEndPathDayIntervalPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalPath.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalPath.setDescription('The STS Path for which the set of statistics is available.')
acSonetFarEndPathDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalNumber.setDescription('A number between 1 and 31, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current day performance monitoring interval. The interval identified by 2 is the most recently completed day interval. The interval identified by 31 is the oldest day interval.')
acSonetFarEndPathDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalValidStats.setDescription('This variable indicates if the data for this far end day interval is valid.')
acSonetFarEndPathDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalResetStats.setDescription('This flag is used to reset the data for far end day interval.')
acSonetFarEndPathDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH FarEndPath in the current 15 minute interval.')
acSonetFarEndPathDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH FarEndPath in the current 15 minute interval.')
acSonetFarEndPathDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH FarEndPath in the current 15 minute interval.')
acSonetFarEndPathDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathDayIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a FarEndPath in the current 15 minute interval.')
acSonetFarEndPathThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3), )
if mibBuilder.loadTexts: acSonetFarEndPathThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdTable.setDescription('The SONET/SDH FarEndPath Threshold Table.')
acSonetFarEndPathThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdPath"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndPathThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetFarEndPathThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdEntry.setDescription('An entry in the SONET/SDH FarEndPath Threshold Table.')
acSonetFarEndPathThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetFarEndPathThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdSlot.setDescription('The physical slot number of the port.')
acSonetFarEndPathThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdPort.setDescription('The physical port number of the port.')
acSonetFarEndPathThresholdPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdPath.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdPath.setDescription('The STS Path for which the set of statistics is available.')
acSonetFarEndPathThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdSelectionNum.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdSelectionNum.setDescription('A number that selects either the 15 thresholds or the day thresholds. ')
acSonetFarEndPathThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 6), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdAdminStatus.setDescription('This field is used by the administrator to ensure only one client is performing management operations on this serial port at a time. When the field is read as available(0), the client can write the value locked(1) into this field to prevent a second client from performing managment ops on this instance.')
acSonetFarEndPathThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdESs.setDescription('The threshold associated with Errored Seconds.')
acSonetFarEndPathThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdSESs.setDescription('The threshold associated with Severely Errored Seconds.')
acSonetFarEndPathThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdCVs.setDescription('The threshold associated with Coding Violations.')
acSonetFarEndPathThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndPathThresholdUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndPathThresholdUASs.setDescription('The threshold associated with Unavailable Secondss.')
acSonetVT15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1), )
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalTable.setDescription('The SONET/SDH VT 15Minute Interval table.')
acSonetVT15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVT15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalEntry.setDescription('An entry in the SONET/SDH VT 15Minute Interval table.')
acSonetVT15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetVT15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalSlot.setDescription('The physical slot number of the port.')
acSonetVT15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalPort.setDescription('The physical port number of the port.')
acSonetVT15MinuteIntervalVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalVT.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalVT.setDescription('The VT for which the set of statistics is available.')
acSonetVT15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalNumber.setDescription('A number between 1 and 98, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current 15 minute interval. The interval identified by 2 is the most recently completed 15 minute interval. The interval identified by 97 is the oldest 15 minute interval. The interval identified by 98 is a total of the previous 96 stored 15 minute intervals.')
acSonetVT15MinuteIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalStatus.setDescription('This variable indicates the status of the interface. The acSonetVTCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects and failures simultaneously. The acSonetVTNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 acSonetVTNoDefect 2 acSonetVTLOP 4 acSonetVTPathAIS 8 acSonetVTPathRDI 16 acSonetVTPathRFI 32 acSonetVTUnequipped 64 acSonetVTPayloadLabelMismatch')
acSonetVT15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalValidStats.setDescription('This variable indicates if the data for this VT 15 minute interval is valid.')
acSonetVT15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalResetStats.setDescription('This flag is used to reset the data for this VT 15 minute interval.')
acSonetVT15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH VT in the current 15 minute interval.')
acSonetVT15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH VT in the current 15 minute interval.')
acSonetVT15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH VT in the current 15 minute interval.')
acSonetVT15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a VT in the current 15 minute interval.')
acSonetVT15MinuteIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 1, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalBER.setStatus('current')
if mibBuilder.loadTexts: acSonetVT15MinuteIntervalBER.setDescription('The counter associated with the BER encountered by a VT in the current 15 minute interval. Represents the max BER for the interval when number > 1.')
acSonetVTDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2), )
if mibBuilder.loadTexts: acSonetVTDayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalTable.setDescription('The SONET/SDH VT Day Interval table.')
acSonetVTDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetVTDayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalEntry.setDescription('An entry in the SONET/SDH VT Day Interval table.')
acSonetVTDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetVTDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalSlot.setDescription('The physical slot number of the port.')
acSonetVTDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalPort.setDescription('The physical port number of the port.')
acSonetVTDayIntervalVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalVT.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalVT.setDescription('The VT for which the set of statistics is available.')
acSonetVTDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTDayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalNumber.setDescription('A number between 1 and 31, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current day performance monitoring interval. The interval identified by 2 is the most recently completed day interval. The interval identified by 31 is the oldest day interval.')
acSonetVTDayIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalStatus.setDescription('This variable indicates the status of the interface. The acSonetVTCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects and failures simultaneously. The acSonetVTNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 acSonetVTNoDefect 2 acSonetVTLOP 4 acSonetVTPathAIS 8 acSonetVTPathRDI 16 acSonetVTPathRFI 32 acSonetVTUnequipped 64 acSonetVTPayloadLabelMismatch')
acSonetVTDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalValidStats.setDescription('This variable indicates if the data for this VT Day interval is valid.')
acSonetVTDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTDayIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalResetStats.setDescription('This flag is used to reset the data for this VT Day interval.')
acSonetVTDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH VT in the last day interval.')
acSonetVTDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH VT in the last day interval.')
acSonetVTDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH VT in the last day interval.')
acSonetVTDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetVTDayIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a VT in the last day interval.')
acSonetVTDayIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTDayIntervalBER.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetVTDayIntervalBER.setDescription('The counter associated with the max BER encountered by a VT in a day.')
acSonetVTThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3), )
if mibBuilder.loadTexts: acSonetVTThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdTable.setDescription('The SONET/SDH VT Threshold Table.')
acSonetVTThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetVTThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdEntry.setDescription('An entry in the SONET/SDH VT Threshold Table.')
acSonetVTThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetVTThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdSlot.setDescription('The physical slot number of the port.')
acSonetVTThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdPort.setDescription('The physical port number of the port.')
acSonetVTThresholdVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdVT.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdVT.setDescription('The VT for which the set of statistics is available.')
acSonetVTThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTThresholdSelectionNum.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdSelectionNum.setDescription('A number that selects either the 15 thresholds or the day thresholds. ')
acSonetVTThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 6), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetVTThresholdAdminStatus.setDescription('This field is used by the administrator to ensure only one client is performing management operations on this serial port at a time. When the field is read as available(0), the client can write the value locked(1) into this field to prevent a second client from performing managment ops on this instance.')
acSonetVTThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdESs.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdESs.setDescription('The threshold associated with Errored Seconds.')
acSonetVTThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdSESs.setDescription('The threshold associated with Severely Errored Seconds.')
acSonetVTThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdCVs.setDescription('The threshold associated with Coding Violations.')
acSonetVTThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTThresholdUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetVTThresholdUASs.setDescription('The threshold associated with Unavailable Secondss.')
acSonetVTRDITable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4), )
if mibBuilder.loadTexts: acSonetVTRDITable.setStatus('current')
if mibBuilder.loadTexts: acSonetVTRDITable.setDescription('The SONET/SDH VT RDI Table.')
acSonetVTRDIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTRDINodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTRDISlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTRDIPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTRDIVT"))
if mibBuilder.loadTexts: acSonetVTRDIEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetVTRDIEntry.setDescription('An entry in the SONET/SDH VT RDI Table.')
acSonetVTRDINodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTRDINodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetVTRDINodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetVTRDISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTRDISlot.setStatus('current')
if mibBuilder.loadTexts: acSonetVTRDISlot.setDescription('The physical slot number of the port.')
acSonetVTRDIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTRDIPort.setStatus('current')
if mibBuilder.loadTexts: acSonetVTRDIPort.setDescription('The physical port number of the port.')
acSonetVTRDIVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTRDIVT.setStatus('current')
if mibBuilder.loadTexts: acSonetVTRDIVT.setDescription('The Virtual Tributary (VT) instance.')
acSonetVTRDIOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rdi", 1), ("erdi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTRDIOpMode.setStatus('current')
if mibBuilder.loadTexts: acSonetVTRDIOpMode.setDescription('The Remote Defect Indiction signals have undergone a number of changes over the years, and now encompass two or even three different versions. See GR-253 6.2.1.3.3 for more information.')
acSonetVTPLMTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5), )
if mibBuilder.loadTexts: acSonetVTPLMTable.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMTable.setDescription('The SONET/SDH VT Payload Label Mismatch Table.')
acSonetVTPLMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTPLMNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTPLMSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTPLMPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTPLMVT"))
if mibBuilder.loadTexts: acSonetVTPLMEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMEntry.setDescription('An entry in the SONET/SDH VT Payload Label Mismatch Table.')
acSonetVTPLMNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTPLMNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetVTPLMSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTPLMSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMSlot.setDescription('The physical slot number of the port.')
acSonetVTPLMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTPLMPort.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMPort.setDescription('The physical port number of the port.')
acSonetVTPLMVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTPLMVT.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMVT.setDescription('The Virtual Tributary (VT) instance.')
acSonetVTPLMDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTPLMDetectEnable.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMDetectEnable.setDescription('Enables the detection of the VT Payload Label.')
acSonetVTPLMTransmitedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTPLMTransmitedValue.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMTransmitedValue.setDescription('The VT Payload Label that gets sent to the destination. See GR-253 Tables 3-4.')
acSonetVTPLMExpectedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTPLMExpectedValue.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMExpectedValue.setDescription('The expected VT Payload Label that is to be received. See GR-253 Tables 3-4.')
acSonetVTPLMReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTPLMReceivedValue.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMReceivedValue.setDescription('The contents of the VT Payload Label that is received. See GR-253 Tables 3-4.')
acSonetVTPLMMismatchFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTPLMMismatchFailure.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMMismatchFailure.setDescription('Mismatch failure declared for the VT Payload Label.')
acSonetVTPLMUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTPLMUnequipped.setStatus('current')
if mibBuilder.loadTexts: acSonetVTPLMUnequipped.setDescription('Unequipped failure declared for the VT Payload Label.')
acSonetFarEndVT15MinuteIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1), )
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalTable.setDescription('The SONET/SDH FarEndVT 15Minute Interval table.')
acSonetFarEndVT15MinuteIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVT15MinuteIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalEntry.setDescription('An entry in the SONET/SDH FarEndVT 15Minute Interval table.')
acSonetFarEndVT15MinuteIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetFarEndVT15MinuteIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalSlot.setDescription('The physical slot number of the port.')
acSonetFarEndVT15MinuteIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalPort.setDescription('The physical port number of the port.')
acSonetFarEndVT15MinuteIntervalVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalVT.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalVT.setDescription('The VT for which the set of statistics is available.')
acSonetFarEndVT15MinuteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalNumber.setDescription('A number between 1 and 98, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current 15 minute interval. The interval identified by 2 is the most recently completed 15 minute interval. The interval identified by 97 is the oldest 15 minute interval. The interval identified by 98 is a total of the previous 96 stored 15 minute intervals.')
acSonetFarEndVT15MinuteIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalValidStats.setDescription('This variable indicates if the data for this VT FE 15 minute interval is valid.')
acSonetFarEndVT15MinuteIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalResetStats.setDescription('This flag is used to reset the data for this VT FE 15 minute interval.')
acSonetFarEndVT15MinuteIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH FarEndVT in the current 15 minute interval.')
acSonetFarEndVT15MinuteIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH FarEndVT in the current 15 minute interval.')
acSonetFarEndVT15MinuteIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH FarEndVT in the current 15 minute interval.')
acSonetFarEndVT15MinuteIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 1, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVT15MinuteIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a FarEndVT in the current 15 minute interval.')
acSonetFarEndVTDayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2), )
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalTable.setDescription('The SONET/SDH FarEndVT Day Interval table.')
acSonetFarEndVTDayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTDayIntervalNumber"))
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalEntry.setDescription('An entry in the SONET/SDH FarEndVT Day Interval table.')
acSonetFarEndVTDayIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetFarEndVTDayIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalSlot.setDescription('The physical slot number of the port.')
acSonetFarEndVTDayIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalPort.setDescription('The physical port number of the port.')
acSonetFarEndVTDayIntervalVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalVT.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalVT.setDescription('The VT for which the set of statistics is available.')
acSonetFarEndVTDayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalNumber.setDescription('A number between 1 and 31, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the ongoing, current day performance monitoring interval. The interval identified by 2 is the most recently completed day interval. The interval identified by 31 is the oldest day interval.')
acSonetFarEndVTDayIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalValidStats.setDescription('This variable indicates if the data for this VT Day interval is valid.')
acSonetFarEndVTDayIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalResetStats.setDescription('This flag is used to reset the data for this VT Day interval.')
acSonetFarEndVTDayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH FarEndVT in the current 15 minute interval.')
acSonetFarEndVTDayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH FarEndVT in the current 15 minute interval.')
acSonetFarEndVTDayIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH FarEndVT in the current 15 minute interval.')
acSonetFarEndVTDayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTDayIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a FarEndVT in the current 15 minute interval.')
acSonetFarEndVTThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3), )
if mibBuilder.loadTexts: acSonetFarEndVTThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdTable.setDescription('The SONET/SDH FarEndVT Threshold Table.')
acSonetFarEndVTThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdVT"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetFarEndVTThresholdSelectionNum"))
if mibBuilder.loadTexts: acSonetFarEndVTThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdEntry.setDescription('An entry in the SONET/SDH FarEndVT Threshold Table.')
acSonetFarEndVTThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetFarEndVTThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdSlot.setDescription('The physical slot number of the port.')
acSonetFarEndVTThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdPort.setDescription('The physical port number of the port.')
acSonetFarEndVTThresholdVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdVT.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdVT.setDescription('The VT for which the set of statistics is available.')
acSonetFarEndVTThresholdSelectionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minute", 1), ("day", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdSelectionNum.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdSelectionNum.setDescription('A number that selects either the 15 thresholds or the day thresholds. ')
acSonetFarEndVTThresholdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 6), AcAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdAdminStatus.setDescription('This field is used by the administrator to ensure only one client is performing management operations on this serial port at a time. When the field is read as available(0), the client can write the value locked(1) into this field to prevent a second client from performing managment ops on this instance.')
acSonetFarEndVTThresholdESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdESs.setDescription('The threshold associated with Errored Seconds.')
acSonetFarEndVTThresholdSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdSESs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdSESs.setDescription('The threshold associated with Severely Errored Seconds.')
acSonetFarEndVTThresholdCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdCVs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdCVs.setDescription('The threshold associated with Coding Violations.')
acSonetFarEndVTThresholdUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetFarEndVTThresholdUASs.setStatus('current')
if mibBuilder.loadTexts: acSonetFarEndVTThresholdUASs.setDescription('The threshold associated with Unavailable Secondss.')
acSonetPortProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4), )
if mibBuilder.loadTexts: acSonetPortProtectionTable.setStatus('current')
if mibBuilder.loadTexts: acSonetPortProtectionTable.setDescription('The SONET/SDH Port Protection table.')
acSonetPortProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPortProtectionNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPortProtectionSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPortProtectionPort"))
if mibBuilder.loadTexts: acSonetPortProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetPortProtectionEntry.setDescription('An entry in the SONET/SDH Port Protection table.')
acSonetPortProtectionNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortProtectionNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetPortProtectionNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetPortProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortProtectionSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetPortProtectionSlot.setDescription('The physical slot number of the port.')
acSonetPortProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPortProtectionPort.setStatus('current')
if mibBuilder.loadTexts: acSonetPortProtectionPort.setDescription('The physical port number of the port.')
acSonetPortProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("west", 3), ("east", 4), ("match", 5), ("ring", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPortProtectionType.setStatus('current')
if mibBuilder.loadTexts: acSonetPortProtectionType.setDescription('This variable statically defines the purpose of the physical port connection as the working or protection port. It does not convey whether the system has undergone a protection switch.')
acSonetLineProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4), )
if mibBuilder.loadTexts: acSonetLineProtectionTable.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionTable.setDescription('The SONET/SDH Line Protection table.')
acSonetLineProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetLineProtectionNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineProtectionSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetLineProtectionPort"))
if mibBuilder.loadTexts: acSonetLineProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionEntry.setDescription('An entry in the SONET/SDH Line Protection table.')
acSonetLineProtectionNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineProtectionNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetLineProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineProtectionSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionSlot.setDescription('The physical slot number of the port.')
acSonetLineProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetLineProtectionPort.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionPort.setDescription('The physical port number of the port.')
acSonetLineProtectionArchitecture = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("one-plus-one", 2), ("one-to-one", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionArchitecture.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionArchitecture.setDescription('This variable defines the APS architecture as either 1+1 or 1:1.')
acSonetLineProtectionOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionOpMode.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionOpMode.setDescription('This variable defines the APS mode as either unidirectional or bidirectional.')
acSonetLineProtectionSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonrevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionSwitchType.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionSwitchType.setDescription('This variable defines the APS switch type as either revertive or nonrevertive.')
acSonetLineProtectionSFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionSFThreshold.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionSFThreshold.setDescription('The threshold associated with Signal Fail (SF). This value determines the BER level for protection switching.')
acSonetLineProtectionSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionSDThreshold.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionSDThreshold.setDescription('The threshold associated with Signal Degrade (SD). This value determines the BER level for protection switching.')
acSonetLineProtectionActiveTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionActiveTraffic.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionActiveTraffic.setDescription('This variable indicates when active traffic is on this line.')
acSonetLineProtectionProtectionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionProtectionSwitch.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionProtectionSwitch.setDescription('This variable indicates when a protection switch is currently affecting this line.')
acSonetLineProtectionFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionFail.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionFail.setDescription('This variable indicates when a protection switching failure has taken place. See GR-253, 6.2.1.1.6.')
acSonetLineProtectionChannelMismatchFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionChannelMismatchFail.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionChannelMismatchFail.setDescription('This variable indicates when a protection switching channel mismatch failure has taken place. See GR-253, 6.2.1.1.6.')
acSonetLineProtectionModeMismatchFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionModeMismatchFail.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionModeMismatchFail.setDescription('This variable indicates when a protection switching mode mismatch failure has taken place. See GR-253, 6.2.1.1.6.')
acSonetLineProtectionFarEndLineFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetLineProtectionFarEndLineFail.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionFarEndLineFail.setDescription('This variable indicates when a protection switching far-end protection-line failure has taken place. See GR-253, 6.2.1.1.6.')
acSonetLineProtectionWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionWTRTime.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionWTRTime.setDescription('This variable defines the APS Wait To Restore time. The time has one second granularity and may have a value in the range from 300 seconds (5 minutes) to 720 seconds (12 minutes).')
acSonetLineProtectionManCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 1, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("clear", 1), ("lockout-protection", 2), ("force-working", 3), ("force-protection", 4), ("manual-working", 5), ("manual-protection", 6), ("exercise", 7), ("lockout-working", 8), ("clear-lockout-working", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetLineProtectionManCommand.setStatus('current')
if mibBuilder.loadTexts: acSonetLineProtectionManCommand.setDescription('This variable defines the APS manually initiated commands.')
acSonetPathProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7), )
if mibBuilder.loadTexts: acSonetPathProtectionTable.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionTable.setDescription('The SONET/SDH Path Protection table.')
acSonetPathProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetPathProtectionNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathProtectionSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathProtectionPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetPathProtectionPath"))
if mibBuilder.loadTexts: acSonetPathProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionEntry.setDescription('An entry in the SONET/SDH Path Protection table.')
acSonetPathProtectionNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathProtectionNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetPathProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathProtectionSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionSlot.setDescription('The physical slot number of the port.')
acSonetPathProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathProtectionPort.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionPort.setDescription('The physical port number of the port.')
acSonetPathProtectionPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetPathProtectionPath.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionPath.setDescription('The STS-1 path for the port.')
acSonetPathProtectionSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonrevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionSwitchType.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionSwitchType.setDescription('This variable defines the path switch type as either revertive or nonrevertive.')
acSonetPathProtectionSFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionSFThreshold.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionSFThreshold.setDescription('The threshold associated with Signal Fail (SF). This value determines the BER level for protection switching. The value used is the exponent to a power of 10, so 3 means 10E-3.')
acSonetPathProtectionSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionSDThreshold.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionSDThreshold.setDescription('The threshold associated with Signal Degrade (SD). This value determines the BER level for protection switching. The value used is the exponent to a power of 10, so 6 means 10E-6.')
acSonetPathProtectionActiveTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathProtectionActiveTraffic.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionActiveTraffic.setDescription('This variable indicates when ODP or UPSR active traffic is on this path.')
acSonetPathProtectionProtectionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathProtectionProtectionSwitch.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionProtectionSwitch.setDescription('This variable indicates when either a UPSR or an ODP protection switch is currently affecting this path.')
acSonetPathProtectionWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionWTRTime.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionWTRTime.setDescription('This variable defines the ODP or UPSR Wait To Restore time. The time has one second granularity and may have a value in the range from 1 second to 720 seconds(12 minutes).')
acSonetPathProtectionWTITime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionWTITime.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionWTITime.setDescription('This variable defines the ODP Wait To Idle time. The time has one second granularity and may have a value in the range from 1 to 50 seconds.')
acSonetPathProtectionWTCTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionWTCTime.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionWTCTime.setDescription('This variable defines the ODP Wait To Clear time. The time has one second granularity and may have a value in the range from 1 second to 720 seconds (12 minutes).')
acSonetPathProtectionWTRelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionWTRelTime.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionWTRelTime.setDescription('This variable defines the ODP Wait To Release time. The time has one second granularity and may have a value in the range from 1 to 50 seconds.')
acSonetPathProtectionManSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("clear", 1), ("lockout-protection", 2), ("force-working", 3), ("force-protection", 4), ("manual-working", 5), ("manual-protection", 6), ("exercise", 7), ("lockout-working", 8), ("clear-lockout-working", 9), ("extra-traffic", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionManSwitch.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionManSwitch.setDescription('This variable defines the ODP and UPSR manually initiated commands. Entries 7..10 are used in ODP only.')
acSonetPathProtectionSwitchOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("bridged", 2), ("switched", 3), ("passthrough", 4), ("extra-traffic", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetPathProtectionSwitchOpStatus.setStatus('current')
if mibBuilder.loadTexts: acSonetPathProtectionSwitchOpStatus.setDescription('This variable defines the current switch condition of an ODP path.')
acSonetPathProtectionProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 2, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("odp", 1), ("upsr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetPathProtectionProtectionMode.setStatus('deprecated')
if mibBuilder.loadTexts: acSonetPathProtectionProtectionMode.setDescription(' !! This object *MUST* be set before any other object is accessed. !! This is the type of protection switching to be used if independent path level protection switching is enabled. This is similar to the acTimeSlotPathProtectionMode object that resides in the timeslot table. Refer to it for a description of the enumerations.')
acSonetVTProtectionTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6), )
if mibBuilder.loadTexts: acSonetVTProtectionTable.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionTable.setDescription('The SONET/SDH VT Protection table.')
acSonetVTProtectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1), ).setIndexNames((0, "APPIAN-PPORT-SONET-MIB", "acSonetVTProtectionNodeId"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTProtectionSlot"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTProtectionPort"), (0, "APPIAN-PPORT-SONET-MIB", "acSonetVTProtectionVT"))
if mibBuilder.loadTexts: acSonetVTProtectionEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionEntry.setDescription('An entry in the SONET/SDH VT Protection table.')
acSonetVTProtectionNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTProtectionNodeId.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSonetVTProtectionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTProtectionSlot.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionSlot.setDescription('The physical slot number of the port.')
acSonetVTProtectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTProtectionPort.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionPort.setDescription('The physical port number of the port.')
acSonetVTProtectionVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSonetVTProtectionVT.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionVT.setDescription('The VT path instance for the port.')
acSonetVTProtectionSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonrevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionSwitchType.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionSwitchType.setDescription('This variable defines the VT path switch type as either revertive or nonrevertive.')
acSonetVTProtectionSFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionSFThreshold.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionSFThreshold.setDescription('The threshold associated with Signal Fail (SF). This value determines the BER level for protection switching.')
acSonetVTProtectionSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionSDThreshold.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionSDThreshold.setDescription('The threshold associated with Signal Degrade (SD). This value determines the BER level for protection switching.')
acSonetVTProtectionProtectionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTProtectionProtectionSwitch.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionProtectionSwitch.setDescription('This variable indicates when a protection switch is currently affecting this path.')
acSonetVTProtectionWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionWTRTime.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionWTRTime.setDescription('This variable defines the UPSR Wait To Restore time. The time has one second granularity and may have a value in the range from 1 second to 720 seconds(12 minutes).')
acSonetVTProtectionManSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("clear", 1), ("lockout-protection", 2), ("force-working", 3), ("force-protection", 4), ("manual-working", 5), ("manual-protection", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetVTProtectionManSwitch.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionManSwitch.setDescription('This variable defines the UPSR manually initiated commands.')
acSonetVTProtectionActiveTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 6, 3, 1, 6, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSonetVTProtectionActiveTraffic.setStatus('current')
if mibBuilder.loadTexts: acSonetVTProtectionActiveTraffic.setDescription('This variable indicates when UPSR active traffic is on this path.')
mibBuilder.exportSymbols("APPIAN-PPORT-SONET-MIB", acSonetPathTIMFormat=acSonetPathTIMFormat, acSonetFarEndVTThresholdPort=acSonetFarEndVTThresholdPort, acSonetPathProtectionProtectionMode=acSonetPathProtectionProtectionMode, acSonetSectionSSMEntry=acSonetSectionSSMEntry, acSonetPathProtectionSlot=acSonetPathProtectionSlot, acSonetFarEndPathDayIntervalValidStats=acSonetFarEndPathDayIntervalValidStats, acSonetVTDayIntervalVT=acSonetVTDayIntervalVT, acSonetFarEndVT15MinuteIntervalPort=acSonetFarEndVT15MinuteIntervalPort, acSonetSection15MinuteIntervalPort=acSonetSection15MinuteIntervalPort, acSonetPortValidIntervals=acSonetPortValidIntervals, acSonetFarEndPath15MinuteIntervalNodeId=acSonetFarEndPath15MinuteIntervalNodeId, acSonetVT15MinuteIntervalSESs=acSonetVT15MinuteIntervalSESs, acSonetPath15MinuteIntervalESs=acSonetPath15MinuteIntervalESs, acSonetSectionSSMNodeId=acSonetSectionSSMNodeId, acSonetLine15MinuteIntervalUASs=acSonetLine15MinuteIntervalUASs, acSonetSection=acSonetSection, acSonetPath=acSonetPath, acSonetPathThresholdNodeId=acSonetPathThresholdNodeId, acSonetPathDayIntervalUASs=acSonetPathDayIntervalUASs, acSonetPortOpStatus=acSonetPortOpStatus, acSonetPath15MinuteIntervalSlot=acSonetPath15MinuteIntervalSlot, acSonetVTRDIVT=acSonetVTRDIVT, acSonetVTThresholdSlot=acSonetVTThresholdSlot, acSonetVTThresholdSelectionNum=acSonetVTThresholdSelectionNum, acSonetPortNodeId=acSonetPortNodeId, acSonetPathDayIntervalBER=acSonetPathDayIntervalBER, acSonetPathTIMSlot=acSonetPathTIMSlot, acSonetFarEndPathThresholdCVs=acSonetFarEndPathThresholdCVs, acSonetFarEndVTDayIntervalVT=acSonetFarEndVTDayIntervalVT, acSonetPortProtectionEntry=acSonetPortProtectionEntry, acSonetFarEndVT15MinuteIntervalSlot=acSonetFarEndVT15MinuteIntervalSlot, acSonetPathThresholdUASs=acSonetPathThresholdUASs, acSonetVT15MinuteIntervalNodeId=acSonetVT15MinuteIntervalNodeId, acSonetVTDayIntervalNodeId=acSonetVTDayIntervalNodeId, acSonetVTProtectionEntry=acSonetVTProtectionEntry, acSonetVTDayIntervalSlot=acSonetVTDayIntervalSlot, acSonetVTProtectionSlot=acSonetVTProtectionSlot, acSonetFarEndPathDayIntervalPath=acSonetFarEndPathDayIntervalPath, acSonetVTPLMExpectedValue=acSonetVTPLMExpectedValue, acSonetFarEndVTThresholdSelectionNum=acSonetFarEndVTThresholdSelectionNum, acSonetPortProtectionType=acSonetPortProtectionType, acSonetLineProtectionManCommand=acSonetLineProtectionManCommand, acSonetFarEndLine15MinuteIntervalESs=acSonetFarEndLine15MinuteIntervalESs, acSonetFarEndVTDayIntervalNumber=acSonetFarEndVTDayIntervalNumber, acSonetPathTIMDetectEnable=acSonetPathTIMDetectEnable, acSonetVTProtectionActiveTraffic=acSonetVTProtectionActiveTraffic, acSonetVTRDIPort=acSonetVTRDIPort, acSonetPath15MinuteIntervalResetStats=acSonetPath15MinuteIntervalResetStats, acSonetThresholdSlot=acSonetThresholdSlot, acSonetPath15MinuteIntervalUASs=acSonetPath15MinuteIntervalUASs, acSonetSectionDayIntervalESs=acSonetSectionDayIntervalESs, acSonetFarEndVTThresholdSESs=acSonetFarEndVTThresholdSESs, acSonetLineDayIntervalSESs=acSonetLineDayIntervalSESs, acSonetLineProtectionOpMode=acSonetLineProtectionOpMode, acSonetVT15MinuteIntervalStatus=acSonetVT15MinuteIntervalStatus, acSonetFarEndVTDayIntervalValidStats=acSonetFarEndVTDayIntervalValidStats, acSonetFarEndVTDayIntervalCVs=acSonetFarEndVTDayIntervalCVs, acSonetDCCSlot=acSonetDCCSlot, acSonetFarEndLineThresholdESs=acSonetFarEndLineThresholdESs, acSonetVTThresholdEntry=acSonetVTThresholdEntry, acSonetLineDayIntervalUASs=acSonetLineDayIntervalUASs, acSonetPathRDIOpMode=acSonetPathRDIOpMode, acSonetPathProtectionWTRelTime=acSonetPathProtectionWTRelTime, acSonetPathTIMNodeId=acSonetPathTIMNodeId, acSonetVTDayIntervalTable=acSonetVTDayIntervalTable, acSonetPathPLMEntry=acSonetPathPLMEntry, acSonetPathThresholdCVs=acSonetPathThresholdCVs, acSonetFarEndPathDayIntervalResetStats=acSonetFarEndPathDayIntervalResetStats, acSonetPathProtectionPath=acSonetPathProtectionPath, acSonetFarEndVTDayIntervalSlot=acSonetFarEndVTDayIntervalSlot, acSonetVT15MinuteIntervalNumber=acSonetVT15MinuteIntervalNumber, acSonetFarEndLineDayIntervalUASs=acSonetFarEndLineDayIntervalUASs, acSonetLineThresholdCVs=acSonetLineThresholdCVs, acSonetVTDayIntervalBER=acSonetVTDayIntervalBER, acSonetFarEndVTDayIntervalResetStats=acSonetFarEndVTDayIntervalResetStats, acSonetLineProtectionModeMismatchFail=acSonetLineProtectionModeMismatchFail, acSonetFarEndLineThresholdPort=acSonetFarEndLineThresholdPort, acSonetFarEndLineDayIntervalCVs=acSonetFarEndLineDayIntervalCVs, acSonetPathDayIntervalCVs=acSonetPathDayIntervalCVs, acSonetPathDayIntervalEntry=acSonetPathDayIntervalEntry, acSonetFarEndVTDayIntervalUASs=acSonetFarEndVTDayIntervalUASs, acSonetFarEndPathDayIntervalSESs=acSonetFarEndPathDayIntervalSESs, acSonetPortOpCode=acSonetPortOpCode, acSonetVTProtectionSwitchType=acSonetVTProtectionSwitchType, acSonetFarEndLineDayIntervalESs=acSonetFarEndLineDayIntervalESs, acSonetFarEndVT15MinuteIntervalUASs=acSonetFarEndVT15MinuteIntervalUASs, acSonetPathDayIntervalStatus=acSonetPathDayIntervalStatus, acSonetFarEndPath15MinuteIntervalSESs=acSonetFarEndPath15MinuteIntervalSESs, acSonetVT15MinuteIntervalSlot=acSonetVT15MinuteIntervalSlot, acSonetPathTIMReceivedString=acSonetPathTIMReceivedString, acSonetLine=acSonetLine, acSonetFarEndVTDayIntervalPort=acSonetFarEndVTDayIntervalPort, acSonetVTRDITable=acSonetVTRDITable, acSonetFarEndLine15MinuteIntervalEntry=acSonetFarEndLine15MinuteIntervalEntry, acSonetPathProtectionWTCTime=acSonetPathProtectionWTCTime, acSonetFarEndPath15MinuteIntervalPath=acSonetFarEndPath15MinuteIntervalPath, acSonetFarEndVTThresholdCVs=acSonetFarEndVTThresholdCVs, acSonetSection15MinuteIntervalTable=acSonetSection15MinuteIntervalTable, acSonetPathProtectionTable=acSonetPathProtectionTable, acSonetLineProtectionChannelMismatchFail=acSonetLineProtectionChannelMismatchFail, acSonetVTThresholdUASs=acSonetVTThresholdUASs, acSonetVTDayIntervalCVs=acSonetVTDayIntervalCVs, acSonetPathPLMMismatchFailure=acSonetPathPLMMismatchFailure, acSonetFarEndLine15MinuteIntervalSlot=acSonetFarEndLine15MinuteIntervalSlot, acSonetFarEndVTThresholdUASs=acSonetFarEndVTThresholdUASs, acSonetLineProtectionTable=acSonetLineProtectionTable, acSonetPortEntry=acSonetPortEntry, acSonetFarEndLineThresholdEntry=acSonetFarEndLineThresholdEntry, acSonetLineDayIntervalCVs=acSonetLineDayIntervalCVs, acSonetSection15MinuteIntervalResetStats=acSonetSection15MinuteIntervalResetStats, acSonetVTThresholdPort=acSonetVTThresholdPort, acSonetVTProtectionSFThreshold=acSonetVTProtectionSFThreshold, acSonetDCCAppianEnable=acSonetDCCAppianEnable, acSonetSectionDayIntervalNumber=acSonetSectionDayIntervalNumber, acSonetLineDayIntervalNodeId=acSonetLineDayIntervalNodeId, acSonetVTProtectionNodeId=acSonetVTProtectionNodeId, acSonetFarEndPathDayIntervalUASs=acSonetFarEndPathDayIntervalUASs, acSonetFarEndVTDayIntervalSESs=acSonetFarEndVTDayIntervalSESs, acSonetLineThresholdPort=acSonetLineThresholdPort, acSonetPortRingName=acSonetPortRingName, acSonetSectionThresholdTable=acSonetSectionThresholdTable, acSonetPathThresholdPort=acSonetPathThresholdPort, acSonetLine15MinuteIntervalPort=acSonetLine15MinuteIntervalPort, acSonetSectionTIMSlot=acSonetSectionTIMSlot, acSonetFarEndLine15MinuteIntervalPort=acSonetFarEndLine15MinuteIntervalPort, acSonetVT15MinuteIntervalEntry=acSonetVT15MinuteIntervalEntry, acSonetFarEndLine=acSonetFarEndLine, acSonetLineThresholdNodeId=acSonetLineThresholdNodeId, acSonetVTProtectionManSwitch=acSonetVTProtectionManSwitch, acSonetFarEndVT=acSonetFarEndVT, acSonetSectionTIMDetectEnable=acSonetSectionTIMDetectEnable, acSonetPortProtectionNodeId=acSonetPortProtectionNodeId, acSonetPathProtectionActiveTraffic=acSonetPathProtectionActiveTraffic, acSonetPortResetAllPMregs=acSonetPortResetAllPMregs, acSonetPortConnectionType=acSonetPortConnectionType, acSonetVTDayIntervalResetStats=acSonetVTDayIntervalResetStats, acSonetFarEndPathThresholdEntry=acSonetFarEndPathThresholdEntry, acSonetLine15MinuteIntervalBER=acSonetLine15MinuteIntervalBER, acSonetDCCSectionEnable=acSonetDCCSectionEnable, acSonetFarEndPathThresholdUASs=acSonetFarEndPathThresholdUASs, acSonetPathTIMTable=acSonetPathTIMTable, acSonetVTPLMVT=acSonetVTPLMVT, acSonetPathDayIntervalPort=acSonetPathDayIntervalPort, acSonetSectionSSMReceivedValue=acSonetSectionSSMReceivedValue, acSonetFarEndLineThresholdSlot=acSonetFarEndLineThresholdSlot, acSonetSectionDayIntervalResetStats=acSonetSectionDayIntervalResetStats, acSonetVTProtectionPort=acSonetVTProtectionPort, acSonetLineDayIntervalPort=acSonetLineDayIntervalPort, acSonetLineDayIntervalTable=acSonetLineDayIntervalTable, acSonetFarEndVTThresholdEntry=acSonetFarEndVTThresholdEntry, acSonetPathThresholdSlot=acSonetPathThresholdSlot, acSonetPath15MinuteIntervalStatus=acSonetPath15MinuteIntervalStatus, acSonetFarEndPath15MinuteIntervalNumber=acSonetFarEndPath15MinuteIntervalNumber, acSonetPortProtectionPort=acSonetPortProtectionPort, acSonetVTPLMTable=acSonetVTPLMTable, acSonetFarEndLine15MinuteIntervalTable=acSonetFarEndLine15MinuteIntervalTable, acSonetFarEndPath=acSonetFarEndPath, acSonetPathThresholdTable=acSonetPathThresholdTable, acSonetFarEndVT15MinuteIntervalValidStats=acSonetFarEndVT15MinuteIntervalValidStats, acSonetFarEndPathDayIntervalTable=acSonetFarEndPathDayIntervalTable, acSonetSectionDayIntervalTable=acSonetSectionDayIntervalTable, acSonetDCCPort=acSonetDCCPort, acSonetSectionTIMExpectedString=acSonetSectionTIMExpectedString, acSonetSectionTIMFailure=acSonetSectionTIMFailure, acSonetSectionSSMDetectEnable=acSonetSectionSSMDetectEnable, acSonetDCCAppianFail=acSonetDCCAppianFail, acSonetLineProtectionSwitchType=acSonetLineProtectionSwitchType, acSonetPathDayIntervalTable=acSonetPathDayIntervalTable, acSonetFarEndPath15MinuteIntervalResetStats=acSonetFarEndPath15MinuteIntervalResetStats, acSonetPathTIMEntry=acSonetPathTIMEntry, acSonetVTDayIntervalPort=acSonetVTDayIntervalPort, acSonetLineDayIntervalValidStats=acSonetLineDayIntervalValidStats, acSonetFarEndLineDayIntervalEntry=acSonetFarEndLineDayIntervalEntry, acSonetLineProtectionNodeId=acSonetLineProtectionNodeId, acSonetSection15MinuteIntervalNodeId=acSonetSection15MinuteIntervalNodeId, acSonetPathDayIntervalPath=acSonetPathDayIntervalPath, acSonetSectionTIMReceivedString=acSonetSectionTIMReceivedString, acSonetPathProtectionWTRTime=acSonetPathProtectionWTRTime, acSonetFarEndLine15MinuteIntervalResetStats=acSonetFarEndLine15MinuteIntervalResetStats, acSonetFarEndLineThresholdUASs=acSonetFarEndLineThresholdUASs, acSonetFarEndLine15MinuteIntervalSESs=acSonetFarEndLine15MinuteIntervalSESs, acSonetFarEndLineDayIntervalNodeId=acSonetFarEndLineDayIntervalNodeId, acSonetFarEndVT15MinuteIntervalResetStats=acSonetFarEndVT15MinuteIntervalResetStats, acSonetSection15MinuteIntervalCVs=acSonetSection15MinuteIntervalCVs, acSonetLineDayIntervalStatus=acSonetLineDayIntervalStatus, acSonetLine15MinuteIntervalESs=acSonetLine15MinuteIntervalESs, acSonetPathThresholdSelectionNum=acSonetPathThresholdSelectionNum, acSonetPathRDINodeId=acSonetPathRDINodeId, acSonetLineThresholdSelectionNum=acSonetLineThresholdSelectionNum, acSonetFarEndLineThresholdNodeId=acSonetFarEndLineThresholdNodeId, acSonetFarEndLineThresholdSelectionNum=acSonetFarEndLineThresholdSelectionNum, acSonetFarEndVT15MinuteIntervalEntry=acSonetFarEndVT15MinuteIntervalEntry, acSonetPortTimeElapsed=acSonetPortTimeElapsed, acSonetPathRDIPort=acSonetPathRDIPort, acSonetPortAdminStatus=acSonetPortAdminStatus, acSonetSection15MinuteIntervalESs=acSonetSection15MinuteIntervalESs, acSonetSectionDayIntervalEntry=acSonetSectionDayIntervalEntry, acSonetLineProtectionSFThreshold=acSonetLineProtectionSFThreshold, acSonetLineDayIntervalResetStats=acSonetLineDayIntervalResetStats, acSonetLineProtectionProtectionSwitch=acSonetLineProtectionProtectionSwitch, acSonetVT15MinuteIntervalUASs=acSonetVT15MinuteIntervalUASs, acSonetLine15MinuteIntervalSlot=acSonetLine15MinuteIntervalSlot, acSonetLine15MinuteIntervalTable=acSonetLine15MinuteIntervalTable, acSonetSectionSSMSlot=acSonetSectionSSMSlot, acSonetLine15MinuteIntervalCVs=acSonetLine15MinuteIntervalCVs, acSonetLineThresholdSESs=acSonetLineThresholdSESs, acSonetPathProtectionNodeId=acSonetPathProtectionNodeId, acSonetDCCTable=acSonetDCCTable, acSonetPath15MinuteIntervalCVs=acSonetPath15MinuteIntervalCVs, acSonetFarEndVTThresholdNodeId=acSonetFarEndVTThresholdNodeId, acSonetVTPLMUnequipped=acSonetVTPLMUnequipped, acSonetPortTransmitterEnable=acSonetPortTransmitterEnable, acSonetLineDayIntervalEntry=acSonetLineDayIntervalEntry, acSonetVT15MinuteIntervalResetStats=acSonetVT15MinuteIntervalResetStats, acSonetPathProtectionProtectionSwitch=acSonetPathProtectionProtectionSwitch, acSonetPortRingIdentifier=acSonetPortRingIdentifier, acSonetFarEndPathThresholdSESs=acSonetFarEndPathThresholdSESs, acSonetPathThresholdEntry=acSonetPathThresholdEntry, acSonetPathProtectionSwitchType=acSonetPathProtectionSwitchType, acSonetFarEndPathThresholdPort=acSonetFarEndPathThresholdPort, acSonetSectionTIMTable=acSonetSectionTIMTable, acSonetFarEndPathDayIntervalEntry=acSonetFarEndPathDayIntervalEntry, acSonetLineDayIntervalBER=acSonetLineDayIntervalBER, acSonetFarEndLine15MinuteIntervalNodeId=acSonetFarEndLine15MinuteIntervalNodeId, acSonetSectionThresholdSESs=acSonetSectionThresholdSESs, acSonetPath15MinuteIntervalPath=acSonetPath15MinuteIntervalPath, acSonetSectionDayIntervalPort=acSonetSectionDayIntervalPort, acSonetVTProtectionSDThreshold=acSonetVTProtectionSDThreshold, acSonetSectionThresholdCVs=acSonetSectionThresholdCVs, acSonetLineThresholdTable=acSonetLineThresholdTable, acSonetSectionTIMFormat=acSonetSectionTIMFormat, acSonetFarEndLineThresholdAdminStatus=acSonetFarEndLineThresholdAdminStatus, acSonetPathTIMGenerateEnable=acSonetPathTIMGenerateEnable, acSonetFarEndLineDayIntervalSESs=acSonetFarEndLineDayIntervalSESs, acSonetFarEndPath15MinuteIntervalEntry=acSonetFarEndPath15MinuteIntervalEntry, acSonetObjectsVT=acSonetObjectsVT, acSonetSectionDayIntervalValidStats=acSonetSectionDayIntervalValidStats, acSonetThresholdPort=acSonetThresholdPort, acSonetLineProtectionSDThreshold=acSonetLineProtectionSDThreshold, acSonetLineProtectionArchitecture=acSonetLineProtectionArchitecture, acSonetFarEndPathDayIntervalESs=acSonetFarEndPathDayIntervalESs, acSonetFarEndLineDayIntervalSlot=acSonetFarEndLineDayIntervalSlot, acSonetPathTIMMismatchZeros=acSonetPathTIMMismatchZeros, acSonetVTPLMMismatchFailure=acSonetVTPLMMismatchFailure, acSonetFarEndPath15MinuteIntervalCVs=acSonetFarEndPath15MinuteIntervalCVs, acSonetSectionDayIntervalSESs=acSonetSectionDayIntervalSESs, acSonetVT15MinuteIntervalCVs=acSonetVT15MinuteIntervalCVs, acSonetPathProtectionManSwitch=acSonetPathProtectionManSwitch, acSonetVTProtectionWTRTime=acSonetVTProtectionWTRTime, acSonetPort=acSonetPort, acSonetPortSlot=acSonetPortSlot, acSonetPathPLMNodeId=acSonetPathPLMNodeId, acSonetFarEndPathDayIntervalNumber=acSonetFarEndPathDayIntervalNumber, acSonetSectionThresholdNodeId=acSonetSectionThresholdNodeId)
mibBuilder.exportSymbols("APPIAN-PPORT-SONET-MIB", acSonetSectionDayIntervalCVs=acSonetSectionDayIntervalCVs, acSonetVTDayIntervalStatus=acSonetVTDayIntervalStatus, acSonetLineProtectionFarEndLineFail=acSonetLineProtectionFarEndLineFail, acSonetPathThresholdSESs=acSonetPathThresholdSESs, acSonetSectionDayIntervalSEFSs=acSonetSectionDayIntervalSEFSs, acSonetSectionSSMTable=acSonetSectionSSMTable, acSonetPortMediumType=acSonetPortMediumType, acSonetLineDayIntervalSlot=acSonetLineDayIntervalSlot, acSonetFarEndPath15MinuteIntervalTable=acSonetFarEndPath15MinuteIntervalTable, acSonetLineProtectionEntry=acSonetLineProtectionEntry, acSonetPathProtectionSwitchOpStatus=acSonetPathProtectionSwitchOpStatus, acSonetFarEndVT15MinuteIntervalNumber=acSonetFarEndVT15MinuteIntervalNumber, acSonetSectionThresholdEntry=acSonetSectionThresholdEntry, acSonetFarEndPathDayIntervalPort=acSonetFarEndPathDayIntervalPort, acSonetFarEndLine15MinuteIntervalCVs=acSonetFarEndLine15MinuteIntervalCVs, acSonetPathRDITable=acSonetPathRDITable, acSonetVT15MinuteIntervalPort=acSonetVT15MinuteIntervalPort, acSonetVT15MinuteIntervalTable=acSonetVT15MinuteIntervalTable, acSonetFarEndVT15MinuteIntervalSESs=acSonetFarEndVT15MinuteIntervalSESs, acSonetPortProtectionTable=acSonetPortProtectionTable, acSonetSectionDayIntervalSlot=acSonetSectionDayIntervalSlot, acSonetFarEndPathThresholdAdminStatus=acSonetFarEndPathThresholdAdminStatus, acSonetVTDayIntervalEntry=acSonetVTDayIntervalEntry, acSonetThresholdNodeId=acSonetThresholdNodeId, acSonetSectionSSMPort=acSonetSectionSSMPort, acSonetVTDayIntervalESs=acSonetVTDayIntervalESs, acSonetVTPLMDetectEnable=acSonetVTPLMDetectEnable, AcTraceString=AcTraceString, acSonetLineProtectionFail=acSonetLineProtectionFail, acSonetPathTIMPort=acSonetPathTIMPort, acSonetLine15MinuteIntervalValidStats=acSonetLine15MinuteIntervalValidStats, acSonetVTRDISlot=acSonetVTRDISlot, acSonetVTRDIOpMode=acSonetVTRDIOpMode, acSonetPath15MinuteIntervalValidStats=acSonetPath15MinuteIntervalValidStats, acSonetFarEndVTThresholdESs=acSonetFarEndVTThresholdESs, acSonetSectionDayIntervalStatus=acSonetSectionDayIntervalStatus, acSonetVTPLMReceivedValue=acSonetVTPLMReceivedValue, acSonetPathTIMTransmitedString=acSonetPathTIMTransmitedString, acSonetFarEndLineThresholdCVs=acSonetFarEndLineThresholdCVs, acSonetPath15MinuteIntervalNumber=acSonetPath15MinuteIntervalNumber, acSonetPathProtectionPort=acSonetPathProtectionPort, acSonetFarEndPathDayIntervalCVs=acSonetFarEndPathDayIntervalCVs, acSonetLineThresholdESs=acSonetLineThresholdESs, acSonetPathPLMExpectedValue=acSonetPathPLMExpectedValue, acSonetFarEndPath15MinuteIntervalUASs=acSonetFarEndPath15MinuteIntervalUASs, acSonetVTProtectionTable=acSonetVTProtectionTable, acSonetLineThresholdUASs=acSonetLineThresholdUASs, acSonetSectionThresholdSelectionNum=acSonetSectionThresholdSelectionNum, acSonetPathPLMReceivedValue=acSonetPathPLMReceivedValue, acSonetVTThresholdCVs=acSonetVTThresholdCVs, acSonetPathThresholdESs=acSonetPathThresholdESs, acSonetFarEndVTThresholdAdminStatus=acSonetFarEndVTThresholdAdminStatus, acSonetDCCNodeId=acSonetDCCNodeId, acSonetPathDayIntervalValidStats=acSonetPathDayIntervalValidStats, acSonetSectionDayIntervalNodeId=acSonetSectionDayIntervalNodeId, acSonetVT15MinuteIntervalVT=acSonetVT15MinuteIntervalVT, acSonetPortPort=acSonetPortPort, acSonetLineDayIntervalNumber=acSonetLineDayIntervalNumber, acSonetFarEndLineDayIntervalResetStats=acSonetFarEndLineDayIntervalResetStats, acSonetSectionSSMTransmitedValue=acSonetSectionSSMTransmitedValue, acSonetVTDayIntervalUASs=acSonetVTDayIntervalUASs, acSonetVTRDINodeId=acSonetVTRDINodeId, acSonetPathProtectionSFThreshold=acSonetPathProtectionSFThreshold, acSonetFarEndLineDayIntervalTable=acSonetFarEndLineDayIntervalTable, acSonetLineDayIntervalESs=acSonetLineDayIntervalESs, acSonetPortProtectionSlot=acSonetPortProtectionSlot, acSonetFarEndVTThresholdVT=acSonetFarEndVTThresholdVT, acSonetSection15MinuteIntervalNumber=acSonetSection15MinuteIntervalNumber, acSonetLine15MinuteIntervalSESs=acSonetLine15MinuteIntervalSESs, acSonetVTPLMTransmitedValue=acSonetVTPLMTransmitedValue, acSonetVT15MinuteIntervalBER=acSonetVT15MinuteIntervalBER, acSonetVTPLMNodeId=acSonetVTPLMNodeId, acSonetVTThresholdNodeId=acSonetVTThresholdNodeId, acSonetFarEndVTDayIntervalESs=acSonetFarEndVTDayIntervalESs, acSonetFarEndVTDayIntervalEntry=acSonetFarEndVTDayIntervalEntry, acSonetThresholdTable=acSonetThresholdTable, acSonetFarEndPath15MinuteIntervalESs=acSonetFarEndPath15MinuteIntervalESs, acSonetFarEndPathThresholdSlot=acSonetFarEndPathThresholdSlot, acSonetFarEndLineDayIntervalValidStats=acSonetFarEndLineDayIntervalValidStats, acSonetFarEndPathThresholdSelectionNum=acSonetFarEndPathThresholdSelectionNum, acSonetFarEndVTDayIntervalNodeId=acSonetFarEndVTDayIntervalNodeId, acSonetFarEndLineThresholdSESs=acSonetFarEndLineThresholdSESs, acSonetPortResetCurrentPMregs=acSonetPortResetCurrentPMregs, acSonetSection15MinuteIntervalEntry=acSonetSection15MinuteIntervalEntry, acSonetPortTable=acSonetPortTable, acSonetFarEndPathThresholdPath=acSonetFarEndPathThresholdPath, acSonetVTThresholdSESs=acSonetVTThresholdSESs, acSonetPathRDIPath=acSonetPathRDIPath, acSonetFarEndLineDayIntervalNumber=acSonetFarEndLineDayIntervalNumber, acSonetLineProtectionActiveTraffic=acSonetLineProtectionActiveTraffic, acSonetPathPLMTransmitedValue=acSonetPathPLMTransmitedValue, acSonetLineThresholdEntry=acSonetLineThresholdEntry, acSonetSection15MinuteIntervalSESs=acSonetSection15MinuteIntervalSESs, acSonetLine15MinuteIntervalStatus=acSonetLine15MinuteIntervalStatus, acSonetPathDayIntervalSESs=acSonetPathDayIntervalSESs, acSonet=acSonet, acSonetPathPLMSlot=acSonetPathPLMSlot, acSonetVTProtectionVT=acSonetVTProtectionVT, acSonetFarEndLine15MinuteIntervalNumber=acSonetFarEndLine15MinuteIntervalNumber, acSonetFarEndLine15MinuteIntervalValidStats=acSonetFarEndLine15MinuteIntervalValidStats, acSonetVT15MinuteIntervalValidStats=acSonetVT15MinuteIntervalValidStats, acSonetThresholdSESSet=acSonetThresholdSESSet, acSonetSectionTIMGenerateEnable=acSonetSectionTIMGenerateEnable, acSonetVTDayIntervalSESs=acSonetVTDayIntervalSESs, acSonetLineThresholdSlot=acSonetLineThresholdSlot, acSonetPath15MinuteIntervalBER=acSonetPath15MinuteIntervalBER, PYSNMP_MODULE_ID=acSonet, acSonetPortCircuitIdentifier=acSonetPortCircuitIdentifier, acSonetFarEndVTThresholdSlot=acSonetFarEndVTThresholdSlot, acSonetPathPLMDetectEnable=acSonetPathPLMDetectEnable, acSonetFarEndPathThresholdTable=acSonetFarEndPathThresholdTable, acSonetDCCLineEnable=acSonetDCCLineEnable, acSonetSectionThresholdPort=acSonetSectionThresholdPort, acSonetSectionThresholdSEFSs=acSonetSectionThresholdSEFSs, acSonetPath15MinuteIntervalTable=acSonetPath15MinuteIntervalTable, acSonetVTDayIntervalValidStats=acSonetVTDayIntervalValidStats, acSonetPath15MinuteIntervalNodeId=acSonetPath15MinuteIntervalNodeId, acSonetSectionTIMEntry=acSonetSectionTIMEntry, acSonetPathDayIntervalResetStats=acSonetPathDayIntervalResetStats, acSonetSectionTIMTransmitedString=acSonetSectionTIMTransmitedString, acSonetFarEndLineDayIntervalPort=acSonetFarEndLineDayIntervalPort, acSonetLine15MinuteIntervalNodeId=acSonetLine15MinuteIntervalNodeId, acSonetVTDayIntervalNumber=acSonetVTDayIntervalNumber, acSonetPortInvalidIntervals=acSonetPortInvalidIntervals, acSonetPathProtectionWTITime=acSonetPathProtectionWTITime, acSonetPath15MinuteIntervalEntry=acSonetPath15MinuteIntervalEntry, acSonetPathThresholdAdminStatus=acSonetPathThresholdAdminStatus, acSonetFarEndVT15MinuteIntervalTable=acSonetFarEndVT15MinuteIntervalTable, acSonetSectionThresholdESs=acSonetSectionThresholdESs, acSonetPortMediumLineCoding=acSonetPortMediumLineCoding, acSonetPathPLMTable=acSonetPathPLMTable, acSonetVT15MinuteIntervalESs=acSonetVT15MinuteIntervalESs, acSonetFarEndVT15MinuteIntervalVT=acSonetFarEndVT15MinuteIntervalVT, acSonetSection15MinuteIntervalSEFSs=acSonetSection15MinuteIntervalSEFSs, acSonetFarEndVT15MinuteIntervalNodeId=acSonetFarEndVT15MinuteIntervalNodeId, acSonetPortLoopbackConfig=acSonetPortLoopbackConfig, acSonetFarEndPathDayIntervalNodeId=acSonetFarEndPathDayIntervalNodeId, acSonetLineProtectionWTRTime=acSonetLineProtectionWTRTime, acSonetPathDayIntervalNumber=acSonetPathDayIntervalNumber, acSonetVT=acSonetVT, acSonetVTProtectionProtectionSwitch=acSonetVTProtectionProtectionSwitch, acSonetPath15MinuteIntervalSESs=acSonetPath15MinuteIntervalSESs, acSonetVTRDIEntry=acSonetVTRDIEntry, acSonetObjectsPath=acSonetObjectsPath, acSonetVTPLMEntry=acSonetVTPLMEntry, acSonetSection15MinuteIntervalSlot=acSonetSection15MinuteIntervalSlot, acSonetFarEndPath15MinuteIntervalValidStats=acSonetFarEndPath15MinuteIntervalValidStats, acSonetFarEndPathThresholdESs=acSonetFarEndPathThresholdESs, acSonetObjects=acSonetObjects, acSonetFarEndLine15MinuteIntervalUASs=acSonetFarEndLine15MinuteIntervalUASs, acSonetLine15MinuteIntervalNumber=acSonetLine15MinuteIntervalNumber, acSonetFarEndVTDayIntervalTable=acSonetFarEndVTDayIntervalTable, acSonetPathThresholdPath=acSonetPathThresholdPath, acSonetSectionTIMMismatchZeros=acSonetSectionTIMMismatchZeros, acSonetLineProtectionSlot=acSonetLineProtectionSlot, acSonetFarEndPathThresholdNodeId=acSonetFarEndPathThresholdNodeId, acSonetPortMediumLineType=acSonetPortMediumLineType, acSonetLine15MinuteIntervalResetStats=acSonetLine15MinuteIntervalResetStats, acSonetVTPLMSlot=acSonetVTPLMSlot, acSonetPathPLMUnequipped=acSonetPathPLMUnequipped, acSonetSectionTIMNodeId=acSonetSectionTIMNodeId, acSonetDCCSectionFail=acSonetDCCSectionFail, acSonetLine15MinuteIntervalEntry=acSonetLine15MinuteIntervalEntry, acSonetFarEndPath15MinuteIntervalSlot=acSonetFarEndPath15MinuteIntervalSlot, acSonetPathTIMFailure=acSonetPathTIMFailure, acSonetLineProtectionPort=acSonetLineProtectionPort, acSonetSection15MinuteIntervalValidStats=acSonetSection15MinuteIntervalValidStats, acSonetPathDayIntervalNodeId=acSonetPathDayIntervalNodeId, acSonetFarEndVT15MinuteIntervalCVs=acSonetFarEndVT15MinuteIntervalCVs, acSonetFarEndLineThresholdTable=acSonetFarEndLineThresholdTable, acSonetPathRDIEntry=acSonetPathRDIEntry, acSonetPathProtectionSDThreshold=acSonetPathProtectionSDThreshold, acSonetPathPLMPort=acSonetPathPLMPort, acSonetVTThresholdVT=acSonetVTThresholdVT, acSonetPathPLMPath=acSonetPathPLMPath, acSonetVTThresholdESs=acSonetVTThresholdESs, acSonetPathRDISlot=acSonetPathRDISlot, acSonetDCCEntry=acSonetDCCEntry, acSonetThresholdEntry=acSonetThresholdEntry, acSonetSection15MinuteIntervalStatus=acSonetSection15MinuteIntervalStatus, acSonetFarEndVT15MinuteIntervalESs=acSonetFarEndVT15MinuteIntervalESs, acSonetPathTIMExpectedString=acSonetPathTIMExpectedString, acSonetSectionThresholdSlot=acSonetSectionThresholdSlot, acSonetPathDayIntervalSlot=acSonetPathDayIntervalSlot, acSonetFarEndPath15MinuteIntervalPort=acSonetFarEndPath15MinuteIntervalPort, acSonetFarEndVTThresholdTable=acSonetFarEndVTThresholdTable, acSonetVTThresholdAdminStatus=acSonetVTThresholdAdminStatus, acSonetPathProtectionEntry=acSonetPathProtectionEntry, acSonetFarEndPathDayIntervalSlot=acSonetFarEndPathDayIntervalSlot, acSonetVTThresholdTable=acSonetVTThresholdTable, acSonetPathTIMPath=acSonetPathTIMPath, acSonetPathDayIntervalESs=acSonetPathDayIntervalESs, acSonetSectionTIMPort=acSonetSectionTIMPort, acSonetSectionThresholdAdminStatus=acSonetSectionThresholdAdminStatus, acSonetPath15MinuteIntervalPort=acSonetPath15MinuteIntervalPort, acSonetDCCLineFail=acSonetDCCLineFail, acSonetVTPLMPort=acSonetVTPLMPort, acSonetLineThresholdAdminStatus=acSonetLineThresholdAdminStatus)
