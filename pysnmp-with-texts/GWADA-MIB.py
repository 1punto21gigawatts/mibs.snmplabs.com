#
# PySNMP MIB module GWADA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GWADA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:20:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, enterprises, iso, TimeTicks, NotificationType, Bits, MibIdentifier, ModuleIdentity, Gauge32, Integer32, NotificationType, Counter64, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "enterprises", "iso", "TimeTicks", "NotificationType", "Bits", "MibIdentifier", "ModuleIdentity", "Gauge32", "Integer32", "NotificationType", "Counter64", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
gwada = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 39))
ada = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 39, 1))
adaTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 39, 2))
adaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 39, 3))
adaTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1), )
if mibBuilder.loadTexts: adaTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaTable.setDescription('A table of ADA objects')
adaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1), ).setIndexNames((0, "GWADA-MIB", "adaIndex"))
if mibBuilder.loadTexts: adaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaEntry.setDescription('An entry in the ADA Table')
adaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaIndex.setDescription('Index into the ADA table')
adaName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaName.setStatus('mandatory')
if mibBuilder.loadTexts: adaName.setDescription('The facility for which this Administration Agent operates.')
adaOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("domain", 2), ("postOffice", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: adaOperationMode.setDescription('The Operation Mode of this Administration Agent: Normal, Domain, or Post Office')
adaTotalPostOffices = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaTotalPostOffices.setStatus('mandatory')
if mibBuilder.loadTexts: adaTotalPostOffices.setDescription('The number of Post Offices serviced by this agent.')
adaClosedPostOffices = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaClosedPostOffices.setStatus('mandatory')
if mibBuilder.loadTexts: adaClosedPostOffices.setDescription('The number of closed Post Offices serviced by this agent.')
adaCompletedMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaCompletedMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: adaCompletedMsgs.setDescription('The number of completed messages.')
adaErrorMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaErrorMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: adaErrorMsgs.setDescription('The number of error messages.')
adaUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaUptime.setStatus('mandatory')
if mibBuilder.loadTexts: adaUptime.setDescription('Uptime of this Administration Agent.')
adaCurrentLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaCurrentLogFile.setStatus('mandatory')
if mibBuilder.loadTexts: adaCurrentLogFile.setDescription('Current log file.')
adaLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("verbose", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaLogLevel.setStatus('mandatory')
if mibBuilder.loadTexts: adaLogLevel.setDescription('Administration Agent log level: Normal or Verbose')
adaFileLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaFileLogging.setStatus('mandatory')
if mibBuilder.loadTexts: adaFileLogging.setDescription('Administration Agent disk logging: YES or NO')
adaMaxLogFileAge = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaMaxLogFileAge.setStatus('mandatory')
if mibBuilder.loadTexts: adaMaxLogFileAge.setDescription('Maximum age for Administration Agent log files.')
adaMaxLogDiskSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaMaxLogDiskSpace.setStatus('mandatory')
if mibBuilder.loadTexts: adaMaxLogDiskSpace.setDescription('Maximum disk space for Administration Agent log files.')
adaRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaRestart.setStatus('mandatory')
if mibBuilder.loadTexts: adaRestart.setDescription('Administration Agent Restart: Yes or No.')
adaGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaGUID.setStatus('mandatory')
if mibBuilder.loadTexts: adaGUID.setDescription('Administration Agent globally unique identifier.')
adaOS = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaOS.setStatus('mandatory')
if mibBuilder.loadTexts: adaOS.setDescription('Operating System name and version')
adaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaVersion.setStatus('mandatory')
if mibBuilder.loadTexts: adaVersion.setDescription('Version and date this agent.')
adaTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 39, 2, 1), Integer32())
if mibBuilder.loadTexts: adaTrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: adaTrapTime.setDescription('The time the trap occurred. Seconds since Jan 1, 1970 (GMT)')
adaFacilityName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 39, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: adaFacilityName.setStatus('mandatory')
if mibBuilder.loadTexts: adaFacilityName.setDescription('A Domain or Post Office name.')
adaFacilityLink = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 39, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: adaFacilityLink.setStatus('mandatory')
if mibBuilder.loadTexts: adaFacilityLink.setDescription('A Domain or Post Office link.')
adaRecoveredDB = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 39, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: adaRecoveredDB.setStatus('mandatory')
if mibBuilder.loadTexts: adaRecoveredDB.setDescription('The Admin database that was recovered.')
adaStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,1)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaName"), ("GWADA-MIB", "adaGUID"))
if mibBuilder.loadTexts: adaStartTrap.setDescription('GroupWise Administration Agent start.')
adaShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,2)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaName"), ("GWADA-MIB", "adaGUID"))
if mibBuilder.loadTexts: adaShutdownTrap.setDescription('GroupWise Administration Agent has shut down.')
adaFacilityBlockedTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,3)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaFacilityLink"), ("GWADA-MIB", "adaFacilityName"), ("GWADA-MIB", "adaGUID"))
if mibBuilder.loadTexts: adaFacilityBlockedTrap.setDescription("GWADA: a link to a facility's database is closed.")
adaFacilityOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,4)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaFacilityLink"), ("GWADA-MIB", "adaFacilityName"), ("GWADA-MIB", "adaGUID"))
if mibBuilder.loadTexts: adaFacilityOpenTrap.setDescription('GWADA: a link a Post Office database is open.')
adaDBRecoverOkay = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,5)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaRecoveredDB"), ("GWADA-MIB", "adaGUID"))
if mibBuilder.loadTexts: adaDBRecoverOkay.setDescription('GWADA: an Admin database recovery has completed.')
adaDBRecoverError = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,6)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaRecoveredDB"), ("GWADA-MIB", "adaGUID"))
if mibBuilder.loadTexts: adaDBRecoverError.setDescription('GWADA: An Admin database recovery has failed.')
adaDBRecoverWarn = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,7)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaRecoveredDB"), ("GWADA-MIB", "adaGUID"))
if mibBuilder.loadTexts: adaDBRecoverWarn.setDescription('GWADA: WARNING - Data loss occured during an Admin Database recovery.')
adaRestartTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,8)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaFacilityName"), ("GWADA-MIB", "adaGUID"))
if mibBuilder.loadTexts: adaRestartTrap.setDescription('GroupWise Administration Agent restart initiated.')
mibBuilder.exportSymbols("GWADA-MIB", adaMaxLogFileAge=adaMaxLogFileAge, adaTable=adaTable, adaCurrentLogFile=adaCurrentLogFile, adaTrapTime=adaTrapTime, adaOS=adaOS, adaName=adaName, ada=ada, adaStartTrap=adaStartTrap, adaFacilityBlockedTrap=adaFacilityBlockedTrap, adaDBRecoverOkay=adaDBRecoverOkay, adaErrorMsgs=adaErrorMsgs, adaShutdownTrap=adaShutdownTrap, adaLogLevel=adaLogLevel, adaDBRecoverError=adaDBRecoverError, adaUptime=adaUptime, adaFacilityName=adaFacilityName, adaTraps=adaTraps, adaVersion=adaVersion, novell=novell, adaIndex=adaIndex, adaGUID=adaGUID, adaDBRecoverWarn=adaDBRecoverWarn, adaRestartTrap=adaRestartTrap, adaClosedPostOffices=adaClosedPostOffices, adaOperationMode=adaOperationMode, adaEntry=adaEntry, adaTotalPostOffices=adaTotalPostOffices, adaCompletedMsgs=adaCompletedMsgs, adaFileLogging=adaFileLogging, adaRecoveredDB=adaRecoveredDB, adaRestart=adaRestart, adaFacilityLink=adaFacilityLink, adaMaxLogDiskSpace=adaMaxLogDiskSpace, mibDoc=mibDoc, gwada=gwada, adaTrapInfo=adaTrapInfo, adaFacilityOpenTrap=adaFacilityOpenTrap)
