#
# PySNMP MIB module MICOM-IFDNA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-IFDNA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, ModuleIdentity, ObjectIdentity, Counter64, NotificationType, iso, MibIdentifier, Unsigned32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Counter64", "NotificationType", "iso", "MibIdentifier", "Unsigned32", "Bits", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
micom_ifdna = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 18)).setLabel("micom-ifdna")
ifDna = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1))
ifNvDna = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2))
mcmIfDnaTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1), )
if mibBuilder.loadTexts: mcmIfDnaTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIfDnaTable.setDescription('NAME = ; DESC = The Interface DNA Map Table.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmIfDnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1), ).setIndexNames((0, "MICOM-IFDNA-MIB", "mcmIfDnaIfIndex"), (0, "MICOM-IFDNA-MIB", "mcmIfDnaType"))
if mibBuilder.loadTexts: mcmIfDnaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIfDnaEntry.setDescription('NAME = ; DESC = Each entry corresponds to each interface \\ which has a DNA associated with it.; HELP = ; CAPABILITIES = ;')
mcmIfDnaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIfDnaIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIfDnaIfIndex.setDescription('NAME = ; DESC = The unique identifier of the interface. \\ Same value as the ifIndex from MIB-II.; HELP = First of the indicies to a row in this \\ table.; CAPABILITIES = ;')
mcmIfDnaType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("provisioned", 1), ("learnt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIfDnaType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIfDnaType.setDescription('NAME = ; DESC = Indicates whether the DNA on this interface \\ was provisioned by the user or was \\ learned from the switch; HELP = This is the second index \\ identifying a row in \\ this table.; CAPABILITIES = ;')
mcmIfDNADigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmIfDNADigits.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIfDNADigits.setDescription('NAME = ; DESC = The DNA digits in ASCII format which \\ uniquely identify the row in the table.; HELP = Every interface has an unique DNA number \\ assigned to it.; CAPABILITIES = ;')
mcmIfDnaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("active", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmIfDnaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIfDnaStatus.setDescription('NAME = ; DESC = Indicates the validity of the row in \\ the table.; HELP = A value of active means \\ this is the DNA used by the NAC to \\ register with the NAS. A value of valid \\ means that the row is valid but not \\ used to register with the NAS. It is \\ left to the implementor whether to \\ remove a row from the table when the \\ value of this object is equal to invalid.; CAPABILITIES = ;')
nvmIfDnaTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1), )
if mibBuilder.loadTexts: nvmIfDnaTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIfDnaTable.setDescription('NAME = ; DESC = The Interface DNA Map Table.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmIfDnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1), ).setIndexNames((0, "MICOM-IFDNA-MIB", "nvmIfDnaIfIndex"), (0, "MICOM-IFDNA-MIB", "nvmIfDnaType"))
if mibBuilder.loadTexts: nvmIfDnaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIfDnaEntry.setDescription('NAME = ; DESC = Each entry corresponds to each interface \\ which has a DNA associated with it.; HELP = ; CAPABILITIES = ;')
nvmIfDnaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIfDnaIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIfDnaIfIndex.setDescription('NAME = ; DESC = The unique identifier of the interface. \\ Same value as the ifIndex from MIB-II.; HELP = First of the indicies to a row in this \\ table.; CAPABILITIES = ;')
nvmIfDnaType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("provisioned", 1), ("learnt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIfDnaType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIfDnaType.setDescription('NAME = ; DESC = Indicates whether the DNA on this interface \\ was provisioned by the user or was \\ learned from the switch.; HELP = This is the second index \\ identifying a row in \\ this table.; CAPABILITIES = ;')
nvmIfDNADigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIfDNADigits.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIfDNADigits.setDescription('NAME = ; DESC = The DNA digits in ASCII format which \\ uniquely identify the row in the table.; HELP = Every interface has an unique DNA number \\ assigned to it.; CAPABILITIES = ;')
nvmIfDnaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("active", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIfDnaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIfDnaStatus.setDescription('NAME = ; DESC = Indicates the validity of the row in \\ the table.; HELP = A value of active means \\ this is the DNA used by the NAC to \\ register with the NAS. A value of valid \\ means that the row is valid but not \\ used to register with the NAS. It is \\ left to the implementor whether to \\ remove a row from the table when the \\ value of this object is equal to invalid.; CAPABILITIES = ;')
mibBuilder.exportSymbols("MICOM-IFDNA-MIB", mcmIfDnaEntry=mcmIfDnaEntry, nvmIfDnaIfIndex=nvmIfDnaIfIndex, nvmIfDnaEntry=nvmIfDnaEntry, mcmIfDNADigits=mcmIfDNADigits, micom_ifdna=micom_ifdna, mcmIfDnaStatus=mcmIfDnaStatus, nvmIfDnaTable=nvmIfDnaTable, nvmIfDnaType=nvmIfDnaType, nvmIfDNADigits=nvmIfDNADigits, ifDna=ifDna, mcmIfDnaIfIndex=mcmIfDnaIfIndex, nvmIfDnaStatus=nvmIfDnaStatus, mcmIfDnaType=mcmIfDnaType, mcmIfDnaTable=mcmIfDnaTable, ifNvDna=ifNvDna)
