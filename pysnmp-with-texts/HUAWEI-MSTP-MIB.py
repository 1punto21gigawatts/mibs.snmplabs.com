#
# PySNMP MIB module HUAWEI-MSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MSTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifName, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifName", "ifIndex", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, ModuleIdentity, Counter64, ObjectIdentity, Gauge32, Counter32, IpAddress, Bits, Integer32, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "Counter64", "ObjectIdentity", "Gauge32", "Counter32", "IpAddress", "Bits", "Integer32", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hwMstp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4))
if mibBuilder.loadTexts: hwMstp.setLastUpdated('200806141400Z')
if mibBuilder.loadTexts: hwMstp.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwMstp.setContactInfo('VRP Team Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwMstp.setDescription('This module include the information about MSTP protocol in the bridge. The information can be read and some of them can be set.')
class HwMSTPEnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

hwL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42))
hwMstpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1))
hwMstpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 1), HwMSTPEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpStatus.setStatus('current')
if mibBuilder.loadTexts: hwMstpStatus.setDescription('Whether the Bridge MSTP is enabled. Enable indicate that MSTP enable in the bridge; Disabled indicate that MSTP disable in the bridge. By default, the Bridge MSTP is disabled.')
hwMstpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpForceVersion.setStatus('current')
if mibBuilder.loadTexts: hwMstpForceVersion.setDescription(' The mode of this Bridge spanning-tree protocol. At present, the bridge hold out STP compatible mode and MSTP . User can set the mode by command line. By default, the mode is MSTP.')
hwMstpDiameter = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpDiameter.setStatus('current')
if mibBuilder.loadTexts: hwMstpDiameter.setDescription('The diameter of Bridge. It stands for the scope of the network. It affects the time that include hello time, forward delay time, maxage. Every bridge can set the diameter of Bridge, and it is effective when the bridge is root bridge. Effective in the CIST By default, the diameter is 7. The value of hwMstpDiameter is only unused(65535) when it is read.')
hwMstpBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpBridgeMaxHops.setStatus('current')
if mibBuilder.loadTexts: hwMstpBridgeMaxHops.setDescription('The maximum value of the Bridge hops. It can limit the scope of the bridge network. It is effective when the bridge is root bridge. The BPDU that the bridge receives from the Designed bridge will be dropped when the hops in the BPDU is zero . By default, the value is 20.')
hwMstpMasterBridgeID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpMasterBridgeID.setStatus('current')
if mibBuilder.loadTexts: hwMstpMasterBridgeID.setDescription('The Bridge Identifier of the current Master Bridge. It is the root Bridge Identifier of the instance 0 in the region.')
hwMstpMasterPathCost = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpMasterPathCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpMasterPathCost.setDescription('The CIST path cost from the transmitting Bridge to the Master Bridge. By default, the value is 0.')
hwMstpBpduGuard = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 7), HwMSTPEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpBpduGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpBpduGuard.setDescription('Whether the Bridge BPDU Guard function is enabled. If the function is enabled, the port will shutdown when received BPDU and the port is configured as edgeport. The purpose of the function is to prevent the bridge from BPDU attacking. By default, the function is disabled')
hwMstpAdminFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpAdminFormatSelector.setStatus('current')
if mibBuilder.loadTexts: hwMstpAdminFormatSelector.setDescription('The administrative Configuration Identifier Format Selector in use by the Bridge. This has a value of 0 indicate the format specified in the Standard of IEEE 802.1s. By default, the value is 0')
hwMstpAdminRegionName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpAdminRegionName.setStatus('current')
if mibBuilder.loadTexts: hwMstpAdminRegionName.setDescription('This MSTP administrative region name. It changes to hwMstpOperRegionName when user use the activing command to active the configuration of the region.')
hwMstpAdminRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpAdminRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: hwMstpAdminRevisionLevel.setDescription('This MSTP administrative revision level. It changes to hwMstpOperRevisionLevel when user use the activing command to active the configuration of the region. By default, the value is 0.')
hwMstpOperFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpOperFormatSelector.setStatus('current')
if mibBuilder.loadTexts: hwMstpOperFormatSelector.setDescription('The operative Configuration Identifier Format Selector in use by the Bridge. This has a value of 0 indicate the format specified in the Standard of IEEE 802.1s. By default, the value is 0.')
hwMstpOperRegionName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpOperRegionName.setStatus('current')
if mibBuilder.loadTexts: hwMstpOperRegionName.setDescription('This MSTP operative region name. It can be used to determine whether the region is the same region with the mapping between VLAN and instance and hwMstpOperRevisionLevel.')
hwMstpOperRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpOperRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: hwMstpOperRevisionLevel.setDescription('This MSTP operative revision level. It can be used to determine whether the region is the same region with the mapping between VLAN and instance and hwMstpOperRegionName. By default, the value is 0')
hwMstpRegionConfActive = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpRegionConfActive.setStatus('current')
if mibBuilder.loadTexts: hwMstpRegionConfActive.setDescription('Active the region configuration. Generally, the value of the hwMstpRegionConfActive is disable, but the value will be set as enable if Net Manager want to active the configure of the region in the bridge. And then all manager configuration will change to operable configuration. The value of hwMstpRegionConfActive is only disable when it is read. It is only enable when it is set. ')
hwMstpDefaultVlanAllo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpDefaultVlanAllo.setStatus('current')
if mibBuilder.loadTexts: hwMstpDefaultVlanAllo.setDescription('Set default configuration about VLAN allocation and all VLANs are mapped to CIST. The value of hwMstpDefaultVlanAllo is only unused(65535) when it is read. It is only enable(1) when it is set.')
hwMstpDefaultRegionName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("reset", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpDefaultRegionName.setStatus('current')
if mibBuilder.loadTexts: hwMstpDefaultRegionName.setDescription('Set default region name. The value of hwMstpDefaultRegionName is only unused(65535) when it is read. It is only reset(1) when it is set.')
hwMstpPathCostStandard = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d-1998", 1), ("dot1t", 2), ("legacy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpPathCostStandard.setStatus('current')
if mibBuilder.loadTexts: hwMstpPathCostStandard.setDescription('Path cost standard of the bridge. Value dot1d-1998 is IEEE 802.1d standard in 1998, value dot1t is IEEE 802.1t standard, and value legacy is a private legacy standard. The default path cost standard is 2(IEEE 802.1t standard).')
hwMstpVIDAllocationTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 18), )
if mibBuilder.loadTexts: hwMstpVIDAllocationTable.setStatus('current')
if mibBuilder.loadTexts: hwMstpVIDAllocationTable.setDescription('The table includes the information of the VLAN with relation to the instance of MSTP.')
hwMstpVIDAllocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 18, 1), ).setIndexNames((0, "HUAWEI-MSTP-MIB", "hwMstpVID"))
if mibBuilder.loadTexts: hwMstpVIDAllocationEntry.setStatus('current')
if mibBuilder.loadTexts: hwMstpVIDAllocationEntry.setDescription('The table includes the information of the VLAN with relation to the instance of MSTP. The index of the table is vlanid. Default, the VLAN is in the CIST.')
hwMstpVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hwMstpVID.setStatus('current')
if mibBuilder.loadTexts: hwMstpVID.setDescription('VLAN Identifier.')
hwMstpAdminMstID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpAdminMstID.setStatus('current')
if mibBuilder.loadTexts: hwMstpAdminMstID.setDescription("Administrative Multiple spanning-tree instance Identifier. The relation between VLAN and Multiple spanning-tree instance is set by operation in the region, but it isn't effective if the configuration isn't actived. The scope of instance identifier is different, some versions are 0 to 48.")
hwMstpOperMstID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpOperMstID.setStatus('current')
if mibBuilder.loadTexts: hwMstpOperMstID.setDescription('Operative Multiple spanning-tree instance Identifier. The relation between VLAN and Multiple spanning-tree instance is effective in the bridge. The scope of instance identifier is different, some versions are 0 to 48.')
hwMstpInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19), )
if mibBuilder.loadTexts: hwMstpInstanceTable.setStatus('current')
if mibBuilder.loadTexts: hwMstpInstanceTable.setDescription('The table includes the information of the instance.')
hwMstpInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1), ).setIndexNames((0, "HUAWEI-MSTP-MIB", "hwMstpInstanceID"))
if mibBuilder.loadTexts: hwMstpInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: hwMstpInstanceEntry.setDescription('The table includes the information of the instance. The index of the table is Multiple spanning-tree instance Identifier.')
hwMstpInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwMstpInstanceID.setStatus('current')
if mibBuilder.loadTexts: hwMstpInstanceID.setDescription('Multiple spanning-tree instance Identifier. The scope of instance identifier is different, some versions are 0 to 48.')
hwMstpiBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiBridgeID.setStatus('current')
if mibBuilder.loadTexts: hwMstpiBridgeID.setDescription('The Bridge Identifier for the spanning tree instance identified by MSTID.')
hwMstpiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpiBridgePriority.setStatus('current')
if mibBuilder.loadTexts: hwMstpiBridgePriority.setDescription('The Bridge Priority for the spanning tree instance identified by MSTID. Step of 4096.For example, we can set the Priority of the bridge such as 0, 4096, 8192 etc. It can be used to determined whether the bridge is the root of the spanning tree.')
hwMstpiDesignedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiDesignedRoot.setStatus('current')
if mibBuilder.loadTexts: hwMstpiDesignedRoot.setDescription('The Bridge Identifier of the Root Bridge for the spanning tree instance identified by MSTID.')
hwMstpiRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiRootPathCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpiRootPathCost.setDescription('The path cost from the transmitting Bridge to the Root Bridge for the spanning tree instance identified by MSTID.')
hwMstpiRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiRootPort.setStatus('current')
if mibBuilder.loadTexts: hwMstpiRootPort.setDescription('The root port for the spanning tree instance identified by the MSTID.')
hwMstpiRootType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("secondary", 1), ("primary", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpiRootType.setStatus('current')
if mibBuilder.loadTexts: hwMstpiRootType.setDescription('Config this Bridge as a primary root or secondary root / cancel the root for this spanning tree instance identified by MSTID. The current value of the hwMstpiRootType is the value that was set recently.')
hwMstpiRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiRemainingHops.setStatus('current')
if mibBuilder.loadTexts: hwMstpiRemainingHops.setDescription('The remaining hops of the spanning tree instance identified by MSTID.')
hwMstpiAdminMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpiAdminMappedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwMstpiAdminMappedVlanListLow.setDescription(' The lower part of administrative VLAN list mapped to the spanning tree instance identified by MSTID.')
hwMstpiAdminMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpiAdminMappedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwMstpiAdminMappedVlanListHigh.setDescription(' The higher part of administrative VLAN list mapped to the spanning tree instance identified by MSTID.')
hwMstpiOperMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiOperMappedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwMstpiOperMappedVlanListLow.setDescription(' The lower part of operative VLAN list mapped to the spanning tree instance identified by MSTID.')
hwMstpiOperMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiOperMappedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwMstpiOperMappedVlanListHigh.setDescription(' The higher part of operative VLAN list mapped to the spanning tree instance identified by MSTID.')
hwMstpiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 19, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMstpiRowStatus.setDescription("To band MSTI and VLAN List. Operation of CreateAndGo can be used to create a new instance, and operation of Destroy be used to destroy an existent instance. But these operation won't be effective if they are not actived by executing command of active region-configuration or setting mib node of hwMstpRegionConfActive.")
hwMstpPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20), )
if mibBuilder.loadTexts: hwMstpPortTable.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortTable.setDescription('The table includes the information of the port of the multiple spanning tree instance. ')
hwMstpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1), ).setIndexNames((0, "HUAWEI-MSTP-MIB", "hwMstpInstanceID"), (0, "HUAWEI-MSTP-MIB", "hwMstpiPortIndex"))
if mibBuilder.loadTexts: hwMstpPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortEntry.setDescription('The table includes the information of the port of the multiple spanning tree instance. The index of the table is the aggregation of multiple spanning tree instance identifier and port index. ')
hwMstpiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMstpiPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortIndex.setDescription('The index of the bridge port.')
hwMstpiState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiState.setStatus('current')
if mibBuilder.loadTexts: hwMstpiState.setDescription('The current state of the port. It must be disabled, discarding, learning or forwarding. ')
hwMstpiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiPortPriority.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) four bits of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of mstiPortIndex. And step of 16. It is the priority of the port in the multiple spanning tree instance, and it can be used to determine the role of the port in the multiple spanning tree.')
hwMstpiPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiPathCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPathCost.setDescription('the path cost of paths with which the package passes the port. The range of path cost is 1..65535 for 802.1d standard, is 1..200000000 for 802.1t standard, and is 1..200000 for the legacy standard. ')
hwMstpiDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: hwMstpiDesignatedRoot.setDescription('The Bridge Identifier of the Root Bridge for the port of the Spanning Tree instance identified by the MSTID')
hwMstpiDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpiDesignatedCost.setDescription('The path cost of the designated port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge BPDUs.')
hwMstpiDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: hwMstpiDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
hwMstpiDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: hwMstpiDesignatedPort.setDescription("The port Identifier of the port on the Designated Bridge for this port's segment.")
hwMstpiStpPortEdgeport = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("undo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiStpPortEdgeport.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpPortEdgeport.setDescription(" Whether the port fast is enabled. By default, there is no configuration on the port. When the port is the edge port, it can change to forwarding state . We can set the value. Disable indicates that we make the port not to be a edge port. Enable indicates that we make the port to be a edge port. The port's edge port state is same in all instance of MSTP. When set the value, the hwMstpInstanceID must be 0.")
hwMstpiStpPortPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiStpPortPointToPoint.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpPortPointToPoint.setDescription(" Whether the port connects the point to point link. If user set the port as a point to point port, the port is a point to point port in all instance of the MSTP. If user set the port as a point to point port but the port isn't, the mstp may import temporary loop. So user can use the default. When set the value, the hwMstpInstanceID must be 0.")
hwMstpiStpMcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiStpMcheck.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpMcheck.setDescription(' When root interface is changed from STP mode to MSTP mode, the appointed interface can not switch to MSTP mode automatically. At the time, you need switch to MSTP mode with hand by set Mcheck value to enable(1). The value of hwMstpiStpMcheck is unused(65535) when it is read.The value of hwMstpiStpMcheck must be enable(1) when it is set. When set the value, the hwMstpInstanceID must be 0.')
hwMstpiStpTransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(147)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiStpTransLimit.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpTransLimit.setDescription('The value is used to set BPDU maximum transmission rate of the port . When the value is set, the hwMstpInstanceID must be 0. If value is set 0, the transmit limit of the port is equal to the hwMstpTransmitLimitDefault value.')
hwMstpiStpRXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiStpRXStpBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpRXStpBPDU.setDescription('The number of received Config BPDU. Effective in CIST.')
hwMstpiStpTXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiStpTXStpBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpTXStpBPDU.setDescription('The number of transmitted Config BPDU. Effective in CIST.')
hwMstpiStpRXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiStpRXTCNBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpRXTCNBPDU.setDescription('The number of received TCN BPDU. Effective in CIST.')
hwMstpiStpTXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiStpTXTCNBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpTXTCNBPDU.setDescription('The number of transmitted TCN BPDU. Effective in CIST.')
hwMstpiStpRXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiStpRXRSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpRXRSTPBPDU.setDescription('The number of received RST BPDU. Effective in CIST.')
hwMstpiStpTXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiStpTXRSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpTXRSTPBPDU.setDescription('The number of transmitted RST BPDU. Effective in CIST.')
hwMstpiStpRXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiStpRXMSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpRXMSTPBPDU.setDescription('The number of received MST BPDU. Effective in CIST.')
hwMstpiStpTXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiStpTXMSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpTXMSTPBPDU.setDescription('The number of transmitted MST BPDU. Effective in CIST.')
hwMstpiStpClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiStpClearStatistics.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpClearStatistics.setDescription('Clear the spanning tree statistic. Effective in CIST. The value of hwMstpiStpClearStatistics is unused(65535) when it is read. The value of hwMstpiStpClearStatistics must be clear(1) when it is set.')
hwMstpiStpDefaultPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("reset", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiStpDefaultPortCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpDefaultPortCost.setDescription('Set default port path cost. The value of hwMstpiStpDefaultPortCost is unused(65535) when it is read. The value of hwMstpiStpDefaultPortCost must be reset(1) when it is set.')
hwMstpiStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 23), HwMSTPEnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiStpStatus.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpStatus.setDescription('Whether the spanning tree protocol is enabled on this port. Effective in CIST. When set the value, the hwMstpInstanceID must be 0.')
hwMstpiPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 24), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiPortRootGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortRootGuard.setDescription('Whether the root guard is enabled. The function is to prevent the port from receiving the BPDU , the priority of which is above the priority of the port. When set the value, the hwMstpInstanceID must be 0.')
hwMstpiPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 25), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiPortLoopGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortLoopGuard.setDescription('Whether the loop protection is enabled. When set the value, the hwMstpInstanceID must be 0.')
hwMstpPortCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("dotls", 2), ("legacy", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpPortCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortCompliance.setDescription('The value of this object identifies the protocol format of the MSTP packet sent and received on the port. The protocol format can be one of the following: 1: auto (the self-adaptive protocol format) 2: dotls (the standard IEEE 802.1s format) 3: legacy (the private protocol format) By default, the protocol format of the MSTP packet is self-adaptive, that is, auto(1).')
hwMstpConfigDigestSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 27), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpConfigDigestSnooping.setStatus('current')
if mibBuilder.loadTexts: hwMstpConfigDigestSnooping.setDescription('This object indicates whether the digest snooping function is enabled on the port: 1: enabled 2: disabled By default, the function is not enabled. In other words, the default value is disabled(2).')
hwMstpNoAgreementCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 30), HwMSTPEnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpNoAgreementCheck.setStatus('current')
if mibBuilder.loadTexts: hwMstpNoAgreementCheck.setDescription('Whether enhance agreement is enabled. When Huawei datacomm devices running the VRP are internetworking with non-Huawei devices, you need to enable this on Huawei devices to configure the mode of the fast transition mechanism the same as that on non-Huawei devices.')
hwMstpPortTCNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 31), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpPortTCNotify.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortTCNotify.setDescription('The main interface notifies its sub-interfaces to update MAC entries and ARP entries after receiving a TC message. This prevents services from being interrupted.')
hwMstpiStpPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("undo", 3))).clone('undo')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpiStpPortBpduFilter.setStatus('current')
if mibBuilder.loadTexts: hwMstpiStpPortBpduFilter.setDescription(' Whether the port BPDU-filter is enabled. By default, there is no configuration on the port. The port will not send or receive BPDUs.')
hwMstpiPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 20, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpiPortRole.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortRole.setDescription('Indicates the port role on a particular instance.')
hwMstpSnooping = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpSnooping.setStatus('current')
if mibBuilder.loadTexts: hwMstpSnooping.setDescription("when the device's interface receive TCN, the servers is normal in device where MSTP is disable. By default, the value is disabled.")
hwMstpAccessoryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 22), )
if mibBuilder.loadTexts: hwMstpAccessoryTable.setStatus('current')
if mibBuilder.loadTexts: hwMstpAccessoryTable.setDescription('The table of MSTP Accessory Information.')
hwMstpAccessoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 22, 1), ).setIndexNames((0, "HUAWEI-MSTP-MIB", "hwMstpAccessoryIndex"))
if mibBuilder.loadTexts: hwMstpAccessoryEntry.setStatus('current')
if mibBuilder.loadTexts: hwMstpAccessoryEntry.setDescription('The table entry of MSTP Accessory Information.')
hwMstpAccessoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwMstpAccessoryIndex.setStatus('current')
if mibBuilder.loadTexts: hwMstpAccessoryIndex.setDescription('The index of the Accessory Commands of MSTP.')
hwMstpBackupReplyAgreement = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpBackupReplyAgreement.setStatus('current')
if mibBuilder.loadTexts: hwMstpBackupReplyAgreement.setDescription('When the port of device, which played the backup or alternate role, receives the BPDU message with high priority, and the proposal flag of this message was set. The BPDU message can be send from this port immediately, the agreement flag was set of this BPDU message.')
hwMstpStpNoAgreementCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpStpNoAgreementCheck.setStatus('current')
if mibBuilder.loadTexts: hwMstpStpNoAgreementCheck.setDescription('when the port is root, calculating allsyned without check syned flag of root.')
hwMstpProTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23), )
if mibBuilder.loadTexts: hwMstpProTable.setStatus('current')
if mibBuilder.loadTexts: hwMstpProTable.setDescription('The MSTP process information table.')
hwMstpProEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1), ).setIndexNames((0, "HUAWEI-MSTP-MIB", "hwMstpProID"))
if mibBuilder.loadTexts: hwMstpProEntry.setStatus('current')
if mibBuilder.loadTexts: hwMstpProEntry.setDescription('Entry of the MSTP process information table.')
hwMstpProID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 288)))
if mibBuilder.loadTexts: hwMstpProID.setStatus('current')
if mibBuilder.loadTexts: hwMstpProID.setDescription('MSTP process identifier.')
hwMstpProStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 4), HwMSTPEnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProStpState.setStatus('current')
if mibBuilder.loadTexts: hwMstpProStpState.setDescription('Whether Spannting-Tree is enabled or not on a MSTP process.')
hwMstpProPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setUnits('4096').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProPriority.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPriority.setDescription('The priority for the MSTP process spanning tree, step of 4096. For example, we can set the Priority of the bridge such as 0, 4096, 8192 etc. It can be used to determined whether the process is the root of the whole spanning tree. The default value is 32768.')
hwMstpProRootType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("secondary", 1), ("primary", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProRootType.setStatus('current')
if mibBuilder.loadTexts: hwMstpProRootType.setDescription('Config this MSTP process as a primary root, secondary root or cancel the root for spanning tree. The default value is not a primary or secondary root.')
hwMstpProForceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProForceVersion.setStatus('current')
if mibBuilder.loadTexts: hwMstpProForceVersion.setDescription('Mode of Spanning-Tree portocol on a MSTP process.')
hwMstpProBpduGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 8), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProBpduGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpProBpduGuard.setDescription('Whether BPDU portection is enabled or not on a MSTP process.')
hwMstpProDiameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 7), ValueRangeConstraint(65535, 65535), )).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProDiameter.setStatus('current')
if mibBuilder.loadTexts: hwMstpProDiameter.setDescription('The Spanning-Tree diameter of a MSTP process, the default value is 7. The value of hwMstpProDiameter is only unused(65535) when it is read.')
hwMstpProConvergeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("normal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProConvergeMode.setStatus('current')
if mibBuilder.loadTexts: hwMstpProConvergeMode.setDescription('Spanning-Tree converge mode. When the mode is fast, MAC entries and ARP entries will be deleted. When the mode is normal, the entries will be aged.')
hwMstpProMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProMaxHops.setStatus('current')
if mibBuilder.loadTexts: hwMstpProMaxHops.setDescription('Maxhops of a MSTP process, the default value is 20.')
hwMstpProMCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enabled", 1), ("unused", 65535))).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProMCheck.setStatus('current')
if mibBuilder.loadTexts: hwMstpProMCheck.setDescription('Whether to do Mcheck function on a MSTP process.')
hwMstpProPathCostStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d-1998", 1), ("dot1t", 2), ("legacy", 3))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProPathCostStandard.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPathCostStandard.setDescription('Path cost standard of a MSTP process, the fault value is dot1t.')
hwMstpProHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(200)).setUnits('100').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProHelloTime.setStatus('current')
if mibBuilder.loadTexts: hwMstpProHelloTime.setDescription('Hello time of a MSTP process, the default value is 200 centiseconds.')
hwMstpProFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setUnits('100').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProFwdDelay.setStatus('current')
if mibBuilder.loadTexts: hwMstpProFwdDelay.setDescription('Forward delay of a MSTP process, the default value is 1500 centiseconds.')
hwMstpProMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setUnits('100').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProMaxAge.setStatus('current')
if mibBuilder.loadTexts: hwMstpProMaxAge.setDescription('Max age of a MSTP process, the default value is 2000 centiseconds.')
hwMstpProTimerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProTimerFactor.setStatus('current')
if mibBuilder.loadTexts: hwMstpProTimerFactor.setDescription('Timer factor, which is used in loop protection, the default value is 3.')
hwMstpProTCNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProTCNotify.setStatus('current')
if mibBuilder.loadTexts: hwMstpProTCNotify.setDescription('The current MSTP process notifies the specified STP instance in MSTP process 0 to update MAC entries and ARP entries after receiving a TC message. This prevents services from being interrupted.')
hwMstpProNoLinkSharePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProNoLinkSharePortList.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNoLinkSharePortList.setDescription('The port list participates in the status calculation of a specified MSTP process witch no-link-share method.')
hwMstpProLinkSharePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProLinkSharePortList.setStatus('current')
if mibBuilder.loadTexts: hwMstpProLinkSharePortList.setDescription('The port list participates in the status calculation of a specified MSTP process witch link-share method.')
hwMstpProTcGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 21), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProTcGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpProTcGuard.setDescription('Whether the TC protection function is enabled on the MSTP process. If the function is enabled, the TC message exceeded threshold will be defered to deal with at the end of TC protection time.')
hwMstpProTcGuardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProTcGuardThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMstpProTcGuardThreshold.setDescription('The threshold of the TC protection on the MSTP process. It decided the maximum TC messages can be dealt with in a TC protection time.')
hwMstpProTcNotifyProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 23), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProTcNotifyProcess.setStatus('current')
if mibBuilder.loadTexts: hwMstpProTcNotifyProcess.setDescription('Whether the current MSTP process notifies MSTP process 0 to update MAC entries and ARP entries after receiving a TC message.')
hwMstpProRegionConfActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 24), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProRegionConfActive.setStatus('current')
if mibBuilder.loadTexts: hwMstpProRegionConfActive.setDescription('Active the region configuration. Generally, the value of the hwMstpProRegionConfActive is disable, but the value will be set as enable if Net Manager want to active the configure of the region in the bridge. And then all manager configuration will change to operable configuration. The value of hwMstpRegionConfActive is only disable when it is read. It is only enable when it is set.')
hwMstpProLinkShareGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 25), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProLinkShareGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpProLinkShareGuard.setDescription('Whether the Link-share Guard function is enabled on the MSTP process. If the function is enabled, the root Guard function will also work on port in all instance besides instance 0, when the link between the ports either of which is in Link_share mode broken down.')
hwMstpConfigDegist = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpConfigDegist.setStatus('current')
if mibBuilder.loadTexts: hwMstpConfigDegist.setDescription('This MSTP region-configuration digest. It can be used to determine whether the region is the same region with another one.')
hwMstpProRegionConfShare = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 27), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProRegionConfShare.setStatus('current')
if mibBuilder.loadTexts: hwMstpProRegionConfShare.setDescription('Suggesting that whether all the process will share the same Region-config with process 0. If the function is enable, all the existing process will share the same Region-config with process 0. ')
hwMstpProRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMstpProRowStatus.setDescription('MSTP process table rowstatus.')
hwMstpProTcGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 23, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProTcGuardInterval.setStatus('current')
if mibBuilder.loadTexts: hwMstpProTcGuardInterval.setDescription('The value is the tc-protection interval time. If the value is set 0, the tc guard interval value is euqal to the hello time.')
hwMstpPortBindTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24), )
if mibBuilder.loadTexts: hwMstpPortBindTable.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortBindTable.setDescription('The port bind table.')
hwMstpPortBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1), ).setIndexNames((0, "HUAWEI-MSTP-MIB", "hwMstpProID"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortId1"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortId2"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortId3"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortId4"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortIdFlag"))
if mibBuilder.loadTexts: hwMstpPortBindEntry.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortBindEntry.setDescription('The port bind entry.')
hwMstpPortId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwMstpPortId1.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortId1.setDescription('The port external port index.')
hwMstpPortId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwMstpPortId2.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortId2.setDescription('The port external port index.')
hwMstpPortId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwMstpPortId3.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortId3.setDescription('The port external port index.')
hwMstpPortId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwMstpPortId4.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortId4.setDescription('The port external port index.')
hwMstpPortIdFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwMstpPortIdFlag.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortIdFlag.setDescription('The port type.')
hwMstpPortVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpPortVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortVlanListLow.setDescription('The VLAN list of port.')
hwMstpPortVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpPortVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortVlanListHigh.setDescription('The VLAN list of port.')
hwMstpProNewPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("nolinkshare", 2), ("linkshare", 3), ("nolinksharewithvlan", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProNewPortType.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortType.setDescription('An interface to participate in the status calculation of link-share , no-link-share or no-link-share with VLAN Spanning Tree processes.')
hwMstpProNewPortBpduVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProNewPortBpduVlan.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortBpduVlan.setDescription('The VLAN of port is BPDU VLAN.')
hwMstpPortBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 24, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpPortBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortBindRowStatus.setDescription('MSTP port binding table rowstatus.')
hwMstpProPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25), )
if mibBuilder.loadTexts: hwMstpProPortTable.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortTable.setDescription('The table includes the information of the port of the MSTP process. ')
hwMstpProPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1), ).setIndexNames((0, "HUAWEI-MSTP-MIB", "hwMstpProID"), (0, "HUAWEI-MSTP-MIB", "hwMstpInstanceID"), (0, "HUAWEI-MSTP-MIB", "hwMstpiPortIndex"))
if mibBuilder.loadTexts: hwMstpProPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortEntry.setDescription('The entry of the MSTP process port information table. ')
hwMstpProPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortState.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortState.setDescription('The current state of the port in MSTP process. It must be disabled, discarding, learning or forwarding. ')
hwMstpProPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortPriority.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) four bits of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of hwMstpiPortIndex. And step of 16. It is the priority of the port in the MSTP process, and it can be used to determine the role of the port in the MSTP process Spanning Tree. ')
hwMstpProPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortPathCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortPathCost.setDescription('The path cost of paths with which the package passes the port. The range of path cost is 1..65535 for 802.1d standard, is 1..200000000 for 802.1t standard, and is 1..200000 for the legacy standard. ')
hwMstpProPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortDesignatedRoot.setDescription('The Bridge Identifier of the Root Bridge for the port of the MSTP process Spanning Tree.')
hwMstpProPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortDesignatedCost.setDescription('The path cost of the designated port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge BPDUs.')
hwMstpProPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
hwMstpProPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
hwMstpProPortStpEdgeport = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 9), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortStpEdgeport.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpEdgeport.setDescription(' Whether the port fast is enabled in the MSTP process. When the port is the edge port, it can change to forwarding state immediately. ')
hwMstpProPortStpPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortStpPointToPoint.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpPointToPoint.setDescription(" Whether the port connects the point to point link. If user set the port as a point to point port, the port is a point to point port in the MSTP process. If user set the port as a point to point port but the port isn't, the mstp may import temporary loop. So user can use the default. ")
hwMstpProPortStpMcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortStpMcheck.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpMcheck.setDescription(' When root interface is changed from STP mode to RSTP or MSTP mode, the appointed interface can not switch to RSTP or MSTP mode automatically. At the time, you need switch back with hand by set Mcheck value to enable(1). The value unused(65535) when it is read. ')
hwMstpProPortStpTransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortStpTransLimit.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpTransLimit.setDescription('The value used by the port transmit state machine to limit the maximum transmission rate. ')
hwMstpProPortStpRXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortStpRXStpBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpRXStpBPDU.setDescription('The number of received Config BPDUs. ')
hwMstpProPortStpTXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortStpTXStpBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpTXStpBPDU.setDescription('The number of transmitted Config BPDUs. ')
hwMstpProPortStpRXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortStpRXTCNBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpRXTCNBPDU.setDescription('The number of received TCN BPDUs. ')
hwMstpProPortStpTXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortStpTXTCNBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpTXTCNBPDU.setDescription('The number of transmitted TCN BPDUs. ')
hwMstpProPortStpRXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortStpRXRSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpRXRSTPBPDU.setDescription('The number of received RST BPDUs. ')
hwMstpProPortStpTXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortStpTXRSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpTXRSTPBPDU.setDescription('The number of transmitted RST BPDUs. ')
hwMstpProPortStpRXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortStpRXMSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpRXMSTPBPDU.setDescription('The number of received MST BPDUs. ')
hwMstpProPortStpTXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortStpTXMSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpTXMSTPBPDU.setDescription('The number of transmitted MST BPDUs. ')
hwMstpProPortStpClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortStpClearStatistics.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpClearStatistics.setDescription('Clear the Spanning Tree statistics in specified MSTP process. The value is unused(65535) when it is read. The value must be clear(1) when it is set.')
hwMstpProPortStpDefaultPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("reset", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortStpDefaultPortCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpDefaultPortCost.setDescription('Set default port path cost. ')
hwMstpProPortStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 23), HwMSTPEnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortStpStatus.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStpStatus.setDescription('Whether the Spanning Tree Protocol is enabled on this port. ')
hwMstpProPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 24), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortRootGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortRootGuard.setDescription('Whether the root guard is enabled. The function is to prevent the port from receiving the BPDUs, the priority of which is above the priority of the port.')
hwMstpProPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 25), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortLoopGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortLoopGuard.setDescription('Whether the loop protection is enabled. ')
hwMstpProPortCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("dotls", 2), ("legacy", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortCompliance.setDescription('The value of this object identifies the protocol format of the MSTP packet sent and received on the port. The protocol format can be one of the following: 1: auto (the self-adaptive protocol format) 2: dotls (the standard IEEE 802.1s format) 3: legacy (the private protocol format) By default, the protocol format of the MSTP packet is self-adaptive, that is, auto(1).')
hwMstpProPortConfigDigestSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 27), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortConfigDigestSnooping.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortConfigDigestSnooping.setDescription('This object indicates whether the digest snooping function is enabled on the port: 1: enabled 2: disabled By default, the function is not enabled. In other words, the default value is disabled(2).')
hwMstpProPortNoAgreementCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 30), HwMSTPEnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortNoAgreementCheck.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortNoAgreementCheck.setDescription('Whether enhance agreement is enabled. When Huawei datacomm devices running the VRP are internetworking with non-Huawei devices, you need to enable this on Huawei devices to configure the mode of the fast transition mechanism the same as that on non-Huawei devices.')
hwMstpProPortTCNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 31), HwMSTPEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProPortTCNotify.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortTCNotify.setDescription('The main interface notifies its sub-interfaces to update MAC entries and ARP entries after receiving a TC message. This prevents services from being interrupted.')
hwMstpProPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 25, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("nolinkshare", 1), ("linkshare", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProPortType.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortType.setDescription(' An interface to participate in the status calculation of link-share or no-link-share Spanning Tree processes.')
hwMstpTcGuard = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 26), HwMSTPEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpTcGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpTcGuard.setDescription('Whether the Bridge TC Guard function is enabled. If the function is enabled, the TC message in each instance exceeded threshold will be defered to deal with at the end of TC protection time. By default, the function is disabled.')
hwMstpTcGuardThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpTcGuardThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMstpTcGuardThreshold.setDescription('The threshold of the Bridge TC Guard. It decided the maximum TC message in each instance can be dealt with in a TC protection time.')
hwMstpProInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28), )
if mibBuilder.loadTexts: hwMstpProInstanceTable.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceTable.setDescription('')
hwMstpProInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1), ).setIndexNames((0, "HUAWEI-MSTP-MIB", "hwMstpProID"), (0, "HUAWEI-MSTP-MIB", "hwMstpInstanceID"))
if mibBuilder.loadTexts: hwMstpProInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceEntry.setDescription('The entry of the MSTP process instance information table.')
hwMstpProInstanceBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 1), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProInstanceBridgeID.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceBridgeID.setDescription('The Bridge Identifier for the spanning tree instance identified by MSTID.')
hwMstpProInstanceBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProInstanceBridgePriority.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceBridgePriority.setDescription('The Bridge Priority for the spanning tree instance identified by MSTID. Step of 4096.For example, we can set the Priority of the bridge such as 0, 4096, 8192 etc. It can be used to determined whether the bridge is the root of the spanning tree.')
hwMstpProInstanceDesignedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProInstanceDesignedRoot.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceDesignedRoot.setDescription('The Bridge Identifier of the Root Bridge for the spanning tree instance identified by MSTID.')
hwMstpProInstanceRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProInstanceRootPathCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceRootPathCost.setDescription('The path cost from the transmitting Bridge to the Root Bridge for the spanning tree instance identified by MSTID.')
hwMstpProInstanceRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProInstanceRootPort.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceRootPort.setDescription('The root port for the spanning tree instance identified by the MSTID.')
hwMstpProInstanceRootType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("secondary", 1), ("primary", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProInstanceRootType.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceRootType.setDescription('Config this Bridge as a primary root or secondary root / cancel the root for this spanning tree instance identified by MSTID. The current value of the hwMstpiRootType is the value that was set recently.')
hwMstpProInstanceRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProInstanceRemainingHops.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceRemainingHops.setDescription('The remaining hops of the spanning tree instance identified by MSTID.')
hwMstpProInstanceAdminMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProInstanceAdminMappedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceAdminMappedVlanListLow.setDescription(' The lower part of administrative VLAN list mapped to the spanning tree instance identified by MSTID.')
hwMstpProInstanceAdminMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProInstanceAdminMappedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceAdminMappedVlanListHigh.setDescription(' The higher part of administrative VLAN list mapped to the spanning tree instance identified by MSTID.')
hwMstpProInstanceOperMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProInstanceOperMappedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceOperMappedVlanListLow.setDescription(' The lower part of operative VLAN list mapped to the spanning tree instance identified by MSTID.')
hwMstpProInstanceOperMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProInstanceOperMappedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceOperMappedVlanListHigh.setDescription(' The higher part of operative VLAN list mapped to the spanning tree instance identified by MSTID.')
hwMstpProInstanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 28, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMstpProInstanceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceRowStatus.setDescription("To band MSTI and VLAN List. Operation of CreateAndGo can be used to create a new instance, and operation of Destroy be used to destroy an existent instance. But these operation won't be effective if they are not actived by executing command of active region-configuration or setting mib node of hwMstpRegionConfActive.")
hwMstpProNewPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29), )
if mibBuilder.loadTexts: hwMstpProNewPortTable.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortTable.setDescription('The table includes the information of the port of the MSTP process. ')
hwMstpProNewPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1), ).setIndexNames((0, "HUAWEI-MSTP-MIB", "hwMstpProID"), (0, "HUAWEI-MSTP-MIB", "hwMstpInstanceID"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortId1"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortId2"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortId3"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortId4"), (0, "HUAWEI-MSTP-MIB", "hwMstpPortIdFlag"))
if mibBuilder.loadTexts: hwMstpProNewPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortEntry.setDescription('The entry of the MSTP process port information table. ')
hwMstpProNewPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortState.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortState.setDescription('The current state of the port in MSTP process. It must be disabled, discarding, learning or forwarding. ')
hwMstpProNewPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortPriority.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) four bits of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of hwMstpiPortIndex. And step of 16. It is the priority of the port in the MSTP process, and it can be used to determine the role of the port in the MSTP process Spanning Tree. ')
hwMstpProNewPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortPathCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortPathCost.setDescription('The path cost of paths with which the package passes the port. The range of path cost is 1..65535 for 802.1d standard, is 1..200000000 for 802.1t standard, and is 1..200000 for the legacy standard. ')
hwMstpProNewPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortDesignatedRoot.setDescription('The Bridge Identifier of the Root Bridge for the port of the MSTP process Spanning Tree.')
hwMstpProNewPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortDesignatedCost.setDescription('The path cost of the designated port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge BPDUs.')
hwMstpProNewPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
hwMstpProNewPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortDesignatedPort.setDescription("The port identifier of the port on the Designated Bridge for this port's segment.")
hwMstpProNewPortStpEdgeport = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("undo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortStpEdgeport.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpEdgeport.setDescription(' Whether the port fast is enabled in the MSTP process. By default, there is no configuration on the port. When the port is the edge port, it can change to forwarding state immediately. ')
hwMstpProNewPortStpPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortStpPointToPoint.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpPointToPoint.setDescription(" Whether the port connects the point to point link. If user set the port as a point to point port, the port is a point to point port in the MSTP process. If user set the port as a point to point port but the port isn't, the mstp may import temporary loop. So user can use the default. ")
hwMstpProNewPortStpMcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortStpMcheck.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpMcheck.setDescription(' When root interface is changed from STP mode to RSTP or MSTP mode, the appointed interface can not switch to RSTP or MSTP mode automatically. At the time, you need switch back with hand by set Mcheck value to enable(1). The value unused(65535) when it is read. ')
hwMstpProNewPortStpTransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(147)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortStpTransLimit.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpTransLimit.setDescription('The value is used to set BPDU maximum transmission rate of the port. If value is set 0, the transmit limit of the port is equal to the wMstpTransmitLimitDefault value ')
hwMstpProNewPortStpRXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpRXStpBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpRXStpBPDU.setDescription('The number of received Config BPDUs. ')
hwMstpProNewPortStpTXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpTXStpBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpTXStpBPDU.setDescription('The number of transmitted Config BPDUs. ')
hwMstpProNewPortStpRXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpRXTCNBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpRXTCNBPDU.setDescription('The number of received TCN BPDUs. ')
hwMstpProNewPortStpTXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpTXTCNBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpTXTCNBPDU.setDescription('The number of transmitted TCN BPDUs. ')
hwMstpProNewPortStpRXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpRXRSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpRXRSTPBPDU.setDescription('The number of received RST BPDUs. ')
hwMstpProNewPortStpTXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpTXRSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpTXRSTPBPDU.setDescription('The number of transmitted RST BPDUs. ')
hwMstpProNewPortStpRXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpRXMSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpRXMSTPBPDU.setDescription('The number of received MST BPDUs. ')
hwMstpProNewPortStpTXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpTXMSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpTXMSTPBPDU.setDescription('The number of transmitted MST BPDUs. ')
hwMstpProNewPortStpClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortStpClearStatistics.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpClearStatistics.setDescription('Clear the Spanning Tree statistics in specified MSTP process. The value is unused(65535) when it is read. The value must be clear(1) when it is set.')
hwMstpProNewPortStpDefaultPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("reset", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortStpDefaultPortCost.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpDefaultPortCost.setDescription('Set default port path cost. ')
hwMstpProNewPortStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 22), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortStpStatus.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpStatus.setDescription('Whether the Spanning Tree Protocol is enabled on this port. ')
hwMstpProNewPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 23), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortRootGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortRootGuard.setDescription('Whether the root guard is enabled. The function is to prevent the port from receiving the BPDUs, the priority of which is above the priority of the port.')
hwMstpProNewPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 24), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortLoopGuard.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortLoopGuard.setDescription('Whether the loop protection is enabled. ')
hwMstpProNewPortCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("dotls", 2), ("legacy", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortCompliance.setDescription('The value of this object identifies the protocol format of the MSTP packet sent and received on the port. The protocol format can be one of the following: 1: auto (the self-adaptive protocol format) 2: dotls (the standard IEEE 802.1s format) 3: legacy (the private protocol format) By default, the protocol format of the MSTP packet is self-adaptive, that is, auto(1).')
hwMstpProNewPortConfigDigestSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 26), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortConfigDigestSnooping.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortConfigDigestSnooping.setDescription('This object indicates whether the digest snooping function is enabled on the port: 1: enabled 2: disabled By default, the function is not enabled. In other words, the default value is disabled(2).')
hwMstpProNewPortNoAgreementCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 27), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortNoAgreementCheck.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortNoAgreementCheck.setDescription('Whether enhance agreement is enabled. When Huawei datacomm devices running the VRP are internetworking with non-Huawei devices, you need to enable this on Huawei devices to configure the mode of the fast transition mechanism the same as that on non-Huawei devices.')
hwMstpProNewPortVplsSubinterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 28), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortVplsSubinterfaceEnable.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortVplsSubinterfaceEnable.setDescription('The main interface notifies its sub-interfaces to update MAC entries and ARP entries after receiving a TC message. This prevents services from being interrupted.')
hwMstpProNewPortBpduEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvst", 1), ("stp", 2))).clone('stp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortBpduEncapsulation.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortBpduEncapsulation.setDescription('The value of this object identifies the protocol format of the BPDU sent on the port. The protocol format can be one of the following: 1: pvst (the PVST format) 2: stp (the STP format) By default, the BPDU format of the MSTP packet is stp(2).')
hwMstpProNewPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("undo", 3))).clone('undo')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpProNewPortBpduFilter.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortBpduFilter.setDescription('Whether the port BPDU-filter is enabled. By default, there is no configuration on the port. The port will not send or receive BPDUs.')
hwMstpProNewPortStpRXTC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpRXTC.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpRXTC.setDescription('The number of TC BPDUs received by the port. ')
hwMstpProNewPortStpTXTC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortStpTXTC.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStpTXTC.setDescription('The number of TC BPDUs sent by the port. ')
hwMstpProNewPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 29, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMstpProNewPortRole.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortRole.setDescription('Indicates the port role on a particular instance.')
hwMstpEdgedPortDefault = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 30), HwMSTPEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpEdgedPortDefault.setStatus('current')
if mibBuilder.loadTexts: hwMstpEdgedPortDefault.setDescription('When the stp edged-port default is enabled. By default,the port enabled stp is edged-port .')
hwMstpBpduFilterPortDefault = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 31), HwMSTPEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpBpduFilterPortDefault.setStatus('current')
if mibBuilder.loadTexts: hwMstpBpduFilterPortDefault.setDescription('When the stp BPDU-filter default is enabled. By default,the stp BPDU filter function is enabled .')
hwMstpTransmitLimitDefault = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMstpTransmitLimitDefault.setStatus('current')
if mibBuilder.loadTexts: hwMstpTransmitLimitDefault.setDescription('The value is used to set BPDU maximum transmission rate of all port in the device.')
hwMstpTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2))
if mibBuilder.loadTexts: hwMstpTraps.setStatus('current')
if mibBuilder.loadTexts: hwMstpTraps.setDescription('Definition point for Mstp notifications.')
hwMstpiPortStateForwarding = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 1)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpInstanceID"), ("HUAWEI-MSTP-MIB", "hwMstpiPortIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpiPortStateForwarding.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortStateForwarding.setDescription('The SNMP trap that is generated when a port turns into forwarding state from other state.')
hwMstpiPortStateDiscarding = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 2)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpInstanceID"), ("HUAWEI-MSTP-MIB", "hwMstpiPortIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpiPortStateDiscarding.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortStateDiscarding.setDescription('The SNMP trap that is generated when a port turns into discarding state from forwarding state.')
hwMstpiBridgeLostRootPrimary = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 3)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpInstanceID"))
if mibBuilder.loadTexts: hwMstpiBridgeLostRootPrimary.setStatus('current')
if mibBuilder.loadTexts: hwMstpiBridgeLostRootPrimary.setDescription('The SNMP trap that is generated when the bridge is no longer the root bridge of the instance. Another switch with higher priority has already been the root bridge of the instance.')
hwMstpiPortRootGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 4)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpInstanceID"), ("HUAWEI-MSTP-MIB", "hwMstpiPortIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpiPortRootGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortRootGuarded.setDescription('The SNMP trap that is generated when a root-guard port receives a superior message on the relevant instance.')
hwMstpiPortBpduGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 5)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpiPortIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpiPortBpduGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortBpduGuarded.setDescription('The SNMP trap that is generated when an edged port of the BPDU-guard switch receives BPDU packets.')
hwMstpiPortLoopGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 6)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpInstanceID"), ("HUAWEI-MSTP-MIB", "hwMstpiPortIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpiPortLoopGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpiPortLoopGuarded.setDescription('The SNMP trap that is generated when an Alternate-Port or Root-Port is aged out.')
hwMstpiEdgePortChanged = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 7)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpiStpPortEdgeport"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpiEdgePortChanged.setStatus('current')
if mibBuilder.loadTexts: hwMstpiEdgePortChanged.setDescription('When the edged-port receives a BPDU packet, the edged-port attribute will be disabled. Then the SNMP trap is generated. ')
hwMstpProPortStateForwarding = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 8)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProPortState"))
if mibBuilder.loadTexts: hwMstpProPortStateForwarding.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStateForwarding.setDescription('The SNMP trap that is generated when a port turns into forwarding state from other state in the MSTP process.')
hwMstpProPortStateDiscarding = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 9)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProPortState"))
if mibBuilder.loadTexts: hwMstpProPortStateDiscarding.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortStateDiscarding.setDescription('The SNMP trap that is generated when a port turns into discarding state from forwarding state in the MSTP process.')
hwMstpProBridgeLostRootPrimary = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 10)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProPortState"))
if mibBuilder.loadTexts: hwMstpProBridgeLostRootPrimary.setStatus('current')
if mibBuilder.loadTexts: hwMstpProBridgeLostRootPrimary.setDescription('The SNMP trap that is generated when the bridge is no longer the root bridge of the MSTP process Spanning Tree. Another switch with higher priority has already been the root bridge.')
hwMstpProPortRootGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 11)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProPortState"))
if mibBuilder.loadTexts: hwMstpProPortRootGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortRootGuarded.setDescription('The SNMP trap that is generated when a root-guard port receives a superior message in the MSTP process.')
hwMstpProPortBpduGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 12)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProPortState"))
if mibBuilder.loadTexts: hwMstpProPortBpduGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortBpduGuarded.setDescription('The SNMP trap that is generated when an edged port of the BPDU-guard MSTP process receives BPDU packets.')
hwMstpProPortLoopGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 13)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProPortState"))
if mibBuilder.loadTexts: hwMstpProPortLoopGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortLoopGuarded.setDescription('The SNMP trap that is generated when an Alternate-Port or Root-Port is aged out in the MSTP process.')
hwMstpProEdgePortChanged = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 14)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProPortStpEdgeport"))
if mibBuilder.loadTexts: hwMstpProEdgePortChanged.setStatus('current')
if mibBuilder.loadTexts: hwMstpProEdgePortChanged.setDescription('When the edged-port receives a BPDU packet, the edged-port attribute will be disabled. Then the SNMP trap is generated. ')
hwMstpiTcGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 15)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpiBridgePriority"))
if mibBuilder.loadTexts: hwMstpiTcGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpiTcGuarded.setDescription("The SNMP trap that is generated when an MSTP instance receive TC BPDUs' number exceeds the threshold.")
hwMstpProTcGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 16)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProTcGuard"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceBridgePriority"))
if mibBuilder.loadTexts: hwMstpProTcGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpProTcGuarded.setDescription("The SNMP trap that is generated when an MSTP process receive TC BPDUs' number exceeds the threshold.")
hwMstpProRootChanged = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 17)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProInstanceRootPort"))
if mibBuilder.loadTexts: hwMstpProRootChanged.setStatus('current')
if mibBuilder.loadTexts: hwMstpProRootChanged.setDescription('The SNMP trap that is generated when the root bridge of an instance of a MSTP process changed')
hwMstpProNewPortStateForwarding = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 18)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProNewPortState"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpProNewPortStateForwarding.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStateForwarding.setDescription('Specify that the status of the port STP becomes Forwarding in MSTP process.')
hwMstpProNewPortStateDiscarding = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 19)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProNewPortState"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpProNewPortStateDiscarding.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortStateDiscarding.setDescription('Specify that the status of the port STP becomes Discarding in MSTP process.')
hwMstpProNewBridgeLostRootPrimary = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 20)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProInstanceRootType"))
if mibBuilder.loadTexts: hwMstpProNewBridgeLostRootPrimary.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewBridgeLostRootPrimary.setDescription('Specify that the switch loses the position of root bridge in MSTP process.')
hwMstpProNewPortRootGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 21)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProNewPortState"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpProNewPortRootGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortRootGuarded.setDescription('Specify that a designated port receives a BPDU packet with the priority higher than that of the root bridge when root bridge protection is enabled in MSTP process.')
hwMstpProNewPortBpduGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 22)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProNewPortState"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpProNewPortBpduGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortBpduGuarded.setDescription('Specify that the edge port receives the BPDU packets when BPDU protection was enabled in MSTP process.')
hwMstpProNewPortLoopGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 23)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProNewPortState"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpProNewPortLoopGuarded.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewPortLoopGuarded.setDescription('Specify that the root port has not received any BPDU packets for a long time when loop protection is enabled in MSTP process.')
hwMstpProNewEdgePortChanged = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 24)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProNewPortState"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpProNewEdgePortChanged.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNewEdgePortChanged.setDescription('Specify that the edge port is invalid because of receiving a BPDU packet.')
hwMstpProLoopbackDetected = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 2, 25)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProNewPortState"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMstpProLoopbackDetected.setStatus('current')
if mibBuilder.loadTexts: hwMstpProLoopbackDetected.setDescription('When port detected loopback, block the port and arise trap.')
hwMstpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3))
hwMstpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1))
hwMstpBridgeInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 1)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpStatus"), ("HUAWEI-MSTP-MIB", "hwMstpForceVersion"), ("HUAWEI-MSTP-MIB", "hwMstpDiameter"), ("HUAWEI-MSTP-MIB", "hwMstpBridgeMaxHops"), ("HUAWEI-MSTP-MIB", "hwMstpMasterBridgeID"), ("HUAWEI-MSTP-MIB", "hwMstpMasterPathCost"), ("HUAWEI-MSTP-MIB", "hwMstpBpduGuard"), ("HUAWEI-MSTP-MIB", "hwMstpAdminFormatSelector"), ("HUAWEI-MSTP-MIB", "hwMstpAdminRegionName"), ("HUAWEI-MSTP-MIB", "hwMstpAdminRevisionLevel"), ("HUAWEI-MSTP-MIB", "hwMstpOperFormatSelector"), ("HUAWEI-MSTP-MIB", "hwMstpOperRegionName"), ("HUAWEI-MSTP-MIB", "hwMstpOperRevisionLevel"), ("HUAWEI-MSTP-MIB", "hwMstpRegionConfActive"), ("HUAWEI-MSTP-MIB", "hwMstpDefaultVlanAllo"), ("HUAWEI-MSTP-MIB", "hwMstpDefaultRegionName"), ("HUAWEI-MSTP-MIB", "hwMstpPathCostStandard"), ("HUAWEI-MSTP-MIB", "hwMstpSnooping"), ("HUAWEI-MSTP-MIB", "hwMstpTcGuard"), ("HUAWEI-MSTP-MIB", "hwMstpTcGuardThreshold"), ("HUAWEI-MSTP-MIB", "hwMstpEdgedPortDefault"), ("HUAWEI-MSTP-MIB", "hwMstpBpduFilterPortDefault"), ("HUAWEI-MSTP-MIB", "hwMstpTransmitLimitDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpBridgeInfoGroup = hwMstpBridgeInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpBridgeInfoGroup.setDescription('A collection of objects indicating the necessary capabilites of the bridge device which is running the multi spanning tree protocol.')
hwMstpVlanInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 2)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpAdminMstID"), ("HUAWEI-MSTP-MIB", "hwMstpOperMstID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpVlanInfoGroup = hwMstpVlanInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpVlanInfoGroup.setDescription('A collection of objects describes the attribute of the VLAN in the multi spanning tree protocol. They are necessary to find the relation between VLAN and instance by the VLAN identifier.')
hwMstpInstanceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 3)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpiBridgeID"), ("HUAWEI-MSTP-MIB", "hwMstpiBridgePriority"), ("HUAWEI-MSTP-MIB", "hwMstpiDesignedRoot"), ("HUAWEI-MSTP-MIB", "hwMstpiRootPathCost"), ("HUAWEI-MSTP-MIB", "hwMstpiRootPort"), ("HUAWEI-MSTP-MIB", "hwMstpiRootType"), ("HUAWEI-MSTP-MIB", "hwMstpiRemainingHops"), ("HUAWEI-MSTP-MIB", "hwMstpiAdminMappedVlanListLow"), ("HUAWEI-MSTP-MIB", "hwMstpiAdminMappedVlanListHigh"), ("HUAWEI-MSTP-MIB", "hwMstpiOperMappedVlanListLow"), ("HUAWEI-MSTP-MIB", "hwMstpiOperMappedVlanListHigh"), ("HUAWEI-MSTP-MIB", "hwMstpiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpInstanceInfoGroup = hwMstpInstanceInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpInstanceInfoGroup.setDescription('A collection of objects describes the attribute of the instance in the multi spanning tree protocol.')
hwMstpPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 4)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpiState"), ("HUAWEI-MSTP-MIB", "hwMstpiPortPriority"), ("HUAWEI-MSTP-MIB", "hwMstpiPathCost"), ("HUAWEI-MSTP-MIB", "hwMstpiDesignatedRoot"), ("HUAWEI-MSTP-MIB", "hwMstpiDesignatedCost"), ("HUAWEI-MSTP-MIB", "hwMstpiDesignatedBridge"), ("HUAWEI-MSTP-MIB", "hwMstpiDesignatedPort"), ("HUAWEI-MSTP-MIB", "hwMstpiStpPortEdgeport"), ("HUAWEI-MSTP-MIB", "hwMstpiStpPortPointToPoint"), ("HUAWEI-MSTP-MIB", "hwMstpiStpMcheck"), ("HUAWEI-MSTP-MIB", "hwMstpiStpTransLimit"), ("HUAWEI-MSTP-MIB", "hwMstpiStpRXStpBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpiStpTXStpBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpiStpRXTCNBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpiStpTXTCNBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpiStpRXRSTPBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpiStpTXRSTPBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpiStpRXMSTPBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpiStpTXMSTPBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpiStpClearStatistics"), ("HUAWEI-MSTP-MIB", "hwMstpiStpDefaultPortCost"), ("HUAWEI-MSTP-MIB", "hwMstpiStpStatus"), ("HUAWEI-MSTP-MIB", "hwMstpiPortRootGuard"), ("HUAWEI-MSTP-MIB", "hwMstpiPortLoopGuard"), ("HUAWEI-MSTP-MIB", "hwMstpPortCompliance"), ("HUAWEI-MSTP-MIB", "hwMstpConfigDigestSnooping"), ("HUAWEI-MSTP-MIB", "hwMstpNoAgreementCheck"), ("HUAWEI-MSTP-MIB", "hwMstpPortTCNotify"), ("HUAWEI-MSTP-MIB", "hwMstpiStpPortBpduFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpPortInfoGroup = hwMstpPortInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpPortInfoGroup.setDescription('A collection of objects is necessary to show the information of the port in the bridge in the multi spanning tree protocol.')
hwMstpAccessoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 5)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpBackupReplyAgreement"), ("HUAWEI-MSTP-MIB", "hwMstpStpNoAgreementCheck"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpAccessoryGroup = hwMstpAccessoryGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpAccessoryGroup.setDescription('MSTP accessory group.')
hwMstpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 6)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpiPortStateForwarding"), ("HUAWEI-MSTP-MIB", "hwMstpiPortStateDiscarding"), ("HUAWEI-MSTP-MIB", "hwMstpiBridgeLostRootPrimary"), ("HUAWEI-MSTP-MIB", "hwMstpiPortRootGuarded"), ("HUAWEI-MSTP-MIB", "hwMstpiPortBpduGuarded"), ("HUAWEI-MSTP-MIB", "hwMstpiPortLoopGuarded"), ("HUAWEI-MSTP-MIB", "hwMstpiEdgePortChanged"), ("HUAWEI-MSTP-MIB", "hwMstpiTcGuarded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpNotificationGroup = hwMstpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpNotificationGroup.setDescription('Notification.')
hwMstpProGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 7)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProStpState"), ("HUAWEI-MSTP-MIB", "hwMstpProPriority"), ("HUAWEI-MSTP-MIB", "hwMstpProRootType"), ("HUAWEI-MSTP-MIB", "hwMstpProForceVersion"), ("HUAWEI-MSTP-MIB", "hwMstpProBpduGuard"), ("HUAWEI-MSTP-MIB", "hwMstpProDiameter"), ("HUAWEI-MSTP-MIB", "hwMstpProConvergeMode"), ("HUAWEI-MSTP-MIB", "hwMstpProMaxHops"), ("HUAWEI-MSTP-MIB", "hwMstpProMCheck"), ("HUAWEI-MSTP-MIB", "hwMstpProPathCostStandard"), ("HUAWEI-MSTP-MIB", "hwMstpProHelloTime"), ("HUAWEI-MSTP-MIB", "hwMstpProFwdDelay"), ("HUAWEI-MSTP-MIB", "hwMstpProMaxAge"), ("HUAWEI-MSTP-MIB", "hwMstpProTimerFactor"), ("HUAWEI-MSTP-MIB", "hwMstpProTcGuard"), ("HUAWEI-MSTP-MIB", "hwMstpProTcGuardThreshold"), ("HUAWEI-MSTP-MIB", "hwMstpProTcNotifyProcess"), ("HUAWEI-MSTP-MIB", "hwMstpProRegionConfActive"), ("HUAWEI-MSTP-MIB", "hwMstpProRowStatus"), ("HUAWEI-MSTP-MIB", "hwMstpProLinkShareGuard"), ("HUAWEI-MSTP-MIB", "hwMstpConfigDegist"), ("HUAWEI-MSTP-MIB", "hwMstpProTcGuardInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpProGroup = hwMstpProGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpProGroup.setDescription('MSTP process group.')
hwMstpProPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 8)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpPortVlanListLow"), ("HUAWEI-MSTP-MIB", "hwMstpPortVlanListHigh"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortType"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortBpduVlan"), ("HUAWEI-MSTP-MIB", "hwMstpPortBindRowStatus"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortState"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortPriority"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortPathCost"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortDesignatedRoot"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortDesignatedCost"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortDesignatedBridge"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortDesignatedPort"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpEdgeport"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpPointToPoint"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpMcheck"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpTransLimit"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpRXStpBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpTXStpBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpRXTCNBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpTXTCNBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpRXRSTPBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpTXRSTPBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpRXMSTPBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpTXMSTPBPDU"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpClearStatistics"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpDefaultPortCost"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpStatus"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortRootGuard"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortLoopGuard"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortCompliance"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortConfigDigestSnooping"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortNoAgreementCheck"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortVplsSubinterfaceEnable"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortBpduEncapsulation"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortBpduFilter"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpRXTC"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStpTXTC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpProPortInfoGroup = hwMstpProPortInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpProPortInfoGroup.setDescription('A collection of objects is necessary to show the information of the port in the bridge in the multi spanning tree protocol.')
hwMstpProNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 9)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProTcGuarded"), ("HUAWEI-MSTP-MIB", "hwMstpProRootChanged"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStateForwarding"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortStateDiscarding"), ("HUAWEI-MSTP-MIB", "hwMstpProNewBridgeLostRootPrimary"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortRootGuarded"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortBpduGuarded"), ("HUAWEI-MSTP-MIB", "hwMstpProNewPortLoopGuarded"), ("HUAWEI-MSTP-MIB", "hwMstpProNewEdgePortChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpProNotificationGroup = hwMstpProNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpProNotificationGroup.setDescription('MSTP process notification.')
hwMstpProInstanceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 1, 10)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpProInstanceBridgeID"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceBridgePriority"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceDesignedRoot"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceRootPathCost"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceRootPort"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceRootType"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceRemainingHops"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceAdminMappedVlanListLow"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceAdminMappedVlanListHigh"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceOperMappedVlanListLow"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceOperMappedVlanListHigh"), ("HUAWEI-MSTP-MIB", "hwMstpProInstanceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpProInstanceInfoGroup = hwMstpProInstanceInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMstpProInstanceInfoGroup.setDescription('MSTP process instance group.')
hwMstpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 2))
hwMstpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 4, 3, 2, 1)).setObjects(("HUAWEI-MSTP-MIB", "hwMstpBridgeInfoGroup"), ("HUAWEI-MSTP-MIB", "hwMstpVlanInfoGroup"), ("HUAWEI-MSTP-MIB", "hwMstpInstanceInfoGroup"), ("HUAWEI-MSTP-MIB", "hwMstpPortInfoGroup"), ("HUAWEI-MSTP-MIB", "hwMstpAccessoryGroup"), ("HUAWEI-MSTP-MIB", "hwMstpProGroup"), ("HUAWEI-MSTP-MIB", "hwMstpProPortInfoGroup"), ("HUAWEI-MSTP-MIB", "hwMstpProNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMstpCompliance = hwMstpCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMstpCompliance.setDescription('The compliance statement for device support of Priority and Multicast Filtering extended bridging services.')
mibBuilder.exportSymbols("HUAWEI-MSTP-MIB", hwMstpProNewPortStpRXRSTPBPDU=hwMstpProNewPortStpRXRSTPBPDU, hwMstpProTcGuardThreshold=hwMstpProTcGuardThreshold, hwMstpProNewPortBpduFilter=hwMstpProNewPortBpduFilter, hwMstpiStpPortEdgeport=hwMstpiStpPortEdgeport, hwMstpiStpRXRSTPBPDU=hwMstpiStpRXRSTPBPDU, hwMstpAccessoryIndex=hwMstpAccessoryIndex, hwMstpProInstanceAdminMappedVlanListLow=hwMstpProInstanceAdminMappedVlanListLow, hwMstpProStpState=hwMstpProStpState, hwMstpiTcGuarded=hwMstpiTcGuarded, hwMstpProMaxAge=hwMstpProMaxAge, hwMstpProNewPortLoopGuarded=hwMstpProNewPortLoopGuarded, hwMstpiPortRootGuarded=hwMstpiPortRootGuarded, hwMstpPortInfoGroup=hwMstpPortInfoGroup, hwMstpOperMstID=hwMstpOperMstID, hwMstpPortId1=hwMstpPortId1, hwMstpPortBindRowStatus=hwMstpPortBindRowStatus, hwMstpProPortBpduGuarded=hwMstpProPortBpduGuarded, hwMstpProPortStpDefaultPortCost=hwMstpProPortStpDefaultPortCost, hwMstpAdminFormatSelector=hwMstpAdminFormatSelector, hwMstpProInstanceRemainingHops=hwMstpProInstanceRemainingHops, hwMstpProPortConfigDigestSnooping=hwMstpProPortConfigDigestSnooping, hwMstpBridgeInfoGroup=hwMstpBridgeInfoGroup, hwMstpProNewPortBpduEncapsulation=hwMstpProNewPortBpduEncapsulation, hwMstpPortCompliance=hwMstpPortCompliance, hwMstpProForceVersion=hwMstpProForceVersion, hwMstpProNewPortState=hwMstpProNewPortState, hwMstpiPortPriority=hwMstpiPortPriority, hwMstpConfigDigestSnooping=hwMstpConfigDigestSnooping, hwMstpPortId3=hwMstpPortId3, hwMstpProNewPortStpTXTC=hwMstpProNewPortStpTXTC, hwMstpProNewPortConfigDigestSnooping=hwMstpProNewPortConfigDigestSnooping, hwMstpProPortTable=hwMstpProPortTable, hwMstpProNewPortVplsSubinterfaceEnable=hwMstpProNewPortVplsSubinterfaceEnable, hwMstpProInstanceAdminMappedVlanListHigh=hwMstpProInstanceAdminMappedVlanListHigh, hwMstpiPortStateDiscarding=hwMstpiPortStateDiscarding, hwMstpProPortStpRXMSTPBPDU=hwMstpProPortStpRXMSTPBPDU, hwMstpiOperMappedVlanListHigh=hwMstpiOperMappedVlanListHigh, hwMstpDiameter=hwMstpDiameter, hwMstpProNewPortNoAgreementCheck=hwMstpProNewPortNoAgreementCheck, hwMstpProNewPortRole=hwMstpProNewPortRole, hwMstpProPriority=hwMstpProPriority, hwMstpConformance=hwMstpConformance, hwMstpNotificationGroup=hwMstpNotificationGroup, hwMstpProNewPortStpDefaultPortCost=hwMstpProNewPortStpDefaultPortCost, hwMstpProRootType=hwMstpProRootType, hwMstpProTimerFactor=hwMstpProTimerFactor, hwMstpiBridgeLostRootPrimary=hwMstpiBridgeLostRootPrimary, hwMstpProNewPortTable=hwMstpProNewPortTable, hwMstpPortBindTable=hwMstpPortBindTable, hwMstpiStpClearStatistics=hwMstpiStpClearStatistics, hwMstpProInstanceBridgePriority=hwMstpProInstanceBridgePriority, hwMstpiRootPort=hwMstpiRootPort, hwMstpProLinkSharePortList=hwMstpProLinkSharePortList, hwMstpProPortStpMcheck=hwMstpProPortStpMcheck, hwMstpiAdminMappedVlanListHigh=hwMstpiAdminMappedVlanListHigh, hwMstpAccessoryGroup=hwMstpAccessoryGroup, hwMstpiAdminMappedVlanListLow=hwMstpiAdminMappedVlanListLow, hwMstpProNewPortPriority=hwMstpProNewPortPriority, hwMstpBpduFilterPortDefault=hwMstpBpduFilterPortDefault, hwMstpiStpPortPointToPoint=hwMstpiStpPortPointToPoint, hwMstpiPortBpduGuarded=hwMstpiPortBpduGuarded, hwMstpiRootPathCost=hwMstpiRootPathCost, hwMstpiStpTXTCNBPDU=hwMstpiStpTXTCNBPDU, hwMstpiStpPortBpduFilter=hwMstpiStpPortBpduFilter, hwMstpProPortState=hwMstpProPortState, hwMstpTraps=hwMstpTraps, hwMstpForceVersion=hwMstpForceVersion, hwMstpiPortLoopGuarded=hwMstpiPortLoopGuarded, hwMstpiRootType=hwMstpiRootType, hwMstpiRowStatus=hwMstpiRowStatus, hwMstpiStpMcheck=hwMstpiStpMcheck, hwMstpiStpRXStpBPDU=hwMstpiStpRXStpBPDU, hwMstpProPortRootGuarded=hwMstpProPortRootGuarded, hwMstpProNewPortStateForwarding=hwMstpProNewPortStateForwarding, hwMstpProRegionConfActive=hwMstpProRegionConfActive, hwMstpProNewPortRootGuarded=hwMstpProNewPortRootGuarded, hwMstpProHelloTime=hwMstpProHelloTime, hwMstpProPortType=hwMstpProPortType, hwMstpCompliances=hwMstpCompliances, hwMstpProPortTCNotify=hwMstpProPortTCNotify, hwMstpiBridgeID=hwMstpiBridgeID, hwMstpProNewPortCompliance=hwMstpProNewPortCompliance, hwMstpProBpduGuard=hwMstpProBpduGuard, hwMstpOperFormatSelector=hwMstpOperFormatSelector, hwMstpiDesignatedRoot=hwMstpiDesignatedRoot, hwMstpiDesignatedPort=hwMstpiDesignatedPort, hwMstpProPortStpPointToPoint=hwMstpProPortStpPointToPoint, hwMstpVIDAllocationEntry=hwMstpVIDAllocationEntry, hwMstpProPortStpStatus=hwMstpProPortStpStatus, hwMstpProLinkShareGuard=hwMstpProLinkShareGuard, hwMstpPathCostStandard=hwMstpPathCostStandard, hwMstpPortTable=hwMstpPortTable, hwMstpProPortDesignatedBridge=hwMstpProPortDesignatedBridge, hwMstpConfigDegist=hwMstpConfigDegist, hwMstpProInstanceTable=hwMstpProInstanceTable, hwMstpProRootChanged=hwMstpProRootChanged, hwMstpVlanInfoGroup=hwMstpVlanInfoGroup, hwMstpiStpTXStpBPDU=hwMstpiStpTXStpBPDU, hwMstpSnooping=hwMstpSnooping, hwMstpProTCNotify=hwMstpProTCNotify, hwMstpProNewEdgePortChanged=hwMstpProNewEdgePortChanged, hwMstpProPortStpTransLimit=hwMstpProPortStpTransLimit, hwMstpDefaultRegionName=hwMstpDefaultRegionName, hwMstpRegionConfActive=hwMstpRegionConfActive, hwMstpProNewPortStpRXTCNBPDU=hwMstpProNewPortStpRXTCNBPDU, PYSNMP_MODULE_ID=hwMstp, hwMstpProPortStpEdgeport=hwMstpProPortStpEdgeport, hwMstpProPortDesignatedPort=hwMstpProPortDesignatedPort, hwMstpProPortDesignatedRoot=hwMstpProPortDesignatedRoot, hwMstpProPortStpTXTCNBPDU=hwMstpProPortStpTXTCNBPDU, hwMstpProPortStateForwarding=hwMstpProPortStateForwarding, hwMstpProNewPortRootGuard=hwMstpProNewPortRootGuard, hwMstpPortVlanListLow=hwMstpPortVlanListLow, hwMstpiPortLoopGuard=hwMstpiPortLoopGuard, hwMstpProPortInfoGroup=hwMstpProPortInfoGroup, hwMstpProConvergeMode=hwMstpProConvergeMode, hwMstpInstanceID=hwMstpInstanceID, hwMstpMasterPathCost=hwMstpMasterPathCost, hwMstpProNewPortStpTXTCNBPDU=hwMstpProNewPortStpTXTCNBPDU, hwMstpProPortStpClearStatistics=hwMstpProPortStpClearStatistics, hwMstpNoAgreementCheck=hwMstpNoAgreementCheck, hwMstpProPortStpRXRSTPBPDU=hwMstpProPortStpRXRSTPBPDU, hwMstpProRegionConfShare=hwMstpProRegionConfShare, hwMstpProPortEntry=hwMstpProPortEntry, hwMstpiDesignatedBridge=hwMstpiDesignatedBridge, hwMstpTcGuard=hwMstpTcGuard, hwMstpiOperMappedVlanListLow=hwMstpiOperMappedVlanListLow, hwMstpAccessoryEntry=hwMstpAccessoryEntry, hwMstpAdminRevisionLevel=hwMstpAdminRevisionLevel, hwMstpiPortIndex=hwMstpiPortIndex, hwMstpProPortRootGuard=hwMstpProPortRootGuard, hwMstpiEdgePortChanged=hwMstpiEdgePortChanged, hwMstpPortTCNotify=hwMstpPortTCNotify, hwMstpInstanceEntry=hwMstpInstanceEntry, hwMstpProNewPortDesignatedCost=hwMstpProNewPortDesignatedCost, hwMstpProNewPortPathCost=hwMstpProNewPortPathCost, hwMstpiRemainingHops=hwMstpiRemainingHops, hwMstpiStpTXMSTPBPDU=hwMstpiStpTXMSTPBPDU, hwMstpBridgeMaxHops=hwMstpBridgeMaxHops, hwMstpAdminMstID=hwMstpAdminMstID, hwMstpProNewPortDesignatedRoot=hwMstpProNewPortDesignatedRoot, hwMstpProNewPortStpRXStpBPDU=hwMstpProNewPortStpRXStpBPDU, hwMstpProEdgePortChanged=hwMstpProEdgePortChanged, hwMstp=hwMstp, hwMstpProMCheck=hwMstpProMCheck, hwMstpProNewPortStpTXRSTPBPDU=hwMstpProNewPortStpTXRSTPBPDU, hwMstpProNewPortStpRXMSTPBPDU=hwMstpProNewPortStpRXMSTPBPDU, hwMstpiStpRXTCNBPDU=hwMstpiStpRXTCNBPDU, hwMstpProNewPortStpStatus=hwMstpProNewPortStpStatus, hwMstpInstanceTable=hwMstpInstanceTable, hwMstpProPortDesignatedCost=hwMstpProPortDesignatedCost, hwMstpProPortStpTXRSTPBPDU=hwMstpProPortStpTXRSTPBPDU, hwMstpPortEntry=hwMstpPortEntry, hwMstpOperRevisionLevel=hwMstpOperRevisionLevel, hwMstpProPortStpTXStpBPDU=hwMstpProPortStpTXStpBPDU, hwMstpProInstanceOperMappedVlanListLow=hwMstpProInstanceOperMappedVlanListLow, hwMstpProPortStpTXMSTPBPDU=hwMstpProPortStpTXMSTPBPDU, hwMstpiState=hwMstpiState, hwMstpProNewPortStpMcheck=hwMstpProNewPortStpMcheck, hwMstpProInstanceRowStatus=hwMstpProInstanceRowStatus, hwMstpPortId4=hwMstpPortId4, hwMstpProID=hwMstpProID, hwMstpProLoopbackDetected=hwMstpProLoopbackDetected, hwMstpProInstanceInfoGroup=hwMstpProInstanceInfoGroup, hwMstpPortIdFlag=hwMstpPortIdFlag, hwMstpStpNoAgreementCheck=hwMstpStpNoAgreementCheck, hwMstpProNotificationGroup=hwMstpProNotificationGroup, hwMstpInstanceInfoGroup=hwMstpInstanceInfoGroup, hwMstpiStpTransLimit=hwMstpiStpTransLimit, hwMstpiPortRootGuard=hwMstpiPortRootGuard, hwMstpPortBindEntry=hwMstpPortBindEntry, hwMstpProNewPortLoopGuard=hwMstpProNewPortLoopGuard, hwMstpiStpDefaultPortCost=hwMstpiStpDefaultPortCost, hwL2Mgmt=hwL2Mgmt, hwMstpiStpRXMSTPBPDU=hwMstpiStpRXMSTPBPDU, hwMstpProNewPortBpduVlan=hwMstpProNewPortBpduVlan, hwMstpEdgedPortDefault=hwMstpEdgedPortDefault, hwMstpBpduGuard=hwMstpBpduGuard, hwMstpProPortStateDiscarding=hwMstpProPortStateDiscarding, hwMstpiPortRole=hwMstpiPortRole, hwMstpProNewPortStpTXStpBPDU=hwMstpProNewPortStpTXStpBPDU, hwMstpProInstanceRootType=hwMstpProInstanceRootType, hwMstpProPortPathCost=hwMstpProPortPathCost, hwMstpProRowStatus=hwMstpProRowStatus, hwMstpProNewPortStpEdgeport=hwMstpProNewPortStpEdgeport, hwMstpProPortCompliance=hwMstpProPortCompliance, hwMstpProTcGuard=hwMstpProTcGuard, hwMstpProInstanceDesignedRoot=hwMstpProInstanceDesignedRoot, hwMstpMasterBridgeID=hwMstpMasterBridgeID, hwMstpiPortStateForwarding=hwMstpiPortStateForwarding, hwMstpProFwdDelay=hwMstpProFwdDelay, hwMstpProPortPriority=hwMstpProPortPriority, hwMstpVIDAllocationTable=hwMstpVIDAllocationTable, hwMstpObjects=hwMstpObjects, hwMstpProPortNoAgreementCheck=hwMstpProPortNoAgreementCheck, hwMstpProInstanceEntry=hwMstpProInstanceEntry, hwMstpProNewPortDesignatedBridge=hwMstpProNewPortDesignatedBridge, hwMstpDefaultVlanAllo=hwMstpDefaultVlanAllo, hwMstpiDesignatedCost=hwMstpiDesignatedCost, hwMstpiStpStatus=hwMstpiStpStatus, hwMstpProDiameter=hwMstpProDiameter, hwMstpProInstanceRootPort=hwMstpProInstanceRootPort, hwMstpProTcGuarded=hwMstpProTcGuarded, hwMstpProNewPortStateDiscarding=hwMstpProNewPortStateDiscarding, hwMstpProGroup=hwMstpProGroup, hwMstpGroups=hwMstpGroups, hwMstpProNoLinkSharePortList=hwMstpProNoLinkSharePortList, hwMstpProTcGuardInterval=hwMstpProTcGuardInterval, hwMstpBackupReplyAgreement=hwMstpBackupReplyAgreement, hwMstpProBridgeLostRootPrimary=hwMstpProBridgeLostRootPrimary, hwMstpProTable=hwMstpProTable, hwMstpProNewPortType=hwMstpProNewPortType, hwMstpVID=hwMstpVID, hwMstpProInstanceBridgeID=hwMstpProInstanceBridgeID, HwMSTPEnabledStatus=HwMSTPEnabledStatus, hwMstpProNewPortStpPointToPoint=hwMstpProNewPortStpPointToPoint, hwMstpiPathCost=hwMstpiPathCost, hwMstpPortId2=hwMstpPortId2, hwMstpProInstanceOperMappedVlanListHigh=hwMstpProInstanceOperMappedVlanListHigh, hwMstpProInstanceRootPathCost=hwMstpProInstanceRootPathCost, hwMstpProPortStpRXTCNBPDU=hwMstpProPortStpRXTCNBPDU, hwMstpiStpTXRSTPBPDU=hwMstpiStpTXRSTPBPDU, hwMstpPortVlanListHigh=hwMstpPortVlanListHigh, hwMstpStatus=hwMstpStatus, hwMstpAdminRegionName=hwMstpAdminRegionName, hwMstpCompliance=hwMstpCompliance, hwMstpProTcNotifyProcess=hwMstpProTcNotifyProcess, hwMstpProPortLoopGuarded=hwMstpProPortLoopGuarded, hwMstpProNewPortStpTXMSTPBPDU=hwMstpProNewPortStpTXMSTPBPDU, hwMstpProNewPortStpRXTC=hwMstpProNewPortStpRXTC, hwMstpiBridgePriority=hwMstpiBridgePriority, hwMstpProNewPortStpTransLimit=hwMstpProNewPortStpTransLimit, hwMstpProNewBridgeLostRootPrimary=hwMstpProNewBridgeLostRootPrimary, hwMstpProNewPortBpduGuarded=hwMstpProNewPortBpduGuarded, hwMstpProPortStpRXStpBPDU=hwMstpProPortStpRXStpBPDU, hwMstpProEntry=hwMstpProEntry, hwMstpAccessoryTable=hwMstpAccessoryTable, hwMstpProMaxHops=hwMstpProMaxHops, hwMstpProPathCostStandard=hwMstpProPathCostStandard, hwMstpTcGuardThreshold=hwMstpTcGuardThreshold, hwMstpTransmitLimitDefault=hwMstpTransmitLimitDefault, hwMstpProNewPortEntry=hwMstpProNewPortEntry, hwMstpProNewPortDesignatedPort=hwMstpProNewPortDesignatedPort, hwMstpProNewPortStpClearStatistics=hwMstpProNewPortStpClearStatistics, hwMstpProPortLoopGuard=hwMstpProPortLoopGuard, hwMstpOperRegionName=hwMstpOperRegionName, hwMstpiDesignedRoot=hwMstpiDesignedRoot)
