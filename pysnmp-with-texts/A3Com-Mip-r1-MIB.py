#
# PySNMP MIB module A3Com-Mip-r1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-MIP-R1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:08:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, NotificationType, MibIdentifier, enterprises, TimeTicks, Integer32, ObjectIdentity, ModuleIdentity, Bits, Counter64, iso, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "MibIdentifier", "enterprises", "TimeTicks", "Integer32", "ObjectIdentity", "ModuleIdentity", "Bits", "Counter64", "iso", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
a3ComMIP = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 27))
a3ComMipSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 27, 1))
a3ComMipCConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 27, 2))
a3ComMipData = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 27, 3))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

a3ComMipControl = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComMipControl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipControl.setDescription('If this object is set to enabled(1), then multicast IP routing is in service. If it is set to disabled(2), then multicast IP routing is turned off.')
a3ComMipPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 1), )
if mibBuilder.loadTexts: a3ComMipPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipPortTable.setDescription('This table contains entries of parameters associated with every port or tunnel.')
a3ComMipPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 1, 1), ).setIndexNames((0, "A3Com-Mip-r1-MIB", "a3ComMipPortIndex"))
if mibBuilder.loadTexts: a3ComMipPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipPortEntry.setDescription('Each entry contains information for a spcified port or tunnel.')
a3ComMipPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComMipPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipPortIndex.setDescription('The port number or tunnel ID of which this entry applies. The tunnel ID starts with 1025 and end with 1056, i.e. total tunnel number is limited to 32.')
a3ComMipPortQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5400)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComMipPortQueryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipPortQueryInterval.setDescription('This object specifies the time interval in seconds that a Host Query message is sent to the attached subnet to request for the local group membership. It also derives the Membership Expiration time which is set to two times value of this object plus 20 seconds. This object cannot be applied on tunnel port.')
a3ComMipPortThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComMipPortThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipPortThreshold.setDescription('This object specifies the minimum IP TTL required for a multicast datagram to be forwarded to the given port or tunnel.')
a3ComMipPortQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComMipPortQuerier.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipPortQuerier.setDescription('This object specifies if the system is responsible for sending out Host Query messages on this port. If the value is yes(1) then the system is the designated router on the subnet this port connects to and the system is sending out Host Query messages periodically on that port. This object must be set to value no(2) for tunnel port.')
a3ComMipPortPaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComMipPortPaceMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipPortPaceMode.setDescription('This object is used to control PACE mode. If set to enabled(1), the multicast packets will be sent out with the Universal/Local bit set, or Priority MAC. If set to disabled(2) the Universal/Local bit is clear, or Interactive MAC.')
a3ComMipLocalGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 2), )
if mibBuilder.loadTexts: a3ComMipLocalGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipLocalGroupTable.setDescription('This table contains group membership information of each attached subnet.')
a3ComMipLocalGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 2, 1), ).setIndexNames((0, "A3Com-Mip-r1-MIB", "a3ComMipLocalGroupPort"), (0, "A3Com-Mip-r1-MIB", "a3ComMipLocalGroupIpAddr"))
if mibBuilder.loadTexts: a3ComMipLocalGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipLocalGroupEntry.setDescription('Each entry contains a group membership information associated with a specific port.')
a3ComMipLocalGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComMipLocalGroupPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipLocalGroupPort.setDescription('This object specifies the port number to which this entry applies.')
a3ComMipLocalGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComMipLocalGroupIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipLocalGroupIpAddr.setDescription("This object specifies group's address presents on the specified port. If the port is configured as a tunnel, there will be no group address associated with it.")
a3ComMipLocalGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("igmp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComMipLocalGroupType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipLocalGroupType.setDescription("This object specifies the type of local group. This object can only be set to 'static' by SET command, and if the local group is learned from IGMP, it is set to 'igmp'.")
a3ComMipLocalGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComMipLocalGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipLocalGroupStatus.setDescription('This object is used to add and delete entries in this table. See the definition of RowStatus for detail.')
a3ComMipSmdsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 3), )
if mibBuilder.loadTexts: a3ComMipSmdsGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipSmdsGroupTable.setDescription('This table contains a set of IP network address and SMDS group address mapping.')
a3ComMipSmdsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 3, 1), ).setIndexNames((0, "A3Com-Mip-r1-MIB", "a3ComMipSmdsGroupIpAddr"))
if mibBuilder.loadTexts: a3ComMipSmdsGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipSmdsGroupEntry.setDescription('Each entry contains an IP network address to SMDS group address mapping.')
a3ComMipSmdsGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComMipSmdsGroupIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipSmdsGroupIpAddr.setDescription('This is an IP network address for which there is a corresponding SMDS group address.')
a3ComMipSmdsGroupMediaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComMipSmdsGroupMediaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipSmdsGroupMediaAddr.setDescription('This is the SMDS group address that corresponds to the IP network address identified by a3ComMipSmdsGroupIpAddr.')
a3ComMipSmdsGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 27, 2, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComMipSmdsGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComMipSmdsGroupStatus.setDescription('This object is used to add and delete entries in this table. See the definition of RowStatus for detail.')
mibBuilder.exportSymbols("A3Com-Mip-r1-MIB", a3ComMipCConfig=a3ComMipCConfig, a3ComMipLocalGroupTable=a3ComMipLocalGroupTable, a3ComMipPortQueryInterval=a3ComMipPortQueryInterval, a3Com=a3Com, a3ComMIP=a3ComMIP, a3ComMipPortEntry=a3ComMipPortEntry, a3ComMipSmdsGroupStatus=a3ComMipSmdsGroupStatus, a3ComMipSmdsGroupEntry=a3ComMipSmdsGroupEntry, a3ComMipControl=a3ComMipControl, a3ComMipLocalGroupIpAddr=a3ComMipLocalGroupIpAddr, a3ComMipLocalGroupStatus=a3ComMipLocalGroupStatus, a3ComMipLocalGroupPort=a3ComMipLocalGroupPort, a3ComMipSConfig=a3ComMipSConfig, a3ComMipSmdsGroupTable=a3ComMipSmdsGroupTable, a3ComMipData=a3ComMipData, RowStatus=RowStatus, a3ComMipSmdsGroupIpAddr=a3ComMipSmdsGroupIpAddr, a3ComMipSmdsGroupMediaAddr=a3ComMipSmdsGroupMediaAddr, a3ComMipPortTable=a3ComMipPortTable, a3ComMipPortThreshold=a3ComMipPortThreshold, a3ComMipPortPaceMode=a3ComMipPortPaceMode, a3ComMipPortQuerier=a3ComMipPortQuerier, a3ComMipPortIndex=a3ComMipPortIndex, brouterMIB=brouterMIB, a3ComMipLocalGroupType=a3ComMipLocalGroupType, a3ComMipLocalGroupEntry=a3ComMipLocalGroupEntry)
