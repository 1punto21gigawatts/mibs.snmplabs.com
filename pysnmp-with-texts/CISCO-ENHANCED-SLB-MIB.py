#
# PySNMP MIB module CISCO-ENHANCED-SLB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENHANCED-SLB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
SlbUrlString, = mibBuilder.importSymbols("CISCO-SLB-EXT-MIB", "SlbUrlString")
cslbxProbeName, CiscoProbeHealthMonState = mibBuilder.importSymbols("CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName", "CiscoProbeHealthMonState")
SlbServerString, slbEntity, SlbRealServerState, slbServerFarmName = mibBuilder.importSymbols("CISCO-SLB-MIB", "SlbServerString", "slbEntity", "SlbRealServerState", "slbServerFarmName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoHTTPResponseStatusCode, = mibBuilder.importSymbols("CISCO-TC", "CiscoHTTPResponseStatusCode")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Counter64, Counter32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, iso, Gauge32, Unsigned32, MibIdentifier, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Counter32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "iso", "Gauge32", "Unsigned32", "MibIdentifier", "ObjectIdentity", "TimeTicks")
DateAndTime, TruthValue, TextualConvention, StorageType, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "TextualConvention", "StorageType", "DisplayString", "RowStatus")
ciscoEnhancedSlbMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 470))
ciscoEnhancedSlbMIB.setRevisions(('2012-12-03 00:00', '2012-04-09 00:00', '2009-09-19 00:00', '2008-05-21 00:00', '2008-03-12 00:00', '2006-03-31 00:00', '2006-02-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEnhancedSlbMIB.setRevisionsDescriptions(('-Added SlbRserverLocalityState new TEXTUAL-CONVENTION. -Added cesRealServerGroupRev2 & cesRealServerNotifGroupRev3. -Added ciscoEnhancedSlbMIBComplianceRev6. -Deprecated ciscoEnhancedSlbMIBComplianceRev5.', '-Added the object cesServerFarmRserverBuddyGroup to cesServerFarmRserverTable. -Added cesRealServerFarmBuddyGroup OBJECT-GROUP. -Deprecated ciscoEnhancedSlbMIBComplianceRev4 MODULE-COMPLIANCE. -Added ciscoEnhancedSlbMIBComplianceRev5 MODULE-COMPLIANCE statement', '-Added cesServerFarmRserverDescr to cesServerFarmRserverTable. -Deprecated cesRealServerStateUp NOTIFICATION-TYPE. -Deprecated cesRealServerStateDown NOTIFICATION-TYPE. -Deprecated cesRealServerStateChange NOTIFICATION-TYPE. -Added cesRealServerStateUpRev1 NOTIFICATION-TYPE. -Added cesRealServerStateDownRev1 NOTIFICATION-TYPE. -Added cesRealServerStateChangeRev1 NOTIFICATION-TYPE. -Deprecated cesRealServerFarmGroup OBJECT-GROUP. -Deprecated cesRealServerNotifGroupRev1 NOTIFICATION-GROUP. -Added cesRealServerFarmGroupRev1 OBJECT-GROUP. -Added cesRealServerNotifGroupRev2 NOTIFICATION-GROUP -Deprecated ciscoEnhancedSlbMIBComplianceRev3 MODULE-COMPLIANCE. -Added ciscoEnhancedSlbMIBComplianceRev4 MODULE-COMPLIANCE.', '-Added the following objects to the cesRserverProbeTable cesRserverProbeLastProbeTime cesRserverProbeLastActiveTime cesRserverProbeLastFailedTime -Deprecated cesRserverProbeGroup OBJECT-GROUP. -Deprecated ciscoEnhancedSlbMIBComplianceRev2 MODULE-COMPLIANCE statement. -Added cesRserverProbeGroupRev1 OBJECT-GROUP. -Added ciscoEnhancedSlbMIBComplianceRev3 MODULE-COMPLIANCE statement.', "-Added the following objects to the cesRserverTable cesRserverTotalConns cesRserverFailedConns cesRserverCurrConns -Added the following objects to the cesRserverProbeTable cesRserverProbesPassed cesRserverProbesFailed cesRserverHealthMonState -Added cesRealServerProbeTable -Deprecated cesRealServerGroup OBJECT-GROUP -Deprecated ciscoEnhancedSlbMIBComplianceRev1 MODULE-COMPLIANCE statement - Added the following OBJECT-GROUP's cesRealServerGroupRev1 cesRserverProbeGroup cesRealserverProbeGroup - Added ciscoEnhancedSlbMIBComplianceRev2 MODULE-COMPLIANCE statement", '-Added the following Notifications: cesRserverStateUp cesRserverStateDown cesRserverStateChange. -Added OBJECT-GROUP cesRealServerNotifGroupRev1 -Added MODULE-COMPLIANCE ciscoEnhancedSlbMIBComplianceRev1', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoEnhancedSlbMIB.setLastUpdated('201212030000Z')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-slb@cisco.com')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIB.setDescription('The MIB for managing Server Load Balancing Manager(s), and products supporting Server Load Balancing(SLB) features. This MIB extends the tables(as appropriate) that are defined in CISCO-SLB-MIB and CISCO-SLB-EXT-MIB. Some of the functionalities supported are: * Real Server Configuration with real server identified by a name * Real Server configuration in a Server Farm. * Health Probe Configuration in a real server. * Sticky Configuration for HTTP Header, HTTP Cookie and Client IP Address, SSL(Secure Socket Layer). Acronyms and terminology: SLB : Server Load Balancing When a client initiates a connection to virtual server, the system load balances the connection to the chosen real server based on the user configuration. SLB is important for Scaling of Web Services and for traditional serverices such as DNS, FTP etc. Server Farm : Contains cluster of Real Server Virtual Server : Group of Real Servers RServer : RServers are physical devices that do not belong to any server farm. Real Server : Real Servers are physical devices assigned to a server farms. Real servers provide services that are load balanced. Health Probe : The mechanisms to monitor the health of real servers. sticky ConnectIons : Sticky connections limit traffic to the individual real servers by allowing multiple connections from the same client to stick (or attach) to the same real server using source IP addresses, source IP subnets, cookies, and the secure socket layer (SSL) or by redirecting these connections using Hypertext Transfer Protocol (HTTP) redirect messages. Sticky connection feature also permits coupling of the services that are handled by more than one virtual server. cookie : A cookie is a small data structure used by a server to deliver data to a Web client and request that the client store the information. In certain applications, the client returns the information to the server to maintain the state between the client and the server. BuddyGroup : Contains buddy group name of real server.')
ciscoEnhancedSlbMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 0))
ciscoEnhancedSlbMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 1))
ciscoEnhancedSlbMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 2))
cesRealServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1))
cesDfpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 2))
cesStickyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 3))
cesNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 4))
cesNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 5))
class CiscoRserverAdminStatus(TextualConvention, Integer32):
    description = "This is the textual convention for administrative status of the real server. The possible value(s) are : 'inService' : Places the real server into service state. 'outOfService' : Places the real server out of service. 'inserviceStandby' : Places the real server into standby state."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("inService", 1), ("outOfService", 2), ("inServiceStandby", 3))

class SlbRserverLocalityState(TextualConvention, Integer32):
    description = "This is the textual convention for locality status of the real server. The possible value(s) are : 'unknown' : The locality of the real server is not known. 'local' : The locality of the real server is local. 'remote' : The locality of the real server is remote. state."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("local", 2), ("remote", 3))

cesRserverTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1), )
if mibBuilder.loadTexts: cesRserverTable.setStatus('current')
if mibBuilder.loadTexts: cesRserverTable.setDescription('A table of real servers. A real server is identified by a name.')
cesRserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-ENHANCED-SLB-MIB", "cesRserverName"))
if mibBuilder.loadTexts: cesRserverEntry.setStatus('current')
if mibBuilder.loadTexts: cesRserverEntry.setDescription("An entry in real server table. Each entry refers to real server and contains real server IP Address, maximum connections supported, minimum connections supported, redirect code, redirect port etc. The 'slbEntity' is used in identifying the module in which configuration is applied.")
cesRserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cesRserverName.setStatus('current')
if mibBuilder.loadTexts: cesRserverName.setDescription('This object identifies the name(unique identifier) of the real server.')
cesRserverType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redirect", 1), ("host", 2))).clone('host')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverType.setStatus('current')
if mibBuilder.loadTexts: cesRserverType.setDescription("The type of the real server. The possible values are : redirect(1): Specifies that this real server is just used for redirecting traffic to new virtual server equivalent pointed to by the redirection string (cesRserverRedirectRelocationStr). host (2): Specifies typical server offering services. The real server type redirect(1) implies that the following objects are applicable for a real server entry: cesRserverRedirectRelocationStr. cesRserverRedirectCode. cesRserverRedirectPort. This means that only the above objects will be used to create the real server entry, and all other objects will be ignored during row creation. The real server type host(2) implies that the following objects are applicable for a real server entry: cesRserverIpAddressType cesRserverIpAddress This means that only the above objects will be used to create the real server entry, and all other objects will be ignored during row creation. This object cannot be changed when the cesRserverRowStatus value is 'active'.")
cesRserverIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cesRserverIpAddressType.setDescription("The type of the internet Address configured in 'cesRserverIpAddress'. This object is applicable only for cesRserverType value 'host'.")
cesRserverIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverIpAddress.setStatus('current')
if mibBuilder.loadTexts: cesRserverIpAddress.setDescription("This object specifies the internet address of real server. This object is applicable only for cesRserverType value 'host'. This object contains zero length octet string for cesRserverType value other than 'host'.")
cesRserverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverDescription.setStatus('current')
if mibBuilder.loadTexts: cesRserverDescription.setDescription('This object is used for configuring the description of the real server.')
cesRserverMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 6), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverMaxConns.setStatus('current')
if mibBuilder.loadTexts: cesRserverMaxConns.setDescription('This object is used for configuring the maximum number of concurrent active connections this real server can handle.')
cesRserverMinConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 7), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverMinConns.setStatus('current')
if mibBuilder.loadTexts: cesRserverMinConns.setDescription('This object is used for configuring the minimum number of concurrent active connections this real server can handle. The value for this object must to be less than or equal to value specified in cesRserverMaxConns object.')
cesRserverAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverAdminWeight.setStatus('current')
if mibBuilder.loadTexts: cesRserverAdminWeight.setDescription("The user configured weight of the real server for the load-balancing algorithms. This is applicable only in case of weighted Round Robin Predictor algorithms (SlbPredictor values: 'roundRobin', 'leastConns'). A weight of zero indicates that no new connections will be assigned to this real server. Higher weight values indicate to the load-balancing algorithms a higher availability of this real server to accept more work. This object is applicable only for cesRserverType value 'host'.")
cesRserverRedirectRelocationStr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 9), SlbUrlString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverRedirectRelocationStr.setStatus('current')
if mibBuilder.loadTexts: cesRserverRedirectRelocationStr.setDescription("The relocation URL string used for redirection. This value is sent in the reply of the Redirect Server. This object is applicable only for cesRserverType value 'redirect'.")
cesRserverRedirectCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 10), CiscoHTTPResponseStatusCode().subtype(subtypeSpec=ValueRangeConstraint(300, 399)).clone(302)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverRedirectCode.setReference('RFC 2616 Section 6.1.1 Status Code and Reason Phrase. RFC 2616 Section 10.3 Redirection 3xxx.')
if mibBuilder.loadTexts: cesRserverRedirectCode.setStatus('current')
if mibBuilder.loadTexts: cesRserverRedirectCode.setDescription("The HTTP response code sent in the reply by the redirect server. meaning of few Redirect Codes: 301 : If page is permanently moved. The requested resource has been assigned a new permanent URL. 302 : The requested resource resides temporarily under a different URL. This object is applicable only for cesRserverType value 'redirect'.")
cesRserverRedirectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 11), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverRedirectPort.setStatus('current')
if mibBuilder.loadTexts: cesRserverRedirectPort.setDescription("The TCP or UDP port of redirect server. This is used for redirecting the URL string identified by 'cesRserverRedirectRelocationStr'. This object is applicable only for cesRserverType = 'redirect'.")
cesRserverAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 12), CiscoRserverAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cesRserverAdminStatus.setDescription("This is used for setting the administrative status of the Real server. If set to 'inService', the real server is placed into service. If set to 'outOfService' the real server is taken out of service.")
cesRserverOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 13), SlbRealServerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverOperStatus.setStatus('current')
if mibBuilder.loadTexts: cesRserverOperStatus.setDescription('This object provides the current state of the real server.')
cesRserverStatechangeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverStatechangeDescr.setStatus('current')
if mibBuilder.loadTexts: cesRserverStatechangeDescr.setDescription('This object contains the descriptive text qualifying the reason for the value in cesRserverOperStatus. Examples: ARP failure Health probe failed.')
cesRserverStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 15), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverStorageType.setStatus('current')
if mibBuilder.loadTexts: cesRserverStorageType.setDescription('The storage type for this conceptual row.')
cesRserverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverRowStatus.setStatus('current')
if mibBuilder.loadTexts: cesRserverRowStatus.setDescription("The object is used for adding/deleting entries in the table. An entry MUST NOT exist in the active state unless all objects in the entry have an appropriate value, as described in the description clause for each writeable object. This object may be modified if the associated instance of this object is equal to active(1), notInService(2), or notReady(3). All other writeable objects may be modified if the associated instance of this object is equal to notInService(2) or notReady(3). This object may not be set to 'destroy' if the real server identified by cesRserverName is referenced and being used in other tables.")
cesRserverTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 17), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverTotalConns.setStatus('current')
if mibBuilder.loadTexts: cesRserverTotalConns.setDescription('The total number of connections loadbalanced to this real server.')
cesRserverFailedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 18), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverFailedConns.setStatus('current')
if mibBuilder.loadTexts: cesRserverFailedConns.setDescription('The total number of failed attempts to establish a connection to the real server.')
cesRserverCurrConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 19), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverCurrConns.setStatus('current')
if mibBuilder.loadTexts: cesRserverCurrConns.setDescription('The total number of active connections loadbalanced to this real server.')
cesRserverLocality = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 1, 1, 20), SlbRserverLocalityState().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverLocality.setStatus('current')
if mibBuilder.loadTexts: cesRserverLocality.setDescription('This object indicates the current locality state of the real server.')
cesRserverProbeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2), )
if mibBuilder.loadTexts: cesRserverProbeTable.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeTable.setDescription('The Rserver health probe table. This table contains list of health probes configured in a Rserver.')
cesRserverProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-ENHANCED-SLB-MIB", "cesRserverName"), (0, "CISCO-ENHANCED-SLB-MIB", "cesRserverProbeName"))
if mibBuilder.loadTexts: cesRserverProbeEntry.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeEntry.setDescription("An entry in Rserver probe table. Each entry is for a health probe configured in a Rserver. There can be multiple health probes configured in a Rserver. The 'slbEntity' is used in identifying the module in which configuration is applied. The 'cesRserverName' identifies the Rserver in which probe is configured.")
cesRserverProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cesRserverProbeName.setReference('cslbxProbeCfgTable defined in CISCO-SLB-HEALTH-MON-MIB')
if mibBuilder.loadTexts: cesRserverProbeName.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeName.setDescription('The name of the health probe configured in a Rserver. This value must correspond to an entry in cslbxProbeCfgTable.')
cesRserverProbeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverProbeStorageType.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeStorageType.setDescription('The storage type for this conceptual row.')
cesRserverProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRserverProbeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeRowStatus.setDescription('The object is used for adding/deleting entries from this table.')
cesRserverProbesPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverProbesPassed.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbesPassed.setDescription('This object contains the number of probes passed for this Rserver. The probe is identified as pass if the Rserver returns a valid response.')
cesRserverProbesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverProbesFailed.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbesFailed.setDescription('This object contains the number of probes failed for this Rserver. The probe is identified as failed if the Rserver fails to provide a valid response for a specified number of retries.')
cesRserverProbeHealthMonState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1, 6), CiscoProbeHealthMonState().clone('init')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverProbeHealthMonState.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeHealthMonState.setDescription('This object contains the health monitor state of the probe for this Rserver.')
cesRserverProbeLastProbeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverProbeLastProbeTime.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeLastProbeTime.setDescription('This object indicates the date and time of the last probe.')
cesRserverProbeLastActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverProbeLastActiveTime.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeLastActiveTime.setDescription("This object indicates the last date and time that the probe's state transitioned to 'active'")
cesRserverProbeLastFailedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRserverProbeLastFailedTime.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeLastFailedTime.setDescription("This object indicates the last date and time that the probe's state transitioned to 'failed'")
cesServerFarmRserverTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3), )
if mibBuilder.loadTexts: cesServerFarmRserverTable.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverTable.setDescription("A table of real servers configured in a server farm. This table is used for configuring real server (cesRserverName) in a server farm(slbServerFarmName) and configuring attributes of real server specific to a server farm. The real server identified by 'cesRserverName' should have been configured prior to creating of an entry in this table. The probes configured for the real server identifeid by 'cesRserverName' will be inherited by the server farm.")
cesServerFarmRserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbServerFarmName"), (0, "CISCO-ENHANCED-SLB-MIB", "cesRserverName"), (0, "CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverPort"))
if mibBuilder.loadTexts: cesServerFarmRserverEntry.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverEntry.setDescription("Information about a real server in a system. Each entry refers to real server and contains information such as real server IP Address, maximum connections supported, minimum connections supported etc. The 'slbEntity' refers to the module in which this configuration is applied. The 'cesRserverName' refers to the Real Server. The 'slbServerFarmName' refers to the Server Farm.")
cesServerFarmRserverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 1), InetPortNumber())
if mibBuilder.loadTexts: cesServerFarmRserverPort.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverPort.setDescription('The port number of the real server. The value zero specifies that port number is not used in conjunction with real server IP Address.')
cesServerFarmRserverAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverAdminWeight.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverAdminWeight.setDescription('This object specifies user configured weight of the real server under the serverfarm for the load-balancing algorithms. If value is not specified, then the value specified in the object cesRserverAdminWeight is used.')
cesServerFarmRserverOperWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverOperWeight.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverOperWeight.setDescription('The actual operating weight of the real server used by the load-balancing algorithms. This can be adjusted dynamically by DFP/SASP. A weight of zero indicates that no new connections will be assigned to this real server. Higher weight values indicate to the load-balancing algorithms availability of this real server to accept more work.')
cesServerFarmRserverMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverMaxConns.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverMaxConns.setDescription('This object specfies the maximum number of connections that can be supported by the real server. If value is not specified, then the value specified in the object cesRserverMaxConns is used.')
cesServerFarmRserverMinConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverMinConns.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverMinConns.setDescription('This object specifies the minimum number of connections that needs to be supported by the real server. The value of this object must be less than or equal to value specified in cesServerFarmRserverMaxConns object. The value in this object is relevant only if the cesServerFarmMaxConns object is configured. If value is not specified, then the value specified in the object cesRserverMinConns is used.')
cesServerFarmRserverAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 6), CiscoRserverAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverAdminStatus.setDescription('This is used for setting the administrative status of the Real server a server farm.')
cesServerFarmRserverOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 7), SlbRealServerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesServerFarmRserverOperStatus.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverOperStatus.setDescription('This object provides the current state of the real server in a server farm.')
cesServerFarmRserverStateDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesServerFarmRserverStateDescr.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverStateDescr.setDescription('This object contains the descriptive text qualifying the reason for the value in cesServerFarmRserverOperStatus. Examples: ARP failure Health probe failed.')
cesServerFarmRserverBackupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverBackupName.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverBackupName.setDescription('This object specifies the backup real server. The value of this object cannot be same as the value specified in the INDEX cesRserverName. This value must correspond to an entry in cesRserverTable. The zero length value is not considered as a valid real server name.')
cesServerFarmRserverBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 10), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverBackupPort.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverBackupPort.setDescription("This is the port number of the backup real server configured in 'cesServerFarmRserverBackupName'. This object can be configured only if the value specified in cesServerFarmRserverBackupName is valid. The value of this object is of signficance for the valid value of cesServerFarmRserverBackupName.")
cesServerFarmRserverTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesServerFarmRserverTotalConns.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverTotalConns.setDescription('The total number of connections loadbalanced to this real server.')
cesServerFarmRserverFailedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesServerFarmRserverFailedConns.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverFailedConns.setDescription('The number of failed connections after which the real server goes to Failed state. A failed connection is when a SYN timeouts or a RST is received from the real server.')
cesServerFarmRserverDroppedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesServerFarmRserverDroppedConns.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverDroppedConns.setDescription('The total number of connections that were not connected to this server due to the current connection count being at the max number of allowed connections(cevServerFarmRserverMaxConns value) to this real server.')
cesServerFarmRserverCurrentConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesServerFarmRserverCurrentConns.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverCurrentConns.setDescription('The number of connections currently assigned to this real server. This object represents the connections that are still active.')
cesServerFarmRserverStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 15), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverStorageType.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverStorageType.setDescription('The storage type for this conceptual row.')
cesServerFarmRserverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverRowStatus.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverRowStatus.setDescription('This object is used for adding/deleting entries in the table.')
cesServerFarmRserverDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 17), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverDescr.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverDescr.setDescription('This object contains the descriptive text qualifying the real server.')
cesServerFarmRserverBuddyGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 3, 1, 18), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesServerFarmRserverBuddyGroup.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmRserverBuddyGroup.setDescription('This object contains the buddy group of the real server.')
cesRealServerProbeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 4), )
if mibBuilder.loadTexts: cesRealServerProbeTable.setStatus('current')
if mibBuilder.loadTexts: cesRealServerProbeTable.setDescription('The real server health probe table. This table can be used for configuring probes in a real server.')
cesRealServerProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-HEALTH-MON-MIB", "cslbxProbeName"), (0, "CISCO-SLB-MIB", "slbServerFarmName"), (0, "CISCO-ENHANCED-SLB-MIB", "cesRserverName"), (0, "CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverPort"))
if mibBuilder.loadTexts: cesRealServerProbeEntry.setStatus('current')
if mibBuilder.loadTexts: cesRealServerProbeEntry.setDescription("An entry in real server probe table. An entry in the table is created when a probe is associated with a real server. An entry is deleted when a probe is dissociated with a real server. The 'slbEntity' is used in identifying the module in which configuration is applied. The 'cesRserverName' identifies the real server to which probe is configured. The 'cslbxProbeName' represents the probe associated with the real server. The 'cesServerFarmRserverPort' represents the port of the real server through which it is attached to the server farm.")
cesRealServerProbeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 4, 1, 1), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRealServerProbeStorageType.setStatus('current')
if mibBuilder.loadTexts: cesRealServerProbeStorageType.setDescription('The storage type for this conceptual row.')
cesRealServerProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cesRealServerProbeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cesRealServerProbeRowStatus.setDescription('The object is used for adding/deleting entries from this table.')
cesRealServerNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRealServerNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cesRealServerNotifEnable.setDescription('This object is used for enabling/disabling notifications related to real servers.')
cesRealServerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 5, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cesRealServerName.setStatus('current')
if mibBuilder.loadTexts: cesRealServerName.setDescription('This object identifies the real server name that are sent in notifications. This object contains the value of object cesRserverName. This object is set to zero length octet string value if the real server name is not available or applicable.')
cesProbeName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 5, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cesProbeName.setStatus('current')
if mibBuilder.loadTexts: cesProbeName.setDescription('This object identifies the probe name that are sent in notification. This object must correspond to an entry in cslbxProbeCfgTable. This object is set to zero length octet string value if the probe is not available/applicable.')
cesServerFarmName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 470, 1, 5, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cesServerFarmName.setStatus('current')
if mibBuilder.loadTexts: cesServerFarmName.setDescription('This object identifies the server farm name that are sent in notifications. This object contains the value of object slbServerFarmName. This object is set to zero length octet string value if the server farm name is not available or applicable.')
cesRealServerStateUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 1)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupPort"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"))
if mibBuilder.loadTexts: cesRealServerStateUp.setStatus('deprecated')
if mibBuilder.loadTexts: cesRealServerStateUp.setDescription("This notification is generated when a real server changes to 'inservice' state by the user intervention. The cesServerFarmName refers to the server farm to which the real server identified by the cesRealServerName is associated. The cesServerFarmRserverBackupPort refers to the real server port. This object contains the value of cesServerFarmRserverPort. cesRealServerStateUp object is superseded by cesRealServerStateUpRev1.")
cesRealServerStateDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 2)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupPort"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverStateDescr"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"))
if mibBuilder.loadTexts: cesRealServerStateDown.setStatus('deprecated')
if mibBuilder.loadTexts: cesRealServerStateDown.setDescription("This notification is generated when a real server changes to 'outOfService' state by the user intervention. The cesServerFarmName refers to the server farm to which the real server identified by the cesRealServerName is associated. The cesServerFarmRserverBackupPort refers to the real server port. This object contains the value of cesServerFarmRserverPort. cesRealServerStateDown object is superseded by cesRealServerStateDownRev1.")
cesRealServerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 3)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupPort"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverStateDescr"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"), ("CISCO-ENHANCED-SLB-MIB", "cesProbeName"))
if mibBuilder.loadTexts: cesRealServerStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: cesRealServerStateChange.setDescription('This notification generated when a real server changes to a new state other than that is initiated by the user. This notification is sent for the reasons that are specified in objects: cesServerFarmRserverOperStatus cesRserverStatechangeDescr. The cesServerFarmName refers to the server farm to which the real server identified by the cesRealServerName is associated. The cesServerFarmRserverBackupPort refers to the real server port. This object contains the value of cesServerFarmRserverPort. The cesProbeName object with zero length octet string specifies that real server state change is not due to probe failure. cesRealServerStateChange object is superseded by cesRealServerStateChangeRev1.')
cesRserverStateUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 4)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"))
if mibBuilder.loadTexts: cesRserverStateUp.setStatus('current')
if mibBuilder.loadTexts: cesRserverStateUp.setDescription("This notification is generated when the real server identified in cesRserverTable changes state to 'inservice' by the user intervention.")
cesRserverStateDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 5)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"))
if mibBuilder.loadTexts: cesRserverStateDown.setStatus('current')
if mibBuilder.loadTexts: cesRserverStateDown.setDescription("This notification is generated when the real server identified in cesRserverTable changes to 'outOfService' state by the user intervention.")
cesRserverStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 6)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStatechangeDescr"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"), ("CISCO-ENHANCED-SLB-MIB", "cesProbeName"))
if mibBuilder.loadTexts: cesRserverStateChange.setStatus('current')
if mibBuilder.loadTexts: cesRserverStateChange.setDescription('This notification generated when the real server identified in cesRserverTable changes to a new state other than that is initiated by the user. This notification is sent for the reasons that are specified in objects: cesRserverOperStatus cesRserverStatechangeDescr. The cesProbeName object with zero length octet string specifies that real server state change is not due to probe failure.')
cesRealServerStateUpRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 7)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupPort"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverDescr"))
if mibBuilder.loadTexts: cesRealServerStateUpRev1.setStatus('current')
if mibBuilder.loadTexts: cesRealServerStateUpRev1.setDescription("This notification is generated when a real server changes to 'inservice' state by the user intervention. The cesServerFarmName refers to the server farm to which the real server identified by the cesRealServerName is associated. The cesServerFarmRserverBackupPort refers to the real server port. This object contains the value of cesServerFarmRserverPort. The cesServerFarmRserverAdminStatus refers to the administrative state of the real server. The cesServerFarmRserverOperStatus refers to the current state of the real server. The cesRserverIpAddress refers to the internet address of the real server. The cesRserverIpAddressType refers to the type of internet address in cesRserverIpAddress. The cesServerFarmRserverDescr refers to the description configured for the real server.")
cesRealServerStateDownRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 8)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupPort"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverStateDescr"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverDescr"))
if mibBuilder.loadTexts: cesRealServerStateDownRev1.setStatus('current')
if mibBuilder.loadTexts: cesRealServerStateDownRev1.setDescription("This notification is generated when a real server changes to 'outOfService' state by the user intervention. The cesServerFarmName refers to the server farm to which the real server identified by the cesRealServerName is associated. The cesServerFarmRserverBackupPort refers to the real server port. This object contains the value of cesServerFarmRserverPort. The cesServerFarmRserverAdminStatus refers to the administrative state of the real server. The cesServerFarmRserverOperStatus refers to the current state of the real server. The cesRserverIpAddress refers to the internet address of the real server. The cesRserverIpAddressType refers to the type of internet address in cesRserverIpAddress. The cesServerFarmRserverDescr refers to the description configured for the real server.")
cesRealServerStateChangeRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 9)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupPort"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverStateDescr"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"), ("CISCO-ENHANCED-SLB-MIB", "cesProbeName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverDescr"))
if mibBuilder.loadTexts: cesRealServerStateChangeRev1.setStatus('current')
if mibBuilder.loadTexts: cesRealServerStateChangeRev1.setDescription('This notification is generated when a real server changes to a new state other than that is initiated by the user. This notification is sent for the reasons that are specified in objects: cesServerFarmRserverOperStatus cesRserverStatechangeDescr. The cesServerFarmName refers to the server farm to which the real server identified by the cesRealServerName is associated. The cesServerFarmRserverBackupPort refers to the real server port. This object contains the value of cesServerFarmRserverPort. The cesServerFarmRserverAdminStatus refers to the administrative state of the real server. The cesRserverIpAddress refers to the internet address of the real server. The cesRserverIpAddressType refers to the type of internet address in cesRserverIpAddress. The cesProbeName object with zero length octet string specifies that real server state change is not due to probe failure. The cesServerFarmRserverDescr refers to the description configured for the real server.')
cesRserverLocalityChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 470, 0, 10)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRserverLocality"))
if mibBuilder.loadTexts: cesRserverLocalityChange.setStatus('current')
if mibBuilder.loadTexts: cesRserverLocalityChange.setDescription('This notification is generated when the system detects the change of cesRserverLocality object value.')
ciscoEnhancedSlbMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 1))
ciscoEnhancedSlbMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2))
ciscoEnhancedSlbMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 1, 1)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerFarmGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesNotificationObjectGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedSlbMIBCompliance = ciscoEnhancedSlbMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Enhanced SLB MIB')
ciscoEnhancedSlbMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 1, 2)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerFarmGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesNotificationObjectGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerNotifGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedSlbMIBComplianceRev1 = ciscoEnhancedSlbMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco Enhanced SLB MIB')
ciscoEnhancedSlbMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 1, 3)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerFarmGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealserverProbeGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesNotificationObjectGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerNotifGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedSlbMIBComplianceRev2 = ciscoEnhancedSlbMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco Enhanced SLB MIB.')
ciscoEnhancedSlbMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 1, 4)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerFarmGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRealserverProbeGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesNotificationObjectGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerNotifGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedSlbMIBComplianceRev3 = ciscoEnhancedSlbMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco Enhanced SLB MIB.')
ciscoEnhancedSlbMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 1, 5)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerFarmGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRealserverProbeGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesNotificationObjectGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerNotifGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedSlbMIBComplianceRev4 = ciscoEnhancedSlbMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Cisco Enhanced SLB MIB.')
ciscoEnhancedSlbMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 1, 6)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerFarmGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRealserverProbeGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerFarmBuddyGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesNotificationObjectGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerNotifGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedSlbMIBComplianceRev5 = ciscoEnhancedSlbMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIBComplianceRev5.setDescription('The compliance statement for entities which implement the Cisco Enhanced SLB MIB.')
ciscoEnhancedSlbMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 1, 7)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerFarmGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerGroupRev2"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeGroupRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRealserverProbeGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerFarmBuddyGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesNotificationObjectGroup"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerNotifGroupRev3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedSlbMIBComplianceRev6 = ciscoEnhancedSlbMIBComplianceRev6.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedSlbMIBComplianceRev6.setDescription('The compliance statement for entities which implement the Cisco Enhanced SLB MIB.')
cesRealServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 1)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverDescription"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverMaxConns"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverMinConns"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverAdminWeight"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverRedirectRelocationStr"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverRedirectPort"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverRedirectCode"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStatechangeDescr"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStorageType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverRowStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeStorageType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerGroup = cesRealServerGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cesRealServerGroup.setDescription('This group contains objects applicable for Rserver configuration. cesRealServerGroup object is superseded by cesRealServerGroupRev1.')
cesRealServerFarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 3)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminWeight"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperWeight"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverMaxConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverMinConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverStateDescr"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupPort"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverTotalConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverFailedConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverDroppedConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverCurrentConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverStorageType"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerFarmGroup = cesRealServerFarmGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cesRealServerFarmGroup.setDescription('The group contains obbjects for real server configuration in a server farm. cesRealServerFarmGroup object is superseded by cesRealServerFarmGroup2.')
cesNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 9)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmName"), ("CISCO-ENHANCED-SLB-MIB", "cesProbeName"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesNotificationObjectGroup = cesNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cesNotificationObjectGroup.setDescription('This group contains objects related to notification.')
cesRealServerNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 10)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerStateUp"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerStateDown"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerNotifGroup = cesRealServerNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cesRealServerNotifGroup.setDescription('This group contains real server Notifications. cesRealServerNotifGroup object is superseded by cesRealServerNotifGroupRev1.')
cesRealServerNotifGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 11)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerStateUp"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerStateDown"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerStateChange"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStateUp"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStateDown"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerNotifGroupRev1 = cesRealServerNotifGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cesRealServerNotifGroupRev1.setDescription('This group contains real server Notifications. cesRealServerNotifGroupRev1 object is superseded by cesRealServerNotifGroupRev2.')
cesRealServerGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 12)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerName"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddressType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverIpAddress"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverDescription"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverMaxConns"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverMinConns"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverAdminWeight"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverRedirectRelocationStr"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverRedirectCode"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverRedirectPort"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStatechangeDescr"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStorageType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverRowStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverTotalConns"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverFailedConns"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverCurrConns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerGroupRev1 = cesRealServerGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cesRealServerGroupRev1.setDescription('This group contains objects applicable for Rserver configuration. cesRealServerGroupRev1 object is superseded by NA.')
cesRserverProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 13)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeStorageType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeRowStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbesPassed"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbesFailed"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeHealthMonState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRserverProbeGroup = cesRserverProbeGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cesRserverProbeGroup.setDescription('This group contains objects applicable for Rserver probe configuration and Rserver probe statistics. cesRserverProbeGroup object is superseded by NA.')
cesRealserverProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 14)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerProbeStorageType"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerProbeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealserverProbeGroup = cesRealserverProbeGroup.setStatus('current')
if mibBuilder.loadTexts: cesRealserverProbeGroup.setDescription('This group contains objects applicable for real server probe configuration.')
cesRserverProbeGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 15)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeStorageType"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeRowStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbesPassed"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbesFailed"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeHealthMonState"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeLastProbeTime"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeLastActiveTime"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverProbeLastFailedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRserverProbeGroupRev1 = cesRserverProbeGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cesRserverProbeGroupRev1.setDescription('This group contains objects applicable for Rserver probe configuration and Rserver probe statistics.')
cesRealServerFarmGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 19)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminWeight"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperWeight"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverMaxConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverMinConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverAdminStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverOperStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverStateDescr"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupName"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBackupPort"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverTotalConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverFailedConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverDroppedConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverCurrentConns"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverStorageType"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverRowStatus"), ("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerFarmGroupRev1 = cesRealServerFarmGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cesRealServerFarmGroupRev1.setDescription('The group contains objects for real server configuration in a server farm. cesRealServerFarmGroupRev1 object is superseded by NA.')
cesRealServerNotifGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 21)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRealServerStateUpRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerStateDownRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRealServerStateChangeRev1"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStateUp"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStateDown"), ("CISCO-ENHANCED-SLB-MIB", "cesRserverStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerNotifGroupRev2 = cesRealServerNotifGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cesRealServerNotifGroupRev2.setDescription('This group contains real server Notifications. cesRealServerNotifGroupRev2 object is superseded by NA.')
cesRealServerFarmBuddyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 22)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesServerFarmRserverBuddyGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerFarmBuddyGroup = cesRealServerFarmBuddyGroup.setStatus('current')
if mibBuilder.loadTexts: cesRealServerFarmBuddyGroup.setDescription('The group contains objects for buddy group configuration of real server in a server farm.')
cesRealServerGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 23)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRserverLocality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerGroupRev2 = cesRealServerGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cesRealServerGroupRev2.setDescription('This group contains object indicates the current locality state of the real server.')
cesRealServerNotifGroupRev3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 470, 2, 2, 24)).setObjects(("CISCO-ENHANCED-SLB-MIB", "cesRserverLocalityChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cesRealServerNotifGroupRev3 = cesRealServerNotifGroupRev3.setStatus('current')
if mibBuilder.loadTexts: cesRealServerNotifGroupRev3.setDescription('This group contain real server Locality state change Notification.')
mibBuilder.exportSymbols("CISCO-ENHANCED-SLB-MIB", SlbRserverLocalityState=SlbRserverLocalityState, cesRserverStatechangeDescr=cesRserverStatechangeDescr, cesRealServerFarmBuddyGroup=cesRealServerFarmBuddyGroup, cesRserverAdminStatus=cesRserverAdminStatus, cesRealServerGroupRev2=cesRealServerGroupRev2, cesRserverLocality=cesRserverLocality, cesServerFarmRserverTotalConns=cesServerFarmRserverTotalConns, ciscoEnhancedSlbMIBCompliances=ciscoEnhancedSlbMIBCompliances, cesRealServerNotifGroupRev2=cesRealServerNotifGroupRev2, cesRserverEntry=cesRserverEntry, cesRserverRedirectRelocationStr=cesRserverRedirectRelocationStr, cesRserverType=cesRserverType, cesRserverProbeGroupRev1=cesRserverProbeGroupRev1, cesRealServerNotifGroupRev3=cesRealServerNotifGroupRev3, CiscoRserverAdminStatus=CiscoRserverAdminStatus, cesRealServerName=cesRealServerName, cesNotificationObjectGroup=cesNotificationObjectGroup, cesRserverOperStatus=cesRserverOperStatus, ciscoEnhancedSlbMIB=ciscoEnhancedSlbMIB, ciscoEnhancedSlbMIBObjects=ciscoEnhancedSlbMIBObjects, cesRealServerNotifGroup=cesRealServerNotifGroup, cesRserverProbeName=cesRserverProbeName, PYSNMP_MODULE_ID=ciscoEnhancedSlbMIB, cesNotificationObjects=cesNotificationObjects, cesServerFarmRserverDroppedConns=cesServerFarmRserverDroppedConns, cesServerFarmRserverFailedConns=cesServerFarmRserverFailedConns, ciscoEnhancedSlbMIBNotifs=ciscoEnhancedSlbMIBNotifs, cesServerFarmRserverOperWeight=cesServerFarmRserverOperWeight, cesNotifControl=cesNotifControl, cesServerFarmRserverStateDescr=cesServerFarmRserverStateDescr, cesRserverProbeLastProbeTime=cesRserverProbeLastProbeTime, cesRserverTable=cesRserverTable, cesRealServerNotifGroupRev1=cesRealServerNotifGroupRev1, cesServerFarmRserverMinConns=cesServerFarmRserverMinConns, cesRserverCurrConns=cesRserverCurrConns, cesServerFarmRserverAdminStatus=cesServerFarmRserverAdminStatus, cesRealServerStateDown=cesRealServerStateDown, cesRealServerStateChangeRev1=cesRealServerStateChangeRev1, cesServerFarmRserverDescr=cesServerFarmRserverDescr, cesRserverRowStatus=cesRserverRowStatus, cesRealServerProbeEntry=cesRealServerProbeEntry, cesRserverProbeGroup=cesRserverProbeGroup, cesRealserverProbeGroup=cesRealserverProbeGroup, cesServerFarmRserverBuddyGroup=cesServerFarmRserverBuddyGroup, cesServerFarmRserverMaxConns=cesServerFarmRserverMaxConns, cesRealServer=cesRealServer, cesRserverName=cesRserverName, ciscoEnhancedSlbMIBComplianceRev4=ciscoEnhancedSlbMIBComplianceRev4, cesRealServerStateChange=cesRealServerStateChange, cesServerFarmRserverBackupPort=cesServerFarmRserverBackupPort, cesRserverMaxConns=cesRserverMaxConns, ciscoEnhancedSlbMIBComplianceRev5=ciscoEnhancedSlbMIBComplianceRev5, cesRserverRedirectPort=cesRserverRedirectPort, cesServerFarmRserverStorageType=cesServerFarmRserverStorageType, cesRealServerGroupRev1=cesRealServerGroupRev1, cesRserverLocalityChange=cesRserverLocalityChange, cesRserverMinConns=cesRserverMinConns, cesRealServerStateUpRev1=cesRealServerStateUpRev1, cesServerFarmRserverCurrentConns=cesServerFarmRserverCurrentConns, cesServerFarmRserverEntry=cesServerFarmRserverEntry, cesRserverAdminWeight=cesRserverAdminWeight, cesStickyConfig=cesStickyConfig, cesRserverDescription=cesRserverDescription, cesRealServerProbeStorageType=cesRealServerProbeStorageType, cesRserverStateChange=cesRserverStateChange, cesRserverFailedConns=cesRserverFailedConns, ciscoEnhancedSlbMIBComplianceRev6=ciscoEnhancedSlbMIBComplianceRev6, cesServerFarmRserverTable=cesServerFarmRserverTable, cesServerFarmRserverBackupName=cesServerFarmRserverBackupName, cesServerFarmName=cesServerFarmName, cesServerFarmRserverRowStatus=cesServerFarmRserverRowStatus, ciscoEnhancedSlbMIBComplianceRev1=ciscoEnhancedSlbMIBComplianceRev1, cesRserverProbesFailed=cesRserverProbesFailed, cesRealServerStateDownRev1=cesRealServerStateDownRev1, cesRserverProbeRowStatus=cesRserverProbeRowStatus, cesRealServerGroup=cesRealServerGroup, cesRserverProbesPassed=cesRserverProbesPassed, cesServerFarmRserverPort=cesServerFarmRserverPort, cesServerFarmRserverOperStatus=cesServerFarmRserverOperStatus, cesRealServerFarmGroupRev1=cesRealServerFarmGroupRev1, ciscoEnhancedSlbMIBComplianceRev3=ciscoEnhancedSlbMIBComplianceRev3, cesRealServerFarmGroup=cesRealServerFarmGroup, cesDfpAgent=cesDfpAgent, cesRserverTotalConns=cesRserverTotalConns, cesRealServerProbeTable=cesRealServerProbeTable, cesRserverProbeTable=cesRserverProbeTable, ciscoEnhancedSlbMIBGroups=ciscoEnhancedSlbMIBGroups, cesRserverIpAddress=cesRserverIpAddress, cesRealServerNotifEnable=cesRealServerNotifEnable, cesRserverProbeHealthMonState=cesRserverProbeHealthMonState, cesRserverProbeLastFailedTime=cesRserverProbeLastFailedTime, ciscoEnhancedSlbMIBCompliance=ciscoEnhancedSlbMIBCompliance, cesRserverProbeLastActiveTime=cesRserverProbeLastActiveTime, cesProbeName=cesProbeName, cesRserverProbeStorageType=cesRserverProbeStorageType, cesServerFarmRserverAdminWeight=cesServerFarmRserverAdminWeight, cesRealServerProbeRowStatus=cesRealServerProbeRowStatus, cesRserverStateUp=cesRserverStateUp, ciscoEnhancedSlbMIBComplianceRev2=ciscoEnhancedSlbMIBComplianceRev2, cesRserverStorageType=cesRserverStorageType, cesRserverProbeEntry=cesRserverProbeEntry, ciscoEnhancedSlbMIBConformance=ciscoEnhancedSlbMIBConformance, cesRserverRedirectCode=cesRserverRedirectCode, cesRserverStateDown=cesRserverStateDown, cesRserverIpAddressType=cesRserverIpAddressType, cesRealServerStateUp=cesRealServerStateUp)
