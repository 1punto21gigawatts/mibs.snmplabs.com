#
# PySNMP MIB module SPAGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SPAGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:10:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, Counter64, NotificationType, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, ObjectIdentity, Gauge32, Integer32, MibIdentifier, IpAddress, Unsigned32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Counter64", "NotificationType", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "ObjectIdentity", "Gauge32", "Integer32", "MibIdentifier", "IpAddress", "Unsigned32", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
akcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3854))
sensorProbe = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1))
spSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 1))
spStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("warning", 3), ("critical", 4), ("sensorError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatus.setStatus('mandatory')
if mibBuilder.loadTexts: spStatus.setDescription('The current status of this sensorProbe. The status of the sensorProbe is the worst status of all the sensors under the control of this sensorProbe.')
spManufName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spManufName.setStatus('mandatory')
if mibBuilder.loadTexts: spManufName.setDescription('The manufacturers name')
spHelpUrl = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spHelpUrl.setStatus('mandatory')
if mibBuilder.loadTexts: spHelpUrl.setDescription('The URL of the web based help')
spProductName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spProductName.setStatus('mandatory')
if mibBuilder.loadTexts: spProductName.setDescription('The product name')
spHostName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spHostName.setStatus('mandatory')
if mibBuilder.loadTexts: spHostName.setDescription('The hostname')
spSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2))
sensorProbeDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2))
sensorProbeEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1))
sensorProbeHost = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHost.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHost.setDescription('The Host of this sensor, this is the IP address')
sensorProbeUseDHCP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUseDHCP.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeUseDHCP.setDescription('To use DHCP enter a 1, to use a static IP address enter a 2')
sensorProbeMAC = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMAC.setDescription('The MAC address of this system')
sensorProbeSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSetCommunity.setDescription('The sensorProbe community string used for snmp Sets')
sensorProbeGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeGetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeGetCommunity.setDescription('The sensorProbe community string used for snmp Gets')
sensorProbeTempTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16), )
if mibBuilder.loadTexts: sensorProbeTempTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempTable.setDescription('This table contains the data for every Temperature Sensor in the SensorArray. Each row in the table contains data for a different Temperature Sensor.')
sensorProbeTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTempIndex"))
if mibBuilder.loadTexts: sensorProbeTempEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEntry.setDescription('This is an entry in the sensorProbeTempEntry Table')
sensorProbeTempDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDescription.setDescription('A Description of this sensor')
sensorProbeTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempLocation.setDescription('The physical location of this sensor')
sensorProbeTempDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempDegree.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDegree.setDescription('The degrees in this sensor')
sensorProbeTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempStatus.setDescription('The current status of this Sensor')
sensorProbeTempOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempOnline.setDescription('If this Sensor is currently online')
sensorProbeTempGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTempHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTempHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTempLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTempRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTempDegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("type1", 0), ("type2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSensorType.setDescription('The type of temperture sensor')
sensorProbeTempDegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempDegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDegreeRaw.setDescription('SP Only: The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTempEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeTempEmailTrapSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailTrapSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEmailTrapSchedule.setDescription('SP Only: Email/trap limit schedule for this sensor')
sensorProbeTempEmailTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailTrapInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEmailTrapInterval.setDescription('Minimum time between each [email/trap:SP, only trap:CP8] (can be from 0 to 60 minutes).')
sensorProbeTempSendNormalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSendNormalTrap.setDescription('Enable sending email/trap when sensor goes to normal')
sensorProbeTempDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeTempDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempIndex.setDescription('The index into the temperature sensor table')
sensorProbeTempRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeTempRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeTempRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeTempRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeTempEmailInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempEmailInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempEmailInterval.setDescription('CP8 Only: Minimum time between each email (can be from 0 to 60 minutes)')
sensorProbeTempIndexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTempIndexCount.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempIndexCount.setDescription('Number of Temperature sensor online')
sensorProbeTempOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempOffset.setDescription('Temperature Offset reading')
sensorProbeTempSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeTempSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeTempSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeTempSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeTempAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeTempSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeTempURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempURL.setDescription('Sensor URL link.')
sensorProbeTempOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTempDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTempContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTempContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTempContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTempContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTempContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTempContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTempCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatIndex.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatDescription.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatValue.setDescription('The value in this sensor')
sensorProbeThermostatOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatOnline.setDescription('If this Sensor is currently online')
sensorProbeThermostatGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatMode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatRelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatRelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatRelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatNormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatHighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatHighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatLowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatLowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatNormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatNormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatHighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatHighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatHighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatHighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatLowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatLowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatLowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatLowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatEnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 63), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatEnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatEnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTempSendNormalMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendNormalMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSendNormalMail.setDescription('Enable sending email when sensor goes to normal')
sensorProbeTempSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSendTrap.setDescription('Enable sending trap when sensor change status')
sensorProbeTempSendMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTempSendMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTempSendMail.setDescription('Enable sending email when sensor change status')
sensorProbeHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17), )
if mibBuilder.loadTexts: sensorProbeHumidityTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityTable.setDescription('This table contains the data for every Humidity Sensor in the SensorArray. Each row in the table contains data for a different Humidity Sensor.')
sensorProbeHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeHumidityIndex"))
if mibBuilder.loadTexts: sensorProbeHumidityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEntry.setDescription('This is an entry in the sensorProbeHumidityEntry Table')
sensorProbeHumidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDescription.setDescription('A Description of this sensor')
sensorProbeHumidityLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityLocation.setDescription('The physical location of this sensor')
sensorProbeHumidityPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityPercent.setDescription('The relative humidity percentage measured by this sensor')
sensorProbeHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityStatus.setDescription('The current status of this Sensor')
sensorProbeHumidityOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityOnline.setDescription('If this Sensor is currently online')
sensorProbeHumidityGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeHumidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityHighWarning.setDescription('How high the relative humidity this sensor measures before it sends a warning')
sensorProbeHumidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityHighCritical.setDescription('How high the relative humidity this sensor measures before it becomes critical')
sensorProbeHumidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityLowWarning.setDescription('How low the relative humidity this sensor measures before it sends a warning')
sensorProbeHumidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityLowCritical.setDescription('How low the relative humidity this sensor measures before it becomes critical')
sensorProbeHumidityRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRearm.setDescription('The percent relative humidity to rearm the status. For example if status goes from normal to warning, the humidity must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeHumidityRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeHumidityLowVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityLowVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityLowVoltage.setDescription('SP Only: The low voltage range for use in AtoD conversion.')
sensorProbeHumidityHighVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityHighVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityHighVoltage.setDescription('SP Only: The high voltage range for use in AtoD conversion.')
sensorProbeHumidityEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeHumidityEmailTrapSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapSchedule.setDescription('SP Only: Email/trap limit schedule for this sensor')
sensorProbeHumidityEmailTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEmailTrapInterval.setDescription('Minimum time between each [email/trap:SP, only trap:CP8] (can be from 0 to 60 minutes)')
sensorProbeHumiditySendNormalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalTrap.setDescription('Enable sending email/trap when sensor goes to normal')
sensorProbeHumidityDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeHumidityDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityIndex.setDescription('The index into the Humidity sensor table')
sensorProbeHumidityAtoDAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountMaxVoltage.setDescription('The maximum scale of DC voltage conversion.')
sensorProbeHumidityAtoDAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAtoDAmountBaseVoltage.setDescription('The base scale of DC voltage conversion.')
sensorProbeHumidityAtoDTypeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("percent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDTypeUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAtoDTypeUnit.setDescription('Type of scale for use in DC voltage conversion.')
sensorProbeHumidityDcUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDcUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDcUnit.setDescription('Display unit in DC voltage conversion.')
sensorProbeHumidityAtoDJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAtoDJumper.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAtoDJumper.setDescription('Selected voltage scale (jumper 0) in DC voltage conversion.')
sensorProbeHumidityRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeHumidityRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeHumidityRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeHumidityRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeHumidityEmailInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityEmailInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityEmailInterval.setDescription('CP8 Only: Minimum time between each emial (can be from 0 to 60 minutes)')
sensorProbeHumidity4to20mAUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidity4to20mAUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidity4to20mAUnit.setDescription('Display unit in DC voltage conversion.')
sensorProbeHumidityIndexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeHumidityIndexCount.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityIndexCount.setDescription('Number of Humidity sensor online')
sensorProbeHumidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityOffset.setDescription('Humidity Offset reading')
sensorProbeHumiditySirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeHumiditySirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeHumiditySirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeHumiditySirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeHumidityAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeHumiditySirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeHumidityURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityURL.setDescription('Sensor URL link.')
sensorProbeHumidityOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeHumidityDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeHumidityContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeHumidityContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeHumidityContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeHumidityContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeHumidityContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeHumidityContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeHumidityCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumidityCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumidityCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeHumiditySendNormalMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySendNormalMail.setDescription('Enable sending email when sensor goes to normal')
sensorProbeHumiditySendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySendTrap.setDescription('Enable sending trap when sensor change status')
sensorProbeHumiditySendMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeHumiditySendMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeHumiditySendMail.setDescription('Enable sending email when sensor change status')
sensorProbeSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18), )
if mibBuilder.loadTexts: sensorProbeSwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchTable.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeSwitchIndex"))
if mibBuilder.loadTexts: sensorProbeSwitchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEntry.setDescription('This is an entry in the sensorProbeSwitchEntry Table')
sensorProbeSwitchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchDescription.setDescription('A Description of this sensor Switch')
sensorProbeSwitchLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchLocation.setDescription('The physical location of this sensor Switch')
sensorProbeSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorProbeSwitchOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchOnline.setDescription('If this Sensor is currently online')
sensorProbeSwitchGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeSwitchDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDirection.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchDirection.setDescription('To set a switch to input enter 0. To set a switch to output enter 1')
sensorProbeSwitchNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchNormalState.setDescription('The normal state of an input switch. If an input switch is in this state it is normal, else it is critical. An open switch senses +5 volts. A closed switch senses 0 volts.')
sensorProbeSwitchOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchOutputLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchOutputLevel.setDescription('An output swith can be set to this level')
sensorProbeSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14))).clone(namedValues=NamedValues(("temperature", 1), ("fourTo20mA", 2), ("humidity", 3), ("water", 4), ("atod", 5), ("security", 6), ("airflow", 8), ("siren", 9), ("dryContact", 10), ("voltage", 12), ("relay", 13), ("motion", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSensorType.setDescription('Enter the type of this Sensor')
sensorProbeSwitchEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeSwitchEmailTrapSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapSchedule.setDescription('SP Only: Email/trap limit schedule for this sensor')
sensorProbeSwitchEmailTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEmailTrapInterval.setDescription('Minimum time between each [email/trap:SP, only trap:CP8] (can be from 0 to 60 minutes)')
sensorProbeSwitchSendNormalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalTrap.setDescription('Enable sending email/trap when sensor goes to normal')
sensorProbeSwitchDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeSwitchDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchIndex.setDescription('The index into the Switch sensor table')
sensorProbeSwitchRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeSwitchRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeSwitchRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeSwitchRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeSwitchEmailInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchEmailInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchEmailInterval.setDescription('CP8 Only: Minimum time between each email (can be from 0 to 60 minutes)')
sensorProbeSwitchRelayOutputVoltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 10, 11))).clone(namedValues=NamedValues(("sensorError", 7), ("noVoltagePresent", 10), ("voltagePresent", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchRelayOutputVoltStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayOutputVoltStatus.setDescription('SP Only: The current voltage status of the relay')
sensorProbeSwitchManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeSwitchManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchManualRelayAction.setDescription('Control the relay manualy')
sensorProbeSwitchRelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOn.setDescription('Description of relay On')
sensorProbeSwitchRelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayDescOff.setDescription('Description of relay Off')
sensorProbeSwitchIndexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchIndexCount.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchIndexCount.setDescription('Number of Switch sensor online')
sensorProbeSwitchSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeSwitchSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeSwitchSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeSwitchSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeSwitchAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeSwitchSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeSwitchURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchURL.setDescription('Sensor URL link.')
sensorProbeSwitchOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeSwitchContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeSwitchContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeSwitchCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeSwitchRelayControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchRelayControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchRelayControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeSwitchSirenControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSirenControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSirenControlMode.setDescription('Siren Control Mode used for selecting the mode to control a siren.')
sensorProbeSwitchSendNormalMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSendNormalMail.setDescription('Enable sending email when sensor goes to normal')
sensorProbeSwitchSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSendTrap.setDescription('Enable sending trap when sensor change status')
sensorProbeSwitchSendMail = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchSendMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchSendMail.setDescription('Enable sending email when sensor change status')
sensorProbeSwitchWaterRopeLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLeakLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLeakLocation.setDescription('Location of leakage of water rope sensor.')
sensorProbeSwitchWaterRopeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLength.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeLength.setDescription('Length of water rope sensor.')
sensorProbeSwitchWaterRopeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("meters", 0), ("feet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeUnit.setDescription('Display unit of water rope sensor.')
sensorProbeSwitchWaterRopeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeImpedance.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeImpedance.setDescription('Sensing wire impedance per meter value times 100')
sensorProbeSwitchWaterRopeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeRaw.setDescription('Raw value of location or length in ohms')
sensorProbeSwitchWaterRopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSwitchWaterRopeType.setDescription('Water rope sensing cable type')
sensorProbeOtherSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19))
sensorProbeIRMSSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26))
sensorProbeIRMSSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSensorNumber.setDescription('The total number of RMS current Sensor port.')
sensorProbeIRMSSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2), )
if mibBuilder.loadTexts: sensorProbeIRMSSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSensorTable.setDescription('This table contains the data for every RMS current Sensor in the SensorArray. Each row in the table contains data for a different RMS current Sensor.')
sensorProbeIRMSSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeIRMSSensorIndex"))
if mibBuilder.loadTexts: sensorProbeIRMSSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSensorEntry.setDescription('This is an entry in the sensorProbeIRMSSensorEntry Table')
sensorProbeIRMSSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSensorIndex.setDescription('A unique value for each IRMS sensor port.')
sensorProbeIRMSDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSDescription.setDescription('A Description of this sensor IRMS')
sensorProbeIRMSPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSPercent.setDescription('The relative IRMS percentage measured by this sensor')
sensorProbeIRMSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSStatus.setDescription('The current status of this Sensor')
sensorProbeIRMSOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSOnline.setDescription('If this Sensor is currently online')
sensorProbeIRMSGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeIRMSHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSHighWarning.setDescription('How high the relative IRMS this sensor measures before it sends a warning')
sensorProbeIRMSHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSHighCritical.setDescription('How high the relative IRMS this sensor measures before it becomes critical')
sensorProbeIRMSLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSLowWarning.setDescription('How low the relative IRMS this sensor measures before it sends a warning')
sensorProbeIRMSLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSLowCritical.setDescription('How low the relative IRMS this sensor measures before it becomes critical')
sensorProbeIRMSRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRearm.setDescription('The percent relative IRMS to rearm the status. For example if status goes from normal to warning, the IRMS must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeIRMSRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeIRMSRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeIRMSEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeIRMSDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeIRMSDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeIRMSRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeIRMSRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeIRMSRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeIRMSRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeIRMSSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeIRMSSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeIRMSSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeIRMSSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeIRMSAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeIRMSSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSSirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSSirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeIRMSURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSURL.setDescription('Sensor URL link.')
sensorProbeIRMSOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeIRMSDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeIRMSContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeIRMSContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeIRMSContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeIRMSContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeIRMSContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeIRMSContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeIRMSCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 26, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeIRMSCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeIRMSCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeVRMSSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27))
sensorProbeVRMSSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSensorNumber.setDescription('The total number of RMS voltage Sensor port.')
sensorProbeVRMSSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2), )
if mibBuilder.loadTexts: sensorProbeVRMSSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSensorTable.setDescription('This table contains the data for every RMS voltage Sensor in the SensorArray. Each row in the table contains data for a different RMS voltage Sensor.')
sensorProbeVRMSSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeVRMSSensorIndex"))
if mibBuilder.loadTexts: sensorProbeVRMSSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSensorEntry.setDescription('This is an entry in the sensorProbeVRMSSensorEntry Table')
sensorProbeVRMSSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSensorIndex.setDescription('A unique value for each VRMS sensor port.')
sensorProbeVRMSDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSDescription.setDescription('A Description of this sensor VRMS')
sensorProbeVRMSPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSPercent.setDescription('The relative VRMS percentage measured by this sensor')
sensorProbeVRMSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSStatus.setDescription('The current status of this Sensor')
sensorProbeVRMSOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSOnline.setDescription('If this Sensor is currently online')
sensorProbeVRMSGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeVRMSHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSHighWarning.setDescription('How high the relative VRMS this sensor measures before it sends a warning')
sensorProbeVRMSHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSHighCritical.setDescription('How high the relative VRMS this sensor measures before it becomes critical')
sensorProbeVRMSLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSLowWarning.setDescription('How low the relative VRMS this sensor measures before it sends a warning')
sensorProbeVRMSLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSLowCritical.setDescription('How low the relative VRMS this sensor measures before it becomes critical')
sensorProbeVRMSRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRearm.setDescription('The percent relative VRMS to rearm the status. For example if status goes from normal to warning, the VRMS must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeVRMSRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVRMSRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeVRMSEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeVRMSDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeVRMSDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeVRMSRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeVRMSRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeVRMSRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeVRMSRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeVRMSSirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeVRMSSirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeVRMSSirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeVRMSSirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeVRMSAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeVRMSSirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSSirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSSirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeVRMSvoltageMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(110, 220))).clone(namedValues=NamedValues(("ac-110", 110), ("ac-220", 220)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSvoltageMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSvoltageMode.setDescription('VRMS Voltage Mode.')
sensorProbeVRMSURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSURL.setDescription('Sensor URL link.')
sensorProbeVRMSOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeVRMSDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeVRMSContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeVRMSContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeVRMSContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeVRMSContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeVRMSContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeVRMSContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeVRMSCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 27, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVRMSCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVRMSCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeEnergySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28))
sensorProbeEnergySensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergySensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySensorNumber.setDescription('The total number of Energy Sensor port.')
sensorProbeEnergySensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2), )
if mibBuilder.loadTexts: sensorProbeEnergySensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySensorTable.setDescription('This table contains the data for every Energy Sensor in the SensorArray. Each row in the table contains data for a different Energy Sensor.')
sensorProbeEnergySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeEnergySensorIndex"))
if mibBuilder.loadTexts: sensorProbeEnergySensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySensorEntry.setDescription('This is an entry in the sensorProbeEnergySensorEntry Table')
sensorProbeEnergySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergySensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySensorIndex.setDescription('A unique value for each Energy sensor port.')
sensorProbeEnergyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyDescription.setDescription('A Description of this sensor Energy')
sensorProbeEnergyPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyPercent.setDescription('The relative Energy percentage measured by this sensor')
sensorProbeEnergyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyStatus.setDescription('The current status of this Sensor')
sensorProbeEnergyOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyOnline.setDescription('If this Sensor is currently online')
sensorProbeEnergyGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeEnergyHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyHighWarning.setDescription('How high the relative Energy this sensor measures before it sends a warning')
sensorProbeEnergyHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyHighCritical.setDescription('How high the relative Energy this sensor measures before it becomes critical')
sensorProbeEnergyLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyLowWarning.setDescription('How low the relative Energy this sensor measures before it sends a warning')
sensorProbeEnergyLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyLowCritical.setDescription('How low the relative Energy this sensor measures before it becomes critical')
sensorProbeEnergyRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRearm.setDescription('The percent relative Energy to rearm the status. For example if status goes from normal to warning, the Energy must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeEnergyRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeEnergyRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeEnergyEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeEnergyDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeEnergyDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeEnergyRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeEnergyRelayOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRelayOnPort.setDescription('The sensor port that the relay will listen to. If this is set to 255, then the relay will not listen to any sensor ports')
sensorProbeEnergyRelayActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRelayActiveStatus.setDescription('Sensor status that will activate the relay')
sensorProbeEnergyRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyRelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeEnergySirenCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenCycleTime.setDescription('Siren toggle period in seconds for Cycle action.')
sensorProbeEnergySirenOnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenOnPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenOnPort.setDescription('The sensor port that the siren will listen to. If this is set to 255, then the siren will not listen to any sensor ports')
sensorProbeEnergySirenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("anyError", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenActiveStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenActiveStatus.setDescription('Sensor status that will activate the siren')
sensorProbeEnergySirenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenAction.setDescription('What the siren will do when the listened to port status turns to the specified active status.')
sensorProbeEnergyAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeEnergySirenDelayAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergySirenDelayAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergySirenDelayAlarm.setDescription('Siren delay in seconds before start Alarm.')
sensorProbeEnergyReadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("apparent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyReadingMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyReadingMode.setDescription('Energy Meter Reading Mode.')
sensorProbeEnergyURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyURL.setDescription('Sensor URL link.')
sensorProbeEnergyOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeEnergyDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeEnergyContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeEnergyContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeEnergyContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeEnergyContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeEnergyContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeEnergyContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeEnergyCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 28, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnergyCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnergyCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeRelayArraySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29))
sensorProbeRelayArrayPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1))
sensorProbeRelayArrayPort1Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort1Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort1Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort1 Table')
sensorProbeRelayArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort1NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1NormalState.setDescription('The normal state of RelayArray')
sensorProbeRelayArrayPort1RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort1RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort1ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort1ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort1RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort1RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort1URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1URL.setDescription('Sersor URL link.')
sensorProbeRelayArrayPort1OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort1ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort1ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2))
sensorProbeRelayArrayPort2Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort2Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort2 Table')
sensorProbeRelayArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort2NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort2RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort2RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort2ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort2ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort2RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort2RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort2URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2URL.setDescription('Sensor URL link')
sensorProbeRelayArrayPort2OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort2ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort2ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3))
sensorProbeRelayArrayPort3Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort3Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort3Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort3 Table')
sensorProbeRelayArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort3NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort3RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort3RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort3ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort3ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort3RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort3RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort3URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort3OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort3ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort3ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4))
sensorProbeRelayArrayPort4Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort4Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort4Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort4 Table')
sensorProbeRelayArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort4NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort4RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort4RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort4ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort4ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort4RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort4RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort4URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort4OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort4ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort4ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5))
sensorProbeRelayArrayPort5Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort5Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort5Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort5 Table')
sensorProbeRelayArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort5NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort5RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort5RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort5ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort5ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort5RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort5RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort5URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort5OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort5ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort5ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6))
sensorProbeRelayArrayPort6Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort6Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort6Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort6 Table')
sensorProbeRelayArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort6NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort6RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort6RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort6ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort6ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort6RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort6RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort6URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort6OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort6ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort6ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7))
sensorProbeRelayArrayPort7Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort7Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort7Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort7 Table')
sensorProbeRelayArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort7Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort7NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort7RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort7RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort7ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort7ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort7RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort7RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort7URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort7OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort7ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort7ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeRelayArrayPort8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8))
sensorProbeRelayArrayPort8Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Number.setDescription('The total number of port on the RelayArray.')
sensorProbeRelayArrayPort8Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2), )
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeRelayArrayPort8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeRelayArrayPort8Index"))
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Entry.setDescription('This is an entry in the sensorProbeRelayArrayPort8 Table')
sensorProbeRelayArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Index.setDescription('A unique value for each sensor RelayArray port.')
sensorProbeRelayArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Description.setDescription('A Description of this sensor RelayArray')
sensorProbeRelayArrayPort8Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Status.setDescription('The current status of this Sensor')
sensorProbeRelayArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8Online.setDescription('If this Sensor is currently online')
sensorProbeRelayArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeRelayArrayPort8NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8NormalState.setDescription('The normal state of RleayArray')
sensorProbeRelayArrayPort8RelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayCycleTime.setDescription('Relay toggle period in seconds for Cycle action.')
sensorProbeRelayArrayPort8RelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("cycle", 2), ("turn-on", 3), ("turn-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayAction.setDescription('What the relay will do when the listened to port status turns to the specified active status.')
sensorProbeRelayArrayPort8ManualRelayCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayCycleTime.setDescription('Relay toggle period in seconds for Manual Cycle action.')
sensorProbeRelayArrayPort8ManualRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ManualRelayAction.setDescription('Control the relay manualy')
sensorProbeRelayArrayPort8RelayDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOn.setDescription('Description of relay On')
sensorProbeRelayArrayPort8RelayDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8RelayDescOff.setDescription('Description of relay Off')
sensorProbeRelayArrayPort8URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8URL.setDescription('Sensor URL link.')
sensorProbeRelayArrayPort8OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeRelayArrayPort8ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 29, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRelayArrayPort8ControlMode.setDescription('Relay Control Mode used for selecting the mode to control a relay.')
sensorProbeVirtualAnalogSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30))
sensorProbeVirtualAnalogSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorNumber.setDescription('The total number of VirtualAnalog Sensor port.')
sensorProbeVirtualAnalogSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2), )
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorTable.setDescription('This table contains the data for every VirtualAnalog Sensor in the SensorArray. Each row in the table contains data for a different VirtualAnalog Sensor.')
sensorProbeVirtualAnalogSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeVirtualAnalogSensorIndex"))
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorEntry.setDescription('This is an entry in the sensorProbeVirtualAnalogSensorEntry Table')
sensorProbeVirtualAnalogSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogSensorIndex.setDescription('A unique value for each VirtualAnalog sensor port.')
sensorProbeVirtualAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDescription.setDescription('A Description of this sensor')
sensorProbeVirtualAnalogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogStatus.setDescription('The current status of this Sensor')
sensorProbeVirtualAnalogOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOnline.setDescription('If this Sensor is currently online')
sensorProbeVirtualAnalogGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeVirtualAnalogHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighWarning.setDescription('How high the relative VirtualAnalog this sensor measures before it sends a warning')
sensorProbeVirtualAnalogHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogHighCritical.setDescription('How high the relative VirtualAnalog this sensor measures before it becomes critical')
sensorProbeVirtualAnalogLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowWarning.setDescription('How low the relative VirtualAnalog this sensor measures before it sends a warning')
sensorProbeVirtualAnalogLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogLowCritical.setDescription('How low the relative VirtualAnalog this sensor measures before it becomes critical')
sensorProbeVirtualAnalogRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRearm.setDescription('The percent relative VirtualAnalog to rearm the status. For example if status goes from normal to warning, the VirtualAnalog must go down spAnalogueRearm below warning before the status goes to normal')
sensorProbeVirtualAnalogRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorProbeVirtualAnalogEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeVirtualAnalogDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorProbeVirtualAnalogDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorProbeVirtualAnalogUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogUnit.setDescription('Display unit in VirtualAnalog.')
sensorProbeVirtualAnalogAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeVirtualAnalogURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogURL.setDescription('Sensor URL link.')
sensorProbeVirtualAnalogOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeVirtualAnalogContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeVirtualAnalogContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeVirtualAnalogContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeVirtualAnalogContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeVirtualAnalogContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeVirtualAnalogContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeVirtualAnalogCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeVirtualAnalogValueFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 30, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100, 1000))).clone(namedValues=NamedValues(("x1", 1), ("x0-1", 10), ("x0-01", 100), ("x0-001", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualAnalogValueFactor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualAnalogValueFactor.setDescription('To change the ratio of value.')
sensorProbeVirtualSwitchSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31))
sensorProbeVirtualSwitchSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorNumber.setDescription('The total number of VirtualSwitch Sensor port.')
sensorProbeVirtualSwitchSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2), )
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorTable.setDescription('This table contains the data for every VirtualSwitch Sensor in the SensorArray. Each row in the table contains data for a different VirtualSwitch Sensor.')
sensorProbeVirtualSwitchSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeVirtualSwitchSensorIndex"))
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorEntry.setDescription('This is an entry in the sensorProbeVirtualSwitchSensorEntry Table')
sensorProbeVirtualSwitchSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 67))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchSensorIndex.setDescription('A unique value for each VirtualSwitch sensor port.')
sensorProbeVirtualSwitchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescription.setDescription('A Description of this sensor')
sensorProbeVirtualSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchStatus.setDescription('The current status of this Sensor')
sensorProbeVirtualSwitchOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOnline.setDescription('If this Sensor is currently online')
sensorProbeVirtualSwitchGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeVirtualSwitchEmailTrapLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchEmailTrapLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchEmailTrapLimit.setDescription('Enable email/trap limit feature')
sensorProbeVirtualSwitchContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeVirtualSwitchContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeVirtualSwitchDescriptionCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionCritical.setDescription('Description of status when the virsual switch is critical')
sensorProbeVirtualSwitchDescriptionNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchDescriptionNormal.setDescription('Description of status when the virsual switch is normal')
sensorProbeVirtualSwitchAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchAcknowledgement.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchAcknowledgement.setDescription('Acknowledged sensor error and stop notification')
sensorProbeVirtualSwitchURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchURL.setDescription('Sensor URL link.')
sensorProbeVirtualSwitchOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeVirtualSwitchCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeVirtualSwitchNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 31, 2, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeVirtualSwitchNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeVirtualSwitchNormalState.setDescription('The normal state of a return of the virsual switch. If a return of the virsual switch is equal this normal state value, it is normal. Otherwise, it is critical.')
sensorProbeWattHoursSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32))
sensorProbeWattHoursSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeWattHoursSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursSensorNumber.setDescription('The total number of WattHours Sensor port.')
sensorProbeWattHoursSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2), )
if mibBuilder.loadTexts: sensorProbeWattHoursSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursSensorTable.setDescription('This table contains the data for every WattHours Sensor in the SensorArray. Each row in the table contains data for a different WattHours Sensor.')
sensorProbeWattHoursSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeWattHoursSensorIndex"))
if mibBuilder.loadTexts: sensorProbeWattHoursSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursSensorEntry.setDescription('This is an entry in the sensorProbeWattHoursSensorEntry Table')
sensorProbeWattHoursSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeWattHoursSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursSensorIndex.setDescription('A unique value for each WattHours sensor port.')
sensorProbeWattHoursDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeWattHoursDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursDescription.setDescription('A Description of this sensor')
sensorProbeWattHoursPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeWattHoursPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursPercent.setDescription('The relative WattHours percentage measured by this sensor')
sensorProbeWattHoursReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 32, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeWattHoursReset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWattHoursReset.setDescription('The relative WattHours percentage measured by this sensor')
sensorProbeTemperatureArraySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33))
sensorProbeTemperatureArrayPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1))
sensorProbeTemperatureArrayPort1Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort1Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort1Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort1 Table')
sensorProbeTemperatureArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort1HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort1HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort1LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort1Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort1DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort1DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort1Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort1URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort1OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort1DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort1ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort1ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort1Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort1Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort1RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort1NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort1HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort1LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort1HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort1LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort1EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 1, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort1EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2))
sensorProbeTemperatureArrayPort2Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort2Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort2 Table')
sensorProbeTemperatureArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort2HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort2HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort2LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort2Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort2DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort2DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort2Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort2URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort2OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort2DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort2ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort2ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort2Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort2Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort2RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort2NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort2HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort2LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort2HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort2LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort2EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 2, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort2EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3))
sensorProbeTemperatureArrayPort3Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort3Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort3Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort3 Table')
sensorProbeTemperatureArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort3HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort3HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort3LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort3LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort3Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort3DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort3DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort3Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort3URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort3OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort3DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort3ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort3ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort3Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort3Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort3Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort3RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort3NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort3HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort3LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort3HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort3LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort3EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 3, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort3EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4))
sensorProbeTemperatureArrayPort4Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort4Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort4Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort4 Table')
sensorProbeTemperatureArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort4HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort4HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort4LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort4LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort4Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort4DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort4DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort4Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort4URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort4OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort4DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort4ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort4ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort4Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort4Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort4RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort4NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort4HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort4LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort4HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort4LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort4EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 4, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort4EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5))
sensorProbeTemperatureArrayPort5Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort5Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort5Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort5 Table')
sensorProbeTemperatureArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort5HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort5HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort5LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort5LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort5Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort5DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort5DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort5Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort5URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort5OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort5DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort5ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort5ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort5Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort5Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort5Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort5RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort5NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort5HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort5LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort5HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort5LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort5EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 5, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort5EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6))
sensorProbeTemperatureArrayPort6Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort6Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort6Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort6 Table')
sensorProbeTemperatureArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort6Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort6HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort6HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort6LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort6LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort6Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort6DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort6DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort6Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort6URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort6OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort6DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort6ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort6ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort6Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort6Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort6Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort6RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort6NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort6HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort6LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort6HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort6LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort6EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 6, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort6EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7))
sensorProbeTemperatureArrayPort7Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort7Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort7Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort7 Table')
sensorProbeTemperatureArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort7Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort7Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort7HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort7HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort7LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort7LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort7Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort7DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort7DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort7Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort7URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort7OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort7DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort7ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort7ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort7Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort7Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort7Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort7Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort7RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort7NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort7HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort7LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort7HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort7LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort7EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 7, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort7EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeTemperatureArrayPort8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8))
sensorProbeTemperatureArrayPort8Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Number.setDescription('The total number of port on the TemperatureArray.')
sensorProbeTemperatureArrayPort8Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2), )
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Table.setDescription('This table contains the data for every Switch Sensor in the SensorArray. Each row in the table contains data for a different Switch Sensor.')
sensorProbeTemperatureArrayPort8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeTemperatureArrayPort8Index"))
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Entry.setDescription('This is an entry in the sensorProbeTemperatureArrayPort8 Table')
sensorProbeTemperatureArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Index.setDescription('A unique value for each sensor TemperatureArray port.')
sensorProbeTemperatureArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Description.setDescription('A Description of this sensor TemperatureArray')
sensorProbeTemperatureArrayPort8Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Value.setDescription('The value in this sensor')
sensorProbeTemperatureArrayPort8Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Status.setDescription('The current status of this Sensor')
sensorProbeTemperatureArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Online.setDescription('If this Sensor is currently online')
sensorProbeTemperatureArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeTemperatureArrayPort8HighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort8HighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8HighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort8LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeTemperatureArrayPort8LowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8LowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeTemperatureArrayPort8Rearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Rearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Rearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorProbeTemperatureArrayPort8DegreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahr", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeType.setDescription('The degrees are in fahrenheit(0) or in celsius(1)')
sensorProbeTemperatureArrayPort8DegreeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DegreeRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorProbeTemperatureArrayPort8Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Offset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Offset.setDescription('Offset reading')
sensorProbeTemperatureArrayPort8URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8URL.setDescription('Sensor URL link.')
sensorProbeTemperatureArrayPort8OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeTemperatureArrayPort8DatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8DatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeTemperatureArrayPort8ContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeTemperatureArrayPort8ContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8ContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeTemperatureArrayPort8Calendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Calendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTemperatureArrayPort8Calendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeThermostatTemperatureArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Index.setDescription('A unique value for each sensor thermostat port.')
sensorProbeThermostatTemperatureArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Description.setDescription('A Description of this sensor thermostat')
sensorProbeThermostatTemperatureArrayPort8Value = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Value.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Value.setDescription('The value in this sensor')
sensorProbeThermostatTemperatureArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Online.setDescription('If this Sensor is currently online')
sensorProbeThermostatTemperatureArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeThermostatTemperatureArrayPort8Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("time-bases", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Mode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8Mode.setDescription('To select the thermostat mode for working on time-bases(1) or normal(0).')
sensorProbeThermostatTemperatureArrayPort8RelayControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8RelayControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8RelayControlPort.setDescription('To select a relay port to be controled by this thermostat sensor.')
sensorProbeThermostatTemperatureArrayPort8NormalAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction1.setDescription('Profile1: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8HighLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit1.setDescription('Profile1: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort8HighLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction1.setDescription('Profile1: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8LowLimit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit1.setDescription('Profile1: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort8LowLimitAction1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction1.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction1.setDescription('Profile1: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8NormalAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8NormalAction2.setDescription('Profile2: Thermostat normal action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8HighLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimit2.setDescription('Profile2: When this sersor higher than thermostat high limit, it will take a high limit action.')
sensorProbeThermostatTemperatureArrayPort8HighLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8HighLimitAction2.setDescription('Profile2: Thermostat high limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8LowLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimit2.setDescription('Profile2: When this sersor higher than thermostat low limit, it will take a normal limit action.')
sensorProbeThermostatTemperatureArrayPort8LowLimitAction2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("turn-on", 0), ("turn-off", 1), ("no-change", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction2.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8LowLimitAction2.setDescription('Profile2: Thermostat low limit action for controlling a relay sensor.')
sensorProbeThermostatTemperatureArrayPort8EnableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 33, 8, 2, 1, 43), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8EnableTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeThermostatTemperatureArrayPort8EnableTime.setDescription('Time to enable on Thermostat')
sensorProbeNoCameraSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34))
sensorProbeNoCameraSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraSensorNumber.setDescription('The total number of no camera sensor port.')
sensorProbeNoCameraSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2), )
if mibBuilder.loadTexts: sensorProbeNoCameraSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraSensorTable.setDescription('This table contains the data for every no camera Sensor. Each row in the table contains data for a different NoCamera Sensor.')
sensorProbeNoCameraSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeNoCameraSensorIndex"))
if mibBuilder.loadTexts: sensorProbeNoCameraSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraSensorEntry.setDescription('This is an entry in the sensorProbeNoCameraSensorEntry Table')
sensorProbeNoCameraSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraSensorIndex.setDescription('A unique value for each no camera sensor port.')
sensorProbeNoCameraDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraDescription.setDescription('A Description of this sensor')
sensorProbeNoCameraStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraStatus.setDescription('The current status of this Sensor.')
sensorProbeNoCameraOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNoCameraOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraOnline.setDescription('If this Sensor is currently online')
sensorProbeNoCameraGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeNoCameraContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeNoCameraContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeNoCameraCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 34, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNoCameraCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNoCameraCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeSoftMotionSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35))
sensorProbeSoftMotionSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorNumber.setDescription('The total number of SoftMotionSensor port.')
sensorProbeSoftMotionSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2), )
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorTable.setDescription('This table contains the data for every SoftMotion Sensor. Each row in the table contains data for a different SoftMotion Sensor.')
sensorProbeSoftMotionSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeSoftMotionSensorIndex"))
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorEntry.setDescription('This is an entry in the sensorProbeSoftMotionSensorEntry Table')
sensorProbeSoftMotionSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionSensorIndex.setDescription('A unique value for each soft motion sensor port.')
sensorProbeSoftMotionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionDescription.setDescription('A Description of this sensor')
sensorProbeSoftMotionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionStatus.setDescription('The current status of this Sensor.')
sensorProbeSoftMotionOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoftMotionOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionOnline.setDescription('If this Sensor is currently online')
sensorProbeSoftMotionGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeSoftMotionPercentSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionPercentSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionPercentSensitivity.setDescription('The percent of sensitivity uses for setting the sentisitivity of motion detector.')
sensorProbeSoftMotionURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionURL.setDescription('Sensor URL link.')
sensorProbeSoftMotionOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeSoftMotionContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeSoftMotionContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeSoftMotionCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeSoftMotionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 35, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33554431))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoftMotionMask.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoftMotionMask.setDescription('Mask of enable or disable of SoftMotion.')
sensorProbeSoundDetectorSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36))
sensorProbeSoundDetectorSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorNumber.setDescription('The total number of SoundDetectorSensor port.')
sensorProbeSoundDetectorSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2), )
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorTable.setDescription('This table contains the data for every SoundDetectorSensor Sensor. Each row in the table contains data for a different SoundDetectorSensor Sensor.')
sensorProbeSoundDetectorSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeSoundDetectorIndex"))
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorSensorEntry.setDescription('This is an entry in the sensorProbeSoundDetectorSensorEntry Table')
sensorProbeSoundDetectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorIndex.setDescription('A unique value for each sound detector sensor port.')
sensorProbeSoundDetectorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorDescription.setDescription('A Description of this sensor')
sensorProbeSoundDetectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorValue.setDescription('The value in this sensor')
sensorProbeSoundDetectorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorStatus.setDescription('The current status of this Sensor')
sensorProbeSoundDetectorOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeSoundDetectorOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorOnline.setDescription('If this Sensor is currently online')
sensorProbeSoundDetectorGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorGoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeSoundDetectorHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorProbeSoundDetectorHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorProbeSoundDetectorLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorProbeSoundDetectorLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorProbeSoundDetectorRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down Rearm degrees below warning before the status goes to normal')
sensorProbeSoundDetectorRecordingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal-mic", 0), ("line-in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorRecordingSource.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorRecordingSource.setDescription('To select a recording source being in internal microphone(0) or in line-in(1).')
sensorProbeSoundDetectorMicBoost = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicBoost.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicBoost.setDescription('Enable or disable a microphone boost(+20 db).')
sensorProbeSoundDetectorMicSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 20, 40, 60, 80, 100))).clone(namedValues=NamedValues(("i0", 0), ("i20", 20), ("i40", 40), ("i60", 60), ("i80", 80), ("i100", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorMicSensitivity.setDescription('The sensitivity of microphone to detect sound.')
sensorProbeSoundDetectorPulseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorPulseLength.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorPulseLength.setDescription('Continuous time for detecting before changing status.')
sensorProbeSoundDetectorURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorURL.setDescription('Sensor URL link.')
sensorProbeSoundDetectorOpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorOpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorOpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeSoundDetectorDatacollectType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("average", 1), ("highest", 2), ("lowest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorDatacollectType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorDatacollectType.setDescription('Type of datacollect to collect.')
sensorProbeSoundDetectorContTimeHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorProbeSoundDetectorContTimeHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorProbeSoundDetectorContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeSoundDetectorContTimeLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorProbeSoundDetectorContTimeLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorProbeSoundDetectorContTimeSensorError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeSensorError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorContTimeSensorError.setDescription('Continuous time for this sensor to be in Sensor Error before accepting new Status.')
sensorProbeSoundDetectorCalendar = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 36, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSoundDetectorCalendar.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSoundDetectorCalendar.setDescription('Enable or disable the calendar filtering working hours of sensor.')
sensorProbeDrycontactArraySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37))
sensorProbeDrycontactArrayPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1))
sensorProbeDrycontactArrayPort1Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort1Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort1Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort1 Table')
sensorProbeDrycontactArrayPort1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort1Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort1NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort1Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort1ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort1ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort1ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputCycleTime.setDescription('Drycontact output toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort1ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ManualOutputAction.setDescription('Control the drycontact output manualy')
sensorProbeDrycontactArrayPort1OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort1OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort1URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1URL.setDescription('Sersor URL link.')
sensorProbeDrycontactArrayPort1OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort1ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort1ControlMode.setDescription('Control Mode used for selecting the mode to control a drycontact output.')
sensorProbeDrycontactArrayPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2))
sensorProbeDrycontactArrayPort2Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort2Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort2 Table')
sensorProbeDrycontactArrayPort2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort2Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort2NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort2Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort2ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort2ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort2ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort2ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort2OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort2OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort2URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2URL.setDescription('Sensor URL link')
sensorProbeDrycontactArrayPort2OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort2ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort2ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3))
sensorProbeDrycontactArrayPort3Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort3Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort3Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort3 Table')
sensorProbeDrycontactArrayPort3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort3Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort3Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort3NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort3Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort3ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort3ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort3ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort3ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort3OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort3OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort3URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort3OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort3ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort3ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4))
sensorProbeDrycontactArrayPort4Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort4Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort4Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort4 Table')
sensorProbeDrycontactArrayPort4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort4Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort4NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort4Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort4ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort4ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort4ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort4ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort4OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort4OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort4URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort4OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort4ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort4ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5))
sensorProbeDrycontactArrayPort5Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort5Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort5Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort5 Table')
sensorProbeDrycontactArrayPort5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort5Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort5Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort5NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort5Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort5ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort5ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort5ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort5ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort5OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort5OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort5URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort5OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort5ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort5ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6))
sensorProbeDrycontactArrayPort6Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort6Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort6Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort6 Table')
sensorProbeDrycontactArrayPort6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort6Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort6NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort6Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort6ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort6ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort6ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort6ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort6OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort6OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort6URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort6OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort6ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort6ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort7 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7))
sensorProbeDrycontactArrayPort7Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort7Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort7Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort7 Table')
sensorProbeDrycontactArrayPort7Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort7Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort7Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort7Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort7NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort7Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort7ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort7ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort7ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort7ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort7OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort7OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort7URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort7OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort7ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort7ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDrycontactArrayPort8 = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8))
sensorProbeDrycontactArrayPort8Number = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Number.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Number.setDescription('The total number of port on the DrycontactArray.')
sensorProbeDrycontactArrayPort8Table = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2), )
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Table.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Table.setDescription('This table contains the data for every Drycontact Sensor in the SensorArray. Each row in the table contains data for a different Drycontact Sensor.')
sensorProbeDrycontactArrayPort8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeDrycontactArrayPort8Index"))
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Entry.setDescription('This is an entry in the sensorProbeDrycontactArrayPort8 Table')
sensorProbeDrycontactArrayPort8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Index.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Index.setDescription('A unique value for each sensor DrycontactArray port.')
sensorProbeDrycontactArrayPort8Description = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Description.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Description.setDescription('A Description of this sensor DrycontactArray')
sensorProbeDrycontactArrayPort8Status = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Status.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Status.setDescription('The current status of this Sensor')
sensorProbeDrycontactArrayPort8Online = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Online.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Online.setDescription('If this Sensor is currently online')
sensorProbeDrycontactArrayPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8GoOnline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorProbeDrycontactArrayPort8NormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8NormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8NormalState.setDescription('The normal state of DrycontactArray')
sensorProbeDrycontactArrayPort8Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8Direction.setDescription('To set a drycontact to input enter 0. To set a switch to output enter 1')
sensorProbeDrycontactArrayPort8ContTimeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeCritical.setDescription('Continuous time for this sensor to be in Critical before accepting new Status.')
sensorProbeDrycontactArrayPort8ContTimeNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ContTimeNormal.setDescription('Continuous time for this sensor to be in Normal before accepting new Status.')
sensorProbeDrycontactArrayPort8ManualOutputCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputCycleTime.setDescription('Drycontact toggle period in seconds for Manual Cycle action.')
sensorProbeDrycontactArrayPort8ManualOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 7, 8))).clone(namedValues=NamedValues(("allow-sensor-control", 1), ("turn-on", 3), ("turn-off", 4), ("cycle-Off-On-Off", 7), ("cycle-On-Off-On", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ManualOutputAction.setDescription('Control the Drycontact output manualy')
sensorProbeDrycontactArrayPort8OutputDescOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOn.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOn.setDescription('Description of Drycontact output On')
sensorProbeDrycontactArrayPort8OutputDescOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOff.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OutputDescOff.setDescription('Description of Drycontact output Off')
sensorProbeDrycontactArrayPort8URL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8URL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8URL.setDescription('Sensor URL link.')
sensorProbeDrycontactArrayPort8OpenURL = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cur-window", 0), ("new-window", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OpenURL.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8OpenURL.setDescription('Open URL in this browser or open in a new window.')
sensorProbeDrycontactArrayPort8ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 19, 37, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("notification-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDrycontactArrayPort8ControlMode.setDescription('Control Mode used for selecting the mode to control a Drycontact output.')
sensorProbeDebug = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDebug.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDebug.setDescription('SP only: Turn on or off debug messages')
sensorProbeTrapResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapResend.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapResend.setDescription('If traps for Warning or Error should be resent. Traps for Normal status are sent once')
sensorProbeTrapResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapResendInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapResendInterval.setDescription('How often to resend mail or Traps. Enter the number of seconds from 15 to 65535. Mail for WARNING and ERROR are resent at this interval. Traps for Normal status are sent once')
sensorProbeSendTraps = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendTraps.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSendTraps.setDescription('Turn on or off the sending of traps')
sensorProbeTrapDestination = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapDestination.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapDestination.setDescription('The IP address of the trap destination')
sensorProbeTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapCommunity.setDescription('The community string of the trap destination')
sensorProbeDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDefaultGateway.setDescription('If the destination is on another network, enter the IP address of the router')
sensorProbeSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSubnetMask.setDescription('If the trap destination uses the default gateway')
sensorProbeRouteAdd = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRouteAdd.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRouteAdd.setDescription('SP only: Up to 4, Manual additions to the routing table in the form, Network IP Address, Netmask, Gateway IP address')
sensorProbeSendMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSendMail.setDescription('Turn on or off the sending of Mail')
sensorProbeMailRecpt = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailRecpt.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailRecpt.setDescription('The email address of the Recipient')
sensorProbeMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailFrom.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailFrom.setDescription('The email address of the Sender')
sensorProbeMailSMTP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailSMTP.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailSMTP.setDescription('The Address of the SMTP server')
sensorProbeMailJpgInline = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inline", 1), ("link", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailJpgInline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailJpgInline.setDescription('If the jpg for this event is sent as an http link or is included with mail as an attachment')
sensorProbeMailResendInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailResendInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailResendInterval.setDescription('How often to resend mail or Traps. Enter the number of seconds from 10 to 60. Mail for WARNING and ERROR are resent at this interval. Mail for Normal status are sent once')
sensorProbeMailMaxResend = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailMaxResend.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailMaxResend.setDescription('The maximum number of times to resend mail. If set to 0 only send once. The maximum value is 5')
sensorProbeMailLastStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeMailLastStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailLastStatus.setDescription('The status of the most recent attempt to send an email')
sensorProbeSupportMailRcpt = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSupportMailRcpt.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSupportMailRcpt.setDescription('SP8L only: E-Mail address of support')
sensorProbeCameraServerTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42), )
if mibBuilder.loadTexts: sensorProbeCameraServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerTable.setDescription('CP8 Only: This table contains the Camera Server features, This allows the sensorProbe to connect to a sensorProbe')
sensorProbeCameraServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorProbeCameraServerIndex"))
if mibBuilder.loadTexts: sensorProbeCameraServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerEntry.setDescription('This is an entry in the sensorProbeCameraServerEntry Table')
sensorProbeCameraServerClientOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeCameraServerClientOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerClientOnline.setDescription('If this Client is currently online')
sensorProbeCameraServerClientGoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraServerClientGoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerClientGoOnline.setDescription('To put this Client online enter a 1, to take offline enter a 2')
sensorProbeCameraServerClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraServerClientIP.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerClientIP.setDescription('The IP address of the sensorProbe, used to send snmp keep alive messages')
sensorProbeCameraServerClientSetPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraServerClientSetPassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerClientSetPassword.setDescription('SP Only: The Set Password for the snmp keep alive messages sent to the sensorProbes')
sensorProbeCameraServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeCameraServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraServerIndex.setDescription('The index into the Camera table')
sensorProbeJavaTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeJavaTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeJavaTimeOut.setDescription('Timeout in minutes for Java client')
sensorProbeJpegQualityFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeJpegQualityFactor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeJpegQualityFactor.setDescription('Quality factor of jpeg image')
sensorProbeCameraDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraDescription.setDescription('A description of camera')
sensorProbeCameraRotate = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonRotate", 0), ("rotate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraRotate.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraRotate.setDescription('A Rotate of this camera')
sensorProbeCameraResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resolution320x240", 0), ("resolution640x480", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeCameraResolution.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeCameraResolution.setDescription('Resolution of camera')
sensorProbePTZRotateRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZRotateRelative.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZRotateRelative.setDescription("Control PTZ by put Direction and step 'DIR STEP' when direction 0 or 1 is LEFT or RIGH and 2 or 3 is UP or DOWN ")
sensorProbePTZRotateAbsolute = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZRotateAbsolute.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZRotateAbsolute.setDescription("Control PTZ by put position of x and y 'POS_X POS_Y' value of position is 0 to 100")
sensorProbeAudioAttachChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAttachAudio", 0), ("attachAudio", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAudioAttachChannel.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAudioAttachChannel.setDescription('Disable/Enable audio attachment')
sensorProbePTZEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enableInternal", 1), ("enableExternal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZEnable.setDescription('Disable/Enable Ptz controller')
sensorProbePTZBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("generalBrand", 0), ("akcpBrand", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZBrand.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZBrand.setDescription('PTZ Brand')
sensorProbePTZPanTiltUntilEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 42, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stop", 0), ("right", 1), ("left", 2), ("up", 3), ("down", 4), ("right-up", 5), ("right-down", 6), ("left-up", 7), ("left-down", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbePTZPanTiltUntilEnd.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbePTZPanTiltUntilEnd.setDescription('Pan or Tilt PTZ until endpoint')
sensorProbeTrapMailPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapMailPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapMailPollInterval.setDescription('SP Only: How often the sensor thresholds are tested before sending traps or mail. This can vary from 3 to 15 seconds')
sensorProbeSendTestMail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendTestMail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSendTestMail.setDescription('Send out an email test message')
sensorProbeLastSystemError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeLastSystemError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeLastSystemError.setDescription('A text string containing the description of the last system error')
sensorProbeDataCollectionPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDataCollectionPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDataCollectionPeriod.setDescription('The number of minutes between collections of the data logger. This can vary from 1 to 60 minutes')
sensorProbeMailTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailTimeout.setDescription('The number of seconds to wait for a timeout while sending email This can vary from 10 to 30 seconds')
sensorProbeAutoSense = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAutoSense.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAutoSense.setDescription('Enable Auto-sense feature')
sensorProbeChecksum = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeChecksum.setDescription('SP Only: The Flash Checksum, computed dynamically whenever this object is read')
sensorProbeUsePassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usePassword", 0), ("doNotUsePassword", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUsePassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeUsePassword.setDescription('Determines whether or not the set and get community are used to check for access rights')
sensorProbeDisplayLogo = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDisplayLogo.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDisplayLogo.setDescription('Enable or Disable the display of the logo')
sensorProbeTrapType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("specificTypeTrap", 1), ("generalTypeTrap", 2), ("bothTypeTraps", 3), ("statusTypeTraps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapType.setDescription('Whether to generate a trap that covers all sensors, a specific trap for each sensor, or both types of traps')
sensorProbeMailCC = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 61), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailCC.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailCC.setDescription('The email address of the CC')
sensorProbeAllowIPChange = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAllowIPChange.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAllowIPChange.setDescription('This disables the changing of the IP address. The default is to enable changing the IP address')
sensorProbeTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 65), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTimeOfDay.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTimeOfDay.setDescription('The time of day in the format day/month/year hour(1-24):minutes:seconds for example 23/10/02 12:45:06')
sensorProbeEnableSysLog = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLogToFlash", 1), ("enableLogToNetAndFlash", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeEnableSysLog.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeEnableSysLog.setDescription('This enables sysLog Messages,including logging to the Net. The Destination IP of the net messages is the same as the source IP of the sender of this command')
sensorProbeReadSysLog = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lastMessage", 1), ("allMessages", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeReadSysLog.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeReadSysLog.setDescription('Return the sysLog Message in the snmp PDU and if enableLogToNetAndFlash in sensorProbeEnableSysLog, also send in debug message format, A Write of a 2 will return all of the messages in debug format')
sensorProbeClearSysLog = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("allMessages", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeClearSysLog.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeClearSysLog.setDescription('Delete all entries in the sys log')
sensorProbeSyslogDestIP = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 69), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSyslogDestIP.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSyslogDestIP.setDescription('The IP Address of the Syslog server. Note: This must be in dotted decimal form')
sensorProbeSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 70), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSyslogPort.setDescription('The Port Number of the Syslog server.')
sensorProbeSetSyslogMsgPrefix = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSetSyslogMsgPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSetSyslogMsgPrefix.setDescription('SP Only: The Prefix message of the Syslog message')
sensorProbeTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 81), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTimeZone.setDescription('System time zone')
sensorProbeMegaVersion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeMegaVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMegaVersion.setDescription('Version number of mega board')
sensorProbeNtpMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notUse", 0), ("oneTime", 1), ("onSystemStartUp", 2), ("onceAMounth", 3), ("onceAWeek", 4), ("onceADay", 5), ("onceAnHour", 6), ("continuous", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNtpMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNtpMode.setDescription('Mode to synchronous with ntp server')
sensorProbeNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 85), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNtpServer.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNtpServer.setDescription('NTP server which this machine synchronous with')
sensorProbeSMTPAuth = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSMTPAuth.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSMTPAuth.setDescription('This enables the SMTP authentication')
sensorProbeSMTPLogin = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 88), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSMTPLogin.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSMTPLogin.setDescription('The username used to login into SMTP server')
sensorProbeSMTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 89), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSMTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSMTPPassword.setDescription('The password used to login into SMTP server')
sensorProbeDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 90), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDNSServer.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDNSServer.setDescription('IP address of the DNS server')
sensorProbeAltWebPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 91), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAltWebPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAltWebPort.setDescription('The alternative for a port number 80 used to access the web interface')
sensorProbeNumberOfSensorPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeNumberOfSensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNumberOfSensorPort.setDescription('The number of sensor ports(regardless of their current state)')
sensorProbeSendTrapsAlive = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSendTrapsAlive.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSendTrapsAlive.setDescription('On or off send keep alive traps.')
sensorProbeTrapReIntervalAlive = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 94), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTrapReIntervalAlive.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTrapReIntervalAlive.setDescription('Time between each keep alive trap.')
sensorProbeUseCamera = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUseCamera.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeUseCamera.setDescription('On or off camera.')
sensorProbeAdcCalibratePort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 96), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeAdcCalibratePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeAdcCalibratePort.setDescription('Calibrate value for analog sensor.')
sensorProbeMailSubject = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 98), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailSubject.setDescription('Email Subject.')
sensorProbeSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 99), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSnmpPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSnmpPort.setDescription('SP Only: Port number used to access snmp')
sensorProbeSnmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 100), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSnmpTrapPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSnmpTrapPort.setDescription('SP Only: Port number used to access trap snmp')
sensorProbeSnmpIndexingMode = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("index0", 0), ("index1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSnmpIndexingMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSnmpIndexingMode.setDescription('CP8 Only: Snmp table index starting from 0 or 1 ')
sensorProbeNotifyBoot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeNotifyBoot.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeNotifyBoot.setDescription('SP2 Only: Enable Notify on boot up')
sensorProbeDelayNotifyBoot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 104), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeDelayNotifyBoot.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeDelayNotifyBoot.setDescription('SP2 Only: Delay time for boot up notify')
sensorProbeSmtpPort = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 105), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSmtpPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSmtpPort.setDescription('SMTP Port number used to send email')
sensorProbeReboot = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 106), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeReboot.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeReboot.setDescription('Reboot SP2/SP8 set to 1')
sensorProbeServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeServerEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeServerEnable.setDescription('Enable database changed notify feature')
sensorProbeFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeFirmwareVersion.setDescription('Current firmware version')
sensorProbeProductType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sensorProbe2", 1), ("sensorProbe8", 2), ("sensorProbeLinuxWithoutUSB", 3), ("sensorProbeLinuxWithUSB", 4), ("securityProbe", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeProductType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeProductType.setDescription('Product type')
sensorProbeRequestResendTrap = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 110), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeRequestResendTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeRequestResendTrap.setDescription('SP only: Send immediately all traps by set to 1')
sensorProbeSeparateEmail = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSeparate", 0), ("separate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeSeparateEmail.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeSeparateEmail.setDescription('SP only: Separate Email by set 1 for not Separate Email set 0')
sensorProbeMailCustom = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("custom", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeMailCustom.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeMailCustom.setDescription("SP only: Custom mail is removed 'http://' in the mail footer")
sensorProbeUntidePassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tidePassword", 0), ("untidePassword", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeUntidePassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeUntidePassword.setDescription('Use web password as SNMP password')
sensorProbeWebPassword = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 115))
sensorProbeWebAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 115, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeWebAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWebAdminPassword.setDescription('Password Admin for login web and other connections')
sensorProbeWebUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 115, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeWebUserPassword.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeWebUserPassword.setDescription('Password User for login web and other connections')
sensorProbeReloadNetwork = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeReloadNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeReloadNetwork.setDescription('Set 1 for reload network seting')
sensorProbeStatusNumber = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117))
sensorProbeStatusNumberNotNormal = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeStatusNumberNotNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeStatusNumberNotNormal.setDescription('Number of sensor status is Warning, Critical and Sensor Error')
sensorProbeStatusNumberCriticalAndError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeStatusNumberCriticalAndError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeStatusNumberCriticalAndError.setDescription('Number of sensor status is Critical and Sensor Error')
sensorProbeStatusNumberError = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 117, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeStatusNumberError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeStatusNumberError.setDescription('Number of sensor status is Sensor Error')
sensorProbeTypeName = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118))
sensorProbeTypeTemperatureName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeTemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeTemperatureName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSHT11HumidityName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSHT11HumidityName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSHT11HumidityName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSHT11TempName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSHT11TempName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSHT11TempName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeType4to20MAName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeType4to20MAName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeType4to20MAName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeDCvoltageName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeDCvoltageName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeDCvoltageName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeAirflowName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeAirflowName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeAirflowName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeDrycontactInoutName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInoutName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInoutName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeDrycontactInputName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInputName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeDrycontactInputName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeMotionName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeMotionName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeMotionName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeWaterName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeWaterName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeWaterName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSecurityName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSecurityName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSecurityName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSirenName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSirenName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSirenName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeRelayName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeRelayName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeRelayName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeACvoltageName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeACvoltageName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeACvoltageName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763VRMSName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763VRMSName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763VRMSName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763IRMSName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763IRMSName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763IRMSName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763WattName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763WattName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763WattName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763WatthourName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763WatthourName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763WatthourName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypePCF8574XRelayName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypePCF8574XRelayName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypePCF8574XRelayName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeThermocoupleName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeThermocoupleName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeThermocoupleName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSmokeName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSmokeName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSmokeName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeXDryName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeXDryName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeXDryName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeTemperatureArrayName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeTemperatureArrayName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeTemperatureArrayName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeWaterRopeName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeWaterRopeName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeWaterRopeName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeFuelLevelName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeFuelLevelName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeFuelLevelName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeTankSenderName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeTankSenderName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeTankSenderName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeThurmostatName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 128), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeThurmostatName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeThurmostatName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeVirtualName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 129), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeVirtualName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeVirtualName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSoundName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 130), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSoundName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSoundName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSoftMotionName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 131), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSoftMotionName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSoftMotionName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeNoSignalName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 132), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeNoSignalName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeNoSignalName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypePowerMeterName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 134), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypePowerMeterName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypePowerMeterName.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeSHT11Name = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 135), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeSHT11Name.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeSHT11Name.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeTypeADE7763Name = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 118, 136), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorProbeTypeADE7763Name.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeTypeADE7763Name.setDescription('A Description of Sensor Type Name on web interface')
sensorProbeProductRevision = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorProbeProductRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sensorProbeProductRevision.setDescription('SP only: Revision number')
securityProbe = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2))
secSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 1))
secDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 2))
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1), )
if mibBuilder.loadTexts: deviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTable.setDescription('This table contains the property for every plugged-in device.')
deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceIndex"))
if mibBuilder.loadTexts: deviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceEntry.setDescription('This is an entry in the deviceEntry Table')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 184549375))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIndex.setDescription('The index into the device table')
deviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDescription.setDescription('A Description of this device')
deviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('mandatory')
if mibBuilder.loadTexts: deviceType.setDescription('...')
deviceInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfo.setStatus('mandatory')
if mibBuilder.loadTexts: deviceInfo.setDescription('A information of this device')
deviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceStatus.setDescription('...')
deviceIntelligentTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2), )
if mibBuilder.loadTexts: deviceIntelligentTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentTable.setDescription('This table contains the property for every plugged-in device.')
deviceIntelligentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceIntelligentIndex"))
if mibBuilder.loadTexts: deviceIntelligentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentEntry.setDescription('This is an entry in the deviceEntry Table')
deviceIntelligentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentIndex.setDescription('The index into the deviceIntelligent table')
deviceIntelligentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceIntelligentDescription.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentDescription.setDescription('A Description of this device')
deviceIntelligentInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentInfo.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentInfo.setDescription('A information of this device')
deviceIntelligentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIntelligentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIntelligentStatus.setDescription('...')
sensorIntelligentTypeSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentTypeSelected.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentTypeSelected.setDescription('...')
sensorIntelligentPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort1GoOnline.setDescription('...')
sensorIntelligentPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort2GoOnline.setDescription('...')
sensorIntelligentPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort3GoOnline.setDescription('...')
sensorIntelligentPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort4GoOnline.setDescription('...')
sensorIntelligentPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort5GoOnline.setDescription('...')
sensorIntelligentPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort6GoOnline.setDescription('...')
sensorIntelligentPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort7GoOnline.setDescription('...')
sensorIntelligentPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorIntelligentPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIntelligentPort8GoOnline.setDescription('...')
deviceDryContactTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3), )
if mibBuilder.loadTexts: deviceDryContactTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactTable.setDescription('This table contains the property for every plugged-in device.')
deviceDryContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "deviceDryContactIndex"))
if mibBuilder.loadTexts: deviceDryContactEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactEntry.setDescription('This is an entry in the deviceEntry Table')
deviceDryContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactIndex.setDescription('The index into the deviceDryContact table')
deviceDryContactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceDryContactDescription.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactDescription.setDescription('A Description of this device')
deviceDryContactInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactInfo.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactInfo.setDescription('A information of this device')
deviceDryContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDryContactStatus.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDryContactStatus.setDescription('...')
sensorDryContactPort1GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort1GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort1GoOnline.setDescription('...')
sensorDryContactPort2GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort2GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort2GoOnline.setDescription('...')
sensorDryContactPort3GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort3GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort3GoOnline.setDescription('...')
sensorDryContactPort4GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort4GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort4GoOnline.setDescription('...')
sensorDryContactPort5GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort5GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort5GoOnline.setDescription('...')
sensorDryContactPort6GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort6GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort6GoOnline.setDescription('...')
sensorDryContactPort7GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort7GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort7GoOnline.setDescription('...')
sensorDryContactPort8GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort8GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort8GoOnline.setDescription('...')
sensorDryContactPort9GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort9GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort9GoOnline.setDescription('...')
sensorDryContactPort10GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort10GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort10GoOnline.setDescription('...')
sensorDryContactPort11GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort11GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort11GoOnline.setDescription('...')
sensorDryContactPort12GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort12GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort12GoOnline.setDescription('...')
sensorDryContactPort13GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort13GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort13GoOnline.setDescription('...')
sensorDryContactPort14GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort14GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort14GoOnline.setDescription('...')
sensorDryContactPort15GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort15GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort15GoOnline.setDescription('...')
sensorDryContactPort16GoOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 2, 3, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goOnline", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactPort16GoOnline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort16GoOnline.setDescription('...')
secSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 2, 3))
sensorTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1), )
if mibBuilder.loadTexts: sensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTable.setDescription('This table contains the property and reading value for every sensor.')
sensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorEntry.setDescription('This is an entry in the sensorTable Table')
sensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorIndex.setDescription('The index into the sensor table')
sensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDescription.setDescription('A Description of this sensor')
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 128, 129, 130, 131, 132, 133, 224, 255))).clone(namedValues=NamedValues(("temperature", 1), ("humidity", 2), ("temperature2", 3), ("four-20mA", 4), ("dcvoltage", 5), ("airflow", 6), ("io", 7), ("drycontact", 8), ("motion", 9), ("water", 10), ("security", 11), ("siren", 12), ("relay", 13), ("acvoltage", 14), ("vrms", 15), ("irms", 16), ("watt", 17), ("watthour", 18), ("xrelay", 19), ("thermocouple", 20), ("smoke", 21), ("drycontact-array", 22), ("temperature-array", 23), ("thermostat", 128), ("virtual", 129), ("sound", 130), ("softmotion", 131), ("camera-dummy", 132), ("board-state", 133), ("nosignal", 224), ("test", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorType.setDescription('Enter the type of this Sensor')
sensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorValue.setDescription('The value in this sensor')
sensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorUnit.setDescription('The unit string')
sensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorStatus.setDescription('The current status of this sensor')
sensorGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorGoOffline.setDescription('To take offline enter a 2')
sensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPort.setDescription('Sensor port')
sensorSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSubPort.setDescription('Sensor sub port')
sensorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDeviceIndex.setDescription('Device Index of sensor')
sensorDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDisplayStyle.setDescription('Temperature display style')
sensorHighCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHighCriticalDescription.setDescription('A HighCritical Description of this sensor')
sensorLowCriticalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowCriticalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorLowCriticalDescription.setDescription('A LowCritical Description of this sensor')
sensorNormalDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorNormalDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorNormalDescription.setDescription('A Normal Description of this sensor')
sensorLowWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorLowWarningDescription.setDescription('A LowWarning Description of this sensor')
sensorHighWarningDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighWarningDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHighWarningDescription.setDescription('A HighWarning Description of this sensor')
sensorErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorErrorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorErrorDescription.setDescription('A SensorError Description of this sensor')
sensorOnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOnDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorOnDescription.setDescription('A On Description of this sensor')
sensorOffDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOffDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorOffDescription.setDescription('A Off Description of this sensor')
sensorHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorNormalColor.setDescription('A Normal Color of this sensor')
sensorLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorOnColor.setDescription('A On Color of this sensor')
sensorOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorOffColor.setDescription('A Off Color of this sensor')
sensorTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2), )
if mibBuilder.loadTexts: sensorTemperatureTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureTable.setDescription('This table contains the property and reading value for every Temperature sensor.')
sensorTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorTemperatureIndex"))
if mibBuilder.loadTexts: sensorTemperatureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureIndex.setDescription('The index into the sensor table')
sensorTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDescription.setDescription('A Description of this sensor')
sensorTemperatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 20))).clone(namedValues=NamedValues(("temperature", 1), ("dualsensor", 3), ("thermocouple", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureType.setDescription('Enter the type of this Sensor')
sensorTemperatureDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureDegree.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDegree.setDescription('The degrees in this sensor')
sensorTemperatureUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureUnit.setDescription('The unit string')
sensorTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureStatus.setDescription('The current status of this Sensor')
sensorTemperatureGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureGoOffline.setDescription('To take offline enter a 2')
sensorTemperatureLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorTemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorTemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorTemperatureHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorTemperatureRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorTemperatureDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorTemperatureDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorTemperatureDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorTemperatureDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorTemperatureDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorTemperatureDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorTemperatureRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureRaw.setDescription('The raw degree data from the temperature sensor, slightly higher resolution')
sensorTemperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureOffset.setDescription('Temperature Offset reading')
sensorTemperaturePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperaturePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperaturePort.setDescription('Sensor port')
sensorTemperatureSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureSubPort.setDescription('Sensor sub port')
sensorTemperatureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTemperatureDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDeviceIndex.setDescription('Device Index of sensor')
sensorTemperatureDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureDisplayStyle.setDescription('Temperature display style')
sensorTemperatureHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorTemperatureLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorTemperatureNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureNormalDesc.setDescription('A Normal Description of this sensor')
sensorTemperatureLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorTemperatureHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorTemperatureSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorTemperatureHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorTemperatureLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorTemperatureNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureNormalColor.setDescription('A Normal Color of this sensor')
sensorTemperatureLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorTemperatureHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorTemperatureSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTemperatureSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTemperatureSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3), )
if mibBuilder.loadTexts: sensorHumidityTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityTable.setDescription('This table contains the property and reading value for every sensor.')
sensorHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorHumidityIndex"))
if mibBuilder.loadTexts: sensorHumidityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorHumidityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityIndex.setDescription('The index into the sensor table')
sensorHumidityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDescription.setDescription('A Description of this sensor')
sensorHumidityPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityPercent.setDescription('The relative humidity percentage measured by this sensor')
sensorHumidityUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityUnit.setDescription('The unit string')
sensorHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityStatus.setDescription('The current status of this Sensor')
sensorHumidityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityGoOffline.setDescription('To take offline enter a 2')
sensorHumidityLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorHumidityLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorHumidityHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorHumidityHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorHumidityRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorHumidityDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorHumidityDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorHumidityDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorHumidityDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorHumidityDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorHumidityDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorHumidityRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorHumidityOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityOffset.setDescription('Humidity Offset reading')
sensorHumidityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityPort.setDescription('Sensor port')
sensorHumiditySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumiditySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumiditySubPort.setDescription('Sensor sub port')
sensorHumidityDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorHumidityDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDeviceIndex.setDescription('Device Index of sensor')
sensorHumidityDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityDisplayStyle.setDescription('Humidity display style')
sensorHumidityHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorHumidityLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorHumidityNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityNormalDesc.setDescription('A Normal Description of this sensor')
sensorHumidityLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorHumidityHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorHumiditySensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumiditySensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumiditySensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorHumidityHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorHumidityLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorHumidityNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityNormalColor.setDescription('A Normal Color of this sensor')
sensorHumidityLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorHumidityHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumidityHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumidityHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorHumiditySensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 3, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHumiditySensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorHumiditySensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorDryContactTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4), )
if mibBuilder.loadTexts: sensorDryContactTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactTable.setDescription('This table contains the property and reading value for every sensor.')
sensorDryContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorDryContactIndex"))
if mibBuilder.loadTexts: sensorDryContactEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorDryContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactIndex.setDescription('The index into the Switch sensor table')
sensorDryContactDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactDescription.setDescription('A Description of this sensor Switch')
sensorDryContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 22))).clone(namedValues=NamedValues(("drycontact-inout", 7), ("drycontact-input", 8), ("drycontact-array", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactType.setDescription('Enter the type of this Sensor')
sensorDryContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("outputLow", 8), ("outputHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorDryContactGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactGoOffline.setDescription('To take offline enter a 2')
sensorDryContactDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("input", 0), ("output", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactDirection.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactDirection.setDescription('To set a switch to input enter 0. To set a switch to output enter 1')
sensorDryContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("closed", 0), ("open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactNormalState.setDescription('The normal state of an input switch. If an input switch is in this state it is normal, else it is critical. An open switch senses +5 volts. A closed switch senses 0 volts.')
sensorDryContactControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactControlMode.setDescription('Control Mode used for selecting the mode to control a sensor output.')
sensorDryContactOutputManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOutputManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOutputManualCycleTime.setDescription('Toggle period in seconds for Manual Cycle action.')
sensorDryContactOutputManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 1), ("cycle-Low-High-Low", 2), ("cycle-High-Low-High", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOutputManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOutputManualAction.setDescription('Control the sensor output manualy')
sensorDryContactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactPort.setDescription('Sensor port')
sensorDryContactSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactSubPort.setDescription('Sensor sub port')
sensorDryContactDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDryContactDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactDeviceIndex.setDescription('Device Index of sensor')
sensorDryContactCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactCriticalDesc.setDescription('A Critical Description of this sensor')
sensorDryContactNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactNormalDesc.setDescription('A Normal Description of this sensor')
sensorDryContactOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOnDesc.setDescription('A On Description of this sensor')
sensorDryContactOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOffDesc.setDescription('A Off Description of this sensor')
sensorDryContactCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactCriticalColor.setDescription('A Critical Color of this sensor')
sensorDryContactNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactNormalColor.setDescription('A Normal Color of this sensor')
sensorDryContactOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOnColor.setDescription('A On Color of this sensor')
sensorDryContactOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 4, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDryContactOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDryContactOffColor.setDescription('A Off Color of this sensor')
sensor4to20mATable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5), )
if mibBuilder.loadTexts: sensor4to20mATable.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mATable.setDescription('This table contains the property and reading value for every sensor.')
sensor4to20mAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensor4to20mAIndex"))
if mibBuilder.loadTexts: sensor4to20mAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensor4to20mAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAIndex.setDescription('The index into the sensor table')
sensor4to20mADescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADescription.setDescription('A Description of this sensor')
sensor4to20mAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAValue.setDescription('The reading value in this sensor')
sensor4to20mAUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAUnit.setDescription('The unit string')
sensor4to20mAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAStatus.setDescription('The current status of this Sensor')
sensor4to20mAGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAGoOffline.setDescription('To take offline enter a 2')
sensor4to20mALowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensor4to20mALowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensor4to20mAHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensor4to20mAHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensor4to20mARearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mARearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mARearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensor4to20mADelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensor4to20mADelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensor4to20mADelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensor4to20mADelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensor4to20mADelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensor4to20mADelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensor4to20mARaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mARaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mARaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensor4to20mAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAOffset.setDescription('4to20mA Offset reading')
sensor4to20mAAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAAmountMaxVoltage.setDescription('The maximum scale of 4to20mA conversion.')
sensor4to20mAAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAAmountBaseVoltage.setDescription('The base scale of 4to20mA conversion.')
sensor4to20mAPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mAPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAPort.setDescription('Sensor port')
sensor4to20mASubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mASubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mASubPort.setDescription('Sensor sub port')
sensor4to20mADeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensor4to20mADeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADeviceIndex.setDescription('Device Index of sensor')
sensor4to20mAMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAMaxVoltage.setDescription('The max range for use in conversion.')
sensor4to20mABaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mABaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mABaseVoltage.setDescription('The base range for use in conversion.')
sensor4to20mADisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mADisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mADisplayStyle.setDescription('4to20mA display style')
sensor4to20mAHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensor4to20mALowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensor4to20mANormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mANormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mANormalDesc.setDescription('A Normal Description of this sensor')
sensor4to20mALowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensor4to20mAHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensor4to20mASensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mASensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mASensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensor4to20mAHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensor4to20mALowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensor4to20mANormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mANormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mANormalColor.setDescription('A Normal Color of this sensor')
sensor4to20mALowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mALowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mALowWarningColor.setDescription('A LowWarning Color of this sensor')
sensor4to20mAHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mAHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mAHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensor4to20mASensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 5, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensor4to20mASensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensor4to20mASensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorDCvoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6), )
if mibBuilder.loadTexts: sensorDCvoltageTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageTable.setDescription('This table contains the property and reading value for every sensor.')
sensorDCvoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorDCvoltageIndex"))
if mibBuilder.loadTexts: sensorDCvoltageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorDCvoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageIndex.setDescription('The index into the sensor table')
sensorDCvoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDescription.setDescription('A Description of this sensor')
sensorDCvoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageValue.setDescription('The reading value in this sensor')
sensorDCvoltageUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageUnit.setDescription('The unit string')
sensorDCvoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageStatus.setDescription('The current status of this Sensor')
sensorDCvoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageGoOffline.setDescription('To take offline enter a 2')
sensorDCvoltageLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorDCvoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorDCvoltageHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorDCvoltageHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorDCvoltageRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorDCvoltageDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorDCvoltageDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorDCvoltageDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorDCvoltageDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorDCvoltageDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorDCvoltageDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorDCvoltageRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorDCvoltageOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageOffset.setDescription('DC voltage Offset reading')
sensorDCvoltageJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-600, -400, -300, -200, -100, 100, 200, 300, 400, 600))).clone(namedValues=NamedValues(("jumperAt-60", -600), ("jumperAt-40", -400), ("jumperAt-30", -300), ("jumperAt-20", -200), ("jumperAt-10", -100), ("jumperAt10", 100), ("jumperAt20", 200), ("jumperAt30", 300), ("jumperAt40", 400), ("jumperAt60", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageJumper.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageJumper.setDescription('Selected voltage scale (jumper 0) in DC voltage conversion.')
sensorDCvoltageAmountMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageAmountMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageAmountMaxVoltage.setDescription('The maximum scale of DC voltage conversion.')
sensorDCvoltageAmountBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageAmountBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageAmountBaseVoltage.setDescription('The base scale of DC voltage conversion.')
sensorDCvoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltagePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltagePort.setDescription('Sensor port')
sensorDCvoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageSubPort.setDescription('Sensor sub port')
sensorDCvoltageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorDCvoltageDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDeviceIndex.setDescription('Device Index of sensor')
sensorDCvoltageMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageMaxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageMaxVoltage.setDescription('The max voltage range for use in conversion.')
sensorDCvoltageBaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageBaseVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageBaseVoltage.setDescription('The base voltage range for use in conversion.')
sensorDCvoltageDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageDisplayStyle.setDescription('DCVoltage display style')
sensorDCvoltageHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorDCvoltageLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorDCvoltageNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageNormalDesc.setDescription('A Normal Description of this sensor')
sensorDCvoltageLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorDCvoltageHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorDCvoltageSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorDCvoltageHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorDCvoltageLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorDCvoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageNormalColor.setDescription('A Normal Color of this sensor')
sensorDCvoltageLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorDCvoltageHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorDCvoltageSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 6, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorDCvoltageSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorAirflowTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7), )
if mibBuilder.loadTexts: sensorAirflowTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowTable.setDescription('This table contains the property and reading value for every sensor.')
sensorAirflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorAirflowIndex"))
if mibBuilder.loadTexts: sensorAirflowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorAirflowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowIndex.setDescription('The index into the Switch sensor table')
sensorAirflowDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDescription.setDescription('A Description of this sensor Switch')
sensorAirflowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowValue.setDescription('The reading value in this sensor')
sensorAirflowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorAirflowGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowGoOffline.setDescription('To take offline enter a 2')
sensorAirflowLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorAirflowLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorAirflowHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorAirflowHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorAirflowRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorAirflowDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorAirflowDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorAirflowDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorAirflowDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorAirflowDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorAirflowDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorAirflowRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage. This number can go from 0 to 1023 depending on the input voltage')
sensorAirflowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowPort.setDescription('Sensor port')
sensorAirflowSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowSubPort.setDescription('Sensor sub port')
sensorAirflowDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAirflowDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDeviceIndex.setDescription('Device Index of sensor')
sensorAirflowDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowDisplayStyle.setDescription('Airflow display style')
sensorAirflowHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorAirflowLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorAirflowNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowNormalDesc.setDescription('A Normal Description of this sensor')
sensorAirflowLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorAirflowHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorAirflowSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorAirflowHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorAirflowLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorAirflowNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowNormalColor.setDescription('A Normal Color of this sensor')
sensorAirflowLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorAirflowHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorAirflowSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 7, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAirflowSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAirflowSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorMotionTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8), )
if mibBuilder.loadTexts: sensorMotionTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionTable.setDescription('This table contains the property and reading value for every sensor.')
sensorMotionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorMotionIndex"))
if mibBuilder.loadTexts: sensorMotionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorMotionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionIndex.setDescription('The index into the Switch sensor table')
sensorMotionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionDescription.setDescription('A Description of this sensor Switch')
sensorMotionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorMotionGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionGoOffline.setDescription('To take offline enter a 2')
sensorMotionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionPort.setDescription('Sensor port')
sensorMotionSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionSubPort.setDescription('Sensor sub port')
sensorMotionDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorMotionDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionDeviceIndex.setDescription('Device Index of sensor')
sensorMotionCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionCriticalDesc.setDescription('A Critical Description of this sensor')
sensorMotionNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionNormalDesc.setDescription('A Normal Description of this sensor')
sensorMotionCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionCriticalColor.setDescription('A Critical Color of this sensor')
sensorMotionNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 8, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorMotionNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorMotionNormalColor.setDescription('A Normal Color of this sensor')
sensorWaterTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9), )
if mibBuilder.loadTexts: sensorWaterTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterTable.setDescription('This table contains the property and reading value for every sensor.')
sensorWaterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorWaterIndex"))
if mibBuilder.loadTexts: sensorWaterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorWaterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterIndex.setDescription('The index into the Switch sensor table')
sensorWaterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterDescription.setDescription('A Description of this sensor Switch')
sensorWaterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorWaterGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterGoOffline.setDescription('To take offline enter a 2')
sensorWaterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterPort.setDescription('Sensor port')
sensorWaterSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterSubPort.setDescription('Sensor sub port')
sensorWaterDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterDeviceIndex.setDescription('Device Index of sensor')
sensorWaterCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterCriticalDesc.setDescription('A Critical Description of this sensor')
sensorWaterNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterNormalDesc.setDescription('A Normal Description of this sensor')
sensorWaterCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterCriticalColor.setDescription('A Critical Color of this sensor')
sensorWaterNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 9, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterNormalColor.setDescription('A Normal Color of this sensor')
sensorSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10), )
if mibBuilder.loadTexts: sensorSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityTable.setDescription('This table contains the property and reading value for every sensor.')
sensorSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorSecurityIndex"))
if mibBuilder.loadTexts: sensorSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityIndex.setDescription('The index into the Switch sensor table')
sensorSecurityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityDescription.setDescription('A Description of this sensor Switch')
sensorSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorSecurityGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityGoOffline.setDescription('To take offline enter a 2')
sensorSecurityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityPort.setDescription('Sensor port')
sensorSecuritySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecuritySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecuritySubPort.setDescription('Sensor sub port')
sensorSecurityDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSecurityDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityDeviceIndex.setDescription('Device Index of sensor')
sensorSecurityCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityCriticalDesc.setDescription('A Critical Description of this sensor')
sensorSecurityNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityNormalDesc.setDescription('A Normal Description of this sensor')
sensorSecurityCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityCriticalColor.setDescription('A Critical Color of this sensor')
sensorSecurityNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 10, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSecurityNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSecurityNormalColor.setDescription('A Normal Color of this sensor')
sensorSirenTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11), )
if mibBuilder.loadTexts: sensorSirenTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenTable.setDescription('This table contains the property and reading value for every sensor.')
sensorSirenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorSirenIndex"))
if mibBuilder.loadTexts: sensorSirenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorSirenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenIndex.setDescription('The index into the Switch sensor table')
sensorSirenDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenDescription.setDescription('A Description of this sensor Switch')
sensorSirenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorSirenGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenGoOffline.setDescription('To take offline enter a 2')
sensorSirenControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenControlMode.setDescription('Control Mode used for selecting the mode to control a siren.')
sensorSirenManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenManualCycleTime.setDescription('Toggle period in seconds for Manual Cycle action.')
sensorSirenManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenManualAction.setDescription('Control the siren manualy')
sensorSirenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenPort.setDescription('Sensor port')
sensorSirenSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenSubPort.setDescription('Sensor sub port')
sensorSirenDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSirenDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenDeviceIndex.setDescription('Device Index of sensor')
sensorSirenOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenOnDesc.setDescription('A On Description of this sensor')
sensorSirenOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenOffDesc.setDescription('A Off Description of this sensor')
sensorSirenOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenOnColor.setDescription('A On Color of this sensor')
sensorSirenOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 11, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSirenOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSirenOffColor.setDescription('A Off Color of this sensor')
sensorRelayTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12), )
if mibBuilder.loadTexts: sensorRelayTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayTable.setDescription('This table contains the property and reading value for every sensor.')
sensorRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorRelayIndex"))
if mibBuilder.loadTexts: sensorRelayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayIndex.setDescription('The index into the Switch sensor table')
sensorRelayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayDescription.setDescription('A Description of this sensor Switch')
sensorRelayType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 19))).clone(namedValues=NamedValues(("relay", 13), ("xrelay", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayType.setDescription('Enter the type of this Sensor')
sensorRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorRelayGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayGoOffline.setDescription('To take offline enter a 2')
sensorRelayControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("manual-control", 0), ("sensor-control", 1), ("time-control", 2), ("thermostat-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayControlMode.setDescription('Control Mode used for selecting the mode to control a relay.')
sensorRelayManualCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayManualCycleTime.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayManualCycleTime.setDescription('Toggle period in seconds for Manual Cycle action.')
sensorRelayManualAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("turn-On", 0), ("turn-Off", 1), ("cycle-On-Off-On", 2), ("cycle-Off-On-Off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayManualAction.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayManualAction.setDescription('Control the relay manualy')
sensorRelayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayPort.setDescription('Sensor port')
sensorRelaySubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelaySubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelaySubPort.setDescription('Sensor sub port')
sensorRelayDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorRelayDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayDeviceIndex.setDescription('Device Index of sensor')
sensorRelayOnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayOnDesc.setDescription('A On Description of this sensor')
sensorRelayOffDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOffDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayOffDesc.setDescription('A Off Description of this sensor')
sensorRelayOnColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOnColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayOnColor.setDescription('A On Color of this sensor')
sensorRelayOffColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 12, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorRelayOffColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorRelayOffColor.setDescription('A Off Color of this sensor')
sensorACvoltageTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13), )
if mibBuilder.loadTexts: sensorACvoltageTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageTable.setDescription('This table contains the property and reading value for every sensor.')
sensorACvoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorACvoltageIndex"))
if mibBuilder.loadTexts: sensorACvoltageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorACvoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageIndex.setDescription('The index into the Switch sensor table')
sensorACvoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageDescription.setDescription('A Description of this sensor Switch')
sensorACvoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorACvoltageGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageGoOffline.setDescription('To put online enter a 1, to take offline enter a 2')
sensorACvoltagePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltagePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltagePort.setDescription('Sensor port')
sensorACvoltageSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageSubPort.setDescription('Sensor sub port')
sensorACvoltageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorACvoltageDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageDeviceIndex.setDescription('Device Index of sensor')
sensorACvoltageCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageCriticalDesc.setDescription('A Critical Description of this sensor')
sensorACvoltageNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageNormalDesc.setDescription('A Normal Description of this sensor')
sensorACvoltageCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageCriticalColor.setDescription('A Critical Color of this sensor')
sensorACvoltageNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 13, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorACvoltageNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorACvoltageNormalColor.setDescription('A Normal Color of this sensor')
sensorSmokeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14), )
if mibBuilder.loadTexts: sensorSmokeTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeTable.setDescription('This table contains the property and reading value for every sensor.')
sensorSmokeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorSmokeIndex"))
if mibBuilder.loadTexts: sensorSmokeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorSmokeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeIndex.setDescription('The index into the Switch sensor table')
sensorSmokeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeDescription.setDescription('A Description of this sensor Switch')
sensorSmokeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7), ("relayOn", 8), ("relayOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorSmokeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeGoOffline.setDescription('To take offline enter a 2')
sensorSmokePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokePort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokePort.setDescription('Sensor port')
sensorSmokeSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeSubPort.setDescription('Sensor sub port')
sensorSmokeDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSmokeDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeDeviceIndex.setDescription('Device Index of sensor')
sensorSmokeCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeCriticalDesc.setDescription('A Critical Description of this sensor')
sensorSmokeNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeNormalDesc.setDescription('A Normal Description of this sensor')
sensorSmokeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeCriticalColor.setDescription('A Critical Color of this sensor')
sensorSmokeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 14, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSmokeNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorSmokeNormalColor.setDescription('A Normal Color of this sensor')
sensorThermostatTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20), )
if mibBuilder.loadTexts: sensorThermostatTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatTable.setDescription('This table contains the property and reading value for every sensor.')
sensorThermostatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorThermostatIndex"))
if mibBuilder.loadTexts: sensorThermostatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatEntry.setDescription('This is an entry in the sensorTemperatureEntry Table')
sensorThermostatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatIndex.setDescription('The index into the sensor table')
sensorThermostatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDescription.setDescription('A Description of this sensor')
sensorThermostatDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatDegree.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDegree.setDescription('The degrees in this sensor')
sensorThermostatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatStatus.setDescription('The current status of this Sensor')
sensorThermostatGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatGoOffline.setDescription('To take offline enter a 2')
sensorThermostatLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorThermostatLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorThermostatHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorThermostatHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorThermostatRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorThermostatDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorThermostatDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorThermostatDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorThermostatDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorThermostatDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorThermostatDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorThermostatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatPort.setDescription('Sensor port')
sensorThermostatSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatSubPort.setDescription('Sensor sub port')
sensorThermostatDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorThermostatDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDeviceIndex.setDescription('Device Index of sensor')
sensorThermostatDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatDisplayStyle.setDescription('Thermostat display style')
sensorThermostatHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorThermostatLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorThermostatNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatNormalDesc.setDescription('A Normal Description of this sensor')
sensorThermostatLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorThermostatHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorThermostatSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorThermostatHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorThermostatLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorThermostatNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatNormalColor.setDescription('A Normal Color of this sensor')
sensorThermostatLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorThermostatHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorThermostatSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 20, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorThermostatSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorThermostatSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorWaterRopeTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21), )
if mibBuilder.loadTexts: sensorWaterRopeTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeTable.setDescription('This table contains the property and reading value for every sensor.')
sensorWaterRopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorWaterRopeIndex"))
if mibBuilder.loadTexts: sensorWaterRopeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeEntry.setDescription('This is an entry in the SensorWaterRopeEntry Table')
sensorWaterRopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeIndex.setDescription('The index into the sensor table')
sensorWaterRopeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeDescription.setDescription('A Description of this sensor')
sensorWaterRopeLeakLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeLeakLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeLeakLocation.setDescription('Location of leakage of water rope sensor.')
sensorWaterRopeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeUnit.setDescription('Display unit of water rope sensor.')
sensorWaterRopeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeStatus.setDescription('The current status of this Sensor')
sensorWaterRopeGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeGoOffline.setDescription('To take offline enter a 2')
sensorWaterRopeRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeRaw.setDescription('Raw value of location or length in ohms')
sensorWaterRopeDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeDeviceIndex.setDescription('Device Index of sensor')
sensorWaterRopeCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeCriticalDesc.setDescription('A Critical Description of this sensor')
sensorWaterRopeNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeNormalDesc.setDescription('A Normal Description of this sensor')
sensorWaterRopeSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorWaterRopeCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeCriticalColor.setDescription('A Critical Color of this sensor')
sensorWaterRopeNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeNormalColor.setDescription('A Normal Color of this sensor')
sensorWaterRopeSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorWaterRopeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorWaterRopeLength.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeLength.setDescription('Length of water rope sensor.')
sensorWaterRopeImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeImpedance.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeImpedance.setDescription('Sensing wire impedance per meter value times 100')
sensorWaterRopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 21, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("custom", 0), ("water", 1), ("fuel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorWaterRopeType.setStatus('mandatory')
if mibBuilder.loadTexts: sensorWaterRopeType.setDescription('Water rope sensing cable type')
sensorPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22), )
if mibBuilder.loadTexts: sensorPowerTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerTable.setDescription('This table contains the property and reading value for every sensor.')
sensorPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorPowerIndex"))
if mibBuilder.loadTexts: sensorPowerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerEntry.setDescription('This is an entry in the sensorPowerEntry Table')
sensorPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerIndex.setDescription('The index into the Switch sensor table')
sensorPowerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDescription.setDescription('A Description of this sensor Switch')
sensorPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerValue.setDescription('The reading value in this sensor')
sensorPowerUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerUnit.setDescription('The unit string')
sensorPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highCritical", 4), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerStatus.setDescription('The current status of this Sensor, only input switches have a status')
sensorPowerGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerGoOffline.setDescription('To take offline enter a 2')
sensorPowerLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowCritical.setDescription('How cold this sensor gets before it sends a critical event')
sensorPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowWarning.setDescription('How cold this sensor gets before it sends a warning')
sensorPowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighWarning.setDescription('How hot this sensor gets before it sends a warning')
sensorPowerHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighCritical.setDescription('How hot this sensor gets before it sends a critical event')
sensorPowerRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorPowerDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorPowerDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorPowerDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorPowerDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorPowerDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorPowerDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorPowerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerPort.setDescription('Sensor port')
sensorPowerSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerSubPort.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerSubPort.setDescription('Sensor sub port')
sensorPowerDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorPowerDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDeviceIndex.setDescription('Device Index of sensor')
sensorPowerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerTimeOut.setDescription('The polling timeout of Power Sensor.')
sensorPowerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerInterval.setDescription('The polling interval of Power Sensor.')
sensorPowerErrorRetryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerErrorRetryNum.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerErrorRetryNum.setDescription('Number of retry before error.')
sensorPowerMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerMaxValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerMaxValue.setDescription('The maximum scale of Power value.')
sensorPowerMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerMinValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerMinValue.setDescription('The minimum scale of Power value.')
sensorPowerDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerDisplayStyle.setDescription('Power display style.')
sensorPowerHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorPowerLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorPowerNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerNormalDesc.setDescription('A Normal Description of this sensor')
sensorPowerLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorPowerHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorPowerSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorPowerHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorPowerLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorPowerNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerNormalColor.setDescription('A Normal Color of this sensor')
sensorPowerLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorPowerHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorPowerSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 22, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorPowerSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorPowerSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorFuelTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24), )
if mibBuilder.loadTexts: sensorFuelTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelTable.setDescription('This table contains the property and reading value for every sensor.')
sensorFuelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorFuelIndex"))
if mibBuilder.loadTexts: sensorFuelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelEntry.setDescription('This is an entry in the SensorFuelEntry Table')
sensorFuelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelIndex.setDescription('The index into the sensor table')
sensorFuelDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDescription.setDescription('A Description of this sensor')
sensorFuelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelValue.setDescription('The reading value in this sensor')
sensorFuelUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelUnit.setDescription('The unit string')
sensorFuelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelStatus.setDescription('The current status of this Sensor')
sensorFuelGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelGoOffline.setDescription('To take offline enter a 2')
sensorFuelLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowCritical.setDescription('Level value of this sensor gets before it sends a critical event')
sensorFuelLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowWarning.setDescription('Level value of this sensor gets before it sends a warning')
sensorFuelHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighWarning.setDescription('Level value of this sensor gets before it sends a warning')
sensorFuelHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighCritical.setDescription('Level value of this sensor gets before it sends a critical event')
sensorFuelRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorFuelDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorFuelDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorFuelDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorFuelDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorFuelDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorFuelDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorFuelRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage.')
sensorFuelAmountMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelAmountMaxValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelAmountMaxValue.setDescription('The maximum scale of value conversion.')
sensorFuelAmountBaseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelAmountBaseValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelAmountBaseValue.setDescription('The base scale of value conversion.')
sensorFuelDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorFuelDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDeviceIndex.setDescription('Device Index of sensor')
sensorFuelDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelDisplayStyle.setDescription('Fuel display style')
sensorFuelHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorFuelLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorFuelNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelNormalDesc.setDescription('A Normal Description of this sensor')
sensorFuelLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorFuelHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorFuelSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorFuelHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorFuelLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorFuelNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelNormalColor.setDescription('A Normal Color of this sensor')
sensorFuelLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorFuelHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorFuelSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 24, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorFuelSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorFuelSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorTankSenderTable = MibTable((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26), )
if mibBuilder.loadTexts: sensorTankSenderTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderTable.setDescription('This table contains the property and reading value for every sensor.')
sensorTankSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1), ).setIndexNames((0, "SPAGENT-MIB", "sensorTankSenderIndex"))
if mibBuilder.loadTexts: sensorTankSenderEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderEntry.setDescription('This is an entry in the sensorTankSenderEntry Table')
sensorTankSenderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderIndex.setDescription('The index into the sensor table')
sensorTankSenderDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDescription.setDescription('A Description of this sensor')
sensorTankSenderValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderValue.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderValue.setDescription('The reading value in this sensor')
sensorTankSenderUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderUnit.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderUnit.setDescription('The unit string')
sensorTankSenderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderStatus.setDescription('The current status of this Sensor')
sensorTankSenderGoOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("goOffline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderGoOffline.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderGoOffline.setDescription('To take offline enter a 2')
sensorTankSenderLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowCritical.setDescription('Level value of this sensor gets before it sends a critical event')
sensorTankSenderLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowWarning.setDescription('Level value of this sensor gets before it sends a warning')
sensorTankSenderHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighWarning.setDescription('Level value of this sensor gets before it sends a warning')
sensorTankSenderHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighCritical.setDescription('Level value of this sensor gets before it sends a critical event')
sensorTankSenderRearm = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderRearm.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderRearm.setDescription('The number of degrees to rearm the status. For example if status goes from normal to warning, the temp must go down spTempRearm degrees below warning before the status goes to normal')
sensorTankSenderDelayError = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayError.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayError.setDescription('Time in seconds after the sensor has been in error status before report as an error')
sensorTankSenderDelayNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayNormal.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayNormal.setDescription('Time in seconds after the sensor change from error to normal before report as normal')
sensorTankSenderDelayLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayLowCritical.setDescription('Continuous time for this sensor to be in Low Critical before accepting new Status.')
sensorTankSenderDelayLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayLowWarning.setDescription('Continuous time for this sensor to be in Low Warning before accepting new Status.')
sensorTankSenderDelayHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayHighWarning.setDescription('Continuous time for this sensor to be in High Warning before accepting new Status.')
sensorTankSenderDelayHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDelayHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDelayHighCritical.setDescription('Continuous time for this sensor to be in High Critical before accepting new Status.')
sensorTankSenderRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderRaw.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderRaw.setDescription('The unformatted, raw, A/D value in this sensor. Contains more resolution than the formated percentage.')
sensorTankSenderDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTankSenderDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDeviceIndex.setDescription('Device Index of sensor')
sensorTankSenderDisplayStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("gauge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderDisplayStyle.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderDisplayStyle.setDescription('TankSender display style')
sensorTankSenderHighCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighCriticalDesc.setDescription('A HighCritical Description of this sensor')
sensorTankSenderLowCriticalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowCriticalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowCriticalDesc.setDescription('A LowCritical Description of this sensor')
sensorTankSenderNormalDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 48), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderNormalDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderNormalDesc.setDescription('A Normal Description of this sensor')
sensorTankSenderLowWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 49), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowWarningDesc.setDescription('A LowWarning Description of this sensor')
sensorTankSenderHighWarningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighWarningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighWarningDesc.setDescription('A HighWarning Description of this sensor')
sensorTankSenderSensorErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderSensorErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderSensorErrorDesc.setDescription('A SensorError Description of this sensor')
sensorTankSenderHighCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighCriticalColor.setDescription('A HighCritical Color of this sensor')
sensorTankSenderLowCriticalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowCriticalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowCriticalColor.setDescription('A LowCritical Color of this sensor')
sensorTankSenderNormalColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderNormalColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderNormalColor.setDescription('A Normal Color of this sensor')
sensorTankSenderLowWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderLowWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderLowWarningColor.setDescription('A LowWarning Color of this sensor')
sensorTankSenderHighWarningColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderHighWarningColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderHighWarningColor.setDescription('A HighWarning Color of this sensor')
sensorTankSenderSensorErrorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3854, 2, 3, 26, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorTankSenderSensorErrorColor.setStatus('mandatory')
if mibBuilder.loadTexts: sensorTankSenderSensorErrorColor.setDescription('A SensorError Color of this sensor')
sensorProbeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 7))
spSensorStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7), ("turnOn", 8), ("turnOff", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorStatus.setDescription('The current integer status of the sensor causing this trap to be sent')
spSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorValue.setDescription('The current integer value of the sensor causing this trap to be sent')
spSensorLevelExceeded = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorLevelExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorLevelExceeded.setDescription('The integer level that was exceeded causing this trap to be sent')
spSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorIndex.setDescription('The integer index of the sensor causing this trap to be sent')
spSensorName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorName.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorName.setDescription('The name of the sensor causing this trap to be sent')
spSensorDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorDescription.setDescription('The description of the sensor causing this trap to be sent')
spSensorProbeKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorProbeKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorProbeKeepAlive.setDescription('Keep alive trap to be sent')
spSensorType = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 128, 129, 132, 134))).clone(namedValues=NamedValues(("temperature", 1), ("fourTo20mA", 2), ("humidity", 3), ("water", 4), ("atod", 5), ("security", 6), ("airflow", 8), ("siren", 9), ("dryContact", 10), ("voltage", 12), ("relay", 13), ("motion", 14), ("extradrycontact", 16), ("thermostat", 23), ("smoke", 24), ("power", 25), ("irms", 26), ("vrms", 27), ("watt", 28), ("relayarray", 29), ("virtual", 30), ("watthour", 32), ("temperaturearray", 33), ("waterrope", 34), ("fuellevel", 35), ("tanksender", 36), ("sound", 128), ("softwaremotion", 129), ("nosignal", 132), ("powermeter", 134)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorType.setDescription('Type of this sensor')
spSensorStatusName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorStatusName.setDescription('The current status of the sensor causing this trap to be sent')
spSensorSubIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorSubIndex.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorSubIndex.setDescription('The integer sub index of the sensor causing this trap to be sent. Only for temperaturearray and relayarray')
spBoardIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: spBoardIndex.setDescription('The integer index of the sensor board causing this trap to be sent.')
spBoardDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spBoardDescription.setStatus('mandatory')
if mibBuilder.loadTexts: spBoardDescription.setDescription('The description of the sensor board causing this trap to be sent')
spEventTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEventTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: spEventTimeStamp.setDescription('The time(MM/DD/YYYY HH:MM:SS) of an event causing this trap to be sent')
spEventClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEventClassNumber.setStatus('mandatory')
if mibBuilder.loadTexts: spEventClassNumber.setDescription('The user-defined class number associated with this trap')
spEventClassName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spEventClassName.setStatus('mandatory')
if mibBuilder.loadTexts: spEventClassName.setDescription('The user-defined class Name associated with this trap')
spSensorDecimalValue = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorDecimalValue.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorDecimalValue.setDescription('The current decimal value of the sensor causing this trap to be sent')
spSensorAliveHigh = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorAliveHigh.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorAliveHigh.setDescription('The highest sensor value in the period')
spSensorAliveLow = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spSensorAliveLow.setStatus('mandatory')
if mibBuilder.loadTexts: spSensorAliveLow.setDescription('The lowset sensor value in the period')
spNormalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,1))
if mibBuilder.loadTexts: spNormalStatus.setDescription('sensorProbe status is Normal')
spWarningStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,2))
if mibBuilder.loadTexts: spWarningStatus.setDescription('sensorProbe status went to Warning')
spCriticalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,3))
if mibBuilder.loadTexts: spCriticalStatus.setDescription('sensorProbe status went to Critical')
spDownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,4))
if mibBuilder.loadTexts: spDownStatus.setDescription('sensorProbe status went to Disabled')
spKeepAliveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,5))
if mibBuilder.loadTexts: spKeepAliveTrap.setDescription('sensorProbe send keep alive trap.')
spUnknownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,7))
if mibBuilder.loadTexts: spUnknownStatus.setDescription('sensorProbe status went to Unknown')
spTemperatureStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,10)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureStatus.setDescription('Temperature sensor trap')
spTemperatureArray1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,11)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1Status.setDescription('Temperature sensor trap')
spTemperatureArray2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,12)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2Status.setDescription('Temperature sensor trap')
spTemperatureArray3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,13)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3Status.setDescription('Temperature sensor trap')
spTemperatureArray4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,14)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4Status.setDescription('Temperature sensor trap')
spTemperatureArray5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,15)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5Status.setDescription('Temperature sensor trap')
spTemperatureArray6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,16)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6Status.setDescription('Temperature sensor trap')
spTemperatureArray7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,17)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7Status.setDescription('Temperature sensor trap')
spTemperatureArray8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,18)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8Status.setDescription('Temperature sensor trap')
spAnalogueStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,20)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogueStatus.setDescription('Analogue Sensor Type')
spSwitchStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,30)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitchStatus.setDescription('Switch sensor trap')
spIRMSStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,40)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMSStatus.setDescription('IRMS sensor trap')
spVRMSStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,50)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMSStatus.setDescription('VRMS sensor trap')
spWattStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,60)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spWattStatus.setDescription('Energy sensor trap')
spRelayArray1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,71)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1Status.setDescription('RelayArray1 sensor trap')
spRelayArray2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,72)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2Status.setDescription('RelayArray2 sensor trap')
spRelayArray3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,73)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3Status.setDescription('RelayArray3 sensor trap')
spRelayArray4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,74)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4Status.setDescription('RelayArray4 sensor trap')
spRelayArray5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,75)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5Status.setDescription('RelayArray5 sensor trap')
spRelayArray6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,77)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6Status.setDescription('RelayArray6 sensor trap')
spRelayArray8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,78)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8Status.setDescription('RelayArray8 sensor trap')
spVirtualStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,80)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtualStatus.setDescription('Virtual sensor trap')
spSenUnknownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,51)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenUnknownStatus.setDescription('sensorProbe sensor status went to Unknown')
spSenNormalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,52)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenNormalStatus.setDescription('sensorProbe sensor status is Normal')
spSenWarningStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,53)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenWarningStatus.setDescription('sensorProbe sensor status went to Warning')
spSenCriticalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,54)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenCriticalStatus.setDescription('sensorProbe sensor status went to Critical')
spSenDownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,55)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSenDownStatus.setDescription('sensorProbe sensor status went to Disabled')
spTemperature1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,101)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature1Status.setDescription('Temperature sensor trap')
spTemperature2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,102)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature2Status.setDescription('Temperature sensor trap')
spTemperature3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,103)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature3Status.setDescription('Temperature sensor trap')
spTemperature4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,104)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature4Status.setDescription('Temperature sensor trap')
spTemperature5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,105)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature5Status.setDescription('Temperature sensor trap')
spTemperature6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,106)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature6Status.setDescription('Temperature sensor trap')
spTemperature7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,107)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature7Status.setDescription('Temperature sensor trap')
spTemperature8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,108)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperature8Status.setDescription('Temperature sensor trap')
spTemperatureArray1_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,111)).setLabel("spTemperatureArray1-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_1Status.setDescription('Temperature sensor trap')
spTemperatureArray1_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,112)).setLabel("spTemperatureArray1-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_2Status.setDescription('Temperature sensor trap')
spTemperatureArray1_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,113)).setLabel("spTemperatureArray1-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_3Status.setDescription('Temperature sensor trap')
spTemperatureArray1_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,114)).setLabel("spTemperatureArray1-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_4Status.setDescription('Temperature sensor trap')
spTemperatureArray1_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,115)).setLabel("spTemperatureArray1-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_5Status.setDescription('Temperature sensor trap')
spTemperatureArray1_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,116)).setLabel("spTemperatureArray1-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_6Status.setDescription('Temperature sensor trap')
spTemperatureArray1_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,117)).setLabel("spTemperatureArray1-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_7Status.setDescription('Temperature sensor trap')
spTemperatureArray1_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,118)).setLabel("spTemperatureArray1-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray1_8Status.setDescription('Temperature sensor trap')
spTemperatureArray2_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,121)).setLabel("spTemperatureArray2-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_1Status.setDescription('Temperature sensor trap')
spTemperatureArray2_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,122)).setLabel("spTemperatureArray2-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_2Status.setDescription('Temperature sensor trap')
spTemperatureArray2_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,123)).setLabel("spTemperatureArray2-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_3Status.setDescription('Temperature sensor trap')
spTemperatureArray2_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,124)).setLabel("spTemperatureArray2-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_4Status.setDescription('Temperature sensor trap')
spTemperatureArray2_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,125)).setLabel("spTemperatureArray2-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_5Status.setDescription('Temperature sensor trap')
spTemperatureArray2_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,126)).setLabel("spTemperatureArray2-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_6Status.setDescription('Temperature sensor trap')
spTemperatureArray2_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,127)).setLabel("spTemperatureArray2-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_7Status.setDescription('Temperature sensor trap')
spTemperatureArray2_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,128)).setLabel("spTemperatureArray2-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray2_8Status.setDescription('Temperature sensor trap')
spTemperatureArray3_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,131)).setLabel("spTemperatureArray3-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_1Status.setDescription('Temperature sensor trap')
spTemperatureArray3_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,132)).setLabel("spTemperatureArray3-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_2Status.setDescription('Temperature sensor trap')
spTemperatureArray3_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,133)).setLabel("spTemperatureArray3-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_3Status.setDescription('Temperature sensor trap')
spTemperatureArray3_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,134)).setLabel("spTemperatureArray3-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_4Status.setDescription('Temperature sensor trap')
spTemperatureArray3_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,135)).setLabel("spTemperatureArray3-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_5Status.setDescription('Temperature sensor trap')
spTemperatureArray3_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,136)).setLabel("spTemperatureArray3-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_6Status.setDescription('Temperature sensor trap')
spTemperatureArray3_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,137)).setLabel("spTemperatureArray3-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_7Status.setDescription('Temperature sensor trap')
spTemperatureArray3_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,138)).setLabel("spTemperatureArray3-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray3_8Status.setDescription('Temperature sensor trap')
spTemperatureArray4_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,141)).setLabel("spTemperatureArray4-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_1Status.setDescription('Temperature sensor trap')
spTemperatureArray4_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,142)).setLabel("spTemperatureArray4-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_2Status.setDescription('Temperature sensor trap')
spTemperatureArray4_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,143)).setLabel("spTemperatureArray4-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_3Status.setDescription('Temperature sensor trap')
spTemperatureArray4_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,144)).setLabel("spTemperatureArray4-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_4Status.setDescription('Temperature sensor trap')
spTemperatureArray4_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,145)).setLabel("spTemperatureArray4-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_5Status.setDescription('Temperature sensor trap')
spTemperatureArray4_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,146)).setLabel("spTemperatureArray4-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_6Status.setDescription('Temperature sensor trap')
spTemperatureArray4_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,147)).setLabel("spTemperatureArray4-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_7Status.setDescription('Temperature sensor trap')
spTemperatureArray4_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,148)).setLabel("spTemperatureArray4-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray4_8Status.setDescription('Temperature sensor trap')
spTemperatureArray5_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,151)).setLabel("spTemperatureArray5-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_1Status.setDescription('Temperature sensor trap')
spTemperatureArray5_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,152)).setLabel("spTemperatureArray5-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_2Status.setDescription('Temperature sensor trap')
spTemperatureArray5_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,153)).setLabel("spTemperatureArray5-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_3Status.setDescription('Temperature sensor trap')
spTemperatureArray5_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,154)).setLabel("spTemperatureArray5-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_4Status.setDescription('Temperature sensor trap')
spTemperatureArray5_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,155)).setLabel("spTemperatureArray5-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_5Status.setDescription('Temperature sensor trap')
spTemperatureArray5_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,156)).setLabel("spTemperatureArray5-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_6Status.setDescription('Temperature sensor trap')
spTemperatureArray5_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,157)).setLabel("spTemperatureArray5-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_7Status.setDescription('Temperature sensor trap')
spTemperatureArray5_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,158)).setLabel("spTemperatureArray5-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray5_8Status.setDescription('Temperature sensor trap')
spTemperatureArray6_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,161)).setLabel("spTemperatureArray6-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_1Status.setDescription('Temperature sensor trap')
spTemperatureArray6_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,162)).setLabel("spTemperatureArray6-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_2Status.setDescription('Temperature sensor trap')
spTemperatureArray6_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,163)).setLabel("spTemperatureArray6-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_3Status.setDescription('Temperature sensor trap')
spTemperatureArray6_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,164)).setLabel("spTemperatureArray6-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_4Status.setDescription('Temperature sensor trap')
spTemperatureArray6_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,165)).setLabel("spTemperatureArray6-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_5Status.setDescription('Temperature sensor trap')
spTemperatureArray6_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,166)).setLabel("spTemperatureArray6-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_6Status.setDescription('Temperature sensor trap')
spTemperatureArray6_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,167)).setLabel("spTemperatureArray6-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_7Status.setDescription('Temperature sensor trap')
spTemperatureArray6_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,168)).setLabel("spTemperatureArray6-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray6_8Status.setDescription('Temperature sensor trap')
spTemperatureArray7_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,171)).setLabel("spTemperatureArray7-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_1Status.setDescription('Temperature sensor trap')
spTemperatureArray7_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,172)).setLabel("spTemperatureArray7-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_2Status.setDescription('Temperature sensor trap')
spTemperatureArray7_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,173)).setLabel("spTemperatureArray7-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_3Status.setDescription('Temperature sensor trap')
spTemperatureArray7_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,174)).setLabel("spTemperatureArray7-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_4Status.setDescription('Temperature sensor trap')
spTemperatureArray7_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,175)).setLabel("spTemperatureArray7-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_5Status.setDescription('Temperature sensor trap')
spTemperatureArray7_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,176)).setLabel("spTemperatureArray7-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_6Status.setDescription('Temperature sensor trap')
spTemperatureArray7_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,177)).setLabel("spTemperatureArray7-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_7Status.setDescription('Temperature sensor trap')
spTemperatureArray7_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,178)).setLabel("spTemperatureArray7-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray7_8Status.setDescription('Temperature sensor trap')
spTemperatureArray8_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,181)).setLabel("spTemperatureArray8-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_1Status.setDescription('Temperature sensor trap')
spTemperatureArray8_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,182)).setLabel("spTemperatureArray8-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_2Status.setDescription('Temperature sensor trap')
spTemperatureArray8_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,183)).setLabel("spTemperatureArray8-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_3Status.setDescription('Temperature sensor trap')
spTemperatureArray8_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,184)).setLabel("spTemperatureArray8-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_4Status.setDescription('Temperature sensor trap')
spTemperatureArray8_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,185)).setLabel("spTemperatureArray8-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_5Status.setDescription('Temperature sensor trap')
spTemperatureArray8_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,186)).setLabel("spTemperatureArray8-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_6Status.setDescription('Temperature sensor trap')
spTemperatureArray8_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,187)).setLabel("spTemperatureArray8-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_7Status.setDescription('Temperature sensor trap')
spTemperatureArray8_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,188)).setLabel("spTemperatureArray8-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spTemperatureArray8_8Status.setDescription('Temperature sensor trap')
spAnalogue1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,201)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue1Status.setDescription('Analogue Sensor Type')
spAnalogue2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,202)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue2Status.setDescription('Analogue Sensor Type')
spAnalogue3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,203)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue3Status.setDescription('Analogue Sensor Type')
spAnalogue4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,204)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue4Status.setDescription('Analogue Sensor Type')
spAnalogue5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,205)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue5Status.setDescription('Analogue Sensor Type')
spAnalogue6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,206)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue6Status.setDescription('Analogue Sensor Type')
spAnalogue7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,207)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue7Status.setDescription('Analogue Sensor Type')
spAnalogue8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,208)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spAnalogue8Status.setDescription('Analogue Sensor Type')
spSwitch1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,301)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch1Status.setDescription('Switch sensor trap')
spSwitch2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,302)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch2Status.setDescription('Switch sensor trap')
spSwitch3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,303)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch3Status.setDescription('Switch sensor trap')
spSwitch4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,304)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch4Status.setDescription('Switch sensor trap')
spSwitch5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,305)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch5Status.setDescription('Switch sensor trap')
spSwitch6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,306)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch6Status.setDescription('Switch sensor trap')
spSwitch7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,307)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch7Status.setDescription('Switch sensor trap')
spSwitch8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,308)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch8Status.setDescription('Switch sensor trap')
spSwitch9Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,309)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch9Status.setDescription('Switch sensor trap')
spSwitch10Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,310)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch10Status.setDescription('Switch sensor trap')
spSwitch11Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,311)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch11Status.setDescription('Switch sensor trap')
spSwitch12Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,312)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch12Status.setDescription('Switch sensor trap')
spSwitch13Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,313)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch13Status.setDescription('Switch sensor trap')
spSwitch14Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,314)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch14Status.setDescription('Switch sensor trap')
spSwitch15Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,315)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch15Status.setDescription('Switch sensor trap')
spSwitch16Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,316)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch16Status.setDescription('Switch sensor trap')
spSwitch17Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,317)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch17Status.setDescription('Switch sensor trap')
spSwitch18Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,318)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch18Status.setDescription('Switch sensor trap')
spSwitch19Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,319)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch19Status.setDescription('Switch sensor trap')
spSwitch20Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,320)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch20Status.setDescription('Switch sensor trap')
spSwitch21Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,321)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch21Status.setDescription('Switch sensor trap')
spSwitch22Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,322)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch22Status.setDescription('Switch sensor trap')
spSwitch23Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,323)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch23Status.setDescription('Switch sensor trap')
spSwitch24Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,324)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch24Status.setDescription('Switch sensor trap')
spSwitch25Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,325)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch25Status.setDescription('Switch sensor trap')
spSwitch26Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,326)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch26Status.setDescription('Switch sensor trap')
spSwitch27Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,327)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch27Status.setDescription('Switch sensor trap')
spSwitch28Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,328)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch28Status.setDescription('Switch sensor trap')
spSwitch29Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,329)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch29Status.setDescription('Switch sensor trap')
spSwitch30Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,330)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch30Status.setDescription('Switch sensor trap')
spSwitch31Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,331)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch31Status.setDescription('Switch sensor trap')
spSwitch32Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,332)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch32Status.setDescription('Switch sensor trap')
spSwitch33Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,333)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch33Status.setDescription('Switch sensor trap')
spSwitch34Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,334)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch34Status.setDescription('Switch sensor trap')
spSwitch35Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,335)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch35Status.setDescription('Switch sensor trap')
spSwitch36Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,336)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch36Status.setDescription('Switch sensor trap')
spSwitch37Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,337)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch37Status.setDescription('Switch sensor trap')
spSwitch38Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,338)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch38Status.setDescription('Switch sensor trap')
spSwitch39Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,339)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch39Status.setDescription('Switch sensor trap')
spSwitch40Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,340)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch40Status.setDescription('Switch sensor trap')
spSwitch41Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,341)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch41Status.setDescription('Switch sensor trap')
spSwitch42Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,342)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch42Status.setDescription('Switch sensor trap')
spSwitch43Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,343)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch43Status.setDescription('Switch sensor trap')
spSwitch44Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,344)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch44Status.setDescription('Switch sensor trap')
spSwitch45Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,345)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch45Status.setDescription('Switch sensor trap')
spSwitch46Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,346)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch46Status.setDescription('Switch sensor trap')
spSwitch47Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,347)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch47Status.setDescription('Switch sensor trap')
spSwitch48Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,348)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch48Status.setDescription('Switch sensor trap')
spSwitch49Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,349)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch49Status.setDescription('Switch sensor trap')
spSwitch50Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,350)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch50Status.setDescription('Switch sensor trap')
spSwitch51Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,351)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch51Status.setDescription('Switch sensor trap')
spSwitch52Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,352)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch52Status.setDescription('Switch sensor trap')
spSwitch53Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,353)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch53Status.setDescription('Switch sensor trap')
spSwitch54Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,354)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch54Status.setDescription('Switch sensor trap')
spSwitch55Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,355)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch55Status.setDescription('Switch sensor trap')
spSwitch56Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,356)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch56Status.setDescription('Switch sensor trap')
spSwitch57Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,357)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch57Status.setDescription('Switch sensor trap')
spSwitch58Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,358)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch58Status.setDescription('Switch sensor trap')
spSwitch59Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,359)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch59Status.setDescription('Switch sensor trap')
spSwitch60Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,360)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch60Status.setDescription('Switch sensor trap')
spSwitch61Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,361)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch61Status.setDescription('Switch sensor trap')
spSwitch62Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,362)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch62Status.setDescription('Switch sensor trap')
spSwitch63Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,363)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch63Status.setDescription('Switch sensor trap')
spSwitch64Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,364)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch64Status.setDescription('Switch sensor trap')
spSwitch65Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,365)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch65Status.setDescription('Switch sensor trap')
spSwitch66Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,366)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch66Status.setDescription('Switch sensor trap')
spSwitch67Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,367)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch67Status.setDescription('Switch sensor trap')
spSwitch68Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,368)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spSwitch68Status.setDescription('Switch sensor trap')
spIRMS1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,401)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS1Status.setDescription('IRMS sensor trap')
spIRMS2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,402)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS2Status.setDescription('IRMS sensor trap')
spIRMS3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,403)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS3Status.setDescription('IRMS sensor trap')
spIRMS4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,404)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS4Status.setDescription('IRMS sensor trap')
spIRMS5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,405)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS5Status.setDescription('IRMS sensor trap')
spIRMS6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,406)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS6Status.setDescription('IRMS sensor trap')
spIRMS7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,407)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS7Status.setDescription('IRMS sensor trap')
spIRMS8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,408)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spIRMS8Status.setDescription('IRMS sensor trap')
spVRMS1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,501)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS1Status.setDescription('VRMS sensor trap')
spVRMS2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,502)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS2Status.setDescription('VRMS sensor trap')
spVRMS3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,503)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS3Status.setDescription('VRMS sensor trap')
spVRMS4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,504)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS4Status.setDescription('VRMS sensor trap')
spVRMS5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,505)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS5Status.setDescription('VRMS sensor trap')
spVRMS6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,506)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS6Status.setDescription('VRMS sensor trap')
spVRMS7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,507)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS7Status.setDescription('VRMS sensor trap')
spVRMS8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,508)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVRMS8Status.setDescription('VRMS sensor trap')
spEnergy1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,601)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy1Status.setDescription('Energy sensor trap')
spEnergy2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,602)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy2Status.setDescription('Energy sensor trap')
spEnergy3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,603)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy3Status.setDescription('Energy sensor trap')
spEnergy4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,604)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy4Status.setDescription('Energy sensor trap')
spEnergy5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,605)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy5Status.setDescription('Energy sensor trap')
spEnergy6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,606)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy6Status.setDescription('Energy sensor trap')
spEnergy7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,607)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy7Status.setDescription('Energy sensor trap')
spEnergy8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,608)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spEnergy8Status.setDescription('Energy sensor trap')
spRelayArray1_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,711)).setLabel("spRelayArray1-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_1Status.setDescription('RelayArray1.1 sensor trap')
spRelayArray1_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,712)).setLabel("spRelayArray1-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_2Status.setDescription('RelayArray1.2 sensor trap')
spRelayArray1_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,713)).setLabel("spRelayArray1-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_3Status.setDescription('RelayArray1.3 sensor trap')
spRelayArray1_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,714)).setLabel("spRelayArray1-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_4Status.setDescription('RelayArray1.4 sensor trap')
spRelayArray1_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,715)).setLabel("spRelayArray1-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_5Status.setDescription('RelayArray1.5 sensor trap')
spRelayArray1_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,716)).setLabel("spRelayArray1-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_6Status.setDescription('RelayArray1.6 sensor trap')
spRelayArray1_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,717)).setLabel("spRelayArray1-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_7Status.setDescription('RelayArray1.7 sensor trap')
spRelayArray1_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,718)).setLabel("spRelayArray1-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray1_8Status.setDescription('RelayArray1.8 sensor trap')
spRelayArray2_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,721)).setLabel("spRelayArray2-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_1Status.setDescription('RelayArray2.1 sensor trap')
spRelayArray2_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,722)).setLabel("spRelayArray2-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_2Status.setDescription('RelayArray2.2 sensor trap')
spRelayArray2_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,723)).setLabel("spRelayArray2-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_3Status.setDescription('RelayArray2.3 sensor trap')
spRelayArray2_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,724)).setLabel("spRelayArray2-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_4Status.setDescription('RelayArray2.4 sensor trap')
spRelayArray2_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,725)).setLabel("spRelayArray2-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_5Status.setDescription('RelayArray2.5 sensor trap')
spRelayArray2_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,726)).setLabel("spRelayArray2-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_6Status.setDescription('RelayArray2.6 sensor trap')
spRelayArray2_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,727)).setLabel("spRelayArray2-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_7Status.setDescription('RelayArray2.7 sensor trap')
spRelayArray2_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,728)).setLabel("spRelayArray2-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray2_8Status.setDescription('RelayArray2.8 sensor trap')
spRelayArray3_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,731)).setLabel("spRelayArray3-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_1Status.setDescription('RelayArray3.1 sensor trap')
spRelayArray3_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,732)).setLabel("spRelayArray3-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_2Status.setDescription('RelayArray3.2 sensor trap')
spRelayArray3_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,733)).setLabel("spRelayArray3-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_3Status.setDescription('RelayArray3.3 sensor trap')
spRelayArray3_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,734)).setLabel("spRelayArray3-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_4Status.setDescription('RelayArray3.4 sensor trap')
spRelayArray3_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,735)).setLabel("spRelayArray3-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_5Status.setDescription('RelayArray3.5 sensor trap')
spRelayArray3_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,736)).setLabel("spRelayArray3-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_6Status.setDescription('RelayArray3.6 sensor trap')
spRelayArray3_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,737)).setLabel("spRelayArray3-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_7Status.setDescription('RelayArray3.7 sensor trap')
spRelayArray3_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,738)).setLabel("spRelayArray3-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray3_8Status.setDescription('RelayArray3.8 sensor trap')
spRelayArray4_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,741)).setLabel("spRelayArray4-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_1Status.setDescription('RelayArray4.1 sensor trap')
spRelayArray4_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,742)).setLabel("spRelayArray4-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_2Status.setDescription('RelayArray4.2 sensor trap')
spRelayArray4_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,743)).setLabel("spRelayArray4-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_3Status.setDescription('RelayArray4.3 sensor trap')
spRelayArray4_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,744)).setLabel("spRelayArray4-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_4Status.setDescription('RelayArray4.4 sensor trap')
spRelayArray4_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,745)).setLabel("spRelayArray4-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_5Status.setDescription('RelayArray4.5 sensor trap')
spRelayArray4_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,746)).setLabel("spRelayArray4-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_6Status.setDescription('RelayArray4.6 sensor trap')
spRelayArray4_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,747)).setLabel("spRelayArray4-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_7Status.setDescription('RelayArray4.7 sensor trap')
spRelayArray4_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,748)).setLabel("spRelayArray4-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray4_8Status.setDescription('RelayArray4.8 sensor trap')
spRelayArray5_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,751)).setLabel("spRelayArray5-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_1Status.setDescription('RelayArray5.1 sensor trap')
spRelayArray5_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,752)).setLabel("spRelayArray5-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_2Status.setDescription('RelayArray5.2 sensor trap')
spRelayArray5_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,753)).setLabel("spRelayArray5-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_3Status.setDescription('RelayArray5.3 sensor trap')
spRelayArray5_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,754)).setLabel("spRelayArray5-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_4Status.setDescription('RelayArray5.4 sensor trap')
spRelayArray5_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,755)).setLabel("spRelayArray5-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_5Status.setDescription('RelayArray5.5 sensor trap')
spRelayArray5_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,756)).setLabel("spRelayArray5-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_6Status.setDescription('RelayArray5.6 sensor trap')
spRelayArray5_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,757)).setLabel("spRelayArray5-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_7Status.setDescription('RelayArray5.7 sensor trap')
spRelayArray5_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,758)).setLabel("spRelayArray5-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray5_8Status.setDescription('RelayArray5.8 sensor trap')
spRelayArray6_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,761)).setLabel("spRelayArray6-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_1Status.setDescription('RelayArray6.1 sensor trap')
spRelayArray6_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,762)).setLabel("spRelayArray6-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_2Status.setDescription('RelayArray6.2 sensor trap')
spRelayArray6_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,763)).setLabel("spRelayArray6-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_3Status.setDescription('RelayArray6.3 sensor trap')
spRelayArray6_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,764)).setLabel("spRelayArray6-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_4Status.setDescription('RelayArray6.4 sensor trap')
spRelayArray6_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,765)).setLabel("spRelayArray6-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_5Status.setDescription('RelayArray6.5 sensor trap')
spRelayArray6_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,766)).setLabel("spRelayArray6-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_6Status.setDescription('RelayArray6.6 sensor trap')
spRelayArray6_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,767)).setLabel("spRelayArray6-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_7Status.setDescription('RelayArray6.7 sensor trap')
spRelayArray6_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,768)).setLabel("spRelayArray6-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray6_8Status.setDescription('RelayArray6.8 sensor trap')
spRelayArray7_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,771)).setLabel("spRelayArray7-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_1Status.setDescription('RelayArray7.1 sensor trap')
spRelayArray7_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,772)).setLabel("spRelayArray7-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_2Status.setDescription('RelayArray7.2 sensor trap')
spRelayArray7_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,773)).setLabel("spRelayArray7-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_3Status.setDescription('RelayArray7.3 sensor trap')
spRelayArray7_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,774)).setLabel("spRelayArray7-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_4Status.setDescription('RelayArray7.4 sensor trap')
spRelayArray7_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,775)).setLabel("spRelayArray7-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_5Status.setDescription('RelayArray7.5 sensor trap')
spRelayArray7_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,776)).setLabel("spRelayArray7-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_6Status.setDescription('RelayArray7.6 sensor trap')
spRelayArray7_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,777)).setLabel("spRelayArray7-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_7Status.setDescription('RelayArray7.7 sensor trap')
spRelayArray7_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,778)).setLabel("spRelayArray7-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray7_8Status.setDescription('RelayArray7.8 sensor trap')
spRelayArray8_1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,781)).setLabel("spRelayArray8-1Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_1Status.setDescription('RelayArray8.1 sensor trap')
spRelayArray8_2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,782)).setLabel("spRelayArray8-2Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_2Status.setDescription('RelayArray8.2 sensor trap')
spRelayArray8_3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,783)).setLabel("spRelayArray8-3Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_3Status.setDescription('RelayArray8.3 sensor trap')
spRelayArray8_4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,784)).setLabel("spRelayArray8-4Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_4Status.setDescription('RelayArray8.4 sensor trap')
spRelayArray8_5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,785)).setLabel("spRelayArray8-5Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_5Status.setDescription('RelayArray8.5 sensor trap')
spRelayArray8_6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,786)).setLabel("spRelayArray8-6Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_6Status.setDescription('RelayArray8.6 sensor trap')
spRelayArray8_7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,787)).setLabel("spRelayArray8-7Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_7Status.setDescription('RelayArray8.7 sensor trap')
spRelayArray8_8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,788)).setLabel("spRelayArray8-8Status").setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spRelayArray8_8Status.setDescription('RelayArray8.8 sensor trap')
spVirtual1Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,801)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual1Status.setDescription('Virtual1 sensor trap')
spVirtual2Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,802)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual2Status.setDescription('Virtual2 sensor trap')
spVirtual3Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,803)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual3Status.setDescription('Virtual3 sensor trap')
spVirtual4Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,804)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual4Status.setDescription('Virtual4 sensor trap')
spVirtual5Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,805)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual5Status.setDescription('Virtual5 sensor trap')
spVirtual6Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,806)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual6Status.setDescription('Virtual6 sensor trap')
spVirtual7Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,807)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual7Status.setDescription('Virtual7 sensor trap')
spVirtual8Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,808)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual8Status.setDescription('Virtual8 sensor trap')
spVirtual9Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,809)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual9Status.setDescription('Virtual9 sensor trap')
spVirtual10Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,810)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual10Status.setDescription('Virtual10 sensor trap')
spVirtual11Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,811)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual11Status.setDescription('Virtual11 sensor trap')
spVirtual12Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,812)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual12Status.setDescription('Virtual12 sensor trap')
spVirtual13Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,813)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual13Status.setDescription('Virtual13 sensor trap')
spVirtual14Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,814)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual14Status.setDescription('Virtual14 sensor trap')
spVirtual15Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,815)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual15Status.setDescription('Virtual15 sensor trap')
spVirtual16Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,816)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual16Status.setDescription('Virtual16 sensor trap')
spVirtual17Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,817)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual17Status.setDescription('Virtual17 sensor trap')
spVirtual18Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,818)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual18Status.setDescription('Virtual18 sensor trap')
spVirtual19Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,819)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual19Status.setDescription('Virtual19 sensor trap')
spVirtual20Status = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,820)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"))
if mibBuilder.loadTexts: spVirtual20Status.setDescription('Virtual20 sensor trap')
spCustomStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,1000)).setObjects(("SPAGENT-MIB", "spSensorStatus"), ("SPAGENT-MIB", "spSensorValue"), ("SPAGENT-MIB", "spSensorLevelExceeded"), ("SPAGENT-MIB", "spSensorIndex"), ("SPAGENT-MIB", "spSensorName"), ("SPAGENT-MIB", "spSensorDescription"), ("SPAGENT-MIB", "spSensorType"), ("SPAGENT-MIB", "spSensorStatusName"), ("SPAGENT-MIB", "spSensorSubIndex"), ("SPAGENT-MIB", "spBoardIndex"), ("SPAGENT-MIB", "spBoardDescription"), ("SPAGENT-MIB", "spEventTimeStamp"), ("SPAGENT-MIB", "spEventClassNumber"), ("SPAGENT-MIB", "spEventClassName"))
if mibBuilder.loadTexts: spCustomStatus.setDescription('Custom sensor trap')
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbe=sensorProbe, sensorProbeIRMSSirenActiveStatus=sensorProbeIRMSSirenActiveStatus, sensorProbeSwitchSirenCycleTime=sensorProbeSwitchSirenCycleTime, sensorProbeNoCameraOnline=sensorProbeNoCameraOnline, sensorProbeDrycontactArrayPort8Number=sensorProbeDrycontactArrayPort8Number, sensorWaterRopeIndex=sensorWaterRopeIndex, sensorProbeSoftMotionSensor=sensorProbeSoftMotionSensor, sensorProbeTempGoOnline=sensorProbeTempGoOnline, sensorProbeTypeFuelLevelName=sensorProbeTypeFuelLevelName, spTemperatureArray2_2Status=spTemperatureArray2_2Status, sensorProbeReboot=sensorProbeReboot, sensorSecurityNormalColor=sensorSecurityNormalColor, sensorProbeRelayArrayPort1OpenURL=sensorProbeRelayArrayPort1OpenURL, sensorProbeTemperatureArrayPort2LowCritical=sensorProbeTemperatureArrayPort2LowCritical, sensorProbeDrycontactArrayPort5Number=sensorProbeDrycontactArrayPort5Number, sensorProbeRelayArrayPort5ManualRelayCycleTime=sensorProbeRelayArrayPort5ManualRelayCycleTime, sensorWaterRopeUnit=sensorWaterRopeUnit, sensorProbeEnergyDelayNormal=sensorProbeEnergyDelayNormal, spTemperatureArray1_3Status=spTemperatureArray1_3Status, sensorProbeSwitchSirenControlMode=sensorProbeSwitchSirenControlMode, sensorProbeEnergyRelayAction=sensorProbeEnergyRelayAction, sensorProbeThermostatTemperatureArrayPort1HighLimit1=sensorProbeThermostatTemperatureArrayPort1HighLimit1, sensorProbeRelayArrayPort5ControlMode=sensorProbeRelayArrayPort5ControlMode, deviceIntelligentEntry=deviceIntelligentEntry, sensorProbeThermostatTemperatureArrayPort8HighLimitAction1=sensorProbeThermostatTemperatureArrayPort8HighLimitAction1, sensorProbeTempContTimeLowWarning=sensorProbeTempContTimeLowWarning, sensorProbeRelayArrayPort7RelayAction=sensorProbeRelayArrayPort7RelayAction, sensorProbeTemperatureArrayPort5Calendar=sensorProbeTemperatureArrayPort5Calendar, sensor4to20mAStatus=sensor4to20mAStatus, sensorPowerDelayNormal=sensorPowerDelayNormal, sensorProbeRelayArrayPort1RelayCycleTime=sensorProbeRelayArrayPort1RelayCycleTime, sensorProbeIRMSGoOnline=sensorProbeIRMSGoOnline, sensorProbeRelayArrayPort5RelayDescOff=sensorProbeRelayArrayPort5RelayDescOff, sensorProbeStatusNumberCriticalAndError=sensorProbeStatusNumberCriticalAndError, sensorProbeTrapResend=sensorProbeTrapResend, sensorDryContactPort13GoOnline=sensorDryContactPort13GoOnline, sensor4to20mAEntry=sensor4to20mAEntry, sensorProbeSoundDetectorValue=sensorProbeSoundDetectorValue, sensorThermostatPort=sensorThermostatPort, sensorProbeThermostatTemperatureArrayPort1Online=sensorProbeThermostatTemperatureArrayPort1Online, sensorProbeDrycontactArrayPort4OutputDescOff=sensorProbeDrycontactArrayPort4OutputDescOff, sensorFuelUnit=sensorFuelUnit, sensorProbeThermostatTemperatureArrayPort2NormalAction1=sensorProbeThermostatTemperatureArrayPort2NormalAction1, sensorProbeTemperatureArrayPort3DegreeType=sensorProbeTemperatureArrayPort3DegreeType, sensorProbeNoCameraCalendar=sensorProbeNoCameraCalendar, sensorProbeTemperatureArrayPort7ContTimeLowWarning=sensorProbeTemperatureArrayPort7ContTimeLowWarning, spSwitch24Status=spSwitch24Status, sensorPowerDeviceIndex=sensorPowerDeviceIndex, sensorAirflowHighWarningColor=sensorAirflowHighWarningColor, sensorProbeTemperatureArrayPort7URL=sensorProbeTemperatureArrayPort7URL, spRelayArray3_1Status=spRelayArray3_1Status, spTemperatureArray5_3Status=spTemperatureArray5_3Status, sensor4to20mASubPort=sensor4to20mASubPort, sensorProbeCameraServerClientIP=sensorProbeCameraServerClientIP, sensorProbeTemperatureArrayPort3ContTimeSensorError=sensorProbeTemperatureArrayPort3ContTimeSensorError, sensorProbeDrycontactArrayPort1OpenURL=sensorProbeDrycontactArrayPort1OpenURL, sensorRelaySubPort=sensorRelaySubPort, sensorProbeThermostatTemperatureArrayPort3Online=sensorProbeThermostatTemperatureArrayPort3Online, sensorWaterTable=sensorWaterTable, sensorProbeDrycontactArrayPort6ContTimeNormal=sensorProbeDrycontactArrayPort6ContTimeNormal, sensorProbeThermostatTemperatureArrayPort2Index=sensorProbeThermostatTemperatureArrayPort2Index, sensorProbeTemperatureArrayPort3Offset=sensorProbeTemperatureArrayPort3Offset, spTemperatureArray8_3Status=spTemperatureArray8_3Status, sensorProbeDrycontactArrayPort8URL=sensorProbeDrycontactArrayPort8URL, sensorHumidityLowWarning=sensorHumidityLowWarning, sensorSirenSubPort=sensorSirenSubPort, sensorProbeTypeWaterRopeName=sensorProbeTypeWaterRopeName, spSwitch32Status=spSwitch32Status, sensorProbeTemperatureArrayPort3URL=sensorProbeTemperatureArrayPort3URL, sensorProbeThermostatTemperatureArrayPort6HighLimit2=sensorProbeThermostatTemperatureArrayPort6HighLimit2, spSwitch18Status=spSwitch18Status, sensor4to20mAHighWarningDesc=sensor4to20mAHighWarningDesc, sensorProbeIRMSRaw=sensorProbeIRMSRaw, sensorProbeTemperatureArrayPort2ContTimeSensorError=sensorProbeTemperatureArrayPort2ContTimeSensorError, sensorProbeTempTable=sensorProbeTempTable, sensorProbeDrycontactArrayPort2Description=sensorProbeDrycontactArrayPort2Description, sensorProbeSwitchWaterRopeUnit=sensorProbeSwitchWaterRopeUnit, sensorProbeTempContTimeSensorError=sensorProbeTempContTimeSensorError, sensorProbeThermostatTemperatureArrayPort8LowLimit2=sensorProbeThermostatTemperatureArrayPort8LowLimit2, sensorTankSenderHighCriticalDesc=sensorTankSenderHighCriticalDesc, sensorProbeTempSirenAction=sensorProbeTempSirenAction, sensorProbeHumidityRelayOnPort=sensorProbeHumidityRelayOnPort, sensorProbeDrycontactArrayPort5Table=sensorProbeDrycontactArrayPort5Table, sensorProbeTemperatureArrayPort1LowWarning=sensorProbeTemperatureArrayPort1LowWarning, sensorDryContactNormalColor=sensorDryContactNormalColor, spRelayArray8_5Status=spRelayArray8_5Status, sensorProbeRelayArrayPort6RelayDescOff=sensorProbeRelayArrayPort6RelayDescOff, sensorAirflowSensorErrorDesc=sensorAirflowSensorErrorDesc, sensor4to20mARaw=sensor4to20mARaw, sensorWaterRopeCriticalDesc=sensorWaterRopeCriticalDesc, sensorProbeThermostatTemperatureArrayPort6EnableTime=sensorProbeThermostatTemperatureArrayPort6EnableTime, sensorProbeDrycontactArrayPort2Entry=sensorProbeDrycontactArrayPort2Entry, sensorProbeVRMSRelayActiveStatus=sensorProbeVRMSRelayActiveStatus, sensorProbeThermostatTemperatureArrayPort4LowLimit2=sensorProbeThermostatTemperatureArrayPort4LowLimit2, sensorProbeThermostatTemperatureArrayPort6LowLimit1=sensorProbeThermostatTemperatureArrayPort6LowLimit1, sensorSmokeNormalColor=sensorSmokeNormalColor, spVirtual16Status=spVirtual16Status, sensorProbeThermostatTemperatureArrayPort6LowLimitAction1=sensorProbeThermostatTemperatureArrayPort6LowLimitAction1, sensorProbeIRMSStatus=sensorProbeIRMSStatus, sensorProbeVirtualAnalogHighWarning=sensorProbeVirtualAnalogHighWarning, sensorProbeThermostatTemperatureArrayPort5Index=sensorProbeThermostatTemperatureArrayPort5Index, sensorSmokePort=sensorSmokePort, spRelayArray5_4Status=spRelayArray5_4Status, spVRMS6Status=spVRMS6Status, sensorProbeTemperatureArrayPort1HighWarning=sensorProbeTemperatureArrayPort1HighWarning, sensorProbeDrycontactArrayPort5Description=sensorProbeDrycontactArrayPort5Description, sensorProbeVirtualSwitchEmailTrapLimit=sensorProbeVirtualSwitchEmailTrapLimit, sensorProbeRelayArrayPort8=sensorProbeRelayArrayPort8, sensorProbeDelayNotifyBoot=sensorProbeDelayNotifyBoot, sensorProbeSendTraps=sensorProbeSendTraps, sensorHumidityIndex=sensorHumidityIndex, sensorPowerHighWarningDesc=sensorPowerHighWarningDesc, sensorProbeThermostatLowLimit1=sensorProbeThermostatLowLimit1, sensorDCvoltageBaseVoltage=sensorDCvoltageBaseVoltage, sensorProbeRelayArrayPort1RelayDescOn=sensorProbeRelayArrayPort1RelayDescOn, sensorProbeEnergyLowWarning=sensorProbeEnergyLowWarning, sensorProbeTempSirenCycleTime=sensorProbeTempSirenCycleTime, sensorPowerErrorRetryNum=sensorPowerErrorRetryNum, sensorProbeNotifyBoot=sensorProbeNotifyBoot, sensorProbeHumiditySirenAction=sensorProbeHumiditySirenAction, sensorTemperatureType=sensorTemperatureType, sensorProbeSwitchEmailTrapSchedule=sensorProbeSwitchEmailTrapSchedule, sensorProbeVRMSSensorNumber=sensorProbeVRMSSensorNumber, spRelayArray2_2Status=spRelayArray2_2Status, sensorProbeSwitchEmailTrapInterval=sensorProbeSwitchEmailTrapInterval, sensorProbeTempSirenDelayAlarm=sensorProbeTempSirenDelayAlarm, spTemperatureArray2_5Status=spTemperatureArray2_5Status, spVirtual17Status=spVirtual17Status, spTemperatureArray4_8Status=spTemperatureArray4_8Status, sensorPowerDescription=sensorPowerDescription, spSwitch9Status=spSwitch9Status, sensorProbeVRMSOnline=sensorProbeVRMSOnline, sensorProbeVirtualAnalogUnit=sensorProbeVirtualAnalogUnit, sensorAirflowLowCriticalColor=sensorAirflowLowCriticalColor, sensorProbeSMTPPassword=sensorProbeSMTPPassword, sensorTemperatureHighWarningColor=sensorTemperatureHighWarningColor, sensorProbeSendTestMail=sensorProbeSendTestMail, spSwitch61Status=spSwitch61Status, sensorProbeTraps=sensorProbeTraps, sensorFuelLowWarning=sensorFuelLowWarning, spIRMS1Status=spIRMS1Status, sensorTemperatureRearm=sensorTemperatureRearm, sensorProbeTemperatureArrayPort4LowCritical=sensorProbeTemperatureArrayPort4LowCritical, sensorFuelValue=sensorFuelValue, sensorFuelRaw=sensorFuelRaw, sensorAirflowNormalColor=sensorAirflowNormalColor, sensorProbeVirtualAnalogRaw=sensorProbeVirtualAnalogRaw, spTemperatureArray3_5Status=spTemperatureArray3_5Status, sensorProbeThermostatTemperatureArrayPort5GoOnline=sensorProbeThermostatTemperatureArrayPort5GoOnline, sensorOnDescription=sensorOnDescription, sensorProbeDrycontactArrayPort5Online=sensorProbeDrycontactArrayPort5Online, sensorProbeThermostatTemperatureArrayPort3RelayControlPort=sensorProbeThermostatTemperatureArrayPort3RelayControlPort, spTemperatureArray4_4Status=spTemperatureArray4_4Status, sensorProbeTempLocation=sensorProbeTempLocation, sensorHumidityDelayError=sensorHumidityDelayError, sensorProbeEnergyGoOnline=sensorProbeEnergyGoOnline, sensorProbeHumidityEmailTrapInterval=sensorProbeHumidityEmailTrapInterval, sensorProbeRelayArrayPort1Entry=sensorProbeRelayArrayPort1Entry, sensorSecurityDescription=sensorSecurityDescription, sensorProbeDrycontactArrayPort2OutputDescOn=sensorProbeDrycontactArrayPort2OutputDescOn, sensorProbeTemperatureArrayPort1ContTimeSensorError=sensorProbeTemperatureArrayPort1ContTimeSensorError, spSwitch43Status=spSwitch43Status, sensorProbeTemperatureArrayPort4Rearm=sensorProbeTemperatureArrayPort4Rearm, sensorDryContactCriticalDesc=sensorDryContactCriticalDesc, sensorProbeDrycontactArrayPort2NormalState=sensorProbeDrycontactArrayPort2NormalState, sensorProbeVirtualAnalogSensor=sensorProbeVirtualAnalogSensor, spSwitch58Status=spSwitch58Status, sensorProbeRelayArrayPort5RelayCycleTime=sensorProbeRelayArrayPort5RelayCycleTime, sensorProbeThermostatTemperatureArrayPort1LowLimit2=sensorProbeThermostatTemperatureArrayPort1LowLimit2, sensorProbeDrycontactArrayPort4ControlMode=sensorProbeDrycontactArrayPort4ControlMode, sensorDCvoltageHighCriticalDesc=sensorDCvoltageHighCriticalDesc, spCustomStatus=spCustomStatus, sensorProbeTemperatureArrayPort4ContTimeNormal=sensorProbeTemperatureArrayPort4ContTimeNormal, sensorProbeRelayArrayPort1ControlMode=sensorProbeRelayArrayPort1ControlMode, sensorProbeThermostatTemperatureArrayPort5LowLimit1=sensorProbeThermostatTemperatureArrayPort5LowLimit1, spRelayArray8_6Status=spRelayArray8_6Status, sensorProbeDrycontactArrayPort3Number=sensorProbeDrycontactArrayPort3Number, spRelayArray6_8Status=spRelayArray6_8Status, sensorProbeTemperatureArrayPort8ContTimeHighWarning=sensorProbeTemperatureArrayPort8ContTimeHighWarning, sensor4to20mADelayLowCritical=sensor4to20mADelayLowCritical, sensorTemperatureIndex=sensorTemperatureIndex, sensorTemperatureStatus=sensorTemperatureStatus, sensorProbeRelayArrayPort5Index=sensorProbeRelayArrayPort5Index, sensorProbeDrycontactArraySensor=sensorProbeDrycontactArraySensor, sensorThermostatDelayNormal=sensorThermostatDelayNormal, sensorThermostatTable=sensorThermostatTable, sensorProbeTemperatureArrayPort6GoOnline=sensorProbeTemperatureArrayPort6GoOnline, sensorPowerLowCriticalDesc=sensorPowerLowCriticalDesc, sensorProbeWattHoursReset=sensorProbeWattHoursReset, sensorProbeSoundDetectorSensorTable=sensorProbeSoundDetectorSensorTable, sensorProbeVirtualAnalogContTimeHighWarning=sensorProbeVirtualAnalogContTimeHighWarning, spAnalogue7Status=spAnalogue7Status, sensorOffDescription=sensorOffDescription, spIRMS7Status=spIRMS7Status, sensorAirflowHighWarningDesc=sensorAirflowHighWarningDesc, sensorPowerDelayLowCritical=sensorPowerDelayLowCritical, sensorProbeTempAcknowledgement=sensorProbeTempAcknowledgement, sensorProbeNoCameraStatus=sensorProbeNoCameraStatus, sensorProbeThermostatTemperatureArrayPort8Online=sensorProbeThermostatTemperatureArrayPort8Online, sensorProbeRelayArrayPort3URL=sensorProbeRelayArrayPort3URL, sensorThermostatDelayHighWarning=sensorThermostatDelayHighWarning, sensorFuelDelayHighCritical=sensorFuelDelayHighCritical, sensorProbeRelayArrayPort2RelayCycleTime=sensorProbeRelayArrayPort2RelayCycleTime, sensorProbeThermostatTemperatureArrayPort6NormalAction2=sensorProbeThermostatTemperatureArrayPort6NormalAction2, sensorProbeThermostatTemperatureArrayPort1GoOnline=sensorProbeThermostatTemperatureArrayPort1GoOnline, sensorProbeTempEmailTrapLimit=sensorProbeTempEmailTrapLimit, sensorPort=sensorPort, sensorSirenIndex=sensorSirenIndex, sensorTemperatureDelayHighCritical=sensorTemperatureDelayHighCritical, sensorProbeThermostatTemperatureArrayPort2NormalAction2=sensorProbeThermostatTemperatureArrayPort2NormalAction2, sensorProbeThermostatTemperatureArrayPort8GoOnline=sensorProbeThermostatTemperatureArrayPort8GoOnline, sensorProbeRelayArrayPort2=sensorProbeRelayArrayPort2, spSwitch48Status=spSwitch48Status, spRelayArray5_3Status=spRelayArray5_3Status, spIRMS8Status=spIRMS8Status, sensorTemperatureOffset=sensorTemperatureOffset, sensorProbeTemperatureArrayPort7Index=sensorProbeTemperatureArrayPort7Index, sensorTemperatureDescription=sensorTemperatureDescription, sensorFuelLowCritical=sensorFuelLowCritical, sensorProbeThermostatTemperatureArrayPort7LowLimit2=sensorProbeThermostatTemperatureArrayPort7LowLimit2, sensorProbeNoCameraGoOnline=sensorProbeNoCameraGoOnline, sensorDCvoltageStatus=sensorDCvoltageStatus, sensorProbeSoundDetectorOpenURL=sensorProbeSoundDetectorOpenURL, secSummary=secSummary, sensorProbeRelayArrayPort2Index=sensorProbeRelayArrayPort2Index, spSwitch21Status=spSwitch21Status, sensorFuelRearm=sensorFuelRearm, sensorProbeDrycontactArrayPort8Entry=sensorProbeDrycontactArrayPort8Entry, sensorProbeThermostatTemperatureArrayPort3HighLimitAction2=sensorProbeThermostatTemperatureArrayPort3HighLimitAction2, sensorProbeVirtualSwitchStatus=sensorProbeVirtualSwitchStatus, sensorACvoltageGoOffline=sensorACvoltageGoOffline, sensorProbeSwitchManualRelayAction=sensorProbeSwitchManualRelayAction, sensorProbeDrycontactArrayPort7GoOnline=sensorProbeDrycontactArrayPort7GoOnline, sensorProbeRelayArrayPort7ManualRelayAction=sensorProbeRelayArrayPort7ManualRelayAction, sensorRelayManualAction=sensorRelayManualAction, sensorProbeCameraResolution=sensorProbeCameraResolution, sensorIntelligentPort1GoOnline=sensorIntelligentPort1GoOnline, sensorTankSenderLowCriticalColor=sensorTankSenderLowCriticalColor, sensorProbeSwitchSirenActiveStatus=sensorProbeSwitchSirenActiveStatus, sensorFuelDisplayStyle=sensorFuelDisplayStyle, sensorProbeHumidityRaw=sensorProbeHumidityRaw, sensorProbeVRMSDescription=sensorProbeVRMSDescription, sensorProbeTemperatureArrayPort3ContTimeLowWarning=sensorProbeTemperatureArrayPort3ContTimeLowWarning, sensorProbeTemperatureArrayPort3ContTimeLowCritical=sensorProbeTemperatureArrayPort3ContTimeLowCritical, sensorProbeSwitchRelayAction=sensorProbeSwitchRelayAction, sensorProbeTypeADE7763Name=sensorProbeTypeADE7763Name, sensorProbeVRMSRelayOnPort=sensorProbeVRMSRelayOnPort, spSwitch14Status=spSwitch14Status, spRelayArray8_1Status=spRelayArray8_1Status, sensorProbeDrycontactArrayPort7ControlMode=sensorProbeDrycontactArrayPort7ControlMode, sensorProbeRelayArrayPort4RelayAction=sensorProbeRelayArrayPort4RelayAction, sensorProbeTemperatureArrayPort6Description=sensorProbeTemperatureArrayPort6Description, sensorProbeThermostatTemperatureArrayPort5RelayControlPort=sensorProbeThermostatTemperatureArrayPort5RelayControlPort, sensorProbeHumidityOffset=sensorProbeHumidityOffset)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeRelayArrayPort4ManualRelayCycleTime=sensorProbeRelayArrayPort4ManualRelayCycleTime, sensorACvoltageDeviceIndex=sensorACvoltageDeviceIndex, sensorMotionIndex=sensorMotionIndex, sensorProbeTemperatureArrayPort6LowCritical=sensorProbeTemperatureArrayPort6LowCritical, sensorProbeSoftMotionURL=sensorProbeSoftMotionURL, sensorDCvoltageGoOffline=sensorDCvoltageGoOffline, spSwitch67Status=spSwitch67Status, sensorTankSenderDelayHighCritical=sensorTankSenderDelayHighCritical, sensorFuelDelayNormal=sensorFuelDelayNormal, spSwitch31Status=spSwitch31Status, sensorProbeTypePCF8574XRelayName=sensorProbeTypePCF8574XRelayName, sensorDryContactPort1GoOnline=sensorDryContactPort1GoOnline, sensorProbeThermostatTemperatureArrayPort3EnableTime=sensorProbeThermostatTemperatureArrayPort3EnableTime, sensorProbeDrycontactArrayPort4GoOnline=sensorProbeDrycontactArrayPort4GoOnline, spTemperatureArray8Status=spTemperatureArray8Status, sensorProbeTemperatureArrayPort8ContTimeNormal=sensorProbeTemperatureArrayPort8ContTimeNormal, sensorFuelNormalColor=sensorFuelNormalColor, deviceEntry=deviceEntry, sensorProbeDrycontactArrayPort8ContTimeCritical=sensorProbeDrycontactArrayPort8ContTimeCritical, sensorProbeSyslogDestIP=sensorProbeSyslogDestIP, sensorProbeSetSyslogMsgPrefix=sensorProbeSetSyslogMsgPrefix, sensorProbeVRMSURL=sensorProbeVRMSURL, sensorProbeDrycontactArrayPort5ControlMode=sensorProbeDrycontactArrayPort5ControlMode, sensorProbeSwitchIndexCount=sensorProbeSwitchIndexCount, sensorProbeRelayArrayPort6RelayCycleTime=sensorProbeRelayArrayPort6RelayCycleTime, sensorProbeDrycontactArrayPort4OpenURL=sensorProbeDrycontactArrayPort4OpenURL, sensorTemperaturePort=sensorTemperaturePort, sensorProbeTemperatureArrayPort5ContTimeSensorError=sensorProbeTemperatureArrayPort5ContTimeSensorError, sensorThermostatStatus=sensorThermostatStatus, sensorProbeTempRearm=sensorProbeTempRearm, sensorProbeTemperatureArrayPort4=sensorProbeTemperatureArrayPort4, spSwitch25Status=spSwitch25Status, sensorProbeVirtualSwitchSensorIndex=sensorProbeVirtualSwitchSensorIndex, spSwitch41Status=spSwitch41Status, sensorProbeTemperatureArrayPort6Entry=sensorProbeTemperatureArrayPort6Entry, spVirtual3Status=spVirtual3Status, sensorProbeDrycontactArrayPort1Number=sensorProbeDrycontactArrayPort1Number, sensorProbeThermostatTemperatureArrayPort5Mode=sensorProbeThermostatTemperatureArrayPort5Mode, sensorProbeTemperatureArrayPort1Rearm=sensorProbeTemperatureArrayPort1Rearm, sensorProbeThermostatTemperatureArrayPort1LowLimit1=sensorProbeThermostatTemperatureArrayPort1LowLimit1, sensorTankSenderRaw=sensorTankSenderRaw, sensorProbeTemperatureArrayPort1Online=sensorProbeTemperatureArrayPort1Online, sensorProbeEnergyDelayError=sensorProbeEnergyDelayError, sensorProbeTemperatureArrayPort5Index=sensorProbeTemperatureArrayPort5Index, sensorProbeTemperatureArrayPort8LowWarning=sensorProbeTemperatureArrayPort8LowWarning, spRelayArray3_3Status=spRelayArray3_3Status, sensorProbeDrycontactArrayPort7OutputDescOn=sensorProbeDrycontactArrayPort7OutputDescOn, sensorProbeDrycontactArrayPort4Number=sensorProbeDrycontactArrayPort4Number, sensorProbeTempContTimeHighCritical=sensorProbeTempContTimeHighCritical, spSwitch56Status=spSwitch56Status, sensorProbeHumidityDelayNormal=sensorProbeHumidityDelayNormal, spVRMS8Status=spVRMS8Status, sensorProbeMegaVersion=sensorProbeMegaVersion, sensorProbeTemperatureArrayPort6ContTimeLowCritical=sensorProbeTemperatureArrayPort6ContTimeLowCritical, spSwitch64Status=spSwitch64Status, sensorProbeRelayArrayPort1=sensorProbeRelayArrayPort1, spRelayArray1_5Status=spRelayArray1_5Status, spTemperatureArray5_5Status=spTemperatureArray5_5Status, sensorACvoltageNormalDesc=sensorACvoltageNormalDesc, sensorPowerLowWarning=sensorPowerLowWarning, sensorProbeEnergyLowCritical=sensorProbeEnergyLowCritical, spRelayArray4_2Status=spRelayArray4_2Status, sensorProbeHumidityEmailTrapLimit=sensorProbeHumidityEmailTrapLimit, deviceType=deviceType, sensorProbeDrycontactArrayPort1Entry=sensorProbeDrycontactArrayPort1Entry, sensorProbeRelayArrayPort2NormalState=sensorProbeRelayArrayPort2NormalState, deviceIntelligentInfo=deviceIntelligentInfo, sensorProbeRelayArrayPort6Table=sensorProbeRelayArrayPort6Table, spSwitch3Status=spSwitch3Status, sensorProbeEnergyPercent=sensorProbeEnergyPercent, sensorProbeHumidityGoOnline=sensorProbeHumidityGoOnline, sensorProbeDrycontactArrayPort4ManualOutputCycleTime=sensorProbeDrycontactArrayPort4ManualOutputCycleTime, sensorEntry=sensorEntry, sensorWaterSubPort=sensorWaterSubPort, sensorProbeHumidityURL=sensorProbeHumidityURL, sensorProbeRelayArrayPort8Status=sensorProbeRelayArrayPort8Status, sensorProbeDrycontactArrayPort3OpenURL=sensorProbeDrycontactArrayPort3OpenURL, sensorProbeSoundDetectorMicSensitivity=sensorProbeSoundDetectorMicSensitivity, sensorProbeTypeSHT11HumidityName=sensorProbeTypeSHT11HumidityName, sensorProbeGetCommunity=sensorProbeGetCommunity, sensorProbeTemperatureArrayPort2Entry=sensorProbeTemperatureArrayPort2Entry, sensorThermostatLowCriticalColor=sensorThermostatLowCriticalColor, spTemperatureArray3_7Status=spTemperatureArray3_7Status, sensorProbeTemperatureArrayPort8=sensorProbeTemperatureArrayPort8, sensorDryContactPort15GoOnline=sensorDryContactPort15GoOnline, sensorProbeTrapCommunity=sensorProbeTrapCommunity, sensorProbeTemperatureArrayPort5ContTimeLowWarning=sensorProbeTemperatureArrayPort5ContTimeLowWarning, sensorPowerMinValue=sensorPowerMinValue, sensorProbeIRMSContTimeSensorError=sensorProbeIRMSContTimeSensorError, sensorProbeSoundDetectorHighWarning=sensorProbeSoundDetectorHighWarning, spUnknownStatus=spUnknownStatus, sensorProbeTemperatureArrayPort4Calendar=sensorProbeTemperatureArrayPort4Calendar, sensorProbeCameraServerClientSetPassword=sensorProbeCameraServerClientSetPassword, sensorProbeRelayArrayPort3NormalState=sensorProbeRelayArrayPort3NormalState, spVRMS5Status=spVRMS5Status, sensorProbeThermostatHighLimitAction2=sensorProbeThermostatHighLimitAction2, sensorProbeRelayArrayPort7Status=sensorProbeRelayArrayPort7Status, sensorProbeNoCameraSensorTable=sensorProbeNoCameraSensorTable, spTemperatureArray1_5Status=spTemperatureArray1_5Status, sensorProbeSoftMotionStatus=sensorProbeSoftMotionStatus, spRelayArray6_7Status=spRelayArray6_7Status, sensorProbeThermostatTemperatureArrayPort7HighLimitAction2=sensorProbeThermostatTemperatureArrayPort7HighLimitAction2, sensorSirenManualAction=sensorSirenManualAction, sensorProbeRelayArrayPort3RelayDescOff=sensorProbeRelayArrayPort3RelayDescOff, sensorProbeRelayArrayPort3Description=sensorProbeRelayArrayPort3Description, sensorRelayOnDesc=sensorRelayOnDesc, sensorTemperatureDelayLowWarning=sensorTemperatureDelayLowWarning, sensorProbeThermostatTemperatureArrayPort7LowLimitAction1=sensorProbeThermostatTemperatureArrayPort7LowLimitAction1, sensorProbeHost=sensorProbeHost, sensorProbeSoftMotionSensorNumber=sensorProbeSoftMotionSensorNumber, sensorDCvoltageHighWarningDesc=sensorDCvoltageHighWarningDesc, sensorProbeTemperatureArrayPort2Rearm=sensorProbeTemperatureArrayPort2Rearm, sensorProbeRelayArrayPort6OpenURL=sensorProbeRelayArrayPort6OpenURL, spEnergy3Status=spEnergy3Status, sensorProbeTempContTimeHighWarning=sensorProbeTempContTimeHighWarning, spSenWarningStatus=spSenWarningStatus, sensorProbeDrycontactArrayPort6=sensorProbeDrycontactArrayPort6, sensorProbeRelayArrayPort8ManualRelayAction=sensorProbeRelayArrayPort8ManualRelayAction, sensorProbeTemperatureArrayPort5ContTimeLowCritical=sensorProbeTemperatureArrayPort5ContTimeLowCritical, sensorProbeMailResendInterval=sensorProbeMailResendInterval, sensorProbeThermostatTemperatureArrayPort4EnableTime=sensorProbeThermostatTemperatureArrayPort4EnableTime, sensorHumidityUnit=sensorHumidityUnit, spSwitch5Status=spSwitch5Status, sensorProbeIRMSLowWarning=sensorProbeIRMSLowWarning, sensorProbeSendTrapsAlive=sensorProbeSendTrapsAlive, sensorProbeTemperatureArrayPort8Offset=sensorProbeTemperatureArrayPort8Offset, sensorProbeIRMSContTimeHighCritical=sensorProbeIRMSContTimeHighCritical, sensorProbeEnergySensorNumber=sensorProbeEnergySensorNumber, spEventClassName=spEventClassName, sensorProbeRelayArrayPort3RelayCycleTime=sensorProbeRelayArrayPort3RelayCycleTime, sensorProbeTemperatureArrayPort7GoOnline=sensorProbeTemperatureArrayPort7GoOnline, sensorProbeTemperatureArrayPort3Table=sensorProbeTemperatureArrayPort3Table, spRelayArray3Status=spRelayArray3Status, sensorFuelDeviceIndex=sensorFuelDeviceIndex, sensorDCvoltageOffset=sensorDCvoltageOffset, sensorProbeTemperatureArrayPort8GoOnline=sensorProbeTemperatureArrayPort8GoOnline, sensorProbeTemperatureArrayPort5OpenURL=sensorProbeTemperatureArrayPort5OpenURL, sensorHumidityDelayHighCritical=sensorHumidityDelayHighCritical, sensorWaterCriticalDesc=sensorWaterCriticalDesc, sensorFuelHighCriticalDesc=sensorFuelHighCriticalDesc, sensorProbeTemperatureArrayPort2HighWarning=sensorProbeTemperatureArrayPort2HighWarning, spIRMSStatus=spIRMSStatus, sensorProbeThermostatTemperatureArrayPort2HighLimitAction1=sensorProbeThermostatTemperatureArrayPort2HighLimitAction1, sensor4to20mAPort=sensor4to20mAPort, sensorProbeTemperatureArrayPort6LowWarning=sensorProbeTemperatureArrayPort6LowWarning, sensorProbeTypeADE7763IRMSName=sensorProbeTypeADE7763IRMSName, spRelayArray7_6Status=spRelayArray7_6Status, sensorProbeTemperatureArrayPort2Index=sensorProbeTemperatureArrayPort2Index, sensorDCvoltageJumper=sensorDCvoltageJumper, sensorRelayOnColor=sensorRelayOnColor, sensorACvoltageTable=sensorACvoltageTable, sensorProbeTemperatureArrayPort6ContTimeLowWarning=sensorProbeTemperatureArrayPort6ContTimeLowWarning, sensorTankSenderLowCritical=sensorTankSenderLowCritical, sensorProbeTemperatureArrayPort7ContTimeSensorError=sensorProbeTemperatureArrayPort7ContTimeSensorError, sensorProbeVirtualSwitchNormalState=sensorProbeVirtualSwitchNormalState, sensorProbeTemperatureArrayPort7Offset=sensorProbeTemperatureArrayPort7Offset, sensorProbeEnergyContTimeHighCritical=sensorProbeEnergyContTimeHighCritical, spVRMS4Status=spVRMS4Status, spVirtual2Status=spVirtual2Status, sensorIntelligentPort2GoOnline=sensorIntelligentPort2GoOnline, spRelayArray4_3Status=spRelayArray4_3Status, sensorTemperatureHighCriticalDesc=sensorTemperatureHighCriticalDesc, sensorProbeSoftMotionPercentSensitivity=sensorProbeSoftMotionPercentSensitivity, spRelayArray7_2Status=spRelayArray7_2Status, sensorSirenDescription=sensorSirenDescription, spTemperatureArray1_6Status=spTemperatureArray1_6Status, sensorProbeVirtualSwitchSensor=sensorProbeVirtualSwitchSensor, sensorPowerStatus=sensorPowerStatus, sensorProbeDrycontactArrayPort1OutputDescOff=sensorProbeDrycontactArrayPort1OutputDescOff, sensorAirflowLowWarningColor=sensorAirflowLowWarningColor, sensorProbeTemperatureArrayPort8ContTimeLowCritical=sensorProbeTemperatureArrayPort8ContTimeLowCritical, sensorProbeTemperatureArrayPort7ContTimeHighCritical=sensorProbeTemperatureArrayPort7ContTimeHighCritical, sensorProbeTemperatureArrayPort7HighCritical=sensorProbeTemperatureArrayPort7HighCritical, sensorProbeVirtualAnalogCalendar=sensorProbeVirtualAnalogCalendar, deviceDryContactEntry=deviceDryContactEntry, sensorProbeTempEmailTrapSchedule=sensorProbeTempEmailTrapSchedule, sensorProbeThermostatTemperatureArrayPort4LowLimitAction2=sensorProbeThermostatTemperatureArrayPort4LowLimitAction2, sensorProbeTemperatureArrayPort6Table=sensorProbeTemperatureArrayPort6Table, sensorProbeVirtualSwitchAcknowledgement=sensorProbeVirtualSwitchAcknowledgement, sensorPowerIndex=sensorPowerIndex, spRelayArray8_2Status=spRelayArray8_2Status, sensorProbeTemperatureArrayPort6Online=sensorProbeTemperatureArrayPort6Online, sensorProbeTemperatureArrayPort8Description=sensorProbeTemperatureArrayPort8Description, sensorProbeStatusNumberError=sensorProbeStatusNumberError, sensorProbeVirtualAnalogDelayError=sensorProbeVirtualAnalogDelayError, sensorProbeTemperatureArrayPort3DegreeRaw=sensorProbeTemperatureArrayPort3DegreeRaw, sensorProbeRelayArrayPort2Status=sensorProbeRelayArrayPort2Status, sensorProbeTemperatureArrayPort1DegreeType=sensorProbeTemperatureArrayPort1DegreeType, sensorProbeRelayArrayPort3Table=sensorProbeRelayArrayPort3Table, sensorProbeDrycontactArrayPort3Table=sensorProbeDrycontactArrayPort3Table, sensorProbeMailSubject=sensorProbeMailSubject, sensorProbeDrycontactArrayPort3URL=sensorProbeDrycontactArrayPort3URL, sensorProbeSwitchSirenOnPort=sensorProbeSwitchSirenOnPort, sensorProbeDrycontactArrayPort2Table=sensorProbeDrycontactArrayPort2Table, sensorProbeSoftMotionSensorIndex=sensorProbeSoftMotionSensorIndex, sensorProbeTemperatureArrayPort7DegreeRaw=sensorProbeTemperatureArrayPort7DegreeRaw, sensorProbeHumidityHighCritical=sensorProbeHumidityHighCritical, sensorProbeTemperatureArrayPort8DegreeRaw=sensorProbeTemperatureArrayPort8DegreeRaw, sensorMotionCriticalDesc=sensorMotionCriticalDesc, sensorProbeTemperatureArrayPort7ContTimeNormal=sensorProbeTemperatureArrayPort7ContTimeNormal, sensorProbeThermostatTemperatureArrayPort8Value=sensorProbeThermostatTemperatureArrayPort8Value, spSwitch45Status=spSwitch45Status, sensorProbeTemperatureArrayPort1DegreeRaw=sensorProbeTemperatureArrayPort1DegreeRaw, sensorProbeThermostatTemperatureArrayPort3NormalAction1=sensorProbeThermostatTemperatureArrayPort3NormalAction1, sensorProbeThermostatLowLimit2=sensorProbeThermostatLowLimit2, sensorProbeVRMSContTimeLowCritical=sensorProbeVRMSContTimeLowCritical, sensorProbeThermostatTemperatureArrayPort5LowLimitAction1=sensorProbeThermostatTemperatureArrayPort5LowLimitAction1, sensorProbeTemperatureArrayPort1=sensorProbeTemperatureArrayPort1, sensorTankSenderTable=sensorTankSenderTable, spEnergy6Status=spEnergy6Status, sensorSecurityNormalDesc=sensorSecurityNormalDesc, sensorThermostatDisplayStyle=sensorThermostatDisplayStyle, sensorPowerTimeOut=sensorPowerTimeOut, spVirtual1Status=spVirtual1Status, sensorProbeDrycontactArrayPort1Direction=sensorProbeDrycontactArrayPort1Direction, sensorProbeVirtualSwitchDescription=sensorProbeVirtualSwitchDescription, sensorWaterRopeGoOffline=sensorWaterRopeGoOffline, sensorFuelLowWarningDesc=sensorFuelLowWarningDesc, sensorHumiditySensorErrorDesc=sensorHumiditySensorErrorDesc, sensorProbeHumidityAtoDAmountBaseVoltage=sensorProbeHumidityAtoDAmountBaseVoltage, sensorProbeSoundDetectorRearm=sensorProbeSoundDetectorRearm, sensorProbeThermostatTemperatureArrayPort6HighLimit1=sensorProbeThermostatTemperatureArrayPort6HighLimit1, sensorSecuritySubPort=sensorSecuritySubPort, sensorProbeDrycontactArrayPort3ContTimeCritical=sensorProbeDrycontactArrayPort3ContTimeCritical, sensorProbeVRMSLowCritical=sensorProbeVRMSLowCritical, sensorProbePTZEnable=sensorProbePTZEnable, sensorDCvoltageAmountBaseVoltage=sensorDCvoltageAmountBaseVoltage, sensorThermostatDegree=sensorThermostatDegree, sensorProbeThermostatTemperatureArrayPort2LowLimitAction1=sensorProbeThermostatTemperatureArrayPort2LowLimitAction1, spAnalogue1Status=spAnalogue1Status, sensorDryContactDescription=sensorDryContactDescription, sensorProbeTemperatureArrayPort5URL=sensorProbeTemperatureArrayPort5URL, spTemperatureArray4_1Status=spTemperatureArray4_1Status, sensorDCvoltageDelayError=sensorDCvoltageDelayError, sensorTankSenderSensorErrorDesc=sensorTankSenderSensorErrorDesc, spIRMS3Status=spIRMS3Status, spTemperatureArray5_4Status=spTemperatureArray5_4Status, spSensorType=spSensorType, sensorFuelHighCritical=sensorFuelHighCritical, spHelpUrl=spHelpUrl, sensorProbeTemperatureArrayPort7Number=sensorProbeTemperatureArrayPort7Number, sensorProbeDrycontactArrayPort6NormalState=sensorProbeDrycontactArrayPort6NormalState, sensorAirflowHighWarning=sensorAirflowHighWarning, sensorPowerHighCriticalDesc=sensorPowerHighCriticalDesc, spRelayArray3_8Status=spRelayArray3_8Status, sensorProbeHumidityAtoDJumper=sensorProbeHumidityAtoDJumper, sensorProbeMailLastStatus=sensorProbeMailLastStatus, sensorProbeSoundDetectorRecordingSource=sensorProbeSoundDetectorRecordingSource, sensorProbeAdcCalibratePort=sensorProbeAdcCalibratePort, spVirtual15Status=spVirtual15Status, sensorProbeDrycontactArrayPort8=sensorProbeDrycontactArrayPort8, sensorDCvoltageLowCritical=sensorDCvoltageLowCritical, sensorProbeVRMSSirenOnPort=sensorProbeVRMSSirenOnPort, sensorProbeDrycontactArrayPort4Entry=sensorProbeDrycontactArrayPort4Entry)
mibBuilder.exportSymbols("SPAGENT-MIB", spTemperatureArray1Status=spTemperatureArray1Status, sensorPowerRearm=sensorPowerRearm, sensorProbeTemperatureArrayPort6HighWarning=sensorProbeTemperatureArrayPort6HighWarning, sensorACvoltageEntry=sensorACvoltageEntry, sensorProbeDrycontactArrayPort4Index=sensorProbeDrycontactArrayPort4Index, spRelayArray1_1Status=spRelayArray1_1Status, sensorProbeThermostatTemperatureArrayPort7RelayControlPort=sensorProbeThermostatTemperatureArrayPort7RelayControlPort, sensorProbeVirtualAnalogSensorTable=sensorProbeVirtualAnalogSensorTable, spTemperature1Status=spTemperature1Status, sensorDeviceIndex=sensorDeviceIndex, sensorIntelligentTypeSelected=sensorIntelligentTypeSelected, sensorProbeSoundDetectorSensorEntry=sensorProbeSoundDetectorSensorEntry, sensorProbeDrycontactArrayPort3Direction=sensorProbeDrycontactArrayPort3Direction, sensorProbeThermostatTemperatureArrayPort6HighLimitAction1=sensorProbeThermostatTemperatureArrayPort6HighLimitAction1, sensorProbeWattHoursDescription=sensorProbeWattHoursDescription, sensorDescription=sensorDescription, sensorProbeThermostatTemperatureArrayPort2RelayControlPort=sensorProbeThermostatTemperatureArrayPort2RelayControlPort, sensorProbeDrycontactArrayPort1Index=sensorProbeDrycontactArrayPort1Index, sensorProbeTemperatureArrayPort2Online=sensorProbeTemperatureArrayPort2Online, sensorProbeWattHoursSensorEntry=sensorProbeWattHoursSensorEntry, spVRMS1Status=spVRMS1Status, sensorRelayDescription=sensorRelayDescription, sensorProbeTemperatureArrayPort2ContTimeLowCritical=sensorProbeTemperatureArrayPort2ContTimeLowCritical, sensorProbeDrycontactArrayPort1ContTimeCritical=sensorProbeDrycontactArrayPort1ContTimeCritical, sensorProbeDrycontactArrayPort8ContTimeNormal=sensorProbeDrycontactArrayPort8ContTimeNormal, sensorHumidityDelayHighWarning=sensorHumidityDelayHighWarning, spRelayArray1_8Status=spRelayArray1_8Status, sensorProbeHumidityHighVoltage=sensorProbeHumidityHighVoltage, sensorProbeTemperatureArrayPort1Status=sensorProbeTemperatureArrayPort1Status, sensorTankSenderHighCritical=sensorTankSenderHighCritical, sensorSmokeStatus=sensorSmokeStatus, sensorProbeTemperatureArrayPort1OpenURL=sensorProbeTemperatureArrayPort1OpenURL, sensorProbeTemperatureArrayPort3Status=sensorProbeTemperatureArrayPort3Status, sensorProbeThermostatTemperatureArrayPort7HighLimitAction1=sensorProbeThermostatTemperatureArrayPort7HighLimitAction1, sensor4to20mALowWarningColor=sensor4to20mALowWarningColor, sensorProbeSoundDetectorContTimeHighWarning=sensorProbeSoundDetectorContTimeHighWarning, sensorProbeTrapDestination=sensorProbeTrapDestination, sensorProbeVRMSRearm=sensorProbeVRMSRearm, sensorProbeTemperatureArrayPort7DatacollectType=sensorProbeTemperatureArrayPort7DatacollectType, sensorProbeIRMSEmailTrapLimit=sensorProbeIRMSEmailTrapLimit, sensorProbeDefaultGateway=sensorProbeDefaultGateway, spTemperatureArray7_3Status=spTemperatureArray7_3Status, sensorProbeTrapResendInterval=sensorProbeTrapResendInterval, sensorACvoltageCriticalDesc=sensorACvoltageCriticalDesc, sensorProbeDrycontactArrayPort7Online=sensorProbeDrycontactArrayPort7Online, sensorProbeSendMail=sensorProbeSendMail, sensorProbeIRMSContTimeLowCritical=sensorProbeIRMSContTimeLowCritical, spTemperatureArray1_2Status=spTemperatureArray1_2Status, sensorProbeVRMSSirenActiveStatus=sensorProbeVRMSSirenActiveStatus, sensorProbeRelayArrayPort6ManualRelayAction=sensorProbeRelayArrayPort6ManualRelayAction, sensorProbeReadSysLog=sensorProbeReadSysLog, sensorProbeDrycontactArrayPort8OutputDescOn=sensorProbeDrycontactArrayPort8OutputDescOn, sensor4to20mAHighWarningColor=sensor4to20mAHighWarningColor, spTemperatureArray7_4Status=spTemperatureArray7_4Status, sensorProbeRelayArrayPort7Entry=sensorProbeRelayArrayPort7Entry, sensorSecurityIndex=sensorSecurityIndex, sensorWaterNormalColor=sensorWaterNormalColor, sensorProbeTempRelayActiveStatus=sensorProbeTempRelayActiveStatus, sensorProbeSwitchSirenAction=sensorProbeSwitchSirenAction, sensorProbeVRMSDelayError=sensorProbeVRMSDelayError, sensorProbeTemperatureArrayPort2ContTimeLowWarning=sensorProbeTemperatureArrayPort2ContTimeLowWarning, sensorProbeTempDelayNormal=sensorProbeTempDelayNormal, sensorProbeTemperatureArrayPort3Number=sensorProbeTemperatureArrayPort3Number, sensorLowWarningColor=sensorLowWarningColor, sensorProbeIRMSSensorTable=sensorProbeIRMSSensorTable, sensorProbeTemperatureArrayPort2ContTimeHighCritical=sensorProbeTemperatureArrayPort2ContTimeHighCritical, spRelayArray5_7Status=spRelayArray5_7Status, sensorProbeTemperatureArrayPort7LowCritical=sensorProbeTemperatureArrayPort7LowCritical, sensorProbeTypeTemperatureName=sensorProbeTypeTemperatureName, sensorDryContactPort9GoOnline=sensorDryContactPort9GoOnline, sensorWaterCriticalColor=sensorWaterCriticalColor, sensorProbeRelayArrayPort8URL=sensorProbeRelayArrayPort8URL, sensorFuelHighWarning=sensorFuelHighWarning, sensorTable=sensorTable, sensorProbeThermostatTemperatureArrayPort4HighLimit2=sensorProbeThermostatTemperatureArrayPort4HighLimit2, sensorProbeDrycontactArrayPort4NormalState=sensorProbeDrycontactArrayPort4NormalState, sensorProbeThermostatTemperatureArrayPort1LowLimitAction1=sensorProbeThermostatTemperatureArrayPort1LowLimitAction1, sensorPowerDelayError=sensorPowerDelayError, sensorTankSenderLowWarning=sensorTankSenderLowWarning, sensorProbeTemperatureArrayPort2ContTimeHighWarning=sensorProbeTemperatureArrayPort2ContTimeHighWarning, sensorProbeTemperatureArrayPort2Calendar=sensorProbeTemperatureArrayPort2Calendar, sensorProbeSMTPAuth=sensorProbeSMTPAuth, spSwitch26Status=spSwitch26Status, sensorProbeRelayArrayPort7Number=sensorProbeRelayArrayPort7Number, sensorProbeVRMSContTimeLowWarning=sensorProbeVRMSContTimeLowWarning, sensorDryContactCriticalColor=sensorDryContactCriticalColor, sensorProbeDrycontactArrayPort1OutputDescOn=sensorProbeDrycontactArrayPort1OutputDescOn, sensorProbeTemperatureArrayPort5LowCritical=sensorProbeTemperatureArrayPort5LowCritical, spStatus=spStatus, sensorPowerSensorErrorDesc=sensorPowerSensorErrorDesc, sensorProbeDrycontactArrayPort4ContTimeCritical=sensorProbeDrycontactArrayPort4ContTimeCritical, spSensorDecimalValue=spSensorDecimalValue, sensor4to20mARearm=sensor4to20mARearm, sensorProbeSnmpTrapPort=sensorProbeSnmpTrapPort, spRelayArray7_5Status=spRelayArray7_5Status, sensorProbeTemperatureArrayPort3Rearm=sensorProbeTemperatureArrayPort3Rearm, sensorProbeHumidityAtoDTypeUnit=sensorProbeHumidityAtoDTypeUnit, sensorProbeSoundDetectorDescription=sensorProbeSoundDetectorDescription, sensorThermostatDelayError=sensorThermostatDelayError, spRelayArray4_6Status=spRelayArray4_6Status, sensorProbeDrycontactArrayPort5Entry=sensorProbeDrycontactArrayPort5Entry, sensorProbeVRMSSensor=sensorProbeVRMSSensor, sensorDryContactOffColor=sensorDryContactOffColor, sensorWaterIndex=sensorWaterIndex, sensorPowerNormalDesc=sensorPowerNormalDesc, sensorProbeDrycontactArrayPort5Status=sensorProbeDrycontactArrayPort5Status, sensorHumidityLowCriticalColor=sensorHumidityLowCriticalColor, sensorProbeTemperatureArrayPort5Description=sensorProbeTemperatureArrayPort5Description, spTemperatureArray5_1Status=spTemperatureArray5_1Status, sensorProbeHumidityTable=sensorProbeHumidityTable, sensorProbeUseDHCP=sensorProbeUseDHCP, sensorProbeTempRelayCycleTime=sensorProbeTempRelayCycleTime, sensorProbeTypeDrycontactInputName=sensorProbeTypeDrycontactInputName, sensorProbeSoftMotionMask=sensorProbeSoftMotionMask, sensorProbeDrycontactArrayPort3ContTimeNormal=sensorProbeDrycontactArrayPort3ContTimeNormal, sensorSirenPort=sensorSirenPort, sensorAirflowHighCriticalDesc=sensorAirflowHighCriticalDesc, sensorProbeVRMSRelayCycleTime=sensorProbeVRMSRelayCycleTime, sensorProbeRelayArrayPort5GoOnline=sensorProbeRelayArrayPort5GoOnline, sensorProbeTemperatureArrayPort7Value=sensorProbeTemperatureArrayPort7Value, sensorProbeDrycontactArrayPort7Description=sensorProbeDrycontactArrayPort7Description, sensorProbeRelayArrayPort8ControlMode=sensorProbeRelayArrayPort8ControlMode, sensorProbeTempOpenURL=sensorProbeTempOpenURL, sensorProbeRelayArrayPort5Table=sensorProbeRelayArrayPort5Table, sensorProbeTempSensorType=sensorProbeTempSensorType, sensorProbeIRMSSensor=sensorProbeIRMSSensor, spSensorSubIndex=spSensorSubIndex, sensorProbeRelayArrayPort2GoOnline=sensorProbeRelayArrayPort2GoOnline, sensorProbeDrycontactArrayPort7OutputDescOff=sensorProbeDrycontactArrayPort7OutputDescOff, sensorAirflowLowCritical=sensorAirflowLowCritical, sensorProbeProductType=sensorProbeProductType, sensorProbeIRMSSirenCycleTime=sensorProbeIRMSSirenCycleTime, sensorProbeHumidityContTimeLowCritical=sensorProbeHumidityContTimeLowCritical, sensorProbeHumidityRelayActiveStatus=sensorProbeHumidityRelayActiveStatus, sensorHumidityHighCritical=sensorHumidityHighCritical, sensorRelayEntry=sensorRelayEntry, sensorProbeThermostatTemperatureArrayPort4Description=sensorProbeThermostatTemperatureArrayPort4Description, sensorProbeTemperatureArrayPort8Value=sensorProbeTemperatureArrayPort8Value, sensorDisplayStyle=sensorDisplayStyle, sensorProbeSwitchRelayActiveStatus=sensorProbeSwitchRelayActiveStatus, sensorDryContactGoOffline=sensorDryContactGoOffline, sensorProbeVRMSGoOnline=sensorProbeVRMSGoOnline, spEnergy2Status=spEnergy2Status, sensorProbeTemperatureArrayPort3Online=sensorProbeTemperatureArrayPort3Online, sensorProbeTypeAirflowName=sensorProbeTypeAirflowName, sensorSirenOffColor=sensorSirenOffColor, sensorProbeTemperatureArrayPort1GoOnline=sensorProbeTemperatureArrayPort1GoOnline, deviceDryContactInfo=deviceDryContactInfo, sensorProbeEnableSysLog=sensorProbeEnableSysLog, sensorProbeHumidityLowWarning=sensorProbeHumidityLowWarning, sensorProbeTempSendNormalMail=sensorProbeTempSendNormalMail, spRelayArray1_3Status=spRelayArray1_3Status, sensorProbeTemperatureArrayPort1Description=sensorProbeTemperatureArrayPort1Description, sensorHumidityHighWarningDesc=sensorHumidityHighWarningDesc, sensorProbeDrycontactArrayPort6OutputDescOff=sensorProbeDrycontactArrayPort6OutputDescOff, sensorProbeMAC=sensorProbeMAC, sensorProbeDrycontactArrayPort8Direction=sensorProbeDrycontactArrayPort8Direction, sensor4to20mADeviceIndex=sensor4to20mADeviceIndex, sensorProbeNumberOfSensorPort=sensorProbeNumberOfSensorPort, spRelayArray7_8Status=spRelayArray7_8Status, sensor4to20mADisplayStyle=sensor4to20mADisplayStyle, sensorAirflowDelayLowWarning=sensorAirflowDelayLowWarning, sensorThermostatHighWarningDesc=sensorThermostatHighWarningDesc, sensorType=sensorType, sensorProbeTempEntry=sensorProbeTempEntry, sensorProbeVRMSContTimeHighWarning=sensorProbeVRMSContTimeHighWarning, sensorProbeThermostatTemperatureArrayPort8NormalAction1=sensorProbeThermostatTemperatureArrayPort8NormalAction1, sensorDryContactIndex=sensorDryContactIndex, sensorSirenGoOffline=sensorSirenGoOffline, spSwitch66Status=spSwitch66Status, spTemperatureArray3_3Status=spTemperatureArray3_3Status, sensorProbeRelayArrayPort2OpenURL=sensorProbeRelayArrayPort2OpenURL, sensorProbeRelayArrayPort8Online=sensorProbeRelayArrayPort8Online, sensorDryContactDeviceIndex=sensorDryContactDeviceIndex, spEnergy4Status=spEnergy4Status, sensorProbeTempHighWarning=sensorProbeTempHighWarning, sensorProbeOtherSensor=sensorProbeOtherSensor, sensorProbeTemperatureArrayPort3Index=sensorProbeTemperatureArrayPort3Index, sensorProbeIRMSContTimeLowWarning=sensorProbeIRMSContTimeLowWarning, sensorSirenControlMode=sensorSirenControlMode, sensorProbeTemperatureArrayPort6Number=sensorProbeTemperatureArrayPort6Number, spRelayArray5_2Status=spRelayArray5_2Status, sensorProbeThermostatTemperatureArrayPort6Index=sensorProbeThermostatTemperatureArrayPort6Index, sensorACvoltageStatus=sensorACvoltageStatus, sensor4to20mAValue=sensor4to20mAValue, sensorDryContactNormalState=sensorDryContactNormalState, sensorProbeVirtualSwitchSensorNumber=sensorProbeVirtualSwitchSensorNumber, sensorProbeClearSysLog=sensorProbeClearSysLog, spTemperatureArray7_5Status=spTemperatureArray7_5Status, sensorProbeSoftMotionSensorEntry=sensorProbeSoftMotionSensorEntry, sensorProbeTemperatureArrayPort1ContTimeHighWarning=sensorProbeTemperatureArrayPort1ContTimeHighWarning, sensorProbeTemperatureArrayPort6Status=sensorProbeTemperatureArrayPort6Status, sensorTankSenderUnit=sensorTankSenderUnit, sensorProbeMailFrom=sensorProbeMailFrom, sensorProbeVirtualAnalogContTimeHighCritical=sensorProbeVirtualAnalogContTimeHighCritical, sensorProbeEnergyContTimeLowCritical=sensorProbeEnergyContTimeLowCritical, sensorProbeSwitchContTimeNormal=sensorProbeSwitchContTimeNormal, sensorProbeThermostatTemperatureArrayPort2Mode=sensorProbeThermostatTemperatureArrayPort2Mode, sensorFuelEntry=sensorFuelEntry, sensorProbeSoftMotionOpenURL=sensorProbeSoftMotionOpenURL, sensor4to20mALowWarning=sensor4to20mALowWarning, sensor4to20mASensorErrorDesc=sensor4to20mASensorErrorDesc, sensorAirflowDelayHighWarning=sensorAirflowDelayHighWarning, sensorFuelHighWarningColor=sensorFuelHighWarningColor, sensorProbeVRMSSensorEntry=sensorProbeVRMSSensorEntry, sensorProbeEnergyOpenURL=sensorProbeEnergyOpenURL, sensorProbeIRMSRelayOnPort=sensorProbeIRMSRelayOnPort, sensorProbeStatusNumber=sensorProbeStatusNumber, sensorProbeRelayArrayPort6Status=sensorProbeRelayArrayPort6Status, sensorProbeSwitchWaterRopeImpedance=sensorProbeSwitchWaterRopeImpedance, spRelayArray4_7Status=spRelayArray4_7Status, sensorProbeVirtualSwitchDescriptionNormal=sensorProbeVirtualSwitchDescriptionNormal, sensorProbeTempDegreeType=sensorProbeTempDegreeType, sensorHumidityHighCriticalDesc=sensorHumidityHighCriticalDesc, sensorDryContactPort16GoOnline=sensorDryContactPort16GoOnline, sensorDCvoltageLowWarning=sensorDCvoltageLowWarning, sensorProbeHumidityContTimeHighWarning=sensorProbeHumidityContTimeHighWarning, sensorTemperatureUnit=sensorTemperatureUnit, sensorProbeThermostatTemperatureArrayPort2HighLimitAction2=sensorProbeThermostatTemperatureArrayPort2HighLimitAction2, sensorProbeThermostatRelayControlPort=sensorProbeThermostatRelayControlPort, sensorProbeDrycontactArrayPort3Status=sensorProbeDrycontactArrayPort3Status, sensorProbeDrycontactArrayPort7ContTimeNormal=sensorProbeDrycontactArrayPort7ContTimeNormal, sensorProbeRelayArrayPort2Entry=sensorProbeRelayArrayPort2Entry, spAnalogueStatus=spAnalogueStatus, sensorProbeThermostatTemperatureArrayPort4NormalAction2=sensorProbeThermostatTemperatureArrayPort4NormalAction2, spRelayArray1Status=spRelayArray1Status, sensorProbeVRMSSirenAction=sensorProbeVRMSSirenAction, sensorProbeTypeThermocoupleName=sensorProbeTypeThermocoupleName, sensorProbeTemperatureArrayPort5Online=sensorProbeTemperatureArrayPort5Online, sensorSecurityEntry=sensorSecurityEntry, sensorProbeDrycontactArrayPort8Table=sensorProbeDrycontactArrayPort8Table, sensorSirenTable=sensorSirenTable, sensorDryContactStatus=sensorDryContactStatus, spVirtual7Status=spVirtual7Status, spTemperatureArray4_5Status=spTemperatureArray4_5Status, sensorProbeIRMSPercent=sensorProbeIRMSPercent, sensorProbeTimeZone=sensorProbeTimeZone, sensorTemperatureLowWarning=sensorTemperatureLowWarning, sensorProbeIRMSRelayCycleTime=sensorProbeIRMSRelayCycleTime, sensorSmokeDescription=sensorSmokeDescription, sensorDryContactPort3GoOnline=sensorDryContactPort3GoOnline, sensorProbeDrycontactArrayPort6ControlMode=sensorProbeDrycontactArrayPort6ControlMode, sensorProbeThermostatEnableTime=sensorProbeThermostatEnableTime, sensorProbeAutoSense=sensorProbeAutoSense, sensorProbeSwitchContTimeHighCritical=sensorProbeSwitchContTimeHighCritical, sensorAirflowSubPort=sensorAirflowSubPort, sensorProbeSoftMotionOnline=sensorProbeSoftMotionOnline, sensorDCvoltageAmountMaxVoltage=sensorDCvoltageAmountMaxVoltage, sensorProbeThermostatMode=sensorProbeThermostatMode, sensorDryContactEntry=sensorDryContactEntry, sensorProbeHumiditySirenCycleTime=sensorProbeHumiditySirenCycleTime, sensorFuelHighCriticalColor=sensorFuelHighCriticalColor, spRelayArray7_7Status=spRelayArray7_7Status, spVirtual18Status=spVirtual18Status)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeTempRelayOnPort=sensorProbeTempRelayOnPort, sensorProbeWebAdminPassword=sensorProbeWebAdminPassword, sensorProbeRelayArrayPort1GoOnline=sensorProbeRelayArrayPort1GoOnline, spTemperatureArray8_7Status=spTemperatureArray8_7Status, spRelayArray5_1Status=spRelayArray5_1Status, sensorTankSenderDelayNormal=sensorTankSenderDelayNormal, sensorThermostatHighCritical=sensorThermostatHighCritical, sensorProbeDrycontactArrayPort7URL=sensorProbeDrycontactArrayPort7URL, sensorPowerMaxValue=sensorPowerMaxValue, spTemperatureArray3_4Status=spTemperatureArray3_4Status, sensorProbeEnergyRelayActiveStatus=sensorProbeEnergyRelayActiveStatus, sensorProbeTemperatureArrayPort8Rearm=sensorProbeTemperatureArrayPort8Rearm, sensorProbeIRMSOpenURL=sensorProbeIRMSOpenURL, sensorProbeRelayArrayPort8Index=sensorProbeRelayArrayPort8Index, sensorThermostatLowWarningColor=sensorThermostatLowWarningColor, sensorProbeSwitchOutputLevel=sensorProbeSwitchOutputLevel, spTemperature7Status=spTemperature7Status, sensorDCvoltageDeviceIndex=sensorDCvoltageDeviceIndex, sensorProbeRelayArrayPort5Status=sensorProbeRelayArrayPort5Status, spTemperatureArray3_8Status=spTemperatureArray3_8Status, sensorProbeThermostatTemperatureArrayPort2HighLimit2=sensorProbeThermostatTemperatureArrayPort2HighLimit2, sensorProbeTemperatureArrayPort5HighWarning=sensorProbeTemperatureArrayPort5HighWarning, sensorMotionDescription=sensorMotionDescription, spTemperatureArray2_7Status=spTemperatureArray2_7Status, sensorProbeDrycontactArrayPort4Status=sensorProbeDrycontactArrayPort4Status, sensor4to20mALowCritical=sensor4to20mALowCritical, sensorProbeThermostatTemperatureArrayPort3LowLimitAction1=sensorProbeThermostatTemperatureArrayPort3LowLimitAction1, sensorProbeTempLowCritical=sensorProbeTempLowCritical, sensorRelayIndex=sensorRelayIndex, spTemperature8Status=spTemperature8Status, spAnalogue6Status=spAnalogue6Status, sensorProbeTemperatureArrayPort4ContTimeHighWarning=sensorProbeTemperatureArrayPort4ContTimeHighWarning, sensorTemperatureSensorErrorColor=sensorTemperatureSensorErrorColor, deviceDryContactIndex=deviceDryContactIndex, sensorProbeRelayArrayPort4Index=sensorProbeRelayArrayPort4Index, sensorWaterRopeLength=sensorWaterRopeLength, sensorProbeHumidityOpenURL=sensorProbeHumidityOpenURL, spRelayArray4_1Status=spRelayArray4_1Status, sensorWaterGoOffline=sensorWaterGoOffline, sensorProbeTemperatureArrayPort1ContTimeLowCritical=sensorProbeTemperatureArrayPort1ContTimeLowCritical, spRelayArray3_2Status=spRelayArray3_2Status, sensorProbePTZRotateAbsolute=sensorProbePTZRotateAbsolute, sensorProbeVirtualAnalogDelayNormal=sensorProbeVirtualAnalogDelayNormal, sensorProbeVirtualAnalogSensorEntry=sensorProbeVirtualAnalogSensorEntry, sensorTankSenderDelayHighWarning=sensorTankSenderDelayHighWarning, sensorProbeIRMSHighWarning=sensorProbeIRMSHighWarning, sensorTemperatureHighCritical=sensorTemperatureHighCritical, sensor4to20mAHighCriticalDesc=sensor4to20mAHighCriticalDesc, sensorHumiditySubPort=sensorHumiditySubPort, sensorProbeDrycontactArrayPort2Number=sensorProbeDrycontactArrayPort2Number, spTemperatureArray6_3Status=spTemperatureArray6_3Status, sensorFuelDelayHighWarning=sensorFuelDelayHighWarning, sensorProbeRelayArrayPort2RelayDescOn=sensorProbeRelayArrayPort2RelayDescOn, sensorProbeSoundDetectorContTimeLowCritical=sensorProbeSoundDetectorContTimeLowCritical, sensorProbeTempSendTrap=sensorProbeTempSendTrap, sensorProbeVRMSvoltageMode=sensorProbeVRMSvoltageMode, sensorLowCriticalDescription=sensorLowCriticalDescription, spVRMSStatus=spVRMSStatus, sensorProbeThermostatGoOnline=sensorProbeThermostatGoOnline, spIRMS2Status=spIRMS2Status, sensorProbeRelayArrayPort5Description=sensorProbeRelayArrayPort5Description, sensorProbeThermostatTemperatureArrayPort2Online=sensorProbeThermostatTemperatureArrayPort2Online, sensorProbeTypeDrycontactInoutName=sensorProbeTypeDrycontactInoutName, sensorFuelLowCriticalColor=sensorFuelLowCriticalColor, sensorProbeDrycontactArrayPort2OutputDescOff=sensorProbeDrycontactArrayPort2OutputDescOff, sensorTankSenderLowWarningColor=sensorTankSenderLowWarningColor, sensorFuelGoOffline=sensorFuelGoOffline, sensorProbeThermostatTemperatureArrayPort5HighLimit1=sensorProbeThermostatTemperatureArrayPort5HighLimit1, sensorProbeTypeSirenName=sensorProbeTypeSirenName, sensorProbeSwitchStatus=sensorProbeSwitchStatus, sensorProbeVirtualSwitchOnline=sensorProbeVirtualSwitchOnline, sensorProbeRelayArrayPort8Entry=sensorProbeRelayArrayPort8Entry, spTemperatureArray2Status=spTemperatureArray2Status, sensorProbeTemperatureArrayPort1Value=sensorProbeTemperatureArrayPort1Value, sensorProbeServerEnable=sensorProbeServerEnable, sensorTankSenderValue=sensorTankSenderValue, sensorHumidityNormalColor=sensorHumidityNormalColor, sensorProbeRouteAdd=sensorProbeRouteAdd, spTemperature4Status=spTemperature4Status, sensorProbeSoftMotionDescription=sensorProbeSoftMotionDescription, sensorProbeTemperatureArrayPort4Offset=sensorProbeTemperatureArrayPort4Offset, sensorProbeDrycontactArrayPort7ManualOutputCycleTime=sensorProbeDrycontactArrayPort7ManualOutputCycleTime, sensorProbeIRMSRelayActiveStatus=sensorProbeIRMSRelayActiveStatus, sensorAirflowIndex=sensorAirflowIndex, spTemperatureArray5_2Status=spTemperatureArray5_2Status, sensorProbeTemperatureArrayPort5Value=sensorProbeTemperatureArrayPort5Value, sensorProbeDrycontactArrayPort3Entry=sensorProbeDrycontactArrayPort3Entry, sensorProbeTempHighCritical=sensorProbeTempHighCritical, sensorProbeThermostatValue=sensorProbeThermostatValue, sensorProbeTemperatureArrayPort8Calendar=sensorProbeTemperatureArrayPort8Calendar, sensorThermostatHighWarningColor=sensorThermostatHighWarningColor, spTemperatureArray7Status=spTemperatureArray7Status, sensorProbeTemperatureArrayPort7Calendar=sensorProbeTemperatureArrayPort7Calendar, sensorProbeSoundDetectorLowWarning=sensorProbeSoundDetectorLowWarning, spSwitch19Status=spSwitch19Status, sensorProbeTemperatureArrayPort8Entry=sensorProbeTemperatureArrayPort8Entry, sensorProbeRelayArrayPort6NormalState=sensorProbeRelayArrayPort6NormalState, sensorProbeSnmpPort=sensorProbeSnmpPort, sensorProbeHumiditySirenOnPort=sensorProbeHumiditySirenOnPort, sensorThermostatHighCriticalColor=sensorThermostatHighCriticalColor, sensorProbeThermostatTemperatureArrayPort5Description=sensorProbeThermostatTemperatureArrayPort5Description, sensorProbeTemperatureArrayPort8LowCritical=sensorProbeTemperatureArrayPort8LowCritical, sensorProbeTemperatureArrayPort2=sensorProbeTemperatureArrayPort2, sensorProbeThermostatTemperatureArrayPort1NormalAction1=sensorProbeThermostatTemperatureArrayPort1NormalAction1, sensorTankSenderNormalColor=sensorTankSenderNormalColor, sensorProbeHumiditySendTrap=sensorProbeHumiditySendTrap, sensorProbePTZPanTiltUntilEnd=sensorProbePTZPanTiltUntilEnd, spIRMS6Status=spIRMS6Status, sensorProbeHumiditySendNormalTrap=sensorProbeHumiditySendNormalTrap, spRelayArray3_7Status=spRelayArray3_7Status, sensorProbeDrycontactArrayPort8NormalState=sensorProbeDrycontactArrayPort8NormalState, sensorHumidityHighWarning=sensorHumidityHighWarning, sensorDCvoltageDelayLowWarning=sensorDCvoltageDelayLowWarning, sensorRelayOffDesc=sensorRelayOffDesc, sensorProbeEnergyDatacollectType=sensorProbeEnergyDatacollectType, sensorProbeTempSirenActiveStatus=sensorProbeTempSirenActiveStatus, sensorProbeTemperatureArrayPort2DegreeRaw=sensorProbeTemperatureArrayPort2DegreeRaw, sensorProbeDrycontactArrayPort2ManualOutputCycleTime=sensorProbeDrycontactArrayPort2ManualOutputCycleTime, sensor4to20mADescription=sensor4to20mADescription, sensorProbeThermostatTemperatureArrayPort6NormalAction1=sensorProbeThermostatTemperatureArrayPort6NormalAction1, sensorThermostatEntry=sensorThermostatEntry, deviceTable=deviceTable, sensorProbeThermostatTemperatureArrayPort1Mode=sensorProbeThermostatTemperatureArrayPort1Mode, sensorProbeThermostatHighLimit2=sensorProbeThermostatHighLimit2, sensorAirflowDescription=sensorAirflowDescription, sensorProbeSwitchRelayOnPort=sensorProbeSwitchRelayOnPort, sensorProbeThermostatTemperatureArrayPort6Mode=sensorProbeThermostatTemperatureArrayPort6Mode, sensorDCvoltageRaw=sensorDCvoltageRaw, sensorProbeTemperatureArrayPort7Description=sensorProbeTemperatureArrayPort7Description, sensorProbeRelayArrayPort1Status=sensorProbeRelayArrayPort1Status, spTemperatureArray5_6Status=spTemperatureArray5_6Status, spSwitch63Status=spSwitch63Status, sensorProbeEnergySirenCycleTime=sensorProbeEnergySirenCycleTime, sensorProbeTemperatureArrayPort2Description=sensorProbeTemperatureArrayPort2Description, sensorProbeThermostatTemperatureArrayPort1Description=sensorProbeThermostatTemperatureArrayPort1Description, sensorSecurityCriticalDesc=sensorSecurityCriticalDesc, sensorHumidityDelayLowCritical=sensorHumidityDelayLowCritical, spTemperatureArray4Status=spTemperatureArray4Status, spRelayArray4Status=spRelayArray4Status, sensorProbeSetCommunity=sensorProbeSetCommunity, sensorIndex=sensorIndex, sensorTemperatureHighCriticalColor=sensorTemperatureHighCriticalColor, spTemperature3Status=spTemperature3Status, sensorProbeEnergySensorTable=sensorProbeEnergySensorTable, spSwitch53Status=spSwitch53Status, sensorProbeThermostatTemperatureArrayPort7Online=sensorProbeThermostatTemperatureArrayPort7Online, sensorPowerLowWarningDesc=sensorPowerLowWarningDesc, sensorProbeThermostatTemperatureArrayPort2GoOnline=sensorProbeThermostatTemperatureArrayPort2GoOnline, sensorProbeIRMSDelayNormal=sensorProbeIRMSDelayNormal, sensorWaterRopeLeakLocation=sensorWaterRopeLeakLocation, sensorProbeVRMSContTimeNormal=sensorProbeVRMSContTimeNormal, sensorACvoltageSubPort=sensorACvoltageSubPort, spIRMS5Status=spIRMS5Status, spVirtual12Status=spVirtual12Status, spRelayArray7_1Status=spRelayArray7_1Status, sensorProbeEnergyRelayCycleTime=sensorProbeEnergyRelayCycleTime, sensorProbeRelayArrayPort7NormalState=sensorProbeRelayArrayPort7NormalState, sensorProbeThermostatTemperatureArrayPort6Description=sensorProbeThermostatTemperatureArrayPort6Description, spRelayArray8_7Status=spRelayArray8_7Status, sensorProbeDrycontactArrayPort6Table=sensorProbeDrycontactArrayPort6Table, sensorProbeTemperatureArrayPort7Status=sensorProbeTemperatureArrayPort7Status, sensorDryContactOutputManualAction=sensorDryContactOutputManualAction, sensorACvoltageCriticalColor=sensorACvoltageCriticalColor, sensorProbeSwitchNormalState=sensorProbeSwitchNormalState, sensorFuelLowCriticalDesc=sensorFuelLowCriticalDesc, sensorProbeSwitchSendNormalMail=sensorProbeSwitchSendNormalMail, sensorProbeHumidityContTimeLowWarning=sensorProbeHumidityContTimeLowWarning, sensorProbeVRMSPercent=sensorProbeVRMSPercent, sensorProbeIRMSSensorIndex=sensorProbeIRMSSensorIndex, sensorProbeTemperatureArrayPort5Rearm=sensorProbeTemperatureArrayPort5Rearm, spSensorName=spSensorName, sensorProbeThermostatTemperatureArrayPort5NormalAction2=sensorProbeThermostatTemperatureArrayPort5NormalAction2, sensorSmokeGoOffline=sensorSmokeGoOffline, sensorHumidityNormalDesc=sensorHumidityNormalDesc, sensorProbeTemperatureArrayPort2GoOnline=sensorProbeTemperatureArrayPort2GoOnline, sensorProbeSensorType=sensorProbeSensorType, sensorProbeVirtualSwitchDescriptionCritical=sensorProbeVirtualSwitchDescriptionCritical, spTemperature2Status=spTemperature2Status, sensorProbeTypeSoundName=sensorProbeTypeSoundName, sensorDCvoltageIndex=sensorDCvoltageIndex, spSwitch39Status=spSwitch39Status, spEnergy1Status=spEnergy1Status, sensorProbeVirtualAnalogOnline=sensorProbeVirtualAnalogOnline, sensorWaterStatus=sensorWaterStatus, sensorProbeTemperatureArrayPort8HighWarning=sensorProbeTemperatureArrayPort8HighWarning, sensorProbeDrycontactArrayPort8GoOnline=sensorProbeDrycontactArrayPort8GoOnline, sensorProbeSnmpIndexingMode=sensorProbeSnmpIndexingMode, sensorProbeTemperatureArrayPort4Table=sensorProbeTemperatureArrayPort4Table, sensorProbeTemperatureArrayPort2Offset=sensorProbeTemperatureArrayPort2Offset, sensorProbeHumidityAtoDAmountMaxVoltage=sensorProbeHumidityAtoDAmountMaxVoltage, sensorProbeRelayArrayPort8RelayAction=sensorProbeRelayArrayPort8RelayAction, sensorProbeThermostatTemperatureArrayPort4Online=sensorProbeThermostatTemperatureArrayPort4Online, sensorProbeVRMSEmailTrapLimit=sensorProbeVRMSEmailTrapLimit, sensorHumidityRearm=sensorHumidityRearm, sensorProbeRelayArrayPort1Online=sensorProbeRelayArrayPort1Online, sensorProbeRelayArrayPort1Table=sensorProbeRelayArrayPort1Table, sensorProbeDrycontactArrayPort7Status=sensorProbeDrycontactArrayPort7Status, sensorProbeRelayArrayPort7ControlMode=sensorProbeRelayArrayPort7ControlMode, sensorProbeDrycontactArrayPort8ManualOutputAction=sensorProbeDrycontactArrayPort8ManualOutputAction, sensorProbeRelayArrayPort5Online=sensorProbeRelayArrayPort5Online, sensorWaterRopeStatus=sensorWaterRopeStatus, sensorProbeThermostatTemperatureArrayPort4HighLimitAction1=sensorProbeThermostatTemperatureArrayPort4HighLimitAction1, sensorTankSenderEntry=sensorTankSenderEntry, sensorProbeThermostatTemperatureArrayPort1Index=sensorProbeThermostatTemperatureArrayPort1Index, sensorPowerTable=sensorPowerTable, sensorProbeTemperatureArrayPort5ContTimeNormal=sensorProbeTemperatureArrayPort5ContTimeNormal, sensorProbeTemperatureArrayPort6HighCritical=sensorProbeTemperatureArrayPort6HighCritical, spTemperatureArray6_6Status=spTemperatureArray6_6Status, sensorProbeRelayArrayPort6Number=sensorProbeRelayArrayPort6Number, sensorProbeVRMSHighWarning=sensorProbeVRMSHighWarning, sensorProbeEnergyURL=sensorProbeEnergyURL, sensorProbeIRMSHighCritical=sensorProbeIRMSHighCritical, sensorAirflowHighCritical=sensorAirflowHighCritical, sensorACvoltageDescription=sensorACvoltageDescription, spSwitch7Status=spSwitch7Status, sensorPowerDelayLowWarning=sensorPowerDelayLowWarning, sensorProbeThermostatTemperatureArrayPort1EnableTime=sensorProbeThermostatTemperatureArrayPort1EnableTime, sensorProbeVirtualAnalogStatus=sensorProbeVirtualAnalogStatus, sensorProbeSwitchOnline=sensorProbeSwitchOnline, sensorProbeRelayArrayPort7URL=sensorProbeRelayArrayPort7URL, sensorProbeAltWebPort=sensorProbeAltWebPort, sensorProbeVRMSContTimeSensorError=sensorProbeVRMSContTimeSensorError, sensorProbeRelayArrayPort4ManualRelayAction=sensorProbeRelayArrayPort4ManualRelayAction, sensorProbeThermostatTemperatureArrayPort2HighLimit1=sensorProbeThermostatTemperatureArrayPort2HighLimit1, sensorProbeThermostatTemperatureArrayPort3Description=sensorProbeThermostatTemperatureArrayPort3Description, sensorTemperatureHighWarningDesc=sensorTemperatureHighWarningDesc, sensorProbeEnergyCalendar=sensorProbeEnergyCalendar, sensorFuelDelayLowWarning=sensorFuelDelayLowWarning, sensorProbeHumidityDelayError=sensorProbeHumidityDelayError, sensorProbeIRMSSirenAction=sensorProbeIRMSSirenAction, spRelayArray5_6Status=spRelayArray5_6Status, sensorProbeRelayArraySensor=sensorProbeRelayArraySensor, sensorProbeRelayArrayPort4GoOnline=sensorProbeRelayArrayPort4GoOnline, spSwitch8Status=spSwitch8Status, sensor4to20mAAmountBaseVoltage=sensor4to20mAAmountBaseVoltage, sensorProbeThermostatTemperatureArrayPort6LowLimitAction2=sensorProbeThermostatTemperatureArrayPort6LowLimitAction2, spTemperatureArray4_6Status=spTemperatureArray4_6Status, sensorProbeVirtualAnalogContTimeSensorError=sensorProbeVirtualAnalogContTimeSensorError, sensorDryContactDirection=sensorDryContactDirection, sensorTankSenderDelayError=sensorTankSenderDelayError, sensorProbeTemperatureArrayPort1Index=sensorProbeTemperatureArrayPort1Index, sensorMotionNormalDesc=sensorMotionNormalDesc, spDownStatus=spDownStatus, sensorTemperatureRaw=sensorTemperatureRaw, sensorProbeTypeADE7763WattName=sensorProbeTypeADE7763WattName, sensorProbeThermostatTemperatureArrayPort2LowLimit1=sensorProbeThermostatTemperatureArrayPort2LowLimit1, sensorProbeDrycontactArrayPort3GoOnline=sensorProbeDrycontactArrayPort3GoOnline, sensorProbeTemperatureArrayPort2Value=sensorProbeTemperatureArrayPort2Value, spSwitch35Status=spSwitch35Status, sensorProbeTemperatureArrayPort7OpenURL=sensorProbeTemperatureArrayPort7OpenURL, sensorTankSenderHighCriticalColor=sensorTankSenderHighCriticalColor, sensorProbeIRMSDescription=sensorProbeIRMSDescription, sensorProbeVRMSSensorIndex=sensorProbeVRMSSensorIndex, sensorProbeEnergyOnline=sensorProbeEnergyOnline)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorMotionSubPort=sensorMotionSubPort, sensorProbeStatusNumberNotNormal=sensorProbeStatusNumberNotNormal, sensor4to20mAHighCriticalColor=sensor4to20mAHighCriticalColor, spWattStatus=spWattStatus, sensorDryContactTable=sensorDryContactTable, sensorProbeIRMSContTimeNormal=sensorProbeIRMSContTimeNormal, sensorProbeRelayArrayPort1RelayAction=sensorProbeRelayArrayPort1RelayAction, spRelayArray7_4Status=spRelayArray7_4Status, sensorProbeVRMSSirenDelayAlarm=sensorProbeVRMSSirenDelayAlarm, sensorProbeTemperatureArrayPort7ContTimeHighWarning=sensorProbeTemperatureArrayPort7ContTimeHighWarning, sensorProbeRelayArrayPort8RelayDescOff=sensorProbeRelayArrayPort8RelayDescOff, sensorTankSenderDeviceIndex=sensorTankSenderDeviceIndex, sensorProbeDrycontactArrayPort7Number=sensorProbeDrycontactArrayPort7Number, sensorProbeHumidityContTimeSensorError=sensorProbeHumidityContTimeSensorError, sensorRelayManualCycleTime=sensorRelayManualCycleTime, spTemperatureArray6_7Status=spTemperatureArray6_7Status, sensorProbeTemperatureArrayPort3Calendar=sensorProbeTemperatureArrayPort3Calendar, sensorAirflowDelayLowCritical=sensorAirflowDelayLowCritical, sensorProbeIRMSCalendar=sensorProbeIRMSCalendar, sensorProbeDrycontactArrayPort7Index=sensorProbeDrycontactArrayPort7Index, sensorDCvoltageNormalDesc=sensorDCvoltageNormalDesc, spSwitch11Status=spSwitch11Status, sensorProbeSwitchAcknowledgement=sensorProbeSwitchAcknowledgement, sensorProbeRelayArrayPort8RelayDescOn=sensorProbeRelayArrayPort8RelayDescOn, sensorProbeUsePassword=sensorProbeUsePassword, sensorProbeThermostatTemperatureArrayPort7NormalAction2=sensorProbeThermostatTemperatureArrayPort7NormalAction2, sensorSmokeTable=sensorSmokeTable, sensorHumidityDelayLowWarning=sensorHumidityDelayLowWarning, spEventTimeStamp=spEventTimeStamp, spRelayArray8_4Status=spRelayArray8_4Status, sensorProbeThermostatTemperatureArrayPort3LowLimitAction2=sensorProbeThermostatTemperatureArrayPort3LowLimitAction2, sensorProbeThermostatTemperatureArrayPort7NormalAction1=sensorProbeThermostatTemperatureArrayPort7NormalAction1, sensorStatus=sensorStatus, spVirtualStatus=spVirtualStatus, sensorMotionCriticalColor=sensorMotionCriticalColor, sensorProbeTemperatureArrayPort1Table=sensorProbeTemperatureArrayPort1Table, sensorPowerInterval=sensorPowerInterval, sensorProbeTypeName=sensorProbeTypeName, sensorProbeTemperatureArrayPort3HighCritical=sensorProbeTemperatureArrayPort3HighCritical, sensorProbeTemperatureArrayPort2DegreeType=sensorProbeTemperatureArrayPort2DegreeType, sensorProbeEnergyContTimeNormal=sensorProbeEnergyContTimeNormal, sensorProbeRelayArrayPort7Description=sensorProbeRelayArrayPort7Description, sensor4to20mADelayHighWarning=sensor4to20mADelayHighWarning, sensorProbeDrycontactArrayPort2Status=sensorProbeDrycontactArrayPort2Status, sensorProbeIRMSSensorEntry=sensorProbeIRMSSensorEntry, deviceDescription=deviceDescription, sensorAirflowNormalDesc=sensorAirflowNormalDesc, sensorRelayTable=sensorRelayTable, sensor4to20mAOffset=sensor4to20mAOffset, sensorProbeTemperatureArrayPort3DatacollectType=sensorProbeTemperatureArrayPort3DatacollectType, sensorProbeTypeSHT11Name=sensorProbeTypeSHT11Name, sensorProbeIRMSRearm=sensorProbeIRMSRearm, sensorProbeVRMSCalendar=sensorProbeVRMSCalendar, spSensorAliveHigh=spSensorAliveHigh, sensorProbeThermostatTemperatureArrayPort8NormalAction2=sensorProbeThermostatTemperatureArrayPort8NormalAction2, sensorProbeThermostatTemperatureArrayPort8Index=sensorProbeThermostatTemperatureArrayPort8Index, sensorHighCriticalDescription=sensorHighCriticalDescription, sensorDCvoltageUnit=sensorDCvoltageUnit, sensorProbeHumidityEmailTrapSchedule=sensorProbeHumidityEmailTrapSchedule, sensorProbeJavaTimeOut=sensorProbeJavaTimeOut, sensorProbeHumidityLocation=sensorProbeHumidityLocation, sensorProbeDrycontactArrayPort4OutputDescOn=sensorProbeDrycontactArrayPort4OutputDescOn, sensorProbeVirtualAnalogOpenURL=sensorProbeVirtualAnalogOpenURL, sensorProbeVirtualSwitchContTimeHighCritical=sensorProbeVirtualSwitchContTimeHighCritical, spVRMS3Status=spVRMS3Status, sensorProbeSwitchRelayDescOff=sensorProbeSwitchRelayDescOff, sensorThermostatDelayLowWarning=sensorThermostatDelayLowWarning, sensorProbePTZRotateRelative=sensorProbePTZRotateRelative, sensorErrorColor=sensorErrorColor, spSwitch37Status=spSwitch37Status, sensorProbeTemperatureArrayPort7Table=sensorProbeTemperatureArrayPort7Table, deviceInfo=deviceInfo, sensorProbeDrycontactArrayPort3Online=sensorProbeDrycontactArrayPort3Online, sensorMotionPort=sensorMotionPort, sensorProbeVRMSHighCritical=sensorProbeVRMSHighCritical, sensorTankSenderNormalDesc=sensorTankSenderNormalDesc, sensor4to20mANormalColor=sensor4to20mANormalColor, sensorProbeRelayArrayPort4Status=sensorProbeRelayArrayPort4Status, spRelayArray6Status=spRelayArray6Status, sensorRelayPort=sensorRelayPort, sensorProbeSwitchOpenURL=sensorProbeSwitchOpenURL, spTemperatureArray7_7Status=spTemperatureArray7_7Status, sensorProbeVRMSSensorTable=sensorProbeVRMSSensorTable, sensorDCvoltageSensorErrorDesc=sensorDCvoltageSensorErrorDesc, sensorThermostatLowCritical=sensorThermostatLowCritical, sensorProbeTemperatureArrayPort5Entry=sensorProbeTemperatureArrayPort5Entry, sensorProbeRelayArrayPort4NormalState=sensorProbeRelayArrayPort4NormalState, sensorProbeDrycontactArrayPort7ManualOutputAction=sensorProbeDrycontactArrayPort7ManualOutputAction, sensorDCvoltageHighWarningColor=sensorDCvoltageHighWarningColor, sensorProbeRelayArrayPort5NormalState=sensorProbeRelayArrayPort5NormalState, sensorProbeTemperatureArrayPort6Rearm=sensorProbeTemperatureArrayPort6Rearm, sensorProbeRelayArrayPort3Number=sensorProbeRelayArrayPort3Number, sensorProbeRelayArrayPort3ManualRelayAction=sensorProbeRelayArrayPort3ManualRelayAction, sensorProbeTypeTankSenderName=sensorProbeTypeTankSenderName, sensorDryContactPort12GoOnline=sensorDryContactPort12GoOnline, sensorRelayDeviceIndex=sensorRelayDeviceIndex, sensor4to20mAAmountMaxVoltage=sensor4to20mAAmountMaxVoltage, sensorProbeTemperatureArrayPort6DatacollectType=sensorProbeTemperatureArrayPort6DatacollectType, sensorProbeEntry=sensorProbeEntry, sensorProbeTemperatureArrayPort1ContTimeHighCritical=sensorProbeTemperatureArrayPort1ContTimeHighCritical, sensorProbeRelayArrayPort2URL=sensorProbeRelayArrayPort2URL, sensorProbeRelayArrayPort4RelayDescOff=sensorProbeRelayArrayPort4RelayDescOff, spTemperatureArray6_4Status=spTemperatureArray6_4Status, sensorProbeThermostatTemperatureArrayPort4Value=sensorProbeThermostatTemperatureArrayPort4Value, sensorProbeTemperatureArrayPort3ContTimeHighWarning=sensorProbeTemperatureArrayPort3ContTimeHighWarning, sensorTemperatureDelayLowCritical=sensorTemperatureDelayLowCritical, sensorProbeCameraServerTable=sensorProbeCameraServerTable, sensorProbeSyslogPort=sensorProbeSyslogPort, sensorProbeWattHoursSensorIndex=sensorProbeWattHoursSensorIndex, sensorProbeRelayArrayPort5OpenURL=sensorProbeRelayArrayPort5OpenURL, sensorThermostatNormalDesc=sensorThermostatNormalDesc, sensorProbeSwitchEntry=sensorProbeSwitchEntry, spSwitch17Status=spSwitch17Status, sensorProbeSoftMotionContTimeNormal=sensorProbeSoftMotionContTimeNormal, sensorProbeRelayArrayPort6ControlMode=sensorProbeRelayArrayPort6ControlMode, spRelayArray5_5Status=spRelayArray5_5Status, sensorProbeDataCollectionPeriod=sensorProbeDataCollectionPeriod, sensorFuelNormalDesc=sensorFuelNormalDesc, sensorDryContactPort7GoOnline=sensorDryContactPort7GoOnline, spAnalogue4Status=spAnalogue4Status, sensorProbeCameraServerIndex=sensorProbeCameraServerIndex, sensorProbeDrycontactArrayPort6URL=sensorProbeDrycontactArrayPort6URL, sensorProbeSwitchDelayNormal=sensorProbeSwitchDelayNormal, sensorProbeSupportMailRcpt=sensorProbeSupportMailRcpt, sensorProbeHumiditySirenActiveStatus=sensorProbeHumiditySirenActiveStatus, sensorProbeTemperatureArrayPort4DatacollectType=sensorProbeTemperatureArrayPort4DatacollectType, sensorProbeTrapReIntervalAlive=sensorProbeTrapReIntervalAlive, spSwitch65Status=spSwitch65Status, sensorProbeEnergySirenOnPort=sensorProbeEnergySirenOnPort, sensorProbeTemperatureArrayPort7HighWarning=sensorProbeTemperatureArrayPort7HighWarning, spSwitch34Status=spSwitch34Status, sensorProbeDrycontactArrayPort5=sensorProbeDrycontactArrayPort5, sensorProbeTemperatureArrayPort6=sensorProbeTemperatureArrayPort6, sensorProbeRelayArrayPort7Index=sensorProbeRelayArrayPort7Index, sensorProbeHumidityPercent=sensorProbeHumidityPercent, sensorProbeDrycontactArrayPort7Entry=sensorProbeDrycontactArrayPort7Entry, spSwitch59Status=spSwitch59Status, sensorProbeHumidityContTimeNormal=sensorProbeHumidityContTimeNormal, sensorProbeMailRecpt=sensorProbeMailRecpt, sensorProbeRelayArrayPort6RelayAction=sensorProbeRelayArrayPort6RelayAction, sensorProbeThermostatTemperatureArrayPort8HighLimitAction2=sensorProbeThermostatTemperatureArrayPort8HighLimitAction2, sensorProbeRelayArrayPort2ManualRelayCycleTime=sensorProbeRelayArrayPort2ManualRelayCycleTime, sensorProbeHumidityDcUnit=sensorProbeHumidityDcUnit, sensorDryContactPort=sensorDryContactPort, sensorProbeSoundDetectorContTimeNormal=sensorProbeSoundDetectorContTimeNormal, spKeepAliveTrap=spKeepAliveTrap, sensorProbeRelayArrayPort1ManualRelayCycleTime=sensorProbeRelayArrayPort1ManualRelayCycleTime, sensorFuelIndex=sensorFuelIndex, sensorProbeNoCameraSensorNumber=sensorProbeNoCameraSensorNumber, spSwitch44Status=spSwitch44Status, sensorProbeThermostatTemperatureArrayPort3Mode=sensorProbeThermostatTemperatureArrayPort3Mode, sensorProbeTemperatureArrayPort4ContTimeSensorError=sensorProbeTemperatureArrayPort4ContTimeSensorError, sensorProbeNoCameraSensor=sensorProbeNoCameraSensor, spRelayArray2Status=spRelayArray2Status, spTemperatureArray2_8Status=spTemperatureArray2_8Status, sensorProbeTempRelayAction=sensorProbeTempRelayAction, sensorTankSenderLowWarningDesc=sensorTankSenderLowWarningDesc, sensorProbeIRMSSirenDelayAlarm=sensorProbeIRMSSirenDelayAlarm, sensorIntelligentPort5GoOnline=sensorIntelligentPort5GoOnline, sensorProbeRelayArrayPort4RelayDescOn=sensorProbeRelayArrayPort4RelayDescOn, sensorMotionTable=sensorMotionTable, sensorProbeVirtualAnalogRearm=sensorProbeVirtualAnalogRearm, sensorProbeWattHoursSensorNumber=sensorProbeWattHoursSensorNumber, sensorProbeThermostatTemperatureArrayPort2Description=sensorProbeThermostatTemperatureArrayPort2Description, sensorProbeSoundDetectorLowCritical=sensorProbeSoundDetectorLowCritical, spSwitch4Status=spSwitch4Status, sensorProbeVRMSLowWarning=sensorProbeVRMSLowWarning, sensorProbeVirtualAnalogURL=sensorProbeVirtualAnalogURL, sensorProbeTemperatureArrayPort1Offset=sensorProbeTemperatureArrayPort1Offset, spSensorIndex=spSensorIndex, sensorProbeTempEmailTrapInterval=sensorProbeTempEmailTrapInterval, sensorProbeDrycontactArrayPort6Status=sensorProbeDrycontactArrayPort6Status, sensorProbeMailMaxResend=sensorProbeMailMaxResend, sensorProbeTrapMailPollInterval=sensorProbeTrapMailPollInterval, sensorTemperatureSubPort=sensorTemperatureSubPort, sensorHighWarningColor=sensorHighWarningColor, sensorProbeVirtualAnalogContTimeLowWarning=sensorProbeVirtualAnalogContTimeLowWarning, sensorWaterRopeNormalDesc=sensorWaterRopeNormalDesc, sensorProbeRelayArrayPort4Table=sensorProbeRelayArrayPort4Table, sensorPowerEntry=sensorPowerEntry, sensorPowerLowWarningColor=sensorPowerLowWarningColor, spVRMS2Status=spVRMS2Status, sensorHumidityLowCritical=sensorHumidityLowCritical, sensorOffColor=sensorOffColor, sensorProbeTypeSecurityName=sensorProbeTypeSecurityName, spTemperatureArray3_1Status=spTemperatureArray3_1Status, sensorProbeReloadNetwork=sensorProbeReloadNetwork, spTemperatureArray3_2Status=spTemperatureArray3_2Status, sensorHumidityLowWarningDesc=sensorHumidityLowWarningDesc, sensorProbeSoftMotionSensorTable=sensorProbeSoftMotionSensorTable, sensorProbeThermostatTemperatureArrayPort6Value=sensorProbeThermostatTemperatureArrayPort6Value, sensorProbeDrycontactArrayPort6OutputDescOn=sensorProbeDrycontactArrayPort6OutputDescOn, sensorProbeWattHoursSensorTable=sensorProbeWattHoursSensorTable, sensorProbeHumidityAcknowledgement=sensorProbeHumidityAcknowledgement, sensorProbeDrycontactArrayPort1Description=sensorProbeDrycontactArrayPort1Description, sensorPowerHighCritical=sensorPowerHighCritical, sensorProbeHumidityEmailInterval=sensorProbeHumidityEmailInterval, spRelayArray6_2Status=spRelayArray6_2Status, sensorProbeDrycontactArrayPort1ManualOutputCycleTime=sensorProbeDrycontactArrayPort1ManualOutputCycleTime, spTemperatureArray2_4Status=spTemperatureArray2_4Status, sensorProbeTemperatureArrayPort6ContTimeSensorError=sensorProbeTemperatureArrayPort6ContTimeSensorError, sensorProbeDrycontactArrayPort6Direction=sensorProbeDrycontactArrayPort6Direction, sensorProbeTemperatureArrayPort1DatacollectType=sensorProbeTemperatureArrayPort1DatacollectType, sensorTankSenderHighWarning=sensorTankSenderHighWarning, sensorProbeDrycontactArrayPort2ContTimeCritical=sensorProbeDrycontactArrayPort2ContTimeCritical, sensorHumidityHighCriticalColor=sensorHumidityHighCriticalColor, spTemperatureArray4_7Status=spTemperatureArray4_7Status, sensorProbeVirtualAnalogLowCritical=sensorProbeVirtualAnalogLowCritical, sensorDCvoltageLowWarningColor=sensorDCvoltageLowWarningColor, spSensorLevelExceeded=spSensorLevelExceeded, sensorProbeSwitchManualRelayCycleTime=sensorProbeSwitchManualRelayCycleTime, sensorDCvoltageDelayNormal=sensorDCvoltageDelayNormal, spVirtual14Status=spVirtual14Status, sensorProbeHumidityRearm=sensorProbeHumidityRearm, sensorProbeDrycontactArrayPort5OpenURL=sensorProbeDrycontactArrayPort5OpenURL, spRelayArray4_5Status=spRelayArray4_5Status, sensorProbeTemperatureArrayPort2Number=sensorProbeTemperatureArrayPort2Number, sensorPowerHighCriticalColor=sensorPowerHighCriticalColor, sensorMotionNormalColor=sensorMotionNormalColor, sensorProbeTemperatureArrayPort1ContTimeNormal=sensorProbeTemperatureArrayPort1ContTimeNormal, sensorProbeRelayArrayPort3=sensorProbeRelayArrayPort3, sensorProbeTemperatureArrayPort4URL=sensorProbeTemperatureArrayPort4URL, sensorDCvoltageSubPort=sensorDCvoltageSubPort, spRelayArray1_6Status=spRelayArray1_6Status, sensorProbeTemperatureArrayPort8Online=sensorProbeTemperatureArrayPort8Online, sensorProbeSwitchDelayError=sensorProbeSwitchDelayError, sensorProbeTempDegree=sensorProbeTempDegree, sensorProbeTemperatureArrayPort2HighCritical=sensorProbeTemperatureArrayPort2HighCritical, sensorProbeThermostatTemperatureArrayPort6GoOnline=sensorProbeThermostatTemperatureArrayPort6GoOnline, spVirtual13Status=spVirtual13Status, sensorWaterRopeType=sensorWaterRopeType, sensorProbeTempIndexCount=sensorProbeTempIndexCount, sensorProbeTypeDCvoltageName=sensorProbeTypeDCvoltageName, spSwitch38Status=spSwitch38Status, sensorHumidityPercent=sensorHumidityPercent, sensorThermostatIndex=sensorThermostatIndex, sensorProbeVirtualAnalogEmailTrapLimit=sensorProbeVirtualAnalogEmailTrapLimit, sensorProbeRelayArrayPort5Number=sensorProbeRelayArrayPort5Number, sensorProbeThermostatTemperatureArrayPort1HighLimitAction1=sensorProbeThermostatTemperatureArrayPort1HighLimitAction1, sensorProbeTemperatureArrayPort5Status=sensorProbeTemperatureArrayPort5Status, sensorProbeTemperatureArrayPort7Entry=sensorProbeTemperatureArrayPort7Entry, sensorProbeTemperatureArrayPort3GoOnline=sensorProbeTemperatureArrayPort3GoOnline, sensorSecurityGoOffline=sensorSecurityGoOffline, sensorProbeTemperatureArrayPort5LowWarning=sensorProbeTemperatureArrayPort5LowWarning, sensorProbeDebug=sensorProbeDebug, spSwitch27Status=spSwitch27Status, sensorProbeThermostatTemperatureArrayPort4HighLimit1=sensorProbeThermostatTemperatureArrayPort4HighLimit1, sensorFuelDescription=sensorFuelDescription, sensorThermostatDelayHighCritical=sensorThermostatDelayHighCritical, sensorThermostatDeviceIndex=sensorThermostatDeviceIndex, sensorTemperatureDegree=sensorTemperatureDegree, sensorProbeSwitchSirenDelayAlarm=sensorProbeSwitchSirenDelayAlarm, sensorProbeHumidityContTimeHighCritical=sensorProbeHumidityContTimeHighCritical, sensorProbeIRMSRelayAction=sensorProbeIRMSRelayAction)
mibBuilder.exportSymbols("SPAGENT-MIB", spVirtual6Status=spVirtual6Status, sensorProbeEnergySirenActiveStatus=sensorProbeEnergySirenActiveStatus, sensorWaterDeviceIndex=sensorWaterDeviceIndex, sensorProbeDrycontactArrayPort3ManualOutputAction=sensorProbeDrycontactArrayPort3ManualOutputAction, sensorProbeTemperatureArrayPort1HighCritical=sensorProbeTemperatureArrayPort1HighCritical, sensorProbeRelayArrayPort4ControlMode=sensorProbeRelayArrayPort4ControlMode, sensorProbeDrycontactArrayPort2ControlMode=sensorProbeDrycontactArrayPort2ControlMode, sensorProbeThermostatTemperatureArrayPort7GoOnline=sensorProbeThermostatTemperatureArrayPort7GoOnline, sensorProbeMailJpgInline=sensorProbeMailJpgInline, sensorProbeThermostatTemperatureArrayPort8HighLimit1=sensorProbeThermostatTemperatureArrayPort8HighLimit1, spSenDownStatus=spSenDownStatus, sensorDryContactPort11GoOnline=sensorDryContactPort11GoOnline, securityProbe=securityProbe, spRelayArray2_8Status=spRelayArray2_8Status, sensorProbeEnergyDescription=sensorProbeEnergyDescription, sensorProbeRelayArrayPort2Description=sensorProbeRelayArrayPort2Description, sensorProbeTempLowWarning=sensorProbeTempLowWarning, sensorProbeHumiditySirenDelayAlarm=sensorProbeHumiditySirenDelayAlarm, sensorProbeTemperatureArrayPort3OpenURL=sensorProbeTemperatureArrayPort3OpenURL, sensor4to20mANormalDesc=sensor4to20mANormalDesc, sensorProbeTemperatureArrayPort2DatacollectType=sensorProbeTemperatureArrayPort2DatacollectType, sensorProbeTemperatureArraySensor=sensorProbeTemperatureArraySensor, spSwitch16Status=spSwitch16Status, sensorTemperatureTable=sensorTemperatureTable, sensorIntelligentPort8GoOnline=sensorIntelligentPort8GoOnline, sensorProbeDrycontactArrayPort6Number=sensorProbeDrycontactArrayPort6Number, sensorGoOffline=sensorGoOffline, sensorProbeIRMSContTimeHighWarning=sensorProbeIRMSContTimeHighWarning, sensorAirflowDeviceIndex=sensorAirflowDeviceIndex, spSwitch20Status=spSwitch20Status, spTemperatureArray7_2Status=spTemperatureArray7_2Status, sensorProbeNtpMode=sensorProbeNtpMode, sensorProbeHumidityRelayAction=sensorProbeHumidityRelayAction, spTemperatureArray4_2Status=spTemperatureArray4_2Status, sensorTemperatureDisplayStyle=sensorTemperatureDisplayStyle, sensorHumiditySensorErrorColor=sensorHumiditySensorErrorColor, sensorDryContactPort8GoOnline=sensorDryContactPort8GoOnline, spEnergy7Status=spEnergy7Status, sensorTemperatureLowCritical=sensorTemperatureLowCritical, sensorProbeVRMSOpenURL=sensorProbeVRMSOpenURL, sensorProbeUseCamera=sensorProbeUseCamera, sensorProbeRelayArrayPort6Index=sensorProbeRelayArrayPort6Index, sensorAirflowLowWarning=sensorAirflowLowWarning, sensorPowerNormalColor=sensorPowerNormalColor, spRelayArray7_3Status=spRelayArray7_3Status, spSensorProbeKeepAlive=spSensorProbeKeepAlive, sensorProbeRelayArrayPort7Table=sensorProbeRelayArrayPort7Table, sensorProbeTemperatureArrayPort6ContTimeNormal=sensorProbeTemperatureArrayPort6ContTimeNormal, sensorProbeSoundDetectorURL=sensorProbeSoundDetectorURL, spSwitch62Status=spSwitch62Status, sensorProbeTemperatureArrayPort6ContTimeHighCritical=sensorProbeTemperatureArrayPort6ContTimeHighCritical, sensorDCvoltageDescription=sensorDCvoltageDescription, sensorProbeTemperatureArrayPort3ContTimeNormal=sensorProbeTemperatureArrayPort3ContTimeNormal, sensorHumidityGoOffline=sensorHumidityGoOffline, spSwitch50Status=spSwitch50Status, sensorProbeTemperatureArrayPort1ContTimeLowWarning=sensorProbeTemperatureArrayPort1ContTimeLowWarning, sensorProbeIRMSSirenOnPort=sensorProbeIRMSSirenOnPort, sensor4to20mAHighCritical=sensor4to20mAHighCritical, sensor4to20mADelayNormal=sensor4to20mADelayNormal, spSwitch46Status=spSwitch46Status, sensorProbeThermostatTemperatureArrayPort1Value=sensorProbeThermostatTemperatureArrayPort1Value, sensorProbeDrycontactArrayPort6Description=sensorProbeDrycontactArrayPort6Description, sensorPowerGoOffline=sensorPowerGoOffline, sensor4to20mAMaxVoltage=sensor4to20mAMaxVoltage, sensorProbeTemperatureArrayPort4GoOnline=sensorProbeTemperatureArrayPort4GoOnline, sensorProbeThermostatOnline=sensorProbeThermostatOnline, sensorProbeCameraRotate=sensorProbeCameraRotate, sensorProbeDrycontactArrayPort4=sensorProbeDrycontactArrayPort4, sensorThermostatGoOffline=sensorThermostatGoOffline, sensorProbeThermostatTemperatureArrayPort4LowLimitAction1=sensorProbeThermostatTemperatureArrayPort4LowLimitAction1, sensorProbeThermostatTemperatureArrayPort5NormalAction1=sensorProbeThermostatTemperatureArrayPort5NormalAction1, sensorProbeThermostatTemperatureArrayPort1NormalAction2=sensorProbeThermostatTemperatureArrayPort1NormalAction2, sensorProbeHumidityOnline=sensorProbeHumidityOnline, sensorProbeVirtualAnalogSensorNumber=sensorProbeVirtualAnalogSensorNumber, sensorIntelligentPort6GoOnline=sensorIntelligentPort6GoOnline, spSwitch57Status=spSwitch57Status, sensor4to20mALowCriticalColor=sensor4to20mALowCriticalColor, sensorProbeVirtualSwitchCalendar=sensorProbeVirtualSwitchCalendar, sensorSecurityStatus=sensorSecurityStatus, sensorDCvoltageNormalColor=sensorDCvoltageNormalColor, sensorProbeTemperatureArrayPort8HighCritical=sensorProbeTemperatureArrayPort8HighCritical, sensorProbeDrycontactArrayPort4Table=sensorProbeDrycontactArrayPort4Table, sensorProbeTempStatus=sensorProbeTempStatus, spVirtual20Status=spVirtual20Status, sensorProbeThermostatTemperatureArrayPort1HighLimit2=sensorProbeThermostatTemperatureArrayPort1HighLimit2, sensorWaterRopeNormalColor=sensorWaterRopeNormalColor, sensorHumidityRaw=sensorHumidityRaw, sensorProbeTypeMotionName=sensorProbeTypeMotionName, sensorDCvoltageValue=sensorDCvoltageValue, sensorHumidityDeviceIndex=sensorHumidityDeviceIndex, spTemperatureArray5Status=spTemperatureArray5Status, sensorProbeEnergyRaw=sensorProbeEnergyRaw, sensorProbeRelayArrayPort5RelayDescOn=sensorProbeRelayArrayPort5RelayDescOn, sensorProbeDrycontactArrayPort6ContTimeCritical=sensorProbeDrycontactArrayPort6ContTimeCritical, sensorProbeProductRevision=sensorProbeProductRevision, sensorPowerLowCriticalColor=sensorPowerLowCriticalColor, sensorProbeSwitchWaterRopeLeakLocation=sensorProbeSwitchWaterRopeLeakLocation, sensorDryContactPort6GoOnline=sensorDryContactPort6GoOnline, sensorProbeRelayArrayPort5URL=sensorProbeRelayArrayPort5URL, sensorRelayType=sensorRelayType, sensorProbeThermostatHighLimit1=sensorProbeThermostatHighLimit1, sensorProbeDrycontactArrayPort2Index=sensorProbeDrycontactArrayPort2Index, spNormalStatus=spNormalStatus, sensorProbeSoftMotionGoOnline=sensorProbeSoftMotionGoOnline, sensorProbeVirtualSwitchSensorTable=sensorProbeVirtualSwitchSensorTable, sensorProbeSoundDetectorPulseLength=sensorProbeSoundDetectorPulseLength, sensorTemperatureLowCriticalColor=sensorTemperatureLowCriticalColor, sensorProbeDrycontactArrayPort3Index=sensorProbeDrycontactArrayPort3Index, spRelayArray6_6Status=spRelayArray6_6Status, spTemperatureArray8_2Status=spTemperatureArray8_2Status, spSensor=spSensor, sensorMotionStatus=sensorMotionStatus, sensorDryContactPort5GoOnline=sensorDryContactPort5GoOnline, sensorPowerHighWarning=sensorPowerHighWarning, sensorProbeTypeNoSignalName=sensorProbeTypeNoSignalName, sensorProbeTemperatureArrayPort6ContTimeHighWarning=sensorProbeTemperatureArrayPort6ContTimeHighWarning, sensorProbeDrycontactArrayPort6GoOnline=sensorProbeDrycontactArrayPort6GoOnline, sensorProbeThermostatNormalAction1=sensorProbeThermostatNormalAction1, sensorTankSenderIndex=sensorTankSenderIndex, sensorProbeSoundDetectorSensorNumber=sensorProbeSoundDetectorSensorNumber, sensorProbeSwitchGoOnline=sensorProbeSwitchGoOnline, sensorACvoltageNormalColor=sensorACvoltageNormalColor, sensorProbeDrycontactArrayPort6ManualOutputCycleTime=sensorProbeDrycontactArrayPort6ManualOutputCycleTime, sensorIntelligentPort7GoOnline=sensorIntelligentPort7GoOnline, spSwitch51Status=spSwitch51Status, spTemperatureArray8_4Status=spTemperatureArray8_4Status, sensorProbeVirtualSwitchURL=sensorProbeVirtualSwitchURL, sensorProbeHumidityIndex=sensorProbeHumidityIndex, sensorTankSenderSensorErrorColor=sensorTankSenderSensorErrorColor, spSwitch68Status=spSwitch68Status, sensorProbeDrycontactArrayPort6OpenURL=sensorProbeDrycontactArrayPort6OpenURL, spTemperatureArray8_1Status=spTemperatureArray8_1Status, sensorProbeRelayArrayPort6Entry=sensorProbeRelayArrayPort6Entry, sensorProbeThermostatTemperatureArrayPort7LowLimit1=sensorProbeThermostatTemperatureArrayPort7LowLimit1, sensorProbeSoundDetectorContTimeHighCritical=sensorProbeSoundDetectorContTimeHighCritical, spCriticalStatus=spCriticalStatus, sensorProbeDrycontactArrayPort1ControlMode=sensorProbeDrycontactArrayPort1ControlMode, sensorDCvoltageMaxVoltage=sensorDCvoltageMaxVoltage, sensorProbeThermostatTemperatureArrayPort5Value=sensorProbeThermostatTemperatureArrayPort5Value, sensorTankSenderDelayLowWarning=sensorTankSenderDelayLowWarning, sensorWaterRopeSensorErrorDesc=sensorWaterRopeSensorErrorDesc, sensorSirenOffDesc=sensorSirenOffDesc, spSwitch36Status=spSwitch36Status, sensorHumidityTable=sensorHumidityTable, sensorProbeDrycontactArrayPort6Index=sensorProbeDrycontactArrayPort6Index, sensorProbeSwitchURL=sensorProbeSwitchURL, sensorProbeTemperatureArrayPort6OpenURL=sensorProbeTemperatureArrayPort6OpenURL, sensorTankSenderDisplayStyle=sensorTankSenderDisplayStyle, sensorProbeThermostatTemperatureArrayPort2LowLimit2=sensorProbeThermostatTemperatureArrayPort2LowLimit2, sensorProbeDrycontactArrayPort8Online=sensorProbeDrycontactArrayPort8Online, spRelayArray1_2Status=spRelayArray1_2Status, sensorSecurityCriticalColor=sensorSecurityCriticalColor, sensorProbeRelayArrayPort1Index=sensorProbeRelayArrayPort1Index, sensorProbeSwitchRelayCycleTime=sensorProbeSwitchRelayCycleTime, sensorProbeDrycontactArrayPort8Status=sensorProbeDrycontactArrayPort8Status, sensorProbeEnergyRelayOnPort=sensorProbeEnergyRelayOnPort, sensorProbeHumidityIndexCount=sensorProbeHumidityIndexCount, sensorProbeTemperatureArrayPort7DegreeType=sensorProbeTemperatureArrayPort7DegreeType, sensorDCvoltageLowWarningDesc=sensorDCvoltageLowWarningDesc, sensorProbeTemperatureArrayPort3Value=sensorProbeTemperatureArrayPort3Value, spRelayArray2_6Status=spRelayArray2_6Status, spSwitch52Status=spSwitch52Status, sensorProbeSwitchCalendar=sensorProbeSwitchCalendar, sensorProbeTemperatureArrayPort5GoOnline=sensorProbeTemperatureArrayPort5GoOnline, sensorProbeTemperatureArrayPort3Entry=sensorProbeTemperatureArrayPort3Entry, sensorProbeTypeSoftMotionName=sensorProbeTypeSoftMotionName, sensorProbeTemperatureArrayPort5HighCritical=sensorProbeTemperatureArrayPort5HighCritical, sensorProbeRelayArrayPort7OpenURL=sensorProbeRelayArrayPort7OpenURL, sensorProbeHumidity4to20mAUnit=sensorProbeHumidity4to20mAUnit, sensorProbeRelayArrayPort3Index=sensorProbeRelayArrayPort3Index, sensorProbeTemperatureArrayPort8Number=sensorProbeTemperatureArrayPort8Number, sensorProbeSwitchIndex=sensorProbeSwitchIndex, sensorProbeTemperatureArrayPort3HighWarning=sensorProbeTemperatureArrayPort3HighWarning, sensorThermostatLowWarningDesc=sensorThermostatLowWarningDesc, spRelayArray4_4Status=spRelayArray4_4Status, sensorProbeTemperatureArrayPort7Rearm=sensorProbeTemperatureArrayPort7Rearm, sensorProbeDrycontactArrayPort3ManualOutputCycleTime=sensorProbeDrycontactArrayPort3ManualOutputCycleTime, sensorProbeRelayArrayPort6RelayDescOn=sensorProbeRelayArrayPort6RelayDescOn, spRelayArray4_8Status=spRelayArray4_8Status, sensorProbeTemperatureArrayPort6DegreeRaw=sensorProbeTemperatureArrayPort6DegreeRaw, sensorProbeDrycontactArrayPort3OutputDescOn=sensorProbeDrycontactArrayPort3OutputDescOn, spTemperatureArray3Status=spTemperatureArray3Status, sensorDCvoltageLowCriticalDesc=sensorDCvoltageLowCriticalDesc, sensorProbeHumidityDescription=sensorProbeHumidityDescription, sensorProbeRelayArrayPort1URL=sensorProbeRelayArrayPort1URL, sensorTemperatureLowWarningColor=sensorTemperatureLowWarningColor, sensorProbeTemperatureArrayPort4OpenURL=sensorProbeTemperatureArrayPort4OpenURL, sensorAirflowEntry=sensorAirflowEntry, sensorProbeTemperatureArrayPort4Value=sensorProbeTemperatureArrayPort4Value, sensorAirflowPort=sensorAirflowPort, sensorProbeSoundDetectorSensor=sensorProbeSoundDetectorSensor, sensorProbeIRMSAcknowledgement=sensorProbeIRMSAcknowledgement, sensorHumidityEntry=sensorHumidityEntry, sensorProbeNoCameraContTimeHighCritical=sensorProbeNoCameraContTimeHighCritical, sensorProbeDrycontactArrayPort5OutputDescOn=sensorProbeDrycontactArrayPort5OutputDescOn, spTemperatureArray6Status=spTemperatureArray6Status, sensorProbeDrycontactArrayPort5URL=sensorProbeDrycontactArrayPort5URL, sensorProbeRelayArrayPort7RelayDescOff=sensorProbeRelayArrayPort7RelayDescOff, sensorDryContactType=sensorDryContactType, spRelayArray2_5Status=spRelayArray2_5Status, sensorProbeTemperatureArrayPort4Description=sensorProbeTemperatureArrayPort4Description, sensorProbeThermostatTemperatureArrayPort2Value=sensorProbeThermostatTemperatureArrayPort2Value, spRelayArray6_5Status=spRelayArray6_5Status, sensorDCvoltageDisplayStyle=sensorDCvoltageDisplayStyle, sensorAirflowValue=sensorAirflowValue, sensorProbeThermostatTemperatureArrayPort7Description=sensorProbeThermostatTemperatureArrayPort7Description, spRelayArray6_3Status=spRelayArray6_3Status, sensorProbeThermostatHighLimitAction1=sensorProbeThermostatHighLimitAction1, spSwitch40Status=spSwitch40Status, sensorTemperatureNormalColor=sensorTemperatureNormalColor, sensorProbeTemperatureArrayPort2LowWarning=sensorProbeTemperatureArrayPort2LowWarning, sensorDryContactOutputManualCycleTime=sensorDryContactOutputManualCycleTime, sensorProbeThermostatTemperatureArrayPort2LowLimitAction2=sensorProbeThermostatTemperatureArrayPort2LowLimitAction2, sensorProbeTemperatureArrayPort3LowCritical=sensorProbeTemperatureArrayPort3LowCritical, sensorProbeDrycontactArrayPort7ContTimeCritical=sensorProbeDrycontactArrayPort7ContTimeCritical, sensorProbeRelayArrayPort1RelayDescOff=sensorProbeRelayArrayPort1RelayDescOff, sensorDCvoltageDelayHighCritical=sensorDCvoltageDelayHighCritical, sensorDryContactPort2GoOnline=sensorDryContactPort2GoOnline, sensorProbeRelayArrayPort2RelayDescOff=sensorProbeRelayArrayPort2RelayDescOff, sensorProbeDrycontactArrayPort4ManualOutputAction=sensorProbeDrycontactArrayPort4ManualOutputAction, sensorProbeThermostatTemperatureArrayPort8HighLimit2=sensorProbeThermostatTemperatureArrayPort8HighLimit2, sensorProbeSwitchEmailTrapLimit=sensorProbeSwitchEmailTrapLimit, sensorPowerValue=sensorPowerValue, sensorProbeHumidityDatacollectType=sensorProbeHumidityDatacollectType, sensorWaterEntry=sensorWaterEntry, spRelayArray2_4Status=spRelayArray2_4Status, sensorProbeDrycontactArrayPort5ContTimeCritical=sensorProbeDrycontactArrayPort5ContTimeCritical, sensorSmokeNormalDesc=sensorSmokeNormalDesc, sensorProbeThermostatTemperatureArrayPort4GoOnline=sensorProbeThermostatTemperatureArrayPort4GoOnline, sensorDCvoltageEntry=sensorDCvoltageEntry, sensorPowerUnit=sensorPowerUnit, sensorProbeRelayArrayPort8NormalState=sensorProbeRelayArrayPort8NormalState, spRelayArray2_3Status=spRelayArray2_3Status, sensorProbeTypeVirtualName=sensorProbeTypeVirtualName, spTemperatureArray5_7Status=spTemperatureArray5_7Status, spManufName=spManufName, sensorFuelTable=sensorFuelTable, sensorProbeTempEmailInterval=sensorProbeTempEmailInterval, sensorProbeDrycontactArrayPort7NormalState=sensorProbeDrycontactArrayPort7NormalState, sensorProbeTempContTimeLowCritical=sensorProbeTempContTimeLowCritical, sensorProbeSwitchRelayOutputVoltStatus=sensorProbeSwitchRelayOutputVoltStatus, sensorProbeTemperatureArrayPort5Table=sensorProbeTemperatureArrayPort5Table, sensorSecurityDeviceIndex=sensorSecurityDeviceIndex, sensorProbeTemperatureArrayPort5DatacollectType=sensorProbeTemperatureArrayPort5DatacollectType, sensorProbeRelayArrayPort5ManualRelayAction=sensorProbeRelayArrayPort5ManualRelayAction, sensorProbeVRMSDelayNormal=sensorProbeVRMSDelayNormal, sensorProbeTemperatureArrayPort4HighCritical=sensorProbeTemperatureArrayPort4HighCritical, sensorProbeVRMSStatus=sensorProbeVRMSStatus, sensorProbeIRMSURL=sensorProbeIRMSURL, sensorProbeTemperatureArrayPort4DegreeRaw=sensorProbeTemperatureArrayPort4DegreeRaw, sensorProbeThermostatTemperatureArrayPort8EnableTime=sensorProbeThermostatTemperatureArrayPort8EnableTime, spSensorDescription=spSensorDescription, sensorProbeSoundDetectorContTimeSensorError=sensorProbeSoundDetectorContTimeSensorError, sensorProbeDrycontactArrayPort3Description=sensorProbeDrycontactArrayPort3Description)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeThermostatTemperatureArrayPort3LowLimit1=sensorProbeThermostatTemperatureArrayPort3LowLimit1, sensorProbeHumidityEntry=sensorProbeHumidityEntry, sensorProbeHumidityHighWarning=sensorProbeHumidityHighWarning, sensorProbeTemperatureArrayPort1URL=sensorProbeTemperatureArrayPort1URL, sensorDCvoltageHighCriticalColor=sensorDCvoltageHighCriticalColor, spSummary=spSummary, sensorProbeIRMSSensorNumber=sensorProbeIRMSSensorNumber, sensorProbeEnergyStatus=sensorProbeEnergyStatus, spSwitch47Status=spSwitch47Status, sensorAirflowStatus=sensorAirflowStatus, sensorProbeRelayArrayPort7=sensorProbeRelayArrayPort7, spSwitch22Status=spSwitch22Status, sensor4to20mAUnit=sensor4to20mAUnit, sensorProbeRelayArrayPort1ManualRelayAction=sensorProbeRelayArrayPort1ManualRelayAction, sensorProbeRelayArrayPort5Entry=sensorProbeRelayArrayPort5Entry, sensorProbeIRMSLowCritical=sensorProbeIRMSLowCritical, sensorProbeTemperatureArrayPort8Status=sensorProbeTemperatureArrayPort8Status, sensorProbeEnergyContTimeSensorError=sensorProbeEnergyContTimeSensorError, sensorProbeTemperatureArrayPort4ContTimeHighCritical=sensorProbeTemperatureArrayPort4ContTimeHighCritical, sensorProbeSoundDetectorOnline=sensorProbeSoundDetectorOnline, deviceIntelligentTable=deviceIntelligentTable, sensorProbeEnergySensorEntry=sensorProbeEnergySensorEntry, sensorTemperatureDeviceIndex=sensorTemperatureDeviceIndex, sensorProbeVRMSAcknowledgement=sensorProbeVRMSAcknowledgement, sensorProbeRelayArrayPort5RelayAction=sensorProbeRelayArrayPort5RelayAction, sensorProbeSwitchSendNormalTrap=sensorProbeSwitchSendNormalTrap, sensorProbeMailCustom=sensorProbeMailCustom, sensorProbeDrycontactArrayPort1ContTimeNormal=sensorProbeDrycontactArrayPort1ContTimeNormal, sensorProbeThermostatTemperatureArrayPort5HighLimitAction1=sensorProbeThermostatTemperatureArrayPort5HighLimitAction1, sensorProbeDrycontactArrayPort1GoOnline=sensorProbeDrycontactArrayPort1GoOnline, sensorProbeVirtualAnalogContTimeLowCritical=sensorProbeVirtualAnalogContTimeLowCritical, sensorAirflowGoOffline=sensorAirflowGoOffline, sensorProbeThermostatTemperatureArrayPort4NormalAction1=sensorProbeThermostatTemperatureArrayPort4NormalAction1, sensorValue=sensorValue, sensorProbeSoundDetectorHighCritical=sensorProbeSoundDetectorHighCritical, sensorSmokeCriticalColor=sensorSmokeCriticalColor, sensorWaterRopeEntry=sensorWaterRopeEntry, sensorProbeHumidityCalendar=sensorProbeHumidityCalendar, sensorProbeRelayArrayPort2Number=sensorProbeRelayArrayPort2Number, sensorProbeRelayArrayPort3Online=sensorProbeRelayArrayPort3Online, sensorProbeRelayArrayPort8Table=sensorProbeRelayArrayPort8Table, spSwitch10Status=spSwitch10Status, sensorProbeEnergySirenAction=sensorProbeEnergySirenAction, sensorDryContactControlMode=sensorDryContactControlMode, sensorHumidityOffset=sensorHumidityOffset, sensorLowWarningDescription=sensorLowWarningDescription, spRelayArray8_3Status=spRelayArray8_3Status, sensorFuelSensorErrorDesc=sensorFuelSensorErrorDesc, sensorProbeTemperatureArrayPort6Offset=sensorProbeTemperatureArrayPort6Offset, sensorWaterRopeDescription=sensorWaterRopeDescription, spBoardIndex=spBoardIndex, sensorProbeSoundDetectorGoOnline=sensorProbeSoundDetectorGoOnline, spSwitch42Status=spSwitch42Status, sensorTankSenderHighWarningColor=sensorTankSenderHighWarningColor, sensorProbeRelayArrayPort2RelayAction=sensorProbeRelayArrayPort2RelayAction, sensorProbeDrycontactArrayPort3OutputDescOff=sensorProbeDrycontactArrayPort3OutputDescOff, sensorAirflowTable=sensorAirflowTable, sensorProbeDrycontactArrayPort5Direction=sensorProbeDrycontactArrayPort5Direction, sensorProbeRelayArrayPort3Entry=sensorProbeRelayArrayPort3Entry, sensorProbeThermostatLowLimitAction1=sensorProbeThermostatLowLimitAction1, spSwitch12Status=spSwitch12Status, sensorTemperatureDelayNormal=sensorTemperatureDelayNormal, sensorSmokeCriticalDesc=sensorSmokeCriticalDesc, sensorProbeSMTPLogin=sensorProbeSMTPLogin, sensorProbeHumidityLowVoltage=sensorProbeHumidityLowVoltage, sensorProbeTemperatureArrayPort5Offset=sensorProbeTemperatureArrayPort5Offset, sensorProbeTypeWaterName=sensorProbeTypeWaterName, spSensorStatus=spSensorStatus, sensorProbeThermostatNormalAction2=sensorProbeThermostatNormalAction2, sensorDryContactPort14GoOnline=sensorDryContactPort14GoOnline, sensorProbeThermostatLowLimitAction2=sensorProbeThermostatLowLimitAction2, sensorAirflowDisplayStyle=sensorAirflowDisplayStyle, secSensor=secSensor, sensorProbeEnergyRearm=sensorProbeEnergyRearm, sensorProbeTemperatureArrayPort1Number=sensorProbeTemperatureArrayPort1Number, deviceDryContactDescription=deviceDryContactDescription, sensorProbeSoundDetectorMicBoost=sensorProbeSoundDetectorMicBoost, sensorHumidityDisplayStyle=sensorHumidityDisplayStyle, sensorProbeRelayArrayPort8ManualRelayCycleTime=sensorProbeRelayArrayPort8ManualRelayCycleTime, sensorProbeVirtualAnalogGoOnline=sensorProbeVirtualAnalogGoOnline, sensorWaterRopeRaw=sensorWaterRopeRaw, sensorProbeDrycontactArrayPort5ManualOutputCycleTime=sensorProbeDrycontactArrayPort5ManualOutputCycleTime, sensorProbeTempIndex=sensorProbeTempIndex, sensorProbeDrycontactArrayPort5NormalState=sensorProbeDrycontactArrayPort5NormalState, spEnergy5Status=spEnergy5Status, sensorHighWarningDescription=sensorHighWarningDescription, sensorProbeDrycontactArrayPort6Online=sensorProbeDrycontactArrayPort6Online, sensorProbeRelayArrayPort8Number=sensorProbeRelayArrayPort8Number, sensorProbeTempDescription=sensorProbeTempDescription, sensorProbeDrycontactArrayPort8Description=sensorProbeDrycontactArrayPort8Description, sensorProbeDrycontactArrayPort1NormalState=sensorProbeDrycontactArrayPort1NormalState, sensorProbeThermostatIndex=sensorProbeThermostatIndex, sensorTemperatureDelayHighWarning=sensorTemperatureDelayHighWarning, sensorFuelHighWarningDesc=sensorFuelHighWarningDesc, sensorDCvoltageTable=sensorDCvoltageTable, sensorProbeThermostatTemperatureArrayPort3Value=sensorProbeThermostatTemperatureArrayPort3Value, sensorFuelDelayLowCritical=sensorFuelDelayLowCritical, sensorThermostatSensorErrorColor=sensorThermostatSensorErrorColor, sensorProbeRelayArrayPort6GoOnline=sensorProbeRelayArrayPort6GoOnline, sensorProbeEnergyHighCritical=sensorProbeEnergyHighCritical, spSenUnknownStatus=spSenUnknownStatus, sensorTemperatureEntry=sensorTemperatureEntry, spSwitch15Status=spSwitch15Status, sensorProbeSwitchWaterRopeLength=sensorProbeSwitchWaterRopeLength, sensorSirenStatus=sensorSirenStatus, sensorProbeTemperatureArrayPort4Index=sensorProbeTemperatureArrayPort4Index, sensorSmokeDeviceIndex=sensorSmokeDeviceIndex, sensorProbeEnergyReadingMode=sensorProbeEnergyReadingMode, sensorHighCriticalColor=sensorHighCriticalColor, sensorProbeRelayArrayPort1Description=sensorProbeRelayArrayPort1Description, sensorSirenEntry=sensorSirenEntry, sensorProbeIRMSOnline=sensorProbeIRMSOnline, sensorProbeTemperatureArrayPort6Value=sensorProbeTemperatureArrayPort6Value, spSwitch6Status=spSwitch6Status, sensorProbeNoCameraContTimeNormal=sensorProbeNoCameraContTimeNormal, sensorProbeDrycontactArrayPort2ManualOutputAction=sensorProbeDrycontactArrayPort2ManualOutputAction, sensorProbeRelayArrayPort4=sensorProbeRelayArrayPort4, sensorProbeDrycontactArrayPort3NormalState=sensorProbeDrycontactArrayPort3NormalState, sensorProbeThermostatTemperatureArrayPort1HighLimitAction2=sensorProbeThermostatTemperatureArrayPort1HighLimitAction2, sensorProbeThermostatTemperatureArrayPort1RelayControlPort=sensorProbeThermostatTemperatureArrayPort1RelayControlPort, spRelayArray8_8Status=spRelayArray8_8Status, sensorProbeThermostatTemperatureArrayPort8RelayControlPort=sensorProbeThermostatTemperatureArrayPort8RelayControlPort, sensorMotionGoOffline=sensorMotionGoOffline, sensorProbeIRMSDatacollectType=sensorProbeIRMSDatacollectType, spSwitch55Status=spSwitch55Status, sensorWaterDescription=sensorWaterDescription, sensorProbeTemperatureArrayPort4HighWarning=sensorProbeTemperatureArrayPort4HighWarning, sensorProbeHumidityLowCritical=sensorProbeHumidityLowCritical, sensorWaterRopeImpedance=sensorWaterRopeImpedance, sensorPowerDelayHighCritical=sensorPowerDelayHighCritical, sensorProbeChecksum=sensorProbeChecksum, sensorProbeUntidePassword=sensorProbeUntidePassword, sensorDCvoltageHighCritical=sensorDCvoltageHighCritical, sensorProbeDrycontactArrayPort5ManualOutputAction=sensorProbeDrycontactArrayPort5ManualOutputAction, spTemperatureArray2_6Status=spTemperatureArray2_6Status, sensorSmokeEntry=sensorSmokeEntry, sensorWaterRopeSensorErrorColor=sensorWaterRopeSensorErrorColor, sensorProbeDrycontactArrayPort6Entry=sensorProbeDrycontactArrayPort6Entry, sensorProbeTemperatureArrayPort2ContTimeNormal=sensorProbeTemperatureArrayPort2ContTimeNormal, sensorProbeThermostatTemperatureArrayPort8LowLimitAction2=sensorProbeThermostatTemperatureArrayPort8LowLimitAction2, spWarningStatus=spWarningStatus, sensorProbeDrycontactArrayPort3=sensorProbeDrycontactArrayPort3, spSwitch1Status=spSwitch1Status, sensorProbeTempDatacollectType=sensorProbeTempDatacollectType, sensorProbeRelayArrayPort4OpenURL=sensorProbeRelayArrayPort4OpenURL, sensorProbeThermostatTemperatureArrayPort8Description=sensorProbeThermostatTemperatureArrayPort8Description, sensorProbeThermostatTemperatureArrayPort3NormalAction2=sensorProbeThermostatTemperatureArrayPort3NormalAction2, sensorProbeSoftMotionCalendar=sensorProbeSoftMotionCalendar, sensorRelayGoOffline=sensorRelayGoOffline, sensorProbeThermostatTemperatureArrayPort7Index=sensorProbeThermostatTemperatureArrayPort7Index, sensorThermostatNormalColor=sensorThermostatNormalColor, sensorProbeTemperatureArrayPort8DatacollectType=sensorProbeTemperatureArrayPort8DatacollectType, sensorProbeRelayArrayPort7RelayDescOn=sensorProbeRelayArrayPort7RelayDescOn, sensorProbeTempDelayError=sensorProbeTempDelayError, sensorProbeEnergyContTimeHighWarning=sensorProbeEnergyContTimeHighWarning, sensorProbeRelayArrayPort3GoOnline=sensorProbeRelayArrayPort3GoOnline, spSwitch54Status=spSwitch54Status, sensorProbeTemperatureArrayPort6Index=sensorProbeTemperatureArrayPort6Index, sensorProbeFirmwareVersion=sensorProbeFirmwareVersion, spSwitch30Status=spSwitch30Status, sensorProbeTempCalendar=sensorProbeTempCalendar, sensorProbeSwitchSendMail=sensorProbeSwitchSendMail, sensorFuelStatus=sensorFuelStatus, sensorThermostatLowCriticalDesc=sensorThermostatLowCriticalDesc, sensorProbeThermostatDescription=sensorProbeThermostatDescription, sensorProbeDrycontactArrayPort2=sensorProbeDrycontactArrayPort2, sensorProbeVirtualAnalogContTimeNormal=sensorProbeVirtualAnalogContTimeNormal, sensorProbeEnergySirenDelayAlarm=sensorProbeEnergySirenDelayAlarm, sensorProbeTemperatureArrayPort4ContTimeLowCritical=sensorProbeTemperatureArrayPort4ContTimeLowCritical, spSensorAliveLow=spSensorAliveLow, sensorProbeRequestResendTrap=sensorProbeRequestResendTrap, sensorDCvoltagePort=sensorDCvoltagePort, sensorAirflowLowCriticalDesc=sensorAirflowLowCriticalDesc, spRelayArray1_4Status=spRelayArray1_4Status, sensorProbeDrycontactArrayPort4ContTimeNormal=sensorProbeDrycontactArrayPort4ContTimeNormal, sensorProbeNoCameraSensorEntry=sensorProbeNoCameraSensorEntry, spBoardDescription=spBoardDescription, spTemperatureArray7_8Status=spTemperatureArray7_8Status, sensorProbeVirtualSwitchContTimeNormal=sensorProbeVirtualSwitchContTimeNormal, sensorTankSenderStatus=sensorTankSenderStatus, sensorProbeVRMSSirenCycleTime=sensorProbeVRMSSirenCycleTime, sensorSirenManualCycleTime=sensorSirenManualCycleTime, sensorProbeDrycontactArrayPort1Table=sensorProbeDrycontactArrayPort1Table, sensorProbeTemperatureArrayPort4LowWarning=sensorProbeTemperatureArrayPort4LowWarning, sensorProbeTemperatureArrayPort8OpenURL=sensorProbeTemperatureArrayPort8OpenURL, sensorProbeThermostatTemperatureArrayPort7LowLimitAction2=sensorProbeThermostatTemperatureArrayPort7LowLimitAction2, sensorPowerPort=sensorPowerPort, sensorProbeTemperatureArrayPort2OpenURL=sensorProbeTemperatureArrayPort2OpenURL, sensorProbeHumiditySendNormalMail=sensorProbeHumiditySendNormalMail, sensorProbeMailCC=sensorProbeMailCC, sensorAirflowDelayHighCritical=sensorAirflowDelayHighCritical, sensorProbeThermostatTemperatureArrayPort8LowLimitAction1=sensorProbeThermostatTemperatureArrayPort8LowLimitAction1, sensorTankSenderDelayLowCritical=sensorTankSenderDelayLowCritical, sensorProbeTemperatureArrayPort2Table=sensorProbeTemperatureArrayPort2Table, sensorProbeTimeOfDay=sensorProbeTimeOfDay, sensorThermostatHighWarning=sensorThermostatHighWarning, sensorProbeThermostatTemperatureArrayPort7Value=sensorProbeThermostatTemperatureArrayPort7Value, spVirtual11Status=spVirtual11Status, sensorThermostatHighCriticalDesc=sensorThermostatHighCriticalDesc, sensorProbeRelayArrayPort1NormalState=sensorProbeRelayArrayPort1NormalState, sensorProbeThermostatTemperatureArrayPort5LowLimit2=sensorProbeThermostatTemperatureArrayPort5LowLimit2, sensorSirenOnColor=sensorSirenOnColor, sensorProbeThermostatTemperatureArrayPort3Index=sensorProbeThermostatTemperatureArrayPort3Index, sensorProbeThermostatTemperatureArrayPort5EnableTime=sensorProbeThermostatTemperatureArrayPort5EnableTime, sensorProbeWattHoursSensor=sensorProbeWattHoursSensor, sensorProbeDrycontactArrayPort4URL=sensorProbeDrycontactArrayPort4URL, sensorProbeTemperatureArrayPort3LowWarning=sensorProbeTemperatureArrayPort3LowWarning, sensorProbeVirtualAnalogDescription=sensorProbeVirtualAnalogDescription, sensorFuelAmountMaxValue=sensorFuelAmountMaxValue, sensorDCvoltageRearm=sensorDCvoltageRearm, sensorProbeTempContTimeNormal=sensorProbeTempContTimeNormal, sensorProbeType4to20MAName=sensorProbeType4to20MAName, sensorPowerDelayHighWarning=sensorPowerDelayHighWarning, sensorProbeTrapType=sensorProbeTrapType, spRelayArray6_1Status=spRelayArray6_1Status, sensorProbeTemperatureArrayPort5DegreeRaw=sensorProbeTemperatureArrayPort5DegreeRaw, deviceDryContactStatus=deviceDryContactStatus, sensorProbeTemperatureArrayPort6Calendar=sensorProbeTemperatureArrayPort6Calendar, sensor4to20mALowWarningDesc=sensor4to20mALowWarningDesc, sensorSubPort=sensorSubPort, sensorErrorDescription=sensorErrorDescription, sensorProbeThermostatTemperatureArrayPort6LowLimit2=sensorProbeThermostatTemperatureArrayPort6LowLimit2, sensorProbeThermostatTemperatureArrayPort4Mode=sensorProbeThermostatTemperatureArrayPort4Mode, sensorThermostatLowWarning=sensorThermostatLowWarning, spAnalogue8Status=spAnalogue8Status, sensorProbeTempSendMail=sensorProbeTempSendMail, spSenNormalStatus=spSenNormalStatus, spTemperatureArray1_1Status=spTemperatureArray1_1Status, sensorProbeDrycontactArrayPort4Description=sensorProbeDrycontactArrayPort4Description, spTemperatureArray5_8Status=spTemperatureArray5_8Status, sensorNormalDescription=sensorNormalDescription, sensorSmokeIndex=sensorSmokeIndex, sensorAirflowDelayNormal=sensorAirflowDelayNormal, sensorProbeTemperatureArrayPort7LowWarning=sensorProbeTemperatureArrayPort7LowWarning, sensorProbeRelayArrayPort3RelayAction=sensorProbeRelayArrayPort3RelayAction, sensorProbeThermostatTemperatureArrayPort3GoOnline=sensorProbeThermostatTemperatureArrayPort3GoOnline, sensorProbeEnergySensor=sensorProbeEnergySensor, sensorProbeRelayArrayPort6URL=sensorProbeRelayArrayPort6URL, sensorDryContactOnDesc=sensorDryContactOnDesc, sensorTankSenderRearm=sensorTankSenderRearm, sensorProbeVRMSDatacollectType=sensorProbeVRMSDatacollectType, sensorProbeVirtualSwitchGoOnline=sensorProbeVirtualSwitchGoOnline, sensorProbeThermostatTemperatureArrayPort2EnableTime=sensorProbeThermostatTemperatureArrayPort2EnableTime, sensorHumidityStatus=sensorHumidityStatus, sensorTankSenderLowCriticalDesc=sensorTankSenderLowCriticalDesc, sensorProbeDrycontactArrayPort1URL=sensorProbeDrycontactArrayPort1URL, sensorProbeTemperatureArrayPort4Number=sensorProbeTemperatureArrayPort4Number, sensorProbeRelayArrayPort4Entry=sensorProbeRelayArrayPort4Entry, sensorProbeTemperatureArrayPort8ContTimeHighCritical=sensorProbeTemperatureArrayPort8ContTimeHighCritical, sensorProbeTemperatureArrayPort5Number=sensorProbeTemperatureArrayPort5Number, sensorProbeDrycontactArrayPort1ManualOutputAction=sensorProbeDrycontactArrayPort1ManualOutputAction, sensorProbeTemperatureArrayPort8ContTimeSensorError=sensorProbeTemperatureArrayPort8ContTimeSensorError, sensorSecurityPort=sensorSecurityPort, sensorWaterRopeTable=sensorWaterRopeTable)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorProbeTempOnline=sensorProbeTempOnline, sensorProbeTypeADE7763VRMSName=sensorProbeTypeADE7763VRMSName, sensorProbeTemperatureArrayPort1Entry=sensorProbeTemperatureArrayPort1Entry, spProductName=spProductName, spSwitchStatus=spSwitchStatus, sensorProbeRelayArrayPort8OpenURL=sensorProbeRelayArrayPort8OpenURL, sensorProbeTempURL=sensorProbeTempURL, sensorOnColor=sensorOnColor, spRelayArray1_7Status=spRelayArray1_7Status, deviceIndex=deviceIndex, sensor4to20mABaseVoltage=sensor4to20mABaseVoltage, sensorProbeDrycontactArrayPort2GoOnline=sensorProbeDrycontactArrayPort2GoOnline, spIRMS4Status=spIRMS4Status, sensorProbeVirtualAnalogValueFactor=sensorProbeVirtualAnalogValueFactor, sensorProbeThermostatTemperatureArrayPort7Mode=sensorProbeThermostatTemperatureArrayPort7Mode, sensorProbeDrycontactArrayPort7=sensorProbeDrycontactArrayPort7, sensorAirflowRearm=sensorAirflowRearm, sensorTemperatureSensorErrorDesc=sensorTemperatureSensorErrorDesc, sensorWaterNormalDesc=sensorWaterNormalDesc, sensorProbeTempOffset=sensorProbeTempOffset, sensorProbeTemperatureArrayPort2URL=sensorProbeTemperatureArrayPort2URL, sensorProbeRelayArrayPort8RelayCycleTime=sensorProbeRelayArrayPort8RelayCycleTime, spSensorValue=spSensorValue, sensorProbeThermostatTemperatureArrayPort8Mode=sensorProbeThermostatTemperatureArrayPort8Mode, sensorProbeThermostatTemperatureArrayPort4RelayControlPort=sensorProbeThermostatTemperatureArrayPort4RelayControlPort, sensorProbeSoundDetectorIndex=sensorProbeSoundDetectorIndex, sensorProbeTypeACvoltageName=sensorProbeTypeACvoltageName, spSwitch2Status=spSwitch2Status, sensorProbeSwitchDirection=sensorProbeSwitchDirection, sensorProbeRelayArrayPort7Online=sensorProbeRelayArrayPort7Online, sensorProbeTemperatureArrayPort4Online=sensorProbeTemperatureArrayPort4Online, sensorIntelligentPort3GoOnline=sensorIntelligentPort3GoOnline, spVirtual4Status=spVirtual4Status, sensorProbeSoftMotionContTimeHighCritical=sensorProbeSoftMotionContTimeHighCritical, sensorProbeTemperatureArrayPort5ContTimeHighWarning=sensorProbeTemperatureArrayPort5ContTimeHighWarning, sensorProbeDrycontactArrayPort2Online=sensorProbeDrycontactArrayPort2Online, sensorSirenDeviceIndex=sensorSirenDeviceIndex, sensorThermostatRearm=sensorThermostatRearm, sensorMotionDeviceIndex=sensorMotionDeviceIndex, sensorPowerHighWarningColor=sensorPowerHighWarningColor, spTemperatureArray4_3Status=spTemperatureArray4_3Status, sensorProbeHumidityStatus=sensorProbeHumidityStatus, sensor4to20mATable=sensor4to20mATable, sensorSmokeSubPort=sensorSmokeSubPort, spRelayArray2_7Status=spRelayArray2_7Status, sensorPowerLowCritical=sensorPowerLowCritical, sensorRelayControlMode=sensorRelayControlMode, spTemperatureArray1_8Status=spTemperatureArray1_8Status, sensorProbeMailTimeout=sensorProbeMailTimeout, sensorProbeDrycontactArrayPort7OpenURL=sensorProbeDrycontactArrayPort7OpenURL, spSenCriticalStatus=spSenCriticalStatus, sensorProbeTemperatureArrayPort5=sensorProbeTemperatureArrayPort5, sensorAirflowLowWarningDesc=sensorAirflowLowWarningDesc, sensorWaterRopeCriticalColor=sensorWaterRopeCriticalColor, sensorProbeRelayArrayPort2Online=sensorProbeRelayArrayPort2Online, spSwitch49Status=spSwitch49Status, sensorProbeThermostatTemperatureArrayPort5HighLimit2=sensorProbeThermostatTemperatureArrayPort5HighLimit2, sensorProbeTypeTemperatureArrayName=sensorProbeTypeTemperatureArrayName, sensorDCvoltageHighWarning=sensorDCvoltageHighWarning, sensorProbeThermostatTemperatureArrayPort4LowLimit1=sensorProbeThermostatTemperatureArrayPort4LowLimit1, sensorAirflowDelayError=sensorAirflowDelayError, sensorProbeSwitchRelayDescOn=sensorProbeSwitchRelayDescOn, sensorDryContactSubPort=sensorDryContactSubPort, sensorProbeTemperatureArrayPort7Online=sensorProbeTemperatureArrayPort7Online, sensorAirflowSensorErrorColor=sensorAirflowSensorErrorColor, sensor4to20mAGoOffline=sensor4to20mAGoOffline, sensorProbeTemperatureArrayPort8Table=sensorProbeTemperatureArrayPort8Table, sensorProbeVirtualAnalogHighCritical=sensorProbeVirtualAnalogHighCritical, sensorProbeRelayArrayPort2ControlMode=sensorProbeRelayArrayPort2ControlMode, spTemperatureStatus=spTemperatureStatus, sensorProbeTypeSmokeName=sensorProbeTypeSmokeName, sensorProbeRelayArrayPort7RelayCycleTime=sensorProbeRelayArrayPort7RelayCycleTime, sensorProbeWattHoursPercent=sensorProbeWattHoursPercent, sensorProbeCameraServerEntry=sensorProbeCameraServerEntry, sensorProbeTypeSHT11TempName=sensorProbeTypeSHT11TempName, sensor4to20mADelayHighCritical=sensor4to20mADelayHighCritical, spRelayArray5_8Status=spRelayArray5_8Status, sensorProbeTempSirenOnPort=sensorProbeTempSirenOnPort, sensorProbeThermostatTemperatureArrayPort8LowLimit1=sensorProbeThermostatTemperatureArrayPort8LowLimit1, sensorProbeSoundDetectorContTimeLowWarning=sensorProbeSoundDetectorContTimeLowWarning, sensorProbeDrycontactArrayPort2ContTimeNormal=sensorProbeDrycontactArrayPort2ContTimeNormal, sensorDryContactOffDesc=sensorDryContactOffDesc, sensorTankSenderDescription=sensorTankSenderDescription, sensorACvoltagePort=sensorACvoltagePort, sensorLowCriticalColor=sensorLowCriticalColor, sensorProbeSwitchLocation=sensorProbeSwitchLocation, sensorProbeDrycontactArrayPort5ContTimeNormal=sensorProbeDrycontactArrayPort5ContTimeNormal, sensorProbeRelayArrayPort6Description=sensorProbeRelayArrayPort6Description, spTemperatureArray3_6Status=spTemperatureArray3_6Status, sensorDCvoltageDelayLowCritical=sensorDCvoltageDelayLowCritical, spAnalogue2Status=spAnalogue2Status, sensorProbeIRMSDelayError=sensorProbeIRMSDelayError, deviceIntelligentStatus=deviceIntelligentStatus, sensorProbeSoundDetectorDatacollectType=sensorProbeSoundDetectorDatacollectType, sensorProbeAllowIPChange=sensorProbeAllowIPChange, sensorHumidityLowWarningColor=sensorHumidityLowWarningColor, sensorDCvoltageSensorErrorColor=sensorDCvoltageSensorErrorColor, spVirtual8Status=spVirtual8Status, sensorProbeTemperatureArrayPort4Status=sensorProbeTemperatureArrayPort4Status, sensorAirflowRaw=sensorAirflowRaw, sensorProbeVirtualAnalogAcknowledgement=sensorProbeVirtualAnalogAcknowledgement, sensorProbeRelayArrayPort4RelayCycleTime=sensorProbeRelayArrayPort4RelayCycleTime, sensorProbeRelayArrayPort8Description=sensorProbeRelayArrayPort8Description, sensorHumidityDescription=sensorHumidityDescription, sensorProbeDrycontactArrayPort8ControlMode=sensorProbeDrycontactArrayPort8ControlMode, spRelayArray8Status=spRelayArray8Status, sensorTemperatureNormalDesc=sensorTemperatureNormalDesc, sensorTankSenderGoOffline=sensorTankSenderGoOffline, spTemperatureArray2_3Status=spTemperatureArray2_3Status, spSwitch60Status=spSwitch60Status, sensorProbeRelayArrayPort7ManualRelayCycleTime=sensorProbeRelayArrayPort7ManualRelayCycleTime, sensorHumidityLowCriticalDesc=sensorHumidityLowCriticalDesc, sensorProbeVirtualSwitchSensorEntry=sensorProbeVirtualSwitchSensorEntry, sensorProbeEnergyEmailTrapLimit=sensorProbeEnergyEmailTrapLimit, sensorFuelAmountBaseValue=sensorFuelAmountBaseValue, spSwitch33Status=spSwitch33Status, sensorProbeDrycontactArrayPort5GoOnline=sensorProbeDrycontactArrayPort5GoOnline, sensorProbeThermostatTemperatureArrayPort5HighLimitAction2=sensorProbeThermostatTemperatureArrayPort5HighLimitAction2, deviceDryContactTable=deviceDryContactTable, sensorDryContactPort10GoOnline=sensorDryContactPort10GoOnline, sensorProbeDrycontactArrayPort4Online=sensorProbeDrycontactArrayPort4Online, spVirtual5Status=spVirtual5Status, sensorProbeTemperatureArrayPort8Index=sensorProbeTemperatureArrayPort8Index, sensorProbePTZBrand=sensorProbePTZBrand, sensorProbeDrycontactArrayPort6ManualOutputAction=sensorProbeDrycontactArrayPort6ManualOutputAction, sensorProbeThermostatTemperatureArrayPort1LowLimitAction2=sensorProbeThermostatTemperatureArrayPort1LowLimitAction2, sensorWaterRopeDeviceIndex=sensorWaterRopeDeviceIndex, sensorRelayStatus=sensorRelayStatus, sensorACvoltageIndex=sensorACvoltageIndex, sensorNormalColor=sensorNormalColor, sensorProbeEnergyContTimeLowWarning=sensorProbeEnergyContTimeLowWarning, spTemperatureArray6_2Status=spTemperatureArray6_2Status, spSensorStatusName=spSensorStatusName, sensorProbeSoundDetectorStatus=sensorProbeSoundDetectorStatus, sensorProbeDrycontactArrayPort5Index=sensorProbeDrycontactArrayPort5Index, sensorProbeThermostatTemperatureArrayPort6Online=sensorProbeThermostatTemperatureArrayPort6Online, sensorThermostatDelayLowCritical=sensorThermostatDelayLowCritical, sensorProbeThermostatTemperatureArrayPort5LowLimitAction2=sensorProbeThermostatTemperatureArrayPort5LowLimitAction2, spTemperatureArray6_1Status=spTemperatureArray6_1Status, sensorProbeEnergySensorIndex=sensorProbeEnergySensorIndex, sensorProbeTempSendNormalTrap=sensorProbeTempSendNormalTrap, sensorPowerDisplayStyle=sensorPowerDisplayStyle, spTemperatureArray1_4Status=spTemperatureArray1_4Status, spVirtual9Status=spVirtual9Status, sensorProbeTemperatureArrayPort8DegreeType=sensorProbeTemperatureArrayPort8DegreeType, sensorProbeSwitchRelayControlMode=sensorProbeSwitchRelayControlMode, secDevice=secDevice, sensorHumidityHighWarningColor=sensorHumidityHighWarningColor, sensorProbeDrycontactArrayPort8OutputDescOff=sensorProbeDrycontactArrayPort8OutputDescOff, sensorProbeTemperatureArrayPort5DegreeType=sensorProbeTemperatureArrayPort5DegreeType, spHostName=spHostName, sensorProbeAudioAttachChannel=sensorProbeAudioAttachChannel, sensorProbeTemperatureArrayPort1Calendar=sensorProbeTemperatureArrayPort1Calendar, sensorThermostatSubPort=sensorThermostatSubPort, sensorProbeRelayArrayPort7GoOnline=sensorProbeRelayArrayPort7GoOnline, sensorProbeHumiditySendMail=sensorProbeHumiditySendMail, sensorProbeTemperatureArrayPort4ContTimeLowWarning=sensorProbeTemperatureArrayPort4ContTimeLowWarning, sensorProbeNoCameraDescription=sensorProbeNoCameraDescription, sensorDCvoltageLowCriticalColor=sensorDCvoltageLowCriticalColor, spTemperature6Status=spTemperature6Status, sensorProbeVirtualAnalogSensorIndex=sensorProbeVirtualAnalogSensorIndex, akcp=akcp, deviceIntelligentIndex=deviceIntelligentIndex, sensorProbeDrycontactArrayPort2Direction=sensorProbeDrycontactArrayPort2Direction, sensorProbeTemperatureArrayPort8URL=sensorProbeTemperatureArrayPort8URL, sensorProbeNtpServer=sensorProbeNtpServer, sensorProbeTypeRelayName=sensorProbeTypeRelayName, sensorProbeRelayArrayPort1Number=sensorProbeRelayArrayPort1Number, sensorProbeThermostatTemperatureArrayPort6RelayControlPort=sensorProbeThermostatTemperatureArrayPort6RelayControlPort, spRelayArray3_6Status=spRelayArray3_6Status, spVirtual19Status=spVirtual19Status, sensorProbeRelayArrayPort6Online=sensorProbeRelayArrayPort6Online, sensor4to20mASensorErrorColor=sensor4to20mASensorErrorColor, sensorPowerSubPort=sensorPowerSubPort, sensorProbeTemperatureArrayPort3ContTimeHighCritical=sensorProbeTemperatureArrayPort3ContTimeHighCritical, sensorProbeNoCameraSensorIndex=sensorProbeNoCameraSensorIndex, sensorDCvoltageDelayHighWarning=sensorDCvoltageDelayHighWarning, spRelayArray3_4Status=spRelayArray3_4Status, spSwitch28Status=spSwitch28Status, spRelayArray5Status=spRelayArray5Status, sensorProbeMailSMTP=sensorProbeMailSMTP, sensorProbeDrycontactArrayPort5OutputDescOff=sensorProbeDrycontactArrayPort5OutputDescOff, sensorFuelLowWarningColor=sensorFuelLowWarningColor, spTemperatureArray6_5Status=spTemperatureArray6_5Status, sensorProbeCameraServerClientOnline=sensorProbeCameraServerClientOnline, sensorProbeTemperatureArrayPort3=sensorProbeTemperatureArrayPort3, sensorProbeTempDegreeRaw=sensorProbeTempDegreeRaw, sensorProbeThermostatTemperatureArrayPort3HighLimit1=sensorProbeThermostatTemperatureArrayPort3HighLimit1, sensorProbeDrycontactArrayPort1Status=sensorProbeDrycontactArrayPort1Status, sensorProbeDNSServer=sensorProbeDNSServer, sensorProbeEnergyAcknowledgement=sensorProbeEnergyAcknowledgement, sensorProbeDrycontactArrayPort8Index=sensorProbeDrycontactArrayPort8Index, sensor4to20mADelayError=sensor4to20mADelayError, sensorProbeRelayArrayPort2Table=sensorProbeRelayArrayPort2Table, sensorProbeDrycontactArrayPort2OpenURL=sensorProbeDrycontactArrayPort2OpenURL, sensorProbeRelayArrayPort3ManualRelayCycleTime=sensorProbeRelayArrayPort3ManualRelayCycleTime, sensorProbeSwitchEmailInterval=sensorProbeSwitchEmailInterval, sensorProbeWebPassword=sensorProbeWebPassword, sensorProbeRelayArrayPort6=sensorProbeRelayArrayPort6, sensorProbeVRMSRelayAction=sensorProbeVRMSRelayAction, sensorProbeRelayArrayPort3ControlMode=sensorProbeRelayArrayPort3ControlMode, sensorProbeVirtualSwitchOpenURL=sensorProbeVirtualSwitchOpenURL, sensorTankSenderHighWarningDesc=sensorTankSenderHighWarningDesc, spTemperatureArray1_7Status=spTemperatureArray1_7Status, sensorHumidityPort=sensorHumidityPort, sensorProbeThermostatTemperatureArrayPort7EnableTime=sensorProbeThermostatTemperatureArrayPort7EnableTime, sensorProbeRelayArrayPort4Online=sensorProbeRelayArrayPort4Online, sensorTemperatureLowWarningDesc=sensorTemperatureLowWarningDesc, sensorProbeThermostatTemperatureArrayPort3LowLimit2=sensorProbeThermostatTemperatureArrayPort3LowLimit2, sensorProbeTemperatureArrayPort7ContTimeLowCritical=sensorProbeTemperatureArrayPort7ContTimeLowCritical, sensorProbeCameraServerClientGoOnline=sensorProbeCameraServerClientGoOnline, sensorProbeVRMSContTimeHighCritical=sensorProbeVRMSContTimeHighCritical, sensor4to20mADelayLowWarning=sensor4to20mADelayLowWarning, sensorHumidityDelayNormal=sensorHumidityDelayNormal, sensorProbeDrycontactArrayPort2URL=sensorProbeDrycontactArrayPort2URL, spTemperatureArray8_5Status=spTemperatureArray8_5Status, sensorProbeDrycontactArrayPort3ControlMode=sensorProbeDrycontactArrayPort3ControlMode, sensorProbeRelayArrayPort4URL=sensorProbeRelayArrayPort4URL, sensorDryContactNormalDesc=sensorDryContactNormalDesc, sensorProbeThermostatTemperatureArrayPort3HighLimit2=sensorProbeThermostatTemperatureArrayPort3HighLimit2, sensorProbeDrycontactArrayPort4Direction=sensorProbeDrycontactArrayPort4Direction, spTemperatureArray2_1Status=spTemperatureArray2_1Status, sensorDryContactOnColor=sensorDryContactOnColor, sensorProbeSwitchTable=sensorProbeSwitchTable, spRelayArray3_5Status=spRelayArray3_5Status, spEventClassNumber=spEventClassNumber, sensorProbeTemperatureArrayPort6DegreeType=sensorProbeTemperatureArrayPort6DegreeType, sensorProbeTemperatureArrayPort1LowCritical=sensorProbeTemperatureArrayPort1LowCritical, sensorProbeThermostatTemperatureArrayPort5Online=sensorProbeThermostatTemperatureArrayPort5Online, sensorProbeThermostatTemperatureArrayPort7HighLimit1=sensorProbeThermostatTemperatureArrayPort7HighLimit1, spAnalogue5Status=spAnalogue5Status, sensorProbeSwitchDescription=sensorProbeSwitchDescription, sensorProbeTemperatureArrayPort2Status=sensorProbeTemperatureArrayPort2Status, sensorProbeRelayArrayPort6ManualRelayCycleTime=sensorProbeRelayArrayPort6ManualRelayCycleTime, sensorProbeThermostatTemperatureArrayPort7HighLimit2=sensorProbeThermostatTemperatureArrayPort7HighLimit2, spVRMS7Status=spVRMS7Status, sensorProbeRelayArrayPort8GoOnline=sensorProbeRelayArrayPort8GoOnline, sensorProbeRelayArrayPort4Description=sensorProbeRelayArrayPort4Description, sensorProbeThermostatTemperatureArrayPort6HighLimitAction2=sensorProbeThermostatTemperatureArrayPort6HighLimitAction2, sensorProbeSwitchWaterRopeRaw=sensorProbeSwitchWaterRopeRaw, sensorProbeDrycontactArrayPort1=sensorProbeDrycontactArrayPort1, sensorFuelDelayError=sensorFuelDelayError, sensorSecurityTable=sensorSecurityTable, sensorThermostatSensorErrorDesc=sensorThermostatSensorErrorDesc, sensorProbeEnergyHighWarning=sensorProbeEnergyHighWarning, sensorProbeDrycontactArrayPort8OpenURL=sensorProbeDrycontactArrayPort8OpenURL, spTemperature5Status=spTemperature5Status, sensor4to20mAHighWarning=sensor4to20mAHighWarning, sensorProbeHumidityRelayCycleTime=sensorProbeHumidityRelayCycleTime, sensorRelayOffColor=sensorRelayOffColor, sensorProbeRelayArrayPort3RelayDescOn=sensorProbeRelayArrayPort3RelayDescOn, sensorProbeTemperatureArrayPort6URL=sensorProbeTemperatureArrayPort6URL, sensorProbeRelayArrayPort5=sensorProbeRelayArrayPort5, sensorProbeDrycontactArrayPort1Online=sensorProbeDrycontactArrayPort1Online)
mibBuilder.exportSymbols("SPAGENT-MIB", sensorTemperatureLowCriticalDesc=sensorTemperatureLowCriticalDesc, sensorProbeTemperatureArrayPort7=sensorProbeTemperatureArrayPort7, sensorProbeRelayArrayPort3Status=sensorProbeRelayArrayPort3Status, spSwitch13Status=spSwitch13Status, sensorProbeJpegQualityFactor=sensorProbeJpegQualityFactor, sensorMotionEntry=sensorMotionEntry, spTemperatureArray7_6Status=spTemperatureArray7_6Status, sensorProbeTemperatureArrayPort4DegreeType=sensorProbeTemperatureArrayPort4DegreeType, sensorProbeSoundDetectorCalendar=sensorProbeSoundDetectorCalendar, sensorProbeTypePowerMeterName=sensorProbeTypePowerMeterName, sensorProbeRelayArrayPort3OpenURL=sensorProbeRelayArrayPort3OpenURL, sensorProbeTypeADE7763WatthourName=sensorProbeTypeADE7763WatthourName, spVirtual10Status=spVirtual10Status, sensorPowerSensorErrorColor=sensorPowerSensorErrorColor, spRelayArray2_1Status=spRelayArray2_1Status, sensorAirflowHighCriticalColor=sensorAirflowHighCriticalColor, sensorTemperatureDelayError=sensorTemperatureDelayError, sensorProbeVRMSRaw=sensorProbeVRMSRaw, spAnalogue3Status=spAnalogue3Status, sensorProbeDrycontactArrayPort8ManualOutputCycleTime=sensorProbeDrycontactArrayPort8ManualOutputCycleTime, sensorProbeLastSystemError=sensorProbeLastSystemError, sensorIntelligentPort4GoOnline=sensorIntelligentPort4GoOnline, sensorProbeDrycontactArrayPort7Table=sensorProbeDrycontactArrayPort7Table, sensorProbeSmtpPort=sensorProbeSmtpPort, spTemperatureArray8_8Status=spTemperatureArray8_8Status, sensorProbeSwitchWaterRopeType=sensorProbeSwitchWaterRopeType, sensorProbeTemperatureArrayPort3Description=sensorProbeTemperatureArrayPort3Description, sensorProbeThermostatTemperatureArrayPort4Index=sensorProbeThermostatTemperatureArrayPort4Index, sensorProbeSwitchSendTrap=sensorProbeSwitchSendTrap, sensorSirenOnDesc=sensorSirenOnDesc, spEnergy8Status=spEnergy8Status, sensorProbeWebUserPassword=sensorProbeWebUserPassword, sensorProbeSeparateEmail=sensorProbeSeparateEmail, sensorProbeTemperatureArrayPort8ContTimeLowWarning=sensorProbeTemperatureArrayPort8ContTimeLowWarning, sensorUnit=sensorUnit, sensorTemperatureGoOffline=sensorTemperatureGoOffline, sensorProbeDetail=sensorProbeDetail, sensorProbeTypeXDryName=sensorProbeTypeXDryName, spTemperatureArray8_6Status=spTemperatureArray8_6Status, deviceStatus=deviceStatus, spSwitch29Status=spSwitch29Status, sensorDryContactPort4GoOnline=sensorDryContactPort4GoOnline, sensorTemperatureHighWarning=sensorTemperatureHighWarning, sensorProbeCameraDescription=sensorProbeCameraDescription, sensorFuelSensorErrorColor=sensorFuelSensorErrorColor, sensorProbeTemperatureArrayPort4Entry=sensorProbeTemperatureArrayPort4Entry, sensorProbeTypeThurmostatName=sensorProbeTypeThurmostatName, sensor4to20mALowCriticalDesc=sensor4to20mALowCriticalDesc, sensorProbeVirtualAnalogLowWarning=sensorProbeVirtualAnalogLowWarning, sensorProbeTemperatureArrayPort5ContTimeHighCritical=sensorProbeTemperatureArrayPort5ContTimeHighCritical, sensorProbeRelayArrayPort4Number=sensorProbeRelayArrayPort4Number, spTemperatureArray7_1Status=spTemperatureArray7_1Status, sensorProbeDisplayLogo=sensorProbeDisplayLogo, sensorProbeThermostatTemperatureArrayPort4HighLimitAction2=sensorProbeThermostatTemperatureArrayPort4HighLimitAction2, spTemperatureArray6_8Status=spTemperatureArray6_8Status, sensorProbeDrycontactArrayPort7Direction=sensorProbeDrycontactArrayPort7Direction, sensorProbeThermostatTemperatureArrayPort3HighLimitAction1=sensorProbeThermostatTemperatureArrayPort3HighLimitAction1, deviceIntelligentDescription=deviceIntelligentDescription, sensorWaterPort=sensorWaterPort, sensor4to20mAIndex=sensor4to20mAIndex, sensorThermostatDescription=sensorThermostatDescription, sensorProbeRelayArrayPort2ManualRelayAction=sensorProbeRelayArrayPort2ManualRelayAction, spSwitch23Status=spSwitch23Status, spRelayArray6_4Status=spRelayArray6_4Status, sensorProbeSubnetMask=sensorProbeSubnetMask)
