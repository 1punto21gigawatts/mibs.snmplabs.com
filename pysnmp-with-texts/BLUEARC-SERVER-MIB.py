#
# PySNMP MIB module BLUEARC-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLUEARC-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, MibIdentifier, TimeTicks, Counter64, mib_2, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, enterprises, iso, Gauge32, Unsigned32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter64", "mib-2", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "enterprises", "iso", "Gauge32", "Unsigned32", "IpAddress", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
blueArcServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 11096, 6, 1))
blueArcServer.setRevisions(('2010-04-08 12:00', '2007-11-05 12:00', '2006-05-12 12:00', '2006-04-24 12:00', '2005-12-13 12:00', '2005-12-09 12:00', '2005-08-29 12:00', '2004-03-23 12:00', '2003-10-14 12:00', '2003-09-01 12:00', '2003-07-24 12:00', '2003-07-11 12:00', '2003-06-10 12:00', '2003-03-31 12:00', '2003-03-27 12:00', '2003-01-16 14:00', '2003-01-16 12:00', '2003-01-15 10:16', '2003-01-07 16:21', '2002-11-28 16:20', '2002-10-25 14:52', '2002-10-24 14:07', '2002-05-31 12:00', '2002-05-27 12:00', '2002-04-04 12:00', '2002-03-19 12:00', '2001-12-21 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: blueArcServer.setRevisionsDescriptions(('Implement performance branch of the module.', 'Obsolete: NFS user and group tables; HTTP and web server objects (HTTP server is no longer present); winAlert objects (Winpopup feature has been removed); racks and raid branches; event log reporting; NFS statistics (replaced with tables indexed by cluster node; licenseKeyTable (replaced with licenseTable). Implement serialNumberTable. Add value to clusterQuorumDeviceStatus.', 'Obsolete all previously deprecated objects.', 'Add tables of NVRAM statistics, for the whole pool, and per file system.', 'Add a table of ops/sec statistics for File Systems. Re-implement the fcStats table, to index by Cluster Node as well as the index of the fibre channel interface. Add columns to this table to indicate the enabled state, the status, the link speed and the link type.', "Provide clusterPNodeStatus with a 'dormant' value.", 'Obsolete any SiCtrl-related objects, as SiCtrl is not now available as a Management Service.', "Provide field in volumeTable (volumeEnterpriseVirtualServer), in autoChangerTable (autoChangerEVS), and in tapeDriveTable (tapeDriveEVS). Obsolete all ftp objects, to re-implement indexed by Cluster Node. Obsolete share objects, and re-implement in this mib as a table indexed by EVS and share name. Obsolete NFS export objects, and re-implement in this mib as a table indexed by EVS and export name. Obsolete snapshot rule and schedule objects, and re-implement in this mib as a table indexed by EVS and snapshot rule name. Add iSCSI objects. Obsolete sensor and psu tables, re-implementing as temperatureSensor, fan and psu tables. Provide 'unknown' INTEGER values in tables where the value may not be obtainable.", "Provide clustering objects with 'unknown' values.", 'Obsolete existing statistics lists (ethernet, tcp, udp...) and place them in tables indexed by ifIndex. Add ifIndex to list of IMPORTS.', 'Add Volume Label as column in snapshotRuleTable.', 'Deprecate objects which are not valid for current servers.', 'Add status codes for sysDriveStatus.', 'Rev 1.13 31 March 2003 12.00 GMT Create objects describing clustering configuration and status.', 'Rev 1.12 27 March 2003 12.00 GMT Include File System Load objects under System/Server/Environment.', 'Rev 1.11 16 January 2003 14.00 GMT Make obsolete all Hardware Flow Control objects.', 'Rev 1.10 16 January 2003 12.00 GMT Make obsolete all Power Unit tables, in order to index them with their IP addresses. Re-define all power unit tables accordingly', 'Rev 1.9 15 January 2003 10.16 GMT Make obsolete all objects describing failover, as failover has been replaced by clustering.', 'Rev 1.8 07 January 2003 16:21 GMT Make obsolete all objects describing automount characteristics, as volumes are not now automounted.', 'Rev 1.7 28 November 2002 16:20 GMT Reorder ethernet stats, to include transmitted, received and total bytes, and total packets. Required making re-ordered values obsolete, and re-defining them.', 'Rev 1.6 25 October 2002 14:52 GMT Include new object: opsPerSecond.', 'Rev 1.5 24 October 2002 14:07 GMT All Undisclosed SMTP recipient objects have been made obsolete, along with the objects to generate the SMTP recipient table. As these are now combined into one new table.', 'Rev 1.4 31 May 2002 12:00 GMT If the snapshot facility is disabled on this system, the variables: a) ndmpAutoSnapCreateEnabled and ndmpAutoSnapDeleteMode are returned as unknown(3) b) ndmpAutoSnapMaxRetention is returned as 0 by the agent. The objects snmpRecipNumber and snmpRecipTable have been made obsolete as they are available through the objects snmpTrapHostNumber and snmpTrapHostTable respectively.', 'Rev 1.3 27 May 2002 12:00 GMT nfsMounts, nfsClients and nfsExportNumberMounts have been made obsolete as they cannot be measured.', 'Rev 1.2 04 Apr 2002 12:00 GMT Additional objects: cron - a branch containing cron and at job configuration. secureWeb - a branch containing secure web access configuration. lcd - a branch containing front panel configuration. New object indicating whether diagnostics email is uuencoded or not. New table containing SMTP recipients which are to receive undisclosed alert information. mgmntStats - a branch containing management statistics. hwFlowControl - a branch containing hardware flow control settings. ftpSecurity - a branch containing FTP security configuration. ndmpSnapshotOptions - a branch containing snapshot options. virtualVolumes - a branch containing virtual volumes and associated configuration. snapshot - a branch containing snapshot configuration. nis - a branch containing NIS configuration. Enhancements: web, sictrl, telnet (and secureWeb) indicate port number and maximum number of connections permitted.', 'Rev 1.1 19 Mar 2002 12:00 GMT Additional objects: HTTP Changes made to RAID management.', 'Initial Revision 21 Dec 2001 12:00 GMT.',))
if mibBuilder.loadTexts: blueArcServer.setLastUpdated('201004081200Z')
if mibBuilder.loadTexts: blueArcServer.setOrganization('BlueArc UK Ltd.')
if mibBuilder.loadTexts: blueArcServer.setContactInfo('Contact: Support Team Postal: BlueArc Corporation 50 Rio Robles Dr. San Jose, CA 95134 USA Tel: 408 576 6600 Fax: 408 576 6601 WEB: http://www.bluearc.com email: support@bluearc.com')
if mibBuilder.loadTexts: blueArcServer.setDescription('The MIB module for monitoring a BlueArc Server.')
blueArc = MibIdentifier((1, 3, 6, 1, 4, 1, 11096))
blueArcPrivate = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6))
blueArcServerObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1))
powerUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1))
server = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2))
environment = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1))
locale = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2))
failover = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3))
cache = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4))
sectorCache = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 1))
fileSysCache = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2))
clustering = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5))
serialNumbers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3))
racks = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1))
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2))
controllers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1))
physicalDrives = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2))
enclosures = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3))
automount = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3))
systemDrives = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4))
volumes = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5))
fcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6))
virtualVolumes = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7))
snapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8))
nvramStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2))
etherStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1))
tcpipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2))
udpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3))
advipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4))
engipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5))
nameService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6))
wins = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 1))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2))
nsOrder = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3))
nis = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7))
fileProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 1))
cifs = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2))
shares = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1))
shareAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2))
cifsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3))
cifsService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 4))
nfs = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3))
nfsExports = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1))
nfsUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2))
nfsUserMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3))
nfsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4))
nfsGroupMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5))
nfsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6))
nfsVersion2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1))
nfsVersion3 = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2))
nfsService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 7))
ftp = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4))
ftpMountPoints = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2))
ftpUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3))
ftpLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4))
ftpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5))
ftpService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 6))
ftpSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 7))
http = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5))
httpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1))
httpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2))
httpService = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 3))
iScsi = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6))
iScsiConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1))
iScsiStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2))
backup = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4))
ndmpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 1))
ndmpDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2))
ndmpSnapshotOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 3))
mgmnt = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5))
systemUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1))
license = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2))
access = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3))
web = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1))
sictrl = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2))
telnet = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3))
secureWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4))
lcd = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 5))
eventlog = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4))
alerts = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5))
mailAlertConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1))
winAlertConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2))
snmpAlertConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3))
snmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7))
cron = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8))
mgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9))
webMgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1))
sictrlMgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2))
telnetMgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3))
secureWebMgmntStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4))
hwFlowControl = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6))
utilization = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1))
systemDriveStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2))
fileSystemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3))
spanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4))
cacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5))
protocolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6))
clusterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7))
puConfigNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigNumber.setStatus('obsolete')
if mibBuilder.loadTexts: puConfigNumber.setDescription('The number of power units (regardless of their current state) which may be present on this system. This object is obsolete. Power units must be indexed by IP address.')
puConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: puConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: puConfigTable.setDescription('A table of configuration information relevant to each power unit which may be present on this system. The number of entries in this table is given by the value of puConfigNumber. This object is obsolete. Power units must be indexed by IP address.')
puConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puConfigIndex"))
if mibBuilder.loadTexts: puConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: puConfigEntry.setDescription('Configuration information for a power unit which may be present on this system. This object is obsolete. Power units must be indexed by IP address.')
puConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigIndex.setStatus('obsolete')
if mibBuilder.loadTexts: puConfigIndex.setDescription('A unique value for each power unit which may be present on this system. Its value ranges between 1 and the value of puConfigNumber. This object is obsolete. Power units must be indexed by IP address.')
puConfigShutdownEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigShutdownEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: puConfigShutdownEnabled.setDescription('Indicates whether the power unit is to control the shutdown of the system when a power outage is detected. enabled(1) - the power unit will control the shutdown. disabled(2) - the power unit will NOT control the shutdown. This object is obsolete. Power units must be indexed by IP address.')
puConfigShutdownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("remainingLife", 1), ("immediately", 2), ("oneMinute", 3), ("twoMinutes", 4), ("threeMinutes", 5), ("fiveMinutes", 6), ("tenMinutes", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigShutdownInterval.setStatus('obsolete')
if mibBuilder.loadTexts: puConfigShutdownInterval.setDescription('This variable is used in conjunction with puConfigShutdownRemainingLife such that when either condition is met a controlled shutdown will take place. puConfigShutdownInterval specifies the interval after which a controlled shutdown should take place in the event of a power outage. remainingLife(1) - indicates that the shutdown is based on the remaining battery life only and NOT the duration of the power outage. The variable puConfigShutdownRemainingLife determines how the shutdown is controlled. immediately(2) - the shutdown should take place as soon as the power outage is detected. The variable puConfigRemainingLife is irrelevant in this case. oneMinute(3), twoMinutes(4), threeMinutes(5), - the interval after which a controlled fiveMinutes(6), shutdown should take place in the event of tenMinutes(7) a power outage. NOTE: the variable puConfigShutdownEnabled must be enabled(1), for this variable to have any effect in determining when the controlled shutdown is performed. This object is obsolete. Power units must be indexed by IP address.')
puConfigShutdownRemainingLife = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10))).clone(namedValues=NamedValues(("fiveMinutes", 5), ("tenMinutes", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigShutdownRemainingLife.setStatus('obsolete')
if mibBuilder.loadTexts: puConfigShutdownRemainingLife.setDescription('Specifies the number of minutes of battery life which when depleted will cause a controlled shutdown of the system. NOTE: the variable puConfigShutdownEnabled must be enabled(1), for this variable to have any effect in determining when the controlled shutdown is performed. This object is obsolete. Power units must be indexed by IP address.')
puConfigCommsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("communicating", 1), ("notCommunicating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigCommsOK.setStatus('obsolete')
if mibBuilder.loadTexts: puConfigCommsOK.setDescription('Indicates whether the system is currently communicating with the power unit. This object is obsolete. Power units must be indexed by IP address.')
puConfigCommsEverOK = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("communicated", 1), ("neverCommunicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigCommsEverOK.setStatus('obsolete')
if mibBuilder.loadTexts: puConfigCommsEverOK.setDescription('Indicates whether the system has ever communicated with the power unit. This object is obsolete. Power units must be indexed by IP address.')
puConfigurationCount = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationCount.setStatus('current')
if mibBuilder.loadTexts: puConfigurationCount.setDescription('The number of power units (regardless of their current state) which may be present on this system.')
puConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8), )
if mibBuilder.loadTexts: puConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: puConfigurationTable.setDescription('A table of configuration information relevant to each power unit which may be present on this system. The number of entries in this table is given by the value of puConfigurationCount.')
puConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puConfigurationIndex"))
if mibBuilder.loadTexts: puConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: puConfigurationEntry.setDescription('Configuration information for a power unit which may be present on this system.')
puConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationIndex.setStatus('current')
if mibBuilder.loadTexts: puConfigurationIndex.setDescription('An IP address for each power unit which may be present on this system. 0.0.0.0 is given for a serial-attached UPS.')
puConfigurationUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationUserName.setStatus('current')
if mibBuilder.loadTexts: puConfigurationUserName.setDescription("The UPS management card's admin user name, used with the authentication phrase for authenticating status updates from the UPS. Empty if authentication is disabled.")
puConfigurationMonitoringEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationMonitoringEnabled.setStatus('current')
if mibBuilder.loadTexts: puConfigurationMonitoringEnabled.setDescription('Indicates whether monitoring is enabled on the UPS. If monitoring is enabled, then the power unit is to control the shutdown of the system when a power outage is detected.')
puConfigurationShutdownOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationShutdownOnBattery.setStatus('current')
if mibBuilder.loadTexts: puConfigurationShutdownOnBattery.setDescription('If the value is not -1, then the system will be shut down after running on battery for the specified time in minutes.')
puConfigurationShutdownOnRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationShutdownOnRuntime.setStatus('current')
if mibBuilder.loadTexts: puConfigurationShutdownOnRuntime.setDescription('If the value is not -1, then shutdown will occur when the estimated remaining runtime falls below the specified value in minutes.')
puConfigurationShutdownOnLowBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationShutdownOnLowBattery.setStatus('current')
if mibBuilder.loadTexts: puConfigurationShutdownOnLowBattery.setDescription('If the value is not -1, then the system will shut down when UPS reports a low battery, with a delay of the specified number of minutes.')
puConfigurationOnBatteryTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationOnBatteryTolerance.setStatus('current')
if mibBuilder.loadTexts: puConfigurationOnBatteryTolerance.setDescription('The length of time, in seconds, for which the UPS must be on battery before the system will act on it, no matter what the shutdown settings are.')
puConfigurationCommsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("communicating", 1), ("notCommunicating", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationCommsOK.setStatus('current')
if mibBuilder.loadTexts: puConfigurationCommsOK.setDescription('Indicates whether the system is currently communicating with the power unit.')
puConfigurationCommsEverOK = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("communicated", 1), ("neverCommunicated", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puConfigurationCommsEverOK.setStatus('current')
if mibBuilder.loadTexts: puConfigurationCommsEverOK.setDescription('Indicates whether the system has ever communicated with the power unit.')
puStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusNumber.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusNumber.setDescription('The number of power units from which status information can be gathered. Status information is only available for power units that the system is able to communicate with. This object is obsolete. Power units must be indexed by IP address.')
puStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4), )
if mibBuilder.loadTexts: puStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusTable.setDescription('A table containing the status of each power unit the system is communicating with. The number of entries in this table is given by the value of puStatusNumber. This object is obsolete. Power units must be indexed by IP address.')
puStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puStatusIndex"))
if mibBuilder.loadTexts: puStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusEntry.setDescription('Status information for each power unit the system is communicating with. This object is obsolete. Power units must be indexed by IP address.')
puStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusIndex.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusIndex.setDescription('The power unit from which the status information has been gathered. The power unit identified by a particular value of this index is the same power unit as identified by the same value of puConfigIndex. This object is obsolete. Power units must be indexed by IP address.')
puStatusModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusModel.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusModel.setDescription('The model of the power unit as declared by the manufacturer. This object is obsolete. Power units must be indexed by IP address.')
puStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusSerialNumber.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusSerialNumber.setDescription('The serial number of the power unit as declared by the manufacturer. This object is obsolete. Power units must be indexed by IP address.')
puStatusManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusManufactureDate.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusManufactureDate.setDescription('The date of manufacture of the power unit as declared by the manufacturer in their chosen format. This object is obsolete. Power units must be indexed by IP address.')
puStatusBatteryReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusBatteryReplaceDate.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusBatteryReplaceDate.setDescription('The last date a battery was replaced within this the power unit in manufacturers format. This object is obsolete. Power units must be indexed by IP address.')
puStatusUpperTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusUpperTransferVoltage.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusUpperTransferVoltage.setDescription('The upper battery transfer voltage in Volts. This object is obsolete. Power units must be indexed by IP address.')
puStatusLowerTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusLowerTransferVoltage.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusLowerTransferVoltage.setDescription('The lower battery transfer voltage in Volts. This object is obsolete. Power units must be indexed by IP address.')
puStatusSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3), ("automatic", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusSensitivity.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusSensitivity.setDescription('The sensitivity of the power unit. This object is obsolete. Power units must be indexed by IP address.')
puStatusLowBatteryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusLowBatteryInterval.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusLowBatteryInterval.setDescription('The length of time between the power unit warning of a low battery and turning off in minutes. This object is obsolete. Power units must be indexed by IP address.')
puStatusAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("immediately", 1), ("delayedUtilityFailure", 2), ("lowBatteryOnly", 3), ("never", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusAlarmSetting.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusAlarmSetting.setDescription('The audible alarm setting for the power unit. This object is obsolete. Power units must be indexed by IP address.')
puStatusCalibrating = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calibrating", 1), ("notCalibrating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusCalibrating.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusCalibrating.setDescription('Indicates whether the power unit is calibrating or not. This object is obsolete. Power units must be indexed by IP address.')
puStatusSleeping = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sleeping", 1), ("notSleeping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusSleeping.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusSleeping.setDescription('Indicates whether the power unit is sleeping or not. This object is obsolete. Power units must be indexed by IP address.')
puStatusOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusOnline.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusOnline.setDescription('Indicates whether the power unit is on or off line. This object is obsolete. Power units must be indexed by IP address.')
puStatusOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onBattery", 1), ("onMains", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusOnBattery.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusOnBattery.setDescription('Indicates whether the power unit is operating on the battery or mains. This object is obsolete. Power units must be indexed by IP address.')
puStatusBatteryAlmostUsedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("batteryAlmostUsedUp", 1), ("batteryOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusBatteryAlmostUsedUp.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusBatteryAlmostUsedUp.setDescription('Indicates whether the power units battery is almost used up. This object is obsolete. Power units must be indexed by IP address.')
puStatusChangeBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changeBattery", 1), ("batteryOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatusChangeBattery.setStatus('obsolete')
if mibBuilder.loadTexts: puStatusChangeBattery.setDescription('Indicates whether the power units battery should be changed. This object is obsolete. Power units must be indexed by IP address.')
puCurrentStatusCount = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusCount.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusCount.setDescription('The number of power units from which status information can be gathered. Status information is only available for power units that the system is able to communicate with.')
puCurrentStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10), )
if mibBuilder.loadTexts: puCurrentStatusTable.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusTable.setDescription('A table containing the status of each power unit the system is communicating with. The number of entries in this table is given by the value of puCurrentStatusCount.')
puCurrentStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puCurrentStatusIndex"))
if mibBuilder.loadTexts: puCurrentStatusEntry.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusEntry.setDescription('Status information for each power unit the system is communicating with.')
puCurrentStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusIndex.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusIndex.setDescription('The power unit from which the status information has been gathered. The power unit identified by a particular IP address is the same power unit as identified by the same value of puConfigurationIndex.')
puCurrentStatusModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusModel.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusModel.setDescription('The model of the power unit as declared by the manufacturer.')
puCurrentStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSerialNumber.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusSerialNumber.setDescription('The serial number of the power unit as declared by the manufacturer.')
puCurrentStatusManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusManufactureDate.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusManufactureDate.setDescription('The date of manufacture of the power unit as declared by the manufacturer in their chosen format.')
puCurrentStatusBatteryReplacedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusBatteryReplacedDate.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusBatteryReplacedDate.setDescription('The last date a battery was replaced within this the power unit in manufacturers format.')
puCurrentStatusUpperTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusUpperTransferVoltage.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusUpperTransferVoltage.setDescription('The upper battery transfer voltage in Volts.')
puCurrentStatusLowerTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusLowerTransferVoltage.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusLowerTransferVoltage.setDescription('The lower battery transfer voltage in Volts.')
puCurrentStatusSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3), ("automatic", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSensitivity.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusSensitivity.setDescription('The sensitivity of the power unit.')
puCurrentStatusLowBatteryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusLowBatteryInterval.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusLowBatteryInterval.setDescription('The length of time between the power unit warning of a low battery and turning off in minutes.')
puCurrentStatusAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("immediately", 1), ("delayedUtilityFailure", 2), ("lowBatteryOnly", 3), ("never", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusAlarmSetting.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusAlarmSetting.setDescription('The audible alarm setting for the power unit.')
puCurrentStatusCalibrating = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("calibrating", 1), ("notCalibrating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusCalibrating.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusCalibrating.setDescription('Indicates whether the power unit is calibrating or not.')
puCurrentStatusSleeping = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("sleeping", 1), ("notSleeping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSleeping.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusSleeping.setDescription('Indicates whether the power unit is sleeping or not. This object is only applicable to a Symmetra UPS; in all other cases, it will be notDefined(1).')
puCurrentStatusSmartTrim = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSmartTrim.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusSmartTrim.setDescription('Indicates whether SmartTrim is enabled or not. This object is not applicable to a Symmetra UPS; in this case, it will be notDefined(1).')
puCurrentStatusSmartBoost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusSmartBoost.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusSmartBoost.setDescription('Indicates whether SmartBoost is enabled or not.')
puCurrentStatusOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusOnline.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusOnline.setDescription('Indicates whether the power unit is on or off line.')
puCurrentStatusOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("onBattery", 1), ("onMains", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusOnBattery.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusOnBattery.setDescription('Indicates whether the power unit is operating on the battery or mains.')
puCurrentStatusOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusOverload.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusOverload.setDescription('Indicates whether the UPS is overloaded.')
puCurrentStatusBatteryAlmostUsedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("batteryAlmostUsedUp", 1), ("batteryOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusBatteryAlmostUsedUp.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusBatteryAlmostUsedUp.setDescription('Indicates whether the power units battery is almost used up.')
puCurrentStatusChangeBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notDefined", 0), ("changeBattery", 1), ("batteryOK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puCurrentStatusChangeBattery.setStatus('current')
if mibBuilder.loadTexts: puCurrentStatusChangeBattery.setDescription('Indicates whether the power units battery should be changed.')
puStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsNumber.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsNumber.setDescription('The number of power units from which statistics can be gathered. Statistics are only available for power units that the system is able to communicate with. This object is obsolete. Power units must be indexed by IP address.')
puStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6), )
if mibBuilder.loadTexts: puStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsTable.setDescription('A table containing statistics for each power unit the system is communicating with. The number of entries in this table is given by the value of puStatsNumber. This object is obsolete. Power units must be indexed by IP address.')
puStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puStatsIndex"))
if mibBuilder.loadTexts: puStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsEntry.setDescription('Statistics for each power unit the system is communicating with. This object is obsolete. Power units must be indexed by IP address.')
puStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsIndex.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsIndex.setDescription('The power unit from which the statistics have been gathered. The power unit identified by a particular value of this index is the same power unit as identified by the same value of puConfigurationIndex. This object is obsolete. Power units must be indexed by IP address.')
puStatsBatteryCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsBatteryCharge.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsBatteryCharge.setDescription('The percentage by which the battery is charged. This object is obsolete. Power units must be indexed by IP address.')
puStatsLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsLoad.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsLoad.setDescription('The percentage of the rated load in Watts. This object is obsolete. Power units must be indexed by IP address.')
puStatsFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsFrequency.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsFrequency.setDescription('The frequency of the AC mains in Hertz. This object is obsolete. Power units must be indexed by IP address.')
puStatsLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsLineVoltage.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsLineVoltage.setDescription('The AC mains voltage entering the power unit in Volts. This object is obsolete. Power units must be indexed by IP address.')
puStatsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsOutputVoltage.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsOutputVoltage.setDescription('The output voltage of the power unit in Volts. This object is obsolete. Power units must be indexed by IP address.')
puStatsBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsBatteryVoltage.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsBatteryVoltage.setDescription('The battery voltage in Volts. This object is obsolete. Power units must be indexed by IP address.')
puStatsTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsTemperatureC.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsTemperatureC.setDescription('The temperature inside the power unit in degrees Celsius. This object is obsolete. Power units must be indexed by IP address.')
puStatsTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsTemperatureF.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsTemperatureF.setDescription('The temperature inside the power unit in degrees Fahrenheit. This object is obsolete. Power units must be indexed by IP address.')
puStatsLineMininumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsLineMininumVoltage.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsLineMininumVoltage.setDescription('The minimum line voltage in Volts. This object is obsolete. Power units must be indexed by IP address.')
puStatsLineMaximumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsLineMaximumVoltage.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsLineMaximumVoltage.setDescription('The maximum line voltage in Volts. This object is obsolete. Power units must be indexed by IP address.')
puStatsRemainingRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatsRemainingRunTime.setStatus('obsolete')
if mibBuilder.loadTexts: puStatsRemainingRunTime.setDescription('The remaining runtime of the battery based on the obsolete load in minutes. This object is obsolete. Power units must be indexed by IP address.')
puStatisticsCount = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsCount.setStatus('current')
if mibBuilder.loadTexts: puStatisticsCount.setDescription('The number of power units from which statistics can be gathered. Statistics are only available for power units that the system is able to communicate with.')
puStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12), )
if mibBuilder.loadTexts: puStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: puStatisticsTable.setDescription('A table containing statistics for each power unit the system is communicating with. The number of entries in this table is given by the value of puStatisticsCount.')
puStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "puStatisticsIndex"))
if mibBuilder.loadTexts: puStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: puStatisticsEntry.setDescription('Statistics for each power unit the system is communicating with.')
puStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsIndex.setStatus('current')
if mibBuilder.loadTexts: puStatisticsIndex.setDescription('The power unit from which the statistics have been gathered. The power unit identified by a particular value of this index is the same power unit as identified by the same value of puConfigurationIndex.')
puStatisticsBatteryCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsBatteryCharge.setStatus('current')
if mibBuilder.loadTexts: puStatisticsBatteryCharge.setDescription('The percentage by which the battery is charged.')
puStatisticsLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsLoad.setStatus('current')
if mibBuilder.loadTexts: puStatisticsLoad.setDescription('The percentage of the rated load in Watts.')
puStatisticsFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsFrequency.setStatus('current')
if mibBuilder.loadTexts: puStatisticsFrequency.setDescription('The frequency of the AC mains in Hertz.')
puStatisticsLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsLineVoltage.setStatus('current')
if mibBuilder.loadTexts: puStatisticsLineVoltage.setDescription('The AC mains voltage entering the power unit in Volts.')
puStatisticsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: puStatisticsOutputVoltage.setDescription('The output voltage of the power unit in Volts.')
puStatisticsBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsBatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: puStatisticsBatteryVoltage.setDescription('The battery voltage in Volts.')
puStatisticsTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsTemperatureC.setStatus('current')
if mibBuilder.loadTexts: puStatisticsTemperatureC.setDescription('The temperature inside the power unit in degrees Celsius.')
puStatisticsTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsTemperatureF.setStatus('current')
if mibBuilder.loadTexts: puStatisticsTemperatureF.setDescription('The temperature inside the power unit in degrees Fahrenheit.')
puStatisticsLineMininumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsLineMininumVoltage.setStatus('current')
if mibBuilder.loadTexts: puStatisticsLineMininumVoltage.setDescription('The minimum line voltage in Volts.')
puStatisticsLineMaximumVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsLineMaximumVoltage.setStatus('current')
if mibBuilder.loadTexts: puStatisticsLineMaximumVoltage.setDescription('The maximum line voltage in Volts.')
puStatisticsRemainingRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 1, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: puStatisticsRemainingRunTime.setStatus('current')
if mibBuilder.loadTexts: puStatisticsRemainingRunTime.setDescription('The remaining runtime of the battery based on the obsolete load in minutes.')
sensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorNumber.setStatus('obsolete')
if mibBuilder.loadTexts: sensorNumber.setDescription('The number of sensors (regardless of their current state) which are present within silicon server unit.')
sensorTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: sensorTable.setStatus('obsolete')
if mibBuilder.loadTexts: sensorTable.setDescription('A table containing information gathered by sensors located within the silicon server unit. Each sensor takes a measurement of both fan speed and temperature. The number of entries in this table is given by the value of sensorNumber.')
sensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorEntry.setStatus('obsolete')
if mibBuilder.loadTexts: sensorEntry.setDescription('Information collected from each sensor located within the silicon server unit.')
sensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorIndex.setStatus('obsolete')
if mibBuilder.loadTexts: sensorIndex.setDescription('A unique value for each sensor within the silicon server unit. Its value ranges between 1 and the value of sensorNumber.')
sensorSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("severe", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSpeedStatus.setStatus('obsolete')
if mibBuilder.loadTexts: sensorSpeedStatus.setDescription('Indicates whether the speed measurement is within the expected range. ok(1) - the reading is within the expected range. warning(2) - the reading is outside of the expected range, but not severe. severe(3) - the sensor unit should be replaced. failed(4) - the sensor unit has failed. The measured speed is invalid. unknown(5) - the speed status could not be determined.')
sensorSpeedReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSpeedReading.setStatus('obsolete')
if mibBuilder.loadTexts: sensorSpeedReading.setDescription('A measurement of the fan speed taken by the sensor in rpm.')
sensorTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("severe", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempStatus.setStatus('obsolete')
if mibBuilder.loadTexts: sensorTempStatus.setDescription('Indicates whether the temperature measurement is within the expected range. ok(1) - the reading is within the expected range. warning(2) - the reading is outside of the expected range, but not severe. severe(3) - the sensor unit should be replaced. failed(4) - the sensor unit has failed. The measured temperature is invalid.')
sensorTempCReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempCReading.setStatus('obsolete')
if mibBuilder.loadTexts: sensorTempCReading.setDescription('A measurement of the temperature taken by the sensor in degrees Celsius.')
sensorTempFReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorTempFReading.setStatus('obsolete')
if mibBuilder.loadTexts: sensorTempFReading.setDescription('A measurement of the temperature taken by the sensor in degrees Fahrenheit.')
psuOneStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuOneStatus.setStatus('obsolete')
if mibBuilder.loadTexts: psuOneStatus.setDescription('The status of power supply unit 1 within the silicon server.')
psuTwoStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuTwoStatus.setStatus('obsolete')
if mibBuilder.loadTexts: psuTwoStatus.setDescription('The status of power supply unit 2 within the silicon server.')
opsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsPerSecond.setStatus('current')
if mibBuilder.loadTexts: opsPerSecond.setDescription('The number of operations per second. This value includes all hardware-accelerated access to file systems on a cluster-wide basis. It may not correspond with the values obtained from opsPerSecAverage in the fsStatsTable.')
fileSystemLoadClient = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemLoadClient.setStatus('current')
if mibBuilder.loadTexts: fileSystemLoadClient.setDescription('The percentage of maximum load on file system resources due to client usage, averaged over the last 10 seconds. This represents the load on FSA.')
fileSystemLoadSystem = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemLoadSystem.setStatus('current')
if mibBuilder.loadTexts: fileSystemLoadSystem.setDescription('The percentage of maximum load on file system resources due to system usage, averaged over the last 10 seconds. This represents the load on FSB.')
temperatureSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorNumber.setStatus('current')
if mibBuilder.loadTexts: temperatureSensorNumber.setDescription('The number of temperature sensors (regardless of their current state) present in all silicon server units in the cluster.')
temperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9), )
if mibBuilder.loadTexts: temperatureSensorTable.setStatus('current')
if mibBuilder.loadTexts: temperatureSensorTable.setDescription('A table containing information gathered by temperature sensors located in all silicon server units in the cluster. The number of entries in this table is given by the value of temperatureSensorNumber.')
temperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "temperatureSensorClusterNode"), (0, "BLUEARC-SERVER-MIB", "temperatureSensorIndex"))
if mibBuilder.loadTexts: temperatureSensorEntry.setStatus('current')
if mibBuilder.loadTexts: temperatureSensorEntry.setDescription('Information collected from each temperature sensor located in the silicon server unit.')
temperatureSensorClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorClusterNode.setStatus('current')
if mibBuilder.loadTexts: temperatureSensorClusterNode.setDescription('The ID of the Cluster Node in which the fan is located.')
temperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorIndex.setStatus('current')
if mibBuilder.loadTexts: temperatureSensorIndex.setDescription('A unique value for each temperature sensor on a cluster node.')
temperatureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("tempWarning", 2), ("tempSevere", 3), ("tempSensorFailed", 4), ("tempSensorWarning", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorStatus.setStatus('current')
if mibBuilder.loadTexts: temperatureSensorStatus.setDescription('Indicates whether the temperature measurement is within the expected range. ok(1) - the reading is within the expected range. tempWarning(2) - the reading is outside of the expected range, but not severe. tempSevere(3) - The reading is severely outside the expected range. tempSensoreFailed(4) - the sensor unit has failed. The measured temperature is invalid tempSensorWarning(5) - the sensor unit is in a warning condition. unknown(6) - the status of the sensor could not be determined.')
temperatureSensorCReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorCReading.setStatus('current')
if mibBuilder.loadTexts: temperatureSensorCReading.setDescription('A measurement of the temperature taken by the sensor in degrees Celsius.')
temperatureSensorFReading = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSensorFReading.setStatus('current')
if mibBuilder.loadTexts: temperatureSensorFReading.setDescription('A measurement of the temperature taken by the sensor in degrees Fahrenheit.')
fanNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('current')
if mibBuilder.loadTexts: fanNumber.setDescription('The number of fans (regardless of their current state) present in all silicon server units in the cluster.')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
if mibBuilder.loadTexts: fanTable.setDescription('A table containing information about the fans located in all silicon server units in the cluster.')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fanClusterNode"), (0, "BLUEARC-SERVER-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
if mibBuilder.loadTexts: fanEntry.setDescription('Information about each fan located in all silicon server units in the cluster.')
fanClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanClusterNode.setStatus('current')
if mibBuilder.loadTexts: fanClusterNode.setDescription('The ID of the Cluster Node in which the fan is located.')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanIndex.setStatus('current')
if mibBuilder.loadTexts: fanIndex.setDescription('A unique value for each fan on a cluster node.')
fanFittedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("okIdWrong", 2), ("notFitted", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFittedStatus.setStatus('current')
if mibBuilder.loadTexts: fanFittedStatus.setDescription("Indicates the 'fitted' status of the fan. ok(1) - the fan is fitted correctly. okIdWrong(2) - the fan is fitted correctly, but the ID is wrong. notFitted(3) - the fan is not fitted. unknown(4) - the status could not be determined.")
fanSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("severe", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedStatus.setStatus('current')
if mibBuilder.loadTexts: fanSpeedStatus.setDescription("Indicates the 'speed' status of the fan. ok(1) - the fan speed is ok. warning(2) - the fan speed is at a warning level. severe(3) - the fan speed is at a severe level. unknown(4) - the fan speed status could not be determined.")
fanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeed.setStatus('current')
if mibBuilder.loadTexts: fanSpeed.setDescription('The speed of the fan.')
psuNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuNumber.setStatus('current')
if mibBuilder.loadTexts: psuNumber.setDescription('The number of psus (regardless of their current state) present in all silicon server units in the cluster.')
psuTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13), )
if mibBuilder.loadTexts: psuTable.setStatus('current')
if mibBuilder.loadTexts: psuTable.setDescription('A table containing information about the psus located in the silicon server unit.')
psuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "psuClusterNode"), (0, "BLUEARC-SERVER-MIB", "psuIndex"))
if mibBuilder.loadTexts: psuEntry.setStatus('current')
if mibBuilder.loadTexts: psuEntry.setDescription('Information about each psu.')
psuClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuClusterNode.setStatus('current')
if mibBuilder.loadTexts: psuClusterNode.setDescription('The ID of the Cluster Node in which the psu is located.')
psuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuIndex.setStatus('current')
if mibBuilder.loadTexts: psuIndex.setDescription('A unique value for each psu on a cluster node.')
psuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("notFitted", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuStatus.setStatus('current')
if mibBuilder.loadTexts: psuStatus.setDescription('Indicates the status of the psu. ok(1) - the psu is ok. failed(2) - the psu has failed. notFitted(3) - the psu is not fitted. unknown(4) - the status could not be determined.')
serverDate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverDate.setStatus('current')
if mibBuilder.loadTexts: serverDate.setDescription('The local date reported by the server in the form YYYY-MM-DD Where YYYY is the year. MM is the number of the month (01-12). DD is the day of the month.')
serverTime = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverTime.setStatus('current')
if mibBuilder.loadTexts: serverTime.setDescription('The local time reported by the server in the form HH:MM:SS (UTC+/-hh:mm) Where HH is the hour (using 24 hour clock). MM is the minute. SS is the second. The remainder of the date indicates the number of hours (hh) and minutes (mm) east of UTC the local time has been adjusted by. NOTE: a negative value for the UTC offset indicates a time zone which is west of UTC.')
utcOffset = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utcOffset.setStatus('current')
if mibBuilder.loadTexts: utcOffset.setDescription('The local time zone offset setting for the server expressed as a number of minutes. NOTE: a negative value indicates a time zone west of UTC.')
daylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("daylightSavings", 1), ("noDaylightSavings", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: daylightSavings.setStatus('current')
if mibBuilder.loadTexts: daylightSavings.setDescription('Indicates whether daylight savings are in effect.')
ntpServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerNumber.setStatus('current')
if mibBuilder.loadTexts: ntpServerNumber.setDescription('The number of NTP servers which have been configured to assist in synchronization of this silicon servers time.')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 6), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
if mibBuilder.loadTexts: ntpServerTable.setDescription('A table containing information about each NTP server. The number of entries in this table is given by the value of ntpServerNumber.')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "ntpServerHost"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: ntpServerEntry.setDescription('Information about each configured NTP server.')
ntpServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 2, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerHost.setStatus('current')
if mibBuilder.loadTexts: ntpServerHost.setDescription('The hostname or IP address of the NTP server.')
failoverConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("notConfigured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverConfigStatus.setStatus('obsolete')
if mibBuilder.loadTexts: failoverConfigStatus.setDescription('Indicates whether failover is configured for the silicon server. This object is obsolete. Failover has been replaced by clustering.')
failoverPrimaryName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverPrimaryName.setStatus('obsolete')
if mibBuilder.loadTexts: failoverPrimaryName.setDescription('The primary management name or a zero length string if failover is not configured for this system. This object is obsolete. Failover has been replaced by clustering.')
failoverSystemName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSystemName.setStatus('obsolete')
if mibBuilder.loadTexts: failoverSystemName.setDescription('The system management name or a zero length string if failover is not configured for this system. This object is obsolete. Failover has been replaced by clustering.')
failoverSecondaryName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSecondaryName.setStatus('obsolete')
if mibBuilder.loadTexts: failoverSecondaryName.setDescription('The secondary management name or a zero length string if failover is not configured for this system. This object is obsolete. Failover has been replaced by clustering.')
failoverPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverPrimaryIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: failoverPrimaryIpAddr.setDescription('The primary IP address or 0.0.0.0 if failover is not configured for this system. This object is obsolete. Failover has been replaced by clustering.')
failoverSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSystemIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: failoverSystemIpAddr.setDescription('The system IP address or 0.0.0.0 if failover is not configured for this system. This object is obsolete. Failover has been replaced by clustering.')
failoverSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSecondaryIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: failoverSecondaryIpAddr.setDescription('The secondary IP address or 0.0.0.0 if failover is not configured for this system. This object is obsolete. Failover has been replaced by clustering.')
failoverPrimaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("master", 2), ("standby", 3), ("notDetected", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverPrimaryStatus.setStatus('obsolete')
if mibBuilder.loadTexts: failoverPrimaryStatus.setDescription('The status of the primary. This object is obsolete. Failover has been replaced by clustering.')
failoverSecondaryStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("master", 2), ("standby", 3), ("notDetected", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failoverSecondaryStatus.setStatus('obsolete')
if mibBuilder.loadTexts: failoverSecondaryStatus.setDescription('The status of the secondary. This object is obsolete. Failover has been replaced by clustering.')
sectorCacheMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ramdisk", 1), ("writeThrough", 2), ("writeBack", 3), ("disabled", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheMode.setStatus('current')
if mibBuilder.loadTexts: sectorCacheMode.setDescription('The mode the disk sector cache is currently operating in.')
sectorCacheDirtyPageWtmk = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheDirtyPageWtmk.setStatus('obsolete')
if mibBuilder.loadTexts: sectorCacheDirtyPageWtmk.setDescription('The current setting of the percentage dirty page watermark which is used in determining when to flush the disk sector cache. This object is now obsolete.')
sectorCacheDirtyPageTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 655))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheDirtyPageTimeout.setStatus('current')
if mibBuilder.loadTexts: sectorCacheDirtyPageTimeout.setDescription('The current setting of the percentage dirty page timeout (specified in seconds) which is used in determining when to flush the disk sector cache.')
fileSysCacheMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("writeThrough", 1), ("writeBack", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSysCacheMode.setStatus('obsolete')
if mibBuilder.loadTexts: fileSysCacheMode.setDescription('The mode the file system cache is currently operating in. This object is obsolete.')
fileSysTransactionLogging = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSysTransactionLogging.setStatus('obsolete')
if mibBuilder.loadTexts: fileSysTransactionLogging.setDescription('Indicates whether file system transaction logging is enabled or not. This object is obsolete.')
fileSysCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 655))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSysCacheTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: fileSysCacheTimeout.setDescription('The file system cache timeout in seconds. This object is obsolete.')
fileSysUpdateLastAccess = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSysUpdateLastAccess.setStatus('current')
if mibBuilder.loadTexts: fileSysUpdateLastAccess.setDescription('Indicates whether the file system should update the last access time(s) on files or not.')
clusterName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterName.setStatus('current')
if mibBuilder.loadTexts: clusterName.setDescription('The cluster management name.')
clusterUuid = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterUuid.setStatus('current')
if mibBuilder.loadTexts: clusterUuid.setDescription('A unique identification number for the cluster.')
clusterConfig = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("singleNode", 1), ("activeStandby", 2), ("activeActive", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterConfig.setStatus('current')
if mibBuilder.loadTexts: clusterConfig.setDescription('The configuration of the cluster: 1 - single standalone node 2 - active / standby pair 3 - active / active cluster 4 - the configuration could not be determined.')
clusterQuorumDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterQuorumDeviceName.setStatus('current')
if mibBuilder.loadTexts: clusterQuorumDeviceName.setDescription('The quorum device management name.')
clusterQuorumDeviceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterQuorumDeviceIpAddr.setStatus('current')
if mibBuilder.loadTexts: clusterQuorumDeviceIpAddr.setDescription('The quorum device IP address, or 0.0.0.0 if no quorum device is present.')
clusterQuorumDeviceOwnedByPNode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterQuorumDeviceOwnedByPNode.setStatus('current')
if mibBuilder.loadTexts: clusterQuorumDeviceOwnedByPNode.setDescription('The identification number of the physical node which owns this quorum device. A value of -1 indicates that this cannot be determined.')
clusterQuorumDeviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("unconfigured", 1), ("offLine", 2), ("owned", 3), ("configured", 4), ("granted", 5), ("clusterNodeNotUp", 6), ("misconfigured", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterQuorumDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: clusterQuorumDeviceStatus.setDescription('The status of the quorum device: 0 - unknown 1 - unconfigured 2 - off line 3 - owned 4 - configured 5 - granted 6 - cluster node being queried is not up 7 - quorum device does not have the correct UUID for the cluster')
clusterPNodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeNumber.setStatus('current')
if mibBuilder.loadTexts: clusterPNodeNumber.setDescription('The number of physical nodes in the cluster. A value of -1 indicates that this cannot be determined.')
clusterPNodeTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9), )
if mibBuilder.loadTexts: clusterPNodeTable.setStatus('current')
if mibBuilder.loadTexts: clusterPNodeTable.setDescription('Information about each physical node in the cluster. The number of entries in this table is given by clusterPNodeNumber.')
clusterPNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "clusterPNodeId"))
if mibBuilder.loadTexts: clusterPNodeEntry.setStatus('current')
if mibBuilder.loadTexts: clusterPNodeEntry.setDescription('Information about each physical node.')
clusterPNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeId.setStatus('current')
if mibBuilder.loadTexts: clusterPNodeId.setDescription('The identification number of the physical node. A value of -1 indicates that this cannot be determined.')
clusterPNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeName.setStatus('current')
if mibBuilder.loadTexts: clusterPNodeName.setDescription('The management name of the physical node.')
clusterPNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeIpAddr.setStatus('current')
if mibBuilder.loadTexts: clusterPNodeIpAddr.setDescription('The IP address of the physical node. A value of 0.0.0.0 indicates that this cannot be determined.')
clusterPNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("notUp", 3), ("onLine", 4), ("dead", 5), ("dormant", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterPNodeStatus.setStatus('current')
if mibBuilder.loadTexts: clusterPNodeStatus.setDescription('The status of the physical node: 1 - unknown 2 - up 3 - not up 4 - on line 5 - dead 6 - dormant')
clusterVNodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeNumber.setStatus('current')
if mibBuilder.loadTexts: clusterVNodeNumber.setDescription('The number of virtual nodes in the cluster. A value of -1 indicates that this cannot be determined.')
clusterVNodeTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11), )
if mibBuilder.loadTexts: clusterVNodeTable.setStatus('current')
if mibBuilder.loadTexts: clusterVNodeTable.setDescription('Information about each virtual node in the cluster. The number of entries in this table is given by clusterVNodeNumber')
clusterVNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "clusterVNodeId"))
if mibBuilder.loadTexts: clusterVNodeEntry.setStatus('current')
if mibBuilder.loadTexts: clusterVNodeEntry.setDescription('Information about each virtual node in the cluster.')
clusterVNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeId.setStatus('current')
if mibBuilder.loadTexts: clusterVNodeId.setDescription('The identification number of the virtual node. A value of -1 indicates that this cannot be determined.')
clusterVNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeName.setStatus('current')
if mibBuilder.loadTexts: clusterVNodeName.setDescription('The management name of the virtual node.')
clusterVNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeIpAddr.setStatus('current')
if mibBuilder.loadTexts: clusterVNodeIpAddr.setDescription('The IP address of the virtual node. A value of 0.0.0.0 indicates that this cannot be determined.')
clusterVNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("offLine", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeStatus.setStatus('current')
if mibBuilder.loadTexts: clusterVNodeStatus.setDescription('The status of the virtual node: 1 - unknown 2 - on line 3 - off line')
clusterVNodeAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeAdmin.setStatus('current')
if mibBuilder.loadTexts: clusterVNodeAdmin.setDescription('Whether the virtual node is the administrative virtual node: 0 - a service node (i.e. not the administrative virtual node) 1 - the administrative virtual node 2 - cannot be determined')
clusterVNodeHostedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 5, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVNodeHostedBy.setStatus('current')
if mibBuilder.loadTexts: clusterVNodeHostedBy.setDescription('The identification number of the physical node hosting this virtual node. A value of -1 indicates that this cannot be determined.')
serialNumberTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: serialNumberTable.setStatus('current')
if mibBuilder.loadTexts: serialNumberTable.setDescription('Serial numbers for server components.')
serialNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "componentType"), (0, "BLUEARC-SERVER-MIB", "subComponentType"), (0, "BLUEARC-SERVER-MIB", "clusterNode"))
if mibBuilder.loadTexts: serialNumberEntry.setStatus('current')
if mibBuilder.loadTexts: serialNumberEntry.setDescription('Serial number for a component.')
componentType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chassis", 1), ("blade", 2), ("psu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentType.setStatus('current')
if mibBuilder.loadTexts: componentType.setDescription('The type of component: 1 - a chassis 2 - a blade, such as NIM2 3 - a power supply unit')
subComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 0), ("nim1", 1), ("nim2", 2), ("nim3", 3), ("fsa17455", 4), ("fsa1", 5), ("fsa2", 6), ("fsx1", 7), ("fsb1", 8), ("fsb2", 9), ("sim1", 10), ("sim2", 11), ("chassis", 12), ("psu1", 13), ("psu2", 14), ("fsb3", 15), ("sim3", 16), ("mcp1", 17), ("mmb1", 18), ("mfb1", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subComponentType.setStatus('current')
if mibBuilder.loadTexts: subComponentType.setDescription('The sub-type of component.')
clusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNode.setStatus('current')
if mibBuilder.loadTexts: clusterNode.setDescription('The identification number of the cluster node hosting this component. A value of -1 indicates that this cannot be determined.')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 2, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('The serial number of the component.')
rackNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackNumber.setStatus('obsolete')
if mibBuilder.loadTexts: rackNumber.setDescription('The number of racks (regardless of their current state) which are present in this system. This object is now obsolete.')
rackTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2), )
if mibBuilder.loadTexts: rackTable.setStatus('obsolete')
if mibBuilder.loadTexts: rackTable.setDescription('A table containing information about each rack in this system. The number of entries in this table is given by the value of rackNumber. This table is now obsolete.')
rackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "rackIndex"))
if mibBuilder.loadTexts: rackEntry.setStatus('obsolete')
if mibBuilder.loadTexts: rackEntry.setDescription('Status information about each rack in the system. This table is now obsolete.')
rackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: rackIndex.setDescription('A unique value for each rack present in this system. Its value ranges between 1 and the value of rackNumber. This object is now obsolete.')
rackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("storageFailed", 2), ("loopFailed", 3), ("otherFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackStatus.setStatus('obsolete')
if mibBuilder.loadTexts: rackStatus.setDescription('Indicates the status of the rack. ok(1) - the RAID monitoring software is communicating with the rack. storageFailed(2) - the RAID controller associated with this rack has failed. loopFailed(3) - the fibre channel loop has failed. otherFailure(4) - the system is unable to communicate with the rack, it may be booting. This object is now obsolete.')
rackNumberOfEnclosures = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackNumberOfEnclosures.setStatus('obsolete')
if mibBuilder.loadTexts: rackNumberOfEnclosures.setDescription('The number of storage enclosures which are normally accessible by this rack. NOTE: If rackStatus is not ok, the value of this variable will be 0. This object is now obsolete.')
rackNumberOfPhysicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackNumberOfPhysicalDrives.setStatus('obsolete')
if mibBuilder.loadTexts: rackNumberOfPhysicalDrives.setDescription('The number of physical drives which are normally accessible by this rack. NOTE: If rackStatus is not ok, the value of this variable will be 0. This object is now obsolete.')
raidControllerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1), )
if mibBuilder.loadTexts: raidControllerTable.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerTable.setDescription('A table containing general information about RAID controller(s) present in each rack within the system. A rack may contain dual controllers for redundancy purposes. This (if present) will be indicated by the secondaryStatus field. The number of entries in the table is given by the value of rackNumber provided that the system can communicate with the rack. This table is now obsolete.')
raidControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "raidControllerRackIndex"))
if mibBuilder.loadTexts: raidControllerEntry.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerEntry.setDescription('General information about the RAID controller(s) in a rack. This table is now obsolete.')
raidControllerRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerRackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerRackIndex.setDescription('The rack in which the RAID controller(s) are located. The controller(s) identified by a particular value of this index is located within the rack identified by the same value of rackIndex. This object is now obsolete.')
raidControllerWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerWWN.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerWWN.setDescription('The world wide name identifying the RAID controller(s). NOTE: If the world wide name cannot be obtained this value will be a zero length string. This object is now obsolete.')
raidControllerPrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("online", 1), ("failed", 2), ("notPresent", 3), ("unknown", 4), ("inserted", 5), ("offline", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerPrimaryStatus.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerPrimaryStatus.setDescription('The status of primary RAID controller. This object is now obsolete.')
raidControllerSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("failed", 2), ("notPresent", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerSecondaryStatus.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerSecondaryStatus.setDescription('The status of secondary RAID controller. NOTE: A status of notPresent(3) indicates that there is only one RAID controller within this rack. This object is now obsolete.')
raidControllerManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerManufacturer.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerManufacturer.setDescription('The manufacturer of the RAID controller(s). NOTE: If the manufacturer cannot be obtained this value will be a zero length string. This object is now obsolete.')
raidControllerModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerModel.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerModel.setDescription('The model of the RAID controller(s). NOTE: If the model cannot be obtained this value will be a zero length string. This object is now obsolete.')
raidControllerCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerCacheSize.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerCacheSize.setDescription('The size of the RAID controller(s) cache in bytes. NOTE: If the cache size cannot be obtained this value will be a 0. This object is now obsolete.')
raidControllerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2), )
if mibBuilder.loadTexts: raidControllerConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigTable.setDescription('A table containing configuration information about the RAID controller present in each rack within the system. This information is the same for a RAID controller which has redundancy. The number of entries in the table is given by the value of rackNumber provided that the system can communicate with the rack. This object is now obsolete.')
raidControllerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "raidControllerConfigRackIndex"))
if mibBuilder.loadTexts: raidControllerConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigEntry.setDescription('Configuration information about the RAID controller in a rack. This object is now obsolete.')
raidControllerConfigRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigRackIndex.setDescription('The rack in which the RAID controller is located. The controller identified by a particular value of this index is located within the rack identified by the same value of rackIndex. This object is now obsolete.')
raidControllerConfigDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigDRAMSize.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigDRAMSize.setDescription('The size of the DRAM present in the RAID controller in bytes. This object is now obsolete.')
raidControllerConfigFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFlashSize.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigFlashSize.setDescription('The size of flash memory present in the RAID controller in bytes. This object is now obsolete.')
raidControllerConfigNVRSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigNVRSize.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigNVRSize.setDescription('The size of non volatile memory present in the RAID controller in bytes. This object is now obsolete.')
raidControllerConfigClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigClockSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigClockSpeed.setDescription('The clock speed of the memory in the RAID controller in nanoseconds. This object is now obsolete.')
raidControllerConfigMemAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMemAccess.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigMemAccess.setDescription('The access time of the memory in the RAID controller in nanoseconds. This object is now obsolete.')
raidControllerConfigMemCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMemCycle.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigMemCycle.setDescription('The cycle time of the memory in the RAID controller in nanoseconds. This object is now obsolete.')
raidControllerConfigPhysicalSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigPhysicalSectorSize.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigPhysicalSectorSize.setDescription('The physical sector size supported by the RAID controller in bytes. This object is now obsolete.')
raidControllerConfigLogicalSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigLogicalSectorSize.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigLogicalSectorSize.setDescription('The logical sector size supported by the RAID controller in bytes. This object is now obsolete.')
raidControllerConfigMaxSystemDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMaxSystemDrives.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigMaxSystemDrives.setDescription('The maximum number of system drives supported by the RAID controller. This object is now obsolete.')
raidControllerConfigMaxDrivesPerSystemDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMaxDrivesPerSystemDrive.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigMaxDrivesPerSystemDrive.setDescription('The maximum number of drives which the RAID controller permits to be part of a system drive. This object is now obsolete.')
raidControllerConfigMaxSpanPerVirtualDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMaxSpanPerVirtualDrive.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigMaxSpanPerVirtualDrive.setDescription('The maximum number of spans which the RAID controller permits to be part of a virtual drive. This object is now obsolete.')
raidControllerConfigFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareVersion.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigFirmwareVersion.setDescription('Firmware version installed in this RAID controller. This object is now obsolete.')
raidControllerConfigFirmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareType.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigFirmwareType.setDescription('Firmware type installed in this RAID controller. This object is now obsolete.')
raidControllerConfigFirmwareMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareMajor.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigFirmwareMajor.setDescription('Major version of firmware installed in this RAID controller. This object is now obsolete.')
raidControllerConfigFirmwareMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareMinor.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigFirmwareMinor.setDescription('Minor version of firmware installed in the RAID controller. This object is now obsolete.')
raidControllerConfigMaximumCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigMaximumCommands.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigMaximumCommands.setDescription('Maximum number concurrent commands that may be performed by the RAID controller. This object is now obsolete.')
raidControllerConfigFirmwareBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigFirmwareBuild.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigFirmwareBuild.setDescription('Build version of the firmware installed in the RAID controller. This object is now obsolete.')
raidControllerConfigRebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRebuildRate.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigRebuildRate.setDescription('The rebuild rate of the RAID controller. This object is now obsolete.')
raidControllerConfigRebuildUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRebuildUnit.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigRebuildUnit.setDescription('The rebuild unit size in milliseconds used in the rate figure raidControllerConfigRebuildRate for the RAID controller. This object is now obsolete.')
raidControllerConfigRebuildOn = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRebuildOn.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigRebuildOn.setDescription('The rebuild on time of the RAID controller. This object is now obsolete.')
raidControllerConfigRebuildOff = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerConfigRebuildOff.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerConfigRebuildOff.setDescription('The rebuild off time of the RAID controller. This object is now obsolete.')
raidControllerBatteryBackupTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3), )
if mibBuilder.loadTexts: raidControllerBatteryBackupTable.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupTable.setDescription('A table containing information about the battery backup unit within each RAID controller present in each rack within the system. The number of entries in the table is given by the value of rackNumber provided that the system can communicate with the rack. This object is now obsolete.')
raidControllerBatteryBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "raidControllerBatteryBackupRackIndex"))
if mibBuilder.loadTexts: raidControllerBatteryBackupEntry.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupEntry.setDescription('Information about the battery backup unit within a RAID controller. This object is now obsolete.')
raidControllerBatteryBackupRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupRackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupRackIndex.setDescription('The rack in which the RAID controller containing the battery backup unit is located. The controller and battery backup unit identified by a particular value of this index is located within the rack identified by the same value of rackIndex. This object is now obsolete.')
raidControllerBatteryBackupNoSync = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noSync", 1), ("sync", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupNoSync.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupNoSync.setDescription('Indicates whether a reconditioning cycle has been performed since power up of the RAID controller. noSync(1) - there has NOT been a reconditioning cycle since powering up the RAID controller. sync(2) - there has been a reconditioning cycle since powering up the RAID controller. This object is now obsolete.')
raidControllerBatteryBackupOutOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfsync", 1), ("sync", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupOutOfSync.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupOutOfSync.setDescription('Indicates whether a reconditioning cycle is needed. outOfSync(1) - a reconditioning cycle needs to be performed. sync(2) - a reconditioning cycle does NOT need to be performed. This object is now obsolete.')
raidControllerBatteryBackupFirstWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firstWarning", 1), ("noFirstWarning", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupFirstWarning.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupFirstWarning.setDescription('Indicates whether a first warning for low battery power has been issued. firstWarning(1) - a first warning has been issued. noFirstWarning(2) - no first warning has been issued. This object is now obsolete.')
raidControllerBatteryBackupSecondWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secondWarning", 1), ("noSecondWarning", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupSecondWarning.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupSecondWarning.setDescription('Indicates whether a second warning for low battery power has been issued. secondWarning(1) - a second warning has been issued. noSecondWarning(2) - no second warning has been issued. This object is now obsolete.')
raidControllerBatteryBackupReconditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reconditioning", 1), ("notReconditioning", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupReconditioning.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupReconditioning.setDescription('Indicates whether the battery is currently being reconditioned. reconditioning(1) - the battery is being reconditioned. notReconditioning(2) - the battery is NOT being reconditioned. This object is now obsolete.')
raidControllerBatteryBackupDischarging = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discharging", 1), ("notDischarging", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupDischarging.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupDischarging.setDescription('Indicates whether the battery is currently being discharged. discharging(1) - the battery is currently being discharged. notDischarging(2) - the battery is NOT currently being discharged. This object is now obsolete.')
raidControllerBatteryBackupFastCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fastCharging", 1), ("notFastCharging", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupFastCharging.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupFastCharging.setDescription('Indicates whether the battery is currently fast charging. fastCharging(1) - the battery is currently being fast charged. notFastCharging(2) - the battery is NOT currently being fast charged. This object is now obsolete.')
raidControllerBatteryBackupLowPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lowPowerAlarm", 1), ("noLowPowerAlarm", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupLowPower.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupLowPower.setDescription('Indicates whether the battery is issuing a low power alarm. lowPowerAlarm(1) - the battery is issuing a low power alarm. noLowPowerAlarm(2) - the battery is NOT issuing a lower power alarm. This object is now obsolete.')
raidControllerBatteryBackupChargePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupChargePercent.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupChargePercent.setDescription('The percentage charge held by the battery. This object is now obsolete.')
raidControllerBatteryBackupHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupHardwareVersion.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupHardwareVersion.setDescription('The hardware version of the battery backup unit. This object is now obsolete.')
raidControllerBatteryBackupBatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("niCd", 1), ("none", 2), ("unknown", 3), ("niMH", 4), ("lion", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupBatteryType.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupBatteryType.setDescription('The type of the battery in the battery backup unit. This object is now obsolete.')
raidControllerBatteryBackupThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerBatteryBackupThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerBatteryBackupThreshold.setDescription('The threshold of the battery life in minutes. This object is now obsolete.')
raidControllerActiveTaskNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskNumber.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerActiveTaskNumber.setDescription('The number of active tasks which are currently being performed by the RAID controller(s) in the system. This object is now obsolete.')
raidControllerActiveTaskTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5), )
if mibBuilder.loadTexts: raidControllerActiveTaskTable.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerActiveTaskTable.setDescription('A table containing information about the tasks currently being performed by RAID controller(s) present in the system. The number of entries in this table is given by the value of raidControllerActiveTaskNumber. This object is now obsolete.')
raidControllerActiveTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "raidControllerActiveTaskRackIndex"), (0, "BLUEARC-SERVER-MIB", "raidControllerActiveTaskIndex"))
if mibBuilder.loadTexts: raidControllerActiveTaskEntry.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerActiveTaskEntry.setDescription('Information about the active task being performed by the RAID controller. This object is now obsolete.')
raidControllerActiveTaskRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskRackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerActiveTaskRackIndex.setDescription('The rack in which the RAID controller is located. The controller identified by a particular value of this index is located within the rack identified by the same value of rackIndex. This object is now obsolete.')
raidControllerActiveTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskIndex.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerActiveTaskIndex.setDescription('A unique value for each task being performed on a specific RAID controller. This object is now obsolete.')
raidControllerActiveTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initializing", 1), ("checking", 2), ("checkingAndRestoring", 3), ("rebuilding", 4), ("reconditioningBattery", 5), ("chargingBattery", 6), ("unknown", 7), ("backgroundInitialising", 8), ("migrating", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskType.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerActiveTaskType.setDescription('The type of task being performed by the RAID controller. This object is now obsolete.')
raidControllerActiveTaskLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskLUN.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerActiveTaskLUN.setDescription('The LUN of the system drive on which the active task is being performed by the RAID controller. NOTE: the value is 0 for tasks which are not related to System Drives. These are where the variable raidControllerActiveTaskType is reconditioningBattery(5) or chargingBattery(6) (affecting the battery backup unit), or unknown(7). This object is now obsolete.')
raidControllerActiveTaskPercentageDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidControllerActiveTaskPercentageDone.setStatus('obsolete')
if mibBuilder.loadTexts: raidControllerActiveTaskPercentageDone.setDescription('The percentage of the task which is complete. This object is now obsolete.')
physicalDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveNumber.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveNumber.setDescription('The number of physical drive bays (regardless of whether they contain a drive) which are present within all racks and enclosures within the system. This object is now obsolete.')
physicalDriveTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2), )
if mibBuilder.loadTexts: physicalDriveTable.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveTable.setDescription('A table containing the status of each drive bay present on this system. The number of entries in this table is given by the value of physicalDriveNumber. This object is now obsolete.')
physicalDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "physicalDriveRackIndex"), (0, "BLUEARC-SERVER-MIB", "physicalDriveEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "physicalDriveColumnIndex"), (0, "BLUEARC-SERVER-MIB", "physicalDriveRowIndex"))
if mibBuilder.loadTexts: physicalDriveEntry.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveEntry.setDescription('Status information about the drive bay. This object is now obsolete.')
physicalDriveRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveRackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveRackIndex.setDescription('The rack in which the drive is located. The drive identified by a particular value of this index is located within the rack identified by the same value of rackIndex. This object is now obsolete.')
physicalDriveEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveEnclosureIndex.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveEnclosureIndex.setDescription('The enclosure in which the physical drive bay is located. Enclosure numbers start at 1. This object is now obsolete.')
physicalDriveColumnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveColumnIndex.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveColumnIndex.setDescription('The column in the enclosure in which the physical drive bay is located. Column numbers starts at 1 (column 1 is located at the left hand side of the enclosure). This object is now obsolete.')
physicalDriveRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveRowIndex.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveRowIndex.setDescription('The row in the enclosure in which the physical drive bay is located. Row numbers starts at 1 (row 1 is located at the top of the enclosure). Example: row 1, column 1 is the top left hand bay within an enclosure. This object is now obsolete.')
physicalDriveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notPresent", 1), ("online", 2), ("failed", 3), ("rebuilding", 6), ("hotspare", 7), ("notConfigured", 8), ("migrating", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveStatus.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveStatus.setDescription('The status of the physical drive bay. notPresent(1) - indicates that there is no drive present within the drive bay. This object is now obsolete.')
physicalDriveVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seagate", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveVendor.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveVendor.setDescription('The vendor of the drive. NOTE: If the drive bay is empty this value will be set to unknown(2). This object is now obsolete.')
physicalDriveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveVersion.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveVersion.setDescription('The version of the firmware installed in the drive. NOTE: If the drive bay is empty this value will be a zero length string. This object is now obsolete.')
physicalDriveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDriveCapacity.setStatus('obsolete')
if mibBuilder.loadTexts: physicalDriveCapacity.setDescription('The storage capacity of the drive in bytes. NOTE: If the drive bay is empty this value will be 0. This object is now obsolete.')
enclosureFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanNumber.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureFanNumber.setDescription('The total number of fans which are present in all of the enclosures in all racks within the system. This object is now obsolete.')
enclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2), )
if mibBuilder.loadTexts: enclosureFanTable.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureFanTable.setDescription('A table containing status information for each fan located within each enclosure (of each rack) within this system. The number of entries in this table is given by the value of enclosureFanNumber. This object is now obsolete.')
enclosureFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "enclosureFanRackIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureFanEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureFanFanIndex"))
if mibBuilder.loadTexts: enclosureFanEntry.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureFanEntry.setDescription('Fan status information. This object is now obsolete.')
enclosureFanRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanRackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureFanRackIndex.setDescription('The rack in which the fan is located. The fan identified by a particular value of this index is located within the rack identified by the same value of rackIndex. This object is now obsolete.')
enclosureFanEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanEnclosureIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureFanEnclosureIndex.setDescription('The enclosure in which the fan is located. Enclosure numbers start at 1. This object is now obsolete.')
enclosureFanFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanFanIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureFanFanIndex.setDescription('An identifier for the fan within the enclosure. Fan numbers start at 1. This object is now obsolete.')
enclosureFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanStatus.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureFanStatus.setDescription('The status of the fan sensor. This object is now obsolete.')
enclosureFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fast", 1), ("slow", 2), ("stoppedOrUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureFanSpeed.setDescription('An indication of the speed at which the fan is running. This object is now obsolete.')
enclosureTemperatureNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureNumber.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureNumber.setDescription('The total number of temperature sensors which are present in all of the enclosures in all racks within the system. This object is now obsolete.')
enclosureTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4), )
if mibBuilder.loadTexts: enclosureTemperatureTable.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureTable.setDescription('A table containing temperature readings for each sensor located within each enclosure (of each rack) within this system. The number of entries in this table is given by the value of enclosureTemperatureNumber. This object is now obsolete.')
enclosureTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "enclosureTemperatureRackIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureTemperatureEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureTemperatureTempIndex"))
if mibBuilder.loadTexts: enclosureTemperatureEntry.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureEntry.setDescription('Information obtained from a temperature sensor located within an enclosure. This object is now obsolete.')
enclosureTemperatureRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureRackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureRackIndex.setDescription('The rack in which the temperature sensor is located. The sensor identified by a particular value of this index is located within the rack identified by the same value of rackIndex. This object is now obsolete.')
enclosureTemperatureEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureEnclosureIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureEnclosureIndex.setDescription('The enclosure in which the temperature sensor is located. Enclosure numbers start at 1. This object is now obsolete.')
enclosureTemperatureTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureTempIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureTempIndex.setDescription('An identifier for the temperature sensor within the enclosure. Temperature sensor numbers start at 1. This object is now obsolete.')
enclosureTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureStatus.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureStatus.setDescription('The status of the temperature sensor. This object is now obsolete.')
enclosureTemperatureOverTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("overTemp", 1), ("noOverTemp", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureOverTemp.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureOverTemp.setDescription('A flag indicating whether an over temperature has been detected by the sensor. overTemp(1) - an over temperature has been detected. noOverTemp(2) - an over temperature has NOT been detected. This object is now obsolete.')
enclosureTemperatureTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureTempC.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureTempC.setDescription('The temperature measured by the sensor in degrees Celsius. A value of -1 indicates the temperature could not be determined. This object is now obsolete.')
enclosureTemperatureTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureTempF.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureTempF.setDescription('The temperature measured by the sensor in degrees Fahrenheit. A value of -1 indicates the temperature could not be determined. This object is now obsolete.')
enclosureTemperatureRange = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("warm", 2), ("hot", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureRange.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureTemperatureRange.setDescription('Status indicator of the temperature with regard to the operating temperatures expected within the enclosure. This object is now obsolete.')
enclosurePSUNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUNumber.setStatus('obsolete')
if mibBuilder.loadTexts: enclosurePSUNumber.setDescription('The total number of power supplies which are present in all of the enclosures in all racks within the system. This object is now obsolete.')
enclosurePSUTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6), )
if mibBuilder.loadTexts: enclosurePSUTable.setStatus('obsolete')
if mibBuilder.loadTexts: enclosurePSUTable.setDescription('A table containing status information on each power supply located within each enclosure (of each rack) within this system. The number of entries in this table is given by the value of enclosurePSUNumber. This object is now obsolete.')
enclosurePSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "enclosurePSURackIndex"), (0, "BLUEARC-SERVER-MIB", "enclosurePSUEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "enclosurePSUPSUIndex"))
if mibBuilder.loadTexts: enclosurePSUEntry.setStatus('obsolete')
if mibBuilder.loadTexts: enclosurePSUEntry.setDescription('Information about a power supply within an enclosure. This object is now obsolete.')
enclosurePSURackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSURackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosurePSURackIndex.setDescription('The rack in which the power supply is located. The power supply identified by a particular value of this index is located within the rack identified by the same value of rackIndex. This object is now obsolete.')
enclosurePSUEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUEnclosureIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosurePSUEnclosureIndex.setDescription('The enclosure in which the power supply is located. Enclosure numbers start at 1. This object is now obsolete.')
enclosurePSUPSUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUPSUIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosurePSUPSUIndex.setDescription('An identifier for the power supply within the enclosure. Power supply numbers start at 1. This object is now obsolete.')
enclosurePSUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUStatus.setStatus('obsolete')
if mibBuilder.loadTexts: enclosurePSUStatus.setDescription('The operational status of the power supply. This object is now obsolete.')
enclosureAlarmNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmNumber.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureAlarmNumber.setDescription('The total number of alarm modules which are present in all of the enclosures in all racks within the system. This object is now obsolete.')
enclosureAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8), )
if mibBuilder.loadTexts: enclosureAlarmTable.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureAlarmTable.setDescription('A table containing status information on each alarm module located within each enclosure (of each rack) within this system. The number of entries in this table is given by the value of enclosureAlarmNumber. This object is now obsolete.')
enclosureAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "enclosureAlarmRackIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureAlarmEnclosureIndex"), (0, "BLUEARC-SERVER-MIB", "enclosureAlarmAlarmIndex"))
if mibBuilder.loadTexts: enclosureAlarmEntry.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureAlarmEntry.setDescription('Information about a alarm module within an enclosure. This object is now obsolete.')
enclosureAlarmRackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmRackIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureAlarmRackIndex.setDescription('The rack in which the alarm module is located. The alarm module identified by a particular value of this index is located within the rack identified by the same value of rackIndex. This object is now obsolete.')
enclosureAlarmEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmEnclosureIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureAlarmEnclosureIndex.setDescription('The enclosure in which the alarm module is located. Enclosure numbers start at 1. This object is now obsolete.')
enclosureAlarmAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmAlarmIndex.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureAlarmAlarmIndex.setDescription('An identifier for the alarm module within the enclosure. Alarm module numbers start at 1. This object is now obsolete.')
enclosureAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmStatus.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureAlarmStatus.setDescription('The operational status of alarm module. This object is now obsolete.')
enclosureAlarmBeeping = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("beeping", 1), ("notBeeping", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarmBeeping.setStatus('obsolete')
if mibBuilder.loadTexts: enclosureAlarmBeeping.setDescription('Indicates whether the alarm module is beeping or not. This object is now obsolete.')
automountNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountNumber.setStatus('obsolete')
if mibBuilder.loadTexts: automountNumber.setDescription('The number of automounts configured. This object is obsolete. Volumes are no longer automounted.')
automountTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2), )
if mibBuilder.loadTexts: automountTable.setStatus('obsolete')
if mibBuilder.loadTexts: automountTable.setDescription('A table containing the automount configuration. The number of entries in this table is given by the value of automountNumber. This object is obsolete. Volumes are no longer automounted.')
automountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "automountIndex"), (0, "BLUEARC-SERVER-MIB", "automountPartitionIndex"))
if mibBuilder.loadTexts: automountEntry.setStatus('obsolete')
if mibBuilder.loadTexts: automountEntry.setDescription('An automount configuration entry. This object is obsolete. Volumes are no longer automounted.')
automountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountIndex.setStatus('obsolete')
if mibBuilder.loadTexts: automountIndex.setDescription('An identifier for the automount. Its value ranges between 1 and the value of automountNumber. This object is obsolete. Volumes are no longer automounted.')
automountPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountPartitionIndex.setStatus('obsolete')
if mibBuilder.loadTexts: automountPartitionIndex.setDescription('The partition number of the disk to automount. This object is obsolete. Volumes are no longer automounted.')
automountWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountWWN.setStatus('obsolete')
if mibBuilder.loadTexts: automountWWN.setDescription('The world wide name (WWN) of the disk to automount. This object is obsolete. Volumes are no longer automounted.')
automountLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automountLUN.setStatus('obsolete')
if mibBuilder.loadTexts: automountLUN.setDescription('The logical unit number (LUN) of the disk to automount. This object is obsolete. Volumes are no longer automounted.')
sysDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveNumber.setStatus('current')
if mibBuilder.loadTexts: sysDriveNumber.setDescription('The number of accessible system drives. NOTE: A system drive is a single logical drive which is created and managed by a RAID controller. It comprises of a number of physical drives, each of which contribute to the total storage capability of the system drive.')
sysDriveTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2), )
if mibBuilder.loadTexts: sysDriveTable.setStatus('current')
if mibBuilder.loadTexts: sysDriveTable.setDescription('A table containing information about each accessible system drive. The number of entries in this table is given by the value of sysDriveNumber.')
sysDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "sysDriveIndex"))
if mibBuilder.loadTexts: sysDriveEntry.setStatus('current')
if mibBuilder.loadTexts: sysDriveEntry.setDescription('Information about a system drive.')
sysDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveIndex.setStatus('current')
if mibBuilder.loadTexts: sysDriveIndex.setDescription('An identifier for the system drive (system drive id). Its value ranges between 1 and the value of sysDriveNumber.')
sysDriveWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveWWN.setStatus('current')
if mibBuilder.loadTexts: sysDriveWWN.setDescription('The world wide name (WWN) of the system drive.')
sysDriveLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveLUN.setStatus('current')
if mibBuilder.loadTexts: sysDriveLUN.setDescription('The logical unit number (LUN) of the system drive. NOTE: upto 8 system drives can exist under a single RAID controller. LUNs range from 0 to 7.')
sysDriveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("online", 1), ("corrupt", 2), ("failed", 3), ("notPresent", 4), ("disconnected", 5), ("offline", 6), ("initializing", 7), ("formatting", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveStatus.setStatus('current')
if mibBuilder.loadTexts: sysDriveStatus.setDescription('The status of the system drive. online(1) - the system drive is accessible through the fibre channel interface. corrupt(2) - the system drives master boot record is corrupt. failed(3) - the system drive has failed and is no longer accessible through the fibre channel interface. notPresent(4) - device no longer present. disconnected(5) - device is present but not accessible by the controller offline(6) - all ports are offline initializing(7) - not accessible until initialization phase has completed formatting(8) - device is formatting unknown(9) - unknown device status This object will only have the value unknown(9).')
sysDriveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveCapacity.setStatus('current')
if mibBuilder.loadTexts: sysDriveCapacity.setDescription('The capacity of the system drive in bytes.')
sysDriveRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("raid0", 1), ("raid1", 2), ("raid3", 3), ("raid5", 4), ("raid10", 5), ("jBOD", 6), ("raid30", 7), ("raid50", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveRaidLevel.setStatus('current')
if mibBuilder.loadTexts: sysDriveRaidLevel.setDescription('The configured RAID level of the system drive. NOTE : jBOD(6) - means just a bunch of disks.')
sysDriveCacheMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("writeThrough", 1), ("writeBack", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDriveCacheMode.setStatus('current')
if mibBuilder.loadTexts: sysDriveCacheMode.setDescription('The caching mode employed by the RAID controller for this system drive. This object will only have the value unknown(3).')
volumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNumber.setStatus('current')
if mibBuilder.loadTexts: volumeNumber.setDescription('The number of volumes which are known to the system.')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2), )
if mibBuilder.loadTexts: volumeTable.setStatus('current')
if mibBuilder.loadTexts: volumeTable.setDescription('A table containing information about each volume known to the system. The number of entries in this table is given by the value of volumeNumber.')
volumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "volumeSysDriveIndex"), (0, "BLUEARC-SERVER-MIB", "volumePartitionID"))
if mibBuilder.loadTexts: volumeEntry.setStatus('current')
if mibBuilder.loadTexts: volumeEntry.setDescription('Information about a volume.')
volumeSysDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSysDriveIndex.setStatus('current')
if mibBuilder.loadTexts: volumeSysDriveIndex.setDescription('The system drive on which the volume is stored. The system drive identified by a particular value of this index is located on the system drive identified by the same value of sysDriveIndex.')
volumePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumePartitionID.setStatus('current')
if mibBuilder.loadTexts: volumePartitionID.setDescription('The partition ID of the volume. NOTE: this is the offset from the start of the system drive at which the volume starts.')
volumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLabel.setStatus('current')
if mibBuilder.loadTexts: volumeLabel.setDescription('The label assigned to the volume by a user for identification purposes. NOTE: If a label has not been assigned to the volume, this value will be a zero length string.')
volumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unformatted", 1), ("mounted", 2), ("formatted", 3), ("needsChecking", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeStatus.setStatus('current')
if mibBuilder.loadTexts: volumeStatus.setDescription('The status of the volume. unformatted(1) - the volume does NOT contain a filesystem. mounted(2) - the volume contains a file system and may be being accessed by users. formatted(3) - the volume contains a filesystem, but is not accessible by users as it is not mounted. needsChecking(4) - the filesystem has some errors and cannot be mounted. Its must be checked and fixed before it can be accessed by users.')
volumeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeCapacity.setStatus('current')
if mibBuilder.loadTexts: volumeCapacity.setDescription('The volumes capacity in bytes.')
volumeFreeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeCapacity.setStatus('current')
if mibBuilder.loadTexts: volumeFreeCapacity.setDescription('The remaining free volume capacity in bytes. NOTE: This value is 0 if the volume is not mounted.')
volumeEnterpriseVirtualServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeEnterpriseVirtualServer.setStatus('current')
if mibBuilder.loadTexts: volumeEnterpriseVirtualServer.setDescription('The name of the Enterprise Virtual Server to which this volume is assigned.')
fsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3), )
if mibBuilder.loadTexts: fsStatsTable.setStatus('current')
if mibBuilder.loadTexts: fsStatsTable.setDescription('A table containing statistics about each FileSystem known to the system. The number of entries in this table is given by the value of volumeNumber.')
fsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fsPermId"))
if mibBuilder.loadTexts: fsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fsStatsEntry.setDescription('Statistics on a FileSystem.')
fsPermId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsPermId.setStatus('current')
if mibBuilder.loadTexts: fsPermId.setDescription('The permanent ID of the FileSystem for which these statistics are reported.')
fsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsLabel.setStatus('current')
if mibBuilder.loadTexts: fsLabel.setDescription('The label of the FileSystem for which these statistics are reported.')
opsPerSecAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 5, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsPerSecAverage.setStatus('current')
if mibBuilder.loadTexts: opsPerSecAverage.setDescription('The average file system accesses per second for the FileSystem. These accesses relate to network protocols (such as CIFS and NFS) as well as commands issued from the CLI, backup and various background processes. This average does not include hardware-accelerated accesses, and so the values obtained may differ from opsPerSecond, a cluster- wide value that includes hardware-accelerated accesses. If the FileSystem is not mounted, or is unavailable for some other reason, this value is zero.')
fcRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRequests.setStatus('current')
if mibBuilder.loadTexts: fcRequests.setDescription('The total number of requests issued through the fibre channel interface.')
fcResponses = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcResponses.setStatus('current')
if mibBuilder.loadTexts: fcResponses.setDescription('The total number of responses received through the fibre channel interface.')
fcReadReqs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcReadReqs.setStatus('current')
if mibBuilder.loadTexts: fcReadReqs.setDescription('The total number of disk read requests issued through the fibre channel interface.')
fcWriteReqs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWriteReqs.setStatus('current')
if mibBuilder.loadTexts: fcWriteReqs.setDescription('The total number of disk write requests issued through the fibre channel interface.')
fcReadResps = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcReadResps.setStatus('current')
if mibBuilder.loadTexts: fcReadResps.setDescription('The total number of disk read responses received through the fibre channel interface.')
fcWriteResps = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWriteResps.setStatus('current')
if mibBuilder.loadTexts: fcWriteResps.setDescription('The total number of disk write responses received through the fibre channel interface.')
fcInstInRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInstInRate.setStatus('obsolete')
if mibBuilder.loadTexts: fcInstInRate.setDescription('The instantaneous receive rate in bytes per second for data received through the fibre channel interface. This object is obsolete. It forms a column in fcStatsTable.')
fcInstOutRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInstOutRate.setStatus('obsolete')
if mibBuilder.loadTexts: fcInstOutRate.setDescription('The instantaneous transmission rate in bytes per second for data transmitted through the fibre channel interface. This object is obsolete. It forms a column in fcStatsTable.')
fcPkInRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPkInRate.setStatus('obsolete')
if mibBuilder.loadTexts: fcPkInRate.setDescription('The peak receive rate in bytes per second for data received through the fibre channel interface. This object is obsolete. It forms a column in fcStatsTable.')
fcPkOutRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPkOutRate.setStatus('obsolete')
if mibBuilder.loadTexts: fcPkOutRate.setDescription('The peak transmission rate in bytes per second for data transmitted through the fibre channel interface. This object is obsolete. It forms a column in fcStatsTable.')
fcCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCacheHits.setStatus('current')
if mibBuilder.loadTexts: fcCacheHits.setDescription('The total number of disk read requests which were fulfilled through reading the sector cache (ie the requests did NOT require access to the disk).')
fcCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCacheMisses.setStatus('current')
if mibBuilder.loadTexts: fcCacheMisses.setDescription('The total number disk read requests which required access to the disk (ie the requests could NOT be fulfilled through reading the sector cache).')
fcLossSignalErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSignalErrs.setStatus('obsolete')
if mibBuilder.loadTexts: fcLossSignalErrs.setDescription('The total number of loss of signal errors. This object is obsolete. It forms a column in fcStatsTable.')
fcBadRXCharErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcBadRXCharErrs.setStatus('obsolete')
if mibBuilder.loadTexts: fcBadRXCharErrs.setDescription('The total number of bad receive character errors. This object is obsolete. It forms a column in fcStatsTable.')
fcLossSyncErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSyncErrs.setStatus('obsolete')
if mibBuilder.loadTexts: fcLossSyncErrs.setDescription('The total number of loss of synchronisation errors. This object is obsolete. It forms a column in fcStatsTable.')
fcLinkFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLinkFailErrs.setStatus('obsolete')
if mibBuilder.loadTexts: fcLinkFailErrs.setDescription('The total number of link fail errors. This object is obsolete. It forms a column in fcStatsTable.')
fcRXEOFErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRXEOFErrs.setStatus('obsolete')
if mibBuilder.loadTexts: fcRXEOFErrs.setDescription('The total number of messages received from the frame sender indicating that the frame should be aborted because a problem occurred during transmission. This object is obsolete. It forms a column in fcStatsTable.')
fcDiscardedFrameErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcDiscardedFrameErrs.setStatus('obsolete')
if mibBuilder.loadTexts: fcDiscardedFrameErrs.setDescription('The total number of discarded frame errors. This object is obsolete. It forms a column in fcStatsTable.')
fcBadCRCErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcBadCRCErrs.setStatus('obsolete')
if mibBuilder.loadTexts: fcBadCRCErrs.setDescription('The total number of framing errors due to bad cyclic redundancy codes. This object is obsolete. It forms a column in fcStatsTable.')
fcProtErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcProtErrs.setStatus('obsolete')
if mibBuilder.loadTexts: fcProtErrs.setDescription('The total number of fibre channel protocol errors. This object is obsolete. It forms a column in fcStatsTable.')
fcIOStatusResubs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIOStatusResubs.setStatus('current')
if mibBuilder.loadTexts: fcIOStatusResubs.setDescription('The number of I/O requests that were resubmitted because they failed the first time.')
fcIOStatusFails = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIOStatusFails.setStatus('current')
if mibBuilder.loadTexts: fcIOStatusFails.setDescription('The number of I/O requests that failed after resubmission. NOTE: This indicates a fatal error condition with the fibre channel interface hardware.')
fibreChannelInterfaceNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fibreChannelInterfaceNumber.setStatus('current')
if mibBuilder.loadTexts: fibreChannelInterfaceNumber.setDescription('The number of fibre channel interfaces.')
fcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24), )
if mibBuilder.loadTexts: fcStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: fcStatsTable.setDescription('A table of statistics for the fibre channel interfaces. This object is now obsolete.')
fcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fcInterfaceIndex"))
if mibBuilder.loadTexts: fcStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: fcStatsEntry.setDescription('A set of statistics for a fibre channel interface. The interface is indexed by fcInterfaceIndex. This object is now obsolete.')
fcInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInterfaceIndex.setStatus('obsolete')
if mibBuilder.loadTexts: fcInterfaceIndex.setDescription('The index of the fibre channel interface to which the statistics in this row apply. This object is now obsolete.')
fcInstantaneousInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInstantaneousInRate.setStatus('obsolete')
if mibBuilder.loadTexts: fcInstantaneousInRate.setDescription('The number of bytes received by a fibre channel interface in the last second. This object is now obsolete.')
fcInstantaneousOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInstantaneousOutRate.setStatus('obsolete')
if mibBuilder.loadTexts: fcInstantaneousOutRate.setDescription('The number of bytes transmitted by a fibre channel interface in the last second. This object is now obsolete.')
fcPeakInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPeakInRate.setStatus('obsolete')
if mibBuilder.loadTexts: fcPeakInRate.setDescription('The peak receive rate in bytes per second for data received through a fibre channel interface. This object is now obsolete.')
fcPeakOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPeakOutRate.setStatus('obsolete')
if mibBuilder.loadTexts: fcPeakOutRate.setDescription('The peak transmission rate in bytes per second for data transmitted through a fibre channel interface.')
fcSignalLossErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSignalLossErrors.setStatus('obsolete')
if mibBuilder.loadTexts: fcSignalLossErrors.setDescription('The total number of loss of signal errors by a fibre channel interface. This object is now obsolete.')
fcBadRXCharErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcBadRXCharErrors.setStatus('obsolete')
if mibBuilder.loadTexts: fcBadRXCharErrors.setDescription('The number of bad receive character errors at a fibre channel interface. This object is now obsolete.')
fcLossSyncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSyncErrors.setStatus('obsolete')
if mibBuilder.loadTexts: fcLossSyncErrors.setDescription('The number of loss of synchronisation errors at a fibre channel interface. This object is now obsolete.')
fcLinkFailErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLinkFailErrors.setStatus('obsolete')
if mibBuilder.loadTexts: fcLinkFailErrors.setDescription('The number of link fail errors at a fibre channel interface. This object is now obsolete.')
fcRXEOFErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRXEOFErrors.setStatus('obsolete')
if mibBuilder.loadTexts: fcRXEOFErrors.setDescription('The number of messages received at a fibre channel interface from the frame sender indicating that the frame should be aborted because a problem occurred during transmission. This object is now obsolete.')
fcDiscardedFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcDiscardedFrameErrors.setStatus('obsolete')
if mibBuilder.loadTexts: fcDiscardedFrameErrors.setDescription('The number of discarded frame errors at a fibre channel interface. This object is now obsolete.')
fcBadCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcBadCRCErrors.setStatus('obsolete')
if mibBuilder.loadTexts: fcBadCRCErrors.setDescription('The number of framing errors due to bad cyclic redundancy codes, at a fibre channel interface. This object is now obsolete.')
fcProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcProtocolErrors.setStatus('obsolete')
if mibBuilder.loadTexts: fcProtocolErrors.setDescription('The number of fibre channel protocol errors at a fibre channel interface. This object is now obsolete.')
fcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25), )
if mibBuilder.loadTexts: fcStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: fcStatisticsTable.setDescription('A table of statistics for the fibre channel interfaces.')
fcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fcStatsClusterNode"), (0, "BLUEARC-SERVER-MIB", "fcStatsInterfaceIndex"))
if mibBuilder.loadTexts: fcStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: fcStatisticsEntry.setDescription('A set of statistics for a fibre channel interface. The interface is indexed by fcInterfaceIndex.')
fcStatsClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsClusterNode.setStatus('current')
if mibBuilder.loadTexts: fcStatsClusterNode.setDescription('The Cluster Node to which this row applies.')
fcStatsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: fcStatsInterfaceIndex.setDescription('The index of the fibre channel interface to which the statistics in this row apply.')
fcStatsInterfaceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceEnabled.setStatus('current')
if mibBuilder.loadTexts: fcStatsInterfaceEnabled.setDescription('Whether the fibre interface is enabled or not. unknown(0) - the information could not be obtained. enabled(1) - the interface is enabled. disabled(2) - the interface is disabled.')
fcStatsInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("isolated", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: fcStatsInterfaceStatus.setDescription('The status of the fibre interface. unknown(0) - the information could not be obtained. up(1) - the interface is up. isolated(2) - the interface is isolated. down(3) - the interface is down.')
fcStatsInterfaceLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: fcStatsInterfaceLinkSpeed.setDescription('The speed of the fibre channel interface in Gbps.')
fcStatsInterfaceLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("n", 1), ("nl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInterfaceLinkType.setStatus('current')
if mibBuilder.loadTexts: fcStatsInterfaceLinkType.setDescription('The link-type of the fibre interface. unknown(0) - the information could not be obtained. n(1) - fabric direct attach. nl(2) - arbitrated loop operation.')
fcStatsInstantaneousInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInstantaneousInRate.setStatus('current')
if mibBuilder.loadTexts: fcStatsInstantaneousInRate.setDescription('The number of bytes received by a fibre channel interface in the last second.')
fcStatsInstantaneousOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsInstantaneousOutRate.setStatus('current')
if mibBuilder.loadTexts: fcStatsInstantaneousOutRate.setDescription('The number of bytes transmitted by a fibre channel interface in the last second.')
fcStatsPeakInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsPeakInRate.setStatus('current')
if mibBuilder.loadTexts: fcStatsPeakInRate.setDescription('The peak receive rate in bytes per second for data received through a fibre channel interface.')
fcStatsPeakOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsPeakOutRate.setStatus('current')
if mibBuilder.loadTexts: fcStatsPeakOutRate.setDescription('The peak transmission rate in bytes per second for data transmitted through a fibre channel interface.')
fcStatsTotalRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsTotalRxBytes.setStatus('current')
if mibBuilder.loadTexts: fcStatsTotalRxBytes.setDescription('The total bytes received through a fibre channel interface.')
fcStatsTotalTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsTotalTxBytes.setStatus('current')
if mibBuilder.loadTexts: fcStatsTotalTxBytes.setDescription('The total bytes transmitted through a fibre channel interface.')
fcStatsSignalLossErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsSignalLossErrors.setStatus('current')
if mibBuilder.loadTexts: fcStatsSignalLossErrors.setDescription('The total number of loss of signal errors by a fibre channel interface.')
fcStatsBadRXCharErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsBadRXCharErrors.setStatus('current')
if mibBuilder.loadTexts: fcStatsBadRXCharErrors.setDescription('The number of bad receive character errors at a fibre channel interface.')
fcStatsLossSyncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsLossSyncErrors.setStatus('current')
if mibBuilder.loadTexts: fcStatsLossSyncErrors.setDescription('The number of loss of synchronisation errors at a fibre channel interface.')
fcStatsLinkFailErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsLinkFailErrors.setStatus('current')
if mibBuilder.loadTexts: fcStatsLinkFailErrors.setDescription('The number of link fail errors at a fibre channel interface.')
fcStatsRXEOFErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsRXEOFErrors.setStatus('current')
if mibBuilder.loadTexts: fcStatsRXEOFErrors.setDescription('The number of messages received at a fibre channel interface from the frame sender indicating that the frame should be aborted because a problem occurred during transmission.')
fcStatsDiscardedFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsDiscardedFrameErrors.setStatus('current')
if mibBuilder.loadTexts: fcStatsDiscardedFrameErrors.setDescription('The number of discarded frame errors at a fibre channel interface.')
fcStatsBadCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsBadCRCErrors.setStatus('current')
if mibBuilder.loadTexts: fcStatsBadCRCErrors.setDescription('The number of framing errors due to bad cyclic redundancy codes, at a fibre channel interface.')
fcStatsProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 6, 25, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: fcStatsProtocolErrors.setDescription('The number of fibre channel protocol errors at a fibre channel interface.')
virtualVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeNumber.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeNumber.setDescription('The number of virtual volumes which are currently accessible. NOTE: a virtual volume is only accessible if its associated parent volume is mounted. This object has been obsolete.')
virtualVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2), )
if mibBuilder.loadTexts: virtualVolumeTable.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeTable.setDescription('A table containing information about each virtual volume. The number of entries in this table is given by the value of virtualVolumeNumber. This object has been obsolete.')
virtualVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "virtualVolumeSysDriveIndex"), (0, "BLUEARC-SERVER-MIB", "virtualVolumePartitionID"), (0, "BLUEARC-SERVER-MIB", "virtualVolumeLabel"))
if mibBuilder.loadTexts: virtualVolumeEntry.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeEntry.setDescription('Information about a virtual volume. This object has been obsolete.')
virtualVolumeSysDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeSysDriveIndex.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeSysDriveIndex.setDescription('The parent system drive of the virtual volume. The system drive identified by a particular value of this index is located on the system drive identified by the same value of sysDriveIndex. This object has been obsolete.')
virtualVolumePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumePartitionID.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumePartitionID.setDescription('The partition ID of the parent volume of this virtual volume. The virtualVolumeSysDriveIndex and this value may be used to index the volumeTable in order to establish the parent volume. This object has been obsolete.')
virtualVolumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeLabel.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeLabel.setDescription('The label assigned to the virtual volume by a user for identification purposes. This object has been obsolete.')
virtualVolumeQuotaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeQuotaEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeQuotaEnabled.setDescription('Indicates whether the virtual volume quota checking facility is enabled or not. enabled(1) - quota checking is enabled. disabled(2) - quota checking is disabled. This object has been obsolete.')
virtualVolumeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeLimit.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeLimit.setDescription('The maximum size this virtual volume is limited to in bytes for the purposes of quota checking. This object has been obsolete.')
virtualVolumeWarningAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeWarningAlert.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeWarningAlert.setDescription('If the quota facility is enabled and the storage space used exceeds this percentage of the virtual volumes limit (virtualVolumeLimit) a warning alert will be generated. This object has been obsolete.')
virtualVolumeCriticalAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeCriticalAlert.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeCriticalAlert.setDescription('If the quota facility is enabled and the storage space used exceeds this percentage of the virtual volumes limit (virtualVolumeLimit) a critical alert will be generated. This object has been obsolete.')
virtualVolumeHardLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeHardLimitEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeHardLimitEnabled.setDescription('If the quota facility is enabled, this value indicates whether the file system should enforce a hard limit on the quota such that if the virtual volumes limit (virtualVolumeLimit) is reached, the user will not be able to create or modify any file which would cause the quota to be exceeded. enabled(1) - quota hard limit is enabled. disabled(2) - quota hard limit is disabled. This object has been obsolete.')
virtualVolumeQuotaBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeQuotaBytesUsed.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeQuotaBytesUsed.setDescription('If the quota facility is enabled this value is the number of bytes used from this quota otherwise it will be set 0. This object has been obsolete.')
virtualVolumeQuotaPercentageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualVolumeQuotaPercentageUsed.setStatus('obsolete')
if mibBuilder.loadTexts: virtualVolumeQuotaPercentageUsed.setDescription('If the quota facility is enabled this value is the percentage of the quota used otherwise it will set to 0. This object has been obsolete.')
memberListNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListNumber.setStatus('obsolete')
if mibBuilder.loadTexts: memberListNumber.setDescription('The number of member list entries for all virtual volumes which are accessible. This object has been obsolete.')
memberListTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4), )
if mibBuilder.loadTexts: memberListTable.setStatus('obsolete')
if mibBuilder.loadTexts: memberListTable.setDescription('A table containing information about each member list item. The number of entries in this table is given by the value of memberListNumber.. This object has been obsolete.')
memberListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "memberListVolumeSysDriveIndex"), (0, "BLUEARC-SERVER-MIB", "memberListVolumePartitionID"), (0, "BLUEARC-SERVER-MIB", "memberListVirtualVolumeLabel"), (0, "BLUEARC-SERVER-MIB", "memberListIndex"))
if mibBuilder.loadTexts: memberListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: memberListEntry.setDescription('Information about a member list item. This object has been obsolete.')
memberListVolumeSysDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListVolumeSysDriveIndex.setStatus('obsolete')
if mibBuilder.loadTexts: memberListVolumeSysDriveIndex.setDescription('The parent system drive of the virtual volume and member list item. The system drive identified by a particular value of this index is located on the system drive identified by the same value of sysDriveIndex. This object has been obsolete.')
memberListVolumePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListVolumePartitionID.setStatus('obsolete')
if mibBuilder.loadTexts: memberListVolumePartitionID.setDescription('The partition ID of the parent volume of this virtual volume and member list item. The memberListVolumeSysDriveIndex and this value may be used to index the volumeTable in order to establish the parent volume. This object has been obsolete.')
memberListVirtualVolumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListVirtualVolumeLabel.setStatus('obsolete')
if mibBuilder.loadTexts: memberListVirtualVolumeLabel.setDescription('The label of the parent virtual volume of this member list item. This object has been obsolete.')
memberListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListIndex.setStatus('obsolete')
if mibBuilder.loadTexts: memberListIndex.setDescription('An identifier for this member list entry. This identifier ranges from 1 to the number of member list items configured for the parent virtual volume. This object has been obsolete.')
memberListPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListPath.setStatus('obsolete')
if mibBuilder.loadTexts: memberListPath.setDescription('The path the member list item is associated with. This object has been obsolete.')
memberListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("done", 1), ("pending", 2), ("assigning", 3), ("reparenting", 4), ("deleting", 5), ("failed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberListStatus.setStatus('obsolete')
if mibBuilder.loadTexts: memberListStatus.setDescription('This status of the member list item. This object has been obsolete.')
snapshotRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleNumber.setStatus('current')
if mibBuilder.loadTexts: snapshotRuleNumber.setDescription('The number of snapshot rules which are configured for this system.')
snapshotRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2), )
if mibBuilder.loadTexts: snapshotRuleTable.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotRuleTable.setDescription('A table containing information about each snapshot rule. The number of entries in this table is given by the value of snapshotRuleNumber. This object is now obsolete.')
snapshotRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snapshotRuleName"))
if mibBuilder.loadTexts: snapshotRuleEntry.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotRuleEntry.setDescription('Information about a snapshot rule. This object is now obsolete.')
snapshotRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleName.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotRuleName.setDescription('The name of the snapshot rule. Each snapshot rule has a unique name. This object is now obsolete.')
snapshotRuleWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleWWN.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotRuleWWN.setDescription('The world wide name (WWN) of the system drive the snapshot rule is associated with. This object is now obsolete.')
snapshotRuleLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleLUN.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotRuleLUN.setDescription('The logical unit number (LUN) of the system drive the snapshot rule is associated with. This object is now obsolete.')
snapshotRulePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulePartitionID.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotRulePartitionID.setDescription('The partition ID of the volume the snapshot rule is associated with. This object is now obsolete.')
snapshotRuleQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleQueueSize.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotRuleQueueSize.setDescription('The number of snapshots to keep before the system deletes the oldest snapshot. This object is now obsolete.')
snapshotRuleVolumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRuleVolumeLabel.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotRuleVolumeLabel.setDescription('The label of the volume to which the snapshot rule relates. This object is now obsolete.')
snapshotScheduleNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleNumber.setStatus('current')
if mibBuilder.loadTexts: snapshotScheduleNumber.setDescription('The number of snapshot schedules which are configured for this system.')
snapshotScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4), )
if mibBuilder.loadTexts: snapshotScheduleTable.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotScheduleTable.setDescription('A table containing information about each snapshot schedule. The number of entries in this table is given by the value of snapshotScheduleNumber. This object is now obsolete.')
snapshotScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snapshotScheduleRuleName"), (0, "BLUEARC-SERVER-MIB", "snapshotScheduleIndex"))
if mibBuilder.loadTexts: snapshotScheduleEntry.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotScheduleEntry.setDescription('Information about a snapshot schedule. This object is now obsolete.')
snapshotScheduleRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleRuleName.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotScheduleRuleName.setDescription('The name of the parent snapshot rule that this schedule is associated with. This object is now obsolete.')
snapshotScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleIndex.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotScheduleIndex.setDescription('An identifier for this snapshot schedule entry. This identifier ranges from 1 to the number of snapshot schedules configured for the parent snapshot rule. This object is now obsolete.')
snapshotScheduleDateTimeSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleDateTimeSpec.setStatus('obsolete')
if mibBuilder.loadTexts: snapshotScheduleDateTimeSpec.setDescription('The date and time specification for when this snapshot schedule will be run in cron format. This object is now obsolete.')
snapshotRulesTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5), )
if mibBuilder.loadTexts: snapshotRulesTable.setStatus('current')
if mibBuilder.loadTexts: snapshotRulesTable.setDescription('A table containing information about each snapshot rule. The number of entries in this table is given by the value of snapshotRuleNumber.')
snapshotRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snapshotRulesEVS"), (0, "BLUEARC-SERVER-MIB", "snapshotRulesName"))
if mibBuilder.loadTexts: snapshotRulesEntry.setStatus('current')
if mibBuilder.loadTexts: snapshotRulesEntry.setDescription('Information about a snapshot rule.')
snapshotRulesEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulesEVS.setStatus('current')
if mibBuilder.loadTexts: snapshotRulesEVS.setDescription('The ID of the EVS on which this rule is defined.')
snapshotRulesName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulesName.setStatus('current')
if mibBuilder.loadTexts: snapshotRulesName.setDescription('The name of the snapshot rule. Each snapshot rule has a unique name.')
snapshotRulesQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulesQueueSize.setStatus('current')
if mibBuilder.loadTexts: snapshotRulesQueueSize.setDescription('The number of snapshots to keep before the system deletes the oldest snapshot.')
snapshotRulesVolumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRulesVolumeLabel.setStatus('current')
if mibBuilder.loadTexts: snapshotRulesVolumeLabel.setDescription('The label of the volume to which the snapshot rule relates.')
snapshotSchedulesTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6), )
if mibBuilder.loadTexts: snapshotSchedulesTable.setStatus('current')
if mibBuilder.loadTexts: snapshotSchedulesTable.setDescription('A table containing information about each snapshot schedule. The number of entries in this table is given by the value of snapshotScheduleNumber.')
snapshotSchedulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snapshotSchedulesEVS"), (0, "BLUEARC-SERVER-MIB", "snapshotSchedulesRuleName"), (0, "BLUEARC-SERVER-MIB", "snapshotSchedulesIndex"))
if mibBuilder.loadTexts: snapshotSchedulesEntry.setStatus('current')
if mibBuilder.loadTexts: snapshotSchedulesEntry.setDescription('Information about a snapshot schedule.')
snapshotSchedulesEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSchedulesEVS.setStatus('current')
if mibBuilder.loadTexts: snapshotSchedulesEVS.setDescription('The ID of the EVS on which this schedule is defined.')
snapshotSchedulesRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSchedulesRuleName.setStatus('current')
if mibBuilder.loadTexts: snapshotSchedulesRuleName.setDescription('The name of the parent snapshot rule that this schedule is associated with.')
snapshotSchedulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSchedulesIndex.setStatus('current')
if mibBuilder.loadTexts: snapshotSchedulesIndex.setDescription('An identifier for this snapshot schedule entry. This identifier ranges from 1 to the number of snapshot schedules configured for the parent snapshot rule.')
snapshotSchedulesDateTimeSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 8, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSchedulesDateTimeSpec.setStatus('current')
if mibBuilder.loadTexts: snapshotSchedulesDateTimeSpec.setDescription('The date and time specification for when this snapshot schedule will be run in cron format.')
nvramFsStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsNumber.setStatus('current')
if mibBuilder.loadTexts: nvramFsStatsNumber.setDescription('The number of volumes with NVRAM statistics.')
nvramFsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2), )
if mibBuilder.loadTexts: nvramFsStatsTable.setStatus('current')
if mibBuilder.loadTexts: nvramFsStatsTable.setDescription('A table of NVRAM data for a given file system.')
nvramFsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fsId"))
if mibBuilder.loadTexts: nvramFsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nvramFsStatsEntry.setDescription('Information about NVRAM on a given file system. The file system must be formatted, mounted, and NVRAM must be supported.')
fsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsId.setStatus('current')
if mibBuilder.loadTexts: fsId.setDescription('The id of the Span hosting the volume with which the NVRAM is associated.')
nvramFsStatsCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: nvramFsStatsCurrentUsage.setDescription('The amount of NVRAM currently in use for this volume.')
nvramFsStatsCheckpoints = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsCheckpoints.setStatus('current')
if mibBuilder.loadTexts: nvramFsStatsCheckpoints.setDescription('The total number of checkpoints which have occurred for the NVRAM assigned to this volume.')
nvramFsStatsActivityCheckpoints = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsActivityCheckpoints.setStatus('current')
if mibBuilder.loadTexts: nvramFsStatsActivityCheckpoints.setDescription('The number of checkpoints which have occurred for the NVRAM assigned to this volume as a result of file system activity (i.e. not timed checkpoints.')
nvramFsStatsWaitedAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsWaitedAllocs.setStatus('current')
if mibBuilder.loadTexts: nvramFsStatsWaitedAllocs.setDescription('The number of allocations for this file system for which a wait has occurred.')
nvramFsStatsWaitingAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramFsStatsWaitingAllocs.setStatus('current')
if mibBuilder.loadTexts: nvramFsStatsWaitingAllocs.setDescription('The number of allocations for this file system for which a wait is currently occurring.')
nvramPoolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6), )
if mibBuilder.loadTexts: nvramPoolStatsTable.setStatus('current')
if mibBuilder.loadTexts: nvramPoolStatsTable.setDescription('A table of NVRAM data for a given Cluster Node.')
nvramPoolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "clusterNodeId"))
if mibBuilder.loadTexts: nvramPoolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nvramPoolStatsEntry.setDescription('Information about NVRAM on a given Cluster Node.')
clusterNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNodeId.setStatus('current')
if mibBuilder.loadTexts: clusterNodeId.setDescription('The ID of the cluster node for which these pool statistics are reported.')
nvramPoolStatsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsSize.setStatus('current')
if mibBuilder.loadTexts: nvramPoolStatsSize.setDescription('The total size of nvram. If no formatted or mounted file system is found, or if nvram is not supported, this value will be reported as zero.')
nvramPoolStatsMaximumUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsMaximumUsed.setStatus('current')
if mibBuilder.loadTexts: nvramPoolStatsMaximumUsed.setDescription('The maximum amount of nvram used. If no formatted or mounted file system is found, or if nvram is not supported, this value will be reported as zero.')
nvramPoolStatsTotalCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsTotalCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: nvramPoolStatsTotalCurrentUsage.setDescription('The amount of nvram currently in use. If no formatted or mounted file system is found, or if nvram is not supported, this value will be reported as zero.')
nvramPoolStatsWaitedAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsWaitedAllocs.setStatus('current')
if mibBuilder.loadTexts: nvramPoolStatsWaitedAllocs.setDescription('The number of allocations, for the entire NVRAM pool, for which a wait has occurred.')
nvramPoolStatsWaitingAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 1, 3, 9, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramPoolStatsWaitingAllocs.setStatus('current')
if mibBuilder.loadTexts: nvramPoolStatsWaitingAllocs.setDescription('The number of allocations, for the entire NVRAM pool, for which a wait is occurring.')
ethOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutPkts.setStatus('obsolete')
if mibBuilder.loadTexts: ethOutPkts.setDescription('The number of packets successfully transmitted through the network interface. This object is obsolete. It has been grouped with other related statistics.')
ethInPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInPkts.setStatus('obsolete')
if mibBuilder.loadTexts: ethInPkts.setDescription('The number of packets successfully received through the network interface. This object is obsolete. It has been grouped with other related statistics.')
ethInstInOctetRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInstInOctetRate.setStatus('obsolete')
if mibBuilder.loadTexts: ethInstInOctetRate.setDescription('The instantaneous receive rate in bytes per second for data received through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethInstOutOctetRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInstOutOctetRate.setStatus('obsolete')
if mibBuilder.loadTexts: ethInstOutOctetRate.setDescription('The instantaneous transmission rate in bytes per second for data transmitted through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethPkInOctetRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPkInOctetRate.setStatus('obsolete')
if mibBuilder.loadTexts: ethPkInOctetRate.setDescription('The peak receive rate in bytes per second for data received through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethPkOutOctetRate = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPkOutOctetRate.setStatus('obsolete')
if mibBuilder.loadTexts: ethPkOutOctetRate.setDescription('The peak transmission rate in bytes per second for data transmitted through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethInFIFODrops = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInFIFODrops.setStatus('obsolete')
if mibBuilder.loadTexts: ethInFIFODrops.setDescription('The number of FIFO drops which have occurred on the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethCRCErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethCRCErrs.setStatus('obsolete')
if mibBuilder.loadTexts: ethCRCErrs.setDescription('The number of cyclic redundancy code errors which have occurred on the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethOutFIFOUflows = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutFIFOUflows.setStatus('obsolete')
if mibBuilder.loadTexts: ethOutFIFOUflows.setDescription('The number of transmit FIFO underflows which have occurred on the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethOutOneCollision = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutOneCollision.setStatus('obsolete')
if mibBuilder.loadTexts: ethOutOneCollision.setDescription('The number of one collisions which have occurred on the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethOutTwoCollision = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutTwoCollision.setStatus('obsolete')
if mibBuilder.loadTexts: ethOutTwoCollision.setDescription('The number of two to fifteen collisions which have occurred on the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethOutFifteenCollision = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutFifteenCollision.setStatus('obsolete')
if mibBuilder.loadTexts: ethOutFifteenCollision.setDescription('The number of more than fifteen collisions which have occurred on the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethInEvFIFOPktDrop = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInEvFIFOPktDrop.setStatus('obsolete')
if mibBuilder.loadTexts: ethInEvFIFOPktDrop.setDescription('The number received packets dropped by the event FIFO. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethEvFIFOMaxEvents = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethEvFIFOMaxEvents.setStatus('obsolete')
if mibBuilder.loadTexts: ethEvFIFOMaxEvents.setDescription('The maximum number of events in the event FIFO. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutPackets.setStatus('obsolete')
if mibBuilder.loadTexts: ethOutPackets.setDescription('The number of packets successfully transmitted through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethInPackets = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInPackets.setStatus('obsolete')
if mibBuilder.loadTexts: ethInPackets.setDescription('The number of packets successfully received through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethTotalPackets = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTotalPackets.setStatus('obsolete')
if mibBuilder.loadTexts: ethTotalPackets.setDescription('The total number of packets successfully transmitted and received through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutBytes.setStatus('obsolete')
if mibBuilder.loadTexts: ethOutBytes.setDescription('The number of bytes successfully transmitted through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethInBytes = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInBytes.setStatus('obsolete')
if mibBuilder.loadTexts: ethInBytes.setDescription('The number of bytes successfully received through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTotalBytes.setStatus('obsolete')
if mibBuilder.loadTexts: ethTotalBytes.setDescription('The total number of bytes successfully transmitted and received through the network interface. This object is obsolete. It now forms part of the table ethernetStatisticsTable.')
ethernetStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21), )
if mibBuilder.loadTexts: ethernetStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ethernetStatisticsTable.setDescription('A table of statistics for ethernet interfaces. The number of entries in this table is given by the value of ifNumber.')
ethernetStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ethernetStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ethernetStatisticsEntry.setDescription('Statistics for ethernet interfaces.')
ethernetInstInOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInstInOctetRate.setStatus('current')
if mibBuilder.loadTexts: ethernetInstInOctetRate.setDescription('The instantaneous receive rate in bytes per second for data received through the network interface.')
ethernetInstOutOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInstOutOctetRate.setStatus('current')
if mibBuilder.loadTexts: ethernetInstOutOctetRate.setDescription('The instantaneous transmission rate in bytes per second for data transmitted through the network interface.')
ethernetPkInOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPkInOctetRate.setStatus('current')
if mibBuilder.loadTexts: ethernetPkInOctetRate.setDescription('The peak receive rate in bytes per second for data received through the network interface.')
ethernetPkOutOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPkOutOctetRate.setStatus('current')
if mibBuilder.loadTexts: ethernetPkOutOctetRate.setDescription('The peak transmission rate in bytes per second for data transmitted through the network interface.')
ethernetInFIFODrops = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInFIFODrops.setStatus('current')
if mibBuilder.loadTexts: ethernetInFIFODrops.setDescription('The number of FIFO drops which have occurred on the network interface.')
ethernetCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetCRCErrs.setStatus('current')
if mibBuilder.loadTexts: ethernetCRCErrs.setDescription('The number of cyclic redundancy code errors which have occurred on the network interface.')
ethernetOutFIFOUflows = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutFIFOUflows.setStatus('current')
if mibBuilder.loadTexts: ethernetOutFIFOUflows.setDescription('The number of transmit FIFO underflows which have occurred on the network interface.')
ethernetOutOneCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutOneCollision.setStatus('current')
if mibBuilder.loadTexts: ethernetOutOneCollision.setDescription('The number of one collisions which have occurred on the network interface.')
ethernetOutTwoCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutTwoCollision.setStatus('current')
if mibBuilder.loadTexts: ethernetOutTwoCollision.setDescription('The number of two to fifteen collisions which have occurred on the network interface.')
ethernetOutFifteenCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutFifteenCollision.setStatus('current')
if mibBuilder.loadTexts: ethernetOutFifteenCollision.setDescription('The number of more than fifteen collisions which have occurred on the network interface.')
ethernetInEvFIFOPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInEvFIFOPktDrop.setStatus('current')
if mibBuilder.loadTexts: ethernetInEvFIFOPktDrop.setDescription('The number received packets dropped by the event FIFO.')
ethernetEvFIFOMaxEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetEvFIFOMaxEvents.setStatus('current')
if mibBuilder.loadTexts: ethernetEvFIFOMaxEvents.setDescription('The maximum number of events in the event FIFO.')
ethernetOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutPackets.setStatus('current')
if mibBuilder.loadTexts: ethernetOutPackets.setDescription('The number of packets successfully transmitted through the network interface.')
ethernetInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInPackets.setStatus('current')
if mibBuilder.loadTexts: ethernetInPackets.setDescription('The number of packets successfully received through the network interface.')
ethernetTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetTotalPackets.setStatus('current')
if mibBuilder.loadTexts: ethernetTotalPackets.setDescription('The total number of packets successfully transmitted and received through the network interface.')
ethernetOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetOutBytes.setStatus('current')
if mibBuilder.loadTexts: ethernetOutBytes.setDescription('The number of bytes successfully transmitted through the network interface.')
ethernetInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInBytes.setStatus('current')
if mibBuilder.loadTexts: ethernetInBytes.setDescription('The number of bytes successfully received through the network interface.')
ethernetTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetTotalBytes.setStatus('current')
if mibBuilder.loadTexts: ethernetTotalBytes.setDescription('The total number of bytes successfully transmitted and received through the network interface.')
pausedOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 1, 21, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pausedOffTime.setStatus('current')
if mibBuilder.loadTexts: pausedOffTime.setDescription('The total time in seconds that an interface has been paused by a connected switch. This value is only defined for aggregated interfaces; for cluster or management interfaces, it will be zero.')
tcpOpenConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOpenConns.setStatus('current')
if mibBuilder.loadTexts: tcpOpenConns.setDescription('The number of currently open TCP/IP connections.')
tcpMaxOpenConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxOpenConns.setStatus('current')
if mibBuilder.loadTexts: tcpMaxOpenConns.setDescription('The maximum number of open TCP/IP connections.')
tcpTotalOpenConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTotalOpenConns.setStatus('current')
if mibBuilder.loadTexts: tcpTotalOpenConns.setDescription('The total number of TCP/IP connections ever opened (cumulative).')
tcpFailedInConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpFailedInConns.setStatus('current')
if mibBuilder.loadTexts: tcpFailedInConns.setDescription('The number of failed incoming TCP/IP connections.')
tcpFailedOutConns = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpFailedOutConns.setStatus('current')
if mibBuilder.loadTexts: tcpFailedOutConns.setDescription('The number of failed outgoing TCP/IP connections.')
tcpOutSegments = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOutSegments.setStatus('obsolete')
if mibBuilder.loadTexts: tcpOutSegments.setDescription('The number of segments transmitted. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpInSegments = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInSegments.setStatus('obsolete')
if mibBuilder.loadTexts: tcpInSegments.setDescription('The number of segments received. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpReOutSegments = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpReOutSegments.setStatus('obsolete')
if mibBuilder.loadTexts: tcpReOutSegments.setDescription('The number of retransmitted segments. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpInvSegments = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInvSegments.setStatus('obsolete')
if mibBuilder.loadTexts: tcpInvSegments.setDescription('The number of invalid segments. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpIPInPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPInPkts.setDescription('The total number of IP packets received. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpIPOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPOutPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPOutPkts.setDescription('The total number of IP packets transmitted. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpIPInInvPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPInInvPkts.setDescription('The total number of invalid IP packets received. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpIPInInvHdrPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvHdrPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPInInvHdrPkts.setDescription('The total number of IP packets received with invalid header fields. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpIPInInvChksumPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvChksumPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPInInvChksumPkts.setDescription('The total number of IP packets received with invalid checksums. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpIPInInvNUcastAddrPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvNUcastAddrPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPInInvNUcastAddrPkts.setDescription('The total number of IP packets received with broadcast/multicast destination address errors. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpIPInInvUcastAddrPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvUcastAddrPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPInInvUcastAddrPkts.setDescription('The total number of IP packets received with unicast destination address errors. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpIPInInvSrcAddrPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvSrcAddrPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPInInvSrcAddrPkts.setDescription('The total number of IP packets received with source address errors. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpIPInInvOptionPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPInInvOptionPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPInInvOptionPkts.setDescription('The total number of IP packets received with invalid options. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpInOversizeSegmentErrs = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInOversizeSegmentErrs.setStatus('obsolete')
if mibBuilder.loadTexts: tcpInOversizeSegmentErrs.setDescription('The total number of received segments which are oversized This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpInInvChksumPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInInvChksumPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpInInvChksumPkts.setDescription('The total number of received TCP packets with invalid checksums. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpLinkPktDrops = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLinkPktDrops.setStatus('obsolete')
if mibBuilder.loadTexts: tcpLinkPktDrops.setDescription('The total number of packet dropped by the link layer. This object is obsolete. It now forms part of the table tcpStatisticsTable.')
tcpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22), )
if mibBuilder.loadTexts: tcpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tcpStatisticsTable.setDescription('A table of TCP statistics for ethernet interfaces. The number of entries in this table is given by the value of ifNumber.')
tcpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tcpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tcpStatisticsEntry.setDescription('TCP statistics for ethernet interfaces.')
tcpTxSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpTxSegments.setStatus('current')
if mibBuilder.loadTexts: tcpTxSegments.setDescription('The number of segments transmitted.')
tcpRxSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRxSegments.setStatus('current')
if mibBuilder.loadTexts: tcpRxSegments.setDescription('The number of segments received.')
tcpReTxSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpReTxSegments.setStatus('current')
if mibBuilder.loadTexts: tcpReTxSegments.setDescription('The number of retransmitted segments.')
tcpInvalidSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInvalidSegments.setStatus('current')
if mibBuilder.loadTexts: tcpInvalidSegments.setDescription('The number of invalid segments.')
tcpIPTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPTxPkts.setStatus('current')
if mibBuilder.loadTexts: tcpIPTxPkts.setDescription('The total number of IP packets transmitted.')
tcpIPRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxPkts.setStatus('current')
if mibBuilder.loadTexts: tcpIPRxPkts.setDescription('The total number of invalid IP packets received.')
tcpIPRxInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: tcpIPRxInvalidPkts.setDescription('The total number of invalid IP packets received.')
tcpIPRxInvalidHdrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidHdrPkts.setStatus('current')
if mibBuilder.loadTexts: tcpIPRxInvalidHdrPkts.setDescription('The total number of IP packets received with invalid header fields.')
tcpIPRxInvalidChksumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidChksumPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPRxInvalidChksumPkts.setDescription('The total number of IP packets received with invalid checksums. This object has been obsolete. It is now included in the object tcpIPMiscBadSegements.')
tcpIPRxInvalidNUcastAddrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidNUcastAddrPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPRxInvalidNUcastAddrPkts.setDescription('The total number of IP packets received with broadcast/multicast destination address errors. This object has been obsolete. It is now included in the object tcpIPMiscBadSegements.')
tcpIPRxInvalidUcastAddrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidUcastAddrPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPRxInvalidUcastAddrPkts.setDescription('The total number of IP packets received with unicast destination address errors. This object has been obsolete. It is now included in the object tcpIPMiscBadSegements.')
tcpIPRxInvalidSrcAddrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidSrcAddrPkts.setStatus('current')
if mibBuilder.loadTexts: tcpIPRxInvalidSrcAddrPkts.setDescription('The total number of IP packets received with source address errors.')
tcpIPRxInvalidOptionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPRxInvalidOptionPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tcpIPRxInvalidOptionPkts.setDescription('The total number of IP packets received with invalid options. This object has been obsolete. It is now included in the object tcpIPMiscBadSegements.')
tcpIPMiscBadSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIPMiscBadSegments.setStatus('current')
if mibBuilder.loadTexts: tcpIPMiscBadSegments.setDescription('The total number of invalid IP packets received. The faults include invalid checksum, unicast and non-unicast address, and option.')
tcpRxOversizeSegmentErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRxOversizeSegmentErrs.setStatus('obsolete')
if mibBuilder.loadTexts: tcpRxOversizeSegmentErrs.setDescription('The total number of received segments which are oversized. This object has been obsolete. It is now included in the object tcpRxInvalidSegments.')
tcpRxInvalidChksumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRxInvalidChksumPkts.setStatus('current')
if mibBuilder.loadTexts: tcpRxInvalidChksumPkts.setDescription('The total number of received segments which are oversized.')
tcpLinkPacketDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 2, 22, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLinkPacketDrops.setStatus('obsolete')
if mibBuilder.loadTexts: tcpLinkPacketDrops.setDescription('The total number of packet dropped by the link layer. This object has been obsolete. It is now included in the object tcpRxInvalidSegments.')
udpInShortPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInShortPkts.setStatus('obsolete')
if mibBuilder.loadTexts: udpInShortPkts.setDescription('The total number of short UDP packets received. This object is obsolete. It now forms part of the table udpStatisticsTable.')
udpInInvChksumPkts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInInvChksumPkts.setStatus('obsolete')
if mibBuilder.loadTexts: udpInInvChksumPkts.setDescription('The total number of UDP packets received with invalid checksums. This object is obsolete. It now forms part of the table udpStatisticsTable.')
udpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 3), )
if mibBuilder.loadTexts: udpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: udpStatisticsTable.setDescription('A table of UDP statistics for ethernet interfaces. The number of entries in this table is given by the value of ifNumber.')
udpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: udpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: udpStatisticsEntry.setDescription('UDP statistics for ethernet interfaces.')
udpRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpRxShortPkts.setStatus('current')
if mibBuilder.loadTexts: udpRxShortPkts.setDescription('The total number of short UDP packets received.')
udpRxInvChksumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpRxInvChksumPkts.setStatus('current')
if mibBuilder.loadTexts: udpRxInvChksumPkts.setDescription('The total number of UDP packets received with invalid checksums.')
tcpArpCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpArpCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: tcpArpCacheTimeout.setDescription('The ARP cache timeout in seconds.')
tcpBroadCastUsingZero = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpBroadCastUsingZero.setStatus('current')
if mibBuilder.loadTexts: tcpBroadCastUsingZero.setDescription('Broadcast using IP address 0. enabled(1) - broadcast using IP address 0. disabled(2) - DONT broadcast using IP address 0.')
tcpIgnoreICMPEcho = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIgnoreICMPEcho.setStatus('current')
if mibBuilder.loadTexts: tcpIgnoreICMPEcho.setDescription('Ignore ICMP echo requests. enabled(1) - ignore ICMP echo requests. disabled(2) - DONT ignore ICMP echo requests.')
tcpOffSubnetMTU = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOffSubnetMTU.setStatus('current')
if mibBuilder.loadTexts: tcpOffSubnetMTU.setDescription('The IP MTU for off-subnet transmits in bytes.')
tcpAllSubnetsMTU = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpAllSubnetsMTU.setStatus('current')
if mibBuilder.loadTexts: tcpAllSubnetsMTU.setDescription('Use the same IP MTU (1500 bytes) for all subnets of the connected network. enabled(1) - use the same MTU for all subnets. disabled(2) - DONT use the same MTU for all subnets.')
tcpKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpKeepAlive.setStatus('current')
if mibBuilder.loadTexts: tcpKeepAlive.setDescription('TCP keep alive option. enabled(1) - use TCP keep alive. disabled(2) - DONT use TCP keep alive.')
tcpKeepAliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 4, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpKeepAliveTimeout.setStatus('current')
if mibBuilder.loadTexts: tcpKeepAliveTimeout.setDescription('The TCP keep alive timeout in seconds.')
tcpDefWnd = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpDefWnd.setStatus('current')
if mibBuilder.loadTexts: tcpDefWnd.setDescription('Default window size in bytes.')
tcpDelayedAcks = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpDelayedAcks.setStatus('current')
if mibBuilder.loadTexts: tcpDelayedAcks.setDescription('Indicates whether the delayed ack setting is enabled or not.')
tcpSlowStartCA = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSlowStartCA.setStatus('current')
if mibBuilder.loadTexts: tcpSlowStartCA.setDescription('Indicates whether the slow start ca setting is enabled or not.')
tcpSSRestartDoubleMSS = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSSRestartDoubleMSS.setStatus('current')
if mibBuilder.loadTexts: tcpSSRestartDoubleMSS.setDescription('Indicates whether the SS restart double mss setting is enabled or not.')
tcpNagle = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpNagle.setStatus('current')
if mibBuilder.loadTexts: tcpNagle.setDescription('Indicates whether the nagle setting is enabled or not.')
tcpSillyWindowAvoid = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSillyWindowAvoid.setStatus('current')
if mibBuilder.loadTexts: tcpSillyWindowAvoid.setDescription('Indicates whether the silly window avoid setting is enabled or not.')
tcpOldAckStrategy = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOldAckStrategy.setStatus('current')
if mibBuilder.loadTexts: tcpOldAckStrategy.setDescription('Indicates whether the old ack strategy setting is enabled or not.')
tcpSlowStartOnIdle = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpSlowStartOnIdle.setStatus('current')
if mibBuilder.loadTexts: tcpSlowStartOnIdle.setDescription('Indicates whether the slow start on idle setting is enabled or not.')
tcpFastRetxFastRecovery = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpFastRetxFastRecovery.setStatus('current')
if mibBuilder.loadTexts: tcpFastRetxFastRecovery.setDescription('Indicates whether the fast retx fast recovery setting is enabled or not.')
tcpOldPushStrategy = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOldPushStrategy.setStatus('current')
if mibBuilder.loadTexts: tcpOldPushStrategy.setDescription('Indicates whether the old push strategy setting is enabled or not.')
tcpOffSubnetSlowStart = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOffSubnetSlowStart.setStatus('current')
if mibBuilder.loadTexts: tcpOffSubnetSlowStart.setDescription('Indicates whether the off subnet slow start setting is enabled or not.')
tcpUDPCheckSumGen = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpUDPCheckSumGen.setStatus('current')
if mibBuilder.loadTexts: tcpUDPCheckSumGen.setDescription('Indicates whether the UDP checksum generation setting is enabled or not.')
tcpIntelliSeg = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIntelliSeg.setStatus('current')
if mibBuilder.loadTexts: tcpIntelliSeg.setDescription('Indicates whether the intelliseg setting is enabled or not.')
winsPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: winsPrimaryIpAddr.setDescription('The IP address of the primary wins server if enabled or 0.0.0.0 if not enabled.')
winsSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winsSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: winsSecondaryIpAddr.setDescription('The IP address of the secondary wins server if enabled or 0.0.0.0 if not enabled.')
dnsServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerNumber.setStatus('current')
if mibBuilder.loadTexts: dnsServerNumber.setDescription('The number of configured DNS servers.')
dnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 2), )
if mibBuilder.loadTexts: dnsServerTable.setStatus('current')
if mibBuilder.loadTexts: dnsServerTable.setDescription('A table containing the IP addresses of each of the servers which have been configured as DNS servers for this system. The number of entries in this table is given by the value of dnsServerNumber.')
dnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "dnsServerIndex"))
if mibBuilder.loadTexts: dnsServerEntry.setStatus('current')
if mibBuilder.loadTexts: dnsServerEntry.setDescription('Information about the configured DNS server.')
dnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerIndex.setStatus('current')
if mibBuilder.loadTexts: dnsServerIndex.setDescription('A unique value for each configured DNS server. This value defines the DNS search ordering. Its value ranges between 1 and the value of dnsServerNumber.')
dnsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: dnsServerIpAddress.setDescription('The IP address of the DNS server.')
dnsSearchNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSearchNumber.setStatus('current')
if mibBuilder.loadTexts: dnsSearchNumber.setDescription('The number of DNS search list entries which are configured for the system.')
dnsSearchTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 4), )
if mibBuilder.loadTexts: dnsSearchTable.setStatus('current')
if mibBuilder.loadTexts: dnsSearchTable.setDescription('A table containing the DNS search list which is a list of domain suffices. The number of entries in this table is given by the value of dnsSearchNumber.')
dnsSearchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "dnsSearchIndex"))
if mibBuilder.loadTexts: dnsSearchEntry.setStatus('current')
if mibBuilder.loadTexts: dnsSearchEntry.setDescription('DNS search information.')
dnsSearchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSearchIndex.setStatus('current')
if mibBuilder.loadTexts: dnsSearchIndex.setDescription('A unique value for each configured DNS search string. This value defines the DNS search ordering. Its value ranges between 1 and the value of dnsSearchNumber.')
dnsSearchString = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSearchString.setStatus('current')
if mibBuilder.loadTexts: dnsSearchString.setDescription('The DNS search string.')
nameServiceNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameServiceNumber.setStatus('current')
if mibBuilder.loadTexts: nameServiceNumber.setDescription('The number of name services configured to be used for hostname lookups.')
nameServiceTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 2), )
if mibBuilder.loadTexts: nameServiceTable.setStatus('current')
if mibBuilder.loadTexts: nameServiceTable.setDescription('A table containing the name services which have been configured for hostname lookups. The number of entries in this table is given by the value of nameServiceNumber.')
nameServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nameServiceOrder"))
if mibBuilder.loadTexts: nameServiceEntry.setStatus('current')
if mibBuilder.loadTexts: nameServiceEntry.setDescription('Information about the name service.')
nameServiceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameServiceOrder.setStatus('current')
if mibBuilder.loadTexts: nameServiceOrder.setDescription('The order in which the lookup is made. Its value ranges between 1 and the value of nameServiceNumber.')
nameServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dns", 1), ("wins", 2), ("nis", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameServiceType.setStatus('current')
if mibBuilder.loadTexts: nameServiceType.setDescription('Indicates the configured service type. dns(1) - domain name service. wins(2) - the windows service. nis(3) - network information service.')
nisEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisEnabled.setStatus('current')
if mibBuilder.loadTexts: nisEnabled.setDescription('Indicates whether NIS is enabled on this system or not.')
nisDomain = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisDomain.setStatus('current')
if mibBuilder.loadTexts: nisDomain.setDescription('The NIS domain name.')
nisCurrentMaster = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisCurrentMaster.setStatus('current')
if mibBuilder.loadTexts: nisCurrentMaster.setDescription('The current NIS master host address.')
nisServerBroadcastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerBroadcastEnabled.setStatus('current')
if mibBuilder.loadTexts: nisServerBroadcastEnabled.setDescription('Indicates whether NIS should broadcast for NIS servers on the local network instead of using the configured list of servers.')
nisVerificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisVerificationEnabled.setStatus('current')
if mibBuilder.loadTexts: nisVerificationEnabled.setDescription('Indicates whether NIS verification is enabled or not.')
nisTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisTimeout.setStatus('current')
if mibBuilder.loadTexts: nisTimeout.setDescription('NIS timeout value in milliseconds.')
nisRebindInterval = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisRebindInterval.setStatus('current')
if mibBuilder.loadTexts: nisRebindInterval.setDescription('NIS rebind in minutes.')
nisUserGroupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisUserGroupTimeout.setStatus('current')
if mibBuilder.loadTexts: nisUserGroupTimeout.setDescription('NIS user/group/netgroup timeout value in minutes.')
nisServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerNumber.setStatus('current')
if mibBuilder.loadTexts: nisServerNumber.setDescription('The number of NIS servers which have been configured. A value of -1 indicates this information could not be determined.')
nisServerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10), )
if mibBuilder.loadTexts: nisServerTable.setStatus('current')
if mibBuilder.loadTexts: nisServerTable.setDescription('A table containing information about each NIS server. The number of entries in this table is given by the value of nisServerNumber.')
nisServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nisServerIndex"))
if mibBuilder.loadTexts: nisServerEntry.setStatus('current')
if mibBuilder.loadTexts: nisServerEntry.setDescription('Information about each configured NIS server.')
nisServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerIndex.setStatus('current')
if mibBuilder.loadTexts: nisServerIndex.setDescription('A unique value for each configured NIS server. Its value ranges between 1 and the value of nisServerNumber.')
nisServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: nisServerIpAddress.setDescription('The IP address of the NIS server.')
nisServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 2, 7, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nisServerPriority.setStatus('current')
if mibBuilder.loadTexts: nisServerPriority.setDescription('The priority assigned to the NIS server. A value of -1 indicates this information could not be determined.')
securityMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mixed", 1), ("unix", 2), ("nosecurity", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityMode.setStatus('current')
if mibBuilder.loadTexts: securityMode.setDescription('Indicates the configured security model. mixed(1) - Windows or UNIX environments. unix(2) - primarily UNIX environments. nosecurity(3) - all requests granted.')
securityDomain = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityDomain.setStatus('current')
if mibBuilder.loadTexts: securityDomain.setDescription('The servers configured domain name.')
shareNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareNumber.setStatus('current')
if mibBuilder.loadTexts: shareNumber.setDescription('The number of CIFS shares which are configured for the system.')
shareTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2), )
if mibBuilder.loadTexts: shareTable.setStatus('obsolete')
if mibBuilder.loadTexts: shareTable.setDescription('A table containing the CIFS share configuration for the system. The number of entries in this table is given by the value of shareNumber.')
shareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "shareName"))
if mibBuilder.loadTexts: shareEntry.setStatus('obsolete')
if mibBuilder.loadTexts: shareEntry.setDescription('CIFS share information.')
shareName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareName.setStatus('obsolete')
if mibBuilder.loadTexts: shareName.setDescription('The name of the CIFS share. Each share has a unique name.')
sharePath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharePath.setStatus('obsolete')
if mibBuilder.loadTexts: sharePath.setDescription('The path to the CIFS share.')
shareComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareComment.setStatus('obsolete')
if mibBuilder.loadTexts: shareComment.setDescription('An optional comment assigned by the creator of the CIFS share to assist in identifying it. NOTE: This will be a zero length string if the creator has not assigned a comment to it.')
shareUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareUsers.setStatus('obsolete')
if mibBuilder.loadTexts: shareUsers.setDescription('The number of users currently accessing the CIFS share.')
shareWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareWWN.setStatus('obsolete')
if mibBuilder.loadTexts: shareWWN.setDescription('The world wide name (WWN) of the system drive the CIFS share is associated with. This will identify the File System on which the volume associated with the share is hosted.')
shareLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareLUN.setStatus('obsolete')
if mibBuilder.loadTexts: shareLUN.setDescription('The logical unit number (LUN) of the system drive the CIFS share is associated with. This now has no meaning and is set to zero.')
sharePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharePartitionID.setStatus('obsolete')
if mibBuilder.loadTexts: sharePartitionID.setDescription('The partition ID of the volume the CIFS share is associated with. This now has no meaning and is set to zero.')
shareMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareMaxUsers.setStatus('obsolete')
if mibBuilder.loadTexts: shareMaxUsers.setDescription('The maximum number of users which are permitted access to the CIFS share simultaneously. NOTE: this value is set to -1 if the number of maximum number of simultaneous users is unlimited.')
cifsShareTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3), )
if mibBuilder.loadTexts: cifsShareTable.setStatus('current')
if mibBuilder.loadTexts: cifsShareTable.setDescription('A table containing the CIFS share configuration for the system. The number of entries in this table is given by the value of shareNumber.')
cifsShareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "cifsShareEvsId"), (0, "BLUEARC-SERVER-MIB", "cifsShareName"))
if mibBuilder.loadTexts: cifsShareEntry.setStatus('current')
if mibBuilder.loadTexts: cifsShareEntry.setDescription('CIFS share information.')
cifsShareEvsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareEvsId.setStatus('current')
if mibBuilder.loadTexts: cifsShareEvsId.setDescription('The ID of the Enterprise Virtual Server to which this share belongs.')
cifsShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareName.setStatus('current')
if mibBuilder.loadTexts: cifsShareName.setDescription('The name of the CIFS share. Each share has a name unique to the EVS to which it belongs.')
cifsSharePath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSharePath.setStatus('current')
if mibBuilder.loadTexts: cifsSharePath.setDescription('The path to the CIFS share.')
cifsShareComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareComment.setStatus('current')
if mibBuilder.loadTexts: cifsShareComment.setDescription('An optional comment assigned by the creator of the CIFS share to assist in identifying it. NOTE: This will be a zero length string if the creator has not assigned a comment to it.')
cifsShareUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareUsers.setStatus('current')
if mibBuilder.loadTexts: cifsShareUsers.setDescription('The number of users currently accessing the CIFS share.')
cifsShareMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareMaxUsers.setStatus('current')
if mibBuilder.loadTexts: cifsShareMaxUsers.setDescription('The maximum number of users which are permitted access to the CIFS share simultaneously. NOTE: this value is set to -1 if the maximum number of simultaneous users is unlimited.')
cifsShareSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsShareSpanId.setStatus('current')
if mibBuilder.loadTexts: cifsShareSpanId.setDescription('The ID of the volume the CIFS share is associated with.')
shareAccessNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessNumber.setStatus('current')
if mibBuilder.loadTexts: shareAccessNumber.setDescription('The number of CIFS share access entries which are configured for the system.')
shareAccessTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2), )
if mibBuilder.loadTexts: shareAccessTable.setStatus('current')
if mibBuilder.loadTexts: shareAccessTable.setDescription('A table containing the CIFS share access configuration for the system. The number of entries in this table is given by the value of shareAccessNumber.')
shareAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "shareAccessIndex"), (0, "BLUEARC-SERVER-MIB", "shareAccessShareName"))
if mibBuilder.loadTexts: shareAccessEntry.setStatus('current')
if mibBuilder.loadTexts: shareAccessEntry.setDescription('CIFS share access information.')
shareAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessIndex.setStatus('current')
if mibBuilder.loadTexts: shareAccessIndex.setDescription('An index for each access entry which exists for a CIFS share. For Si7000 and Si8000 families of SiServers, this value ranges between 1 and the number of access entries which exist for the share. The value is the ID of the EVS of the CIFS share for the access configuration.')
shareAccessShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessShareName.setStatus('current')
if mibBuilder.loadTexts: shareAccessShareName.setDescription('The name of the CIFS share that the access configuration entry exists for.')
shareAccessName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessName.setStatus('current')
if mibBuilder.loadTexts: shareAccessName.setDescription('The name of the user or group which has been granted access.')
shareAccessPerms = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAccess", 1), ("read", 2), ("change", 3), ("fullControl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareAccessPerms.setStatus('current')
if mibBuilder.loadTexts: shareAccessPerms.setDescription('The access permissions the user or group has been granted to the CIFS share.')
cifsClients = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsClients.setStatus('obsolete')
if mibBuilder.loadTexts: cifsClients.setDescription('The total number of CIFS clients since power up.')
cifsMkdirCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMkdirCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsMkdirCalls.setDescription("The total number of 'Mkdir' CIFS calls received since power up.")
cifsRmdirCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsRmdirCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsRmdirCalls.setDescription("The total number of 'Rmdir' CIFS calls received since power up.")
cifsOpenCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpenCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsOpenCalls.setDescription("The total number of 'Open' CIFS calls received since power up.")
cifsCreateCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCreateCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsCreateCalls.setDescription("The total number of 'Create' CIFS calls received since power up.")
cifsCloseCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCloseCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsCloseCalls.setDescription("The total number of 'Close' CIFS calls received since power up.")
cifsFlushCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsFlushCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsFlushCalls.setDescription("The total number of 'Flush' CIFS calls received since power up.")
cifsUnlinkCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsUnlinkCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsUnlinkCalls.setDescription("The total number of 'Unlink' CIFS calls received since power up.")
cifsRenameCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsRenameCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsRenameCalls.setDescription("The total number of 'Rename' CIFS calls received since power up.")
cifsGetatrCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsGetatrCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsGetatrCalls.setDescription("The total number of 'Getatr' CIFS calls received since power up.")
cifsSetatrCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSetatrCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsSetatrCalls.setDescription("The total number of 'Setatr' CIFS calls received since power up.")
cifsReadCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReadCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsReadCalls.setDescription("The total number of 'Read' CIFS calls received since power up.")
cifsWriteCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWriteCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsWriteCalls.setDescription("The total number of 'Write' CIFS calls received since power up.")
cifsMknewCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMknewCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsMknewCalls.setDescription("The total number of 'Mknew' CIFS calls received since power up.")
cifsChkpthCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsChkpthCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsChkpthCalls.setDescription("The total number of 'Chkpth' CIFS calls received since power up.")
cifsLseekCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLseekCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsLseekCalls.setDescription("The total number of 'Lseek' CIFS calls received since power up.")
cifsReadBrawCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReadBrawCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsReadBrawCalls.setDescription("The total number of 'ReadBraw' CIFS calls received since power up.")
cifsWriteBrawCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWriteBrawCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsWriteBrawCalls.setDescription("The total number of 'WriteBraw' CIFS calls received since power up.")
cifsLockingXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLockingXCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsLockingXCalls.setDescription("The total number of 'LockingX' CIFS calls received since power up.")
cifsTransCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTransCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsTransCalls.setDescription("The total number of 'Trans' CIFS calls received since power up.")
cifsEchoCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsEchoCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsEchoCalls.setDescription("The total number of 'Echo' CIFS calls received since power up.")
cifsWriteCloseCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWriteCloseCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsWriteCloseCalls.setDescription("The total number of 'WriteClose' CIFS calls received since power up.")
cifsOpenXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpenXCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsOpenXCalls.setDescription("The total number of 'OpenX' CIFS calls received since power up.")
cifsReadXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReadXCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsReadXCalls.setDescription("The total number of 'ReadX' CIFS calls received since power up.")
cifsWriteXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWriteXCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsWriteXCalls.setDescription("The total number of 'WriteX' CIFS calls received since power up.")
cifsTrans2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTrans2Calls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsTrans2Calls.setDescription("The total number of 'Trans2' CIFS calls received since power up.")
cifsFindCloseCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsFindCloseCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsFindCloseCalls.setDescription("The total number of 'FindClose' CIFS calls received since power up.")
cifsTdisCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTdisCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsTdisCalls.setDescription("The total number of 'Tdis' CIFS calls received since power up.")
cifsNegProtCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNegProtCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsNegProtCalls.setDescription("The total number of 'NegProt' CIFS calls received since power up.")
cifsSessSetupXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSessSetupXCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsSessSetupXCalls.setDescription("The total number of 'SessSetupX' CIFS calls received since power up.")
cifsUlogoffXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsUlogoffXCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsUlogoffXCalls.setDescription("The total number of 'UlogoffX' CIFS calls received since power up.")
cifsTconXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTconXCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsTconXCalls.setDescription("The total number of 'TconX' CIFS calls received since power up.")
cifsDskattrCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDskattrCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsDskattrCalls.setDescription("The total number of 'Dskattr' CIFS calls received since power up.")
cifsSearchCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSearchCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsSearchCalls.setDescription("The total number of 'Search' CIFS calls received since power up.")
cifsNTtransCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTtransCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsNTtransCalls.setDescription("The total number of 'NTtrans' CIFS calls received since power up.")
cifsNTtranssCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTtranssCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsNTtranssCalls.setDescription("The total number of 'NTtranss' CIFS calls received since power up.")
cifsNTcreateXCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTcreateXCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsNTcreateXCalls.setDescription("The total number of 'NTcreateX' CIFS calls received since power up.")
cifsNTcancelCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTcancelCalls.setStatus('obsolete')
if mibBuilder.loadTexts: cifsNTcancelCalls.setDescription("The total number of 'NTcancel' CIFS calls received since power up.")
cifsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39), )
if mibBuilder.loadTexts: cifsStatsTable.setStatus('current')
if mibBuilder.loadTexts: cifsStatsTable.setDescription('The statistics for the CIFS service. The number of entries in this table is given by the value of cifsStatsClusterNode.')
cifsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "cifsStatsClusterNode"))
if mibBuilder.loadTexts: cifsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cifsStatsEntry.setDescription('The statistics for the CIFS service.')
cifsStatsClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsStatsClusterNode.setStatus('current')
if mibBuilder.loadTexts: cifsStatsClusterNode.setDescription('The Cluster Node for this value.')
clients = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clients.setStatus('current')
if mibBuilder.loadTexts: clients.setDescription('The total number of CIFS clients since power up.')
mkdirCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mkdirCalls.setStatus('current')
if mibBuilder.loadTexts: mkdirCalls.setDescription("The total number of 'Mkdir' CIFS calls received since power up.")
rmdirCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdirCalls.setStatus('current')
if mibBuilder.loadTexts: rmdirCalls.setDescription("The total number of 'Rmdir' CIFS calls received since power up.")
openCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openCalls.setStatus('current')
if mibBuilder.loadTexts: openCalls.setDescription("The total number of 'Open' CIFS calls received since power up.")
createCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: createCalls.setStatus('current')
if mibBuilder.loadTexts: createCalls.setDescription("The total number of 'Create' CIFS calls received since power up.")
closeCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: closeCalls.setStatus('current')
if mibBuilder.loadTexts: closeCalls.setDescription("The total number of 'Close' CIFS calls received since power up.")
flushCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flushCalls.setStatus('current')
if mibBuilder.loadTexts: flushCalls.setDescription("The total number of 'Flush' CIFS calls received since power up.")
unlinkCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unlinkCalls.setStatus('current')
if mibBuilder.loadTexts: unlinkCalls.setDescription("The total number of 'Unlink' CIFS calls received since power up.")
renameCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: renameCalls.setStatus('current')
if mibBuilder.loadTexts: renameCalls.setDescription("The total number of 'Rename' CIFS calls received since power up.")
getatrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getatrCalls.setStatus('current')
if mibBuilder.loadTexts: getatrCalls.setDescription("The total number of 'Getatr' CIFS calls received since power up.")
setatrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setatrCalls.setStatus('current')
if mibBuilder.loadTexts: setatrCalls.setDescription("The total number of 'Setatr' CIFS calls received since power up.")
readCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCalls.setStatus('current')
if mibBuilder.loadTexts: readCalls.setDescription("The total number of 'Read' CIFS calls received since power up.")
writeCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeCalls.setStatus('current')
if mibBuilder.loadTexts: writeCalls.setDescription("The total number of 'Write' CIFS calls received since power up.")
mknewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mknewCalls.setStatus('current')
if mibBuilder.loadTexts: mknewCalls.setDescription("The total number of 'Mknew' CIFS calls received since power up.")
chkpthCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chkpthCalls.setStatus('current')
if mibBuilder.loadTexts: chkpthCalls.setDescription("The total number of 'Chkpth' CIFS calls received since power up.")
lseekCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseekCalls.setStatus('current')
if mibBuilder.loadTexts: lseekCalls.setDescription("The total number of 'Lseek' CIFS calls received since power up.")
readBrawCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readBrawCalls.setStatus('current')
if mibBuilder.loadTexts: readBrawCalls.setDescription("The total number of 'ReadBraw' CIFS calls received since power up.")
writeBrawCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeBrawCalls.setStatus('current')
if mibBuilder.loadTexts: writeBrawCalls.setDescription("The total number of 'WriteBraw' CIFS calls received since power up.")
lockingXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockingXCalls.setStatus('current')
if mibBuilder.loadTexts: lockingXCalls.setDescription("The total number of 'LockingX' CIFS calls received since power up.")
transCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transCalls.setStatus('current')
if mibBuilder.loadTexts: transCalls.setDescription("The total number of 'Trans' CIFS calls received since power up.")
echoCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: echoCalls.setStatus('current')
if mibBuilder.loadTexts: echoCalls.setDescription("The total number of 'Echo' CIFS calls received since power up.")
writeCloseCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeCloseCalls.setStatus('current')
if mibBuilder.loadTexts: writeCloseCalls.setDescription("The total number of 'WriteClose' CIFS calls received since power up.")
openXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openXCalls.setStatus('current')
if mibBuilder.loadTexts: openXCalls.setDescription("The total number of 'OpenX' CIFS calls received since power up.")
readXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readXCalls.setStatus('current')
if mibBuilder.loadTexts: readXCalls.setDescription("The total number of 'ReadX' CIFS calls received since power up.")
writeXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeXCalls.setStatus('current')
if mibBuilder.loadTexts: writeXCalls.setDescription("The total number of 'WriteX' CIFS calls received since power up.")
trans2Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trans2Calls.setStatus('current')
if mibBuilder.loadTexts: trans2Calls.setDescription("The total number of 'Trans2' CIFS calls received since power up.")
findCloseCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: findCloseCalls.setStatus('current')
if mibBuilder.loadTexts: findCloseCalls.setDescription("The total number of 'FindClose' CIFS calls received since power up.")
tdisCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdisCalls.setStatus('current')
if mibBuilder.loadTexts: tdisCalls.setDescription("The total number of 'Tdis' CIFS calls received since power up.")
negProtCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: negProtCalls.setStatus('current')
if mibBuilder.loadTexts: negProtCalls.setDescription("The total number of 'NegProt' CIFS calls received since power up.")
sessSetupXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessSetupXCalls.setStatus('current')
if mibBuilder.loadTexts: sessSetupXCalls.setDescription("The total number of 'SessSetupX' CIFS calls received since power up.")
ulogoffXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulogoffXCalls.setStatus('current')
if mibBuilder.loadTexts: ulogoffXCalls.setDescription("The total number of 'UlogoffX' CIFS calls received since power up.")
tconXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tconXCalls.setStatus('current')
if mibBuilder.loadTexts: tconXCalls.setDescription("The total number of 'TconX' CIFS calls received since power up.")
dskattrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskattrCalls.setStatus('current')
if mibBuilder.loadTexts: dskattrCalls.setDescription("The total number of 'Dskattr' CIFS calls received since power up.")
searchCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: searchCalls.setStatus('current')
if mibBuilder.loadTexts: searchCalls.setDescription("The total number of 'Search' CIFS calls received since power up.")
ntTransCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTransCalls.setStatus('current')
if mibBuilder.loadTexts: ntTransCalls.setDescription("The total number of 'NTtrans' CIFS calls received since power up.")
ntTranssCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTranssCalls.setStatus('current')
if mibBuilder.loadTexts: ntTranssCalls.setDescription("The total number of 'NTtranss' CIFS calls received since power up.")
ntCreateXCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCreateXCalls.setStatus('current')
if mibBuilder.loadTexts: ntCreateXCalls.setDescription("The total number of 'NTcreateX' CIFS calls received since power up.")
ntCancelCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 3, 39, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCancelCalls.setStatus('current')
if mibBuilder.loadTexts: ntCancelCalls.setDescription("The total number of 'NTcancel' CIFS calls received since power up.")
cifsServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsServiceEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsServiceEnabled.setDescription('Indicates whether the CIFS service is enabled or not.')
cifsServiceMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 2, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsServiceMaxUsers.setStatus('current')
if mibBuilder.loadTexts: cifsServiceMaxUsers.setDescription('The maximum number of CIFS users the service will allow.')
nfsExportNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportNumber.setStatus('current')
if mibBuilder.loadTexts: nfsExportNumber.setDescription('The number of NFS exports which are configured for the system.')
nfsExportTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2), )
if mibBuilder.loadTexts: nfsExportTable.setStatus('obsolete')
if mibBuilder.loadTexts: nfsExportTable.setDescription('A table containing the NFS export configuration for the system. The number of entries in this table is given by the value of nfsExportNumber. This object is now obsolete, and is re-implemented as a table indexed by EVS and name.')
nfsExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsExportIndex"))
if mibBuilder.loadTexts: nfsExportEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nfsExportEntry.setDescription('NFS export information.')
nfsExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportIndex.setStatus('obsolete')
if mibBuilder.loadTexts: nfsExportIndex.setDescription('A unique value for each NFS export configuration in this system. Its value ranges between 1 and the value of nfsExportNumber. This object is now obsolete, and is re-implemented as a table indexed by EVS and name.')
nfsExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportName.setStatus('obsolete')
if mibBuilder.loadTexts: nfsExportName.setDescription('The name of the NFS export. Each export has a unique name. This object is now obsolete, and is re-implemented as a table indexed by EVS and name.')
nfsExportPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportPath.setStatus('obsolete')
if mibBuilder.loadTexts: nfsExportPath.setDescription('The path to the NFS export.')
nfsExportNumberMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportNumberMounts.setStatus('obsolete')
if mibBuilder.loadTexts: nfsExportNumberMounts.setDescription('The number of mounts of the NFS export. This object is obsolete. It could not be measured. This object is now obsolete, and is re-implemented as a table indexed by EVS and name.')
nfsExportWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportWWN.setStatus('obsolete')
if mibBuilder.loadTexts: nfsExportWWN.setDescription('The world wide name (WWN) of the system drive the NFS export is associated with. This object is now obsolete, and is re-implemented as a table indexed by EVS and name.')
nfsExportLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportLUN.setStatus('obsolete')
if mibBuilder.loadTexts: nfsExportLUN.setDescription('The logical unit number (LUN) of the system drive the NFS export is associated with. This now has no meaning and is set to zero. This object is now obsolete, and is re-implemented as a table indexed by EVS and name.')
nfsExportPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportPartitionID.setStatus('obsolete')
if mibBuilder.loadTexts: nfsExportPartitionID.setDescription('The partition ID of the volume the NFS export is associated with. This now has no meaning and is set to zero. This object is now obsolete, and is re-implemented as a table indexed by EVS and name.')
nfsExportsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3), )
if mibBuilder.loadTexts: nfsExportsTable.setStatus('current')
if mibBuilder.loadTexts: nfsExportsTable.setDescription('A table containing the NFS export configuration for the system. The number of entries in this table is given by the value of nfsExportNumber.')
nfsExportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsExportsEvs"), (0, "BLUEARC-SERVER-MIB", "nfsExportsName"))
if mibBuilder.loadTexts: nfsExportsEntry.setStatus('current')
if mibBuilder.loadTexts: nfsExportsEntry.setDescription('NFS export information.')
nfsExportsEvs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportsEvs.setStatus('current')
if mibBuilder.loadTexts: nfsExportsEvs.setDescription('The ID of the EVS the NFS export is associated with.')
nfsExportsName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportsName.setStatus('current')
if mibBuilder.loadTexts: nfsExportsName.setDescription('The name of the NFS export. Each export has a unique name.')
nfsExportsPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportsPath.setStatus('current')
if mibBuilder.loadTexts: nfsExportsPath.setDescription('The path to the NFS export.')
nfsExportsDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsExportsDeviceId.setStatus('current')
if mibBuilder.loadTexts: nfsExportsDeviceId.setDescription('The device ID of the volume the NFS export is associated with.')
nfsUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserNumber.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserNumber.setDescription('The number of NFS users which are configured for the system.')
nfsUserTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: nfsUserTable.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserTable.setDescription('A table containing the NFS user configuration for the system. The number of entries in this table is given by the value of nfsUserNumber.')
nfsUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsUserName"))
if mibBuilder.loadTexts: nfsUserEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserEntry.setDescription('NFS user information.')
nfsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserName.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserName.setDescription('The name of the UNIX user.')
nfsUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserID.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserID.setDescription('The ID of the UNIX user.')
nfsUserMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingNumber.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserMappingNumber.setDescription('The number of NFS to NT user mappings which are configured for the system.')
nfsUserMappingTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2), )
if mibBuilder.loadTexts: nfsUserMappingTable.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserMappingTable.setDescription('A table containing the NFS to NT user mapping configuration for the system. The number of entries in this table is given by the value of nfsUserMappingNumber.')
nfsUserMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsUserMappingUnixUserName"))
if mibBuilder.loadTexts: nfsUserMappingEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserMappingEntry.setDescription('NFS to NT user mapping information.')
nfsUserMappingUnixUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingUnixUserName.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserMappingUnixUserName.setDescription('The name of the UNIX user for which the mapping exists.')
nfsUserMappingUnixUserIDValid = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingUnixUserIDValid.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserMappingUnixUserIDValid.setDescription('Indicates whether the UNIX user ID is configured user in the nfsUserTable.')
nfsUserMappingUnixUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingUnixUserID.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserMappingUnixUserID.setDescription('The UNIX user ID.')
nfsUserMappingNtUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingNtUserName.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserMappingNtUserName.setDescription('The name of the NT user for which the mapping exists.')
nfsUserMappingNtUserDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsUserMappingNtUserDomainName.setStatus('obsolete')
if mibBuilder.loadTexts: nfsUserMappingNtUserDomainName.setDescription('The NT domain name for which the mapping exists.')
nfsGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupNumber.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupNumber.setDescription('The number of NFS groups configured for the system.')
nfsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 2), )
if mibBuilder.loadTexts: nfsGroupTable.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupTable.setDescription('A table containing the NFS group configuration for the system. The number of entries in this table is given by the value of nfsGroupNumber.')
nfsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsGroupName"))
if mibBuilder.loadTexts: nfsGroupEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupEntry.setDescription('NFS group information.')
nfsGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupName.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupName.setDescription('The name of the UNIX group.')
nfsGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupID.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupID.setDescription('The ID of the UNIX group.')
nfsGroupMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingNumber.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupMappingNumber.setDescription('The number of NFS to NT group mappings which are configured for the system.')
nfsGroupMappingTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2), )
if mibBuilder.loadTexts: nfsGroupMappingTable.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupMappingTable.setDescription('A table containing the NFS to NT group mapping configuration for the system. The number of entries in this table is given by the value of nfsGroupMappingNumber.')
nfsGroupMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsGroupMappingUnixGroupName"))
if mibBuilder.loadTexts: nfsGroupMappingEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupMappingEntry.setDescription('NFS to NT group mapping information.')
nfsGroupMappingUnixGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingUnixGroupName.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupMappingUnixGroupName.setDescription('The name of the UNIX group for which the mapping exists.')
nfsGroupMappingUnixGroupIDValid = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingUnixGroupIDValid.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupMappingUnixGroupIDValid.setDescription('Indicates whether the UNIX group ID is configured user in the nfsGroupTable.')
nfsGroupMappingUnixGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingUnixGroupID.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupMappingUnixGroupID.setDescription('The UNIX group ID.')
nfsGroupMappingNtGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingNtGroupName.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupMappingNtGroupName.setDescription('The name of the NT group for which the mapping exists.')
nfsGroupMappingNtGroupDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsGroupMappingNtGroupDomainName.setStatus('obsolete')
if mibBuilder.loadTexts: nfsGroupMappingNtGroupDomainName.setDescription('The NT domain name for which the mapping exists.')
null2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: null2Calls.setStatus('obsolete')
if mibBuilder.loadTexts: null2Calls.setDescription("The total number of 'Null' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
getAttr2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getAttr2Calls.setStatus('obsolete')
if mibBuilder.loadTexts: getAttr2Calls.setDescription("The total number of 'GetAttr' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
setAttr2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAttr2Calls.setStatus('obsolete')
if mibBuilder.loadTexts: setAttr2Calls.setDescription("The total number of 'SetAttr' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
rootCalls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootCalls.setStatus('obsolete')
if mibBuilder.loadTexts: rootCalls.setDescription("The total number of 'Root' calls received since power up NOTE: this variable is not used/implemented. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
lookup2Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lookup2Calls.setStatus('obsolete')
if mibBuilder.loadTexts: lookup2Calls.setDescription("The total number of 'Lookup' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
readLink2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readLink2.setStatus('obsolete')
if mibBuilder.loadTexts: readLink2.setDescription("The total number of 'ReadLink' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
read2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: read2.setStatus('obsolete')
if mibBuilder.loadTexts: read2.setDescription("The total number of 'Read' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
writeCache = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeCache.setStatus('obsolete')
if mibBuilder.loadTexts: writeCache.setDescription("The total number of 'Write Cache' calls received since power up. NOTE : this variable is not used/implemented. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
write2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: write2.setStatus('obsolete')
if mibBuilder.loadTexts: write2.setDescription("The total number of 'Write' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
create2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: create2.setStatus('obsolete')
if mibBuilder.loadTexts: create2.setDescription("The total number of 'Create' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
remove2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remove2.setStatus('obsolete')
if mibBuilder.loadTexts: remove2.setDescription("The total number of 'Remove' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
rename2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rename2.setStatus('obsolete')
if mibBuilder.loadTexts: rename2.setDescription("The total number of 'Rename' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
link2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: link2.setStatus('obsolete')
if mibBuilder.loadTexts: link2.setDescription("The total number of 'Link' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
symLink2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symLink2.setStatus('obsolete')
if mibBuilder.loadTexts: symLink2.setDescription("The total number of 'Sym Link' calls received for NFS version 2 since power up.")
mkDir2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mkDir2.setStatus('obsolete')
if mibBuilder.loadTexts: mkDir2.setDescription("The total number of 'MkDir' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
rmDir2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDir2.setStatus('obsolete')
if mibBuilder.loadTexts: rmDir2.setDescription("The total number of 'RmDir' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
readDir2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readDir2.setStatus('obsolete')
if mibBuilder.loadTexts: readDir2.setDescription("The total number of 'ReadDir' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
statFS2 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statFS2.setStatus('obsolete')
if mibBuilder.loadTexts: statFS2.setDescription("The total number of 'StatFS' calls received for NFS version 2 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
nfsV2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19), )
if mibBuilder.loadTexts: nfsV2StatsTable.setStatus('current')
if mibBuilder.loadTexts: nfsV2StatsTable.setDescription('The statistics for the NFS version 2 service. The number of entries in this table is given by the value of clusterPNodeNumber.')
nfsV2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsV2StatsClusterNode"))
if mibBuilder.loadTexts: nfsV2StatsEntry.setStatus('current')
if mibBuilder.loadTexts: nfsV2StatsEntry.setDescription('The statistics for the NFS version 2 service.')
nfsV2StatsClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2StatsClusterNode.setStatus('current')
if mibBuilder.loadTexts: nfsV2StatsClusterNode.setDescription('The Cluster Node for this value.')
nfsV2nullCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2nullCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV2nullCalls.setDescription("The total number of 'Null' calls received for NFS version 2 since power up.")
nfsV2getAttrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2getAttrCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV2getAttrCalls.setDescription("The total number of 'GetAttr' calls received for NFS version 2 since power up.")
nfsV2setAttrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2setAttrCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV2setAttrCalls.setDescription("The total number of 'SetAttr' calls received for NFS version 2 since power up.")
nfsV2rootCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2rootCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV2rootCalls.setDescription("The total number of 'Root' calls received since power up NOTE: this variable is not used/implemented.")
nfsV2lookupCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2lookupCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV2lookupCalls.setDescription("The total number of 'Lookup' calls received for NFS version 2 since power up.")
nfsV2readLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2readLink.setStatus('current')
if mibBuilder.loadTexts: nfsV2readLink.setDescription("The total number of 'ReadLink' calls received for NFS version 2 since power up.")
nfsV2read = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2read.setStatus('current')
if mibBuilder.loadTexts: nfsV2read.setDescription("The total number of 'Read' calls received for NFS version 2 since power up.")
nfsV2writeCache = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2writeCache.setStatus('current')
if mibBuilder.loadTexts: nfsV2writeCache.setDescription("The total number of 'Write Cache' calls received since power up. NOTE : this variable is not used/implemented.")
nfsV2write = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2write.setStatus('current')
if mibBuilder.loadTexts: nfsV2write.setDescription("The total number of 'Write' calls received for NFS version 2 since power up.")
nfsV2create = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2create.setStatus('current')
if mibBuilder.loadTexts: nfsV2create.setDescription("The total number of 'Create' calls received for NFS version 2 since power up.")
nfsV2remove = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2remove.setStatus('current')
if mibBuilder.loadTexts: nfsV2remove.setDescription("The total number of 'Remove' calls received for NFS version 2 since power up.")
nfsV2rename = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2rename.setStatus('current')
if mibBuilder.loadTexts: nfsV2rename.setDescription("The total number of 'Rename' calls received for NFS version 2 since power up.")
nfsV2link = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2link.setStatus('current')
if mibBuilder.loadTexts: nfsV2link.setDescription("The total number of 'Link' calls received for NFS version 2 since power up.")
nfsV2symLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2symLink.setStatus('current')
if mibBuilder.loadTexts: nfsV2symLink.setDescription("The total number of 'Sym Link' calls received for NFS version 2 since power up.")
nfsV2mkDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2mkDir.setStatus('current')
if mibBuilder.loadTexts: nfsV2mkDir.setDescription("The total number of 'MkDir' calls received for NFS version 2 since power up.")
nfsV2rmDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2rmDir.setStatus('current')
if mibBuilder.loadTexts: nfsV2rmDir.setDescription("The total number of 'RmDir' calls received for NFS version 2 since power up.")
nfsV2readDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2readDir.setStatus('current')
if mibBuilder.loadTexts: nfsV2readDir.setDescription("The total number of 'ReadDir' calls received for NFS version 2 since power up.")
nfsV2statFS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 1, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV2statFS.setStatus('current')
if mibBuilder.loadTexts: nfsV2statFS.setDescription("The total number of 'StatFS' calls received for NFS version 2 since power up.")
null3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: null3Calls.setStatus('obsolete')
if mibBuilder.loadTexts: null3Calls.setDescription("The total number of 'Null' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
getAttr3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getAttr3Calls.setStatus('obsolete')
if mibBuilder.loadTexts: getAttr3Calls.setDescription("The total number of 'GetAttr' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
setAttr3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setAttr3Calls.setStatus('obsolete')
if mibBuilder.loadTexts: setAttr3Calls.setDescription("The total number of 'SetAttr' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
lookup3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lookup3Calls.setStatus('obsolete')
if mibBuilder.loadTexts: lookup3Calls.setDescription("The total number of 'Lookup' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
access3Calls = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: access3Calls.setStatus('obsolete')
if mibBuilder.loadTexts: access3Calls.setDescription("The total number of 'Access' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
readLink3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readLink3.setStatus('obsolete')
if mibBuilder.loadTexts: readLink3.setDescription("The total number of 'ReadLink' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
read3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: read3.setStatus('obsolete')
if mibBuilder.loadTexts: read3.setDescription("The total number of 'Read' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
write3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: write3.setStatus('obsolete')
if mibBuilder.loadTexts: write3.setDescription("The total number of 'Write' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
create3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: create3.setStatus('obsolete')
if mibBuilder.loadTexts: create3.setDescription("The total number of 'Create' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
mkdir3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mkdir3.setStatus('obsolete')
if mibBuilder.loadTexts: mkdir3.setDescription("The total number of 'MkDir' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
symLink3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symLink3.setStatus('obsolete')
if mibBuilder.loadTexts: symLink3.setDescription("The total number of 'SymLink' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
mkNod3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mkNod3.setStatus('obsolete')
if mibBuilder.loadTexts: mkNod3.setDescription("The total number of 'MkNod' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
remove3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remove3.setStatus('obsolete')
if mibBuilder.loadTexts: remove3.setDescription("The total number of 'Remove' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
rmDir3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmDir3.setStatus('obsolete')
if mibBuilder.loadTexts: rmDir3.setDescription("The total number of 'RmDir' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
rename3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rename3.setStatus('obsolete')
if mibBuilder.loadTexts: rename3.setDescription("The total number of 'Rename' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
link3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: link3.setStatus('obsolete')
if mibBuilder.loadTexts: link3.setDescription("The total number of 'Link' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
readDir3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readDir3.setStatus('obsolete')
if mibBuilder.loadTexts: readDir3.setDescription("The total number of 'ReadDir' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
readDirPlus3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readDirPlus3.setStatus('obsolete')
if mibBuilder.loadTexts: readDirPlus3.setDescription("The total number of 'ReadDirPlus' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
fsStat3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStat3.setStatus('obsolete')
if mibBuilder.loadTexts: fsStat3.setDescription("The total number of 'FSStat' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
fsInfo3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsInfo3.setStatus('obsolete')
if mibBuilder.loadTexts: fsInfo3.setDescription("The total number of 'FSInfo' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
pathConf3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathConf3.setStatus('obsolete')
if mibBuilder.loadTexts: pathConf3.setDescription("The total number of 'PathConf' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
commit3 = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commit3.setStatus('obsolete')
if mibBuilder.loadTexts: commit3.setDescription("The total number of 'Commit' calls received for NFS version 3 since power up. This object is now obsolete, and is replaced with a table of values indexed by Cluster Node and name.")
nfsV3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23), )
if mibBuilder.loadTexts: nfsV3StatsTable.setStatus('current')
if mibBuilder.loadTexts: nfsV3StatsTable.setDescription('The statistics for the NFS version 3 service. The number of entries in this table is given by the value of clusterPNodeNumber.')
nfsV3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "nfsV3StatsClusterNode"))
if mibBuilder.loadTexts: nfsV3StatsEntry.setStatus('current')
if mibBuilder.loadTexts: nfsV3StatsEntry.setDescription('The statistics for the NFS version 3 service.')
nfsV3StatsClusterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3StatsClusterNode.setStatus('current')
if mibBuilder.loadTexts: nfsV3StatsClusterNode.setDescription('The Cluster Node for this value.')
nfsV3nullCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3nullCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV3nullCalls.setDescription("The total number of 'Null' calls received for NFS version 3 since power up.")
nfsV3getAttrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3getAttrCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV3getAttrCalls.setDescription("The total number of 'GetAttr' calls received for NFS version 3 since power up.")
nfsV3setAttrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3setAttrCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV3setAttrCalls.setDescription("The total number of 'SetAttr' calls received for NFS version 3 since power up.")
nfsV3lookupCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3lookupCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV3lookupCalls.setDescription("The total number of 'Lookup' calls received for NFS version 3 since power up.")
nfsV3accessCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3accessCalls.setStatus('current')
if mibBuilder.loadTexts: nfsV3accessCalls.setDescription("The total number of 'Access' calls received for NFS version 3 since power up.")
nfsV3readLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3readLink.setStatus('current')
if mibBuilder.loadTexts: nfsV3readLink.setDescription("The total number of 'ReadLink' calls received for NFS version 3 since power up.")
nfsV3read = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3read.setStatus('current')
if mibBuilder.loadTexts: nfsV3read.setDescription("The total number of 'Read' calls received for NFS version 3 since power up.")
nfsV3write = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3write.setStatus('current')
if mibBuilder.loadTexts: nfsV3write.setDescription("The total number of 'Write' calls received for NFS version 3 since power up.")
nfsV3create = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3create.setStatus('current')
if mibBuilder.loadTexts: nfsV3create.setDescription("The total number of 'Create' calls received for NFS version 3 since power up.")
nfsV3mkdir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3mkdir.setStatus('current')
if mibBuilder.loadTexts: nfsV3mkdir.setDescription("The total number of 'MkDir' calls received for NFS version 3 since power up.")
nfsV3symLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3symLink.setStatus('current')
if mibBuilder.loadTexts: nfsV3symLink.setDescription("The total number of 'SymLink' calls received for NFS version 3 since power up.")
nfsV3mkNod = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3mkNod.setStatus('current')
if mibBuilder.loadTexts: nfsV3mkNod.setDescription("The total number of 'MkNod' calls received for NFS version 3 since power up.")
nfsV3remove = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3remove.setStatus('current')
if mibBuilder.loadTexts: nfsV3remove.setDescription("The total number of 'Remove' calls received for NFS version 3 since power up.")
nfsV3rmDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3rmDir.setStatus('current')
if mibBuilder.loadTexts: nfsV3rmDir.setDescription("The total number of 'RmDir' calls received for NFS version 3 since power up.")
nfsV3rename = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3rename.setStatus('current')
if mibBuilder.loadTexts: nfsV3rename.setDescription("The total number of 'Rename' calls received for NFS version 3 since power up.")
nfsV3link = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3link.setStatus('current')
if mibBuilder.loadTexts: nfsV3link.setDescription("The total number of 'Link' calls received for NFS version 3 since power up.")
nfsV3readDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3readDir.setStatus('current')
if mibBuilder.loadTexts: nfsV3readDir.setDescription("The total number of 'ReadDir' calls received for NFS version 3 since power up.")
nfsV3readDirPlus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3readDirPlus.setStatus('current')
if mibBuilder.loadTexts: nfsV3readDirPlus.setDescription("The total number of 'ReadDirPlus' calls received for NFS version 3 since power up.")
nfsV3fsStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3fsStat.setStatus('current')
if mibBuilder.loadTexts: nfsV3fsStat.setDescription("The total number of 'FSStat' calls received for NFS version 3 since power up.")
nfsV3fsInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3fsInfo.setStatus('current')
if mibBuilder.loadTexts: nfsV3fsInfo.setDescription("The total number of 'FSInfo' calls received for NFS version 3 since power up.")
nfsV3pathConf = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3pathConf.setStatus('current')
if mibBuilder.loadTexts: nfsV3pathConf.setDescription("The total number of 'PathConf' calls received for NFS version 3 since power up.")
nfsV3commit = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 2, 23, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsV3commit.setStatus('current')
if mibBuilder.loadTexts: nfsV3commit.setDescription("The total number of 'Commit' calls received for NFS version 3 since power up.")
nfsMounts = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsMounts.setStatus('obsolete')
if mibBuilder.loadTexts: nfsMounts.setDescription('The total number of NFS mounts since power up. This object is obsolete. It could not be measured.')
nfsClients = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsClients.setStatus('obsolete')
if mibBuilder.loadTexts: nfsClients.setDescription('The total number of NFS clients since power up. This object is obsolete. It could not be measured.')
nfsServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServiceEnabled.setStatus('current')
if mibBuilder.loadTexts: nfsServiceEnabled.setDescription('Indicates whether the NFS service is enabled or not.')
nfsServiceMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 3, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServiceMaxUsers.setStatus('current')
if mibBuilder.loadTexts: nfsServiceMaxUsers.setDescription('The maximum number of NFS users the service will allow.')
ftpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: ftpTimeout.setDescription('The FTP session timeout in minutes. NOTE: this value applies to all FTP sessions. This object is obsolete.')
ftpMountNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountNumber.setStatus('obsolete')
if mibBuilder.loadTexts: ftpMountNumber.setDescription('The number of FTP mount points which are configured for the system. This object is obsolete.')
ftpMountTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2), )
if mibBuilder.loadTexts: ftpMountTable.setStatus('obsolete')
if mibBuilder.loadTexts: ftpMountTable.setDescription('A table containing the FTP mount point configuration for the system. The number of entries in this table is given by the value of ftpMountNumber. This object is obsolete.')
ftpMountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "ftpMountName"))
if mibBuilder.loadTexts: ftpMountEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ftpMountEntry.setDescription('FTP mount point information. This object is obsolete.')
ftpMountName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountName.setStatus('obsolete')
if mibBuilder.loadTexts: ftpMountName.setDescription('The name of the FTP mount point. Each FTP mount point has a unique name. This object is obsolete.')
ftpMountNumberUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountNumberUsers.setStatus('obsolete')
if mibBuilder.loadTexts: ftpMountNumberUsers.setDescription('The number of users of the FTP mount point. This object is obsolete.')
ftpMountWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountWWN.setStatus('obsolete')
if mibBuilder.loadTexts: ftpMountWWN.setDescription('The world wide name (WWN) of the system drive the FTP mount point is associated with. This object is obsolete.')
ftpMountLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountLUN.setStatus('obsolete')
if mibBuilder.loadTexts: ftpMountLUN.setDescription('The logical unit number (LUN) of the system drive the FTP mount point is associated with. This object is obsolete.')
ftpMountPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpMountPartitionID.setStatus('obsolete')
if mibBuilder.loadTexts: ftpMountPartitionID.setDescription('The partition ID of the volume the FTP mount point is associated with. This object is obsolete.')
ftpUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserNumber.setStatus('obsolete')
if mibBuilder.loadTexts: ftpUserNumber.setDescription('The number of FTP users which are configured for the system. This object is obsolete.')
ftpUserTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2), )
if mibBuilder.loadTexts: ftpUserTable.setStatus('obsolete')
if mibBuilder.loadTexts: ftpUserTable.setDescription('A table containing the FTP user configuration for the system. The number of entries in this table is given by the value of ftpUserNumber. This object is obsolete.')
ftpUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "ftpUserName"))
if mibBuilder.loadTexts: ftpUserEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ftpUserEntry.setDescription('FTP user information. This object is obsolete.')
ftpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserName.setStatus('obsolete')
if mibBuilder.loadTexts: ftpUserName.setDescription('The name of the FTP user. This object is obsolete.')
ftpUserMountPointExists = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exists", 1), ("doesnotExist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserMountPointExists.setStatus('obsolete')
if mibBuilder.loadTexts: ftpUserMountPointExists.setDescription('Indicates whether the FTP mount point is configured in the ftpMountTable. This object is obsolete.')
ftpUserMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserMountPoint.setStatus('obsolete')
if mibBuilder.loadTexts: ftpUserMountPoint.setDescription('The name of the FTP users mount point. This object is obsolete.')
ftpUserMountInitDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpUserMountInitDirectory.setStatus('obsolete')
if mibBuilder.loadTexts: ftpUserMountInitDirectory.setDescription('The FTP users initial directory. This object is obsolete.')
ftpAuditLogging = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogging.setStatus('obsolete')
if mibBuilder.loadTexts: ftpAuditLogging.setDescription('Indicates whether FTP Audit logging is enabled or not. This object is obsolete.')
ftpAuditLogVolumeWWN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogVolumeWWN.setStatus('obsolete')
if mibBuilder.loadTexts: ftpAuditLogVolumeWWN.setDescription('The world wide name (WWN) of the system drive the FTP server is to write the audit log to. This object is obsolete.')
ftpAuditLogVolumeLUN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogVolumeLUN.setStatus('obsolete')
if mibBuilder.loadTexts: ftpAuditLogVolumeLUN.setDescription('The logical unit number (LUN) of the system drive the FTP server is to write the audit log to. This object is obsolete.')
ftpAuditLogVolumePartitionID = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogVolumePartitionID.setStatus('obsolete')
if mibBuilder.loadTexts: ftpAuditLogVolumePartitionID.setDescription('The partition ID of the volume the FTP server is to write the audit log to. This object is obsolete.')
ftpAuditLogDirectory = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogDirectory.setStatus('obsolete')
if mibBuilder.loadTexts: ftpAuditLogDirectory.setDescription('The directory the FTP server is to write the audit log to. This object is obsolete.')
ftpAuditLogRecordsPerFile = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditLogRecordsPerFile.setStatus('obsolete')
if mibBuilder.loadTexts: ftpAuditLogRecordsPerFile.setDescription('The number of records in each audit log file. This object is obsolete.')
ftpAuditMaximumLogFiles = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 4, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpAuditMaximumLogFiles.setStatus('obsolete')
if mibBuilder.loadTexts: ftpAuditMaximumLogFiles.setDescription('The maximum number of audit log files. This object is obsolete.')
ftpTotalSess = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalSess.setStatus('obsolete')
if mibBuilder.loadTexts: ftpTotalSess.setDescription('The total number of FTP sessions since power up. This object is obsolete.')
ftpTotalFtpXferIn = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalFtpXferIn.setStatus('obsolete')
if mibBuilder.loadTexts: ftpTotalFtpXferIn.setDescription('The total number of data transfers (files) in since power up. This object is obsolete.')
ftpBytesTotalXferIn = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpBytesTotalXferIn.setStatus('obsolete')
if mibBuilder.loadTexts: ftpBytesTotalXferIn.setDescription('The total number of data bytes transferred in since power up. This object is obsolete.')
ftpTotalFtpXferOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalFtpXferOut.setStatus('obsolete')
if mibBuilder.loadTexts: ftpTotalFtpXferOut.setDescription('The total number of data transfers (files) out since power up. This object is obsolete.')
ftpBytesTotalXferOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpBytesTotalXferOut.setStatus('obsolete')
if mibBuilder.loadTexts: ftpBytesTotalXferOut.setDescription('The total number of data bytes transferred out since power up. This object is obsolete.')
ftpTotalFtpCommands = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalFtpCommands.setStatus('obsolete')
if mibBuilder.loadTexts: ftpTotalFtpCommands.setDescription('The total number of commands issued from clients since power up. This object is obsolete.')
ftpTotalFtpReplies = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalFtpReplies.setStatus('obsolete')
if mibBuilder.loadTexts: ftpTotalFtpReplies.setDescription('The total number of replies sent to clients since power up. This object is obsolete.')
ftpTotalBytesCommands = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalBytesCommands.setStatus('obsolete')
if mibBuilder.loadTexts: ftpTotalBytesCommands.setDescription('The total number of bytes received in commands since power up. This object is obsolete.')
ftpTotalBytesReplies = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 5, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpTotalBytesReplies.setStatus('obsolete')
if mibBuilder.loadTexts: ftpTotalBytesReplies.setDescription('The total number of bytes set in replies since power up. This object is obsolete.')
ftpServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpServiceEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: ftpServiceEnabled.setDescription('Indicates whether the FTP service is enabled or not. This object is obsolete.')
ftpServiceMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 6, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpServiceMaxUsers.setStatus('obsolete')
if mibBuilder.loadTexts: ftpServiceMaxUsers.setDescription('The maximum number of FTP users the service will allow. This object is obsolete.')
ftpNTPasswordEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpNTPasswordEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: ftpNTPasswordEnabled.setDescription('Indicates whether FTP uses NT password authentication or not. This object is obsolete.')
ftpNISPasswordEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpNISPasswordEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: ftpNISPasswordEnabled.setDescription('Indicates whether FTP uses NIS password authentication or not. This object is obsolete.')
httpHostVolumeWWN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHostVolumeWWN.setStatus('obsolete')
if mibBuilder.loadTexts: httpHostVolumeWWN.setDescription('The world wide name (WWN) of the system drive the HTTP server is hosting. This object is now obsolete as no HTTP server is present.')
httpHostVolumeLUN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHostVolumeLUN.setStatus('obsolete')
if mibBuilder.loadTexts: httpHostVolumeLUN.setDescription('The logical unit number (LUN) of the system drive the HTTP server is hosting. This object is now obsolete as no HTTP server is present.')
httpHostVolumePartitionID = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHostVolumePartitionID.setStatus('obsolete')
if mibBuilder.loadTexts: httpHostVolumePartitionID.setDescription('The partition ID of the volume the HTTP server is hosting. This object is now obsolete as no HTTP server is present.')
httpRoot = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpRoot.setStatus('obsolete')
if mibBuilder.loadTexts: httpRoot.setDescription('The root directory the HTTP server is hosting. This object is now obsolete as no HTTP server is present.')
httpProduct = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpProduct.setStatus('obsolete')
if mibBuilder.loadTexts: httpProduct.setDescription('The product string used by the HTTP server. This object is now obsolete as no HTTP server is present.')
httpMinTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMinTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: httpMinTimeOut.setDescription('The minimum timeout used by the HTTP server in milliseconds. This object is now obsolete as no HTTP server is present.')
httpMaxTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaxTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: httpMaxTimeOut.setDescription('The maximum timeout used by the HTTP server in milliseconds. This object is now obsolete as no HTTP server is present.')
httpDecrTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpDecrTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: httpDecrTimeOut.setDescription('The time the HTTP server uses to decrement the timeout on client connection in milliseconds. This object is now obsolete as no HTTP server is present.')
httpIncrTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpIncrTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: httpIncrTimeOut.setDescription('The time the HTTP server uses to increment the timeout on a valid incoming request. This object is now obsolete as no HTTP server is present.')
httpMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaxConnections.setStatus('obsolete')
if mibBuilder.loadTexts: httpMaxConnections.setDescription('The maximum number of connections allowed by the HTTP server. This object is now obsolete as no HTTP server is present.')
httpListDirectories = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpListDirectories.setStatus('obsolete')
if mibBuilder.loadTexts: httpListDirectories.setDescription('Indicates whether the HTTP server list directories option is enabled or not. This object is now obsolete as no HTTP server is present.')
httpLogging = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogging.setStatus('obsolete')
if mibBuilder.loadTexts: httpLogging.setDescription('Indicates whether HTTP server logging is enabled or not. This object is now obsolete as no HTTP server is present.')
httpMaximalLogging = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaximalLogging.setStatus('obsolete')
if mibBuilder.loadTexts: httpMaximalLogging.setDescription('Indicates whether maximal logging is enabled or not for the HTTP server. This object is now obsolete as no HTTP server is present.')
httpLogVolumeWWN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogVolumeWWN.setStatus('obsolete')
if mibBuilder.loadTexts: httpLogVolumeWWN.setDescription('The world wide name (WWN) of the system drive the HTTP server is logging to. This object is now obsolete as no HTTP server is present.')
httpLogVolumeLUN = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogVolumeLUN.setStatus('obsolete')
if mibBuilder.loadTexts: httpLogVolumeLUN.setDescription('The logical unit number (LUN) of the system drive the HTTP server is logging to. This object is now obsolete as no HTTP server is present.')
httpLogVolumePartitionID = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogVolumePartitionID.setStatus('obsolete')
if mibBuilder.loadTexts: httpLogVolumePartitionID.setDescription('The partition ID of the volume the HTTP server is logging to. This object is now obsolete as no HTTP server is present.')
httpLogDirectory = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogDirectory.setStatus('obsolete')
if mibBuilder.loadTexts: httpLogDirectory.setDescription('The name of the directory the HTTP server is logging to. This object is now obsolete as no HTTP server is present.')
httpLogRecordsPerFile = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpLogRecordsPerFile.setStatus('obsolete')
if mibBuilder.loadTexts: httpLogRecordsPerFile.setDescription('The number of records per log file the HTTP server will generate during logging. This object is now obsolete as no HTTP server is present.')
httpMaximumLogFiles = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMaximumLogFiles.setStatus('obsolete')
if mibBuilder.loadTexts: httpMaximumLogFiles.setDescription('The maximum number of log files the HTTP server will generate during logging. This object is now obsolete as no HTTP server is present.')
httpMimeMapNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMimeMapNumber.setStatus('obsolete')
if mibBuilder.loadTexts: httpMimeMapNumber.setDescription('The number of mime map entries configured for the HTTP server. This object is now obsolete as no HTTP server is present.')
httpMimeMapTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21), )
if mibBuilder.loadTexts: httpMimeMapTable.setStatus('obsolete')
if mibBuilder.loadTexts: httpMimeMapTable.setDescription('A table containing the mime map configuration for the HTTP server in the system. The number of entries in this table is given by the value of httpMimeMapNumber. This object is now obsolete as no HTTP server is present.')
httpMimeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "httpMimeMapIndex"))
if mibBuilder.loadTexts: httpMimeMapEntry.setStatus('obsolete')
if mibBuilder.loadTexts: httpMimeMapEntry.setDescription('Mime map information. This object is now obsolete as no HTTP server is present.')
httpMimeMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMimeMapIndex.setStatus('obsolete')
if mibBuilder.loadTexts: httpMimeMapIndex.setDescription('A unique value for each mime map configured for the HTTP server in this system. Its value ranges between 1 and the value of httpMimeMapNumber. This object is now obsolete as no HTTP server is present.')
httpMimeMapExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMimeMapExtension.setStatus('obsolete')
if mibBuilder.loadTexts: httpMimeMapExtension.setDescription('The extension on the file. This object is now obsolete as no HTTP server is present.')
httpMimeMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 1, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpMimeMapType.setStatus('obsolete')
if mibBuilder.loadTexts: httpMimeMapType.setDescription('The corresponding type the extension maps to. This object is now obsolete as no HTTP server is present.')
httpConnsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpConnsAccepted.setStatus('obsolete')
if mibBuilder.loadTexts: httpConnsAccepted.setDescription('The number of TCP/IP connections that clients have made to the server. Clients running HTTP/1.1 can make multiple requests per connection, and so this number will typically be lower that the total number of requests. This object is now obsolete as no HTTP server is present.')
httpConnsRefused = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpConnsRefused.setStatus('obsolete')
if mibBuilder.loadTexts: httpConnsRefused.setDescription("The total number of connections that were rejected with a '503 Service Unavailable' message. This object is now obsolete as no HTTP server is present.")
httpBytesXferOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpBytesXferOut.setStatus('obsolete')
if mibBuilder.loadTexts: httpBytesXferOut.setDescription('The number of bytes sent by the server. This includes output HTTP headers. This object is now obsolete as no HTTP server is present.')
httpBytesXferIn = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpBytesXferIn.setStatus('obsolete')
if mibBuilder.loadTexts: httpBytesXferIn.setDescription('The number of bytes received by the server. This object is now obsolete as no HTTP server is present.')
httpGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpGetRequests.setStatus('obsolete')
if mibBuilder.loadTexts: httpGetRequests.setDescription('The number of GET requests received. This object is now obsolete as no HTTP server is present.')
httpHeadRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpHeadRequests.setStatus('obsolete')
if mibBuilder.loadTexts: httpHeadRequests.setDescription('The number of HEAD requests received. This object is now obsolete as no HTTP server is present.')
httpPutRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPutRequests.setStatus('obsolete')
if mibBuilder.loadTexts: httpPutRequests.setDescription('The number of PUT requests received. This object is now obsolete as no HTTP server is present.')
httpPostRequests = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPostRequests.setStatus('obsolete')
if mibBuilder.loadTexts: httpPostRequests.setDescription('The number of POST requests received. This object is now obsolete as no HTTP server is present.')
httpStatusOK = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusOK.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusOK.setDescription('The number of 200 OK status replies. This object is now obsolete as no HTTP server is present.')
httpStatusNotModified = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusNotModified.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusNotModified.setDescription('The number of 304 Not Modified status replies. This object is now obsolete as no HTTP server is present.')
httpStatusPreconFailed = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusPreconFailed.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusPreconFailed.setDescription('The number of 412 Precondition Failed status replies. This object is now obsolete as no HTTP server is present.')
httpStatusBadRequest = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusBadRequest.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusBadRequest.setDescription('The number of 400 Bad Request status replies. This object is now obsolete as no HTTP server is present.')
httpStatusForbidden = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusForbidden.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusForbidden.setDescription('The number of 403 Forbidden status replies. This object is now obsolete as no HTTP server is present.')
httpStatusNotFound = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusNotFound.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusNotFound.setDescription('The number of 404 Not Found status replies. This object is now obsolete as no HTTP server is present.')
httpStatusURITooLong = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusURITooLong.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusURITooLong.setDescription('The number of 414 URI Too Long status replies. This object is now obsolete as no HTTP server is present.')
httpStatusServerError = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusServerError.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusServerError.setDescription('The number of 500 Server Error status replies. This object is now obsolete as no HTTP server is present.')
httpStatusNotImplemented = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusNotImplemented.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusNotImplemented.setDescription('The number of 501 Not Implemented status replies. This object is now obsolete as no HTTP server is present.')
httpStatusServiceUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusServiceUnavailable.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusServiceUnavailable.setDescription('The number of 503 Service Unavailable status replies. This object is now obsolete as no HTTP server is present.')
httpStatusOtherErr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatusOtherErr.setStatus('obsolete')
if mibBuilder.loadTexts: httpStatusOtherErr.setDescription('The number of other errors occurring. This object is now obsolete as no HTTP server is present.')
httpTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: httpTimeOut.setDescription('The timeout period in milliseconds. This object is now obsolete as no HTTP server is present.')
httpOpenConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpOpenConnections.setStatus('obsolete')
if mibBuilder.loadTexts: httpOpenConnections.setDescription('The number of open HTTP connections. This object is now obsolete as no HTTP server is present.')
httpActiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 2, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpActiveConnections.setStatus('obsolete')
if mibBuilder.loadTexts: httpActiveConnections.setDescription('The number of active HTTP connections. This object is now obsolete as no HTTP server is present.')
httpServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: httpServiceEnabled.setDescription('Indicates whether the HTTP service is enabled or not. This object is now obsolete as no HTTP server is present.')
httpServiceMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 5, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpServiceMaxUsers.setStatus('obsolete')
if mibBuilder.loadTexts: httpServiceMaxUsers.setDescription('The maximum number of HTTP clients the service will allow. This object is now obsolete as no HTTP server is present.')
iScsiServiceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiServiceEnabled.setStatus('current')
if mibBuilder.loadTexts: iScsiServiceEnabled.setDescription('Indicates whether the iSCSI service is enabled or not. enabled(1) The service is enabled disabled(2) The service is not enabled unknown(3) The service status cannot be determined.')
iScsiParameterTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2), )
if mibBuilder.loadTexts: iScsiParameterTable.setStatus('current')
if mibBuilder.loadTexts: iScsiParameterTable.setDescription('A table containing a list of iSCSI parameters.')
iScsiParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiParameterEVS"), (0, "BLUEARC-SERVER-MIB", "iScsiParameterName"))
if mibBuilder.loadTexts: iScsiParameterEntry.setStatus('current')
if mibBuilder.loadTexts: iScsiParameterEntry.setDescription('iSCSI parameter information.')
iScsiParameterEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiParameterEVS.setStatus('current')
if mibBuilder.loadTexts: iScsiParameterEVS.setDescription('The EVS for which the Logical Unit parameters are configured.')
iScsiParameterName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiParameterName.setStatus('current')
if mibBuilder.loadTexts: iScsiParameterName.setDescription('A unique name for the iSCSI parameter.')
iScsiParameterIsBoolean = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boolean", 1), ("notBoolean", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiParameterIsBoolean.setStatus('current')
if mibBuilder.loadTexts: iScsiParameterIsBoolean.setDescription('Whether the parameter is a boolean value. If the parameter is boolean, it will have either the value 0 (false) or 1 (true).')
iScsiParameterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiParameterValue.setStatus('current')
if mibBuilder.loadTexts: iScsiParameterValue.setDescription('The value for the parameter. If the parameter is boolean, it will have either the value 0 (false) or 1 (true).')
iScsiTargetNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetNumber.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetNumber.setDescription('The number of iSCSI targets.')
iScsiTargetTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4), )
if mibBuilder.loadTexts: iScsiTargetTable.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetTable.setDescription('A table containing a list of iSCSI targets. The number of entries in this table is given by the value of iScsiTargetNumber.')
iScsiTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiGloballyUniqueName"))
if mibBuilder.loadTexts: iScsiTargetEntry.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetEntry.setDescription('iSCSI target information.')
iScsiGloballyUniqueName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiGloballyUniqueName.setStatus('current')
if mibBuilder.loadTexts: iScsiGloballyUniqueName.setDescription('A unique name for the iSCSI target.')
iScsiTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetName.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetName.setDescription('The name of the iSCSI target.')
iScsiTargetComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetComment.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetComment.setDescription('The comment for the iSCSI target.')
iScsiTargetLogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetLogicalUnitNumber.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetLogicalUnitNumber.setDescription('The number of Logical Units assigned to the iSCSI target.')
iScsiTargetAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetAuthEnabled.setDescription('Whether authentication is enabled for this target.')
iScsiLogicalUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLogicalUnitNumber.setStatus('current')
if mibBuilder.loadTexts: iScsiLogicalUnitNumber.setDescription('The number of iSCSI logical units.')
iScsiLogicalUnitTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6), )
if mibBuilder.loadTexts: iScsiLogicalUnitTable.setStatus('current')
if mibBuilder.loadTexts: iScsiLogicalUnitTable.setDescription('A table containing a list of iSCSI Logical Units. The number of entries in this table is given by the value of iScsiTargetLogicalUnitNumber in iScsiTargetTable.')
iScsiLogicalUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiLUEvs"), (0, "BLUEARC-SERVER-MIB", "iScsiLUName"))
if mibBuilder.loadTexts: iScsiLogicalUnitEntry.setStatus('current')
if mibBuilder.loadTexts: iScsiLogicalUnitEntry.setDescription('iSCSI Logical Unit information. Indexed by EVS and Logical Unit name.')
iScsiLUEvs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUEvs.setStatus('current')
if mibBuilder.loadTexts: iScsiLUEvs.setDescription('The EVS to which the Logical Unit is assigned.')
iScsiLUName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUName.setStatus('current')
if mibBuilder.loadTexts: iScsiLUName.setDescription('The name of the Logical Unit.')
iScsiLUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUStatus.setStatus('current')
if mibBuilder.loadTexts: iScsiLUStatus.setDescription('The status of the Logical Unit unknown(1) - the status cannot be determined.')
iScsiLUComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUComment.setStatus('current')
if mibBuilder.loadTexts: iScsiLUComment.setDescription('The comment relating to the Logical Unit.')
iScsiLUDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUDeviceId.setStatus('current')
if mibBuilder.loadTexts: iScsiLUDeviceId.setDescription('The ID of the File System to which the Logical Unit is assigned.')
iScsiLUPath = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUPath.setStatus('current')
if mibBuilder.loadTexts: iScsiLUPath.setDescription('The path on the File System relating to the Logical Unit.')
iScsiLUInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialized", 1), ("uninitialized", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUInitialized.setStatus('current')
if mibBuilder.loadTexts: iScsiLUInitialized.setDescription('Whether the Logical Unit is initialized. initialized(1) - the Logical Unit is initialized uninitialized(2) - the Logical unit is not initialized unknown(3) - the initialization status cannot be determined.')
iScsiLUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiLUSize.setStatus('current')
if mibBuilder.loadTexts: iScsiLUSize.setDescription('The size, in bytes, of the Logical Unit.')
iScsiTargetLogicalUnitTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7), )
if mibBuilder.loadTexts: iScsiTargetLogicalUnitTable.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetLogicalUnitTable.setDescription('A table containing a list of iSCSI Logical Units assigned to iSCSI targets. The number of entries in this table is given by the value of iScsiTargetLogicalUnitNumber in iScsiTargetTable.')
iScsiTargetLogicalUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiTargetLUTargetName"), (0, "BLUEARC-SERVER-MIB", "iScsiTargetLULogicalUnitName"))
if mibBuilder.loadTexts: iScsiTargetLogicalUnitEntry.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetLogicalUnitEntry.setDescription('Information about iSCSI Logical Units assigned to iScsi targets. Indexed by target name and Logical Unit name.')
iScsiTargetLUTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetLUTargetName.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetLUTargetName.setDescription('The globally unique name of the target.')
iScsiTargetLULogicalUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetLULogicalUnitName.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetLULogicalUnitName.setDescription('The name of the Logical Unit assigned to the target.')
iScsiTargetLun = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiTargetLun.setStatus('current')
if mibBuilder.loadTexts: iScsiTargetLun.setDescription('The Logical Unit Number allocated to the LUN when it was assigned to the target. This is an arbitrary number which must be unique on the target.')
iSNSTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 8), )
if mibBuilder.loadTexts: iSNSTable.setStatus('current')
if mibBuilder.loadTexts: iSNSTable.setDescription('A table containing details of iSNS servers.')
iSNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 8, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iSNSIpAddress"))
if mibBuilder.loadTexts: iSNSEntry.setStatus('current')
if mibBuilder.loadTexts: iSNSEntry.setDescription('Information about iSNS servers.')
iSNSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSNSIpAddress.setStatus('current')
if mibBuilder.loadTexts: iSNSIpAddress.setDescription('The IP address of the iSNS server.')
iSNSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSNSPort.setStatus('current')
if mibBuilder.loadTexts: iSNSPort.setDescription('The port on which to connect to the iSNS server.')
iScsiStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1), )
if mibBuilder.loadTexts: iScsiStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: iScsiStatisticsTable.setDescription('A table containing a list of iSCSI statistics.')
iScsiStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "iScsiStatisticsNodeId"), (0, "BLUEARC-SERVER-MIB", "iScsiStatisticsName"))
if mibBuilder.loadTexts: iScsiStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: iScsiStatisticsEntry.setDescription('Information about iSCSI statistics. Indexed by Cluster Node id and metric name.')
iScsiStatisticsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiStatisticsNodeId.setStatus('current')
if mibBuilder.loadTexts: iScsiStatisticsNodeId.setDescription('The Cluster Node for this value.')
iScsiStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiStatisticsName.setStatus('current')
if mibBuilder.loadTexts: iScsiStatisticsName.setDescription('The name of the value being reported.')
iScsiStatisticsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 3, 6, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iScsiStatisticsValue.setStatus('current')
if mibBuilder.loadTexts: iScsiStatisticsValue.setDescription('The statistics value reported.')
ndmpCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("started", 1), ("stopped", 2), ("aborting", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: ndmpCurrentStatus.setDescription('Indicates the current status of the NDMP backup.')
ndmpEnabledOnBoot = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpEnabledOnBoot.setStatus('current')
if mibBuilder.loadTexts: ndmpEnabledOnBoot.setDescription('Indicates whether or not NDMP is enabled at boot time.')
autoChangerNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerNumber.setStatus('current')
if mibBuilder.loadTexts: autoChangerNumber.setDescription('The number of auto changers NDMP has detected.')
autoChangerTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: autoChangerTable.setStatus('current')
if mibBuilder.loadTexts: autoChangerTable.setDescription('A table containing a list of auto changers NDMP has detected. The number of entries in this table is given by the value of autoChangerNumber.')
autoChangerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "autoChangerIndex"))
if mibBuilder.loadTexts: autoChangerEntry.setStatus('current')
if mibBuilder.loadTexts: autoChangerEntry.setDescription('Auto changer information.')
autoChangerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerIndex.setStatus('current')
if mibBuilder.loadTexts: autoChangerIndex.setDescription('A unique value for each auto changer detected. Its value ranges between 1 and the value of autoChangerNumber.')
autoChangerDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerDeviceName.setStatus('current')
if mibBuilder.loadTexts: autoChangerDeviceName.setDescription('The device name of the auto changer.')
autoChangerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerSerialNumber.setStatus('current')
if mibBuilder.loadTexts: autoChangerSerialNumber.setDescription('The serial number of the auto changer.')
autoChangerEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChangerEVS.setStatus('current')
if mibBuilder.loadTexts: autoChangerEVS.setDescription('The Enterprise Virtual Server to which this auto changer is assigned.')
tapeDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveNumber.setStatus('current')
if mibBuilder.loadTexts: tapeDriveNumber.setDescription('The number of tape drives that NDMP has detected.')
tapeDriveTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: tapeDriveTable.setStatus('current')
if mibBuilder.loadTexts: tapeDriveTable.setDescription('A table containing a list of all tape drives NDMP has detected. The number of entries in this table is given by the value of tapeDriveNumber.')
tapeDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "tapeDriveIndex"))
if mibBuilder.loadTexts: tapeDriveEntry.setStatus('current')
if mibBuilder.loadTexts: tapeDriveEntry.setDescription('Tape drive information.')
tapeDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveIndex.setStatus('current')
if mibBuilder.loadTexts: tapeDriveIndex.setDescription('A unique value for each tape drive. Its value ranges between 1 and the value of tapeDriveNumber.')
tapeDriveAutoChangerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveAutoChangerIndex.setStatus('current')
if mibBuilder.loadTexts: tapeDriveAutoChangerIndex.setDescription('The index of the auto changer in the autoChangerTable to which this tape drive is connected or -1 if it is not associated with an auto changer.')
tapeDriveDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveDeviceName.setStatus('current')
if mibBuilder.loadTexts: tapeDriveDeviceName.setDescription('The device name of the tape drive.')
tapeDriveSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveSerialNumber.setStatus('current')
if mibBuilder.loadTexts: tapeDriveSerialNumber.setDescription('The serial number of the tape drive.')
tapeDriveLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveLocation.setStatus('current')
if mibBuilder.loadTexts: tapeDriveLocation.setDescription('The location of the tape drive.')
tapeDriveEVS = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDriveEVS.setStatus('current')
if mibBuilder.loadTexts: tapeDriveEVS.setDescription('The Enterprise Virtual Server to which this tape drive is assigned.')
ndmpAutoSnapCreateEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpAutoSnapCreateEnabled.setStatus('current')
if mibBuilder.loadTexts: ndmpAutoSnapCreateEnabled.setDescription('Determines whether snapshots are automatically created when NDMP performs a backup. enabled(1) - indicates that NDMP will create a snapshot (if one does not already exist) when a backup is to be performed. disabled(2) - indicates that NDMP will not automatically create a snapshot when a backup is to be performed. It will take a backup of the live file system if no snapshot exists. unknown(3) - indicates that snapshot is disabled on this system and the value is therefore unknown.')
ndmpAutoSnapDeleteMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("immediately", 1), ("whenObsolete", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpAutoSnapDeleteMode.setStatus('current')
if mibBuilder.loadTexts: ndmpAutoSnapDeleteMode.setDescription('Indicates whether NDMP will remove a snapshot automatically when the backup is complete. immediately(1) - indicates that the snapshot will be deleted immediately after use. whenObsolete(2) - indicates that the snapshot will be deleted when it becomes obsolete. unknown(3) - indicates that snapshot is disabled on this system and the value is therefore unknown.')
ndmpAutoSnapMaxRetention = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 4, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpAutoSnapMaxRetention.setStatus('current')
if mibBuilder.loadTexts: ndmpAutoSnapMaxRetention.setDescription('The maximum retention time of snapshot (in days) which has been automatically created by NDMP as a result of performing a backup. NOTE: this value is set to 0 if snapshot is disabled on this system.')
systemUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUserNumber.setStatus('current')
if mibBuilder.loadTexts: systemUserNumber.setDescription('The number of users which are configured to access the system through web and telnet via password authentication. NOTE: this does not include users which have higher level access than supervisor.')
systemUserTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: systemUserTable.setStatus('current')
if mibBuilder.loadTexts: systemUserTable.setDescription('A table containing a list of all users configured to access the system through web and telnet via password authentication. NOTE: this does not include users which have higher level access than supervisor. The number of entries in this table is given by the value of systemUserNumber.')
systemUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "systemUserName"))
if mibBuilder.loadTexts: systemUserEntry.setStatus('current')
if mibBuilder.loadTexts: systemUserEntry.setDescription('System user information.')
systemUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUserName.setStatus('current')
if mibBuilder.loadTexts: systemUserName.setDescription('The login name of the system user.')
systemUserAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUserAccessLevel.setStatus('current')
if mibBuilder.loadTexts: systemUserAccessLevel.setDescription('The access level granted to the system user.')
licenseKeyNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyNumber.setStatus('current')
if mibBuilder.loadTexts: licenseKeyNumber.setDescription('The number of license keys for this server.')
licenseKeyTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2), )
if mibBuilder.loadTexts: licenseKeyTable.setStatus('obsolete')
if mibBuilder.loadTexts: licenseKeyTable.setDescription('A table containing a list of license keys. The number of entries in this table is given by the value of licenseKeyNumber.')
licenseKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "licenseKeyIndex"))
if mibBuilder.loadTexts: licenseKeyEntry.setStatus('obsolete')
if mibBuilder.loadTexts: licenseKeyEntry.setDescription('License key information.')
licenseKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyIndex.setStatus('obsolete')
if mibBuilder.loadTexts: licenseKeyIndex.setDescription('A unique value for each license key. Its value ranges between 1 and the value of licenseKeyNumber.')
licenseKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyString.setStatus('obsolete')
if mibBuilder.loadTexts: licenseKeyString.setDescription('The license key string.')
licenseKeyValid = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyValid.setStatus('obsolete')
if mibBuilder.loadTexts: licenseKeyValid.setDescription('Indicates whether the license key is valid on this server or not.')
licenseCIFSService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseCIFSService.setStatus('obsolete')
if mibBuilder.loadTexts: licenseCIFSService.setDescription('Indicates whether this license key enables the use of the CIFS service or not.')
licenseNFSService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseNFSService.setStatus('obsolete')
if mibBuilder.loadTexts: licenseNFSService.setDescription('Indicates whether this license key enables the use of the NFS service or not.')
licenseFTPService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFTPService.setStatus('obsolete')
if mibBuilder.loadTexts: licenseFTPService.setDescription('Indicates whether this license key enables the use of the FTP service or not.')
licenseHTTPService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseHTTPService.setStatus('obsolete')
if mibBuilder.loadTexts: licenseHTTPService.setDescription('Indicates whether this license key enables the use of the HTTP service or not.')
licenseFailoverService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFailoverService.setStatus('obsolete')
if mibBuilder.loadTexts: licenseFailoverService.setDescription('Indicates whether this license key enables the use of the Failover service or not. This object is obsolete: failover has been superceded by clustering.')
licenseRAIDService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single", 1), ("multiple", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseRAIDService.setStatus('obsolete')
if mibBuilder.loadTexts: licenseRAIDService.setDescription('Indicates whether this license key enables the use of more than one RAID controller in the system or not.')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
if mibBuilder.loadTexts: licenseTable.setDescription('A table containing a list of valid license keys and the service(s) they license.')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "licenseIndex"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
if mibBuilder.loadTexts: licenseEntry.setDescription('License information.')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIndex.setStatus('current')
if mibBuilder.loadTexts: licenseIndex.setDescription('A unique value for each licensed service.')
licenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKey.setStatus('current')
if mibBuilder.loadTexts: licenseKey.setDescription('The license key.')
licenseService = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseService.setStatus('current')
if mibBuilder.loadTexts: licenseService.setDescription('A service licensed by the given license.')
webAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: webAccessEnabled.setDescription('Indicates whether access to the web (GUI) interface is permitted or not. The setting disabled(2) indicates access to the web interface will not be allowed regardless of any other configuration settings for this interface.')
webAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessRestricted.setStatus('obsolete')
if mibBuilder.loadTexts: webAccessRestricted.setDescription('Indicates whether access to the web interface is restricted to the set of hostnames or IP addresses configured in webAccessRestrictedTable or unrestricted (such that any client may access the web interface). NOTE : this setting controls the use of the web access restricted table in that there may be entries in this table, but access to the interface will be allowed from any host if this variable is set to unrestricted(2). This object is now obsolete.')
webAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessRestrictedNumber.setStatus('obsolete')
if mibBuilder.loadTexts: webAccessRestrictedNumber.setDescription('The number of restricted web access entries configured. This object is now obsolete.')
webAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 4), )
if mibBuilder.loadTexts: webAccessRestrictedTable.setStatus('obsolete')
if mibBuilder.loadTexts: webAccessRestrictedTable.setDescription('A table containing the hostnames or IP addresses of clients which have restricted access to the web interface. The number of entries in this table is given by the value of webAccessRestrictedNumber. This object is now obsolete.')
webAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "webAccessRestrictedHost"))
if mibBuilder.loadTexts: webAccessRestrictedEntry.setStatus('obsolete')
if mibBuilder.loadTexts: webAccessRestrictedEntry.setDescription('Restricted web access information. This object is now obsolete.')
webAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessRestrictedHost.setStatus('obsolete')
if mibBuilder.loadTexts: webAccessRestrictedHost.setDescription('The hostname or IP address of a client which has restricted access to the web interface. This object is now obsolete.')
webAccessPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessPortNumber.setStatus('obsolete')
if mibBuilder.loadTexts: webAccessPortNumber.setDescription('The port number through which access to the web interface is available (subject to any security restrictions). This object is now obsolete.')
webAccessMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAccessMaxConnections.setStatus('obsolete')
if mibBuilder.loadTexts: webAccessMaxConnections.setDescription('The maximum number of simultaneous connections which are allowed access to the web interface. This object is now obsolete.')
sictrlAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlAccessEnabled.setDescription('Indicates whether access to the SiCtrl (command line) interface is permitted or not. The setting disabled(2) indicates access to the SiCtrl interface will not be allowed regardless of any other configuration settings for this interface.')
sictrlAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessRestricted.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlAccessRestricted.setDescription('Indicates whether access to the SiCtrl interface is restricted to the set of hostnames or IP addresses configured in sictrlAccessRestrictedTable or unrestricted (such that any client may access the SiCtrl interface). NOTE: this setting controls the use of the SiCtrl access restricted table in that there may be entries in this table, but access to the interface will be allowed from any host if this variable is set to unrestricted(2).')
sictrlAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessRestrictedNumber.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlAccessRestrictedNumber.setDescription('The number of restricted SiCtrl access entries configured.')
sictrlAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 4), )
if mibBuilder.loadTexts: sictrlAccessRestrictedTable.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlAccessRestrictedTable.setDescription('A table containing the hostnames or IP addresses of clients which have restricted access the SiCtrl interface. The number of entries in this table is given by the value of sictrlAccessRestrictedNumber.')
sictrlAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "sictrlAccessRestrictedHost"))
if mibBuilder.loadTexts: sictrlAccessRestrictedEntry.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlAccessRestrictedEntry.setDescription('Restricted SiCtrl access information.')
sictrlAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessRestrictedHost.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlAccessRestrictedHost.setDescription('The hostname or IP address of a client which has restricted access to the SiCtrl interface.')
sictrlAccessPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessPortNumber.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlAccessPortNumber.setDescription('The port number through which access to the SiCtrl interface is available (subject to any security restrictions).')
sictrlAccessMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlAccessMaxConnections.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlAccessMaxConnections.setDescription('The maximum number of simultaneous connections which are allowed access to the SiCtrl interface.')
telnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: telnetAccessEnabled.setDescription('Indicates whether access to the telnet interface is permitted or not. The setting disabled(2) indicates access to the telnet interface will not be allowed regardless of any other configuration settings for this interface.')
telnetAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessRestricted.setStatus('current')
if mibBuilder.loadTexts: telnetAccessRestricted.setDescription('Indicates whether access to the telnet interface is restricted to the set of hostnames or IP addresses configured in telnetAccessRestrictedTable or unrestricted (such that any client may access the telnet interface). NOTE: this setting controls the use of the telnet access restricted table in that there may be entries in this table, but access to the interface will be allowed from any host if this variable is set to unrestricted(2).')
telnetAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessRestrictedNumber.setStatus('current')
if mibBuilder.loadTexts: telnetAccessRestrictedNumber.setDescription('The number of restricted telnet access entries configured.')
telnetAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 4), )
if mibBuilder.loadTexts: telnetAccessRestrictedTable.setStatus('current')
if mibBuilder.loadTexts: telnetAccessRestrictedTable.setDescription('A table containing the hostnames or IP addresses of clients which have restricted access the telnet interface. The number of entries in this table is given by the value of telnetAccessRestrictedNumber.')
telnetAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "telnetAccessRestrictedHost"))
if mibBuilder.loadTexts: telnetAccessRestrictedEntry.setStatus('current')
if mibBuilder.loadTexts: telnetAccessRestrictedEntry.setDescription('Restricted telnet access information.')
telnetAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessRestrictedHost.setStatus('current')
if mibBuilder.loadTexts: telnetAccessRestrictedHost.setDescription('The hostname or IP address of a client which has restricted access to the telnet interface.')
telnetAccessPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessPortNumber.setStatus('current')
if mibBuilder.loadTexts: telnetAccessPortNumber.setDescription('The port number through which access to the telnet interface is available (subject to any security restrictions).')
telnetAccessMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetAccessMaxConnections.setStatus('current')
if mibBuilder.loadTexts: telnetAccessMaxConnections.setDescription('The maximum number of simultaneous connections which are allowed access to the telnet interface.')
secureWebAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebAccessEnabled.setDescription('Indicates whether access to the secure web interface is permitted or not. The setting disabled(2) indicates access to the secure web interface will not be allowed regardless of any other configuration settings for this interface. This object is now obsolete.')
secureWebAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessRestricted.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebAccessRestricted.setDescription('Indicates whether access to the secure web interface is restricted to the set of hostnames or IP addresses configured in secureWebAccessRestrictedTable or unrestricted (such that any client may access the secure web interface). NOTE: this setting controls the use of the secure web access restricted table in that there may be entries in this table, but access to the interface will be allowed from any host if this variable is set to unrestricted(2). This object is now obsolete.')
secureWebAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessRestrictedNumber.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebAccessRestrictedNumber.setDescription('The number of restricted secure web access entries configured. This object is now obsolete.')
secureWebAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 4), )
if mibBuilder.loadTexts: secureWebAccessRestrictedTable.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebAccessRestrictedTable.setDescription('A table containing the hostnames or IP addresses of clients which have restricted access the secure web interface. The number of entries in this table is given by the value of secureWebAccessRestrictedNumber. This object is now obsolete.')
secureWebAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "secureWebAccessRestrictedHost"))
if mibBuilder.loadTexts: secureWebAccessRestrictedEntry.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebAccessRestrictedEntry.setDescription('Restricted secure web access information. This object is now obsolete.')
secureWebAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessRestrictedHost.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebAccessRestrictedHost.setDescription('The hostname or IP address of a client which has restricted access to the secure web interface. This object is now obsolete.')
secureWebAccessPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessPortNumber.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebAccessPortNumber.setDescription('The port number through which access to the secure web interface is available (subject to any security restrictions). This object is now obsolete.')
secureWebAccessMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebAccessMaxConnections.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebAccessMaxConnections.setDescription('The maximum number of simultaneous connections which are allowed access to the secure web interface. This object is now obsolete.')
lcdFrontPanelLocked = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("unLocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcdFrontPanelLocked.setStatus('obsolete')
if mibBuilder.loadTexts: lcdFrontPanelLocked.setDescription('Indicates whether the front panel LCD on the server is locked or not. This object is obsolete.')
eventLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogNumber.setStatus('obsolete')
if mibBuilder.loadTexts: eventLogNumber.setDescription('The total number of events currently logged. This object is now obsolete.')
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2), )
if mibBuilder.loadTexts: eventLogTable.setStatus('obsolete')
if mibBuilder.loadTexts: eventLogTable.setDescription('A table containing a list of all Events logged for the system. The number of entries in this table is given by the value of eventLogNumber. This object is now obsolete.')
eventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "eventLogTimeStamp"), (0, "BLUEARC-SERVER-MIB", "eventLogHandle"))
if mibBuilder.loadTexts: eventLogEntry.setStatus('obsolete')
if mibBuilder.loadTexts: eventLogEntry.setDescription('Event log information. This object is now obsolete.')
eventLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: eventLogTimeStamp.setDescription('The timestamp of the event in UTC format. This object is now obsolete.')
eventLogHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogHandle.setStatus('obsolete')
if mibBuilder.loadTexts: eventLogHandle.setDescription('A unique handle for the event. This object is now obsolete.')
eventLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogText.setStatus('obsolete')
if mibBuilder.loadTexts: eventLogText.setDescription('The text describing the event. This object is now obsolete.')
smtpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpAddr.setStatus('current')
if mibBuilder.loadTexts: smtpAddr.setDescription('The IP address or hostname of the SMTP server.')
smtpCritFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpCritFreq.setStatus('current')
if mibBuilder.loadTexts: smtpCritFreq.setDescription('The frequency at which alerts within the critical category may be sent to the mail recipient(s).')
smtpSevFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("daily", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSevFreq.setStatus('current')
if mibBuilder.loadTexts: smtpSevFreq.setDescription('The frequency at which alerts within the severe category may be sent to the mail recipient(s).')
smtpWarnFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("daily", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpWarnFreq.setStatus('current')
if mibBuilder.loadTexts: smtpWarnFreq.setDescription('The frequency at which alerts within the warning category may be sent to the mail recipient(s).')
smtpInfoFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("daily", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpInfoFreq.setStatus('current')
if mibBuilder.loadTexts: smtpInfoFreq.setDescription('The frequency at which alerts within the information category may be sent to the mail recipient(s).')
smtpRecipNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipNumber.setStatus('current')
if mibBuilder.loadTexts: smtpRecipNumber.setDescription('The number of email recipients configured to receive alerts.')
smtpRecipTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 7), )
if mibBuilder.loadTexts: smtpRecipTable.setStatus('obsolete')
if mibBuilder.loadTexts: smtpRecipTable.setDescription('A table containing a list of all configured mail alert recipients for this system. The number of entries in this table is given by the value of smtpRecipNumber. This object is obsolete. Superceded by smptRecipientTable.')
smtpRecipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 7, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "smtpRecipIndex"))
if mibBuilder.loadTexts: smtpRecipEntry.setStatus('obsolete')
if mibBuilder.loadTexts: smtpRecipEntry.setDescription('Mail alert recipient information. This object is obsolete. Superceded by smtpRecipientEntry.')
smtpRecipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipIndex.setStatus('obsolete')
if mibBuilder.loadTexts: smtpRecipIndex.setDescription('A unique value for each configured mail recipient. Its value ranges between 1 and the value of smtpRecipNumber. This table entry is obsolete. Superceded by smtpRecipientIndex.')
smtpRecipName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipName.setStatus('obsolete')
if mibBuilder.loadTexts: smtpRecipName.setDescription('The email address of the recipient. This table entry is obsolete. Superceded by smtpRecipientName.')
smtpDiagUUencEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpDiagUUencEnabled.setStatus('current')
if mibBuilder.loadTexts: smtpDiagUUencEnabled.setDescription('Indicates whether diagnostic emails are UU encoded or not.')
smtpUndisclosedRecipNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpUndisclosedRecipNumber.setStatus('obsolete')
if mibBuilder.loadTexts: smtpUndisclosedRecipNumber.setDescription('The number of email recipients configured to receive undisclosed alerts. This object is obsolete. Undisclosed recipients are now grouped with disclosed recipients.')
smtpUndisclosedRecipTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 10), )
if mibBuilder.loadTexts: smtpUndisclosedRecipTable.setStatus('obsolete')
if mibBuilder.loadTexts: smtpUndisclosedRecipTable.setDescription('A table containing a list of all configured mail alert recipients which are to receive undisclosed alerts for this system. The number of entries in this table is given by the value of smtpUndisclosedRecipNumber. This object is obsolete. Undisclosed recipients are now grouped with disclosed recipients.')
smtpUndisclosedRecipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 10, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "smtpUndisclosedRecipIndex"))
if mibBuilder.loadTexts: smtpUndisclosedRecipEntry.setStatus('obsolete')
if mibBuilder.loadTexts: smtpUndisclosedRecipEntry.setDescription('Undisclosed mail alert recipient information. This table is obsolete. Undisclosed recipients are now grouped with disclosed recipients.')
smtpUndisclosedRecipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpUndisclosedRecipIndex.setStatus('obsolete')
if mibBuilder.loadTexts: smtpUndisclosedRecipIndex.setDescription('A unique value for each configured mail recipient which is to receive undisclosed alert information. Its value ranges between 1 and the value of smtpUndisclosedRecipNumber. This table entry is obsolete. Undisclosed recipients are now grouped with disclosed recipients.')
smtpUndisclosedRecipName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpUndisclosedRecipName.setStatus('obsolete')
if mibBuilder.loadTexts: smtpUndisclosedRecipName.setDescription('The email address of the recipient. This object is obsolete. Undisclosed recipients are now grouped with disclosed recipients.')
smtpRecipientTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11), )
if mibBuilder.loadTexts: smtpRecipientTable.setStatus('current')
if mibBuilder.loadTexts: smtpRecipientTable.setDescription('A table containing a list of all configured mail alert recipients for this system, whether to disclose details in emails sent to the recipients and whether to send empty summary emails when due. The number of entries in this table is given by the value of smtpRecipNumber.')
smtpRecipientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "smtpRecipientIndex"))
if mibBuilder.loadTexts: smtpRecipientEntry.setStatus('current')
if mibBuilder.loadTexts: smtpRecipientEntry.setDescription('Mail alert recipient information.')
smtpRecipientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipientIndex.setStatus('current')
if mibBuilder.loadTexts: smtpRecipientIndex.setDescription('A unique value for each configured mail recipient.')
smtpRecipientName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipientName.setStatus('current')
if mibBuilder.loadTexts: smtpRecipientName.setDescription('The email address of the recipient.')
smtpRecipientDisclose = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipientDisclose.setStatus('current')
if mibBuilder.loadTexts: smtpRecipientDisclose.setDescription('Disclose details in emails to this recipient.')
smtpRecipientEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecipientEmpty.setStatus('current')
if mibBuilder.loadTexts: smtpRecipientEmpty.setDescription('If there have been no events when summary emails are due then send empty emails.')
winCritFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winCritFreq.setStatus('obsolete')
if mibBuilder.loadTexts: winCritFreq.setDescription('The frequency at which alerts within the critical category may be sent to the windows popup recipient(s). This object is now obsolete.')
winSevFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winSevFreq.setStatus('obsolete')
if mibBuilder.loadTexts: winSevFreq.setDescription('The frequency at which alerts within the severe category may be sent to the windows popup recipient(s). This object is now obsolete.')
winWarnFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winWarnFreq.setStatus('obsolete')
if mibBuilder.loadTexts: winWarnFreq.setDescription('The frequency at which alerts within the warning category may be sent to the windows popup recipient(s). This object is now obsolete.')
winInfoFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winInfoFreq.setStatus('obsolete')
if mibBuilder.loadTexts: winInfoFreq.setDescription('The frequency at which alerts within the information category may be sent to the windows popup recipient(s). This object is now obsolete.')
winRecipNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winRecipNumber.setStatus('obsolete')
if mibBuilder.loadTexts: winRecipNumber.setDescription('The number of windows popup recipients configured to receive alerts. This object is now obsolete.')
winRecipTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 6), )
if mibBuilder.loadTexts: winRecipTable.setStatus('obsolete')
if mibBuilder.loadTexts: winRecipTable.setDescription('A table containing a list of all configured windows popup alert recipients for this system. The number of entries in this table is given by the value of winRecipNumber. This object is now obsolete.')
winRecipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "winRecipIndex"))
if mibBuilder.loadTexts: winRecipEntry.setStatus('obsolete')
if mibBuilder.loadTexts: winRecipEntry.setDescription('Windows alert recipient information. This object is now obsolete.')
winRecipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: winRecipIndex.setStatus('obsolete')
if mibBuilder.loadTexts: winRecipIndex.setDescription('A unique value for each configured windows popup recipient. Its value ranges between 1 and the value of winRecipNumber. This object is now obsolete.')
winRecipName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: winRecipName.setStatus('obsolete')
if mibBuilder.loadTexts: winRecipName.setDescription('The name of the windows popup recipient. This object is now obsolete.')
snmpCritFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCritFreq.setStatus('current')
if mibBuilder.loadTexts: snmpCritFreq.setDescription('The frequency at which alerts within the critical category may be sent to the SNMP recipient(s).')
snmpSevFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSevFreq.setStatus('current')
if mibBuilder.loadTexts: snmpSevFreq.setDescription('The frequency at which alerts within the severe category may be sent to the SNMP recipient(s).')
snmpWarnFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpWarnFreq.setStatus('current')
if mibBuilder.loadTexts: snmpWarnFreq.setDescription('The frequency at which alerts within the warning category may be sent to the SNMP recipient(s).')
snmpInfoFreq = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInfoFreq.setStatus('current')
if mibBuilder.loadTexts: snmpInfoFreq.setDescription('The frequency at which alerts within the information category may be sent to the SNMP recipient(s).')
snmpRecipNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpRecipNumber.setStatus('obsolete')
if mibBuilder.loadTexts: snmpRecipNumber.setDescription('The number of SNMP recipients configured to receive alerts. This object is obsolete. It has been replaced by the object snmpTrapHostNumber.')
snmpRecipTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 6), )
if mibBuilder.loadTexts: snmpRecipTable.setStatus('obsolete')
if mibBuilder.loadTexts: snmpRecipTable.setDescription('A table containing a list of all SNMP alert recipients for this system. The number of entries in this table is given by the value of snmpRecipNumber. This object is obsolete. It has been replaced by the table object snmpTrapHostTable.')
snmpRecipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snmpRecipIndex"))
if mibBuilder.loadTexts: snmpRecipEntry.setStatus('obsolete')
if mibBuilder.loadTexts: snmpRecipEntry.setDescription('SNMP alert recipient information. This object is obsolete. It has been replaced by the object snmpTrapHostEntry.')
snmpRecipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpRecipIndex.setStatus('obsolete')
if mibBuilder.loadTexts: snmpRecipIndex.setDescription('A unique value for each configured SNMP alert recipient. Its value ranges between 1 and the value of snmpRecipNumber. This object is obsolete. It has been replaced by the object snmpTrapHostIndex.')
snmpRecipName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 5, 3, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpRecipName.setStatus('obsolete')
if mibBuilder.loadTexts: snmpRecipName.setDescription('The hostname or IP address of the SNMP manager to receive the alert. This object is obsolete. It has been replaced by the object snmpTrapHost.')
snmpProtocolMode = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bilingual", 1), ("version1", 2), ("version2c", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpProtocolMode.setStatus('current')
if mibBuilder.loadTexts: snmpProtocolMode.setDescription('Indicates the protocol to be used by the agent: bilingual(1) - the agent will process SNMP version 1 or SNMP version 2c requests. The protocol version used in the response will be that used in the request. version1(2) - the agent will only process requests made using SNMP version 1. The response will be sent using SNMP version 1. version2c(3) - the agent will only process requests made using SNMP version 2c. The response will be sent using SNMP version 2c. NOTE: requests made using a protocol version which does not comply with the agents protocol configuration will result in the badVersions statistic being incremented and the SNMP packet being discarded.')
snmpAccessRestricted = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restricted", 1), ("unrestricted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessRestricted.setStatus('current')
if mibBuilder.loadTexts: snmpAccessRestricted.setDescription('Indicates whether access to the SNMP agent is restricted to the set of hostnames or IP addresses configured in snmpAccessRestrictedTable or unrestricted (such that any manager may access the SNMP agent). NOTE : this setting controls the use of the SNMP access restricted table in that there may be entries in this table, but access to the interface will be allowed from any host if this variable is set to unrestricted(2).')
snmpAccessRestrictedNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessRestrictedNumber.setStatus('current')
if mibBuilder.loadTexts: snmpAccessRestrictedNumber.setDescription('The number of configured restricted access entries.')
snmpAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 4), )
if mibBuilder.loadTexts: snmpAccessRestrictedTable.setStatus('current')
if mibBuilder.loadTexts: snmpAccessRestrictedTable.setDescription('A table containing the hostnames or IP addresses of managers which have restricted access the SNMP agent. The number of entries in this table is given by the value of snmpAccessRestrictedNumber.')
snmpAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snmpAccessRestrictedHost"))
if mibBuilder.loadTexts: snmpAccessRestrictedEntry.setStatus('current')
if mibBuilder.loadTexts: snmpAccessRestrictedEntry.setDescription('Restricted SNMP access information.')
snmpAccessRestrictedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessRestrictedHost.setStatus('current')
if mibBuilder.loadTexts: snmpAccessRestrictedHost.setDescription('The hostname or IP address of a manager which has restricted access to the SNMP agent.')
snmpTrapHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapHostNumber.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostNumber.setDescription('The number of configured host destinations to receive traps from the SNMP agent. NOTE: the traps generated include alert events and: linkUp, coldStart AND authenticationFailure (which is controlled by the MIBII variable snmpEnableAuthenTraps).')
snmpTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 6), )
if mibBuilder.loadTexts: snmpTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostTable.setDescription('A table containing the hostnames or IP addresses of managers which are to receive traps from the SNMP agent. The number of entries in this table is given by the value of snmpTrapHostNumber.')
snmpTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 6, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "snmpTrapHostIndex"))
if mibBuilder.loadTexts: snmpTrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostEntry.setDescription('SNMP trap host information.')
snmpTrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapHostIndex.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostIndex.setDescription('A unique value for each trap host. Its value ranges from 1 to snmpTrapHostNumber.')
snmpTrapHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 6, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapHost.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHost.setDescription('The hostname or IP address of a manager which is to receive traps from the SNMP agent.')
verinfoSw = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verinfoSw.setStatus('current')
if mibBuilder.loadTexts: verinfoSw.setDescription('Systems software release information.')
verinfoHw = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verinfoHw.setStatus('current')
if mibBuilder.loadTexts: verinfoHw.setDescription('Hardware release information.')
verModNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModNumber.setStatus('current')
if mibBuilder.loadTexts: verModNumber.setDescription('The number of modules.')
verModTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4), )
if mibBuilder.loadTexts: verModTable.setStatus('current')
if mibBuilder.loadTexts: verModTable.setDescription('A table containing a list of version information for each module within the system. The number of entries in this table is given by the value of verModNumber.')
verModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "verModIndex"))
if mibBuilder.loadTexts: verModEntry.setStatus('current')
if mibBuilder.loadTexts: verModEntry.setDescription('Module version information.')
verModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("fsb", 2), ("fcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModIndex.setStatus('current')
if mibBuilder.loadTexts: verModIndex.setDescription('An identifier for each board. tcp(1) - the tcp board. fsb(2) - the filesystem board. fcp(3) - the fibre channel board.')
verModLoader = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModLoader.setStatus('current')
if mibBuilder.loadTexts: verModLoader.setDescription('Module loader version.')
verModKernel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModKernel.setStatus('current')
if mibBuilder.loadTexts: verModKernel.setDescription('Module kernel version.')
verModHw = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModHw.setStatus('current')
if mibBuilder.loadTexts: verModHw.setDescription('Module hardware version.')
verModSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModSerial.setStatus('current')
if mibBuilder.loadTexts: verModSerial.setDescription('Module serial number.')
verModBuildState = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModBuildState.setStatus('current')
if mibBuilder.loadTexts: verModBuildState.setDescription('Module build state.')
verModUniq0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModUniq0.setStatus('current')
if mibBuilder.loadTexts: verModUniq0.setDescription('EEPROM Uniq value 0.')
verModUniq1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModUniq1.setStatus('current')
if mibBuilder.loadTexts: verModUniq1.setDescription('EEPROM Uniq value 1.')
verModFirstDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModFirstDate.setStatus('current')
if mibBuilder.loadTexts: verModFirstDate.setDescription('First Date.')
verModMTDSLastFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModMTDSLastFailure.setStatus('current')
if mibBuilder.loadTexts: verModMTDSLastFailure.setDescription('Last Failure date for MTDS.')
verModMTDSFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModMTDSFailures.setStatus('current')
if mibBuilder.loadTexts: verModMTDSFailures.setDescription('Manufacturing and test number of failures.')
verModMTDSLastPass = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModMTDSLastPass.setStatus('current')
if mibBuilder.loadTexts: verModMTDSLastPass.setDescription('Manufacturing and test last pass date.')
verModMTDSPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModMTDSPasses.setStatus('current')
if mibBuilder.loadTexts: verModMTDSPasses.setDescription('Manufacturing and test number of passes.')
verModCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModCardID.setStatus('current')
if mibBuilder.loadTexts: verModCardID.setDescription('Card identity.')
verModCardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModCardRev.setStatus('current')
if mibBuilder.loadTexts: verModCardRev.setDescription('Card revision number.')
verModGlueRev = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 7, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: verModGlueRev.setStatus('current')
if mibBuilder.loadTexts: verModGlueRev.setDescription('Glue revision number.')
cronJobNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobNumber.setStatus('current')
if mibBuilder.loadTexts: cronJobNumber.setDescription('The number of cron jobs configured to run on this system. NOTE: this table also includes those cron jobs which are configured to perform snapshot scheduling.')
cronJobTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2), )
if mibBuilder.loadTexts: cronJobTable.setStatus('current')
if mibBuilder.loadTexts: cronJobTable.setDescription('A table containing a list of all cron jobs configured to run on this system. The number of entries in this table is given by the value of cronJobNumber.')
cronJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "cronJobIndex"))
if mibBuilder.loadTexts: cronJobEntry.setStatus('current')
if mibBuilder.loadTexts: cronJobEntry.setDescription('Cron job information.')
cronJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobIndex.setStatus('current')
if mibBuilder.loadTexts: cronJobIndex.setDescription('A unique value for each cron job entry.')
cronJobDateSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobDateSpec.setStatus('current')
if mibBuilder.loadTexts: cronJobDateSpec.setDescription('The date specification for the cron job.')
cronJobCommandList = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobCommandList.setStatus('current')
if mibBuilder.loadTexts: cronJobCommandList.setDescription('A semi-colon separated list of commands to be run as part of the cron job.')
cronJobMailList = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobMailList.setStatus('current')
if mibBuilder.loadTexts: cronJobMailList.setDescription('A semi-colon separated list of recipients who each are to receive a copy of the output generated as a result of running the cron job. NOTE: This value will be a zero length string if the output of running the job is not be emailed.')
cronJobAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cronJobAccessLevel.setStatus('current')
if mibBuilder.loadTexts: cronJobAccessLevel.setDescription('The access level at which the cron job is run.')
atJobNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobNumber.setStatus('current')
if mibBuilder.loadTexts: atJobNumber.setDescription('The number of at jobs configured to run on this system.')
atJobTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4), )
if mibBuilder.loadTexts: atJobTable.setStatus('current')
if mibBuilder.loadTexts: atJobTable.setDescription('A table containing a list of all at jobs configured to run on this system. The number of entries in this table is given by the value of atJobNumber.')
atJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "atJobIndex"))
if mibBuilder.loadTexts: atJobEntry.setStatus('current')
if mibBuilder.loadTexts: atJobEntry.setDescription('At job information.')
atJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobIndex.setStatus('current')
if mibBuilder.loadTexts: atJobIndex.setDescription('A unique value for each at job entry.')
atJobRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobRunTime.setStatus('current')
if mibBuilder.loadTexts: atJobRunTime.setDescription('The date at which the at job is scheduled to run expressed as a local time in the format YYYY-MM-DD HH:MI (Local)')
atJobCommandList = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobCommandList.setStatus('current')
if mibBuilder.loadTexts: atJobCommandList.setDescription('A semi-colon separated list of commands to be run as part of the at job.')
atJobMailList = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobMailList.setStatus('current')
if mibBuilder.loadTexts: atJobMailList.setDescription('A semi-colon separated list of recipients who each are to receive a copy of the output generated as a result of running the cron job. NOTE: This value will be a zero length string if the output of running the job is not be emailed.')
atJobAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 8, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atJobAccessLevel.setStatus('current')
if mibBuilder.loadTexts: atJobAccessLevel.setDescription('The access level at which the at job is run.')
webCurrActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCurrActiveSessions.setStatus('obsolete')
if mibBuilder.loadTexts: webCurrActiveSessions.setDescription('The current number of active sessions made through the web interface. This object is now obsolete.')
webMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webMaxSessions.setStatus('obsolete')
if mibBuilder.loadTexts: webMaxSessions.setDescription('The maximum number of simultaneous sessions ever made through the web interface since power up. This object is now obsolete.')
webTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalSessions.setStatus('obsolete')
if mibBuilder.loadTexts: webTotalSessions.setDescription('The total number of sessions made through the web interface since power up. This object is now obsolete.')
webRejectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webRejectedSessions.setStatus('obsolete')
if mibBuilder.loadTexts: webRejectedSessions.setDescription('The number of sessions which have been rejected through the web interface since power up. Sessions may be rejected due to either the maximum allowed number of sessions being met or host access restrictions. Refer to the web access variables. This object is now obsolete.')
webTotalFramesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalFramesTX.setStatus('obsolete')
if mibBuilder.loadTexts: webTotalFramesTX.setDescription('The total number of frames transmitted through the web interface since power up. This object is now obsolete.')
webTotalFramesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalFramesRX.setStatus('obsolete')
if mibBuilder.loadTexts: webTotalFramesRX.setDescription('The total number of frames received through the web interface since power up. This object is now obsolete.')
webTotalBytesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalBytesTX.setStatus('obsolete')
if mibBuilder.loadTexts: webTotalBytesTX.setDescription('The total number of bytes transmitted through the web interface since power up. This object is now obsolete.')
webTotalBytesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webTotalBytesRX.setStatus('obsolete')
if mibBuilder.loadTexts: webTotalBytesRX.setDescription('The total number of bytes received through the web interface since power up. This object is now obsolete.')
sictrlCurrActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlCurrActiveSessions.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlCurrActiveSessions.setDescription('The current number of active sessions made through the sictrl interface. This object is now obsolete.')
sictrlMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlMaxSessions.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlMaxSessions.setDescription('The maximum number of simultaneous sessions ever made through the sictrl interface since power up. This object is now obsolete.')
sictrlTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalSessions.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlTotalSessions.setDescription('The total number of sessions made through the sictrl interface since power up. This object is now obsolete.')
sictrlRejectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlRejectedSessions.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlRejectedSessions.setDescription('The number of sessions which have been rejected through the sictrl interface since power up. Sessions may be rejected due to either the maximum allowed number of sessions being met or host access restrictions. Refer to the sictrl access variables. This object is now obsolete.')
sictrlTotalFramesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalFramesTX.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlTotalFramesTX.setDescription('The total number of frames transmitted through the sictrl interface since power up.')
sictrlTotalFramesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalFramesRX.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlTotalFramesRX.setDescription('The total number of frames received through the sictrl interface since power up.')
sictrlTotalBytesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalBytesTX.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlTotalBytesTX.setDescription('The total number of bytes transmitted through the sictrl interface since power up.')
sictrlTotalBytesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sictrlTotalBytesRX.setStatus('obsolete')
if mibBuilder.loadTexts: sictrlTotalBytesRX.setDescription('The total number of bytes received through the sictrl interface since power up.')
telnetCurrActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetCurrActiveSessions.setStatus('current')
if mibBuilder.loadTexts: telnetCurrActiveSessions.setDescription('The current number of active sessions made through the telnet interface.')
telnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetMaxSessions.setStatus('current')
if mibBuilder.loadTexts: telnetMaxSessions.setDescription('The maximum number of simultaneous sessions ever made through the telnet interface since power up.')
telnetTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalSessions.setStatus('current')
if mibBuilder.loadTexts: telnetTotalSessions.setDescription('The total number of sessions made through the telnet interface since power up.')
telnetRejectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetRejectedSessions.setStatus('current')
if mibBuilder.loadTexts: telnetRejectedSessions.setDescription('The number of sessions which have been rejected through the telnet interface since power up. Sessions may be rejected due to either the maximum allowed number of sessions being met or host access restrictions. Refer to the telnet access variables.')
telnetTotalFramesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalFramesTX.setStatus('current')
if mibBuilder.loadTexts: telnetTotalFramesTX.setDescription('The total number of frames transmitted through the telnet interface since power up.')
telnetTotalFramesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalFramesRX.setStatus('current')
if mibBuilder.loadTexts: telnetTotalFramesRX.setDescription('The total number of frames received through the telnet interface since power up.')
telnetTotalBytesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalBytesTX.setStatus('current')
if mibBuilder.loadTexts: telnetTotalBytesTX.setDescription('The total number of bytes transmitted through the telnet interface since power up.')
telnetTotalBytesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 3, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetTotalBytesRX.setStatus('current')
if mibBuilder.loadTexts: telnetTotalBytesRX.setDescription('The total number of bytes received through the telnet interface since power up.')
secureWebCurrActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebCurrActiveSessions.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebCurrActiveSessions.setDescription('The current number of active sessions made through the secure web interface. This object is now obsolete.')
secureWebMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebMaxSessions.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebMaxSessions.setDescription('The maximum number of simultaneous sessions ever made through the secure web interface since power up. This object is now obsolete.')
secureWebTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalSessions.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebTotalSessions.setDescription('The total number of sessions made through the secure web interface since power up. This object is now obsolete.')
secureWebRejectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebRejectedSessions.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebRejectedSessions.setDescription('The number of sessions which have been rejected through the secure web interface since power up. Sessions may be rejected due to either the maximum allowed number of sessions being met or host access restrictions. Refer to the secureWeb access variables. This object is now obsolete.')
secureWebTotalFramesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalFramesTX.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebTotalFramesTX.setDescription('The total number of frames transmitted through the secure web interface since power up. This object is now obsolete.')
secureWebTotalFramesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalFramesRX.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebTotalFramesRX.setDescription('The total number of frames received through the secure web interface since power up. This object is now obsolete.')
secureWebTotalBytesTX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalBytesTX.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebTotalBytesTX.setDescription('The total number of bytes transmitted through the secure web interface since power up. This object is now obsolete.')
secureWebTotalBytesRX = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 9, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureWebTotalBytesRX.setStatus('obsolete')
if mibBuilder.loadTexts: secureWebTotalBytesRX.setDescription('The total number of bytes received through the secure web interface since power up. This object is now obsolete.')
hwFlowNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlowNumber.setStatus('obsolete')
if mibBuilder.loadTexts: hwFlowNumber.setDescription('The number of boards which permit hardware flow control. This object is now obsolete, as Hardware Flow is only for use by developers.')
hwFlowTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2), )
if mibBuilder.loadTexts: hwFlowTable.setStatus('obsolete')
if mibBuilder.loadTexts: hwFlowTable.setDescription('A table containing the hardware flow control settings for the boards within this system. The number of entries in this table is given by the value of hwFlowNumber. This object is now obsolete, as Hardware Flow is only for use by developers.')
hwFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "hwFlowIndex"))
if mibBuilder.loadTexts: hwFlowEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hwFlowEntry.setDescription('Hardware flow control setting information. This object is now obsolete, as Hardware Flow is only for use by developers.')
hwFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("fsb", 2), ("fcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlowIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hwFlowIndex.setDescription('An identifier for each board. tcp(1) - the tcp board. fsb(2) - the filesystem board. fcp(3) - the fibre channel board. This object is now obsolete, as Hardware Flow is only for use by developers.')
hwFlowDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlowDebug.setStatus('obsolete')
if mibBuilder.loadTexts: hwFlowDebug.setDescription('Indicates whether hardware flow control is enabled on the debug port (port number 0) on this board. This object is now obsolete, as Hardware Flow is only for use by developers.')
hwFlowConsole = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 5, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlowConsole.setStatus('obsolete')
if mibBuilder.loadTexts: hwFlowConsole.setDescription('Indicates whether hardware flow control is enabled on the console port (port number 1) on this board. This object is now obsolete, as Hardware Flow is only for use by developers.')
cpuUtilizationNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilizationNumber.setStatus('current')
if mibBuilder.loadTexts: cpuUtilizationNumber.setDescription('The number of CPUs which may be present on this system.')
cpuUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2), )
if mibBuilder.loadTexts: cpuUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: cpuUtilizationTable.setDescription('A table of usage information relevant to each CPU which may be present on this system. The number of entries in this table is given by the value of cpuUtilizationNumber.')
cpuUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "cpuUtilizationCnIndex"), (0, "BLUEARC-SERVER-MIB", "cpuIndex"))
if mibBuilder.loadTexts: cpuUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: cpuUtilizationEntry.setDescription('Usage information for a CPU which may be present on this system.')
cpuUtilizationCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilizationCnIndex.setStatus('current')
if mibBuilder.loadTexts: cpuUtilizationCnIndex.setDescription('The cluster node for this value.')
cpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndex.setStatus('current')
if mibBuilder.loadTexts: cpuIndex.setDescription('CPU core index.')
cpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('current')
if mibBuilder.loadTexts: cpuUtilization.setDescription('Current percentage usage of this CPU.')
fpgaUtilizationNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilizationNumber.setStatus('current')
if mibBuilder.loadTexts: fpgaUtilizationNumber.setDescription('The number of Field Programmable Gate Arrays (regardless of their current state) which may be present on this system.')
fpgaUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4), )
if mibBuilder.loadTexts: fpgaUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: fpgaUtilizationTable.setDescription('A table of usage information relevant to each Field Programmable Gate Array which may be present on this system. The number of entries in this table is given by the value of fpgaUtilizationNumber.')
fpgaUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fpgaUtilizationCnIndex"), (0, "BLUEARC-SERVER-MIB", "fpgaUtilizationFpgaIndex"))
if mibBuilder.loadTexts: fpgaUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: fpgaUtilizationEntry.setDescription('Usage information for a Field Programmable Gate Array which may be present on this system.')
fpgaUtilizationCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilizationCnIndex.setStatus('current')
if mibBuilder.loadTexts: fpgaUtilizationCnIndex.setDescription('The cluster node for this value.')
fpgaUtilizationFpgaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilizationFpgaIndex.setStatus('current')
if mibBuilder.loadTexts: fpgaUtilizationFpgaIndex.setDescription('The index of the Field Programmable Gate Array for this value.')
fpgaUtilizationFpgaName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilizationFpgaName.setStatus('current')
if mibBuilder.loadTexts: fpgaUtilizationFpgaName.setDescription('The name of the Field Programmable Gate Array for this value.')
fpgaUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaUtilization.setStatus('current')
if mibBuilder.loadTexts: fpgaUtilization.setDescription('Current percentage usage averaged over the last second of this Field Programmable Gate Array.')
systemDriveStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDriveStatsNumber.setStatus('current')
if mibBuilder.loadTexts: systemDriveStatsNumber.setDescription('The number of system drives for which statistics are available. If enhanced statistics gathering is not enabled, this value will be zero. See the command enhanced-perf-stats.')
systemDriveStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2), )
if mibBuilder.loadTexts: systemDriveStatsTable.setStatus('current')
if mibBuilder.loadTexts: systemDriveStatsTable.setDescription('A table of system drive statistics entries. If enhanced statistics gathering is not enabled, this table will be empty. See the command enhanced-perf-stats.')
systemDriveStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "systemDriveStatsCnIndex"), (0, "BLUEARC-SERVER-MIB", "systemDriveStatsSdId"))
if mibBuilder.loadTexts: systemDriveStatsEntry.setStatus('current')
if mibBuilder.loadTexts: systemDriveStatsEntry.setDescription('System drive statistical information.')
systemDriveStatsCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDriveStatsCnIndex.setStatus('current')
if mibBuilder.loadTexts: systemDriveStatsCnIndex.setDescription('The cluster node for this value.')
systemDriveStatsSdId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDriveStatsSdId.setStatus('current')
if mibBuilder.loadTexts: systemDriveStatsSdId.setDescription('The system drive identifier.')
cumNonZeroQueuedReadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumNonZeroQueuedReadTime.setStatus('current')
if mibBuilder.loadTexts: cumNonZeroQueuedReadTime.setDescription('The cumulative time that queued reads have taken since this statistic was last reset in microseconds.')
cumNonZeroQueuedWriteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumNonZeroQueuedWriteTime.setStatus('current')
if mibBuilder.loadTexts: cumNonZeroQueuedWriteTime.setDescription('The cumulative time that queued writes have taken since this statistic was last reset in microseconds.')
readCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCount.setStatus('current')
if mibBuilder.loadTexts: readCount.setDescription('The total number of reads for this system drive.')
singleBufferWriteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singleBufferWriteCount.setStatus('current')
if mibBuilder.loadTexts: singleBufferWriteCount.setDescription('The total number of single buffer writes for this system drive.')
stripeWriteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stripeWriteCount.setStatus('current')
if mibBuilder.loadTexts: stripeWriteCount.setDescription('The total number of stripe writes for this system drive.')
readCumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCumLatency.setStatus('current')
if mibBuilder.loadTexts: readCumLatency.setDescription('The cumulative latency for read operations in microseconds.')
oneWriteCumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oneWriteCumLatency.setStatus('current')
if mibBuilder.loadTexts: oneWriteCumLatency.setDescription('The cumulative latency for single buffer write operations in microseconds.')
stripeWriteCumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stripeWriteCumLatency.setStatus('current')
if mibBuilder.loadTexts: stripeWriteCumLatency.setDescription('The cumulative latency for stripe write operations in microseconds.')
spanStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanStatsNumber.setStatus('current')
if mibBuilder.loadTexts: spanStatsNumber.setDescription('The number of spans for which statistics are available.')
spanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2), )
if mibBuilder.loadTexts: spanStatsTable.setStatus('current')
if mibBuilder.loadTexts: spanStatsTable.setDescription('A table of span statistics entries.')
spanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "spanStatsSpanId"))
if mibBuilder.loadTexts: spanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: spanStatsEntry.setDescription('Span statistical information.')
spanStatsSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanStatsSpanId.setStatus('current')
if mibBuilder.loadTexts: spanStatsSpanId.setDescription('The unique identifier for this span, generated from the first system drive in the span.')
spanLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanLabel.setStatus('current')
if mibBuilder.loadTexts: spanLabel.setDescription('The label for a span.')
spanCapacityTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanCapacityTotalUpper.setStatus('current')
if mibBuilder.loadTexts: spanCapacityTotalUpper.setDescription("The high order 32-bits representing the span's capacity in bytes. (see also spanCapacityTotalLower)")
spanCapacityTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanCapacityTotalLower.setStatus('current')
if mibBuilder.loadTexts: spanCapacityTotalLower.setDescription("The low order 32-bits representing the span's capacity in bytes. (see also spanCapacityTotalUpper)")
spanCapacityUsedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanCapacityUsedUpper.setStatus('current')
if mibBuilder.loadTexts: spanCapacityUsedUpper.setDescription("The high order 32-bits representing the span's used space in bytes. (see also spanCapacityUsedLower)")
spanCapacityUsedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanCapacityUsedLower.setStatus('current')
if mibBuilder.loadTexts: spanCapacityUsedLower.setDescription("The low order 32-bits representing the span's used space in bytes. (see also spanCapacityUsedUpper)")
spanTierStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierStatsNumber.setStatus('current')
if mibBuilder.loadTexts: spanTierStatsNumber.setDescription('The number of spans using tiered storage for which statistics are available.')
spanTierStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4), )
if mibBuilder.loadTexts: spanTierStatsTable.setStatus('current')
if mibBuilder.loadTexts: spanTierStatsTable.setDescription('A table of tiered span statistics entries.')
spanTierStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "spanTierStatsSpanId"), (0, "BLUEARC-SERVER-MIB", "spanTier"))
if mibBuilder.loadTexts: spanTierStatsEntry.setStatus('current')
if mibBuilder.loadTexts: spanTierStatsEntry.setDescription('Tiered span statistical information.')
spanTierStatsSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierStatsSpanId.setStatus('current')
if mibBuilder.loadTexts: spanTierStatsSpanId.setDescription('The permanent identifier for this span.')
spanTier = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTier.setStatus('current')
if mibBuilder.loadTexts: spanTier.setDescription('The tier type for this entry.')
spanTierLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierLabel.setStatus('current')
if mibBuilder.loadTexts: spanTierLabel.setDescription('The label for the span.')
spanTierCapacityTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierCapacityTotalUpper.setStatus('current')
if mibBuilder.loadTexts: spanTierCapacityTotalUpper.setDescription("The high order 32-bits representing the tier's capacity in bytes. (see also spanTierCapacityTotalLower)")
spanTierCapacityTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierCapacityTotalLower.setStatus('current')
if mibBuilder.loadTexts: spanTierCapacityTotalLower.setDescription("The low order 32-bits representing the tier's capacity in bytes. (see also spanTierCapacityTotalUpper)")
spanTierCapacityUsedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierCapacityUsedUpper.setStatus('current')
if mibBuilder.loadTexts: spanTierCapacityUsedUpper.setDescription("The high order 32-bits representing the tier's used space in bytes. (see also spanTierCapacityUsedLower)")
spanTierCapacityUsedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 4, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanTierCapacityUsedLower.setStatus('current')
if mibBuilder.loadTexts: spanTierCapacityUsedLower.setDescription("The low order 32-bits representing the tier's used space in bytes. (see also spanTierCapacityUsedUpper)")
fileSystemStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemStatsNumber.setStatus('current')
if mibBuilder.loadTexts: fileSystemStatsNumber.setDescription('The number of file systems for which statistics are available.')
fileSystemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2), )
if mibBuilder.loadTexts: fileSystemStatsTable.setStatus('current')
if mibBuilder.loadTexts: fileSystemStatsTable.setDescription('Table of file system statistics entries')
fileSystemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fsStatsFsId"))
if mibBuilder.loadTexts: fileSystemStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fileSystemStatsEntry.setDescription('File system statistical information.')
fsStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatsFsId.setStatus('current')
if mibBuilder.loadTexts: fsStatsFsId.setDescription('The device identifier for this file system.')
fsStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatsFsLabel.setStatus('current')
if mibBuilder.loadTexts: fsStatsFsLabel.setDescription('The label for the file system.')
fsCapacityTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacityTotalUpper.setStatus('current')
if mibBuilder.loadTexts: fsCapacityTotalUpper.setDescription("The high order 32-bits representing the file system's capacity in bytes. (see also fsCapacityTotalLower)")
fsCapacityTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacityTotalLower.setStatus('current')
if mibBuilder.loadTexts: fsCapacityTotalLower.setDescription("The low order 32-bits representing the file system's capacity in bytes. (see also fsCapacityTotalUpper)")
fsCapacityUsedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacityUsedUpper.setStatus('current')
if mibBuilder.loadTexts: fsCapacityUsedUpper.setDescription("The high order 32-bits representing the file system's used space in bytes. (see also fsCapacityUsedLower)")
fsCapacityUsedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacityUsedLower.setStatus('current')
if mibBuilder.loadTexts: fsCapacityUsedLower.setDescription("The low order 32-bits representing the file system's used space in bytes. (see also fsCapacityUsedUpper)")
fsCapacitySnapshotUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacitySnapshotUpper.setStatus('current')
if mibBuilder.loadTexts: fsCapacitySnapshotUpper.setDescription("The high order 32-bits representing the file system's used space that is allocated to snapshots in bytes. (see also fsCapacitySnapshotLower)")
fsCapacitySnapshotLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCapacitySnapshotLower.setStatus('current')
if mibBuilder.loadTexts: fsCapacitySnapshotLower.setDescription("The low order 32-bits representing the file system's used space that is allocated to snapshots in bytes. (see also fsCapacitySnapshotUpper)")
fsNvramWaitedAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsNvramWaitedAllocs.setStatus('current')
if mibBuilder.loadTexts: fsNvramWaitedAllocs.setDescription('The number of waited allocations for nvram that have caused a delay to a file system operation.')
fsWriteSmoothing = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsWriteSmoothing.setStatus('current')
if mibBuilder.loadTexts: fsWriteSmoothing.setDescription('The number of times the file system had to wait for write smoothing.')
fileSystemTierStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemTierStatsNumber.setStatus('current')
if mibBuilder.loadTexts: fileSystemTierStatsNumber.setDescription('The number of tiered file system for which statistics are available.')
fileSystemTierStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4), )
if mibBuilder.loadTexts: fileSystemTierStatsTable.setStatus('current')
if mibBuilder.loadTexts: fileSystemTierStatsTable.setDescription('Table of tiered file system statistics entries.')
fsTierStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "fsTierStatsFsId"), (0, "BLUEARC-SERVER-MIB", "fsTier"))
if mibBuilder.loadTexts: fsTierStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fsTierStatsEntry.setDescription('Tiered file system statistical information.')
fsTierStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierStatsFsId.setStatus('current')
if mibBuilder.loadTexts: fsTierStatsFsId.setDescription('The permanent identifier for this file system.')
fsTier = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTier.setStatus('current')
if mibBuilder.loadTexts: fsTier.setDescription('The tier type of this entry.')
fsTierStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierStatsFsLabel.setStatus('current')
if mibBuilder.loadTexts: fsTierStatsFsLabel.setDescription('The label for the file system.')
fsTierCapacityTotalUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacityTotalUpper.setStatus('current')
if mibBuilder.loadTexts: fsTierCapacityTotalUpper.setDescription("The high order 32-bits representing the file system's capacity in this tier in bytes. (see also fsCapacityTotalLower)")
fsTierCapacityTotalLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacityTotalLower.setStatus('current')
if mibBuilder.loadTexts: fsTierCapacityTotalLower.setDescription("The low order 32-bits representing the file system's capacity in this tier in bytes. (see also fsCapacityTotalUpper)")
fsTierCapacityUsedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacityUsedUpper.setStatus('current')
if mibBuilder.loadTexts: fsTierCapacityUsedUpper.setDescription("The high order 32-bits representing the file system's used space in this tier in bytes. (see also fsCapacityUsedLower)")
fsTierCapacityUsedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacityUsedLower.setStatus('current')
if mibBuilder.loadTexts: fsTierCapacityUsedLower.setDescription("The low order 32-bits representing the file system's used space in this tier in bytes. (see also fsCapacityUsedUpper)")
fsTierCapacitySnapshotUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacitySnapshotUpper.setStatus('current')
if mibBuilder.loadTexts: fsTierCapacitySnapshotUpper.setDescription("The high order 32-bits representing the file system's used space that is allocated to snapshots in this tier in bytes. (see also fsCapacitySnapshotLower)")
fsTierCapacitySnapshotLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsTierCapacitySnapshotLower.setStatus('current')
if mibBuilder.loadTexts: fsTierCapacitySnapshotLower.setDescription("The low order 32-bits representing the file system's used space that is allocated to snapshots in this tier in bytes. (see also fsCapacitySnapshotUpper)")
metaDataCacheStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsNumber.setStatus('current')
if mibBuilder.loadTexts: metaDataCacheStatsNumber.setDescription('The number of metadata caches for which statistics are available.')
metaDataCacheStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2), )
if mibBuilder.loadTexts: metaDataCacheStatsTable.setStatus('current')
if mibBuilder.loadTexts: metaDataCacheStatsTable.setDescription('Table of metadata cache statistics entries')
metaDataCacheStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "metaDataCacheStatsFsId"), (0, "BLUEARC-SERVER-MIB", "metaDataCache"))
if mibBuilder.loadTexts: metaDataCacheStatsEntry.setStatus('current')
if mibBuilder.loadTexts: metaDataCacheStatsEntry.setDescription('Metadata cache statistical information. Metadata cache statistics are provided for the following vlsi chipset: wfile, wdir, wtree, obj, fsa.')
metaDataCacheStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsFsId.setStatus('current')
if mibBuilder.loadTexts: metaDataCacheStatsFsId.setDescription('The unique device Id for this file system.')
metaDataCache = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wfile", 1), ("wdir", 2), ("wtree", 3), ("objRoot", 4), ("objLeaf", 5), ("objIndirectionObject", 6), ("fsa", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCache.setStatus('current')
if mibBuilder.loadTexts: metaDataCache.setDescription('Enumerated identity of the chip to which these stats pertain.')
metaDataCacheStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsFsLabel.setStatus('current')
if mibBuilder.loadTexts: metaDataCacheStatsFsLabel.setDescription('The file system label.')
metaDataCacheStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsHits.setStatus('current')
if mibBuilder.loadTexts: metaDataCacheStatsHits.setDescription('The number of cache hits experienced with this metadata cache.')
metaDataCacheStatsMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaDataCacheStatsMisses.setStatus('current')
if mibBuilder.loadTexts: metaDataCacheStatsMisses.setDescription('The number of cache misses experienced with this metadata cache.')
sectorCacheStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsNumber.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsNumber.setDescription('The number of sector caches for which statistics are available.')
sectorCacheStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4), )
if mibBuilder.loadTexts: sectorCacheStatsTable.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsTable.setDescription('Table of sector cache statistics entries')
sectorCacheStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "sectorCacheStatsCnIndex"), (0, "BLUEARC-SERVER-MIB", "sectorCacheType"))
if mibBuilder.loadTexts: sectorCacheStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsEntry.setDescription('Sector cache statistical information. Sector cache statistics are provided for the following operations: read, read-ahead, write.')
sectorCacheStatsCnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsCnIndex.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsCnIndex.setDescription('The cluster node for these statistics.')
sectorCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("readAhead", 2), ("write", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheType.setStatus('current')
if mibBuilder.loadTexts: sectorCacheType.setDescription('Enumerated identity of the operation to which these stats pertain.')
sectorCacheStatsHitsPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsHitsPSI.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsHitsPSI.setDescription('The number of cache hits experienced with this sector cache.')
sectorCacheStatsHitsSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsHitsSSI.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsHitsSSI.setDescription('The number of cache hits experienced with this sector cache.')
sectorCacheStatsHitsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsHitsTotal.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsHitsTotal.setDescription('The number of cache hits experienced with this sector cache.')
sectorCacheStatsMissesPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsMissesPSI.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsMissesPSI.setDescription('The number of cache misses experienced with this sector cache.')
sectorCacheStatsMissesSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsMissesSSI.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsMissesSSI.setDescription('The number of cache misses experienced with this sector cache.')
sectorCacheStatsMissesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 5, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectorCacheStatsMissesTotal.setStatus('current')
if mibBuilder.loadTexts: sectorCacheStatsMissesTotal.setDescription('The number of cache misses experienced with this sector cache.')
protocolStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolStatsNumber.setStatus('current')
if mibBuilder.loadTexts: protocolStatsNumber.setDescription('The number of protocol statistical entries in the table. If enhanced statistics gathering is not enabled, this value will be zero. See the command enhanced-perf-stats.')
protocolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2), )
if mibBuilder.loadTexts: protocolStatsTable.setStatus('current')
if mibBuilder.loadTexts: protocolStatsTable.setDescription('Table of network protocol statistics entries. If enhanced statistics gathering is not enabled, this table will be empty. See the command enhanced-perf-stats.')
protocolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "protStatsFsId"), (0, "BLUEARC-SERVER-MIB", "protStatsFlavor"), (0, "BLUEARC-SERVER-MIB", "protStatsOpCode"))
if mibBuilder.loadTexts: protocolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: protocolStatsEntry.setDescription('Network protocol statistical information.')
protStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsFsId.setStatus('current')
if mibBuilder.loadTexts: protStatsFsId.setDescription('The device ID for this file system.')
protStatsFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("NFS", 0), ("CIFS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsFlavor.setStatus('current')
if mibBuilder.loadTexts: protStatsFlavor.setDescription('The type of network protocol these statistics pertain to one of CIFS, NFS.')
protStatsOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsOpCode.setStatus('current')
if mibBuilder.loadTexts: protStatsOpCode.setDescription('The opcode for the protocol operation in question.')
protStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsFsLabel.setStatus('current')
if mibBuilder.loadTexts: protStatsFsLabel.setDescription('The file system label.')
protStatsOpCodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protStatsOpCodeName.setStatus('current')
if mibBuilder.loadTexts: protStatsOpCodeName.setDescription('The name of the op-code.')
protOpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protOpCount.setStatus('current')
if mibBuilder.loadTexts: protOpCount.setDescription('The total number of operations for this type of opcode.')
protCumulativeLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protCumulativeLatency.setStatus('current')
if mibBuilder.loadTexts: protCumulativeLatency.setDescription('The cumulative latency experienced by operations for this opcode.')
protocolXferStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsNumber.setStatus('current')
if mibBuilder.loadTexts: protocolXferStatsNumber.setDescription('The number of network protocols for which statistics are available. If enhanced statistics gathering is not enabled, this value will be zero. See the command enhanced-perf-stats.')
protocolXferStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8), )
if mibBuilder.loadTexts: protocolXferStatsTable.setStatus('current')
if mibBuilder.loadTexts: protocolXferStatsTable.setDescription('Table of protocol transfer total statistics entries. If enhanced statistics gathering is not enabled, this table will be empty. See the command enhanced-perf-stats.')
protocolXferStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "protocolXferStatsFsId"), (0, "BLUEARC-SERVER-MIB", "protocolXferStatsFlavor"))
if mibBuilder.loadTexts: protocolXferStatsEntry.setStatus('current')
if mibBuilder.loadTexts: protocolXferStatsEntry.setDescription('Read and Write transfer total for each of the following network protocols: CIFS, NFS.')
protocolXferStatsFsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsFsId.setStatus('current')
if mibBuilder.loadTexts: protocolXferStatsFsId.setDescription('The device Id for this file system.')
protocolXferStatsFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("NFS", 0), ("CIFS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsFlavor.setStatus('current')
if mibBuilder.loadTexts: protocolXferStatsFlavor.setDescription('Enumerated identity of the network protocols.')
protocolXferStatsFsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsFsLabel.setStatus('current')
if mibBuilder.loadTexts: protocolXferStatsFsLabel.setDescription('The file system label.')
protocolXferStatsBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsBytesRead.setStatus('current')
if mibBuilder.loadTexts: protocolXferStatsBytesRead.setDescription('The number of bytes read.')
protocolXferStatsBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 6, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolXferStatsBytesWritten.setStatus('current')
if mibBuilder.loadTexts: protocolXferStatsBytesWritten.setDescription('The number of bytes written.')
intraClusterPortErrorNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraClusterPortErrorNumber.setStatus('current')
if mibBuilder.loadTexts: intraClusterPortErrorNumber.setDescription('The number of cluster network errors in the table.')
intraClusterPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2), )
if mibBuilder.loadTexts: intraClusterPortErrorTable.setStatus('current')
if mibBuilder.loadTexts: intraClusterPortErrorTable.setDescription('A table of network errors between nodes in a cluster.')
intraClusterPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "intraClusterPortErrsCnId"))
if mibBuilder.loadTexts: intraClusterPortErrorEntry.setStatus('current')
if mibBuilder.loadTexts: intraClusterPortErrorEntry.setDescription('Network errors between nodes in a cluster.')
intraClusterPortErrsCnId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intraClusterPortErrsCnId.setStatus('current')
if mibBuilder.loadTexts: intraClusterPortErrsCnId.setDescription('The ID of a cluster node for which intra-cluster errors are recorded.')
mirroringRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirroringRetransmits.setStatus('current')
if mibBuilder.loadTexts: mirroringRetransmits.setDescription('The number of retransmits of NVRAM mirroring packets. If this value is not available for the server series, it will be reported as zero.')
cnsRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsRetransmits.setStatus('current')
if mibBuilder.loadTexts: cnsRetransmits.setDescription('The number of retransmits of redirected CNS packets. If this value is not available for the server series, it will be reported as zero.')
totalRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRetransmits.setStatus('current')
if mibBuilder.loadTexts: totalRetransmits.setDescription('The total number of retransmits for the cluster node.')
clusterNodeStatsNumber = MibScalar((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNodeStatsNumber.setStatus('current')
if mibBuilder.loadTexts: clusterNodeStatsNumber.setDescription('Number of units that may be running a thread managing a network socket.')
clusterNodeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 4), )
if mibBuilder.loadTexts: clusterNodeStatsTable.setStatus('current')
if mibBuilder.loadTexts: clusterNodeStatsTable.setDescription('A table of the number of threads managing a network socket that are running. The number of entries in this table is given by the value of clusterNodeStatsNumber.')
clusterNodeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 4, 1), ).setIndexNames((0, "BLUEARC-SERVER-MIB", "clusterNodeStatsCnId"))
if mibBuilder.loadTexts: clusterNodeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clusterNodeStatsEntry.setDescription('Count information of threads managing a network socket that are running.')
clusterNodeStatsCnId = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNodeStatsCnId.setStatus('current')
if mibBuilder.loadTexts: clusterNodeStatsCnId.setDescription('The cluster node for this value.')
runningBossockFibers = MibTableColumn((1, 3, 6, 1, 4, 1, 11096, 6, 1, 1, 6, 7, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: runningBossockFibers.setStatus('current')
if mibBuilder.loadTexts: runningBossockFibers.setDescription('Number of threads managing a network socket that are running on this cluster node.')
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", readLink3=readLink3, spanStatsEntry=spanStatsEntry, httpMimeMapExtension=httpMimeMapExtension, utcOffset=utcOffset, puConfigIndex=puConfigIndex, winCritFreq=winCritFreq, cronJobIndex=cronJobIndex, cifsFlushCalls=cifsFlushCalls, nfsUserNumber=nfsUserNumber, raidControllerConfigClockSpeed=raidControllerConfigClockSpeed, tcpKeepAlive=tcpKeepAlive, telnetCurrActiveSessions=telnetCurrActiveSessions, smtpUndisclosedRecipIndex=smtpUndisclosedRecipIndex, nvramFsStatsTable=nvramFsStatsTable, virtualVolumeHardLimitEnabled=virtualVolumeHardLimitEnabled, enclosureAlarmBeeping=enclosureAlarmBeeping, sictrlAccessRestrictedHost=sictrlAccessRestrictedHost, iScsiStatisticsNodeId=iScsiStatisticsNodeId, systemDriveStatsNumber=systemDriveStatsNumber, physicalDriveVersion=physicalDriveVersion, iScsiLUEvs=iScsiLUEvs, clusterVNodeHostedBy=clusterVNodeHostedBy, raidControllerBatteryBackupBatteryType=raidControllerBatteryBackupBatteryType, verinfoSw=verinfoSw, tcpSillyWindowAvoid=tcpSillyWindowAvoid, enclosurePSUEnclosureIndex=enclosurePSUEnclosureIndex, cronJobAccessLevel=cronJobAccessLevel, clusterNodeStatsNumber=clusterNodeStatsNumber, iScsiStatisticsName=iScsiStatisticsName, readCount=readCount, volumeEnterpriseVirtualServer=volumeEnterpriseVirtualServer, virtualVolumeWarningAlert=virtualVolumeWarningAlert, webTotalBytesTX=webTotalBytesTX, fcLinkFailErrors=fcLinkFailErrors, fcStatisticsEntry=fcStatisticsEntry, link3=link3, fsTierStatsFsLabel=fsTierStatsFsLabel, cifsLseekCalls=cifsLseekCalls, httpLogRecordsPerFile=httpLogRecordsPerFile, sys=sys, cifsShareName=cifsShareName, clusterPNodeTable=clusterPNodeTable, fcStatsInterfaceEnabled=fcStatsInterfaceEnabled, iScsiLUDeviceId=iScsiLUDeviceId, ethernetInEvFIFOPktDrop=ethernetInEvFIFOPktDrop, raidControllerBatteryBackupChargePercent=raidControllerBatteryBackupChargePercent, puStatsOutputVoltage=puStatsOutputVoltage, snmpCritFreq=snmpCritFreq, httpProduct=httpProduct, ethInEvFIFOPktDrop=ethInEvFIFOPktDrop, snapshotRuleWWN=snapshotRuleWWN, smtpUndisclosedRecipTable=smtpUndisclosedRecipTable, cifsCloseCalls=cifsCloseCalls, server=server, nfsV3readDirPlus=nfsV3readDirPlus, puCurrentStatusOnline=puCurrentStatusOnline, ethTotalBytes=ethTotalBytes, tconXCalls=tconXCalls, cifsTransCalls=cifsTransCalls, puConfigurationIndex=puConfigurationIndex, closeCalls=closeCalls, spanTierStatsEntry=spanTierStatsEntry, tcpLinkPacketDrops=tcpLinkPacketDrops, nisServerIndex=nisServerIndex, raidControllerConfigMemCycle=raidControllerConfigMemCycle, httpStatusPreconFailed=httpStatusPreconFailed, systemDriveStatsTable=systemDriveStatsTable, puStatisticsBatteryCharge=puStatisticsBatteryCharge, protocolXferStatsTable=protocolXferStatsTable, tcpIPInInvChksumPkts=tcpIPInInvChksumPkts, hwFlowConsole=hwFlowConsole, snapshotScheduleDateTimeSpec=snapshotScheduleDateTimeSpec, enclosureTemperatureRange=enclosureTemperatureRange, smtpRecipientTable=smtpRecipientTable, fpgaUtilizationEntry=fpgaUtilizationEntry, ftpTotalFtpReplies=ftpTotalFtpReplies, nameServiceOrder=nameServiceOrder, smtpRecipientIndex=smtpRecipientIndex, nfsStats=nfsStats, snapshotSchedulesDateTimeSpec=snapshotSchedulesDateTimeSpec, spanCapacityTotalUpper=spanCapacityTotalUpper, nvramPoolStatsWaitingAllocs=nvramPoolStatsWaitingAllocs, fcPeakInRate=fcPeakInRate, remove3=remove3, tcpFailedOutConns=tcpFailedOutConns, lookup2Calls=lookup2Calls, dnsServerNumber=dnsServerNumber, enclosurePSUNumber=enclosurePSUNumber, utilization=utilization, nfsV2mkDir=nfsV2mkDir, sysDriveTable=sysDriveTable, virtualVolumeQuotaEnabled=virtualVolumeQuotaEnabled, tcpIgnoreICMPEcho=tcpIgnoreICMPEcho, fcStatsPeakInRate=fcStatsPeakInRate, ftpMountNumberUsers=ftpMountNumberUsers, httpActiveConnections=httpActiveConnections, cifsReadBrawCalls=cifsReadBrawCalls, nisTimeout=nisTimeout, nfsV2statFS=nfsV2statFS, snapshotRuleTable=snapshotRuleTable, intraClusterPortErrsCnId=intraClusterPortErrsCnId, nfsV3lookupCalls=nfsV3lookupCalls, sectorCache=sectorCache, sysDriveCapacity=sysDriveCapacity, cifsDskattrCalls=cifsDskattrCalls, clusterVNodeEntry=clusterVNodeEntry, fsTierCapacitySnapshotUpper=fsTierCapacitySnapshotUpper, secureWebTotalFramesTX=secureWebTotalFramesTX, cifsTdisCalls=cifsTdisCalls, cifsShareSpanId=cifsShareSpanId, iScsiTargetLogicalUnitNumber=iScsiTargetLogicalUnitNumber, httpOpenConnections=httpOpenConnections, telnetMaxSessions=telnetMaxSessions, ethInBytes=ethInBytes, fcProtocolErrors=fcProtocolErrors, nfsUserMappingTable=nfsUserMappingTable, winRecipTable=winRecipTable, clusterQuorumDeviceStatus=clusterQuorumDeviceStatus, ethernetStatisticsEntry=ethernetStatisticsEntry, hwFlowDebug=hwFlowDebug, licenseKeyIndex=licenseKeyIndex, psuClusterNode=psuClusterNode, sectorCacheStatsCnIndex=sectorCacheStatsCnIndex, nisUserGroupTimeout=nisUserGroupTimeout, shareAccessShareName=shareAccessShareName, snmpAccessRestrictedHost=snmpAccessRestrictedHost, secureWebTotalBytesRX=secureWebTotalBytesRX, nfsGroupTable=nfsGroupTable, tcpIPMiscBadSegments=tcpIPMiscBadSegments, systemUserEntry=systemUserEntry, cifsNTtransCalls=cifsNTtransCalls, rackTable=rackTable, volumes=volumes, eventLogTable=eventLogTable, setAttr2Calls=setAttr2Calls, physicalDriveVendor=physicalDriveVendor, sictrlTotalSessions=sictrlTotalSessions, puStatsBatteryVoltage=puStatsBatteryVoltage, ftpTotalSess=ftpTotalSess, metaDataCacheStatsMisses=metaDataCacheStatsMisses, httpIncrTimeOut=httpIncrTimeOut, autoChangerTable=autoChangerTable, enclosureTemperatureEnclosureIndex=enclosureTemperatureEnclosureIndex, fcPkInRate=fcPkInRate, nfsV2link=nfsV2link, licenseKeyValid=licenseKeyValid, virtualVolumeLimit=virtualVolumeLimit, clusterVNodeTable=clusterVNodeTable, snmpTrapHostEntry=snmpTrapHostEntry, nfsGroupID=nfsGroupID, enclosureTemperatureStatus=enclosureTemperatureStatus, spanTierCapacityUsedLower=spanTierCapacityUsedLower, snmpRecipName=snmpRecipName, secureWebRejectedSessions=secureWebRejectedSessions, ulogoffXCalls=ulogoffXCalls, snmpAccessRestrictedNumber=snmpAccessRestrictedNumber, iScsi=iScsi, puStatusSleeping=puStatusSleeping, ethernetTotalPackets=ethernetTotalPackets, fcReadResps=fcReadResps, raidControllerSecondaryStatus=raidControllerSecondaryStatus, nfsV2setAttrCalls=nfsV2setAttrCalls, telnetAccessEnabled=telnetAccessEnabled, virtualVolumeTable=virtualVolumeTable, shareAccessPerms=shareAccessPerms, readLink2=readLink2, verModHw=verModHw, memberListTable=memberListTable, ftpAuditLogDirectory=ftpAuditLogDirectory, webAccessRestrictedHost=webAccessRestrictedHost, mkNod3=mkNod3, cifsOpenCalls=cifsOpenCalls, tcpOpenConns=tcpOpenConns, httpPostRequests=httpPostRequests, fsCapacitySnapshotUpper=fsCapacitySnapshotUpper, mirroringRetransmits=mirroringRetransmits, iScsiLUName=iScsiLUName, autoChangerEntry=autoChangerEntry, nvramPoolStatsSize=nvramPoolStatsSize, rackIndex=rackIndex, fcStatsTotalTxBytes=fcStatsTotalTxBytes, iScsiStatistics=iScsiStatistics, smtpRecipName=smtpRecipName, volumeSysDriveIndex=volumeSysDriveIndex, sysDriveCacheMode=sysDriveCacheMode, rootCalls=rootCalls, fileSystemStatsNumber=fileSystemStatsNumber, autoChangerSerialNumber=autoChangerSerialNumber, nfsExportWWN=nfsExportWWN, enclosureAlarmEnclosureIndex=enclosureAlarmEnclosureIndex, fcRequests=fcRequests, ethernetOutOneCollision=ethernetOutOneCollision, tapeDriveSerialNumber=tapeDriveSerialNumber, fsWriteSmoothing=fsWriteSmoothing, sysDriveNumber=sysDriveNumber, nfsV3pathConf=nfsV3pathConf, udpStatisticsTable=udpStatisticsTable, PYSNMP_MODULE_ID=blueArcServer, volumeLabel=volumeLabel, cpuUtilization=cpuUtilization, clusterPNodeIpAddr=clusterPNodeIpAddr, raidControllerConfigMaximumCommands=raidControllerConfigMaximumCommands, puStatsLoad=puStatsLoad, fcRXEOFErrs=fcRXEOFErrs, puCurrentStatusAlarmSetting=puCurrentStatusAlarmSetting, statFS2=statFS2, nfsV2rootCalls=nfsV2rootCalls, cifsSetatrCalls=cifsSetatrCalls, fsTier=fsTier, protocolXferStatsBytesWritten=protocolXferStatsBytesWritten, tcpDefWnd=tcpDefWnd, dnsSearchEntry=dnsSearchEntry, smtpRecipientEmpty=smtpRecipientEmpty, udpInInvChksumPkts=udpInInvChksumPkts, nfsUserMappingEntry=nfsUserMappingEntry, ethernetInstOutOctetRate=ethernetInstOutOctetRate, tcpIPRxInvalidHdrPkts=tcpIPRxInvalidHdrPkts, raidControllerConfigMaxSpanPerVirtualDrive=raidControllerConfigMaxSpanPerVirtualDrive, telnetRejectedSessions=telnetRejectedSessions, cacheStats=cacheStats, physicalDriveEntry=physicalDriveEntry, sectorCacheStatsMissesSSI=sectorCacheStatsMissesSSI, nfsV2readLink=nfsV2readLink, clusterNode=clusterNode, sysDriveEntry=sysDriveEntry, blueArcPrivate=blueArcPrivate, puCurrentStatusUpperTransferVoltage=puCurrentStatusUpperTransferVoltage, rmdirCalls=rmdirCalls, protocolXferStatsEntry=protocolXferStatsEntry, snapshotRuleName=snapshotRuleName, httpServiceEnabled=httpServiceEnabled, snmpTrapHostTable=snmpTrapHostTable, nfsV2lookupCalls=nfsV2lookupCalls, raidControllerModel=raidControllerModel, snmpAccessRestrictedTable=snmpAccessRestrictedTable, raidControllerConfigMemAccess=raidControllerConfigMemAccess, tcpIPTxPkts=tcpIPTxPkts, mgmntStats=mgmntStats, fanEntry=fanEntry, tcpIPRxInvalidUcastAddrPkts=tcpIPRxInvalidUcastAddrPkts, raidControllerConfigMaxSystemDrives=raidControllerConfigMaxSystemDrives, autoChangerNumber=autoChangerNumber, dnsServerTable=dnsServerTable, nfsV3rmDir=nfsV3rmDir, hwFlowTable=hwFlowTable, puConfigNumber=puConfigNumber, ntpServerNumber=ntpServerNumber, rackNumberOfEnclosures=rackNumberOfEnclosures, fsCapacitySnapshotLower=fsCapacitySnapshotLower, failoverPrimaryName=failoverPrimaryName, rmDir2=rmDir2, fileSystemLoadClient=fileSystemLoadClient, pausedOffTime=pausedOffTime, eventLogText=eventLogText)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", alerts=alerts, sictrlAccessRestrictedEntry=sictrlAccessRestrictedEntry, licenseService=licenseService, chkpthCalls=chkpthCalls, atJobNumber=atJobNumber, ndmpEnabledOnBoot=ndmpEnabledOnBoot, ftpServiceEnabled=ftpServiceEnabled, raidControllerActiveTaskLUN=raidControllerActiveTaskLUN, intraClusterPortErrorEntry=intraClusterPortErrorEntry, httpRoot=httpRoot, nfsUserMappingUnixUserID=nfsUserMappingUnixUserID, telnet=telnet, nfsUserName=nfsUserName, cifsGetatrCalls=cifsGetatrCalls, iScsiStatisticsEntry=iScsiStatisticsEntry, ndmpCurrentStatus=ndmpCurrentStatus, ftpMountPoints=ftpMountPoints, racks=racks, tcpIPInInvOptionPkts=tcpIPInInvOptionPkts, sectorCacheStatsHitsSSI=sectorCacheStatsHitsSSI, verModIndex=verModIndex, ndmpSnapshotOptions=ndmpSnapshotOptions, fsCapacityTotalUpper=fsCapacityTotalUpper, fcStatsInterfaceLinkType=fcStatsInterfaceLinkType, iScsiLogicalUnitEntry=iScsiLogicalUnitEntry, rackEntry=rackEntry, failoverSecondaryName=failoverSecondaryName, protStatsFsId=protStatsFsId, raidControllerConfigDRAMSize=raidControllerConfigDRAMSize, puCurrentStatusSerialNumber=puCurrentStatusSerialNumber, fcStatsInstantaneousOutRate=fcStatsInstantaneousOutRate, systemDrives=systemDrives, raidControllerConfigFirmwareType=raidControllerConfigFirmwareType, nisVerificationEnabled=nisVerificationEnabled, ethernetTotalBytes=ethernetTotalBytes, httpStatusNotImplemented=httpStatusNotImplemented, udpRxInvChksumPkts=udpRxInvChksumPkts, puConfigTable=puConfigTable, fcPkOutRate=fcPkOutRate, httpMimeMapEntry=httpMimeMapEntry, rename2=rename2, iScsiTargetTable=iScsiTargetTable, nisCurrentMaster=nisCurrentMaster, tcpipStats=tcpipStats, runningBossockFibers=runningBossockFibers, access=access, failoverPrimaryStatus=failoverPrimaryStatus, tcpNagle=tcpNagle, puConfigurationCommsOK=puConfigurationCommsOK, secureWebAccessRestrictedNumber=secureWebAccessRestrictedNumber, telnetTotalBytesTX=telnetTotalBytesTX, cifsSearchCalls=cifsSearchCalls, puConfigShutdownInterval=puConfigShutdownInterval, protStatsFlavor=protStatsFlavor, webAccessRestricted=webAccessRestricted, httpListDirectories=httpListDirectories, mkdir3=mkdir3, cifsEchoCalls=cifsEchoCalls, fcDiscardedFrameErrs=fcDiscardedFrameErrs, httpHostVolumePartitionID=httpHostVolumePartitionID, nfsUserTable=nfsUserTable, iScsiTargetAuthEnabled=iScsiTargetAuthEnabled, tcpOldAckStrategy=tcpOldAckStrategy, fsPermId=fsPermId, cifsNegProtCalls=cifsNegProtCalls, secureWebTotalSessions=secureWebTotalSessions, clients=clients, puStatusOnBattery=puStatusOnBattery, cron=cron, enclosureFanEntry=enclosureFanEntry, fcWriteResps=fcWriteResps, nfsV2getAttrCalls=nfsV2getAttrCalls, puCurrentStatusSmartTrim=puCurrentStatusSmartTrim, shareNumber=shareNumber, serverDate=serverDate, ftpBytesTotalXferOut=ftpBytesTotalXferOut, ethernetEvFIFOMaxEvents=ethernetEvFIFOMaxEvents, sensorTempStatus=sensorTempStatus, cifsShareEntry=cifsShareEntry, puCurrentStatusCalibrating=puCurrentStatusCalibrating, verModMTDSPasses=verModMTDSPasses, webRejectedSessions=webRejectedSessions, telnetAccessPortNumber=telnetAccessPortNumber, httpConnsRefused=httpConnsRefused, automountPartitionIndex=automountPartitionIndex, fcStatsProtocolErrors=fcStatsProtocolErrors, nfsGroupNumber=nfsGroupNumber, metaDataCacheStatsTable=metaDataCacheStatsTable, fsTierStatsFsId=fsTierStatsFsId, iScsiTargetLULogicalUnitName=iScsiTargetLULogicalUnitName, sictrlAccessEnabled=sictrlAccessEnabled, puStatsTemperatureF=puStatsTemperatureF, serialNumbers=serialNumbers, puStatisticsLineMininumVoltage=puStatisticsLineMininumVoltage, ftpSecurity=ftpSecurity, nfsGroupMappingUnixGroupName=nfsGroupMappingUnixGroupName, enclosureTemperatureEntry=enclosureTemperatureEntry, snmpTrapHost=snmpTrapHost, httpLogging=httpLogging, iScsiTargetComment=iScsiTargetComment, virtualVolumeQuotaBytesUsed=virtualVolumeQuotaBytesUsed, winsPrimaryIpAddr=winsPrimaryIpAddr, httpLogVolumeLUN=httpLogVolumeLUN, nfsExportPath=nfsExportPath, puCurrentStatusBatteryAlmostUsedUp=puCurrentStatusBatteryAlmostUsedUp, smtpCritFreq=smtpCritFreq, snapshotSchedulesIndex=snapshotSchedulesIndex, engipConfig=engipConfig, writeXCalls=writeXCalls, lookup3Calls=lookup3Calls, setAttr3Calls=setAttr3Calls, systemUserTable=systemUserTable, nfsV2remove=nfsV2remove, puStatsLineVoltage=puStatsLineVoltage, fcSignalLossErrors=fcSignalLossErrors, nfsV3link=nfsV3link, fpgaUtilizationNumber=fpgaUtilizationNumber, raidControllerWWN=raidControllerWWN, httpLogDirectory=httpLogDirectory, nfsV3StatsEntry=nfsV3StatsEntry, fcStatsSignalLossErrors=fcStatsSignalLossErrors, writeCloseCalls=writeCloseCalls, puStatusLowerTransferVoltage=puStatusLowerTransferVoltage, shareTable=shareTable, nfsMounts=nfsMounts, blueArcServerObjs=blueArcServerObjs, puConfigCommsOK=puConfigCommsOK, stripeWriteCount=stripeWriteCount, udpStats=udpStats, puCurrentStatusSmartBoost=puCurrentStatusSmartBoost, clusterNodeStatsTable=clusterNodeStatsTable, nisServerBroadcastEnabled=nisServerBroadcastEnabled, psuEntry=psuEntry, volumeCapacity=volumeCapacity, setatrCalls=setatrCalls, systemUserName=systemUserName, physicalDriveTable=physicalDriveTable, cifsWriteCloseCalls=cifsWriteCloseCalls, nfsV3StatsTable=nfsV3StatsTable, sectorCacheStatsHitsPSI=sectorCacheStatsHitsPSI, ethPkOutOctetRate=ethPkOutOctetRate, virtualVolumes=virtualVolumes, clusterPNodeNumber=clusterPNodeNumber, fileSystemTierStatsNumber=fileSystemTierStatsNumber, httpLogVolumeWWN=httpLogVolumeWWN, fsStatsFsId=fsStatsFsId, cifsShareEvsId=cifsShareEvsId, temperatureSensorStatus=temperatureSensorStatus, ftpUserName=ftpUserName, webAccessEnabled=webAccessEnabled, fpgaUtilizationCnIndex=fpgaUtilizationCnIndex, nisRebindInterval=nisRebindInterval, puCurrentStatusIndex=puCurrentStatusIndex, opsPerSecond=opsPerSecond, tcpStatisticsEntry=tcpStatisticsEntry, metaDataCache=metaDataCache, secureWebMgmntStats=secureWebMgmntStats, serverTime=serverTime, fcStats=fcStats, secureWebAccessMaxConnections=secureWebAccessMaxConnections, secureWebAccessRestrictedTable=secureWebAccessRestrictedTable, tcpDelayedAcks=tcpDelayedAcks, psuNumber=psuNumber, sharePath=sharePath, puStatsIndex=puStatsIndex, readDir2=readDir2, mailAlertConfig=mailAlertConfig, nfsGroupMappingUnixGroupIDValid=nfsGroupMappingUnixGroupIDValid, smtpWarnFreq=smtpWarnFreq, dnsSearchString=dnsSearchString, fsTierCapacitySnapshotLower=fsTierCapacitySnapshotLower, httpStatusURITooLong=httpStatusURITooLong, secureWebAccessPortNumber=secureWebAccessPortNumber, tapeDriveNumber=tapeDriveNumber, dnsSearchIndex=dnsSearchIndex, network=network, cifsStatsTable=cifsStatsTable, tcpOldPushStrategy=tcpOldPushStrategy, openCalls=openCalls, puStatsRemainingRunTime=puStatsRemainingRunTime, fsStat3=fsStat3, snmpAlertConfig=snmpAlertConfig, nvramPoolStatsTotalCurrentUsage=nvramPoolStatsTotalCurrentUsage, ethInstOutOctetRate=ethInstOutOctetRate, atJobAccessLevel=atJobAccessLevel, sysDriveRaidLevel=sysDriveRaidLevel, searchCalls=searchCalls, metaDataCacheStatsHits=metaDataCacheStatsHits, nameService=nameService, puStatisticsEntry=puStatisticsEntry, lseekCalls=lseekCalls, powerUnits=powerUnits, ntpServerTable=ntpServerTable, nfsUserMappingNumber=nfsUserMappingNumber, tcpIPRxPkts=tcpIPRxPkts, smtpInfoFreq=smtpInfoFreq, psuTwoStatus=psuTwoStatus, cifsReadCalls=cifsReadCalls, webTotalSessions=webTotalSessions, link2=link2, enclosurePSUStatus=enclosurePSUStatus, fcCacheHits=fcCacheHits, telnetAccessRestrictedTable=telnetAccessRestrictedTable, cifsLockingXCalls=cifsLockingXCalls, fileProtocol=fileProtocol, iScsiParameterValue=iScsiParameterValue, temperatureSensorCReading=temperatureSensorCReading, getatrCalls=getatrCalls, licenseHTTPService=licenseHTTPService, nfsV3remove=nfsV3remove, dnsServerIndex=dnsServerIndex, cifsRenameCalls=cifsRenameCalls, licenseFailoverService=licenseFailoverService, tcpIPInInvSrcAddrPkts=tcpIPInInvSrcAddrPkts, writeBrawCalls=writeBrawCalls, licenseKeyString=licenseKeyString, raidControllerBatteryBackupFastCharging=raidControllerBatteryBackupFastCharging, nfsGroupMappingTable=nfsGroupMappingTable, raidControllerBatteryBackupFirstWarning=raidControllerBatteryBackupFirstWarning, cronJobNumber=cronJobNumber, raidControllerActiveTaskRackIndex=raidControllerActiveTaskRackIndex, systemUserAccessLevel=systemUserAccessLevel, nvramFsStatsNumber=nvramFsStatsNumber, ftpTotalBytesReplies=ftpTotalBytesReplies, puConfigurationCount=puConfigurationCount, enclosureFanNumber=enclosureFanNumber, nfsV3rename=nfsV3rename, clusterNodeStatsCnId=clusterNodeStatsCnId, fcReadReqs=fcReadReqs, fcBadRXCharErrors=fcBadRXCharErrors, virtualVolumePartitionID=virtualVolumePartitionID, puStatsBatteryCharge=puStatsBatteryCharge, fsTierCapacityTotalUpper=fsTierCapacityTotalUpper, webAccessPortNumber=webAccessPortNumber, webAccessRestrictedEntry=webAccessRestrictedEntry, tapeDriveLocation=tapeDriveLocation, tcpIPInInvUcastAddrPkts=tcpIPInInvUcastAddrPkts, cifsRmdirCalls=cifsRmdirCalls, puStatisticsLoad=puStatisticsLoad, tcpInvalidSegments=tcpInvalidSegments, nfsExportName=nfsExportName, readDir3=readDir3, puStatsEntry=puStatsEntry, tcpUDPCheckSumGen=tcpUDPCheckSumGen, pathConf3=pathConf3, telnetAccessRestricted=telnetAccessRestricted, intraClusterPortErrorNumber=intraClusterPortErrorNumber, sictrlAccessPortNumber=sictrlAccessPortNumber, puCurrentStatusTable=puCurrentStatusTable, fpgaUtilizationFpgaName=fpgaUtilizationFpgaName, ftpMountTable=ftpMountTable, spanStats=spanStats, nisServerTable=nisServerTable, volumePartitionID=volumePartitionID)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", tcpRxSegments=tcpRxSegments, volumeNumber=volumeNumber, ndmpStatus=ndmpStatus, telnetAccessRestrictedEntry=telnetAccessRestrictedEntry, raidControllerRackIndex=raidControllerRackIndex, nfsV2rmDir=nfsV2rmDir, httpConnsAccepted=httpConnsAccepted, protCumulativeLatency=protCumulativeLatency, snapshotRuleLUN=snapshotRuleLUN, sictrlMgmntStats=sictrlMgmntStats, atJobIndex=atJobIndex, protocolStatsEntry=protocolStatsEntry, tapeDriveEntry=tapeDriveEntry, license=license, snmpAgent=snmpAgent, puStatisticsTemperatureF=puStatisticsTemperatureF, puCurrentStatusOverload=puCurrentStatusOverload, dnsSearchNumber=dnsSearchNumber, enclosureFanRackIndex=enclosureFanRackIndex, webMaxSessions=webMaxSessions, secureWebAccessRestrictedEntry=secureWebAccessRestrictedEntry, puStatisticsFrequency=puStatisticsFrequency, fcStatsEntry=fcStatsEntry, secureWebAccessRestricted=secureWebAccessRestricted, systemDriveStats=systemDriveStats, ethCRCErrs=ethCRCErrs, puCurrentStatusLowerTransferVoltage=puCurrentStatusLowerTransferVoltage, puStatusCalibrating=puStatusCalibrating, tcpIPInInvPkts=tcpIPInInvPkts, iScsiGloballyUniqueName=iScsiGloballyUniqueName, fsStatsTable=fsStatsTable, autoChangerEVS=autoChangerEVS, tcpAllSubnetsMTU=tcpAllSubnetsMTU, clusterVNodeName=clusterVNodeName, ethEvFIFOMaxEvents=ethEvFIFOMaxEvents, nfsV3commit=nfsV3commit, fcIOStatusResubs=fcIOStatusResubs, shareWWN=shareWWN, nfsV3getAttrCalls=nfsV3getAttrCalls, fcStatsLossSyncErrors=fcStatsLossSyncErrors, nfsGroupMappingNtGroupName=nfsGroupMappingNtGroupName, nfsServiceEnabled=nfsServiceEnabled, raidControllerBatteryBackupDischarging=raidControllerBatteryBackupDischarging, puConfigurationCommsEverOK=puConfigurationCommsEverOK, verinfoHw=verinfoHw, temperatureSensorClusterNode=temperatureSensorClusterNode, automountEntry=automountEntry, null3Calls=null3Calls, fcRXEOFErrors=fcRXEOFErrors, opsPerSecAverage=opsPerSecAverage, fanTable=fanTable, nameServiceTable=nameServiceTable, atJobCommandList=atJobCommandList, ftpAuditLogging=ftpAuditLogging, enclosurePSURackIndex=enclosurePSURackIndex, ethOutPkts=ethOutPkts, totalRetransmits=totalRetransmits, clusterName=clusterName, httpStatusNotFound=httpStatusNotFound, physicalDriveNumber=physicalDriveNumber, eventLogEntry=eventLogEntry, iScsiConfiguration=iScsiConfiguration, ethInstInOctetRate=ethInstInOctetRate, cifsStats=cifsStats, nfsV3nullCalls=nfsV3nullCalls, nis=nis, eventlog=eventlog, nfsUserMappingNtUserName=nfsUserMappingNtUserName, telnetTotalFramesRX=telnetTotalFramesRX, fcBadCRCErrs=fcBadCRCErrs, tapeDriveDeviceName=tapeDriveDeviceName, iSNSIpAddress=iSNSIpAddress, ftpNTPasswordEnabled=ftpNTPasswordEnabled, httpStatusNotModified=httpStatusNotModified, cifsStatsEntry=cifsStatsEntry, ntTranssCalls=ntTranssCalls, iScsiLUComment=iScsiLUComment, ftpAuditLogVolumePartitionID=ftpAuditLogVolumePartitionID, puCurrentStatusOnBattery=puCurrentStatusOnBattery, httpMaxTimeOut=httpMaxTimeOut, webTotalBytesRX=webTotalBytesRX, snmpWarnFreq=snmpWarnFreq, httpStats=httpStats, cifsNTcancelCalls=cifsNTcancelCalls, nfsV2symLink=nfsV2symLink, findCloseCalls=findCloseCalls, fsId=fsId, ftpTimeout=ftpTimeout, iSNSPort=iSNSPort, virtualVolumeSysDriveIndex=virtualVolumeSysDriveIndex, fpgaUtilizationFpgaIndex=fpgaUtilizationFpgaIndex, snapshotRulesEntry=snapshotRulesEntry, spanStatsTable=spanStatsTable, iScsiTargetLogicalUnitEntry=iScsiTargetLogicalUnitEntry, fanClusterNode=fanClusterNode, raidControllerConfigFirmwareMajor=raidControllerConfigFirmwareMajor, enclosureFanSpeed=enclosureFanSpeed, httpBytesXferOut=httpBytesXferOut, tcpInvSegments=tcpInvSegments, httpServiceMaxUsers=httpServiceMaxUsers, automountNumber=automountNumber, protStatsOpCodeName=protStatsOpCodeName, spanTierStatsNumber=spanTierStatsNumber, puCurrentStatusSleeping=puCurrentStatusSleeping, rackNumberOfPhysicalDrives=rackNumberOfPhysicalDrives, fcStatsInterfaceStatus=fcStatsInterfaceStatus, nfsV2rename=nfsV2rename, fileSysCacheTimeout=fileSysCacheTimeout, nvramPoolStatsTable=nvramPoolStatsTable, sectorCacheType=sectorCacheType, nfsExportLUN=nfsExportLUN, ethernetOutFifteenCollision=ethernetOutFifteenCollision, puStatusTable=puStatusTable, read3=read3, fsInfo3=fsInfo3, sectorCacheStatsEntry=sectorCacheStatsEntry, nfsGroupMappingUnixGroupID=nfsGroupMappingUnixGroupID, cifsTconXCalls=cifsTconXCalls, snapshotSchedulesTable=snapshotSchedulesTable, puConfigurationEntry=puConfigurationEntry, physicalDriveStatus=physicalDriveStatus, fcIOStatusFails=fcIOStatusFails, snmpAccessRestrictedEntry=snmpAccessRestrictedEntry, secureWebMaxSessions=secureWebMaxSessions, nfsGroupName=nfsGroupName, tcpArpCacheTimeout=tcpArpCacheTimeout, cifsService=cifsService, iScsiServiceEnabled=iScsiServiceEnabled, shareEntry=shareEntry, telnetTotalSessions=telnetTotalSessions, tcpTotalOpenConns=tcpTotalOpenConns, tcpFailedInConns=tcpFailedInConns, shareMaxUsers=shareMaxUsers, fsCapacityUsedLower=fsCapacityUsedLower, fileSystemStatsEntry=fileSystemStatsEntry, nfsService=nfsService, nfsVersion3=nfsVersion3, raidControllerPrimaryStatus=raidControllerPrimaryStatus, puStatisticsIndex=puStatisticsIndex, readCumLatency=readCumLatency, nfsClients=nfsClients, nfsV3symLink=nfsV3symLink, cifsTrans2Calls=cifsTrans2Calls, smtpUndisclosedRecipName=smtpUndisclosedRecipName, puStatisticsLineMaximumVoltage=puStatisticsLineMaximumVoltage, metaDataCacheStatsNumber=metaDataCacheStatsNumber, spanTierStatsSpanId=spanTierStatsSpanId, tcpIPRxInvalidNUcastAddrPkts=tcpIPRxInvalidNUcastAddrPkts, raidControllerBatteryBackupHardwareVersion=raidControllerBatteryBackupHardwareVersion, cifsNTtranssCalls=cifsNTtranssCalls, ftpService=ftpService, verModCardRev=verModCardRev, create3=create3, fsCapacityUsedUpper=fsCapacityUsedUpper, automountTable=automountTable, cache=cache, httpBytesXferIn=httpBytesXferIn, protOpCount=protOpCount, puCurrentStatusModel=puCurrentStatusModel, createCalls=createCalls, puStatusChangeBattery=puStatusChangeBattery, nfsUsers=nfsUsers, nfsGroupMappingNumber=nfsGroupMappingNumber, verModMTDSLastFailure=verModMTDSLastFailure, dskattrCalls=dskattrCalls, cpuUtilizationEntry=cpuUtilizationEntry, systemDriveStatsEntry=systemDriveStatsEntry, ethOutPackets=ethOutPackets, physicalDriveRackIndex=physicalDriveRackIndex, wins=wins, ftpStats=ftpStats, nfsExportEntry=nfsExportEntry, nfsV3accessCalls=nfsV3accessCalls, puStatusSerialNumber=puStatusSerialNumber, clusterQuorumDeviceIpAddr=clusterQuorumDeviceIpAddr, ftpMountName=ftpMountName, tcpFastRetxFastRecovery=tcpFastRetxFastRecovery, verModUniq0=verModUniq0, puConfigurationTable=puConfigurationTable, sensorNumber=sensorNumber, udpStatisticsEntry=udpStatisticsEntry, licenseKeyEntry=licenseKeyEntry, clusterNodeStatsEntry=clusterNodeStatsEntry, nfsExportPartitionID=nfsExportPartitionID, ethPkInOctetRate=ethPkInOctetRate, ftpMountWWN=ftpMountWWN, ftpServiceMaxUsers=ftpServiceMaxUsers, raidControllerCacheSize=raidControllerCacheSize, nfsExportIndex=nfsExportIndex, fileSysCache=fileSysCache, failoverSecondaryStatus=failoverSecondaryStatus, httpService=httpService, eventLogTimeStamp=eventLogTimeStamp, cifsUnlinkCalls=cifsUnlinkCalls, iScsiParameterIsBoolean=iScsiParameterIsBoolean, nfsV2StatsClusterNode=nfsV2StatsClusterNode, winRecipIndex=winRecipIndex, cronJobDateSpec=cronJobDateSpec, enclosureFanStatus=enclosureFanStatus, snapshotRulesTable=snapshotRulesTable, fcLossSyncErrs=fcLossSyncErrs, locale=locale, sictrlMaxSessions=sictrlMaxSessions, webAccessMaxConnections=webAccessMaxConnections, volumeFreeCapacity=volumeFreeCapacity, nfsGroupEntry=nfsGroupEntry, ethOutFifteenCollision=ethOutFifteenCollision, snapshotRuleVolumeLabel=snapshotRuleVolumeLabel, iSNSTable=iSNSTable, puCurrentStatusBatteryReplacedDate=puCurrentStatusBatteryReplacedDate, protocolStats=protocolStats, raidControllerConfigRebuildOn=raidControllerConfigRebuildOn, sharePartitionID=sharePartitionID, protocolStatsNumber=protocolStatsNumber, licenseIndex=licenseIndex, smtpUndisclosedRecipEntry=smtpUndisclosedRecipEntry, fileSystemStats=fileSystemStats, puStatusUpperTransferVoltage=puStatusUpperTransferVoltage, iScsiLogicalUnitNumber=iScsiLogicalUnitNumber, sessSetupXCalls=sessSetupXCalls, spanTier=spanTier, telnetAccessRestrictedNumber=telnetAccessRestrictedNumber, raidControllerBatteryBackupReconditioning=raidControllerBatteryBackupReconditioning, raidControllerBatteryBackupSecondWarning=raidControllerBatteryBackupSecondWarning, getAttr2Calls=getAttr2Calls, temperatureSensorNumber=temperatureSensorNumber, tcpIPRxInvalidSrcAddrPkts=tcpIPRxInvalidSrcAddrPkts, transCalls=transCalls, verModNumber=verModNumber, licenseKeyNumber=licenseKeyNumber, nfsV2read=nfsV2read, nfsUserMappingNtUserDomainName=nfsUserMappingNtUserDomainName, smtpAddr=smtpAddr, snmpSevFreq=snmpSevFreq, udpInShortPkts=udpInShortPkts, secureWebCurrActiveSessions=secureWebCurrActiveSessions, nvramFsStatsCheckpoints=nvramFsStatsCheckpoints, tcpMaxOpenConns=tcpMaxOpenConns, iScsiParameterName=iScsiParameterName, tapeDriveAutoChangerIndex=tapeDriveAutoChangerIndex, enclosures=enclosures, nameServiceNumber=nameServiceNumber, ethInPkts=ethInPkts, failoverSecondaryIpAddr=failoverSecondaryIpAddr, enclosurePSUEntry=enclosurePSUEntry, licenseTable=licenseTable, raidControllerActiveTaskNumber=raidControllerActiveTaskNumber, verModUniq1=verModUniq1, memberListStatus=memberListStatus, dnsServerEntry=dnsServerEntry, snapshotRuleEntry=snapshotRuleEntry, writeCalls=writeCalls, secureWebTotalFramesRX=secureWebTotalFramesRX, negProtCalls=negProtCalls)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", commit3=commit3, physicalDriveCapacity=physicalDriveCapacity, echoCalls=echoCalls, storage=storage, fcLinkFailErrs=fcLinkFailErrs, openXCalls=openXCalls, ftp=ftp, hwFlowEntry=hwFlowEntry, sictrlTotalFramesTX=sictrlTotalFramesTX, tcpRxInvalidChksumPkts=tcpRxInvalidChksumPkts, ethernetStatisticsTable=ethernetStatisticsTable, sictrl=sictrl, ethernetOutPackets=ethernetOutPackets, nfsV2nullCalls=nfsV2nullCalls, physicalDriveColumnIndex=physicalDriveColumnIndex, readCalls=readCalls, clusterVNodeId=clusterVNodeId, verModEntry=verModEntry, enclosureFanEnclosureIndex=enclosureFanEnclosureIndex, mkdirCalls=mkdirCalls, readBrawCalls=readBrawCalls, snapshotRulesEVS=snapshotRulesEVS, sectorCacheMode=sectorCacheMode, temperatureSensorEntry=temperatureSensorEntry, webAccessRestrictedNumber=webAccessRestrictedNumber, fcProtErrs=fcProtErrs, puCurrentStatusEntry=puCurrentStatusEntry, nfsExportTable=nfsExportTable, nfsGroups=nfsGroups, fanSpeed=fanSpeed, tcpIPInPkts=tcpIPInPkts, nfsV3fsInfo=nfsV3fsInfo, snapshotSchedulesRuleName=snapshotSchedulesRuleName, clusterConfig=clusterConfig, nfsExports=nfsExports, dnsSearchTable=dnsSearchTable, raidControllerActiveTaskPercentageDone=raidControllerActiveTaskPercentageDone, versions=versions, nisServerPriority=nisServerPriority, enclosureAlarmEntry=enclosureAlarmEntry, spanTierLabel=spanTierLabel, protocolXferStatsFsId=protocolXferStatsFsId, puStatusOnline=puStatusOnline, winAlertConfig=winAlertConfig, automountLUN=automountLUN, clusterNodeId=clusterNodeId, nvramFsStatsEntry=nvramFsStatsEntry, nfs=nfs, ftpAuditMaximumLogFiles=ftpAuditMaximumLogFiles, temperatureSensorFReading=temperatureSensorFReading, raid=raid, puStatusLowBatteryInterval=puStatusLowBatteryInterval, tcpKeepAliveTimeout=tcpKeepAliveTimeout, nsOrder=nsOrder, singleBufferWriteCount=singleBufferWriteCount, failoverSystemIpAddr=failoverSystemIpAddr, ntpServerEntry=ntpServerEntry, tcpTxSegments=tcpTxSegments, fcInstOutRate=fcInstOutRate, ethernetOutFIFOUflows=ethernetOutFIFOUflows, nfsUserEntry=nfsUserEntry, ftpAuditLogVolumeLUN=ftpAuditLogVolumeLUN, verModKernel=verModKernel, ethernetOutBytes=ethernetOutBytes, rackNumber=rackNumber, fileSysCacheMode=fileSysCacheMode, cpuUtilizationCnIndex=cpuUtilizationCnIndex, cifsReadXCalls=cifsReadXCalls, clusterQuorumDeviceName=clusterQuorumDeviceName, failoverSystemName=failoverSystemName, cronJobTable=cronJobTable, fpgaUtilization=fpgaUtilization, raidControllerConfigTable=raidControllerConfigTable, telnetAccessMaxConnections=telnetAccessMaxConnections, dnsServerIpAddress=dnsServerIpAddress, fcBadCRCErrors=fcBadCRCErrors, nvramFsStatsActivityCheckpoints=nvramFsStatsActivityCheckpoints, winSevFreq=winSevFreq, ndmpDevices=ndmpDevices, sictrlTotalFramesRX=sictrlTotalFramesRX, clusterPNodeEntry=clusterPNodeEntry, rackStatus=rackStatus, ethernetCRCErrs=ethernetCRCErrs, fcStatsTable=fcStatsTable, ethernetInFIFODrops=ethernetInFIFODrops, cifs=cifs, protStatsOpCode=protStatsOpCode, hwFlowNumber=hwFlowNumber, puCurrentStatusSensitivity=puCurrentStatusSensitivity, licenseNFSService=licenseNFSService, clusterVNodeStatus=clusterVNodeStatus, renameCalls=renameCalls, remove2=remove2, cifsMknewCalls=cifsMknewCalls, ethernetInPackets=ethernetInPackets, backup=backup, licenseFTPService=licenseFTPService, virtualVolumeQuotaPercentageUsed=virtualVolumeQuotaPercentageUsed, webTotalFramesTX=webTotalFramesTX, httpDecrTimeOut=httpDecrTimeOut, raidControllerConfigFirmwareMinor=raidControllerConfigFirmwareMinor, physicalDrives=physicalDrives, iScsiTargetName=iScsiTargetName, httpPutRequests=httpPutRequests, metaDataCacheStatsFsLabel=metaDataCacheStatsFsLabel, snapshotSchedulesEVS=snapshotSchedulesEVS, puStatisticsCount=puStatisticsCount, httpHeadRequests=httpHeadRequests, serialNumberEntry=serialNumberEntry, fanFittedStatus=fanFittedStatus, sysDriveWWN=sysDriveWWN, puStatusManufactureDate=puStatusManufactureDate, verModFirstDate=verModFirstDate, tcpOutSegments=tcpOutSegments, sictrlAccessMaxConnections=sictrlAccessMaxConnections, cifsServiceMaxUsers=cifsServiceMaxUsers, fcStatsBadCRCErrors=fcStatsBadCRCErrors, ethernetInBytes=ethernetInBytes, shareUsers=shareUsers, snapshotRuleQueueSize=snapshotRuleQueueSize, ethInPackets=ethInPackets, ethernetPkInOctetRate=ethernetPkInOctetRate, security=security, getAttr3Calls=getAttr3Calls, nfsV3write=nfsV3write, enclosureAlarmAlarmIndex=enclosureAlarmAlarmIndex, fcStatisticsTable=fcStatisticsTable, nfsExportsTable=nfsExportsTable, fcWriteReqs=fcWriteReqs, performance=performance, sictrlAccessRestrictedTable=sictrlAccessRestrictedTable, httpStatusBadRequest=httpStatusBadRequest, nfsExportNumberMounts=nfsExportNumberMounts, hwFlowControl=hwFlowControl, shareComment=shareComment, cronJobCommandList=cronJobCommandList, sensorSpeedStatus=sensorSpeedStatus, tcpStatisticsTable=tcpStatisticsTable, cpuUtilizationTable=cpuUtilizationTable, sensorTempCReading=sensorTempCReading, raidControllerConfigPhysicalSectorSize=raidControllerConfigPhysicalSectorSize, nfsExportsEntry=nfsExportsEntry, nfsGroupMappingEntry=nfsGroupMappingEntry, sictrlRejectedSessions=sictrlRejectedSessions, puConfigShutdownRemainingLife=puConfigShutdownRemainingLife, sysDriveLUN=sysDriveLUN, cifsClients=cifsClients, nfsV2StatsTable=nfsV2StatsTable, nvramPoolStatsWaitedAllocs=nvramPoolStatsWaitedAllocs, fcInstInRate=fcInstInRate, spanCapacityUsedLower=spanCapacityUsedLower, enclosureTemperatureNumber=enclosureTemperatureNumber, ethOutBytes=ethOutBytes, fcStatsInterfaceLinkSpeed=fcStatsInterfaceLinkSpeed, puStatisticsTable=puStatisticsTable, raidControllerBatteryBackupRackIndex=raidControllerBatteryBackupRackIndex, fcInterfaceIndex=fcInterfaceIndex, null2Calls=null2Calls, iScsiStatisticsValue=iScsiStatisticsValue, enclosureFanTable=enclosureFanTable, tcpReOutSegments=tcpReOutSegments, raidControllerConfigRebuildOff=raidControllerConfigRebuildOff, componentType=componentType, httpLogVolumePartitionID=httpLogVolumePartitionID, ftpNISPasswordEnabled=ftpNISPasswordEnabled, fsNvramWaitedAllocs=fsNvramWaitedAllocs, ftpTotalFtpXferOut=ftpTotalFtpXferOut, ftpUserTable=ftpUserTable, cifsUlogoffXCalls=cifsUlogoffXCalls, tcpInOversizeSegmentErrs=tcpInOversizeSegmentErrs, puStatusAlarmSetting=puStatusAlarmSetting, fcInstantaneousInRate=fcInstantaneousInRate, raidControllerConfigRackIndex=raidControllerConfigRackIndex, nfsUserMappingUnixUserIDValid=nfsUserMappingUnixUserIDValid, cifsSessSetupXCalls=cifsSessSetupXCalls, raidControllerBatteryBackupNoSync=raidControllerBatteryBackupNoSync, snmpRecipEntry=snmpRecipEntry, protocolXferStatsFsLabel=protocolXferStatsFsLabel, ftpMountLUN=ftpMountLUN, nvramFsStatsCurrentUsage=nvramFsStatsCurrentUsage, ethOutFIFOUflows=ethOutFIFOUflows, puCurrentStatusChangeBattery=puCurrentStatusChangeBattery, subComponentType=subComponentType, ftpUserMountPointExists=ftpUserMountPointExists, enclosureAlarmStatus=enclosureAlarmStatus, cifsWriteXCalls=cifsWriteXCalls, psuTable=psuTable, ftpTotalBytesCommands=ftpTotalBytesCommands, tapeDriveIndex=tapeDriveIndex, ndmpAutoSnapCreateEnabled=ndmpAutoSnapCreateEnabled, nfsV2readDir=nfsV2readDir, tcpInInvChksumPkts=tcpInInvChksumPkts, puStatsNumber=puStatsNumber, iScsiTargetLun=iScsiTargetLun, ftpMountPartitionID=ftpMountPartitionID, puStatsLineMaximumVoltage=puStatsLineMaximumVoltage, fsTierCapacityTotalLower=fsTierCapacityTotalLower, nfsUserMappingUnixUserName=nfsUserMappingUnixUserName, snmpInfoFreq=snmpInfoFreq, nisServerIpAddress=nisServerIpAddress, fcStatsDiscardedFrameErrors=fcStatsDiscardedFrameErrors, serialNumberTable=serialNumberTable, smtpRecipTable=smtpRecipTable, ethOutTwoCollision=ethOutTwoCollision, volumeTable=volumeTable, verModGlueRev=verModGlueRev, tcpIntelliSeg=tcpIntelliSeg, puCurrentStatusLowBatteryInterval=puCurrentStatusLowBatteryInterval, nfsV3readLink=nfsV3readLink, puStatsTable=puStatsTable, memberListEntry=memberListEntry, nfsExportsDeviceId=nfsExportsDeviceId, raidControllerTable=raidControllerTable, enclosureFanFanIndex=enclosureFanFanIndex, raidControllerBatteryBackupThreshold=raidControllerBatteryBackupThreshold, ethernetOutTwoCollision=ethernetOutTwoCollision, iScsiLUPath=iScsiLUPath, tcpIPOutPkts=tcpIPOutPkts, failover=failover, iScsiTargetNumber=iScsiTargetNumber, httpStatusOtherErr=httpStatusOtherErr, fsTierCapacityUsedUpper=fsTierCapacityUsedUpper, raidControllerBatteryBackupEntry=raidControllerBatteryBackupEntry, dns=dns, spanTierStatsTable=spanTierStatsTable, enclosureTemperatureTempIndex=enclosureTemperatureTempIndex, fanIndex=fanIndex, raidControllerConfigNVRSize=raidControllerConfigNVRSize, cifsServiceEnabled=cifsServiceEnabled, enclosureTemperatureTempF=enclosureTemperatureTempF, puStatusBatteryAlmostUsedUp=puStatusBatteryAlmostUsedUp, tcpSlowStartCA=tcpSlowStartCA, systemUserNumber=systemUserNumber, nameServiceEntry=nameServiceEntry, volumeEntry=volumeEntry, nfsV2create=nfsV2create, puStatisticsRemainingRunTime=puStatisticsRemainingRunTime, ntTransCalls=ntTransCalls, nvramPoolStatsMaximumUsed=nvramPoolStatsMaximumUsed, symLink2=symLink2, raidControllerActiveTaskType=raidControllerActiveTaskType, nfsGroupMapping=nfsGroupMapping, memberListIndex=memberListIndex, puCurrentStatusManufactureDate=puCurrentStatusManufactureDate, fcPeakOutRate=fcPeakOutRate, nfsExportNumber=nfsExportNumber, ftpUserMountPoint=ftpUserMountPoint, raidControllerEntry=raidControllerEntry, enclosureTemperatureOverTemp=enclosureTemperatureOverTemp, smtpRecipientName=smtpRecipientName, shareAccessTable=shareAccessTable, metaDataCacheStatsEntry=metaDataCacheStatsEntry, clustering=clustering, tdisCalls=tdisCalls)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", httpStatusOK=httpStatusOK, spanCapacityTotalLower=spanCapacityTotalLower, snapshotRulePartitionID=snapshotRulePartitionID, hwFlowIndex=hwFlowIndex, puStatusNumber=puStatusNumber, puConfigurationOnBatteryTolerance=puConfigurationOnBatteryTolerance, webMgmntStats=webMgmntStats, cifsShareComment=cifsShareComment, psuIndex=psuIndex, environment=environment, puConfigurationShutdownOnLowBattery=puConfigurationShutdownOnLowBattery, clusterQuorumDeviceOwnedByPNode=clusterQuorumDeviceOwnedByPNode, cifsShareMaxUsers=cifsShareMaxUsers, spanTierCapacityUsedUpper=spanTierCapacityUsedUpper, snapshotScheduleTable=snapshotScheduleTable, failoverConfigStatus=failoverConfigStatus, fsStatsEntry=fsStatsEntry, secureWebAccessEnabled=secureWebAccessEnabled, ftpAuditLogRecordsPerFile=ftpAuditLogRecordsPerFile, raidControllerConfigFirmwareBuild=raidControllerConfigFirmwareBuild, snapshotRulesName=snapshotRulesName, webCurrActiveSessions=webCurrActiveSessions, atJobTable=atJobTable, winRecipEntry=winRecipEntry, iScsiLUSize=iScsiLUSize, snapshotScheduleNumber=snapshotScheduleNumber, cifsStatsClusterNode=cifsStatsClusterNode, virtualVolumeEntry=virtualVolumeEntry, mkDir2=mkDir2, raidControllerConfigLogicalSectorSize=raidControllerConfigLogicalSectorSize, tcpSSRestartDoubleMSS=tcpSSRestartDoubleMSS, puStatisticsBatteryVoltage=puStatisticsBatteryVoltage, sectorCacheStatsNumber=sectorCacheStatsNumber, nfsExportsName=nfsExportsName, virtualVolumeNumber=virtualVolumeNumber, write3=write3, puConfigShutdownEnabled=puConfigShutdownEnabled, sictrlAccessRestricted=sictrlAccessRestricted, ndmpAutoSnapDeleteMode=ndmpAutoSnapDeleteMode, smtpSevFreq=smtpSevFreq, nfsV3StatsClusterNode=nfsV3StatsClusterNode, psuOneStatus=psuOneStatus, secureWeb=secureWeb, nfsV3mkNod=nfsV3mkNod, puStatsTemperatureC=puStatsTemperatureC, memberListVolumeSysDriveIndex=memberListVolumeSysDriveIndex, snmpTrapHostIndex=snmpTrapHostIndex, nfsVersion2=nfsVersion2, blueArc=blueArc, nameServiceType=nameServiceType, clusterVNodeAdmin=clusterVNodeAdmin, ftpMountNumber=ftpMountNumber, raidControllerConfigRebuildUnit=raidControllerConfigRebuildUnit, snmpRecipIndex=snmpRecipIndex, fanSpeedStatus=fanSpeedStatus, ftpUsers=ftpUsers, mgmnt=mgmnt, rmDir3=rmDir3, licenseRAIDService=licenseRAIDService, sectorCacheStatsTable=sectorCacheStatsTable, nfsExportsEvs=nfsExportsEvs, volumeStatus=volumeStatus, enclosureTemperatureTable=enclosureTemperatureTable, nfsUserMapping=nfsUserMapping, httpHostVolumeWWN=httpHostVolumeWWN, ftpAuditLogVolumeWWN=ftpAuditLogVolumeWWN, iScsiTargetEntry=iScsiTargetEntry, nfsV2write=nfsV2write, winRecipName=winRecipName, blueArcServer=blueArcServer, shareAccessNumber=shareAccessNumber, cifsSharePath=cifsSharePath, readXCalls=readXCalls, sictrlAccessRestrictedNumber=sictrlAccessRestrictedNumber, snapshotScheduleIndex=snapshotScheduleIndex, sectorCacheDirtyPageWtmk=sectorCacheDirtyPageWtmk, nvramPoolStatsEntry=nvramPoolStatsEntry, httpStatusServerError=httpStatusServerError, tcpIPRxInvalidOptionPkts=tcpIPRxInvalidOptionPkts, write2=write2, winsSecondaryIpAddr=winsSecondaryIpAddr, httpMimeMapIndex=httpMimeMapIndex, sectorCacheStatsMissesTotal=sectorCacheStatsMissesTotal, nfsExportsPath=nfsExportsPath, nfsV3mkdir=nfsV3mkdir, puConfigurationShutdownOnRuntime=puConfigurationShutdownOnRuntime, ftpTotalFtpCommands=ftpTotalFtpCommands, fileSysUpdateLastAccess=fileSysUpdateLastAccess, httpMaximalLogging=httpMaximalLogging, create2=create2, fcStatsTotalRxBytes=fcStatsTotalRxBytes, puStatisticsOutputVoltage=puStatisticsOutputVoltage, tcpBroadCastUsingZero=tcpBroadCastUsingZero, verModMTDSLastPass=verModMTDSLastPass, puStatusEntry=puStatusEntry, verModSerial=verModSerial, httpHostVolumeLUN=httpHostVolumeLUN, unlinkCalls=unlinkCalls, sensorTable=sensorTable, clusterStats=clusterStats, spanStatsSpanId=spanStatsSpanId, verModBuildState=verModBuildState, memberListVirtualVolumeLabel=memberListVirtualVolumeLabel, fsTierCapacityUsedLower=fsTierCapacityUsedLower, enclosurePSUTable=enclosurePSUTable, spanStatsNumber=spanStatsNumber, snmpRecipTable=snmpRecipTable, fsCapacityTotalLower=fsCapacityTotalLower, systemUsers=systemUsers, fcStatsInterfaceIndex=fcStatsInterfaceIndex, enclosurePSUPSUIndex=enclosurePSUPSUIndex, fileSystemLoadSystem=fileSystemLoadSystem, cifsShareTable=cifsShareTable, cumNonZeroQueuedReadTime=cumNonZeroQueuedReadTime, cifsFindCloseCalls=cifsFindCloseCalls, puConfigurationUserName=puConfigurationUserName, ntpServerHost=ntpServerHost, protocolXferStatsNumber=protocolXferStatsNumber, smtpUndisclosedRecipNumber=smtpUndisclosedRecipNumber, puCurrentStatusCount=puCurrentStatusCount, raidControllerConfigRebuildRate=raidControllerConfigRebuildRate, cpuUtilizationNumber=cpuUtilizationNumber, smtpRecipNumber=smtpRecipNumber, metaDataCacheStatsFsId=metaDataCacheStatsFsId, httpMaxConnections=httpMaxConnections, nfsV3create=nfsV3create, sictrlCurrActiveSessions=sictrlCurrActiveSessions, sysDriveIndex=sysDriveIndex, cifsNTcreateXCalls=cifsNTcreateXCalls, tapeDriveTable=tapeDriveTable, snapshotRulesVolumeLabel=snapshotRulesVolumeLabel, fanNumber=fanNumber, fcLossSignalErrs=fcLossSignalErrs, clusterVNodeIpAddr=clusterVNodeIpAddr, clusterPNodeStatus=clusterPNodeStatus, cifsWriteCalls=cifsWriteCalls, cifsOpenXCalls=cifsOpenXCalls, puStatusIndex=puStatusIndex, readDirPlus3=readDirPlus3, smtpRecipEntry=smtpRecipEntry, daylightSavings=daylightSavings, serialNumber=serialNumber, tcpIPRxInvalidPkts=tcpIPRxInvalidPkts, iScsiLogicalUnitTable=iScsiLogicalUnitTable, httpConfig=httpConfig, iScsiTargetLogicalUnitTable=iScsiTargetLogicalUnitTable, raidControllerBatteryBackupOutOfSync=raidControllerBatteryBackupOutOfSync, puConfigurationShutdownOnBattery=puConfigurationShutdownOnBattery, shareAccess=shareAccess, eventLogNumber=eventLogNumber, fileSystemTierStatsTable=fileSystemTierStatsTable, nfsV3setAttrCalls=nfsV3setAttrCalls, cronJobMailList=cronJobMailList, nfsServiceMaxUsers=nfsServiceMaxUsers, atJobMailList=atJobMailList, tcpIPInInvHdrPkts=tcpIPInInvHdrPkts, winWarnFreq=winWarnFreq, httpMimeMapType=httpMimeMapType, etherStats=etherStats, nfsV3readDir=nfsV3readDir, iScsiLUInitialized=iScsiLUInitialized, snmpProtocolMode=snmpProtocolMode, systemDriveStatsSdId=systemDriveStatsSdId, ftpUserMountInitDirectory=ftpUserMountInitDirectory, httpStatusServiceUnavailable=httpStatusServiceUnavailable, verModCardID=verModCardID, nvramFsStatsWaitingAllocs=nvramFsStatsWaitingAllocs, puConfigEntry=puConfigEntry, enclosureTemperatureRackIndex=enclosureTemperatureRackIndex, licenseEntry=licenseEntry, fcLossSyncErrors=fcLossSyncErrors, atJobEntry=atJobEntry, enclosureAlarmTable=enclosureAlarmTable, sensorEntry=sensorEntry, puConfigCommsEverOK=puConfigCommsEverOK, virtualVolumeLabel=virtualVolumeLabel, controllers=controllers, trans2Calls=trans2Calls, smtpRecipIndex=smtpRecipIndex, sectorCacheDirtyPageTimeout=sectorCacheDirtyPageTimeout, iScsiParameterEVS=iScsiParameterEVS, ftpLogging=ftpLogging, clusterUuid=clusterUuid, enclosureAlarmRackIndex=enclosureAlarmRackIndex, cifsMkdirCalls=cifsMkdirCalls, webTotalFramesRX=webTotalFramesRX, ethernetPkOutOctetRate=ethernetPkOutOctetRate, access3Calls=access3Calls, ethernetInstInOctetRate=ethernetInstInOctetRate, mknewCalls=mknewCalls, puConfigurationMonitoringEnabled=puConfigurationMonitoringEnabled, licenseKeyTable=licenseKeyTable, iScsiLUStatus=iScsiLUStatus, raidControllerActiveTaskTable=raidControllerActiveTaskTable, winInfoFreq=winInfoFreq, telnetAccessRestrictedHost=telnetAccessRestrictedHost, tcpIPRxInvalidChksumPkts=tcpIPRxInvalidChksumPkts, ftpUserNumber=ftpUserNumber, nisServerEntry=nisServerEntry, httpMimeMapNumber=httpMimeMapNumber, protStatsFsLabel=protStatsFsLabel, verModTable=verModTable, memberListVolumePartitionID=memberListVolumePartitionID, protocolStatsTable=protocolStatsTable, nisServerNumber=nisServerNumber, fcCacheMisses=fcCacheMisses, shares=shares, fileSysTransactionLogging=fileSysTransactionLogging, snapshotScheduleEntry=snapshotScheduleEntry, winRecipNumber=winRecipNumber, stripeWriteCumLatency=stripeWriteCumLatency, ftpMountEntry=ftpMountEntry, lcdFrontPanelLocked=lcdFrontPanelLocked, iScsiParameterEntry=iScsiParameterEntry, nfsUserID=nfsUserID, ethTotalPackets=ethTotalPackets, rename3=rename3, advipConfig=advipConfig, tcpOffSubnetSlowStart=tcpOffSubnetSlowStart, sysDriveStatus=sysDriveStatus, fcStatsLinkFailErrors=fcStatsLinkFailErrors, cifsChkpthCalls=cifsChkpthCalls, snapshotScheduleRuleName=snapshotScheduleRuleName, fcInstantaneousOutRate=fcInstantaneousOutRate, fcStatsPeakOutRate=fcStatsPeakOutRate, tcpOffSubnetMTU=tcpOffSubnetMTU, automountWWN=automountWWN, automount=automount, fcStatsRXEOFErrors=fcStatsRXEOFErrors, cnsRetransmits=cnsRetransmits, sectorCacheStatsMissesPSI=sectorCacheStatsMissesPSI, spanTierCapacityTotalUpper=spanTierCapacityTotalUpper, flushCalls=flushCalls, raidControllerBatteryBackupTable=raidControllerBatteryBackupTable, raidControllerConfigFirmwareVersion=raidControllerConfigFirmwareVersion, ftpUserEntry=ftpUserEntry, ftpTotalFtpXferIn=ftpTotalFtpXferIn, nfsGroupMappingNtGroupDomainName=nfsGroupMappingNtGroupDomainName, nvramStats=nvramStats, web=web, cifsWriteBrawCalls=cifsWriteBrawCalls, cpuIndex=cpuIndex, tcpReTxSegments=tcpReTxSegments, writeCache=writeCache, nfsV3read=nfsV3read, fpgaUtilizationTable=fpgaUtilizationTable, nfsV2writeCache=nfsV2writeCache, snapshotRuleNumber=snapshotRuleNumber, clusterPNodeName=clusterPNodeName, ndmpAutoSnapMaxRetention=ndmpAutoSnapMaxRetention, tcpInSegments=tcpInSegments, puStatisticsLineVoltage=puStatisticsLineVoltage, cumNonZeroQueuedWriteTime=cumNonZeroQueuedWriteTime, read2=read2)
mibBuilder.exportSymbols("BLUEARC-SERVER-MIB", spanCapacityUsedUpper=spanCapacityUsedUpper, httpMinTimeOut=httpMinTimeOut, intraClusterPortErrorTable=intraClusterPortErrorTable, protocolXferStatsFlavor=protocolXferStatsFlavor, fcStatsBadRXCharErrors=fcStatsBadRXCharErrors, iScsiStatisticsTable=iScsiStatisticsTable, snapshot=snapshot, memberListPath=memberListPath, secureWebAccessRestrictedHost=secureWebAccessRestrictedHost, psuStatus=psuStatus, clusterVNodeNumber=clusterVNodeNumber, eventLogHandle=eventLogHandle, securityMode=securityMode, atJobRunTime=atJobRunTime, raidControllerConfigMaxDrivesPerSystemDrive=raidControllerConfigMaxDrivesPerSystemDrive, raidControllerConfigFlashSize=raidControllerConfigFlashSize, temperatureSensorIndex=temperatureSensorIndex, udpRxShortPkts=udpRxShortPkts, fcResponses=fcResponses, puStatsFrequency=puStatsFrequency, cronJobEntry=cronJobEntry, sensorTempFReading=sensorTempFReading, puStatusSensitivity=puStatusSensitivity, securityDomain=securityDomain, http=http, cifsCreateCalls=cifsCreateCalls, enclosureTemperatureTempC=enclosureTemperatureTempC, sectorCacheStatsHitsTotal=sectorCacheStatsHitsTotal, nisDomain=nisDomain, protocolXferStatsBytesRead=protocolXferStatsBytesRead, lcd=lcd, smtpRecipientEntry=smtpRecipientEntry, fsTierStatsEntry=fsTierStatsEntry, shareAccessName=shareAccessName, tcpRxOversizeSegmentErrs=tcpRxOversizeSegmentErrs, iScsiTargetLUTargetName=iScsiTargetLUTargetName, httpGetRequests=httpGetRequests, raidControllerActiveTaskEntry=raidControllerActiveTaskEntry, smtpDiagUUencEnabled=smtpDiagUUencEnabled, fsLabel=fsLabel, lockingXCalls=lockingXCalls, fcStatsInstantaneousInRate=fcStatsInstantaneousInRate, autoChangerDeviceName=autoChangerDeviceName, telnetMgmntStats=telnetMgmntStats, cifsShareUsers=cifsShareUsers, shareLUN=shareLUN, snapshotSchedulesEntry=snapshotSchedulesEntry, failoverPrimaryIpAddr=failoverPrimaryIpAddr, physicalDriveRowIndex=physicalDriveRowIndex, ntCancelCalls=ntCancelCalls, ftpBytesTotalXferIn=ftpBytesTotalXferIn, fcStatsClusterNode=fcStatsClusterNode, clusterPNodeId=clusterPNodeId, snmpTrapHostNumber=snmpTrapHostNumber, puStatusModel=puStatusModel, symLink3=symLink3, httpMimeMapTable=httpMimeMapTable, memberListNumber=memberListNumber, snmpAccessRestricted=snmpAccessRestricted, ethInFIFODrops=ethInFIFODrops, telnetTotalFramesTX=telnetTotalFramesTX, puStatsLineMininumVoltage=puStatsLineMininumVoltage, ntCreateXCalls=ntCreateXCalls, nfsV2StatsEntry=nfsV2StatsEntry, tcpSlowStartOnIdle=tcpSlowStartOnIdle, fcDiscardedFrameErrors=fcDiscardedFrameErrors, raidControllerManufacturer=raidControllerManufacturer, sensorSpeedReading=sensorSpeedReading, automountIndex=automountIndex, httpStatusForbidden=httpStatusForbidden, snapshotRulesQueueSize=snapshotRulesQueueSize, puStatisticsTemperatureC=puStatisticsTemperatureC, virtualVolumeCriticalAlert=virtualVolumeCriticalAlert, iSNSEntry=iSNSEntry, raidControllerConfigEntry=raidControllerConfigEntry, tapeDriveEVS=tapeDriveEVS, physicalDriveEnclosureIndex=physicalDriveEnclosureIndex, verModLoader=verModLoader, enclosureAlarmNumber=enclosureAlarmNumber, sensorIndex=sensorIndex, httpTimeOut=httpTimeOut, sictrlTotalBytesRX=sictrlTotalBytesRX, fileSystemStatsTable=fileSystemStatsTable, fibreChannelInterfaceNumber=fibreChannelInterfaceNumber, fcBadRXCharErrs=fcBadRXCharErrs, licenseCIFSService=licenseCIFSService, temperatureSensorTable=temperatureSensorTable, iScsiParameterTable=iScsiParameterTable, fsStatsFsLabel=fsStatsFsLabel, autoChangerIndex=autoChangerIndex, ethOutOneCollision=ethOutOneCollision, puStatusBatteryReplaceDate=puStatusBatteryReplaceDate, spanLabel=spanLabel, secureWebTotalBytesTX=secureWebTotalBytesTX, sictrlTotalBytesTX=sictrlTotalBytesTX, systemDriveStatsCnIndex=systemDriveStatsCnIndex, httpMaximumLogFiles=httpMaximumLogFiles, tcpLinkPktDrops=tcpLinkPktDrops, telnetTotalBytesRX=telnetTotalBytesRX, oneWriteCumLatency=oneWriteCumLatency, spanTierCapacityTotalLower=spanTierCapacityTotalLower, raidControllerActiveTaskIndex=raidControllerActiveTaskIndex, verModMTDSFailures=verModMTDSFailures, shareAccessIndex=shareAccessIndex, raidControllerBatteryBackupLowPower=raidControllerBatteryBackupLowPower, snmpRecipNumber=snmpRecipNumber, tcpIPInInvNUcastAddrPkts=tcpIPInInvNUcastAddrPkts, nisEnabled=nisEnabled, nfsV3fsStat=nfsV3fsStat, webAccessRestrictedTable=webAccessRestrictedTable, nvramFsStatsWaitedAllocs=nvramFsStatsWaitedAllocs, smtpRecipientDisclose=smtpRecipientDisclose, shareAccessEntry=shareAccessEntry, licenseKey=licenseKey, shareName=shareName)
