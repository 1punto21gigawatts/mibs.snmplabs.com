#
# PySNMP MIB module INTEL-CSU-HW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-CSU-HW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, ObjectIdentity, TimeTicks, Counter64, IpAddress, enterprises, Counter32, Unsigned32, private, Bits, iso, NotificationType, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "ObjectIdentity", "TimeTicks", "Counter64", "IpAddress", "enterprises", "Counter32", "Unsigned32", "private", "Bits", "iso", "NotificationType", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
csudsu = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 36))
csu = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 36, 1))
csuInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1), )
if mibBuilder.loadTexts: csuInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuInfoTable.setDescription('The CSU Information table.')
csuInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1), ).setIndexNames((0, "INTEL-CSU-HW-MIB", "csuInfoLineIndex"))
if mibBuilder.loadTexts: csuInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuInfoEntry.setDescription('An entry in the CSU Information table.')
csuInfoLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuInfoLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuInfoLineIndex.setDescription('The index value which uniquely identifies the CSU interface to which this entry is applicable.')
csuAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("csuAlarmNone", 1), ("csuAlarmRED", 2), ("csuAlarmBLUE", 4), ("csuAlarmYELLOW", 8), ("csuAlarmOUTOFFRAMING", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: csuAlarm.setDescription('The currently active alarm condition, if any. Red alarm corresponds to a Loss Of Signal (LOS), and most commonly occurs when the cable is unplugged or broken. Blue alarm indicates that the local equipment is properly connected but that the carrier CSU is sending a unique data pattern, indicating that it has lost its remote data source. Yellow alarm indicates that the local equipment is receiving a valid signal, but this signal indicates that the carrier CSU cannot frmae to a signal from us. This is normal for up to 30 seconds after connection, but if it persists indicates that there is a break in the T1 connection in the direction toward the carrier. Out Of Framing is any other condition severe enough that the local CSU cannot lock onto the signal from the carrier CSU. This may be because of mismatched configurations. Likely candidates are Line Coding and Framing Format. If these are correctly set at both ends, the line should be tested by the T1 service provider.')
csuReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("csuReceiveLevelPlus2ToMinus7Point5", 1), ("csuReceiveLevelMinus7Point5ToMinus15", 2), ("csuReceiveLevelMinus15ToMinus22point5", 3), ("csuReceiveLevelLessThanMinus22Point5", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuReceiveLevel.setStatus('mandatory')
if mibBuilder.loadTexts: csuReceiveLevel.setDescription('The currently detected signal strength. 1:+2 to -7.5db 2:-7.5 to -15db 3:-15 to -22.5db 4: < -22.5 db')
csuLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("csuLoopbackNone", 1), ("csuLoopbackLocalPayload", 2), ("csuLoopbackLocalLine", 3), ("csuLoopbackLocalChannel", 4), ("csuLoopbackRemotePayload", 5), ("csuLoopbackRemoteLine", 6), ("csuLoopbackRemoteChannel", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLoopbackState.setStatus('mandatory')
if mibBuilder.loadTexts: csuLoopbackState.setDescription('This variable identifies the current active loopback, if any.')
csuLossofsynchronization = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLossofsynchronization.setStatus('mandatory')
if mibBuilder.loadTexts: csuLossofsynchronization.setDescription('A count of the number of seconds during which a Loss of synchronization has been triggered')
csuChangeofFrameAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChangeofFrameAlignment.setStatus('mandatory')
if mibBuilder.loadTexts: csuChangeofFrameAlignment.setDescription('A count of the number of times that there has been a change of Frame Alignment')
csuEightZeroDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuEightZeroDetect.setStatus('mandatory')
if mibBuilder.loadTexts: csuEightZeroDetect.setDescription('A count of the number of times that a string of 8 contiguous zeros has been detected')
csuSixteenZeroDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSixteenZeroDetect.setStatus('mandatory')
if mibBuilder.loadTexts: csuSixteenZeroDetect.setDescription('A count of the number of times that a string of 16 contiguous zeros has been detected')
csuSeverelyErroredFramingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSeverelyErroredFramingEvent.setStatus('mandatory')
if mibBuilder.loadTexts: csuSeverelyErroredFramingEvent.setDescription('A count of number of severely Severely Errored Framing Events')
csuB8ZSCodeWordDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuB8ZSCodeWordDetect.setStatus('mandatory')
if mibBuilder.loadTexts: csuB8ZSCodeWordDetect.setDescription('A count of the number of times that a B8ZS Code Word has been detected')
csuFrameBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFrameBitError.setStatus('mandatory')
if mibBuilder.loadTexts: csuFrameBitError.setDescription('A count of Frame Bit Errors')
csuReceivePulseDensityViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuReceivePulseDensityViolation.setStatus('mandatory')
if mibBuilder.loadTexts: csuReceivePulseDensityViolation.setDescription('A count of Receive Pulse Density Violations')
csuTransmitPulseDensityViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTransmitPulseDensityViolation.setStatus('mandatory')
if mibBuilder.loadTexts: csuTransmitPulseDensityViolation.setDescription('A count of Transmit Pulse Density Violations')
csuJitterAttenuatorLimitTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuJitterAttenuatorLimitTrip.setStatus('mandatory')
if mibBuilder.loadTexts: csuJitterAttenuatorLimitTrip.setDescription('A count of Jitter Attenuator Limit Trips')
csuLossofReceiveClock = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLossofReceiveClock.setStatus('mandatory')
if mibBuilder.loadTexts: csuLossofReceiveClock.setDescription('Loss of Receive Clock')
csuFramerReceiveCarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFramerReceiveCarrierLoss.setStatus('mandatory')
if mibBuilder.loadTexts: csuFramerReceiveCarrierLoss.setDescription('A count of the number of times that a Framer Receive Carrier Loss has ocurred. Because a Framer Receive Carrier Loss is an LOS indicator, this also counts the number of times that the Red alam state has been entered.')
csuLineCodeViolationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLineCodeViolationCount.setStatus('mandatory')
if mibBuilder.loadTexts: csuLineCodeViolationCount.setDescription('A count of Line Code Violations')
csuPathCodeViolationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuPathCodeViolationCount.setStatus('mandatory')
if mibBuilder.loadTexts: csuPathCodeViolationCount.setDescription('A count of Path Code Violations')
csuMultiframesOutofSyncCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuMultiframesOutofSyncCount.setStatus('mandatory')
if mibBuilder.loadTexts: csuMultiframesOutofSyncCount.setDescription('A count of the number of Multiframes which have passed without being able to sucessfully reframe.')
csuCRC6errors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCRC6errors.setStatus('mandatory')
if mibBuilder.loadTexts: csuCRC6errors.setDescription('A count of CRC6 errors')
csuErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: csuErrorRate.setDescription('The CSU error rate. This variable describes a rate in scientific notation.')
csuLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuLinkStateUp", 1), ("csuLinkStateDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: csuLinkState.setDescription('The state of the protocol stack using the CSU')
csuErrorsThisSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuErrorsThisSecond.setStatus('mandatory')
if mibBuilder.loadTexts: csuErrorsThisSecond.setDescription('The number of physical bit errors detected in the last second')
csuPercentEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuPercentEFS.setStatus('mandatory')
if mibBuilder.loadTexts: csuPercentEFS.setDescription('The number of error free seconds as a percentage of the total available seconds')
csuTXChannelPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTXChannelPayload.setStatus('mandatory')
if mibBuilder.loadTexts: csuTXChannelPayload.setDescription('Transmit channel payloads, channels 1 through 24')
csuRXChannelPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuRXChannelPayload.setStatus('mandatory')
if mibBuilder.loadTexts: csuRXChannelPayload.setDescription('Receive channel payloads, channels 1 through 24')
csuDetectedChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDetectedChannelMap.setStatus('mandatory')
if mibBuilder.loadTexts: csuDetectedChannelMap.setDescription('The detected channel map. Each channel maps into one BYTE, starting with channel one in the first byte. A value of 0 indicates that channel activity has been detected ON, 1 indicates that the channel is detected OFF, and 2 that the channel state has not yet been determined.')
csuYellowAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuYellowAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: csuYellowAlarmCount.setDescription('A count of the number of Yellow alarms')
csuAISDefects = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAISDefects.setStatus('mandatory')
if mibBuilder.loadTexts: csuAISDefects.setDescription('A count of the number of AIS Defects')
csuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2), )
if mibBuilder.loadTexts: csuConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuConfigTable.setDescription('The CSU Configuration table.')
csuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1), ).setIndexNames((0, "INTEL-CSU-HW-MIB", "csuConfigLineIndex"))
if mibBuilder.loadTexts: csuConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuConfigEntry.setDescription('An entry in the CSU Configuration table.')
csuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuConfigLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuConfigLineIndex.setDescription('The index value which uniquely identifies the CSU interface to which this entry is applicable.')
csuChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csu64kbps", 1), ("csu56kbps", 2), ("csuAutoBandwidth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChannelBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: csuChannelBandwidth.setDescription(' ')
csuDataInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuNotInverted", 1), ("csuInverted", 2), ("csuAutoInverted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDataInversion.setStatus('mandatory')
if mibBuilder.loadTexts: csuDataInversion.setDescription(' ')
csuDataCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNRZ", 1), ("csuNRZI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDataCoding.setStatus('mandatory')
if mibBuilder.loadTexts: csuDataCoding.setDescription(' ')
csuTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNetworkTiming", 1), ("csuLoopTiming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTimingMode.setStatus('mandatory')
if mibBuilder.loadTexts: csuTimingMode.setDescription(' ')
csuLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("csu0DB", 1), ("csu75DB", 2), ("csu15DB", 3), ("csu225DB", 4), ("csu0to133", 5), ("csu133to266", 6), ("csu266to399", 7), ("csu399to533", 8), ("csu533to655", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: csuLineBuildOut.setDescription('Line Build out values: to be interpreted as follows: csu0DB(1) 0 LBO 0 dB csu75DB(2) 1 LBO -7.5 dB csu15(3) 2 LBO -15 dB csu225(4) 3 LBO -22.5 dB csu0_133(5) 4 LBO 0 to 133 feet csu133_266(6) 5 LBO 133 to 266 feet csu266_399(7) 6 LBO 266 to 399 feet csu399_533(8) 7 LBO 399 to 533 feet csu533_655(9) 8 LBO 533 to 655 feet ')
csuLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuB8ZS", 1), ("csuAMI", 2), ("csuAutoLineCoding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLineCode.setStatus('mandatory')
if mibBuilder.loadTexts: csuLineCode.setDescription(' ')
csuPulseDensityEnforcer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuPDEnforceOFF", 1), ("csuPDEnforceON", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuPulseDensityEnforcer.setStatus('mandatory')
if mibBuilder.loadTexts: csuPulseDensityEnforcer.setDescription(' ')
csuFramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuESF", 1), ("csuD4", 2), ("csuAutoFraming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFramingFormat.setStatus('mandatory')
if mibBuilder.loadTexts: csuFramingFormat.setDescription(' ')
csuJapaneseCRC6 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuJapanCRCDisable", 1), ("csuJapanCRCEnable", 2), ("csuAutoBandwidth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuJapaneseCRC6.setStatus('mandatory')
if mibBuilder.loadTexts: csuJapaneseCRC6.setDescription(' ')
csuReceiverSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuSensitivityExtended", 1), ("csuSensitivityNormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuReceiverSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: csuReceiverSensitivity.setDescription(' ')
csuFDLidleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuFDLIdleIsFlags", 1), ("csuFdlIdleIsIdles", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFDLidleCode.setStatus('mandatory')
if mibBuilder.loadTexts: csuFDLidleCode.setDescription(' ')
csuANSIPRMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuANSIPRMEnabled", 1), ("csuANSIPRMDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuANSIPRMEnable.setStatus('mandatory')
if mibBuilder.loadTexts: csuANSIPRMEnable.setDescription(' ')
csuANSIPRMaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuANSIPrm0x38", 1), ("csuANSIPrm0x3a", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuANSIPRMaddress.setStatus('mandatory')
if mibBuilder.loadTexts: csuANSIPRMaddress.setDescription(' ')
csuATTresponseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuATTResponseEnabled", 1), ("csuATTResponseDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuATTresponseEnable.setStatus('mandatory')
if mibBuilder.loadTexts: csuATTresponseEnable.setDescription(' ')
csuATTresponseaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuATTResponseBoth", 1), ("csuATTResponseCSU", 2), ("csuATTResponseDSU", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuATTresponseaddress.setStatus('mandatory')
if mibBuilder.loadTexts: csuATTresponseaddress.setDescription(' ')
csuAllocatedChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAllocatedChannelMap.setStatus('mandatory')
if mibBuilder.loadTexts: csuAllocatedChannelMap.setDescription('The allocated channel map. Each channel maps into one BYTE, starting with channel one in the first byte. A value indicates that channel is configured ON, and 1 indicates that the channel is configured OFF.')
csuFracTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3), )
if mibBuilder.loadTexts: csuFracTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuFracTable.setDescription('The CSU Fractional table.')
csuFracEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1), ).setIndexNames((0, "INTEL-CSU-HW-MIB", "csuFracLineIndex"), (0, "INTEL-CSU-HW-MIB", "csuFracNumber"))
if mibBuilder.loadTexts: csuFracEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuFracEntry.setDescription('An entry in the CSU Fractional table.')
csuFracLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFracLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuFracLineIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value a csuLineIndex object instance.')
csuFracNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFracNumber.setStatus('mandatory')
if mibBuilder.loadTexts: csuFracNumber.setDescription('The channel number for this entry.')
csuFracInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuChannelInUse", 1), ("csuChannelNotInUse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFracInUse.setStatus('mandatory')
if mibBuilder.loadTexts: csuFracInUse.setDescription('Indicates whether this channel has been configured as part of the fractional arrangement.')
csuFracDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 36, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuChannelInUse", 1), ("csuChannelNotInUse", 2), ("csuChannelUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFracDetected.setStatus('mandatory')
if mibBuilder.loadTexts: csuFracDetected.setDescription('Indicates the result of channel autodetection. A value of InUse or NotInUse should match the setting of configuration for this channel')
mibBuilder.exportSymbols("INTEL-CSU-HW-MIB", csuChannelBandwidth=csuChannelBandwidth, csu=csu, csuFracNumber=csuFracNumber, csuB8ZSCodeWordDetect=csuB8ZSCodeWordDetect, csuCRC6errors=csuCRC6errors, csuTXChannelPayload=csuTXChannelPayload, csuSixteenZeroDetect=csuSixteenZeroDetect, csuATTresponseaddress=csuATTresponseaddress, csuPulseDensityEnforcer=csuPulseDensityEnforcer, csuJitterAttenuatorLimitTrip=csuJitterAttenuatorLimitTrip, csudsu=csudsu, csuReceivePulseDensityViolation=csuReceivePulseDensityViolation, csuFramerReceiveCarrierLoss=csuFramerReceiveCarrierLoss, csuConfigEntry=csuConfigEntry, csuDataCoding=csuDataCoding, csuTimingMode=csuTimingMode, csuAISDefects=csuAISDefects, csuInfoTable=csuInfoTable, csuReceiverSensitivity=csuReceiverSensitivity, csuPathCodeViolationCount=csuPathCodeViolationCount, csuFracTable=csuFracTable, csuMultiframesOutofSyncCount=csuMultiframesOutofSyncCount, csuLineCode=csuLineCode, csuLineCodeViolationCount=csuLineCodeViolationCount, csuTransmitPulseDensityViolation=csuTransmitPulseDensityViolation, csuFrameBitError=csuFrameBitError, csuAllocatedChannelMap=csuAllocatedChannelMap, csuFDLidleCode=csuFDLidleCode, csuConfigLineIndex=csuConfigLineIndex, csuYellowAlarmCount=csuYellowAlarmCount, csuLoopbackState=csuLoopbackState, csuRXChannelPayload=csuRXChannelPayload, csuLossofsynchronization=csuLossofsynchronization, csuErrorRate=csuErrorRate, csuPercentEFS=csuPercentEFS, csuEightZeroDetect=csuEightZeroDetect, csuSeverelyErroredFramingEvent=csuSeverelyErroredFramingEvent, csuANSIPRMaddress=csuANSIPRMaddress, csuDetectedChannelMap=csuDetectedChannelMap, csuAlarm=csuAlarm, csuJapaneseCRC6=csuJapaneseCRC6, csuErrorsThisSecond=csuErrorsThisSecond, csuFramingFormat=csuFramingFormat, csuFracDetected=csuFracDetected, csuFracInUse=csuFracInUse, csuLinkState=csuLinkState, csuChangeofFrameAlignment=csuChangeofFrameAlignment, csuInfoEntry=csuInfoEntry, csuInfoLineIndex=csuInfoLineIndex, csuFracEntry=csuFracEntry, csuLossofReceiveClock=csuLossofReceiveClock, csuLineBuildOut=csuLineBuildOut, csuReceiveLevel=csuReceiveLevel, csuConfigTable=csuConfigTable, csuANSIPRMEnable=csuANSIPRMEnable, csuATTresponseEnable=csuATTresponseEnable, csuFracLineIndex=csuFracLineIndex, csuDataInversion=csuDataInversion)
