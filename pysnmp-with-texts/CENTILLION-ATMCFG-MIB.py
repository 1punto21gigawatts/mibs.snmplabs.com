#
# PySNMP MIB module CENTILLION-ATMCFG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-ATMCFG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
EnableIndicator, atmConfig = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "EnableIndicator", "atmConfig")
VirtualSegmentTypeId, = mibBuilder.importSymbols("CENTILLION-VIRTUALSEGMENT-MIB", "VirtualSegmentTypeId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, Gauge32, iso, TimeTicks, Unsigned32, Counter64, Integer32, NotificationType, Bits, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Gauge32", "iso", "TimeTicks", "Unsigned32", "Counter64", "Integer32", "NotificationType", "Bits", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmElanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1))
atmCktTable = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2))
atmPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3))
atmSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 4))
atmPortLogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5))
atmElanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: atmElanConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanConfigTable.setDescription('ATM elan table')
atmElanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "CENTILLION-ATMCFG-MIB", "atmElanIndex"))
if mibBuilder.loadTexts: atmElanConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanConfigEntry.setDescription('ATM elan table. Each entry is indexed by one field: elan id.')
atmElanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmElanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanIndex.setDescription('The index to the atm elan table. support total of 32 circuits.')
atmElanType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("atmElanXob", 1), ("atmElanBe", 2), ("atmLecXob", 3), ("atmLecBe", 4), ("atm1483Xob", 5), ("atmNullXob", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmElanType.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanType.setDescription('The elan type.')
atmElanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmElanEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanEnable.setDescription('Enable bit of the elan. 1 = enable elan 2 = disable elan')
atmElanAllCkts = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmElanAllCkts.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanAllCkts.setDescription('Return all pvc circuits that belong to this elan. Each circuit id is a 32 bit field')
atmElanVirtualCard = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmElanVirtualCard.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanVirtualCard.setDescription('Virtual card number.')
atmElanVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmElanVirtualPort.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanVirtualPort.setDescription('Virtual port number. Currently this number is the Elan id')
atmElanVirtualSegmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmElanVirtualSegmentId.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanVirtualSegmentId.setDescription('Virtual Segment ID of the segment that this Elan is a member of')
atmElanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmElanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanStatus.setDescription('The current status of the entry. Entries may be added by specifying a value of valid, and removed by setting the status to invalid.')
atmElanVirtualSegmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 9), VirtualSegmentTypeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmElanVirtualSegmentType.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanVirtualSegmentType.setDescription('The virtual segment type.')
atmElanBridgeGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmElanBridgeGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanBridgeGroupId.setDescription('Spanning Tree Group ID of the spanning tree group that the virtual segment and this Elan are members of.')
atmElanMaxUnknownFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmElanMaxUnknownFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanMaxUnknownFrameCount.setDescription('Maximum Unknown Frame Count. See the description of atmElanMaxUnknownFrameTime below.')
atmElanMaxUnknownFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmElanMaxUnknownFrameTime.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanMaxUnknownFrameTime.setDescription('Maxinum Unknown Frame Time. Within the period of time defined by the Maxinum Unknown Frame Time, a LAN Client will send no more than Maxinum Unknown Frame Count frames for a given unicast LAN Destination. This time value is expressed in seconds.')
atmElanVcBridgingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 1, 1, 1, 13), EnableIndicator().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmElanVcBridgingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmElanVcBridgingEnable.setDescription('This object is used to enable or disable VC Bridging on the vport. The default value for this object is disable.')
atmPktCktTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: atmPktCktTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktTable.setDescription('ATM virtual circuit table.')
atmPktCktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "CENTILLION-ATMCFG-MIB", "atmPktCktIndex"))
if mibBuilder.loadTexts: atmPktCktEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktEntry.setDescription('ATM Packet Circuit table entry. Each entry is indexed by one field: The circuit index.')
atmPktCktIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktIndex.setDescription('The index to the packet circuit table. support total of 256 circuits.')
atmPktCktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalPriority", 1), ("highPriority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktPriority.setDescription('Priority bit of the circuit. 1 = normal priority 2 = high priority')
atmPktCktEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktEnable.setDescription('Enable bit of the circuit. 1 = enable circuit 2 = disable circuit')
atmPktCktType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("virtualCkt", 1), ("virtualPathCkt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktType.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktType.setDescription('type bit of the circuit. 1 = virtual circuit 2 = virtual path circuit')
atmPktCktCost = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktCost.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktCost.setDescription('The cost of the circuit. range from 0 to 255 with 0 the least cost.')
atmPktCktElanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktElanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktElanIndex.setDescription('The elan id this circuit belongs to.')
atmPktCktCardPort = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktCardPort.setStatus('deprecated')
if mibBuilder.loadTexts: atmPktCktCardPort.setDescription('The atm card/port of the circuit. The card/port takes one byte. This will be replaced by atmPktCktCardPort2')
atmPktCktVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktVpi.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktVpi.setDescription('The packet circuit vpi number.')
atmPktCktVci = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktVci.setDescription('The packet circuit vci number.')
atmPktCktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktStatus.setDescription('The current status of the entry. Entries may be added by specifying a value of valid, and removed by setting the status to invalid.')
atmPktCktCardPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPktCktCardPort2.setStatus('mandatory')
if mibBuilder.loadTexts: atmPktCktCardPort2.setDescription('This mib is added for 24 ports card. This will replace atmPktCktCardPort. The atm card/port of the circuit. The card and port takes one byte each.')
atmCellCktTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: atmCellCktTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmCellCktTable.setDescription('ATM virtual circuit table.')
atmCellCktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "CENTILLION-ATMCFG-MIB", "atmCellCktIndex"))
if mibBuilder.loadTexts: atmCellCktEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmCellCktEntry.setDescription('ATM Cell Circuit table entry. Each entry is indexed by one field: The circuit index.')
atmCellCktIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCellCktIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmCellCktIndex.setDescription('The index to the packet circuit table. support total of 256 circuits.')
atmCellCktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normPriority", 1), ("highPriority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCellCktPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atmCellCktPriority.setDescription('Priority bit of the circuit. 1 = normal priority 2 = high priority')
atmCellCktEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCellCktEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmCellCktEnable.setDescription('Enable bit of the cell circuit. 1 = enable cell circuit 2 = disable cell circuit')
atmCellCktType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("virtualCkt", 1), ("virtualPathCkt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCellCktType.setStatus('mandatory')
if mibBuilder.loadTexts: atmCellCktType.setDescription('type bit of the circuit. 1 = virtual circuit 2 = virtual path circuit')
atmCellCktNumEndpt = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCellCktNumEndpt.setStatus('mandatory')
if mibBuilder.loadTexts: atmCellCktNumEndpt.setDescription('Number of endpoints in the circuit. An endpoint is defined as a combination of card/port/vpi/vci.')
atmCellCktEndptList = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCellCktEndptList.setStatus('mandatory')
if mibBuilder.loadTexts: atmCellCktEndptList.setDescription('List of endpoints for the circuit. Each endpoint includes Card (32 bit) Port (32 bit) Vpi (32 bit) Vci (32 bit)')
atmCellCktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCellCktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmCellCktStatus.setDescription('The current status of the entry. Entries may be added by specifying a value of valid, and removed by setting the status to invalid.')
atmPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: atmPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortConfigTable.setDescription('ATM Hardware Port Configuration Table')
atmPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "CENTILLION-ATMCFG-MIB", "atmPortCardIndex"), (0, "CENTILLION-ATMCFG-MIB", "atmPortPortIndex"))
if mibBuilder.loadTexts: atmPortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortConfigEntry.setDescription('ATM port configuration table. Each entry is indexed by two fields: The card index and the port index.')
atmPortCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortCardIndex.setDescription('This field indicates the ATM card id.')
atmPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortPortIndex.setDescription('This field indicates ATM port id.')
atmPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortEnable.setDescription('This field indicates if the ATM port is enabled or disabled. 2=Disable, 1=Enable. When the port is disabled, no cell traffic will be ggenerated nor accepted and not SONET signal is generated. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortLoopTimingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopTimingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLoopTimingEnable.setDescription('This field indicates if loop timing is enabled or disabled. 2=Disable, 1=Enable. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortHecCosetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortHecCosetEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortHecCosetEnable.setDescription('This field indicates if heccoset is enabled or disabled. 2=Disable, 1=Enable. When the port is disabled, no cell traffic will be ggenerated nor accepted and not SONET signal is generated. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortHecCorrectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortHecCorrectionEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortHecCorrectionEnable.setDescription('This field indicates if hec correction is enabled or disabled. 2=Disable, 1=Enable. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortHardwareFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2), ("notapply", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortHardwareFrameMode.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortHardwareFrameMode.setDescription('This field indicates the atm frame mode detected by hardware, Sonet, SDH or NotApply (no cable plugged in) or other (value other than sonet and sdh).')
atmPortLocalLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLocalLoopEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLocalLoopEnable.setDescription('This field indicates if local loop is enabled or disabled. 2=Disable, 1=Enable. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortRemoteLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortRemoteLoopEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortRemoteLoopEnable.setDescription('This field indicates if loop timing is enabled or disabled. 2=Disable, 1=Enable. When the port is disabled, no cell traffic will be ggenerated nor accepted and not SONET signal is generated. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortForceHecErrorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortForceHecErrorEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortForceHecErrorEnable.setDescription('This field indicates if forcing cell header checksum error is enabled or disabled. 2=Disable, 1=Enable. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortScramblingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortScramblingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortScramblingEnable.setDescription('This field indicates if scrambing is enabled or disabled. 2=Disable, 1=Enable. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortSigEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noSig", 1), ("uni", 2), ("iisp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortSigEntityType.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortSigEntityType.setDescription('This object indicates the type of the siganlling entity that is associated with this ATM port. The type of a signalling instance can either be no signalling, UNI which is the User-Network Interface, or Network- Network Interface iisp(3). Note that there are more than one NNI supported by the ATM Forum and we support only IISP. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortSigEntityRole = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("user", 2), ("netw", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortSigEntityRole.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortSigEntityRole.setDescription('This object indicates the role of the signalling entity that is associated with this ATM port. When the object atmPortSigEntity is set to a value other than uni(2), this object is set to other(1). Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortSigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("uni30", 3), ("uni31", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortSigVersion.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortSigVersion.setDescription('This object indicates the version of the siganlling entity that is associated with this ATM port. This object is always set to other(1) when the object atmPortSigEntityType is set to a value other than uni(2). When the value of this object is set to auto(2), the signalling entity will start running with UNI 3.1 and learn the correct version through ILMI. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortSigIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortSigIlmi.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortSigIlmi.setDescription('This object is used to enable/disable ILMI. Exception: this field is read-only for 5782 Goldfish Module. That is, the user is not allowed to configure the port on this module.')
atmPortAdminFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortAdminFrameMode.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortAdminFrameMode.setDescription('When read, this object returns the configured atm frame mode. When set, only modes sonet and sdh are supported.')
atmPortSscopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortSscopStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortSscopStatus.setDescription("Indicates the operational status of the service specific connection-oriented protocol ( SSCOP ). SSCOP's function is to correct transmission errors or losses by selectively retransmitting the missing frames. down - Indicates that the peer protocol has failed to respond to the max number of status polls by its peer. up - Indicates the peer protocol is responding to the status polls. other - is an undetermined state of the SSCOP peer protocol.")
atmPortStatusEnquiryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 18), EnableIndicator().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortStatusEnquiryEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortStatusEnquiryEnable.setDescription('This object is used to enable or disable the Status enquiry for this logical link. The default value for this object is enabled except for the UNI links. Note that this parameter is used only if the ATM signalling is enabled.')
atmPortTimerT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 19), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortTimerT309.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortTimerT309.setDescription(' Timer value of timer T309.T309 is a SAAL disconnect timer. The T309 timer is started when SAAL disconnect is sent and it is stopped when SAAL disconnect is sent. When the timer is expired internal connection will be cleared and virtual calls will be released.')
atmPortTrafficShapingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortTrafficShapingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortTrafficShapingEnable.setDescription(' This field indicates if traffic shaping for the ATM port is enabled or disabled. When traffic shaping is disabled, the port operates at full wire rate. When traffic shaping is enabled, the port will operate at the configured rate or available pacing rate.')
atmSysSigEnable = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSysSigEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmSysSigEnable.setDescription('This object is used to enable or disable the ATM signalling task within the switch. Note that by disabling the ATM signalling, the switch will not be able to support any ATM applications such as the LAN Emulation Client. The default of this value is disable.')
atmMaxPortLogConfig = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmMaxPortLogConfig.setStatus('mandatory')
if mibBuilder.loadTexts: atmMaxPortLogConfig.setDescription('The maximum number of logical links in the atmPortLogConfigTable.')
atmCurPortLogConfig = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCurPortLogConfig.setStatus('mandatory')
if mibBuilder.loadTexts: atmCurPortLogConfig.setDescription('The current number of logical links in the atmPortLogConfigTable.')
atmPortLogConfigTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3), )
if mibBuilder.loadTexts: atmPortLogConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigTable.setDescription('ATM Logical link Configuration Table.')
atmPortLogConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1), ).setIndexNames((0, "CENTILLION-ATMCFG-MIB", "atmPortLogConfigCardIndex"), (0, "CENTILLION-ATMCFG-MIB", "atmPortLogConfigPortIndex"), (0, "CENTILLION-ATMCFG-MIB", "atmPortLogConfigVPI"))
if mibBuilder.loadTexts: atmPortLogConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigEntry.setDescription('ATM logical link configuration table. Each entry is indexed by three fields: The card index, port index and the VPI.')
atmPortLogConfigCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortLogConfigCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigCardIndex.setDescription('This field indicates the ATM card id.')
atmPortLogConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortLogConfigPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigPortIndex.setDescription('This field indicates ATM port id.')
atmPortLogConfigVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortLogConfigVPI.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigVPI.setDescription('This field indicates ATM virtual path identifier.')
atmPortLogConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("add", 3), ("modify", 4), ("remove", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLogConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigStatus.setDescription('This object is used to add, modify or delete a logical link. A value of other(1) will be returned for read operations on logical links. The value add(3) is written when setting up a new link and modify(4) is used for modifying an existing link. The value remove(5) is used to release the link.')
atmPortLogConfigSigEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSig", 1), ("uni", 2), ("iisp", 3), ("pnni", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLogConfigSigEntityType.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigSigEntityType.setDescription('This object indicates the type of the signaling entity associated with this ATM port. The type of a signaling can either be no signaling, User-Network Interface, uni(2), Interim Interswitch Signaling Protocol, iisp(3) or Private Network-Network Interface, pnni(4).')
atmPortLogConfigSigEntityRole = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("user", 2), ("netw", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLogConfigSigEntityRole.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigSigEntityRole.setDescription('This object indicates the role of the signaling entity that is associated with this ATM logical port. This object can only be set to user(2) or netw(3). A value of other(1) is returned when neither user(2) or netw(3) has been specified.')
atmPortLogConfigSigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("uni30", 3), ("uni31", 4), ("pnni10", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLogConfigSigVersion.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigSigVersion.setDescription('This object indicates the version of the signaling entity that is associated with this ATM port. When atmPortLogConfigSigEntityType is set to pnni(4), the signaling entity cannot be set to uni30(3) or uni31(4); It can be set to pnni10(5) or auto(2). When this object is set to auto(2), the signaling entity will start running with UNI 3.1 and learn the correct version through ILMI.')
atmPortLogConfigSigIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLogConfigSigIlmi.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigSigIlmi.setDescription('This object is used to enable or disable ILMI. When atmPortLogConfigSigEntityType is set to uni(2) and atmPortLogConfigSigVersion is set to auto(2), this object must be set to enabled(1). When atmPortLogConfigSigEntityType is set to iisp(3), this object must be set to disabled(2).')
atmPortLogConfigAdmWeightCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 9), Integer32().clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLogConfigAdmWeightCbr.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigAdmWeightCbr.setDescription('The Administrative weight of this VP for the constant bit rate service category. A value of zero is returned if the link is non-PNNI.')
atmPortLogConfigAdmWeightUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 10), Integer32().clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLogConfigAdmWeightUbr.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigAdmWeightUbr.setDescription('The Administrative weight of this VP for the unspecified bit rate service category. A value of zero is returned if the link is non-PNNI.')
atmPortLogConfigStatusEnquiryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 11), EnableIndicator().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLogConfigStatusEnquiryEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigStatusEnquiryEnable.setDescription('This object is used to enable or disable the Status enquiry. Note that this parametwer is used only if the ATM signalling is enabled.')
atmPortLogConfigTimerT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 1, 5, 3, 1, 12), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLogConfigTimerT309.setStatus('mandatory')
if mibBuilder.loadTexts: atmPortLogConfigTimerT309.setDescription(' Timer value of timer T309.T309 is a SAAL disconnect timer. The T309 timer is started when SAAL disconnect is sent and it is stopped when SAAL disconnect is sent. When the timer is expired internal connection will be cleared and virtual calls will be released.')
mibBuilder.exportSymbols("CENTILLION-ATMCFG-MIB", atmPktCktEnable=atmPktCktEnable, atmPortScramblingEnable=atmPortScramblingEnable, atmPortLogConfigTable=atmPortLogConfigTable, atmCellCktIndex=atmCellCktIndex, atmPktCktIndex=atmPktCktIndex, atmCellCktPriority=atmCellCktPriority, atmCellCktType=atmCellCktType, atmPortForceHecErrorEnable=atmPortForceHecErrorEnable, atmPktCktVci=atmPktCktVci, atmPortLogConfigSigVersion=atmPortLogConfigSigVersion, atmCellCktEntry=atmCellCktEntry, atmCellCktNumEndpt=atmCellCktNumEndpt, atmPortTrafficShapingEnable=atmPortTrafficShapingEnable, atmPortHecCosetEnable=atmPortHecCosetEnable, atmElanConfig=atmElanConfig, atmSysSigEnable=atmSysSigEnable, atmElanVirtualSegmentType=atmElanVirtualSegmentType, atmPortSigEntityType=atmPortSigEntityType, atmPortLocalLoopEnable=atmPortLocalLoopEnable, atmPortRemoteLoopEnable=atmPortRemoteLoopEnable, atmElanEnable=atmElanEnable, atmElanVirtualCard=atmElanVirtualCard, atmCellCktEnable=atmCellCktEnable, atmPortLogConfigVPI=atmPortLogConfigVPI, atmPortLogConfigAdmWeightCbr=atmPortLogConfigAdmWeightCbr, atmCurPortLogConfig=atmCurPortLogConfig, atmElanVirtualSegmentId=atmElanVirtualSegmentId, atmPortLogConfigSigIlmi=atmPortLogConfigSigIlmi, atmElanConfigTable=atmElanConfigTable, atmPortStatusEnquiryEnable=atmPortStatusEnquiryEnable, atmPktCktPriority=atmPktCktPriority, atmPortSigVersion=atmPortSigVersion, atmPortLogConfigPortIndex=atmPortLogConfigPortIndex, atmElanBridgeGroupId=atmElanBridgeGroupId, atmPktCktVpi=atmPktCktVpi, atmPortConfig=atmPortConfig, atmPktCktCardPort=atmPktCktCardPort, atmPortConfigTable=atmPortConfigTable, atmElanIndex=atmElanIndex, atmPortLogConfigSigEntityType=atmPortLogConfigSigEntityType, atmPktCktStatus=atmPktCktStatus, atmPktCktElanIndex=atmPktCktElanIndex, atmPortPortIndex=atmPortPortIndex, atmElanAllCkts=atmElanAllCkts, atmElanType=atmElanType, atmPortLogConfigCardIndex=atmPortLogConfigCardIndex, atmElanStatus=atmElanStatus, atmPortLogConfig=atmPortLogConfig, atmPortLoopTimingEnable=atmPortLoopTimingEnable, atmCellCktStatus=atmCellCktStatus, atmPktCktCardPort2=atmPktCktCardPort2, atmPktCktTable=atmPktCktTable, atmPortTimerT309=atmPortTimerT309, atmPortLogConfigAdmWeightUbr=atmPortLogConfigAdmWeightUbr, atmPortLogConfigSigEntityRole=atmPortLogConfigSigEntityRole, atmPortConfigEntry=atmPortConfigEntry, atmSysConfig=atmSysConfig, atmPortLogConfigEntry=atmPortLogConfigEntry, atmMaxPortLogConfig=atmMaxPortLogConfig, atmPktCktType=atmPktCktType, atmPortAdminFrameMode=atmPortAdminFrameMode, atmPortHardwareFrameMode=atmPortHardwareFrameMode, atmPortCardIndex=atmPortCardIndex, atmElanConfigEntry=atmElanConfigEntry, atmPortLogConfigTimerT309=atmPortLogConfigTimerT309, atmCellCktEndptList=atmCellCktEndptList, atmCktTable=atmCktTable, atmElanVcBridgingEnable=atmElanVcBridgingEnable, atmPortEnable=atmPortEnable, atmPortSigIlmi=atmPortSigIlmi, atmPortLogConfigStatusEnquiryEnable=atmPortLogConfigStatusEnquiryEnable, atmElanVirtualPort=atmElanVirtualPort, atmPortLogConfigStatus=atmPortLogConfigStatus, atmElanMaxUnknownFrameCount=atmElanMaxUnknownFrameCount, atmPktCktCost=atmPktCktCost, atmPortHecCorrectionEnable=atmPortHecCorrectionEnable, atmPktCktEntry=atmPktCktEntry, atmPortSigEntityRole=atmPortSigEntityRole, atmPortSscopStatus=atmPortSscopStatus, atmElanMaxUnknownFrameTime=atmElanMaxUnknownFrameTime, atmCellCktTable=atmCellCktTable)
