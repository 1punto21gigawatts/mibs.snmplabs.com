#
# PySNMP MIB module APPIAN-PPORT-DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-DS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
AcPortNumber, AcOpStatus, AcAdminStatus, AcSlotNumber, acPport, AcNodeId = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcPortNumber", "AcOpStatus", "AcAdminStatus", "AcSlotNumber", "acPport", "AcNodeId")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
PerfIntervalCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter64, ModuleIdentity, NotificationType, Integer32, Gauge32, Bits, Counter32, Unsigned32, TimeTicks, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "ModuleIdentity", "NotificationType", "Integer32", "Gauge32", "Bits", "Counter32", "Unsigned32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, TimeStamp, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString", "TruthValue")
acDs1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4))
if mibBuilder.loadTexts: acDs1.setLastUpdated('0009070000Z')
if mibBuilder.loadTexts: acDs1.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acDs1.setContactInfo('Rick Koch')
if mibBuilder.loadTexts: acDs1.setDescription('The MIB module to describe the Appian DS1 interfaces objects. The tables for this DS1 are NOT SHARED between OSAPs.')
acDs1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1), )
if mibBuilder.loadTexts: acDs1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigTable.setDescription('The DS1 Configuration table. This table is created by the EMS/CLI.')
acDs1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigEntry.setDescription('An entry in the DS1 Configuration table.')
acDs1ConfigNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ConfigNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs1ConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ConfigSlot.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigSlot.setDescription(' The physical slot number of the port.')
acDs1ConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ConfigPort.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigPort.setDescription(' The physical port number of the port')
acDs1ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigAdminStatus.setDescription('Appian Administrative Status attribute used to set the provisioning state as either activate(1), delete(2) or inactivate(3). Refer to the Appian-SMI.mib file for additional information.')
acDs1ConfigOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 5), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigOpStatus.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigOpStatus.setDescription('The operational or actual state of this ds1.')
acDs1ConfigTimeElapsedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedInterval.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedInterval.setDescription("The number of seconds that have elapsed since the beginning of the near end current error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
acDs1ConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigValidIntervals.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigValidIntervals.setDescription('The number of previous near end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acDs1ConfigTimeElapsedDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedDay.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedDay.setDescription("The number of seconds that have elapsed since the beginning of the near end current day error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current day interval exceeds the maximum value, the agent will return the maximum value.")
acDs1ConfigValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigValidDays.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigValidDays.setDescription('The number of previous near end days for which data was collected. The value will be 30 unless the interface was brought online within the last 30 days, in which case the value will be the number of complete 24 hr near end days since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acDs1ConfigTimeElapsedFarEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedFarEndInterval.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedFarEndInterval.setDescription("The number of seconds that have elapsed since the beginning of the far end current error-measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
acDs1ConfigValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigValidFarEndIntervals.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigValidFarEndIntervals.setDescription('The number of previous near end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acDs1ConfigTimeElapsedFarEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedFarEndDay.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedFarEndDay.setDescription("The number of seconds that have elapsed since the beginning of the far end current day error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current day interval exceeds the maximum value, the agent will return the maximum value.")
acDs1ConfigValidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigValidFarEndDays.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigValidFarEndDays.setDescription('The number of previous near end days for which data was collected. The value will be 30 unless the far/near end interface was brought online within the last 30 days, in which case the value will be the number of complete 24 hr far end days since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acDs1ConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2))).clone('esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigLineType.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigLineType.setDescription('This variable indicates the variety of DS1 Line implementing this circuit. The type of circuit affects the number of bits per second that the circuit can reasonably carry, as well as the interpretation of the usage and error statistics. The values, in sequence, describe: TITLE: SPECIFICATION: esf Extended SuperFrame DS1 (T1.107) d4 AT&T D4 format DS1 (T1.107)')
acDs1ConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2))).clone('b8zs')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigLineCoding.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigLineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on this interface, which in turn affects a number of its characteristics. b8zs refers to the use of a specified pattern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. ami refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density requirements, such as inverting HDLC data.')
acDs1ConfigCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigCircuitIdentifier.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigCircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
acDs1ConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("facility", 3), ("other", 4), ("terminal", 5), ("dual", 6))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigLoopbackConfig.setDescription("This variable represents the desired loopback configuration of the DS1 interface. Agents supporting read/write access should return inconsistentValue in response to a requested loopback state that the interface does not support. The values mean: none Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as its value. payload The received signal at this interface is looped through the device. Typically the received signal is looped back for retransmission after it has passed through the device's framing function. facility The received signal at this interface does not go through the device (minimum penetration) but is looped back out. other Loopbacks that are not defined here. terminal The transmitted signal at this interface is looped back and received by the same interface. What is transmitted onto the line is product dependent. dual Both acDs1LineLoop and acDs1InwardLoop will be active simultaneously. **NOADMINDOWN**")
acDs1ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigLineStatus.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigLineStatus.setDescription("This variable indicates the Line Status of the interface. It contains loopback, failure, received 'alarm' and transmitted 'alarms information. The acDs1ConfigLineStatus is a bit map represented as a sum, therefore, it can represent multiple failures (alarms) and a LoopbackState simultaneously. acDs1NoAlarm must be set if and only if no other flag is set. If the acDs1loopbackState bit is set, the loopback in effect can be determined from the acDs1loopbackConfig object. The various bit positions are: 1 acDs1NoAlarm No alarm present 2 acDs1RcvFarEndLOF Far end LOF (a.k.a., Yellow Alarm) 4 acDs1XmtFarEndLOF Near end sending LOF Indication 8 acDs1RcvAIS Far end sending AIS 16 acDs1XmtAIS Near end sending AIS 32 acDs1LossOfFrame Near end LOF (a.k.a., Red Alarm) 64 acDs1LossOfSignal Near end Loss Of Signal 128 acDs1LoopbackState Near end is looped 512 acDs1RcvFarEndLOMF Far End Sending TS16 LOMF 1024 acDs1XmtFarEndLOMF Near End Sending TS16 LOMF 2048 acDs1RcvTestCode Near End detects a test code 4096 acDs1RcvFarEndRAI any line status not defined here 8192 acDs1RcvFarEndUnEqp Far End sending VT 1.5 labelled UNEQUIPPED 16384 acDs1NetEquipOOS Carrier Equipment Out of Service")
acDs1ConfigSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("message", 2), ("other", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigSignalMode.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigSignalMode.setDescription("'none' indicates that no bits are reserved for signaling on this channel. 'message' indicates that Common Chan- nel Signaling is in use on channel 24 of a DS1.")
acDs1ConfigTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bits", 1), ("local", 2), ("through", 3))).clone('through')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTransmitClockSource.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigTransmitClockSource.setDescription("The source of Transmit Clock. 'bits' indicates that recovered receive clock through a bits device is used as the transmit clock. 'localTiming' indicates that a local clock source is used or when an external clock is attached to the box containing the interface. 'throughTiming' indicates that recovered re- ceive clock from another interface is used as the transmit clock.")
acDs1ConfigFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigFdl.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigFdl.setDescription("This bitmap describes the use of the facili- ties data link, and is the sum of the capabili- ties. Set any bits that are appropriate: other(1), ansi(2), att(4), none(8) 'other' indicates that a protocol other than one following is used. 'ansi' refers to the FDL exchange recommended by ANSI. 'att' refers to ESF FDL exchanges. 'none' indicates that the device does not use the FDL.")
acDs1ConfigInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigInvalidIntervals.setDescription('The number of intervals in the range from 0 to acDs1ValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acDs1ConfigInvalidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigInvalidDays.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigInvalidDays.setDescription('The number of days in the range from 0 to acDs1ConfigValidDays for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acDs1ConfigInvalidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigInvalidFarEndIntervals.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigInvalidFarEndIntervals.setDescription('The number of intervals in the range from 0 to acDs1ConfigValidFarEndIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acDs1ConfigInvalidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigInvalidFarEndDays.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigInvalidFarEndDays.setDescription('The number of days in the range from 0 to acDs1ConfigValidFarEndDays for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acDs1ConfigLineStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigLineStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigLineStatusLastChange.setDescription("The value of MIB II's sysUpTime object at the time this DS1 entered its current line status state. If the current state was entered prior to the last re-initialization of the proxy-agent, then this object contains a zero value.")
acDs1ConfigLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigLineStatusChangeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigLineStatusChangeTrapEnable.setDescription('Indicates whether acDs1ConfigLineStatusChange traps should be generated for this interface.')
acDs1ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigLoopbackStatus.setDescription('This variable represents the current state of the loopback on the DS1 interface. It contains information about loopbacks established by a manager and remotely from the far end. The acDs1ConfigLoopbackStatus is a bit map represented as a sum, therefore is can represent multiple loopbacks simultaneously. The various bit positions are: 1 acDs1NoLoopback 2 acDs1NearEndPayloadLoopback 4 acDs1NearEndLineLoopback 8 acDs1NearEndOtherLoopback 16 acDs1NearEndInwardLoopback 32 acDs1FarEndPayloadLoopback 64 acDs1FarEndLineLoopback')
acDs1ConfigInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('DS-1/TDM Interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigInterfaceName.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigInterfaceName.setDescription('A user configurable interface name which can be up to 64 bytes in length which uniquely identifies this DS1 interface.')
acDs1ConfigTimeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 30), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigTimeSlotIndex.setStatus('current')
if mibBuilder.loadTexts: acDs1ConfigTimeSlotIndex.setDescription('This index corresponds to the desired timeslot row in the Shared Timeslot Table with a payload type of ds1tdm.')
acDs1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2), )
if mibBuilder.loadTexts: acDs1IntervalTable.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalTable.setDescription('The Appian DS1 Interval Table contains various statistics collected by each DS1 Interface over the previous 24 hours of operation as well as over the current period. The past 24 hours are broken into 96 completed 15 minute intervals. The first row in this table (identified by acDs1IntervalNumber=1) represents the current interval statistics. The next 96 rows in this table (represented by acDs1IntervalNumber=2..97) represents one of the past 15 minute intervals. The final row (identified by acDs1IntervalNumber=98) is the total of all the past intervals (2..97). This table is created automatically.')
acDs1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1IntervalNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1IntervalSlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1IntervalPort"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1IntervalNumber"))
if mibBuilder.loadTexts: acDs1IntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalEntry.setDescription('An entry in the Appian DS1 Interval table.')
acDs1IntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1IntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs1IntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1IntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalSlot.setDescription('The physical slot number for this port.')
acDs1IntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1IntervalPort.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalPort.setDescription('The physical port number for this port.')
acDs1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1IntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalNumber.setDescription('A number between 1 and 98, where 1 is the current 15 minute interval in progress, 2 is the most recently completed 15 minute interval and 97 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 2, and 98 is the total (sum) of all of the previous completed intervals (2..97).')
acDs1IntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalValidStats.setDescription('This variable indicates if the data for this interval is valid. For acDs1IntervalNumber=98, this value will only be true if all data is valid for intervals 2..97.')
acDs1IntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1IntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalResetStats.setDescription('This variable allows the data for the current interval (acDs1IntervalNumber = 1) to be reset. The acDs1IntervalValidFlag will be set to False after the reset for the current interval. This field has no effect on acDs1IntervalNumber 2..98. This field will always show a value of False when read.')
acDs1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalESs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalESs.setDescription('The number of Errored Seconds.')
acDs1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalSESs.setDescription('The number of Severely Errored Seconds.')
acDs1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds.')
acDs1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalUASs.setDescription('The number of Unavailable Seconds. This object may decrease if the occurance of unavailable seconds occurs across an inteval boundary.')
acDs1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalCSSs.setDescription('The number of Controlled Slip Seconds.')
acDs1IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalPCVs.setDescription('The number of Path Coding Violations.')
acDs1IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalLESs.setDescription('The number of Line Errored Seconds.')
acDs1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalBESs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalBESs.setDescription('The number of Bursty Errored Seconds.')
acDs1IntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalDMs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalDMs.setDescription('The number of Degraded Minutes.')
acDs1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalLCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1IntervalLCVs.setDescription('The number of Line Code Violations.')
acDs1DayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3), )
if mibBuilder.loadTexts: acDs1DayTable.setStatus('current')
if mibBuilder.loadTexts: acDs1DayTable.setDescription('The Appian DS1 Day Table contains various statistics collected by each DS1 Interface over the previous 30 days of operation as well as over the current day period. The first row in this table (identified by acDs1DayNumber=1) represents the current day statistics. The next 30 rows in this table (represented by acDs1DayNumber=2..31) represents one of the past 24 hr periods (day). This table is created automatically.')
acDs1DayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1DayNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1DaySlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1DayPort"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1DayNumber"))
if mibBuilder.loadTexts: acDs1DayEntry.setStatus('current')
if mibBuilder.loadTexts: acDs1DayEntry.setDescription('An entry in the Appian DS1 Day table.')
acDs1DayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1DayNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs1DayNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs1DaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1DaySlot.setStatus('current')
if mibBuilder.loadTexts: acDs1DaySlot.setDescription('The physical slot number of the port.')
acDs1DayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1DayPort.setStatus('current')
if mibBuilder.loadTexts: acDs1DayPort.setDescription('The physical port number of the port.')
acDs1DayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1DayNumber.setStatus('current')
if mibBuilder.loadTexts: acDs1DayNumber.setDescription('A number between 1 and 31, where 1 is the current 24 hour interval in progress (day), 2 is the most recently completed 24 hour interval and 31 is the 24 hour interval completed 29 days prior to interval 1.')
acDs1DayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayValidStats.setStatus('current')
if mibBuilder.loadTexts: acDs1DayValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acDs1DayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1DayResetStats.setStatus('current')
if mibBuilder.loadTexts: acDs1DayResetStats.setDescription('This variable allows the data for the current day (acDs1DayIndex = 1) to be reset. The acDs1DayValidFlag will be set to False after the reset for the current day. This field has no effect on acDs1DayIndex 2..31. This field will always show a value of False when read.')
acDs1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayESs.setStatus('current')
if mibBuilder.loadTexts: acDs1DayESs.setDescription('The number of Errored Seconds.')
acDs1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DaySESs.setStatus('current')
if mibBuilder.loadTexts: acDs1DaySESs.setDescription('The number of Severely Errored Seconds.')
acDs1DaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs1DaySEFSs.setDescription('The number of Severely Errored Framing Seconds.')
acDs1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayUASs.setStatus('current')
if mibBuilder.loadTexts: acDs1DayUASs.setDescription('The number of Unavailable Seconds. This object may decrease if the occurance of unavailable seconds occurs across an inteval boundary.')
acDs1DayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayCSSs.setStatus('current')
if mibBuilder.loadTexts: acDs1DayCSSs.setDescription('The number of Controlled Slip Seconds.')
acDs1DayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1DayPCVs.setDescription('The number of Path Coding Violations.')
acDs1DayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayLESs.setStatus('current')
if mibBuilder.loadTexts: acDs1DayLESs.setDescription('The number of Line Errored Seconds.')
acDs1DayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayBESs.setStatus('current')
if mibBuilder.loadTexts: acDs1DayBESs.setDescription('The number of Bursty Errored Seconds.')
acDs1DayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayDMs.setStatus('current')
if mibBuilder.loadTexts: acDs1DayDMs.setDescription('The number of Degraded Minutes.')
acDs1DayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayLCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1DayLCVs.setDescription('The number of Line Code Violations.')
acDs1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4), )
if mibBuilder.loadTexts: acDs1FarEndIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalTable.setDescription('The DS1 Far End Interval Table contains various statistics collected by each DS1 interface over the previous 24 hours of operation. The past 24 hours are broken into 96 completed 15 minute intervals. Each row in this table represents one such interval (identified by acDs1FarEndIntervalNumber) for one specific instance (identified by acDs1FarEndIntervalSlot, acDs1FarEndIntervalPort). This table is created automatically.')
acDs1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndIntervalNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndIntervalSlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndIntervalPort"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndIntervalNumber"))
if mibBuilder.loadTexts: acDs1FarEndIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalEntry.setDescription('An entry in the DS1 Far End Interval table.')
acDs1FarEndIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs1FarEndIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndIntervalSlot.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalSlot.setDescription('The physical slot number of the port.')
acDs1FarEndIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndIntervalPort.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalPort.setDescription('The physical port number of the port.')
acDs1FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalNumber.setDescription('A number between 1 and 98, where 1 is current 15 minute interval in progress, 2 is the most recently completed 15 minute interval and 97 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 2, and 98 is the total of intervals 2..97 (sum).')
acDs1FarEndIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalValidStats.setDescription('This variable indicates if the data for this interval is valid. For acDs1FarEndIntervalNumber=98, this value will only be true if all data is valid for intervals 2..97.')
acDs1FarEndIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1FarEndIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalResetStats.setDescription('This variable allows the data for the current interval (acDs1FarEndIntervalNumber = 1) to be reset. The acDs1FarEndIntervalValidFlag will be set to False after the reset for the current interval. This field has no effect on acDs1FarEndIntervalNumber 2..98. This field will always show a value of false when read.')
acDs1FarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalESs.setDescription('The number of Far End Errored Seconds.')
acDs1FarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalSESs.setDescription('The number of Far End Severely Errored Seconds.')
acDs1FarEndIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalSEFSs.setDescription('The number of Far End Severely Errored Framing Seconds.')
acDs1FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalUASs.setDescription('The number of Unavailable Seconds.')
acDs1FarEndIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalCSSs.setDescription('The number of Far End Controlled Slip Seconds.')
acDs1FarEndIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalLESs.setDescription('The number of Far End Line Errored Seconds.')
acDs1FarEndIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalPCVs.setDescription('The number of Far End Path Coding Violations.')
acDs1FarEndIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalBESs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalBESs.setDescription('The number of Far End Bursty Errored Seconds.')
acDs1FarEndIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalDMs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndIntervalDMs.setDescription('The number of Far End Degraded Minutes.')
acDs1FarEndDayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5), )
if mibBuilder.loadTexts: acDs1FarEndDayTable.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayTable.setDescription('The DS1 Far End Day Table contains various statistics collected by each DS1 interface over the previous 30 days of operation. Each row in this table represents a one day interval (identified by acDs1FarEndDayNumber). This table is created automatically.')
acDs1FarEndDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndDayNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndDaySlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndDayPort"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndDayNumber"))
if mibBuilder.loadTexts: acDs1FarEndDayEntry.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayEntry.setDescription('An entry in the DS1 Far End Day table.')
acDs1FarEndDayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndDayNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs1FarEndDaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndDaySlot.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDaySlot.setDescription('The physical slot number of the port.')
acDs1FarEndDayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndDayPort.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayPort.setDescription('The physical port number of the port.')
acDs1FarEndDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndDayNumber.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayNumber.setDescription('A number between 1 and 31, where 1 is current 24 hour day interval in progress, 2 is the most recently completed 24 hour day interval and 31 is the 24 hour day interval completed 29 days prior to interval 2.')
acDs1FarEndDayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayValidStats.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acDs1FarEndDayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1FarEndDayResetStats.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayResetStats.setDescription('This variable allows the data for the current day (acDs1FarEndDayIndex = 1) to be reset. The acDs1FarEndDayValidFlag will be set to False after the reset for the current interval. This field has no effect on acDs1FarEndDayIndex 2..31. This field will always show a value of false when read.')
acDs1FarEndDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayESs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayESs.setDescription('The number of Far End Errored Seconds.')
acDs1FarEndDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDaySESs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDaySESs.setDescription('The number of Far End Severely Errored Seconds.')
acDs1FarEndDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDaySEFSs.setDescription('The number of Far End Severely Errored Framing Seconds.')
acDs1FarEndDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayUASs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayUASs.setDescription('The number of Unavailable Seconds.')
acDs1FarEndDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayCSSs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayCSSs.setDescription('The number of Far End Controlled Slip Seconds.')
acDs1FarEndDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayLESs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayLESs.setDescription('The number of Far End Line Errored Seconds.')
acDs1FarEndDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayPCVs.setDescription('The number of Far End Path Coding Violations.')
acDs1FarEndDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayBESs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayBESs.setDescription('The number of Far End Bursty Errored Seconds.')
acDs1FarEndDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayDMs.setStatus('current')
if mibBuilder.loadTexts: acDs1FarEndDayDMs.setDescription('The number of Far End Degraded Minutes.')
acDs1ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6), )
if mibBuilder.loadTexts: acDs1ThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdTable.setDescription('The Appian DS1 Threshold Table allows the user to configure the threshold values for each of the statistics found in the interval table base on the 15 minute interval on the day. This table is created automatically.')
acDs1ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdEntry.setDescription('An entry in the Appian DS1 Threshold table.')
acDs1ThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDs1ThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ThresholdSlot.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdSlot.setDescription('The physical slot number of the port.')
acDs1ThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ThresholdPort.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdPort.setDescription('The physical port number of the port.')
acDs1ThresholdNEIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalESs.setDescription('The threshold value for interval number of Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalSESs.setDescription('The threshold value for the interval number of Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalSEFSs.setDescription('The threshold for the interval number of Severely Errored Framing Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalUASs.setDescription('The threshold for the interval number of Unavailable Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalCSSs.setDescription('The threshold for the interval number of Controlled Slip Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalPCVs.setDescription('The threshold for the interval number of Path Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalLESs.setDescription('The threshold value for the interval number of Line Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalBESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalBESs.setDescription('The threshold for the interval number of Bursty Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalDMs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalDMs.setDescription('The threshold for the interval number of Degraded Minutes. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalLCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalLCVs.setDescription('The threshold for the interval number of Line Code Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDayESs.setDescription('The threshold value for day number of Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDaySESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDaySESs.setDescription('The threshold for the day number of Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDaySEFSs.setDescription('The threshold value for the day number of Severely Errored Framing Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayUASs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDayUASs.setDescription('The threshold value for the day number of Unavailable Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayCSSs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDayCSSs.setDescription('The threshold for the day number of Controlled Slip Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDayPCVs.setDescription('The threshold value for the day number of Path Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayLESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDayLESs.setDescription('The threshold for the day number of Line Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayBESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDayBESs.setDescription('The threshold for the day number of Bursty Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayDMs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDayDMs.setDescription('The threshold for the day number of Degraded Minutes. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdNEDayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayLCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdNEDayLCVs.setDescription('The threshold for the day number of Line Code Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalESs.setDescription('The threshold for the far end interval number of Far End Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalSESs.setDescription('The threshold for the far end interval number of Far End Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalSEFSs.setDescription('The threshold for the far end interval number of Far End Severely Errored Framing Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalUASs.setDescription('The threshold value for the far end interval number of Unavailable Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalCSSs.setDescription('The threshold value for the far end interval number of Far End Controlled Slip Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalLESs.setDescription('The threshold value for the far end interal number of Far End Line Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalPCVs.setDescription('The threshold for the far end internal number of Far End Path Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalBESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalBESs.setDescription('The threshold for the far end interval number of Far End Bursty Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalDMs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalDMs.setDescription('The threshold for the far end interval number of Far End Degraded Minutes. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEDayESs.setDescription('The threshold for the far end day number of Far End Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDaySESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEDaySESs.setDescription('The threshold for the far end day number of Far End Severely Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEDaySEFSs.setDescription('The threshold for the far end day number of Far End Severely Errored Framing Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayUASs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEDayUASs.setDescription('The threshold value for the far end day number of Unavailable Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayCSSs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEDayCSSs.setDescription('The threshold value for the far end day number of Far End Controlled Slip Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayLESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEDayLESs.setDescription('The threshold value for the far end interal number of Far End Line Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayPCVs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEDayPCVs.setDescription('The threshold for the far end internal number of Far End Path Coding Violations. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayBESs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEDayBESs.setDescription('The threshold for the far end day number of Far End Bursty Errored Seconds. A value of 0 disables the threshold mechanism for this attribute.')
acDs1ThresholdFEDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayDMs.setStatus('current')
if mibBuilder.loadTexts: acDs1ThresholdFEDayDMs.setDescription('The threshold for the far end day number of Far End Degraded Minutes. A value of 0 disables the threshold mechanism for this attribute.')
acDs1Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0))
acDs1LineStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigLineStatus"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigLineStatusLastChange"))
if mibBuilder.loadTexts: acDs1LineStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1LineStatusChangeTrap.setDescription('An acLogcialDs1LineStatusChange trap is sent when the value of an instance acDs1ConfigLineStatus changes. It can be utilized by an NMS to trigger polls.')
acDs1StatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1StatsResetTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1StatsResetTrap.setDescription('The Ds1 statistics for this interface have been reset to zero (0) which may effect long term trending functions monitoring this interface.')
acDs1CfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1CfgErrorTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1CfgErrorTrap.setDescription('A configuration request to the Ds1 configuration table for an interface has been detected as invalid or corrupt.')
acDs1LinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1LinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1LinkDownTrap.setDescription('The link for this physical ds1 interface has obtained sync.')
acDs1LinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1LinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1LinkUpTrap.setDescription('The link for this physical ds1 interface has been lost.')
acDs1ExceededThresholdNEIntervalESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 7)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEIntervalSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 8)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalSESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 9)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalSEFSsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalSEFSsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 10)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalUASsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEIntervalCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 11)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalCSSsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalCSSsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 12)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalPCVsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 13)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalLESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEIntervalBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 14)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalBESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalBESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEIntervalDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 15)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalDMsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalDMsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEIntervalLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 16)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalLCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalLCVsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDayESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 17)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDaySESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 18)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDaySESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDaySESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDaySEFSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 19)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDaySEFSTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDaySEFSTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 20)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayUASsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDayCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 21)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayCSSsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayCSSsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 22)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayPCVsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 23)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayLESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDayBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 24)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayBESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayBESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDayDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 25)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayDMsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayDMsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdNEDayLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 26)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayLCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayLCVsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEIntervalESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 27)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEIntervalSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 28)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalSESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 29)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalSEFSsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalSEFSsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 30)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalUASsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEIntervalCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 31)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalCSSsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalCSSsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 32)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalLESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 33)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalPCVsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEIntervalBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 34)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalBESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalBESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEIntervalDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 35)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalDMsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalDMsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEDayESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 36)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEDaySESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 37)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDaySESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDaySESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEDaySEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 38)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDaySEFSsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDaySEFSsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 39)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayUASsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEDayCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 40)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayCSSsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayCSSsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 41)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayLESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 42)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayPCVsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEDayBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 43)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayBESsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayBESsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
acDs1ExceededThresholdFEDayDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 44)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayDMsTrap.setStatus('current')
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayDMsTrap.setDescription('The threshold value speficed has been exceeded for this interface.')
mibBuilder.exportSymbols("APPIAN-PPORT-DS1-MIB", acDs1IntervalPort=acDs1IntervalPort, acDs1ExceededThresholdFEDaySESsTrap=acDs1ExceededThresholdFEDaySESsTrap, acDs1ExceededThresholdFEDayCSSsTrap=acDs1ExceededThresholdFEDayCSSsTrap, acDs1ExceededThresholdFEDayUASsTrap=acDs1ExceededThresholdFEDayUASsTrap, acDs1FarEndIntervalResetStats=acDs1FarEndIntervalResetStats, acDs1ExceededThresholdFEIntervalCSSsTrap=acDs1ExceededThresholdFEIntervalCSSsTrap, acDs1ExceededThresholdFEDayLESsTrap=acDs1ExceededThresholdFEDayLESsTrap, acDs1FarEndDayDMs=acDs1FarEndDayDMs, acDs1Traps=acDs1Traps, acDs1FarEndIntervalSlot=acDs1FarEndIntervalSlot, acDs1ExceededThresholdNEIntervalLCVsTrap=acDs1ExceededThresholdNEIntervalLCVsTrap, acDs1ExceededThresholdNEDayESsTrap=acDs1ExceededThresholdNEDayESsTrap, acDs1ThresholdFEIntervalDMs=acDs1ThresholdFEIntervalDMs, acDs1ThresholdFEDayLESs=acDs1ThresholdFEDayLESs, acDs1ConfigEntry=acDs1ConfigEntry, acDs1ConfigAdminStatus=acDs1ConfigAdminStatus, acDs1DayPCVs=acDs1DayPCVs, acDs1FarEndDayNumber=acDs1FarEndDayNumber, acDs1ExceededThresholdNEDayDMsTrap=acDs1ExceededThresholdNEDayDMsTrap, acDs1ThresholdNEDayPCVs=acDs1ThresholdNEDayPCVs, acDs1ExceededThresholdNEDayLESsTrap=acDs1ExceededThresholdNEDayLESsTrap, acDs1ThresholdNEIntervalSESs=acDs1ThresholdNEIntervalSESs, acDs1IntervalCSSs=acDs1IntervalCSSs, acDs1ThresholdFEDayDMs=acDs1ThresholdFEDayDMs, acDs1ConfigSignalMode=acDs1ConfigSignalMode, acDs1LinkDownTrap=acDs1LinkDownTrap, acDs1ConfigFdl=acDs1ConfigFdl, acDs1ThresholdNEDaySEFSs=acDs1ThresholdNEDaySEFSs, acDs1ExceededThresholdFEDayESsTrap=acDs1ExceededThresholdFEDayESsTrap, acDs1ConfigNodeId=acDs1ConfigNodeId, acDs1ThresholdNEDayDMs=acDs1ThresholdNEDayDMs, acDs1IntervalSlot=acDs1IntervalSlot, acDs1DayEntry=acDs1DayEntry, acDs1ExceededThresholdFEIntervalLESsTrap=acDs1ExceededThresholdFEIntervalLESsTrap, acDs1ThresholdNEIntervalSEFSs=acDs1ThresholdNEIntervalSEFSs, acDs1FarEndIntervalBESs=acDs1FarEndIntervalBESs, acDs1ThresholdNEDayLCVs=acDs1ThresholdNEDayLCVs, acDs1FarEndIntervalNodeId=acDs1FarEndIntervalNodeId, acDs1IntervalEntry=acDs1IntervalEntry, acDs1FarEndIntervalPCVs=acDs1FarEndIntervalPCVs, acDs1FarEndDayLESs=acDs1FarEndDayLESs, acDs1ExceededThresholdFEIntervalBESsTrap=acDs1ExceededThresholdFEIntervalBESsTrap, acDs1ExceededThresholdNEIntervalDMsTrap=acDs1ExceededThresholdNEIntervalDMsTrap, acDs1ConfigTimeElapsedDay=acDs1ConfigTimeElapsedDay, acDs1ExceededThresholdFEDaySEFSsTrap=acDs1ExceededThresholdFEDaySEFSsTrap, acDs1ExceededThresholdNEDayUASsTrap=acDs1ExceededThresholdNEDayUASsTrap, acDs1ExceededThresholdNEIntervalESsTrap=acDs1ExceededThresholdNEIntervalESsTrap, acDs1FarEndDayTable=acDs1FarEndDayTable, acDs1IntervalESs=acDs1IntervalESs, acDs1ThresholdPort=acDs1ThresholdPort, acDs1ThresholdFEIntervalSEFSs=acDs1ThresholdFEIntervalSEFSs, acDs1IntervalLESs=acDs1IntervalLESs, acDs1ConfigLineType=acDs1ConfigLineType, acDs1DayPort=acDs1DayPort, acDs1ThresholdNEIntervalESs=acDs1ThresholdNEIntervalESs, acDs1IntervalPCVs=acDs1IntervalPCVs, acDs1ThresholdFEDayESs=acDs1ThresholdFEDayESs, acDs1ExceededThresholdFEIntervalSESsTrap=acDs1ExceededThresholdFEIntervalSESsTrap, acDs1DayNumber=acDs1DayNumber, acDs1DayUASs=acDs1DayUASs, acDs1DayCSSs=acDs1DayCSSs, acDs1ConfigLoopbackStatus=acDs1ConfigLoopbackStatus, acDs1ThresholdFEIntervalLESs=acDs1ThresholdFEIntervalLESs, acDs1ExceededThresholdNEIntervalUASsTrap=acDs1ExceededThresholdNEIntervalUASsTrap, acDs1FarEndIntervalTable=acDs1FarEndIntervalTable, acDs1ThresholdFEDayPCVs=acDs1ThresholdFEDayPCVs, acDs1IntervalNumber=acDs1IntervalNumber, acDs1IntervalValidStats=acDs1IntervalValidStats, acDs1ThresholdNEDayUASs=acDs1ThresholdNEDayUASs, acDs1IntervalNodeId=acDs1IntervalNodeId, acDs1FarEndDayPCVs=acDs1FarEndDayPCVs, acDs1FarEndDaySEFSs=acDs1FarEndDaySEFSs, acDs1FarEndIntervalNumber=acDs1FarEndIntervalNumber, acDs1IntervalTable=acDs1IntervalTable, acDs1ConfigTimeSlotIndex=acDs1ConfigTimeSlotIndex, acDs1IntervalDMs=acDs1IntervalDMs, acDs1DayLESs=acDs1DayLESs, acDs1ExceededThresholdNEIntervalSESsTrap=acDs1ExceededThresholdNEIntervalSESsTrap, acDs1ThresholdFEIntervalBESs=acDs1ThresholdFEIntervalBESs, acDs1ConfigValidIntervals=acDs1ConfigValidIntervals, acDs1ConfigValidFarEndIntervals=acDs1ConfigValidFarEndIntervals, acDs1ExceededThresholdNEDaySEFSTrap=acDs1ExceededThresholdNEDaySEFSTrap, acDs1ExceededThresholdFEIntervalDMsTrap=acDs1ExceededThresholdFEIntervalDMsTrap, acDs1ExceededThresholdNEIntervalCSSsTrap=acDs1ExceededThresholdNEIntervalCSSsTrap, acDs1FarEndIntervalEntry=acDs1FarEndIntervalEntry, acDs1ExceededThresholdNEDaySESsTrap=acDs1ExceededThresholdNEDaySESsTrap, acDs1FarEndIntervalPort=acDs1FarEndIntervalPort, acDs1DayValidStats=acDs1DayValidStats, acDs1ConfigLineStatus=acDs1ConfigLineStatus, acDs1DayResetStats=acDs1DayResetStats, acDs1IntervalSEFSs=acDs1IntervalSEFSs, acDs1DayNodeId=acDs1DayNodeId, acDs1ThresholdNEDayBESs=acDs1ThresholdNEDayBESs, acDs1FarEndDaySlot=acDs1FarEndDaySlot, acDs1ExceededThresholdNEIntervalSEFSsTrap=acDs1ExceededThresholdNEIntervalSEFSsTrap, acDs1ThresholdNEIntervalPCVs=acDs1ThresholdNEIntervalPCVs, acDs1ConfigValidFarEndDays=acDs1ConfigValidFarEndDays, acDs1=acDs1, acDs1ConfigInvalidDays=acDs1ConfigInvalidDays, acDs1ConfigTimeElapsedFarEndInterval=acDs1ConfigTimeElapsedFarEndInterval, acDs1FarEndDayEntry=acDs1FarEndDayEntry, acDs1ConfigPort=acDs1ConfigPort, acDs1FarEndDayCSSs=acDs1FarEndDayCSSs, acDs1ThresholdFEIntervalCSSs=acDs1ThresholdFEIntervalCSSs, acDs1DaySEFSs=acDs1DaySEFSs, acDs1FarEndDayBESs=acDs1FarEndDayBESs, acDs1IntervalBESs=acDs1IntervalBESs, acDs1ConfigOpStatus=acDs1ConfigOpStatus, acDs1ConfigLoopbackConfig=acDs1ConfigLoopbackConfig, acDs1DayESs=acDs1DayESs, acDs1ConfigInvalidFarEndIntervals=acDs1ConfigInvalidFarEndIntervals, acDs1ThresholdNEIntervalUASs=acDs1ThresholdNEIntervalUASs, acDs1ConfigSlot=acDs1ConfigSlot, acDs1ConfigCircuitIdentifier=acDs1ConfigCircuitIdentifier, acDs1ThresholdFEDayBESs=acDs1ThresholdFEDayBESs, acDs1IntervalResetStats=acDs1IntervalResetStats, acDs1ThresholdNEIntervalBESs=acDs1ThresholdNEIntervalBESs, PYSNMP_MODULE_ID=acDs1, acDs1ExceededThresholdNEIntervalBESsTrap=acDs1ExceededThresholdNEIntervalBESsTrap, acDs1ExceededThresholdFEIntervalESsTrap=acDs1ExceededThresholdFEIntervalESsTrap, acDs1ThresholdFEIntervalSESs=acDs1ThresholdFEIntervalSESs, acDs1ConfigLineCoding=acDs1ConfigLineCoding, acDs1FarEndDayNodeId=acDs1FarEndDayNodeId, acDs1IntervalLCVs=acDs1IntervalLCVs, acDs1DayTable=acDs1DayTable, acDs1ConfigTransmitClockSource=acDs1ConfigTransmitClockSource, acDs1DaySESs=acDs1DaySESs, acDs1IntervalUASs=acDs1IntervalUASs, acDs1ThresholdNEDaySESs=acDs1ThresholdNEDaySESs, acDs1FarEndDayResetStats=acDs1FarEndDayResetStats, acDs1ExceededThresholdFEIntervalPCVsTrap=acDs1ExceededThresholdFEIntervalPCVsTrap, acDs1FarEndDayValidStats=acDs1FarEndDayValidStats, acDs1FarEndIntervalUASs=acDs1FarEndIntervalUASs, acDs1ThresholdNEIntervalLCVs=acDs1ThresholdNEIntervalLCVs, acDs1StatsResetTrap=acDs1StatsResetTrap, acDs1ExceededThresholdNEDayPCVsTrap=acDs1ExceededThresholdNEDayPCVsTrap, acDs1LineStatusChangeTrap=acDs1LineStatusChangeTrap, acDs1FarEndIntervalSESs=acDs1FarEndIntervalSESs, acDs1FarEndDayPort=acDs1FarEndDayPort, acDs1ThresholdFEIntervalESs=acDs1ThresholdFEIntervalESs, acDs1FarEndDayUASs=acDs1FarEndDayUASs, acDs1ThresholdNodeId=acDs1ThresholdNodeId, acDs1LinkUpTrap=acDs1LinkUpTrap, acDs1ThresholdFEIntervalPCVs=acDs1ThresholdFEIntervalPCVs, acDs1ExceededThresholdFEDayPCVsTrap=acDs1ExceededThresholdFEDayPCVsTrap, acDs1ExceededThresholdFEIntervalSEFSsTrap=acDs1ExceededThresholdFEIntervalSEFSsTrap, acDs1FarEndIntervalSEFSs=acDs1FarEndIntervalSEFSs, acDs1FarEndDaySESs=acDs1FarEndDaySESs, acDs1DaySlot=acDs1DaySlot, acDs1ThresholdFEDaySEFSs=acDs1ThresholdFEDaySEFSs, acDs1ConfigValidDays=acDs1ConfigValidDays, acDs1ConfigTimeElapsedFarEndDay=acDs1ConfigTimeElapsedFarEndDay, acDs1ThresholdNEDayCSSs=acDs1ThresholdNEDayCSSs, acDs1ConfigInvalidFarEndDays=acDs1ConfigInvalidFarEndDays, acDs1ThresholdSlot=acDs1ThresholdSlot, acDs1ThresholdFEDayUASs=acDs1ThresholdFEDayUASs, acDs1CfgErrorTrap=acDs1CfgErrorTrap, acDs1ExceededThresholdFEDayBESsTrap=acDs1ExceededThresholdFEDayBESsTrap, acDs1ExceededThresholdNEDayLCVsTrap=acDs1ExceededThresholdNEDayLCVsTrap, acDs1ExceededThresholdFEIntervalUASsTrap=acDs1ExceededThresholdFEIntervalUASsTrap, acDs1ThresholdEntry=acDs1ThresholdEntry, acDs1ThresholdNEIntervalDMs=acDs1ThresholdNEIntervalDMs, acDs1ThresholdFEDaySESs=acDs1ThresholdFEDaySESs, acDs1ConfigLineStatusLastChange=acDs1ConfigLineStatusLastChange, acDs1FarEndIntervalESs=acDs1FarEndIntervalESs, acDs1ThresholdFEIntervalUASs=acDs1ThresholdFEIntervalUASs, acDs1ExceededThresholdNEIntervalLESsTrap=acDs1ExceededThresholdNEIntervalLESsTrap, acDs1ConfigTable=acDs1ConfigTable, acDs1ExceededThresholdNEDayCSSsTrap=acDs1ExceededThresholdNEDayCSSsTrap, acDs1ConfigTimeElapsedInterval=acDs1ConfigTimeElapsedInterval, acDs1ThresholdFEDayCSSs=acDs1ThresholdFEDayCSSs, acDs1FarEndIntervalCSSs=acDs1FarEndIntervalCSSs, acDs1IntervalSESs=acDs1IntervalSESs, acDs1FarEndDayESs=acDs1FarEndDayESs, acDs1ThresholdNEIntervalCSSs=acDs1ThresholdNEIntervalCSSs, acDs1FarEndIntervalLESs=acDs1FarEndIntervalLESs, acDs1ExceededThresholdNEDayBESsTrap=acDs1ExceededThresholdNEDayBESsTrap, acDs1FarEndIntervalValidStats=acDs1FarEndIntervalValidStats, acDs1DayDMs=acDs1DayDMs, acDs1ExceededThresholdFEDayDMsTrap=acDs1ExceededThresholdFEDayDMsTrap, acDs1ThresholdTable=acDs1ThresholdTable, acDs1DayLCVs=acDs1DayLCVs, acDs1ConfigInvalidIntervals=acDs1ConfigInvalidIntervals, acDs1ThresholdNEDayLESs=acDs1ThresholdNEDayLESs, acDs1ExceededThresholdNEIntervalPCVsTrap=acDs1ExceededThresholdNEIntervalPCVsTrap, acDs1DayBESs=acDs1DayBESs, acDs1ConfigInterfaceName=acDs1ConfigInterfaceName, acDs1ThresholdNEIntervalLESs=acDs1ThresholdNEIntervalLESs, acDs1ConfigLineStatusChangeTrapEnable=acDs1ConfigLineStatusChangeTrapEnable, acDs1FarEndIntervalDMs=acDs1FarEndIntervalDMs, acDs1ThresholdNEDayESs=acDs1ThresholdNEDayESs)
