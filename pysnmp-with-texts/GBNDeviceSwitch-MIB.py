#
# PySNMP MIB module GBNDeviceSwitch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GBNDeviceSwitch-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
gbnDevice, = mibBuilder.importSymbols("GREENTECH-MASTER-MIB", "gbnDevice")
PortList, VlanIndex, dot1qStaticMulticastEntry = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanIndex", "dot1qStaticMulticastEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, MibIdentifier, Bits, NotificationType, Integer32, IpAddress, iso, Counter64, ObjectIdentity, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "MibIdentifier", "Bits", "NotificationType", "Integer32", "IpAddress", "iso", "Counter64", "ObjectIdentity", "ModuleIdentity", "Gauge32")
TextualConvention, MacAddress, DateAndTime, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DateAndTime", "RowStatus", "TruthValue", "DisplayString")
gbnDeviceSwitch = ModuleIdentity((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1))
gbnDeviceSwitch.setRevisions(('1900-11-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gbnDeviceSwitch.setRevisionsDescriptions(('Initial MIB creation.',))
if mibBuilder.loadTexts: gbnDeviceSwitch.setLastUpdated('0011020000Z')
if mibBuilder.loadTexts: gbnDeviceSwitch.setOrganization('Greentech')
if mibBuilder.loadTexts: gbnDeviceSwitch.setContactInfo('Adam Armstrong E-mail: adama@observium.org')
if mibBuilder.loadTexts: gbnDeviceSwitch.setDescription('Gbn Common Enterprise MIB definition.')
gbnDeviceSwitchMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 1))
gbnDeviceSwitchPort = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2))
gbnDeviceSwitchAggregation = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3))
gbnDeviceSwitchL3 = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4))
gbnDeviceSwitchLoopTest = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 5))
gbnDeviceSwitchSRM = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 6))
gbnDeviceSwitchFlowAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7))
gbnDeviceSwitchQueneScheduer = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8))
gbnDeviceSwitchLineRate = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9))
gbnDeviceSwitchPortIsolation = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 10))
gbnDeviceSwitchStormControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11))
gbnDeviceSwitchBandWidth = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12))
gbnDeviceSwitchNewStormControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13))
mirroringPort = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroringPort.setStatus('current')
if mibBuilder.loadTexts: mirroringPort.setDescription('This port which all packets send to.')
mirroredEgrPort = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroredEgrPort.setStatus('current')
if mibBuilder.loadTexts: mirroredEgrPort.setDescription('The egress ports which need to monitor.')
mirroredIgrPort = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroredIgrPort.setStatus('current')
if mibBuilder.loadTexts: mirroredIgrPort.setDescription('The ingress ports which need to monitor.')
portTypeTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: portTypeTable.setStatus('current')
if mibBuilder.loadTexts: portTypeTable.setDescription('A table of switch interfaces and associated properties.')
portTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "portNumber"))
if mibBuilder.loadTexts: portTypeEntry.setStatus('current')
if mibBuilder.loadTexts: portTypeEntry.setDescription('Table entry for switch interface control and status information.')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('current')
if mibBuilder.loadTexts: portNumber.setDescription('the index of port.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("blank", 1), ("fE", 2), ("single100FX", 3), ("double100FX", 4), ("single1000FX", 5), ("double1000FX", 6), ("fE1000", 7), ("SM_2SC_1310_25", 9), ("MM_2SC_1310_2", 10), ("MM_2SC_850_2", 11), ("SM_1SC_1550_20", 12), ("SM_1SC_1310_20", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('˿ͣ1Ϊڣ2Ϊ10/100Mڣ3Ϊ100Mģˣ 4Ϊ100Mģˣ5Ϊ1000Mģˣ6Ϊ1000Mģˣ7Ϊ1000Mڣ 9Ϊ4/8˿ڰ\u05f5ģ˫˹ڣ10Ϊ4/8˿ڰ\u05f6ģ˫˹1310nm 11Ϊ4/8˿ڰ\u05f6ģ˫˹850nm 12Ϊ4/8˿ڰ\u05f5ģ˫ڷ䲨1550nm 13Ϊ4/8˿ڰ\u05f5ģ˫ڷ䲨1310nm')
aggTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: aggTable.setStatus('obsolete')
if mibBuilder.loadTexts: aggTable.setDescription('A table that contains information about every Aggregator that is associated with this System.')
aggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "aggUnit"), (0, "GBNDeviceSwitch-MIB", "aggPort"))
if mibBuilder.loadTexts: aggEntry.setStatus('obsolete')
if mibBuilder.loadTexts: aggEntry.setDescription('A list of the Aggregator parameters. This is indexed by the ifIndex of the Aggregator.')
aggUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggUnit.setStatus('obsolete')
if mibBuilder.loadTexts: aggUnit.setDescription('The Interface Unit of the Aggregation.')
aggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggPort.setStatus('obsolete')
if mibBuilder.loadTexts: aggPort.setDescription('The MasterPort of the Aggregation.')
aggPortListPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggPortListPorts.setStatus('obsolete')
if mibBuilder.loadTexts: aggPortListPorts.setDescription('The complete set of ports currently associated with this Aggregator. Each bit set in this list represents an Actor Port member of this Link Aggregation.')
aggRule = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("srcMAC", 1), ("destMAC", 2), ("srcXORDestMAC", 3), ("srcIP", 4), ("destIP", 5), ("srcXORDestIP", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggRule.setStatus('obsolete')
if mibBuilder.loadTexts: aggRule.setDescription(" The Rule to be applied to this Link Aggregator's Trunk Group Table. The rules are based on the following selections SrcMAC (1), means that the last three bits of the Source MAC Address are used to index the Trunk Group to get the destination port. DestMAC (2), means the last three bits of the Destination MAC Address are used to index into the Trunk Group to get the destination port. SrcXORDestMAC (3), means that the last three bits of the Source MAC Address are logically XORed with the last three bits of the Destination MAC Address and used to index into the Trunk Group to get the destination port. SrcIP (4), means the last three bits of the Source IP Address are used to index into the Trunk Group to get the destination port. DestIP (5), means the last three bits of the Destination IP Address are used to index into the Trunk Group to get the destination port. SrcXORDestIP (6), means the last three bits of the Source IP Address are logically XORed with the last three bits of the Destination IP Address and used to index into the Trunk Group to get the destination port. This rule defines the distribution algorithm applied to the aggregated link.")
aggRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggRowstatus.setStatus('obsolete')
if mibBuilder.loadTexts: aggRowstatus.setDescription('rowstatus of trunk.')
l3Table = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: l3Table.setStatus('current')
if mibBuilder.loadTexts: l3Table.setDescription('˱ΪоƬL3ݡ')
l3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "l3IpAddress"))
if mibBuilder.loadTexts: l3Entry.setStatus('current')
if mibBuilder.loadTexts: l3Entry.setDescription('оƬL3\ue8ec˱Ϊֻ')
l3IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3IpAddress.setStatus('current')
if mibBuilder.loadTexts: l3IpAddress.setDescription('ĿIPַΪ')
l3NextHopMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3NextHopMacAddress.setStatus('current')
if mibBuilder.loadTexts: l3NextHopMacAddress.setDescription('һIPMACַ')
l3Vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3Vlan.setStatus('current')
if mibBuilder.loadTexts: l3Vlan.setDescription('һIPڵVLAN')
l3Port = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3Port.setStatus('current')
if mibBuilder.loadTexts: l3Port.setDescription('ĵĳ˿ڡ')
l3CreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3CreateTime.setStatus('current')
if mibBuilder.loadTexts: l3CreateTime.setDescription('Create Time,such as 2004-07-29,13:30:15.0')
l3UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3UpdateTime.setStatus('current')
if mibBuilder.loadTexts: l3UpdateTime.setDescription('Update Time,such as 2004-07-29,13:30:15.0')
loopTestPortno = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopTestPortno.setStatus('current')
if mibBuilder.loadTexts: loopTestPortno.setDescription('port bitmap:Numbers of the port to be tested. The highest bit is port 1, the second bit is port 2, and so on.')
loopTestType = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noop", 1), ("local", 2), ("remote", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopTestType.setStatus('current')
if mibBuilder.loadTexts: loopTestType.setDescription('DURABLE: { 4 } Setting this object to 2-4 enables loop back test. Setting it to 1 disables loop back test.')
loopTestSuccess = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopTestSuccess.setStatus('current')
if mibBuilder.loadTexts: loopTestSuccess.setDescription('if the highest bit is 0:the port 1 loop fail, 1,the port 1 loop success, and so on. ')
srmHardwareEnable = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmHardwareEnable.setStatus('current')
if mibBuilder.loadTexts: srmHardwareEnable.setDescription('Add network routes to hardware table or not.Default is enable.')
srmHardwareDEFCPU = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmHardwareDEFCPU.setStatus('current')
if mibBuilder.loadTexts: srmHardwareDEFCPU.setDescription('The DEF routes goes to CPU.')
portFlowAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1), )
if mibBuilder.loadTexts: portFlowAlarmTable.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmTable.setDescription('A Table of port flow alarm.')
portFlowAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "portFlowAlarmPort"))
if mibBuilder.loadTexts: portFlowAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmEntry.setDescription('A list of port flow alarm.')
portFlowAlarmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: portFlowAlarmPort.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmPort.setDescription('The port number.')
portFlowAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmEnable.setDescription('The enable status of the port flow alarm')
portFlowAlarmExceedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowAlarmExceedStatus.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmExceedStatus.setDescription('The exceed status of the port flow alarm')
portFlowAlarmExceedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowAlarmExceedThreshold.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmExceedThreshold.setDescription('The exceed threshold of port flow alarm.')
portFlowAlarmNormalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowAlarmNormalThreshold.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmNormalThreshold.setDescription('The normal threshold of port flow alarm.')
portFlowAlarmGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowAlarmGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmGlobalEnable.setDescription('The global enable status of port flow alarm.')
portFlowAlarmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 5))
portFlowAlarmExceedTrap = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 5, 1)).setObjects(("GBNDeviceSwitch-MIB", "portFlowAlarmPort"))
if mibBuilder.loadTexts: portFlowAlarmExceedTrap.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmExceedTrap.setDescription('Port ingress packet rate become too big, port flow exceed alarm happen.')
portFlowAlarmNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 5, 2)).setObjects(("GBNDeviceSwitch-MIB", "portFlowAlarmPort"))
if mibBuilder.loadTexts: portFlowAlarmNormalTrap.setStatus('current')
if mibBuilder.loadTexts: portFlowAlarmNormalTrap.setDescription('Port ingress packet rate become normal, port flow normal alarm happen.')
qosQueueSchedulerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1))
qosWrrQueue1Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue1Weight.setStatus('current')
if mibBuilder.loadTexts: qosWrrQueue1Weight.setDescription('Weight of 1th queue(%).')
qosWrrQueue2Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue2Weight.setStatus('current')
if mibBuilder.loadTexts: qosWrrQueue2Weight.setDescription('Weight of 2th queue(%). ')
qosWrrQueue3Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue3Weight.setStatus('current')
if mibBuilder.loadTexts: qosWrrQueue3Weight.setDescription('Weight of 3th queue(%).')
qosWrrQueue4Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue4Weight.setStatus('current')
if mibBuilder.loadTexts: qosWrrQueue4Weight.setDescription('Weight of 4th queue(%).')
qosWrrMaxDelayValue = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrMaxDelayValue.setStatus('current')
if mibBuilder.loadTexts: qosWrrMaxDelayValue.setDescription('the maximum allowable latency for packet transmission on the priorest COS')
qosQueueSchedulerMode = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2))).clone('strictPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosQueueSchedulerMode.setStatus('current')
if mibBuilder.loadTexts: qosQueueSchedulerMode.setDescription('queue scheduler mode: strict priority, weighted round robin')
qosWrrQueue5Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue5Weight.setStatus('current')
if mibBuilder.loadTexts: qosWrrQueue5Weight.setDescription('Weight of 5th queue(%).')
qosWrrQueue6Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue6Weight.setStatus('current')
if mibBuilder.loadTexts: qosWrrQueue6Weight.setDescription('Weight of 6th queue(%). ')
qosWrrQueue7Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue7Weight.setStatus('current')
if mibBuilder.loadTexts: qosWrrQueue7Weight.setDescription('Weight of 7th queue(%).')
qosWrrQueue8Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue8Weight.setStatus('current')
if mibBuilder.loadTexts: qosWrrQueue8Weight.setDescription('Weight of 8th queue(%).')
qosPriorityRemapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2))
qosPriority0Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority0Remap.setStatus('current')
if mibBuilder.loadTexts: qosPriority0Remap.setDescription('Remap of 0 priority.')
qosPriority1Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority1Remap.setStatus('current')
if mibBuilder.loadTexts: qosPriority1Remap.setDescription('Remap of 1 priority.')
qosPriority2Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority2Remap.setStatus('current')
if mibBuilder.loadTexts: qosPriority2Remap.setDescription('Remap of 2 priority.')
qosPriority3Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority3Remap.setStatus('current')
if mibBuilder.loadTexts: qosPriority3Remap.setDescription('Remap of 3 priority.')
qosPriority4Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority4Remap.setStatus('current')
if mibBuilder.loadTexts: qosPriority4Remap.setDescription('Remap of 4 priority.')
qosPriority5Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority5Remap.setStatus('current')
if mibBuilder.loadTexts: qosPriority5Remap.setDescription('Remap of 5 priority.')
qosPriority6Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority6Remap.setStatus('current')
if mibBuilder.loadTexts: qosPriority6Remap.setDescription('Remap of 6 priority.')
qosPriority7Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority7Remap.setStatus('current')
if mibBuilder.loadTexts: qosPriority7Remap.setDescription('Remap of 7 priority.')
qosPriorityRemapStatus = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityRemapStatus.setStatus('current')
if mibBuilder.loadTexts: qosPriorityRemapStatus.setDescription('Priority remap status: enable, disable')
qosLineRateTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9, 1), )
if mibBuilder.loadTexts: qosLineRateTable.setStatus('current')
if mibBuilder.loadTexts: qosLineRateTable.setDescription('A list of line-rate QOS entries. ')
qosLineRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "qosLineRateInterface"))
if mibBuilder.loadTexts: qosLineRateEntry.setStatus('current')
if mibBuilder.loadTexts: qosLineRateEntry.setDescription('A list of line-rate QOS entries. ')
qosLineRateInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLineRateInterface.setStatus('current')
if mibBuilder.loadTexts: qosLineRateInterface.setDescription('the line rate interface. ')
qosLineRateTargetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosLineRateTargetRate.setStatus('current')
if mibBuilder.loadTexts: qosLineRateTargetRate.setDescription('the target rate of the line-rate QOS. ')
portIsolationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 10, 1))
portIsolationDownLinkPorts = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 10, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIsolationDownLinkPorts.setStatus('current')
if mibBuilder.loadTexts: portIsolationDownLinkPorts.setDescription('port isolation down link portlist')
stormControlTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1), )
if mibBuilder.loadTexts: stormControlTable.setStatus('current')
if mibBuilder.loadTexts: stormControlTable.setDescription('A list of storm control entries. ')
stormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "stormControlInterface"), (0, "GBNDeviceSwitch-MIB", "stormControlType"))
if mibBuilder.loadTexts: stormControlEntry.setStatus('current')
if mibBuilder.loadTexts: stormControlEntry.setDescription('A list of storm control entries. ')
stormControlInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlInterface.setStatus('current')
if mibBuilder.loadTexts: stormControlInterface.setDescription('the storm control interface. ')
stormControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlType.setStatus('current')
if mibBuilder.loadTexts: stormControlType.setDescription('the pack flow type of the storm control. ')
stormControlTargetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlTargetRate.setStatus('current')
if mibBuilder.loadTexts: stormControlTargetRate.setDescription('the target rate of the storm control. ')
stormControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlRowStatus.setStatus('current')
if mibBuilder.loadTexts: stormControlRowStatus.setDescription('row status of the storm control')
bandwidthcontrolTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1), )
if mibBuilder.loadTexts: bandwidthcontrolTable.setStatus('current')
if mibBuilder.loadTexts: bandwidthcontrolTable.setDescription('A table of switch interfaces and associated properties.')
bandwidthcontrolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "controlPort"))
if mibBuilder.loadTexts: bandwidthcontrolEntry.setStatus('current')
if mibBuilder.loadTexts: bandwidthcontrolEntry.setDescription('Table entry for switch interface control and status information.')
controlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPort.setStatus('current')
if mibBuilder.loadTexts: controlPort.setDescription('the index of port.')
portEgressBandwidthcontrol = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgressBandwidthcontrol.setStatus('current')
if mibBuilder.loadTexts: portEgressBandwidthcontrol.setDescription('Egress Speed Value of port, bandwidth control .')
portIngressBandwidthcontrol = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIngressBandwidthcontrol.setStatus('current')
if mibBuilder.loadTexts: portIngressBandwidthcontrol.setDescription('Ingress Speed Value of port, bandwidth control .')
newStormControlType = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("broadcast", 1), ("ipmulticast", 2), ("broadcast_ipmulticast", 3), ("dlf", 4), ("broadcast_dlf", 5), ("ipmulticast_dlf", 6), ("broadcast_ipmulticast_dlf", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newStormControlType.setStatus('current')
if mibBuilder.loadTexts: newStormControlType.setDescription('the pack flow type of the storm control.')
newStormControlTargetRate = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 12, 25, 50))).clone(namedValues=NamedValues(("rate_one_sixteenth", 6), ("rate_one_eighth", 12), ("rate_one_fourth", 25), ("rate_one_half", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newStormControlTargetRate.setStatus('current')
if mibBuilder.loadTexts: newStormControlTargetRate.setDescription('the target rate of the storm control.')
newStormControlTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 3), )
if mibBuilder.loadTexts: newStormControlTable.setStatus('current')
if mibBuilder.loadTexts: newStormControlTable.setDescription('A list of storm control entries.')
newStormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 3, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "newStormControlInterface"))
if mibBuilder.loadTexts: newStormControlEntry.setStatus('current')
if mibBuilder.loadTexts: newStormControlEntry.setDescription('A list of storm control entries.')
newStormControlInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newStormControlInterface.setStatus('current')
if mibBuilder.loadTexts: newStormControlInterface.setDescription('the storm control interface.')
newStormControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newStormControlStatus.setStatus('current')
if mibBuilder.loadTexts: newStormControlStatus.setDescription('the status of the storm control.')
mibBuilder.exportSymbols("GBNDeviceSwitch-MIB", gbnDeviceSwitchLineRate=gbnDeviceSwitchLineRate, portFlowAlarmExceedTrap=portFlowAlarmExceedTrap, qosLineRateTable=qosLineRateTable, gbnDeviceSwitchBandWidth=gbnDeviceSwitchBandWidth, qosPriority7Remap=qosPriority7Remap, qosPriority3Remap=qosPriority3Remap, gbnDeviceSwitchMirror=gbnDeviceSwitchMirror, aggRowstatus=aggRowstatus, qosLineRateEntry=qosLineRateEntry, gbnDeviceSwitchPort=gbnDeviceSwitchPort, stormControlEntry=stormControlEntry, stormControlType=stormControlType, aggUnit=aggUnit, newStormControlEntry=newStormControlEntry, qosWrrQueue7Weight=qosWrrQueue7Weight, portEgressBandwidthcontrol=portEgressBandwidthcontrol, qosPriorityRemapStatus=qosPriorityRemapStatus, gbnDeviceSwitchFlowAlarm=gbnDeviceSwitchFlowAlarm, qosWrrQueue2Weight=qosWrrQueue2Weight, gbnDeviceSwitch=gbnDeviceSwitch, aggEntry=aggEntry, loopTestType=loopTestType, newStormControlStatus=newStormControlStatus, qosPriority5Remap=qosPriority5Remap, portTypeEntry=portTypeEntry, portFlowAlarmNormalThreshold=portFlowAlarmNormalThreshold, portFlowAlarmEnable=portFlowAlarmEnable, srmHardwareDEFCPU=srmHardwareDEFCPU, portFlowAlarmTable=portFlowAlarmTable, gbnDeviceSwitchAggregation=gbnDeviceSwitchAggregation, gbnDeviceSwitchPortIsolation=gbnDeviceSwitchPortIsolation, loopTestPortno=loopTestPortno, qosWrrQueue1Weight=qosWrrQueue1Weight, gbnDeviceSwitchSRM=gbnDeviceSwitchSRM, qosLineRateTargetRate=qosLineRateTargetRate, srmHardwareEnable=srmHardwareEnable, portFlowAlarmTrap=portFlowAlarmTrap, portIsolationDownLinkPorts=portIsolationDownLinkPorts, l3Vlan=l3Vlan, qosWrrQueue6Weight=qosWrrQueue6Weight, stormControlInterface=stormControlInterface, loopTestSuccess=loopTestSuccess, qosPriority2Remap=qosPriority2Remap, qosWrrQueue3Weight=qosWrrQueue3Weight, qosWrrQueue8Weight=qosWrrQueue8Weight, gbnDeviceSwitchQueneScheduer=gbnDeviceSwitchQueneScheduer, portTypeTable=portTypeTable, qosWrrMaxDelayValue=qosWrrMaxDelayValue, qosWrrQueue5Weight=qosWrrQueue5Weight, portIngressBandwidthcontrol=portIngressBandwidthcontrol, qosPriority4Remap=qosPriority4Remap, qosQueueSchedulerGroup=qosQueueSchedulerGroup, l3UpdateTime=l3UpdateTime, portFlowAlarmEntry=portFlowAlarmEntry, stormControlRowStatus=stormControlRowStatus, bandwidthcontrolTable=bandwidthcontrolTable, controlPort=controlPort, aggTable=aggTable, aggPortListPorts=aggPortListPorts, portFlowAlarmNormalTrap=portFlowAlarmNormalTrap, mirroredEgrPort=mirroredEgrPort, gbnDeviceSwitchL3=gbnDeviceSwitchL3, qosPriority0Remap=qosPriority0Remap, gbnDeviceSwitchNewStormControl=gbnDeviceSwitchNewStormControl, mirroredIgrPort=mirroredIgrPort, qosPriorityRemapGroup=qosPriorityRemapGroup, l3IpAddress=l3IpAddress, l3CreateTime=l3CreateTime, aggPort=aggPort, portFlowAlarmGlobalEnable=portFlowAlarmGlobalEnable, stormControlTargetRate=stormControlTargetRate, mirroringPort=mirroringPort, bandwidthcontrolEntry=bandwidthcontrolEntry, PYSNMP_MODULE_ID=gbnDeviceSwitch, stormControlTable=stormControlTable, qosWrrQueue4Weight=qosWrrQueue4Weight, qosPriority1Remap=qosPriority1Remap, portType=portType, newStormControlTable=newStormControlTable, qosQueueSchedulerMode=qosQueueSchedulerMode, aggRule=aggRule, l3Table=l3Table, newStormControlInterface=newStormControlInterface, l3NextHopMacAddress=l3NextHopMacAddress, qosPriority6Remap=qosPriority6Remap, portIsolationGroup=portIsolationGroup, l3Port=l3Port, portFlowAlarmExceedStatus=portFlowAlarmExceedStatus, qosLineRateInterface=qosLineRateInterface, newStormControlTargetRate=newStormControlTargetRate, gbnDeviceSwitchLoopTest=gbnDeviceSwitchLoopTest, newStormControlType=newStormControlType, portFlowAlarmExceedThreshold=portFlowAlarmExceedThreshold, l3Entry=l3Entry, gbnDeviceSwitchStormControl=gbnDeviceSwitchStormControl, portFlowAlarmPort=portFlowAlarmPort, portNumber=portNumber)
