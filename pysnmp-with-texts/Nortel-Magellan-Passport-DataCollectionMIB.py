#
# PySNMP MIB module Nortel-Magellan-Passport-DataCollectionMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-DataCollectionMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
DisplayString, StorageType, RowStatus, Unsigned32, Integer32, Gauge32, Counter32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "StorageType", "RowStatus", "Unsigned32", "Integer32", "Gauge32", "Counter32")
NonReplicated, EnterpriseDateAndTime, AsciiString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "EnterpriseDateAndTime", "AsciiString")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, TimeTicks, iso, Integer32, Unsigned32, IpAddress, Counter64, Gauge32, Counter32, ObjectIdentity, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "TimeTicks", "iso", "Integer32", "Unsigned32", "IpAddress", "Counter64", "Gauge32", "Counter32", "ObjectIdentity", "MibIdentifier", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dataCollectionMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14))
col = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21))
colRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1), )
if mibBuilder.loadTexts: colRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: colRowStatusTable.setDescription('This entry controls the addition and deletion of col components.')
colRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"))
if mibBuilder.loadTexts: colRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colRowStatusEntry.setDescription('A single entry in the table represents a single col component.')
colRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colRowStatus.setDescription('This variable is used as the basis for SNMP naming of col components. These components can be added.')
colComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: colComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
colStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: colStorageType.setDescription('This variable represents the storage type value for the col tables.')
colIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accounting", 0), ("alarm", 1), ("log", 2), ("debug", 3), ("scn", 4), ("trap", 5), ("stats", 6))))
if mibBuilder.loadTexts: colIndex.setStatus('mandatory')
if mibBuilder.loadTexts: colIndex.setDescription('This variable represents the index for the col tables.')
colProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 10), )
if mibBuilder.loadTexts: colProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: colProvTable.setDescription('This group specifies all of the provisioning data for a DCS Collector.')
colProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"))
if mibBuilder.loadTexts: colProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colProvEntry.setDescription('An entry in the colProvTable.')
colAgentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 10000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colAgentQueueSize.setStatus('obsolete')
if mibBuilder.loadTexts: colAgentQueueSize.setDescription("This attribute has been replaced with the agentQueueSize attribute in the Lp Engineering DataStream Ov component. Upon migration, if the existing provisioned value of this attribute is the same as the system default for this type of data, no new components are added because the default is what the DataStream component already would be using. Otherwise, if the value is not the same as the system default, then for each Lp which is provisioned at the time of the migration, a DataStream is provisioned and the Ov's agentQueueSize is set to the non-default value.")
colStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11), )
if mibBuilder.loadTexts: colStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: colStatsTable.setDescription('This group specifies the statistics operational attributes of the DCS Collector, Agent and Spooler components.')
colStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"))
if mibBuilder.loadTexts: colStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colStatsEntry.setDescription('An entry in the colStatsTable.')
colCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colCurrentQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: colCurrentQueueSize.setDescription('This gauge contains the current number of records held by this DCS component.')
colRecordsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colRecordsRx.setStatus('mandatory')
if mibBuilder.loadTexts: colRecordsRx.setDescription('This counter contains the cumulative number of records received by a DCS component, from applications which send data to it, since the processor last restarted. This counter wraps to 0 when the maximum value is exceeded.')
colRecordsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colRecordsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: colRecordsDiscarded.setDescription('This is the cumulative number of records discarded by this DCS component since the processor last restarted. This counter wraps to 0 when the maximum value is exceeded.')
colTimesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 266), )
if mibBuilder.loadTexts: colTimesTable.setStatus('mandatory')
if mibBuilder.loadTexts: colTimesTable.setDescription('This attribute specifies the scheduled times at which data should be collected. Only accounting applications need the capability to generate data in this way. Setting this attribute for other streams has no effect. The user can enter the times in any order and duplicates are prevented at data entry. There is a limit of 24 entries, which is imposed at semantic check time. The collection times are triggered in chronological order. A semantic check error is issued if any 2 entries are less than 1 hour apart or if any 2 entries are more than 12 hours apart (which implies that if any entries are provided, there must be at least 2 entries). Note that by default (that is, in the absence of a provisioned schedule), a Virtual Circuit (VC) starts its own 12-hour accounting timer. If any collection times are provisioned here, then the Time- Of-Day-Accounting (TODA) method is used in place of 12-hour accounting. This is applicable to both Switched VCs and Permanent VCs.')
colTimesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 266, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colTimesValue"))
if mibBuilder.loadTexts: colTimesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colTimesEntry.setDescription('An entry in the colTimesTable.')
colTimesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 266, 1, 1), EnterpriseDateAndTime().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colTimesValue.setStatus('mandatory')
if mibBuilder.loadTexts: colTimesValue.setDescription('This variable represents both the value and the index for the colTimesTable.')
colTimesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 266, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: colTimesRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colTimesRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the colTimesTable.')
colLastTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 275), )
if mibBuilder.loadTexts: colLastTable.setStatus('obsolete')
if mibBuilder.loadTexts: colLastTable.setDescription('Note: This was made obsolete in R4.1 (BD0108A). This attribute is used for Collector/stats and Collector/account. For statistics, when collection is turned off, or prior to the very first probe, the value is the empty list. Otherwise, this is the network time at which the last probe was sent out (that is, the last time that statistics were collected from, or at least reset by, the applications providing them). For accounting, when no entries exist in collectionTimes, or prior to the very first collection time, the value is the empty list. Otherwise, this is the network time at which the last time-of-day changeover occurred.')
colLastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 275, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colLastValue"))
if mibBuilder.loadTexts: colLastEntry.setStatus('obsolete')
if mibBuilder.loadTexts: colLastEntry.setDescription('An entry in the colLastTable.')
colLastValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 275, 1, 1), EnterpriseDateAndTime().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colLastValue.setStatus('obsolete')
if mibBuilder.loadTexts: colLastValue.setDescription('This variable represents both the value and the index for the colLastTable.')
colPeakTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 279), )
if mibBuilder.loadTexts: colPeakTable.setStatus('mandatory')
if mibBuilder.loadTexts: colPeakTable.setDescription('This attribute specifies the length of the accounting peak water mark interval. It is at least one minute and at most 15 minutes long. An accounting peak water mark within a given accounting interval is the accounting count which occured during a peak water mark interval with the highest traffic. Peak water marks are used to determine traffic bursts. If no value is provisioned for this attribute value of 5 minutes is assumed. Peak water mark is only measured if attribute collectionTimes in Collector/account is provisioned.')
colPeakEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 279, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colPeakValue"))
if mibBuilder.loadTexts: colPeakEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colPeakEntry.setDescription('An entry in the colPeakTable.')
colPeakValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 279, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colPeakValue.setStatus('mandatory')
if mibBuilder.loadTexts: colPeakValue.setDescription('This variable represents both the value and the index for the colPeakTable.')
colPeakRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 279, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: colPeakRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colPeakRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the colPeakTable.')
colSp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2))
colSpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1), )
if mibBuilder.loadTexts: colSpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: colSpRowStatusTable.setDescription('This entry controls the addition and deletion of colSp components.')
colSpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colSpRowStatusEntry.setDescription('A single entry in the table represents a single colSp component.')
colSpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colSpRowStatus.setDescription('This variable is used as the basis for SNMP naming of colSp components. These components cannot be added nor deleted.')
colSpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: colSpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
colSpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: colSpStorageType.setDescription('This variable represents the storage type value for the colSp tables.')
colSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: colSpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: colSpIndex.setDescription('This variable represents the index for the colSp tables.')
colSpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 10), )
if mibBuilder.loadTexts: colSpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: colSpProvTable.setDescription('This group specifies all of the provisioning data for a DCS Spooler.')
colSpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colSpProvEntry.setDescription('An entry in the colSpProvTable.')
colSpSpooling = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colSpSpooling.setStatus('mandatory')
if mibBuilder.loadTexts: colSpSpooling.setDescription('This attribute specifies whether or not this type of data is spooled to the disk. If set to off, it is roughly equivalent to Locking the Spooler (except this will survive processor restarts). The following defaults are used: - alarm: on - accounting: on - log: on - debug: off - scn: on - trap: off (see Note below) - stats: on Note that SNMP Traps cannot be spooled. A semantic check prevents the user from setting the value to on for the trap stream.')
colSpMaximumNumberOfFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colSpMaximumNumberOfFiles.setStatus('mandatory')
if mibBuilder.loadTexts: colSpMaximumNumberOfFiles.setDescription("This attribute specifies the maximum number of files that should be kept on the disk in the directory containing the closed files of this type. The value 0 is defined to mean 'unlimited'. A different default for each type of Spooler is defined as follows: - alarm: 30 - accounting: 200 - debug: 2 - log: 10 - scn: 10 - trap: 2 (this value is meaningless and is ignored) - stats: 200")
colSpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11), )
if mibBuilder.loadTexts: colSpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: colSpStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
colSpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colSpStateEntry.setDescription('An entry in the colSpStateTable.')
colSpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: colSpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
colSpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: colSpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
colSpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: colSpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
colSpAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colSpAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
colSpProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colSpProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
colSpControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colSpControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
colSpAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colSpAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
colSpStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colSpStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
colSpUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colSpUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
colSpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 12), )
if mibBuilder.loadTexts: colSpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: colSpOperTable.setDescription('This group contains the operational attributes specific to a DCS Spooler.')
colSpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colSpOperEntry.setDescription('An entry in the colSpOperTable.')
colSpSpoolingFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpSpoolingFileName.setStatus('mandatory')
if mibBuilder.loadTexts: colSpSpoolingFileName.setDescription('When spooling is on, this attribute contains the name of the open file into which data is currently being spooled. When spooling is off, the value of this attribute is the empty string.')
colSpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13), )
if mibBuilder.loadTexts: colSpStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: colSpStatsTable.setDescription('This group specifies the statistics operational attributes of the DCS Collector, Agent and Spooler components.')
colSpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colSpStatsEntry.setDescription('An entry in the colSpStatsTable.')
colSpCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpCurrentQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: colSpCurrentQueueSize.setDescription('This gauge contains the current number of records held by this DCS component.')
colSpRecordsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpRecordsRx.setStatus('mandatory')
if mibBuilder.loadTexts: colSpRecordsRx.setDescription('This counter contains the cumulative number of records received by a DCS component, from applications which send data to it, since the processor last restarted. This counter wraps to 0 when the maximum value is exceeded.')
colSpRecordsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpRecordsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: colSpRecordsDiscarded.setDescription('This is the cumulative number of records discarded by this DCS component since the processor last restarted. This counter wraps to 0 when the maximum value is exceeded.')
colAg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3))
colAgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1), )
if mibBuilder.loadTexts: colAgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: colAgRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of colAg components.')
colAgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colAgIndex"))
if mibBuilder.loadTexts: colAgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colAgRowStatusEntry.setDescription('A single entry in the table represents a single colAg component.')
colAgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: colAgRowStatus.setDescription('This variable is used as the basis for SNMP naming of colAg components. These components cannot be added nor deleted.')
colAgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: colAgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
colAgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: colAgStorageType.setDescription('This variable represents the storage type value for the colAg tables.')
colAgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: colAgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: colAgIndex.setDescription('This variable represents the index for the colAg tables.')
colAgStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10), )
if mibBuilder.loadTexts: colAgStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: colAgStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group specifies the statistics operational attributes of the DCS Collector, Agent and Spooler components.')
colAgStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colAgIndex"))
if mibBuilder.loadTexts: colAgStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colAgStatsEntry.setDescription('An entry in the colAgStatsTable.')
colAgCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgCurrentQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: colAgCurrentQueueSize.setDescription('This gauge contains the current number of records held by this DCS component.')
colAgRecordsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgRecordsRx.setStatus('mandatory')
if mibBuilder.loadTexts: colAgRecordsRx.setDescription('This counter contains the cumulative number of records received by a DCS component, from applications which send data to it, since the processor last restarted. This counter wraps to 0 when the maximum value is exceeded.')
colAgRecordsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgRecordsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: colAgRecordsDiscarded.setDescription('This is the cumulative number of records discarded by this DCS component since the processor last restarted. This counter wraps to 0 when the maximum value is exceeded.')
colAgAgentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 11), )
if mibBuilder.loadTexts: colAgAgentStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: colAgAgentStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the statistical attributes specific to the DCS Agent components.')
colAgAgentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colAgIndex"))
if mibBuilder.loadTexts: colAgAgentStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: colAgAgentStatsEntry.setDescription('An entry in the colAgAgentStatsTable.')
colAgRecordsNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgRecordsNotGenerated.setStatus('mandatory')
if mibBuilder.loadTexts: colAgRecordsNotGenerated.setDescription('This attribute counts the records of a particular event type on this Card which could not be generated by some application due to some problem such as insufficient resources. One cannot tell exactly which event could not be generated, nor which application instance tried to generate it, but when this count increases, it is an indicator that some re-engineering may be required and will provide some idea as to why a record is missing. This counter wraps to 0 when the maximum value is exceeded.')
dataCollectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 1))
dataCollectionGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 1, 5))
dataCollectionGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 1, 5, 1))
dataCollectionGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 1, 5, 1, 2))
dataCollectionCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 3))
dataCollectionCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 3, 5))
dataCollectionCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 3, 5, 1))
dataCollectionCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-DataCollectionMIB", colSpProvEntry=colSpProvEntry, dataCollectionCapabilitiesBE=dataCollectionCapabilitiesBE, colTimesEntry=colTimesEntry, colSpSpooling=colSpSpooling, colAgAgentStatsEntry=colAgAgentStatsEntry, colSpStorageType=colSpStorageType, colProvEntry=colProvEntry, colTimesTable=colTimesTable, colSp=colSp, colAgRowStatusTable=colAgRowStatusTable, colAgRecordsDiscarded=colAgRecordsDiscarded, colRowStatusEntry=colRowStatusEntry, colAgAgentStatsTable=colAgAgentStatsTable, colSpCurrentQueueSize=colSpCurrentQueueSize, colSpSpoolingFileName=colSpSpoolingFileName, colSpOperEntry=colSpOperEntry, dataCollectionMIB=dataCollectionMIB, colSpMaximumNumberOfFiles=colSpMaximumNumberOfFiles, colAg=colAg, colSpComponentName=colSpComponentName, dataCollectionCapabilitiesBE00A=dataCollectionCapabilitiesBE00A, dataCollectionGroup=dataCollectionGroup, colAgentQueueSize=colAgentQueueSize, dataCollectionCapabilities=dataCollectionCapabilities, colRowStatusTable=colRowStatusTable, colSpUsageState=colSpUsageState, colSpStandbyStatus=colSpStandbyStatus, colIndex=colIndex, colLastTable=colLastTable, colSpIndex=colSpIndex, colAgRecordsNotGenerated=colAgRecordsNotGenerated, colPeakRowStatus=colPeakRowStatus, colSpAlarmStatus=colSpAlarmStatus, colTimesRowStatus=colTimesRowStatus, colSpAvailabilityStatus=colSpAvailabilityStatus, colAgIndex=colAgIndex, colSpUnknownStatus=colSpUnknownStatus, colComponentName=colComponentName, colSpRowStatusTable=colSpRowStatusTable, colLastValue=colLastValue, colSpRowStatus=colSpRowStatus, colPeakTable=colPeakTable, colSpRowStatusEntry=colSpRowStatusEntry, colTimesValue=colTimesValue, colSpOperationalState=colSpOperationalState, colAgCurrentQueueSize=colAgCurrentQueueSize, colSpOperTable=colSpOperTable, colCurrentQueueSize=colCurrentQueueSize, dataCollectionGroupBE00A=dataCollectionGroupBE00A, colSpProceduralStatus=colSpProceduralStatus, colSpStateEntry=colSpStateEntry, col=col, colAgStatsEntry=colAgStatsEntry, colSpControlStatus=colSpControlStatus, colStatsTable=colStatsTable, colSpRecordsDiscarded=colSpRecordsDiscarded, colPeakValue=colPeakValue, colSpRecordsRx=colSpRecordsRx, colAgStatsTable=colAgStatsTable, colAgRecordsRx=colAgRecordsRx, colRowStatus=colRowStatus, colAgRowStatusEntry=colAgRowStatusEntry, colSpAdminState=colSpAdminState, colAgComponentName=colAgComponentName, colRecordsRx=colRecordsRx, colAgStorageType=colAgStorageType, colRecordsDiscarded=colRecordsDiscarded, colSpStatsTable=colSpStatsTable, colStatsEntry=colStatsEntry, colSpStatsEntry=colSpStatsEntry, colProvTable=colProvTable, dataCollectionCapabilitiesBE00=dataCollectionCapabilitiesBE00, colStorageType=colStorageType, colAgRowStatus=colAgRowStatus, colSpProvTable=colSpProvTable, colSpStateTable=colSpStateTable, colPeakEntry=colPeakEntry, dataCollectionGroupBE=dataCollectionGroupBE, colLastEntry=colLastEntry, dataCollectionGroupBE00=dataCollectionGroupBE00)
