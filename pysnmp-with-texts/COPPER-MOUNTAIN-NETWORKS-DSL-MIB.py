#
# PySNMP MIB module COPPER-MOUNTAIN-NETWORKS-DSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COPPER-MOUNTAIN-NETWORKS-DSL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, Unsigned32, NotificationType, Gauge32, Counter64, Integer32, iso, TimeTicks, Counter32, NotificationType, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Unsigned32", "NotificationType", "Gauge32", "Counter64", "Integer32", "iso", "TimeTicks", "Counter32", "NotificationType", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
coppermountain = MibIdentifier((1, 3, 6, 1, 4, 1, 1996))
cmRegistry = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 1))
cmCE120Platform = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 1, 1))
cmCE150Platform = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 1, 2))
cmCE200Platform = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 1, 3))
cmTransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10))
cmHDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 3))
cmIface = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 4))
cmEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 5))
cmFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 6))
cmDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 7))
cmIDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 8))
cmFrameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 9))
cmATM = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 10))
cmIMUX = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 11))
cmDataPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 10, 12))
cmCE200 = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20))
cmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 1))
cmBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 2))
cmState = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 3))
cmShelf = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 4))
cmFile = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 5))
cmCpeBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 6))
cmHSSI = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 7))
cmV35 = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 8))
cmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 9))
cmLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 10))
cmVBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 11))
cmMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 12))
cmAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 13))
cmEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 14))
cmUserGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 15))
cmMaint = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 16))
cmProxyArp = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 17))
cmMultiShelf = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 18))
cmDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 19))
cmServiceClass = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 20))
cmEndPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 21))
cmOperator = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 22))
cmRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 23))
cmSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 1996, 20, 24))
class DLCI(Integer32):
    pass

class PerfTotalCount(Gauge32):
    pass

class CmObjectPII(Integer32):
    pass

cmHDSLModemTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1), )
if mibBuilder.loadTexts: cmHDSLModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemTable.setDescription('The DSL Port Information table for Configuration and Management of DSL ports.')
cmHDSLModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmHDSLModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemEntry.setDescription('An entry in the DSL Port Information table.')
cmHDSLModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemIndex.setDescription('The value of this object indicates the combination of shelf, port and slot number (i.e ifIndex).')
cmHDSLModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("central", 0), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemType.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemType.setDescription('The value of this object specifies the bit pump type.')
cmHDSLModemTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemTxGain.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemTxGain.setDescription('The value of this object specifies the transmit gain.')
cmHDSLModemTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("external-analog-loopback", 1), ("digital-near-loopback", 2), ("digital-far-loopback", 3), ("tx-isolated-plus3-pulse", 4), ("tx-isolated-plus1-pulse", 5), ("tx-isolated-minus1-pulse", 6), ("tx-isolated-minus3-pulse", 7), ("continuous-4level-txmission", 8), ("continuous-2level-txmission", 9), ("set-nominal-VCXO-frequency", 10), ("set-minimum-VCXO-frequency", 11), ("set-maximum-VCXO-frequency", 12), ("internal-analog-loopback", 13), ("isolated-analog-loopback", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemTestMode.setDescription('The value of this Object is the test mode in operation. Please note that in future SW releases this attributes shall only be accessible to diagnostic engineers.')
cmHDSLModemNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemNoiseMargin.setDescription('The value of this object specifies the noise margin of the receiver.')
cmHDSLModemBPSwMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemBPSwMajorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemBPSwMajorVersion.setDescription('The value of this Object is the major Sw Version Number.')
cmHDSLModemBPSwMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemBPSwMinorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemBPSwMinorVersion.setDescription('The value of this Object is the minor Sw Version Number.')
cmHDSLModemBPHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemBPHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemBPHwVersion.setDescription('The value of this Object is the Hw Version Number.')
cmHDSLModemDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHDSLModemDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemDataRate.setDescription('This object sets/displays the data rate, in kbps, for this port.')
cmHDSLModemCpeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHDSLModemCpeCode.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemCpeCode.setDescription("The value of this object describes certain charateristics that are unique to this CPE. For example line polarity, di-bit ordering, preactiviation signaling, etc. The CpeCode for a specific manufacturer's CPE is assigned and distributed by Copper Mountain Networks.")
cmHDSLModemSuccessfulTrains = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemSuccessfulTrains.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemSuccessfulTrains.setDescription('The is the number of successful trains for this port. This value is zero at powerup. This value is cleared whenver the operator changes the data rate for the port, or whenever the operator sets this object to 0.')
cmHDSLModemFailedTrainingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemFailedTrainingAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemFailedTrainingAttempts.setDescription('The is the number of failed training attempts for this port. This value is zero at powerup. This value is cleared whenver the operator changes the data rate for the port, or whenever the operator sets this object to 0.')
cmHDSLModemCpeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemCpeResponses.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemCpeResponses.setDescription('The is the number of CPE responses to training sequences that have been seen on this port. The responses may lead to successful trains or not. This value is zero at powerup. This value is cleared whenver the operator changes the data rate for the port, or whenever the operator sets this object to 0.')
cmHDSLModemMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("none", 2), ("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHDSLModemMinRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemMinRate.setDescription("The value of this object indicates the minimum rate the fallback mechanism will attempt to train at. MinRate == 'none' disables the feature. MinRate >= cmHDSLModemDataRate shall be rejected. The default is 'none'.")
cmHDSLModemCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("unknown", 1), ("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHDSLModemCurrentRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemCurrentRate.setDescription('This field represents either the attempted rate or the actual trained rate, depending upon the training state of the link.')
cmHDSLModemCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("retrain", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHDSLModemCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cmHDSLModemCommand.setDescription("This field directs a particular command to the specific link. 'retrain' forces the link to retrain.")
cmHDSLPerfIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2), )
if mibBuilder.loadTexts: cmHDSLPerfIntervalTable.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfIntervalTable.setDescription('Obsoleted 4/6/99. Dsl Port info about Perf Counters')
cmHDSLPerfIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLPerfIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLPerfIntervalNumber"))
if mibBuilder.loadTexts: cmHDSLPerfIntervalEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfIntervalEntry.setDescription('Obsoleted 4/6/99. Dsl Port Performance Monitoring Counters')
cmHDSLPerfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: cmHDSLPerfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfIndex.setDescription('Obsoleted 4/6/99. DSL port (interface) number (i.e ifIndex)')
cmHDSLPerfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: cmHDSLPerfIntervalNumber.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfIntervalNumber.setDescription('Obsoleted 4/6/99. A value between 1 and 24, where 1 is the most recent hour interval and 24 is the oldest hour interval')
cmHDSLPerfTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 3), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfTxUnderruns.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfTxUnderruns.setDescription('Obsoleted 4/6/99. Number of transmit underruns detected.')
cmHDSLPerfRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 4), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxTruncated.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfRxTruncated.setDescription('Obsoleted 4/6/99. Number of frames truncated due to receiver overruns.')
cmHDSLPerfRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 5), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxBig.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfRxBig.setDescription('Obsoleted 4/6/99. Number of receive frames that were discarded because they were too large.')
cmHDSLPerfRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxAborts.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfRxAborts.setDescription('Obsoleted 4/6/99. Number of aborted frames received.')
cmHDSLPerfRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxAlignmentErrors.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfRxAlignmentErrors.setDescription('Obsoleted 4/6/99. Number of unaligned frames received.')
cmHDSLPerfRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 8), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxCRCErrors.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfRxCRCErrors.setDescription('Obsoleted 4/6/99. Number of frames received with CRC errors.')
cmHDSLPerfRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 9), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxOverruns.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfRxOverruns.setDescription('Obsoleted 4/6/99. Number of frames discarded because of receiver overruns.')
cmHDSLPerfRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 10), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxValidFrames.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfRxValidFrames.setDescription('Obsoleted 4/6/99. Number of valid frames received.')
cmHDSLPerfTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 11), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfTxValidFrames.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfTxValidFrames.setDescription('Obsoleted 4/6/99. Number of frames transmitted successfully')
cmHDSLPerfRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 2, 1, 12), Counter32())
if mibBuilder.loadTexts: cmHDSLPerfRxNoBuffers.setStatus('obsolete')
if mibBuilder.loadTexts: cmHDSLPerfRxNoBuffers.setDescription('Obsoleted 4/6/99. Number of receive frames discarded due to lack of buffers.')
cmCpeHDSLModemTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3), )
if mibBuilder.loadTexts: cmCpeHDSLModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemTable.setDescription('The DSL Port Information table for Configuration and Management of DSL ports.')
cmCpeHDSLModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmCpeHDSLModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemEntry.setDescription('An entry in the DSL Port Information table.')
cmCpeHDSLModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemIndex.setDescription('The value of this object indicates the combination of shelf, port and slot number (i.e ifIndex).')
cmCpeHDSLModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("central", 0), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemType.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemType.setDescription('The value of this object specifies the bit pump type.')
cmCpeHDSLModemTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemTxGain.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemTxGain.setDescription('The value of this object specifies the transmit gain.')
cmCpeHDSLModemTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("external-analog-loopback", 1), ("digital-near-loopback", 2), ("digital-far-loopback", 3), ("tx-isolated-plus3-pulse", 4), ("tx-isolated-plus1-pulse", 5), ("tx-isolated-minus1-pulse", 6), ("tx-isolated-minus3-pulse", 7), ("continuous-4level-txmission", 8), ("continuous-2level-txmission", 9), ("set-nominal-VCXO-frequency", 10), ("set-minimum-VCXO-frequency", 11), ("set-maximum-VCXO-frequency", 12), ("internal-analog-loopback", 13), ("isolated-analog-loopback", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemTestMode.setDescription('The value of this Object is the test mode in operation. Please note that in future SW releases this attributes shall only be accessible to diagnostic engineers.')
cmCpeHDSLModemNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemNoiseMargin.setDescription('The value of this object specifies the noise margin of the receiver.')
cmCpeHDSLModemBPSwMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemBPSwMajorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemBPSwMajorVersion.setDescription('The value of this Object is the major Sw Version Number.')
cmCpeHDSLModemBPSwMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemBPSwMinorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemBPSwMinorVersion.setDescription('The value of this Object is the minor Sw Version Number.')
cmCpeHDSLModemBPHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemBPHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemBPHwVersion.setDescription('The value of this Object is the Hw Version Number.')
cmCpeHDSLModemDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeHDSLModemDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeHDSLModemDataRate.setDescription('This object sets/displays the data rate, in kbps, for this port.')
cmSDSLTestTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4), )
if mibBuilder.loadTexts: cmSDSLTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestTable.setDescription('This table is to configure and monitor loop tests on an SDSL port. There is one instance of this table per SDSL port.')
cmSDSLTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmSDSLTestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestEntry.setDescription('An entry in the SDSL Test table.')
cmSDSLTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestIndex.setDescription('This is the PII of the DSL port associated with the Loop Test. This is also the index into this table.')
cmSDSLTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSDSLTestAction.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestAction.setDescription('This field is used by the operator to start/stop the loop test on an SDSL modem. The value None is a read-only value that is displayed. The operator sets the action to Start to start a test, and Stop to stop a test.')
cmSDSLTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("complete", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestStatus.setDescription('The status field indicates whether a test is currently in progress. If the value is None, no test has been initiated since powerup. If the status is Complete, a test was run and stopped since powerup.')
cmSDSLTestTestCompleteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestTestCompleteTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestTestCompleteTime.setDescription('This is the calendar time when the last test was completed. If no test has been run since powerup, this field displays a null string.')
cmSDSLTestContinuityTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestContinuityTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestContinuityTestResult.setDescription('This is the current result of the continuity test. This field is updated during the continuity test at least every second. This object retains its value after a test is stopped.')
cmSDSLTestNearEndLoopProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("possibleShort", 2), ("possibleOpen", 3), ("pending", 4), ("cpeTalking", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestNearEndLoopProfile.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestNearEndLoopProfile.setDescription('This field contains the current estimation of whether there is a possible short or open within 500 feet of the system. This object retains its value after the test is stopped.')
cmSDSLTestDebugResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestDebugResult.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestDebugResult.setDescription('This is a generic 32-bit value that conatins internal information about the test, used for debugging. This object retains its value after the test is stopped.')
cmSDSLTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("profile", 2), ("seekMaxRate", 3), ("cpeDownload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSDSLTestType.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestType.setDescription("Specifies the test type. 'profile' checks the line profile and runs until commanded to stop. 'seekMaxRate' determines the maximum rate at which a line will train. 'CPEDownload' reduces the data rate to a level supported by the prom code if needed. When the testing stops at the completion of the download, or when the testing times out, the data rate will be restored to the original level if there was a rate reduction when the testing started. The CPEDownload command will preempt all other cmSDSLTest command types.")
cmSDSLTestMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 160, 208, 320, 416, 784, 1040, 1568))).clone(namedValues=NamedValues(("unknown", 1), ("dr160Kbps", 160), ("dr208Kbps", 208), ("dr320Kbps", 320), ("dr416Kbps", 416), ("dr784Kbps", 784), ("dr1040Kbps", 1040), ("dr1568Kbps", 1568)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSDSLTestMaxRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmSDSLTestMaxRate.setDescription("Upon completion of 'seekMaxRate', this field represents the maximum rate the link will train at.")
cmIfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1), )
if mibBuilder.loadTexts: cmIfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceTable.setDescription("The interface information table to manage the highest level of interface configuration, including networking model, IP and MAC addresses, encapsulation formats, and policy destinations. You can delete rows with a SET of NetModel=None, Name='', UserGroup='', and AdditionalInfo=''. It is not an error to delete a non-existent row.")
cmIfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIfacePII"))
if mibBuilder.loadTexts: cmIfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceEntry.setDescription('An entry in the cmIface table.')
cmIfacePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfacePII.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfacePII.setDescription('This object identifies the network interface PII.')
cmIfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfaceIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceIfIndex.setDescription('This object identifies the ifIndex associated with this interface')
cmIfaceNetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("vwan", 3), ("frame", 4), ("copperVPN", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceNetModel.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceNetModel.setDescription("This object defines the Networking Model used on this interface. IP indicates IP-LAN-extension networking. VWAN indicates Wide Area Lan Extension. Frame indicates Frame-multiplexing and optional conversion. CopperVPN indicates Copper Mountain's IP-multiplexing.")
cmIfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceIpAddr.setDescription('For NetModel=IP, the IP Address of this interface.')
cmIfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceNetMask.setDescription('For NetModel=IP, the Subnet Mask for this interface.')
cmIfaceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfaceMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceMacAddr.setDescription('The working MAC address of the CPE connected to this DSL interface, if applicable. Reads as 0.0.0.0.0.0 or FF.FF.FF.FF.FF.FF if not applicable. Note that the working MAC may be different from the Burned-in MAC.')
cmIfaceBurnedInMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfaceBurnedInMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceBurnedInMacAddr.setDescription('This object displays the burned in MAC address of the CPE connected to this DSL interface, if it has one, and supports CMCP.')
cmIfaceFarEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceFarEndAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceFarEndAddr.setDescription('For NetModel=IP or CopperVPN, this object specifies the IP address of the device connected at the far end of this interface.')
cmIfaceDestPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 9), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceDestPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceDestPII.setDescription('This object specifies the destination PII for user-data packets received on this interface.')
cmIfaceFwdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 1), ("fullIP", 2), ("policyIP", 3), ("vwan-pp", 4), ("vwan-bridge", 5), ("policyIP-enet", 6), ("frame-mux", 7), ("copperVPN", 9), ("copperVPNauto", 10), ("hdlc-vc-payload", 11), ("vc-vc-payload", 12), ("ppp-hdlc-1973", 13), ("frf8-1490-1483", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIfaceFwdMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceFwdMode.setDescription('This is the packet forwarding mode used to route packets received on this interface. The system determines this parameter internally from the NetModel and other configuration.')
cmIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceName.setDescription('A name optionally assigned by the network operator.')
cmIfaceAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceAdditionalInfo.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceAdditionalInfo.setDescription('Additional information about this interface that is optionally provided by the operator.')
cmIfaceCMCPCompatible = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceCMCPCompatible.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceCMCPCompatible.setDescription("This object has meaning for DSL links only. This object specifies whether the CPE at the end of the DSL link uses Copper Mountain's Internal Control Protocol (CMCP). Non-DSL interfaces ignore this setting, and return 'no'when read.")
cmIfaceEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("rfc1483", 2), ("rfc1490", 3), ("hdlc", 4), ("ppp-hdlc", 5), ("rfc1973", 6), ("q922", 7), ("q922-1490", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceEncapsulationType.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceEncapsulationType.setDescription('This object specifies the encapsulation type of the link. For VWAN and IP network models the choices are rfc1483 or rfc1490. Frame mode supports those and other values, allowing some frame conversions between DSL and WAN interfaces.')
cmIfaceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceGroupName.setDescription('This object defines the name of the user group to which this protocol interface belongs. Note that the user group must exist in the cmGroupTable before the value can be set in this table.')
cmIfaceServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3), ("c", 4), ("d", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIfaceServiceClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmIfaceServiceClass.setDescription('The value of this object indicates the current service class of the relevant DSL port on this system.')
cmSubIfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2), )
if mibBuilder.loadTexts: cmSubIfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmSubIfaceTable.setDescription('The cmSubIfaceTable is used to manage virtual circuits on a DSL link. Note that for every entry in the cmSubIfaceTable there must be is a corresponding entry in the cmIfaceTable to configure the DSL link. The following example illustrates how an operator would use the cmIfaceTable and cmSubIfaceTable to configure a DSL link and the corresponding VCs on that DSL link: 1. Configure cmIface 1.6.1 with Netmodel = Frame. This creates the frDlcmi and cmFrDlcmi entries. 2. Configure cmSubIface [1.6.1,100] by setting rowStatus to Create. This creates the frCircuit and cmFrCircuit entries for 1.6.1.100. 3. Set cmSubIface[1.6.1, 100] destPii = 1.3.1.200. This creates the cmIface entry for 1.3.1.200. The operator must still configure the frCircuit entry for 1.3.1.200.')
cmSubIfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmSubIfacePII"))
if mibBuilder.loadTexts: cmSubIfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmSubIfaceEntry.setDescription('An entry in the cmSubIfaceTable.')
cmSubIfacePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSubIfacePII.setStatus('mandatory')
if mibBuilder.loadTexts: cmSubIfacePII.setDescription(' This object is a unique identifier for this DSL circuit. If the DSL link is configured for Frame Relay then cmDSLCircuitId is the DLCI. ')
cmSubIfaceDestPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 2), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSubIfaceDestPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmSubIfaceDestPII.setDescription('The value of this object identifies the far end network interface, i.e. the WAN VC to which this DSL VC is mapped, from the shelf, slot, port and user channel. PII stands for Permanent Interface Identifier.')
cmSubIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSubIfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: cmSubIfaceName.setDescription(' The value of this object is the user assigned name of this virtual circuit.')
cmSubIfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSubIfaceRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmSubIfaceRowStatus.setDescription("This object is the rowStatus of the DSL Circuit. A DSL circuit is enabled by setting this object to 'active'. An entry in this table is created by setting this object to 'createAndGo' and is destroyed by setting this object to 'destroy'. The values 'notReady', 'notInService' and 'CreateAndWait' are not supported. ")
cmSubIfacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSubIfacePriority.setStatus('mandatory')
if mibBuilder.loadTexts: cmSubIfacePriority.setDescription('Specifies the priority of this VC on the DSL physical interface. The system does NOT distinguish between packets within a VC. Consistent with Frame-Relay requirements, the system never reorders packets within a VC.')
cmFrDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1), )
if mibBuilder.loadTexts: cmFrDlcmiTable.setReference('Draft American National Standard T1.617-1991, Annex D')
if mibBuilder.loadTexts: cmFrDlcmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiTable.setDescription('The Parameters for the Data Link Connection Management Interface for the frame relay service on this interface.')
cmFrDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFrDlcmiIfIndex"))
if mibBuilder.loadTexts: cmFrDlcmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiEntry.setDescription('The Parameters for a particular Data Link Connection Management Interface.')
cmFrDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiIfIndex.setDescription('The value of this object identifies the WAN port interface from the shelf, slot, port. PII stands for Permanent Interface Identifier.')
cmFrDlcmiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiAdminState.setDescription('This object is an opertor configurable state that specifies whether this interface is to be activated.')
cmFrDlcmiOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiOperState.setDescription(' This object displays the operational state of the frame relay link. The state is Enabled if: (1) the physical port ifTableOperStatus is Up, (2) cmFrDlcmiAdminState is Enabled and (3)if LMI is enabled on the link, the LMI protocol layer is up. Otherwise the state is Disabled.')
cmFrDlcmiFirstDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiFirstDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiFirstDLCI.setDescription('This object identifies the first DLCI that is assigned to this DSL link. ')
cmFrDlcmiLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiLMIMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiLMIMode.setDescription('If LMI polling is used, this indicates whether this circuit is performing polling (DTE) or is bing polled (DCE), or both (NNI)')
cmFrDlcmiDceN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiDceN392.setReference('Draft American National Standard T1.617-1991, Section D.5.1 Counter N392.')
if mibBuilder.loadTexts: cmFrDlcmiDceN392.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiDceN392.setDescription('This gives the time interval in which a Status Enquiry is expected to be received from the user. If a Status Enquiry is not received during this time interval, an error counter is incremented.')
cmFrDlcmiDceN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiDceN393.setReference('Draft American National Standard T1.617-1991, Section D.5.2 Counter N393.')
if mibBuilder.loadTexts: cmFrDlcmiDceN393.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiDceN393.setDescription("This is the number of N392 intervals over which the error threshold is counted. For example, if within 'DceN393' number of events the station receives 'DceN392' number of errors, the interface is marked as down.")
cmFrDlcmiDceT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFrDlcmiDceT392.setReference('Draft American National Standard T1.617-1991, Section D.5.2 Counter T392. ')
if mibBuilder.loadTexts: cmFrDlcmiDceT392.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiDceT392.setDescription('The value of this object the polling verification timer in units of seconds. The system stops the timer whenever it receives a STATUS ENQUIRY message from the polling device and starts the timer when it responds with a STATUS message. If the timer expries it indicates an error in the polling process.')
cmFrDlcmiRcvUnknownDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiRcvUnknownDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiRcvUnknownDLCI.setDescription('The number of frames with an unknown DLCI received on this interface.')
cmFrDlcmiLMITxStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMITxStatusEnquiries.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiLMITxStatusEnquiries.setDescription('The total number of LMI status enquiries sent by the DTE on this interface.')
cmFrDlcmiLMITxStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMITxStatusResponses.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiLMITxStatusResponses.setDescription('The total number of LMI status responses sent by the DCE on this interface.')
cmFrDlcmiLMIRxStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMIRxStatusEnquiries.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiLMIRxStatusEnquiries.setDescription('The total number of LMI status enquiries received by the DCE on this interface.')
cmFrDlcmiLMIRxStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMIRxStatusResponses.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiLMIRxStatusResponses.setDescription('The total number of LMI status responses received by the DTE on this interface.')
cmFrDlcmiLMIRxUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLMIRxUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiLMIRxUpdates.setDescription('The total number of LMI status updates received by the DTE on this interface.')
cmFrDlcmiUnknownLMIMessagesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiUnknownLMIMessagesRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiUnknownLMIMessagesRcvd.setDescription('The total number of unknown LMI messages received on this interface.')
cmFrDlcmiLostLMISequences = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrDlcmiLostLMISequences.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrDlcmiLostLMISequences.setDescription('The total number of times a loss of sequencing in received LMI messages was detected by the DTE on this interface.')
cmFrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2), )
if mibBuilder.loadTexts: cmFrCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrCircuitTable.setDescription('A table containing information about specific Data Link Connection Identifiers and corresponding virtual circuits. ')
cmFrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFrCircuitIfIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFrCircuitDlci"))
if mibBuilder.loadTexts: cmFrCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrCircuitEntry.setDescription('The information regarding a single Data Link Connection Identifier.')
cmFrCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrCircuitIfIndex.setDescription('The ifIndex Value of the ifEntry this virtual circuit is layered onto.')
cmFrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitDlci.setReference('Draft American National Standard T1.618-1991, Section 3.3.6')
if mibBuilder.loadTexts: cmFrCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrCircuitDlci.setDescription('The Data Link Connection Identifier for this virtual circuit.')
cmFrCircuitOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrCircuitOperState.setDescription('This object displays the operational state of a PVC. The state is Enabled if: (1) cmFrDlcmiOperState is Enabled for the frame relay link, (2) frCircuitState is Active, (3) if LMI is enabled on the link, the frame relay DCE or NNI peer reports the PVC status as Active, (4) if the PVC is configured in Frame Mux mode, the PVC to which this cmFrCircuit is mapped is Active. Otherwise the state is Disabled.')
cmFrCircuitFramesDroppedTxUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitFramesDroppedTxUnavail.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrCircuitFramesDroppedTxUnavail.setDescription('Number of Tx frames which were dropped on this circuit because the link was down or the permanent virtual circuit was inactive.')
cmFrCircuitFramesDroppedRxUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitFramesDroppedRxUnavail.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrCircuitFramesDroppedRxUnavail.setDescription('Number of Rx frames which were dropped on this circuit because the link was down or the permanent virtual circuit was inactive.')
cmFrCircuitFramesDroppedExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFrCircuitFramesDroppedExcess.setStatus('mandatory')
if mibBuilder.loadTexts: cmFrCircuitFramesDroppedExcess.setDescription('Number of frames which were dropped on this circuit because the hold queue was full.')
cmAtmVclTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1), )
if mibBuilder.loadTexts: cmAtmVclTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclTable.setDescription('The configuration parameters for the ATM VC on this interface.')
cmAtmVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAtmVclPII"))
if mibBuilder.loadTexts: cmAtmVclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclEntry.setDescription('The configuration parameters for a particular ATM VC.')
cmAtmVclPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclPII.setDescription('This is the index into this table. This is the PII of the DS3 port used for this ATM interface together with the link identifier for the VCL.')
cmAtmVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAtmVclVpi.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclVpi.setDescription('The VPI value of the VCL. NOTE: Vpi 0 is reserved for ATM Link Management functions.')
cmAtmVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAtmVclVci.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclVci.setDescription(' The VCI value of the VCL. NOTE: Vci values 0-31 are reserved for Path management functions.')
cmAtmVclAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAtmVclAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclAdminStatus.setDescription('This object is instanciated only for a VCL which terminates a VCC (i.e., one which is NOT cross-connected to other VCLs). Its value specifies the desired administrative state of the VCL. In the system, setting this value to Down will disable the VC from transporting user data. Setting this value to Up allows the VC to be available for trsporting user data traffic. DEFAULT: Down')
cmAtmVclOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclOperStatus.setDescription('The current operational status of the VCL.')
cmAtmVclLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclLastChange.setDescription('The value of sysUpTime at the time this VCL entered its current operational state.')
cmAtmVclAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("aal5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclAalType.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclAalType.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAl is in use. It is the type of AAL used on this VCC. The AAl type includes AAL1, AAL2, AAL3/4, and AAL5. The other(4) may be a user-defined AAL type. The unkown type indicates that the AAL type cannot be determined. DEFAULT: Aal5')
cmAtmVclAal5CpcsTransmitSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclAal5CpcsTransmitSduSize.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclAal5CpcsTransmitSduSize.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 is in use. It is the maximum AAl5 CPCS SDU size, in octets, that is supported on the transmit direction of this VCC. DEFAULT: 1600')
cmAtmVclAal5CpcsReceiveSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAtmVclAal5CpcsReceiveSduSize.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclAal5CpcsReceiveSduSize.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 is in use. It is the maximum AAl5 CPCS SDU size, in octets, that is supported on the receive direction of this VCC. DEFAULT: 1600')
cmAtmVclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAtmVclRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmAtmVclRowStatus.setDescription("This object is used to create, modify, or delete a row in the table. To create a new VCL, set this object initially to 'createAndGo' (for sanity checking), or 'Active.' To delete a VCL, set this entry to 'Destroy.' When reading back an existing VCL, the RowStatus will always be 'Active.'")
cmDS3AtmTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2), )
if mibBuilder.loadTexts: cmDS3AtmTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmDS3AtmTable.setDescription('This is a proprietary table used to configure some specific attributes of the DS3-ATM interface that are not defined in any of the standard MIBs.')
cmDS3AtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDS3AtmPII"))
if mibBuilder.loadTexts: cmDS3AtmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmDS3AtmEntry.setDescription('The configuration parameters for a particular DS3-ATM interface.')
cmDS3AtmPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDS3AtmPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmDS3AtmPII.setDescription('This is the index into this table.')
cmDS3AtmCbitParityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDS3AtmCbitParityEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cmDS3AtmCbitParityEnable.setDescription("This object enables C-bit Parity checking on the DS3-ATM interface. If this port is connected to an M23 configured interface, this field should be set to 'disable.' DEFAULT: enable")
cmDS3AtmCellPayloadScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDS3AtmCellPayloadScrambling.setStatus('mandatory')
if mibBuilder.loadTexts: cmDS3AtmCellPayloadScrambling.setDescription('This object is used to enable/disable payload scrambling on the DS3-ATM interface. DEFAULT: disable')
cmDS3AtmCellMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plcp", 1), ("hec", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDS3AtmCellMapping.setStatus('mandatory')
if mibBuilder.loadTexts: cmDS3AtmCellMapping.setDescription('This object is used to configure the physical layer data format on the DS3-ATM interface. DEFAULT: hec')
cmNameTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 15, 1), )
if mibBuilder.loadTexts: cmNameTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmNameTable.setDescription('This is a multi-indexed table that stores the protocol interface name and corresponding PII for all protocol interfaces in the system. Typically a network operator will query this table to obtain the interface name that corresponds to a particular PII.')
cmNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 15, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"))
if mibBuilder.loadTexts: cmNameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmNameEntry.setDescription('An entry in the cmName table.')
cmNameIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNameIfName.setStatus('mandatory')
if mibBuilder.loadTexts: cmNameIfName.setDescription('The value of this object identifies the name of the virtual circuit. The cmNameIfName is set in the cmSubIfaceTable.')
cmNamePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 1, 1, 2), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNamePII.setStatus('mandatory')
if mibBuilder.loadTexts: cmNamePII.setDescription('The value of this object identifies the network interface from the shelf, slot, port and user channel. PII stands for Permanent Interface Identifier.')
cmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2), )
if mibBuilder.loadTexts: cmGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmGroupTable.setDescription("Grouping allows carrier to associate their end user customers with a particular group. The 'grouping feature' is implemented in the cmGroupTable and the cmMemberTable. The cmGroupTable allows an operator to create new groups, delete existing groups and rename existing groups.")
cmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"))
if mibBuilder.loadTexts: cmGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmGroupEntry.setDescription('An entry in the cmGroup table.')
cmGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: cmGroupName.setDescription('The value of this object displays the customer assigned name of a group. Note that the name of a group can be changed using cmGroupNewGrpName')
cmGroupNewGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmGroupNewGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: cmGroupNewGrpName.setDescription('The object is used to rename a user group. The value of this object is the new user group name. Setting this object will change the name of the user group in this table as well as all entries with this user group name in the cmMemberTable.')
cmGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmGroupRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmGroupRowStatus.setDescription(" This object is the rowStatus of the group. A group is enabled by setting this object to 'active'. An entry in this table is created by setting this object to 'createAndGo' and is destroyed by setting this object to 'destroy'. The value 'notReady','createAndGo', and 'notInService' are not supported")
cmMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3), )
if mibBuilder.loadTexts: cmMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmMemberTable.setDescription("Grouping allows a carrier to associate their end user customers with a particular group. The 'grouping feature' is implemented in the cmGroupTable and the cmMemberTable. The cmMemberTable allows an operator to add a new interface to and delete an existing interfaces from a group.")
cmMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMemberPII"))
if mibBuilder.loadTexts: cmMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmMemberEntry.setDescription('An entry in the cmMemberTable.')
cmMemberGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMemberGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: cmMemberGrpName.setDescription('The value of this object identifies the name of the user group to which this member belongs. Note that this user group must exist in the cmGroupTable before an operator can use it in this table.')
cmMemberPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3, 1, 2), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMemberPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmMemberPII.setDescription('The value of this object identifies the network interface from the shelf, slot, port and user channel. PII stands for Permanent Interface Identifier .')
cmMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMemberRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmMemberRowStatus.setDescription(" This object is the rowStatus of the member. A member is enabled by setting this object to 'active'. An entry in this table is created by setting this object to 'createAndGo' and is destroyed by setting this object to 'destroy'. The value 'notReady', 'notInService' and 'createAndGo'are not supported. Note: when an entry is added to the cmMemberTable the group name in the corresponding cmIfaceTable entry will be updated.")
cmCpeEthernetIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1), )
if mibBuilder.loadTexts: cmCpeEthernetIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetIntervalTable.setDescription('Enet Port info about Perf Counters')
cmCpeEthernetIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeEthernetIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeEthernetIntervalNumber"))
if mibBuilder.loadTexts: cmCpeEthernetIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetIntervalEntry.setDescription('Enet Port Performance Monitoring Counters')
cmCpeEthernetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetIndex.setDescription('Ethernet port (interface) number (i.e ifIndex)')
cmCpeEthernetIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetIntervalNumber.setDescription('A value between 1 and 24, where 1 is the most recent hour interval and 24 is the oldest hour interval')
cmCpeEthernetIntUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetIntUnknowns.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetIntUnknowns.setDescription('Count of Unknown Interrupt Events.')
cmCpeEthernetRxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxOK.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetRxOK.setDescription('Count of Successful Receptions.')
cmCpeEthernetRxNoBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxNoBufs.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetRxNoBufs.setDescription("This is the count of times couldn't get CPE Buffers.")
cmCpeEthernetRxMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxMiss.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetRxMiss.setDescription("This is the count of times chip couldn't receive frames.")
cmCpeEthernetRxSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxSkip.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetRxSkip.setDescription('Count of implied received skips.')
cmCpeEthernetRxRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxRunt.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetRxRunt.setDescription('Count of runt frames received.')
cmCpeEthernetRxExtraData = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxExtraData.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetRxExtraData.setDescription('Count of times extra data received.')
cmCpeEthernetRxCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxCRCError.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetRxCRCError.setDescription('Count of CRC Errors.')
cmCpeEthernetRxAlignError = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxAlignError.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetRxAlignError.setDescription('Count of Received Frame Alignment Errors.')
cmCpeEthernetRxDribbleBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetRxDribbleBits.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetRxDribbleBits.setDescription('Count of extra bits received.')
cmCpeEthernetTxTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetTxTooBig.setDescription('Count of times requested transmit length > 1518 bytes.')
cmCpeEthernetTxNotReady = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxNotReady.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetTxNotReady.setDescription('Count of times transmitter being not ready.')
cmCpeEthernetTxLossCRS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxLossCRS.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetTxLossCRS.setDescription('Count of loss of carrier sense.')
cmCpeEthernetTxSQEErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxSQEErr.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetTxSQEErr.setDescription('Count of SQE Errors.')
cmCpeEthernetTxOutOfWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxOutOfWindow.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetTxOutOfWindow.setDescription('Count of late collisions.')
cmCpeEthernetTxJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxJabber.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetTxJabber.setDescription('Count of transmits > 26 milliseconds.')
cmCpeEthernetTx16Collisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTx16Collisions.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetTx16Collisions.setDescription('Count of 16 txmit-collisions for a single frame.')
cmCpeEthernetTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetTxCollisions.setDescription('Count of total txmit-collisions.')
cmCpeEthernetTxOK = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeEthernetTxOK.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeEthernetTxOK.setDescription('Count of successful transmissions.')
cmFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1), )
if mibBuilder.loadTexts: cmFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterTable.setDescription('Filters to manage IP Interfaces.')
cmFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFilterIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmFilterFilterNumber"))
if mibBuilder.loadTexts: cmFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterEntry.setDescription('An entry in the cmFilter Table.')
cmFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterIndex.setDescription('The value of this object identifies the PII (Permanent Interface Identifier) of the interface to which this filter applies.')
cmFilterFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFilterFilterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterFilterNumber.setDescription("The value of this object identifies the Filter's place in the filter list.")
cmFilterFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("insert", 2), ("delete", 3), ("deleteList", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterFunction.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterFunction.setDescription('This object specifies an action to be taken on the PII specified by cmFilterIndex. Note that DeleteList deletes all of the filters associated with the given Index.')
cmFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterSrcMask.setDescription('The value of this object indicates the mask for the source IP Address.')
cmFilterSrcAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterSrcAdrs.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterSrcAdrs.setDescription('The value of this object is the source IP Address of the IP packet being ANDed with the cmFilterSrcMask.')
cmFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterDstMask.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterDstMask.setDescription('The value of this object indicates the mask for destination IP Address.')
cmFilterDstAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterDstAdrs.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterDstAdrs.setDescription('The value of this object is the dest IP Address of the IP packet being ANDed with the cmFilterDestMask.')
cmFilterIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterIpProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterIpProtocol.setDescription('This is the value of IP Protocol Identifier. It is used to match against the IP Protocol Ids of incoming messages. The protocol identifiers are as follows: 0 = IP 1 = ICMP 2 = IGMP 3 = GGP 6 = TCP 17 = UDP')
cmFilterSrcPortCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("less", 2), ("equal", 3), ("greater", 4), ("notEqual", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterSrcPortCompare.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterSrcPortCompare.setDescription('The value of this object specifies the comparison criterion for comparing the UDP/TCP source port of the incoming packet to cmFilterSrcPort.')
cmFilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterSrcPort.setDescription('This object specifies the value to compare with the source port in the received packet.')
cmFilterDstPortCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("less", 2), ("equal", 3), ("greater", 4), ("notEqual", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterDstPortCompare.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterDstPortCompare.setDescription(' The value of this object specifies the comparison criterion for comparing the UDP/TCP destination port of the incoming packet to cmFilterDestPort.')
cmFilterDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterDstPort.setDescription('This object specifies the value to compare with the destination port in the received packet.')
cmFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("block", 2), ("chain", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: cmFilterAction.setDescription('This object specifies the action taken on packets that match this filter.')
cmDSLIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1), )
if mibBuilder.loadTexts: cmDSLIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalTable.setDescription('The DSL Interval Table contains various statistics collected by each DSL Interface over the previous 96 intervals. Samples are collected at X minute intervals where X is specified by cmAlarmSamplingInterval.')
cmDSLIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLIntervalIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLIntervalNumber"))
if mibBuilder.loadTexts: cmDSLIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalEntry.setDescription('An entry in the DSL Interval table.')
cmDSLIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalIndex.setDescription('DSL port (interface) number (i.e ifIndex)')
cmDSLIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalNumber.setDescription('A value between 1 and 96, where 1 is the most recent 15 minute interval and 96 is the oldest 15 minute interval')
cmDSLIntervalTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTxUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalTxUnderruns.setDescription('Number of transmit underruns detected.')
cmDSLIntervalRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxTruncated.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalRxTruncated.setDescription('Number of frames truncated due to receiver overruns.')
cmDSLIntervalRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxBig.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalRxBig.setDescription('Number of receive frames that were discarded because they were too large.')
cmDSLIntervalRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalRxAborts.setDescription('Number of aborted frames received.')
cmDSLIntervalRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalRxAlignmentErrors.setDescription('Number of unaligned frames received.')
cmDSLIntervalRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalRxCRCErrors.setDescription('Number of frames received with CRC errors.')
cmDSLIntervalRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalRxOverruns.setDescription('Number of frames discarded because of receiver overruns.')
cmDSLIntervalRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalRxValidFrames.setDescription('Number of valid frames received.')
cmDSLIntervalTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalTxValidFrames.setDescription('Number of frames transmitted successfully')
cmDSLIntervalRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 12), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxNoBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalRxNoBuffers.setDescription('Number of receive frames discarded due to lack of buffers.')
cmDSLIntervalTimeTagBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTimeTagBegin.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalTimeTagBegin.setDescription('This is the time stamp indicating when the interval began.')
cmDSLIntervalTimeTagEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTimeTagEnd.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalTimeTagEnd.setDescription('This is the time stamp indicating when the interval ended.')
cmDSLIntervalMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalMinNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalMinNoiseMargin.setDescription('Minimum noise margin encountered in the interval associated with thus table. Noise Margin ins not a measurable parameter for IDSL ports; therfore this value will always be 0 for IDSL ports.')
cmDSLIntervalRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 16), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalRxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalRxValidOctets.setDescription('Number of octets received in valid frames by the DSL port in the interval associated with this table.')
cmDSLIntervalTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 17), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalTxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalTxValidOctets.setDescription('Number of octets transmitted over the DSL port in the interval associated with this table.')
cmDSLIntervalPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 1, 1, 18), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLIntervalPortUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLIntervalPortUpTime.setDescription('Number of seconds that the DSL port was enbabled during the associated interval.')
cmDSLCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2), )
if mibBuilder.loadTexts: cmDSLCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentTable.setDescription('The DSL Current Table contains various statistics being collected for the current interval. The length of the current interval is specified by cmAlarmSamplingInterval')
cmDSLCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLCurrentIndex"))
if mibBuilder.loadTexts: cmDSLCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentEntry.setDescription('An entry in the DSL Current Table')
cmDSLCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentIndex.setDescription('DSL port (interface) number (i.e ifIndex)')
cmDSLCurrentTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentTxUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentTxUnderruns.setDescription('Number of transmit underruns detected.')
cmDSLCurrentRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxTruncated.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentRxTruncated.setDescription('Number of frames truncated due to receiver overruns.')
cmDSLCurrentRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxBig.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentRxBig.setDescription('Number of receive frames that were discarded because they were too large.')
cmDSLCurrentRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentRxAborts.setDescription('Number of aborted frames received.')
cmDSLCurrentRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentRxAlignmentErrors.setDescription('Number of unaligned frames received.')
cmDSLCurrentRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentRxCRCErrors.setDescription('Number of frames received with CRC errors.')
cmDSLCurrentRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentRxOverruns.setDescription('Number of frames discarded because of receiver overruns.')
cmDSLCurrentRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentRxValidFrames.setDescription('Number of valid frames received.')
cmDSLCurrentTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentTxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentTxValidFrames.setDescription('Number of frames transmitted successfully')
cmDSLCurrentRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 12), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxNoBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentRxNoBuffers.setDescription('Number of receive frames discarded due to lack of buffers.')
cmDSLCurrentMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentMinNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentMinNoiseMargin.setDescription('Minimum noise margin encountered in the interval associated with thus table. Noise Margin ins not a measurable parameter for IDSL ports; therfore this value will always be 0 for IDSL ports.')
cmDSLCurrentRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 14), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentRxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentRxValidOctets.setDescription('Number of octets received in valid frames by the DSL port in the interval associated with this table.')
cmDSLCurrentTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 15), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentTxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentTxValidOctets.setDescription('Number of octets transmitted over the DSL port in the interval associated with this table.')
cmDSLCurrentPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 2, 1, 16), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLCurrentPortUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLCurrentPortUpTime.setDescription('Number of seconds that the DSL port was enbabled during the associated interval.')
cmDSLYesterdaysTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3), )
if mibBuilder.loadTexts: cmDSLYesterdaysTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysTable.setDescription("The DSL Yesterday's Table contains the cumulative sum of the various statistics for the 24 hour period from midnight to midnight preceding the most recently completed interval. ")
cmDSLYesterdaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLYesterdaysIndex"))
if mibBuilder.loadTexts: cmDSLYesterdaysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysEntry.setDescription('An entry in cmDSLYesterdaysTable.')
cmDSLYesterdaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysIndex.setDescription('DSL port (interface) number (i.e ifIndex)')
cmDSLYesterdaysTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysTxUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysTxUnderruns.setDescription('Number of transmit underruns detected.')
cmDSLYesterdaysRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxTruncated.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysRxTruncated.setDescription('Number of frames truncated due to receiver overruns.')
cmDSLYesterdaysRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxBig.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysRxBig.setDescription('Number of receive frames that were discarded because they were too large.')
cmDSLYesterdaysRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysRxAborts.setDescription('Number of aborted frames received.')
cmDSLYesterdaysRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysRxAlignmentErrors.setDescription('Number of unaligned frames received.')
cmDSLYesterdaysRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysRxCRCErrors.setDescription('Number of frames received with CRC errors.')
cmDSLYesterdaysRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysRxOverruns.setDescription('Number of frames discarded because of receiver overruns.')
cmDSLYesterdaysRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysRxValidFrames.setDescription('Number of valid frames received.')
cmDSLYesterdaysTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysTxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysTxValidFrames.setDescription('Number of frames transmitted successfully')
cmDSLYesterdaysRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxNoBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysRxNoBuffers.setDescription('Number of receive frames discarded due to lack of buffers.')
cmDSLYesterdaysMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysMinNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysMinNoiseMargin.setDescription('Minimum noise margin encountered in the interval associated with thus table. Noise Margin ins not a measurable parameter for IDSL ports; therfore this value will always be 0 for IDSL ports.')
cmDSLYesterdaysRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysRxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysRxValidOctets.setDescription('Number of octets received in valid frames by the DSL port in the interval associated with this table.')
cmDSLYesterdaysTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 14), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysTxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysTxValidOctets.setDescription('Number of octets transmitted over the DSL port in the interval associated with this table.')
cmDSLYesterdaysPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 3, 1, 15), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLYesterdaysPortUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLYesterdaysPortUpTime.setDescription('Number of seconds that the DSL port was enbabled during the associated interval.')
cmDSLTodaysTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4), )
if mibBuilder.loadTexts: cmDSLTodaysTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysTable.setDescription('The DSL Todays Table contains the cumulative sum of the various statistics for the period from midnight to the most recenly completed interval.')
cmDSLTodaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSLTodaysIndex"))
if mibBuilder.loadTexts: cmDSLTodaysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysEntry.setDescription('An entry in cmDSLTodaysTable.')
cmDSLTodaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysIndex.setDescription('DSL port (interface) number (i.e ifIndex)')
cmDSLTodaysTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysTxUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysTxUnderruns.setDescription('Number of transmit underruns detected.')
cmDSLTodaysRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxTruncated.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysRxTruncated.setDescription('Number of frames truncated due to receiver overruns.')
cmDSLTodaysRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxBig.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysRxBig.setDescription('Number of receive frames that were discarded because they were too large.')
cmDSLTodaysRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysRxAborts.setDescription('Number of aborted frames received.')
cmDSLTodaysRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysRxAlignmentErrors.setDescription('Number of unaligned frames received.')
cmDSLTodaysRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysRxCRCErrors.setDescription('Number of frames received with CRC errors.')
cmDSLTodaysRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysRxOverruns.setDescription('Number of frames discarded because of receiver overruns.')
cmDSLTodaysRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysRxValidFrames.setDescription('Number of valid frames received.')
cmDSLTodaysTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysTxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysTxValidFrames.setDescription('Number of frames transmitted successfully')
cmDSLTodaysRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxNoBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysRxNoBuffers.setDescription('Number of receive frames discarded due to lack of buffers.')
cmDSLTodaysMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysMinNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysMinNoiseMargin.setDescription('Minimum noise margin encountered in the interval associated with thus table. Noise Margin ins not a measurable parameter for IDSL ports; therfore this value will always be 0 for IDSL ports.')
cmDSLTodaysRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysRxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysRxValidOctets.setDescription('Number of octets received in valid frames by the DSL port in the interval associated with this table.')
cmDSLTodaysTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 14), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysTxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysTxValidOctets.setDescription('Number of octets transmitted over the DSL port in the interval associated with this table.')
cmDSLTodaysPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 4, 1, 15), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSLTodaysPortUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSLTodaysPortUpTime.setDescription('Number of seconds that the DSL port was enbabled during the associated interval.')
cmDSL24HrTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5), )
if mibBuilder.loadTexts: cmDSL24HrTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrTable.setDescription('The DSL 24 Hour Table contains the cumulative sum of the various statistics for 96*cmAlarmSamplingInterval minutes worth of data or the preceding 24 hour period, whichever is less. With the default SamplingInterval of 15 minutes, this table will contain 24 hours worth of data. NOTE: With a SamplingInterval greater than 15 minutes, this table will contain some multiple of SamplingInterval so that the total is closest to, but not less than, 24 hours. (For example, with a SamplingInterval of 17 minutes, this table will contain 85 intervals = 1445 minutes = 24 hours and 5 minutes worth of data.)')
cmDSL24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDSL24HrIndex"))
if mibBuilder.loadTexts: cmDSL24HrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrEntry.setDescription('An entry in cmDSL24HrTable.')
cmDSL24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrIndex.setDescription('DSL port (interface) number (i.e ifIndex)')
cmDSL24HrTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrTxUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrTxUnderruns.setDescription('Number of transmit underruns detected.')
cmDSL24HrRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxTruncated.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrRxTruncated.setDescription('Number of frames truncated due to receiver overruns.')
cmDSL24HrRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxBig.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrRxBig.setDescription('Number of receive frames that were discarded because they were too large.')
cmDSL24HrRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrRxAborts.setDescription('Number of aborted frames received.')
cmDSL24HrRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrRxAlignmentErrors.setDescription('Number of unaligned frames received.')
cmDSL24HrRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrRxCRCErrors.setDescription('Number of frames received with CRC errors.')
cmDSL24HrRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrRxOverruns.setDescription('Number of frames discarded because of receiver overruns.')
cmDSL24HrRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrRxValidFrames.setDescription('Number of valid frames received.')
cmDSL24HrTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrTxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrTxValidFrames.setDescription('Number of frames transmitted successfully')
cmDSL24HrRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxNoBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrRxNoBuffers.setDescription('Number of receive frames discarded due to lack of buffers.')
cmDSL24HrMinNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrMinNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrMinNoiseMargin.setDescription('Minimum noise margin encountered in the interval associated with thus table. Noise Margin ins not a measurable parameter for IDSL ports; therfore this value will always be 0 for IDSL ports.')
cmDSL24HrRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrRxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrRxValidOctets.setDescription('Number of octets received in valid frames by the DSL port in the interval associated with this table.')
cmDSL24HrTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 14), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrTxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrTxValidOctets.setDescription('Number of octets transmitted over the DSL port in the interval associated with this table.')
cmDSL24HrPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 5, 1, 15), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDSL24HrPortUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmDSL24HrPortUpTime.setDescription('Number of seconds that the DSL port was enbabled during the associated interval.')
cmCpeDSLIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6), )
if mibBuilder.loadTexts: cmCpeDSLIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalTable.setDescription('Dsl Port info about Perf Counters')
cmCpeDSLIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDSLIntervalIndex"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDSLIntervalNumber"))
if mibBuilder.loadTexts: cmCpeDSLIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalEntry.setDescription('Dsl Port Performance Monitoring Counters')
cmCpeDSLIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalIndex.setDescription('DSL port (interface) number (i.e ifIndex)')
cmCpeDSLIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalNumber.setDescription('A value between 1 and 24, where 1 is the most recent hour interval and 24 is the oldest hour interval')
cmCpeDSLIntervalTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalTxUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalTxUnderruns.setDescription('Number of transmit underruns detected.')
cmCpeDSLIntervalRxTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxTruncated.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalRxTruncated.setDescription('Number of frames truncated due to receiver overruns.')
cmCpeDSLIntervalRxBig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxBig.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalRxBig.setDescription('Number of receive frames that were discarded because they were too large.')
cmCpeDSLIntervalRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalRxAborts.setDescription('Number of aborted frames received.')
cmCpeDSLIntervalRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalRxAlignmentErrors.setDescription('Number of unaligned frames received.')
cmCpeDSLIntervalRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalRxCRCErrors.setDescription('Number of frames received with CRC errors.')
cmCpeDSLIntervalRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalRxOverruns.setDescription('Number of frames discarded because of receiver overruns.')
cmCpeDSLIntervalRxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalRxValidFrames.setDescription('Number of valid frames received.')
cmCpeDSLIntervalTxValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalTxValidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalTxValidFrames.setDescription('Number of frames transmitted successfully')
cmCpeDSLIntervalRxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxNoBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalRxNoBuffers.setDescription('Number of receive frames discarded due to lack of buffers.')
cmCpeDSLIntervalRxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalRxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalRxValidOctets.setDescription('Number of valid octets received.')
cmCpeDSLIntervalTxValidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 7, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDSLIntervalTxValidOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDSLIntervalTxValidOctets.setDescription('Number of valid octets transmitted.')
cmIDSLModemTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1), )
if mibBuilder.loadTexts: cmIDSLModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemTable.setDescription('The IDSL Port Information table for Configuration and Management of IDSL ports.')
cmIDSLModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmIDSLModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemEntry.setDescription('An entry in the IDSL Port Information table.')
cmIDSLModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemIndex.setDescription('The value of this object indicates the combination of shelf, port and slot number (i.e ifIndex).')
cmIDSLModemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemOperState.setDescription('The value of this object indicates the operability state of this port.')
cmIDSLModemDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 144))).clone(namedValues=NamedValues(("dr64Kbps", 64), ("dr128Kbps", 128), ("dr144Kbps", 144)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIDSLModemDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemDataRate.setDescription('This object sets/displays the data rate, in kbps, for this port on a line card If the port is on an IDSL CPE this object only displays the data rate.')
cmIDSLModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inactive", 2), ("activating", 3), ("activated", 4), ("activatedCpeDetected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemState.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemState.setDescription("This object indicates the internal IDSL state. The value 'activatedCpeDectected' will indicate trained and CPE detected on far end.")
cmIDSLModemTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lineTerminated", 1), ("networkTerminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemTerminationMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemTerminationMode.setDescription('This object indicates the current operational mode of each port. All ports will operate in line terminated mode with the exception of except port #1 when it is being used to aquire network timing. (see cmIDSLBoardTimingMode for further details) ')
cmIDSLModemCpeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIDSLModemCpeCode.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemCpeCode.setDescription(" The value of this object describes certain charateristics that are unique to this CPE. For example line polarity, di-bit ordering, preactiviation signaling, etc. The CpeCode for a specific manufacturer's CPE is assigned and distributed by Copper Mountain Networks.")
cmIDSLModemSuccessfulTrains = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemSuccessfulTrains.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemSuccessfulTrains.setDescription('The is the number of successful trains for this port. This value is zero at powerup. This value is cleared whenver the operator changes the data rate for the port, or whenever the operator sets this object to 0.')
cmIDSLModemFailedTrainingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemFailedTrainingAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemFailedTrainingAttempts.setDescription('The is the number of failed training atttempts for this port. This value is zero at powerup. This value is cleared whenver the operator changes the data rate for the port, or whenever the operator sets this object to 0.')
cmIDSLModemCpeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemCpeResponses.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemCpeResponses.setDescription('The is the number of CPE responses to training sequences that have been seen on this port. The responses may lead to successful trains or not. This value is zero at powerup. This value is cleared whenver the operator changes the data rate for the port, or whenever the operator sets this object to 0.')
cmIDSLModemNetworkElements = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("oneElement", 1), ("twoElements", 2), ("threeElements", 3), ("fourElements", 4), ("fiveElements", 5), ("sixElements", 6), ("cpeOnly", 7), ("unknown", 8), ("invalid", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLModemNetworkElements.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemNetworkElements.setDescription("The value of this object indicates the current number of network elements in the loop including the CPE. This value will be 'invalid' when the LC modem is in NT mode. It will be 'unknown' when the number of elements has yet to be determined.")
cmIDSLModemActivationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIDSLModemActivationInterval.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLModemActivationInterval.setDescription('This is the re-training frequency (in seconds). Upon unsuccessful training, the LC shall wait cmIDSLModemActivationInterval seconds before attempting to retry. Default: 5 (also, sets of 0 are translated to 5)')
cmCpeIDSLModemTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2), )
if mibBuilder.loadTexts: cmCpeIDSLModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeIDSLModemTable.setDescription('The IDSL Port Information table for Configuration and Management of IDSL ports.')
cmCpeIDSLModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmCpeIDSLModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeIDSLModemEntry.setDescription('An entry in the IDSL Port Information table.')
cmCpeIDSLModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeIDSLModemIndex.setDescription('The value of this object indicates the combination of shelf, port and slot number (i.e ifIndex).')
cmCpeIDSLModemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeIDSLModemOperState.setDescription('The value of this object indicates the operability state of this port.')
cmCpeIDSLModemDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 144))).clone(namedValues=NamedValues(("dr64Kbps", 64), ("dr128Kbps", 128), ("dr144Kbps", 144)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeIDSLModemDataRate.setDescription('This object sets/displays the data rate, in kbps, for this port on a line card If the port is on an IDSL CPE this object only displays the data rate.')
cmCpeIDSLModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("activating", 3), ("activated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemState.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeIDSLModemState.setDescription('This object indicates the internal IDSL state.')
cmCpeIDSLModemTerminationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lineTerminated", 1), ("networkTerminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeIDSLModemTerminationMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeIDSLModemTerminationMode.setDescription('This object indicates the current operational mode of each port. All ports will operate in line terminated mode with the exception of except port #1 when it is being used to aquire network timing. (see cmIDSLBoardTimingMode for further details) ')
cmBundleTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1), )
if mibBuilder.loadTexts: cmBundleTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleTable.setDescription('This table contains the currently configured IMUX bundles. Bundle is a logical entity and represents the collection of ports. Each entry in the table is represented by bundle PII. Bundle PIIs are identified with a special slot number of 51.')
cmBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBundlePII"))
if mibBuilder.loadTexts: cmBundleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleEntry.setDescription('Each entry in the table represents collection of ports for the IMUX bundle. An entry in the table is indexed by bundle PII. (Bundle PII is a logical entity identified by the slot number value of 51). This entry will contain PII, EndPointID and status information of all the ports that are part of this bundle.')
cmBundlePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundlePII.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundlePII.setDescription('This value is used as an index into the table. An IMUX BundlePII is a logical PII and is identified by a logical slot number of of 51.')
cmBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleRowStatus.setDescription("This object is the rowStatus of the IMUX bundle. An IMUX bundle is enabled by setting this object to 'active' and is destroyed by setting this object to 'destroy'.")
cmBundleMember1PII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 3), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleMember1PII.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember1PII.setDescription('This is the PII of the first constituent DSL port.')
cmBundleMember1EndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember1EndPointID.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember1EndPointID.setDescription('This is the EndPoint ID that uniquely identifies the IMUX CPE connected to the DSL port indicated by Member1PII.')
cmBundleMember1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("waitForAdd", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember1Status.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember1Status.setDescription("This object indicates the current status of this DSL port. 'None' indicates that there is no link configured or the configured link has not trained. 'Active' indicates that the port is trained and available to the transmit user data. 'waitForAdd' indicates that the link is trained and the system is waiting for an addition acknowledgement from the IMUX CPE.")
cmBundleMember2PII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 6), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleMember2PII.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember2PII.setDescription('This is the PII of the second constituent DSL port.')
cmBundleMember2EndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember2EndPointID.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember2EndPointID.setDescription('This is the EndPoint ID that uniquely identifies the IMUX CPE connected to the DSL port indicated by Member2PII.')
cmBundleMember2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("waitForAdd", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember2Status.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember2Status.setDescription("This object indicates the current status of this DSL port. 'None' indicates that there is no link configured or the configured link has not trained. 'Active' indicates that the port is trained and available to the transmit user data. 'waitForAdd' indicates that the link is trained and the system is waiting for an addition acknowledgement from the IMUX CPE.")
cmBundleMember3PII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 9), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleMember3PII.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember3PII.setDescription('This is the PII of the third constituent DSL port.')
cmBundleMember3EndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember3EndPointID.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember3EndPointID.setDescription('This is the EndPoint ID that uniquely identifies the IMUX CPE connected to the DSL port indicated by Member3PII.')
cmBundleMember3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("waitForAdd", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember3Status.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember3Status.setDescription("This object indicates the current status of this DSL port. 'None' indicates that there is no link configured or the configured link has not trained. 'Active' indicates that the port is trained and available to the transmit user data. 'waitForAdd' indicates that the link is trained and the system is waiting for an addition acknowledgement from the IMUX CPE.")
cmBundleMember4PII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 12), CmObjectPII()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBundleMember4PII.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember4PII.setDescription('This is the PII of the fourth constituent DSL port.')
cmBundleMember4EndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember4EndPointID.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember4EndPointID.setDescription('This is the EndPoint ID that uniquely identifies the IMUX CPE connected to the DSL port indicated by Member4PII.')
cmBundleMember4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("waitForAdd", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBundleMember4Status.setStatus('mandatory')
if mibBuilder.loadTexts: cmBundleMember4Status.setDescription("This object indicates the current status of this DSL port. 'None' indicates that there is no link configured or the configured link has not trained. 'Active' indicates that the port is trained and available to the transmit user data. 'waitForAdd' indicates that the link is trained and the system is waiting for an addition acknowledgement from the IMUX CPE.")
cmCpeDataPortTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1), )
if mibBuilder.loadTexts: cmCpeDataPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTable.setDescription('This table contains configuration and status information for the EIA530 ports. The index for this table is the PII of the system port connected to one of the IMUX DSL ports.')
cmCpeDataPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDataPortIndex"))
if mibBuilder.loadTexts: cmCpeDataPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortEntry.setDescription('Each entry in the table contains configuration and status information for a data port. The index for this table is the PII of the system port connected to one of the IMUX DSL ports.')
cmCpeDataPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIndex.setDescription('PII of the system port connected to one of the IMUX DSL ports.')
cmCpeDataPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eia-530", 1), ("v35", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortType.setDescription('Data Port Type i.e. EIA-530 or V.35.')
cmCpeDataPortForceDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortForceDSR.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortForceDSR.setDescription('If enabled, DSR is ON regardless of OperState.')
cmCpeDataPortIgnoreDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortIgnoreDTR.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIgnoreDTR.setDescription('If this object is set to yes, CPE will not monitor DTR signal line. If set to no, CPE will de-assert DCD if DTR signal is OFF.')
cmCpeDataPortIgnoreRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortIgnoreRTS.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIgnoreRTS.setDescription('If this object is set to yes, CPE will not monitor RTS signal line. If set to no, CPE will de-assert DCD if RTS signal is OFF.')
cmCpeDataPortTerminalTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortTerminalTiming.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTerminalTiming.setDescription('If this object is set to yes, CPE will assert terminal timing.')
cmCpeDataPortTM = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTM.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTM.setDescription('Current state of TM signal. It is asserted when LL is ON.')
cmCpeDataPortLL = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortLL.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortLL.setDescription('Current state of LL signal. Local loopback is generated by DTE device.')
cmCpeDataPortRL = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortRL.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortRL.setDescription('Current state of RL signal. Remote loopback is generated by DTE device.')
cmCpeDataPortDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortDTR.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortDTR.setDescription('Current state of DTR signal.')
cmCpeDataPortRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortRTS.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortRTS.setDescription('Current state of RTS signal.')
cmCpeDataPortDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortDSR.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortDSR.setDescription('Current state of DSR signal. DSR is on if OperState value is enabled or testing.')
cmCpeDataPortCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortCTS.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortCTS.setDescription('Current state of CTS signal.')
cmCpeDataPortDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortDCD.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortDCD.setDescription('Current state of DCD signal.')
cmCpeDataPortTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("internal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTxClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTxClockSource.setDescription('Indicates whether the clock source is internal or external.')
cmCpeDataPortDTEDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortDTEDCE.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortDTEDCE.setDescription('Indicates whether the port is operating as DTE or DCE.')
cmCpeDataPortCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("crc-ccitt", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortCRC.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortCRC.setDescription('Indicates the type of CRC used on packets.')
cmCpeDataPortClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3136000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortClockRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortClockRate.setDescription('Clock rate of port in bps(bits per second). Defaults to 1544000 for loopback. Default to 1544000 for loopback.')
cmCpeDataPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortAdminState.setDescription('Current administrative state of the port.')
cmCpeDataPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortOperState.setDescription('Current operational state of the the port. Allowed values are diabled, enabled, testing.')
cmCpeDataPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeDataPortLoopbackConfig.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortLoopbackConfig.setDescription('Loopback configuration state of the port.')
cmCpeDataPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoop", 1), ("localLoop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortLoopbackStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortLoopbackStatus.setDescription('Loopback status of the port.')
cmCpeDataPortIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2), )
if mibBuilder.loadTexts: cmCpeDataPortIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalTable.setDescription('This table provides the transmit and receive statistics for the data ports. Sampling inteval is 15 minutes and each data port contains at the most 96 intervals. Interval number 1 represents the current interval. The index for this table is the PII of the system port connected to one of the IMUX DSL ports and the interval number.')
cmCpeDataPortIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDataPortIntervalIndex"))
if mibBuilder.loadTexts: cmCpeDataPortIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalEntry.setDescription('Each entry in the table contains the transmit and receive statistics for a data port. The index for this table is the PII of the system port connected to one of the IMUX DSL ports and the interval number.')
cmCpeDataPortIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalIndex.setDescription('PII of the system port connected to one of the IMUX DSL ports.')
cmCpeDataPortIntervalIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalIntervalNumber.setDescription('Interval number. Interval durations is 15 minutes. Interval number 1 represents the current interval.')
cmCpeDataPortIntervalRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxFrames.setDescription('Number of frames received on the data port in this interval.')
cmCpeDataPortIntervalRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxOctets.setDescription('Number of octets received on the data port in this interval.')
cmCpeDataPortIntervalRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxDiscards.setDescription('Number of received frames discarded in this interval.')
cmCpeDataPortIntervalRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalRxErrors.setDescription('Number of erred frames received on the data port in this interval.')
cmCpeDataPortIntervalTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxFrames.setDescription('Number of frames transmitted on the data port in this interval.')
cmCpeDataPortIntervalTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxOctets.setDescription('Number of octets transmitted on the data port in this interval.')
cmCpeDataPortIntervalTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxDiscards.setDescription('Number of transmission intended frames discarded in this interval.')
cmCpeDataPortIntervalTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortIntervalTxErrors.setDescription('Number of erred frames transmitted on the data port in this interval.')
cmCpeDataPortTotalTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3), )
if mibBuilder.loadTexts: cmCpeDataPortTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalTable.setDescription('This table provides the transmit and receive statistics for the data ports since the system was restarted. The index for this table is the PII of the system port connected to one of the IMUX DSL ports.')
cmCpeDataPortTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeDataPortTotalIndex"))
if mibBuilder.loadTexts: cmCpeDataPortTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalEntry.setDescription('Each entry in the table contains the transmit and receive statistics for a data port. The index for this table is the PII of the system port connected to one of the IMUX DSL ports.')
cmCpeDataPortTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalIndex.setDescription('PII of the system port connected to one of the IMUX DSL ports.')
cmCpeDataPortTotalRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalRxFrames.setDescription('Total number of frames received on the data port since the system was restarted.')
cmCpeDataPortTotalRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalRxOctets.setDescription('Total number of octets received on the data port since the system was restarted.')
cmCpeDataPortTotalRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalRxDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalRxDiscards.setDescription('Total number of received frames discarded on the data port since the system was restarted.')
cmCpeDataPortTotalRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalRxErrors.setDescription('Total number of erred frames received on the data port since the system was restarted.')
cmCpeDataPortTotalTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalTxFrames.setDescription('Total number of frames transmitted on the data port since the system was restarted.')
cmCpeDataPortTotalTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalTxOctets.setDescription('Total number of octets transmitted on the data port since the system was restarted.')
cmCpeDataPortTotalTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalTxDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalTxDiscards.setDescription('Total number of transmission intended frames discarded on the data port since the system was restarted.')
cmCpeDataPortTotalTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 10, 12, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeDataPortTotalTxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeDataPortTotalTxErrors.setDescription('Total number of erred frames transmitted on the data port since the system was restarted.')
cmSysObjectClass = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256))).clone(namedValues=NamedValues(("system", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysObjectClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysObjectClass.setDescription('This is the Copper Mountain object class of this system.')
cmSysOperState = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysOperState.setDescription('This is the current operability state of this resource.')
cmSysMaster = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysMaster.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysMaster.setDescription(' DEPRECATED. No longer supported. ')
cmSysTrapAddress = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 4), IpAddress())
if mibBuilder.loadTexts: cmSysTrapAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cmSysTrapAddress.setDescription('Obsoleted 4/1/99. IP Address of the SNMP Manager to which traps are sent.')
cmSysConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysConfigFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysConfigFileName.setDescription('The FileName of the saved configuration file')
cmSysCommand = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("readConfig", 2), ("saveConfig", 3), ("restart", 4), ("takeover", 5), ("relinquish", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSysCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysCommand.setDescription(' Setting this object issues command for the system to execute. A GET on this object is the last operator command issued. ')
cmSysCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("pending", 2), ("inprogress", 3), ("aborted", 4), ("succeeded", 5), ("failed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysCommandStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysCommandStatus.setDescription('This is the status of the last operator-issued command.')
cmSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysVersion.setDescription('This is the system version, type major.minor')
cmSysCalendarTime = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSysCalendarTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysCalendarTime.setDescription('The calendar time on the system.')
cmSysPrimaryPII = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 10), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysPrimaryPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysPrimaryPII.setDescription('This is the PII of the SCM acting as primary')
cmSysSecondaryPII = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 11), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysSecondaryPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysSecondaryPII.setDescription('This is the PII of the SCM acting as secondary')
cmSysRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSysRedundancy.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysRedundancy.setDescription('If enabled, the secondary can takeover as primary.')
cmSysConfigSynch = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saved", 1), ("notSaved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysConfigSynch.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysConfigSynch.setDescription('Current sate of system configuration: Saved indicates configuration is saved on both the Primary and Secondary SCMs for a redundant system; and on the local SCM for a non-redundant system. NotSaved indicates operator has made configuration changes, but not saved them.')
cmSysMyPII = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 14), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysMyPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysMyPII.setDescription('This is the PII of the SCM to which you are currently attached.')
cmSysShelfCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmSysShelfCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysShelfCount.setDescription('The number of shelves currently reporting as part of the system.')
cmSysExpIpSubNet = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSysExpIpSubNet.setStatus('mandatory')
if mibBuilder.loadTexts: cmSysExpIpSubNet.setDescription('The IP address will be interpreted as a class C subnetwork for internal use in the system. Addresses from the subnetwork will be used to assign each expansion SCM an IP address to be used for loading. Operators must insure this address range does not conflict with other addresses assigned and provide any necessary security filtering to prevent external access. The format of the class C subnetwork should be: A.B.C.0 where A, B and C are (0-255).')
cmBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1), )
if mibBuilder.loadTexts: cmBoardTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardTable.setDescription('The Board Information table for Configuration and Management of Boards.')
cmBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"))
if mibBuilder.loadTexts: cmBoardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardEntry.setDescription('An entry in the Board table.')
cmBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardIndex.setDescription('An Unique index for the Board.')
cmBoardObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardObjectClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardObjectClass.setDescription("The value of this object defines the object class associated with this board. NOTE: For this object, only 'Board' and 'brd*' classes are used.")
cmBoardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardOperState.setDescription('This gives the Operation-state of the Board.')
cmBoardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardUpTime.setDescription('This value indicates the elapsed time since the board last powered up.')
cmBoardFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardFileName.setDescription('The name of the file downloaded to this board.')
cmBoardFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardFileDate.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardFileDate.setDescription('The date/time that the downloaded file was built.')
cmBoardHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 9, 13, 14, 15, 19, 20, 21))).clone(namedValues=NamedValues(("hwSystemControlModule", 1), ("hwSDSL10xModule-1", 2), ("hwBufferControlModule", 4), ("hwV35-Wan", 5), ("hwSDSL10xModule", 6), ("hwSDSL30xModule", 7), ("hwHSSI-WAN", 9), ("hwDS3RFR-WAN", 13), ("hwSDSL30xModule-24", 14), ("hwIDSLModule-24", 15), ("hwCopperBaySCM", 19), ("hwLANModule", 20), ("hwDS3ATM-WAN", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardHwType.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardHwType.setDescription('This is the system board type.')
cmBoardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardNumPorts.setDescription('This is the number of ports on this board.')
cmBoardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardHwVersion.setDescription('This is the hardware version of this board described in the format <major rev>.<minor rev>. For example: 1.0')
cmBoardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardSwVersion.setDescription(' This is the software version of this board described in the format <major rev>.<minor rev>.<buildnumber>. For example, 1.0.6.')
cmBoardPromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardPromVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardPromVersion.setDescription('This is the PROM software version described in the format <major rev>.<minor rev>. For example: 1.0.6')
cmBoardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("systemMaster", 2), ("shelfMaster", 3), ("standby", 4), ("primary", 5), ("secondary", 6))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardRole.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardRole.setDescription('This is the role of this board in the system.')
cmBoardConfigChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardConfigChange.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardConfigChange.setDescription('This is the calendar time when the configuration was last changed.')
cmBoardCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("restart", 1), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmBoardCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardCommand.setDescription('Lists the last operational command issued (get) or it issues (sets) a command as specified above .')
cmBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardSerialNumber.setDescription('This is the serial number of the board.')
cmBoardClusterRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("master", 2), ("expansion", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardClusterRole.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardClusterRole.setDescription("SCMs are either 'master' (have WAN interfaces) or 'expansion'. Redundant Bays have 1 'master' on each side (left and right). This object is marked as 'notApplicable' for all other boards.")
cmBoardInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmBoardInformation.setStatus('mandatory')
if mibBuilder.loadTexts: cmBoardInformation.setDescription('This is additional information about this particular board in the system. The contents of the field are defined by the specific type of board.')
cmIDSLBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2), )
if mibBuilder.loadTexts: cmIDSLBoardTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLBoardTable.setDescription('The addition information beyond that contained in the cmBoardTable required to configure and manage an IDSL Line Card.')
cmIDSLBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardIndex"))
if mibBuilder.loadTexts: cmIDSLBoardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLBoardEntry.setDescription('An entry in the Board table.')
cmIDSLBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLBoardIndex.setDescription('The value of this object indicates the combination of shelf, port and slot number (i.e ifIndex).')
cmIDSLBoardTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internallyTimed", 1), ("locallyTimed", 2), ("networkTimedSlave", 3), ("networkTimedMaster", 4), ("networkTimedBackup", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIDSLBoardTimingMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLBoardTimingMode.setDescription("The value of this object defines the IDSL line card's timing mode as follows: internallyTimed - The IDSL line card provides an internally generated clock to all ports on the card. locallyTimed - the IDSL Line Card acquires it's clock from port #1 and distributes it to the all other ports on this card. networkTimedSlave - the IDSL Line Card aquires timing from the backplane. If the backplance clock is missing it provides internal timing to all ports on this card. networkTimedMaster - The IDSL Line Card aquires a clock according to the following protocol: a) aquire clock from port #1 and distribute it both locally and across the backplane. b) if step a) fails then aquire the clock from the backplane. c) if steps a) and b) both fail provide internal timing to all ports on this card. networkBackup - The IDSL Line Card aquires a clock for this shelf according to the following protocol: a) aquire clock from the backplane. b) if step a) fails then aquire the clock from port #1 and distribute this clock locally on this card and across the backplane. c) if steps a) and b) both fail provide internal timing to all ports on this card. ")
cmIDSLBoardTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internallyTimed", 1), ("locallyTimed", 2), ("networkTimedSlave", 3), ("networkTimedMaster", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLBoardTimingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLBoardTimingStatus.setDescription("The value of this object indicates how the IDSL Line Card is currently deriving timing. (See TimingMode for a description of possible timing derivation scenarios). The possible values of cmIDSLBoardTimingStatus are as follows: internallyTimed - The IDSL Line Card is currently deriving timing for all of it's ports via internal timing. locallyTimed - The IDSL Line Card is currently aquiring network timing from it's port #1 and then distributing it to all ports on this card. networkTimedSlave - The IDSL Line Card is currently aquiring network timing from the backplane. networkTimedMaster - The IDSL Line Card is currently aquiring network timing from it's port #1 and then distributing it to all ports on this card aas well as the backplane. ")
cmIDSLBoardTimingAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIDSLBoardTimingAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: cmIDSLBoardTimingAvailable.setDescription("This value indicates wether or not the IDSL Line Card's timing source is valid. The status values are defined as follows: yes - Indicates that this IDSL Line Card is configured as a Globally Timed Master or Globally Timed Backup, and port #1 on this IDSL Line Card is trained, e.g. it can acquire timing from port #1. no - Indicates that this IDSL Line Card is configured as a Globally Timed Master or Globally Timed Backup, and Port #1 on this IDSL Line Card is not trained, e.g. it cannot acquire a clock from port 1. A value of no can also indicate that there is no way to determine whether timing is available because this IDSL Line Card is either Locally Timed,Internally Timed, or Globally Timed Slave. ")
cmStateTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1), )
if mibBuilder.loadTexts: cmStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmStateTable.setDescription('The State Information table for the Control and Management of the State of System, Shelf, Board, Port and Link.')
cmStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmStateGenericClass"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmStateIndex"))
if mibBuilder.loadTexts: cmStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmStateEntry.setDescription('An entry in the DSL Port Information table.')
cmStateGenericClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 768, 1024, 1280, 2304))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("board", 768), ("port", 1024), ("link", 1280), ("support", 2304)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateGenericClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmStateGenericClass.setDescription('The value of this object is the generic object class of this resource.')
cmStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmStateIndex.setDescription('The value of this object identifies the specific resource in the object class.')
cmStateObjClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateObjClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmStateObjClass.setDescription('The value of this object indicates the Object class of the resource.')
cmStateOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmStateOperState.setDescription('The value of this object indicates the current operability state of the resource.')
cmStateLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmStateLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: cmStateLastChange.setDescription('This value indicates the value of uptime at last change.')
cmShelfTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1), )
if mibBuilder.loadTexts: cmShelfTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfTable.setDescription('The shelf information table for the control and management of the state of a shelf.')
cmShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmShelfIndex"))
if mibBuilder.loadTexts: cmShelfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfEntry.setDescription('An entry in the shelf information table to contain configuration and status info specific to the shelf.')
cmShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfIndex.setDescription('The value of this object identifies the unique index for the shelf.')
cmShelfObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfObjectClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfObjectClass.setDescription("The value of this object identifies the Object class to which this shelf belongs. The object class identifies the physical packaging of the shelf. Below is a diagram of the ce200Shelf. NOTE: For this object, only 'shelf*' classes are used. | | | | | | | | | | | | | | | | | | | | |P |S |W |W |B |D |D |D |D |D |D |D |D |B |S |W |W |P | | |W |C |A |A |C |S |S |S |S |S |S |S |S |C |C |A |A |W | | |R |M |N |N |M |L |L |L |L |L |L |L |L |M |M |N |N |R | | | | | | | |M |M |M |M |M |M |M |M | | | | | | | slot 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ")
cmShelfOperability = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfOperability.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfOperability.setDescription('The value of this object identifies the current operability state of this shelf.')
cmShelfUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfUpTime.setDescription('The value of this object indicates the elapsed since shelf was last powered up.')
cmShelfMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfMaster.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfMaster.setDescription('The value of this object identifies the SCM board operating as the shelf master.')
cmShelfBoardMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfBoardMap.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfBoardMap.setDescription('The value of this object is a bit map of boards in the shelf, for example bit 0 = Fan, bit 1 = slot1, bit 2 = slot 2 .')
cmShelfCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmShelfCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfCommand.setDescription('This object allows a single shelf to be restarted vs. restarting the entire system.')
cmShelfShelfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmShelfShelfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmShelfShelfNumber.setDescription('The value of this object indicates the configured position of this shelf. If the value of this object is set to one, it is configured to be the first shelf on the rack. If the value of this object is set to two, this shelf is the second shelf on the rack.')
cmFileBootDevice = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("fileServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFileBootDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cmFileBootDevice.setDescription('The value of this object is the type of Device that the system booted from.')
cmFileFSName = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFileFSName.setStatus('mandatory')
if mibBuilder.loadTexts: cmFileFSName.setDescription('This is the name of the file server being used as a default for file operations for this system.')
cmFileFSAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFileFSAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmFileFSAddr.setDescription("IP Address of the remote file server that contains the CMN software. If the system doesn' find a requested file locally, it will attempt to load the specified file from this remote file server.")
cmFileFSUsername = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFileFSUsername.setStatus('mandatory')
if mibBuilder.loadTexts: cmFileFSUsername.setDescription('This is the user name that will be used on all the FTP requests to the remote file server specified in cmFileFSAddr.')
cmFileFSPassword = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFileFSPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cmFileFSPassword.setDescription('This is the password that will be used on all FTP requests to the remote file server specified in cmFileFSAddr. When read back, this password will alwasys display ****.')
cmFileFLASHDir = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFileFLASHDir.setStatus('mandatory')
if mibBuilder.loadTexts: cmFileFLASHDir.setDescription('This is the root directory path on the flash file server that contains the files for this system.')
cmFileFSDir = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFileFSDir.setStatus('mandatory')
if mibBuilder.loadTexts: cmFileFSDir.setDescription('This is the base directory name that will be used for all requests to the remote FTP server specified in the cmFileFSAddr. An appropriate subdirectory name based on the same directory structure used in the flash will be appended to the base directory.')
cmCpeBoardTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1), )
if mibBuilder.loadTexts: cmCpeBoardTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardTable.setDescription('Board Information table for Configuration and Management of CPE Boards.')
cmCpeBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmCpeBoardIndex"))
if mibBuilder.loadTexts: cmCpeBoardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardEntry.setDescription('An entry in the Board table.')
cmCpeBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardIndex.setDescription('This is the PII of the CPE connected to the system. The decimal format is: fabbccdddd. Where f=1 for a CPE, a is the shelf, bb is the slot and cc is the port. dddd is always 0000 for a CPE.')
cmCpeBoardObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardObjectClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardObjectClass.setDescription("The value of this object defines the object class associated with this CPE. NOTE: For this object, only 'cr*' or 'netopia*' classes are used.")
cmCpeBoardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardOperState.setDescription('This gives the Operability state of this CPE')
cmCpeBoardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardUpTime.setDescription('This value indicates the elapsed time since the board last powered up.')
cmCpeBoardFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardFileName.setDescription('The name of the file downloaded to this board.')
cmCpeBoardFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardFileDate.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardFileDate.setDescription('The date/time that the downloaded code file was built.')
cmCpeBoardHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 8, 10, 16, 17, 22, 23))).clone(namedValues=NamedValues(("hwCR201-10x", 3), ("hwCR201-30x", 8), ("hwCR201-SDSL", 10), ("hwNetopia-SDSL", 16), ("hwCR201-IDSL", 17), ("hwCPE-SDSL", 22), ("hwCPE-IDSL", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardHwType.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardHwType.setDescription('This is the hardware type of this CPE.')
cmCpeBoardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardNumPorts.setDescription('This is the number of ports on this CPE.')
cmCpeBoardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardHwVersion.setDescription('This is the hardware version of this board described in the format <major rev>.<minor rev>. For example: 1.0')
cmCpeBoardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardSwVersion.setDescription('This is the software version described in the format <major rev>.<minor rev>. For example: 1.0.6')
cmCpeBoardPromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardPromVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardPromVersion.setDescription('This is the PROM software version described in the format <major rev>.<minor rev>. For example: 1.0.6')
cmCpeBoardConfigChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardConfigChange.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardConfigChange.setDescription('This is the calendar time when the configuration on this CPE was last changed.')
cmCpeBoardCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("restart", 1), ("erase", 2), ("upgrade", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmCpeBoardCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardCommand.setDescription('Lists the last operational command issued (GET) to the CPE or it issues (SETs) a command as specified above .')
cmCpeBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardSerialNumber.setDescription('This is the serial number of the CPE board.')
cmCpeBoardVendorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardVendorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardVendorDescription.setDescription('The is a CPE supplied text string that identifies the type of CPE. This provides a way for a new CPE to be integrated with the system without requiring changes to the system itself.')
cmCpeBoardGroupMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardGroupMap.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardGroupMap.setDescription('Each octet in this string contains a Group ID that identifies a Copper Mountain database/MIB group that this CPE supports. The supported database/MIB groups represented by different octet values are as follows: 56 = cmCpeHDSLModemTable 57 = cmCpeDSLIntervalTable 58 = cmCpeEthernetIntervalTable 64 = cmCpeBoardTable 97 = cmCpeIDSLModemTable 130 = cmCpeDataPortTable 131 = cmCpeDataPortIntervalTable 132 = cmCpeDataPortTotalTable ')
cmCpeBoardManagementOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmCpeBoardManagementOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cmCpeBoardManagementOptions.setDescription('This is a bit mapped object that defines the management options supported by this CPE. Bit0 (LSB) - CMCP Software Download Flag. If this bit is 0, this CPE does NOT support download through CMCP. If this bit is 1, this CPE does support download through CMCP. ')
cmHSSITable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1), )
if mibBuilder.loadTexts: cmHSSITable.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSITable.setDescription('The HSSI Information table for Configuration and Management of HSSI ports.')
cmHSSIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHSSIIndex"))
if mibBuilder.loadTexts: cmHSSIEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSIEntry.setDescription('An entry in the HSSI table.')
cmHSSIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSIIndex.setDescription('Unique identifier for this port described in the format <shelf>.<slot>.<port>. ')
cmHSSIIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSIIfIndex.setDescription('The ifIndex value of this HSSI interface. The index must be greater than or equal to 1')
cmHSSIDCEReady = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-ready", 1), ("ready", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIDCEReady.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSIDCEReady.setDescription('Input - indicates whether DCE is ready to transmit data.')
cmHSSIDTEReady = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-ready", 1), ("ready", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIDTEReady.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSIDTEReady.setDescription('Output - indicates whether DTE is ready to transmit data.')
cmHSSIDTEDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIDTEDCE.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSIDTEDCE.setDescription('Specifies the interface type of the port as DTE or DCE.')
cmHSSILoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local-line", 2), ("remote-line", 3), ("local-digital", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSILoopback.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSILoopback.setDescription('Indicates the current loopback state of the DTE.')
cmHSSITestmode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSITestmode.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSITestmode.setDescription('Indicates the current loopback state of the DCE.')
cmHSSISync = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync-off", 1), ("sync-on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSISync.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSISync.setDescription('Indicated the presence(sync-on) or absence (sync-off) of HDLC flags.')
cmHSSITxClockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSITxClockPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSITxClockPresent.setDescription('Indicates whether the transmit clock is detected.')
cmHSSICRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("crc-16", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHSSICRC.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSICRC.setDescription('The CRC format used on all frames received and transmitted by the HSSI-WAN module. Currently the HSSI-WAN module only supports CRC-16.')
cmHSSIClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmHSSIClockRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSIClockRate.setDescription("The clock rate of port in bits per second (bps). The value of this object is supplied to this port by the connected equipment. The value of this object can only be altered when the frDlciLinkEnable is set to 'disabled'. The new value will not take effect until the value of the frDlciLinkEnable is set to 'enabled'. Example: 1544000")
cmHSSIAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSIAdminState.setDescription('The administrative state of the HSSI port')
cmHSSIOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmHSSIOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmHSSIOperState.setDescription('The operational state of the HSSI port')
cmV35Table = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1), )
if mibBuilder.loadTexts: cmV35Table.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35Table.setDescription('The V.35 Information table for Configuration and Management of V.35 ports.')
cmV35Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmV35Index"))
if mibBuilder.loadTexts: cmV35Entry.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35Entry.setDescription('An entry in the V.35 table.')
cmV35Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35Index.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35Index.setDescription('Unique identifier for this port described in the format <shelf>.<slot>.<port>. ')
cmV35IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35IfIndex.setDescription('The ifIndex associated with this port.')
cmV35DSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35DSR.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35DSR.setDescription('Indicates the current state of the DSR input signal')
cmV35DCD = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35DCD.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35DCD.setDescription('Indicates the current state of the DTE input signal.')
cmV35CTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35CTS.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35CTS.setDescription('Indicates the current state of the CTS input signal.')
cmV35DTR = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35DTR.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35DTR.setDescription('Indicates the current state of the DTR output signal.')
cmV35RTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35RTS.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35RTS.setDescription('Indicates the current state of the RTS output signal.')
cmV35DTEDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35DTEDCE.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35DTEDCE.setDescription('Indicates whether the port is operating as a DCE or a DTE.')
cmV35Sync = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync-off", 1), ("sync-on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35Sync.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35Sync.setDescription('If on, indicates the presence of HLDC flags on the physical link.')
cmV35TxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clock-ext", 1), ("clock-int", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35TxClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35TxClockSource.setDescription('Indicates the whether the transmit clock source is internal or external port.')
cmV35CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("crc-CCITT", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmV35CRC.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35CRC.setDescription('Indicates the type of Cyclical Redundancy Check (CRC) format used on the transmitted from this port.')
cmV35ClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35ClockRate.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35ClockRate.setDescription('The clock rate of port in bits per second (bps). Example: 1544000')
cmV35AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35AdminState.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35AdminState.setDescription('The administrative state of the V.35 port')
cmV35OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmV35OperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmV35OperState.setDescription('The operational state of the V.35 port')
cmTrapEventSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventSeqNum.setDescription('This object specifies the sequence number of the most recent event.')
cmTrapCriticalAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapCriticalAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapCriticalAlarmCount.setDescription('This object specifies the number of uncleared critical alarms.')
cmTrapMajorAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapMajorAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapMajorAlarmCount.setDescription('This object specifies the number of uncleared major alarms.')
cmTrapMinorAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapMinorAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapMinorAlarmCount.setDescription('This object specifies the number of uncleared minor alarms.')
cmTrapWarningCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapWarningCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapWarningCount.setDescription('This object specifies the number of uncleared warnings.')
cmTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6), )
if mibBuilder.loadTexts: cmTrapReceiverTable.setStatus('obsolete')
if mibBuilder.loadTexts: cmTrapReceiverTable.setDescription('Obsoleted 4/1/99. This table contains the address and security information for all SNMP managers that are configured to received traps from the system.')
cmTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapReceiverIPAddr"))
if mibBuilder.loadTexts: cmTrapReceiverEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cmTrapReceiverEntry.setDescription('Obsoleted 4/1/99. An entry in the trap receiver table.')
cmTrapReceiverIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: cmTrapReceiverIPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: cmTrapReceiverIPAddr.setDescription('Obsoleted 4/1/99. The value of this object specifies the IP Address of the manager that is to receive traps')
cmTrapReceiverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: cmTrapReceiverPort.setStatus('obsolete')
if mibBuilder.loadTexts: cmTrapReceiverPort.setDescription('Obsoleted 4/1/99. This object specifies the IP port number of the manager that is to receive traps.')
cmTrapReceiverCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 3), DisplayString())
if mibBuilder.loadTexts: cmTrapReceiverCommunity.setStatus('obsolete')
if mibBuilder.loadTexts: cmTrapReceiverCommunity.setDescription('Obsoleted 4/1/99. This object specifies the community string for the manager that is to receive traps.')
cmTrapReceiverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("create", 4), ("createAndWait", 5), ("delete", 6))))
if mibBuilder.loadTexts: cmTrapReceiverRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: cmTrapReceiverRowStatus.setDescription('Obsoleted 4/1/99. This object controls the creation and deletion of a row in the trap receiver table.')
cmTrapReceiverOwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 6, 1, 5), DisplayString())
if mibBuilder.loadTexts: cmTrapReceiverOwnerString.setStatus('obsolete')
if mibBuilder.loadTexts: cmTrapReceiverOwnerString.setDescription('Obsoleted 4/1/99. The object specifies additional textual information used to identify and describe the manager that is to receive traps.')
cmTrapEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7), )
if mibBuilder.loadTexts: cmTrapEventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogTable.setDescription('This table contains the 1000 most recent events.')
cmTrapEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"))
if mibBuilder.loadTexts: cmTrapEventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogEntry.setDescription('An entry in the event log table.')
cmTrapEventLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogSeqNum.setDescription('The sequence number of this entry in the event table.')
cmTrapEventLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47))).clone(namedValues=NamedValues(("coldStart", 1), ("boardDown", 2), ("boardUp", 3), ("linkDown", 4), ("linkUp", 5), ("loginFailed", 6), ("loginSucceeded", 7), ("loginsSaturated", 8), ("loginsAvailable", 9), ("loginSuspended", 10), ("loginAllowed", 11), ("bootFileFail", 12), ("bootFileSucceeded", 13), ("logout", 14), ("attributeChanged", 15), ("configReadFail", 16), ("configReadSucceed", 17), ("configWriteFail", 18), ("configWriteSucceed", 19), ("stateChange", 20), ("dLCIStateDisabled", 21), ("dLCIStateEnabled", 22), ("diagnostic", 23), ("boardRestart", 24), ("fanFault", 25), ("fanFaultClear", 26), ("powerSupplyFault", 27), ("powerSupplyClear", 28), ("testStatus", 29), ("testError", 30), ("loopStatusChange", 31), ("risingThresholdAlert", 32), ("ds3LineStatusAlarm", 33), ("ds3LineStatusClear", 34), ("idslTimingLossAlarm", 35), ("idslTimingLossClear", 36), ("redundancyChanged", 37), ("roleChanged", 38), ("redundancyConflict", 39), ("maintSucceed", 40), ("maintFailed", 41), ("fallingThresholdAlert", 42), ("rateFallbackAlarm", 43), ("rateFallbackClear", 44), ("endPointConflictAlarm", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogType.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogType.setDescription('This object specifies the type of event.')
cmTrapEventLogObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogObjectClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogObjectClass.setDescription('The value of this field indicates the system Object Class associated with the resource reporting the event.')
cmTrapEventLogClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogClassId.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogClassId.setDescription('This object specifies the object class that generated the event.')
cmTrapEventLogProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogProbableCause.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogProbableCause.setDescription('This object specifies the probable cause of the event.')
cmTrapEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("information", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogSeverity.setDescription('The value of this field indicates the severity assigned to this event by the system.')
cmTrapEventLogTimeTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogTimeTag.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogTimeTag.setDescription('This object specifies the time that the event occurred.')
cmTrapEventLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapEventLogText.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapEventLogText.setDescription('This object contains any additional information need to describe the event.')
cmTrapAlarmLogTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8), )
if mibBuilder.loadTexts: cmTrapAlarmLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogTable.setDescription('This table contains the 1000 most recent outstanding alarms.')
cmTrapAlarmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapAlarmLogSeqNum"))
if mibBuilder.loadTexts: cmTrapAlarmLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogEntry.setDescription('An entry in the alarm log table.')
cmTrapAlarmLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogSeqNum.setDescription('The sequence number of this entry in the alarm table.')
cmTrapAlarmLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47))).clone(namedValues=NamedValues(("coldStart", 1), ("boardDown", 2), ("boardUp", 3), ("linkDown", 4), ("linkUp", 5), ("loginFailed", 6), ("loginSucceeded", 7), ("loginsSaturated", 8), ("loginsAvailable", 9), ("loginSuspended", 10), ("loginAllowed", 11), ("bootFileFail", 12), ("bootFileSucceeded", 13), ("logout", 14), ("attributeChanged", 15), ("configReadFail", 16), ("configReadSucceed", 17), ("configWriteFail", 18), ("configWriteSucceed", 19), ("stateChange", 20), ("dLCIStateDisabled", 21), ("dLCIStateEnabled", 22), ("diagnostic", 23), ("boardRestart", 24), ("fanFault", 25), ("fanFaultClear", 26), ("powerSupplyFault", 27), ("powerSupplyClear", 28), ("testStatus", 29), ("testError", 30), ("loopStatusChange", 31), ("risingThresholdAlert", 32), ("ds3LineStatusAlarm", 33), ("ds3LineStatusClear", 34), ("idslTimingLossAlarm", 35), ("idslTimingLossClear", 36), ("redundancyChanged", 37), ("roleChanged", 38), ("redundancyConflict", 39), ("maintSucceed", 40), ("maintFailed", 41), ("fallingThresholdAlert", 42), ("rateFallbackAlarm", 43), ("rateFallbackClear", 44), ("endPointConflictAlarm", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogType.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogType.setDescription('This object specifies the type of alarm.')
cmTrapAlarmLogObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogObjectClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogObjectClass.setDescription('The value of this field indicates the system Object Class associated with the resource reporting the event.')
cmTrapAlarmLogClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogClassId.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogClassId.setDescription('This object specifies the object class that generated the alarm.')
cmTrapAlarmLogProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogProbableCause.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogProbableCause.setDescription('This object specifies the probable cause of the alarm.')
cmTrapAlarmLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("information", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrapAlarmLogSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogSeverity.setDescription('The value of this field indicates the severity assigned to this event by the system.')
cmTrapAlarmLogTimeTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogTimeTag.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogTimeTag.setDescription('This object specifies the time that the alarm occurred.')
cmTrapAlarmLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapAlarmLogText.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapAlarmLogText.setDescription('This object contains any additional information need to describe the event.')
cmTrapTypeLogTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9), )
if mibBuilder.loadTexts: cmTrapTypeLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogTable.setDescription('This table contains the 1000 most recent events sorted first by internal event type, and second by sequence number.')
cmTrapTypeLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapTypeLogType"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapTypeLogSeqNum"))
if mibBuilder.loadTexts: cmTrapTypeLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogEntry.setDescription('An entry in the Trap Type log table.')
cmTrapTypeLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47))).clone(namedValues=NamedValues(("coldStart", 1), ("boardDown", 2), ("boardUp", 3), ("linkDown", 4), ("linkUp", 5), ("loginFailed", 6), ("loginSucceeded", 7), ("loginsSaturated", 8), ("loginsAvailable", 9), ("loginSuspended", 10), ("loginAllowed", 11), ("bootFileFail", 12), ("bootFileSucceeded", 13), ("logout", 14), ("attributeChanged", 15), ("configReadFail", 16), ("configReadSucceed", 17), ("configWriteFail", 18), ("configWriteSucceed", 19), ("stateChange", 20), ("dLCIStateDisabled", 21), ("dLCIStateEnabled", 22), ("diagnostic", 23), ("boardRestart", 24), ("fanFault", 25), ("fanFaultClear", 26), ("powerSupplyFault", 27), ("powerSupplyClear", 28), ("testStatus", 29), ("testError", 30), ("loopStatusChange", 31), ("risingThresholdAlert", 32), ("ds3LineStatusAlarm", 33), ("ds3LineStatusClear", 34), ("idslTimingLossAlarm", 35), ("idslTimingLossClear", 36), ("redundancyChanged", 37), ("roleChanged", 38), ("redundancyConflict", 39), ("maintSucceed", 40), ("maintFailed", 41), ("fallingThresholdAlert", 42), ("rateFallbackAlarm", 43), ("rateFallbackClear", 44), ("endPointConflictAlarm", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogType.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogType.setDescription('This object specifies the type of event.')
cmTrapTypeLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogSeqNum.setDescription('The sequence number of this entry in the event table.')
cmTrapTypeLogObjectClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 512, 513, 514, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1792, 1793, 1794, 1795, 1798, 1799, 1801, 1802, 2049, 2304, 2305, 2306))).clone(namedValues=NamedValues(("system", 256), ("shelf", 512), ("ce200Shelf", 513), ("ce150Shelf", 514), ("board", 768), ("brdSystemControlModule", 769), ("brdSDSL10xModule-1", 770), ("brdSDSL10xModule", 771), ("brdBufferControlModule", 772), ("brdV35-Wan", 773), ("brdSDSL30xModule", 774), ("brdHSSI-WAN", 775), ("brdDS3FR-WAN", 776), ("brdSDSL30xModule-24", 777), ("brdIDSLModule-24", 778), ("brdDS3ATM-WAN", 779), ("brdCopperBaySCM", 780), ("brdLANModule", 781), ("port", 1024), ("portSDSL", 1025), ("portEthernet", 1026), ("portV35", 1027), ("portRS232", 1028), ("portHSSI", 1029), ("portDS3FR-WAN", 1030), ("portIDSL", 1031), ("portDS3ATM-WAN", 1032), ("link", 1280), ("linkDSL", 1281), ("linkEthernet", 1282), ("linkFrameRelay", 1283), ("linkVC", 1284), ("linkATM", 1285), ("interShelfTrunk", 1286), ("cr", 1792), ("cr201-10x", 1793), ("cr201-30x", 1794), ("cr201-SDSL", 1795), ("netopia-SDSL", 1798), ("cr201-IDSL", 1799), ("cpe-SDSL", 1801), ("cpe-IDSL", 1802), ("operator", 2049), ("service", 2304), ("powerModule", 2305), ("fanModule", 2306)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogObjectClass.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogObjectClass.setDescription('The value of this field indicates the system Object Class associated with the resource reporting the event.')
cmTrapTypeLogClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogClassId.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogClassId.setDescription('This object specifies the object class that generated the event.')
cmTrapTypeLogProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogProbableCause.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogProbableCause.setDescription('This object specifies the probable cause of the event.')
cmTrapTypeLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("information", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogSeverity.setDescription('The value of this field indicates the severity assigned to this event by the system.')
cmTrapTypeLogTimeTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogTimeTag.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogTimeTag.setDescription('This object specifies the time that the event occurred.')
cmTrapTypeLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapTypeLogText.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapTypeLogText.setDescription('This object contains any additional information need to describe the event.')
cmTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10), )
if mibBuilder.loadTexts: cmTrapDestinationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapDestinationTable.setDescription('This table is used by operators to configure the system to send traps to a particular management station. In our current implementation, the system sends all traps to all active (i.e. RowStatus=Active) receivers.')
cmTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapDestinationIpAddr"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapDestinationPort"))
if mibBuilder.loadTexts: cmTrapDestinationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapDestinationEntry.setDescription('An entry in the Trap Destination table.')
cmTrapDestinationIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapDestinationIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapDestinationIpAddr.setDescription('This is the IP Address that the system will use when sending traps to this receiver. This is the first index into this table.')
cmTrapDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapDestinationPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapDestinationPort.setDescription('This is the IP Port that this system will use when sending traps to this receiver. The standard SNMP Trap port is 162. This is the second index into this table.')
cmTrapDestinationCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrapDestinationCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapDestinationCommunity.setDescription("This is the community name to put into trap messages to this trap receiver. Default: '' ")
cmTrapDestinationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("delete", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrapDestinationRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapDestinationRowStatus.setDescription('This is a field that controls the creation/deletion of entries in this table. Rows can be created by setting the RowStatus to Active or NotInService. The resulting entry will retain the entered state. Rows are deleted by entering a RowStatus of Destroy. The system will not send traps to a trap receiver whose RowStatus is NotInService. Default: Active ')
cmTrapDestinationOwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 9, 10, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrapDestinationOwnerString.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapDestinationOwnerString.setDescription("The object specifies additional textual information used to identify and describe the manager that is to receive traps. Default: '' ")
cmLoopID = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopID.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopID.setDescription('This is the unique identifier for the loopback test to be performed.')
cmLoopInterface = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopInterface.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopInterface.setDescription('The value of this object identifies the interface to test. The interface is identified by the shelf, slot, port and user channel.')
cmLoopType = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noLoop", 1), ("scm-DSLModulePort", 2), ("scm-CR-Eth", 3), ("scm-CPE-BER", 5), ("scm-WAN-LocalDigital", 7), ("scm-WAN-LocalLine", 8), ("scm-WAN-RemoteLine", 9), ("scm-WAN-Generator", 10), ("scm-DSLModuleEOC", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopType.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopType.setDescription(' This is the type of loopback test to performed.')
cmLoopAction = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("init", 2), ("start", 3), ("stop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopAction.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopAction.setDescription('The action to perform on the loopback test.')
cmLoopDuration = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopDuration.setDescription('The number of seconds to allow the loopback test to run.')
cmLoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("done", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopStatus.setDescription(' The status of the loopback test in progress. ')
cmLoopTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopTimeElapsed.setDescription('This is the number of seconds that have elapsed since the loopback test was started.')
cmLoopTermCode = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("inProgress", 1), ("dbSendError", 2), ("durationExpired", 3), ("operatorStopped", 4), ("noLCresponse", 5), ("noCPEresponse", 6), ("lcInitError", 7), ("cpeInitError", 8), ("cpeStartError", 9), ("lcSstartError", 10), ("cpeDisabled", 11), ("lcDisabled", 12), ("noLinkStateChange", 13), ("idle", 14), ("mioInitError", 15), ("mioDisabled", 16), ("noMIOResponse", 17), ("lcReportError", 18), ("berCountOverflow", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopTermCode.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopTermCode.setDescription('This is the test termination code. It specifies why the loopback test was terminated. ')
cmLoopTxCount = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopTxCount.setDescription('The number of packets transmitted during the test.')
cmLoopRxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopRxErrors.setDescription('The number of errored packets received during the test.')
cmLoopOwnerString = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopOwnerString.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopOwnerString.setDescription('This string identifies the operator controlling the test.')
cmLoopTestParameter1 = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLoopTestParameter1.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopTestParameter1.setDescription('The value of this object is test type dependent. For the EOC loopback test type, it specifies the address of the network element to loop back to the system. Valid values are 0-6. A value of 0 always addresses the NT (CPE) and values 1-6 indicate the number of hops away from the LT (Line Card).')
cmLoopErrorInfo = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("illegalTestParameter1", 2), ("modemIsNT", 3), ("modemUntrained", 4), ("eocAddr2Big", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopErrorInfo.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopErrorInfo.setDescription('The value of this object is card dependent. It is a method to specify more additional error status to the operator.')
cmLoopHistTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12), )
if mibBuilder.loadTexts: cmLoopHistTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistTable.setDescription('This table is used to store the history records from the previous loopback tests. A maximum of history 10 records are stored.')
cmLoopHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopID"))
if mibBuilder.loadTexts: cmLoopHistEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistEntry.setDescription('An entry in the loopback test history table.')
cmLoopHistID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistID.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistID.setDescription('This is the unique identifier for the loopback test that was performed.')
cmLoopHistInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistInterface.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistInterface.setDescription('The value of this object identifies the interface that was tested. The interface is identified by the shelf, slot, port and user channel.')
cmLoopHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noLoop", 1), ("scm-DSLModulePort", 2), ("scm-CR-Eth", 3), ("scm-CPE-BER", 5), ("scm-WAN-LocalDigital", 7), ("scm-WAN-LocalLine", 8), ("scm-WAN-RemoteLine", 9), ("scm-WAN-Generator", 10), ("scm-DSLModuleEOC", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistType.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistType.setDescription(' This is the type of loopback test that was performed.')
cmLoopHistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("init", 2), ("start", 3), ("stop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistAction.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistAction.setDescription('The last action that was performed on the loopback test.')
cmLoopHistDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistDuration.setDescription('The number of seconds that the loopback test was allowed to run.')
cmLoopHistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("done", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistStatus.setDescription(' The status of the loopback test. ')
cmLoopHistTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistTimeElapsed.setDescription('This is the number of seconds that elapsed for the duration of the loopback test.')
cmLoopHistTermCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("inProgress", 1), ("dbSendError", 2), ("durationExpired", 3), ("operatorStopped", 4), ("noLCresponse", 5), ("noCPEresponse", 6), ("lcInitError", 7), ("cpeInitError", 8), ("cpeStartError", 9), ("lcSstartError", 10), ("cpeDisabled", 11), ("lcDisabled", 12), ("noLinkStateChange", 13), ("idle", 14), ("mioInitError", 15), ("mioDisabled", 16), ("noMIOResponse", 17), ("lcReportError", 18), ("berCountOverflow", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistTermCode.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistTermCode.setDescription('This is the test termination code. It specifies why the loopback test was terminated. ')
cmLoopHistTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistTxCount.setDescription('The number of packets transmitted during the test.')
cmLoopHistRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistRxErrors.setDescription('The number of errored packets received during the test.')
cmLoopHistOwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistOwnerString.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistOwnerString.setDescription('This string identifies the operator that controlled the test.')
cmLoopHistTestParameter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistTestParameter1.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistTestParameter1.setDescription('The value of this object is test type dependent. For the EOC loopback test type, it specifies the address of the network element to loop back to the system. Valid values are 0-6. A value of 0 always addresses the NT (CPE) and values 1-6 indicate the number of hops away from the LT (Line Card).')
cmLoopHistErrorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 10, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("illegalTestParameter1", 2), ("modemIsNT", 3), ("modemUntrained", 4), ("eocAddr2Big", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLoopHistErrorInfo.setStatus('mandatory')
if mibBuilder.loadTexts: cmLoopHistErrorInfo.setDescription('The value of this object is card dependent. It is a method to specify more additional error status to the operator.')
cmVBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1), )
if mibBuilder.loadTexts: cmVBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgeTable.setDescription('The virtual bridge table.')
cmVBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmVBridgePII"))
if mibBuilder.loadTexts: cmVBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgeEntry.setDescription('An entry in the cmVBridge table.')
cmVBridgePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgePII.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgePII.setDescription('The value of this object identifies the network interface from the shelf, slot, port and user channel. PII stands for Permanent Interface Identifier.')
cmVBridgeNMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNMAC.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgeNMAC.setDescription('The number of MAC entries in the bridge.')
cmVBridgeNMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgeNMulticast.setDescription('The number of multicast frames from the MIO or Ethernet.')
cmVBridgeNUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNUnicast.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgeNUnicast.setDescription('The number of unicast frames from the MIO or Ethernet.')
cmVBridgeNDSL = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNDSL.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgeNDSL.setDescription('The number of frames from DSL.')
cmVBridgeNUnknownDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNUnknownDest.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgeNUnknownDest.setDescription('The number of unnown destinations that have been dropped.')
cmVBridgeNOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmVBridgeNOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgeNOverflow.setDescription('The number of unlearned MACs (table full).')
cmVBridgeOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ipSpecial", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmVBridgeOption.setStatus('mandatory')
if mibBuilder.loadTexts: cmVBridgeOption.setDescription('Optional bridge function.')
cmMACTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1), )
if mibBuilder.loadTexts: cmMACTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmMACTable.setDescription('This table displays the learned host Ethernet MAC addresses for each VWAN-bridge group.')
cmMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMACPII"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMACIndex"))
if mibBuilder.loadTexts: cmMACEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmMACEntry.setDescription('An entry in the CM MAC table.')
cmMACPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmMACPII.setDescription('VWAN-bridge Group Identifier. This is the PII for the WAN VC uplink of the Group.')
cmMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmMACIndex.setDescription('Arbitrary index within a Bridge Group for this entry in the MAC table.')
cmMACMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACMAC.setStatus('mandatory')
if mibBuilder.loadTexts: cmMACMAC.setDescription("MAC address of this host's Ethernet interface.")
cmMACTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACTTL.setStatus('mandatory')
if mibBuilder.loadTexts: cmMACTTL.setDescription('Minutes to live before aging out.')
cmMACDslPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 12, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMACDslPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmMACDslPII.setDescription("PII of this host's DSL interface.")
class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

cmAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1), )
if mibBuilder.loadTexts: cmAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmTable.setDescription('A list of alarm entries.')
cmAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmIndex"))
if mibBuilder.loadTexts: cmAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmEntry.setDescription('A list of parameters that set up a periodic checking for alarm conditions. For example, an instance of the alarmValue object might be named alarmValue.8')
cmAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmIndex.setDescription('An index that uniquely identifies an entry in the alarm table. Each such entry defines a diagnostic sample at a particular interval for an object on the device.')
cmAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmInterval.setDescription('The interval in seconds over which the data is sampled and compared with the rising and falling thresholds.')
cmAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmVariable.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmVariable.setDescription('The object identifier of the particular variable to be sampled. Only variables that resolve to an ASN.1 primitive type of INTEGER (INTEGER, Counter, Gauge, or TimeTicks) may be sampled. Because SNMP access control is articulated entirely in terms of the contents of MIB views, no access control mechanism exists that can restrict the value of this object to identify only those objects that exist in a particular MIB view. Because there is thus no acceptable means of restricting the read access that could be obtained through the alarm mechanism, the probe must only grant write access to this object in those views that have read access to all objects on the probe.')
cmAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("absoluteValue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmSampleType.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmSampleType.setDescription('The method of sampling the selected variable and calculating the value to be compared against the thresholds. If the value of this object is absoluteValue(1), the value of the selected variable will be compared directly with the thresholds at the end of the sampling interval. If the value of this object is deltaValue(2), the value of the selected variable at the last sample will be subtracted from the current value, and the difference compared with the thresholds. This object may not be modified if the associated alarmStatus object is equal to valid(1).')
cmAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmValue.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmValue.setDescription('The value of the statistic during the last sampling period. This is the value that is compared with the rising thresholds. The value during the current sampling period is not made available until the period is completed and will remain available until the next period completes.')
cmAlarmStartupAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("risingAlarm", 1), ("fallingAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAlarmStartupAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmStartupAlarm.setDescription('The alarm that may be sent when this entry is first set to valid. If the first sample after this entry becomes valid is greater than or equal to the risingThreshold and alarmStartupAlarm is equal to risingAlarm(1) or risingOrFallingAlarm(3), then a single rising alarm will be generated. If the first sample after this entry becomes valid is less than or equal to the fallingThreshold and alarmStartupAlarm is equal to fallingAlarm(2) or risingOrFallingAlarm(3), then a single falling alarm will be generated. This object may not be modified if the associated alarmStatus object is equal to valid(1).')
cmAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmRisingThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmRisingThreshold.setDescription('A threshold for the sampled statistic. When the current sampled value is greater than or equal to this threshold, and the value at the last sampling interval was less than this threshold, a single event will be generated. A single event will also be generated if the first sample after this entry becomes valid is greater than or equal to this threshold and the associated alarmStartupAlarm is equal to risingAlarm(1). Note: a value of 0 turns off the monitoring of this threshold')
cmAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmFallingThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmFallingThreshold.setDescription('A threshold for the sampled statistic. When the current sampled value is less than or equal to this threshold, and the value at the last sampling interval was greater than this threshold, a single event will be generated. A single event will also be generated if the first sample after this entry becomes valid is less than or equal to this threshold and the associated alarmStartupAlarm is equal to fallingAlarm(2) or risingOrFallingAlarm(3). After a falling event is generated, another such event will not be generated until the sampled value rises above this threshold and reaches the cmAlarmRisingThreshold. Default: 0')
cmAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 13, 1, 1, 12), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmStatus.setDescription('The status of this alarm entry.')
cmAlarmSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmSwitch.setDescription('The value of this object indicates whether the monitoring of threshold crossing alerts is enabled or disabled.')
cmAlarmSamplingInterval = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAlarmSamplingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: cmAlarmSamplingInterval.setDescription('The value of this object specfies the sampling interval, in minutes, for performance metrics collection in the cmDslIntervalTable, dsx3IntervalTable, and dsx3FarEndIntervalTable in the system. The minimum value for this object is 5 minutes. The recommended values are 5, 15, and 60 minutes. The value of this object will affect the amount of data collected in the cmDsl24HrTable, the dsx3TotalTable, and the dsx3FarEndTotalTable. If the SamplingInterval is less than 15 minutes, then each of these tables will contain 96*SamplingInterval minutes worth of summed data. If the SamplingInterval is greater than 15 minutes, these tables will contain some multiple of SamplingInterval such that the total is closest to, but not less than, 24 hours. (For example, with a SamplingInterval of 17 minutes, these tables will contain 85 intervals = 1445 minutes = 24 hrs and 5 minutes worth of data.) Default: 15 minutes.')
cmMaintCmdTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1), )
if mibBuilder.loadTexts: cmMaintCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdTable.setDescription('This table allows the operator to configure the Automatic and Manual collection of Bulk Statistics and the recurring Config Backup. There will be one entry in this group for each type of Maintanence command supported.')
cmMaintCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMaintCmdCommand"))
if mibBuilder.loadTexts: cmMaintCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdEntry.setDescription('A list of parameters that are associated with a given maintenance command in the system.')
cmMaintCmdCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("statsAuto", 1), ("statsManual", 2), ("configBackup", 3), ("configRestore", 4), ("bulkCPEDownload", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdCommand.setDescription('This is the command being configured. This is also the index into the table.')
cmMaintCmdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdRowStatus.setDescription("This object is used to add and delete entries from this table. All values are writable, but only 'active' and 'notInService' are readable. An operator uses 'createAndGo' or 'createAndWait' to create an instance of the table for a particular command. If 'createAndGo' is entered, then the entry will be considered 'active' and the command will begin executing. If the operator enters 'createAndWait', the entry will be considered 'notInService' and the command will not be executed. The operator enters 'destroy' to delete the instance. If an entry is 'notInService', the operator can set the RowStatus to 'active' to allow the command to commence. If an automatic entry is 'active', the operator can enter 'notInService' to pause the command. The operator may abort a bulkCPEDownload command by setting this object to 'NotInService'. Default: 'active'")
cmMaintCmdStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdStartTime.setDescription("This is the start time that applies to the command. If the command is 'statsAuto' or 'statsManual' the StartTime reflects the timestamp of the first data contained in the uploaded file (rounded up to the nearest interval boundary). For 'statsAuto' this means the first upload will occur at StartTime + Recurrance. For 'configBackup', 'configRestore' and 'bulkCPEDownload', the StartTime is the time the command will first be executed. If the StartTime is in the past and the recurrence is 0, the command will be executed immediately. Note: Time values should be in the format: YY/MM/DD-HH:MM:SS. If the operator enters seconds in this field, they will be ignored. Default: None, the operator must configure this field explicitly.")
cmMaintCmdRecurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdRecurrence.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdRecurrence.setDescription("For automatic commands (such as 'configBackup' and 'statsAuto'), this is the number of hours between each execution of the command. For the 'configBackup' command, a value of 0 indicates to do the backup once. The command will be executed at the given StartTime. If Recurrence is zero and StartTime is zero (or in the past), the backup will be executed immediately. For 'statsAuto', the number of hours is limited to 6. This ensures that the system provides consistent data with no gaps in the uploaded files regardless of recent changes to the sampling interval. Also, the ReportingPeriod will be made to match the Recurrence value. For 'configRestore', the value of this object is ignored. For 'bulkCPEDownload', the recurrence must be 0. Default: 0")
cmMaintCmdReportingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdReportingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdReportingPeriod.setDescription("The ReportingPeriod defines the valid range (number of hours) of data in the uploaded file. For the 'configBackup' and bulkCPEDownload' commands, sets to this value are rejected and the value when read is 0. For 'statsAuto', operator sets to this object are rejected, and the value when read is set to the value of the Recurrence object. For 'statsManual', the operator sets this value to the number of hours of data that they would like to include in the uploaded file. The timestamps on the data uploaded will range from StartTime to StartTime + ReportingPeriod. If the StartTime + ReportingPeriod is greater than the current time, the system will upload as much data as it has collected at present. For 'configRestore', the value of this object is ignored. Default: 0")
cmMaintCmdPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdPrimaryIpAddr.setDescription("This is the IpAddress of the primary file server to use in executing the command. If an address of all 0's is entered, no save will be attempted to the primary and no event will be generated. For 'bulkCPEDownload', the value of this object is ignored. Default: None, this field must be configured by the operator.")
cmMaintCmdSecondaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdSecondaryIpAddr.setDescription("This is the IpAddress of the secondary file server to use in executing the command. If an address of all 0's is entered, no save will be attempted to the secondary and no event will be generated. If a transfer to the primary fails and there is no secondary address configured, the CommandStatus will be 'failed'. For 'bulkCPEDownload', the value of this object is ignored. For 'configRestore', the value of this object is ignored. Default: 0.0.0.0")
cmMaintCmdDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdDirectory.setDescription("This is the directory on the file server where uploaded files will be stored on both the primary and secondary file servers. For 'bulkCPEDownload', the value of this object is ignored. Default: '' (empty string)")
cmMaintCmdBaseFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdBaseFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdBaseFileName.setDescription("This is the base file name that the system will use when generating the statistics file for both the 'statsAuto' and 'statsManual' commands. In either case, the system will append the interval start time to the filename before transferring the file. For 'configRestore', this is the name of the saved configuration file that the system will retrieve from the file server. For 'bulkCPEDownload', the value of this object is ignored. Default: '' (empty string)")
cmMaintCmdUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdUserName.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdUserName.setDescription("This is the name that the system will use when initiating an FTP session with the file server (this applies to both the primary and secondary file servers). For 'bulkCPEDownload', the value of this object is ignored. Default: 'Anonymous'")
cmMaintCmdPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintCmdPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdPassword.setDescription("This is the password that the system will use when initiating an FTP session with the file server (this applies to both the primary and secondary file servers). The operator can write this value, but when it is read back it displays '****'. Note: This will need to be stored as a plain text ascii string so it can be used by the system. The value must start with an alphanumeric value. For 'bulkCPEDownload', the value of this object is ignored. Default: '' (empty string)")
cmMaintCmdPreviousTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdPreviousTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdPreviousTime.setDescription("This is the calendar time at the beginning of the last attempted execution. If this operation has not been attempted since powerup, this field displays an empty string (''). If the command is 'configBackup', this field is only updated when the upload is actually attempted (i.e. if the stored configuration has changed since the last attempt).")
cmMaintCmdNextTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdNextTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdNextTime.setDescription("This is the calendar time when this automatic operation will next be attempted. If this is not an automatic operation, or this operation is not 'active', this field displays an empty string ('').")
cmMaintCmdCommandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("savedToPrimary", 2), ("savedToSecondary", 3), ("failed", 4), ("inProgress", 5), ("succeeded", 6), ("aborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdCommandStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdCommandStatus.setDescription("This object indicates the status of the last command. 'none' indicates no command has been executed since startup. 'savedToPrimary' indicates the last upload succeeded to the primary file server. 'savedToSecondary' indicates that the last upload succeeded to the secondary file server. 'succeeded' indicates that the last restore command succeeded. 'failed' indicates that the last file transfer failed between the system and the file servers. InProgress indicates the command is currently running. Aborted applies to the 'bulkCPEDownload' command only. For 'bulkCPEDownload', the valid CommandStatus are: None, Failed, InProgress, Succeeded, and Aborted. Failed indicates the software download failed for one or more candidate CPE. Aborted indicates the command was aborted before all candidate CPE were downloaded.")
cmMaintCmdStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 16, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMaintCmdStatusText.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintCmdStatusText.setDescription("The object contains a more detailed status that can be filled in by the system to provide more information to the operator. This status may be updated while a command is 'inProgress'. For 'bulkCPEDownload', this object indicates the number of successful download, failed download, download in progress, and download still pending.")
cmMaintStatsDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMaintStatsDelimiter.setStatus('mandatory')
if mibBuilder.loadTexts: cmMaintStatsDelimiter.setDescription("This is the delimiter that is added between each column in the uploaded data file. This is any standard ASCII character. Default: '|'")
cmProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 17, 1), )
if mibBuilder.loadTexts: cmProxyArpTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmProxyArpTable.setDescription('This table provides information about the Proxy Arp status of each DSL port in the system.')
cmProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 17, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmProxyArpPII"))
if mibBuilder.loadTexts: cmProxyArpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmProxyArpEntry.setDescription('The Proxy Arp status associated with a given DSL Port.')
cmProxyArpPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 17, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmProxyArpPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmProxyArpPII.setDescription('This is the PII of the DSL port. This is also the index into the table.')
cmProxyArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmProxyArpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmProxyArpRowStatus.setDescription("This object is used to activate/deactivate the proxy arp function for the given DSL port. Proxy Arp is valid only for a port configured in one of the IP netmodels. An attempt to enable it for some other netmodel will result in a 'DB_INCONSISTENT_VALUE' error. If the netmodel for a DSL port with Proxy Arp active is changed to a netmodel that is incompatible with Proxy ARP, the associated row will be deleted from the table.")
cmTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1), )
if mibBuilder.loadTexts: cmTrunkIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkIfTable.setDescription('This table contains all the inter-shelf trunk interfaces. Each inter-shelf trunk interface is represented by its PII.')
cmTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkIfIndex"))
if mibBuilder.loadTexts: cmTrunkIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkIfEntry.setDescription('Each entry in this table represents an interface or an end-point of the inter- shelf trunk.')
cmTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkIfIndex.setDescription('This value is used to index the table. The shelf.slot.port portions of the PII are required to traverse the table. The index will address a particular ethernet port on a particular SCM in a particular shelf.')
cmTrunkIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkIfOperState.setDescription('Operational state of this ethernet port.')
cmTrunkIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrunkIfAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkIfAdminState.setDescription('This allows the operator to enable and disable a particular ethernet port. The operational state of the port can be determined by accessing the cmTrunkIfOperState object.')
cmTrunkIfSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfSentPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkIfSentPackets.setDescription('Number of transmitted packets from a particular ethernet port on a SCM.')
cmTrunkIfSentError = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfSentError.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkIfSentError.setDescription('Number of errors detected when sending packets from a particular ethernet port on a SCM.')
cmTrunkIfRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfRecvPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkIfRecvPackets.setDescription('Number of packets received from a particular ethernet port on a SCM.')
cmTrunkIfRecvError = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkIfRecvError.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkIfRecvError.setDescription('Number of errors detected while receiving packets from a particular ethernet port on a SCM.')
cmTrunkConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2), )
if mibBuilder.loadTexts: cmTrunkConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkConnectionTable.setDescription('This table contains the inter-shelf trunks. Each trunk connects 2 shelves using their inter-shelf trunk interface. The trunk provides control and data path for the shelves.')
cmTrunkConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkConnectionTrunkMaster"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkConnectionIndex"))
if mibBuilder.loadTexts: cmTrunkConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkConnectionEntry.setDescription('Each entry in this table represents a link used to pass control and data between the master shelf and the expansion shelf.')
cmTrunkConnectionTrunkMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionTrunkMaster.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkConnectionTrunkMaster.setDescription('This value is used as an index into the table. The shelf.board portions of the PII value are used to specify a particular SCM who is the master of the primary or secondary side of the system.')
cmTrunkConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkConnectionIndex.setDescription('This value is the second index to the table. When used with the master SCM PII index, cmTrunkConnectionTrunkMaster, it will identify one of the inter-shelf trunks for that side of the system. This index itself is arbitrary but will give the operator the state and PII values of each end of the connection. Numbering for each side of the system will begin at 1 and there will be no gaps.')
cmTrunkConnectionOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionOperState.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkConnectionOperState.setDescription('Operational state of this IST.')
cmTrunkConnectionLowPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionLowPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkConnectionLowPII.setDescription('Lower PII of the two ports connected by this trunk. The term lower in this context refers to the shelf value of the PII.')
cmTrunkConnectionHighPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 2, 1, 5), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkConnectionHighPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkConnectionHighPII.setDescription('Higher PII of the two ports connected by this trunk. The term higher in this context refers to the shelf value of the PII.')
cmTrunkTopoTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3), )
if mibBuilder.loadTexts: cmTrunkTopoTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkTopoTable.setDescription('This table contains the inter-shelf trunk topology. Each entry is represented by a source shelf and a destination shelf.')
cmTrunkTopoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkTopoSrc"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrunkTopoDest"))
if mibBuilder.loadTexts: cmTrunkTopoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkTopoEntry.setDescription('Each entry in this table represents the connection topology for a possible path from one shelf to another. An entry will be indexed by a source and destination shelf and will contain information about the path between those shelves. If an path exists the entry will contain information about the next hop on that path including the ethernet port on the source shelf to follow, the shelf number of the next hop and the number of hops to complete the path.')
cmTrunkTopoSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoSrc.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkTopoSrc.setDescription('This value is used as the first index into the table. The shelf.board portions of the PII value are used to specify a particular SCM that will be the source of the connection.')
cmTrunkTopoDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 2), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoDest.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkTopoDest.setDescription('This value is used as the second index into the table. The shelf.board portions of the PII value are used to specify a particular SCM that will be the destination of the connection.')
cmTrunkTopoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 3), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoInterface.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkTopoInterface.setDescription('Ethernet port to be used on source shelf for the first hop from the source SCM.')
cmTrunkTopoNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkTopoNextHop.setDescription('The next shelf on this path.')
cmTrunkTopoHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrunkTopoHops.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrunkTopoHops.setDescription('The number of hops required going from the source SCM to the destination SCM.')
cmDHCPTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1), )
if mibBuilder.loadTexts: cmDHCPTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmDHCPTable.setDescription('This table provides a way for an operator to configure all of the configuration that will be sent to a CPE when the system receives a DHCP request from that CPE.')
cmDHCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmDHCPPII"))
if mibBuilder.loadTexts: cmDHCPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmDHCPEntry.setDescription('The DHCP configuration information associated with a given DSL Port.')
cmDHCPPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmDHCPPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmDHCPPII.setDescription('This is the PII of the DSL port. This is also the index into the table.')
cmDHCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDHCPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmDHCPRowStatus.setDescription("This object is used to create and delete entries from this table. An operator can implicitly create a row in this table by setting any object in the table or by setting the RowStatus to 'active'. Operators delete entries from this table by setting the RowStatus to 'destroy'.")
cmDHCPIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDHCPIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cmDHCPIpAddress.setDescription('This is the IpAddress that will be sent to the CPE when a DHCP request is received over the DSL link. Default: 0.0.0.0 ')
cmDHCPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 19, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmDHCPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cmDHCPNetMask.setDescription('This is the NetMask that will be sent to the CPE when a DHCP request is received over the DSL link. Default: 0.0.0.0 ')
cmServiceClassAweight = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmServiceClassAweight.setStatus('mandatory')
if mibBuilder.loadTexts: cmServiceClassAweight.setDescription('The relative weight of the A Service Class. The percentage of packets that will come from interfaces assigned to class A is: ( Aweight / (Aweight+Bweight+Cweight+Dweight) ) * 100 The system will limit the weights in that all values must be between 1 and 8 and: Aweight >= Bweight >= Cweight >= Dweight Default: 4')
cmServiceClassBweight = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmServiceClassBweight.setStatus('mandatory')
if mibBuilder.loadTexts: cmServiceClassBweight.setDescription('The relative weight of the B Service Class. The percentage of packets that will come from interfaces assigned to class B is: ( Bweight / (Aweight+Bweight+Cweight+Dweight) ) * 100 The system will limit the weights in that all values must be between 1 and 8 and: Aweight >= Bweight >= Cweight >= Dweight Default: 3')
cmServiceClassCweight = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmServiceClassCweight.setStatus('mandatory')
if mibBuilder.loadTexts: cmServiceClassCweight.setDescription('The relative weight of the C Service Class. The percentage of packets that will come from interfaces assigned to class C is: ( Cweight / (Aweight+Bweight+Cweight+Dweight) ) * 100 The system will limit the weights in that all values must be between 1 and 8 and: Aweight >= Bweight >= Cweight >= Dweight Default: 2')
cmServiceClassDweight = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmServiceClassDweight.setStatus('mandatory')
if mibBuilder.loadTexts: cmServiceClassDweight.setDescription('The relative weight of the D Service Class. The percentage of packets that will come from interfaces assigned to class D is: ( Dweight / (Aweight+Bweight+Cweight+Dweight) ) * 100 The system will limit the weights in that all values must be between 1 and 8 and: Aweight >= Bweight >= Cweight >= Dweight Default: 1')
cmEndPointPortTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1), )
if mibBuilder.loadTexts: cmEndPointPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointPortTable.setDescription('This read-only table lists all the DSL ports that belong to the same CPE. Each CPE or CPE stack is identified with an unique EndPointID and not all the CPEs support EndPointID. This table is defined for the operator to determine which DSL ports are connected the same EndPoint. Each entry in this table is identified by BasePII of DSL Port and an entry number. Entry number is assigned arbitrarily internally and provides a way for the operator to walk through all DSL ports that are reporting the same EndPointID as the BasePII.')
cmEndPointPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortBasePII"), (0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortNumber"))
if mibBuilder.loadTexts: cmEndPointPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointPortEntry.setDescription('Each entry in the table contains information for a DSL port that belongs to a specific EndPointID(CPE or CPE stack). This information includes the EndPointID, the PII of the DSL port, PII of the IMUX bundle it belongs to and the number of DSL ports with the same EndPointID.')
cmEndPointPortBasePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortBasePII.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointPortBasePII.setDescription('This is the PII of a physical DSL port, to which the operator wants to find the paired ports.')
cmEndPointPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointPortNumber.setDescription('Indicates the Nth DSL port reporting the same EndPointID as the BasePII.')
cmEndPointPortEndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortEndPointID.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointPortEndPointID.setDescription('This is the EndPointID that is being reported by both the CPE connected to the BasePII and the CPE connected to the PartnerPII in this instance of the table')
cmEndPointPortPartnerPortPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 4), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortPartnerPortPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointPortPartnerPortPII.setDescription('This is the PII of the port connected to the CPE reporting the same EndPointID as the BasePII.')
cmEndPointPortPartnerBundlePII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 5), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortPartnerBundlePII.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointPortPartnerBundlePII.setDescription('The PII of the IMUX bundle the PartnerPortPII belongs to. Otherwise, this field is all zeros')
cmEndPointPortNumMatchingEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointPortNumMatchingEndPoint.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointPortNumMatchingEndPoint.setDescription('Number of currently trained DSL ports whose CPE are reporting the same EndPointID as the BasePII (including BasePII)')
cmEndPointConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2), )
if mibBuilder.loadTexts: cmEndPointConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointConfigTable.setDescription('This table contains configuration data stored in the system that is used to control and monitor a given CPE endpoint. This group is currently used to configure the CPE bulk download feature only. This table is indexed by the DSL Port PII.')
cmEndPointConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointConfigPII"))
if mibBuilder.loadTexts: cmEndPointConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointConfigEntry.setDescription('Each entry in the table contains user configurable information for a DSL port. Currently, each entry has information as to whether the the bulk download is enabled or disabled by the user and the status of the download itself.')
cmEndPointConfigPII = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 1), CmObjectPII()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointConfigPII.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointConfigPII.setDescription('This is the PII of the DSL port to which the configuration is applicable to.')
cmEndPointConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEndPointConfigRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointConfigRowStatus.setDescription('This object is used to create and delete entries from this table. An operator can implicitly create a row in this table by setting the BulkDownload object with no RowStatus, or a RowStatus of active. Operators delete entries from this table by setting the RowStatus to Destroy.')
cmEndPointConfigBulkDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEndPointConfigBulkDownload.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointConfigBulkDownload.setDescription("This object indicates whether the operator wants this CPE to be downloaded to the software version in the CE's code directory when a bulkCPEDownload command is issued by the operator. When the bulkCPEDownload command is issued, if this object is set to Enabled, and the CPE is online, the system will compare the CPE SW version with the SCM SW version. If the CPE SW version is different, the system will initiate the download process with the CPE. If the CPE is not online, then the system will check at the next time the CPE becomes online.")
cmEndPointConfigDownloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("pending", 2), ("inProgress", 3), ("failed", 4), ("completed", 5), ("notDownloadable", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointConfigDownloadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointConfigDownloadStatus.setDescription('This object shows the status of a bulkCPEDownload command relative to this specific CPE. None indicates that no bulkCPEDownload command has been executed since power up. Pending indicates a bulkCPEDownload command has been issued, this CPE is eligible but the download has not started. InProgress indicates the download process has started on this CPE. Failed indicates that an download was attempted to this CPE, but it has failed. Completed indicates an download was attempted and succeeded to this CPE. NotDownloadable indicates that the CPE does not support software download.')
cmEndPointConfigDownloadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointConfigDownloadStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointConfigDownloadStartTime.setDescription('This is the time the download command is sent to the CPE.')
cmEndPointConfigDownloadEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 21, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEndPointConfigDownloadEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmEndPointConfigDownloadEndTime.setDescription('This is the time when a successful or failed download was detected.')
cmActiveSessionTable = MibTable((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1), )
if mibBuilder.loadTexts: cmActiveSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmActiveSessionTable.setDescription('This is a table group with one record per active operator session. This table is indexed with database session ID.')
cmActiveSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1), ).setIndexNames((0, "COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionSessionID"))
if mibBuilder.loadTexts: cmActiveSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmActiveSessionEntry.setDescription('Each entry in the table contains information for an operator login session. This table is indexed with database session ID.')
cmActiveSessionSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionSessionID.setStatus('mandatory')
if mibBuilder.loadTexts: cmActiveSessionSessionID.setDescription('The database session ID for this operator session.')
cmActiveSessionOperatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionOperatorName.setStatus('mandatory')
if mibBuilder.loadTexts: cmActiveSessionOperatorName.setDescription('The operator name.')
cmActiveSessionContext = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 32, 64))).clone(namedValues=NamedValues(("http", 1), ("snmp", 2), ("telnet", 4), ("serial", 8), ("ftp", 32), ("shell", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionContext.setStatus('mandatory')
if mibBuilder.loadTexts: cmActiveSessionContext.setDescription('The context through which the operator is logged in.')
cmActiveSessionPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("view", 1), ("monitor", 2), ("provision", 3), ("security", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionPrivilege.setStatus('mandatory')
if mibBuilder.loadTexts: cmActiveSessionPrivilege.setDescription('The context through which the operator is logged in.')
cmActiveSessionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cmActiveSessionIpAddress.setDescription('The IP Address through which the operator is logged in, if the operator is logged in through Telnet or SNMP. If an operator is logged in through the Craft interface, this field will be all zeros.')
cmActiveSessionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: cmActiveSessionStartTime.setDescription('The system time when the session was started.')
cmActiveSessionIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1996, 20, 22, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmActiveSessionIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cmActiveSessionIdleTimeout.setDescription('The idle timeout in seconds when the active session will auto-logout.')
cmRadiusAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAuthentication.setDescription('The value of this object indicates if the RADIUS option is enabled or disabled.')
cmRadiusAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAuthKey.setDescription('The value of this object is the RADIUS Protocol Authenticator, a shared secret between the server and client.')
cmRadiusAuthPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAuthPrimaryIpAddr.setDescription('The value of this object is the Primary IP address of the RADIUS-Authenticating server.')
cmRadiusAuthPrimaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthPrimaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAuthPrimaryPort.setDescription("The value of this object is the RADIUS-Authenticating Primary Server's port number that the system binds to. Default: 1645")
cmRadiusAuthSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAuthSecondaryIpAddr.setDescription('The value of this object is the Secondary IP address of the RADIUS-Authenticating server.')
cmRadiusAuthSecondaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthSecondaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAuthSecondaryPort.setDescription("The value of this object is the RADIUS-Authenticating Secondary Server's port number that the system binds to. Default: 1645")
cmRadiusAuthTertiaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthTertiaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAuthTertiaryIpAddr.setDescription('The value of this object is the Tertiary IP address of the RADIUS-Authenticating server.')
cmRadiusAuthTertiaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAuthTertiaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAuthTertiaryPort.setDescription("The value of this object is the RADIUS-Authenticating Tertiary Server's port number that the system binds to. Default: 1645")
cmRadiusAcctPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAcctPrimaryIpAddr.setDescription('The value of this object is the Primary IP address of the RADIUS-Accounting server.')
cmRadiusAcctPrimaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctPrimaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAcctPrimaryPort.setDescription("The value of this object is the RADIUS-Accounting Primary Server's port number that the system binds to. Default: 1646")
cmRadiusAcctSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAcctSecondaryIpAddr.setDescription('The value of this object is the Secondary IP address of the RADIUS-Accounting server.')
cmRadiusAcctSecondaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctSecondaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAcctSecondaryPort.setDescription("The value of this object is the RADIUS-Accounting Secondary Server's port number that the system binds to. Default: 1646")
cmRadiusAcctTertiaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctTertiaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAcctTertiaryIpAddr.setDescription('The value of this object is the Tertiary IP address of the RADIUS-Accounting server.')
cmRadiusAcctTertiaryPort = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 23, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmRadiusAcctTertiaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmRadiusAcctTertiaryPort.setDescription("The value of this object is the RADIUS-Accounting Tertiary Server's port number that the system binds to. Default: 1646")
cmSNMPResponseString = MibScalar((1, 3, 6, 1, 4, 1, 1996, 20, 24, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSNMPResponseString.setStatus('mandatory')
if mibBuilder.loadTexts: cmSNMPResponseString.setDescription('Copper Mountain proprietary object used for internal processing.')
cmLoginError = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,1)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmLoginError.setDescription("Indicates an operator tried and failed to log into the system. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmLoginOK = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,2)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmLoginOK.setDescription("This trap indicates that an operator has successfully logged into the system. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmLogout = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,3)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmLogout.setDescription('Indicates that an operator has successfully logged out of the system.')
cmLoginsSaturated = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,4)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmLoginsSaturated.setDescription('Indicates that the maximum number of operators are currently logged into the system. No more logins will be allowed until one of them logs out.')
cmLoginsAvailable = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,5)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmLoginsAvailable.setDescription("Inidicates that logins are allowed again. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmBoardUp = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,6)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmBoardUp.setDescription("This trap indicates that the indicated system board has established communication with the System Control Module. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmBoardDown = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,7)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmBoardDown.setDescription('This trap indicates that the indicated system board has stopped communicating with the System Control Module.')
cmLoginsSuspended = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,8)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmLoginsSuspended.setDescription('Inidcates that logins are temporarily suspended for the given operator name because of 3 successive failed login attempts.')
cmLoginsAllowed = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,9)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmLoginsAllowed.setDescription("Indicates that logins are now allowed for this user name. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmBootFileError = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,10)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardFileName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmBootFileError.setDescription('Indicates that the given board did not successfully boot. The reason for this failure can be determined from the cmTrapEventLogProbableCause object. This condition requires craft action to clear.')
cmBootFileOK = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,11)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardFileName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmBootFileOK.setDescription("Indicates that the given boot file was downloaded to the given board successfully. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmAttributeChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,12)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionOperatorName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionIpAddress"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmActiveSessionContext"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmAttributeChange.setDescription('Indicates an attribute was changed by an operator. The text field contains the name of the changed attribute and the new value.')
cmConfigFileReadFailed = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,13)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmConfigFileReadFailed.setDescription('Indicates that the Config File Read operation failed. The text field contains a description of the error encountered.')
cmConfigFileReadOk = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,14)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmConfigFileReadOk.setDescription("Indicates the Config File Read operation executed successfully. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmConfigFileWriteFailed = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,15)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmConfigFileWriteFailed.setDescription('Indicates that the Config File Write operation failed. The text field contains a description of the error encountered.')
cmConfigFileWriteOk = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,16)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmConfigFileWriteOk.setDescription("Indicates the Config File Write operation executed successfully. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmOperStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,17)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmStateOperState"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmOperStateChange.setDescription('Indicates that the Operability State of a resource has changed in the system.')
cmDiagnostic = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,18)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmDiagnostic.setDescription('Indicates some diagnostic event occurred. The text field contains a description of the event.')
cmBoardRestart = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,19)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmBoardRestart.setDescription('The reason code field indicates the reason for the restart.')
cmFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,20)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmFanFailure.setDescription('Indicates that the system fan has failed.')
cmFanFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,21)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmFanFailureClear.setDescription("Indicates that the system fan failure has been cleared. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,22)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmPowerSupplyFailure.setDescription('Indicates that one of the two system power supplies has failed. The failed power supply is identified by cmTrapEventLogObjectClass and cmTrapEventLogClassId.')
cmPowerSupplyFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,23)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmPowerSupplyFailureClear.setDescription("Indicates that a previous power supply failure has been cleared. The power supply is identified by cmTrapEventLogObjectClass and cmTrapEventLogClassId. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmLoopStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,24)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopStatus"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopID"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopInterface"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopOwnerString"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopTermCode"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopTimeElapsed"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopTxCount"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmLoopRxErrors"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmLoopStatusChange.setDescription('This trap is sent at the beginning and end of a loopback test. the cmLoopTermCode, cmLoopTimeElapsed, cmLoopTxCount, and cmLoopRxErrors fields are only valid if cmLoopStatus is Done.')
cmRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,25)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmVariable"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmSampleType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmValue"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmRisingThreshold"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmRisingAlarm.setDescription('The SNMP trap that is generated when an alarm entry crosses its rising threshold and generates an event that is configured for sending SNMP traps.')
cmIDSLBoardTimingLoss = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,26)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardTimingMode"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmIDSLBoardTimingLoss.setDescription('This trap indicates that the globally timed master or slave IDSL Line Card has lost network timing.')
cmIDSLBoardTimingLossClear = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,27)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmIDSLBoardTimingMode"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmIDSLBoardTimingLossClear.setDescription("This trap indicates that the globally timed master or slave IDSL Line Card has reaquired network timing. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmRoleChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,28)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmSysPrimaryPII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmRoleChange.setDescription("This trap is sent whenever an SCM changes role from Primary to Secondary, or from Secondary to Primary. If this trap has a severity of 'information,' it can potentially clear an alarm in the system. When such a trap is received by the manager, the operator can query the cmTrapCriticalCount, cmTrapMajorAlarmCount, and cmTrapMinorAlarmCount objects to get the current system alarm status.")
cmRedundancyChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,29)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmSysRedundancy"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmRedundancyChange.setDescription('This trap is sent whenever an SCM detects that Redundancy has changed from enabled/disabled to disabled/enabled.')
cmRedundancyConflict = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,30)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmBoardIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmRedundancyConflict.setDescription('This trap is sent when an SCM comes up, detects that it should be locked as the Primary SCM, but there is another Primary which has already locked the system (i.e. Disabled Redundancy).')
cmMaintCmdStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,31)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMaintCmdCommand"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmMaintCmdCommandStatus"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogProbableCause"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmMaintCmdStatusChange.setDescription('Indicates a maintenance command completed successfully or failed, according to the CommandStatus field.')
cmFallingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,32)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmVariable"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmSampleType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmValue"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmAlarmFallingThreshold"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNameIfName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmNamePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmGroupName"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmFallingAlarm.setDescription('This trap is sent at the end of an interval when an object that is configured with a Falling Threshold has dropped below the fallingThresdhold value in the cmAlarmTable.')
cmRateFallback = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,33)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLModemIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLModemCurrentRate"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmRateFallback.setDescription('This trap is sent whenever a modem trains at a rate less than the configured datarate.')
cmRateFallbackClear = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,34)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLModemIndex"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmHDSLModemCurrentRate"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmRateFallbackClear.setDescription('This trap is sent whenever the modem drops training.')
cmEndPointConflictAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1996) + (0,35)).setObjects(("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortBasePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortEndPointID"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmEndPointPortPartnerBundlePII"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogText"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeverity"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogType"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogObjectClass"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogClassId"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogSeqNum"), ("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", "cmTrapEventLogTimeTag"))
if mibBuilder.loadTexts: cmEndPointConflictAlarm.setDescription("This minor severity trap is sent if one of the following configuration conflicts occurs: 1. A DSL link comes up and the EndPointID matches another DSL link outside the first links bundle. 2. A DSL link comes up and the EndPointID doesn't match the current EndPointID in its bundle. 3. A DSL Link that is not IMUX capable comes up and is configured in a bundle.")
mibBuilder.exportSymbols("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", cmIface=cmIface, cmCE120Platform=cmCE120Platform, cmCpeEthernetIntUnknowns=cmCpeEthernetIntUnknowns, cmCpeBoardNumPorts=cmCpeBoardNumPorts, cmCpeEthernetRxDribbleBits=cmCpeEthernetRxDribbleBits, cmIDSLBoardIndex=cmIDSLBoardIndex, cmDSLCurrentRxOverruns=cmDSLCurrentRxOverruns, cmFilterAction=cmFilterAction, cmMaintStatsDelimiter=cmMaintStatsDelimiter, cmDSLYesterdaysTxValidFrames=cmDSLYesterdaysTxValidFrames, cmBoardTable=cmBoardTable, cmV35Sync=cmV35Sync, cmMaintCmdBaseFileName=cmMaintCmdBaseFileName, cmTrunkIfAdminState=cmTrunkIfAdminState, cmFrDlcmiAdminState=cmFrDlcmiAdminState, cmMACTTL=cmMACTTL, cmCpeHDSLModemEntry=cmCpeHDSLModemEntry, cmTrunkConnectionEntry=cmTrunkConnectionEntry, cmTrapEventLogEntry=cmTrapEventLogEntry, cmFilterFilterNumber=cmFilterFilterNumber, cmDSL24HrMinNoiseMargin=cmDSL24HrMinNoiseMargin, cmTrapEventLogSeqNum=cmTrapEventLogSeqNum, cmDSLCurrentTxValidFrames=cmDSLCurrentTxValidFrames, cmFilterSrcAdrs=cmFilterSrcAdrs, cmBoardConfigChange=cmBoardConfigChange, cmHDSLModemEntry=cmHDSLModemEntry, cmHDSLModemType=cmHDSLModemType, cmHDSLPerfTxValidFrames=cmHDSLPerfTxValidFrames, cmAlarmSampleType=cmAlarmSampleType, cmEndPointPortBasePII=cmEndPointPortBasePII, cmBoardOperState=cmBoardOperState, cmDSLCurrentRxValidFrames=cmDSLCurrentRxValidFrames, cmIDSLModemIndex=cmIDSLModemIndex, cmCpeDSLIntervalTxValidFrames=cmCpeDSLIntervalTxValidFrames, cmLoopHistRxErrors=cmLoopHistRxErrors, cmDS3AtmPII=cmDS3AtmPII, cmHSSIIndex=cmHSSIIndex, cmRadiusAcctSecondaryIpAddr=cmRadiusAcctSecondaryIpAddr, cmDSLTodaysRxOverruns=cmDSLTodaysRxOverruns, cmRadiusAcctTertiaryIpAddr=cmRadiusAcctTertiaryIpAddr, cmBootFileOK=cmBootFileOK, cmCpeHDSLModemTestMode=cmCpeHDSLModemTestMode, cmLoopHistTestParameter1=cmLoopHistTestParameter1, cmMACEntry=cmMACEntry, cmIfaceGroupName=cmIfaceGroupName, cmEvent=cmEvent, cmCpeDataPortClockRate=cmCpeDataPortClockRate, cmSysVersion=cmSysVersion, cmTrapEventLogObjectClass=cmTrapEventLogObjectClass, cmMaintCmdRowStatus=cmMaintCmdRowStatus, cmProxyArp=cmProxyArp, cmFrDlcmiLMITxStatusEnquiries=cmFrDlcmiLMITxStatusEnquiries, cmBoardSwVersion=cmBoardSwVersion, cmCpeDSLIntervalNumber=cmCpeDSLIntervalNumber, cmLoopHistErrorInfo=cmLoopHistErrorInfo, cmHDSLModemBPSwMinorVersion=cmHDSLModemBPSwMinorVersion, cmIfaceNetModel=cmIfaceNetModel, cmTrunkTopoInterface=cmTrunkTopoInterface, cmTrapReceiverRowStatus=cmTrapReceiverRowStatus, cmFilter=cmFilter, cmCpeEthernetIntervalTable=cmCpeEthernetIntervalTable, cmDSLYesterdaysRxTruncated=cmDSLYesterdaysRxTruncated, cmBundleMember3PII=cmBundleMember3PII, cmUserGroup=cmUserGroup, cmIfaceCMCPCompatible=cmIfaceCMCPCompatible, cmDSLIntervalIndex=cmDSLIntervalIndex, cmFrDlcmiLMIRxStatusEnquiries=cmFrDlcmiLMIRxStatusEnquiries, cmDSL24HrRxValidOctets=cmDSL24HrRxValidOctets, cmV35OperState=cmV35OperState, cmSysSecondaryPII=cmSysSecondaryPII, cmBundleMember2Status=cmBundleMember2Status, cmTrunkConnectionHighPII=cmTrunkConnectionHighPII, cmTrapReceiverTable=cmTrapReceiverTable, cmDSLYesterdaysRxNoBuffers=cmDSLYesterdaysRxNoBuffers, cmHDSLModemCpeResponses=cmHDSLModemCpeResponses, cmBoardEntry=cmBoardEntry, cmDSL24HrIndex=cmDSL24HrIndex, cmSNMPResponseString=cmSNMPResponseString, cmCpeBoardOperState=cmCpeBoardOperState, cmIDSLModemState=cmIDSLModemState, cmTrapEventLogTimeTag=cmTrapEventLogTimeTag, cmTrapDestinationTable=cmTrapDestinationTable, cmShelfCommand=cmShelfCommand, cmAtmVclVci=cmAtmVclVci, cmDSLIntervalRxAborts=cmDSLIntervalRxAborts, cmShelfIndex=cmShelfIndex, cmDSLIntervalRxCRCErrors=cmDSLIntervalRxCRCErrors, cmCpeIDSLModemDataRate=cmCpeIDSLModemDataRate, cmCpeBoardManagementOptions=cmCpeBoardManagementOptions, cmAtmVclLastChange=cmAtmVclLastChange, cmBundlePII=cmBundlePII, cmCpeBoard=cmCpeBoard, cmCpeEthernetIntervalEntry=cmCpeEthernetIntervalEntry, cmBoardIndex=cmBoardIndex, cmCpeEthernetTxTooBig=cmCpeEthernetTxTooBig, cmSystem=cmSystem, cmCpeBoardSerialNumber=cmCpeBoardSerialNumber, cmTrunkTopoNextHop=cmTrunkTopoNextHop, cmSubIfacePII=cmSubIfacePII, cmFrDlcmiIfIndex=cmFrDlcmiIfIndex, cmBundleEntry=cmBundleEntry, cmBundleRowStatus=cmBundleRowStatus, cmLoopTestParameter1=cmLoopTestParameter1, cmV35DTEDCE=cmV35DTEDCE, cmPowerSupplyFailure=cmPowerSupplyFailure, cmMaintCmdCommandStatus=cmMaintCmdCommandStatus, cmDS3AtmCbitParityEnable=cmDS3AtmCbitParityEnable, cmV35Entry=cmV35Entry, cmBoardFileDate=cmBoardFileDate, cmDSLYesterdaysPortUpTime=cmDSLYesterdaysPortUpTime, cmFrDlcmiTable=cmFrDlcmiTable, cmTrapReceiverEntry=cmTrapReceiverEntry, cmDHCPPII=cmDHCPPII, cmIDSLModemDataRate=cmIDSLModemDataRate, cmTrapTypeLogClassId=cmTrapTypeLogClassId, cmHDSLModemBPSwMajorVersion=cmHDSLModemBPSwMajorVersion, cmVBridgeNMulticast=cmVBridgeNMulticast, cmCpeDataPortLoopbackConfig=cmCpeDataPortLoopbackConfig, cmStateOperState=cmStateOperState, cmDSL24HrEntry=cmDSL24HrEntry, cmSDSLTestAction=cmSDSLTestAction, cmShelf=cmShelf, cmTrapTypeLogType=cmTrapTypeLogType, cmMaintCmdStartTime=cmMaintCmdStartTime, cmLoopHistAction=cmLoopHistAction, cmHSSICRC=cmHSSICRC, cmEndPointPortNumMatchingEndPoint=cmEndPointPortNumMatchingEndPoint, cmIDSLModemEntry=cmIDSLModemEntry, cmSubIfacePriority=cmSubIfacePriority, cmCpeDSLIntervalRxValidFrames=cmCpeDSLIntervalRxValidFrames, cmSysRedundancy=cmSysRedundancy, cmRisingAlarm=cmRisingAlarm, cmMemberEntry=cmMemberEntry, cmIDSLModemTerminationMode=cmIDSLModemTerminationMode, cmTrapTypeLogEntry=cmTrapTypeLogEntry, cmCpeEthernetIndex=cmCpeEthernetIndex, cmDSLYesterdaysRxValidFrames=cmDSLYesterdaysRxValidFrames, cmCpeDataPortTotalEntry=cmCpeDataPortTotalEntry, cmActiveSessionIpAddress=cmActiveSessionIpAddress, cmActiveSessionSessionID=cmActiveSessionSessionID, cmFrDlcmiLMIMode=cmFrDlcmiLMIMode, cmDSLCurrentTxValidOctets=cmDSLCurrentTxValidOctets, cmDSLIntervalTxValidFrames=cmDSLIntervalTxValidFrames, cmTrapReceiverCommunity=cmTrapReceiverCommunity, cmCpeBoardFileName=cmCpeBoardFileName, cmCpeDataPortIntervalTxFrames=cmCpeDataPortIntervalTxFrames, cmTrunkTopoDest=cmTrunkTopoDest, cmCpeDataPortIntervalEntry=cmCpeDataPortIntervalEntry, cmFilterSrcPort=cmFilterSrcPort, cmDSLCurrentIndex=cmDSLCurrentIndex, cmCpeIDSLModemTable=cmCpeIDSLModemTable, cmDSLTodaysRxNoBuffers=cmDSLTodaysRxNoBuffers, cmEndPointConfigPII=cmEndPointConfigPII, cmCpeDSLIntervalRxCRCErrors=cmCpeDSLIntervalRxCRCErrors, cmSDSLTestMaxRate=cmSDSLTestMaxRate, cmTrunkConnectionLowPII=cmTrunkConnectionLowPII, cmIfaceMacAddr=cmIfaceMacAddr, cmCpeDataPortTotalIndex=cmCpeDataPortTotalIndex, cmCpeDataPortTerminalTiming=cmCpeDataPortTerminalTiming, cmFrDlcmiFirstDLCI=cmFrDlcmiFirstDLCI, cmStateLastChange=cmStateLastChange, cmHDSLPerfRxValidFrames=cmHDSLPerfRxValidFrames, cmTrapEventLogTable=cmTrapEventLogTable, cmNameTable=cmNameTable, cmDSLIntervalRxAlignmentErrors=cmDSLIntervalRxAlignmentErrors, cmCpeDataPortIntervalTxOctets=cmCpeDataPortIntervalTxOctets, EntryStatus=EntryStatus, cmV35Index=cmV35Index, cmCpeDataPortAdminState=cmCpeDataPortAdminState, cmAlarmFallingThreshold=cmAlarmFallingThreshold, cmAlarmSwitch=cmAlarmSwitch, cmFilterFunction=cmFilterFunction, cmDS3AtmCellPayloadScrambling=cmDS3AtmCellPayloadScrambling, cmBundleMember3EndPointID=cmBundleMember3EndPointID, cmMaintCmdRecurrence=cmMaintCmdRecurrence, cmFilterIpProtocol=cmFilterIpProtocol, cmMaintCmdSecondaryIpAddr=cmMaintCmdSecondaryIpAddr, cmDSLIntervalPortUpTime=cmDSLIntervalPortUpTime, cmCpeDataPortTotalRxErrors=cmCpeDataPortTotalRxErrors, cmV35DTR=cmV35DTR, cmPowerSupplyFailureClear=cmPowerSupplyFailureClear, cmCpeDataPortTxClockSource=cmCpeDataPortTxClockSource, cmFrDlcmiLostLMISequences=cmFrDlcmiLostLMISequences, cmHDSLModemMinRate=cmHDSLModemMinRate, cmLoopHistTable=cmLoopHistTable, cmSysCalendarTime=cmSysCalendarTime, cmDSLIntervalTxUnderruns=cmDSLIntervalTxUnderruns, cmAlarmStatus=cmAlarmStatus, cmIfaceAdditionalInfo=cmIfaceAdditionalInfo, cmHSSIEntry=cmHSSIEntry, cmDSLYesterdaysRxAlignmentErrors=cmDSLYesterdaysRxAlignmentErrors, cmEndPointPortNumber=cmEndPointPortNumber, cmGroupRowStatus=cmGroupRowStatus, cmCpeIDSLModemEntry=cmCpeIDSLModemEntry, cmDSLCurrentRxTruncated=cmDSLCurrentRxTruncated, cmDSLTodaysRxAborts=cmDSLTodaysRxAborts, cmAtmVclAal5CpcsTransmitSduSize=cmAtmVclAal5CpcsTransmitSduSize, cmShelfTable=cmShelfTable, cmActiveSessionPrivilege=cmActiveSessionPrivilege, cmLoopHistOwnerString=cmLoopHistOwnerString, cmDSLCurrentRxAborts=cmDSLCurrentRxAborts, cmProxyArpRowStatus=cmProxyArpRowStatus, cmRadiusAcctPrimaryPort=cmRadiusAcctPrimaryPort, cmBoardUpTime=cmBoardUpTime, cmLoopHistType=cmLoopHistType, cmLoop=cmLoop, cmDSL24HrRxBig=cmDSL24HrRxBig, cmCpeDSLIntervalEntry=cmCpeDSLIntervalEntry, cmIDSLBoardEntry=cmIDSLBoardEntry, cmTrapTypeLogSeverity=cmTrapTypeLogSeverity, cmSDSLTestTestCompleteTime=cmSDSLTestTestCompleteTime, cmFilterDstPort=cmFilterDstPort, cmFrCircuitOperState=cmFrCircuitOperState, cmTrapReceiverPort=cmTrapReceiverPort, cmCpeIDSLModemState=cmCpeIDSLModemState, cmV35TxClockSource=cmV35TxClockSource, cmAlarmInterval=cmAlarmInterval, cmCpeHDSLModemIndex=cmCpeHDSLModemIndex, cmRadiusAuthSecondaryIpAddr=cmRadiusAuthSecondaryIpAddr, cmTrapDestinationRowStatus=cmTrapDestinationRowStatus, cmSysCommandStatus=cmSysCommandStatus, cmLoopErrorInfo=cmLoopErrorInfo, cmHSSIClockRate=cmHSSIClockRate, cmDSL24HrRxNoBuffers=cmDSL24HrRxNoBuffers, cmCpeDataPortDSR=cmCpeDataPortDSR, cmCpeDataPortTotalRxOctets=cmCpeDataPortTotalRxOctets, cmTrapEventLogText=cmTrapEventLogText, cmLoopID=cmLoopID, cmCpeDataPortTotalTable=cmCpeDataPortTotalTable, cmDSLIntervalNumber=cmDSLIntervalNumber, cmDSLYesterdaysRxOverruns=cmDSLYesterdaysRxOverruns, cmCpeDSLIntervalIndex=cmCpeDSLIntervalIndex, cmBoardSerialNumber=cmBoardSerialNumber, cmCpeDataPortDCD=cmCpeDataPortDCD, cmAlarmTable=cmAlarmTable, cmHSSITable=cmHSSITable, cmCpeEthernetTxLossCRS=cmCpeEthernetTxLossCRS, cmBoardRestart=cmBoardRestart, cmAtmVclPII=cmAtmVclPII, cmTrapTypeLogTable=cmTrapTypeLogTable, cmV35=cmV35, cmMACTable=cmMACTable, cmDSLTodaysRxCRCErrors=cmDSLTodaysRxCRCErrors, cmDSLIntervalTxValidOctets=cmDSLIntervalTxValidOctets, cmTrapAlarmLogTable=cmTrapAlarmLogTable, cmDSLIntervalRxTruncated=cmDSLIntervalRxTruncated, cmServiceClassAweight=cmServiceClassAweight, cmFrDlcmiLMIRxStatusResponses=cmFrDlcmiLMIRxStatusResponses, cmNameIfName=cmNameIfName, cmDSLYesterdaysRxBig=cmDSLYesterdaysRxBig, cmGroupNewGrpName=cmGroupNewGrpName, cmCpeDataPortOperState=cmCpeDataPortOperState, cmSubIfaceDestPII=cmSubIfaceDestPII, cmDSLYesterdaysRxAborts=cmDSLYesterdaysRxAborts)
mibBuilder.exportSymbols("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", cmCpeDataPortIntervalIntervalNumber=cmCpeDataPortIntervalIntervalNumber, cmTrapCriticalAlarmCount=cmTrapCriticalAlarmCount, cmCpeEthernetRxNoBufs=cmCpeEthernetRxNoBufs, cmCpeDataPortIntervalTxErrors=cmCpeDataPortIntervalTxErrors, cmIDSLModemSuccessfulTrains=cmIDSLModemSuccessfulTrains, cmTrapDestinationPort=cmTrapDestinationPort, cmLogout=cmLogout, cmCpeDataPortTable=cmCpeDataPortTable, cmBoardRole=cmBoardRole, cmCpeBoardTable=cmCpeBoardTable, cmIfacePII=cmIfacePII, cmHSSIDTEDCE=cmHSSIDTEDCE, cmLoginError=cmLoginError, cmMaintCmdUserName=cmMaintCmdUserName, cmCpeDataPortCRC=cmCpeDataPortCRC, cmBundleMember3Status=cmBundleMember3Status, cmFrDlcmiUnknownLMIMessagesRcvd=cmFrDlcmiUnknownLMIMessagesRcvd, cmV35CRC=cmV35CRC, cmMaintCmdNextTime=cmMaintCmdNextTime, cmBoardDown=cmBoardDown, cmFileFSAddr=cmFileFSAddr, cmDSLTodaysRxTruncated=cmDSLTodaysRxTruncated, cmCpeBoardCommand=cmCpeBoardCommand, cmLoopTimeElapsed=cmLoopTimeElapsed, DLCI=DLCI, cmIDSLModemCpeResponses=cmIDSLModemCpeResponses, cmSysMyPII=cmSysMyPII, cmRadiusAuthTertiaryIpAddr=cmRadiusAuthTertiaryIpAddr, cmIDSLModemFailedTrainingAttempts=cmIDSLModemFailedTrainingAttempts, cmIfaceServiceClass=cmIfaceServiceClass, cmBoardPromVersion=cmBoardPromVersion, cmDSLYesterdaysTxValidOctets=cmDSLYesterdaysTxValidOctets, cmHDSLPerfRxBig=cmHDSLPerfRxBig, cmIDSL=cmIDSL, cmDSLIntervalTimeTagEnd=cmDSLIntervalTimeTagEnd, cmEndPointPortEndPointID=cmEndPointPortEndPointID, cmSysCommand=cmSysCommand, cmFrDlcmiDceN393=cmFrDlcmiDceN393, cmBundleMember1PII=cmBundleMember1PII, cmHDSLPerfIntervalNumber=cmHDSLPerfIntervalNumber, cmV35DSR=cmV35DSR, cmHSSITestmode=cmHSSITestmode, cmTrapEventLogProbableCause=cmTrapEventLogProbableCause, cmDSLIntervalRxOverruns=cmDSLIntervalRxOverruns, cmCpeBoardHwVersion=cmCpeBoardHwVersion, cmTrapAlarmLogSeverity=cmTrapAlarmLogSeverity, cmFrCircuitFramesDroppedRxUnavail=cmFrCircuitFramesDroppedRxUnavail, cmRadiusAuthPrimaryIpAddr=cmRadiusAuthPrimaryIpAddr, cmFrDlcmiRcvUnknownDLCI=cmFrDlcmiRcvUnknownDLCI, cmAlarmSamplingInterval=cmAlarmSamplingInterval, cmHDSLModemSuccessfulTrains=cmHDSLModemSuccessfulTrains, cmTrunkIfTable=cmTrunkIfTable, cmBoard=cmBoard, cmMaint=cmMaint, cmV35ClockRate=cmV35ClockRate, cmHDSLModemCurrentRate=cmHDSLModemCurrentRate, cmStateIndex=cmStateIndex, cmTrapTypeLogSeqNum=cmTrapTypeLogSeqNum, cmMemberPII=cmMemberPII, cmEndPointConfigTable=cmEndPointConfigTable, cmTrapDestinationOwnerString=cmTrapDestinationOwnerString, cmRedundancyChange=cmRedundancyChange, cmGroupName=cmGroupName, cmCpeHDSLModemTable=cmCpeHDSLModemTable, cmV35Table=cmV35Table, cmTrapTypeLogText=cmTrapTypeLogText, cmTrunkTopoHops=cmTrunkTopoHops, cmCpeBoardEntry=cmCpeBoardEntry, cmFrDlcmiOperState=cmFrDlcmiOperState, cmAtmVclTable=cmAtmVclTable, cmTrunkTopoSrc=cmTrunkTopoSrc, cmFileFLASHDir=cmFileFLASHDir, cmTrapAlarmLogClassId=cmTrapAlarmLogClassId, cmDSLTodaysIndex=cmDSLTodaysIndex, cmEndPointConfigEntry=cmEndPointConfigEntry, cmFrDlcmiDceN392=cmFrDlcmiDceN392, cmShelfBoardMap=cmShelfBoardMap, cmMaintCmdPreviousTime=cmMaintCmdPreviousTime, cmCpeBoardConfigChange=cmCpeBoardConfigChange, coppermountain=coppermountain, cmAtmVclAalType=cmAtmVclAalType, cmHSSIIfIndex=cmHSSIIfIndex, cmCpeBoardGroupMap=cmCpeBoardGroupMap, cmDSLYesterdaysIndex=cmDSLYesterdaysIndex, cmV35CTS=cmV35CTS, cmHDSLPerfIndex=cmHDSLPerfIndex, cmSDSLTestContinuityTestResult=cmSDSLTestContinuityTestResult, cmSysExpIpSubNet=cmSysExpIpSubNet, cmDSLIntervalTable=cmDSLIntervalTable, cmBoardHwType=cmBoardHwType, cmBoardCommand=cmBoardCommand, cmStateGenericClass=cmStateGenericClass, cmIfaceIpAddr=cmIfaceIpAddr, cmMACMAC=cmMACMAC, cmTrunkIfIndex=cmTrunkIfIndex, cmAlarm=cmAlarm, cmEndPointConfigDownloadStatus=cmEndPointConfigDownloadStatus, cmMaintCmdReportingPeriod=cmMaintCmdReportingPeriod, cmRateFallback=cmRateFallback, cmCpeDataPortIndex=cmCpeDataPortIndex, cmDSLCurrentEntry=cmDSLCurrentEntry, cmTrunkIfSentError=cmTrunkIfSentError, cmCpeDSLIntervalRxNoBuffers=cmCpeDSLIntervalRxNoBuffers, cmDSLCurrentRxAlignmentErrors=cmDSLCurrentRxAlignmentErrors, cmTrapEventLogClassId=cmTrapEventLogClassId, cmProxyArpPII=cmProxyArpPII, cmEthernet=cmEthernet, cmDSLYesterdaysTxUnderruns=cmDSLYesterdaysTxUnderruns, cmTransmission=cmTransmission, cmDSLIntervalMinNoiseMargin=cmDSLIntervalMinNoiseMargin, cmDSL24HrRxAborts=cmDSL24HrRxAborts, cmRadiusAuthentication=cmRadiusAuthentication, cmCpeDataPortTotalRxDiscards=cmCpeDataPortTotalRxDiscards, cmV35AdminState=cmV35AdminState, cmTrapEventLogSeverity=cmTrapEventLogSeverity, cmDSL=cmDSL, cmProxyArpTable=cmProxyArpTable, cmHSSIAdminState=cmHSSIAdminState, cmTrapAlarmLogSeqNum=cmTrapAlarmLogSeqNum, cmDSLTodaysRxValidFrames=cmDSLTodaysRxValidFrames, cmRadiusAcctPrimaryIpAddr=cmRadiusAcctPrimaryIpAddr, cmLoopOwnerString=cmLoopOwnerString, cmCE150Platform=cmCE150Platform, cmVBridgeTable=cmVBridgeTable, cmHSSIDTEReady=cmHSSIDTEReady, cmIfaceName=cmIfaceName, cmVBridgeNMAC=cmVBridgeNMAC, cmDSLCurrentMinNoiseMargin=cmDSLCurrentMinNoiseMargin, cmAlarmIndex=cmAlarmIndex, cmBundleMember2EndPointID=cmBundleMember2EndPointID, cmHDSLModemBPHwVersion=cmHDSLModemBPHwVersion, cmLoginsSaturated=cmLoginsSaturated, cmTrunkTopoEntry=cmTrunkTopoEntry, cmTrapEventSeqNum=cmTrapEventSeqNum, cmCpeIDSLModemTerminationMode=cmCpeIDSLModemTerminationMode, cmTrapAlarmLogType=cmTrapAlarmLogType, cmEndPointPortEntry=cmEndPointPortEntry, cmMemberRowStatus=cmMemberRowStatus, cmCpeDSLIntervalTable=cmCpeDSLIntervalTable, cmSDSLTestIndex=cmSDSLTestIndex, cmCpeDataPortIgnoreDTR=cmCpeDataPortIgnoreDTR, cmCpeDSLIntervalRxAborts=cmCpeDSLIntervalRxAborts, cmCpeEthernetTx16Collisions=cmCpeEthernetTx16Collisions, cmMultiShelf=cmMultiShelf, cmHSSIDCEReady=cmHSSIDCEReady, cmDSL24HrTable=cmDSL24HrTable, cmStateEntry=cmStateEntry, cmShelfShelfNumber=cmShelfShelfNumber, cmBundleMember2PII=cmBundleMember2PII, cmCpeDataPortTotalTxDiscards=cmCpeDataPortTotalTxDiscards, cmSysObjectClass=cmSysObjectClass, cmIfaceBurnedInMacAddr=cmIfaceBurnedInMacAddr, cmIDSLBoardTimingStatus=cmIDSLBoardTimingStatus, cmRedundancyConflict=cmRedundancyConflict, cmCpeDSLIntervalRxTruncated=cmCpeDSLIntervalRxTruncated, cmCpeHDSLModemTxGain=cmCpeHDSLModemTxGain, cmEndPointConflictAlarm=cmEndPointConflictAlarm, cmDSLIntervalRxValidOctets=cmDSLIntervalRxValidOctets, cmBundleMember1Status=cmBundleMember1Status, cmIDSLModemActivationInterval=cmIDSLModemActivationInterval, cmCpeEthernetTxNotReady=cmCpeEthernetTxNotReady, cmFile=cmFile, cmCpeEthernetTxOK=cmCpeEthernetTxOK, cmCpeDataPortLoopbackStatus=cmCpeDataPortLoopbackStatus, cmBoardFileName=cmBoardFileName, cmLoopHistID=cmLoopHistID, cmBootFileError=cmBootFileError, cmHDSLPerfRxNoBuffers=cmHDSLPerfRxNoBuffers, cmDSLTodaysTable=cmDSLTodaysTable, cmV35RTS=cmV35RTS, cmFilterSrcMask=cmFilterSrcMask, cmCpeEthernetRxSkip=cmCpeEthernetRxSkip, cmRadiusAuthKey=cmRadiusAuthKey, cmFilterDstPortCompare=cmFilterDstPortCompare, cmGroupEntry=cmGroupEntry, cmShelfOperability=cmShelfOperability, cmSysPrimaryPII=cmSysPrimaryPII, cmMaintCmdPassword=cmMaintCmdPassword, cmAtmVclAdminStatus=cmAtmVclAdminStatus, cmHSSIOperState=cmHSSIOperState, cmCpeBoardPromVersion=cmCpeBoardPromVersion, cmVBridgeNUnknownDest=cmVBridgeNUnknownDest, cmHDSLModemFailedTrainingAttempts=cmHDSLModemFailedTrainingAttempts, cmCpeEthernetRxRunt=cmCpeEthernetRxRunt, cmCpeEthernetRxCRCError=cmCpeEthernetRxCRCError, cmLoopAction=cmLoopAction, cmActiveSessionStartTime=cmActiveSessionStartTime, cmCpeDataPortTM=cmCpeDataPortTM, cmTrapMinorAlarmCount=cmTrapMinorAlarmCount, cmCpeDataPortIntervalRxErrors=cmCpeDataPortIntervalRxErrors, cmCpeDataPortDTEDCE=cmCpeDataPortDTEDCE, cmDSLCurrentPortUpTime=cmDSLCurrentPortUpTime, cmCpeDataPortIntervalRxDiscards=cmCpeDataPortIntervalRxDiscards, cmServiceClassDweight=cmServiceClassDweight, cmMACIndex=cmMACIndex, cmRadiusAcctSecondaryPort=cmRadiusAcctSecondaryPort, cmCpeHDSLModemNoiseMargin=cmCpeHDSLModemNoiseMargin, cmShelfObjectClass=cmShelfObjectClass, cmDSLTodaysRxBig=cmDSLTodaysRxBig, cmSubIfaceTable=cmSubIfaceTable, PerfTotalCount=PerfTotalCount, cmFilterDstAdrs=cmFilterDstAdrs, cmTrapTypeLogProbableCause=cmTrapTypeLogProbableCause, cmDiagnostic=cmDiagnostic, cmFanFailureClear=cmFanFailureClear, cmSubIfaceEntry=cmSubIfaceEntry, cmDSLIntervalTimeTagBegin=cmDSLIntervalTimeTagBegin, cmServiceClassCweight=cmServiceClassCweight, cmDSLCurrentRxCRCErrors=cmDSLCurrentRxCRCErrors, cmState=cmState, cmTrapAlarmLogEntry=cmTrapAlarmLogEntry, cmSDSLTestStatus=cmSDSLTestStatus, cmCpeDataPortIntervalTxDiscards=cmCpeDataPortIntervalTxDiscards, cmHSSI=cmHSSI, cmTrunkIfRecvPackets=cmTrunkIfRecvPackets, cmFilterEntry=cmFilterEntry, cmDHCPEntry=cmDHCPEntry, cmIfaceFwdMode=cmIfaceFwdMode, cmCpeDataPortType=cmCpeDataPortType, cmLoopStatusChange=cmLoopStatusChange, cmFrDlcmiLMIRxUpdates=cmFrDlcmiLMIRxUpdates, cmNamePII=cmNamePII, cmIDSLModemTable=cmIDSLModemTable, cmFilterDstMask=cmFilterDstMask, cmCpeDataPortCTS=cmCpeDataPortCTS, cmTrap=cmTrap, cmConfigFileWriteOk=cmConfigFileWriteOk, cmCE200Platform=cmCE200Platform, cmLoginsAvailable=cmLoginsAvailable, cmMaintCmdCommand=cmMaintCmdCommand, cmServiceClass=cmServiceClass, cmFilterIndex=cmFilterIndex, cmMaintCmdEntry=cmMaintCmdEntry, cmLoopHistDuration=cmLoopHistDuration, cmFileFSName=cmFileFSName, cmHDSLModemCommand=cmHDSLModemCommand, cmFrDlcmiLMITxStatusResponses=cmFrDlcmiLMITxStatusResponses, cmAtmVclVpi=cmAtmVclVpi, cmBundleMember4PII=cmBundleMember4PII, cmTrapEventLogType=cmTrapEventLogType, cmServiceClassBweight=cmServiceClassBweight, cmLoginOK=cmLoginOK, cmVBridgeOption=cmVBridgeOption, cmAlarmVariable=cmAlarmVariable, cmHDSLPerfRxOverruns=cmHDSLPerfRxOverruns, cmCpeDataPortIntervalTable=cmCpeDataPortIntervalTable, cmTrunkConnectionIndex=cmTrunkConnectionIndex, cmEndPointConfigRowStatus=cmEndPointConfigRowStatus, cmDHCPIpAddress=cmDHCPIpAddress, cmDSL24HrRxTruncated=cmDSL24HrRxTruncated, cmVBridge=cmVBridge, cmCpeDataPortDTR=cmCpeDataPortDTR, cmCpeDSLIntervalRxBig=cmCpeDSLIntervalRxBig, cmShelfMaster=cmShelfMaster)
mibBuilder.exportSymbols("COPPER-MOUNTAIN-NETWORKS-DSL-MIB", cmFileFSUsername=cmFileFSUsername, cmDSLCurrentRxNoBuffers=cmDSLCurrentRxNoBuffers, cmAtmVclOperStatus=cmAtmVclOperStatus, cmATM=cmATM, cmCpeBoardUpTime=cmCpeBoardUpTime, cmMaintCmdPrimaryIpAddr=cmMaintCmdPrimaryIpAddr, cmStateTable=cmStateTable, cmCpeDataPortEntry=cmCpeDataPortEntry, cmHDSLModemIndex=cmHDSLModemIndex, cmAtmVclEntry=cmAtmVclEntry, cmBundleMember4Status=cmBundleMember4Status, cmDS3AtmEntry=cmDS3AtmEntry, cmDSLCurrentTxUnderruns=cmDSLCurrentTxUnderruns, cmConfigFileWriteFailed=cmConfigFileWriteFailed, cmCpeDSLIntervalRxValidOctets=cmCpeDSLIntervalRxValidOctets, cmHDSLPerfRxAlignmentErrors=cmHDSLPerfRxAlignmentErrors, cmCpeDataPortRL=cmCpeDataPortRL, cmBundleMember4EndPointID=cmBundleMember4EndPointID, cmSysOperState=cmSysOperState, cmVBridgeNDSL=cmVBridgeNDSL, cmTrunkIfSentPackets=cmTrunkIfSentPackets, cmCpeDataPortRTS=cmCpeDataPortRTS, cmTrapAlarmLogText=cmTrapAlarmLogText, cmCpeBoardHwType=cmCpeBoardHwType, cmSDSLTestEntry=cmSDSLTestEntry, cmDSLCurrentTable=cmDSLCurrentTable, cmCpeDataPortTotalRxFrames=cmCpeDataPortTotalRxFrames, cmLoopType=cmLoopType, cmCpeEthernetRxAlignError=cmCpeEthernetRxAlignError, cmIDSLBoardTimingMode=cmIDSLBoardTimingMode, cmActiveSessionOperatorName=cmActiveSessionOperatorName, cmHDSLPerfTxUnderruns=cmHDSLPerfTxUnderruns, cmFrCircuitTable=cmFrCircuitTable, cmRegistry=cmRegistry, cmBoardInformation=cmBoardInformation, cmV35DCD=cmV35DCD, cmTrunkConnectionTrunkMaster=cmTrunkConnectionTrunkMaster, cmLoopHistStatus=cmLoopHistStatus, cmMAC=cmMAC, cmTrunkIfRecvError=cmTrunkIfRecvError, cmActiveSessionContext=cmActiveSessionContext, cmDSLIntervalRxBig=cmDSLIntervalRxBig, cmHDSLModemTestMode=cmHDSLModemTestMode, cmBoardObjectClass=cmBoardObjectClass, cmSysTrapAddress=cmSysTrapAddress, cmMACDslPII=cmMACDslPII, cmMemberTable=cmMemberTable, cmEndPointConfigDownloadEndTime=cmEndPointConfigDownloadEndTime, cmSysConfigFileName=cmSysConfigFileName, cmRoleChange=cmRoleChange, cmHDSLModemNoiseMargin=cmHDSLModemNoiseMargin, cmVBridgeNUnicast=cmVBridgeNUnicast, cmRadiusAcctTertiaryPort=cmRadiusAcctTertiaryPort, cmCE200=cmCE200, cmCpeHDSLModemBPHwVersion=cmCpeHDSLModemBPHwVersion, cmIMUX=cmIMUX, cmDSL24HrTxValidFrames=cmDSL24HrTxValidFrames, cmCpeHDSLModemBPSwMajorVersion=cmCpeHDSLModemBPSwMajorVersion, cmFrCircuitEntry=cmFrCircuitEntry, cmLoopHistInterface=cmLoopHistInterface, cmEndPointConfigDownloadStartTime=cmEndPointConfigDownloadStartTime, cmRadiusAuthPrimaryPort=cmRadiusAuthPrimaryPort, cmLoopDuration=cmLoopDuration, cmEndPointPortPartnerPortPII=cmEndPointPortPartnerPortPII, cmIDSLBoardTimingAvailable=cmIDSLBoardTimingAvailable, cmProxyArpEntry=cmProxyArpEntry, cmCpeEthernetTxCollisions=cmCpeEthernetTxCollisions, cmDHCPRowStatus=cmDHCPRowStatus, cmCpeEthernetIntervalNumber=cmCpeEthernetIntervalNumber, cmTrunkIfEntry=cmTrunkIfEntry, cmCpeBoardFileDate=cmCpeBoardFileDate, cmTrapAlarmLogObjectClass=cmTrapAlarmLogObjectClass, cmTrapAlarmLogProbableCause=cmTrapAlarmLogProbableCause, cmIDSLBoardTimingLoss=cmIDSLBoardTimingLoss, cmEndPointPortPartnerBundlePII=cmEndPointPortPartnerBundlePII, cmStateObjClass=cmStateObjClass, cmDSL24HrTxUnderruns=cmDSL24HrTxUnderruns, cmLoopHistTimeElapsed=cmLoopHistTimeElapsed, cmHDSLModemTable=cmHDSLModemTable, cmDSLCurrentRxBig=cmDSLCurrentRxBig, cmCpeHDSLModemBPSwMinorVersion=cmCpeHDSLModemBPSwMinorVersion, cmTrapTypeLogObjectClass=cmTrapTypeLogObjectClass, cmCpeHDSLModemType=cmCpeHDSLModemType, cmCpeEthernetTxOutOfWindow=cmCpeEthernetTxOutOfWindow, cmCpeDataPortForceDSR=cmCpeDataPortForceDSR, cmAlarmRisingThreshold=cmAlarmRisingThreshold, cmRateFallbackClear=cmRateFallbackClear, cmHSSILoopback=cmHSSILoopback, cmCpeDataPortTotalTxFrames=cmCpeDataPortTotalTxFrames, cmBoardHwVersion=cmBoardHwVersion, cmHDSL=cmHDSL, cmFilterSrcPortCompare=cmFilterSrcPortCompare, cmIfaceFarEndAddr=cmIfaceFarEndAddr, cmTrunkConnectionOperState=cmTrunkConnectionOperState, cmSDSLTestDebugResult=cmSDSLTestDebugResult, cmActiveSessionEntry=cmActiveSessionEntry, cmDS3AtmCellMapping=cmDS3AtmCellMapping, cmTrapReceiverIPAddr=cmTrapReceiverIPAddr, cmCpeEthernetTxSQEErr=cmCpeEthernetTxSQEErr, cmTrapDestinationCommunity=cmTrapDestinationCommunity, cmFrDlcmiDceT392=cmFrDlcmiDceT392, cmCpeEthernetRxMiss=cmCpeEthernetRxMiss, cmFrCircuitFramesDroppedTxUnavail=cmFrCircuitFramesDroppedTxUnavail, cmIfaceEntry=cmIfaceEntry, cmIDSLModemNetworkElements=cmIDSLModemNetworkElements, cmDHCP=cmDHCP, cmShelfUpTime=cmShelfUpTime, cmHSSISync=cmHSSISync, cmTrapTypeLogTimeTag=cmTrapTypeLogTimeTag, cmDSLYesterdaysTable=cmDSLYesterdaysTable, cmNameEntry=cmNameEntry, cmCpeDataPortIgnoreRTS=cmCpeDataPortIgnoreRTS, cmIDSLModemCpeCode=cmIDSLModemCpeCode, cmSubIfaceName=cmSubIfaceName, cmTrunkConnectionTable=cmTrunkConnectionTable, cmDSLTodaysPortUpTime=cmDSLTodaysPortUpTime, cmAlarmStartupAlarm=cmAlarmStartupAlarm, cmDSLYesterdaysMinNoiseMargin=cmDSLYesterdaysMinNoiseMargin, cmHDSLModemDataRate=cmHDSLModemDataRate, cmIfaceDestPII=cmIfaceDestPII, cmBoardUp=cmBoardUp, cmHDSLPerfIntervalEntry=cmHDSLPerfIntervalEntry, cmIfaceTable=cmIfaceTable, cmDSLIntervalRxNoBuffers=cmDSLIntervalRxNoBuffers, cmCpeDataPortIntervalIndex=cmCpeDataPortIntervalIndex, cmHDSLPerfRxCRCErrors=cmHDSLPerfRxCRCErrors, cmDSLTodaysRxValidOctets=cmDSLTodaysRxValidOctets, cmIfaceEncapsulationType=cmIfaceEncapsulationType, cmTrunkIfOperState=cmTrunkIfOperState, cmLoopRxErrors=cmLoopRxErrors, cmDSLTodaysRxAlignmentErrors=cmDSLTodaysRxAlignmentErrors, cmActiveSessionTable=cmActiveSessionTable, cmTrapReceiverOwnerString=cmTrapReceiverOwnerString, cmIDSLBoardTimingLossClear=cmIDSLBoardTimingLossClear, cmCpeEthernetRxExtraData=cmCpeEthernetRxExtraData, cmLoopStatus=cmLoopStatus, cmFrameRelay=cmFrameRelay, cmLoopTxCount=cmLoopTxCount, cmMACPII=cmMACPII, cmOperStateChange=cmOperStateChange, cmDSLTodaysTxValidFrames=cmDSLTodaysTxValidFrames, cmRadius=cmRadius, cmVBridgePII=cmVBridgePII, cmCpeDSLIntervalRxOverruns=cmCpeDSLIntervalRxOverruns, cmHDSLModemCpeCode=cmHDSLModemCpeCode, cmDSLIntervalRxValidFrames=cmDSLIntervalRxValidFrames, cmCpeDSLIntervalRxAlignmentErrors=cmCpeDSLIntervalRxAlignmentErrors, cmCpeEthernetRxOK=cmCpeEthernetRxOK, cmSDSLTestTable=cmSDSLTestTable, cmMaintCmdStatusText=cmMaintCmdStatusText, cmDSL24HrRxAlignmentErrors=cmDSL24HrRxAlignmentErrors, cmFallingAlarm=cmFallingAlarm, cmGroupTable=cmGroupTable, cmCpeDataPortIntervalRxFrames=cmCpeDataPortIntervalRxFrames, cmEndPointPortTable=cmEndPointPortTable, cmAttributeChange=cmAttributeChange, cmHSSITxClockPresent=cmHSSITxClockPresent, cmOperator=cmOperator, cmCpeDSLIntervalTxValidOctets=cmCpeDSLIntervalTxValidOctets, cmMemberGrpName=cmMemberGrpName, cmLoopInterface=cmLoopInterface, cmHDSLPerfIntervalTable=cmHDSLPerfIntervalTable, cmHDSLPerfRxTruncated=cmHDSLPerfRxTruncated, cmCpeHDSLModemDataRate=cmCpeHDSLModemDataRate, cmVBridgeNOverflow=cmVBridgeNOverflow, cmCpeDataPortIntervalRxOctets=cmCpeDataPortIntervalRxOctets, cmCpeDSLIntervalTxUnderruns=cmCpeDSLIntervalTxUnderruns, cmCpeEthernetTxJabber=cmCpeEthernetTxJabber, cmCpeDataPortTotalTxErrors=cmCpeDataPortTotalTxErrors, cmTrunkTopoTable=cmTrunkTopoTable, cmSDSLTestType=cmSDSLTestType, cmFanFailure=cmFanFailure, cmIfaceIfIndex=cmIfaceIfIndex, cmDataPort=cmDataPort, cmCpeIDSLModemIndex=cmCpeIDSLModemIndex, cmLoopTermCode=cmLoopTermCode, cmBundleMember1EndPointID=cmBundleMember1EndPointID, cmCpeBoardVendorDescription=cmCpeBoardVendorDescription, cmLoopHistTxCount=cmLoopHistTxCount, cmLoginsAllowed=cmLoginsAllowed, cmRadiusAuthSecondaryPort=cmRadiusAuthSecondaryPort, cmDSLTodaysTxValidOctets=cmDSLTodaysTxValidOctets, CmObjectPII=CmObjectPII, cmV35IfIndex=cmV35IfIndex, cmDSLYesterdaysRxCRCErrors=cmDSLYesterdaysRxCRCErrors, cmDHCPNetMask=cmDHCPNetMask, cmSubIfaceRowStatus=cmSubIfaceRowStatus, cmCpeIDSLModemOperState=cmCpeIDSLModemOperState, cmDSL24HrRxCRCErrors=cmDSL24HrRxCRCErrors, cmFrCircuitDlci=cmFrCircuitDlci, cmDSL24HrRxValidFrames=cmDSL24HrRxValidFrames, cmDSLIntervalEntry=cmDSLIntervalEntry, cmFilterTable=cmFilterTable, cmAlarmEntry=cmAlarmEntry, cmTrapDestinationIpAddr=cmTrapDestinationIpAddr, cmFrCircuitFramesDroppedExcess=cmFrCircuitFramesDroppedExcess, cmDSLTodaysMinNoiseMargin=cmDSLTodaysMinNoiseMargin, cmMaintCmdDirectory=cmMaintCmdDirectory, cmFrCircuitIfIndex=cmFrCircuitIfIndex, cmDS3AtmTable=cmDS3AtmTable, cmTrapDestinationEntry=cmTrapDestinationEntry, cmEndPointConfigBulkDownload=cmEndPointConfigBulkDownload, cmAtmVclRowStatus=cmAtmVclRowStatus, cmHDSLModemTxGain=cmHDSLModemTxGain, cmLoopHistTermCode=cmLoopHistTermCode, cmDSL24HrTxValidOctets=cmDSL24HrTxValidOctets, cmTrapMajorAlarmCount=cmTrapMajorAlarmCount, cmTrapWarningCount=cmTrapWarningCount, cmCpeDataPortLL=cmCpeDataPortLL, cmLoginsSuspended=cmLoginsSuspended, cmBoardNumPorts=cmBoardNumPorts, cmTrapAlarmLogTimeTag=cmTrapAlarmLogTimeTag, cmFileFSPassword=cmFileFSPassword, cmSDSLTestNearEndLoopProfile=cmSDSLTestNearEndLoopProfile, cmDSL24HrRxOverruns=cmDSL24HrRxOverruns, cmCpeBoardIndex=cmCpeBoardIndex, cmDSLTodaysTxUnderruns=cmDSLTodaysTxUnderruns, cmConfigFileReadOk=cmConfigFileReadOk, cmFrDlcmiEntry=cmFrDlcmiEntry, cmCpeBoardSwVersion=cmCpeBoardSwVersion, cmSysConfigSynch=cmSysConfigSynch, cmMaintCmdTable=cmMaintCmdTable, cmActiveSessionIdleTimeout=cmActiveSessionIdleTimeout, cmSNMP=cmSNMP, cmSysShelfCount=cmSysShelfCount, cmDSLTodaysEntry=cmDSLTodaysEntry, cmFileFSDir=cmFileFSDir, cmRadiusAuthTertiaryPort=cmRadiusAuthTertiaryPort, cmVBridgeEntry=cmVBridgeEntry, cmHDSLPerfRxAborts=cmHDSLPerfRxAborts, cmBundleTable=cmBundleTable, cmDSLYesterdaysEntry=cmDSLYesterdaysEntry, cmAtmVclAal5CpcsReceiveSduSize=cmAtmVclAal5CpcsReceiveSduSize, cmCpeDataPortTotalTxOctets=cmCpeDataPortTotalTxOctets, cmIfaceNetMask=cmIfaceNetMask, cmConfigFileReadFailed=cmConfigFileReadFailed, cmDSL24HrPortUpTime=cmDSL24HrPortUpTime, cmDSLYesterdaysRxValidOctets=cmDSLYesterdaysRxValidOctets, cmBoardClusterRole=cmBoardClusterRole, cmLoopHistEntry=cmLoopHistEntry, cmCpeBoardObjectClass=cmCpeBoardObjectClass, cmShelfEntry=cmShelfEntry, cmDHCPTable=cmDHCPTable, cmIDSLBoardTable=cmIDSLBoardTable, cmIDSLModemOperState=cmIDSLModemOperState, cmFileBootDevice=cmFileBootDevice, cmAlarmValue=cmAlarmValue, cmEndPoint=cmEndPoint, cmMaintCmdStatusChange=cmMaintCmdStatusChange, cmSysMaster=cmSysMaster, cmDSLCurrentRxValidOctets=cmDSLCurrentRxValidOctets)
