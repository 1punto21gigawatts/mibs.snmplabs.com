#
# PySNMP MIB module PCSYSTEMSMIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCSYSTEMSMIF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Bits, NotificationType, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, Counter64, Unsigned32, ModuleIdentity, ObjectIdentity, Integer32, iso, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "NotificationType", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Integer32", "iso", "Counter32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class DmiInteger(Integer32):
    pass

class DmiInteger64(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDate(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
netFinity = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 71))
dmiMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 71, 200))
netFinitySystemsMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1))
dmtfGroups1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1))
tComponentid1 = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1), )
if mibBuilder.loadTexts: tComponentid1.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid1.setDescription('This group defines the attributes common to all components. This group is required.')
eComponentid1 = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid1.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid1.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this system described by this component.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for the system described by this component.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this component.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for the system described by this component.')
tGeneralInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2), )
if mibBuilder.loadTexts: tGeneralInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tGeneralInformation.setDescription('This group defines general information about this system.')
eGeneralInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eGeneralInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eGeneralInformation.setDescription('')
a2SystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 1), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemName.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemName.setDescription('A name to identify this system.')
a2SystemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemLocation.setDescription('The physical location of this system.')
a2SystemPrimaryUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemPrimaryUserName.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemPrimaryUserName.setDescription('The name of the primary user or owner of this system.')
a2SystemPrimaryUserPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemPrimaryUserPhone.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemPrimaryUserPhone.setDescription('The phone number of the primary user of this system.')
a2SystemBootUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SystemBootUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemBootUpTime.setDescription('The time at which the system was last booted')
a2SystemDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 2, 1, 6), DmiDate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2SystemDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemDateTime.setDescription('This attribute returns the actual system date and time.')
tOperatingSystem = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3), )
if mibBuilder.loadTexts: tOperatingSystem.setStatus('mandatory')
if mibBuilder.loadTexts: tOperatingSystem.setDescription('This group defines general information about operating systems installed on this system.')
eOperatingSystem = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a3OperatingSystemIndex"))
if mibBuilder.loadTexts: eOperatingSystem.setStatus('mandatory')
if mibBuilder.loadTexts: eOperatingSystem.setDescription('')
a3OperatingSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3OperatingSystemIndex.setDescription('The index into the operating system table.')
a3OperatingSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: a3OperatingSystemName.setDescription('The name of this operating system.')
a3OperatingSystemVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a3OperatingSystemVersion.setDescription('The version number of this operating system.')
a3PrimaryOperatingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3PrimaryOperatingSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a3PrimaryOperatingSystem.setDescription('If true, this is the primary operating system.')
a3OperatingSystemBootDeviceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHard-disk", 3), ("vFloppy-disk", 4), ("vOptical-rom", 5), ("vOptical-worm", 6), ("vOptical-rw", 7), ("vCompact-disk", 8), ("vFlash-disk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemBootDeviceStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: a3OperatingSystemBootDeviceStorageType.setDescription('An index into the Disks Table to indicate the device from which this operating system was booted. To fully access the Disks Table, this index must be combined with the attribute Boot Device Index')
a3OperatingSystemBootDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemBootDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3OperatingSystemBootDeviceIndex.setDescription('An index into the Disks Table')
a3OperatingSystemBootPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemBootPartitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3OperatingSystemBootPartitionIndex.setDescription('An index into the Partition table indicating the partition from which this operating system booted.')
a3OperatingSystemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 3, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperatingSystemDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a3OperatingSystemDescription.setDescription('A description of this operating system.')
tSystemBios = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4), )
if mibBuilder.loadTexts: tSystemBios.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemBios.setDescription('This group defines the attributes for the System BIOS.')
eSystemBios = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a4BiosIndex"))
if mibBuilder.loadTexts: eSystemBios.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemBios.setDescription('')
a4BiosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosIndex.setDescription('The index into the system BIOS table.')
a4Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a4Manufacturer.setDescription('The name of the company that wrote this System BIOS.')
a4Version = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Version.setStatus('mandatory')
if mibBuilder.loadTexts: a4Version.setDescription('The version number or version string of this BIOS.')
a4BiosRomSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosRomSize.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosRomSize.setDescription('The physical size of this BIOS ROM device in Kilo Bytes')
a4StartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 5), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4StartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a4StartingAddress.setDescription('The starting physical address for the memory which the BIOS occupies')
a4EndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 6), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4EndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a4EndingAddress.setDescription('The ending physical address for the memory which the BIOS occupies')
a4LoaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LoaderVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a4LoaderVersion.setDescription('The BIOS flash loader version number or string.')
a4BiosReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 8), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BiosReleaseDate.setStatus('mandatory')
if mibBuilder.loadTexts: a4BiosReleaseDate.setDescription('The BIOS release date.')
a4PrimaryBios = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PrimaryBios.setStatus('mandatory')
if mibBuilder.loadTexts: a4PrimaryBios.setDescription('If true, this is the primary System BIOS.')
tSystemBiosCharacteristic = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5), )
if mibBuilder.loadTexts: tSystemBiosCharacteristic.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemBiosCharacteristic.setDescription('This group defines the characteristics for the System BIOS.')
eSystemBiosCharacteristic = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a5BiosCharacteristicsIndex"), (0, "PCSYSTEMSMIF-MIB", "a5BiosNumber"))
if mibBuilder.loadTexts: eSystemBiosCharacteristic.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemBiosCharacteristic.setDescription('')
a5BiosCharacteristicsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristicsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a5BiosCharacteristicsIndex.setDescription('This is an index into the BIOS Characteristics table. ')
a5BiosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a5BiosNumber.setDescription('This field refers to the BIOS number, which correlates to the System BIOS Index. ')
a5BiosCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnsupported", 3), ("vIsa-support", 4), ("vMca-support", 5), ("vEisa-support", 6), ("vPci-support", 7), ("vPcmcia-support", 8), ("vPnp-support", 9), ("vApmSupport", 10), ("vUpgradeable-bios", 11), ("vBios-shadowing-allowed", 12), ("vVl-vesa-support", 13), ("vEscdSupport", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: a5BiosCharacteristics.setDescription('The different attributes supported by this version of the BIOS')
a5BiosCharacteristicsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 5, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5BiosCharacteristicsDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a5BiosCharacteristicsDescription.setDescription('An expanded description of this BIOS Characteristic.')
tProcessor = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6), )
if mibBuilder.loadTexts: tProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: tProcessor.setDescription('This group defines the attributes for each and every processor installed in this system.')
eProcessor = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a6ProcessorIndex"))
if mibBuilder.loadTexts: eProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: eProcessor.setDescription('')
a6ProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6ProcessorIndex.setDescription('An index into the processor table.')
a6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCentralProcessor", 3), ("vMath-processor", 4), ("vDsp-processor", 5), ("vVideo-processor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Type.setStatus('mandatory')
if mibBuilder.loadTexts: a6Type.setDescription('The type of processor currently in the system.')
a6ProcessorFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 48, 64, 80, 96, 112, 128, 144))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8086", 3), ("v80286", 4), ("v80386", 5), ("v80486", 6), ("v8087", 7), ("v80287", 8), ("v80387", 9), ("v80487", 10), ("vPentiumFamily", 11), ("vPowerPcFamily", 32), ("vAlphaFamily", 48), ("vMipsFamily", 64), ("vSparcFamily", 80), ("v68040Family", 96), ("vHobbitFamily", 112), ("vWeitek", 128), ("vPa-riscFamily", 144)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorFamily.setStatus('mandatory')
if mibBuilder.loadTexts: a6ProcessorFamily.setDescription('The family of processors to which this processor belongs.')
a6VersionInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6VersionInformation.setStatus('mandatory')
if mibBuilder.loadTexts: a6VersionInformation.setDescription('The version number or string for this processor.')
a6MaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6MaximumSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a6MaximumSpeed.setDescription('The maximum speed (in MHz) of this processor.')
a6CurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6CurrentSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a6CurrentSpeed.setDescription('The current speed (in MHz) of this processor.')
a6ProcessorUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDaughterBoard", 3), ("vZifSocket", 4), ("vReplacementpiggyBack", 5), ("vNone", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ProcessorUpgrade.setStatus('mandatory')
if mibBuilder.loadTexts: a6ProcessorUpgrade.setDescription('The method by which this processor can be upgraded, if upgrades are supported. ')
a6FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is partof another FRU, this provides index into the FRU table.A Value = -1 means that the group is not a FRU')
a6OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 6, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable')
tMotherboard = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7), )
if mibBuilder.loadTexts: tMotherboard.setStatus('mandatory')
if mibBuilder.loadTexts: tMotherboard.setDescription('This group defines attributes for the mother board')
eMotherboard = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMotherboard.setStatus('mandatory')
if mibBuilder.loadTexts: eMotherboard.setDescription('')
a7NumberOfExpansionSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7NumberOfExpansionSlots.setStatus('mandatory')
if mibBuilder.loadTexts: a7NumberOfExpansionSlots.setDescription('This attribute indicates the total number of expansion slots which physically exist on the motherboard whether occupied or not (See System Slots groups)')
a7FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is partof another FRU, this provides index into the FRU table.A Value = -1 means that the group is not a FRU')
a7OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable')
tPhysicalMemory = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8), )
if mibBuilder.loadTexts: tPhysicalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalMemory.setDescription('This group defines the physical attributes for system memory and any add- on memory installed in this system.')
ePhysicalMemory = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a8PhysicalMemoryIndex"))
if mibBuilder.loadTexts: ePhysicalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalMemory.setDescription('')
a8PhysicalMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8PhysicalMemoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a8PhysicalMemoryIndex.setDescription('An index into the physical memory table.')
a8PhysicalMemoryLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSystemBoardOrMotherBoard", 3), ("vIsaAddOnCard", 4), ("vEisaAddOnCard", 5), ("vPciAddOnCard", 6), ("vMcaAddOnCard", 7), ("vPcmciaAddOnCard", 8), ("vProprietaryAddOnCard", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8PhysicalMemoryLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a8PhysicalMemoryLocation.setDescription('The location of the memory modules, whether on the system board or an add on board.')
a8MemoryStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 3), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemoryStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a8MemoryStartingAddress.setDescription('This is the starting physical address mapped by this memory component')
a8MemoryEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 4), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemoryEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a8MemoryEndingAddress.setDescription('This is the ending physical address mapped by this memory component')
a8MemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSystemMemory", 3), ("vVideoMemory", 4), ("vFlashMemory", 5), ("vNonVolatileRam", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemoryUsage.setStatus('mandatory')
if mibBuilder.loadTexts: a8MemoryUsage.setDescription('What this memory component is used for.')
a8MaximumMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MaximumMemoryCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: a8MaximumMemoryCapacity.setDescription('The maximum memory capacity, in MegaBytes on this device.')
a8NumberOfSimmSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfSimmSlots.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfSimmSlots.setDescription('The number of SIMM slots available for this type of memory on this device.')
a8NumberOfSimmSlotsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfSimmSlotsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfSimmSlotsUsed.setDescription('The number of SIMM slots in use for this type of memory on this device')
a8MemorySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemorySpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a8MemorySpeed.setDescription('The speed of this memory component in nano seconds')
a8MemoryErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vParity", 4), ("vSingleBitEcc", 5), ("vMultibitEcc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MemoryErrorCorrection.setStatus('mandatory')
if mibBuilder.loadTexts: a8MemoryErrorCorrection.setDescription('The main type of error correction scheme supported by this memory component.')
a8FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a8FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is partof another FRU, this provides index into the FRU table.A Value = -1 means that the group is not a FRU')
a8OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 8, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a8OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable')
tLogicalMemory = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9), )
if mibBuilder.loadTexts: tLogicalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: tLogicalMemory.setDescription('This group defines the logical memory attributes for system memory and any add-on memory installed in this system.')
eLogicalMemory = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eLogicalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: eLogicalMemory.setDescription('')
a9BaseMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9BaseMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a9BaseMemorySize.setDescription('The total size of the base memory in Kilo Bytes.')
a9FreeBaseMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FreeBaseMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a9FreeBaseMemorySize.setDescription('The size of free base memory in Kilo Bytes.')
a9ExtendedMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExtendedMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a9ExtendedMemorySize.setDescription('The total size of the extended memory in Kilo Bytes.')
a9FreeExtendedMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FreeExtendedMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a9FreeExtendedMemorySize.setDescription('The size of free extended memory in Kilo Bytes.')
a9ExtendedMemoryManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExtendedMemoryManagerName.setStatus('mandatory')
if mibBuilder.loadTexts: a9ExtendedMemoryManagerName.setDescription('The name of the extended memory manager.')
a9ExtendedMemoryManagerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExtendedMemoryManagerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a9ExtendedMemoryManagerVersion.setDescription('The version information of the extended memory manager.')
a9ExpandedMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a9ExpandedMemorySize.setDescription('The total size of the expanded memory in Kilo Bytes.')
a9FreeExpandedMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FreeExpandedMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a9FreeExpandedMemorySize.setDescription('The size of free expanded memory in Kilo Bytes.')
a9ExpandedMemoryManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryManagerName.setStatus('mandatory')
if mibBuilder.loadTexts: a9ExpandedMemoryManagerName.setDescription('The name of the expanded memory manager.')
a9ExpandedMemoryManagerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryManagerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a9ExpandedMemoryManagerVersion.setDescription('The version information of the expanded memory manager.')
a9ExpandedMemoryPageFrameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 11), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryPageFrameAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a9ExpandedMemoryPageFrameAddress.setDescription('The starting physical address of the expanded memory page frame.')
a9ExpandedMemoryPageFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryPageFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: a9ExpandedMemoryPageFrameSize.setDescription('The size in Kilo Bytes of the expanded memory page frame.')
a9ExpandedMemoryPageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 9, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ExpandedMemoryPageSize.setStatus('mandatory')
if mibBuilder.loadTexts: a9ExpandedMemoryPageSize.setDescription('The size in Kilo Bytes of an expanded memory page, as opposed to the expanded memory page frame, which consists of a number of memory pages.')
tSystemCache = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10), )
if mibBuilder.loadTexts: tSystemCache.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemCache.setDescription('This group defines the attributes for different System Caches installed in this system.')
eSystemCache = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a10SystemCacheIndex"))
if mibBuilder.loadTexts: eSystemCache.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemCache.setDescription('')
a10SystemCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheIndex.setDescription('An index into the System Cache table.')
a10SystemCacheLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vPrimary", 3), ("vSecondary", 4), ("vTertiary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheLevel.setDescription('Defines primary or secondary System Cache, or a subsidiary cache.')
a10SystemCacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheSpeed.setDescription('The speed of this System Cache module in nano seconds')
a10SystemCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheSize.setDescription('The size of this System Cache module in Kilo Bytes.')
a10SystemCacheWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vWriteBack", 3), ("vWriteThrough", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheWritePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheWritePolicy.setDescription('Is this a write-back or a write-through cache?')
a10SystemCacheErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vParity", 4), ("vSingleBitEcc", 5), ("vMultibitEcc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10SystemCacheErrorCorrection.setStatus('mandatory')
if mibBuilder.loadTexts: a10SystemCacheErrorCorrection.setDescription('This field describes the main type of error correction scheme supported by thiscache component.')
a10FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a10FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is partof another FRU, this provides an index into the FRU table.A Value = -1 means that the group is not a FRU')
a10OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 10, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a10OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable')
tParallelPorts = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11), )
if mibBuilder.loadTexts: tParallelPorts.setStatus('mandatory')
if mibBuilder.loadTexts: tParallelPorts.setDescription('This group defines the attributes for parallel ports in this system.')
eParallelPorts = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a11ParallelPortIndex"))
if mibBuilder.loadTexts: eParallelPorts.setStatus('mandatory')
if mibBuilder.loadTexts: eParallelPorts.setDescription('')
a11ParallelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ParallelPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a11ParallelPortIndex.setDescription('An index into the parallel ports table.')
a11ParallelBaseIoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ParallelBaseIoAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a11ParallelBaseIoAddress.setDescription('Base I/O address for this parallel port.')
a11IrqUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11IrqUsed.setStatus('mandatory')
if mibBuilder.loadTexts: a11IrqUsed.setDescription('IRQ number that is being used by this parallel port.')
a11LogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11LogicalName.setStatus('mandatory')
if mibBuilder.loadTexts: a11LogicalName.setDescription('The logical name of the I/O device on this parallel port, under this operating environment.')
a11ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDb-25Female", 3), ("vDb-25Male", 4), ("vCentronics", 5), ("vMini-centronics", 6), ("vProprietary", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a11ConnectorType.setDescription('The connector used to interface with this I/O device on this parallel port.')
a11ConnectorPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vXtat", 3), ("vPs2", 4), ("vIeee1284", 5), ("vProprietary", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ConnectorPinout.setStatus('mandatory')
if mibBuilder.loadTexts: a11ConnectorPinout.setDescription('The pinout used by the I/O device on this parallel port.')
a11DmaSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11DmaSupport.setStatus('mandatory')
if mibBuilder.loadTexts: a11DmaSupport.setDescription('If true, DMA is supported.')
a11ParallelPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11ParallelPortCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: a11ParallelPortCapabilities.setDescription('Capabilities of this parallel port. This is a bit field mask with the bits defined as follows: Bit 0 set = XT/AT compatible Bit 1 set = PS/2 compatible Bit 2 set = ECP Bit 3 set = EPP')
a11OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 11, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a11OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable')
tSerialPorts = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12), )
if mibBuilder.loadTexts: tSerialPorts.setStatus('mandatory')
if mibBuilder.loadTexts: tSerialPorts.setDescription('This group defines the attributes for serial ports in this system.')
eSerialPorts = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a12SerialPortIndex"))
if mibBuilder.loadTexts: eSerialPorts.setStatus('mandatory')
if mibBuilder.loadTexts: eSerialPorts.setDescription('')
a12SerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12SerialPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a12SerialPortIndex.setDescription('An index into the serial ports table.')
a12SerialBaseIo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12SerialBaseIo.setStatus('mandatory')
if mibBuilder.loadTexts: a12SerialBaseIo.setDescription('Base I/O address for this serial port.')
a12IrqUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12IrqUsed.setStatus('mandatory')
if mibBuilder.loadTexts: a12IrqUsed.setDescription('IRQ number that is being used by this serial port.')
a12LogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12LogicalName.setStatus('mandatory')
if mibBuilder.loadTexts: a12LogicalName.setDescription('The logical name of this serial port under this operating environment.')
a12ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDb-9PinMale", 3), ("vDb-9PinFemale", 4), ("vDb-25PinMale", 5), ("vDb-25PinFemale", 6), ("vRj-11", 7), ("vRj-45", 8), ("vProprietary", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12ConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a12ConnectorType.setDescription('The connector used to interface with the I/O device on this serial port.')
a12MaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MaximumSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a12MaximumSpeed.setDescription('Maximum transfer speed of the device on this serial port in bits per second.')
a12SerialPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vXtatCcompatible", 3), ("v16450Compatible", 4), ("v16550Compatible", 5), ("v16550aCompatible", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12SerialPortCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: a12SerialPortCapabilities.setDescription('The capabilities of this Serial port.')
a12OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 12, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a12OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable')
tIrq = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13), )
if mibBuilder.loadTexts: tIrq.setStatus('mandatory')
if mibBuilder.loadTexts: tIrq.setDescription('This groups defines attributes for IRQs in this system.')
eIrq = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a13IrqNumber"))
if mibBuilder.loadTexts: eIrq.setStatus('mandatory')
if mibBuilder.loadTexts: eIrq.setDescription('')
a13IrqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13IrqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a13IrqNumber.setDescription('The current IRQ number for this IRQ.')
a13AvailabilityOfIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAvailable", 3), ("vInUse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13AvailabilityOfIrq.setStatus('mandatory')
if mibBuilder.loadTexts: a13AvailabilityOfIrq.setDescription('Is this IRQ available or in use.')
a13IrqTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLevel", 3), ("vEdge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13IrqTriggerType.setStatus('mandatory')
if mibBuilder.loadTexts: a13IrqTriggerType.setDescription('The attribute indicates the trigger type of the IRQ')
a13IrqShareable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13IrqShareable.setStatus('mandatory')
if mibBuilder.loadTexts: a13IrqShareable.setDescription('If true, this IRQ is shareable.')
a13IrqDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 13, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13IrqDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a13IrqDescription.setDescription('The name of the logical device name that is currently using this IRQ.')
tDma = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14), )
if mibBuilder.loadTexts: tDma.setStatus('mandatory')
if mibBuilder.loadTexts: tDma.setDescription('This group defines various attributes for the various DMA channels in this system.')
eDma = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a14DmaNumber"))
if mibBuilder.loadTexts: eDma.setStatus('mandatory')
if mibBuilder.loadTexts: eDma.setDescription('')
a14DmaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DmaNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a14DmaNumber.setDescription('The current DMA channel number.')
a14AvailabilityOfDma = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AvailabilityOfDma.setStatus('mandatory')
if mibBuilder.loadTexts: a14AvailabilityOfDma.setDescription('If true, this DMA channel is available.')
a14DmaBurstMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DmaBurstMode.setStatus('mandatory')
if mibBuilder.loadTexts: a14DmaBurstMode.setDescription('If true, this DMA channel supports burst mode.')
a14DmaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 14, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DmaDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a14DmaDescription.setDescription('The name of the logical device that is currently using this DMA channel.')
tMemoryMappedIo = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15), )
if mibBuilder.loadTexts: tMemoryMappedIo.setStatus('mandatory')
if mibBuilder.loadTexts: tMemoryMappedIo.setDescription('This group defines various attributes for memory mapped I/O on this system.')
eMemoryMappedIo = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a15MemoryMappedIoStartingAddress"))
if mibBuilder.loadTexts: eMemoryMappedIo.setStatus('mandatory')
if mibBuilder.loadTexts: eMemoryMappedIo.setDescription('')
a15MemoryMappedIoStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15, 1, 1), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15MemoryMappedIoStartingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a15MemoryMappedIoStartingAddress.setDescription('The starting address of a contiguous System memory mapped I/O region.')
a15MemoryMappedIoEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15MemoryMappedIoEndingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a15MemoryMappedIoEndingAddress.setDescription('The ending address of a contiguous System memory mapped I/O region.')
a15MemoryMappedIoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 15, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15MemoryMappedIoDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a15MemoryMappedIoDescription.setDescription('The name of the logical device currently using this Memory Mapped I/O.')
tSystemEnclosure = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16), )
if mibBuilder.loadTexts: tSystemEnclosure.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemEnclosure.setDescription('This group defines the attributes for the system enclosure.')
eSystemEnclosure = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSystemEnclosure.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemEnclosure.setDescription('')
a16EnclosureOrChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDesktop", 3), ("vLowProfileDesktop", 4), ("vPizzaBox", 5), ("vMiniTower", 6), ("vTower", 7), ("vPortable", 8), ("vLaptop", 9), ("vNotebook", 10), ("vHandHeld", 11), ("vDockingStation", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16EnclosureOrChassis.setStatus('mandatory')
if mibBuilder.loadTexts: a16EnclosureOrChassis.setDescription('The type of Enclosure.')
a16AssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a16AssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: a16AssetTag.setDescription('The system asset tag number or string')
a16ChassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16ChassisLockPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a16ChassisLockPresent.setDescription('If true, a chassis lock is present.')
a16BootUpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSafe", 3), ("vWarning", 4), ("vCritical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16BootUpState.setStatus('mandatory')
if mibBuilder.loadTexts: a16BootUpState.setDescription('The current state of this system when it booted.')
a16PowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSafe", 3), ("vWarning", 4), ("vCritical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16PowerState.setStatus('mandatory')
if mibBuilder.loadTexts: a16PowerState.setDescription('The current state of the power supply state for this system.')
a16ThermalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSafe", 3), ("vWarning", 4), ("vCritical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16ThermalState.setStatus('mandatory')
if mibBuilder.loadTexts: a16ThermalState.setDescription('The current thermal state of this system.')
a16FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a16FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is partof another FRU, this provides index into the FRU table.A Value = -1 means that the group is not a FRU')
a16OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 16, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a16OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable')
tPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17), )
if mibBuilder.loadTexts: tPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: tPowerSupply.setDescription('This group defines various attributes for power supplies in this system.')
ePowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a17PowerSupplyIndex"))
if mibBuilder.loadTexts: ePowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ePowerSupply.setDescription('')
a17PowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17PowerSupplyIndex.setDescription('The index number of the current power supply.')
a17FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is partof another FRU, this provides index into the FRU table.A Value = -1 means that the group is not a FRU')
a17OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 17, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable')
tCoolingDevice = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18), )
if mibBuilder.loadTexts: tCoolingDevice.setStatus('mandatory')
if mibBuilder.loadTexts: tCoolingDevice.setDescription('This group defines various attributes for cooling devices in this system.')
eCoolingDevice = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a18CoolingDeviceIndex"))
if mibBuilder.loadTexts: eCoolingDevice.setStatus('mandatory')
if mibBuilder.loadTexts: eCoolingDevice.setDescription('')
a18CoolingDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a18CoolingDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a18CoolingDeviceIndex.setDescription('An index into the cooling device table.')
a18FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a18FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a18FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is partof another FRU, this provides index into the FRU table.A Value = -1 means that the group is not a FRU')
a18OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 18, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a18OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a18OperationalGroupIndex.setDescription('The index into the Operational State Table for this device if applicable')
tSystemSlots = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19), )
if mibBuilder.loadTexts: tSystemSlots.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemSlots.setDescription('This group defines the attributes for the different system expansion slots supported in this system.')
eSystemSlots = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a19SlotIndex"))
if mibBuilder.loadTexts: eSystemSlots.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemSlots.setDescription('')
a19SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a19SlotIndex.setDescription('An index into the system slot table. This is the hardware ID number for each expansion slot, whether it is occupied or not (starting with 1)')
a19SlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 18, 20, 24))).clone(namedValues=NamedValues(("vUnknown", 1), ("vIsa", 2), ("vEisa", 4), ("vMca", 8), ("vPci", 16), ("vPciIsa", 18), ("vPciEisa", 20), ("vPciMca", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotType.setStatus('mandatory')
if mibBuilder.loadTexts: a19SlotType.setDescription('The bus type supported in this slot. This is a bit field with the following definitions.Bit 0, if set, means it is a long-length card; if 0, it is a short-length cardBit 1, if set, is ISA, Bit 2 is EISA, Bit 3 is MCA, Bit 4 is PCI, Bit 5 is VL, and Bit 6 is PCMCIA.')
a19SlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8BitCard", 3), ("v16BitCard", 4), ("v32BitCard", 5), ("v64BitCard", 6), ("v128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a19SlotWidth.setDescription('The maximum bus width of cards accepted in this slot.')
a19CurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAvailable", 3), ("vInUse1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19CurrentUsage.setStatus('mandatory')
if mibBuilder.loadTexts: a19CurrentUsage.setDescription('Is this slot is currently in use?')
a19SlotDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 19, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19SlotDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a19SlotDescription.setDescription('The field describes the card currently occupying this slot.')
tVideo = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20), )
if mibBuilder.loadTexts: tVideo.setStatus('mandatory')
if mibBuilder.loadTexts: tVideo.setDescription('This group defines the attributes of video devices in this system.')
eVideo = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a20VideoIndex"))
if mibBuilder.loadTexts: eVideo.setStatus('mandatory')
if mibBuilder.loadTexts: eVideo.setDescription('')
a20VideoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a20VideoIndex.setDescription('An index into the video table.')
a20VideoType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCga", 3), ("vEga", 4), ("vVga", 5), ("vSvga", 6), ("vMda", 7), ("vHgc", 8), ("vMcga", 9), ("v8514a", 10), ("vXga", 11), ("vLinearFrameBuffer", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoType.setStatus('mandatory')
if mibBuilder.loadTexts: a20VideoType.setDescription('The architecture of the video subsystem in this system.')
a20CurrentVideoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentVideoMode.setStatus('mandatory')
if mibBuilder.loadTexts: a20CurrentVideoMode.setDescription('The current video mode in this system')
a20MinimumRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20MinimumRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: a20MinimumRefreshRate.setDescription('The minimum refresh rate for this video subsystem in Hz.')
a20MaximumRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20MaximumRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: a20MaximumRefreshRate.setDescription('The maximum refresh rate for this video subsystem in Hz.')
a20VideoMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vVram", 3), ("vDram", 4), ("vSram", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoMemoryType.setStatus('mandatory')
if mibBuilder.loadTexts: a20VideoMemoryType.setDescription('The type of Video Memory for this adapter.')
a20VideoRamMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoRamMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a20VideoRamMemorySize.setDescription('Video adapter memory size in Kilo Bytes.')
a20ScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vInterlaced", 3), ("vNonInterlaced", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20ScanMode.setStatus('mandatory')
if mibBuilder.loadTexts: a20ScanMode.setDescription('The scan mode for this video device.')
a20VideoPhysicalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIntegrated", 3), ("vAddOnCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20VideoPhysicalLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a20VideoPhysicalLocation.setDescription('The location of the video controller circuitry.')
a20CurrentVerticalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentVerticalResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a20CurrentVerticalResolution.setDescription('The current number of vertical pixels.')
a20CurrentHorizontalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentHorizontalResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a20CurrentHorizontalResolution.setDescription('The current number of horizontal pixels.')
a20CurrentNumberOfBitsPerPixel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentNumberOfBitsPerPixel.setStatus('mandatory')
if mibBuilder.loadTexts: a20CurrentNumberOfBitsPerPixel.setDescription('The number of bits used to display each pixel for this video device.')
a20CurrentNumberOfRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentNumberOfRows.setStatus('mandatory')
if mibBuilder.loadTexts: a20CurrentNumberOfRows.setDescription('The number of rows in character mode for this video device.')
a20CurrentNumberOfColumns = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentNumberOfColumns.setStatus('mandatory')
if mibBuilder.loadTexts: a20CurrentNumberOfColumns.setDescription('The number of columns in character mode for this video device.')
a20CurrentRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20CurrentRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: a20CurrentRefreshRate.setDescription('The current refresh rate in Hz for this video device.')
a20FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a20FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is part of another RU, this provides an index into the FRU table. A value = -1 means that the group is not a FRU.')
a20OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 20, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a20OperationalGroupIndex.setDescription('The index into the Operational State Table for this device')
tVideoBios = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21), )
if mibBuilder.loadTexts: tVideoBios.setStatus('mandatory')
if mibBuilder.loadTexts: tVideoBios.setDescription('This group defines the attributes for the Video BIOS.')
eVideoBios = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a21VideoBiosIndex"))
if mibBuilder.loadTexts: eVideoBios.setStatus('mandatory')
if mibBuilder.loadTexts: eVideoBios.setDescription('')
a21VideoBiosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a21VideoBiosIndex.setDescription('The index into the Video BIOS table.')
a21VideoBiosManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a21VideoBiosManufacturer.setDescription('The name of the company that wrote this Video BIOS.')
a21VideoBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a21VideoBiosVersion.setDescription('The version number or version string of this Video BIOS.')
a21VideoBiosReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 4), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosReleaseDate.setStatus('mandatory')
if mibBuilder.loadTexts: a21VideoBiosReleaseDate.setDescription('The Video BIOS release date.')
a21VideoBiosShadowingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21VideoBiosShadowingState.setStatus('mandatory')
if mibBuilder.loadTexts: a21VideoBiosShadowingState.setDescription('If true, the Video BIOS is currently being shadowed ')
tVideoBiosCharacteristic = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22), )
if mibBuilder.loadTexts: tVideoBiosCharacteristic.setStatus('mandatory')
if mibBuilder.loadTexts: tVideoBiosCharacteristic.setDescription('This group defines the characteristics for the Video BIOS.')
eVideoBiosCharacteristic = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a22VideoBiosCharacteristicsIndex"), (0, "PCSYSTEMSMIF-MIB", "a22VideoBiosNumber"))
if mibBuilder.loadTexts: eVideoBiosCharacteristic.setStatus('mandatory')
if mibBuilder.loadTexts: eVideoBiosCharacteristic.setDescription('')
a22VideoBiosCharacteristicsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22VideoBiosCharacteristicsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a22VideoBiosCharacteristicsIndex.setDescription('This is an index into the Video BIOS Characteristics table. ')
a22VideoBiosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22VideoBiosNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a22VideoBiosNumber.setDescription('This is the Video BIOS number which correlates to the Video BIOS Index. ')
a22VideoBiosCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnsupported", 3), ("vStandardVideoBios", 4), ("vVesaBiosExtensionsSupported", 5), ("vVesaPowerManagementSupported", 6), ("vVesaDisplayDataChannelSupported", 7), ("vVideoBios-shadowing-allowed", 8), ("vVideoBiosUpgradable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22VideoBiosCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: a22VideoBiosCharacteristics.setDescription('The attributes and extensions supported by this version of the Video BIOS')
a22VideoBiosCharacteristicsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 22, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22VideoBiosCharacteristicsDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a22VideoBiosCharacteristicsDescription.setDescription('Expanded description of this VIDEO BIOS Characteristic.')
tDiskDrives = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23), )
if mibBuilder.loadTexts: tDiskDrives.setStatus('mandatory')
if mibBuilder.loadTexts: tDiskDrives.setDescription('This group defines the physical attributes of disk mass storage devices in this system.')
eDiskDrives = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a23StorageType"), (0, "PCSYSTEMSMIF-MIB", "a23DiskIndex"))
if mibBuilder.loadTexts: eDiskDrives.setStatus('mandatory')
if mibBuilder.loadTexts: eDiskDrives.setDescription('')
a23StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHard-disk", 3), ("vFloppy-disk", 4), ("vOptical-rom", 5), ("vOptical-worm", 6), ("vOptical-rw", 7), ("vCompact-disk", 8), ("vFlash-disk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: a23StorageType.setDescription('The type of this mass storage device')
a23DiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23DiskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a23DiskIndex.setDescription('An index into the disk table.')
a23StorageInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vScsi", 3), ("vEsdi", 4), ("vIde", 5), ("vCmd", 6), ("vIpi", 7), ("vSt506", 8), ("vDssi", 9), ("vParallel-port", 10), ("vHippi", 11), ("vQic2", 12), ("vFloppy-disk-interface", 13), ("vPcmcia", 14), ("vEnhancedAtaide", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23StorageInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: a23StorageInterfaceType.setDescription('The interface used by this mass storage device')
a23InterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23InterfaceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a23InterfaceDescription.setDescription('A longer description of the mass storage interface.For Example, SCSI2 fast wide')
a23MediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23MediaLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: a23MediaLoaded.setDescription('If true, the media is loaded')
a23RemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23RemovableMedia.setStatus('mandatory')
if mibBuilder.loadTexts: a23RemovableMedia.setDescription('If true, the media in this drive is removable')
a23DeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23DeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: a23DeviceId.setDescription('The SCSI address of this device')
a23LogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23LogicalUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a23LogicalUnitNumber.setDescription('The logical unit number of this SCSI device. ')
a23NumberOfPhysicalCylinders = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NumberOfPhysicalCylinders.setStatus('mandatory')
if mibBuilder.loadTexts: a23NumberOfPhysicalCylinders.setDescription('The number of reported Physical Cylinders on this device')
a23NumberOfPhysicalSectorsPerTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NumberOfPhysicalSectorsPerTrack.setStatus('mandatory')
if mibBuilder.loadTexts: a23NumberOfPhysicalSectorsPerTrack.setDescription('The number of reported Physical sectors per track for this device')
a23NumberOfPhysicalHeads = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NumberOfPhysicalHeads.setStatus('mandatory')
if mibBuilder.loadTexts: a23NumberOfPhysicalHeads.setDescription('The number of reported Physical heads for this device')
a23SectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23SectorSize.setStatus('mandatory')
if mibBuilder.loadTexts: a23SectorSize.setDescription('The Size in bytes of the physical disk sector as reported by the disk. ')
a23TotalPhysicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23TotalPhysicalSize.setStatus('mandatory')
if mibBuilder.loadTexts: a23TotalPhysicalSize.setDescription('The total size in KiloBytes (1024 bytes) of this device. ')
a23Partitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23Partitions.setStatus('mandatory')
if mibBuilder.loadTexts: a23Partitions.setDescription('The number of partitions on this storage unit')
a23FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 23, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a23FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table. A value = -1 means that the group is not a FRU.')
tDiskMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24), )
if mibBuilder.loadTexts: tDiskMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: tDiskMappingTable.setDescription('A table relating disks to partitions. May have an instance of a disk or partition more than once')
eDiskMappingTable = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a24StorageType"), (0, "PCSYSTEMSMIF-MIB", "a24DiskIndex"), (0, "PCSYSTEMSMIF-MIB", "a24PartitionIndex"))
if mibBuilder.loadTexts: eDiskMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: eDiskMappingTable.setDescription('')
a24StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHard-disk", 3), ("vFloppy-disk", 4), ("vOptical-rom", 5), ("vOptical-worm", 6), ("vOptical-rw", 7), ("vCompact-disk", 8), ("vFlash-disk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: a24StorageType.setDescription('An index value into the Disk Table')
a24DiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24DiskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a24DiskIndex.setDescription('An index value into the Disk Table')
a24PartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 24, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24PartitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a24PartitionIndex.setDescription('An index value into the partition table')
tPartition = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25), )
if mibBuilder.loadTexts: tPartition.setStatus('mandatory')
if mibBuilder.loadTexts: tPartition.setDescription('This group describes the partitions on particular disks.')
ePartition = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a25PartitionIndex"))
if mibBuilder.loadTexts: ePartition.setStatus('mandatory')
if mibBuilder.loadTexts: ePartition.setDescription('')
a25PartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25PartitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a25PartitionIndex.setDescription('The index into the partition table.')
a25PartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25PartitionName.setStatus('mandatory')
if mibBuilder.loadTexts: a25PartitionName.setDescription('The name used by the system to identify the partition. This is normally the drive letter.')
a25PartitionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 3), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25PartitionSize.setStatus('mandatory')
if mibBuilder.loadTexts: a25PartitionSize.setDescription('The size of this partition in Kilo Bytes.')
a25FreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 4), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25FreeSpace.setStatus('mandatory')
if mibBuilder.loadTexts: a25FreeSpace.setDescription('The number of free Kilo Bytes on this partition')
a25PartitionLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 5), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25PartitionLabel.setStatus('mandatory')
if mibBuilder.loadTexts: a25PartitionLabel.setDescription('The Partition label or the unique volume label field for this physical volume. (For DOS, this is the volume label plus the 32 bit Volume ID field if available.)')
a25FileSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFat", 3), ("vHpfs", 4), ("vNtfs", 5), ("vOfs", 6), ("vMfs", 7), ("vHfs", 8), ("vVxfs", 9), ("vSfs", 10), ("vS5", 11), ("vS52k", 12), ("vUfs", 13), ("vFfs", 14), ("vNetware286", 15), ("vNetware386", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25FileSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a25FileSystem.setDescription('')
a25Compressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25Compressed.setStatus('mandatory')
if mibBuilder.loadTexts: a25Compressed.setDescription('If true, this partition is compressed')
a25Encrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25Encrypted.setStatus('mandatory')
if mibBuilder.loadTexts: a25Encrypted.setDescription('If true, this partition is encrypted')
a25NumberOfDisksOccupied = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 25, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25NumberOfDisksOccupied.setStatus('mandatory')
if mibBuilder.loadTexts: a25NumberOfDisksOccupied.setDescription('The number of disks this partition occupies')
tDiskController = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26), )
if mibBuilder.loadTexts: tDiskController.setStatus('mandatory')
if mibBuilder.loadTexts: tDiskController.setDescription('This group defines the disk controller in this system.')
eDiskController = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a26DiskControllerIndex"))
if mibBuilder.loadTexts: eDiskController.setStatus('mandatory')
if mibBuilder.loadTexts: eDiskController.setDescription('')
a26DiskControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26DiskControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a26DiskControllerIndex.setDescription('Index value used by the system to identify the disk controller')
a26FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a26FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table. A value = -1 means that the group is not a FRU')
a26OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 26, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a26OperationalGroupIndex.setDescription('The index into the Operational State Table for this device')
tLogicalDrives = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27), )
if mibBuilder.loadTexts: tLogicalDrives.setStatus('mandatory')
if mibBuilder.loadTexts: tLogicalDrives.setDescription('')
eLogicalDrives = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a27LogicalDriveIndex"))
if mibBuilder.loadTexts: eLogicalDrives.setStatus('mandatory')
if mibBuilder.loadTexts: eLogicalDrives.setDescription('')
a27LogicalDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a27LogicalDriveIndex.setDescription('An index into the Logical Drives Table')
a27LogicalDriveName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDriveName.setStatus('mandatory')
if mibBuilder.loadTexts: a27LogicalDriveName.setDescription('Name used by the system to identify this logical driveFor DOS, this could be the logical drive letter (A,B,C...)')
a27LogicalDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFixedDrive", 3), ("vRemovableDrive", 4), ("vRemoteDrive", 5), ("vCdrom", 6), ("vFloppyDrive", 7), ("vRamDrive", 8), ("vDriveArray", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDriveType.setStatus('mandatory')
if mibBuilder.loadTexts: a27LogicalDriveType.setDescription('This defines the Logical Drive type')
a27LogicalDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDriveSize.setStatus('mandatory')
if mibBuilder.loadTexts: a27LogicalDriveSize.setDescription('The size of this Logical Drive in Kilo Bytes')
a27FreeLogicalDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27FreeLogicalDriveSize.setStatus('mandatory')
if mibBuilder.loadTexts: a27FreeLogicalDriveSize.setDescription('The remaining space on this Logical Drive in Kilo Bytes')
a27LogicalDrivePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 27, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27LogicalDrivePath.setStatus('mandatory')
if mibBuilder.loadTexts: a27LogicalDrivePath.setDescription('The path used to access this Logical Drive (for remote drives)')
tMouse = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28), )
if mibBuilder.loadTexts: tMouse.setStatus('mandatory')
if mibBuilder.loadTexts: tMouse.setDescription('')
eMouse = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMouse.setStatus('mandatory')
if mibBuilder.loadTexts: eMouse.setDescription('')
a28MouseInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSerial", 3), ("vPs2", 4), ("vInfrared", 5), ("vHp-hil", 6), ("vBusMouse", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseInterface.setStatus('mandatory')
if mibBuilder.loadTexts: a28MouseInterface.setDescription('The interface type of this mouse.')
a28MouseIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseIrq.setStatus('mandatory')
if mibBuilder.loadTexts: a28MouseIrq.setDescription('The IRQ number used by this mouse.')
a28MouseButtons = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseButtons.setStatus('mandatory')
if mibBuilder.loadTexts: a28MouseButtons.setDescription('The number of mouse buttons on this mouse.')
a28MousePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MousePortName.setStatus('mandatory')
if mibBuilder.loadTexts: a28MousePortName.setDescription('The name of the port currently being used by this mouse.')
a28MouseDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: a28MouseDriverName.setDescription('The name of the mouse driver.')
a28MouseDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28MouseDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a28MouseDriverVersion.setDescription('The version number of the mouse driver.')
a28FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a28FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is part of another FRU, this attribute provides an index into the FRU table. A value = -1 means that the group is not a FRU')
a28OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 28, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a28OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a28OperationalGroupIndex.setDescription('The index into the Operational State Table for this device')
tKeyboard = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29), )
if mibBuilder.loadTexts: tKeyboard.setStatus('mandatory')
if mibBuilder.loadTexts: tKeyboard.setDescription('This group defines the characteristics of the PC keyboard')
eKeyboard = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eKeyboard.setStatus('mandatory')
if mibBuilder.loadTexts: eKeyboard.setDescription('')
a29KeyboardLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29KeyboardLayout.setStatus('mandatory')
if mibBuilder.loadTexts: a29KeyboardLayout.setDescription('A description of the layout description of this keyboard.')
a29KeyboardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29KeyboardType.setStatus('mandatory')
if mibBuilder.loadTexts: a29KeyboardType.setDescription('The type description of this keyboard.')
a29KeyboardConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vMini-din", 3), ("vMicro-din", 4), ("vPs2", 5), ("vInfrared", 6), ("vHp-hil", 7), ("vDb-9", 8), ("vAccessbus", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29KeyboardConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a29KeyboardConnectorType.setDescription('The type description of the keyboard connector used by this keyboard.')
a29FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a29FruGroupIndex.setDescription('If this is a Field Replaceable Unit or if it is part of another FRU, this provides an FRU index into the FRU table. A value = -1 means that the group is not a FRU')
a29OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 29, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a29OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a29OperationalGroupIndex.setDescription('The index into the Operational State Table for this device')
tFieldReplacableUnit = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30), )
if mibBuilder.loadTexts: tFieldReplacableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: tFieldReplacableUnit.setDescription("An FRU, or Field Replaceable Unit, is defined as a hardware component which is designed to be separately removable for replacement or repair. For the purposes of this definition, a motherboard and a fixed hard disk are FRU's, whereas a fixed hard disk platter or a chip fixed in place on the motherboard are not FRU's since they are not designed to be separately removable. Each instance within the FRU table should contain the device group and instance data for the associated hardware component")
eFieldReplacableUnit = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a30FruIndex"))
if mibBuilder.loadTexts: eFieldReplacableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: eFieldReplacableUnit.setDescription('')
a30FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30FruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a30FruIndex.setDescription('The index into the FRU table')
a30DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a30DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a30DeviceGroupIndex.setDescription('The group ID of the group referencing this FRU instance')
a30Description = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30Description.setStatus('mandatory')
if mibBuilder.loadTexts: a30Description.setDescription('A clear description of this FRU')
a30Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a30Manufacturer.setDescription('The name of the company manufacturing or providing this FRU')
a30Model = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30Model.setStatus('mandatory')
if mibBuilder.loadTexts: a30Model.setDescription("The manufacturer's model number for this FRU")
a30PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a30PartNumber.setDescription('A part number by which a replacement part can be ordered for this FRU')
a30FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30FruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a30FruSerialNumber.setDescription("The manufacturer's serial number for this FRU")
a30RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 30, 1, 8), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a30RevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a30RevisionLevel.setDescription('The revision level of this FRU')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tOperationalState.setDescription('This group provides the operational state, usage, and availabili y status, and administrative state indicators for specific Device Group instance .')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a31OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: eOperationalState.setDescription('')
a31OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStateInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a31OperationalStateInstanceIndex.setDescription('The Index into the Operational State table')
a31DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a31DeviceGroupIndex.setDescription('The group ID of the group referencing this instance')
a31OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a31OperationalStatus.setDescription('The operational status of the Device group instance')
a31UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: a31UsageState.setDescription('The usage state of the Device Group instance')
a31AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a31AvailabilityStatus.setDescription('The availability status of the Device Group instance')
a31AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: a31AdministrativeState.setDescription('The administrative state of the Device Group instance')
a31FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31FatalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a31FatalErrorCount.setDescription('The accumulated fatal error count for this Device Group Instance')
a31MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31MajorErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a31MajorErrorCount.setDescription('The accumulated major error count for this Device Group Instance')
a31WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 31, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31WarningErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a31WarningErrorCount.setDescription('The accumulated warning error count for this Device Group Instance')
tSystemResourcesDescription = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 32), )
if mibBuilder.loadTexts: tSystemResourcesDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResourcesDescription.setDescription('The System Resources Description group describes the number of entries in the System Resources Group. ')
eSystemResourcesDescription = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 32, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a32DeviceCount"))
if mibBuilder.loadTexts: eSystemResourcesDescription.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResourcesDescription.setDescription('')
a32DeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 32, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a32DeviceCount.setStatus('mandatory')
if mibBuilder.loadTexts: a32DeviceCount.setDescription('A counter of the number of different hardware devices represente in this table.')
a32SystemResourceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 32, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a32SystemResourceCount.setStatus('mandatory')
if mibBuilder.loadTexts: a32SystemResourceCount.setDescription('A count of the total number of system resources on this sytemins ances in this table.')
tSystemResources = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33), )
if mibBuilder.loadTexts: tSystemResources.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResources.setDescription('The System Resources group contains hardware descriptions which are commonly used in PC style computers such as IRQs, IO ports and memory address ranges.')
eSystemResources = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a33ResourceInstance"), (0, "PCSYSTEMSMIF-MIB", "a33ResourceParentGroupIndex"))
if mibBuilder.loadTexts: eSystemResources.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResources.setDescription('')
a33ResourceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceInstance.setStatus('mandatory')
if mibBuilder.loadTexts: a33ResourceInstance.setDescription('Instance identifier for a group in this table.')
a33ResourceParentGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceParentGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a33ResourceParentGroupIndex.setDescription('The group ID of the group referencing this instance in the table')
a33ResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vMemoryRange", 3), ("vIoPort", 4), ("vIrq", 5), ("vDma", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: a33ResourceType.setDescription('The type of system resource represented by this entry.')
a33ResourceBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceBase.setStatus('mandatory')
if mibBuilder.loadTexts: a33ResourceBase.setDescription('The starting address of the system resource in the appropriatead ress space.')
a33ResourceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceSize.setStatus('mandatory')
if mibBuilder.loadTexts: a33ResourceSize.setDescription('The size of the system resource.')
a33ResourceFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 33, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a33ResourceFlags.setStatus('mandatory')
if mibBuilder.loadTexts: a33ResourceFlags.setDescription('This attribute contains fields representing the status of this resource entry. The meaning of this field varies according to the the Resource Type field in this group.')
tNetfinityDmiInstall = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 34), )
if mibBuilder.loadTexts: tNetfinityDmiInstall.setStatus('mandatory')
if mibBuilder.loadTexts: tNetfinityDmiInstall.setDescription("This group uniquely identifies NetFinity's instrumentation of this PC Systems MIF.")
eNetfinityDmiInstall = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 34, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eNetfinityDmiInstall.setStatus('mandatory')
if mibBuilder.loadTexts: eNetfinityDmiInstall.setDescription('')
a34ProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 34, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a34ProductName.setStatus('mandatory')
if mibBuilder.loadTexts: a34ProductName.setDescription('Name of this product')
tMicrochannelAdapterInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35), )
if mibBuilder.loadTexts: tMicrochannelAdapterInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tMicrochannelAdapterInformation.setDescription('This group provides detailed information about the Microchannel devices detected in your system')
eMicrochannelAdapterInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a35AdapterIndex"))
if mibBuilder.loadTexts: eMicrochannelAdapterInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eMicrochannelAdapterInformation.setDescription('')
a35AdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35AdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a35AdapterIndex.setDescription('Index into the MCA adapter table ')
a35SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35SlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a35SlotNumber.setDescription('The slot in which the adapter was detected.')
a35AdapterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35AdapterId.setStatus('mandatory')
if mibBuilder.loadTexts: a35AdapterId.setDescription('The unique number that identifies the adapter.')
a35PosData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35PosData.setStatus('mandatory')
if mibBuilder.loadTexts: a35PosData.setDescription('This is Programmable Option Select data used to automatically configure the system.')
a35AdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 35, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a35AdapterName.setStatus('mandatory')
if mibBuilder.loadTexts: a35AdapterName.setDescription('The name of this adapter.')
tPciDeviceInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36), )
if mibBuilder.loadTexts: tPciDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tPciDeviceInformation.setDescription('This group provides detailed information about the PCI devices detected in your system')
ePciDeviceInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a36DeviceIndex"))
if mibBuilder.loadTexts: ePciDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: ePciDeviceInformation.setDescription('')
a36DeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a36DeviceIndex.setDescription('Index into the PCI device table ')
a36ClassCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36ClassCode.setStatus('mandatory')
if mibBuilder.loadTexts: a36ClassCode.setDescription('Number that identifies the base class, sub-class, and programmin interface')
a36PciDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36PciDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: a36PciDeviceName.setDescription('Description of device that includes manufacturer and device function')
a36VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36VendorId.setStatus('mandatory')
if mibBuilder.loadTexts: a36VendorId.setDescription('Number that uniquely identifies the manufacturer')
a36DeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: a36DeviceId.setDescription('Number assigned by the manufacturer that uniquely identifes the device')
a36BusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36BusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a36BusNumber.setDescription('PCI bus that this device is on')
a36DeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36DeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a36DeviceNumber.setDescription('Number in the range 0..31 that uniquely selects a device on a PCI bus')
a36RevisionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 36, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a36RevisionId.setStatus('mandatory')
if mibBuilder.loadTexts: a36RevisionId.setDescription('')
tEisaDeviceInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37), )
if mibBuilder.loadTexts: tEisaDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tEisaDeviceInformation.setDescription('This group provides detailed information about the EISA devices detected in your system')
eEisaDeviceInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a37DeviceIndex"))
if mibBuilder.loadTexts: eEisaDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eEisaDeviceInformation.setDescription('')
a37DeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37DeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a37DeviceIndex.setDescription('Index into the EISA device table ')
a37ProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37ProductId.setStatus('mandatory')
if mibBuilder.loadTexts: a37ProductId.setDescription('Number that uniquely identifies the device')
a37EisaDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37EisaDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: a37EisaDeviceName.setDescription('Description of device')
a37Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a37Manufacturer.setDescription('Name of manufacturer of the system board or adapter')
a37SlotLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37SlotLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a37SlotLocation.setDescription('The physical or logical slot number in the system of the device. Thesystem board is always slot 0. Slots 1-15 are physical slots. Slots 16-64 are for virtual devices.')
a37SlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vExpansionSlot", 0), ("vEmbeddedDevice", 1), ("vVirtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37SlotType.setStatus('mandatory')
if mibBuilder.loadTexts: a37SlotType.setDescription('An expansion slot is a physical slot. An embedded device is an EISA I/O device integrated onto the system board. A virtual device is generally a software driver that may needsystem resources.')
a37NumberOfDeviceFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37NumberOfDeviceFunctions.setStatus('mandatory')
if mibBuilder.loadTexts: a37NumberOfDeviceFunctions.setDescription('Number of device functions associated with the device (i.e. memory function, serial function, parallel function, etc).')
a37IdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 37, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vReadable", 0), ("vNotReadable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a37IdType.setStatus('mandatory')
if mibBuilder.loadTexts: a37IdType.setDescription('An EISA system may have EISA and ISA adapters. ISA adapters will nothave readable IDs')
tRaidAdapterInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38), )
if mibBuilder.loadTexts: tRaidAdapterInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tRaidAdapterInformation.setDescription('This group provides detailed information about the RAID adapters in your system')
eRaidAdapterInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a38RaidAdapterIndex"))
if mibBuilder.loadTexts: eRaidAdapterInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eRaidAdapterInformation.setDescription('')
a38RaidAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38RaidAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a38RaidAdapterIndex.setDescription('Index into the RAID Adapter table ')
a38NumberOfLogicalVolumes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfLogicalVolumes.setStatus('mandatory')
if mibBuilder.loadTexts: a38NumberOfLogicalVolumes.setDescription('Number of Logical Volumes for this adapter')
a38NumberOfPhysicalDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfPhysicalDevices.setStatus('mandatory')
if mibBuilder.loadTexts: a38NumberOfPhysicalDevices.setDescription('Number of Physical Devices for this adapter')
a38NumberOfPhysicalDrivesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfPhysicalDrivesOffline.setStatus('mandatory')
if mibBuilder.loadTexts: a38NumberOfPhysicalDrivesOffline.setDescription('Name of Physical Drives Offline for this adapter')
a38NumberOfCriticalVirtualDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfCriticalVirtualDrives.setStatus('mandatory')
if mibBuilder.loadTexts: a38NumberOfCriticalVirtualDrives.setDescription('Number of Critical Virtual Drives for this adapter')
a38NumberOfDefunctPhysicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 38, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a38NumberOfDefunctPhysicalDrives.setStatus('mandatory')
if mibBuilder.loadTexts: a38NumberOfDefunctPhysicalDrives.setDescription('Number of Defunct Physical Drives for this adapter')
tRaidVirtualDrivesInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39), )
if mibBuilder.loadTexts: tRaidVirtualDrivesInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tRaidVirtualDrivesInformation.setDescription('This group provides detailed information about the RAID Virtual drivesin your system')
eRaidVirtualDrivesInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a39RaidVirtualDriveIndex"), (0, "PCSYSTEMSMIF-MIB", "a39RaidAdapterIndex"))
if mibBuilder.loadTexts: eRaidVirtualDrivesInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eRaidVirtualDrivesInformation.setDescription('')
a39RaidVirtualDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a39RaidVirtualDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a39RaidVirtualDriveIndex.setDescription('Index into the RAID Virtual Drives table ')
a39RaidAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a39RaidAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a39RaidAdapterIndex.setDescription('Index into RAID Adapter Table')
a39VirtualDriveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vOnline", 0), ("vOffline", 1), ("vCritical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a39VirtualDriveState.setStatus('mandatory')
if mibBuilder.loadTexts: a39VirtualDriveState.setDescription('State of Virtual Drive')
a39VirtualDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 39, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a39VirtualDriveSize.setStatus('mandatory')
if mibBuilder.loadTexts: a39VirtualDriveSize.setDescription('Size of Virtual Drive in Kilobytes')
tRaidPhysicalDriveInformation = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40), )
if mibBuilder.loadTexts: tRaidPhysicalDriveInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tRaidPhysicalDriveInformation.setDescription('This group provides detailed information about the RAID physical drivesin your system')
eRaidPhysicalDriveInformation = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1), ).setIndexNames((0, "PCSYSTEMSMIF-MIB", "DmiComponentIndex"), (0, "PCSYSTEMSMIF-MIB", "a40RaidPhysicalDriveIndex"), (0, "PCSYSTEMSMIF-MIB", "a40RaidAdapterIndex"))
if mibBuilder.loadTexts: eRaidPhysicalDriveInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eRaidPhysicalDriveInformation.setDescription('')
a40RaidPhysicalDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40RaidPhysicalDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a40RaidPhysicalDriveIndex.setDescription('Index into the RAID Physical Drives table ')
a40RaidAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40RaidAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a40RaidAdapterIndex.setDescription('Index into RAID Adapter Table')
a40PhysicalDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40PhysicalDriveSize.setStatus('mandatory')
if mibBuilder.loadTexts: a40PhysicalDriveSize.setDescription('Size of Physical Drive in Kilobytes')
a40ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40ChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a40ChannelNumber.setDescription('Channel on RAID Adapter on which this physical drive is located')
a40TargetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40TargetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a40TargetNumber.setDescription('Target number on RAID Adapter on which this physical drive is located')
a40RaidPhysicalDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 71, 200, 1, 1, 40, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vOnline", 0), ("vOffline", 1), ("vDefunct", 2), ("vHotspare", 3), ("vStandbyHotspare", 4), ("vDeadHotspare", 5), ("vReady", 6), ("vRebuild", 7), ("vStandby", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a40RaidPhysicalDeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: a40RaidPhysicalDeviceState.setDescription('Device state of the Physical Drive')
mibBuilder.exportSymbols("PCSYSTEMSMIF-MIB", a1SerialNumber=a1SerialNumber, a30FruSerialNumber=a30FruSerialNumber, ePartition=ePartition, a10SystemCacheLevel=a10SystemCacheLevel, a4Manufacturer=a4Manufacturer, a2SystemLocation=a2SystemLocation, a30Model=a30Model, a31AdministrativeState=a31AdministrativeState, a32SystemResourceCount=a32SystemResourceCount, a30RevisionLevel=a30RevisionLevel, a33ResourceParentGroupIndex=a33ResourceParentGroupIndex, tPowerSupply=tPowerSupply, a3OperatingSystemBootPartitionIndex=a3OperatingSystemBootPartitionIndex, a14DmaDescription=a14DmaDescription, a38NumberOfPhysicalDevices=a38NumberOfPhysicalDevices, tMemoryMappedIo=tMemoryMappedIo, a6CurrentSpeed=a6CurrentSpeed, a24StorageType=a24StorageType, a40RaidPhysicalDeviceState=a40RaidPhysicalDeviceState, eComponentid1=eComponentid1, a8MemoryErrorCorrection=a8MemoryErrorCorrection, a12MaximumSpeed=a12MaximumSpeed, tMicrochannelAdapterInformation=tMicrochannelAdapterInformation, a36PciDeviceName=a36PciDeviceName, a9ExpandedMemorySize=a9ExpandedMemorySize, tLogicalDrives=tLogicalDrives, a2SystemName=a2SystemName, a38RaidAdapterIndex=a38RaidAdapterIndex, a3OperatingSystemDescription=a3OperatingSystemDescription, a40RaidAdapterIndex=a40RaidAdapterIndex, tMotherboard=tMotherboard, a25NumberOfDisksOccupied=a25NumberOfDisksOccupied, a30Manufacturer=a30Manufacturer, tCoolingDevice=tCoolingDevice, eNetfinityDmiInstall=eNetfinityDmiInstall, a36DeviceId=a36DeviceId, eSystemCache=eSystemCache, a37IdType=a37IdType, tFieldReplacableUnit=tFieldReplacableUnit, tSerialPorts=tSerialPorts, a39VirtualDriveState=a39VirtualDriveState, tPhysicalMemory=tPhysicalMemory, a36BusNumber=a36BusNumber, a37ProductId=a37ProductId, a9FreeExtendedMemorySize=a9FreeExtendedMemorySize, a8MemoryEndingAddress=a8MemoryEndingAddress, a1Product=a1Product, a8FruGroupIndex=a8FruGroupIndex, a29KeyboardLayout=a29KeyboardLayout, a23StorageInterfaceType=a23StorageInterfaceType, a30PartNumber=a30PartNumber, a18CoolingDeviceIndex=a18CoolingDeviceIndex, a38NumberOfPhysicalDrivesOffline=a38NumberOfPhysicalDrivesOffline, tVideoBiosCharacteristic=tVideoBiosCharacteristic, eProcessor=eProcessor, a15MemoryMappedIoDescription=a15MemoryMappedIoDescription, a31UsageState=a31UsageState, a8MemorySpeed=a8MemorySpeed, a37EisaDeviceName=a37EisaDeviceName, a33ResourceFlags=a33ResourceFlags, a25PartitionSize=a25PartitionSize, a21VideoBiosReleaseDate=a21VideoBiosReleaseDate, eOperatingSystem=eOperatingSystem, a23NumberOfPhysicalHeads=a23NumberOfPhysicalHeads, a36ClassCode=a36ClassCode, a9ExpandedMemoryPageFrameAddress=a9ExpandedMemoryPageFrameAddress, eMotherboard=eMotherboard, a3OperatingSystemBootDeviceIndex=a3OperatingSystemBootDeviceIndex, a5BiosNumber=a5BiosNumber, a36RevisionId=a36RevisionId, eKeyboard=eKeyboard, a39VirtualDriveSize=a39VirtualDriveSize, eDma=eDma, a13IrqNumber=a13IrqNumber, ePowerSupply=ePowerSupply, eSystemBiosCharacteristic=eSystemBiosCharacteristic, a16PowerState=a16PowerState, eEisaDeviceInformation=eEisaDeviceInformation, a25FileSystem=a25FileSystem, a32DeviceCount=a32DeviceCount, a22VideoBiosNumber=a22VideoBiosNumber, ibmProd=ibmProd, a29OperationalGroupIndex=a29OperationalGroupIndex, a8MemoryStartingAddress=a8MemoryStartingAddress, a31OperationalStatus=a31OperationalStatus, tPartition=tPartition, tRaidPhysicalDriveInformation=tRaidPhysicalDriveInformation, a31FatalErrorCount=a31FatalErrorCount, a37SlotLocation=a37SlotLocation, eSystemResourcesDescription=eSystemResourcesDescription, eRaidAdapterInformation=eRaidAdapterInformation, a36DeviceNumber=a36DeviceNumber, a15MemoryMappedIoStartingAddress=a15MemoryMappedIoStartingAddress, a11ParallelBaseIoAddress=a11ParallelBaseIoAddress, a25Encrypted=a25Encrypted, a37SlotType=a37SlotType, a21VideoBiosVersion=a21VideoBiosVersion, a9ExtendedMemoryManagerName=a9ExtendedMemoryManagerName, a4PrimaryBios=a4PrimaryBios, a9ExpandedMemoryManagerName=a9ExpandedMemoryManagerName, tVideoBios=tVideoBios, netFinitySystemsMIB=netFinitySystemsMIB, a28MouseInterface=a28MouseInterface, a11ConnectorType=a11ConnectorType, a20CurrentHorizontalResolution=a20CurrentHorizontalResolution, tRaidVirtualDrivesInformation=tRaidVirtualDrivesInformation, eSerialPorts=eSerialPorts, a2SystemDateTime=a2SystemDateTime, a1Version=a1Version, a16FruGroupIndex=a16FruGroupIndex, tSystemResources=tSystemResources, a4BiosReleaseDate=a4BiosReleaseDate, DmiOctetstring=DmiOctetstring, tLogicalMemory=tLogicalMemory, a12OperationalGroupIndex=a12OperationalGroupIndex, a20CurrentNumberOfRows=a20CurrentNumberOfRows, eRaidVirtualDrivesInformation=eRaidVirtualDrivesInformation, a9ExpandedMemoryPageSize=a9ExpandedMemoryPageSize, eMicrochannelAdapterInformation=eMicrochannelAdapterInformation, a20MinimumRefreshRate=a20MinimumRefreshRate, a16ChassisLockPresent=a16ChassisLockPresent, a6FruGroupIndex=a6FruGroupIndex, a39RaidVirtualDriveIndex=a39RaidVirtualDriveIndex, a23DiskIndex=a23DiskIndex, DmiInteger64=DmiInteger64, eDiskMappingTable=eDiskMappingTable, a38NumberOfCriticalVirtualDrives=a38NumberOfCriticalVirtualDrives, a23Partitions=a23Partitions, a16AssetTag=a16AssetTag, a23LogicalUnitNumber=a23LogicalUnitNumber, a6VersionInformation=a6VersionInformation, eOperationalState=eOperationalState, a20VideoRamMemorySize=a20VideoRamMemorySize, eVideoBios=eVideoBios, a6ProcessorIndex=a6ProcessorIndex, a14DmaBurstMode=a14DmaBurstMode, eDiskDrives=eDiskDrives, a21VideoBiosManufacturer=a21VideoBiosManufacturer, a28OperationalGroupIndex=a28OperationalGroupIndex, tOperationalState=tOperationalState, a24DiskIndex=a24DiskIndex, a17OperationalGroupIndex=a17OperationalGroupIndex, a9ExtendedMemorySize=a9ExtendedMemorySize, eSystemBios=eSystemBios, a40ChannelNumber=a40ChannelNumber, a11LogicalName=a11LogicalName, DmiCounter=DmiCounter, a22VideoBiosCharacteristicsIndex=a22VideoBiosCharacteristicsIndex, a2SystemPrimaryUserName=a2SystemPrimaryUserName, a40RaidPhysicalDriveIndex=a40RaidPhysicalDriveIndex, a37NumberOfDeviceFunctions=a37NumberOfDeviceFunctions, a30DeviceGroupIndex=a30DeviceGroupIndex, a28MouseDriverVersion=a28MouseDriverVersion, a8MemoryUsage=a8MemoryUsage, a20CurrentVerticalResolution=a20CurrentVerticalResolution, a31MajorErrorCount=a31MajorErrorCount, DmiComponentIndex=DmiComponentIndex, a6ProcessorFamily=a6ProcessorFamily, a35SlotNumber=a35SlotNumber, a13IrqShareable=a13IrqShareable, ePhysicalMemory=ePhysicalMemory, a23SectorSize=a23SectorSize, a29FruGroupIndex=a29FruGroupIndex, a20VideoType=a20VideoType, DmiDate=DmiDate, a27LogicalDriveType=a27LogicalDriveType, dmiMibs=dmiMibs, a40PhysicalDriveSize=a40PhysicalDriveSize, a27LogicalDrivePath=a27LogicalDrivePath, eLogicalDrives=eLogicalDrives, eMemoryMappedIo=eMemoryMappedIo, a12ConnectorType=a12ConnectorType, a26OperationalGroupIndex=a26OperationalGroupIndex, a4EndingAddress=a4EndingAddress, tOperatingSystem=tOperatingSystem, a11OperationalGroupIndex=a11OperationalGroupIndex, a35AdapterId=a35AdapterId, a23DeviceId=a23DeviceId, a8NumberOfSimmSlotsUsed=a8NumberOfSimmSlotsUsed, eFieldReplacableUnit=eFieldReplacableUnit, a27LogicalDriveName=a27LogicalDriveName, eMouse=eMouse, tSystemBios=tSystemBios, a20VideoPhysicalLocation=a20VideoPhysicalLocation, a16ThermalState=a16ThermalState, a37DeviceIndex=a37DeviceIndex, a9BaseMemorySize=a9BaseMemorySize, tRaidAdapterInformation=tRaidAdapterInformation, a31OperationalStateInstanceIndex=a31OperationalStateInstanceIndex, a12LogicalName=a12LogicalName, a10SystemCacheIndex=a10SystemCacheIndex, a14AvailabilityOfDma=a14AvailabilityOfDma, a12SerialBaseIo=a12SerialBaseIo, a35AdapterIndex=a35AdapterIndex, eCoolingDevice=eCoolingDevice, a12SerialPortCapabilities=a12SerialPortCapabilities, a27LogicalDriveSize=a27LogicalDriveSize, a11IrqUsed=a11IrqUsed, tMouse=tMouse, a37Manufacturer=a37Manufacturer, a31AvailabilityStatus=a31AvailabilityStatus, eVideo=eVideo, a5BiosCharacteristicsDescription=a5BiosCharacteristicsDescription, a13IrqDescription=a13IrqDescription, a23TotalPhysicalSize=a23TotalPhysicalSize, a27FreeLogicalDriveSize=a27FreeLogicalDriveSize, tIrq=tIrq, ibm=ibm, a8PhysicalMemoryLocation=a8PhysicalMemoryLocation, a24PartitionIndex=a24PartitionIndex, a33ResourceBase=a33ResourceBase, tKeyboard=tKeyboard, a23MediaLoaded=a23MediaLoaded, a19SlotIndex=a19SlotIndex, tNetfinityDmiInstall=tNetfinityDmiInstall, a30Description=a30Description, a13IrqTriggerType=a13IrqTriggerType, a23InterfaceDescription=a23InterfaceDescription, eSystemEnclosure=eSystemEnclosure, tGeneralInformation=tGeneralInformation, a15MemoryMappedIoEndingAddress=a15MemoryMappedIoEndingAddress, a20CurrentNumberOfColumns=a20CurrentNumberOfColumns, a6MaximumSpeed=a6MaximumSpeed, a14DmaNumber=a14DmaNumber, a4LoaderVersion=a4LoaderVersion, eSystemResources=eSystemResources, a33ResourceSize=a33ResourceSize, a31WarningErrorCount=a31WarningErrorCount, a6OperationalGroupIndex=a6OperationalGroupIndex, a1Manufacturer=a1Manufacturer, a28MousePortName=a28MousePortName, eVideoBiosCharacteristic=eVideoBiosCharacteristic, a6ProcessorUpgrade=a6ProcessorUpgrade, a33ResourceType=a33ResourceType, a8MaximumMemoryCapacity=a8MaximumMemoryCapacity, a3OperatingSystemVersion=a3OperatingSystemVersion, a22VideoBiosCharacteristics=a22VideoBiosCharacteristics, a36DeviceIndex=a36DeviceIndex, a11DmaSupport=a11DmaSupport, a20FruGroupIndex=a20FruGroupIndex, a25PartitionName=a25PartitionName, a5BiosCharacteristics=a5BiosCharacteristics, a9ExtendedMemoryManagerVersion=a9ExtendedMemoryManagerVersion, a28MouseButtons=a28MouseButtons, a21VideoBiosIndex=a21VideoBiosIndex, a20CurrentRefreshRate=a20CurrentRefreshRate, a11ParallelPortIndex=a11ParallelPortIndex, tDma=tDma, a10SystemCacheSpeed=a10SystemCacheSpeed, a23NumberOfPhysicalSectorsPerTrack=a23NumberOfPhysicalSectorsPerTrack, tProcessor=tProcessor, tSystemEnclosure=tSystemEnclosure, tVideo=tVideo, a7OperationalGroupIndex=a7OperationalGroupIndex)
mibBuilder.exportSymbols("PCSYSTEMSMIF-MIB", a3OperatingSystemBootDeviceStorageType=a3OperatingSystemBootDeviceStorageType, a20VideoMemoryType=a20VideoMemoryType, a10FruGroupIndex=a10FruGroupIndex, a9FreeBaseMemorySize=a9FreeBaseMemorySize, a8NumberOfSimmSlots=a8NumberOfSimmSlots, a12IrqUsed=a12IrqUsed, a9ExpandedMemoryPageFrameSize=a9ExpandedMemoryPageFrameSize, a27LogicalDriveIndex=a27LogicalDriveIndex, eRaidPhysicalDriveInformation=eRaidPhysicalDriveInformation, a6Type=a6Type, a28MouseIrq=a28MouseIrq, a35PosData=a35PosData, a10SystemCacheSize=a10SystemCacheSize, tSystemCache=tSystemCache, a11ParallelPortCapabilities=a11ParallelPortCapabilities, a34ProductName=a34ProductName, a26DiskControllerIndex=a26DiskControllerIndex, a19CurrentUsage=a19CurrentUsage, a20ScanMode=a20ScanMode, a2SystemBootUpTime=a2SystemBootUpTime, a25FreeSpace=a25FreeSpace, a8OperationalGroupIndex=a8OperationalGroupIndex, a20OperationalGroupIndex=a20OperationalGroupIndex, a23RemovableMedia=a23RemovableMedia, a29KeyboardConnectorType=a29KeyboardConnectorType, eIrq=eIrq, a31DeviceGroupIndex=a31DeviceGroupIndex, a30FruIndex=a30FruIndex, dmtfGroups1=dmtfGroups1, a2SystemPrimaryUserPhone=a2SystemPrimaryUserPhone, a29KeyboardType=a29KeyboardType, a8PhysicalMemoryIndex=a8PhysicalMemoryIndex, a3OperatingSystemName=a3OperatingSystemName, netFinity=netFinity, a25Compressed=a25Compressed, a25PartitionIndex=a25PartitionIndex, tPciDeviceInformation=tPciDeviceInformation, tEisaDeviceInformation=tEisaDeviceInformation, a18FruGroupIndex=a18FruGroupIndex, a23NumberOfPhysicalCylinders=a23NumberOfPhysicalCylinders, a9ExpandedMemoryManagerVersion=a9ExpandedMemoryManagerVersion, a35AdapterName=a35AdapterName, a36VendorId=a36VendorId, a17PowerSupplyIndex=a17PowerSupplyIndex, tComponentid1=tComponentid1, a20MaximumRefreshRate=a20MaximumRefreshRate, a7FruGroupIndex=a7FruGroupIndex, a9FreeExpandedMemorySize=a9FreeExpandedMemorySize, eDiskController=eDiskController, a38NumberOfDefunctPhysicalDrives=a38NumberOfDefunctPhysicalDrives, a4StartingAddress=a4StartingAddress, a3PrimaryOperatingSystem=a3PrimaryOperatingSystem, a10SystemCacheErrorCorrection=a10SystemCacheErrorCorrection, eGeneralInformation=eGeneralInformation, eSystemSlots=eSystemSlots, a22VideoBiosCharacteristicsDescription=a22VideoBiosCharacteristicsDescription, a13AvailabilityOfIrq=a13AvailabilityOfIrq, tDiskMappingTable=tDiskMappingTable, a4Version=a4Version, a21VideoBiosShadowingState=a21VideoBiosShadowingState, a11ConnectorPinout=a11ConnectorPinout, a10OperationalGroupIndex=a10OperationalGroupIndex, a25PartitionLabel=a25PartitionLabel, tDiskDrives=tDiskDrives, eParallelPorts=eParallelPorts, tSystemSlots=tSystemSlots, a3OperatingSystemIndex=a3OperatingSystemIndex, DmiInteger=DmiInteger, a20VideoIndex=a20VideoIndex, a26FruGroupIndex=a26FruGroupIndex, a19SlotType=a19SlotType, a19SlotWidth=a19SlotWidth, ePciDeviceInformation=ePciDeviceInformation, DmiDisplaystring=DmiDisplaystring, a20CurrentNumberOfBitsPerPixel=a20CurrentNumberOfBitsPerPixel, a28FruGroupIndex=a28FruGroupIndex, a23StorageType=a23StorageType, a20CurrentVideoMode=a20CurrentVideoMode, a18OperationalGroupIndex=a18OperationalGroupIndex, a10SystemCacheWritePolicy=a10SystemCacheWritePolicy, tParallelPorts=tParallelPorts, tDiskController=tDiskController, a40TargetNumber=a40TargetNumber, a38NumberOfLogicalVolumes=a38NumberOfLogicalVolumes, tSystemResourcesDescription=tSystemResourcesDescription, a5BiosCharacteristicsIndex=a5BiosCharacteristicsIndex, a39RaidAdapterIndex=a39RaidAdapterIndex, a17FruGroupIndex=a17FruGroupIndex, a16BootUpState=a16BootUpState, eLogicalMemory=eLogicalMemory, a23FruGroupIndex=a23FruGroupIndex, a12SerialPortIndex=a12SerialPortIndex, a4BiosIndex=a4BiosIndex, a19SlotDescription=a19SlotDescription, a28MouseDriverName=a28MouseDriverName, a33ResourceInstance=a33ResourceInstance, a16EnclosureOrChassis=a16EnclosureOrChassis, a16OperationalGroupIndex=a16OperationalGroupIndex, tSystemBiosCharacteristic=tSystemBiosCharacteristic, a7NumberOfExpansionSlots=a7NumberOfExpansionSlots, a4BiosRomSize=a4BiosRomSize)
