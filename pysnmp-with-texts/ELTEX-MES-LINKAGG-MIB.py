#
# PySNMP MIB module ELTEX-MES-LINKAGG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-LINKAGG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:01:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
eltMesLinkAgg, = mibBuilder.importSymbols("ELTEX-MES", "eltMesLinkAgg")
dot3adAggPortEntry, = mibBuilder.importSymbols("IEEE8023-LAG-MIB", "dot3adAggPortEntry")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
rlDot3adAggBalanceEntry, = mibBuilder.importSymbols("RADLAN-TRUNK-MIB", "rlDot3adAggBalanceEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, Integer32, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, IpAddress, iso, Gauge32, Counter32, ModuleIdentity, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "IpAddress", "iso", "Gauge32", "Counter32", "ModuleIdentity", "ObjectIdentity", "Counter64")
TextualConvention, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "MacAddress")
eltMesLagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1))
if mibBuilder.loadTexts: eltMesLagMIB.setLastUpdated('201408310000Z')
if mibBuilder.loadTexts: eltMesLagMIB.setOrganization('Eltex Ltd.')
if mibBuilder.loadTexts: eltMesLagMIB.setContactInfo('www.eltex.nsk.ru')
if mibBuilder.loadTexts: eltMesLagMIB.setDescription('The Link Aggregation module IEEE 802.3ad extension.')
eltMesLagMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1, 1))
eltMesLinkAggGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1, 1, 1))
eltMesLinkAggPort = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1, 1, 2))
eltAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1, 1, 2, 1), )
if mibBuilder.loadTexts: eltAggPortTable.setStatus('current')
if mibBuilder.loadTexts: eltAggPortTable.setDescription('A table that contains Link Aggregation Control configuration information about every Aggregation Port associated with this device. A row appears in this table for each physical port.')
eltAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1, 1, 2, 1, 1), )
dot3adAggPortEntry.registerAugmentions(("ELTEX-MES-LINKAGG-MIB", "eltAggPortEntry"))
eltAggPortEntry.setIndexNames(*dot3adAggPortEntry.getIndexNames())
if mibBuilder.loadTexts: eltAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: eltAggPortEntry.setDescription('A list of Link Aggregation Control configuration parameters for each Aggregation Port on this device.')
eltAggPortPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltAggPortPassive.setReference('IEEE 802.3 Subclause 5.4.1')
if mibBuilder.loadTexts: eltAggPortPassive.setStatus('current')
if mibBuilder.loadTexts: eltAggPortPassive.setDescription('This value indicates wether port is LACP passive or active')
eltAggBalanceTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1, 1, 2, 2), )
if mibBuilder.loadTexts: eltAggBalanceTable.setStatus('current')
if mibBuilder.loadTexts: eltAggBalanceTable.setDescription('A table that contains Eltex extension of balansing criterion used for the corresponding dot3adAggIndex.')
eltAggBalanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1, 1, 2, 2, 1), )
rlDot3adAggBalanceEntry.registerAugmentions(("ELTEX-MES-LINKAGG-MIB", "eltAggBalanceEntry"))
eltAggBalanceEntry.setIndexNames(*rlDot3adAggBalanceEntry.getIndexNames())
if mibBuilder.loadTexts: eltAggBalanceEntry.setStatus('current')
if mibBuilder.loadTexts: eltAggBalanceEntry.setDescription('A list of information for each dot3adAggIndex.')
eltAggBalanceMplsAware = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 9, 1, 1, 2, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltAggBalanceMplsAware.setStatus('current')
if mibBuilder.loadTexts: eltAggBalanceMplsAware.setDescription("If this value is TRUE, IP over MPLS traffic will be treated as IP traffic instead of as non-IP. Note that this setting will affect all device services, not only load balancing. Can't be TRUE if rlDot3adAggBalanceLayer equals 2.")
mibBuilder.exportSymbols("ELTEX-MES-LINKAGG-MIB", eltAggBalanceEntry=eltAggBalanceEntry, eltAggBalanceMplsAware=eltAggBalanceMplsAware, eltMesLagMIB=eltMesLagMIB, PYSNMP_MODULE_ID=eltMesLagMIB, eltAggPortPassive=eltAggPortPassive, eltMesLinkAggPort=eltMesLinkAggPort, eltMesLinkAggGlobal=eltMesLinkAggGlobal, eltAggPortTable=eltAggPortTable, eltAggBalanceTable=eltAggBalanceTable, eltMesLagMIBObjects=eltMesLagMIBObjects, eltAggPortEntry=eltAggPortEntry)
