#
# PySNMP MIB module CISCO-IKE-FLOW-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IKE-FLOW-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
cisgIpsSgTunIndex, cisgIpsSgProtocol = mibBuilder.importSymbols("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunIndex", "cisgIpsSgProtocol")
CIPsecPhase1PeerIdentityType, CIKEIsakmpDoi = mibBuilder.importSymbols("CISCO-IPSEC-TC", "CIPsecPhase1PeerIdentityType", "CIKEIsakmpDoi")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, Counter32, Unsigned32, Bits, MibIdentifier, Counter64, Integer32, Gauge32, iso, ModuleIdentity, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "Counter32", "Unsigned32", "Bits", "MibIdentifier", "Counter64", "Integer32", "Gauge32", "iso", "ModuleIdentity", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoIkeFlowExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 428))
ciscoIkeFlowExtMIB.setRevisions(('2004-09-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIkeFlowExtMIB.setRevisionsDescriptions(('Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoIkeFlowExtMIB.setLastUpdated('200409140000Z')
if mibBuilder.loadTexts: ciscoIkeFlowExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIkeFlowExtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoIkeFlowExtMIB.setDescription("This MIB module is an extension to CISCO-IKE-FLOW-MIB and contains Cisco Specific extensions for monitoring IKE. It is for monitoring the structures and status of IPsec control flows based on Internet Key Exchange protocol. Acronyms The following acronyms are used in this document: Flow, Tunnel: An ISAKMP SA can be regarded as representing a flow of ISAKMP/IKE traffic. Hence an ISAKMP is referred to as a 'Phase 1 Tunnel' in this document. IPsec: Secure IP Protocol. ISAKMP: Internet Security Association and Key Management Protocol. IKE: Internet Key Exchange Protocol. FCSP: Fibre Channel Security Protocol. SA: Security Association (ref: rfc2408). Phase 2 Tunnel: AN instance of a non-ISAKMP SA bundle in which all the SA share the same proxy identifiers protect the same stream of application traffic. Such an SA bundle is termed a 'Phase 2 Tunnel'. Note that a Phase 2 tunnel may comprise different SA bundles and different number of SA bundles at different times (due to key refresh). ")
ciscoIkeFlowExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 428, 0))
ciscoIkeFlowExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 428, 1))
ciscoIkeFlowExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 428, 2))
cifeIkeGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 428, 1, 1))
cifeClearAllTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 428, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("clearIPSec", 2), ("clearFCSP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cifeClearAllTunnels.setStatus('current')
if mibBuilder.loadTexts: cifeClearAllTunnels.setDescription("Clears all the tunnels of a specific type. 'none' is returned on reading this object. 'clearIPSec' all the IPSec tunnels are cleared. 'clearFCSP' all FCSP tunnels are cleared. ")
cifeTunnelExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 428, 1, 2), )
if mibBuilder.loadTexts: cifeTunnelExtTable.setStatus('current')
if mibBuilder.loadTexts: cifeTunnelExtTable.setDescription('The Phase-1 Internet Key Exchange Tunnel Table. There is one entry in this table for each active IKE tunnel. This table is an extension to cifIkeTunnelTable defined in CISCO-IKE-FLOW-MIB. Some information in this table is also present in the cisgIpsSgTunnelTable, but the table is indexed differently so that the rows in this table are grouped/ordered by domain of interpretation (DOI). ')
cifeTunnelExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 428, 1, 2, 1), ).setIndexNames((0, "CISCO-IKE-FLOW-EXT-MIB", "cifeTunnelExtDoi"), (0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgProtocol"), (0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunIndex"))
if mibBuilder.loadTexts: cifeTunnelExtEntry.setStatus('current')
if mibBuilder.loadTexts: cifeTunnelExtEntry.setDescription('Each entry contains the attributes associated with an active IKE Tunnel, identified by cisgIpsSgTunIndex, for the IKE protocol, identified by cisgIpsSgProtocol, in this DOI, identified by cifeTunnelExtDoi. ')
cifeTunnelExtDoi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 428, 1, 2, 1, 1), CIKEIsakmpDoi())
if mibBuilder.loadTexts: cifeTunnelExtDoi.setStatus('current')
if mibBuilder.loadTexts: cifeTunnelExtDoi.setDescription('This identifies the DOI of Phase-2 operations in which this control tunnel operates. This may be used to identify the Phase-2 protocol. ')
cifeTunnelExtLocalIdenType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 428, 1, 2, 1, 2), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifeTunnelExtLocalIdenType.setStatus('current')
if mibBuilder.loadTexts: cifeTunnelExtLocalIdenType.setDescription('The type of the identity used by the managed entity authenticating itself to the peer in the setup of the IKE tunnel corresponding to this conceptual row. This object would have same value as cisgIpsSgTunLocalType from CISCO-IPSEC-SIGNALLING-MIB. ')
cifeTunnelExtLocalIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 428, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifeTunnelExtLocalIdentity.setStatus('current')
if mibBuilder.loadTexts: cifeTunnelExtLocalIdentity.setDescription('The value of the local peer identity. This object would have same value as cisgIpsSgTunLocalValue from CISCO-IPSEC-SIGNALLING-MIB. ')
cifeTunnelExtRemoteIdenType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 428, 1, 2, 1, 4), CIPsecPhase1PeerIdentityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifeTunnelExtRemoteIdenType.setStatus('current')
if mibBuilder.loadTexts: cifeTunnelExtRemoteIdenType.setDescription('The type of the identity used by the peer in authenticating itself to the local entity in the setup of the IKE tunnel corresponding to this conceptual row. This object would have same value as cisgIpsSgTunRemoteType from CISCO-IPSEC-SIGNALLING-MIB. ')
cifeTunnelExtRemoteIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 428, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifeTunnelExtRemoteIdentity.setStatus('current')
if mibBuilder.loadTexts: cifeTunnelExtRemoteIdentity.setDescription('The value of the remote peer identity. This object would have same value as cisgIpsSgTunRemoteValue from CISCO-IPSEC-SIGNALLING-MIB. ')
cifeMIBConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 428, 2, 1))
cifeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 428, 2, 2))
cifeMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 428, 2, 1, 1)).setObjects(("CISCO-IKE-FLOW-EXT-MIB", "cifeGlobalsGroup"), ("CISCO-IKE-FLOW-EXT-MIB", "cifeTunnelExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifeMIBCompliance = cifeMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cifeMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco IKE extension MIB. ')
cifeGlobalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 428, 2, 2, 1)).setObjects(("CISCO-IKE-FLOW-EXT-MIB", "cifeClearAllTunnels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifeGlobalsGroup = cifeGlobalsGroup.setStatus('current')
if mibBuilder.loadTexts: cifeGlobalsGroup.setDescription('A collection of objects providing Global IKE configuration. ')
cifeTunnelExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 428, 2, 2, 2)).setObjects(("CISCO-IKE-FLOW-EXT-MIB", "cifeTunnelExtLocalIdenType"), ("CISCO-IKE-FLOW-EXT-MIB", "cifeTunnelExtLocalIdentity"), ("CISCO-IKE-FLOW-EXT-MIB", "cifeTunnelExtRemoteIdenType"), ("CISCO-IKE-FLOW-EXT-MIB", "cifeTunnelExtRemoteIdentity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifeTunnelExtGroup = cifeTunnelExtGroup.setStatus('current')
if mibBuilder.loadTexts: cifeTunnelExtGroup.setDescription('The collection of objects providing IKE tunnels info. ')
mibBuilder.exportSymbols("CISCO-IKE-FLOW-EXT-MIB", ciscoIkeFlowExtMIBConform=ciscoIkeFlowExtMIBConform, cifeTunnelExtDoi=cifeTunnelExtDoi, cifeTunnelExtRemoteIdentity=cifeTunnelExtRemoteIdentity, cifeTunnelExtLocalIdentity=cifeTunnelExtLocalIdentity, cifeGlobalsGroup=cifeGlobalsGroup, cifeTunnelExtTable=cifeTunnelExtTable, cifeTunnelExtGroup=cifeTunnelExtGroup, ciscoIkeFlowExtMIBObjects=ciscoIkeFlowExtMIBObjects, cifeTunnelExtRemoteIdenType=cifeTunnelExtRemoteIdenType, cifeMIBGroups=cifeMIBGroups, cifeMIBCompliance=cifeMIBCompliance, PYSNMP_MODULE_ID=ciscoIkeFlowExtMIB, cifeClearAllTunnels=cifeClearAllTunnels, ciscoIkeFlowExtMIBNotifs=ciscoIkeFlowExtMIBNotifs, cifeTunnelExtEntry=cifeTunnelExtEntry, cifeTunnelExtLocalIdenType=cifeTunnelExtLocalIdenType, cifeMIBConformances=cifeMIBConformances, cifeIkeGlobals=cifeIkeGlobals, ciscoIkeFlowExtMIB=ciscoIkeFlowExtMIB)
