#
# PySNMP MIB module HOT-DOMAIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HOT-DOMAIN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ent_8800, = mibBuilder.importSymbols("PDN-HEADER-MIB", "ent-8800")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, Unsigned32, ObjectIdentity, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, IpAddress, MibIdentifier, Integer32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Unsigned32", "ObjectIdentity", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "IpAddress", "MibIdentifier", "Integer32", "NotificationType", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

pdnDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6))
pdnCardConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1))
pdnPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2))
pdnClientConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3))
pdnCardGeneralParams = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 4))
pdnCardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1), )
if mibBuilder.loadTexts: pdnCardConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pdnCardConfigTable.setDescription('A table that contains information about Mux Forwarding, IP Filtering, IP Scoping and domain name for each VNID.')
pdnCardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1), ).setIndexNames((0, "HOT-DOMAIN-MIB", "pdnCardConfigVnidId"))
if mibBuilder.loadTexts: pdnCardConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pdnCardConfigEntry.setDescription('A list of configuration information for each VNID.')
pdnCardConfigVnidId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigVnidId.setStatus('mandatory')
if mibBuilder.loadTexts: pdnCardConfigVnidId.setDescription("The VNID Id number of the virtual network for which this entry contains management information. 'null' is used to create a new entry for MIB browsers which cannot create new entry but can only edit existing entry.")
pdnCardConfigDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: pdnCardConfigDomainName.setDescription('The Domain name of the ISP for this VNID.')
pdnCardConfigMuxFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigMuxFwd.setStatus('mandatory')
if mibBuilder.loadTexts: pdnCardConfigMuxFwd.setDescription('This object shows if Mux Forwarding has been enabled or disabled by the user.')
pdnCardConfigIPFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigIPFiltering.setStatus('mandatory')
if mibBuilder.loadTexts: pdnCardConfigIPFiltering.setDescription('This object shows if IP Filtering has been enabled or disabled by the user.')
pdnCardConfigIPScoping = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigIPScoping.setStatus('mandatory')
if mibBuilder.loadTexts: pdnCardConfigIPScoping.setDescription('This object shows if IP Scoping has been enabled or disabled by the user.')
pdnCardConfigDbUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nop", 1), ("update", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigDbUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: pdnCardConfigDbUpdate.setDescription("This object is used to control the setting of the objects in this table. When 'nop' is received, no objects are set. When 'update' is received, all objects in this table for which set PDU have been received prior to this set PDU will be set and a new entry will be created if the index does not exist. When 'delete' is received, the entry with the index value will be deleted.")
pdnPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1), )
if mibBuilder.loadTexts: pdnPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pdnPortConfigTable.setDescription('A table that contains VNID configuration information for each port.')
pdnPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1), ).setIndexNames((0, "HOT-DOMAIN-MIB", "pdnPortConfigVNID"), (0, "HOT-DOMAIN-MIB", "pdnPortConfigIfIndex"))
if mibBuilder.loadTexts: pdnPortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pdnPortConfigEntry.setDescription('A list of configuration information for each port.')
pdnPortConfigVNID = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPortConfigVNID.setStatus('mandatory')
if mibBuilder.loadTexts: pdnPortConfigVNID.setDescription('The VNID Id number of the virtual network for which this entry contains management information.')
pdnPortConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPortConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdnPortConfigIfIndex.setDescription('The value of the instance of the ifIndex object, defined in MIB-II, for the interface corresponding to this port.')
pdnPortConfigCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("de-activate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPortConfigCfg.setStatus('mandatory')
if mibBuilder.loadTexts: pdnPortConfigCfg.setDescription('This object shows if this VNID has been made active or de-active for this port by the user.')
pdnPortConfigDefNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPortConfigDefNHR.setStatus('mandatory')
if mibBuilder.loadTexts: pdnPortConfigDefNHR.setDescription('The Default Next Hop Router address for the specified VNID and port.')
pdnPortConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("implicit", 1), ("explicit", 2), ("no-tagging", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPortConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: pdnPortConfigMode.setDescription('This object shows the configuration mode for this VNID and for this port.')
pdnClientConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1), )
if mibBuilder.loadTexts: pdnClientConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigTable.setDescription('A table that contains configuration information for each client.')
pdnClientConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1), ).setIndexNames((0, "HOT-DOMAIN-MIB", "pdnClientConfigIfIndex"), (0, "HOT-DOMAIN-MIB", "pdnClientConfigClientIndex"))
if mibBuilder.loadTexts: pdnClientConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigEntry.setDescription('A list of configuration information for each client.')
pdnClientConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigIfIndex.setDescription('The ifIndex of the port for which this entry contains management information.')
pdnClientConfigClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigClientIndex.setDescription('The Client index of the Client for which this entry contains management information.')
pdnClientConfigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnClientConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigAddr.setDescription('The IP address of the client specified by the client id.')
pdnClientConfigNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnClientConfigNHR.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigNHR.setDescription('The Next Hop Router address for the client specified by the client index.')
pdnClientConfigVnidId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigVnidId.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigVnidId.setDescription('The VNID Id number of the Client for which this client is configured.')
pdnClientConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigType.setDescription('The Configuration type of this entry - Static or Dynamic.')
pdnClientConfigLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigLeaseTime.setDescription('The Lease Time in seconds for this client.')
pdnClientConfigLeaseRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigLeaseRemainTime.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigLeaseRemainTime.setDescription('The Lease Remaining Time in seconds for this client.')
pdnClientConfigMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigMacAddr.setDescription('The MAC Address of the client.')
pdnClientConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 3, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: pdnClientConfigSubnetMask.setDescription('The subnet mask of the client.')
pdnCardGeneralParamsVNIDMode = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 9, 3, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardGeneralParamsVNIDMode.setStatus('mandatory')
if mibBuilder.loadTexts: pdnCardGeneralParamsVNIDMode.setDescription('The state of VNID tagging on the card.')
mibBuilder.exportSymbols("HOT-DOMAIN-MIB", pdnPortConfigMode=pdnPortConfigMode, pdnClientConfigNHR=pdnClientConfigNHR, pdnClientConfigLeaseTime=pdnClientConfigLeaseTime, pdnCardGeneralParamsVNIDMode=pdnCardGeneralParamsVNIDMode, pdnCardConfigEntry=pdnCardConfigEntry, pdnCardConfigIPScoping=pdnCardConfigIPScoping, pdnClientConfig=pdnClientConfig, pdnPortConfigVNID=pdnPortConfigVNID, pdnClientConfigClientIndex=pdnClientConfigClientIndex, pdnPortConfigTable=pdnPortConfigTable, pdnCardConfigIPFiltering=pdnCardConfigIPFiltering, pdnPortConfigCfg=pdnPortConfigCfg, pdnCardConfigDbUpdate=pdnCardConfigDbUpdate, pdnCardConfigTable=pdnCardConfigTable, pdnPortConfigDefNHR=pdnPortConfigDefNHR, pdnClientConfigType=pdnClientConfigType, pdnClientConfigLeaseRemainTime=pdnClientConfigLeaseRemainTime, pdnCardConfigVnidId=pdnCardConfigVnidId, pdnDomain=pdnDomain, pdnClientConfigAddr=pdnClientConfigAddr, pdnPortConfigIfIndex=pdnPortConfigIfIndex, pdnClientConfigMacAddr=pdnClientConfigMacAddr, pdnCardGeneralParams=pdnCardGeneralParams, pdnCardConfigDomainName=pdnCardConfigDomainName, pdnClientConfigEntry=pdnClientConfigEntry, pdnCardConfigMuxFwd=pdnCardConfigMuxFwd, pdnClientConfigTable=pdnClientConfigTable, pdnCardConfig=pdnCardConfig, pdnClientConfigIfIndex=pdnClientConfigIfIndex, pdnPortConfig=pdnPortConfig, MacAddress=MacAddress, pdnClientConfigSubnetMask=pdnClientConfigSubnetMask, pdnPortConfigEntry=pdnPortConfigEntry, pdnClientConfigVnidId=pdnClientConfigVnidId)
