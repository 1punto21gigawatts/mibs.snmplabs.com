#
# PySNMP MIB module VERTICAL-std-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERTICAL-std-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, Integer32, ModuleIdentity, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, enterprises, iso, Counter32, ObjectIdentity, NotificationType, TimeTicks, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Integer32", "ModuleIdentity", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "enterprises", "iso", "Counter32", "ObjectIdentity", "NotificationType", "TimeTicks", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vertical = MibIdentifier((1, 3, 6, 1, 4, 1, 2338))
selfTestDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 2338, 8))
stdSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2338, 8, 1))
sysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 2338, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("running", 1), ("startUpInProgress", 2), ("upgradeInProgress", 3), ("restoreInProgress", 4), ("error", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysOperStatus.setDescription('Specifies the current operational status of the Instant Office system. Valid values are: running (1) -> The normal operational status, all components are up and running. startUpInProgress (2) -> The ST Deamon is starting up the system. upgradeInProgress (3) -> The ST Daemon is attempting to upgrade the system. restoreInProgress (4) -> The ST Daemon is attemping to restore the system from a previous installation, after an upgrade attemp failed. error (5) -> An error condition. One or more components failed to start. More information can be found from the Component Table')
sysCurrentVersion = MibScalar((1, 3, 6, 1, 4, 1, 2338, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCurrentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysCurrentVersion.setDescription('Specifies the current Instant Office version on this system.')
stdComponentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2338, 8, 2))
stdComponentTable = MibTable((1, 3, 6, 1, 4, 1, 2338, 8, 2, 1), )
if mibBuilder.loadTexts: stdComponentTable.setStatus('mandatory')
if mibBuilder.loadTexts: stdComponentTable.setDescription('Table of status information about all Instant Office components (executables, services and drivers). There are as many entries as there are components in the system.')
stdComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2338, 8, 2, 1, 1), ).setIndexNames((0, "VERTICAL-std-MIB", "compIndex"))
if mibBuilder.loadTexts: stdComponentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: stdComponentEntry.setDescription('An entry in the Component table.')
compIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compIndex.setStatus('mandatory')
if mibBuilder.loadTexts: compIndex.setDescription('The index of the component')
compName = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 8, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compName.setStatus('mandatory')
if mibBuilder.loadTexts: compName.setDescription('The name of the component')
compType = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 2000, 2001, 2002, 2003))).clone(namedValues=NamedValues(("type-driver", 1), ("type-service", 16), ("type-executable", 2000), ("type-non-vni-driver", 2001), ("type-non-vni-service", 2002), ("type-non-vni-executable", 2003)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compType.setStatus('mandatory')
if mibBuilder.loadTexts: compType.setDescription('The Component type - defines whether this component is a driver, service or an executable. The following the valid values: type-driver = 1, type-service = 16, type-executable = 2000, type-non-vni-driver = 2001, type-non-vni-service = 2002, type-non-vni-executable = 2003')
compInstallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 1))).clone(namedValues=NamedValues(("uninstalled", 100), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compInstallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: compInstallStatus.setDescription('Describes the installation status of this component. The following the valid values: uninstalled = 100, installed = 1')
compOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 1025))).clone(namedValues=NamedValues(("stopped", 1), ("start-pending", 2), ("stop-pending", 3), ("running", 4), ("continue-pending", 5), ("pause-pending", 6), ("paused", 7), ("unknown", 8), ("disabled", 1025)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: compOperStatus.setDescription('The operational status of this component. The following the valid values: stopped =1, start-pending =2, stop-pending =3, running =4 (the normal operational state), continue-pending =5, pause-pending =6, paused =7, unknown =8, disabled =1025')
compEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 1))).clone(namedValues=NamedValues(("enabled", 100), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: compEnabled.setDescription('Determines whether this component is enabled or disabled. Valid values: enabled = 100, disabled = 1')
compLastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 8, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compLastStart.setStatus('mandatory')
if mibBuilder.loadTexts: compLastStart.setDescription('The date-time stamp when this component was last restarted.')
stdCompFailedToStart = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,26)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"), ("VERTICAL-std-MIB", "compName"))
if mibBuilder.loadTexts: stdCompFailedToStart.setDescription(' This notification is sent when a component fails to start during initial start-up. ')
stdCompAttemptRestart = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,27)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"), ("VERTICAL-std-MIB", "compName"))
if mibBuilder.loadTexts: stdCompAttemptRestart.setDescription(' This notification is sent when the Self Test Daemon attempts to restart a component. ')
stdCompFailedToReStart = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,28)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"), ("VERTICAL-std-MIB", "compName"))
if mibBuilder.loadTexts: stdCompFailedToReStart.setDescription(' This notification is sent when an attempt to restart a component failed. ')
stdCompRestartComplete = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,29)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"), ("VERTICAL-std-MIB", "compName"))
if mibBuilder.loadTexts: stdCompRestartComplete.setDescription(' This notification is sent when a component is successfully restarted ')
stdUpgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,30)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdUpgradeStarted.setDescription('This notification is sent when an Instant Office upgrade is started. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdUnpackingFiles = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,31)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdUnpackingFiles.setDescription('This notification is sent when unpacking of the upgraded CAB file starts. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdUnpackingComplete = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,32)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdUnpackingComplete.setDescription('This notification is sent when unpacking of the upgraded CAB file is complete. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdUpgradeBeingApplied = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,33)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdUpgradeBeingApplied.setDescription('This notification is sent when an Instant Office upgrade is about to be applied. This is done after the Upgraded CAB file is unpacked and a system reboot is done. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdUpgradeInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,34)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdUpgradeInProgress.setDescription(' This notification is sent when an Instant Office upgrade process is under way. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdUpgradeComplete = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,35)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdUpgradeComplete.setDescription(' This notification is sent when an Instant Office upgrade is successfully completed. 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdUpgradeError = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,36)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdUpgradeError.setDescription(' This notification is sent when an Instant Office upgrade attempt fails. A Restore operation would be done immediately. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdRestoreStarted = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,37)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdRestoreStarted.setDescription(' This notification is sent when a previous version of Instant Office is about to be restored. A restore operation is typically carried out after a failed upgrade attempt. 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdRestoreInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,38)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdRestoreInProgress.setDescription(' This notification is sent when a previous version of Instant Office is restored successfully. A restore operation is typically carried out after a failed upgrade attempt. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdRestoreComplete = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,39)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdRestoreComplete.setDescription(' This notification is sent when a previous version of Instant Office is restored successfully. A restore operation is typically carried out after a failed upgrade attempt. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdRestoreError = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,40)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdRestoreError.setDescription('This notification is sent when an Instant Office restore attemp fails. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdRebootingMachine = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,41)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdRebootingMachine.setDescription(' This notification is sent before an Instant Office reboot is done, typically due to an upgrade/restore request. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdVerifyingSystem = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,42)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdVerifyingSystem.setDescription(' This notification is sent when the System is brought up (all componenets are started) after an Upgrade or a restore process. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point')
stdIOUptoDate = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,50)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdIOUptoDate.setDescription(' This notification is sent when an upgrade attempt is aborted because the current version of Instant Office is later than the upgrade version.')
stdBadCABFile = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,51)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdBadCABFile.setDescription(' This notification is sent when an upgrade attempt is aborted because of a bad CAB file.')
stdNotEnoughDiskSpace = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,52)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"))
if mibBuilder.loadTexts: stdNotEnoughDiskSpace.setDescription(' This notification is sent when an upgrade attempt is aborted because there is not enough disk space on the machine.')
stdIoNotOperational = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,63)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"), ("VERTICAL-std-MIB", "compName"))
if mibBuilder.loadTexts: stdIoNotOperational.setDescription(' This notification is sent under any of the following conditions: - Before attempting to start the components, FBS checks to ensure the minimum configuration is present in the box, currently this means an RSC card in Slot_05. If this check fails, FBS will not attempt to start any of the components and needs to send a trap out to the world! - When FBS attempts to start all components and a critical component fails to start and hence InstantOffice is not operational, FBS needs to send the trap. - After an upgrade is performed and deemed unsuccessful, FBS will attempt to restore to the previous working version. In case this process fails, FBS needs to send the trap.')
stdPrerequisiteMissing = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,67)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"), ("VERTICAL-std-MIB", "compName"))
if mibBuilder.loadTexts: stdPrerequisiteMissing.setDescription(' This notification is sent when an upgrade attempt is done on an Instant Office that does not contain the pre-requisite software version for that upgrade.')
stdPLDFailed = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,70)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"), ("VERTICAL-std-MIB", "compName"))
if mibBuilder.loadTexts: stdPLDFailed.setDescription('Resource Card Firmware upgrade failed. Return code=nnnn')
stdUnsupportedConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,71)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"), ("VERTICAL-std-MIB", "compName"))
if mibBuilder.loadTexts: stdUnsupportedConfiguration.setDescription('You are running an unsupported configuration. 1600-Router card requires a newer version of the Resource Switch Card.')
stdInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 2338) + (0,72)).setObjects(("VERTICAL-std-MIB", "sysCurrentVersion"), ("VERTICAL-std-MIB", "compName"))
if mibBuilder.loadTexts: stdInvalidConfiguration.setDescription(' You are running an invalid configuration. 1600-Router card will be disabled since there are more than 2 Station Cards present.')
mibBuilder.exportSymbols("VERTICAL-std-MIB", stdUpgradeStarted=stdUpgradeStarted, compEnabled=compEnabled, compInstallStatus=compInstallStatus, stdComponentGroup=stdComponentGroup, stdUnpackingComplete=stdUnpackingComplete, stdComponentEntry=stdComponentEntry, compLastStart=compLastStart, stdRestoreInProgress=stdRestoreInProgress, stdSystemGroup=stdSystemGroup, stdCompFailedToStart=stdCompFailedToStart, stdPrerequisiteMissing=stdPrerequisiteMissing, stdRebootingMachine=stdRebootingMachine, stdUpgradeBeingApplied=stdUpgradeBeingApplied, stdNotEnoughDiskSpace=stdNotEnoughDiskSpace, stdInvalidConfiguration=stdInvalidConfiguration, stdUpgradeError=stdUpgradeError, stdRestoreStarted=stdRestoreStarted, selfTestDaemon=selfTestDaemon, stdVerifyingSystem=stdVerifyingSystem, stdPLDFailed=stdPLDFailed, stdCompRestartComplete=stdCompRestartComplete, compOperStatus=compOperStatus, sysOperStatus=sysOperStatus, stdIOUptoDate=stdIOUptoDate, stdUpgradeInProgress=stdUpgradeInProgress, stdComponentTable=stdComponentTable, stdRestoreComplete=stdRestoreComplete, stdCompFailedToReStart=stdCompFailedToReStart, compName=compName, stdUpgradeComplete=stdUpgradeComplete, stdUnsupportedConfiguration=stdUnsupportedConfiguration, stdIoNotOperational=stdIoNotOperational, sysCurrentVersion=sysCurrentVersion, stdRestoreError=stdRestoreError, stdUnpackingFiles=stdUnpackingFiles, stdBadCABFile=stdBadCABFile, stdCompAttemptRestart=stdCompAttemptRestart, compIndex=compIndex, vertical=vertical, compType=compType)
