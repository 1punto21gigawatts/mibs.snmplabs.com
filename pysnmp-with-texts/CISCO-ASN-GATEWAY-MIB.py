#
# PySNMP MIB module CISCO-ASN-GATEWAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ASN-GATEWAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, CiscoAlarmSeverity = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero", "CiscoAlarmSeverity")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, Counter64, ModuleIdentity, Unsigned32, Gauge32, ObjectIdentity, IpAddress, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "Counter64", "ModuleIdentity", "Unsigned32", "Gauge32", "ObjectIdentity", "IpAddress", "MibIdentifier", "NotificationType")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoAgwMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 638))
ciscoAgwMIB.setRevisions(('2009-05-26 00:00', '2008-04-22 00:00', '2008-03-24 00:00', '2007-09-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAgwMIB.setRevisionsDescriptions(('Following objects were added to cagwStateTable cagwCurrentPmipEnabledSubs, Following objects were added to cagwUserGrpStatistics cagwUserGrpPodReqRecv, cagwUserGrpPodSuccessNotifsSent, cagwUserGrpPodFailureNotifsSent, cagwUserGrpCoaReqRecv, cagwUserGrpCoaSuccessNotifsSent, cagwUserGrpCoaFailureNotifsSent, cagwUserGrpRejSession, Following objects were added to cagwGlobalStatistics cagwPktsDroppedMipIncomplete, cagwCreatedPmipEnabledSubs, cagwDeletedPmipEnabledSubs, cagwPktsDropPmipStaticIpHost, cagwIdleModeEntryMsBsInitiated, cagwIdleModeEntryBwgInitiated, cagwIdleModeEntryFailures, cagwIdleModeExitMsBsInitiated, cagwIdleModeExitBwgInitiated, cagwIdleModeExitFailures, cagwIdleModeLocUpdtPgidChange, cagwIdleModeLocUpdtPowerDown, cagwIdleModeLocUpdtPeriodic, cagwIdleModeLocUpdtFailures, cagwIdleModePageAttemptsDwnlnkData, cagwIdleModePageFailuresDwnlnkData, cagwIdleModePageAttemptsLocUpdt, cagwIdleModePageFailuresLocUpdt, cagwIdleModeDirectedPagingSuccess, cagwIdleModeDirectedPagingRetries, cagwIdleModeFloodPagingSuccess, cagwIdleModeFloodPagingRetries, cagwPodRequestsRecv, cagwPodSuccessNotifsSent, cagwPodFailureNotifsSent, cagwCoaReqRecv, cagwCoaSuccessNotifsSent, cagwCoaFailureNotifsSent, cagwHotlineUplinkPktDropAclDeny, cagwHotlineDownlinkPktDropAclDeny, cagwUplinkPktDropUsrgrpAclDeny, cagwDownlinkPktDropUsrgrpAclDeny, cagwDownlinkPktDropPagingAclDeny, Following object were added to cagwDhcpStatistics cagwDhcpProxyDiscoverPackets, cagwDhcpProxyOfferPackets, cagwDhcpProxyRequestPackets, cagwDhcpProxyDeclinePackets, cagwDhcpProxyAckPackets, cagwDhcpProxyNakPackets, cagwDhcpProxyReleasePackets, cagwDhcpProxyInformPackets, cagwDhcpProxyLeaseQueryPackets, cagwDhcpProxyUnknownPackets', 'Following objects were added to cagwStateTable cagwCurrentFramedRoutes, cagwCurrentFramedRouteSubs, cagwCurrentAutoProvSessions, cagwCurrentSessionsWithIpPktsRedir. Following objects were added to cagwGlobalStatistics cagwRejectedSessionUnapprovedBs, cagwPktsDroppedStaticIpHostNotAllowed, cagwPktsDroppedMulticastBroadcast cagwSlaProfileNotFound. Following objects were obsoleted in cagwGlobalStatistics cagwFramedRouteInserted, cagwFramedRouteInsertFailed, cagwFramedRouteDeleted. Following objects were added to cagwUserGrpStatistics cagwUserGrpOverwritten.', 'Following objects were deprecated in cagwGlobalStatistics cagwReceivedDataPkts, cagwReceivedDataBytes, cagwSentDataPkts, cagwSentDataBytes. Following objects were added to cagwGlobalStatistics cagwIpGreReceivedDataPkts, cagwIpGreReceivedDataBytes, cagwIpGreSentDataPkts, cagwIpGreSentDataBytes, cagwEthGreReceivedDataPkts, cagwEthGreReceivedDataBytes, cagwEthGreSentdDataPkts, cagwEthGreSentDataBytes, cagwRejectedHosts, cagwAgedOutStaticHosts, cagwSuccessfulHandoff, cagwFailedHandoff, cagwSuccessfulCMACKeyUpdate, cagwFailedCMACKeyUpdate, cagwSuccessfulSecurityKeyExchange, cagwFailedSecurityKeyExchange, cagwIpGreReceivedRedirectedPkts, cagwIpGreReceivedRedirectedBytes, cagwEthGreReceivedRedirectedPkts, cagwEthGreReceivedRedirectedBytes, cagwThrottlingOfPuntsDataPktsDrops, cagwLearningUpStreamDataPktsDrops, cagwPuntedDataPkts. Following objects were deprecated in cagwUserGrpEntry cagwUserGrpPacketsSent, cagwUserGrpBytesSent, cagwUserGrpPacketsReceived, cagwUserGrpBytesReceived. Following objects were added to cagwUserGrpEntry cagwUserGrpIpGrePacketsSent, cagwUserGrpIpGreBytesSent, cagwUserGrpIpGrePacketsReceived, cagwUserGrpIpGreBytesReceived, cagwUserGrpEthGrePacketsSent, cagwUserGrpEthGreBytesSent, cagwUserGrpEthGrePacketsReceived, cagwUserGrpEthGreBytesReceived Following objects were made obsolete cagwPathTable. Following object were added to cagwPathStatistics cagwPathRev1Table Following object were added to cagwStatistics cagwArpStatistics.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoAgwMIB.setLastUpdated('200905260000Z')
if mibBuilder.loadTexts: ciscoAgwMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAgwMIB.setContactInfo('Cisco Systems Customer Service Postal:170 W. Tasman Drive San Jose, CA 95134 USA Tel:+1 800 553-NETS E-mail:cs-asngw@cisco.com')
if mibBuilder.loadTexts: ciscoAgwMIB.setDescription("This module manages Cisco's WiMAX ASN Gateway (ASN-GW). A WiMAX network supports wireless data communication through WiMAX radio (802.16) technology. The high level architecture of a first generation WiMAX network with the respective protocols for each interface is shown below: +--------------------------------------------------------+ | R2 | +------+ +------+ +--------+ | | | R1 | | R6 | | | | MS |--------| BS |---------| ASN-GW | | | | | | | |---+ | +------+ +------+ +--------+ | | | | | R3 |-----| R8 | R4 | |----------| CSN | | | | |-----| +------+ +------+ +--------+ | | | | R1 | | R6 | |---+ | | MS |--------| BS |---------| ASN-GW | | | | | | | | | +------+ +------+ +--------+ R2 | | | +--------------------------------------------------------+ The diagram below depicts the relation of the subscriber to the session and flows: +--------+ -Flow (connected via data path) | ASN-GW | - Subscriber -Session -Flow (connected via data path) +--------+ | -Flow (connected via data path) | -Flow (connected via data path) | +--- (connected via signaling path) A subscriber initiates a call from a MS. A session is created between the BS and the ASN-GW for that call. Multiple flows can be created for the session with different QOS parameters. For example one flow can created for a voice stream and another for data. Data paths are created between the BS and ASN-GW to forward the data packets of the created flows. When the first subscriber from any MS connected to a BS initiates a call via the BS to the ASN-GW, a signaling path is created between the BS and the ASN-GW. There is only one signaling path between each BS and ASN-GW. Signaling paths and base stations can be used interchangeably. The signaling and data paths remains active as long as there are subscribers connected to the ASN-GW from any MS connected to the BS. If a path has no session/flow connected, it will be purged after a certain period of time. This situation can occur when all subscribers on a certain path are disconnected. A subscriber disconnecting from a certain path does not indicate that the subscriber has left the network, it could simply be handing off to a different path. The IP addresses of the signaling and data paths can be the same or different both in the BS side and in the ASN-GW side. +--------+ +--------+ | Base | | ASN-GW | | Station| | | | | SigPath | | | IP(B1)|<............>|IP(A1) | | | | | | | | | | | DataPath 1 | | | IP(B2)|<............>|IP(A2) | | | | | | | DataPath 2 | | | IP(B3)|<............>|IP(A3) | +--------+ +--------+ Relationships: Base Station 1 to many Mobile Stations ASN-GW 1 to many Base Stations Subscriber 1 to 1 Sessions Session 1 to many Flows Datapath 1 to many Flows Signaling Path 1 to 1 Base Station Acronyms and terms: AAA AAA refers to a framework that specifies the protocols procedures for authentications, authorizatitin and accounting associated with the user, MS and subscribed serviced. AGW ASN-GW ASN ASN (Access Service network) is defined as a complete set of network functions needed to provide radio access to a WiMAX subscriber. ASN-GW ASN-Gateway is a logical entity that represents an aggregation of Control Plane functional entities that are either paired with a corresponding function in the ASN (for e.g BS instance) a resident function is the CSN or another functions in the ASN. For every MS, a BS is associated with exactly one default ASN-GW. However, ASN-GW functions for every MS may be distributes amongst multiple ASN-GWs located in one or more ASNs. The ASN-GW utilizes Session Redudancy to ensure a backup ASN-GW is available in case the primary ASN-GW goes down. BS Base Station is a logical entity that represents an aggregation of Control Plane functional entities that are either paired with a corresponding function in the ASN (e.g. BS instance), a resident function in the CSN or a function in another ASN. The ASN-GW may also perform Bearer Plane routing or bridging function. BSID The Base Station Identifier is a global unique identifier for a WiMAX base station. CPE Customer Premise Equipment. CSN CSN (Connectivity Service Network) is defined as a set of network functions that provide IP connectivity services to the WiMAX subscribers. Data Path Corresponding to each subscriber, data paths are created to foward packets between the ASN-GW and the subscribers. DPID Data Path ID is used to identify the tunnel carrying MS traffic between ASN gateways or between the ASN gateway and base station. As of 8/28/07, only the GRE key is to be used as the DPID. Flow A service flow is a unidirectional logical flow between the network and the Subscriber Station. A service flow is created to handle a different QoS over the connection oriented MAC. A subscriber can have multiple service flows associated and each service flow is associcated with an uplink and downlink classifier. GRE Generic Routing Encapsulation. Refer to RFC 1701 for more details. LB Load Balancing Messages Messages are packets exchanged on the signaling paths. MS The Mobile Station is a generalized mobile equipment set providing connectivity between subscriber equipment and a base station (BS) The Mobile Station may be a host or a CPE type of device that can support multiple hosts. MSID The Mobile Station Identifier is the 802.16 identifier used for all subscriber stations, and is used in all the messages over R6. The identifier associates all requests from a mobile to the ASN-GW. Packets Packets are datagrams fowarded over the data paths. R1 Communication protocol between mobile and BS as per the air interface (PHY and MAC) specifications (IEEE P802.16d/e). R1 may include additional protocols related to the management plane. R2 The interface between the MS and CSN associated with Authentication, Services Authorization, IP Host Configuration management, and mobility management. This is a logical interface thus does not reflect a direct protocol interface between MS and CSN. R3 The interface between the ASN and the CSN to support AAA, policy enforcement and mobility management capabilities. It also encompasses the bearer plane methods (e.g., tunneling) to transfer IP data between the ASN and the CSN. R4 Communication protocol between ASN-GWs. R4 consists of a set of control and bearer plane protocols originating/terminating in various entities within the ASN that coordinate MS mobility between ASNs. In Release 1, R4 is the only interoperable interface between heterogeneous or dissimilar ASNs. R5 Consists of a set of control plane and bearer plane protocols for internetworking between CSNs operated by either the home or visited NSP. R6 Communication protocol between ASN-GW and BS R6 consists of a set of control and bearer plane protocols for communication between the BS and the ASN GW. The bearer plane consists of intra-ASN data path or inter-ASN tunnels between the BS and ASN-GW. The control plane includes protocols for IP tunnel management (establish, modify, and release) in accordance with the MS mobility events. R6 may also serve as a conduit for exchange of MAC states information between neighboring BSs. R8 Communication protocol between base stations. R8 consists of a set of control plane message flows and, in some situations, bearer plane data flows between the base stations to ensure fast and seamless handover. Bearer plane consists of protocols that allow the data transfer between Base Stations involved in handover of a certain MS. Control plane consists of the inter-BS communication protocol defined in IEEE 802.16 and additional set of protocols that allow controlling the data transfer between the Base Stations involved in handover of a certain MS. Session Session is a connection between one or more MS and a network element in order to exchange link-level frames or packets. SFID The service flow is identified using a SFID (Service Flow Identifier). Signaling Path A signaling path exists between the BS and ASN-GW, and is used for all signaling such as creating, dleteing, authenticating, as we as additional functions related to the subscriber. SR Session Redundancy Subscriber The 802.16 subscriber entity connects over the 802.16 airlink, and eventually results in the creation of the subscriber object at the ASN-GW. UHO Unpredicitive Handoff PMIP Proxy Mobile Internet Protocol HA Home Agent REFERENCE [1] WIMAX Forum Network Architecture, (Stage 3: Detailed Protocols and Procedures) Release 1.1.1 September 14, 2007.")
ciscoAgwMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 0))
ciscoAgwMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1))
ciscoAgwMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 2))
cagwInstances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 1))
cagwState = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2))
cagwStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3))
cagwNotifMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4))
cagwNotifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 5))
cagwGlobalStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1))
cagwDhcpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2))
cagwMessageStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 3))
cagwUserGrpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4))
cagwPathStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5))
cagwArpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 6))
cagwInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 1, 1), )
if mibBuilder.loadTexts: cagwInstanceTable.setStatus('current')
if mibBuilder.loadTexts: cagwInstanceTable.setDescription('The ASN-GW Instance Table contains an entry for each physical ASN Gateway.')
cagwInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ASN-GATEWAY-MIB", "cagwInstanceIndex"))
if mibBuilder.loadTexts: cagwInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: cagwInstanceEntry.setDescription('ASN-GW Instance entry.')
cagwInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cagwInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: cagwInstanceIndex.setDescription('An index that uniquely represents each ASN Gateway per device. This index is assigned arbitrarily by the engine and is not saved over reboots.')
cagwInstancePhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 1, 1, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwInstancePhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cagwInstancePhysicalIndex.setDescription('The entPhysicalIndex of the physical entity for which the ASN Gateway measurements in this entry are maintained. The exact type of this entity is described by its entPhysicalVendorType value.')
cagwInstanceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwInstanceDescription.setStatus('current')
if mibBuilder.loadTexts: cagwInstanceDescription.setDescription('Description of the physical instance of the ASN-GW.')
cagwInstanceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwInstanceVersion.setStatus('current')
if mibBuilder.loadTexts: cagwInstanceVersion.setDescription('The ASN-GW Software Version is currently: 1.0 Cisco ASN GW 1.0 has the following main features: - Fully support Cisco R6 Specification - DHCP support - EAP authentication support - Multiple hosts behind a MS - Uncontrolled/Controlled Handoff.')
cagwInstanceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwInstanceOperState.setStatus('current')
if mibBuilder.loadTexts: cagwInstanceOperState.setDescription('The current operational state of the ASN-GW.')
cagwInstanceSessionRedundancyAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwInstanceSessionRedundancyAdmin.setStatus('current')
if mibBuilder.loadTexts: cagwInstanceSessionRedundancyAdmin.setDescription('Session Redundancy Enabled / Disabled. More information about redundancy can be obtained via the CISCO-RF-MIB.')
cagwStateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1), )
if mibBuilder.loadTexts: cagwStateTable.setStatus('current')
if mibBuilder.loadTexts: cagwStateTable.setDescription('The State Table contains Statistics about the current state of the ASN-GW.')
cagwStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ASN-GATEWAY-MIB", "cagwInstanceIndex"))
if mibBuilder.loadTexts: cagwStateEntry.setStatus('current')
if mibBuilder.loadTexts: cagwStateEntry.setDescription('ASN-GW statistics entry.')
cagwMaximumBaseStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 1), Integer32()).setUnits('base stations').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwMaximumBaseStations.setStatus('current')
if mibBuilder.loadTexts: cagwMaximumBaseStations.setDescription('The maximum number of base stations that can be concurrently supported by this ASN-GW.')
cagwMaximumSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 2), Integer32()).setUnits('subscribers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwMaximumSubscribers.setStatus('current')
if mibBuilder.loadTexts: cagwMaximumSubscribers.setDescription('The maximum number of subscribers that can be concurrently supported by this ASN-GW.')
cagwMaximumFlowsPerSession = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 3), Integer32()).setUnits('flows').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwMaximumFlowsPerSession.setStatus('current')
if mibBuilder.loadTexts: cagwMaximumFlowsPerSession.setDescription('The maximum number of flows allowed per session.')
cagwCurrentBaseStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 4), Gauge32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentBaseStations.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentBaseStations.setDescription('The current number of signaling paths to all Base Stations. There is one signaling path created between the ASN-GW and each base station, so the current number of signaling paths is equal to the number of base stations currently connected to the ASN-GW. Signaling paths and base stations are used interchangeably throughout this document.')
cagwCurrentDataPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 5), Gauge32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentDataPaths.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentDataPaths.setDescription('The current number of data paths to all Base Stations.')
cagwCurrentSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 6), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentSubscribers.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentSubscribers.setDescription('The number of subscribers currently connected to this ASN-GW.')
cagwCurrentSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 7), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentSessions.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentSessions.setDescription('The number of sessions currently active on this ASN-GW.')
cagwCurrentFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 8), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentFlows.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentFlows.setDescription('The current number of flows for all sessions active on this ASN-GW.')
cagwCurrentHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 9), Gauge32()).setUnits('hosts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentHosts.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentHosts.setDescription('The current number of hosts connected to this ASN-GW.')
cagwNetworkBehindMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 10), Gauge32()).setUnits('mobile stations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwNetworkBehindMs.setStatus('current')
if mibBuilder.loadTexts: cagwNetworkBehindMs.setDescription('The number of mobile stations that may have a network behind them.')
cagwPendingSignalingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 11), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPendingSignalingPkts.setStatus('current')
if mibBuilder.loadTexts: cagwPendingSignalingPkts.setDescription('The number of signaling packets currently pending on this ASN-GW.')
cagwCurrentFramedRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 12), Gauge32()).setUnits('routes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentFramedRoutes.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentFramedRoutes.setDescription('The number of unique framed routes downloaded from AAA and inserted into the IP routing table on gateway at this instance. Insertion of framed route is enabled with the help of configuration CLI under user group on gateway.')
cagwCurrentFramedRouteSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 13), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentFramedRouteSubs.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentFramedRouteSubs.setDescription('The number of subscribers using framed routes that have been inserted in IP routing table on gateway.')
cagwCurrentAutoProvSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 14), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentAutoProvSessions.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentAutoProvSessions.setDescription('The number of auto-provisioned sessions on gateway. Auto-provisioning is disabled by default and can be enabled by using a configuration CLI under user group on gateway.')
cagwCurrentSessionsWithIpPktsRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 15), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentSessionsWithIpPktsRedir.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentSessionsWithIpPktsRedir.setDescription('The number of sessions with all uplink IP packets redirected by gateway.')
cagwCurrentPmipEnabledSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 2, 1, 1, 16), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCurrentPmipEnabledSubs.setStatus('current')
if mibBuilder.loadTexts: cagwCurrentPmipEnabledSubs.setDescription('The number of PMIP enabled subscribers currently connected to this ASN-GW.')
cagwGlobalStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1), )
if mibBuilder.loadTexts: cagwGlobalStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cagwGlobalStatisticsTable.setDescription('The Global Statistics Table contains measurement for a particular ASN-Gateway.')
cagwGlobalStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1), ).setIndexNames((0, "CISCO-ASN-GATEWAY-MIB", "cagwInstanceIndex"))
if mibBuilder.loadTexts: cagwGlobalStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cagwGlobalStatisticsEntry.setDescription('ASN-GW global statistics entry.')
cagwCreatedSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 1), Counter32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCreatedSubscribers.setStatus('current')
if mibBuilder.loadTexts: cagwCreatedSubscribers.setDescription('The total number of subscribers created on this ASN-GW which include active and past subscribers.')
cagwDeletedSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 2), Counter32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDeletedSubscribers.setStatus('current')
if mibBuilder.loadTexts: cagwDeletedSubscribers.setDescription('The total number of subscribers deleted on this ASN-GW.')
cagwCreatedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 3), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCreatedSessions.setStatus('current')
if mibBuilder.loadTexts: cagwCreatedSessions.setDescription('The total number of sessions created on this ASN-GW which include active and past sessions.')
cagwDeletedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 4), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDeletedSessions.setStatus('current')
if mibBuilder.loadTexts: cagwDeletedSessions.setDescription('The total number of sessions deleted on this ASN-GW.')
cagwCreatedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 5), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCreatedFlows.setStatus('current')
if mibBuilder.loadTexts: cagwCreatedFlows.setDescription('The total number of flows created on this ASN-GW which include active and past flows.')
cagwDeletedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 6), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDeletedFlows.setStatus('current')
if mibBuilder.loadTexts: cagwDeletedFlows.setDescription('The total number of flows deleted on this ASN-GW.')
cagwCreatedHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 7), Counter32()).setUnits('hosts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCreatedHosts.setStatus('current')
if mibBuilder.loadTexts: cagwCreatedHosts.setDescription('The total number of hosts created on this ASN-GW which include active and past hosts.')
cagwDeletedHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 8), Counter32()).setUnits('hosts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDeletedHosts.setStatus('current')
if mibBuilder.loadTexts: cagwDeletedHosts.setDescription('The total number of hosts deleted on this ASN-GW.')
cagwCreatedBaseStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 9), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCreatedBaseStations.setStatus('current')
if mibBuilder.loadTexts: cagwCreatedBaseStations.setDescription('The total number of signaling paths created on this ASN-GW which include active and past signaling paths.')
cagwDeletedBaseStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 10), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDeletedBaseStations.setStatus('current')
if mibBuilder.loadTexts: cagwDeletedBaseStations.setDescription('The total number of signaling paths deleted on this ASN-GW.')
cagwCreatedDataPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 11), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCreatedDataPaths.setStatus('current')
if mibBuilder.loadTexts: cagwCreatedDataPaths.setDescription('The total number of data paths created on this ASN-GW which include active and past data paths.')
cagwDeletedDataPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 12), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDeletedDataPaths.setStatus('current')
if mibBuilder.loadTexts: cagwDeletedDataPaths.setDescription('The total number of data paths deleted on this ASN-GW.')
cagwProcessedSignalingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwProcessedSignalingPkts.setStatus('current')
if mibBuilder.loadTexts: cagwProcessedSignalingPkts.setDescription('The total number of signaling packets processed by this ASN-GW.')
cagwRequeuedSignalingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwRequeuedSignalingPkts.setStatus('current')
if mibBuilder.loadTexts: cagwRequeuedSignalingPkts.setDescription('The total number of signaling packets that were requeued on this ASN-GW.')
cagwCongestionSignalingPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCongestionSignalingPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwCongestionSignalingPktsDrops.setDescription('The number of signaling packets dropped when too many signaling packets are queued. The current queu limit is 1000 packets.')
cagwServiceDisabledSignalingPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwServiceDisabledSignalingPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwServiceDisabledSignalingPktsDrops.setDescription('The number of signaling packets dropped due to service disabled.')
cagwServiceNotReadySignalingPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwServiceNotReadySignalingPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwServiceNotReadySignalingPktsDrops.setDescription('The number of signaling packets dropped while in non-Active state for redundant configuration.')
cagwEncapErrorSignalingPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwEncapErrorSignalingPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwEncapErrorSignalingPktsDrops.setDescription('The number of signaling packets dropped due to encapsulation errors.')
cagwDisposedSignalingPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDisposedSignalingPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwDisposedSignalingPktsDrops.setDescription('The number of signaling packets disposed by the ASN-GW.')
cagwEncapErrorDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 41), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwEncapErrorDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwEncapErrorDataPktsDrops.setDescription('The number of data packets dropped due to encapsulation errors.')
cagwInvalidAddressDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 42), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwInvalidAddressDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwInvalidAddressDataPktsDrops.setDescription('The number of data packets dropped due to IP address not ours.')
cagwServiceDisabledDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 43), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwServiceDisabledDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwServiceDisabledDataPktsDrops.setDescription('The number of data packets dropped due to service disabled.')
cagwInvalidProtocolTypeDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 44), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwInvalidProtocolTypeDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwInvalidProtocolTypeDataPktsDrops.setDescription('The number of data packets dropped due to invalid protocol type.')
cagwLengthErrorDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 45), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwLengthErrorDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwLengthErrorDataPktsDrops.setDescription('The number of data packets dropped due to IP packet length error.')
cagwAbsentKeyDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 46), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwAbsentKeyDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwAbsentKeyDataPktsDrops.setDescription('The number of data packets dropped due to GRE key error.')
cagwFlowNotFoundDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 47), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFlowNotFoundDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwFlowNotFoundDataPktsDrops.setDescription('The number of data packets dropped due to flow not found error.')
cagwFlowPathNotFoundDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 48), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFlowPathNotFoundDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwFlowPathNotFoundDataPktsDrops.setDescription('The number of data packets dropped due to flow path not found.')
cagwFlowPathInvalidSourceDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 49), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFlowPathInvalidSourceDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwFlowPathInvalidSourceDataPktsDrops.setDescription('The number of data packets dropped due to invalid source path address in the GRE header.')
cagwSessionNotFoundDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 50), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSessionNotFoundDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwSessionNotFoundDataPktsDrops.setDescription('The number of data packets dropped due to session not found for the GRE key.')
cagwSubscriberNotFoundDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 51), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSubscriberNotFoundDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwSubscriberNotFoundDataPktsDrops.setDescription('The number of data packets dropped due to subscriber not found for the GRE key.')
cagwChecksumErrorDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 52), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwChecksumErrorDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwChecksumErrorDataPktsDrops.setDescription('The number of data packets dropped due to checksum error.')
cagwIngressFilteringDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 53), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIngressFilteringDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwIngressFilteringDataPktsDrops.setDescription('The number of data packets dropped due to subscriber invalid source IP address.')
cagwSequenceNumberErrorDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 54), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSequenceNumberErrorDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwSequenceNumberErrorDataPktsDrops.setDescription('The number of data packets dropped due to sequence number error.')
cagwFragmentedDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 55), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFragmentedDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwFragmentedDataPktsDrops.setDescription('The number of data packets dropped due to fragmented packet.')
cagwFramedRouteInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 56), Counter32()).setUnits('routes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFramedRouteInserted.setStatus('obsolete')
if mibBuilder.loadTexts: cagwFramedRouteInserted.setDescription('The number of framed routes that were inserted.')
cagwFramedRouteInsertFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 57), Counter32()).setUnits('routes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFramedRouteInsertFailed.setStatus('obsolete')
if mibBuilder.loadTexts: cagwFramedRouteInsertFailed.setDescription('The number of framed routes that failed to be inserted.')
cagwFramedRouteDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 58), Counter32()).setUnits('routes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFramedRouteDeleted.setStatus('obsolete')
if mibBuilder.loadTexts: cagwFramedRouteDeleted.setDescription('The number of framed routes that were deleted.')
cagwServiceFlowProfileNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 59), Counter32()).setUnits('service flow profiles').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwServiceFlowProfileNotFound.setStatus('current')
if mibBuilder.loadTexts: cagwServiceFlowProfileNotFound.setDescription('The number of service flow creation errors due to service flow profile not configured.')
cagwQosProfileNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 60), Counter32()).setUnits('qos profiles').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwQosProfileNotFound.setStatus('current')
if mibBuilder.loadTexts: cagwQosProfileNotFound.setDescription('The number of service flow creation errors due to service flow QoS profile not configured.')
cagwClassifierProfileNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 61), Counter32()).setUnits('classifier profiles').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwClassifierProfileNotFound.setStatus('current')
if mibBuilder.loadTexts: cagwClassifierProfileNotFound.setDescription('The number of service flow creation errors due to service flow packet classifier profile not configured.')
cagwReceivedDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 62), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwReceivedDataPkts.setStatus('deprecated')
if mibBuilder.loadTexts: cagwReceivedDataPkts.setDescription('The number of data packets received by the ASN-GW.')
cagwReceivedDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 63), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwReceivedDataBytes.setStatus('deprecated')
if mibBuilder.loadTexts: cagwReceivedDataBytes.setDescription('The number of data bytes received by the ASN-GW.')
cagwSentDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 64), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSentDataPkts.setStatus('deprecated')
if mibBuilder.loadTexts: cagwSentDataPkts.setDescription('The number of data packets sent by the ASN-GW.')
cagwSentDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 65), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSentDataBytes.setStatus('deprecated')
if mibBuilder.loadTexts: cagwSentDataBytes.setDescription('The number of data bytes sent by the ASN-GW.')
cagwRejectedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 66), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwRejectedSessions.setStatus('current')
if mibBuilder.loadTexts: cagwRejectedSessions.setDescription('The number of sessions that were rejected due to exceeding the maximum number of allowed subscribers. See object cagwMaximumSubscribers.')
cagwRejectedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 67), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwRejectedFlows.setStatus('current')
if mibBuilder.loadTexts: cagwRejectedFlows.setDescription('The number of flows that were rejected due to exceeding the maximum number of flows allowed per session. See object cagwMaximumFlowsPerSession.')
cagwRejectedBaseStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 68), Counter32()).setUnits('paths').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwRejectedBaseStations.setStatus('current')
if mibBuilder.loadTexts: cagwRejectedBaseStations.setDescription('The number of paths that were rejected due to exceeding the maximum number of base stations allowed to connect to this ASN-GW. See object cagwMaximumBaseStations.')
cagwSessionsDeletedByAgw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 69), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSessionsDeletedByAgw.setStatus('current')
if mibBuilder.loadTexts: cagwSessionsDeletedByAgw.setDescription('Number of sessions deleted by the ASN-GW.')
cagwIpGreReceivedDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 70), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIpGreReceivedDataPkts.setStatus('current')
if mibBuilder.loadTexts: cagwIpGreReceivedDataPkts.setDescription('The number of data packets received by the ASN-GW on IP convergence sublayer.')
cagwIpGreReceivedDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 71), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIpGreReceivedDataBytes.setStatus('current')
if mibBuilder.loadTexts: cagwIpGreReceivedDataBytes.setDescription('The number of data bytes received by the ASN-GW on IP convergence sublayer.')
cagwIpGreSentDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 72), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIpGreSentDataPkts.setStatus('current')
if mibBuilder.loadTexts: cagwIpGreSentDataPkts.setDescription('The number of data packets sent by the ASN-GW on IP convergence sublayer.')
cagwIpGreSentDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 73), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIpGreSentDataBytes.setStatus('current')
if mibBuilder.loadTexts: cagwIpGreSentDataBytes.setDescription('The number of data bytes sent by the ASN-GW on IP convergence sublayer.')
cagwEthGreReceivedDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 74), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwEthGreReceivedDataPkts.setStatus('current')
if mibBuilder.loadTexts: cagwEthGreReceivedDataPkts.setDescription('The number of data packets received by the ASN-GW on ethernet convergence sublayer.')
cagwEthGreReceivedDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 75), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwEthGreReceivedDataBytes.setStatus('current')
if mibBuilder.loadTexts: cagwEthGreReceivedDataBytes.setDescription('The number of data bytes received by the ASN-GW on ethernet convergence sublayer.')
cagwEthGreSentDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 76), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwEthGreSentDataPkts.setStatus('current')
if mibBuilder.loadTexts: cagwEthGreSentDataPkts.setDescription('The number of data packets sent by the ASN-GW on ethernet convergence sublayer.')
cagwEthGreSentDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 77), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwEthGreSentDataBytes.setStatus('current')
if mibBuilder.loadTexts: cagwEthGreSentDataBytes.setDescription('The number of data bytes sent by the ASN-GW on ethernet convergence sublayer.')
cagwRejectedHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 78), Counter32()).setUnits('hosts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwRejectedHosts.setStatus('current')
if mibBuilder.loadTexts: cagwRejectedHosts.setDescription('The number of hosts open requests rejected.')
cagwAgedOutStaticHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 79), Counter32()).setUnits('hosts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwAgedOutStaticHosts.setStatus('current')
if mibBuilder.loadTexts: cagwAgedOutStaticHosts.setDescription('The number of idle static hosts aged out.')
cagwSuccessfulHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 80), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSuccessfulHandoff.setStatus('current')
if mibBuilder.loadTexts: cagwSuccessfulHandoff.setDescription('The number of successful session handoffs between Base Stations.')
cagwFailedHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 81), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFailedHandoff.setStatus('current')
if mibBuilder.loadTexts: cagwFailedHandoff.setDescription('The number of failed session handoffs between base stations.')
cagwSuccessfulCMACKeyUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 82), Counter32()).setUnits('CMACKeyUpdates').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSuccessfulCMACKeyUpdate.setStatus('current')
if mibBuilder.loadTexts: cagwSuccessfulCMACKeyUpdate.setDescription('The number of successful CMAC Key count updates related to handoff between base stations.')
cagwFailedCMACKeyUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 83), Counter32()).setUnits('CMACKeyUpdates').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFailedCMACKeyUpdate.setStatus('current')
if mibBuilder.loadTexts: cagwFailedCMACKeyUpdate.setDescription('The number of failed CMAC Key count updates related to handoff between base stations.')
cagwSuccessfulSecurityKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 84), Counter32()).setUnits('SecurityKeyExchange').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSuccessfulSecurityKeyExchange.setStatus('current')
if mibBuilder.loadTexts: cagwSuccessfulSecurityKeyExchange.setDescription('The number of successful Security Key exchange related to handoff between base stations.')
cagwFailedSecurityKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 85), Counter32()).setUnits('SecurityKeyExchange').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwFailedSecurityKeyExchange.setStatus('current')
if mibBuilder.loadTexts: cagwFailedSecurityKeyExchange.setDescription('The number of failed Security Key exchange related to handoff between base stations.')
cagwIpGreReceivedRedirectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 86), Counter64()).setUnits('IpDataPktsRedirected').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIpGreReceivedRedirectedPkts.setStatus('current')
if mibBuilder.loadTexts: cagwIpGreReceivedRedirectedPkts.setDescription('The number of data packets redirected on IP convergence sublayer')
cagwIpGreReceivedRedirectedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 87), Counter64()).setUnits('IpDataBytesRedirected').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIpGreReceivedRedirectedBytes.setStatus('current')
if mibBuilder.loadTexts: cagwIpGreReceivedRedirectedBytes.setDescription('The number of IP data Bytes redirected on IP convergence sublayer')
cagwEthGreReceivedRedirectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 88), Counter64()).setUnits('EthDataPktsRedirected').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwEthGreReceivedRedirectedPkts.setStatus('current')
if mibBuilder.loadTexts: cagwEthGreReceivedRedirectedPkts.setDescription('The number of data packets redirected on Ethernet convergence sublayer')
cagwEthGreReceivedRedirectedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 89), Counter64()).setUnits('EthDataBytesRedirected').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwEthGreReceivedRedirectedBytes.setStatus('current')
if mibBuilder.loadTexts: cagwEthGreReceivedRedirectedBytes.setDescription('The number of data Bytes redirected on Ethernet convergence sublayer')
cagwThrottlingOfPuntsDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 90), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwThrottlingOfPuntsDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwThrottlingOfPuntsDataPktsDrops.setDescription('The number of data packets dropped due to throttling of punts from cef path to process path')
cagwLearningUpstreamDataPktsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 91), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwLearningUpstreamDataPktsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwLearningUpstreamDataPktsDrops.setDescription('The number of data packets dropped due to gateway learning about static hosts from upstream data packets')
cagwPuntedDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 92), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPuntedDataPkts.setStatus('current')
if mibBuilder.loadTexts: cagwPuntedDataPkts.setDescription('The number of data packets punted from cef path to process path')
cagwRejectedSessionUnapprovedBs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 93), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwRejectedSessionUnapprovedBs.setStatus('current')
if mibBuilder.loadTexts: cagwRejectedSessionUnapprovedBs.setDescription('The number of session creation and/or session handoffs rejected because the requesting base station is not approved for it. List of approved base sations can be provisioned on AAA.')
cagwPktsDroppedStaticIpHostNotAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 94), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPktsDroppedStaticIpHostNotAllowed.setStatus('current')
if mibBuilder.loadTexts: cagwPktsDroppedStaticIpHostNotAllowed.setDescription('The number of packets for e.g. upstream ARP, upstream data packets, dropped due to failure in creation of Static IP Host. Static IP address not authorized by the AAA server.')
cagwPktsDroppedMulticastBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 95), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPktsDroppedMulticastBroadcast.setStatus('current')
if mibBuilder.loadTexts: cagwPktsDroppedMulticastBroadcast.setDescription('The number of L2 multicast and broadcast data packets other than ARP and DHCP dropped by gateway.')
cagwSlaProfileNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 96), Counter32()).setUnits('SLA profile').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwSlaProfileNotFound.setStatus('current')
if mibBuilder.loadTexts: cagwSlaProfileNotFound.setDescription('The number of session creation failures due to configuration error in SLA (Service Level Agreement) profile on gateway.')
cagwPktsDroppedMipIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 97), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPktsDroppedMipIncomplete.setStatus('current')
if mibBuilder.loadTexts: cagwPktsDroppedMipIncomplete.setDescription('The number of packets from PMIP capable subscribers for e.g. upstream ARP, upstream data packets, upstream DHCP dropped by gateway because they are received during MIP registration.')
cagwCreatedPmipEnabledSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 98), Counter32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCreatedPmipEnabledSubs.setStatus('current')
if mibBuilder.loadTexts: cagwCreatedPmipEnabledSubs.setDescription('The total number of PMIP enabled subscribers created on this ASN-GW.')
cagwDeletedPmipEnabledSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 99), Counter32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDeletedPmipEnabledSubs.setStatus('current')
if mibBuilder.loadTexts: cagwDeletedPmipEnabledSubs.setDescription('The total number of PMIP enabled subscribers deleted on this ASN-GW.')
cagwPktsDropPmipStaticIpHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 100), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPktsDropPmipStaticIpHost.setStatus('current')
if mibBuilder.loadTexts: cagwPktsDropPmipStaticIpHost.setDescription('The number of packets for e.g. upstream ARP, upstream data packets, dropped due to failure in creation of Static IP PMIP Host. Static IP address not authorized by the HA.')
cagwIdleModeEntryMsBsInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 101), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeEntryMsBsInitiated.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeEntryMsBsInitiated.setDescription('The number of MS or BS initated idlemode entry.')
cagwIdleModeEntryBwgInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 102), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeEntryBwgInitiated.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeEntryBwgInitiated.setDescription('The number of ASN-GW initated idlemode entry.')
cagwIdleModeEntryFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 103), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeEntryFailures.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeEntryFailures.setDescription('The number of idlemode entry failures.')
cagwIdleModeExitMsBsInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 104), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeExitMsBsInitiated.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeExitMsBsInitiated.setDescription('The number of MS or BS initiated idlemode exit.')
cagwIdleModeExitBwgInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 105), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeExitBwgInitiated.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeExitBwgInitiated.setDescription('The number of ASN-GW initiated idlemode exit.')
cagwIdleModeExitFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 106), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeExitFailures.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeExitFailures.setDescription('The number of idlemode exit failures.')
cagwIdleModeLocUpdtPgidChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 107), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeLocUpdtPgidChange.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeLocUpdtPgidChange.setDescription('The number of idlemode location update messages received by gateway because of paging group ID change.')
cagwIdleModeLocUpdtPowerDown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 108), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeLocUpdtPowerDown.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeLocUpdtPowerDown.setDescription('The number of idlemode location update messages received by gateway because of MS power down.')
cagwIdleModeLocUpdtPeriodic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 109), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeLocUpdtPeriodic.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeLocUpdtPeriodic.setDescription('The number of idlemode periodic location update messages received by gateway.')
cagwIdleModeLocUpdtFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 110), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeLocUpdtFailures.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeLocUpdtFailures.setDescription('The number of idlemode location update failures.')
cagwIdleModePageAttemptsDwnlnkData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 111), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModePageAttemptsDwnlnkData.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModePageAttemptsDwnlnkData.setDescription('The number of idlemode paging attempts for downlink data.')
cagwIdleModePageFailuresDwnlnkData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 112), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModePageFailuresDwnlnkData.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModePageFailuresDwnlnkData.setDescription('The number of idlemode paging failures for downlink data.')
cagwIdleModePageAttemptsLocUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 113), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModePageAttemptsLocUpdt.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModePageAttemptsLocUpdt.setDescription('The number of idlemode paging attempts for location update.')
cagwIdleModePageFailuresLocUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 114), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModePageFailuresLocUpdt.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModePageFailuresLocUpdt.setDescription('The number of idlemode paging failures for location update.')
cagwIdleModeDirectedPagingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeDirectedPagingSuccess.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeDirectedPagingSuccess.setDescription('The number of idlemode directed paging success.')
cagwIdleModeDirectedPagingRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeDirectedPagingRetries.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeDirectedPagingRetries.setDescription('The number of idlemode directed paging retries.')
cagwIdleModeFloodPagingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeFloodPagingSuccess.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeFloodPagingSuccess.setDescription('The number of idlemode flood paging success.')
cagwIdleModeFloodPagingRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIdleModeFloodPagingRetries.setStatus('current')
if mibBuilder.loadTexts: cagwIdleModeFloodPagingRetries.setDescription('The number of idlemode flood paging retries.')
cagwPodRequestsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 119), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPodRequestsRecv.setStatus('current')
if mibBuilder.loadTexts: cagwPodRequestsRecv.setDescription('The number of Packet of Disconnect (POD) requests received by gateway')
cagwPodSuccessNotifsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 120), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPodSuccessNotifsSent.setStatus('current')
if mibBuilder.loadTexts: cagwPodSuccessNotifsSent.setDescription('The number of Packet of Disconnect (POD) success notifications sent by gateway.')
cagwPodFailureNotifsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 121), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPodFailureNotifsSent.setStatus('current')
if mibBuilder.loadTexts: cagwPodFailureNotifsSent.setDescription('The number of Packet of Disconnect (POD) failure notifications sent by gateway.')
cagwCoaReqRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 122), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCoaReqRecv.setStatus('current')
if mibBuilder.loadTexts: cagwCoaReqRecv.setDescription('The number of Change of Authorization (COA) requests received by gateway.')
cagwCoaSuccessNotifsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 123), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCoaSuccessNotifsSent.setStatus('current')
if mibBuilder.loadTexts: cagwCoaSuccessNotifsSent.setDescription('The number of Change of Authorization (COA) success notifications sent by gateway.')
cagwCoaFailureNotifsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 124), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwCoaFailureNotifsSent.setStatus('current')
if mibBuilder.loadTexts: cagwCoaFailureNotifsSent.setDescription('The number of Change of Authorization (COA) failure notifications sent by gateway.')
cagwHotlineUplinkPktDropAclDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 125), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwHotlineUplinkPktDropAclDeny.setStatus('current')
if mibBuilder.loadTexts: cagwHotlineUplinkPktDropAclDeny.setDescription('The number of uplink packets dropped due to hotlining ACL deny.')
cagwHotlineDownlinkPktDropAclDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 126), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwHotlineDownlinkPktDropAclDeny.setStatus('current')
if mibBuilder.loadTexts: cagwHotlineDownlinkPktDropAclDeny.setDescription('The number of downlink packets dropped due to hotlining ACL deny.')
cagwUplinkPktDropUsrgrpAclDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 127), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUplinkPktDropUsrgrpAclDeny.setStatus('current')
if mibBuilder.loadTexts: cagwUplinkPktDropUsrgrpAclDeny.setDescription('The number of uplink packets dropped due to user-group ACL deny.')
cagwDownlinkPktDropUsrgrpAclDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 128), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDownlinkPktDropUsrgrpAclDeny.setStatus('current')
if mibBuilder.loadTexts: cagwDownlinkPktDropUsrgrpAclDeny.setDescription('The number of downlink packets dropped due to user-group ACL deny.')
cagwDownlinkPktDropPagingAclDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 1, 1, 1, 129), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDownlinkPktDropPagingAclDeny.setStatus('current')
if mibBuilder.loadTexts: cagwDownlinkPktDropPagingAclDeny.setDescription('The number of downlink packets dropped due to paging ACL deny.')
cagwDhcpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1), )
if mibBuilder.loadTexts: cagwDhcpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpStatisticsTable.setDescription('The DHCP Statistics Table contains Statistics about DHCP packets processed by the ASN-GW.')
cagwDhcpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1), ).setIndexNames((0, "CISCO-ASN-GATEWAY-MIB", "cagwInstanceIndex"))
if mibBuilder.loadTexts: cagwDhcpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpStatisticsEntry.setDescription('ASN-GW DHCP statistics entry.')
cagwDhcpDiscoverPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpDiscoverPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpDiscoverPackets.setDescription('The number of DHCP Discover packets transmitted by the DHCP relay in the ASN-GW to the DHCP server.')
cagwDhcpOfferPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpOfferPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpOfferPackets.setDescription('The number of DHCP Offer packets received by the DHCP relay in the ASN-GW from the DHCP server.')
cagwDhcpRequestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpRequestPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpRequestPackets.setDescription('The number of DHCP Request packets transmitted by the DHCP relay in the ASN-GW to the DHCP server.')
cagwDhcpDeclinePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpDeclinePackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpDeclinePackets.setDescription('The number of DHCP Decline packets transmitted by the DHCP relay in the ASN-GW to the DHCP server.')
cagwDhcpAckPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpAckPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpAckPackets.setDescription('The number of DHCP Ack packets received by the DHCP relay in the ASN-GW from the DHCP server.')
cagwDhcpNakPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpNakPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpNakPackets.setDescription('The number of DHCP Nak packets received by the DHCP relay in the ASN-GW from the DHCP server.')
cagwDhcpReleasePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpReleasePackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpReleasePackets.setDescription('The number of DHCP Release packets transmitted by the DHCP relay in the ASN-GW to the DHCP server.')
cagwDhcpInformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpInformPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpInformPackets.setDescription('The number of DHCP Inform packets transmitted by the DHCP relay in the ASN-GW to the DHCP server.')
cagwDhcpLeaseQueryPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpLeaseQueryPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpLeaseQueryPackets.setDescription('The number of DHCP Lease Query packets transmitted by the DHCP relay in the ASN-GW to the DHCP server.')
cagwDhcpUnknownPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpUnknownPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpUnknownPackets.setDescription('The number of DHCP Unknown packets processed by the DHCP relay in the ASN-GW.')
cagwDhcpProxyDiscoverPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyDiscoverPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyDiscoverPackets.setDescription('The number of DHCP Discover packets received by the DHCP proxy server in the ASN-GW from the DHCP client.')
cagwDhcpProxyOfferPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyOfferPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyOfferPackets.setDescription('The number of DHCP Offer packets transmitted by the DHCP proxy server in the ASN-GW to the DHCP client.')
cagwDhcpProxyRequestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyRequestPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyRequestPackets.setDescription('The number of DHCP Request packets received by the DHCP proxy server in the ASN-GW from the DHCP client.')
cagwDhcpProxyDeclinePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyDeclinePackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyDeclinePackets.setDescription('The number of DHCP Decline packets received by the DHCP proxy server in the ASN-GW from the DHCP client.')
cagwDhcpProxyAckPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyAckPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyAckPackets.setDescription('The number of DHCP Ack packets transmitted by the DHCP proxy server in the ASN-GW to the DHCP client.')
cagwDhcpProxyNakPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyNakPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyNakPackets.setDescription('The number of DHCP Nak packets transmitted by the DHCP proxy server in the ASN-GW to the DHCP client.')
cagwDhcpProxyReleasePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyReleasePackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyReleasePackets.setDescription('The number of DHCP Release packets received by the DHCP proxy server in the ASN-GW from the DHCP client.')
cagwDhcpProxyInformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyInformPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyInformPackets.setDescription('The number of DHCP Inform packets received by the DHCP proxy server in the ASN-GW from the DHCP client.')
cagwDhcpProxyLeaseQueryPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyLeaseQueryPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyLeaseQueryPackets.setDescription('The number of DHCP Lease Query packets received by the DHCP proxy server in the ASN-GW from the DHCP client.')
cagwDhcpProxyUnknownPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 2, 1, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwDhcpProxyUnknownPackets.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyUnknownPackets.setDescription('The number of DHCP Unknown packets processed by DHCP proxy server.')
cagwMsgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 3, 1), )
if mibBuilder.loadTexts: cagwMsgTable.setReference('See reference [1] section 5. Message and Parameter Definitions for a detailed description of the R6 messages.')
if mibBuilder.loadTexts: cagwMsgTable.setStatus('current')
if mibBuilder.loadTexts: cagwMsgTable.setDescription('The Message Table contains Statistics about all message types in the R6 protocol.')
cagwMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 3, 1, 1), ).setIndexNames((0, "CISCO-ASN-GATEWAY-MIB", "cagwInstanceIndex"), (0, "CISCO-ASN-GATEWAY-MIB", "cagwMsgType"))
if mibBuilder.loadTexts: cagwMsgEntry.setStatus('current')
if mibBuilder.loadTexts: cagwMsgEntry.setDescription('Message statistics entry.')
cagwMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 11, 12, 21, 22, 23, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 61, 62, 71, 72, 73, 74, 75, 76, 77))).clone(namedValues=NamedValues(("preAttachmentRequest", 1), ("preAttachmentResponse", 2), ("preAttachmentAck", 3), ("authRelayEapStart", 11), ("authRelayEapTransfer", 12), ("keyChangeDirective", 21), ("keyChangeConfirm", 22), ("keyChangeAck", 23), ("attachmentRequest", 31), ("attachmentResponse", 32), ("attachmentAck", 33), ("datapathRegRequest", 41), ("datapathRegResponse", 42), ("datapathRegAck", 43), ("datapathModifyRequest", 44), ("datapathModifyResponse", 45), ("datapathModifyAck", 46), ("datapathDeregRequest", 47), ("datapathDeregResponse", 48), ("datapathDeregAck", 49), ("contextDeliveryRequest", 51), ("contextDeliveryReport", 52), ("contextDeliveryAck", 53), ("keepaliveRequest", 61), ("keepaliveResponse", 62), ("handoffRegRequest", 71), ("handoffRegResponse", 72), ("handoffRegAck", 73), ("handoffDeregRequest", 74), ("handoffDeregResponse", 75), ("handoffDeregAck", 76), ("handoffSuccessful", 77))))
if mibBuilder.loadTexts: cagwMsgType.setStatus('current')
if mibBuilder.loadTexts: cagwMsgType.setDescription('The type of the messages.')
cagwMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 3, 1, 1, 2), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwMsgSent.setStatus('current')
if mibBuilder.loadTexts: cagwMsgSent.setDescription('Total number of messages Sent.')
cagwMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 3, 1, 1, 3), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwMsgReceived.setStatus('current')
if mibBuilder.loadTexts: cagwMsgReceived.setDescription('Total number of messages Received.')
cagwMsgResent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 3, 1, 1, 4), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwMsgResent.setStatus('current')
if mibBuilder.loadTexts: cagwMsgResent.setDescription('Total number of messages Resent.')
cagwUserGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1), )
if mibBuilder.loadTexts: cagwUserGrpTable.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpTable.setDescription('The User Group table includes information and statistics about each user group.')
cagwUserGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1), ).setIndexNames((0, "CISCO-ASN-GATEWAY-MIB", "cagwInstanceIndex"), (0, "CISCO-ASN-GATEWAY-MIB", "cagwUserGrpDomainName"))
if mibBuilder.loadTexts: cagwUserGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpEntry.setDescription('User Group Information.')
cagwUserGrpDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: cagwUserGrpDomainName.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpDomainName.setDescription('Domain Name identifying a User Group.')
cagwUserGrpServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("operational", 0), ("disable", 1), ("maintenance", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpServiceMode.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpServiceMode.setDescription('The User Group service mode.')
cagwUserGrpCreatedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 3), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpCreatedSessions.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpCreatedSessions.setDescription('Total number of sessions created per user group.')
cagwUserGrpDeletedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 4), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpDeletedSessions.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpDeletedSessions.setDescription('Total number of sessions deleted per user group.')
cagwUserGrpCurrentSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 5), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpCurrentSessions.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpCurrentSessions.setDescription('Total number of active sessions per user group.')
cagwUserGrpCreatedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 6), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpCreatedFlows.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpCreatedFlows.setDescription('Total number of flows created per user group.')
cagwUserGrpDeletedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 7), Counter32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpDeletedFlows.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpDeletedFlows.setDescription('Total number of flows deleted per user group.')
cagwUserGrpCurrentFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 8), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpCurrentFlows.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpCurrentFlows.setDescription('Total number of active flows per user group.')
cagwUserGrpPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpPacketsSent.setStatus('deprecated')
if mibBuilder.loadTexts: cagwUserGrpPacketsSent.setDescription('Total number of packets sent by this user group.')
cagwUserGrpBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 10), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpBytesSent.setStatus('deprecated')
if mibBuilder.loadTexts: cagwUserGrpBytesSent.setDescription('Total number of bytes sent by this user group.')
cagwUserGrpPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpPacketsReceived.setStatus('deprecated')
if mibBuilder.loadTexts: cagwUserGrpPacketsReceived.setDescription('Total number of packets received by this user group.')
cagwUserGrpBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 12), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpBytesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: cagwUserGrpBytesReceived.setDescription('Total number of bytes received by this user group.')
cagwUserGrpInvalidSourcePacketsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpInvalidSourcePacketsDrops.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpInvalidSourcePacketsDrops.setDescription('Number of packets dropped due to invalid source address.')
cagwUserGrpInvalidSourceBytesDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 14), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpInvalidSourceBytesDrops.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpInvalidSourceBytesDrops.setDescription('Number of bytes dropped due to invalid source address.')
cagwUserGrpIpGrePacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpIpGrePacketsSent.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpIpGrePacketsSent.setDescription('Total number of packets sent by this user group on IP convergence sublayer.')
cagwUserGrpIpGreBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 16), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpIpGreBytesSent.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpIpGreBytesSent.setDescription('Total number of bytes sent by this user group on IP convergence sublayer.')
cagwUserGrpIpGrePacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpIpGrePacketsReceived.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpIpGrePacketsReceived.setDescription('Total number of packets received by this user group on IP convergence sublayer.')
cagwUserGrpIpGreBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 18), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpIpGreBytesReceived.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpIpGreBytesReceived.setDescription('Total number of bytes received by this user group on IP convergence sublayer.')
cagwUserGrpEthGrePacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpEthGrePacketsSent.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpEthGrePacketsSent.setDescription('Total number of packets sent by this user group on ethernet convergence sublayer.')
cagwUserGrpEthGreBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 20), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpEthGreBytesSent.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpEthGreBytesSent.setDescription('Total number of bytes sent by this user group on ethernet convergence sublayer.')
cagwUserGrpEthGrePacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpEthGrePacketsReceived.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpEthGrePacketsReceived.setDescription('Total number of packets received by this user group on ethernet convergence sublayer.')
cagwUserGrpEthGreBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 22), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpEthGreBytesReceived.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpEthGreBytesReceived.setDescription('Total number of bytes received by this user group on ethernet convergence sublayer.')
cagwUserGrpOverwritten = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 23), Counter32()).setUnits('number').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpOverwritten.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpOverwritten.setDescription('Total number of times this user group got overwritten by user group received from AAA server. Users can belong to a particular user group at the time of initial entry and AAA can recategorize the user under different user group after successful authentication.')
cagwUserGrpPodReqRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 24), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpPodReqRecv.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpPodReqRecv.setDescription('The number of Packet of Disconnect (POD) requests received by this user group')
cagwUserGrpPodSuccessNotifsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 25), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpPodSuccessNotifsSent.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpPodSuccessNotifsSent.setDescription('The number of Packet of Disconnect (POD) success notifications sent by this user group.')
cagwUserGrpPodFailureNotifsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 26), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpPodFailureNotifsSent.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpPodFailureNotifsSent.setDescription('The number of Packet of Disconnect (POD) failure notifications sent by this user group.')
cagwUserGrpCoaReqRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 27), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpCoaReqRecv.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpCoaReqRecv.setDescription('The number of Change of Authorization (COA) requests received by this user group.')
cagwUserGrpCoaSuccessNotifsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 28), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpCoaSuccessNotifsSent.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpCoaSuccessNotifsSent.setDescription('The number of Change of Authorization (COA) success notifications sent by this user group.')
cagwUserGrpCoaFailureNotifsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 29), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpCoaFailureNotifsSent.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpCoaFailureNotifsSent.setDescription('The number of Change of Authorization (COA) failure notifications sent by this user group.')
cagwUserGrpRejSession = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 4, 1, 1, 30), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwUserGrpRejSession.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpRejSession.setDescription('The number of session rejected due to service mode not operational.')
cagwPathTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1), )
if mibBuilder.loadTexts: cagwPathTable.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathTable.setDescription('The Path table includes information and statistics about each base station.')
cagwPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1), ).setIndexNames((0, "CISCO-ASN-GATEWAY-MIB", "cagwInstanceIndex"), (0, "CISCO-ASN-GATEWAY-MIB", "cagwPathRemoteIpType"), (0, "CISCO-ASN-GATEWAY-MIB", "cagwPathRemoteIp"), (0, "CISCO-ASN-GATEWAY-MIB", "cagwPathType"))
if mibBuilder.loadTexts: cagwPathEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathEntry.setDescription('Path Information.')
cagwPathRemoteIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cagwPathRemoteIpType.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathRemoteIpType.setDescription('Path IP Address type at the base station side.')
cagwPathRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20)))
if mibBuilder.loadTexts: cagwPathRemoteIp.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathRemoteIp.setDescription('Path IP Address at the base station side.')
cagwPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signaling", 1), ("data", 2))))
if mibBuilder.loadTexts: cagwPathType.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathType.setDescription('Path Type: Signaling or Data.')
cagwPathLocalIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathLocalIpType.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathLocalIpType.setDescription('Path IP Address type at the ASN-GW side.')
cagwPathLocalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathLocalIp.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathLocalIp.setDescription('Path IP Address at the ASN-GW side.')
cagwPathCurrentSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 6), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathCurrentSessions.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathCurrentSessions.setDescription('Number of Sessions over the path.')
cagwPathCurrentFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 7), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathCurrentFlows.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathCurrentFlows.setDescription('Number of Flows over the path.')
cagwPathPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathPacketsSent.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathPacketsSent.setDescription('Total Number of packets sent over the path.')
cagwPathBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 9), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathBytesSent.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathBytesSent.setDescription('Total Number of bytes sent over the path.')
cagwPathPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathPacketsReceived.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathPacketsReceived.setDescription('Total Number of packets received over the path.')
cagwPathBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 1, 1, 11), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathBytesReceived.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathBytesReceived.setDescription('Total Number of bytes received over the path.')
cagwPathRev1Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2), )
if mibBuilder.loadTexts: cagwPathRev1Table.setStatus('current')
if mibBuilder.loadTexts: cagwPathRev1Table.setDescription('The Path table includes information and statistics about each base station.')
cagwPathRev1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1), ).setIndexNames((0, "CISCO-ASN-GATEWAY-MIB", "cagwInstanceIndex"), (0, "CISCO-ASN-GATEWAY-MIB", "cagwPathTypeRev1"), (0, "CISCO-ASN-GATEWAY-MIB", "cagwPathRemoteIpTypeRev1"), (0, "CISCO-ASN-GATEWAY-MIB", "cagwPathRemoteIpRev1"))
if mibBuilder.loadTexts: cagwPathRev1Entry.setStatus('current')
if mibBuilder.loadTexts: cagwPathRev1Entry.setDescription('Path Information.')
cagwPathTypeRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signaling", 1), ("data", 2))))
if mibBuilder.loadTexts: cagwPathTypeRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathTypeRev1.setDescription('Path Type: Signaling or Data.')
cagwPathRemoteIpTypeRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cagwPathRemoteIpTypeRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathRemoteIpTypeRev1.setDescription('Path IP Address type at the base station side.')
cagwPathRemoteIpRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20)))
if mibBuilder.loadTexts: cagwPathRemoteIpRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathRemoteIpRev1.setDescription('Path IP Address at the base station side.')
cagwPathLocalIpTypeRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathLocalIpTypeRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathLocalIpTypeRev1.setDescription('Path IP Address type at the ASN-GW side.')
cagwPathLocalIpRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathLocalIpRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathLocalIpRev1.setDescription('Path IP Address at the ASN-GW side.')
cagwPathCurrentSessionsRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 6), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathCurrentSessionsRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathCurrentSessionsRev1.setDescription('Number of Sessions over the path.')
cagwPathCurrentFlowsRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 7), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathCurrentFlowsRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathCurrentFlowsRev1.setDescription('Number of Flows over the path.')
cagwPathIpGrePacketsSentRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathIpGrePacketsSentRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathIpGrePacketsSentRev1.setDescription('Total Number of packets sent over the path on IP convergence sublayer.')
cagwPathIpGreBytesSentRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 9), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathIpGreBytesSentRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathIpGreBytesSentRev1.setDescription('Total Number of bytes sent over the path on IP convergence sublayer.')
cagwPathIpGrePacketsReceivedRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathIpGrePacketsReceivedRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathIpGrePacketsReceivedRev1.setDescription('Total Number of packets received over the path on IP convergence sublayer.')
cagwPathIpGreBytesReceivedRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 11), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathIpGreBytesReceivedRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathIpGreBytesReceivedRev1.setDescription('Total Number of bytes received over the path on IP convergence sublayer.')
cagwPathEthGrePacketsSentRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathEthGrePacketsSentRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathEthGrePacketsSentRev1.setDescription('Total Number of packets sent over the path on ethernet convergence sublayer.')
cagwPathEthGreBytesSentRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 13), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathEthGreBytesSentRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathEthGreBytesSentRev1.setDescription('Total Number of bytes sent over the path on ethernet convergence sublayer.')
cagwPathEthGrePacketsReceivedRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathEthGrePacketsReceivedRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathEthGrePacketsReceivedRev1.setDescription('Total Number of packets received over the path on ethernet convergence sublayer.')
cagwPathEthGreBytesReceivedRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 5, 2, 1, 15), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwPathEthGreBytesReceivedRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathEthGreBytesReceivedRev1.setDescription('Total Number of bytes received over the path on ethernet convergence sublayer.')
cagwArpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 6, 1), )
if mibBuilder.loadTexts: cagwArpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cagwArpStatisticsTable.setDescription('The ARP Statistics Table contains Statistics about ARP requests handled by the ASN-GW.')
cagwArpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 6, 1, 1), ).setIndexNames((0, "CISCO-ASN-GATEWAY-MIB", "cagwInstanceIndex"))
if mibBuilder.loadTexts: cagwArpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cagwArpStatisticsEntry.setDescription('ASN-GW ARP statistics entry.')
cagwArpReqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 6, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwArpReqReceived.setStatus('current')
if mibBuilder.loadTexts: cagwArpReqReceived.setDescription('The number of ARP requests received.')
cagwArpReplySent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 6, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwArpReplySent.setStatus('current')
if mibBuilder.loadTexts: cagwArpReplySent.setDescription('The number of ARP replies sent.')
cagwArpPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 3, 6, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwArpPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cagwArpPacketsDropped.setDescription('The number of ARP packets dropped.')
cagwNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cagwNotifEnabled.setDescription("Indicates whether notifications are generated by the device. - When set to 'true' it will enable all the traps - When set to 'false' it will disable all the traps This object will remain 'true' as long as any trap is enabled.")
cagwNotifSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 2), CiscoAlarmSeverity().clone('info')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwNotifSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: cagwNotifSeverityLevel.setDescription('This object is used to indicate which severity of notifications are generated by the device. The following is a list of severities from highest to lowest and these value are defined in the CiscoAlarmSeverity textual convention from CISCO-TC. critical(3) - highest severity major(4) minor(5) warning(6) info(7) - lowest severity All notification with a severity higher or equal to the this object will be generated. This object cannot be set to cleared(1) or indeterminate(2).')
cagwRepeatNotifInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 3600), )).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwRepeatNotifInterval.setStatus('current')
if mibBuilder.loadTexts: cagwRepeatNotifInterval.setDescription('The purpose of this object is to define the length of interval used to prevent the excessive generations of notifications. Notification related to the same event(alarm) will be suppressed for the duration of the interval. Notifications for the same entity(object with same indexes) will be suppressed for length of interval. For example, the ciscoAgwMaxBaseStationExceededOnsetNotif and ciscoAgwMaxBaseStationExceededAbateNotif notification are used to indicate the event were the number of basestations that can be supported has been reached and requests from additional base stations will be reject. Here is an example of how the suppression mechanism works: cagwMaxBaseStationExceededNotifThreshold = 90% cagwMaximumBaseStations = 1000 threshold = 900 Time 9:00:00 cagwCurrentBaseStations = 901 device sends ciscoAgwMaxBaseStationExceededOnsetNotif Time 9:00:04 cagwCurrentBaseStations = 899 device does not send ciscoAgwMaxBaseStationExceededAbateNotif Time 9:00:07 cagwCurrentBaseStations = 901 device does not send ciscoAgwMaxBaseStationExceededOnsetNotif Time 9:00:11 cagwCurrentBaseStations = 899 device does not send ciscoAgwMaxBaseStationExceededAbateNotif . . Time 9:05:00 Interval Ends and cagwCurrentBaseStations = 822 device sends ciscoAgwMaxBaseStationExceededAbateNotif When this object is set to zero notification will not be suppressed.')
cagwGeneratedNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 4), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwGeneratedNotifs.setStatus('current')
if mibBuilder.loadTexts: cagwGeneratedNotifs.setDescription('The number of notifications that have been generated for this management information base.')
cagwIgnoredNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 5), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIgnoredNotifs.setStatus('current')
if mibBuilder.loadTexts: cagwIgnoredNotifs.setDescription('The number of notification that were not sent because the notifications specified severity was lower than the minimum defined by cagwNotifSeverityLevel object or because the notification supression mechanism described in cagwRepeatNotifInterval blocked the notification.')
cagwServiceNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwServiceNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cagwServiceNotifEnabled.setDescription("Indicates whether ciscoAgwServiceDownNotif and ciscoAgwServiceUpNotif notifications will be generated by the device as follows. 'true' - Notification generation is enabled. 'false' - Notification generation is disabled.")
cagwServiceNotifSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 12), CiscoAlarmSeverity().clone('critical')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwServiceNotifSeverity.setStatus('current')
if mibBuilder.loadTexts: cagwServiceNotifSeverity.setDescription("Indicates the severity of the ciscoAgwServiceDownNotif notification. The severity of ciscoAgwServiceUpNotif is 'cleared'. This object cannot be set to cleared(1) or indeterminate(2).")
cagwGeneratedServiceNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 13), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwGeneratedServiceNotifs.setStatus('current')
if mibBuilder.loadTexts: cagwGeneratedServiceNotifs.setDescription('The number of ciscoAgwServiceDownNotif notifications that have been generated. Discontinuites in the value of this counter can occur at re-initialization of the management system or reloading of the device.')
cagwIgnoredServiceNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 14), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIgnoredServiceNotifs.setStatus('current')
if mibBuilder.loadTexts: cagwIgnoredServiceNotifs.setDescription('The number of ciscoAgwServiceDownNotif notifications that were not generated because the notification specified severity was lower than the minimum defined by cagwNotifSeverityLevel object or because the notification supression mechanism described in cagwRepeatNotifInterval blocked the notification.')
cagwMaxBaseStationExceededNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwMaxBaseStationExceededNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cagwMaxBaseStationExceededNotifEnabled.setDescription("Indicates whether ciscoAgwMaxBaseStationExceededUpNotif and ciscoAgwMaxBaseStationExceededDownNotif notifications will be generated by the device as follows. 'true' - Notification generation is enabled. 'false' - Notification generation is disabled.")
cagwMaxBaseStationExceededNotifSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 22), CiscoAlarmSeverity().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwMaxBaseStationExceededNotifSeverity.setStatus('current')
if mibBuilder.loadTexts: cagwMaxBaseStationExceededNotifSeverity.setDescription("Indicates the severity of the ciscoAgwMaxBaseStationExceededOnsetNotif notification. The severity of ciscoAgwMaxBaseStationExceededAbateNotif is 'cleared'. This object cannot be set to cleared(1) or indeterminate(2).")
cagwMaxBaseStationExceededNotifThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 100)).clone(90)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwMaxBaseStationExceededNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: cagwMaxBaseStationExceededNotifThreshold.setDescription('This object defines a threshold used to indicate when to generate the ciscoAgwMaxBaseStationExceededOnsetNotif and ciscoAgwMaxBaseStationExceededAbateNotif notifications. The threshold is the percentage of the base stations defined by the cagwMaximumBaseStations object. A value of 0 disables both notifications. Here is an example. cagwMaximumBaseStations = 500 cagwMaxBaseStationExceededNotifThreshold = 90 Threshold is 450 base stations. Therefore, the ciscoAgwMaxBaseStationExceededOnsetNotif will be generated when the cagwCurrentBaseStations is greater than or equal to this threshold. The ciscoAgwMaxBaseStationExceededAbateNotif will be generated when the cagwCurrentBaseStations drops below the value of this threshold. Both of these notification can be suppressed as described in the cagwRepeatNotifInterval object.')
cagwGeneratedMaxBsNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 24), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwGeneratedMaxBsNotifs.setStatus('current')
if mibBuilder.loadTexts: cagwGeneratedMaxBsNotifs.setDescription('The number of ciscoAgwMaxBaseStationExceededOnsetNotif notifications that have been generated. Discontinuities in the value of this counter can occur at the re-initialization of the management system or reloading of the device.')
cagwIgnoredMaxBsNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 25), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIgnoredMaxBsNotifs.setStatus('current')
if mibBuilder.loadTexts: cagwIgnoredMaxBsNotifs.setDescription('The number of ciscoAgwMaxBaseStationExceededOnsetNotif notifications that were not generated because the notification specified severity was lower than the minimum defined by cagwNotifSeverityLevel object or because the notification supression mechanism described in cagwRepeatNotifInterval blocked the notification.')
cagwMaxSubscribersExceededNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwMaxSubscribersExceededNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cagwMaxSubscribersExceededNotifEnabled.setDescription("Indicates whether ciscoAgwMaxSubscribersExceededUpNotif and ciscoAgwMaxSubscribersExceededDownNotif notifications will be generated by the device as follows. 'true' - Notification generation is enabled. 'false' - Notification generation is disabled.")
cagwMaxSubscribersExceededNotifSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 32), CiscoAlarmSeverity().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwMaxSubscribersExceededNotifSeverity.setStatus('current')
if mibBuilder.loadTexts: cagwMaxSubscribersExceededNotifSeverity.setDescription("Indicates the severity of the ciscoAgwMaxSubscribersExceededOnsetNotif notification. The severity of ciscoAgwMaxSubscribersExceededAbateNotif is 'cleared'. This object cannot be set to cleared(1) or indeterminate(2).")
cagwMaxSubscribersExceededNotifThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 100)).clone(90)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cagwMaxSubscribersExceededNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: cagwMaxSubscribersExceededNotifThreshold.setDescription('This object defines a threshold used to indicate when to generate the ciscoAgwMaxSubscribersExceededOnsetNotif and ciscoAgwMaxSubscribersExceededAbateNotif notifications. The threshold is the percentage of the subscribers defined by the cagwMaximumSubscribers object. A value of 0 disables both notifications. Here is an example. cagwMaximumSubscribers = 20000 cagwMaxSubscribersExceededNotifThreshold = 90 Threshold is 18000 subscribers. Therefore, the ciscoAgwMaxSubscribersExceededOnsetNotif will be generated when the cagwCurrentSubscribers is greater than or equal to this threshold. The ciscoAgwMaxSubscribersExceededAbateNotif will be generated when the cagwCurrentSubscribers drops below the value of this threshold. Both of these notification can be suppressed as described in the cagwRepeatNotifInterval object.')
cagwGeneratedMaxSubscNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 34), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwGeneratedMaxSubscNotifs.setStatus('current')
if mibBuilder.loadTexts: cagwGeneratedMaxSubscNotifs.setDescription('The number of ciscoAgwMaxSubscribersExceededOnsetNotif notifications that have been generated. Discontinuites in the value of this counter can occur at re-initialization of the management system or reloading of the device.')
cagwIgnoredMaxSubscNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 4, 35), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwIgnoredMaxSubscNotifs.setStatus('current')
if mibBuilder.loadTexts: cagwIgnoredMaxSubscNotifs.setDescription('The number of ciscoAgwMaxSubscribersExceededOnsetNotif notifications that were not generated because the notification specified severity was lower than the minimum defined by cagwNotifSeverityLevel object or because the notification supression mechanism described in cagwRepeatNotifInterval blocked the notification.')
cagwImpactedIpType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 5, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwImpactedIpType.setStatus('current')
if mibBuilder.loadTexts: cagwImpactedIpType.setDescription('This object provides the type of the address contained in the cagwImpactedIp object.')
cagwImpactedIp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 5, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwImpactedIp.setStatus('current')
if mibBuilder.loadTexts: cagwImpactedIp.setDescription('This is the address of the device impacted by the event that caused the generation of the notification containing this object.')
cagwImpactedReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("limit", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwImpactedReason.setStatus('current')
if mibBuilder.loadTexts: cagwImpactedReason.setDescription('This is the reason for generating this notification.')
cagwImpactedInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 638, 1, 5, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cagwImpactedInfo.setStatus('current')
if mibBuilder.loadTexts: cagwImpactedInfo.setDescription('Additional information regarding this notification.')
ciscoAgwServiceDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 638, 0, 1)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceDescription"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceNotifSeverity"))
if mibBuilder.loadTexts: ciscoAgwServiceDownNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoAgwServiceDownNotif.setDescription('A notification of this type is generated when the ASN-GW is not in service.')
ciscoAgwServiceUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 638, 0, 2)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceDescription"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceNotifSeverity"))
if mibBuilder.loadTexts: ciscoAgwServiceUpNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoAgwServiceUpNotif.setDescription('A notification of this type is generated when the ASN-GW is in service.')
ciscoAgwMaxBaseStationExceededOnsetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 638, 0, 3)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceDescription"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxBaseStationExceededNotifSeverity"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaximumBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwImpactedIpType"), ("CISCO-ASN-GATEWAY-MIB", "cagwImpactedIp"))
if mibBuilder.loadTexts: ciscoAgwMaxBaseStationExceededOnsetNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoAgwMaxBaseStationExceededOnsetNotif.setDescription('A notification of this type is generated when the number of base stations exceeded the percent of the maximum number of base stations as specified by the object cagwMaxBaseStationExceededNotifThreshold.')
ciscoAgwMaxBaseStationExceededAbateNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 638, 0, 4)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceDescription"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxBaseStationExceededNotifSeverity"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaximumBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedBaseStations"))
if mibBuilder.loadTexts: ciscoAgwMaxBaseStationExceededAbateNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoAgwMaxBaseStationExceededAbateNotif.setDescription('A notification of this type is generated when the number of base stations goes below the percent of the maximum number of base stations as specified by the object cagwMaxBaseStationExceededNotifThreshold.')
ciscoAgwMaxSubscribersExceededOnsetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 638, 0, 5)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceDescription"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxSubscribersExceededNotifSeverity"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaximumSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwImpactedIpType"), ("CISCO-ASN-GATEWAY-MIB", "cagwImpactedIp"), ("CISCO-ASN-GATEWAY-MIB", "cagwImpactedInfo"))
if mibBuilder.loadTexts: ciscoAgwMaxSubscribersExceededOnsetNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoAgwMaxSubscribersExceededOnsetNotif.setDescription('A notification of this type is generated when the number of subscribers exceeded the percent of the maximum number of base stations as specified by the object cagwMaxSubscribersExceededNotifThreshold.')
ciscoAgwMaxSubscribersExceededAbateNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 638, 0, 6)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceDescription"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxSubscribersExceededNotifSeverity"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaximumSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedSessions"))
if mibBuilder.loadTexts: ciscoAgwMaxSubscribersExceededAbateNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoAgwMaxSubscribersExceededAbateNotif.setDescription('A notification of this type is generated when the number of subscribers goes below the percent of the maximum number of base stations as specified by the object cagwMaxSubscribersExceededNotifThreshold.')
ciscoAgwMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 1))
ciscoAgwMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2))
ciscoAgwMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 1, 1)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwStateGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwGlobalStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwMessageStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifInfoGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifMgmtGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAgwMIBCompliance = ciscoAgwMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoAgwMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco ASN-GW MIB')
ciscoAgwMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 1, 2)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwStateGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwMessageStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifInfoGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifMgmtGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwGlobalStatisticsGroupRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpGroupRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathGroupRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwArpStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAgwMIBComplianceRev1 = ciscoAgwMIBComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoAgwMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco ASN-GW MIB')
ciscoAgwMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 1, 3)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwStateGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwMessageStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifInfoGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifMgmtGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpGroupRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathGroupRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwArpStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwStateGroupSup1"), ("CISCO-ASN-GATEWAY-MIB", "cagwGlobalStatisticsGroupRev2"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpGroupRev1Sup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAgwMIBComplianceRev2 = ciscoAgwMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoAgwMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco ASN-GW MIB')
ciscoAgwMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 1, 4)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstanceGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwStateGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwMessageStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifInfoGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifMgmtGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpGroupRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathGroupRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwArpStatisticsGroup"), ("CISCO-ASN-GATEWAY-MIB", "cagwStateGroupSup1"), ("CISCO-ASN-GATEWAY-MIB", "cagwGlobalStatisticsGroupRev2"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpGroupRev1Sup1"), ("CISCO-ASN-GATEWAY-MIB", "cagwStateGroupSup2"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpGroupRev1Sup2"), ("CISCO-ASN-GATEWAY-MIB", "cagwGlobalStatisticsGroupRev2Sup1"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAgwMIBComplianceRev3 = ciscoAgwMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoAgwMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco ASN-GW MIB')
cagwInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 1)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwInstancePhysicalIndex"), ("CISCO-ASN-GATEWAY-MIB", "cagwInstanceDescription"), ("CISCO-ASN-GATEWAY-MIB", "cagwInstanceVersion"), ("CISCO-ASN-GATEWAY-MIB", "cagwInstanceOperState"), ("CISCO-ASN-GATEWAY-MIB", "cagwInstanceSessionRedundancyAdmin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwInstanceGroup = cagwInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: cagwInstanceGroup.setDescription('These objects describe the ASN-GW instances.')
cagwStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 2)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwMaximumBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaximumSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaximumFlowsPerSession"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentDataPaths"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwNetworkBehindMs"), ("CISCO-ASN-GATEWAY-MIB", "cagwPendingSignalingPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwStateGroup = cagwStateGroup.setStatus('current')
if mibBuilder.loadTexts: cagwStateGroup.setDescription('These objects describe the state of the ASN GW.')
cagwGlobalStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 3)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwCreatedSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedDataPaths"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedDataPaths"), ("CISCO-ASN-GATEWAY-MIB", "cagwProcessedSignalingPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwRequeuedSignalingPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwCongestionSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceDisabledSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceNotReadySignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwEncapErrorSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwDisposedSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwEncapErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwInvalidAddressDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceDisabledDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwInvalidProtocolTypeDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwLengthErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwAbsentKeyDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFlowNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFlowPathNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFlowPathInvalidSourceDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwSessionNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwSubscriberNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwChecksumErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwIngressFilteringDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwSequenceNumberErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFragmentedDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFramedRouteInserted"), ("CISCO-ASN-GATEWAY-MIB", "cagwFramedRouteInsertFailed"), ("CISCO-ASN-GATEWAY-MIB", "cagwFramedRouteDeleted"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceFlowProfileNotFound"), ("CISCO-ASN-GATEWAY-MIB", "cagwQosProfileNotFound"), ("CISCO-ASN-GATEWAY-MIB", "cagwClassifierProfileNotFound"), ("CISCO-ASN-GATEWAY-MIB", "cagwReceivedDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwReceivedDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwSentDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwSentDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwSessionsDeletedByAgw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwGlobalStatisticsGroup = cagwGlobalStatisticsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cagwGlobalStatisticsGroup.setDescription('These objects describe the statistics of the ASN GW.')
cagwDhcpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 4)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwDhcpDiscoverPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpOfferPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpRequestPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpDeclinePackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpAckPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpNakPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpReleasePackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpInformPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpLeaseQueryPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpUnknownPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwDhcpStatisticsGroup = cagwDhcpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpStatisticsGroup.setDescription('These objects describe the DHCP statistics of the ASN GW.')
cagwMessageStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 5)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwMsgSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwMsgReceived"), ("CISCO-ASN-GATEWAY-MIB", "cagwMsgResent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwMessageStatisticsGroup = cagwMessageStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cagwMessageStatisticsGroup.setDescription('These objects describe the Message statistics of the ASN GW. See reference [1] for a description of the R6 protocol and message types.')
cagwUserGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 6)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpServiceMode"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCreatedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpDeletedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCurrentSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCreatedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpDeletedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCurrentFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpPacketsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpBytesSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpPacketsReceived"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpBytesReceived"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpInvalidSourcePacketsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpInvalidSourceBytesDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwUserGrpGroup = cagwUserGrpGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cagwUserGrpGroup.setDescription('These objects describe the state of a User Group.')
cagwPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 7)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwPathLocalIpType"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathLocalIp"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathCurrentSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathCurrentFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathPacketsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathBytesSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathPacketsReceived"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathBytesReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwPathGroup = cagwPathGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cagwPathGroup.setDescription('These objects describe the Path statistics of the ASN GW.')
cagwNotifInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 8)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwImpactedIpType"), ("CISCO-ASN-GATEWAY-MIB", "cagwImpactedIp"), ("CISCO-ASN-GATEWAY-MIB", "cagwImpactedReason"), ("CISCO-ASN-GATEWAY-MIB", "cagwImpactedInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwNotifInfoGroup = cagwNotifInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cagwNotifInfoGroup.setDescription('These objects are used for notification only.')
cagwNotifMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 9)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwNotifEnabled"), ("CISCO-ASN-GATEWAY-MIB", "cagwNotifSeverityLevel"), ("CISCO-ASN-GATEWAY-MIB", "cagwRepeatNotifInterval"), ("CISCO-ASN-GATEWAY-MIB", "cagwGeneratedNotifs"), ("CISCO-ASN-GATEWAY-MIB", "cagwIgnoredNotifs"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceNotifEnabled"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceNotifSeverity"), ("CISCO-ASN-GATEWAY-MIB", "cagwGeneratedServiceNotifs"), ("CISCO-ASN-GATEWAY-MIB", "cagwIgnoredServiceNotifs"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxBaseStationExceededNotifEnabled"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxBaseStationExceededNotifSeverity"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxBaseStationExceededNotifThreshold"), ("CISCO-ASN-GATEWAY-MIB", "cagwGeneratedMaxBsNotifs"), ("CISCO-ASN-GATEWAY-MIB", "cagwIgnoredMaxBsNotifs"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxSubscribersExceededNotifEnabled"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxSubscribersExceededNotifSeverity"), ("CISCO-ASN-GATEWAY-MIB", "cagwMaxSubscribersExceededNotifThreshold"), ("CISCO-ASN-GATEWAY-MIB", "cagwGeneratedMaxSubscNotifs"), ("CISCO-ASN-GATEWAY-MIB", "cagwIgnoredMaxSubscNotifs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwNotifMgmtGroup = cagwNotifMgmtGroup.setStatus('current')
if mibBuilder.loadTexts: cagwNotifMgmtGroup.setDescription('These objects describe the notification history of the ASN GW.')
cagwNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 10)).setObjects(("CISCO-ASN-GATEWAY-MIB", "ciscoAgwServiceDownNotif"), ("CISCO-ASN-GATEWAY-MIB", "ciscoAgwServiceUpNotif"), ("CISCO-ASN-GATEWAY-MIB", "ciscoAgwMaxBaseStationExceededOnsetNotif"), ("CISCO-ASN-GATEWAY-MIB", "ciscoAgwMaxBaseStationExceededAbateNotif"), ("CISCO-ASN-GATEWAY-MIB", "ciscoAgwMaxSubscribersExceededOnsetNotif"), ("CISCO-ASN-GATEWAY-MIB", "ciscoAgwMaxSubscribersExceededAbateNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwNotifGroup = cagwNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cagwNotifGroup.setDescription('These are the notifications of the ASN GW.')
cagwGlobalStatisticsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 11)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwCreatedSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedDataPaths"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedDataPaths"), ("CISCO-ASN-GATEWAY-MIB", "cagwProcessedSignalingPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwRequeuedSignalingPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwCongestionSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceDisabledSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceNotReadySignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwEncapErrorSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwDisposedSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwEncapErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwInvalidAddressDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceDisabledDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwInvalidProtocolTypeDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwLengthErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwAbsentKeyDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFlowNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFlowPathNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFlowPathInvalidSourceDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwSessionNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwSubscriberNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwChecksumErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwIngressFilteringDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwSequenceNumberErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFragmentedDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFramedRouteInserted"), ("CISCO-ASN-GATEWAY-MIB", "cagwFramedRouteInsertFailed"), ("CISCO-ASN-GATEWAY-MIB", "cagwFramedRouteDeleted"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceFlowProfileNotFound"), ("CISCO-ASN-GATEWAY-MIB", "cagwQosProfileNotFound"), ("CISCO-ASN-GATEWAY-MIB", "cagwClassifierProfileNotFound"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwSessionsDeletedByAgw"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreReceivedDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreReceivedDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreSentDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreSentDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreReceivedDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreReceivedDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreSentDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreSentDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwAgedOutStaticHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwSuccessfulHandoff"), ("CISCO-ASN-GATEWAY-MIB", "cagwFailedHandoff"), ("CISCO-ASN-GATEWAY-MIB", "cagwSuccessfulCMACKeyUpdate"), ("CISCO-ASN-GATEWAY-MIB", "cagwFailedCMACKeyUpdate"), ("CISCO-ASN-GATEWAY-MIB", "cagwSuccessfulSecurityKeyExchange"), ("CISCO-ASN-GATEWAY-MIB", "cagwFailedSecurityKeyExchange"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreReceivedRedirectedPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreReceivedRedirectedBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreReceivedRedirectedPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreReceivedRedirectedBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwThrottlingOfPuntsDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwLearningUpstreamDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwPuntedDataPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwGlobalStatisticsGroupRev1 = cagwGlobalStatisticsGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cagwGlobalStatisticsGroupRev1.setDescription('These objects describe the statistics of the ASN GW.')
cagwUserGrpGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 12)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpServiceMode"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCreatedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpDeletedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCurrentSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCreatedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpDeletedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCurrentFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpInvalidSourcePacketsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpInvalidSourceBytesDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpIpGrePacketsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpIpGreBytesSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpIpGrePacketsReceived"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpIpGreBytesReceived"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpEthGrePacketsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpEthGreBytesSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpEthGrePacketsReceived"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpEthGreBytesReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwUserGrpGroupRev1 = cagwUserGrpGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpGroupRev1.setDescription('These objects describe the state of a User Group.')
cagwPathGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 13)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwPathLocalIpTypeRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathLocalIpRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathCurrentSessionsRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathCurrentFlowsRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathIpGrePacketsSentRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathIpGreBytesSentRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathIpGrePacketsReceivedRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathIpGreBytesReceivedRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathEthGrePacketsSentRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathEthGreBytesSentRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathEthGrePacketsReceivedRev1"), ("CISCO-ASN-GATEWAY-MIB", "cagwPathEthGreBytesReceivedRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwPathGroupRev1 = cagwPathGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cagwPathGroupRev1.setDescription('These objects describe the Path statistics of the ASN GW.')
cagwArpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 14)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwArpReqReceived"), ("CISCO-ASN-GATEWAY-MIB", "cagwArpReplySent"), ("CISCO-ASN-GATEWAY-MIB", "cagwArpPacketsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwArpStatisticsGroup = cagwArpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cagwArpStatisticsGroup.setDescription('These objects describe the ARP statistics of the ASN GW.')
cagwStateGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 15)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwCurrentFramedRoutes"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentFramedRouteSubs"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentAutoProvSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwCurrentSessionsWithIpPktsRedir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwStateGroupSup1 = cagwStateGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cagwStateGroupSup1.setDescription('Additonal object to describe the state of the ASN GW.')
cagwGlobalStatisticsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 16)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwCreatedSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedSubscribers"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedDataPaths"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedDataPaths"), ("CISCO-ASN-GATEWAY-MIB", "cagwProcessedSignalingPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwRequeuedSignalingPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwCongestionSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceDisabledSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceNotReadySignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwEncapErrorSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwDisposedSignalingPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwEncapErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwInvalidAddressDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceDisabledDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwInvalidProtocolTypeDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwLengthErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwAbsentKeyDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFlowNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFlowPathNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFlowPathInvalidSourceDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwSessionNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwSubscriberNotFoundDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwChecksumErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwIngressFilteringDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwSequenceNumberErrorDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwFragmentedDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwServiceFlowProfileNotFound"), ("CISCO-ASN-GATEWAY-MIB", "cagwQosProfileNotFound"), ("CISCO-ASN-GATEWAY-MIB", "cagwClassifierProfileNotFound"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedBaseStations"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedSessions"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedFlows"), ("CISCO-ASN-GATEWAY-MIB", "cagwSessionsDeletedByAgw"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreReceivedDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreReceivedDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreSentDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreSentDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreReceivedDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreReceivedDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreSentDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreSentDataBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwAgedOutStaticHosts"), ("CISCO-ASN-GATEWAY-MIB", "cagwSuccessfulHandoff"), ("CISCO-ASN-GATEWAY-MIB", "cagwFailedHandoff"), ("CISCO-ASN-GATEWAY-MIB", "cagwSuccessfulCMACKeyUpdate"), ("CISCO-ASN-GATEWAY-MIB", "cagwFailedCMACKeyUpdate"), ("CISCO-ASN-GATEWAY-MIB", "cagwSuccessfulSecurityKeyExchange"), ("CISCO-ASN-GATEWAY-MIB", "cagwFailedSecurityKeyExchange"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreReceivedRedirectedPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwIpGreReceivedRedirectedBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreReceivedRedirectedPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwEthGreReceivedRedirectedBytes"), ("CISCO-ASN-GATEWAY-MIB", "cagwThrottlingOfPuntsDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwLearningUpstreamDataPktsDrops"), ("CISCO-ASN-GATEWAY-MIB", "cagwPuntedDataPkts"), ("CISCO-ASN-GATEWAY-MIB", "cagwRejectedSessionUnapprovedBs"), ("CISCO-ASN-GATEWAY-MIB", "cagwPktsDroppedStaticIpHostNotAllowed"), ("CISCO-ASN-GATEWAY-MIB", "cagwPktsDroppedMulticastBroadcast"), ("CISCO-ASN-GATEWAY-MIB", "cagwSlaProfileNotFound"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwGlobalStatisticsGroupRev2 = cagwGlobalStatisticsGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cagwGlobalStatisticsGroupRev2.setDescription('These objects describe the statistics of the ASN GW.')
cagwUserGrpGroupRev1Sup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 17)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpOverwritten"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwUserGrpGroupRev1Sup1 = cagwUserGrpGroupRev1Sup1.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpGroupRev1Sup1.setDescription('Additional object to describe the state of a User Group.')
cagwStateGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 18)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwCurrentPmipEnabledSubs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwStateGroupSup2 = cagwStateGroupSup2.setStatus('current')
if mibBuilder.loadTexts: cagwStateGroupSup2.setDescription('Additonal object to describe the state of the ASN GW.')
cagwUserGrpGroupRev1Sup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 19)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpPodReqRecv"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpPodSuccessNotifsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpPodFailureNotifsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCoaReqRecv"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCoaSuccessNotifsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpCoaFailureNotifsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwUserGrpRejSession"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwUserGrpGroupRev1Sup2 = cagwUserGrpGroupRev1Sup2.setStatus('current')
if mibBuilder.loadTexts: cagwUserGrpGroupRev1Sup2.setDescription('Additional object to describe the state of a User Group.')
cagwGlobalStatisticsGroupRev2Sup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 20)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwPktsDroppedMipIncomplete"), ("CISCO-ASN-GATEWAY-MIB", "cagwCreatedPmipEnabledSubs"), ("CISCO-ASN-GATEWAY-MIB", "cagwDeletedPmipEnabledSubs"), ("CISCO-ASN-GATEWAY-MIB", "cagwPktsDropPmipStaticIpHost"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeEntryMsBsInitiated"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeEntryBwgInitiated"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeEntryFailures"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeExitMsBsInitiated"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeExitBwgInitiated"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeExitFailures"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeLocUpdtPgidChange"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeLocUpdtPowerDown"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeLocUpdtPeriodic"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeLocUpdtFailures"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModePageAttemptsDwnlnkData"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModePageFailuresDwnlnkData"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModePageAttemptsLocUpdt"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModePageFailuresLocUpdt"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeDirectedPagingSuccess"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeDirectedPagingRetries"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeFloodPagingSuccess"), ("CISCO-ASN-GATEWAY-MIB", "cagwIdleModeFloodPagingRetries"), ("CISCO-ASN-GATEWAY-MIB", "cagwPodRequestsRecv"), ("CISCO-ASN-GATEWAY-MIB", "cagwPodSuccessNotifsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwPodFailureNotifsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwCoaReqRecv"), ("CISCO-ASN-GATEWAY-MIB", "cagwCoaSuccessNotifsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwCoaFailureNotifsSent"), ("CISCO-ASN-GATEWAY-MIB", "cagwHotlineUplinkPktDropAclDeny"), ("CISCO-ASN-GATEWAY-MIB", "cagwHotlineDownlinkPktDropAclDeny"), ("CISCO-ASN-GATEWAY-MIB", "cagwUplinkPktDropUsrgrpAclDeny"), ("CISCO-ASN-GATEWAY-MIB", "cagwDownlinkPktDropUsrgrpAclDeny"), ("CISCO-ASN-GATEWAY-MIB", "cagwDownlinkPktDropPagingAclDeny"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwGlobalStatisticsGroupRev2Sup1 = cagwGlobalStatisticsGroupRev2Sup1.setStatus('current')
if mibBuilder.loadTexts: cagwGlobalStatisticsGroupRev2Sup1.setDescription('Additional object to describe the statistics of the ASN GW.')
cagwDhcpProxyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 638, 2, 2, 21)).setObjects(("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyDiscoverPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyOfferPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyRequestPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyDeclinePackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyAckPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyNakPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyReleasePackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyInformPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyLeaseQueryPackets"), ("CISCO-ASN-GATEWAY-MIB", "cagwDhcpProxyUnknownPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cagwDhcpProxyStatsGroup = cagwDhcpProxyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cagwDhcpProxyStatsGroup.setDescription('Additional objects to describe the DHCP statistics of the ASN GW.')
mibBuilder.exportSymbols("CISCO-ASN-GATEWAY-MIB", cagwDhcpProxyStatsGroup=cagwDhcpProxyStatsGroup, ciscoAgwMIB=ciscoAgwMIB, cagwDhcpProxyLeaseQueryPackets=cagwDhcpProxyLeaseQueryPackets, cagwPathGroup=cagwPathGroup, cagwCurrentSubscribers=cagwCurrentSubscribers, cagwHotlineDownlinkPktDropAclDeny=cagwHotlineDownlinkPktDropAclDeny, cagwGeneratedServiceNotifs=cagwGeneratedServiceNotifs, cagwIdleModeDirectedPagingRetries=cagwIdleModeDirectedPagingRetries, cagwSessionNotFoundDataPktsDrops=cagwSessionNotFoundDataPktsDrops, cagwUserGrpOverwritten=cagwUserGrpOverwritten, cagwFramedRouteInsertFailed=cagwFramedRouteInsertFailed, cagwFailedHandoff=cagwFailedHandoff, cagwEthGreReceivedRedirectedPkts=cagwEthGreReceivedRedirectedPkts, cagwDisposedSignalingPktsDrops=cagwDisposedSignalingPktsDrops, cagwIdleModeEntryBwgInitiated=cagwIdleModeEntryBwgInitiated, cagwUserGrpDeletedFlows=cagwUserGrpDeletedFlows, cagwPathRemoteIpRev1=cagwPathRemoteIpRev1, cagwGeneratedNotifs=cagwGeneratedNotifs, cagwMaxBaseStationExceededNotifThreshold=cagwMaxBaseStationExceededNotifThreshold, cagwPathRemoteIpType=cagwPathRemoteIpType, cagwInstances=cagwInstances, cagwServiceNotifSeverity=cagwServiceNotifSeverity, cagwIpGreSentDataPkts=cagwIpGreSentDataPkts, cagwUserGrpStatistics=cagwUserGrpStatistics, cagwThrottlingOfPuntsDataPktsDrops=cagwThrottlingOfPuntsDataPktsDrops, cagwUserGrpCurrentFlows=cagwUserGrpCurrentFlows, ciscoAgwServiceDownNotif=ciscoAgwServiceDownNotif, cagwStatistics=cagwStatistics, cagwPathLocalIpRev1=cagwPathLocalIpRev1, cagwServiceDisabledSignalingPktsDrops=cagwServiceDisabledSignalingPktsDrops, cagwCurrentSessionsWithIpPktsRedir=cagwCurrentSessionsWithIpPktsRedir, cagwDhcpInformPackets=cagwDhcpInformPackets, cagwDhcpStatisticsEntry=cagwDhcpStatisticsEntry, cagwStateEntry=cagwStateEntry, cagwFramedRouteInserted=cagwFramedRouteInserted, cagwMaxSubscribersExceededNotifThreshold=cagwMaxSubscribersExceededNotifThreshold, cagwUserGrpInvalidSourcePacketsDrops=cagwUserGrpInvalidSourcePacketsDrops, cagwPathPacketsSent=cagwPathPacketsSent, cagwUserGrpGroupRev1=cagwUserGrpGroupRev1, cagwPodSuccessNotifsSent=cagwPodSuccessNotifsSent, cagwUserGrpCreatedSessions=cagwUserGrpCreatedSessions, cagwMaximumFlowsPerSession=cagwMaximumFlowsPerSession, cagwFailedSecurityKeyExchange=cagwFailedSecurityKeyExchange, cagwQosProfileNotFound=cagwQosProfileNotFound, cagwPathEthGrePacketsReceivedRev1=cagwPathEthGrePacketsReceivedRev1, cagwGlobalStatisticsGroupRev2=cagwGlobalStatisticsGroupRev2, cagwFramedRouteDeleted=cagwFramedRouteDeleted, cagwDownlinkPktDropPagingAclDeny=cagwDownlinkPktDropPagingAclDeny, cagwCurrentHosts=cagwCurrentHosts, cagwCurrentSessions=cagwCurrentSessions, cagwIgnoredMaxBsNotifs=cagwIgnoredMaxBsNotifs, cagwStateGroup=cagwStateGroup, cagwIdleModeFloodPagingRetries=cagwIdleModeFloodPagingRetries, cagwUserGrpGroupRev1Sup1=cagwUserGrpGroupRev1Sup1, cagwStateGroupSup2=cagwStateGroupSup2, cagwRepeatNotifInterval=cagwRepeatNotifInterval, cagwImpactedIpType=cagwImpactedIpType, cagwIdleModeExitFailures=cagwIdleModeExitFailures, cagwCurrentPmipEnabledSubs=cagwCurrentPmipEnabledSubs, cagwInstanceOperState=cagwInstanceOperState, cagwSequenceNumberErrorDataPktsDrops=cagwSequenceNumberErrorDataPktsDrops, cagwIdleModeLocUpdtPowerDown=cagwIdleModeLocUpdtPowerDown, ciscoAgwMIBCompliances=ciscoAgwMIBCompliances, cagwPathIpGreBytesSentRev1=cagwPathIpGreBytesSentRev1, cagwUserGrpCurrentSessions=cagwUserGrpCurrentSessions, cagwUserGrpPacketsSent=cagwUserGrpPacketsSent, cagwUserGrpInvalidSourceBytesDrops=cagwUserGrpInvalidSourceBytesDrops, cagwServiceDisabledDataPktsDrops=cagwServiceDisabledDataPktsDrops, cagwArpStatistics=cagwArpStatistics, cagwDhcpStatistics=cagwDhcpStatistics, cagwDeletedFlows=cagwDeletedFlows, cagwIdleModeFloodPagingSuccess=cagwIdleModeFloodPagingSuccess, cagwUplinkPktDropUsrgrpAclDeny=cagwUplinkPktDropUsrgrpAclDeny, cagwPathRemoteIp=cagwPathRemoteIp, cagwPathTypeRev1=cagwPathTypeRev1, cagwIpGreReceivedDataBytes=cagwIpGreReceivedDataBytes, cagwDeletedHosts=cagwDeletedHosts, cagwUserGrpBytesSent=cagwUserGrpBytesSent, cagwDhcpProxyDeclinePackets=cagwDhcpProxyDeclinePackets, cagwMsgTable=cagwMsgTable, cagwPathLocalIpTypeRev1=cagwPathLocalIpTypeRev1, cagwDhcpProxyUnknownPackets=cagwDhcpProxyUnknownPackets, cagwDhcpDeclinePackets=cagwDhcpDeclinePackets, cagwUserGrpEntry=cagwUserGrpEntry, cagwInstanceEntry=cagwInstanceEntry, cagwSuccessfulCMACKeyUpdate=cagwSuccessfulCMACKeyUpdate, cagwArpReqReceived=cagwArpReqReceived, cagwImpactedIp=cagwImpactedIp, cagwDhcpProxyAckPackets=cagwDhcpProxyAckPackets, cagwIdleModeEntryMsBsInitiated=cagwIdleModeEntryMsBsInitiated, cagwDhcpProxyRequestPackets=cagwDhcpProxyRequestPackets, cagwPathEthGrePacketsSentRev1=cagwPathEthGrePacketsSentRev1, cagwIdleModeDirectedPagingSuccess=cagwIdleModeDirectedPagingSuccess, cagwServiceNotReadySignalingPktsDrops=cagwServiceNotReadySignalingPktsDrops, cagwPendingSignalingPkts=cagwPendingSignalingPkts, cagwUserGrpPodFailureNotifsSent=cagwUserGrpPodFailureNotifsSent, cagwPathBytesSent=cagwPathBytesSent, cagwDhcpProxyNakPackets=cagwDhcpProxyNakPackets, cagwIpGreReceivedRedirectedBytes=cagwIpGreReceivedRedirectedBytes, cagwUserGrpEthGreBytesSent=cagwUserGrpEthGreBytesSent, cagwMsgType=cagwMsgType, cagwNotifInfoGroup=cagwNotifInfoGroup, cagwGlobalStatisticsEntry=cagwGlobalStatisticsEntry, cagwSuccessfulSecurityKeyExchange=cagwSuccessfulSecurityKeyExchange, cagwNotifSeverityLevel=cagwNotifSeverityLevel, cagwCreatedSessions=cagwCreatedSessions, cagwCurrentFlows=cagwCurrentFlows, cagwCreatedHosts=cagwCreatedHosts, cagwPathCurrentFlowsRev1=cagwPathCurrentFlowsRev1, cagwUserGrpCoaFailureNotifsSent=cagwUserGrpCoaFailureNotifsSent, cagwPathPacketsReceived=cagwPathPacketsReceived, cagwUserGrpRejSession=cagwUserGrpRejSession, cagwUserGrpCreatedFlows=cagwUserGrpCreatedFlows, cagwPathRev1Entry=cagwPathRev1Entry, cagwUserGrpGroupRev1Sup2=cagwUserGrpGroupRev1Sup2, cagwDeletedSessions=cagwDeletedSessions, cagwUserGrpPodReqRecv=cagwUserGrpPodReqRecv, cagwIdleModePageFailuresLocUpdt=cagwIdleModePageFailuresLocUpdt, cagwDhcpRequestPackets=cagwDhcpRequestPackets, cagwSubscriberNotFoundDataPktsDrops=cagwSubscriberNotFoundDataPktsDrops, cagwRejectedFlows=cagwRejectedFlows, cagwPathCurrentFlows=cagwPathCurrentFlows, ciscoAgwMaxSubscribersExceededOnsetNotif=ciscoAgwMaxSubscribersExceededOnsetNotif, cagwNotifGroup=cagwNotifGroup, cagwStateGroupSup1=cagwStateGroupSup1, cagwReceivedDataPkts=cagwReceivedDataPkts, cagwImpactedInfo=cagwImpactedInfo, cagwCurrentFramedRoutes=cagwCurrentFramedRoutes, cagwHotlineUplinkPktDropAclDeny=cagwHotlineUplinkPktDropAclDeny, cagwArpReplySent=cagwArpReplySent, cagwDhcpProxyInformPackets=cagwDhcpProxyInformPackets, cagwUserGrpDomainName=cagwUserGrpDomainName, cagwIngressFilteringDataPktsDrops=cagwIngressFilteringDataPktsDrops, cagwIgnoredMaxSubscNotifs=cagwIgnoredMaxSubscNotifs, cagwNotifMgmt=cagwNotifMgmt, cagwDeletedDataPaths=cagwDeletedDataPaths, cagwMsgEntry=cagwMsgEntry, cagwSuccessfulHandoff=cagwSuccessfulHandoff, cagwSessionsDeletedByAgw=cagwSessionsDeletedByAgw, cagwCoaReqRecv=cagwCoaReqRecv, cagwDeletedBaseStations=cagwDeletedBaseStations, cagwUserGrpEthGreBytesReceived=cagwUserGrpEthGreBytesReceived, cagwDeletedSubscribers=cagwDeletedSubscribers, ciscoAgwMIBObjects=ciscoAgwMIBObjects, cagwMsgSent=cagwMsgSent, cagwUserGrpPodSuccessNotifsSent=cagwUserGrpPodSuccessNotifsSent, cagwUserGrpCoaReqRecv=cagwUserGrpCoaReqRecv, cagwMaxBaseStationExceededNotifSeverity=cagwMaxBaseStationExceededNotifSeverity, cagwLearningUpstreamDataPktsDrops=cagwLearningUpstreamDataPktsDrops, cagwLengthErrorDataPktsDrops=cagwLengthErrorDataPktsDrops, cagwPathEthGreBytesSentRev1=cagwPathEthGreBytesSentRev1, cagwPathLocalIp=cagwPathLocalIp, cagwUserGrpIpGreBytesSent=cagwUserGrpIpGreBytesSent, cagwRejectedBaseStations=cagwRejectedBaseStations, cagwEthGreReceivedDataBytes=cagwEthGreReceivedDataBytes, cagwPathEthGreBytesReceivedRev1=cagwPathEthGreBytesReceivedRev1, cagwIgnoredNotifs=cagwIgnoredNotifs, cagwMaxSubscribersExceededNotifSeverity=cagwMaxSubscribersExceededNotifSeverity, cagwIdleModePageFailuresDwnlnkData=cagwIdleModePageFailuresDwnlnkData, cagwCreatedDataPaths=cagwCreatedDataPaths, cagwInvalidAddressDataPktsDrops=cagwInvalidAddressDataPktsDrops, cagwDhcpAckPackets=cagwDhcpAckPackets, cagwIdleModeLocUpdtFailures=cagwIdleModeLocUpdtFailures, cagwIpGreReceivedDataPkts=cagwIpGreReceivedDataPkts, cagwInstanceSessionRedundancyAdmin=cagwInstanceSessionRedundancyAdmin, cagwSlaProfileNotFound=cagwSlaProfileNotFound, cagwCoaSuccessNotifsSent=cagwCoaSuccessNotifsSent, cagwUserGrpEthGrePacketsReceived=cagwUserGrpEthGrePacketsReceived, cagwServiceNotifEnabled=cagwServiceNotifEnabled, cagwNotifMgmtGroup=cagwNotifMgmtGroup, cagwEthGreSentDataPkts=cagwEthGreSentDataPkts, ciscoAgwMIBComplianceRev1=ciscoAgwMIBComplianceRev1, cagwClassifierProfileNotFound=cagwClassifierProfileNotFound, ciscoAgwMIBNotifs=ciscoAgwMIBNotifs, cagwIdleModeLocUpdtPeriodic=cagwIdleModeLocUpdtPeriodic, cagwPathType=cagwPathType, cagwMsgResent=cagwMsgResent, cagwUserGrpBytesReceived=cagwUserGrpBytesReceived, ciscoAgwMaxSubscribersExceededAbateNotif=ciscoAgwMaxSubscribersExceededAbateNotif, cagwCurrentAutoProvSessions=cagwCurrentAutoProvSessions, cagwMaximumSubscribers=cagwMaximumSubscribers, cagwDownlinkPktDropUsrgrpAclDeny=cagwDownlinkPktDropUsrgrpAclDeny, cagwInvalidProtocolTypeDataPktsDrops=cagwInvalidProtocolTypeDataPktsDrops, cagwInstanceVersion=cagwInstanceVersion, cagwIgnoredServiceNotifs=cagwIgnoredServiceNotifs, cagwCurrentDataPaths=cagwCurrentDataPaths, cagwArpStatisticsEntry=cagwArpStatisticsEntry, cagwFlowNotFoundDataPktsDrops=cagwFlowNotFoundDataPktsDrops, cagwReceivedDataBytes=cagwReceivedDataBytes, cagwFailedCMACKeyUpdate=cagwFailedCMACKeyUpdate, cagwIdleModeExitMsBsInitiated=cagwIdleModeExitMsBsInitiated, cagwUserGrpIpGreBytesReceived=cagwUserGrpIpGreBytesReceived, cagwSentDataBytes=cagwSentDataBytes, cagwRejectedSessionUnapprovedBs=cagwRejectedSessionUnapprovedBs, cagwIdleModePageAttemptsDwnlnkData=cagwIdleModePageAttemptsDwnlnkData, cagwNetworkBehindMs=cagwNetworkBehindMs, ciscoAgwMaxBaseStationExceededAbateNotif=ciscoAgwMaxBaseStationExceededAbateNotif, cagwIdleModeEntryFailures=cagwIdleModeEntryFailures, cagwCreatedFlows=cagwCreatedFlows, cagwServiceFlowProfileNotFound=cagwServiceFlowProfileNotFound, cagwPathIpGrePacketsSentRev1=cagwPathIpGrePacketsSentRev1, cagwUserGrpIpGrePacketsReceived=cagwUserGrpIpGrePacketsReceived, cagwPathTable=cagwPathTable, cagwMessageStatistics=cagwMessageStatistics, cagwIdleModeExitBwgInitiated=cagwIdleModeExitBwgInitiated, cagwUserGrpCoaSuccessNotifsSent=cagwUserGrpCoaSuccessNotifsSent, cagwAbsentKeyDataPktsDrops=cagwAbsentKeyDataPktsDrops, cagwStateTable=cagwStateTable, cagwGlobalStatisticsTable=cagwGlobalStatisticsTable, cagwArpStatisticsTable=cagwArpStatisticsTable, cagwInstanceDescription=cagwInstanceDescription, cagwMsgReceived=cagwMsgReceived, cagwIdleModePageAttemptsLocUpdt=cagwIdleModePageAttemptsLocUpdt, cagwUserGrpPacketsReceived=cagwUserGrpPacketsReceived, cagwPktsDroppedMipIncomplete=cagwPktsDroppedMipIncomplete, cagwPathCurrentSessionsRev1=cagwPathCurrentSessionsRev1, cagwInstancePhysicalIndex=cagwInstancePhysicalIndex, cagwDhcpUnknownPackets=cagwDhcpUnknownPackets, cagwUserGrpDeletedSessions=cagwUserGrpDeletedSessions, cagwCreatedPmipEnabledSubs=cagwCreatedPmipEnabledSubs, cagwPodFailureNotifsSent=cagwPodFailureNotifsSent, cagwEncapErrorSignalingPktsDrops=cagwEncapErrorSignalingPktsDrops, cagwCurrentBaseStations=cagwCurrentBaseStations, cagwDhcpNakPackets=cagwDhcpNakPackets, cagwGlobalStatistics=cagwGlobalStatistics, cagwInstanceTable=cagwInstanceTable, ciscoAgwMIBConform=ciscoAgwMIBConform, cagwPathGroupRev1=cagwPathGroupRev1, cagwChecksumErrorDataPktsDrops=cagwChecksumErrorDataPktsDrops, cagwState=cagwState, cagwArpStatisticsGroup=cagwArpStatisticsGroup, cagwGlobalStatisticsGroupRev2Sup1=cagwGlobalStatisticsGroupRev2Sup1, ciscoAgwMIBComplianceRev3=ciscoAgwMIBComplianceRev3, cagwDhcpOfferPackets=cagwDhcpOfferPackets, cagwUserGrpServiceMode=cagwUserGrpServiceMode, cagwFlowPathNotFoundDataPktsDrops=cagwFlowPathNotFoundDataPktsDrops, cagwEthGreSentDataBytes=cagwEthGreSentDataBytes, cagwUserGrpIpGrePacketsSent=cagwUserGrpIpGrePacketsSent, cagwPodRequestsRecv=cagwPodRequestsRecv, cagwGeneratedMaxBsNotifs=cagwGeneratedMaxBsNotifs, cagwImpactedReason=cagwImpactedReason, cagwPathIpGreBytesReceivedRev1=cagwPathIpGreBytesReceivedRev1, ciscoAgwMIBCompliance=ciscoAgwMIBCompliance, cagwPathRemoteIpTypeRev1=cagwPathRemoteIpTypeRev1, cagwDhcpDiscoverPackets=cagwDhcpDiscoverPackets, cagwInstanceIndex=cagwInstanceIndex, cagwCreatedSubscribers=cagwCreatedSubscribers, cagwEthGreReceivedRedirectedBytes=cagwEthGreReceivedRedirectedBytes, cagwMaxSubscribersExceededNotifEnabled=cagwMaxSubscribersExceededNotifEnabled, cagwCoaFailureNotifsSent=cagwCoaFailureNotifsSent, cagwMaxBaseStationExceededNotifEnabled=cagwMaxBaseStationExceededNotifEnabled, cagwSentDataPkts=cagwSentDataPkts, cagwPktsDropPmipStaticIpHost=cagwPktsDropPmipStaticIpHost, cagwRejectedSessions=cagwRejectedSessions)
mibBuilder.exportSymbols("CISCO-ASN-GATEWAY-MIB", cagwFragmentedDataPktsDrops=cagwFragmentedDataPktsDrops, cagwPktsDroppedMulticastBroadcast=cagwPktsDroppedMulticastBroadcast, cagwPathLocalIpType=cagwPathLocalIpType, cagwPathRev1Table=cagwPathRev1Table, cagwGeneratedMaxSubscNotifs=cagwGeneratedMaxSubscNotifs, cagwProcessedSignalingPkts=cagwProcessedSignalingPkts, cagwIpGreReceivedRedirectedPkts=cagwIpGreReceivedRedirectedPkts, cagwDhcpProxyReleasePackets=cagwDhcpProxyReleasePackets, cagwRequeuedSignalingPkts=cagwRequeuedSignalingPkts, cagwIpGreSentDataBytes=cagwIpGreSentDataBytes, ciscoAgwMIBGroups=ciscoAgwMIBGroups, cagwUserGrpGroup=cagwUserGrpGroup, cagwDhcpStatisticsTable=cagwDhcpStatisticsTable, cagwDhcpProxyOfferPackets=cagwDhcpProxyOfferPackets, cagwGlobalStatisticsGroupRev1=cagwGlobalStatisticsGroupRev1, cagwDhcpStatisticsGroup=cagwDhcpStatisticsGroup, cagwNotifInfo=cagwNotifInfo, cagwPathBytesReceived=cagwPathBytesReceived, cagwPktsDroppedStaticIpHostNotAllowed=cagwPktsDroppedStaticIpHostNotAllowed, cagwArpPacketsDropped=cagwArpPacketsDropped, cagwNotifEnabled=cagwNotifEnabled, ciscoAgwServiceUpNotif=ciscoAgwServiceUpNotif, cagwCongestionSignalingPktsDrops=cagwCongestionSignalingPktsDrops, cagwMaximumBaseStations=cagwMaximumBaseStations, cagwDeletedPmipEnabledSubs=cagwDeletedPmipEnabledSubs, ciscoAgwMIBComplianceRev2=ciscoAgwMIBComplianceRev2, cagwDhcpReleasePackets=cagwDhcpReleasePackets, cagwAgedOutStaticHosts=cagwAgedOutStaticHosts, cagwPathCurrentSessions=cagwPathCurrentSessions, cagwGlobalStatisticsGroup=cagwGlobalStatisticsGroup, cagwDhcpLeaseQueryPackets=cagwDhcpLeaseQueryPackets, cagwInstanceGroup=cagwInstanceGroup, cagwPuntedDataPkts=cagwPuntedDataPkts, cagwCreatedBaseStations=cagwCreatedBaseStations, cagwDhcpProxyDiscoverPackets=cagwDhcpProxyDiscoverPackets, ciscoAgwMaxBaseStationExceededOnsetNotif=ciscoAgwMaxBaseStationExceededOnsetNotif, cagwMessageStatisticsGroup=cagwMessageStatisticsGroup, cagwPathEntry=cagwPathEntry, cagwPathIpGrePacketsReceivedRev1=cagwPathIpGrePacketsReceivedRev1, cagwRejectedHosts=cagwRejectedHosts, cagwFlowPathInvalidSourceDataPktsDrops=cagwFlowPathInvalidSourceDataPktsDrops, cagwCurrentFramedRouteSubs=cagwCurrentFramedRouteSubs, PYSNMP_MODULE_ID=ciscoAgwMIB, cagwEncapErrorDataPktsDrops=cagwEncapErrorDataPktsDrops, cagwEthGreReceivedDataPkts=cagwEthGreReceivedDataPkts, cagwIdleModeLocUpdtPgidChange=cagwIdleModeLocUpdtPgidChange, cagwUserGrpTable=cagwUserGrpTable, cagwUserGrpEthGrePacketsSent=cagwUserGrpEthGrePacketsSent, cagwPathStatistics=cagwPathStatistics)
