#
# PySNMP MIB module TRAPEZE-NETWORKS-AP-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRAPEZE-NETWORKS-AP-CONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, Gauge32, ObjectIdentity, Integer32, ModuleIdentity, TimeTicks, NotificationType, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "ObjectIdentity", "Integer32", "ModuleIdentity", "TimeTicks", "NotificationType", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "iso")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
TrpzApSerialNum, TrpzRadioType, TrpzRadioChannelWidth, TrpzApBias, TrpzApRadioIndex, TrpzRadioMode, TrpzApFingerprint, TrpzApPowerMode, TrpzChannelNum, TrpzApAttachType, TrpzRadioAntennaLocation, TrpzApNum, TrpzApLedMode, TrpzPowerLevel = mibBuilder.importSymbols("TRAPEZE-NETWORKS-AP-TC", "TrpzApSerialNum", "TrpzRadioType", "TrpzRadioChannelWidth", "TrpzApBias", "TrpzApRadioIndex", "TrpzRadioMode", "TrpzApFingerprint", "TrpzApPowerMode", "TrpzChannelNum", "TrpzApAttachType", "TrpzRadioAntennaLocation", "TrpzApNum", "TrpzApLedMode", "TrpzPowerLevel")
TrpzPhysPortNumberOrZero, = mibBuilder.importSymbols("TRAPEZE-NETWORKS-BASIC-TC", "TrpzPhysPortNumberOrZero")
TrpzSyslogSeverity, = mibBuilder.importSymbols("TRAPEZE-NETWORKS-EXTERNAL-SERVER-TC", "TrpzSyslogSeverity")
trpzMibs, = mibBuilder.importSymbols("TRAPEZE-NETWORKS-ROOT-MIB", "trpzMibs")
trpzApConfigMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 14525, 4, 14))
trpzApConfigMib.setRevisions(('2013-06-21 03:24', '2012-12-21 03:23', '2012-10-16 03:22', '2012-08-06 03:13', '2012-08-05 03:02', '2012-03-08 03:01', '2011-02-03 02:00', '2010-03-05 01:21', '2009-11-19 01:08',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: trpzApConfigMib.setRevisionsDescriptions(('v3.2.4: Obsoleted two objects (not supported anymore): trpzApConfRadioConfigAutoTuneMaxTxPower, trpzApConfApTemRadioConfAutoTuneMaxTxPower. (for 9.0 release)', "v3.2.3: New backup SSID mode (enum value in TrpzBackupSsidMode): 'always-on(4)'. Added seven columnar objects: trpzApConfApConfigCacheConfigEnabled, trpzApConfRemoteSiteAcPollingEnabled, trpzApConfRemoteSiteRadiusServerGroupName, trpzApConfRemoteSiteRadiusDeadtime, trpzApConfRemoteSiteRadiusTimeout, trpzApConfRemoteSiteRadiusRetransmit, trpzApConfRemoteSiteRadiusNasIdType; and one related TC: TrpzApRadiusNasIdType. (for 9.0 release)", 'v3.2.2: Added three tables: trpzApConfRadioProfile32Table, trpzApConfRadioProf32ServiceProfileTable, trpzApConfRadioProf32SnoopFilterTable; in order to replace: trpzApConfRadioProfileTable, trpzApConfRadioProfServiceProfileTable, trpzApConfRadioProfSnoopFilterTable; three columnar objects: trpzApConfApConfigApName2, trpzApConfRadioConfigRadioProfileName2, trpzApConfApTemRadioConfRadioProfileName2; in order to replace: trpzApConfApConfigApName, trpzApConfRadioConfigRadioProfileName, trpzApConfApTemRadioConfRadioProfileName; a columnar object in the deprecated Radio Profile table, to indicate the corresponding entry in the new table: trpzApConfRadioProfRadioProfileFullName; and a related TC: TrpzRadioProfileName32; in order to replace: TrpzRadioProfileName. (for 9.0 release)', 'v3.1.3: Obsoleted five objects (not supported anymore): trpzApConfRadioProfAutoTune11aChannelRange, trpzApConfRadioProfAutoTuneIgnoreClientsEnabled, trpzApConfRadioProfAutoTuneChannelEnabled, trpzApConfRadioProfAutoTuneChannelHolddownInterval, trpzApConfRadioProfAutoTuneChannelChangeInterval; and a related TC: TrpzRadioProfileAutoTuneChannelRange. (for 8.0 release)', 'v3.0.2: Updated the description of trpzApConfServProfM2UConversionEnabled to reflect the fact that multicast to unicast conversion is performed for all multicast IPv4 traffic, not just video traffic. This will be published in 7.7 MR2 release.', 'v3.0.1: Added three tables: trpzApConfRadioSnoopFilterTable, trpzApConfSnoopObserverTable, trpzApConfRemoteSiteTable; ten columnar objects: trpzApConfApConfigRemoteSiteName, trpzApConfApConfigPathMtu, trpzApConfApConfigHighLatencyModeEnabled, trpzApConfServProfBackupSsidMode, trpzApConfServProfBackupSsidTimeout, trpzApConfServProfBackupSsidKeepClients, trpzApConfServProfM2UConversionEnabled, trpzApConfServProfWebPortalLogoutForm, trpzApConfSnoopFilterObserverAddrType, trpzApConfSnoopFilterObserverAddr; and two related TCs: TrpzBackupSsidMode, TrpzSnoopObserverTxMode. (for 7.7 release)', 'v2.0.0: Added 11 objects and related TCs: trpzApConfApConfigLldpMode, trpzApConfApConfigLldpMedEnabled, trpzApConfApConfigLldpMedExtPowerViaMdiTlvSelected, trpzApConfApConfigLldpMedInventoryTlvSelected, trpzApConfApConfigApTunnelEnabled, trpzApConfApConfigDataSecurityEnabled, trpzApConfApConfigWanOutageModeEnabled, trpzApConfApConfigWanOutageExtendedTimeout, trpzApConfApConfigWanOutageEvaluationPeriod, trpzApConfRadioProfRFSpectralScanModeEnabled, trpzApConfRadioProfRFSpectralScanPriority. Obsoleted four objects (not supported anymore): trpzApConfServProfWpaIeCipherWep40Enabled, trpzApConfServProfWpaIeCipherWep104Enabled, trpzApConfServProfRsnIeCipherWep40Enabled, trpzApConfServProfRsnIeCipherWep104Enabled. (for 7.5 release)', 'v1.2.1: made a few objects writable: trpzApConfRadioProfBeaconInterval, trpzApConfRadioProfRtsThreshold, trpzApConfRadioProfFragThreshold (for 7.5 release)', 'v1.0.8: Initial version, for 7.1 release',))
if mibBuilder.loadTexts: trpzApConfigMib.setLastUpdated('201306210324Z')
if mibBuilder.loadTexts: trpzApConfigMib.setOrganization('Trapeze Networks')
if mibBuilder.loadTexts: trpzApConfigMib.setContactInfo('Trapeze Networks Technical Support www.trapezenetworks.com US: 866.TRPZ.TAC International: 925.474.2400 support@trapezenetworks.com')
if mibBuilder.loadTexts: trpzApConfigMib.setDescription("AP Configuration objects for Trapeze Networks wireless switches. AP = Access Point; AC = Access Controller (wireless switch), the device that runs a SNMP Agent implementing this MIB. Copyright 2009-2013 Trapeze Networks, Inc. All rights reserved. This Trapeze Networks SNMP Management Information Base Specification (Specification) embodies Trapeze Networks' confidential and proprietary intellectual property. Trapeze Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS' and Trapeze Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
class TrpzApTemplateName(TextualConvention, OctetString):
    description = 'AP Template Name, consists of printable ASCII characters between 0x21 (!), and 0x7d (}) with no leading, embedded, or trailing space. Cannot be a zero length string.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class TrpzRadioProfileName(TextualConvention, OctetString):
    description = "Radio Profile Name, consists of printable ASCII characters between 0x21 (!), and 0x7e (~) with no leading, embedded, or trailing space. Cannot be a zero length string. Deprecated by TrpzRadioProfileName32, which allows Radio Profile Names up to 32 characters long. Radio Profile Names longer than 16 characters will be truncated, last four characters will be replaced by tilde (~) and three digits. Example: '12345678901234567890' will appear as '123456789012~001' '12345678901234569999' will appear as '123456789012~002' etc. In case of a name collision, for example if '123456789012~002' is the full name of another Radio Profile, the next available three-digit suffix will be used: '12345678901234569999' will appear as '123456789012~003' instead."
    status = 'deprecated'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

class TrpzServiceProfileName(TextualConvention, OctetString):
    description = 'Service Profile Name, consists of printable ASCII characters between 0x21 (!), and 0x7d (}) with no leading, embedded, or trailing space. Cannot be a zero length string.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class TrpzSnoopFilterName(TextualConvention, OctetString):
    description = 'Snoop Filter Name, consists of printable ASCII characters between 0x21 (!), and 0x7d (}) with no leading, embedded, or trailing space. Cannot be a zero length string.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 15)

class TrpzServiceProfileSsidType(TextualConvention, Integer32):
    description = 'Enumeration of Service Types provided on a service profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("clear", 1), ("crypto", 2))

class TrpzServiceProfile11nMode(TextualConvention, Integer32):
    description = 'Enumeration of 802.11n modes for a service profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enable", 1), ("disable", 2), ("required", 3))

class TrpzServiceProfile11nFrameAggregationType(TextualConvention, Integer32):
    description = 'Enumeration of 802.11n frame aggregation types for a service profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("msdu", 1), ("mpdu", 2), ("all", 3), ("disable", 4))

class TrpzServiceProfile11nMsduMaxLength(TextualConvention, Integer32):
    description = 'Enumeration of 802.11n A-MSDU maximum lengths for a service profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("msdu-4k", 1), ("msdu-8k", 2))

class TrpzServiceProfile11nMpduMaxLength(TextualConvention, Integer32):
    description = 'Enumeration of 802.11n A-MPDU maximum lengths for a service profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("mpdu-8k", 1), ("mpdu-16k", 2), ("mpdu-32k", 3), ("mpdu-64k", 4))

class TrpzServiceProfileAuthFallthruType(TextualConvention, Integer32):
    description = 'Enumeration of Authentication Fallthrough types for a service profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("web-auth", 2), ("web-aaa-portal", 3), ("last-resort", 4))

class TrpzServiceProfileCacMode(TextualConvention, Integer32):
    description = 'Enumeration of Call Admission Control types for a service profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("session", 2), ("vendor", 3))

class TrpzRadioProfileCountermeasuresMode(TextualConvention, Integer32):
    description = 'Enumeration of the Countermeasure modes for a radio profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("all", 2), ("rogue", 3), ("configured", 4))

class TrpzRadioProfileRFScanChannelScope(TextualConvention, Integer32):
    description = 'Enumeration of RF scanning channel scopes for a radio profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("operating", 1), ("regulatory", 2), ("all", 3))

class TrpzRadioProfileAutoTuneChannelRange(TextualConvention, Integer32):
    description = 'Enumeration of Auto-Tune channel ranges for a radio profile. Obsoleted: not supported anymore.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("all-bands", 1), ("lower-bands", 2))

class TrpzRadioProfileRFScanMode(TextualConvention, Integer32):
    description = 'Enumeration of RF scanning modes for a radio profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("passive", 2))

class TrpzApLldpMode(TextualConvention, Integer32):
    description = 'Enumeration of LLDP modes for an AP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("tx", 2))

class TrpzRadioProfileRFSpectralScanPriority(TextualConvention, Integer32):
    description = 'Enumeration of Spectral Scan Priorities for a radio profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("data-first", 1), ("scan-first", 2))

class TrpzBackupSsidMode(TextualConvention, Integer32):
    description = 'Enumeration of remote-site backup SSID modes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 1), ("outage-only", 2), ("dual", 3), ("always-on", 4))

class TrpzSnoopObserverTxMode(TextualConvention, Integer32):
    description = 'Enumeration of transmission modes for snoop packets.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tzsp", 1), ("batched-tzsp", 2))

class TrpzRadioProfileName32(TextualConvention, OctetString):
    description = 'Radio Profile Name, consists of printable ASCII characters between 0x21 (!), and 0x7e (~) with no leading, embedded, or trailing space. Cannot be a zero length string. Deprecates TrpzRadioProfileName.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class TrpzApRadiusNasIdType(TextualConvention, Integer32):
    description = 'Enumeration of NAS-ID values for the RADIUS server group of a remote site.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ap-name", 1), ("ap-serial-id", 2))

trpzApConfigMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1))
trpzApConfApConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2), )
if mibBuilder.loadTexts: trpzApConfApConfigTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigTable.setDescription('A table describing all the APs currently configured on this AC.')
trpzApConfApConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApNum"))
if mibBuilder.loadTexts: trpzApConfApConfigEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigEntry.setDescription('Configuration for a particular AP that could be attached to the AC.')
trpzApConfApConfigApNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 1), TrpzApNum())
if mibBuilder.loadTexts: trpzApConfApConfigApNum.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigApNum.setDescription('The Number of this AP (administratively assigned).')
trpzApConfApConfigApAttachType = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 2), TrpzApAttachType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigApAttachType.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigApAttachType.setDescription('How this AP is attached to the AC (directly or via L2/L3 network).')
trpzApConfApConfigPhysPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 3), TrpzPhysPortNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigPhysPortNum.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigPhysPortNum.setDescription('Identifies the physical port used to attach this AP. Only valid for directly attached APs, otherwise will be zero.')
trpzApConfApConfigApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 4), TrpzApSerialNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigApSerialNum.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigApSerialNum.setDescription('The Serial Number used to identify this AP. Only valid for network attached APs, otherwise will be a zero length string.')
trpzApConfApConfigApModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigApModelName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigApModelName.setDescription('The Model name of this AP.')
trpzApConfApConfigFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 6), TrpzApFingerprint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigFingerprint.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigFingerprint.setDescription('The RSA key fingerprint configured on this AP (binary value: it is the MD5 hash of the public key of the RSA key pair). For directly attached APs the fingerprint is a zero length string.')
trpzApConfApConfigBias = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 7), TrpzApBias()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigBias.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigBias.setDescription('Bias (high/low/sticky).')
trpzApConfApConfigApTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigApTimeout.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigApTimeout.setDescription('The communication timeout for this AP, in seconds.')
trpzApConfApConfigApName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigApName.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfApConfigApName.setDescription("The configured Name for this AP. Names longer than 16 characters will be truncated (example: 'APNamelongerthan16chars' will be shown as 'APNamelongertha~'). Deprecated by trpzApConfApConfigApName2, which allows AP Names longer than 16 characters.")
trpzApConfApConfigContact = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigContact.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigContact.setDescription('The Contact information for this AP.')
trpzApConfApConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigLocation.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigLocation.setDescription('The Location information for this AP.')
trpzApConfApConfigBlinkEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigBlinkEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigBlinkEnabled.setDescription('Indicates whether the LED blink mode is enabled on this AP.')
trpzApConfApConfigForceImageDownloadEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigForceImageDownloadEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigForceImageDownloadEnabled.setDescription('Indicates whether this AP is forced to always download an image from the AC upon boot.')
trpzApConfApConfigFirmwareUpgradeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigFirmwareUpgradeEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigFirmwareUpgradeEnabled.setDescription('Indicates whether automatic boot firmware upgrade is enabled on this AP.')
trpzApConfApConfigLocalSwitchingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigLocalSwitchingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigLocalSwitchingEnabled.setDescription('Indicates whether local switching is enabled on this AP.')
trpzApConfApConfigPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 16), TrpzApPowerMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigPowerMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigPowerMode.setDescription('The mode in which this AP is supplying power to its radios.')
trpzApConfApConfigLedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 17), TrpzApLedMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigLedMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigLedMode.setDescription('LED Mode (auto/static/off).')
trpzApConfApConfigDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigDescription.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigDescription.setDescription('The configured Description for this AP.')
trpzApConfApConfigLldpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 19), TrpzApLldpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigLldpMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigLldpMode.setDescription('LLDP Mode (tx/disabled).')
trpzApConfApConfigLldpMedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigLldpMedEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigLldpMedEnabled.setDescription('Indicates whether LLDP-MED is enabled for this AP.')
trpzApConfApConfigLldpMedExtPowerViaMdiTlvSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigLldpMedExtPowerViaMdiTlvSelected.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigLldpMedExtPowerViaMdiTlvSelected.setDescription('Indicates whether LLDP-MED Extended Power via MDI TLV is selected for this AP.')
trpzApConfApConfigLldpMedInventoryTlvSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigLldpMedInventoryTlvSelected.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigLldpMedInventoryTlvSelected.setDescription('Indicates whether LLDP-MED Inventory TLV is selected for this AP.')
trpzApConfApConfigApTunnelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigApTunnelEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigApTunnelEnabled.setDescription('Indicates whether AP to AP tunnels are enabled for this AP.')
trpzApConfApConfigDataSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigDataSecurityEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigDataSecurityEnabled.setDescription('Indicates whether Data Security is enabled for this AP.')
trpzApConfApConfigWanOutageModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigWanOutageModeEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigWanOutageModeEnabled.setDescription('Indicates whether WAN Outage (remote) Mode is enabled for this AP.')
trpzApConfApConfigWanOutageExtendedTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigWanOutageExtendedTimeout.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigWanOutageExtendedTimeout.setDescription('The duration for which the AP can stay in WAN outage mode, in hours. A value of zero means the AP can stay in outage mode indefinitely.')
trpzApConfApConfigWanOutageEvaluationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigWanOutageEvaluationPeriod.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigWanOutageEvaluationPeriod.setDescription('The AC connection Evaluation Period for APs in WAN Outage mode, in seconds.')
trpzApConfApConfigRemoteSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigRemoteSiteName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigRemoteSiteName.setDescription('The name of the remote site that the AP is part of. An empty string means that the AP is not part of any remote site.')
trpzApConfApConfigPathMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 29), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigPathMtu.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigPathMtu.setDescription('The configured Maximum Transmission Unit (in bytes) for communication between AP and AC. The value 0 means that the MTU was not administratively configured.')
trpzApConfApConfigHighLatencyModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigHighLatencyModeEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigHighLatencyModeEnabled.setDescription('Indicates whether the high-latency mode is enabled for the AP.')
trpzApConfApConfigApName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigApName2.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigApName2.setDescription("The configured Name for this AP; defaults to AP<Number> (examples: 'AP01', 'AP22', 'AP333', 'AP4444'); could have been changed from CLI to a meaningful name, for example the location of the AP (example: 'MeetingRoom73'). Deprecates trpzApConfApConfigApName.")
trpzApConfApConfigCacheConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 2, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApConfigCacheConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigCacheConfigEnabled.setDescription("Indicates whether the configuration of the AP is saved on the AP itself, so that it won't be lost after reboot. To enable this setting, the AP must have outage mode enabled.")
trpzApConfRadioConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3), )
if mibBuilder.loadTexts: trpzApConfRadioConfigTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigTable.setDescription('A table describing the radios on all the APs currently configured on this AC.')
trpzApConfRadioConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigApNum"), (0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigRadioIndex"))
if mibBuilder.loadTexts: trpzApConfRadioConfigEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigEntry.setDescription('Configuration for a particular Radio on a particular AP that could be attached to the AC.')
trpzApConfRadioConfigApNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 1), TrpzApNum())
if mibBuilder.loadTexts: trpzApConfRadioConfigApNum.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigApNum.setDescription('The Number of the AP (administratively assigned).')
trpzApConfRadioConfigRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 2), TrpzApRadioIndex())
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioIndex.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioIndex.setDescription('The number of this Radio on the AP.')
trpzApConfRadioConfigRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 3), TrpzRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioType.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioType.setDescription('The configured Type of this radio (typeA, typeB, typeG, typeNA, typeNG)')
trpzApConfRadioConfigRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 4), TrpzRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioMode.setDescription('The configured Mode of this radio (enabled/disabled/sentry)')
trpzApConfRadioConfigRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 5), TrpzRadioProfileName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioProfileName.setDescription('Identifies the Radio Profile to be applied this radio, by short name, as it appears in the legacy Radio Profile table (trpzApConfRadioProfileTable). Deprecated by trpzApConfRadioConfigRadioProfileName2, which allows Radio Profile Names longer than 16 characters.')
trpzApConfRadioConfigChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 6), TrpzChannelNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigChannel.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigChannel.setDescription('The configured Channel Number of this radio.')
trpzApConfRadioConfigTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 7), TrpzPowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigTxPower.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigTxPower.setDescription('The configured Tx Power level of this radio.')
trpzApConfRadioConfigAutoTuneMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 8), TrpzPowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigAutoTuneMaxTxPower.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioConfigAutoTuneMaxTxPower.setDescription('The Maximum Tx Power that Auto Tune is allowed to set for this radio. Obsoleted: not supported anymore.')
trpzApConfRadioConfigAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigAntennaType.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigAntennaType.setDescription('The configured Antenna Type for this radio.')
trpzApConfRadioConfigAntennaLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 10), TrpzRadioAntennaLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigAntennaLocation.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigAntennaLocation.setDescription('The configured Antenna Location for this radio.')
trpzApConfRadioConfigLoadBalancingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigLoadBalancingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigLoadBalancingEnabled.setDescription('Indicates whether RF Load Balancing is enabled on this radio.')
trpzApConfRadioConfigLoadBalancingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigLoadBalancingGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigLoadBalancingGroup.setDescription('Indicates the RF Load Balancing group that this radio is assigned to.')
trpzApConfRadioConfigLoadRebalancingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigLoadRebalancingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigLoadRebalancingEnabled.setDescription('Indicates whether RF Load Rebalancing is enabled for this radio.')
trpzApConfRadioConfigRadioProfileName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioProfileName2.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigRadioProfileName2.setDescription('Identifies the Radio Profile to be applied to this radio. Deprecates trpzApConfRadioConfigRadioProfileName.')
trpzApConfApTemplateConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4), )
if mibBuilder.loadTexts: trpzApConfApTemplateConfigTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplateConfigTable.setDescription('A table describing all the AP Templates currently configured on this AC.')
trpzApConfApTemplateConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfApTemplateName"))
if mibBuilder.loadTexts: trpzApConfApTemplateConfigEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplateConfigEntry.setDescription('Template configuration for APs that could be attached to the AC.')
trpzApConfApTemplConfApTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 1), TrpzApTemplateName())
if mibBuilder.loadTexts: trpzApConfApTemplConfApTemplateName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfApTemplateName.setDescription('AP Template Name.')
trpzApConfApTemplConfApTemplateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemplConfApTemplateEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfApTemplateEnabled.setDescription('Indicates whether this AP Template is Enabled (can be used for bringing up APs).')
trpzApConfApTemplConfBias = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 3), TrpzApBias()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemplConfBias.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfBias.setDescription('Bias (high/low/sticky).')
trpzApConfApTemplConfApTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemplConfApTimeout.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfApTimeout.setDescription('The communication timeout for this AP Template, in seconds.')
trpzApConfApTemplConfBlinkEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemplConfBlinkEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfBlinkEnabled.setDescription('Indicates whether the LED blink mode is enabled on this AP Template.')
trpzApConfApTemplConfForceImageDownloadEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemplConfForceImageDownloadEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfForceImageDownloadEnabled.setDescription('Indicates whether this AP is forced to always download an image from the AC upon boot.')
trpzApConfApTemplConfFirmwareUpgradeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemplConfFirmwareUpgradeEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfFirmwareUpgradeEnabled.setDescription('Indicates whether automatic boot firmware upgrade is enabled on this AP Template.')
trpzApConfApTemplConfLocalSwitchingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemplConfLocalSwitchingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfLocalSwitchingEnabled.setDescription('Indicates whether local switching is enabled on this AP Template.')
trpzApConfApTemplConfPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 9), TrpzApPowerMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemplConfPowerMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfPowerMode.setDescription('The mode in which an AP using this Template will be supplying power to its radios.')
trpzApConfApTemplConfLedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 4, 1, 10), TrpzApLedMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemplConfLedMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplConfLedMode.setDescription('The LED Mode (auto/static/off) for an AP using this Template.')
trpzApConfApTemplateRadioConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5), )
if mibBuilder.loadTexts: trpzApConfApTemplateRadioConfigTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplateRadioConfigTable.setDescription('A table describing the radios for all the AP Templates currently configured on this AC.')
trpzApConfApTemplateRadioConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfApTemplateName"), (0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfRadioIndex"))
if mibBuilder.loadTexts: trpzApConfApTemplateRadioConfigEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplateRadioConfigEntry.setDescription('Template configuration for a particular Radio index on an AP Template configured on this AC.')
trpzApConfApTemRadioConfApTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1, 1), TrpzApTemplateName())
if mibBuilder.loadTexts: trpzApConfApTemRadioConfApTemplateName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemRadioConfApTemplateName.setDescription('AP Template Name.')
trpzApConfApTemRadioConfRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1, 2), TrpzApRadioIndex())
if mibBuilder.loadTexts: trpzApConfApTemRadioConfRadioIndex.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemRadioConfRadioIndex.setDescription('The number of this Radio on the AP Template.')
trpzApConfApTemRadioConfRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1, 3), TrpzRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemRadioConfRadioMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemRadioConfRadioMode.setDescription('The configured mode of a radio using this Template (enabled/disabled/sentry)')
trpzApConfApTemRadioConfRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1, 4), TrpzRadioProfileName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemRadioConfRadioProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfApTemRadioConfRadioProfileName.setDescription('Identifies the Radio Profile to be applied to a radio using this Template, by short name, as it appears in the legacy Radio Profile table (trpzApConfRadioProfileTable). Deprecated by trpzApConfApTemRadioConfRadioProfileName2, which allows Radio Profile Names longer than 16 characters.')
trpzApConfApTemRadioConfAutoTuneMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1, 5), TrpzPowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemRadioConfAutoTuneMaxTxPower.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfApTemRadioConfAutoTuneMaxTxPower.setDescription('The Maximum Tx Power that Auto Tune will be allowed to set for a radio using this Template. Obsoleted: not supported anymore.')
trpzApConfApTemRadioConfLoadBalancingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemRadioConfLoadBalancingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemRadioConfLoadBalancingEnabled.setDescription('Indicates whether RF Load Balancing will be enabled on a radio using this Template.')
trpzApConfApTemRadioConfLoadBalancingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemRadioConfLoadBalancingGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemRadioConfLoadBalancingGroup.setDescription('Indicates the RF Load Balancing group that a radio using this Template will be assigned to.')
trpzApConfApTemRadioConfLoadRebalancingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemRadioConfLoadRebalancingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemRadioConfLoadRebalancingEnabled.setDescription('Indicates whether RF Load Rebalancing will be enabled for a radio using this Template.')
trpzApConfApTemRadioConfRadioProfileName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfApTemRadioConfRadioProfileName2.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemRadioConfRadioProfileName2.setDescription('Identifies the Radio Profile to be applied to a radio using this Template. Deprecates trpzApConfApTemRadioConfRadioProfileName.')
trpzApConfRadioProfileTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6), )
if mibBuilder.loadTexts: trpzApConfRadioProfileTable.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfileTable.setDescription('A table describing the Radio Profiles currently configured on this AC. Deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRadioProfileName"))
if mibBuilder.loadTexts: trpzApConfRadioProfileEntry.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfileEntry.setDescription('Configuration for a particular Radio Profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 1), TrpzRadioProfileName())
if mibBuilder.loadTexts: trpzApConfRadioProfRadioProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRadioProfileName.setDescription('Name of this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trpzApConfRadioProfBeaconInterval.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfBeaconInterval.setDescription('Beacon Interval, time in thousandths of a second, for this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfDtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfDtimInterval.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfDtimInterval.setDescription('The number of times after every beacon that each AP radio in a radio profile sends a delivery traffic indication map (DTIM), for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfChannelWidth11na = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 4), TrpzRadioChannelWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfChannelWidth11na.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfChannelWidth11na.setDescription('802.11n Channel Width for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfMaxTxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfMaxTxLifetime.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfMaxTxLifetime.setDescription('The maximum transmit threshold for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfMaxRxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfMaxRxLifetime.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfMaxRxLifetime.setDescription('The maximum receive threshold for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trpzApConfRadioProfRtsThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRtsThreshold.setDescription('The RTS threshold for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfFragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trpzApConfRadioProfFragThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfFragThreshold.setDescription('The fragmentation threshold for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfLongXmitPreambleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfLongXmitPreambleEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfLongXmitPreambleEnabled.setDescription('Indicates whether an 802.11b/g AP radio using this radio profile transmits Long Preamble. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCountermeasuresMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 10), TrpzRadioProfileCountermeasuresMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCountermeasuresMode.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCountermeasuresMode.setDescription('Countermeasures Mode for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRFScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 11), TrpzRadioProfileRFScanMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfRFScanMode.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRFScanMode.setDescription('RF Scanning Mode for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRFScanChannelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 12), TrpzRadioProfileRFScanChannelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfRFScanChannelScope.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRFScanChannelScope.setDescription('RF scanning Channel Scope for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRFScanCTSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfRFScanCTSEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRFScanCTSEnabled.setDescription('Indicates whether the AP radios using this radio profile send CTS To Self packet before going off channel. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfAutoTune11aChannelRange = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 14), TrpzRadioProfileAutoTuneChannelRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTune11aChannelRange.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTune11aChannelRange.setDescription('The allowable 802.11a Channel Range used by Auto-Tune for the AP radios using this radio profile. Obsoleted: not supported anymore.')
trpzApConfRadioProfAutoTuneIgnoreClientsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTuneIgnoreClientsEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTuneIgnoreClientsEnabled.setDescription('Indicates whether the AP radios using this radio profile Ignore Client connections in Auto-Tune channel selections. Obsoleted: not supported anymore.')
trpzApConfRadioProfAutoTuneChannelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTuneChannelEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTuneChannelEnabled.setDescription('Indicates whether Channel Auto-Tuning is enabled for the AP radios using this radio profile. Obsoleted: not supported anymore.')
trpzApConfRadioProfAutoTuneChannelHolddownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTuneChannelHolddownInterval.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTuneChannelHolddownInterval.setDescription('Minimum Interval (in seconds) between Channel changes due to Auto-Tuning, for the AP radios using this radio profile. Obsoleted: not supported anymore.')
trpzApConfRadioProfAutoTuneChannelChangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTuneChannelChangeInterval.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTuneChannelChangeInterval.setDescription('The interval (in seconds) at which RF Auto-Tuning decides whether to Change the Channel for the AP radios using this radio profile. Obsoleted: not supported anymore.')
trpzApConfRadioProfAutoTunePowerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTunePowerEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTunePowerEnabled.setDescription('Indicates whether Power Auto-Tuning is enabled for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfAutoTunePowerRampInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTunePowerRampInterval.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTunePowerRampInterval.setDescription('Minimum Interval (in seconds) between Power changes due to Auto-Tuning, for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfAutoTunePowerChangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTunePowerChangeInterval.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfAutoTunePowerChangeInterval.setDescription('The interval (in seconds) at which RF Auto-Tuning decides whether to Change the Power for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfFairQueuingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfFairQueuingEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfFairQueuingEnabled.setDescription('Indicates whether weighted Fair Queuing is enabled for this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacBackgroundACMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacBackgroundACMandatory.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacBackgroundACMandatory.setDescription('Indicates whether Admission Control for Background traffic is Mandatory for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacBackgroundMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacBackgroundMaxUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacBackgroundMaxUtilization.setDescription('Maximum admission control limit for Background traffic, for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacBackgroundPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacBackgroundPolicingEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacBackgroundPolicingEnabled.setDescription('Indicates that admission control Policing for Background traffic is enabled, for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacBestEffortACMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacBestEffortACMandatory.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacBestEffortACMandatory.setDescription('Indicates that Admission Control for Best Effort traffic is Mandatory for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacBestEffortMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacBestEffortMaxUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacBestEffortMaxUtilization.setDescription('Maximum admission control limit for Best Effort traffic, for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacBestEffortPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacBestEffortPolicingEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacBestEffortPolicingEnabled.setDescription('Indicates that admission control Policing for Best Effort traffic is enabled, for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacVideoACMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacVideoACMandatory.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacVideoACMandatory.setDescription('Indicates that Admission Control for Video traffic is Mandatory for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacVideoMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacVideoMaxUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacVideoMaxUtilization.setDescription('Maximum admission control limit for Video traffic, for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacVideoPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacVideoPolicingEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacVideoPolicingEnabled.setDescription('Indicates that admission control Policing for Video traffic is enabled, for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacVoiceACMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacVoiceACMandatory.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacVoiceACMandatory.setDescription('Indicates that Admission Control for Voice traffic is Mandatory for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacVoiceMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacVoiceMaxUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacVoiceMaxUtilization.setDescription('Maximum admission control limit for Voice traffic, for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfCacVoicePolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfCacVoicePolicingEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfCacVoicePolicingEnabled.setDescription('Indicates that admission control Policing for Voice traffic is enabled, for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRfidTagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfRfidTagEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRfidTagEnabled.setDescription('Indicates whether an AP radio using this radio profile is enabled to function as location receivers in an AeroScout Visibility System. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfWmmPowerSaveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfWmmPowerSaveEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfWmmPowerSaveEnabled.setDescription('Indicates whether the AP radios using this radio profile enable power save mode on WMM clients. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRateEnforcementEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfRateEnforcementEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRateEnforcementEnabled.setDescription('Indicates whether data rates are enforced for the AP radios using this radio profile, which means that a connecting client must transmit at one of the mandatory or standard rates in order to associate with the AP. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfDfsChannelsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfDfsChannelsEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfDfsChannelsEnabled.setDescription('Indicates that the AP radios using this radio profile use DFS channels to meet regulatory requirements. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRFSpectralScanModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfRFSpectralScanModeEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRFSpectralScanModeEnabled.setDescription('Indicates whether Spectral Scanning Mode is enabled for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRFSpectralScanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 40), TrpzRadioProfileRFSpectralScanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfRFSpectralScanPriority.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRFSpectralScanPriority.setDescription('The Priority when a Spectral Scan sample time arrives for the AP radios using this radio profile. This table (trpzApConfRadioProfileTable) has been deprecated by trpzApConfRadioProfile32Table, whose index may be up to 32 characters long.')
trpzApConfRadioProfRadioProfileFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 6, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProfRadioProfileFullName.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfRadioProfileFullName.setDescription('The full name of the Radio Profile. Indicates the entry in the new Radio Profile table (trpzApConfRadioProfile32Table).')
trpzApConfRadioProfServiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 7), )
if mibBuilder.loadTexts: trpzApConfRadioProfServiceProfileTable.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfServiceProfileTable.setDescription('A table describing the currently configured connections between Radio Profiles and Service Profiles. Deprecated by trpzApConfRadioProf32ServiceProfileTable, which allows 32 characters long Radio Profile Names in the index.')
trpzApConfRadioProfServiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 7, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRpServpRadioProfileName"), (0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRpServpServiceProfileName"))
if mibBuilder.loadTexts: trpzApConfRadioProfServiceProfileEntry.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfServiceProfileEntry.setDescription('Connection between a Radio Profile and a Service Profile, currently configured on the AC. This table (trpzApConfRadioProfServiceProfileTable) has been deprecated by trpzApConfRadioProf32ServiceProfileTable, which allows 32 characters long Radio Profile Names in the index.')
trpzApConfRpServpRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 7, 1, 1), TrpzRadioProfileName())
if mibBuilder.loadTexts: trpzApConfRpServpRadioProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRpServpRadioProfileName.setDescription('Name of this Radio Profile. This table (trpzApConfRadioProfServiceProfileTable) has been deprecated by trpzApConfRadioProf32ServiceProfileTable, which allows 32 characters long Radio Profile Names in the index.')
trpzApConfRpServpServiceProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 7, 1, 2), TrpzServiceProfileName())
if mibBuilder.loadTexts: trpzApConfRpServpServiceProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRpServpServiceProfileName.setDescription('Name of a Service Profile connected to this Radio Profile. This table (trpzApConfRadioProfServiceProfileTable) has been deprecated by trpzApConfRadioProf32ServiceProfileTable, which allows 32 characters long Radio Profile Names in the index.')
trpzApConfRpServpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trpzApConfRpServpRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRpServpRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. To create a row, set this object to 'createAndGo'. To delete a row, set this object to 'destroy'. Only these two values 'createAndGo' and 'destroy' will be accepted. This table (trpzApConfRadioProfServiceProfileTable) has been deprecated by trpzApConfRadioProf32ServiceProfileTable, which allows 32 characters long Radio Profile Names in the index.")
trpzApConfRadioProfSnoopFilterTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 8), )
if mibBuilder.loadTexts: trpzApConfRadioProfSnoopFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfSnoopFilterTable.setDescription('A table describing the currently configured connections between Radio Profiles and Snoop Filters. Deprecated by trpzApConfRadioProf32SnoopFilterTable, which allows 32 characters long Radio Profile Names in the index.')
trpzApConfRadioProfSnoopFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 8, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRpSnoopfRadioProfileName"), (0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRpSnoopfSnoopFilterName"))
if mibBuilder.loadTexts: trpzApConfRadioProfSnoopFilterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRadioProfSnoopFilterEntry.setDescription('Connection between a Radio Profile and a Snoop Filter, currently configured on the AC. This table (trpzApConfRadioProfSnoopFilterTable) has been deprecated by trpzApConfRadioProf32SnoopFilterTable, which allows 32 characters long Radio Profile Names in the index.')
trpzApConfRpSnoopfRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 8, 1, 1), TrpzRadioProfileName())
if mibBuilder.loadTexts: trpzApConfRpSnoopfRadioProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRpSnoopfRadioProfileName.setDescription('Name of this Radio Profile. This table (trpzApConfRadioProfSnoopFilterTable) has been deprecated by trpzApConfRadioProf32SnoopFilterTable, which allows 32 characters long Radio Profile Names in the index.')
trpzApConfRpSnoopfSnoopFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 8, 1, 2), TrpzSnoopFilterName())
if mibBuilder.loadTexts: trpzApConfRpSnoopfSnoopFilterName.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRpSnoopfSnoopFilterName.setDescription('Name of a Snoop Filter connected to this Radio Profile. This table (trpzApConfRadioProfSnoopFilterTable) has been deprecated by trpzApConfRadioProf32SnoopFilterTable, which allows 32 characters long Radio Profile Names in the index.')
trpzApConfRpSnoopfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trpzApConfRpSnoopfRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: trpzApConfRpSnoopfRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. To create a row, set this object to 'createAndGo'. To delete a row, set this object to 'destroy'. Only these two values 'createAndGo' and 'destroy' will be accepted. This table (trpzApConfRadioProfSnoopFilterTable) has been deprecated by trpzApConfRadioProf32SnoopFilterTable, which allows 32 characters long Radio Profile Names in the index.")
trpzApConfServiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9), )
if mibBuilder.loadTexts: trpzApConfServiceProfileTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServiceProfileTable.setDescription('A table describing the Service Profiles currently configured on this AC.')
trpzApConfServiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfServiceProfileName"))
if mibBuilder.loadTexts: trpzApConfServiceProfileEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServiceProfileEntry.setDescription('Configuration for a particular Service Profile.')
trpzApConfServProfServiceProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 1), TrpzServiceProfileName())
if mibBuilder.loadTexts: trpzApConfServProfServiceProfileName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfServiceProfileName.setDescription('Name of this service profile')
trpzApConfServProfSsidType = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 2), TrpzServiceProfileSsidType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfSsidType.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfSsidType.setDescription('The type of this service profile (clear/crypto).')
trpzApConfServProfBeaconEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfBeaconEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfBeaconEnabled.setDescription('Indicates whether beacons are enabled for this service profile.')
trpzApConfServProf11naMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 4), TrpzServiceProfile11nMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProf11naMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProf11naMode.setDescription('Indicates the 802.11n (na) mode for this service profile.')
trpzApConfServProf11ngMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 5), TrpzServiceProfile11nMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProf11ngMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProf11ngMode.setDescription('Indicates the 802.11n (ng) mode for this service profile.')
trpzApConfServProf11nShortGuardIntervalEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProf11nShortGuardIntervalEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProf11nShortGuardIntervalEnabled.setDescription('Indicates whether short guard interval is enabled for this service profile.')
trpzApConfServProf11nFrameAggregation = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 7), TrpzServiceProfile11nFrameAggregationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProf11nFrameAggregation.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProf11nFrameAggregation.setDescription('Indicates the Frame Aggregation mode for this service profile.')
trpzApConfServProf11nMsduMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 8), TrpzServiceProfile11nMsduMaxLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProf11nMsduMaxLength.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProf11nMsduMaxLength.setDescription('The maximum MSDU length for this service profile.')
trpzApConfServProf11nMpduMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 9), TrpzServiceProfile11nMpduMaxLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProf11nMpduMaxLength.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProf11nMpduMaxLength.setDescription('The maximum MPDU length for this service profile.')
trpzApConfServProfAuthFallthru = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 10), TrpzServiceProfileAuthFallthruType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfAuthFallthru.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfAuthFallthru.setDescription('The authentication type to be attempted for users who do not match a 802.1X or MAC authentication rule, for this service profile.')
trpzApConfServProfWebAAAForm = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWebAAAForm.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWebAAAForm.setDescription('The custom login page that loads for WebAAA users, for this service profile.')
trpzApConfServProfSharedKeyAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfSharedKeyAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfSharedKeyAuthEnabled.setDescription('Indicates whether shared-key authentication is enabled for this service profile.')
trpzApConfServProfWpaIeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWpaIeEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWpaIeEnabled.setDescription('Indicates whether WPA IE beaconing is enabled for this service profile.')
trpzApConfServProfWpaIeCipherTkipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWpaIeCipherTkipEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWpaIeCipherTkipEnabled.setDescription('Indicates whether TKIP cipher is advertised in WPA IE, for this service profile.')
trpzApConfServProfWpaIeCipherCcmpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWpaIeCipherCcmpEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWpaIeCipherCcmpEnabled.setDescription('Indicates whether CCMP cipher is advertised in WPA IE, for this service profile.')
trpzApConfServProfWpaIeCipherWep40Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWpaIeCipherWep40Enabled.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfServProfWpaIeCipherWep40Enabled.setDescription('Indicates whether WEP-40 cipher is advertised in WPA IE, for this service profile. Obsoleted: not supported anymore.')
trpzApConfServProfWpaIeCipherWep104Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWpaIeCipherWep104Enabled.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfServProfWpaIeCipherWep104Enabled.setDescription('Indicates whether WEP-104 cipher is advertised in WPA IE, for this service profile. Obsoleted: not supported anymore.')
trpzApConfServProfWpaIeAuthDot1xEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWpaIeAuthDot1xEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWpaIeAuthDot1xEnabled.setDescription('Indicates whether 802.1X authentication is advertised in WPA IE, for this service profile.')
trpzApConfServProfWpaIeAuthPskEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWpaIeAuthPskEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWpaIeAuthPskEnabled.setDescription('Indicates whether Pre-Shared Key authentication is advertised in WPA IE, for this service profile.')
trpzApConfServProfRsnIeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfRsnIeEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfRsnIeEnabled.setDescription('Indicates whether RSN IE beaconing is enabled for this service profile.')
trpzApConfServProfRsnIeCipherTkipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfRsnIeCipherTkipEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfRsnIeCipherTkipEnabled.setDescription('Indicates whether TKIP cipher is advertised in RSN IE, for this service profile.')
trpzApConfServProfRsnIeCipherCcmpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfRsnIeCipherCcmpEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfRsnIeCipherCcmpEnabled.setDescription('Indicates whether CCMP cipher is advertised in RSN IE, for this service profile.')
trpzApConfServProfRsnIeCipherWep40Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfRsnIeCipherWep40Enabled.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfServProfRsnIeCipherWep40Enabled.setDescription('Indicates whether WEP-40 cipher is advertised in RSN IE, for this service profile. Obsoleted: not supported anymore.')
trpzApConfServProfRsnIeCipherWep104Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfRsnIeCipherWep104Enabled.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfServProfRsnIeCipherWep104Enabled.setDescription('Indicates whether WEP-104 cipher is advertised in RSN IE, for this service profile. Obsoleted: not supported anymore.')
trpzApConfServProfRsnIeAuthDot1xEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfRsnIeAuthDot1xEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfRsnIeAuthDot1xEnabled.setDescription('Indicates whether 802.1X authentication is advertised in RSN IE, for this service profile.')
trpzApConfServProfRsnIeAuthPskEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfRsnIeAuthPskEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfRsnIeAuthPskEnabled.setDescription('Indicates whether Pre-Shared Key authentication is advertised in RSN IE, for this service profile.')
trpzApConfServProfTkipMicCountermeasuresTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfTkipMicCountermeasuresTime.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfTkipMicCountermeasuresTime.setDescription('Indicates the TKIP MIC countermeasures time in milliseconds for this service profile. This is the length of time that AP radios use countermeasures if two Message Integrity Code (MIC) failures occur within 60 seconds.')
trpzApConfServProfMaxBandwidthKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfMaxBandwidthKbps.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfMaxBandwidthKbps.setDescription('The bandwidth limit for this service profile, in Kbits/second. A value of zero means unlimited.')
trpzApConfServProfCacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 29), TrpzServiceProfileCacMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfCacMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfCacMode.setDescription('The Call Admission Control (CAC) mode, for this service profile.')
trpzApConfServProfCacSessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfCacSessCount.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfCacSessCount.setDescription('The maximum number of active sessions a radio can have when session-based CAC is enabled, for this service profile.')
trpzApConfServProfUserIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfUserIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfUserIdleTimeout.setDescription('The number of seconds MSS has a session available for a client not sending data and is not responding to keepalives (idle-client probes). If the timer expires, the client session is changed to the Dissociated state, for this service profile.')
trpzApConfServProfIdleClientProbingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfIdleClientProbingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfIdleClientProbingEnabled.setDescription('Indicates whether the AC radio sends a unicast null-data frame to each client every 10 seconds, for this service profile.')
trpzApConfServProfShortRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfShortRetryCount.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfShortRetryCount.setDescription('The number of times a radio can send a short unicast frame without receiving an acknowledgment, for this service profile.')
trpzApConfServProfLongRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfLongRetryCount.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfLongRetryCount.setDescription('The number of times a radio can send a long unicast frame without receiving an acknowledgment, for this service profile.')
trpzApConfServProfProxyArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfProxyArpEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfProxyArpEnabled.setDescription('Indicates whether proxy ARP is enabled for this service profile.')
trpzApConfServProfDhcpRestrictEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfDhcpRestrictEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfDhcpRestrictEnabled.setDescription('Indicates whether only DHCP traffic is allowed until a newly associated client has been authenticated and authorized, for this service profile.')
trpzApConfServProfNoBroadcastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfNoBroadcastEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfNoBroadcastEnabled.setDescription('Indicates whether broadcast ARP and DHCP packets are converted to unicast for this service profile.')
trpzApConfServProfSygateOnDemandEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfSygateOnDemandEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfSygateOnDemandEnabled.setDescription('Indicates whether Sygate On-Demand Manager (SODA Manager) is enabled for this service profile.')
trpzApConfServProfEnforceChecksEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfEnforceChecksEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfEnforceChecksEnabled.setDescription('Indicates whether Enforcement of the SODA security checks is enabled for this service profile.')
trpzApConfServProfSodaRemediationAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfSodaRemediationAcl.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfSodaRemediationAcl.setDescription('Remediation page ACL to apply to the client when the failure page is loaded, for this service profile.')
trpzApConfServProfSodaSuccessPage = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfSodaSuccessPage.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfSodaSuccessPage.setDescription('Success page that is displayed on the client when a client successfully runs the checks performed by the SODA agent, for this service profile.')
trpzApConfServProfSodaFailurePage = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfSodaFailurePage.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfSodaFailurePage.setDescription('Failure page that is displayed on the client when the SODA agent checks fail, for this service profile.')
trpzApConfServProfSodaLogoutPage = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfSodaLogoutPage.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfSodaLogoutPage.setDescription('The page to load when a client closes the SODA virtual desktop and logs out of the network, for this service profile.')
trpzApConfServProfSodaAgentDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfSodaAgentDirectory.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfSodaAgentDirectory.setDescription('Specifies a different directory for the SODA agent files used for this service profile.')
trpzApConfServProfWebPortalSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWebPortalSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWebPortalSessionTimeout.setDescription('Time interval, in seconds, for which a Web Portal WebAAA session remains in the Deassociated state before being terminated automatically, for this service profile.')
trpzApConfServProfWebPortalAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWebPortalAcl.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWebPortalAcl.setDescription('Name of ACL used for filtering traffic for Web Portal users during authentication, for this service profile.')
trpzApConfServProfWebPortalLogoutEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 47), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWebPortalLogoutEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWebPortalLogoutEnabled.setDescription('Indicates whether the Web Portal logout functionality is enabled for this service profile.')
trpzApConfServProfWebPortalLogoutUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWebPortalLogoutUrl.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWebPortalLogoutUrl.setDescription('Indicates the Web Portal Logout URL for this service profile.')
trpzApConfServProfKeepInitialVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 49), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfKeepInitialVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfKeepInitialVlanEnabled.setDescription('Indicates whether, after roaming, the user keeps the VLAN assigned from the first connection, for this service profile.')
trpzApConfServProfMeshModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 50), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfMeshModeEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfMeshModeEnabled.setDescription('Indicates whether wireless mesh between APs is enabled for this service profile.')
trpzApConfServProfBridgingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 51), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfBridgingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfBridgingEnabled.setDescription('Indicates whether wireless bridging of traffic between APs is enabled for this service profile.')
trpzApConfServProfLoadBalanceExemptEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfLoadBalanceExemptEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfLoadBalanceExemptEnabled.setDescription('Indicates whether this service profile is exempted from load balancing.')
trpzApConfServProfM2UConversionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 53), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfM2UConversionEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfM2UConversionEnabled.setDescription('Indicates whether multicast IPv4 traffic on the wire is converted to unicast traffic for the wireless clients, for this service profile.')
trpzApConfServProfBackupSsidMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 54), TrpzBackupSsidMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfBackupSsidMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfBackupSsidMode.setDescription('Indicates the availability of backup SSIDs at a remote site. Backup SSIDs allow access to new clients when central site outage occurs.')
trpzApConfServProfBackupSsidTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 55), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfBackupSsidTimeout.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfBackupSsidTimeout.setDescription('Indicates how many seconds the backup SSIDs at a remote site will stay up after the outage ends. Value 0 means that the backup SSIDs will stay up indefinitely.')
trpzApConfServProfBackupSsidKeepClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfBackupSsidKeepClients.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfBackupSsidKeepClients.setDescription('Indicates whether the existing client sessions at a remote site will be kept or not when central site outage occurs.')
trpzApConfServProfWebPortalLogoutForm = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 9, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfServProfWebPortalLogoutForm.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServProfWebPortalLogoutForm.setDescription('The custom logout page that will be displayed for Web Portal users, for this service profile. An empty string means that the default page will be displayed.')
trpzApConfSnoopFilterTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 10), )
if mibBuilder.loadTexts: trpzApConfSnoopFilterTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopFilterTable.setDescription('A table describing the Snoop Filters currently configured on this AC.')
trpzApConfSnoopFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 10, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterName"))
if mibBuilder.loadTexts: trpzApConfSnoopFilterEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopFilterEntry.setDescription('Configuration for a particular Snoop Filter.')
trpzApConfSnoopFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 10, 1, 1), TrpzSnoopFilterName())
if mibBuilder.loadTexts: trpzApConfSnoopFilterName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopFilterName.setDescription('Name of this snoop filter.')
trpzApConfSnoopFilterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 10, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfSnoopFilterEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopFilterEnabled.setDescription('Indicates whether this snoop filter is enabled.')
trpzApConfSnoopFilterObserverAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 10, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfSnoopFilterObserverAddrType.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopFilterObserverAddrType.setDescription("The address type of 'trpzApConfSnoopFilterObserverAddr'. If no snoop observer is configured for a particular filter, this object will return 'unknown(0)' for that filter.")
trpzApConfSnoopFilterObserverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 10, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfSnoopFilterObserverAddr.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopFilterObserverAddr.setDescription("The IP address of the snoop observer. If no observer is configured for a particular snoop filter, this object will return an empty string for that filter. The type of this address is specified in 'trpzApConfSnoopFilterObserverAddrType'.")
trpzApConfRadioSnoopFilterTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 11), )
if mibBuilder.loadTexts: trpzApConfRadioSnoopFilterTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioSnoopFilterTable.setDescription('A table describing the associations of Snoop Filters with AP radios.')
trpzApConfRadioSnoopFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 11, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigApNum"), (0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigRadioIndex"), (0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterName"))
if mibBuilder.loadTexts: trpzApConfRadioSnoopFilterEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioSnoopFilterEntry.setDescription('Multiple snoop filters can be associated with one AP radio. A snoop filter can be associated with multiple AP radios. A combination of an AP number, a radio number and a filter name uniquely identifies the mapping of a filter to a specific radio.')
trpzApConfRadioSnoopFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 11, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trpzApConfRadioSnoopFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioSnoopFilterRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. To create a row, set this object to 'createAndGo'. To delete a row, set this object to 'destroy'. Only these two values 'createAndGo' and 'destroy' will be accepted.")
trpzApConfSnoopObserverTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 12), )
if mibBuilder.loadTexts: trpzApConfSnoopObserverTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopObserverTable.setDescription('A table describing the snoop observers currently configured on the AC. Snoop observers are hosts where snooped packets are sent.')
trpzApConfSnoopObserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 12, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopObserverTargetAddrType"), (0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopObserverTargetAddr"))
if mibBuilder.loadTexts: trpzApConfSnoopObserverEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopObserverEntry.setDescription('The configuration of a particular snoop observer.')
trpzApConfSnoopObserverTargetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 12, 1, 1), InetAddressType())
if mibBuilder.loadTexts: trpzApConfSnoopObserverTargetAddrType.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopObserverTargetAddrType.setDescription("The address type of 'trpzApConfSnoopObserverTargetAddr'.")
trpzApConfSnoopObserverTargetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 12, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: trpzApConfSnoopObserverTargetAddr.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopObserverTargetAddr.setDescription("The IP address of the snoop observer. The type of this address is specified in 'trpzApConfSnoopObserverTargetAddrType'.")
trpzApConfSnoopObserverSnapLength = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfSnoopObserverSnapLength.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopObserverSnapLength.setDescription('Indicates the maximum number of bytes from a filtered packet to be encapsulated in TZSP and sent to the observer. Value 0 means that the entire packet is copied and sent to the observer.')
trpzApConfSnoopObserverInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 12, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfSnoopObserverInterval.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopObserverInterval.setDescription('Indicates the snooping interval, in milliseconds, for the packets with the same source. Value 0 means no rate limit.')
trpzApConfSnoopObserverTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 12, 1, 5), TrpzSnoopObserverTxMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfSnoopObserverTxMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopObserverTxMode.setDescription('The mode of transmission of snoop packets to this observer.')
trpzApConfRemoteSiteTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13), )
if mibBuilder.loadTexts: trpzApConfRemoteSiteTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteTable.setDescription('A table describing the remote sites currently configured on the AC. A remote site is a group of APs situated in the same location (site/branch), other than the location of the controller.')
trpzApConfRemoteSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteName"))
if mibBuilder.loadTexts: trpzApConfRemoteSiteEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteEntry.setDescription('Description of a remote site currently configured on the AC.')
trpzApConfRemoteSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: trpzApConfRemoteSiteName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteName.setDescription('The name of the remote site.')
trpzApConfRemoteSiteCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(2, 2), ValueSizeConstraint(4, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteCountryCode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteCountryCode.setDescription("Indicates the country code used for the configuration of the APs at the remote site. The system country code is used by default, in which case this object will return the special value 'NONE'.")
trpzApConfRemoteSitePathMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 3), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSitePathMtu.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSitePathMtu.setDescription('The configured MTU between the APs at the remote site and the ACs at the central site. The value 0 means that the MTU was not administratively configured.')
trpzApConfRemoteSiteBackupSsidsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteBackupSsidsEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteBackupSsidsEnabled.setDescription('Indicates whether the backup SSIDs at this remote site are enabled or not. Backup SSIDs allow access to new clients when central site outage occurs.')
trpzApConfRemoteSiteLogServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerEnabled.setDescription('Indicates whether the APs at the remote site will send syslog messages to a log server.')
trpzApConfRemoteSiteLogServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerAddrType.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerAddrType.setDescription("The address type of 'trpzApConfRemoteSiteLogServerAddr'.")
trpzApConfRemoteSiteLogServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerAddr.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerAddr.setDescription("The address of the log server used by the APs in the remote site. The type of this address is specified in 'trpzApConfRemoteSiteLogServerAddrType'.")
trpzApConfRemoteSiteLogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerPort.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerPort.setDescription('The port number of the log server used by the APs in the remote site.')
trpzApConfRemoteSiteLogServerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 9), TrpzSyslogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerSeverity.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteLogServerSeverity.setDescription('The minimum severity of the messages sent by the APs in the remote site to the syslog server.')
trpzApConfRemoteSiteAcPollingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteAcPollingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteAcPollingEnabled.setDescription("Indicates whether the AC can poll the APs in this remote site to obtain full information about the AP-managed client sessions. When it is 'false(2)', the AC has limited information about the AP-managed sessions in this remote site.")
trpzApConfRemoteSiteRadiusServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusServerGroupName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusServerGroupName.setDescription('Indicates the name of the group of RADIUS servers used in the remote site. An empty string means that no RADIUS server group has been configured for the remote site.')
trpzApConfRemoteSiteRadiusDeadtime = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusDeadtime.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusDeadtime.setDescription('The deadtime value configured for the RADIUS server group of this remote site. This value has precedence over the individual deadtime values of each server in the server group. If RADIUS deadtime is not configured for this remote site, this object will not have an instance in the current row.')
trpzApConfRemoteSiteRadiusTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusTimeout.setDescription('The timeout value configured for the RADIUS server group of this remote site. This value has precedence over the individual timeout values of each server in the server group. If RADIUS timeout is not configured for this remote site, this object will not have an instance in the current row.')
trpzApConfRemoteSiteRadiusRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusRetransmit.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusRetransmit.setDescription('The retransmit value configured for the RADIUS server group of this remote site. This value has precedence over the individual retransmit values of each server in the server group. If RADIUS retransmit is not configured for this remote site, this object will not have an instance in the current row.')
trpzApConfRemoteSiteRadiusNasIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 13, 1, 15), TrpzApRadiusNasIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusNasIdType.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteRadiusNasIdType.setDescription('The NAS-ID type configured for the RADIUS server group of this remote site.')
trpzApConfRadioProfile32Table = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14), )
if mibBuilder.loadTexts: trpzApConfRadioProfile32Table.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProfile32Table.setDescription('A table describing the Radio Profiles currently configured on this AC. Deprecates trpzApConfRadioProfileTable.')
trpzApConfRadioProfile32Entry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32RadioProfileName"))
if mibBuilder.loadTexts: trpzApConfRadioProfile32Entry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProfile32Entry.setDescription('Configuration for a particular Radio Profile.')
trpzApConfRadioProf32RadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 1), TrpzRadioProfileName32())
if mibBuilder.loadTexts: trpzApConfRadioProf32RadioProfileName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32RadioProfileName.setDescription('Name of this radio profile.')
trpzApConfRadioProf32BeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32BeaconInterval.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32BeaconInterval.setDescription('Beacon Interval, time in thousandths of a second, for this radio profile.')
trpzApConfRadioProf32DtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32DtimInterval.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32DtimInterval.setDescription('The number of times after every beacon that each AP radio in a radio profile sends a delivery traffic indication map (DTIM), for the AP radios using this radio profile.')
trpzApConfRadioProf32ChannelWidth11na = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 4), TrpzRadioChannelWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32ChannelWidth11na.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32ChannelWidth11na.setDescription('802.11n Channel Width for the AP radios using this radio profile.')
trpzApConfRadioProf32MaxTxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32MaxTxLifetime.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32MaxTxLifetime.setDescription('The maximum transmit threshold for the AP radios using this radio profile.')
trpzApConfRadioProf32MaxRxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32MaxRxLifetime.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32MaxRxLifetime.setDescription('The maximum receive threshold for the AP radios using this radio profile.')
trpzApConfRadioProf32RtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32RtsThreshold.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32RtsThreshold.setDescription('The RTS threshold for the AP radios using this radio profile.')
trpzApConfRadioProf32FragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32FragThreshold.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32FragThreshold.setDescription('The fragmentation threshold for the AP radios using this radio profile.')
trpzApConfRadioProf32LongXmitPreambleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32LongXmitPreambleEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32LongXmitPreambleEnabled.setDescription('Indicates whether an 802.11b/g AP radio using this radio profile transmits Long Preamble.')
trpzApConfRadioProf32CountermeasuresMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 10), TrpzRadioProfileCountermeasuresMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CountermeasuresMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CountermeasuresMode.setDescription('Countermeasures Mode for the AP radios using this radio profile.')
trpzApConfRadioProf32RFScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 11), TrpzRadioProfileRFScanMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32RFScanMode.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32RFScanMode.setDescription('RF Scanning Mode for the AP radios using this radio profile.')
trpzApConfRadioProf32RFScanChannelScope = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 12), TrpzRadioProfileRFScanChannelScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32RFScanChannelScope.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32RFScanChannelScope.setDescription('RF scanning Channel Scope for the AP radios using this radio profile.')
trpzApConfRadioProf32RFScanCTSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32RFScanCTSEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32RFScanCTSEnabled.setDescription('Indicates whether the AP radios using this radio profile send CTS To Self packet before going off channel.')
trpzApConfRadioProf32AutoTunePowerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32AutoTunePowerEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32AutoTunePowerEnabled.setDescription('Indicates whether Power Auto-Tuning is enabled for the AP radios using this radio profile.')
trpzApConfRadioProf32AutoTunePowerRampInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32AutoTunePowerRampInterval.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32AutoTunePowerRampInterval.setDescription('Minimum Interval (in seconds) between Power changes due to Auto-Tuning, for the AP radios using this radio profile.')
trpzApConfRadioProf32AutoTunePowerChangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32AutoTunePowerChangeInterval.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32AutoTunePowerChangeInterval.setDescription('The interval (in seconds) at which RF Auto-Tuning decides whether to Change the Power for the AP radios using this radio profile.')
trpzApConfRadioProf32FairQueuingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32FairQueuingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32FairQueuingEnabled.setDescription('Indicates whether weighted Fair Queuing is enabled for this radio profile.')
trpzApConfRadioProf32CacBackgroundACMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBackgroundACMandatory.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBackgroundACMandatory.setDescription('Indicates whether Admission Control for Background traffic is Mandatory for the AP radios using this radio profile.')
trpzApConfRadioProf32CacBackgroundMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBackgroundMaxUtilization.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBackgroundMaxUtilization.setDescription('Maximum admission control limit for Background traffic, for the AP radios using this radio profile.')
trpzApConfRadioProf32CacBackgroundPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBackgroundPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBackgroundPolicingEnabled.setDescription('Indicates that admission control Policing for Background traffic is enabled, for the AP radios using this radio profile.')
trpzApConfRadioProf32CacBestEffortACMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBestEffortACMandatory.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBestEffortACMandatory.setDescription('Indicates that Admission Control for Best Effort traffic is Mandatory for the AP radios using this radio profile.')
trpzApConfRadioProf32CacBestEffortMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBestEffortMaxUtilization.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBestEffortMaxUtilization.setDescription('Maximum admission control limit for Best Effort traffic, for the AP radios using this radio profile.')
trpzApConfRadioProf32CacBestEffortPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBestEffortPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacBestEffortPolicingEnabled.setDescription('Indicates that admission control Policing for Best Effort traffic is enabled, for the AP radios using this radio profile.')
trpzApConfRadioProf32CacVideoACMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVideoACMandatory.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVideoACMandatory.setDescription('Indicates that Admission Control for Video traffic is Mandatory for the AP radios using this radio profile.')
trpzApConfRadioProf32CacVideoMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVideoMaxUtilization.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVideoMaxUtilization.setDescription('Maximum admission control limit for Video traffic, for the AP radios using this radio profile.')
trpzApConfRadioProf32CacVideoPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVideoPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVideoPolicingEnabled.setDescription('Indicates that admission control Policing for Video traffic is enabled, for the AP radios using this radio profile.')
trpzApConfRadioProf32CacVoiceACMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVoiceACMandatory.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVoiceACMandatory.setDescription('Indicates that Admission Control for Voice traffic is Mandatory for the AP radios using this radio profile.')
trpzApConfRadioProf32CacVoiceMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVoiceMaxUtilization.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVoiceMaxUtilization.setDescription('Maximum admission control limit for Voice traffic, for the AP radios using this radio profile.')
trpzApConfRadioProf32CacVoicePolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVoicePolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32CacVoicePolicingEnabled.setDescription('Indicates that admission control Policing for Voice traffic is enabled, for the AP radios using this radio profile.')
trpzApConfRadioProf32RfidTagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32RfidTagEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32RfidTagEnabled.setDescription('Indicates whether an AP radio using this radio profile is enabled to function as location receivers in an AeroScout Visibility System.')
trpzApConfRadioProf32WmmPowerSaveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32WmmPowerSaveEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32WmmPowerSaveEnabled.setDescription('Indicates whether the AP radios using this radio profile enable power save mode on WMM clients.')
trpzApConfRadioProf32RateEnforcementEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32RateEnforcementEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32RateEnforcementEnabled.setDescription('Indicates whether data rates are enforced for the AP radios using this radio profile, which means that a connecting client must transmit at one of the mandatory or standard rates in order to associate with the AP.')
trpzApConfRadioProf32DfsChannelsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32DfsChannelsEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32DfsChannelsEnabled.setDescription('Indicates that the AP radios using this radio profile use DFS channels to meet regulatory requirements.')
trpzApConfRadioProf32RFSpectralScanModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32RFSpectralScanModeEnabled.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32RFSpectralScanModeEnabled.setDescription('Indicates whether Spectral Scanning Mode is enabled for the AP radios using this radio profile.')
trpzApConfRadioProf32RFSpectralScanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 14, 1, 35), TrpzRadioProfileRFSpectralScanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpzApConfRadioProf32RFSpectralScanPriority.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32RFSpectralScanPriority.setDescription('The Priority when a Spectral Scan sample time arrives for the AP radios using this radio profile.')
trpzApConfRadioProf32ServiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 15), )
if mibBuilder.loadTexts: trpzApConfRadioProf32ServiceProfileTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32ServiceProfileTable.setDescription('A table describing the currently configured connections between Radio Profiles and Service Profiles. Deprecates trpzApConfRadioProfServiceProfileTable.')
trpzApConfRadioProf32ServiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 15, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRp32ServpRadioProfileName"), (0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRp32ServpServiceProfileName"))
if mibBuilder.loadTexts: trpzApConfRadioProf32ServiceProfileEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32ServiceProfileEntry.setDescription('Connection between a Radio Profile and a Service Profile, currently configured on the AC.')
trpzApConfRp32ServpRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 15, 1, 1), TrpzRadioProfileName32())
if mibBuilder.loadTexts: trpzApConfRp32ServpRadioProfileName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRp32ServpRadioProfileName.setDescription('Name of this Radio Profile.')
trpzApConfRp32ServpServiceProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 15, 1, 2), TrpzServiceProfileName())
if mibBuilder.loadTexts: trpzApConfRp32ServpServiceProfileName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRp32ServpServiceProfileName.setDescription('Name of a Service Profile connected to this Radio Profile.')
trpzApConfRp32ServpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trpzApConfRp32ServpRowStatus.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRp32ServpRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. To create a row, set this object to 'createAndGo'. To delete a row, set this object to 'destroy'. Only these two values 'createAndGo' and 'destroy' will be accepted.")
trpzApConfRadioProf32SnoopFilterTable = MibTable((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 16), )
if mibBuilder.loadTexts: trpzApConfRadioProf32SnoopFilterTable.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32SnoopFilterTable.setDescription('A table describing the currently configured connections between Radio Profiles and Snoop Filters. Deprecates trpzApConfRadioProfSnoopFilterTable.')
trpzApConfRadioProf32SnoopFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 16, 1), ).setIndexNames((0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRp32SnoopfRadioProfileName"), (0, "TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRp32SnoopfSnoopFilterName"))
if mibBuilder.loadTexts: trpzApConfRadioProf32SnoopFilterEntry.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32SnoopFilterEntry.setDescription('Connection between a Radio Profile and a Snoop Filter, currently configured on the AC.')
trpzApConfRp32SnoopfRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 16, 1, 1), TrpzRadioProfileName32())
if mibBuilder.loadTexts: trpzApConfRp32SnoopfRadioProfileName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRp32SnoopfRadioProfileName.setDescription('Name of this Radio Profile.')
trpzApConfRp32SnoopfSnoopFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 16, 1, 2), TrpzSnoopFilterName())
if mibBuilder.loadTexts: trpzApConfRp32SnoopfSnoopFilterName.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRp32SnoopfSnoopFilterName.setDescription('Name of a Snoop Filter connected to this Radio Profile.')
trpzApConfRp32SnoopfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14525, 4, 14, 1, 16, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trpzApConfRp32SnoopfRowStatus.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRp32SnoopfRowStatus.setDescription("This object is used to create a new row or delete an existing row in this table. To create a row, set this object to 'createAndGo'. To delete a row, set this object to 'destroy'. Only these two values 'createAndGo' and 'destroy' will be accepted.")
trpzApConfigConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2))
trpzApConfigCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 1))
trpzApConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2))
trpzApConfigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 1, 1)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateRadioConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfileTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfServiceProfileTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfSnoopFilterTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServiceProfileTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfigCompliance = trpzApConfigCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfigCompliance.setDescription('The compliance statement for devices that implement AP Config MIB.')
trpzApConfigComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 1, 2)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLldpGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigTunnelGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigRemoteApGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateRadioConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfileTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfileRFSpectralScanGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfServiceProfileTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfSnoopFilterTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServiceProfileTableGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfigComplianceRev2 = trpzApConfigComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfigComplianceRev2.setDescription('The compliance statement for devices that implement AP Config MIB. This compliance statement is for releases 7.5 to 7.6 of AC (wireless switch) software. This compliance statement is replaced by trpzApConfigComplianceRev3.')
trpzApConfigComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 1, 3)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigTableGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLldpGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigTunnelGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigRemoteApGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateRadioConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfileTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfileRFSpectralScanGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfServiceProfileTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfSnoopFilterTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterTableGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioSnoopFilterTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopObserverTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServiceProfileTableGroupRev3"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfigComplianceRev3 = trpzApConfigComplianceRev3.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfigComplianceRev3.setDescription('The compliance statement for devices that implement AP Config MIB. This compliance statement is for release 7.7 of AC (wireless switch) software. This compliance statement is replaced by trpzApConfigComplianceRev4.')
trpzApConfigComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 1, 4)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigTableGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLldpGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigTunnelGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigRemoteApGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateRadioConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfileTableGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfileRFSpectralScanGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfServiceProfileTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfSnoopFilterTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterTableGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioSnoopFilterTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopObserverTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServiceProfileTableGroupRev3"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfigComplianceRev4 = trpzApConfigComplianceRev4.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfigComplianceRev4.setDescription('The compliance statement for devices that implement AP Config MIB. This compliance statement is for release 8.0 of AC (wireless switch) software. This compliance statement is replaced by trpzApConfigComplianceRev5.')
trpzApConfigComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 1, 5)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLldpGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigTunnelGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigRemoteApGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateConfigTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterTableGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioSnoopFilterTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopObserverTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServiceProfileTableGroupRev3"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigTableGroupRev3"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigTableGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplateRadioConfigTableGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfile32TableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfileRFSpectralScanGroupRev2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32ServiceProfileTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32SnoopFilterTableGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteTableGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfigComplianceRev5 = trpzApConfigComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: trpzApConfigComplianceRev5.setDescription('The compliance statement for devices that implement AP Config MIB. This compliance statement is for releases 9.0 and greater of AC (wireless switch) software.')
trpzApConfApConfigTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 1)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApAttachType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigPhysPortNum"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApSerialNum"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApModelName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigFingerprint"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigBias"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigContact"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLocation"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigBlinkEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigForceImageDownloadEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigFirmwareUpgradeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLocalSwitchingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigPowerMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLedMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfApConfigTableGroup = trpzApConfApConfigTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfApConfigTableGroup.setDescription('Group of columnar objects implemented to provide AP Configuration info in releases 7.1 to 7.6. Replaced by trpzApConfApConfigTableGroupRev2.')
trpzApConfRadioConfigTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 2)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigRadioType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigRadioMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigRadioProfileName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigChannel"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigTxPower"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigAutoTuneMaxTxPower"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigAntennaType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigAntennaLocation"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigLoadBalancingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigLoadBalancingGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigLoadRebalancingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioConfigTableGroup = trpzApConfRadioConfigTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioConfigTableGroup.setDescription('Group of columnar objects implemented to provide Radio Configuration info in releases 7.1 to 8.0. Replaced by trpzApConfRadioConfigTableGroupRev2.')
trpzApConfApTemplateConfigTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 3)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfApTemplateEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfBias"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfApTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfBlinkEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfForceImageDownloadEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfFirmwareUpgradeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfLocalSwitchingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfPowerMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemplConfLedMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfApTemplateConfigTableGroup = trpzApConfApTemplateConfigTableGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplateConfigTableGroup.setDescription('Group of columnar objects implemented to provide AP Configuration Template info in releases 7.1 and greater.')
trpzApConfApTemplateRadioConfigTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 4)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfRadioMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfRadioProfileName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfAutoTuneMaxTxPower"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfLoadBalancingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfLoadBalancingGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfLoadRebalancingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfApTemplateRadioConfigTableGroup = trpzApConfApTemplateRadioConfigTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfApTemplateRadioConfigTableGroup.setDescription('Group of columnar objects implemented to provide Radio Configuration Template info in releases 7.1 to 8.0. Replaced by trpzApConfApTemplateRadioConfigTableGroupRev2.')
trpzApConfRadioProfileTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 5)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfBeaconInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfDtimInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfChannelWidth11na"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfMaxTxLifetime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfMaxRxLifetime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRtsThreshold"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfFragThreshold"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfLongXmitPreambleEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCountermeasuresMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRFScanMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRFScanChannelScope"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRFScanCTSEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTune11aChannelRange"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTuneIgnoreClientsEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTuneChannelEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTuneChannelHolddownInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTuneChannelChangeInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTunePowerEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTunePowerRampInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTunePowerChangeInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfFairQueuingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBackgroundACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBackgroundMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBackgroundPolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBestEffortACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBestEffortMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBestEffortPolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVideoACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVideoMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVideoPolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVoiceACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVoiceMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVoicePolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRfidTagEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfWmmPowerSaveEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRateEnforcementEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfDfsChannelsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioProfileTableGroup = trpzApConfRadioProfileTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfileTableGroup.setDescription('Group of columnar objects implemented to provide Radio Profile configuration info in releases 7.1 to 7.7. Replaced by trpzApConfRadioProfileTableGroupRev2.')
trpzApConfRadioProfServiceProfileTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 6)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRpServpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioProfServiceProfileTableGroup = trpzApConfRadioProfServiceProfileTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfServiceProfileTableGroup.setDescription('Group of columnar objects implemented to provide Service Profiles associated to each Radio Profile in releases 7.1 to 8.0. Replaced by trpzApConfRadioProf32ServiceProfileTableGroup.')
trpzApConfRadioProfSnoopFilterTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 7)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRpSnoopfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioProfSnoopFilterTableGroup = trpzApConfRadioProfSnoopFilterTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfSnoopFilterTableGroup.setDescription('Group of columnar objects implemented to provide Snoop Filters associated to each Radio Profile in releases 7.1 to 8.0. Replaced by trpzApConfRadioProf32SnoopFilterTableGroup.')
trpzApConfServiceProfileTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 8)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSsidType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfBeaconEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11naMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11ngMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nShortGuardIntervalEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nFrameAggregation"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nMsduMaxLength"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nMpduMaxLength"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfAuthFallthru"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebAAAForm"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSharedKeyAuthEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeCipherTkipEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeCipherCcmpEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeCipherWep40Enabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeCipherWep104Enabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeAuthDot1xEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeAuthPskEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeCipherTkipEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeCipherCcmpEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeCipherWep40Enabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeCipherWep104Enabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeAuthDot1xEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeAuthPskEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfTkipMicCountermeasuresTime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfMaxBandwidthKbps"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfCacMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfCacSessCount"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfUserIdleTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfIdleClientProbingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfShortRetryCount"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfLongRetryCount"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfProxyArpEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfDhcpRestrictEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfNoBroadcastEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSygateOnDemandEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfEnforceChecksEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaRemediationAcl"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaSuccessPage"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaFailurePage"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaLogoutPage"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaAgentDirectory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalSessionTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalAcl"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalLogoutEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalLogoutUrl"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfKeepInitialVlanEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfMeshModeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfBridgingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfLoadBalanceExemptEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfServiceProfileTableGroup = trpzApConfServiceProfileTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfServiceProfileTableGroup.setDescription('Group of columnar objects implemented to provide Service Profile configuration info in releases 7.1 and greater.')
trpzApConfSnoopFilterTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 9)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfSnoopFilterTableGroup = trpzApConfSnoopFilterTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfSnoopFilterTableGroup.setDescription('Group of columnar objects implemented to provide Snoop Filter configuration info in releases 7.1 to 7.6. Replaced by trpzApConfSnoopFilterTableGroupRev2.')
trpzApConfServiceProfileTableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 10)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSsidType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfBeaconEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11naMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11ngMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nShortGuardIntervalEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nFrameAggregation"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nMsduMaxLength"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nMpduMaxLength"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfAuthFallthru"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebAAAForm"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSharedKeyAuthEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeCipherTkipEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeCipherCcmpEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeAuthDot1xEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeAuthPskEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeCipherTkipEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeCipherCcmpEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeAuthDot1xEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeAuthPskEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfTkipMicCountermeasuresTime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfMaxBandwidthKbps"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfCacMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfCacSessCount"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfUserIdleTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfIdleClientProbingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfShortRetryCount"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfLongRetryCount"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfProxyArpEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfDhcpRestrictEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfNoBroadcastEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSygateOnDemandEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfEnforceChecksEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaRemediationAcl"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaSuccessPage"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaFailurePage"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaLogoutPage"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaAgentDirectory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalSessionTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalAcl"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalLogoutEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalLogoutUrl"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfKeepInitialVlanEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfMeshModeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfBridgingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfLoadBalanceExemptEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfServiceProfileTableGroupRev2 = trpzApConfServiceProfileTableGroupRev2.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfServiceProfileTableGroupRev2.setDescription('Group of columnar objects implemented to provide Service Profile configuration info in releases 7.5 to 7.6. Replaced by trpzApConfServiceProfileTableGroupRev3.')
trpzApConfApConfigLldpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 11)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLldpMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLldpMedEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLldpMedExtPowerViaMdiTlvSelected"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLldpMedInventoryTlvSelected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfApConfigLldpGroup = trpzApConfApConfigLldpGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigLldpGroup.setDescription('Group of columnar objects implemented to provide AP LLDP Configuration info in releases 7.5 and greater.')
trpzApConfApConfigTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 12)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApTunnelEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfApConfigTunnelGroup = trpzApConfApConfigTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigTunnelGroup.setDescription('Group of columnar objects implemented to provide AP to AP tunnel Configuration info in releases 7.5 and greater.')
trpzApConfApConfigRemoteApGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 13)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigDataSecurityEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigWanOutageModeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigWanOutageExtendedTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigWanOutageEvaluationPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfApConfigRemoteApGroup = trpzApConfApConfigRemoteApGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigRemoteApGroup.setDescription('Group of columnar objects implemented to provide remote AP related Configuration info in releases 7.5 and greater.')
trpzApConfRadioProfileRFSpectralScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 14)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRFSpectralScanModeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRFSpectralScanPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioProfileRFSpectralScanGroup = trpzApConfRadioProfileRFSpectralScanGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfileRFSpectralScanGroup.setDescription('Group of columnar objects implemented to provide Radio Profile RF Spectral Scanning configuration info in releases 7.5 to 8.0. Replaced by trpzApConfRadioProfileRFSpectralScanGroupRev2.')
trpzApConfApConfigTableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 15)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApAttachType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigPhysPortNum"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApSerialNum"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApModelName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigFingerprint"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigBias"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigContact"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLocation"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigBlinkEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigForceImageDownloadEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigFirmwareUpgradeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLocalSwitchingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigPowerMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLedMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigDescription"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigRemoteSiteName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigPathMtu"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigHighLatencyModeEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfApConfigTableGroupRev2 = trpzApConfApConfigTableGroupRev2.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfApConfigTableGroupRev2.setDescription('Group of columnar objects implemented to provide AP Configuration info in releases 7.7 to 8.0. Replaced by trpzApConfApConfigTableGroupRev3.')
trpzApConfSnoopFilterTableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 16)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterObserverAddrType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopFilterObserverAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfSnoopFilterTableGroupRev2 = trpzApConfSnoopFilterTableGroupRev2.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopFilterTableGroupRev2.setDescription('Group of columnar objects implemented to provide Snoop Filter configuration info in releases 7.7 and greater.')
trpzApConfSnoopObserverTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 17)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopObserverSnapLength"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopObserverInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfSnoopObserverTxMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfSnoopObserverTableGroup = trpzApConfSnoopObserverTableGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfSnoopObserverTableGroup.setDescription('Group of columnar objects implemented to provide Snoop Observer configuration info in releases 7.7 and greater.')
trpzApConfRadioSnoopFilterTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 18)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioSnoopFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioSnoopFilterTableGroup = trpzApConfRadioSnoopFilterTableGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioSnoopFilterTableGroup.setDescription('Group of columnar objects implemented to provide info about the associations of Snoop Filters with AP Radios in releases 7.7 and greater.')
trpzApConfServiceProfileTableGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 19)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSsidType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfBeaconEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11naMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11ngMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nShortGuardIntervalEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nFrameAggregation"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nMsduMaxLength"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProf11nMpduMaxLength"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfAuthFallthru"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebAAAForm"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalLogoutForm"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSharedKeyAuthEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeCipherTkipEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeCipherCcmpEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeAuthDot1xEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWpaIeAuthPskEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeCipherTkipEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeCipherCcmpEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeAuthDot1xEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfRsnIeAuthPskEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfTkipMicCountermeasuresTime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfMaxBandwidthKbps"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfCacMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfCacSessCount"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfUserIdleTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfIdleClientProbingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfShortRetryCount"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfLongRetryCount"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfProxyArpEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfDhcpRestrictEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfNoBroadcastEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSygateOnDemandEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfEnforceChecksEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaRemediationAcl"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaSuccessPage"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaFailurePage"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaLogoutPage"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfSodaAgentDirectory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalSessionTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalAcl"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalLogoutEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfWebPortalLogoutUrl"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfKeepInitialVlanEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfMeshModeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfBridgingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfLoadBalanceExemptEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfM2UConversionEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfBackupSsidMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfBackupSsidTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfServProfBackupSsidKeepClients"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfServiceProfileTableGroupRev3 = trpzApConfServiceProfileTableGroupRev3.setStatus('current')
if mibBuilder.loadTexts: trpzApConfServiceProfileTableGroupRev3.setDescription('Group of columnar objects implemented to provide Service Profile configuration info in releases 7.7 and greater.')
trpzApConfRemoteSiteTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 20)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteCountryCode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSitePathMtu"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteBackupSsidsEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerAddrType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerAddr"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerPort"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRemoteSiteTableGroup = trpzApConfRemoteSiteTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRemoteSiteTableGroup.setDescription('Group of columnar objects implemented to provide Remote Site configuration info in releases 7.7 to 8.0. Replaced by trpzApConfRemoteSiteTableGroupRev2.')
trpzApConfRadioProfileTableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 21)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfBeaconInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfDtimInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfChannelWidth11na"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfMaxTxLifetime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfMaxRxLifetime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRtsThreshold"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfFragThreshold"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfLongXmitPreambleEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCountermeasuresMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRFScanMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRFScanChannelScope"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRFScanCTSEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTunePowerEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTunePowerRampInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfAutoTunePowerChangeInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfFairQueuingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBackgroundACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBackgroundMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBackgroundPolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBestEffortACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBestEffortMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacBestEffortPolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVideoACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVideoMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVideoPolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVoiceACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVoiceMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfCacVoicePolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRfidTagEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfWmmPowerSaveEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfRateEnforcementEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProfDfsChannelsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioProfileTableGroupRev2 = trpzApConfRadioProfileTableGroupRev2.setStatus('obsolete')
if mibBuilder.loadTexts: trpzApConfRadioProfileTableGroupRev2.setDescription('Group of columnar objects implemented to provide Radio Profile configuration info in release 8.0. Replaced by trpzApConfRadioProfile32TableGroup.')
trpzApConfApConfigTableGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 22)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApAttachType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigPhysPortNum"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApSerialNum"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApModelName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigFingerprint"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigBias"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigContact"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLocation"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigBlinkEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigForceImageDownloadEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigFirmwareUpgradeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLocalSwitchingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigPowerMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigLedMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigDescription"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigRemoteSiteName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigPathMtu"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigHighLatencyModeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigApName2"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApConfigCacheConfigEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfApConfigTableGroupRev3 = trpzApConfApConfigTableGroupRev3.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApConfigTableGroupRev3.setDescription('Group of columnar objects implemented to provide AP Configuration info in releases 9.0 and greater.')
trpzApConfRadioConfigTableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 23)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigRadioType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigRadioMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigChannel"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigTxPower"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigAntennaType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigAntennaLocation"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigLoadBalancingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigLoadBalancingGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigLoadRebalancingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioConfigRadioProfileName2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioConfigTableGroupRev2 = trpzApConfRadioConfigTableGroupRev2.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioConfigTableGroupRev2.setDescription('Group of columnar objects implemented to provide Radio Configuration info in releases 9.0 and greater.')
trpzApConfApTemplateRadioConfigTableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 24)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfRadioMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfLoadBalancingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfLoadBalancingGroup"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfLoadRebalancingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfApTemRadioConfRadioProfileName2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfApTemplateRadioConfigTableGroupRev2 = trpzApConfApTemplateRadioConfigTableGroupRev2.setStatus('current')
if mibBuilder.loadTexts: trpzApConfApTemplateRadioConfigTableGroupRev2.setDescription('Group of columnar objects implemented to provide Radio Configuration Template info in releases 9.0 and greater.')
trpzApConfRadioProfile32TableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 25)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32BeaconInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32DtimInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32ChannelWidth11na"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32MaxTxLifetime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32MaxRxLifetime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32RtsThreshold"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32FragThreshold"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32LongXmitPreambleEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CountermeasuresMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32RFScanMode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32RFScanChannelScope"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32RFScanCTSEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32AutoTunePowerEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32AutoTunePowerRampInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32AutoTunePowerChangeInterval"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32FairQueuingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacBackgroundACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacBackgroundMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacBackgroundPolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacBestEffortACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacBestEffortMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacBestEffortPolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacVideoACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacVideoMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacVideoPolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacVoiceACMandatory"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacVoiceMaxUtilization"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32CacVoicePolicingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32RfidTagEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32WmmPowerSaveEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32RateEnforcementEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32DfsChannelsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioProfile32TableGroup = trpzApConfRadioProfile32TableGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProfile32TableGroup.setDescription('Group of columnar objects implemented to provide Radio Profile configuration info in releases 9.0 and greater.')
trpzApConfRadioProfileRFSpectralScanGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 26)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32RFSpectralScanModeEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRadioProf32RFSpectralScanPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioProfileRFSpectralScanGroupRev2 = trpzApConfRadioProfileRFSpectralScanGroupRev2.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProfileRFSpectralScanGroupRev2.setDescription('Group of columnar objects implemented to provide Radio Profile RF Spectral Scanning configuration info in releases 9.0 and greater.')
trpzApConfRadioProf32ServiceProfileTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 27)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRp32ServpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioProf32ServiceProfileTableGroup = trpzApConfRadioProf32ServiceProfileTableGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32ServiceProfileTableGroup.setDescription('Group of columnar objects implemented to provide Service Profiles associated to each Radio Profile in releases 9.0 and greater.')
trpzApConfRadioProf32SnoopFilterTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 28)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRp32SnoopfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRadioProf32SnoopFilterTableGroup = trpzApConfRadioProf32SnoopFilterTableGroup.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRadioProf32SnoopFilterTableGroup.setDescription('Group of columnar objects implemented to provide Snoop Filters associated to each Radio Profile in releases 9.0 and greater.')
trpzApConfRemoteSiteTableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 14525, 4, 14, 2, 2, 29)).setObjects(("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteCountryCode"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSitePathMtu"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteBackupSsidsEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerAddrType"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerAddr"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerPort"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteLogServerSeverity"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteAcPollingEnabled"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteRadiusServerGroupName"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteRadiusDeadtime"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteRadiusTimeout"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteRadiusRetransmit"), ("TRAPEZE-NETWORKS-AP-CONFIG-MIB", "trpzApConfRemoteSiteRadiusNasIdType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trpzApConfRemoteSiteTableGroupRev2 = trpzApConfRemoteSiteTableGroupRev2.setStatus('current')
if mibBuilder.loadTexts: trpzApConfRemoteSiteTableGroupRev2.setDescription('Group of columnar objects implemented to provide Remote Site configuration info in releases 9.0 and greater.')
mibBuilder.exportSymbols("TRAPEZE-NETWORKS-AP-CONFIG-MIB", trpzApConfRemoteSiteTableGroup=trpzApConfRemoteSiteTableGroup, trpzApConfRadioProfAutoTuneChannelEnabled=trpzApConfRadioProfAutoTuneChannelEnabled, trpzApConfServProfCacSessCount=trpzApConfServProfCacSessCount, TrpzApLldpMode=TrpzApLldpMode, trpzApConfApTemRadioConfRadioIndex=trpzApConfApTemRadioConfRadioIndex, trpzApConfSnoopFilterTableGroup=trpzApConfSnoopFilterTableGroup, trpzApConfSnoopFilterTableGroupRev2=trpzApConfSnoopFilterTableGroupRev2, trpzApConfRadioConfigRadioType=trpzApConfRadioConfigRadioType, trpzApConfServProfSodaAgentDirectory=trpzApConfServProfSodaAgentDirectory, TrpzRadioProfileAutoTuneChannelRange=TrpzRadioProfileAutoTuneChannelRange, trpzApConfApTemRadioConfAutoTuneMaxTxPower=trpzApConfApTemRadioConfAutoTuneMaxTxPower, trpzApConfRpSnoopfRowStatus=trpzApConfRpSnoopfRowStatus, trpzApConfRadioProfRadioProfileFullName=trpzApConfRadioProfRadioProfileFullName, trpzApConfRadioConfigLoadBalancingEnabled=trpzApConfRadioConfigLoadBalancingEnabled, trpzApConfRemoteSiteRadiusNasIdType=trpzApConfRemoteSiteRadiusNasIdType, trpzApConfApTemRadioConfApTemplateName=trpzApConfApTemRadioConfApTemplateName, trpzApConfSnoopFilterObserverAddr=trpzApConfSnoopFilterObserverAddr, trpzApConfSnoopFilterTable=trpzApConfSnoopFilterTable, trpzApConfApConfigApSerialNum=trpzApConfApConfigApSerialNum, trpzApConfRpSnoopfRadioProfileName=trpzApConfRpSnoopfRadioProfileName, trpzApConfRadioSnoopFilterEntry=trpzApConfRadioSnoopFilterEntry, trpzApConfServProfSygateOnDemandEnabled=trpzApConfServProfSygateOnDemandEnabled, trpzApConfRadioProf32CacBackgroundPolicingEnabled=trpzApConfRadioProf32CacBackgroundPolicingEnabled, trpzApConfServiceProfileTableGroup=trpzApConfServiceProfileTableGroup, trpzApConfServProfWpaIeCipherCcmpEnabled=trpzApConfServProfWpaIeCipherCcmpEnabled, trpzApConfRadioProfMaxTxLifetime=trpzApConfRadioProfMaxTxLifetime, trpzApConfRadioProfile32Table=trpzApConfRadioProfile32Table, trpzApConfServProfRsnIeAuthDot1xEnabled=trpzApConfServProfRsnIeAuthDot1xEnabled, trpzApConfServProfWebAAAForm=trpzApConfServProfWebAAAForm, trpzApConfServProfWpaIeCipherTkipEnabled=trpzApConfServProfWpaIeCipherTkipEnabled, TrpzRadioProfileRFScanChannelScope=TrpzRadioProfileRFScanChannelScope, trpzApConfRadioProfileTable=trpzApConfRadioProfileTable, trpzApConfServProfMaxBandwidthKbps=trpzApConfServProfMaxBandwidthKbps, trpzApConfApConfigTunnelGroup=trpzApConfApConfigTunnelGroup, trpzApConfServProfBeaconEnabled=trpzApConfServProfBeaconEnabled, trpzApConfSnoopObserverTxMode=trpzApConfSnoopObserverTxMode, trpzApConfRadioProf32SnoopFilterEntry=trpzApConfRadioProf32SnoopFilterEntry, trpzApConfRadioProfChannelWidth11na=trpzApConfRadioProfChannelWidth11na, TrpzServiceProfile11nMpduMaxLength=TrpzServiceProfile11nMpduMaxLength, trpzApConfApTemRadioConfLoadRebalancingEnabled=trpzApConfApTemRadioConfLoadRebalancingEnabled, trpzApConfRadioProf32DtimInterval=trpzApConfRadioProf32DtimInterval, trpzApConfRadioProfCacVoiceACMandatory=trpzApConfRadioProfCacVoiceACMandatory, trpzApConfServProfLoadBalanceExemptEnabled=trpzApConfServProfLoadBalanceExemptEnabled, trpzApConfRpServpRadioProfileName=trpzApConfRpServpRadioProfileName, trpzApConfApConfigWanOutageEvaluationPeriod=trpzApConfApConfigWanOutageEvaluationPeriod, trpzApConfRadioProfAutoTunePowerChangeInterval=trpzApConfRadioProfAutoTunePowerChangeInterval, trpzApConfServProfSharedKeyAuthEnabled=trpzApConfServProfSharedKeyAuthEnabled, trpzApConfRadioProfCacBestEffortPolicingEnabled=trpzApConfRadioProfCacBestEffortPolicingEnabled, trpzApConfApConfigRemoteApGroup=trpzApConfApConfigRemoteApGroup, trpzApConfApConfigLldpMedEnabled=trpzApConfApConfigLldpMedEnabled, trpzApConfApTemRadioConfRadioProfileName2=trpzApConfApTemRadioConfRadioProfileName2, trpzApConfServProfWpaIeEnabled=trpzApConfServProfWpaIeEnabled, trpzApConfRadioConfigAntennaLocation=trpzApConfRadioConfigAntennaLocation, trpzApConfApTemplateConfigEntry=trpzApConfApTemplateConfigEntry, trpzApConfApConfigLldpGroup=trpzApConfApConfigLldpGroup, trpzApConfRadioProf32RFScanMode=trpzApConfRadioProf32RFScanMode, trpzApConfRemoteSiteCountryCode=trpzApConfRemoteSiteCountryCode, trpzApConfServProfRsnIeCipherCcmpEnabled=trpzApConfServProfRsnIeCipherCcmpEnabled, trpzApConfServProfWpaIeCipherWep40Enabled=trpzApConfServProfWpaIeCipherWep40Enabled, trpzApConfSnoopFilterEntry=trpzApConfSnoopFilterEntry, trpzApConfRadioProfDtimInterval=trpzApConfRadioProfDtimInterval, trpzApConfServProf11nMpduMaxLength=trpzApConfServProf11nMpduMaxLength, trpzApConfRadioProf32RtsThreshold=trpzApConfRadioProf32RtsThreshold, trpzApConfSnoopObserverEntry=trpzApConfSnoopObserverEntry, trpzApConfRadioProfCacBestEffortMaxUtilization=trpzApConfRadioProfCacBestEffortMaxUtilization, trpzApConfApConfigLldpMode=trpzApConfApConfigLldpMode, trpzApConfRadioProfile32TableGroup=trpzApConfRadioProfile32TableGroup, trpzApConfApConfigApName=trpzApConfApConfigApName, trpzApConfApTemplConfLedMode=trpzApConfApTemplConfLedMode, TrpzServiceProfile11nFrameAggregationType=TrpzServiceProfile11nFrameAggregationType, trpzApConfApTemplConfForceImageDownloadEnabled=trpzApConfApTemplConfForceImageDownloadEnabled, trpzApConfApTemplateRadioConfigTableGroup=trpzApConfApTemplateRadioConfigTableGroup, trpzApConfRadioProfServiceProfileTableGroup=trpzApConfRadioProfServiceProfileTableGroup, trpzApConfServProfBackupSsidTimeout=trpzApConfServProfBackupSsidTimeout, trpzApConfRadioProf32FairQueuingEnabled=trpzApConfRadioProf32FairQueuingEnabled, trpzApConfApConfigBias=trpzApConfApConfigBias, trpzApConfRadioConfigEntry=trpzApConfRadioConfigEntry, trpzApConfRemoteSiteName=trpzApConfRemoteSiteName, trpzApConfApConfigContact=trpzApConfApConfigContact, TrpzApTemplateName=TrpzApTemplateName, trpzApConfRadioProfFragThreshold=trpzApConfRadioProfFragThreshold, trpzApConfRadioProf32DfsChannelsEnabled=trpzApConfRadioProf32DfsChannelsEnabled, trpzApConfApConfigLldpMedExtPowerViaMdiTlvSelected=trpzApConfApConfigLldpMedExtPowerViaMdiTlvSelected, trpzApConfRadioProfRFScanCTSEnabled=trpzApConfRadioProfRFScanCTSEnabled, trpzApConfServProfRsnIeEnabled=trpzApConfServProfRsnIeEnabled, trpzApConfApConfigLldpMedInventoryTlvSelected=trpzApConfApConfigLldpMedInventoryTlvSelected, trpzApConfApConfigTable=trpzApConfApConfigTable, TrpzServiceProfileAuthFallthruType=TrpzServiceProfileAuthFallthruType, trpzApConfServProfSodaFailurePage=trpzApConfServProfSodaFailurePage, trpzApConfigComplianceRev5=trpzApConfigComplianceRev5, trpzApConfRadioProfRFScanMode=trpzApConfRadioProfRFScanMode, trpzApConfRadioProf32CacBackgroundMaxUtilization=trpzApConfRadioProf32CacBackgroundMaxUtilization, trpzApConfRadioProfCacBackgroundPolicingEnabled=trpzApConfRadioProfCacBackgroundPolicingEnabled, trpzApConfServProfBackupSsidMode=trpzApConfServProfBackupSsidMode, trpzApConfRadioConfigAntennaType=trpzApConfRadioConfigAntennaType, trpzApConfRadioProf32CacVoicePolicingEnabled=trpzApConfRadioProf32CacVoicePolicingEnabled, trpzApConfRemoteSiteTableGroupRev2=trpzApConfRemoteSiteTableGroupRev2, trpzApConfRadioProf32CacVideoMaxUtilization=trpzApConfRadioProf32CacVideoMaxUtilization, trpzApConfRadioProf32CountermeasuresMode=trpzApConfRadioProf32CountermeasuresMode, trpzApConfRadioProf32CacBestEffortMaxUtilization=trpzApConfRadioProf32CacBestEffortMaxUtilization, trpzApConfRadioConfigTxPower=trpzApConfRadioConfigTxPower, trpzApConfServProfProxyArpEnabled=trpzApConfServProfProxyArpEnabled, trpzApConfApConfigLedMode=trpzApConfApConfigLedMode, trpzApConfigCompliance=trpzApConfigCompliance, trpzApConfRemoteSiteEntry=trpzApConfRemoteSiteEntry, trpzApConfRadioProfileRFSpectralScanGroupRev2=trpzApConfRadioProfileRFSpectralScanGroupRev2, trpzApConfServProfShortRetryCount=trpzApConfServProfShortRetryCount, trpzApConfRadioProf32AutoTunePowerChangeInterval=trpzApConfRadioProf32AutoTunePowerChangeInterval, trpzApConfSnoopObserverTableGroup=trpzApConfSnoopObserverTableGroup, trpzApConfRemoteSiteLogServerAddr=trpzApConfRemoteSiteLogServerAddr, trpzApConfRadioProfCacBackgroundACMandatory=trpzApConfRadioProfCacBackgroundACMandatory, trpzApConfApTemRadioConfLoadBalancingEnabled=trpzApConfApTemRadioConfLoadBalancingEnabled, trpzApConfApTemplConfApTemplateEnabled=trpzApConfApTemplConfApTemplateEnabled, trpzApConfRadioProf32SnoopFilterTable=trpzApConfRadioProf32SnoopFilterTable, trpzApConfApConfigApTunnelEnabled=trpzApConfApConfigApTunnelEnabled, trpzApConfApConfigForceImageDownloadEnabled=trpzApConfApConfigForceImageDownloadEnabled, trpzApConfServiceProfileEntry=trpzApConfServiceProfileEntry, trpzApConfApConfigDataSecurityEnabled=trpzApConfApConfigDataSecurityEnabled, trpzApConfRadioProfAutoTunePowerEnabled=trpzApConfRadioProfAutoTunePowerEnabled, trpzApConfRadioProf32ChannelWidth11na=trpzApConfRadioProf32ChannelWidth11na, trpzApConfServProf11nMsduMaxLength=trpzApConfServProf11nMsduMaxLength, trpzApConfRadioProfileRFSpectralScanGroup=trpzApConfRadioProfileRFSpectralScanGroup, trpzApConfRadioProfLongXmitPreambleEnabled=trpzApConfRadioProfLongXmitPreambleEnabled, trpzApConfRadioProf32CacVideoPolicingEnabled=trpzApConfRadioProf32CacVideoPolicingEnabled, trpzApConfRpSnoopfSnoopFilterName=trpzApConfRpSnoopfSnoopFilterName, trpzApConfRadioProf32RfidTagEnabled=trpzApConfRadioProf32RfidTagEnabled, trpzApConfServProfWebPortalLogoutEnabled=trpzApConfServProfWebPortalLogoutEnabled, trpzApConfRadioProfAutoTuneChannelChangeInterval=trpzApConfRadioProfAutoTuneChannelChangeInterval, trpzApConfApTemplateConfigTableGroup=trpzApConfApTemplateConfigTableGroup, trpzApConfApConfigHighLatencyModeEnabled=trpzApConfApConfigHighLatencyModeEnabled, trpzApConfigMibObjects=trpzApConfigMibObjects, TrpzServiceProfile11nMsduMaxLength=TrpzServiceProfile11nMsduMaxLength, trpzApConfApTemplConfFirmwareUpgradeEnabled=trpzApConfApTemplConfFirmwareUpgradeEnabled, trpzApConfSnoopObserverTargetAddr=trpzApConfSnoopObserverTargetAddr, trpzApConfRadioConfigRadioProfileName=trpzApConfRadioConfigRadioProfileName, trpzApConfApConfigTableGroupRev3=trpzApConfApConfigTableGroupRev3, trpzApConfSnoopFilterName=trpzApConfSnoopFilterName, trpzApConfigComplianceRev2=trpzApConfigComplianceRev2, trpzApConfRp32ServpServiceProfileName=trpzApConfRp32ServpServiceProfileName, trpzApConfApTemplConfApTemplateName=trpzApConfApTemplConfApTemplateName, trpzApConfServProfMeshModeEnabled=trpzApConfServProfMeshModeEnabled, trpzApConfRadioProf32CacVideoACMandatory=trpzApConfRadioProf32CacVideoACMandatory, trpzApConfRemoteSiteTable=trpzApConfRemoteSiteTable, trpzApConfServProf11nFrameAggregation=trpzApConfServProf11nFrameAggregation, trpzApConfRadioConfigRadioMode=trpzApConfRadioConfigRadioMode, trpzApConfServProfRsnIeCipherWep104Enabled=trpzApConfServProfRsnIeCipherWep104Enabled, trpzApConfigComplianceRev4=trpzApConfigComplianceRev4, trpzApConfRadioProf32AutoTunePowerRampInterval=trpzApConfRadioProf32AutoTunePowerRampInterval, trpzApConfServProfSodaLogoutPage=trpzApConfServProfSodaLogoutPage, trpzApConfRemoteSiteLogServerSeverity=trpzApConfRemoteSiteLogServerSeverity, trpzApConfServProf11nShortGuardIntervalEnabled=trpzApConfServProf11nShortGuardIntervalEnabled, TrpzRadioProfileName32=TrpzRadioProfileName32, trpzApConfRp32ServpRowStatus=trpzApConfRp32ServpRowStatus, TrpzRadioProfileName=TrpzRadioProfileName, trpzApConfRadioProf32FragThreshold=trpzApConfRadioProf32FragThreshold, TrpzServiceProfile11nMode=TrpzServiceProfile11nMode, trpzApConfSnoopObserverInterval=trpzApConfSnoopObserverInterval, trpzApConfRemoteSitePathMtu=trpzApConfRemoteSitePathMtu, trpzApConfRemoteSiteLogServerEnabled=trpzApConfRemoteSiteLogServerEnabled, trpzApConfApTemRadioConfRadioMode=trpzApConfApTemRadioConfRadioMode, trpzApConfApTemplConfLocalSwitchingEnabled=trpzApConfApTemplConfLocalSwitchingEnabled, trpzApConfApTemRadioConfLoadBalancingGroup=trpzApConfApTemRadioConfLoadBalancingGroup, trpzApConfRadioProfCacBestEffortACMandatory=trpzApConfRadioProfCacBestEffortACMandatory, trpzApConfRadioProfCacVoiceMaxUtilization=trpzApConfRadioProfCacVoiceMaxUtilization, trpzApConfRadioProfAutoTunePowerRampInterval=trpzApConfRadioProfAutoTunePowerRampInterval, TrpzRadioProfileRFSpectralScanPriority=TrpzRadioProfileRFSpectralScanPriority, trpzApConfRadioProf32CacBestEffortACMandatory=trpzApConfRadioProf32CacBestEffortACMandatory, trpzApConfRadioProfRFSpectralScanPriority=trpzApConfRadioProfRFSpectralScanPriority, trpzApConfServProfM2UConversionEnabled=trpzApConfServProfM2UConversionEnabled, trpzApConfApTemplateConfigTable=trpzApConfApTemplateConfigTable, trpzApConfRemoteSiteBackupSsidsEnabled=trpzApConfRemoteSiteBackupSsidsEnabled, trpzApConfApConfigFingerprint=trpzApConfApConfigFingerprint, trpzApConfRadioProfRadioProfileName=trpzApConfRadioProfRadioProfileName, trpzApConfApConfigLocation=trpzApConfApConfigLocation, trpzApConfRadioProfAutoTuneIgnoreClientsEnabled=trpzApConfRadioProfAutoTuneIgnoreClientsEnabled, trpzApConfApTemplateRadioConfigTable=trpzApConfApTemplateRadioConfigTable, trpzApConfRadioProf32BeaconInterval=trpzApConfRadioProf32BeaconInterval, trpzApConfApConfigFirmwareUpgradeEnabled=trpzApConfApConfigFirmwareUpgradeEnabled, trpzApConfApConfigApTimeout=trpzApConfApConfigApTimeout, trpzApConfApConfigApAttachType=trpzApConfApConfigApAttachType, trpzApConfRadioProfRFSpectralScanModeEnabled=trpzApConfRadioProfRFSpectralScanModeEnabled, trpzApConfServProfIdleClientProbingEnabled=trpzApConfServProfIdleClientProbingEnabled, trpzApConfRadioProfSnoopFilterEntry=trpzApConfRadioProfSnoopFilterEntry, trpzApConfSnoopObserverSnapLength=trpzApConfSnoopObserverSnapLength, TrpzBackupSsidMode=TrpzBackupSsidMode, trpzApConfRemoteSiteRadiusDeadtime=trpzApConfRemoteSiteRadiusDeadtime, trpzApConfRadioProf32LongXmitPreambleEnabled=trpzApConfRadioProf32LongXmitPreambleEnabled, trpzApConfRadioProfCacBackgroundMaxUtilization=trpzApConfRadioProfCacBackgroundMaxUtilization, trpzApConfRp32ServpRadioProfileName=trpzApConfRp32ServpRadioProfileName, TrpzSnoopFilterName=TrpzSnoopFilterName, trpzApConfRemoteSiteRadiusRetransmit=trpzApConfRemoteSiteRadiusRetransmit, trpzApConfigCompliances=trpzApConfigCompliances, trpzApConfApConfigApNum=trpzApConfApConfigApNum, trpzApConfRadioProfBeaconInterval=trpzApConfRadioProfBeaconInterval, trpzApConfRadioConfigTableGroupRev2=trpzApConfRadioConfigTableGroupRev2, trpzApConfRadioProfRateEnforcementEnabled=trpzApConfRadioProfRateEnforcementEnabled, trpzApConfApConfigPhysPortNum=trpzApConfApConfigPhysPortNum, trpzApConfRadioProfFairQueuingEnabled=trpzApConfRadioProfFairQueuingEnabled, trpzApConfServProfDhcpRestrictEnabled=trpzApConfServProfDhcpRestrictEnabled, trpzApConfApConfigWanOutageExtendedTimeout=trpzApConfApConfigWanOutageExtendedTimeout, PYSNMP_MODULE_ID=trpzApConfigMib, trpzApConfRadioProfWmmPowerSaveEnabled=trpzApConfRadioProfWmmPowerSaveEnabled, trpzApConfSnoopObserverTable=trpzApConfSnoopObserverTable, trpzApConfRadioConfigChannel=trpzApConfRadioConfigChannel, trpzApConfSnoopFilterEnabled=trpzApConfSnoopFilterEnabled, trpzApConfServProfLongRetryCount=trpzApConfServProfLongRetryCount, trpzApConfApConfigTableGroup=trpzApConfApConfigTableGroup, trpzApConfigMib=trpzApConfigMib, trpzApConfRadioProf32RFSpectralScanPriority=trpzApConfRadioProf32RFSpectralScanPriority, trpzApConfRadioProf32AutoTunePowerEnabled=trpzApConfRadioProf32AutoTunePowerEnabled, trpzApConfRadioProfServiceProfileEntry=trpzApConfRadioProfServiceProfileEntry, trpzApConfRadioProf32CacBestEffortPolicingEnabled=trpzApConfRadioProf32CacBestEffortPolicingEnabled, trpzApConfServProf11ngMode=trpzApConfServProf11ngMode, trpzApConfRadioProfile32Entry=trpzApConfRadioProfile32Entry, trpzApConfServProfWebPortalSessionTimeout=trpzApConfServProfWebPortalSessionTimeout, trpzApConfRadioProfSnoopFilterTable=trpzApConfRadioProfSnoopFilterTable, trpzApConfServProfEnforceChecksEnabled=trpzApConfServProfEnforceChecksEnabled, trpzApConfApConfigPathMtu=trpzApConfApConfigPathMtu, trpzApConfRadioProfileTableGroupRev2=trpzApConfRadioProfileTableGroupRev2, trpzApConfServiceProfileTableGroupRev2=trpzApConfServiceProfileTableGroupRev2, trpzApConfRadioConfigRadioProfileName2=trpzApConfRadioConfigRadioProfileName2, trpzApConfRadioProf32ServiceProfileTableGroup=trpzApConfRadioProf32ServiceProfileTableGroup, trpzApConfServProfServiceProfileName=trpzApConfServProfServiceProfileName, trpzApConfServProfWpaIeAuthPskEnabled=trpzApConfServProfWpaIeAuthPskEnabled, trpzApConfigConformance=trpzApConfigConformance, trpzApConfApTemRadioConfRadioProfileName=trpzApConfApTemRadioConfRadioProfileName, trpzApConfRadioProfSnoopFilterTableGroup=trpzApConfRadioProfSnoopFilterTableGroup, trpzApConfRadioConfigAutoTuneMaxTxPower=trpzApConfRadioConfigAutoTuneMaxTxPower, trpzApConfRadioProf32RFSpectralScanModeEnabled=trpzApConfRadioProf32RFSpectralScanModeEnabled, trpzApConfApConfigTableGroupRev2=trpzApConfApConfigTableGroupRev2, trpzApConfRadioConfigLoadRebalancingEnabled=trpzApConfRadioConfigLoadRebalancingEnabled, trpzApConfApConfigCacheConfigEnabled=trpzApConfApConfigCacheConfigEnabled, trpzApConfApConfigLocalSwitchingEnabled=trpzApConfApConfigLocalSwitchingEnabled, trpzApConfRadioProfMaxRxLifetime=trpzApConfRadioProfMaxRxLifetime, trpzApConfRadioProf32CacVoiceMaxUtilization=trpzApConfRadioProf32CacVoiceMaxUtilization, trpzApConfRemoteSiteLogServerAddrType=trpzApConfRemoteSiteLogServerAddrType, TrpzApRadiusNasIdType=TrpzApRadiusNasIdType, trpzApConfRemoteSiteAcPollingEnabled=trpzApConfRemoteSiteAcPollingEnabled, trpzApConfServProfKeepInitialVlanEnabled=trpzApConfServProfKeepInitialVlanEnabled, trpzApConfRadioProfRtsThreshold=trpzApConfRadioProfRtsThreshold, trpzApConfServProfTkipMicCountermeasuresTime=trpzApConfServProfTkipMicCountermeasuresTime, trpzApConfRadioProfDfsChannelsEnabled=trpzApConfRadioProfDfsChannelsEnabled, trpzApConfRadioProfileTableGroup=trpzApConfRadioProfileTableGroup, trpzApConfRadioProfAutoTuneChannelHolddownInterval=trpzApConfRadioProfAutoTuneChannelHolddownInterval, trpzApConfRadioProf32ServiceProfileEntry=trpzApConfRadioProf32ServiceProfileEntry, trpzApConfServProf11naMode=trpzApConfServProf11naMode, trpzApConfRadioConfigRadioIndex=trpzApConfRadioConfigRadioIndex, trpzApConfServProfWebPortalLogoutForm=trpzApConfServProfWebPortalLogoutForm, trpzApConfRadioProfCacVideoMaxUtilization=trpzApConfRadioProfCacVideoMaxUtilization, trpzApConfRpServpRowStatus=trpzApConfRpServpRowStatus, trpzApConfRadioProfileEntry=trpzApConfRadioProfileEntry, trpzApConfServProfCacMode=trpzApConfServProfCacMode, trpzApConfRadioProf32MaxTxLifetime=trpzApConfRadioProf32MaxTxLifetime, trpzApConfServProfAuthFallthru=trpzApConfServProfAuthFallthru)
mibBuilder.exportSymbols("TRAPEZE-NETWORKS-AP-CONFIG-MIB", trpzApConfRpServpServiceProfileName=trpzApConfRpServpServiceProfileName, TrpzRadioProfileRFScanMode=TrpzRadioProfileRFScanMode, trpzApConfigGroups=trpzApConfigGroups, trpzApConfServProfSsidType=trpzApConfServProfSsidType, trpzApConfRadioProfRFScanChannelScope=trpzApConfRadioProfRFScanChannelScope, trpzApConfServProfRsnIeCipherTkipEnabled=trpzApConfServProfRsnIeCipherTkipEnabled, trpzApConfRadioProfCacVideoACMandatory=trpzApConfRadioProfCacVideoACMandatory, trpzApConfRp32SnoopfRowStatus=trpzApConfRp32SnoopfRowStatus, TrpzServiceProfileCacMode=TrpzServiceProfileCacMode, trpzApConfRadioConfigLoadBalancingGroup=trpzApConfRadioConfigLoadBalancingGroup, trpzApConfRadioSnoopFilterRowStatus=trpzApConfRadioSnoopFilterRowStatus, trpzApConfApTemplateRadioConfigEntry=trpzApConfApTemplateRadioConfigEntry, trpzApConfRadioConfigApNum=trpzApConfRadioConfigApNum, TrpzSnoopObserverTxMode=TrpzSnoopObserverTxMode, trpzApConfApConfigPowerMode=trpzApConfApConfigPowerMode, trpzApConfApConfigApName2=trpzApConfApConfigApName2, trpzApConfRadioConfigTableGroup=trpzApConfRadioConfigTableGroup, trpzApConfRadioProfCacVoicePolicingEnabled=trpzApConfRadioProfCacVoicePolicingEnabled, trpzApConfRemoteSiteLogServerPort=trpzApConfRemoteSiteLogServerPort, trpzApConfSnoopFilterObserverAddrType=trpzApConfSnoopFilterObserverAddrType, trpzApConfRadioProf32RateEnforcementEnabled=trpzApConfRadioProf32RateEnforcementEnabled, trpzApConfRadioConfigTable=trpzApConfRadioConfigTable, trpzApConfApConfigDescription=trpzApConfApConfigDescription, trpzApConfServProfUserIdleTimeout=trpzApConfServProfUserIdleTimeout, trpzApConfApTemplConfApTimeout=trpzApConfApTemplConfApTimeout, trpzApConfRemoteSiteRadiusTimeout=trpzApConfRemoteSiteRadiusTimeout, trpzApConfServProfRsnIeAuthPskEnabled=trpzApConfServProfRsnIeAuthPskEnabled, trpzApConfServProfNoBroadcastEnabled=trpzApConfServProfNoBroadcastEnabled, TrpzRadioProfileCountermeasuresMode=TrpzRadioProfileCountermeasuresMode, trpzApConfRemoteSiteRadiusServerGroupName=trpzApConfRemoteSiteRadiusServerGroupName, trpzApConfServProfSodaSuccessPage=trpzApConfServProfSodaSuccessPage, trpzApConfApTemplConfBias=trpzApConfApTemplConfBias, trpzApConfRadioProf32MaxRxLifetime=trpzApConfRadioProf32MaxRxLifetime, trpzApConfRadioSnoopFilterTable=trpzApConfRadioSnoopFilterTable, trpzApConfRadioProf32WmmPowerSaveEnabled=trpzApConfRadioProf32WmmPowerSaveEnabled, TrpzServiceProfileSsidType=TrpzServiceProfileSsidType, trpzApConfServiceProfileTableGroupRev3=trpzApConfServiceProfileTableGroupRev3, trpzApConfRadioProfServiceProfileTable=trpzApConfRadioProfServiceProfileTable, trpzApConfServProfWebPortalLogoutUrl=trpzApConfServProfWebPortalLogoutUrl, trpzApConfServProfBridgingEnabled=trpzApConfServProfBridgingEnabled, trpzApConfApTemplConfPowerMode=trpzApConfApTemplConfPowerMode, trpzApConfRadioProf32ServiceProfileTable=trpzApConfRadioProf32ServiceProfileTable, trpzApConfRp32SnoopfRadioProfileName=trpzApConfRp32SnoopfRadioProfileName, trpzApConfRadioProf32SnoopFilterTableGroup=trpzApConfRadioProf32SnoopFilterTableGroup, trpzApConfRadioProf32CacBackgroundACMandatory=trpzApConfRadioProf32CacBackgroundACMandatory, trpzApConfApTemplConfBlinkEnabled=trpzApConfApTemplConfBlinkEnabled, trpzApConfRadioProfAutoTune11aChannelRange=trpzApConfRadioProfAutoTune11aChannelRange, trpzApConfRadioProfRfidTagEnabled=trpzApConfRadioProfRfidTagEnabled, TrpzServiceProfileName=TrpzServiceProfileName, trpzApConfServProfBackupSsidKeepClients=trpzApConfServProfBackupSsidKeepClients, trpzApConfServProfWpaIeCipherWep104Enabled=trpzApConfServProfWpaIeCipherWep104Enabled, trpzApConfServProfRsnIeCipherWep40Enabled=trpzApConfServProfRsnIeCipherWep40Enabled, trpzApConfRadioProf32CacVoiceACMandatory=trpzApConfRadioProf32CacVoiceACMandatory, trpzApConfServProfWpaIeAuthDot1xEnabled=trpzApConfServProfWpaIeAuthDot1xEnabled, trpzApConfRadioSnoopFilterTableGroup=trpzApConfRadioSnoopFilterTableGroup, trpzApConfApConfigEntry=trpzApConfApConfigEntry, trpzApConfigComplianceRev3=trpzApConfigComplianceRev3, trpzApConfApTemplateRadioConfigTableGroupRev2=trpzApConfApTemplateRadioConfigTableGroupRev2, trpzApConfServProfWebPortalAcl=trpzApConfServProfWebPortalAcl, trpzApConfRadioProf32RFScanChannelScope=trpzApConfRadioProf32RFScanChannelScope, trpzApConfRadioProfCacVideoPolicingEnabled=trpzApConfRadioProfCacVideoPolicingEnabled, trpzApConfRadioProf32RFScanCTSEnabled=trpzApConfRadioProf32RFScanCTSEnabled, trpzApConfSnoopObserverTargetAddrType=trpzApConfSnoopObserverTargetAddrType, trpzApConfServProfSodaRemediationAcl=trpzApConfServProfSodaRemediationAcl, trpzApConfRadioProfCountermeasuresMode=trpzApConfRadioProfCountermeasuresMode, trpzApConfApConfigRemoteSiteName=trpzApConfApConfigRemoteSiteName, trpzApConfApConfigBlinkEnabled=trpzApConfApConfigBlinkEnabled, trpzApConfRadioProf32RadioProfileName=trpzApConfRadioProf32RadioProfileName, trpzApConfApConfigApModelName=trpzApConfApConfigApModelName, trpzApConfServiceProfileTable=trpzApConfServiceProfileTable, trpzApConfApConfigWanOutageModeEnabled=trpzApConfApConfigWanOutageModeEnabled, trpzApConfRp32SnoopfSnoopFilterName=trpzApConfRp32SnoopfSnoopFilterName)
