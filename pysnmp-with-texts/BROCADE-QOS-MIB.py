#
# PySNMP MIB module BROCADE-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BROCADE-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
brcdQos, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "brcdQos")
PortPriorityTC, = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "PortPriorityTC")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, Bits, iso, Integer32, Gauge32, Counter32, IpAddress, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Bits", "iso", "Integer32", "Gauge32", "Counter32", "IpAddress", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
brcdQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1))
brcdQosMIB.setRevisions(('2012-07-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: brcdQosMIB.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: brcdQosMIB.setLastUpdated('201207180000Z')
if mibBuilder.loadTexts: brcdQosMIB.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: brcdQosMIB.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: brcdQosMIB.setDescription('The MIB module contains the managed object definition for Brocade Quality of Service. Supported Platforms: - supported on NetIron XMR/MLX latforms. Copyright 1996-2012 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.')
brcdHqosObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1))
brcdHqosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1), )
if mibBuilder.loadTexts: brcdHqosStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsTable.setDescription('A list of brcHqosStats entries. This table contains information of various HQoS counters. The HQoS is supported on NI-MLX-10Gx8-M/D LP modules.')
brcdHqosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1), ).setIndexNames((0, "BROCADE-QOS-MIB", "brcdHqosIfIndex"), (0, "BROCADE-QOS-MIB", "brcdHqosEndpointType"), (0, "BROCADE-QOS-MIB", "brcdHqosEndpointTag"), (0, "BROCADE-QOS-MIB", "brcdHqosEndpointInnerTag"), (0, "BROCADE-QOS-MIB", "brcdHqosStatsPriority"))
if mibBuilder.loadTexts: brcdHqosStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsEntry.setDescription('An entry containing Hqos statistics counter information applicable for 10Gx8 interface if the module is physically present.')
brcdHqosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: brcdHqosIfIndex.setStatus('current')
if mibBuilder.loadTexts: brcdHqosIfIndex.setDescription('The index of the interface index where the HQoS is configured. The LP module must be physically present and operationally up.')
brcdHqosEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("singleTaggedVlan", 2), ("doubleTaggedVlan", 3), ("bVlanIsid", 4))))
if mibBuilder.loadTexts: brcdHqosEndpointType.setStatus('current')
if mibBuilder.loadTexts: brcdHqosEndpointType.setDescription('This object specifies the End point type for HQoS scheduler.')
brcdHqosEndpointTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: brcdHqosEndpointTag.setStatus('current')
if mibBuilder.loadTexts: brcdHqosEndpointTag.setDescription('This object specifies the HQoS end point tag. If the brcdHqosEndpointType is other(1), then this object has zero value. If the brcdHqosEndpointType is singleTaggedVlan(2), dougleTaggedVlan(3) or bVlanIsid(4), then this object has VLAN id. The valid VLAN ids are 1 to 4094.')
brcdHqosEndpointInnerTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: brcdHqosEndpointInnerTag.setStatus('current')
if mibBuilder.loadTexts: brcdHqosEndpointInnerTag.setDescription('This object specifies the HQoS end point inner tag. If the brcdHqosEndpointType is other(1) or singleTaggedVlan(2) then this object has zero value. If the brcdHqosEndpointType is dougleTaggedVlan(3) then this object has VLAN id. The valid VLAN ids are 1 to 4094 If the index brcdHqosEndpointType is bVlanIsid(4), then this object has ISID value. The valid ISID are 256 to 16777214.')
brcdHqosStatsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 5), PortPriorityTC())
if mibBuilder.loadTexts: brcdHqosStatsPriority.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsPriority.setDescription('The priority of the packets that will be stored in this queue. This is 1-based index. The HQoS queue with brcdHqosEndpointType as other(1) have 8 priorities. All other HQoS queues have 4 priorities, two consecutive priorities are stored in one queue. In this case, the valid values for this index are 1, 3, 5 and 7. The queue with priority 1 has the packets with priority 1 and 2. Same applies for priority 3, 5 and 7')
brcdHqosStatsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsDescription.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsDescription.setDescription('This object gives the HQoS scheduler node name in full path format with each node separated by dot.')
brcdHqosStatsEnquePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsEnquePkts.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsEnquePkts.setDescription('A count of all packets entering ingress queues on this queue.')
brcdHqosStatsEnqueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsEnqueBytes.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsEnqueBytes.setDescription('A count of all bytes entering ingress queues on this queue.')
brcdHqosStatsDequePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsDequePkts.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsDequePkts.setDescription('A count of all packets dequeued from ingress queues and forwarded on this queue.')
brcdHqosStatsDequeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsDequeBytes.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsDequeBytes.setDescription('A count of all bytes dequeued from ingress queues and forwarded on this queue.')
brcdHqosStatsTotalDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsTotalDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsTotalDiscardPkts.setDescription('A count of all packets failing to enter ingress queues on this queue. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering.')
brcdHqosStatsTotalDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsTotalDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsTotalDiscardBytes.setDescription('A count of all bytes failing to enter ingress queues on this queue. This may be due to: * The queue reaching its maximum depth, WRED, or other reasons. * The network processor deciding to drop packets for reasons including: an unknown Layer-3 route, RPF, or segment filtering')
brcdHqosStatsOldestDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsOldestDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsOldestDiscardPkts.setDescription('A count of all packets entering ingress queues on this queue, but deleted afterwards due to buffer full.')
brcdHqosStatsOldestDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsOldestDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsOldestDiscardBytes.setDescription('A count of all bytes entering ingress queues on this queue, but deleted afterwards due to buffer full')
brcdHqosStatsWREDDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsWREDDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsWREDDroppedPkts.setDescription('A count of all bytes entering ingress queues on this queue, but deleted afterwards due to buffer full')
brcdHqosStatsWREDDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsWREDDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsWREDDroppedBytes.setDescription('A count of all bytes entering ingress queues on this queue, but deleted afterwards due to buffer full')
brcdHqosStatsCurrentQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsCurrentQDepth.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsCurrentQDepth.setDescription('The current queue depth.')
brcdHqosStatsMaxQDepthSinceLastRead = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 14, 1, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdHqosStatsMaxQDepthSinceLastRead.setStatus('current')
if mibBuilder.loadTexts: brcdHqosStatsMaxQDepthSinceLastRead.setDescription('The maximum queue depth since last access to read.')
mibBuilder.exportSymbols("BROCADE-QOS-MIB", brcdHqosObjects=brcdHqosObjects, brcdHqosStatsOldestDiscardPkts=brcdHqosStatsOldestDiscardPkts, brcdHqosStatsPriority=brcdHqosStatsPriority, brcdHqosStatsWREDDroppedPkts=brcdHqosStatsWREDDroppedPkts, brcdHqosStatsTable=brcdHqosStatsTable, brcdHqosStatsOldestDiscardBytes=brcdHqosStatsOldestDiscardBytes, brcdHqosStatsDescription=brcdHqosStatsDescription, brcdHqosEndpointInnerTag=brcdHqosEndpointInnerTag, brcdHqosEndpointTag=brcdHqosEndpointTag, brcdHqosStatsDequeBytes=brcdHqosStatsDequeBytes, brcdHqosStatsEnquePkts=brcdHqosStatsEnquePkts, PYSNMP_MODULE_ID=brcdQosMIB, brcdHqosStatsTotalDiscardBytes=brcdHqosStatsTotalDiscardBytes, brcdHqosStatsMaxQDepthSinceLastRead=brcdHqosStatsMaxQDepthSinceLastRead, brcdQosMIB=brcdQosMIB, brcdHqosStatsCurrentQDepth=brcdHqosStatsCurrentQDepth, brcdHqosStatsEnqueBytes=brcdHqosStatsEnqueBytes, brcdHqosStatsDequePkts=brcdHqosStatsDequePkts, brcdHqosStatsTotalDiscardPkts=brcdHqosStatsTotalDiscardPkts, brcdHqosStatsEntry=brcdHqosStatsEntry, brcdHqosIfIndex=brcdHqosIfIndex, brcdHqosEndpointType=brcdHqosEndpointType, brcdHqosStatsWREDDroppedBytes=brcdHqosStatsWREDDroppedBytes)
