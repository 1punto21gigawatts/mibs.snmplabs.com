#
# PySNMP MIB module BayNetworks-AHB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BayNetworks-AHB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:42:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, iso, Gauge32, Bits, MibIdentifier, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, NotificationType, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "iso", "Gauge32", "Bits", "MibIdentifier", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "NotificationType", "ObjectIdentity", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfAtmHalfBridgeGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfAtmHalfBridgeGroup")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

wfAhb = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1))
wfAhbDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbDelete.setDescription('Create or Delete AHB Function.')
wfAhbDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbDisable.setDescription('Enables or Disables AHB Function.')
wfAhbAutoLearnMethod = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unsecure", 2), ("secure", 3), ("both", 4))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbAutoLearnMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbAutoLearnMethod.setDescription('Method used to dynamically learn new host entries.')
wfAhbInitFile = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbInitFile.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbInitFile.setDescription('Name of local file containing AHB initial host entries.')
wfAhbAltInitFile = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbAltInitFile.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbAltInitFile.setDescription('Name of alternate file containing AHB initial host entries.')
wfAhbDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbDebugLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbDebugLevel.setDescription('Level of debug messages to include in system log. Zero indicates no debug messages, higher values display more detailed information.')
wfAhbInboundFiltDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbInboundFiltDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbInboundFiltDisable.setDescription('Enable or disable inbound packet filtering on AHB circuits.')
wfAhbReset = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notreset", 1), ("reset", 2))).clone('notreset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbReset.setDescription('Reset AHB state and remove all dynamic hosts entries from half-bridge table.')
wfAhbStatNumNets = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbStatNumNets.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbStatNumNets.setDescription('Number of IP networks advertised by half-bridge.')
wfAhbStatNumHosts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbStatNumHosts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbStatNumHosts.setDescription('Number of hosts entries maintained by half-bridge.')
wfAhbStatTotOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbStatTotOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbStatTotOutPkts.setDescription('Number of outgoing packets sent to half-bridge from other router interfaces.')
wfAhbStatFwdOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbStatFwdOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbStatFwdOutPkts.setDescription('Number of outgoing packets forwarded by half-bridge on ATM interfaces.')
wfAhbStatDropUnkPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbStatDropUnkPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbStatDropUnkPkts.setDescription('Number of outgoing packets dropped due to unknown host.')
wfAhbStatTotInPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbStatTotInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbStatTotInPkts.setDescription('Number of packets received on all AHB interfaces.')
wfAhbStatFwdInPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbStatFwdInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbStatFwdInPkts.setDescription('Number of packets forwarded from AHB interfaces.')
wfAhbStatNumHostCopies = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbStatNumHostCopies.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbStatNumHostCopies.setDescription('Number of host entries copied to other slots.')
wfAhbPolicyDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbPolicyDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyDisable.setDescription('Enables or disables policy table processing.')
wfAhbBaseStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbBaseStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbBaseStatus.setDescription('Status of the AHB module.')
wfAhbCctTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2), )
if mibBuilder.loadTexts: wfAhbCctTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctTable.setDescription('A list of circuit entries in ATM bridge table.')
wfAhbCctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1), ).setIndexNames((0, "BayNetworks-AHB-MIB", "wfAhbCctNum"))
if mibBuilder.loadTexts: wfAhbCctEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctEntry.setDescription('ATM Half Bridge Interface Entry. ')
wfAhbCctDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbCctDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctDelete.setDescription('Create/Delete this ATM HALF BRIDGE interface.')
wfAhbCctDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbCctDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctDisable.setDescription('Enable/disable this ATM HALF BRIDGE interface.')
wfAhbCctNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbCctNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctNum.setDescription('The circuit number associated with this AHB interface.')
wfAhbCctDefSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbCctDefSubNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctDefSubNetMask.setDescription('The default subnet mask for hosts learned unsecurely on this interface.')
wfAhbCctProxyArpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbCctProxyArpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctProxyArpDisable.setDescription('Enable/Disable proxy ARP function on this interface.')
wfAhbCctMaxIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 3600))).clone(namedValues=NamedValues(("minimum", 5), ("default", 3600))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbCctMaxIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctMaxIdleTime.setDescription('Maximum idle time for aging unsecure host entries')
wfAhbCctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbCctStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctStatus.setDescription('Status of the corresponding ATM circuit.')
wfAhbCctTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbCctTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctTxPkts.setDescription('Number of outgoing packets sent on this interface.')
wfAhbCctTxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbCctTxDrop.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctTxDrop.setDescription('Number of outgoing packets dropped on this interface.')
wfAhbCctRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbCctRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctRxPkts.setDescription('Number of incoming packets received on this interface.')
wfAhbCctRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbCctRxDrop.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbCctRxDrop.setDescription('Number of incoming packets dropped on this interface.')
wfAhbHostTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3), )
if mibBuilder.loadTexts: wfAhbHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostTable.setDescription('A list of host entries in ATM half-bridge table.')
wfAhbHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1), ).setIndexNames((0, "BayNetworks-AHB-MIB", "wfAhbHostSlot"), (0, "BayNetworks-AHB-MIB", "wfAhbHostIpAddress"))
if mibBuilder.loadTexts: wfAhbHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostEntry.setDescription('ATM Half Bridge Host Entry.')
wfAhbHostDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbHostDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostDelete.setDescription('Create/Delete this half-bridge host entry.')
wfAhbHostSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbHostSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostSlot.setDescription('The slot number which is reporting this host entry. If this is a new host entry to be created, it must be the slot through which the host is physically attached.')
wfAhbHostSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbHostSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostSeqNum.setDescription('Sequence number assigned to this entry (must be zero on create).')
wfAhbHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbHostIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostIpAddress.setDescription('The IP address associated with this host entry.')
wfAhbHostSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbHostSubNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostSubNetMask.setDescription('The subnet mask associated with this host entry.')
wfAhbHostCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbHostCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostCct.setDescription('The circuit number associated with this host entry.')
wfAhbHostVcid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbHostVcid.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostVcid.setDescription('The ATM VPI/VCI associated with this host entry.')
wfAhbHostBridgeHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbHostBridgeHdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostBridgeHdr.setDescription('The bridge DLL header associated with this host entry.')
wfAhbHostFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbHostFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostFlags.setDescription('Various control flag bits for this host entry. See router documentation for bit definitions.')
wfAhbHostTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbHostTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostTxPkts.setDescription('Number of outgoing packets sent on this host entry.')
wfAhbHostRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbHostRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostRxPkts.setDescription('Number of incoming packets received on this host entry.')
wfAhbHostMaxIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbHostMaxIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostMaxIdleTime.setDescription('Maximum idle time for this host entry.')
wfAhbHostCurIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbHostCurIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbHostCurIdleTime.setDescription('Remaining idle time for this host entry.')
wfAhbPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4), )
if mibBuilder.loadTexts: wfAhbPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyTable.setDescription('A list of policy entries for the ATM half-bridge table.')
wfAhbPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1), ).setIndexNames((0, "BayNetworks-AHB-MIB", "wfAhbPolicyIpAddress"), (0, "BayNetworks-AHB-MIB", "wfAhbPolicySubNetMask"))
if mibBuilder.loadTexts: wfAhbPolicyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyEntry.setDescription('ATM Half Bridge Policy Entry.')
wfAhbPolicyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbPolicyDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyDelete.setDescription('Create/Delete this half-bridge policy entry.')
wfAhbPolicyIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbPolicyIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyIpAddress.setDescription('The IP address associated with policy host entry.')
wfAhbPolicySubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAhbPolicySubNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicySubNetMask.setDescription('The subnet mask associated with policy host entry.')
wfAhbPolicyCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbPolicyCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyCct.setDescription('The circuit number associated with policy host entry.')
wfAhbPolicyVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbPolicyVPI.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyVPI.setDescription('The ATM VPI associated with this policy entry.')
wfAhbPolicyVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbPolicyVCI.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyVCI.setDescription('The ATM VCI associated with this policy entry.')
wfAhbPolicyMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbPolicyMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyMACAddr.setDescription('The bridge DLL header associated with this policy entry.')
wfAhbPolicyFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbPolicyFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyFlags.setDescription('Various control flag bits for this policy entry. See router documentation for bit definitions.')
wfAhbPolicyPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 13, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2), ("static", 3), ("notused", 4))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAhbPolicyPermission.setStatus('mandatory')
if mibBuilder.loadTexts: wfAhbPolicyPermission.setDescription('Permission for creating host entry which matches this policy.')
mibBuilder.exportSymbols("BayNetworks-AHB-MIB", wfAhbDelete=wfAhbDelete, wfAhbAltInitFile=wfAhbAltInitFile, wfAhbStatNumNets=wfAhbStatNumNets, wfAhbStatFwdOutPkts=wfAhbStatFwdOutPkts, MacAddress=MacAddress, wfAhbStatTotInPkts=wfAhbStatTotInPkts, wfAhbHostVcid=wfAhbHostVcid, wfAhbHostCct=wfAhbHostCct, wfAhbCctTxDrop=wfAhbCctTxDrop, wfAhbReset=wfAhbReset, wfAhbCctMaxIdleTime=wfAhbCctMaxIdleTime, wfAhbPolicyDisable=wfAhbPolicyDisable, wfAhbHostCurIdleTime=wfAhbHostCurIdleTime, wfAhbCctTable=wfAhbCctTable, wfAhbCctDefSubNetMask=wfAhbCctDefSubNetMask, wfAhbPolicyCct=wfAhbPolicyCct, wfAhbHostRxPkts=wfAhbHostRxPkts, wfAhbPolicySubNetMask=wfAhbPolicySubNetMask, wfAhbCctProxyArpDisable=wfAhbCctProxyArpDisable, wfAhbHostMaxIdleTime=wfAhbHostMaxIdleTime, wfAhbHostBridgeHdr=wfAhbHostBridgeHdr, wfAhbPolicyMACAddr=wfAhbPolicyMACAddr, wfAhbHostDelete=wfAhbHostDelete, wfAhbHostSeqNum=wfAhbHostSeqNum, wfAhbHostFlags=wfAhbHostFlags, wfAhbCctEntry=wfAhbCctEntry, wfAhbInboundFiltDisable=wfAhbInboundFiltDisable, wfAhbCctRxDrop=wfAhbCctRxDrop, wfAhbCctNum=wfAhbCctNum, wfAhbCctTxPkts=wfAhbCctTxPkts, wfAhbPolicyIpAddress=wfAhbPolicyIpAddress, wfAhbStatTotOutPkts=wfAhbStatTotOutPkts, wfAhbPolicyFlags=wfAhbPolicyFlags, wfAhbHostEntry=wfAhbHostEntry, wfAhbPolicyTable=wfAhbPolicyTable, wfAhbPolicyDelete=wfAhbPolicyDelete, wfAhbStatNumHosts=wfAhbStatNumHosts, wfAhbPolicyVPI=wfAhbPolicyVPI, wfAhbAutoLearnMethod=wfAhbAutoLearnMethod, wfAhbCctDelete=wfAhbCctDelete, wfAhbCctRxPkts=wfAhbCctRxPkts, wfAhbPolicyVCI=wfAhbPolicyVCI, wfAhbStatFwdInPkts=wfAhbStatFwdInPkts, wfAhb=wfAhb, wfAhbHostSlot=wfAhbHostSlot, wfAhbPolicyEntry=wfAhbPolicyEntry, wfAhbPolicyPermission=wfAhbPolicyPermission, wfAhbDebugLevel=wfAhbDebugLevel, wfAhbCctStatus=wfAhbCctStatus, wfAhbStatNumHostCopies=wfAhbStatNumHostCopies, wfAhbHostSubNetMask=wfAhbHostSubNetMask, wfAhbHostTable=wfAhbHostTable, wfAhbDisable=wfAhbDisable, wfAhbHostIpAddress=wfAhbHostIpAddress, wfAhbInitFile=wfAhbInitFile, wfAhbBaseStatus=wfAhbBaseStatus, wfAhbCctDisable=wfAhbCctDisable, wfAhbStatDropUnkPkts=wfAhbStatDropUnkPkts, wfAhbHostTxPkts=wfAhbHostTxPkts)
