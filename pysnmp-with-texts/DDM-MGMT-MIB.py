#
# PySNMP MIB module DDM-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DDM-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, ObjectIdentity, iso, TimeTicks, Gauge32, Bits, MibIdentifier, ModuleIdentity, NotificationType, Unsigned32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "ObjectIdentity", "iso", "TimeTicks", "Gauge32", "Bits", "MibIdentifier", "ModuleIdentity", "NotificationType", "Unsigned32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
swDdmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 72))
if mibBuilder.loadTexts: swDdmMIB.setLastUpdated('0904300000Z')
if mibBuilder.loadTexts: swDdmMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swDdmMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swDdmMIB.setDescription('The structure of DDM for the proprietary enterprise.')
swDdmCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 72, 1))
swDdmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 72, 2))
swDdmMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 72, 3))
swDdmNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 72, 4))
swDdmTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 72, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmTrapState.setStatus('current')
if mibBuilder.loadTexts: swDdmTrapState.setDescription('This object indicates the trap action state.')
swDdmLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 72, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmLogState.setStatus('current')
if mibBuilder.loadTexts: swDdmLogState.setDescription('This object indicates the log action state.')
swDdmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 72, 2, 1))
swDdmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 72, 2, 1, 1), )
if mibBuilder.loadTexts: swDdmStatusTable.setStatus('current')
if mibBuilder.loadTexts: swDdmStatusTable.setDescription('This table contains the DDM status information.')
swDdmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 72, 2, 1, 1, 1), ).setIndexNames((0, "DDM-MGMT-MIB", "swDdmPort"))
if mibBuilder.loadTexts: swDdmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: swDdmStatusEntry.setDescription('This is an entry of the swDdmStatusTable.')
swDdmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDdmPort.setStatus('current')
if mibBuilder.loadTexts: swDdmPort.setDescription('This object indicates the port.')
swDdmTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDdmTemperature.setStatus('current')
if mibBuilder.loadTexts: swDdmTemperature.setDescription('This object indicates the real time value of the temperature. As the value is a floating point data type, the DisplayString type is used to define this parameter.')
swDdmVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDdmVoltage.setStatus('current')
if mibBuilder.loadTexts: swDdmVoltage.setDescription('This object indicates the real time value of the supply voltage. As the value value is a floating point data type, the DisplayString type is used to define this parameter.')
swDdmBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDdmBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: swDdmBiasCurrent.setDescription('This object indicates the real time value of the tx bias.')
swDdmTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDdmTxPower.setStatus('current')
if mibBuilder.loadTexts: swDdmTxPower.setDescription('This object indicates the real time value of the tx power. As the value is a floating point data type, the DisplayString type is used to define this parameter.')
swDdmRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDdmRxPower.setStatus('current')
if mibBuilder.loadTexts: swDdmRxPower.setDescription('This object indicates the real time value of the rx power. As the value is a floating data type, the DisplayString type is used to define this parameter.')
swDdmThresholdMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 1))
swDdmActionMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2))
swDdmThresholdMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 1, 1), )
if mibBuilder.loadTexts: swDdmThresholdMgmtTable.setStatus('current')
if mibBuilder.loadTexts: swDdmThresholdMgmtTable.setDescription('This table contains DDM temperature configuration information.')
swDdmThresholdMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 1, 1, 1), ).setIndexNames((0, "DDM-MGMT-MIB", "swDdmPort"), (0, "DDM-MGMT-MIB", "swDdmThresholdType"))
if mibBuilder.loadTexts: swDdmThresholdMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: swDdmThresholdMgmtEntry.setDescription('This is an entry of the swDdmConfigThresholdTable.')
swDdmThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("temperature", 1), ("voltage", 2), ("bias", 3), ("txPower", 4), ("rxPower", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDdmThresholdType.setStatus('current')
if mibBuilder.loadTexts: swDdmThresholdType.setDescription('This object indicates the threshold type.')
swDdmHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmHighAlarm.setStatus('current')
if mibBuilder.loadTexts: swDdmHighAlarm.setDescription('This object indicates the high alarm threshold value to be configured. As the value is a floating point data type, the DisplayString type is used to define this parameter.')
swDdmLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmLowAlarm.setStatus('current')
if mibBuilder.loadTexts: swDdmLowAlarm.setDescription('This object indicates the low alarm threshold value to be configured. As the value is a floating data type, the DisplayString type is used to define this parameter.')
swDdmHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmHighWarning.setStatus('current')
if mibBuilder.loadTexts: swDdmHighWarning.setDescription('This object indicates the high warning threshold value to be configured. As the value is a floating data type, the DisplayString type is used to define this parameter.')
swDdmLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 1, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmLowWarning.setStatus('current')
if mibBuilder.loadTexts: swDdmLowWarning.setDescription('This object indicates the low warning threshold value to be configured. As the value is a floating data type, the DisplayString type is used to define this parameter.')
swDdmActionMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2, 1), )
if mibBuilder.loadTexts: swDdmActionMgmtTable.setStatus('obsolete')
if mibBuilder.loadTexts: swDdmActionMgmtTable.setDescription('This table contains the configuration of the action taken when any parameter exceeds its threshold.')
swDdmActionMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2, 1, 1), ).setIndexNames((0, "DDM-MGMT-MIB", "swDdmPort"), (0, "DDM-MGMT-MIB", "swDdmActionType"))
if mibBuilder.loadTexts: swDdmActionMgmtEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swDdmActionMgmtEntry.setDescription('This is an entry of the swDdmConfigActionTable.')
swDdmActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("warning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDdmActionType.setStatus('obsolete')
if mibBuilder.loadTexts: swDdmActionType.setDescription('This object indicates the action type.')
swDdmShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmShutdown.setStatus('obsolete')
if mibBuilder.loadTexts: swDdmShutdown.setDescription("This object indicates the shutdown action. The value 'other' means that the port does not support DDM.")
swDdmTrapAndLog = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmTrapAndLog.setStatus('obsolete')
if mibBuilder.loadTexts: swDdmTrapAndLog.setDescription("This object indicates the trap and log action. The value 'other' means that the port does not support DDM.")
swDdmPortMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2, 2), )
if mibBuilder.loadTexts: swDdmPortMgmtTable.setStatus('current')
if mibBuilder.loadTexts: swDdmPortMgmtTable.setDescription('This table contains the configuration of the DDM state and shutdown mode when any parameter exceeds its threshold.')
swDdmPortMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2, 2, 1), ).setIndexNames((0, "DDM-MGMT-MIB", "swDdmPort"))
if mibBuilder.loadTexts: swDdmPortMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: swDdmPortMgmtEntry.setDescription('This is an entry of the swDdmPortMgmtTable.')
swDdmPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmPortState.setStatus('current')
if mibBuilder.loadTexts: swDdmPortState.setDescription('This object indicates the DDM state information by port.')
swDdmPortShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 72, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alarm", 1), ("warning", 2), ("none", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDdmPortShutdown.setStatus('current')
if mibBuilder.loadTexts: swDdmPortShutdown.setDescription('This object indicates whether or not to shutdown the port on which the operating parameter exceeds the specified threshold. ')
swDdmNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 72, 4, 0))
swDdmNotificationBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 72, 4, 1))
swDdmAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 72, 4, 0, 1)).setObjects(("DDM-MGMT-MIB", "swDdmPort"), ("DDM-MGMT-MIB", "swDdmThresholdType"), ("DDM-MGMT-MIB", "swDdmThresholdExceedType"), ("DDM-MGMT-MIB", "swDdmThresholdExceedOrRecover"))
if mibBuilder.loadTexts: swDdmAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: swDdmAlarmTrap.setDescription('The trap is sent when any parameter value exceeds the alarm threshold value or recover to normal status depending on the configuration of the trap action.')
swDdmWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 72, 4, 0, 2)).setObjects(("DDM-MGMT-MIB", "swDdmPort"), ("DDM-MGMT-MIB", "swDdmThresholdType"), ("DDM-MGMT-MIB", "swDdmThresholdExceedType"), ("DDM-MGMT-MIB", "swDdmThresholdExceedOrRecover"))
if mibBuilder.loadTexts: swDdmWarningTrap.setStatus('current')
if mibBuilder.loadTexts: swDdmWarningTrap.setDescription('The trap is sent when any parameter value exceeds the warning threshold value or recover to normal status depending on the configuration of the trap action.')
swDdmThresholdExceedType = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 72, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swDdmThresholdExceedType.setStatus('current')
if mibBuilder.loadTexts: swDdmThresholdExceedType.setDescription('This object is used by swDdmAlarmTrap and swDdmWarningTrap to indicate if the threshold that was exceeded was a high threshold or a low threshold.')
swDdmThresholdExceedOrRecover = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 72, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exceed", 1), ("recover", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swDdmThresholdExceedOrRecover.setStatus('current')
if mibBuilder.loadTexts: swDdmThresholdExceedOrRecover.setDescription('This object is used by swDdmAlarmTrap and swDdmWarningTrap,to indicate the GBIC is exceeding its ddm threshold or recover to normal status.')
mibBuilder.exportSymbols("DDM-MGMT-MIB", swDdmPortShutdown=swDdmPortShutdown, swDdmThresholdMgmtTable=swDdmThresholdMgmtTable, PYSNMP_MODULE_ID=swDdmMIB, swDdmCtrl=swDdmCtrl, swDdmTrapAndLog=swDdmTrapAndLog, swDdmStatusTable=swDdmStatusTable, swDdmThresholdMgmtEntry=swDdmThresholdMgmtEntry, swDdmPortMgmtTable=swDdmPortMgmtTable, swDdmPortState=swDdmPortState, swDdmShutdown=swDdmShutdown, swDdmStatus=swDdmStatus, swDdmHighAlarm=swDdmHighAlarm, swDdmTemperature=swDdmTemperature, swDdmLogState=swDdmLogState, swDdmMgmt=swDdmMgmt, swDdmThresholdType=swDdmThresholdType, swDdmInfo=swDdmInfo, swDdmNotifyPrefix=swDdmNotifyPrefix, swDdmTxPower=swDdmTxPower, swDdmAlarmTrap=swDdmAlarmTrap, swDdmThresholdExceedType=swDdmThresholdExceedType, swDdmPort=swDdmPort, swDdmWarningTrap=swDdmWarningTrap, swDdmNotify=swDdmNotify, swDdmActionMgmtTable=swDdmActionMgmtTable, swDdmTrapState=swDdmTrapState, swDdmPortMgmtEntry=swDdmPortMgmtEntry, swDdmActionMgmtEntry=swDdmActionMgmtEntry, swDdmLowWarning=swDdmLowWarning, swDdmBiasCurrent=swDdmBiasCurrent, swDdmActionType=swDdmActionType, swDdmHighWarning=swDdmHighWarning, swDdmLowAlarm=swDdmLowAlarm, swDdmStatusEntry=swDdmStatusEntry, swDdmThresholdExceedOrRecover=swDdmThresholdExceedOrRecover, swDdmNotificationBinding=swDdmNotificationBinding, swDdmRxPower=swDdmRxPower, swDdmVoltage=swDdmVoltage, swDdmActionMgmt=swDdmActionMgmt, swDdmMIB=swDdmMIB, swDdmThresholdMgmt=swDdmThresholdMgmt)
