#
# PySNMP MIB module HPSWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPSWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, NotificationType, IpAddress, Counter64, Integer32, enterprises, iso, ObjectIdentity, Unsigned32, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "Counter64", "Integer32", "enterprises", "iso", "ObjectIdentity", "Unsigned32", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
icf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14))
icfEswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 6))
hpEs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1))
hpEsMain = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1))
hpEsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1))
hpEsFwVer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsFwVer.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsFwVer.setDescription('The firmware version in the form major.minor.')
hpEsHwVer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsHwVer.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsHwVer.setDescription('The hardware version in the form major.minor.')
hpEsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsIpAddr.setDescription('The administrative value of the IP address. The current operational IP address can be obtained by the ipAdEntAddr entry in the ipAddrTable. This parameter will take effect only after a reset (hpEsReset) is issued or a power cycle.')
hpEsNetMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsNetMask.setDescription('The administrative value of the subnet mask. The current operational subnet mask can be obtained by the ipAdEntNetMask entry in the ipAddrTable. This parameter will take effect only after a reset (hpEsReset) is issued or a power cycle.')
hpEsDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsDefaultGateway.setDescription("The administrative value of the default gateway (router) IP address. The current operational default gateway's IP address can be obtained from the ipRouteTable. This parameter will take effect only after a reset (hpEsReset) is issued or a power cycle.")
hpEsTrapRcvrMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsTrapRcvrMaxEnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsTrapRcvrMaxEnt.setDescription('The maximum number of rows in the trap receiver table.')
hpEsTrapRcvrCurEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsTrapRcvrCurEnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsTrapRcvrCurEnt.setDescription('The current number of rows in the trap receiver table.')
hpEsTrapRcvrNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 655535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsTrapRcvrNext.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsTrapRcvrNext.setDescription('The index of the next available row to be created in the trap receiver table. A value of zero means that the table is full and no more rows can be added.')
hpEsTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 9), )
if mibBuilder.loadTexts: hpEsTrapRcvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsTrapRcvrTable.setDescription('A table of managers to which to send traps. Entries in the table are saved across resets and power cycles.')
hpEsTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 9, 1), ).setIndexNames((0, "HPSWITCH-MIB", "hpEsTrapRcvrIndex"))
if mibBuilder.loadTexts: hpEsTrapRcvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsTrapRcvrEntry.setDescription('Definition of rows in the trap receiver table. The column hpEsTrapRcvrStatus is used to create and delete rows in the table. Creation requires a SET PDU with objects hpEsTrapRcvrStatus, hpEsTrapRcvrIpAddress, and hpEsTrapRcvrComm.')
hpEsTrapRcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsTrapRcvrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsTrapRcvrIndex.setDescription('The index of the row in the table.')
hpEsTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsTrapRcvrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsTrapRcvrStatus.setDescription("Setting this object to the value invalid(3) deletes the row from the table. The value invalid(3) should never be returned on a GET. The value of create(4) on a SET causes a new row to be created if the row does not already exist. If it does, then a 'badValue'error should be returned. The value returned on GETs should be valid(2) or other(1), which is used to indicate any other condition.")
hpEsTrapRcvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsTrapRcvrIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsTrapRcvrIpAddress.setDescription('IP address for an SNMP manager that is to receive the trap.')
hpEsTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 1, 9, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsTrapRcvrComm.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsTrapRcvrComm.setDescription('Community string to use.')
hpEsSys = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2))
hpEsNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsNumPorts.setDescription('The maximum number of ports on the switch.')
hpEsNumStations = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsNumStations.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsNumStations.setDescription('Aggregate number of currently active stations (nodes) on all ports on the switch. This is the value from the system module.')
hpEsMostStations = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsMostStations.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsMostStations.setDescription('Highest aggregate number of stations ever active on all ports at one time, since the last reset or power cycle. This is the value as seen by the system module.')
hpEsMaxStations = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsMaxStations.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsMaxStations.setDescription('Highest aggregate number of stations which the switch can support simultaneously. (This is the maximum number that the system module can support.)')
hpEsReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("softReset", 3), ("hardReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsReset.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsReset.setDescription('This object is used to reset the switch. Writing softReset(3) causes the switch to reset the hardware, run quick diagnostics, clear all counters, start switching, issue a warmstart trap, and then be able to respond to SNMP requests. Writing hardReset(4) causes the switch to run power up diagnostics and then execute a soft reset. Note: all address tables are cleared in both cases. The administrative parameters from nonvolatile memory are used to initialize the operational parameters. The value returned on GETs should be running(2) or other(1), which is used to indicate any other condition.')
hpEsNumResets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsNumResets.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsNumResets.setDescription('Number of soft resets the switch has executed since the last hard reset or power cycle. Soft resets are defined as writing softReset(3) to hpEsReset, pressing the front panel reset button, executing a soft reset from the console, or resets induced by the switch firmware.')
hpEsAddrAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsAddrAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsAddrAgingTime.setDescription('Number of minutes of inactivity before an address entity is aged out. A value of zero means no aging. Note: if an address shows up on another port, the original port to address assignment is automatically deleted. The value is saved across resets and power cycles.')
hpEsSysStaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 9), )
if mibBuilder.loadTexts: hpEsSysStaTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsSysStaTable.setDescription('A table of station addresses from all ports known to the system module.')
hpEsSysStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 9, 1), ).setIndexNames((0, "HPSWITCH-MIB", "hpEsSysStaMacAddr"))
if mibBuilder.loadTexts: hpEsSysStaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsSysStaEntry.setDescription('Definition of the rows in the system module station address table. Rows can not be created or deleted via SNMP requests.')
hpEsSysStaMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsSysStaMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsSysStaMacAddr.setDescription("The Station's MAC address.")
hpEsSysStaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsSysStaPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsSysStaPort.setDescription('The source port for the Station.')
hpEsSysStaTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 1, 2, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsSysStaTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsSysStaTraffic.setDescription('A bit string that identifies with value of one of the ports that this station has generated traffic to or from. The bits are numbered starting at zero, with bit zero being the high order bit in the first byte, bit seven being the low order bit in the first byte, bit eight being the high order bit in the second byte, etc. Ports correspond with bits (i.e., port 1 is bit 1, etc.). The size of this in octets is the number of ports (i.e., hpEsNumPorts), divided by 8, plus one.')
hpEsTop = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 2))
hpEsPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3))
hpEsPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1), )
if mibBuilder.loadTexts: hpEsPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortTable.setDescription('A table of information about each port. The number of rows is given by hpEsNumPorts.')
hpEsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1), ).setIndexNames((0, "HPSWITCH-MIB", "hpEsPortIndex"))
if mibBuilder.loadTexts: hpEsPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortEntry.setDescription('Definition of rows in the port table. The number of rows is determined by the hardware and is specified by the value of hpEsNumPorts. Rows can not be created or deleted via SNMP requests.')
hpEsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortIndex.setDescription('A unique value for each port entry. The value corresponds the port number.')
hpEsPortOprStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsPortOprStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortOprStatus.setDescription('The operational status of the port. Setting to enabled(1) enables the port. Setting to disabled(2) disables the port. The value is saved across resets and power cycles.')
hpEsPortExtConn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("aui", 2), ("rj45", 3), ("noExternal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortExtConn.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortExtConn.setDescription('Which external connector has been configured via jumpers. For EPS1500, this object will always return AUI.')
hpEsPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortDuplex.setDescription('Indicates whether the port is jumper configured for full or half duplex operation. Note: internal connected ports are always halfDuplex(2).')
hpEsPortRcvLocalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortRcvLocalFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortRcvLocalFrames.setDescription('Number of frames received where the destination is on this port.')
hpEsPortForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortForwardedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortForwardedFrames.setDescription('Number of frames received on this port and forwarded to another port.')
hpEsPortMostStations = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortMostStations.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortMostStations.setDescription('Highest number of stations ever active at any time since the last reset of the switch as seen by this port.')
hpEsPortMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortMaxStations.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortMaxStations.setDescription('Maximum number of stations which the port can support simultaneously.')
hpEsPortSWHandledFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortSWHandledFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortSWHandledFrames.setDescription('Number of Frames received on this port and delivered to the system module for processing.')
hpEsPortLocalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortLocalStations.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortLocalStations.setDescription('Number of stations on this port which belong to the local segment.')
hpEsPortRemoteStations = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortRemoteStations.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortRemoteStations.setDescription('Number of stations on this port which belong to another segment.')
hpEsPortUnknownStaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortUnknownStaFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortUnknownStaFrames.setDescription("Number of unicast frames received on this port and forwarded to the system module for processing because the source or destination station address is not in the port's forwarding table.")
hpEsPortResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsPortResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortResetStats.setDescription('Setting this object to reset(3) causes all traffic counters for this port to be set to zero. Also the value of hpEsPortResetTimer is set to zero.')
hpEsPortResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortResetTimer.setDescription('Time (in 100th second ticks) since the port counters were reset.')
hpEsPortResetAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpEsPortResetAddrs.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortResetAddrs.setDescription('Setting this object to reset(3) clears all address table entries for this port as well as setting all port traffic counters to zero and setting hpEsPortResetTimer to zero.')
hpEsPortRcvBcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortRcvBcasts.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortRcvBcasts.setDescription('Number of Broadcast Frames received on this port without errors.')
hpEsPortSwitchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 6, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpEsPortSwitchedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hpEsPortSwitchedFrames.setDescription('Number of frames switched on this port')
mibBuilder.exportSymbols("HPSWITCH-MIB", hpEsTrapRcvrComm=hpEsTrapRcvrComm, hpEsConfig=hpEsConfig, hpEsSysStaEntry=hpEsSysStaEntry, hpEsPort=hpEsPort, hpEsTrapRcvrStatus=hpEsTrapRcvrStatus, hpEsTop=hpEsTop, hpEsNumResets=hpEsNumResets, hpEsPortEntry=hpEsPortEntry, hpEsMain=hpEsMain, hpEsPortDuplex=hpEsPortDuplex, hpEsPortUnknownStaFrames=hpEsPortUnknownStaFrames, hpEsTrapRcvrCurEnt=hpEsTrapRcvrCurEnt, nm=nm, icf=icf, hpEsSysStaTable=hpEsSysStaTable, hpEsReset=hpEsReset, hpEsPortRcvLocalFrames=hpEsPortRcvLocalFrames, hpEsPortSWHandledFrames=hpEsPortSWHandledFrames, hpEsTrapRcvrTable=hpEsTrapRcvrTable, hpEsMostStations=hpEsMostStations, MacAddr=MacAddr, hpEsAddrAgingTime=hpEsAddrAgingTime, hpEsPortIndex=hpEsPortIndex, hpEsFwVer=hpEsFwVer, hpEsPortOprStatus=hpEsPortOprStatus, hpEsPortResetAddrs=hpEsPortResetAddrs, hp=hp, hpEsSys=hpEsSys, hpEsPortRcvBcasts=hpEsPortRcvBcasts, hpEsHwVer=hpEsHwVer, hpEsPortTable=hpEsPortTable, hpEsMaxStations=hpEsMaxStations, hpEsTrapRcvrMaxEnt=hpEsTrapRcvrMaxEnt, hpEsTrapRcvrNext=hpEsTrapRcvrNext, hpEsIpAddr=hpEsIpAddr, icfEswitch=icfEswitch, hpEsPortForwardedFrames=hpEsPortForwardedFrames, hpEsTrapRcvrEntry=hpEsTrapRcvrEntry, hpEsTrapRcvrIpAddress=hpEsTrapRcvrIpAddress, hpEsNumPorts=hpEsNumPorts, hpEsPortLocalStations=hpEsPortLocalStations, hpEsPortExtConn=hpEsPortExtConn, hpEsDefaultGateway=hpEsDefaultGateway, hpEsPortSwitchedFrames=hpEsPortSwitchedFrames, hpEsTrapRcvrIndex=hpEsTrapRcvrIndex, hpEsNumStations=hpEsNumStations, hpEsPortResetStats=hpEsPortResetStats, hpEsSysStaTraffic=hpEsSysStaTraffic, hpEs=hpEs, hpEsPortResetTimer=hpEsPortResetTimer, hpEsPortMostStations=hpEsPortMostStations, hpEsSysStaMacAddr=hpEsSysStaMacAddr, hpEsSysStaPort=hpEsSysStaPort, hpEsNetMask=hpEsNetMask, hpEsPortMaxStations=hpEsPortMaxStations, hpEsPortRemoteStations=hpEsPortRemoteStations)
