#
# PySNMP MIB module SONUS-IP-PROTOCOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-IP-PROTOCOL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, Gauge32, ModuleIdentity, Bits, Unsigned32, ObjectIdentity, iso, NotificationType, IpAddress, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Gauge32", "ModuleIdentity", "Bits", "Unsigned32", "ObjectIdentity", "iso", "NotificationType", "IpAddress", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonusPacketMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusPacketMIBs")
sonusIpProtocolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4))
if mibBuilder.loadTexts: sonusIpProtocolMIB.setLastUpdated('200008280000Z')
if mibBuilder.loadTexts: sonusIpProtocolMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusIpProtocolMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusIpProtocolMIB.setDescription('The MIB Module for IP Protocol Management.')
sonusMib_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2)).setLabel("sonusMib-2")
sonusIp = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4))
sonusIpGeneralGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1), )
if mibBuilder.loadTexts: sonusIpGeneralGroupTable.setStatus('current')
if mibBuilder.loadTexts: sonusIpGeneralGroupTable.setDescription('The collection of IP General Group information for the specified instance.')
sonusIpGeneralGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1), ).setIndexNames((0, "SONUS-IP-PROTOCOL-MIB", "sonusIpGeneralGroupShelf"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusIpGeneralGroupSlot"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusIpGeneralGroupInstance"))
if mibBuilder.loadTexts: sonusIpGeneralGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIpGeneralGroupEntry.setDescription('The collection of IP General Group information for the specified instance.')
sonusIpForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notForwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpForwarding.setStatus('current')
if mibBuilder.loadTexts: sonusIpForwarding.setDescription('The indication of whether this entity is acting as an IP router in respect to the forwarding of datagrams received by, but not addressed to, this entity. IP routers forward datagrams. IP hosts do not (except those source-routed via the host).')
sonusIpDefaultTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpDefaultTTL.setStatus('current')
if mibBuilder.loadTexts: sonusIpDefaultTTL.setDescription('The default value inserted into the Time-To-Live field of the IP header of datagrams originated at this entity, whenever a TTL value is not supplied by the transport layer protocol.')
sonusIpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpInReceives.setStatus('current')
if mibBuilder.loadTexts: sonusIpInReceives.setDescription('The total number of input datagrams received from interfaces, including those received in error.')
sonusIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpInHdrErrors.setStatus('current')
if mibBuilder.loadTexts: sonusIpInHdrErrors.setDescription('The number of input datagrams discarded due to errors in their IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.')
sonusIpInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpInAddrErrors.setStatus('current')
if mibBuilder.loadTexts: sonusIpInAddrErrors.setDescription("The number of input datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity. This count includes invalid addresses (e.g., 0.0.0.0) and addresses of unsupported Classes (e.g., Class E). For entities which are not IP routers and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address.")
sonusIpForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: sonusIpForwDatagrams.setDescription('The number of input datagrams for which this entity was not their final IP destination, as a result of which an attempt was made to find a route to forward them to that final destination. In entities which do not act as IP routers, this counter will include only those packets which were Source-Routed via this entity, and the Source-Route option processing was successful.')
sonusIpInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: sonusIpInUnknownProtos.setDescription('The number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol.')
sonusIpInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpInDiscards.setStatus('current')
if mibBuilder.loadTexts: sonusIpInDiscards.setDescription('The number of input IP datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g., for lack of buffer space). Note that this counter does not include any datagrams discarded while awaiting re-assembly.')
sonusIpInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpInDelivers.setStatus('current')
if mibBuilder.loadTexts: sonusIpInDelivers.setDescription('The total number of input datagrams successfully delivered to IP user-protocols (including ICMP).')
sonusIpOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpOutRequests.setStatus('current')
if mibBuilder.loadTexts: sonusIpOutRequests.setDescription('The total number of IP datagrams which local IP user- protocols (including ICMP) supplied to IP in requests for transmission. Note that this counter does not include any datagrams counted in ipForwDatagrams.')
sonusIpOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpOutDiscards.setStatus('current')
if mibBuilder.loadTexts: sonusIpOutDiscards.setDescription('The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination, but which were discarded (e.g., for lack of buffer space). Note that this counter would include datagrams counted in ipForwDatagrams if any such packets met this (discretionary) discard criterion.')
sonusIpOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpOutNoRoutes.setStatus('current')
if mibBuilder.loadTexts: sonusIpOutNoRoutes.setDescription("The number of IP datagrams discarded because no route could be found to transmit them to their destination. Note that this counter includes any packets counted in ipForwDatagrams which meet this `no-route' criterion. Note that this includes any datagrams which a host cannot route because all of its default routers are down.")
sonusIpReasmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpReasmTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIpReasmTimeout.setDescription('The maximum number of seconds which received fragments are held while they are awaiting reassembly at this entity.')
sonusIpReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpReasmReqds.setStatus('current')
if mibBuilder.loadTexts: sonusIpReasmReqds.setDescription('The number of IP fragments received which needed to be reassembled at this entity.')
sonusIpReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpReasmOKs.setStatus('current')
if mibBuilder.loadTexts: sonusIpReasmOKs.setDescription('The number of IP datagrams successfully re-assembled.')
sonusIpReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpReasmFails.setStatus('current')
if mibBuilder.loadTexts: sonusIpReasmFails.setDescription('The number of failures detected by the IP re-assembly algorithm (for whatever reason: timed out, errors, etc). Note that this is not necessarily a count of discarded IP fragments since some algorithms (notably the algorithm in RFC 815) can lose track of the number of fragments by combining them as they are received.')
sonusIpFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpFragOKs.setStatus('current')
if mibBuilder.loadTexts: sonusIpFragOKs.setDescription('The number of IP datagrams that have been successfully fragmented at this entity.')
sonusIpFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpFragFails.setStatus('current')
if mibBuilder.loadTexts: sonusIpFragFails.setDescription("The number of IP datagrams that have been discarded because they needed to be fragmented at this entity but could not be, e.g., because their Don't Fragment flag was set.")
sonusIpFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpFragCreates.setStatus('current')
if mibBuilder.loadTexts: sonusIpFragCreates.setDescription('The number of IP datagram fragments that have been generated as a result of fragmentation at this entity.')
sonusIpRoutingDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpRoutingDiscards.setStatus('current')
if mibBuilder.loadTexts: sonusIpRoutingDiscards.setDescription('The number of routing entries which were chosen to be discarded even though they are valid. One possible reason for discarding such an entry could be to free-up buffer space for other routing entries.')
sonusIpGeneralGroupShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpGeneralGroupShelf.setStatus('current')
if mibBuilder.loadTexts: sonusIpGeneralGroupShelf.setDescription('A 32-bit integer identifying the shelf that the IP General Group table applies to')
sonusIpGeneralGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpGeneralGroupSlot.setStatus('current')
if mibBuilder.loadTexts: sonusIpGeneralGroupSlot.setDescription('A 32-bit integer identifying the slot that the IP General Group table applies to')
sonusIpGeneralGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIpGeneralGroupInstance.setStatus('current')
if mibBuilder.loadTexts: sonusIpGeneralGroupInstance.setDescription('A 32-bit integer identifying the instance that the IP General Group table applies to')
sonusIcmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5))
sonusIcmpGeneralGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1), )
if mibBuilder.loadTexts: sonusIcmpGeneralGroupTable.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpGeneralGroupTable.setDescription('The collection of ICMP General Group information for the specified instance.')
sonusIcmpGeneralGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1), ).setIndexNames((0, "SONUS-IP-PROTOCOL-MIB", "sonusIcmpGeneralGroupShelf"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusIcmpGeneralGroupSlot"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusIcmpGeneralGroupInstance"))
if mibBuilder.loadTexts: sonusIcmpGeneralGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpGeneralGroupEntry.setDescription('The collection of ICMP General Group information for the specified instance.')
sonusIcmpInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInMsgs.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInMsgs.setDescription('The total number of ICMP messages which the entity received. Note that this counter includes all those counted by icmpInErrors.')
sonusIcmpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInErrors.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInErrors.setDescription('The number of ICMP messages which the entity received but determined as having ICMP-specific errors (bad ICMP checksums, bad length, etc.).')
sonusIcmpInDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInDestUnreachs.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInDestUnreachs.setDescription('The number of ICMP Destination Unreachable messages received.')
sonusIcmpInTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInTimeExcds.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInTimeExcds.setDescription('The number of ICMP Time Exceeded messages received.')
sonusIcmpInParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInParmProbs.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInParmProbs.setDescription('The number of ICMP Parameter Problem messages received.')
sonusIcmpInSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInSrcQuenchs.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInSrcQuenchs.setDescription('The number of ICMP Source Quench messages received.')
sonusIcmpInRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInRedirects.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInRedirects.setDescription('The number of ICMP Redirect messages received.')
sonusIcmpInEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInEchos.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInEchos.setDescription('The number of ICMP Echo (request) messages received.')
sonusIcmpInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInEchoReps.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInEchoReps.setDescription('The number of ICMP Echo Reply messages received.')
sonusIcmpInTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInTimestamps.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInTimestamps.setDescription('The number of ICMP Timestamp (request) messages received.')
sonusIcmpInTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInTimestampReps.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInTimestampReps.setDescription('The number of ICMP Timestamp Reply messages received.')
sonusIcmpInAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInAddrMasks.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInAddrMasks.setDescription('The number of ICMP Address Mask Request messages received.')
sonusIcmpInAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpInAddrMaskReps.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpInAddrMaskReps.setDescription('The number of ICMP Address Mask Reply messages received.')
sonusIcmpOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutMsgs.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutMsgs.setDescription('The total number of ICMP messages which this entity attempted to send. Note that this counter includes all those counted by icmpOutErrors.')
sonusIcmpOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutErrors.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutErrors.setDescription("The number of ICMP messages which this entity did not send due to problems discovered within ICMP such as a lack of buffers. This value should not include errors discovered outside the ICMP layer such as the inability of IP to route the resultant datagram. In some implementations there may be no types of error which contribute to this counter's value.")
sonusIcmpOutDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutDestUnreachs.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutDestUnreachs.setDescription('The number of ICMP Destination Unreachable messages sent.')
sonusIcmpOutTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutTimeExcds.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutTimeExcds.setDescription('The number of ICMP Time Exceeded messages sent.')
sonusIcmpOutParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutParmProbs.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutParmProbs.setDescription('The number of ICMP Parameter Problem messages sent.')
sonusIcmpOutSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutSrcQuenchs.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutSrcQuenchs.setDescription('The number of ICMP Source Quench messages sent.')
sonusIcmpOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutRedirects.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutRedirects.setDescription('The number of ICMP Redirect messages sent. For a host, this object will always be zero, since hosts do not send redirects.')
sonusIcmpOutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutEchos.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutEchos.setDescription('The number of ICMP Echo (request) messages sent.')
sonusIcmpOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutEchoReps.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutEchoReps.setDescription('The number of ICMP Echo Reply messages sent.')
sonusIcmpOutTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutTimestamps.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutTimestamps.setDescription('The number of ICMP Timestamp (request) messages sent.')
sonusIcmpOutTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutTimestampReps.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutTimestampReps.setDescription('The number of ICMP Timestamp Reply messages sent.')
sonusIcmpOutAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutAddrMasks.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutAddrMasks.setDescription('The number of ICMP Address Mask Request messages sent.')
sonusIcmpOutAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpOutAddrMaskReps.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpOutAddrMaskReps.setDescription('The number of ICMP Address Mask Reply messages sent.')
sonusIcmpGeneralGroupShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpGeneralGroupShelf.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpGeneralGroupShelf.setDescription('A 32-bit integer identifying the shelf that the ICMP General Group table applies to')
sonusIcmpGeneralGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpGeneralGroupSlot.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpGeneralGroupSlot.setDescription('A 32-bit integer identifying the slot that the ICMP General Group table applies to')
sonusIcmpGeneralGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 5, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIcmpGeneralGroupInstance.setStatus('current')
if mibBuilder.loadTexts: sonusIcmpGeneralGroupInstance.setDescription('A 32-bit integer identifying the instance that the ICMP General Group table applies to')
sonusTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6))
sonusTcpGeneralGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1), )
if mibBuilder.loadTexts: sonusTcpGeneralGroupTable.setStatus('current')
if mibBuilder.loadTexts: sonusTcpGeneralGroupTable.setDescription('The collection of TCP General Group information for the specified instance.')
sonusTcpGeneralGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1), ).setIndexNames((0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpGeneralGroupShelf"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpGeneralGroupSlot"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpGeneralGroupInstance"))
if mibBuilder.loadTexts: sonusTcpGeneralGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sonusTcpGeneralGroupEntry.setDescription('The collection of TCP General Group information for the specified instance.')
sonusTcpRtoAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpRtoAlgorithm.setStatus('current')
if mibBuilder.loadTexts: sonusTcpRtoAlgorithm.setDescription('The algorithm used to determine the timeout value used for retransmitting unacknowledged octets.')
sonusTcpRtoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpRtoMin.setStatus('current')
if mibBuilder.loadTexts: sonusTcpRtoMin.setDescription('The minimum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the LBOUND quantity described in RFC 793.')
sonusTcpRtoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpRtoMax.setStatus('current')
if mibBuilder.loadTexts: sonusTcpRtoMax.setDescription('The maximum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the UBOUND quantity described in RFC 793.')
sonusTcpMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpMaxConn.setStatus('current')
if mibBuilder.loadTexts: sonusTcpMaxConn.setDescription('The limit on the total number of TCP connections the entity can support. In entities where the maximum number of connections is dynamic, this object should contain the value -1.')
sonusTcpActiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpActiveOpens.setStatus('current')
if mibBuilder.loadTexts: sonusTcpActiveOpens.setDescription('The number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state.')
sonusTcpPassiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpPassiveOpens.setStatus('current')
if mibBuilder.loadTexts: sonusTcpPassiveOpens.setDescription('The number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state.')
sonusTcpAttemptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpAttemptFails.setStatus('current')
if mibBuilder.loadTexts: sonusTcpAttemptFails.setDescription('The number of times TCP connections have made a direct transition to the CLOSED state from either the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.')
sonusTcpEstabResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpEstabResets.setStatus('current')
if mibBuilder.loadTexts: sonusTcpEstabResets.setDescription('The number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.')
sonusTcpCurrEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpCurrEstab.setStatus('current')
if mibBuilder.loadTexts: sonusTcpCurrEstab.setDescription('The number of TCP connections for which the current state is either ESTABLISHED or CLOSE- WAIT.')
sonusTcpInSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpInSegs.setStatus('current')
if mibBuilder.loadTexts: sonusTcpInSegs.setDescription('The total number of segments received, including those received in error. This count includes segments received on currently established connections.')
sonusTcpOutSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpOutSegs.setStatus('current')
if mibBuilder.loadTexts: sonusTcpOutSegs.setDescription('The total number of segments sent, including those on current connections but excluding those containing only retransmitted octets.')
sonusTcpRetransSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpRetransSegs.setStatus('current')
if mibBuilder.loadTexts: sonusTcpRetransSegs.setDescription('The total number of segments retransmitted - that is, the number of TCP segments transmitted containing one or more previously transmitted octets.')
sonusTcpInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpInErrs.setStatus('current')
if mibBuilder.loadTexts: sonusTcpInErrs.setDescription('The total number of segments received in error (e.g., bad TCP checksums).')
sonusTcpOutRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpOutRsts.setStatus('current')
if mibBuilder.loadTexts: sonusTcpOutRsts.setDescription('The number of TCP segments sent containing the RST flag.')
sonusTcpGeneralGroupShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpGeneralGroupShelf.setStatus('current')
if mibBuilder.loadTexts: sonusTcpGeneralGroupShelf.setDescription('A 32-bit integer identifying the shelf that the TCP General Group table applies to')
sonusTcpGeneralGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpGeneralGroupSlot.setStatus('current')
if mibBuilder.loadTexts: sonusTcpGeneralGroupSlot.setDescription('A 32-bit integer identifying the slot that the TCP General Group table applies to')
sonusTcpGeneralGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpGeneralGroupInstance.setStatus('current')
if mibBuilder.loadTexts: sonusTcpGeneralGroupInstance.setDescription('A 32-bit integer identifying the instance that the TCP General Group table applies to')
sonusTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13), )
if mibBuilder.loadTexts: sonusTcpConnTable.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnTable.setDescription('A table containing TCP connection-specific information.')
sonusTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13, 1), ).setIndexNames((0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpConnShelf"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpConnSlot"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpConnInstance"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpConnLocalAddress"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpConnLocalPort"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpConnRemAddress"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusTcpConnRemPort"))
if mibBuilder.loadTexts: sonusTcpConnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnEntry.setDescription('A conceptual row of the tcpConnTable containing information about a particular current TCP connection. Each row of this table is transient, in that it ceases to exist when (or soon after) the connection makes the transition to the CLOSED state.')
sonusTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpConnState.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnState.setDescription("The state of this TCP connection. The only value which may be set by a management station is deleteTCB(12). Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to set this object to any other value. If a management station sets this object to the value deleteTCB(12), then this has the effect of deleting the TCB (as defined in RFC 793) of the corresponding connection on the managed node, resulting in immediate termination of the connection. As an implementation-specific option, a RST segment may be sent from the managed node to the other TCP endpoint (note however that RST segments are not sent reliably).")
sonusTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpConnLocalAddress.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnLocalAddress.setDescription('The local IP address for this TCP connection. In the case of a connection in the listen state which is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used.')
sonusTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpConnLocalPort.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnLocalPort.setDescription('The local port number for this TCP connection.')
sonusTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpConnRemAddress.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnRemAddress.setDescription('The remote IP address for this TCP connection.')
sonusTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpConnRemPort.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnRemPort.setDescription('The remote port number for this TCP connection.')
sonusTcpConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpConnShelf.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnShelf.setDescription('A 32-bit integer identifying the shelf that the TCP Connection Group table applies to')
sonusTcpConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpConnSlot.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnSlot.setDescription('A 32-bit integer identifying the slot that the TCP Connection Group table applies to')
sonusTcpConnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 6, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTcpConnInstance.setStatus('current')
if mibBuilder.loadTexts: sonusTcpConnInstance.setDescription('A 32-bit integer identifying the instance that the TCP Connection Group table applies to')
sonusUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7))
sonusUdpGeneralGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 1), )
if mibBuilder.loadTexts: sonusUdpGeneralGroupTable.setStatus('current')
if mibBuilder.loadTexts: sonusUdpGeneralGroupTable.setDescription('The collection of UDP General Group information for the specified instance.')
sonusUdpGeneralGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 1, 1), ).setIndexNames((0, "SONUS-IP-PROTOCOL-MIB", "sonusUdpGeneralGroupShelf"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusUdpGeneralGroupSlot"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusUdpGeneralGroupInstance"))
if mibBuilder.loadTexts: sonusUdpGeneralGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sonusUdpGeneralGroupEntry.setDescription('The collection of UDP General Group information for the specified instance.')
sonusUdpInDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpInDatagrams.setStatus('current')
if mibBuilder.loadTexts: sonusUdpInDatagrams.setDescription('The total number of UDP datagrams delivered to UDP users.')
sonusUdpNoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpNoPorts.setStatus('current')
if mibBuilder.loadTexts: sonusUdpNoPorts.setDescription('The total number of received UDP datagrams for which there was no application at the destination port.')
sonusUdpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpInErrors.setStatus('current')
if mibBuilder.loadTexts: sonusUdpInErrors.setDescription('The number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.')
sonusUdpOutDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpOutDatagrams.setStatus('current')
if mibBuilder.loadTexts: sonusUdpOutDatagrams.setDescription('The total number of UDP datagrams sent from this entity.')
sonusUdpGeneralGroupShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpGeneralGroupShelf.setStatus('current')
if mibBuilder.loadTexts: sonusUdpGeneralGroupShelf.setDescription('A 32-bit integer identifying the shelf that the UDP General Group table applies to')
sonusUdpGeneralGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpGeneralGroupSlot.setStatus('current')
if mibBuilder.loadTexts: sonusUdpGeneralGroupSlot.setDescription('A 32-bit integer identifying the slot that the UDP General Group table applies to')
sonusUdpGeneralGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpGeneralGroupInstance.setStatus('current')
if mibBuilder.loadTexts: sonusUdpGeneralGroupInstance.setDescription('A 32-bit integer identifying the instance that the UDP General Group table applies to')
sonusUdpTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 5), )
if mibBuilder.loadTexts: sonusUdpTable.setStatus('current')
if mibBuilder.loadTexts: sonusUdpTable.setDescription('A table containing UDP listener information.')
sonusUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 5, 1), ).setIndexNames((0, "SONUS-IP-PROTOCOL-MIB", "sonusUdpShelf"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusUdpSlot"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusUdpInstance"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusUdpLocalAddress"), (0, "SONUS-IP-PROTOCOL-MIB", "sonusUdpLocalPort"))
if mibBuilder.loadTexts: sonusUdpEntry.setStatus('current')
if mibBuilder.loadTexts: sonusUdpEntry.setDescription('Information about a particular current UDP listener.')
sonusUdpLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpLocalAddress.setStatus('current')
if mibBuilder.loadTexts: sonusUdpLocalAddress.setDescription('The local IP address for this UDP listener. In the case of a UDP listener which is willing to accept datagrams for any IP interface associated with the node, the value 0.0.0.0 is used.')
sonusUdpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpLocalPort.setStatus('current')
if mibBuilder.loadTexts: sonusUdpLocalPort.setDescription('The local port number for this UDP listener.')
sonusUdpShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpShelf.setStatus('current')
if mibBuilder.loadTexts: sonusUdpShelf.setDescription('A 32-bit integer identifying the shelf that the UDP Listener table applies to')
sonusUdpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpSlot.setStatus('current')
if mibBuilder.loadTexts: sonusUdpSlot.setDescription('A 32-bit integer identifying the slot that the UDP Listener table applies to')
sonusUdpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 4, 2, 7, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUdpInstance.setStatus('current')
if mibBuilder.loadTexts: sonusUdpInstance.setDescription('A 32-bit integer identifying the instance that the UDP Listener table applies to')
mibBuilder.exportSymbols("SONUS-IP-PROTOCOL-MIB", sonusIcmpGeneralGroupTable=sonusIcmpGeneralGroupTable, sonusIpGeneralGroupTable=sonusIpGeneralGroupTable, sonusIpForwDatagrams=sonusIpForwDatagrams, sonusIpReasmTimeout=sonusIpReasmTimeout, sonusIcmpOutAddrMasks=sonusIcmpOutAddrMasks, sonusIpRoutingDiscards=sonusIpRoutingDiscards, sonusTcpGeneralGroupShelf=sonusTcpGeneralGroupShelf, sonusIcmpOutRedirects=sonusIcmpOutRedirects, sonusIpFragCreates=sonusIpFragCreates, sonusMib_2=sonusMib_2, sonusIpGeneralGroupSlot=sonusIpGeneralGroupSlot, sonusUdpGeneralGroupTable=sonusUdpGeneralGroupTable, sonusIcmpOutParmProbs=sonusIcmpOutParmProbs, sonusUdpGeneralGroupSlot=sonusUdpGeneralGroupSlot, sonusTcpAttemptFails=sonusTcpAttemptFails, sonusUdp=sonusUdp, sonusIcmpGeneralGroupSlot=sonusIcmpGeneralGroupSlot, sonusTcpOutSegs=sonusTcpOutSegs, sonusTcp=sonusTcp, sonusTcpConnShelf=sonusTcpConnShelf, sonusTcpConnRemPort=sonusTcpConnRemPort, sonusUdpGeneralGroupEntry=sonusUdpGeneralGroupEntry, sonusTcpMaxConn=sonusTcpMaxConn, sonusTcpConnEntry=sonusTcpConnEntry, sonusIcmpInParmProbs=sonusIcmpInParmProbs, sonusUdpInstance=sonusUdpInstance, sonusIpInReceives=sonusIpInReceives, sonusIcmpInMsgs=sonusIcmpInMsgs, sonusIcmpInSrcQuenchs=sonusIcmpInSrcQuenchs, sonusIpInUnknownProtos=sonusIpInUnknownProtos, sonusTcpConnRemAddress=sonusTcpConnRemAddress, sonusIcmp=sonusIcmp, sonusIcmpOutEchos=sonusIcmpOutEchos, sonusIp=sonusIp, sonusIcmpInTimestamps=sonusIcmpInTimestamps, sonusIpOutDiscards=sonusIpOutDiscards, sonusTcpRtoAlgorithm=sonusTcpRtoAlgorithm, sonusTcpActiveOpens=sonusTcpActiveOpens, sonusIpOutNoRoutes=sonusIpOutNoRoutes, sonusUdpLocalAddress=sonusUdpLocalAddress, sonusIpInAddrErrors=sonusIpInAddrErrors, sonusIpInDelivers=sonusIpInDelivers, sonusTcpGeneralGroupInstance=sonusTcpGeneralGroupInstance, sonusIpDefaultTTL=sonusIpDefaultTTL, sonusIcmpOutTimestamps=sonusIcmpOutTimestamps, sonusIpGeneralGroupInstance=sonusIpGeneralGroupInstance, sonusTcpConnState=sonusTcpConnState, sonusTcpOutRsts=sonusTcpOutRsts, sonusTcpConnInstance=sonusTcpConnInstance, sonusIpInHdrErrors=sonusIpInHdrErrors, sonusIpReasmOKs=sonusIpReasmOKs, sonusTcpCurrEstab=sonusTcpCurrEstab, sonusIcmpInEchoReps=sonusIcmpInEchoReps, sonusUdpShelf=sonusUdpShelf, sonusIpGeneralGroupEntry=sonusIpGeneralGroupEntry, sonusTcpConnLocalPort=sonusTcpConnLocalPort, sonusTcpRtoMin=sonusTcpRtoMin, sonusIcmpInEchos=sonusIcmpInEchos, sonusIcmpOutMsgs=sonusIcmpOutMsgs, sonusTcpConnLocalAddress=sonusTcpConnLocalAddress, sonusIpGeneralGroupShelf=sonusIpGeneralGroupShelf, sonusIcmpInRedirects=sonusIcmpInRedirects, sonusUdpInDatagrams=sonusUdpInDatagrams, sonusTcpRetransSegs=sonusTcpRetransSegs, sonusIcmpInDestUnreachs=sonusIcmpInDestUnreachs, sonusIpProtocolMIB=sonusIpProtocolMIB, sonusUdpNoPorts=sonusUdpNoPorts, sonusIpFragFails=sonusIpFragFails, sonusIcmpOutTimeExcds=sonusIcmpOutTimeExcds, sonusIcmpOutAddrMaskReps=sonusIcmpOutAddrMaskReps, sonusIcmpOutEchoReps=sonusIcmpOutEchoReps, sonusIpReasmReqds=sonusIpReasmReqds, sonusIpOutRequests=sonusIpOutRequests, sonusIpReasmFails=sonusIpReasmFails, sonusTcpGeneralGroupEntry=sonusTcpGeneralGroupEntry, PYSNMP_MODULE_ID=sonusIpProtocolMIB, sonusUdpTable=sonusUdpTable, sonusIcmpOutErrors=sonusIcmpOutErrors, sonusUdpOutDatagrams=sonusUdpOutDatagrams, sonusIcmpOutDestUnreachs=sonusIcmpOutDestUnreachs, sonusIpFragOKs=sonusIpFragOKs, sonusIcmpInAddrMaskReps=sonusIcmpInAddrMaskReps, sonusIcmpInErrors=sonusIcmpInErrors, sonusTcpInErrs=sonusTcpInErrs, sonusUdpInErrors=sonusUdpInErrors, sonusUdpGeneralGroupInstance=sonusUdpGeneralGroupInstance, sonusIcmpOutSrcQuenchs=sonusIcmpOutSrcQuenchs, sonusIcmpOutTimestampReps=sonusIcmpOutTimestampReps, sonusUdpSlot=sonusUdpSlot, sonusIpForwarding=sonusIpForwarding, sonusIpInDiscards=sonusIpInDiscards, sonusTcpGeneralGroupSlot=sonusTcpGeneralGroupSlot, sonusTcpPassiveOpens=sonusTcpPassiveOpens, sonusUdpGeneralGroupShelf=sonusUdpGeneralGroupShelf, sonusUdpLocalPort=sonusUdpLocalPort, sonusUdpEntry=sonusUdpEntry, sonusIcmpInTimeExcds=sonusIcmpInTimeExcds, sonusIcmpInTimestampReps=sonusIcmpInTimestampReps, sonusTcpRtoMax=sonusTcpRtoMax, sonusIcmpGeneralGroupEntry=sonusIcmpGeneralGroupEntry, sonusIcmpGeneralGroupShelf=sonusIcmpGeneralGroupShelf, sonusTcpInSegs=sonusTcpInSegs, sonusTcpEstabResets=sonusTcpEstabResets, sonusTcpConnSlot=sonusTcpConnSlot, sonusIcmpInAddrMasks=sonusIcmpInAddrMasks, sonusIcmpGeneralGroupInstance=sonusIcmpGeneralGroupInstance, sonusTcpGeneralGroupTable=sonusTcpGeneralGroupTable, sonusTcpConnTable=sonusTcpConnTable)
