#
# PySNMP MIB module XLDV20PM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XLDV20PM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:44:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
onu, = mibBuilder.importSymbols("AN-MIB", "onu")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, TimeTicks, iso, Unsigned32, Integer32, ModuleIdentity, MibIdentifier, Gauge32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "TimeTicks", "iso", "Unsigned32", "Integer32", "ModuleIdentity", "MibIdentifier", "Gauge32", "NotificationType", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xldv20IfIndex, Xldv20ControlStatus, xldv20TvTimeAndDate, Unsigned16, Xldv20FlowDirection, Xldv20AdminState, xldv20Traps = mibBuilder.importSymbols("XLDV20-MIB", "xldv20IfIndex", "Xldv20ControlStatus", "xldv20TvTimeAndDate", "Unsigned16", "Xldv20FlowDirection", "Xldv20AdminState", "xldv20Traps")
xldv20Pm = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5))
class Xldv20pmIntervalType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("min15", 1), ("day", 2))

class Xldv20pmControlReq(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("noRequest", 1), ("resetIndividCurrent", 2), ("setNrHistEntriesSize", 3), ("paramFaulty", 4), ("nrHistEntriesSizeNotAcceptable", 5), ("dataDaseMemoryNotAvailable", 6), ("create", 7), ("delete", 8), ("addEndpoint", 9), ("removeEndpoint", 10), ("indexLimitExceeded", 11), ("atmPmObjectActive", 12), ("atmPmObjectNotExists", 13), ("endpointExistsAlready", 14), ("requestBusy", 15), ("setDataFailed", 16), ("aswTimeout", 17), ("commandFailed", 18), ("commandSucceeded", 19))

class Xldv20pmCounterName(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))
    namedValues = NamedValues(("noPmCounter", 0), ("neBackgroundBlockErrors", 1), ("neCodeViolations", 2), ("neCodeViolationsCP", 3), ("neCodeViolationsP", 4), ("neCodeViolationsPLCP", 5), ("neErroredSeconds", 6), ("neErroredSecondsCP", 7), ("neErroredSecondsPLCP", 8), ("neSas", 9), ("neSeverelyErroredFrameSeconds", 10), ("neSeverelyErroredSeconds", 11), ("neSeverelyErroredSecondsCP", 12), ("neSeverelyErroredSecondsPLCP", 13), ("neUnavailableSeconds", 14), ("neUnavailableSecondsPLCP", 15), ("neAisSeconds", 16), ("neOfsSeconds", 17), ("neLosSeconds", 18), ("feBackgroundBlockErrors", 19), ("feCodeViolations", 20), ("feCodeViolationsCP", 21), ("feCodeViolationsPLCP", 22), ("feErroredSeconds", 23), ("feErroredSecondsCP", 24), ("feErroredSecondsPLCP", 25), ("feSas", 26), ("feSeverelyErroredSeconds", 27), ("feSeverelyErroredSecondsCP", 28), ("feSeverelyErroredSecondsPLCP", 29), ("feUnavailableSeconds", 30), ("feUnavailableSecondsPLCP", 31), ("discardedCells", 32), ("imaGroupUnavailSecs", 33), ("imaGroupNeNumFailures", 34), ("imaLinkImaViolations", 35), ("imaLinkOifAnomalies", 36), ("imaLinkNeSevErroredSecs", 37), ("imaLinkFeSevErroredSecs", 38), ("imaLinkNeUnavailSecs", 39), ("imaLinkFeUnavailSecs", 40), ("imaLinkNeTxUnusableSecs", 41), ("imaLinkNeRxUnusableSecs", 42), ("imaLinkFeTxUnusableSecs", 43), ("imaLinkFeRxUnusableSecs", 44), ("imaLinkNeTxNumFailures", 45), ("imaLinkNeRxNumFailures", 46), ("maxPmCounter", 47))

class Xldv20pmType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("pmTypeUnknown", 0), ("s1F1PMo", 1), ("s1F2PMo", 2), ("s1F3PMo", 3), ("s3F1PMo", 4), ("s3F2PMo", 5), ("s3F3PMo", 6), ("d3F2PMo", 7), ("d3F3PMo", 8), ("e3F3PMo", 9), ("adcF3PMo", 10), ("s1PrM", 11), ("s3PrM", 12), ("e3PrM", 13), ("d3PrM", 14), ("adcPrM", 15), ("e1ImaPrM", 16), ("d1ImaPrM", 17), ("e1ImaPMo", 18), ("d1ImaPMo", 19), ("atmImaPMo", 20), ("maxPmType", 21))

class Xldv20pmFlowType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("f4Segment", 1), ("f4EndToEnd", 2), ("f5Segment", 3), ("f5EndToEnd", 4))

class Xldv20pmSuspectType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("reliable", 1), ("suspect", 2))

class Xldv20pmConnectionIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("vplUni", 1), ("vplNni", 2), ("vclUni", 3), ("vclNni", 4))

class Xldv20pmRoleType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("undefined", 0), ("analyseWithBackwardReporting", 1), ("analyseWithoutBackwardReporting", 2), ("generateWithCollect", 3), ("generateWithoutCollect", 4))

class Xldv20pmEndpointType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("source", 1), ("sink", 2))

class Xldv20pmBlockSizeType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 128, 256, 512, 1024))
    namedValues = NamedValues(("undefined", 0), ("blockSize128", 128), ("blockSize256", 256), ("blockSize512", 512), ("blockSize1024", 1024))

class Xldv20pmAtmCounterType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("transmittedUserCells", 1), ("lostUserCells", 2), ("misinsertedUserCells", 3))

xldv20pmPerformanceManagementControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1))
xldv20pmPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2))
xldv20pmProtocolMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3))
xldv20pmThresholding = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4))
xldv20pmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5))
xldv20pmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1))
xldv20pmCoIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1, 1), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmCoIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCoIfIndex.setDescription(' This attribute provides the interface index of the PM object for which PM parameters are configured . ')
xldv20pmCoNrHistEntriesSize = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmCoNrHistEntriesSize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCoNrHistEntriesSize.setDescription(' This attribute is used to set the number of 15 minutes history entries which should be stored for history collection. Default value is 1. ')
xldv20pmCoIntervalType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1, 3), Xldv20pmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmCoIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCoIntervalType.setDescription(' This attribute identifies whether a 15 minutes interval or a day interval is selected in case of a resetIndividCurrent command. ')
xldv20pmCoControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1, 4), Xldv20pmControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmCoControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCoControlReq.setDescription(' This attribute identifies a control command given by the SNMP agent. A reset for any individual PM object is possible via command resetIndividCurrent. The command setNrHistEntriesSize is used to set the number of 15 minutes history entries for history collection at a particular interface. ')
xldv20pmCoControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1, 5), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCoControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCoControlStatus.setDescription(' The status of a control request. ')
xldv20pmCoRemainingHistoryEntriesSize = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCoRemainingHistoryEntriesSize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCoRemainingHistoryEntriesSize.setDescription(' This attribute indicates the number of remaining history entries which are available for the 15 minutes history collection wthin the ONU. PM on physical and ATM layer use the same history memory which is limited in total to 2000 entries. The manager can read this attribute after the execution of the setNrHistEntriesSize command . ')
xldv20pmCoOAMLevel = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmCoOAMLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCoOAMLevel.setDescription(' This attribute selects the OAM level f1 (1), f2 (2), f3 (3) . ')
xldv20pmCoControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1, 8), Xldv20pmControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCoControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCoControlReqResult.setDescription(' The result of the last user command. ')
xldv20pmCoControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCoControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCoControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20pmAtmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2))
xldv20pmAcoIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 1), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoIndex.setDescription(' This attribute provides the index of the AtmPm object for which PM parameters shall be configured . ')
xldv20pmAcoNrHistEntriesSize = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoNrHistEntriesSize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoNrHistEntriesSize.setDescription(' This attribute is used to set the number of 15 minutes history entries which should be stored for history collection. The set HistEntrySize value is found in the xldv20pmAcHistEntrySize. ')
xldv20pmAcoIntervalType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 3), Xldv20pmIntervalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoIntervalType.setDescription(' This attribute identifies whether a 15 minutes interval or a day interval is selected in case of a resetIndividCurrent command. ')
xldv20pmAcoControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 4), Xldv20pmControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoControlReq.setDescription(' This attribute identifies a control command given by the SNMP agent. A reset for any individual PM object is possible via command resetIndividCurrent. The command setNrHistEntriesSize is used to set the number of 15 minutes history entries for history collection at a particular interface. The commands create/delete are used to create/delete AtmPm monitoring objectes (entry in table xldv20pmAtmObjectsTable). The commands addEndpoint/deleteEndpoint are used to add or delete AtmPm endpoints to/from an PMo monitoring object. ')
xldv20pmAcoControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 5), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcoControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoControlStatus.setDescription(' The status of a control request. ')
xldv20pmAcoRemainingHistoryEntriesSize = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcoRemainingHistoryEntriesSize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoRemainingHistoryEntriesSize.setDescription(' This attribute indicates the number of remaining history entries which are available for the 15 minutes history collection within the ONU. PM on physical and ATM layer use the same history memory which is limited in total to 2000 entries. Commonly used by PM on physical and ATM layer The manager can read this attribute after the execution of the setNrHistEntriesSize command . ')
xldv20pmAcoFlowType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 7), Xldv20pmFlowType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoFlowType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoFlowType.setDescription(' This attribute identifies the flow type : F4 (VP) or F5 (VC) segment or endToEnd flow. ')
xldv20pmAcoFlowDirection = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 8), Xldv20FlowDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoFlowDirection.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoFlowDirection.setDescription(" The flow direction of OAM cells. 'inwards' means flow direction from outside (external interface) to cross connection. 'outwards' means flow direction from inside to external interface. ")
xldv20pmAcoConnectionIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoConnectionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoConnectionIndex.setDescription(' This attribute identifies the index of a Vpl or Vcl cross connection. ')
xldv20pmAcoConnectionIndexType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 10), Xldv20pmConnectionIndexType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoConnectionIndexType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoConnectionIndexType.setDescription(' This attribute identifies the type of connection index and the termination point. It is in case of vplUni/vplNni : index of Vpl CC (xldv20AccVpiNniIndex) vclUni/vplNni : index of Vcl CC (xldv20VcxIndex). ')
xldv20pmAcoRole = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 12), Xldv20pmRoleType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoRole.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoRole.setDescription(" The role of endpoint. 'analyseWithBackwardReporting' (sink) means extracting forward monitoring (FM) OAM cells, sending back backward reporting OAM cells and no data collection for current and history table. 'analyseWithoutBackwardReporting' (sink) means extracting FM cells without any other OAM handling and also collecting data. 'generateWithCollect' (source) means inserting FM cells, extracting backward reporting cells if they arrive and collect data for current and history table. 'generateWithoutCollect' (source) means inserting FM cells but without collecting data. The CMU, the Ethernet part of the Twin NT s capable of operating as inserting or extracting point. ")
xldv20pmAcoEndpointType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 13), Xldv20pmEndpointType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcoEndpointType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoEndpointType.setDescription(' Identifies the type of endpoint. ')
xldv20pmAcoControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 14), Xldv20pmControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcoControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoControlReqResult.setDescription(' The result of the last user command. ')
xldv20pmAcoControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 1, 2, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcoControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcoControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20pmCommonCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2), )
if mibBuilder.loadTexts: xldv20pmCommonCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCommonCurrentTable.setDescription(' This table contains the entries for the current 15 minute interval or the current day of PMo objects of the common group. (adc, adr, e3n and e3f) . ')
xldv20pmCommonCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmCcIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmCcOAMLevel"))
if mibBuilder.loadTexts: xldv20pmCommonCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCommonCurrentEntry.setDescription(' An entry describing the Common Current Data Table . ')
xldv20pmCcIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcIntervalType.setDescription(' This attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmCcOAMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcOAMLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcOAMLevel.setDescription(' This attribute is used to select between the 3 OAM levels f1 (1), f2 (2) and f3 (3) . ')
xldv20pmCcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 3), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmCcAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcAdminState.setDescription(' This read-write attribute is used to activate (unlock) and deactivate (lock) the functions (incl. collection) performed by this managed entity. Note: the 15min collection object must be activated, before day collection can operate. ')
xldv20pmCcSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 4), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmCcHistEntrySize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcHistEntrySize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcHistEntrySize.setDescription(' The number of 15min history entries configured at the particular interface. This attribute is used for history data collection. The default value is 1 and means at least one history entry is desired . ')
xldv20pmCcNrHistEntriesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcNrHistEntriesAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcNrHistEntriesAvailable.setDescription(' This read-only attribute indicates how many HistEntries are already available. The range of values is between 0 and xldv20pmCcHistEntrySize, thereby 0 means that this entry is not valid . ')
xldv20pmCcElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcElapsedTime.setDescription(' This read-only attribute represents the difference between the current time and the start of the present summary interval. Units are seconds when 15 minute interval is selected or minutes for day interval. (Note: accurate to the sample time interval). ')
xldv20pmCcThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmCcThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcThresholdLimitIndex.setDescription(' This read-write attribute provides an index to the ThresholdLimitTable managed entity that contains the threshold limits for the performance parameters reported by this managed entity. When the value of this attribute is set to 1, default threshold limits shall be used . ')
xldv20pmCcNeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcNeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcNeErroredSeconds.setDescription(' A near end counter of Errored Seconds (ES) over a 15 min/day interval. Counter appearence depends on interface type and OAM level : - adc, e3n: valid for F3 level . ')
xldv20pmCcFeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcFeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcFeErroredSeconds.setDescription(' A far end counter of Errored Seconds (ES) over a 15 min /day interval. Counter appearence depends on interface type and OAM level : - adr, e3f: valid for F3 level . ')
xldv20pmCcNeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcNeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcNeSeverelyErroredSeconds.setDescription(' Represents a near end counter of Severely Errored Seconds (SES) over a 15 min /day interval. Counter appearence depends on interface type and OAM level : - adc, e3n: valid for F3 level . ')
xldv20pmCcFeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcFeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcFeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a far end counter of Severely Errored Seconds (SES) over a 15 min /day interval. Counter appearence depends on interface type and OAM level : - adr, e3f: valid for F3 level . ')
xldv20pmCcNeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcNeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcNeBackgroundBlockErrors.setDescription(' This read-only attribute represents a near end counter for Background Block Errors (BBE) over a 15 min /day interval. Counter appearence depends on interface type and OAM level : - adc, e3n: valid for F3 level . ')
xldv20pmCcFeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcFeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcFeBackgroundBlockErrors.setDescription(' This read-only attribute represents a far end counter for Background Block Errors (BBE) over a 15 min /day interval. Counter appearence depends on interface type and OAM level : - adr, e3f: valid for F3 level . ')
xldv20pmCcNeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcNeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcNeUnavailableSeconds.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) within the current 15 minute interval or current day. Counter applicable for : adc, e3n and f3 level . ')
xldv20pmCcFeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmCcFeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCcFeUnavailableSeconds.setDescription(' This read-only attribute represents a far end counter of Unavailable Seconds (UAS) within the current 15 minute interval or current day. Counter applicable for : adr, e3f and F3 level . ')
xldv20pmCommonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3), )
if mibBuilder.loadTexts: xldv20pmCommonHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCommonHistoryTable.setDescription(' This table contains the entries for the PMo objects of the 15 min /one day-history data collection results at the respective adc, adr drop area interfaces . ')
xldv20pmCommonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmChIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmChOAMLevel"), (0, "XLDV20PM-MIB", "xldv20pmChHistEntryNr"))
if mibBuilder.loadTexts: xldv20pmCommonHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmCommonHistoryEntry.setDescription(' An entry describing the Common History Data Table . ')
xldv20pmChIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmChOAMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChOAMLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChOAMLevel.setDescription(' This attribute is used to select between the 3 OAM levels f1 (1), f2 (2) and f3 (3) . ')
xldv20pmChHistEntryNr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChHistEntryNr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChHistEntryNr.setDescription(' This attribute is an index used to address the PM history entry. Entry 1 is the most recent, entry 96 is 24 hours ago. The range of values is between 1 and xldv20pmCcHistEntrySize . ')
xldv20pmChSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 4), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChSuspectFlag.setDescription(' Will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmChPeriodEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChPeriodEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChPeriodEndTime.setDescription(' Date/time at the end of the selected interval. ')
xldv20pmChNeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChNeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChNeErroredSeconds.setDescription(' This read-only attribute represents a near end counter of Errored Seconds (ES) over a 15 min /day interval. Counter applicable for : adc, e3n and F3 level . ')
xldv20pmChFeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChFeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChFeErroredSeconds.setDescription(' This read-only attribute represents a far end counter of Errored Seconds (ES) within the current 15 minute interval or current day. Counter applicable for : adr, e3f and F3 level . ')
xldv20pmChNeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChNeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChNeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a near end counter of Severely Errored Seconds (SES) within the current 15 minute interval or current day. Counter applicable for : adc, e3n and F3 level . ')
xldv20pmChFeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChFeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChFeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a far end counter of Severely Errored Seconds (SES) within the current 15 minute interval or current day. Counter applicable for : adr, e3f and F3 level . ')
xldv20pmChNeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChNeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChNeBackgroundBlockErrors.setDescription(' This read-only attribute represents a near end counter for Background Block Errors (BBE) over a 15 min /day interval. Counter applicable for : adc, e3n and F3 level . ')
xldv20pmChFeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChFeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChFeBackgroundBlockErrors.setDescription(' This read-only attribute represents a far end counter for Background Block Errors (BBE) over a 15 min /day interval. Counter applicable for : adr, e3n and F3 level . ')
xldv20pmChNeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChNeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChNeUnavailableSeconds.setDescription(' This read-only attribute represents a near end counter of Unavailable Seconds (UAS) for a 15 min /day interval. Counter applicable for : adc, e3n and F3 level . ')
xldv20pmChFeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmChFeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmChFeUnavailableSeconds.setDescription(' This read-only attribute represents a far end counter of Unavailable Seconds (UAS) for a 15 min /day interval. Counter applicable for : adr, e3f and F3 level . ')
xldv20pmS3CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4), )
if mibBuilder.loadTexts: xldv20pmS3CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3CurrentTable.setDescription(' This table contains the entries for the current 15 minute interval or the current day for STS3c near-end and far-end PPTPs. ')
xldv20pmS3CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmS3cIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmS3cOAMLevel"))
if mibBuilder.loadTexts: xldv20pmS3CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3CurrentEntry.setDescription(' An entry describing the STS3 near-end and far-end Current Data Table . ')
xldv20pmS3cIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmS3cOAMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cOAMLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cOAMLevel.setDescription(' This attribute is used to select between the 3 OAM levels f1 (1), f2 (2) and f3 (3) . ')
xldv20pmS3cAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 3), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmS3cAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cAdminState.setDescription(' This read-write attribute is used to activate (unlock) and deactivate (lock) the functions (incl. collection) performed by this managed entity. Note: the 15min collection object must be activated, before day collection can operate. ')
xldv20pmS3cSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 4), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmS3cHistEntrySize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cHistEntrySize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cHistEntrySize.setDescription(' This read-only attribute indicates the number of 15min history entries configured at the particular interface. The default value is 1 and means that at least one history entry is provided . ')
xldv20pmS3cNrHistEntriesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cNrHistEntriesAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cNrHistEntriesAvailable.setDescription(' This read-only attribute indicates how many history entries are already available. The range of values is between 0 and xldv20S3cHistEntrySize, thereby 0 means that this entry is not valid . ')
xldv20pmS3cElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cElapsedTime.setDescription(' This read-only attribute represents the difference between the current time and the start of the present summary interval. Units are seconds when 15 minute interval is selected or minutes for day interval. (Note: accurate to the sample time interval). ')
xldv20pmS3cThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmS3cThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cThresholdLimitIndex.setDescription(' This read-write attribute provides an index to the ThresholdLimitTable managed entity that contains the threshold limits for the performance parameters reported by this managed entity. When the value of this attribute is set to 1, default threshold limits shall be used The range of values is [1,30]. ')
xldv20pmS3cNeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cNeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cNeErroredSeconds.setDescription(' This read-only attribute represents a counter of Errored Seconds (ES) within the current 15min interval or current day. Counter applicable for : s3n and F1, F2, F3 levels . ')
xldv20pmS3cFeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cFeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cFeErroredSeconds.setDescription(' This read-only attribute represents a counter of Errored Seconds (ES) within the current 15min interval or current day. Counter applicable for : s3f and F2 and F3 levels . ')
xldv20pmS3cNeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cNeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cNeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) within the current 15min interval or current day. Counter applicable for : s3n and F2 and F3 levels . ')
xldv20pmS3cFeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cFeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cFeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) within the current 15min interval or current day. Counter applicable for : s3f and for F2 and F3 levels . ')
xldv20pmS3cNeCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cNeCodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cNeCodeViolations.setDescription(' This read-only attribute represents a counter of Code Violations Errors within the current 15min interval or current day. Counter applicable for : s3n and F1, F2, F3 levels . ')
xldv20pmS3cFeCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cFeCodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cFeCodeViolations.setDescription(' This read-only attribute represents a counter of Code Violations Errors within the current 15min interval or current day. Counter applicable for : s3f and F2 and F3 levels . ')
xldv20pmS3cNeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cNeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cNeUnavailableSeconds.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) within the current 15min interval or current day. Counter applicable for : s3n and F2 and F3 levels . ')
xldv20pmS3cFeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cFeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cFeUnavailableSeconds.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) within the current 15min interval or current day. Counter applicable for : s3f and level F2 and F3 . ')
xldv20pmS3cNeSeverelyErroredFrameSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3cNeSeverelyErroredFrameSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3cNeSeverelyErroredFrameSeconds.setDescription(' This read-only attribute represents a counter of Severely Errored Frame Seconds within the current 15min interval or current day. Counter applicable for : s3n and F1 level only. ')
xldv20pmS3HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5), )
if mibBuilder.loadTexts: xldv20pmS3HistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3HistoryTable.setDescription(' This table contains the entries for the PMo history objects at the near-end and far-end STS3c interfaces. It contains results that are overtaken from the s3CurrentTable PM-object at the end of a 15 min /day interval . ')
xldv20pmS3HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmS3hIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmS3hOAMLevel"), (0, "XLDV20PM-MIB", "xldv20pmS3hHistEntryNr"))
if mibBuilder.loadTexts: xldv20pmS3HistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3HistoryEntry.setDescription(' An entry describing the STS3 near-end and far-end History Data Table . ')
xldv20pmS3hIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmS3hOAMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hOAMLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hOAMLevel.setDescription(' This attribute is used to select between the 3 OAM levels f1 (1), f2 (2) and f3 (3) . ')
xldv20pmS3hHistEntryNr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hHistEntryNr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hHistEntryNr.setDescription(' This attribute is used as index to address the history entry. Entry 1 is the most recent, entry 96 is 24 hours ago. The range of values is between 1 and xldv20S3cHistEntrySize . ')
xldv20pmS3hSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 4), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmS3hPeriodEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hPeriodEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hPeriodEndTime.setDescription(' This read-only attribute is a record of date/time at the end of an interval . ')
xldv20pmS3hNeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hNeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hNeErroredSeconds.setDescription(' This read-only attribute represents a set of history counter for Errored Seconds (ES) for the passed up to 96 periods of 15 minutes and the passed day interval. Counter applicable for : s3n and F1, F2, F3 levels . ')
xldv20pmS3hFeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hFeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hFeErroredSeconds.setDescription(' This read-only attribute represents a set of history counter for Errored Seconds (ES) for the passed up to 96 periods of 15 minutes and the passed day interval. Counter applicable for : s3f and F2 and F3 levels . ')
xldv20pmS3hNeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hNeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hNeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a set of history counter for Severely Errored Seconds (SES) for the passed up to 96 periods of 15 minutes and the passed day interval. Counter applicable for : s3n and F2 and F3 levels . ')
xldv20pmS3hFeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hFeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hFeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a set of history counter for Severely Errored Seconds (SES) for the passed up to 96 periods of 15 minutes and the passed day interval. Counter applicable for : s3f and F2 and F3 levels . ')
xldv20pmS3hNeCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hNeCodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hNeCodeViolations.setDescription(' This read-only attribute represents a set of history counter for Code Violations Errors for the passed up to 96 periods of 15 minutes and the passed day interval. Counter applicable for : s3n and F1, F2, F3 levels . ')
xldv20pmS3hFeCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hFeCodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hFeCodeViolations.setDescription(' This read-only attribute represents a set of history counter for Code Violations Errors for the passed up to 96 periods of 15 minutes and the passed day interval. Counter applicable for : s3f and F2 and F3 levels . ')
xldv20pmS3hNeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hNeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hNeUnavailableSeconds.setDescription(' This read-only attribute represents a set of history counter for Unavailable Seconds (UAS) for the passed up to 96 periods of 15 minutes and the passed day interval. Counter applicable for : s3n and F2 and F3 levels . ')
xldv20pmS3hFeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hFeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hFeUnavailableSeconds.setDescription(' This read-only attribute represents a set of history counter for Unavailable Seconds (UAS) for the passed up to 96 periods of 15 minutes and the passed day interval. Counter applicable for : s3f and F2 and F3 levels . ')
xldv20pmS3hNeSeverelyErroredFrameSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS3hNeSeverelyErroredFrameSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS3hNeSeverelyErroredFrameSeconds.setDescription(' This read-only attribute represents a set of history counter for Severely Errored Frame Seconds for the passed up to 96 periods of 15 minutes and the passed day interval. Counter applicable for : s3n and F1 level only . ')
xldv20pmD3CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6), )
if mibBuilder.loadTexts: xldv20pmD3CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3CurrentTable.setDescription(' This table contains the entries for the current 15 minute interval or the current day for DS3 near-end and far-end PPTPs. Note: Day PM collection uses the 15min interval results . ')
xldv20pmD3CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmD3cIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmD3cOAMLevel"))
if mibBuilder.loadTexts: xldv20pmD3CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3CurrentEntry.setDescription(' An entry describing the DS3 near-end and far-end Current Data Table . ')
xldv20pmD3cIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmD3cOAMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cOAMLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cOAMLevel.setDescription(' This attribute is used to select between the 3 OAM levels f1 (1), f2 (2) and f3 (3) . ')
xldv20pmD3cAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 3), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmD3cAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cAdminState.setDescription(' This read-write attribute is used to activate (unlock) and deactivate (lock) the functions (incl. collection) performed by this managed entity. Note: the 15min collection object must be activated, before day collection can operate. ')
xldv20pmD3cSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 4), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmD3cHistEntrySize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cHistEntrySize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cHistEntrySize.setDescription(' This read-only attribute indicates the configured history size. The default value is 1 and means that at least one history entry is provided. ')
xldv20pmD3cNrHistEntriesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNrHistEntriesAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNrHistEntriesAvailable.setDescription(' This read-only attribute indicates how many history entries are already available. The range of values is between 0 and xldv20pmD3cHistEntrySize, thereby 0 means that this entry is not valid . ')
xldv20pmD3cElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cElapsedTime.setDescription(' This read-only attribute represents the difference between the current time and the start of the present summary interval. Units are seconds when 15 minute interval is selected or minutes for day interval. (Note: accurate to the sample time interval). ')
xldv20pmD3cThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmD3cThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cThresholdLimitIndex.setDescription(' This read-write attribute provides an index to the ThresholdLimitTable managed entity that contains the threshold limits for the performance parameters reported by this managed entity. When the value of this attribute is set to 1, default threshold limits shall be used. These default values are not part of the threshold limit table but are hard coded in the application SW of PM. The range of values is [1,30]. ')
xldv20pmD3cNeErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeErroredSecondsCP.setDescription(' This read-only attribute represents a counter of Errored Seconds (ES) within the current interval or current day, the generation thereof is based on CP-bit parity. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3cFeErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cFeErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cFeErroredSecondsCP.setDescription(' This read-only attribute represents a counter of Errored Seconds (ES) within the current 15 minute interval or current day, the generation thereof is based on CP-bit parity . Counter applicable for : d3f and F2 level only . ')
xldv20pmD3cNeErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeErroredSecondsPLCP.setDescription(' This read-only attribute represents a counter of Errored Seconds on PLCP-bit parity within the current 15 minute interval or current day. Counter applicable for : d3n and F3 level only . ')
xldv20pmD3cFeErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cFeErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cFeErroredSecondsPLCP.setDescription(' This read-only attribute represents a counter of Errored Seconds on PLCP-bit parity within the current 15 minute interval or current day. Counter applicable for : d3f and F3 level only . ')
xldv20pmD3cNeSeverelyErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeSeverelyErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeSeverelyErroredSecondsCP.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) within the current 15 minute interval or current day based on CP-bit parity, the generation thereof is based on CP-bit parity. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3cFeSeverelyErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cFeSeverelyErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cFeSeverelyErroredSecondsCP.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) within the current 15 minute interval or current day, the generation thereof is based on CP-bit parity . Counter applicable for : d3f and F2 level only . ')
xldv20pmD3cNeSeverelyErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeSeverelyErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeSeverelyErroredSecondsPLCP.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) within the current 15 minute interval or current day, the generation thereof is based on PLCP-bit parity . Counter applicable for : d3n and F3 level only . ')
xldv20pmD3cFeSeverelyErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cFeSeverelyErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cFeSeverelyErroredSecondsPLCP.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) within the current 15 minute interval or current day, the generation thereof is based on PLCP-bit parity . Counter applicable for : d3f and F3 level only . ')
xldv20pmD3cNeCodeViolationsP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeCodeViolationsP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeCodeViolationsP.setDescription(' This read-only attribute represents a counter of Code Violations Errors (Count of P-bit parity errors) within the current 15 minute interval or current day. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3cNeCodeViolationsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeCodeViolationsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeCodeViolationsCP.setDescription(' This read-only attribute represents a counter of Code Violations Errors (Count of CP-bit parity errors) within the current 15 minute interval or current day. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3cFeCodeViolationsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cFeCodeViolationsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cFeCodeViolationsCP.setDescription(' This read-only attribute represents a counter of Code Violations Errors (Count of CP-bit parity errors) within the current 15 minute interval or current day. Counter applicable for : d3f and F2 level only . ')
xldv20pmD3cNeCodeViolationsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeCodeViolationsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeCodeViolationsPLCP.setDescription(' This read-only attribute represents a counter of Code Violations Errors (Count of PLCP frame Bit Interleaved Parity errors) within the current 15 minute interval or current day. Counter applicable for : d3n and F3 level only . ')
xldv20pmD3cFeCodeViolationsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cFeCodeViolationsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cFeCodeViolationsPLCP.setDescription(' This read-only attribute represents a counter of Code Violations Errors (Count of PLCP frame Bit Interleaved Parity errors) within the current 15 minute interval or current day. Counter applicable for : d3f and F3 level only . ')
xldv20pmD3cNeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeUnavailableSeconds.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) within the current 15 minute interval or current day. Counter applicable for : d3n and F2 level only. ')
xldv20pmD3cFeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cFeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cFeUnavailableSeconds.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) within the current 15 minute interval or current day. Counter applicable for : d3f and F2 level only . ')
xldv20pmD3cNeUnavailableSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeUnavailableSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeUnavailableSecondsPLCP.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) within the current 15 minute interval or current day. The generation is based on PLCP-bit parity. Counter applicable for : d3n and F3 level only . ')
xldv20pmD3cFeUnavailableSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cFeUnavailableSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cFeUnavailableSecondsPLCP.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) within the current 15 minute interval or current day. The generation is based on PLCP-bit parity. Counter applicable for : d3f and F3 level only . ')
xldv20pmD3cNeSas = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cNeSas.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cNeSas.setDescription(' This read-only attribute represents a counter of one second intervals containing one ore more Severely Errored Frame (SEF) defects or one or more Alarm Indication Signal (AIS) defects within the current 15 minute interval or current day. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3cFeSas = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3cFeSas.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3cFeSas.setDescription(' This read-only attribute represents a counter of one second intervals containing one ore more Severely Errored Frame (SEF) defects or one or more Alarm Indication Signal (AIS) defects within the current 15 minute interval or current day. Counter applicable for : d3f and F2 level only . ')
xldv20pmD3HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7), )
if mibBuilder.loadTexts: xldv20pmD3HistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3HistoryTable.setDescription(' This table contains the entries for the PMo history objects at the near-end and far-end DS3 interfaces. It contains results that are overtaken from the D3CurrentTable PM-object at the end of a 15 min /day interval . ')
xldv20pmD3HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmD3hIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmD3hOAMLevel"), (0, "XLDV20PM-MIB", "xldv20pmD3hHistEntryNr"))
if mibBuilder.loadTexts: xldv20pmD3HistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3HistoryEntry.setDescription(' An entry describing the DS3 near-end and far-end History Data Table . ')
xldv20pmD3hIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmD3hOAMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hOAMLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hOAMLevel.setDescription(' This attribute is used to select between the 3 OAM levels f1 (1), f2 (2) and f3 (3) . ')
xldv20pmD3hHistEntryNr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hHistEntryNr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hHistEntryNr.setDescription(' This attribute is used as index to address a history entry. Entry 1 is the most recent, entry 96 is 24 hours ago. The range of values is between 1 and xldv20pmD3cHistEntrySize . ')
xldv20pmD3hSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 4), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmD3hPeriodEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hPeriodEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hPeriodEndTime.setDescription(' This read-only attribute is a record of date/time at the end of an interval . ')
xldv20pmD3hNeErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeErroredSecondsCP.setDescription(' This read-only attribute represents a set of history counter of Errored Seconds (ES), the generation thereof is based on CP-bit parity for a 15min /day interval. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3hFeErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hFeErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hFeErroredSecondsCP.setDescription(' This read-only attribute represents a set of history counter of Errored Seconds (ES), the generation thereof is based on CP-bit parity for a 15min /day interval. Counter applicable for : d3f and F2 level only . ')
xldv20pmD3hNeErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeErroredSecondsPLCP.setDescription(' This read-only attribute represents a set of history counter of Errored Seconds (ES) (One second interval in which Code Violations errors occure) for a 15min /day interval. Counter applicable for : d3n and F3 level only . ')
xldv20pmD3hFeErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hFeErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hFeErroredSecondsPLCP.setDescription(' This read-only attribute represents a set of history counter of Errored Seconds (ES) (One second interval in which Code Violations errors occure) for a 15min /day interval. Counter applicable for : d3f and F3 level only . ')
xldv20pmD3hNeSeverelyErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeSeverelyErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeSeverelyErroredSecondsCP.setDescription(' This read-only attribute represents a set of history counter of Severely Errored Seconds (ES), the generation thereof is based on CP-bit parity for a 15min /day interval. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3hFeSeverelyErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hFeSeverelyErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hFeSeverelyErroredSecondsCP.setDescription(' This read-only attribute represents a set of history counter of Severely Errored Seconds (ES), the generation thereof is based on CP-bit parity for a 15min /day interval. Counter applicable for : d3f and F2 level only . ')
xldv20pmD3hNeSeverelyErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeSeverelyErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeSeverelyErroredSecondsPLCP.setDescription(' This read-only attribute represents a set of history counter of Severely Errored Seconds (SES) for a 15min / day interval. Counter applicable for : d3n and F3 level only . ')
xldv20pmD3hFeSeverelyErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hFeSeverelyErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hFeSeverelyErroredSecondsPLCP.setDescription(' This read-only attribute represents a set of history counter of Severely Errored Seconds (SES) for a 15min / day interval. Counter applicable for : d3f and F3 level only . ')
xldv20pmD3hNeCodeViolationsP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeCodeViolationsP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeCodeViolationsP.setDescription(' This read-only attribute represents a counter of Code Violations Errors (Count of P-bit parity errors) for a 15 min /day interval. Counter applicable for : d3n and F2 level only. ')
xldv20pmD3hNeCodeViolationsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeCodeViolationsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeCodeViolationsCP.setDescription(' This read-only attribute represents a set of history counter of Code Violations Errors (Count of CP-bit parity errors) for a 15min /day interval. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3hFeCodeViolationsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hFeCodeViolationsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hFeCodeViolationsCP.setDescription(' This read-only attribute represents a set of history counter of Code Violations Errors (Count of CP-bit parity errors) for a 15min /day interval. Counter applicable for : d3f and F2 level only . ')
xldv20pmD3hNeCodeViolationsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeCodeViolationsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeCodeViolationsPLCP.setDescription(' This read-only attribute represents a set of history counter of Code Violations Errors (Count of PLCP frame Bit Interleaved Parity errors) for a 15min /day interval. Counter applicable for : d3n and F3 level only . ')
xldv20pmD3hFeCodeViolationsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hFeCodeViolationsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hFeCodeViolationsPLCP.setDescription(' This read-only attribute represents a set of history counter of Code Violations Errors (Count of PLCP frame Bit Interleaved Parity errors) for a 15min /day interval. Counter applicable for : d3f and F3 level only . ')
xldv20pmD3hNeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeUnavailableSeconds.setDescription(' This read-only attribute represents a set of history counter of Unavailable Seconds (UAS) for a 15min /day interval. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3hFeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hFeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hFeUnavailableSeconds.setDescription(' This read-only attribute represents a set of history counter of Unavailable Seconds (UAS) for a 15min /day interval. Counter applicable for : d3f and F2 level only . ')
xldv20pmD3hNeUnavailableSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeUnavailableSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeUnavailableSecondsPLCP.setDescription(' This read-only attribute represents a set of history counter of Unavailable Seconds (UAS) for a 15min /day interval. Counter applicable for : d3n and F3 level only . ')
xldv20pmD3hFeUnavailableSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hFeUnavailableSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hFeUnavailableSecondsPLCP.setDescription(' This read-only attribute represents a set of history counter of Unavailable Seconds (UAS) for a 15min /day interval. Counter applicable for : d3f and F3 level only . ')
xldv20pmD3hNeSas = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hNeSas.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hNeSas.setDescription(' This read-only attribute represents a set of history counter of one second intervals containing one ore more Severely Errored Frame (SEF) defects or one or more Alarm Indication Signal (AIS) defects for a 15min /day interval. Counter applicable for : d3n and F2 level only . ')
xldv20pmD3hFeSas = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmD3hFeSas.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmD3hFeSas.setDescription(' This read-only attribute represents a set of history counter of one second intervals containing one ore more Severely Errored Frame (SEF) defects or one or more Alarm Indication Signal (AIS) defects for a 15min /day interval. Counter applicable for : d3f and F2 level only . ')
xldv20pmS1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8), )
if mibBuilder.loadTexts: xldv20pmS1CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1CurrentTable.setDescription(' This table contains the entries for the current 15 minute interval or the current day for STM1 near-end and far-end PPTPs. Note: Day PM collection uses the 15min interval results . ')
xldv20pmS1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmS1cIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmS1cOAMLevel"))
if mibBuilder.loadTexts: xldv20pmS1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1CurrentEntry.setDescription(' An entry describing the Stm1 Current Data Table . ')
xldv20pmS1cIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmS1cOAMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cOAMLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cOAMLevel.setDescription(' This attribute is used to select between the 3 OAM levels f1 (1), f2 (2) and f3 (3) . ')
xldv20pmS1cAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 3), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmS1cAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cAdminState.setDescription(' This read-write attribute is used to activate (unlock) and deactivate (lock) the functions (incl. collection) performed by this managed entity. Note: the 15min collection object must be activated, before day collection can operate. ')
xldv20pmS1cSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 4), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmS1cHistEntrySize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cHistEntrySize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cHistEntrySize.setDescription(' This read-only attribute indicates the configured history size. The default value is 1 and means that at least one history entry is provided. ')
xldv20pmS1cNrHistEntriesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cNrHistEntriesAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cNrHistEntriesAvailable.setDescription(' This read-only attribute indicates how many history entries are already available. The range of values is between 0 and xldv20pmS1cHistEntrySize, thereby 0 means that this entry is not valid . ')
xldv20pmS1cElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cElapsedTime.setDescription(' This read-only attribute represents the difference between the current time and the start of the present summary interval. Units are seconds when 15 minute interval is selected or minutes for day interval. (Note: accurate to the sample time interval). ')
xldv20pmS1cThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmS1cThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cThresholdLimitIndex.setDescription(' This read-write attribute provides an index to the ThresholdLimitTable managed entity that contains the threshold limits for the performance parameters reported by this managed entity. When the value of this attribute is set to 1, default threshold limits shall be used. These default values are not part of the threshold limit table but are hard coded in the application SW of PM. ')
xldv20pmS1cNeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cNeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cNeErroredSeconds.setDescription(' This read-only attribute represents a counter of Errored Seconds (ES) within the current 15 minute interval or current day. Counter applicable for : s1n and F1, F2, F3 levels . ')
xldv20pmS1cFeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cFeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cFeErroredSeconds.setDescription(' This read-only attribute represents a counter of Errored Seconds (ES) within the current 15 minute interval or current day. Counter applicable for : s1f and F2 and F3 levels . ')
xldv20pmS1cNeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cNeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cNeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) within the current 15 minute interval or current day. Counter applicable for : s1n and F1, F2, F3 levels . ')
xldv20pmS1cFeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cFeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cFeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) within the current 15 minute interval or current day. Counter applicable for : s1f and F2 and F3 levels . ')
xldv20pmS1cNeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cNeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cNeBackgroundBlockErrors.setDescription(' This read-only attribute represents a counter for Background Block Errors (BBE) within the current 15 minute interval or current day. Counter applicable for : s1n and F1, F2, F3 levels . ')
xldv20pmS1cFeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cFeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cFeBackgroundBlockErrors.setDescription(' This read-only attribute represents a counter for Background Block Errors (BBE) within the current 15 minute interval or current day. Counter applicable for : s1f and F2 and F3 levels . ')
xldv20pmS1cNeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cNeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cNeUnavailableSeconds.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) within the current 15 minute interval or current day. Counter applicable for : s1n and F1, F2, F3 levels . ')
xldv20pmS1cFeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cFeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cFeUnavailableSeconds.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) within the current 15 minute interval or current day. Counter applicable for : s1f and F2 and F3 levels . ')
xldv20pmS1cNeOfsSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cNeOfsSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cNeOfsSeconds.setDescription(' This read-only attribute represents a counter of Errored Seconds on defect OFS within the current 15 minute interval or current day. Counter applicable for : s1n and level F1 . ')
xldv20pmS1cNeAisSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cNeAisSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cNeAisSeconds.setDescription(' This read-only attribute represents a counter of errored Seconds on defect alarm indicatin signal AIS for a 15 min /day interval. Counter applicable for : s1n and F2 . ')
xldv20pmS1cNeLosSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1cNeLosSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1cNeLosSeconds.setDescription(' This read-only attribute represents a counter of errored Seconds on defect LOS within the current 15 minute interval or current day. Counter applicable for : s1n and level F1. ')
xldv20pmS1HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9), )
if mibBuilder.loadTexts: xldv20pmS1HistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1HistoryTable.setDescription(' This table contains the entries for the PMo objects of the 15 min /one day-history data collection results at the respective stm1 (s1n, s1f) drop area interfaces . ')
xldv20pmS1HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmS1hIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmS1hOAMLevel"), (0, "XLDV20PM-MIB", "xldv20pmS1hHistEntryNr"))
if mibBuilder.loadTexts: xldv20pmS1HistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1HistoryEntry.setDescription(' An entry describing the S1 History Data Table . ')
xldv20pmS1hIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmS1hOAMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hOAMLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hOAMLevel.setDescription(' This attribute is used to select between the 3 OAM levels f1 (1), f2 (2) and f3 (3) . ')
xldv20pmS1hHistEntryNr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hHistEntryNr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hHistEntryNr.setDescription(' This attribute is used as index to address a history entry. Entry 1 is the most recent, entry 96 is 24 hours ago. The range of values is between 1 and xldv20pmCcHistEntrySize . ')
xldv20pmS1hSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 4), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmS1hPeriodEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hPeriodEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hPeriodEndTime.setDescription(' Date/time at the end of the selected interval. ')
xldv20pmS1hNeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hNeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hNeErroredSeconds.setDescription(' This read-only attribute represents a counter of Errored Seconds (ES) over a 15 min /day interval. Counter applicable for : s1n and F1, F2, F3 levels . ')
xldv20pmS1hFeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hFeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hFeErroredSeconds.setDescription(' This read-only attribute represents a counter of Errored Seconds (ES) over a 15 min /day interval. Counter applicable for : s1f and F2 and F3 levels . ')
xldv20pmS1hNeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hNeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hNeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) over a 15 min /day interval. Counter applicable for : s1n and F1, F2, F3 levels . ')
xldv20pmS1hFeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hFeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hFeSeverelyErroredSeconds.setDescription(' This read-only attribute represents a counter of Severely Errored Seconds (SES) over a 15 min /day interval. Counter applicable for : s1f and F2 and F3 levels . ')
xldv20pmS1hNeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hNeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hNeBackgroundBlockErrors.setDescription(' This read-only attribute represents a counter for Background Block Errors (BBE) over a 15 min /day interval. Counter applicable for : s1n and F1, F2, F3 levels . ')
xldv20pmS1hFeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hFeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hFeBackgroundBlockErrors.setDescription(' This read-only attribute represents a counter for Background Block Errors (BBE) over a 15 min /day interval. Counter applicable for : s1f and F2 and F3 levels . ')
xldv20pmS1hNeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hNeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hNeUnavailableSeconds.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) for a 15 min /day interval. Counter applicable for : s1n and F1, F2, F3 levels . ')
xldv20pmS1hFeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hFeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hFeUnavailableSeconds.setDescription(' This read-only attribute represents a counter of Unavailable Seconds (UAS) for a 15 min /day interval. Counter applicable for : s1f and F2 and F3 levels . ')
xldv20pmS1hNeOfsSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hNeOfsSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hNeOfsSeconds.setDescription(' This read-only attribute represents a counter of Errored Seconds on defect OFS for a 15 min /day interval. Counter applicable for : s1n and level F1 . ')
xldv20pmS1hNeAisSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hNeAisSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hNeAisSeconds.setDescription(' This read-only attribute represents a counter of errored Seconds on defect alarm indicatin signal AIS for a 15 min /day interval. Counter applicable for : s1n and level F2 . ')
xldv20pmS1hNeLosSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmS1hNeLosSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmS1hNeLosSeconds.setDescription(' This read-only attribute represents a counter of errored Seconds on defect LOS for a 15 min /day interval. Counter applicable for : s1n and F1 . ')
xldv20pmAtmObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 10), )
if mibBuilder.loadTexts: xldv20pmAtmObjectsTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmObjectsTable.setDescription(' This table contains the entries for the PMo objects on ATM layer. Maximum of monitored connections is 128. ')
xldv20pmAtmObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 10, 1), ).setIndexNames((0, "XLDV20PM-MIB", "xldv20pmAoIndex"))
if mibBuilder.loadTexts: xldv20pmAtmObjectsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmObjectsEntry.setDescription(' An entry of the xldv20pmAtmObjectsTable. ')
xldv20pmAoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAoIndex.setDescription(' Identifies an entry of the xldv20pmAtmObjectsTable. ')
xldv20pmAoFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 10, 1, 2), Xldv20pmFlowType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAoFlowType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAoFlowType.setDescription(' This attribute identifies the flow type : F4 (VP) or F5 (VC) segment or endToEnd flow. ')
xldv20pmAoAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 10, 1, 3), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAoAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAoAdminState.setDescription(' This read-write attribute is used to activate (unlock) and deactivate (lock) the functions (incl. collection) performed by this managed entity. Note: the 15min collection object must be activated, before day collection can operate. ')
xldv20pmAoBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 10, 1, 4), Xldv20pmBlockSizeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAoBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAoBlockSize.setDescription(' This is the number of user cells after which PMo cell is inserted. Default is 128. ')
xldv20pmAtmEndpointsTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 11), )
if mibBuilder.loadTexts: xldv20pmAtmEndpointsTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmEndpointsTable.setDescription(' This table contains the enpoints for PMo on Atm layer. ')
xldv20pmAtmEndpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 11, 1), ).setIndexNames((0, "XLDV20PM-MIB", "xldv20pmAoIndex"), (0, "XLDV20PM-MIB", "xldv20pmAeEndpointType"))
if mibBuilder.loadTexts: xldv20pmAtmEndpointsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmEndpointsEntry.setDescription(' An entry of xldv20pmAtmEndpointsTable. ')
xldv20pmAeEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 11, 1, 1), Xldv20pmEndpointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAeEndpointType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAeEndpointType.setDescription(' Identifies the type of endpoint. ')
xldv20pmAeConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAeConnectionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAeConnectionIndex.setDescription(' This attribute identifies the Vpl or Vcl cross connection where an endpoint object should be added. ')
xldv20pmAeConnectionIndexType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 11, 1, 3), Xldv20pmConnectionIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAeConnectionIndexType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAeConnectionIndexType.setDescription(' This attribute identifies the type of connection index and the termination point where an endpoint should be added. ')
xldv20pmAeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 11, 1, 4), Xldv20pmRoleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAeRole.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAeRole.setDescription(" The role of endpoint. 'analyseWithBackwardReporting' (sink) means extracting forward monitoring (FM) OAM cells, sending back backward reporting OAM cells and no data collection for current and history table. 'analyseWithoutBackwardReporting' (sink) means extracting FM cells and also collecting data. 'generateWithCollect' (source) means inserting FM cells, extracting backward reporting cells if they arrive and collect data for current and history table. 'generateWithoutCollect' (source) means inserting FM cells but without collecting data. The CMU, the Ethernet part of the Twin NT can be inserting and extracting points. ")
xldv20pmAeFlowDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 11, 1, 5), Xldv20FlowDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAeFlowDirection.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAeFlowDirection.setDescription(' This attribute identifies the flow direction. inwards means flow direction from outside (external interface) to cross connection. outwards means flow direction from inside to external interface. ')
xldv20pmAtmCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12), )
if mibBuilder.loadTexts: xldv20pmAtmCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmCurrentTable.setDescription(' This table contains the entries for the the PMo objects for the current data of Pmo monitoring objects on ATM layer. It includes attributes for performance parameters, collection interval is 15 minutes and one day . ')
xldv20pmAtmCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1), ).setIndexNames((0, "XLDV20PM-MIB", "xldv20pmAoIndex"), (0, "XLDV20PM-MIB", "xldv20pmAcIntervalType"))
if mibBuilder.loadTexts: xldv20pmAtmCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmCurrentEntry.setDescription(' An entry describing the Atm Current Data Table . ')
xldv20pmAcIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmAcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 2), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcAdminState.setDescription(' This read-write attribute is used to activate (unlock) and deactivate (lock) the functions (incl. collection) performed by this managed entity. Note: the 15min collection object must be activated, before day collection can operate. ')
xldv20pmAcSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 3), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmAcHistEntrySize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcHistEntrySize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcHistEntrySize.setDescription(' This is the configured size of history. ')
xldv20pmAcNrHistEntriesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcNrHistEntriesAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcNrHistEntriesAvailable.setDescription(' This is the number of history entries which are available in the history table. ')
xldv20pmAcElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcElapsedTime.setDescription(' This read-only attribute represents the difference between the current time and the start of the present summary interval. Units are seconds when 15 minute interval is selected or minutes for day interval. (Note: accurate to the sample time interval). ')
xldv20pmAcThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAcThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcThresholdLimitIndex.setDescription(' This read-write attribute provides an index to the ThresholdLimitTable managed entity that contains the threshold limits for the performance parameters reported by this managed entity. When the value of this attribute is set to 1, default threshold limits shall be used . ')
xldv20pmAcTransmittedUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcTransmittedUserCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcTransmittedUserCells.setDescription(' This read-only attribute represents a counter of transmitted user cells for a 15 min /day interval. ')
xldv20pmAcLostUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcLostUserCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcLostUserCells.setDescription(' This read-only attribute represents a counter of lost user cells for a 15 min /day interval. ')
xldv20pmAcMisinsertedUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAcMisinsertedUserCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAcMisinsertedUserCells.setDescription(' This read-only attribute represents a counter of Misinserted user cells for a 15 min /day interval. ')
xldv20pmAtmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 13), )
if mibBuilder.loadTexts: xldv20pmAtmHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmHistoryTable.setDescription(' This table contains the entries for the 15 min /one day-history data collection results for PMo objects of ATM layer. ')
xldv20pmAtmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 13, 1), ).setIndexNames((0, "XLDV20PM-MIB", "xldv20pmAoIndex"), (0, "XLDV20PM-MIB", "xldv20pmAhIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmAhHistEntryNr"))
if mibBuilder.loadTexts: xldv20pmAtmHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmHistoryEntry.setDescription(' An entry describing the History Data Table for PMo on ATM layer. ')
xldv20pmAhIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 13, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAhIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAhIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmAhHistEntryNr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAhHistEntryNr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAhHistEntryNr.setDescription(' This attribute is used as index to address a history entry. Entry 1 is the most recent, entry 96 is 24 hours ago. The range of values is between 1 and xldv20pmAcHistEntrySize . ')
xldv20pmAhSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 13, 1, 3), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAhSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAhSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmAhPeriodEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAhPeriodEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAhPeriodEndTime.setDescription(' Date/time at the end of the selected interval. ')
xldv20pmAhTransmittedUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAhTransmittedUserCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAhTransmittedUserCells.setDescription(' This read-only attribute represents a counter of transmitted user cells for a 15 min /day interval. ')
xldv20pmAhLostUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAhLostUserCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAhLostUserCells.setDescription(' This read-only attribute represents a counter of lost user cells for a 15 min /day interval. ')
xldv20pmAhMisinsertedUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAhMisinsertedUserCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAhMisinsertedUserCells.setDescription(' This read-only attribute represents a counter of Misinserted user cells for a 15 min /day interval. ')
xldv20pmImaGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14), )
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentTable.setDescription(' This table contains the entries for the PMo objects for the current data of Pmo monitoring objects for IMA groups . Collection interval is the current 15 minute and one the current day . ')
xldv20pmImaGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmImaGroupCurrentIntervalType"))
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentEntry.setDescription(' An entry describing the current PMo data for ImaGroups. ')
xldv20pmImaGroupCurrentIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmImaGroupCurrentAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1, 2), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentAdminState.setDescription(' This read-write attribute is used to activate (unlock) and deactivate (lock) the functions (incl. collection) performed by this managed entity. Note: the 15min collection object must be activated, before day collection can operate. ')
xldv20pmImaGroupCurrentSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1, 3), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmImaGroupCurrentHistEntrySize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentHistEntrySize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentHistEntrySize.setDescription(' This is the configured size of history. ')
xldv20pmImaGroupCurrentNrHistEntriesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentNrHistEntriesAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentNrHistEntriesAvailable.setDescription(' This is the number of history entries which are available in the history table. ')
xldv20pmImaGroupCurrentElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentElapsedTime.setDescription(' This read-only attribute represents the difference between the current time and the start of the present summary interval. Units are seconds when 15 minute interval is selected or minutes for day interval. (Note: accurate to the sample time interval). ')
xldv20pmImaGroupCurrentThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentThresholdLimitIndex.setDescription(' This read-write attribute provides an index to the ThresholdLimitTable managed entity that contains the threshold limits for the performance parameters reported by this managed entity. When the value of this attribute is set to 1, default threshold limits shall be used . ')
xldv20pmImaGroupCurrentUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentUnavailSecs.setDescription(' The counts of second intervals where the IMA group traffic state machine is down in the current for a 15 min /day interval. ')
xldv20pmImaGroupCurrentNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 14, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentNeNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupCurrentNeNumFailures.setDescription(' The number of times a near-end group failure (config-Aborted, unsufficient-Links) has been reported for a 15 min /day interval. ')
xldv20pmImaGroupHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 15), )
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryTable.setDescription(' This table contains the entries for the 15 min /one day-history data collection results for PMo objects of IMA Group interfaces. ')
xldv20pmImaGroupHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 15, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmImaGroupHistoryIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmImaGroupHistoryHistEntryNr"))
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryEntry.setDescription(' An entry describing the History Data Table for PMo IMA groups. ')
xldv20pmImaGroupHistoryIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 15, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmImaGroupHistoryHistEntryNr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryHistEntryNr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryHistEntryNr.setDescription(' This attribute is used as index to address a history entry. Entry 1 is the most recent, entry 96 is 24 hours ago. The range of values is between 1 and xldv20pmImaGroupCurrentHistEntrySize . ')
xldv20pmImaGroupHistorySuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 15, 1, 3), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupHistorySuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupHistorySuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmImaGroupHistoryPeriodEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryPeriodEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryPeriodEndTime.setDescription(' Date/time at the end of the selected interval. ')
xldv20pmImaGroupHistoryUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryUnavailSecs.setDescription(' The counts of second intervals where the IMA group traffic state machine is down in the current 15 min /day interval. ')
xldv20pmImaGroupHistoryNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryNeNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaGroupHistoryNeNumFailures.setDescription(' The number of times a near-end group failure (config-Aborted, unsufficient-Links) has been reported for a previous 15 min interval or the previous day. ')
xldv20pmImaLinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16), )
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentTable.setDescription(' This table contains the entries for the the PMo objects for the current data of Pmo monitoring objects for IMA groups . It includes attributes for performance parameters, collection interval is 15 minutes and one day . ')
xldv20pmImaLinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmImaLinkCurrentIntervalType"))
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentEntry.setDescription(' An entry describing the current PMo data for ImaLinks. ')
xldv20pmImaLinkCurrentIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmImaLinkCurrentAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 2), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentAdminState.setDescription(' This read-write attribute is used to activate (unlock) and deactivate (lock) the functions (incl. collection) performed by this managed entity. Note: the 15min collection object must be activated, before day collection can operate. ')
xldv20pmImaLinkCurrentSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 3), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmImaLinkCurrentHistEntrySize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentHistEntrySize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentHistEntrySize.setDescription(' This is the configured size of history. ')
xldv20pmImaLinkCurrentNrHistEntriesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNrHistEntriesAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNrHistEntriesAvailable.setDescription(' This is the number of history entries which are available in the history table. ')
xldv20pmImaLinkCurrentElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentElapsedTime.setDescription(' This read-only attribute represents the difference between the current time and the start of the present summary interval. Units are seconds when 15 minute interval is selected or minutes for day interval. (Note: accurate to the sample time interval). ')
xldv20pmImaLinkCurrentThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentThresholdLimitIndex.setDescription(' This read-write attribute provides an index to the ThresholdLimitTable managed entity that contains the threshold limits for the performance parameters reported by this managed entity. When the value of this attribute is set to 1, default threshold limits shall be used . ')
xldv20pmImaLinkCurrentImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentImaViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentImaViolations.setDescription('ICP violations: count of errored, invalid or missing ICP cells, except during SES-IMA or UAS-IMA conditions, in the current 15 minute interval. ATM Forum IMA v1.1, (R-125) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkCurrentOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentOifAnomalies.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentOifAnomalies.setDescription('The number of OIF anomalies, except during SES-IMA or UAS-IMA conditions, at the near-end in the current 15 minute interval. This is an optional attribute. ATM Forum IMA v1.1, (O-20) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmImaLinkCurrentNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeSevErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeSevErroredSecs.setDescription('Count of one second intervals containing >= 30% of the ICP cells counted as IV-IMAs, or one or more link defects (e.g., LOS, OOF/LOF, AIS, or LCD), LIF defects, or LODS defects, except during UAS-IMA condition, in the current 15 minute interval. ATM Forum IMA v1.1, (R-126) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmImaLinkCurrentFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentFeSevErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentFeSevErroredSecs.setDescription('Count of unavailable seconds at near-end in the current 15 minute interval: unavailability begins at the onset of 10 contiguous SES-IMA and ends at the onset of 10 contiguous seconds with no SES-IMA. ATM Forum IMA v1.1, (R-128) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmImaLinkCurrentNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeUnavailSecs.setDescription('Count of unavailable seconds at near-end in the current 15 minute interval: unavailability begins at the onset of 10 contiguous SES-IMA-FE and ends at the onset of 10 contiguous seconds with no SES-IMA-FE. ATM Forum IMA v1.1, (R-129) and (O-26) in Section 12.2.2.2 on page 77 . ')
xldv20pmImaLinkCurrentFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentFeUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentFeUnavailSecs.setDescription('Count of unavailable seconds at far-end in the current 15 minute interval: unavailability begins at the onset of 10 contiguous SES-IMA-FE and ends at the onset of 10 contiguous seconds with no SES-IMA-FE. ATM Forum IMA v1.1, (R-129) and (O-26) in Section 12.2.2.2 on page 77 . ')
xldv20pmImaLinkCurrentNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeTxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeTxUnusableSecs.setDescription('Tx Unusable seconds: count of Unusable seconds at the near-end Tx LSM in the current 15 minute interval. ATM Forum IMA v1.1, (R-130) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkCurrentNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeRxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeRxUnusableSecs.setDescription('Rx Unusable seconds: count of Unusable seconds at the near-end Rx LSM in the current 15 minute interval. ATM Forum IMA v1.1, (R-131) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkCurrentFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentFeTxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentFeTxUnusableSecs.setDescription('Tx Unusable seconds: count of Unusable seconds at the far-end Tx LSM in the current 15 minute interval. ATM Forum IMA v1.1, (R-132) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkCurrentFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentFeRxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentFeRxUnusableSecs.setDescription('Rx Unusable seconds: count of Unusable seconds at the far-end Rx LSM in the current 15 minute interval. ATM Forum IMA v1.1, (R-133) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkCurrentNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeTxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeTxNumFailures.setDescription('The number of times a near-end transmit failure alarm condition has been entered on this link (i.e., some form of implementation specific transmit fault) in the current 15 minute interval. ATM Forum IMA v1.1, (R-134) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmImaLinkCurrentNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 16, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeRxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkCurrentNeRxNumFailures.setDescription('The number of times a near-end receive failure alarm condition has been entered on this link (i.e., LIF, LODS, RFI-IMA, Mis-Connected, or some form of implementation specific receive fault) in the current 15 minute interval. ATM Forum IMA v1.1, (R-135) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmImaLinkHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17), )
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryTable.setDescription(' This table contains the entries for the 15 min /one day-history data collection results for PMo objects of IMA Link interfaces. ')
xldv20pmImaLinkHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmImaLinkHistoryIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmImaLinkHistoryHistEntryNr"))
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryEntry.setDescription(' An entry describing the History Data Table for PMo IMA groups. ')
xldv20pmImaLinkHistoryIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmImaLinkHistoryHistEntryNr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryHistEntryNr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryHistEntryNr.setDescription(' This attribute is used as index to address a history entry. Entry 1 is the most recent, entry 96 is 24 hours ago. The range of values is between 1 and xldv20pmImaLinkCurrentHistEntrySize . ')
xldv20pmImaLinkHistorySuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 3), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistorySuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistorySuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmImaLinkHistoryPeriodEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryPeriodEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryPeriodEndTime.setDescription(' Date/time at the end of the selected interval. ')
xldv20pmImaLinkHistoryImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryImaViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryImaViolations.setDescription('ICP violations: count of errored, invalid or missing ICP cells, except during SES-IMA or UAS-IMA conditions, in one of the previous 96, individual 15 minute, intervals or the previous day. ATM Forum IMA v1.1, (R-125) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkHistoryOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryOifAnomalies.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryOifAnomalies.setDescription('The number of OIF anomalies, except during SES-IMA or UAS-IMA conditions, at the near-end in one of the previous 96, individual 15 minute, intervals or the previous day. This is an optional attribute. ATM Forum IMA v1.1, (O-20) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmImaLinkHistoryNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeSevErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeSevErroredSecs.setDescription('Count of one second intervals containing >= 30% of the ICP cells counted as IV-IMAs, or one or more link defects (e.g., LOS, OOF/LOF, AIS, or LCD), LIF defects, or LODS defects, except during UAS-IMA condition, in one of the previous 96, individual 15 minute, intervals or the previous day. ATM Forum IMA v1.1, (R-126) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmImaLinkHistoryFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryFeSevErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryFeSevErroredSecs.setDescription('Count of unavailable seconds at near-end in one of the previous 96, individual 15 minute, intervals or the previous day. Unavailability begins at the onset of 10 contiguous SES-IMA and ends at the onset of 10 contiguous seconds with no SES-IMA. ATM Forum IMA v1.1, (R-127) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmImaLinkHistoryNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeUnavailSecs.setDescription('Count of unavailable seconds at near-end in one of the previous 96, individual 15 minute, intervals or the previous day. Unavailability begins at the onset of 10 contiguous SES-IMA and ends at the onset of 10 contiguous seconds with no SES-IMA. ATM Forum IMA v1.1, (R-128) and (O-26) in Section 12.2.2.2 on page 77 . ')
xldv20pmImaLinkHistoryFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryFeUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryFeUnavailSecs.setDescription('Count of unavailable seconds at far-end in one of the previous 96, individual 15 minute, intervals or the previous day. Unavailability begins at the onset of 10 contiguous SES-IMA-FE and ends at the onset of 10 contiguous seconds with no SES-IMA-FE. ATM Forum IMA v1.1, (R-129) and (O-26) in Section 12.2.2.2 on page 77 . ')
xldv20pmImaLinkHistoryNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeTxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeTxUnusableSecs.setDescription('Tx Unusable seconds: count of Unusable seconds at the near-end Tx LSM in one of the previous 96, individual 15 minute, intervals or the previous day. ATM Forum IMA v1.1, (R-130) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkHistoryNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeRxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeRxUnusableSecs.setDescription('Rx Unusable seconds: count of Unusable seconds at the near-end Rx LSM in one of the previous 96, individual 15 minute, intervals or the previous day. ATM Forum IMA v1.1, (R-131) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkHistoryFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryFeTxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryFeTxUnusableSecs.setDescription('Tx Unusable seconds: count of Unusable seconds at the far-end Tx LSM in one of the previous 96, individual 15 minute, intervals or the previous day. ATM Forum IMA v1.1, (R-132) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkHistoryFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryFeRxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryFeRxUnusableSecs.setDescription('Rx Unusable seconds: count of Unusable seconds at the far-end Rx LSM in one of the previous 96, individual 15 minute, intervals or the previous day. ATM Forum IMA v1.1, (R-133) and (O-26) in Section 12.2.2.2 on page 77. ')
xldv20pmImaLinkHistoryNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeTxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeTxNumFailures.setDescription('The number of times a near-end transmit failure alarm condition has been entered on this link (i.e., some form of implementation specific transmit fault) in one of the previous 96, individual 15 minute, intervals or the previous day. ATM Forum IMA v1.1, (R-134) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmImaLinkHistoryNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 2, 17, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeRxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmImaLinkHistoryNeRxNumFailures.setDescription('The number of times a near-end receive failure alarm condition has been entered on this link (i.e., LIF, LODS, RFI-IMA, Mis-Connected, or some form of implementation specific receive fault) in one of the previous 96, individual 15 minute, intervals or the previous day. ATM Forum IMA v1.1, (R-135) and (O-26) in Section 12.2.2.2 on page 77')
xldv20pmTcaPrMCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1), )
if mibBuilder.loadTexts: xldv20pmTcaPrMCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcaPrMCurrentTable.setDescription(' This table contains the entries for the PrM object at the following tca layer locations: - STM1 interface (in downstream direction) - STS3-c interface (in downstream direction) - E3 interface (in downstream direction) - DS3 interface (in downstream direction) - SU_AD16 interfaces (in upstream stream direction). PrM also possible at IMA groups. It includes attributes for performance parameters, collection interval is 15 min /one day . ')
xldv20pmTcaPrMCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmTcIntervalType"))
if mibBuilder.loadTexts: xldv20pmTcaPrMCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcaPrMCurrentEntry.setDescription(' An entry describing the TC-Adaptor Current Data Table . ')
xldv20pmTcIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmTcIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcIntervalType.setDescription(' This nac type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmTcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1, 1, 2), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmTcAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcAdminState.setDescription(' This read-write attribute is used to activate (unlock) and deactivate (lock) the functions (incl. collection) performed by this managed entity. Note: the 15min collection object must be activated, before day collection can operate. ')
xldv20pmTcSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1, 1, 3), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmTcSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmTcHistEntrySize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmTcHistEntrySize.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcHistEntrySize.setDescription(' This read-only attribute indicates the number of 15min history entries configured for the particular interface. The default value is 1 and means that at least one history entry is provided. ')
xldv20pmTcNrHistEntriesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmTcNrHistEntriesAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcNrHistEntriesAvailable.setDescription(' This read-only attribute indicates how many HistEntries are already available. The range of values is between 0 and xldv20pmTcHistEntrySize, thereby 0 means that this entry is not valid . ')
xldv20pmTcElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmTcElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcElapsedTime.setDescription(' This read-only attribute represents the difference between the current time and the start of the present summary interval. Units are seconds when 15 minute interval is selected or minutes for day interval. (Note: accurate to the sample time interval). ')
xldv20pmTcThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmTcThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcThresholdLimitIndex.setDescription(' This read-write attribute provides an index to the ThresholdLimitTable managed entity that contains the threshold limits for the performance parameters reported by this managed entity. When the value of this attribute is set to 1, default threshold limits shall be used. These default values are not part of the threshold limit table but are hard coded in the application SW of PM. ')
xldv20pmTcDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmTcDiscardedCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcDiscardedCells.setDescription(' This read-only attribute represents a counter of the number of ATM cells discarded at this interface, due to a HEC violation, since the start of this interval . ')
xldv20pmTcaPrMHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 2), )
if mibBuilder.loadTexts: xldv20pmTcaPrMHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcaPrMHistoryTable.setDescription(' This table contains the entries for the PrM history object at the different tca layer locations. It contains results that are overtaken from the TcaPrMCurrentTable PM-object at the end of a 15 min /day interval . ')
xldv20pmTcaPrMHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"), (0, "XLDV20PM-MIB", "xldv20pmThIntervalType"), (0, "XLDV20PM-MIB", "xldv20pmThHistEntryNr"))
if mibBuilder.loadTexts: xldv20pmTcaPrMHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTcaPrMHistoryEntry.setDescription(' An entry describing the TC-Adaptor History Data Table . ')
xldv20pmThIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 2, 1, 1), Xldv20pmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmThIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThIntervalType.setDescription(' This type attribute is used to select between the 15 min or the day accumulation types. ')
xldv20pmThHistEntryNr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmThHistEntryNr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThHistEntryNr.setDescription(' This attribute is used as index to address a history entry. Entry 1 is the most recent, entry 96 is 24 hours ago. The range of values is between 1 and xldv20pmTcHistEntrySize. ')
xldv20pmThSuspectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 2, 1, 3), Xldv20pmSuspectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmThSuspectFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThSuspectFlag.setDescription(' This read-only attribute will be set to indicate that troubles arose during an interval and that the counter values are suspect and incomplete. ')
xldv20pmThPeriodEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmThPeriodEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThPeriodEndTime.setDescription(' This read-only attribute is a record of date/time at the end of an interval . ')
xldv20pmThDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmThDiscardedCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThDiscardedCells.setDescription(' This read-only attribute represents a set of history counter of the number of ATM cells discarded at this interface, due to a HEC violation, since the start of this interval . ')
xldv20pmThresholdLimitTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1), )
if mibBuilder.loadTexts: xldv20pmThresholdLimitTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThresholdLimitTable.setDescription(' The threshold limit table for all interface. This table associates threshold limit index/PM counter pairs with threshold limit values for a 15 minutes interval. Entries with same threshold limit index belong to the same threshold limit profile. Each of the following TC-adaptor types are available and can be configured: adc, s1n, s3n, d3n, e3n. A crossing of a threshold limit leads to a threshold crossing alert. ')
xldv20pmThresholdLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1), ).setIndexNames((0, "XLDV20PM-MIB", "xldv20pmThlThresholdLimitIndex"))
if mibBuilder.loadTexts: xldv20pmThresholdLimitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThresholdLimitEntry.setDescription(' An entry describing the threshold limit information . ')
xldv20pmThlThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmThlThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlThresholdLimitIndex.setDescription(' This read-only attribute selects a profile out of the threshold limit table . ')
xldv20pmThlNeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeBackgroundBlockErrors.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeCodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeCodeViolations.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeCodeViolationsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeCodeViolationsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeCodeViolationsCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeCodeViolationsP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeCodeViolationsP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeCodeViolationsP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeCodeViolationsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeCodeViolationsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeCodeViolationsPLCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeErroredSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeErroredSecondsCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeErroredSecondsPLCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeSas = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeSas.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeSas.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeSeverelyErroredFrameSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeSeverelyErroredFrameSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeSeverelyErroredFrameSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeSeverelyErroredSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeSeverelyErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeSeverelyErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeSeverelyErroredSecondsCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeSeverelyErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeSeverelyErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeSeverelyErroredSecondsPLCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeUnavailableSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeUnavailableSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeUnavailableSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeUnavailableSecondsPLCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeAisSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeAisSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeAisSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeOfsSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeOfsSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeOfsSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlNeLosSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlNeLosSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlNeLosSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeBackgroundBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeBackgroundBlockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeBackgroundBlockErrors.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeCodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeCodeViolations.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeCodeViolationsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeCodeViolationsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeCodeViolationsCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeCodeViolationsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeCodeViolationsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeCodeViolationsPLCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeErroredSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeErroredSecondsCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeErroredSecondsPLCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeSas = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeSas.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeSas.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeSeverelyErroredSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeSeverelyErroredSecondsCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeSeverelyErroredSecondsCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeSeverelyErroredSecondsCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeSeverelyErroredSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeSeverelyErroredSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeSeverelyErroredSecondsPLCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeUnavailableSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeUnavailableSeconds.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlFeUnavailableSecondsPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlFeUnavailableSecondsPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlFeUnavailableSecondsPLCP.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlDiscardedCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlDiscardedCells.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaGroupUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaGroupUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaGroupUnavailSecs.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaGroupNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaGroupNeNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaGroupNeNumFailures.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkImaViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkImaViolations.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkOifAnomalies.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkOifAnomalies.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeSevErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeSevErroredSecs.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkFeSevErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkFeSevErroredSecs.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeUnavailSecs.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkFeUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkFeUnavailSecs.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeTxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeTxUnusableSecs.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeRxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeRxUnusableSecs.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkFeTxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkFeTxUnusableSecs.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkFeRxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkFeRxUnusableSecs.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeTxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeTxNumFailures.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmThlImaLinkNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeRxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmThlImaLinkNeRxNumFailures.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmAtmThresholdLimitTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 2), )
if mibBuilder.loadTexts: xldv20pmAtmThresholdLimitTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmThresholdLimitTable.setDescription(' The threshold limit table for all interface. This table associates threshold limit index/PM counter pairs with threshold limit values for a 15 minutes interval. Entries with same threshold limit index belong to the same threshold limit profile. A crossing of a threshold limit leads to a threshold crossing alert. ')
xldv20pmAtmThresholdLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 2, 1), ).setIndexNames((0, "XLDV20PM-MIB", "xldv20pmAtlThresholdLimitIndex"))
if mibBuilder.loadTexts: xldv20pmAtmThresholdLimitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtmThresholdLimitEntry.setDescription(' An entry describing the threshold limit information . ')
xldv20pmAtlThresholdLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20pmAtlThresholdLimitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtlThresholdLimitIndex.setDescription(' This read-only attribute selects a profile out of the threshold limit table of PM on ATM layer. ')
xldv20pmAtlTransmittedUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAtlTransmittedUserCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtlTransmittedUserCells.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmAtlLostUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAtlLostUserCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtlLostUserCells.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmAtlMisinsertedUserCells = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20pmAtlMisinsertedUserCells.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmAtlMisinsertedUserCells.setDescription(' This read-write attribute selects the threshold limit value of the counter in the current threshold limit profile. ')
xldv20pmTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1))
xldv20pmTvIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1, 1), Unsigned16())
if mibBuilder.loadTexts: xldv20pmTvIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTvIfIndex.setDescription(' The interface index of the reporting PM object. ')
xldv20pmTvPmType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1, 2), Xldv20pmType())
if mibBuilder.loadTexts: xldv20pmTvPmType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTvPmType.setDescription(' Specifies the reporting PM object and OAM level. ')
xldv20pmTvPmCounter = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1, 3), Xldv20pmCounterName())
if mibBuilder.loadTexts: xldv20pmTvPmCounter.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTvPmCounter.setDescription(' Identifies the PM counter. ')
xldv20pmTvCurrentCounterValue = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1, 4), Counter32())
if mibBuilder.loadTexts: xldv20pmTvCurrentCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTvCurrentCounterValue.setDescription(' The actual counter value at detection. ')
xldv20pmTvCurrentCounterLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1, 5), Counter32())
if mibBuilder.loadTexts: xldv20pmTvCurrentCounterLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTvCurrentCounterLimit.setDescription(' The current value of threshold limit. ')
xldv20pmTvAtmPmCounter = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1, 6), Xldv20pmAtmCounterType())
if mibBuilder.loadTexts: xldv20pmTvAtmPmCounter.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTvAtmPmCounter.setDescription(' Identifies the performance parameter. ')
xldv20pmTvAtmObjectIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1, 7), Unsigned16())
if mibBuilder.loadTexts: xldv20pmTvAtmObjectIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTvAtmObjectIndex.setDescription('Identifies the AtmPm object. ')
xldv20pmTvEndpointType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1, 8), Xldv20pmEndpointType())
if mibBuilder.loadTexts: xldv20pmTvEndpointType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTvEndpointType.setDescription('Identifies the type of endpoint. ')
xldv20pmTvIntervalType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 1, 9), Xldv20pmIntervalType())
if mibBuilder.loadTexts: xldv20pmTvIntervalType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20pmTvIntervalType.setDescription('Identifies the type of interval. ')
xldv20pmTrapTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 5, 5, 2))
xldv20pmTrThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,200)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20PM-MIB", "xldv20pmTvIfIndex"), ("XLDV20PM-MIB", "xldv20pmTvPmType"), ("XLDV20PM-MIB", "xldv20pmTvPmCounter"), ("XLDV20PM-MIB", "xldv20pmTvIntervalType"), ("XLDV20PM-MIB", "xldv20pmTvCurrentCounterValue"), ("XLDV20PM-MIB", "xldv20pmTvCurrentCounterLimit"))
if mibBuilder.loadTexts: xldv20pmTrThresholdCrossingAlert.setDescription(' Threshold crossing alert for PM on physical layer. ')
xldv20pmTrAtmThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,300)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20PM-MIB", "xldv20pmTvAtmObjectIndex"), ("XLDV20PM-MIB", "xldv20pmTvAtmPmCounter"), ("XLDV20PM-MIB", "xldv20pmTvIntervalType"), ("XLDV20PM-MIB", "xldv20pmTvCurrentCounterValue"), ("XLDV20PM-MIB", "xldv20pmTvCurrentCounterLimit"))
if mibBuilder.loadTexts: xldv20pmTrAtmThresholdCrossingAlert.setDescription(' Threshold crossing alert for PM on ATM layer . ')
xldv20pmTrAtmObjectCreation = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,302)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20PM-MIB", "xldv20pmTvAtmObjectIndex"))
if mibBuilder.loadTexts: xldv20pmTrAtmObjectCreation.setDescription(' An Atm object is created. ')
xldv20pmTrAtmObjectDeletion = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,303)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20PM-MIB", "xldv20pmTvAtmObjectIndex"))
if mibBuilder.loadTexts: xldv20pmTrAtmObjectDeletion.setDescription(' An Atm object is deleted. ')
xldv20pmTrAtmEndpointObjectCreation = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,304)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20PM-MIB", "xldv20pmTvAtmObjectIndex"), ("XLDV20PM-MIB", "xldv20pmTvEndpointType"))
if mibBuilder.loadTexts: xldv20pmTrAtmEndpointObjectCreation.setDescription(' An Atm endpoint object is created. ')
xldv20pmTrAtmEndpointObjectDeletion = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,305)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20PM-MIB", "xldv20pmTvAtmObjectIndex"), ("XLDV20PM-MIB", "xldv20pmTvEndpointType"))
if mibBuilder.loadTexts: xldv20pmTrAtmEndpointObjectDeletion.setDescription(' An Atm endpoint object is deleted. ')
mibBuilder.exportSymbols("XLDV20PM-MIB", xldv20pmD3cFeUnavailableSeconds=xldv20pmD3cFeUnavailableSeconds, xldv20pmTvEndpointType=xldv20pmTvEndpointType, Xldv20pmFlowType=Xldv20pmFlowType, xldv20pmCoIntervalType=xldv20pmCoIntervalType, xldv20pmAoAdminState=xldv20pmAoAdminState, xldv20pmAhHistEntryNr=xldv20pmAhHistEntryNr, xldv20pmS3cFeUnavailableSeconds=xldv20pmS3cFeUnavailableSeconds, xldv20pmD3hFeCodeViolationsCP=xldv20pmD3hFeCodeViolationsCP, xldv20pmImaLinkHistoryImaViolations=xldv20pmImaLinkHistoryImaViolations, xldv20pmS1hNeLosSeconds=xldv20pmS1hNeLosSeconds, xldv20pmThlFeBackgroundBlockErrors=xldv20pmThlFeBackgroundBlockErrors, xldv20pmTvAtmObjectIndex=xldv20pmTvAtmObjectIndex, xldv20pmD3cIntervalType=xldv20pmD3cIntervalType, xldv20pmD3cElapsedTime=xldv20pmD3cElapsedTime, xldv20pmThlNeCodeViolationsCP=xldv20pmThlNeCodeViolationsCP, xldv20pmAeConnectionIndexType=xldv20pmAeConnectionIndexType, xldv20pmThlFeErroredSecondsPLCP=xldv20pmThlFeErroredSecondsPLCP, xldv20pmD3cOAMLevel=xldv20pmD3cOAMLevel, xldv20pmImaLinkHistoryHistEntryNr=xldv20pmImaLinkHistoryHistEntryNr, xldv20pmD3hSuspectFlag=xldv20pmD3hSuspectFlag, xldv20pmImaLinkHistoryNeUnavailSecs=xldv20pmImaLinkHistoryNeUnavailSecs, xldv20pmThlImaLinkImaViolations=xldv20pmThlImaLinkImaViolations, xldv20pmS1cOAMLevel=xldv20pmS1cOAMLevel, xldv20pmD3hNeSeverelyErroredSecondsPLCP=xldv20pmD3hNeSeverelyErroredSecondsPLCP, xldv20pmS1CurrentTable=xldv20pmS1CurrentTable, xldv20pmS1hFeErroredSeconds=xldv20pmS1hFeErroredSeconds, xldv20pmS3cElapsedTime=xldv20pmS3cElapsedTime, xldv20pmS1HistoryTable=xldv20pmS1HistoryTable, xldv20pmS3hNeCodeViolations=xldv20pmS3hNeCodeViolations, xldv20pmTrapVars=xldv20pmTrapVars, xldv20pmThlFeSeverelyErroredSeconds=xldv20pmThlFeSeverelyErroredSeconds, xldv20pmCcSuspectFlag=xldv20pmCcSuspectFlag, xldv20pmImaGroupCurrentAdminState=xldv20pmImaGroupCurrentAdminState, xldv20pmImaLinkCurrentFeSevErroredSecs=xldv20pmImaLinkCurrentFeSevErroredSecs, xldv20pmAoFlowType=xldv20pmAoFlowType, xldv20pmD3HistoryEntry=xldv20pmD3HistoryEntry, xldv20pmS3CurrentTable=xldv20pmS3CurrentTable, xldv20pmS3cFeSeverelyErroredSeconds=xldv20pmS3cFeSeverelyErroredSeconds, xldv20pmS3hSuspectFlag=xldv20pmS3hSuspectFlag, xldv20pmCcFeSeverelyErroredSeconds=xldv20pmCcFeSeverelyErroredSeconds, xldv20pmAtmHistoryEntry=xldv20pmAtmHistoryEntry, xldv20pmPerformanceMonitoring=xldv20pmPerformanceMonitoring, xldv20pmImaLinkHistoryNeRxUnusableSecs=xldv20pmImaLinkHistoryNeRxUnusableSecs, xldv20pmS1cNeAisSeconds=xldv20pmS1cNeAisSeconds, xldv20pmImaLinkHistoryFeUnavailSecs=xldv20pmImaLinkHistoryFeUnavailSecs, xldv20pmImaGroupCurrentElapsedTime=xldv20pmImaGroupCurrentElapsedTime, xldv20pmImaLinkCurrentSuspectFlag=xldv20pmImaLinkCurrentSuspectFlag, xldv20pmS3CurrentEntry=xldv20pmS3CurrentEntry, xldv20pmD3cFeErroredSecondsPLCP=xldv20pmD3cFeErroredSecondsPLCP, xldv20pmS1HistoryEntry=xldv20pmS1HistoryEntry, xldv20pmTvCurrentCounterValue=xldv20pmTvCurrentCounterValue, xldv20pmAeRole=xldv20pmAeRole, xldv20pmThlNeAisSeconds=xldv20pmThlNeAisSeconds, xldv20pmChNeUnavailableSeconds=xldv20pmChNeUnavailableSeconds, xldv20pmAhPeriodEndTime=xldv20pmAhPeriodEndTime, xldv20pmD3hFeUnavailableSeconds=xldv20pmD3hFeUnavailableSeconds, xldv20pmImaLinkHistoryOifAnomalies=xldv20pmImaLinkHistoryOifAnomalies, xldv20pmD3hPeriodEndTime=xldv20pmD3hPeriodEndTime, xldv20pmS1cNrHistEntriesAvailable=xldv20pmS1cNrHistEntriesAvailable, xldv20pmCoOAMLevel=xldv20pmCoOAMLevel, xldv20pmD3hOAMLevel=xldv20pmD3hOAMLevel, xldv20pmD3hNeSas=xldv20pmD3hNeSas, xldv20pmThlFeCodeViolationsPLCP=xldv20pmThlFeCodeViolationsPLCP, xldv20pmImaLinkCurrentElapsedTime=xldv20pmImaLinkCurrentElapsedTime, xldv20pmS3hPeriodEndTime=xldv20pmS3hPeriodEndTime, xldv20pmTcDiscardedCells=xldv20pmTcDiscardedCells, xldv20pmS3cFeErroredSeconds=xldv20pmS3cFeErroredSeconds, xldv20pmCcFeBackgroundBlockErrors=xldv20pmCcFeBackgroundBlockErrors, xldv20pmD3cFeCodeViolationsPLCP=xldv20pmD3cFeCodeViolationsPLCP, xldv20pmAcMisinsertedUserCells=xldv20pmAcMisinsertedUserCells, xldv20pmTrAtmObjectDeletion=xldv20pmTrAtmObjectDeletion, xldv20pmS1cElapsedTime=xldv20pmS1cElapsedTime, xldv20pmTcAdminState=xldv20pmTcAdminState, xldv20pmThlImaLinkNeTxNumFailures=xldv20pmThlImaLinkNeTxNumFailures, xldv20pmAcoIndex=xldv20pmAcoIndex, xldv20pmTcaPrMHistoryTable=xldv20pmTcaPrMHistoryTable, xldv20pmThlFeUnavailableSeconds=xldv20pmThlFeUnavailableSeconds, xldv20pmD3HistoryTable=xldv20pmD3HistoryTable, xldv20pmChFeErroredSeconds=xldv20pmChFeErroredSeconds, xldv20pmS3cNrHistEntriesAvailable=xldv20pmS3cNrHistEntriesAvailable, xldv20pmThlNeErroredSeconds=xldv20pmThlNeErroredSeconds, xldv20pmTvIfIndex=xldv20pmTvIfIndex, xldv20pmS1cSuspectFlag=xldv20pmS1cSuspectFlag, xldv20pmD3cThresholdLimitIndex=xldv20pmD3cThresholdLimitIndex, xldv20pmThlImaLinkNeRxNumFailures=xldv20pmThlImaLinkNeRxNumFailures, xldv20pmImaGroupHistoryEntry=xldv20pmImaGroupHistoryEntry, xldv20pmD3hNeSeverelyErroredSecondsCP=xldv20pmD3hNeSeverelyErroredSecondsCP, xldv20pmS3hNeErroredSeconds=xldv20pmS3hNeErroredSeconds, xldv20pmChFeSeverelyErroredSeconds=xldv20pmChFeSeverelyErroredSeconds, xldv20pmAcNrHistEntriesAvailable=xldv20pmAcNrHistEntriesAvailable, xldv20pmAtmObjectsTable=xldv20pmAtmObjectsTable, xldv20pmCoRemainingHistoryEntriesSize=xldv20pmCoRemainingHistoryEntriesSize, xldv20pmThlImaGroupUnavailSecs=xldv20pmThlImaGroupUnavailSecs, xldv20pmAtlMisinsertedUserCells=xldv20pmAtlMisinsertedUserCells, xldv20pmThlFeUnavailableSecondsPLCP=xldv20pmThlFeUnavailableSecondsPLCP, xldv20pmImaLinkHistorySuspectFlag=xldv20pmImaLinkHistorySuspectFlag, xldv20pmImaGroupCurrentUnavailSecs=xldv20pmImaGroupCurrentUnavailSecs, xldv20pmThlNeSeverelyErroredSecondsPLCP=xldv20pmThlNeSeverelyErroredSecondsPLCP, xldv20pmD3hNeCodeViolationsCP=xldv20pmD3hNeCodeViolationsCP, xldv20pmThlNeSeverelyErroredSecondsCP=xldv20pmThlNeSeverelyErroredSecondsCP, xldv20pmImaLinkCurrentAdminState=xldv20pmImaLinkCurrentAdminState, xldv20pmAcoRole=xldv20pmAcoRole, xldv20pmImaLinkCurrentEntry=xldv20pmImaLinkCurrentEntry, xldv20pmD3cNeSeverelyErroredSecondsCP=xldv20pmD3cNeSeverelyErroredSecondsCP, xldv20pmD3hIntervalType=xldv20pmD3hIntervalType, xldv20pmS1hIntervalType=xldv20pmS1hIntervalType, xldv20pmCoControlReqResult=xldv20pmCoControlReqResult, xldv20pmCcAdminState=xldv20pmCcAdminState, xldv20pmCcElapsedTime=xldv20pmCcElapsedTime, xldv20pmD3cFeUnavailableSecondsPLCP=xldv20pmD3cFeUnavailableSecondsPLCP, xldv20pmProtocolMonitoring=xldv20pmProtocolMonitoring, xldv20pmThlImaLinkFeRxUnusableSecs=xldv20pmThlImaLinkFeRxUnusableSecs, xldv20pmCoControlTimeStamp=xldv20pmCoControlTimeStamp, xldv20pmThSuspectFlag=xldv20pmThSuspectFlag, xldv20pmThlNeSeverelyErroredFrameSeconds=xldv20pmThlNeSeverelyErroredFrameSeconds, xldv20pmS3HistoryEntry=xldv20pmS3HistoryEntry, xldv20pmImaLinkCurrentNeSevErroredSecs=xldv20pmImaLinkCurrentNeSevErroredSecs, xldv20pmThlNeUnavailableSecondsPLCP=xldv20pmThlNeUnavailableSecondsPLCP, xldv20pmImaLinkHistoryNeRxNumFailures=xldv20pmImaLinkHistoryNeRxNumFailures, xldv20pmThlFeSeverelyErroredSecondsPLCP=xldv20pmThlFeSeverelyErroredSecondsPLCP, xldv20pmCcOAMLevel=xldv20pmCcOAMLevel, xldv20pmS3hOAMLevel=xldv20pmS3hOAMLevel, xldv20pmChSuspectFlag=xldv20pmChSuspectFlag, xldv20pmThlNeCodeViolations=xldv20pmThlNeCodeViolations, xldv20pmThDiscardedCells=xldv20pmThDiscardedCells, xldv20pmS1hPeriodEndTime=xldv20pmS1hPeriodEndTime, xldv20pmCoNrHistEntriesSize=xldv20pmCoNrHistEntriesSize, xldv20pmImaGroupHistorySuspectFlag=xldv20pmImaGroupHistorySuspectFlag, xldv20pmTcHistEntrySize=xldv20pmTcHistEntrySize, xldv20pmAtmObjectsEntry=xldv20pmAtmObjectsEntry, xldv20pmImaLinkCurrentNrHistEntriesAvailable=xldv20pmImaLinkCurrentNrHistEntriesAvailable, xldv20pmTcElapsedTime=xldv20pmTcElapsedTime, xldv20pmControl=xldv20pmControl, xldv20pmD3cNeErroredSecondsCP=xldv20pmD3cNeErroredSecondsCP, xldv20pmD3hFeErroredSecondsPLCP=xldv20pmD3hFeErroredSecondsPLCP, xldv20pmThPeriodEndTime=xldv20pmThPeriodEndTime, xldv20pmAtlThresholdLimitIndex=xldv20pmAtlThresholdLimitIndex, xldv20pmTcIntervalType=xldv20pmTcIntervalType, xldv20pmImaLinkHistoryNeTxUnusableSecs=xldv20pmImaLinkHistoryNeTxUnusableSecs, xldv20pmCcFeUnavailableSeconds=xldv20pmCcFeUnavailableSeconds, xldv20pmImaLinkCurrentImaViolations=xldv20pmImaLinkCurrentImaViolations, xldv20pmThHistEntryNr=xldv20pmThHistEntryNr, xldv20pmS1hFeUnavailableSeconds=xldv20pmS1hFeUnavailableSeconds, xldv20pmD3CurrentTable=xldv20pmD3CurrentTable, xldv20pmTrapTypes=xldv20pmTrapTypes, xldv20pmS3cSuspectFlag=xldv20pmS3cSuspectFlag, xldv20pmS1hHistEntryNr=xldv20pmS1hHistEntryNr, xldv20pmD3cNeCodeViolationsCP=xldv20pmD3cNeCodeViolationsCP, xldv20pmD3cHistEntrySize=xldv20pmD3cHistEntrySize, xldv20pmAcoFlowType=xldv20pmAcoFlowType, xldv20pmS3cNeCodeViolations=xldv20pmS3cNeCodeViolations, xldv20pmS3cAdminState=xldv20pmS3cAdminState, xldv20pmAcoNrHistEntriesSize=xldv20pmAcoNrHistEntriesSize, xldv20pmThlNeSeverelyErroredSeconds=xldv20pmThlNeSeverelyErroredSeconds, xldv20pmChHistEntryNr=xldv20pmChHistEntryNr, xldv20pmImaLinkHistoryNeTxNumFailures=xldv20pmImaLinkHistoryNeTxNumFailures, xldv20pmThlNeErroredSecondsCP=xldv20pmThlNeErroredSecondsCP, xldv20pmAcoControlReq=xldv20pmAcoControlReq, xldv20pmD3cNeSas=xldv20pmD3cNeSas, xldv20pmThlFeCodeViolations=xldv20pmThlFeCodeViolations, xldv20pmCommonCurrentTable=xldv20pmCommonCurrentTable, Xldv20pmSuspectType=Xldv20pmSuspectType, xldv20pmD3cFeErroredSecondsCP=xldv20pmD3cFeErroredSecondsCP, xldv20pmCcNeBackgroundBlockErrors=xldv20pmCcNeBackgroundBlockErrors, xldv20pmThlNeOfsSeconds=xldv20pmThlNeOfsSeconds, xldv20pmAtmThresholdLimitEntry=xldv20pmAtmThresholdLimitEntry, xldv20pmAhMisinsertedUserCells=xldv20pmAhMisinsertedUserCells, xldv20pmS1cNeUnavailableSeconds=xldv20pmS1cNeUnavailableSeconds, xldv20pmS1hNeOfsSeconds=xldv20pmS1hNeOfsSeconds, xldv20pmS1hNeBackgroundBlockErrors=xldv20pmS1hNeBackgroundBlockErrors, xldv20pmS3hNeSeverelyErroredFrameSeconds=xldv20pmS3hNeSeverelyErroredFrameSeconds, xldv20pmAeConnectionIndex=xldv20pmAeConnectionIndex, xldv20pmThlNeLosSeconds=xldv20pmThlNeLosSeconds, xldv20pmImaLinkHistoryNeSevErroredSecs=xldv20pmImaLinkHistoryNeSevErroredSecs, xldv20pmAeFlowDirection=xldv20pmAeFlowDirection, Xldv20pmRoleType=Xldv20pmRoleType, xldv20pmImaLinkHistoryFeSevErroredSecs=xldv20pmImaLinkHistoryFeSevErroredSecs, xldv20pmTvCurrentCounterLimit=xldv20pmTvCurrentCounterLimit, xldv20pmChPeriodEndTime=xldv20pmChPeriodEndTime, xldv20pmImaLinkCurrentNeUnavailSecs=xldv20pmImaLinkCurrentNeUnavailSecs, xldv20pmThlImaLinkFeSevErroredSecs=xldv20pmThlImaLinkFeSevErroredSecs, xldv20pmThlFeErroredSecondsCP=xldv20pmThlFeErroredSecondsCP, xldv20pmD3hHistEntryNr=xldv20pmD3hHistEntryNr, xldv20pmAcoControlTimeStamp=xldv20pmAcoControlTimeStamp, xldv20pmS1hOAMLevel=xldv20pmS1hOAMLevel, xldv20pmD3cNeCodeViolationsP=xldv20pmD3cNeCodeViolationsP, xldv20pmS1cNeSeverelyErroredSeconds=xldv20pmS1cNeSeverelyErroredSeconds, xldv20pmImaLinkCurrentNeTxNumFailures=xldv20pmImaLinkCurrentNeTxNumFailures, xldv20pmThlNeCodeViolationsP=xldv20pmThlNeCodeViolationsP, xldv20pmThlFeSas=xldv20pmThlFeSas, xldv20pmTrThresholdCrossingAlert=xldv20pmTrThresholdCrossingAlert, xldv20pmS3hFeSeverelyErroredSeconds=xldv20pmS3hFeSeverelyErroredSeconds, xldv20pmImaGroupCurrentThresholdLimitIndex=xldv20pmImaGroupCurrentThresholdLimitIndex, xldv20pmTraps=xldv20pmTraps, xldv20pmS1hNeAisSeconds=xldv20pmS1hNeAisSeconds, xldv20pmS1cAdminState=xldv20pmS1cAdminState, xldv20pmImaGroupHistoryIntervalType=xldv20pmImaGroupHistoryIntervalType, xldv20pmD3hNeCodeViolationsPLCP=xldv20pmD3hNeCodeViolationsPLCP, xldv20pmCcThresholdLimitIndex=xldv20pmCcThresholdLimitIndex, xldv20pmTcaPrMHistoryEntry=xldv20pmTcaPrMHistoryEntry, xldv20pmTvIntervalType=xldv20pmTvIntervalType, xldv20pmD3hNeUnavailableSeconds=xldv20pmD3hNeUnavailableSeconds, xldv20pmThlFeCodeViolationsCP=xldv20pmThlFeCodeViolationsCP, xldv20pmImaLinkHistoryFeRxUnusableSecs=xldv20pmImaLinkHistoryFeRxUnusableSecs, xldv20pmD3cSuspectFlag=xldv20pmD3cSuspectFlag, xldv20pmD3hFeSas=xldv20pmD3hFeSas, xldv20pmAtmEndpointsEntry=xldv20pmAtmEndpointsEntry, xldv20Pm=xldv20Pm, xldv20pmAcoRemainingHistoryEntriesSize=xldv20pmAcoRemainingHistoryEntriesSize, xldv20pmImaLinkCurrentFeUnavailSecs=xldv20pmImaLinkCurrentFeUnavailSecs, xldv20pmD3cAdminState=xldv20pmD3cAdminState, xldv20pmImaLinkCurrentOifAnomalies=xldv20pmImaLinkCurrentOifAnomalies, xldv20pmImaLinkHistoryTable=xldv20pmImaLinkHistoryTable, xldv20pmS1cFeUnavailableSeconds=xldv20pmS1cFeUnavailableSeconds, xldv20pmS3hFeUnavailableSeconds=xldv20pmS3hFeUnavailableSeconds, xldv20pmTcaPrMCurrentEntry=xldv20pmTcaPrMCurrentEntry, xldv20pmAcoControlStatus=xldv20pmAcoControlStatus, xldv20pmCcNeErroredSeconds=xldv20pmCcNeErroredSeconds, xldv20pmCoControlReq=xldv20pmCoControlReq, xldv20pmS3hHistEntryNr=xldv20pmS3hHistEntryNr, xldv20pmImaGroupCurrentNrHistEntriesAvailable=xldv20pmImaGroupCurrentNrHistEntriesAvailable, xldv20pmChFeBackgroundBlockErrors=xldv20pmChFeBackgroundBlockErrors, xldv20pmThlImaLinkFeUnavailSecs=xldv20pmThlImaLinkFeUnavailSecs, xldv20pmImaLinkCurrentNeRxNumFailures=xldv20pmImaLinkCurrentNeRxNumFailures, xldv20pmCcFeErroredSeconds=xldv20pmCcFeErroredSeconds, Xldv20pmBlockSizeType=Xldv20pmBlockSizeType, xldv20pmImaGroupCurrentEntry=xldv20pmImaGroupCurrentEntry, xldv20pmD3cFeSeverelyErroredSecondsCP=xldv20pmD3cFeSeverelyErroredSecondsCP, xldv20pmChNeBackgroundBlockErrors=xldv20pmChNeBackgroundBlockErrors, xldv20pmAoIndex=xldv20pmAoIndex, xldv20pmD3CurrentEntry=xldv20pmD3CurrentEntry, xldv20pmImaGroupCurrentHistEntrySize=xldv20pmImaGroupCurrentHistEntrySize, xldv20pmImaLinkHistoryIntervalType=xldv20pmImaLinkHistoryIntervalType, xldv20pmAcTransmittedUserCells=xldv20pmAcTransmittedUserCells, xldv20pmCoControlStatus=xldv20pmCoControlStatus, xldv20pmAtlLostUserCells=xldv20pmAtlLostUserCells, xldv20pmS3cHistEntrySize=xldv20pmS3cHistEntrySize, xldv20pmCommonHistoryEntry=xldv20pmCommonHistoryEntry, xldv20pmS1cHistEntrySize=xldv20pmS1cHistEntrySize, xldv20pmThlFeErroredSeconds=xldv20pmThlFeErroredSeconds, xldv20pmTrAtmEndpointObjectCreation=xldv20pmTrAtmEndpointObjectCreation, xldv20pmThlImaLinkNeUnavailSecs=xldv20pmThlImaLinkNeUnavailSecs, xldv20pmS1cNeOfsSeconds=xldv20pmS1cNeOfsSeconds, xldv20pmAhLostUserCells=xldv20pmAhLostUserCells, xldv20pmImaLinkCurrentNeTxUnusableSecs=xldv20pmImaLinkCurrentNeTxUnusableSecs, xldv20pmS1CurrentEntry=xldv20pmS1CurrentEntry, xldv20pmS1cThresholdLimitIndex=xldv20pmS1cThresholdLimitIndex, xldv20pmS3cNeUnavailableSeconds=xldv20pmS3cNeUnavailableSeconds, Xldv20pmControlReq=Xldv20pmControlReq, xldv20pmS3cFeCodeViolations=xldv20pmS3cFeCodeViolations, xldv20pmImaLinkHistoryEntry=xldv20pmImaLinkHistoryEntry, xldv20pmS3cNeErroredSeconds=xldv20pmS3cNeErroredSeconds, xldv20pmThlNeCodeViolationsPLCP=xldv20pmThlNeCodeViolationsPLCP, xldv20pmD3hFeUnavailableSecondsPLCP=xldv20pmD3hFeUnavailableSecondsPLCP)
mibBuilder.exportSymbols("XLDV20PM-MIB", xldv20pmThlNeBackgroundBlockErrors=xldv20pmThlNeBackgroundBlockErrors, xldv20pmThlNeSas=xldv20pmThlNeSas, xldv20pmThresholdLimitTable=xldv20pmThresholdLimitTable, xldv20pmThlFeSeverelyErroredSecondsCP=xldv20pmThlFeSeverelyErroredSecondsCP, xldv20pmThlImaLinkNeSevErroredSecs=xldv20pmThlImaLinkNeSevErroredSecs, xldv20pmD3hNeUnavailableSecondsPLCP=xldv20pmD3hNeUnavailableSecondsPLCP, xldv20pmImaGroupHistoryTable=xldv20pmImaGroupHistoryTable, xldv20pmS3cThresholdLimitIndex=xldv20pmS3cThresholdLimitIndex, xldv20pmD3hFeSeverelyErroredSecondsCP=xldv20pmD3hFeSeverelyErroredSecondsCP, xldv20pmImaLinkCurrentIntervalType=xldv20pmImaLinkCurrentIntervalType, xldv20pmTcaPrMCurrentTable=xldv20pmTcaPrMCurrentTable, xldv20pmAtmControl=xldv20pmAtmControl, xldv20pmAcoConnectionIndex=xldv20pmAcoConnectionIndex, xldv20pmThresholdLimitEntry=xldv20pmThresholdLimitEntry, Xldv20pmType=Xldv20pmType, xldv20pmAeEndpointType=xldv20pmAeEndpointType, xldv20pmD3cNrHistEntriesAvailable=xldv20pmD3cNrHistEntriesAvailable, xldv20pmTvAtmPmCounter=xldv20pmTvAtmPmCounter, xldv20pmTrAtmEndpointObjectDeletion=xldv20pmTrAtmEndpointObjectDeletion, Xldv20pmCounterName=Xldv20pmCounterName, xldv20pmS3hFeCodeViolations=xldv20pmS3hFeCodeViolations, xldv20pmThlImaLinkNeTxUnusableSecs=xldv20pmThlImaLinkNeTxUnusableSecs, xldv20pmS1cIntervalType=xldv20pmS1cIntervalType, xldv20pmAtmCurrentEntry=xldv20pmAtmCurrentEntry, xldv20pmAcAdminState=xldv20pmAcAdminState, xldv20pmCommonHistoryTable=xldv20pmCommonHistoryTable, xldv20pmAcThresholdLimitIndex=xldv20pmAcThresholdLimitIndex, xldv20pmImaGroupCurrentIntervalType=xldv20pmImaGroupCurrentIntervalType, xldv20pmImaLinkCurrentThresholdLimitIndex=xldv20pmImaLinkCurrentThresholdLimitIndex, xldv20pmCcNeSeverelyErroredSeconds=xldv20pmCcNeSeverelyErroredSeconds, xldv20pmAcSuspectFlag=xldv20pmAcSuspectFlag, xldv20pmD3hNeCodeViolationsP=xldv20pmD3hNeCodeViolationsP, xldv20pmAcoControlReqResult=xldv20pmAcoControlReqResult, xldv20pmD3hFeSeverelyErroredSecondsPLCP=xldv20pmD3hFeSeverelyErroredSecondsPLCP, xldv20pmS1hNeUnavailableSeconds=xldv20pmS1hNeUnavailableSeconds, xldv20pmImaGroupHistoryHistEntryNr=xldv20pmImaGroupHistoryHistEntryNr, xldv20pmS3cIntervalType=xldv20pmS3cIntervalType, xldv20pmCommonCurrentEntry=xldv20pmCommonCurrentEntry, xldv20pmThlDiscardedCells=xldv20pmThlDiscardedCells, xldv20pmS3hFeErroredSeconds=xldv20pmS3hFeErroredSeconds, xldv20pmD3hFeErroredSecondsCP=xldv20pmD3hFeErroredSecondsCP, xldv20pmThlImaGroupNeNumFailures=xldv20pmThlImaGroupNeNumFailures, xldv20pmCcNeUnavailableSeconds=xldv20pmCcNeUnavailableSeconds, xldv20pmS1cNeBackgroundBlockErrors=xldv20pmS1cNeBackgroundBlockErrors, xldv20pmImaGroupHistoryNeNumFailures=xldv20pmImaGroupHistoryNeNumFailures, xldv20pmCcNrHistEntriesAvailable=xldv20pmCcNrHistEntriesAvailable, xldv20pmAtlTransmittedUserCells=xldv20pmAtlTransmittedUserCells, xldv20pmS1hFeBackgroundBlockErrors=xldv20pmS1hFeBackgroundBlockErrors, xldv20pmThlImaLinkFeTxUnusableSecs=xldv20pmThlImaLinkFeTxUnusableSecs, xldv20pmChFeUnavailableSeconds=xldv20pmChFeUnavailableSeconds, xldv20pmThlNeUnavailableSeconds=xldv20pmThlNeUnavailableSeconds, xldv20pmThlImaLinkOifAnomalies=xldv20pmThlImaLinkOifAnomalies, xldv20pmS3cOAMLevel=xldv20pmS3cOAMLevel, xldv20pmD3hNeErroredSecondsPLCP=xldv20pmD3hNeErroredSecondsPLCP, xldv20pmThlNeErroredSecondsPLCP=xldv20pmThlNeErroredSecondsPLCP, xldv20pmImaLinkCurrentFeRxUnusableSecs=xldv20pmImaLinkCurrentFeRxUnusableSecs, xldv20pmAtmCurrentTable=xldv20pmAtmCurrentTable, xldv20pmD3cFeSas=xldv20pmD3cFeSas, xldv20pmS3hNeSeverelyErroredSeconds=xldv20pmS3hNeSeverelyErroredSeconds, xldv20pmTcSuspectFlag=xldv20pmTcSuspectFlag, xldv20pmAcHistEntrySize=xldv20pmAcHistEntrySize, xldv20pmImaLinkHistoryFeTxUnusableSecs=xldv20pmImaLinkHistoryFeTxUnusableSecs, xldv20pmAtmEndpointsTable=xldv20pmAtmEndpointsTable, xldv20pmAcIntervalType=xldv20pmAcIntervalType, xldv20pmD3cFeCodeViolationsCP=xldv20pmD3cFeCodeViolationsCP, xldv20pmImaGroupHistoryPeriodEndTime=xldv20pmImaGroupHistoryPeriodEndTime, xldv20pmS3HistoryTable=xldv20pmS3HistoryTable, xldv20pmS1hFeSeverelyErroredSeconds=xldv20pmS1hFeSeverelyErroredSeconds, xldv20pmD3cFeSeverelyErroredSecondsPLCP=xldv20pmD3cFeSeverelyErroredSecondsPLCP, xldv20pmChNeErroredSeconds=xldv20pmChNeErroredSeconds, xldv20pmS3hIntervalType=xldv20pmS3hIntervalType, xldv20pmS3cNeSeverelyErroredSeconds=xldv20pmS3cNeSeverelyErroredSeconds, xldv20pmImaLinkCurrentHistEntrySize=xldv20pmImaLinkCurrentHistEntrySize, xldv20pmImaLinkHistoryPeriodEndTime=xldv20pmImaLinkHistoryPeriodEndTime, xldv20pmS3cNeSeverelyErroredFrameSeconds=xldv20pmS3cNeSeverelyErroredFrameSeconds, xldv20pmTvPmCounter=xldv20pmTvPmCounter, xldv20pmAhIntervalType=xldv20pmAhIntervalType, xldv20pmAcElapsedTime=xldv20pmAcElapsedTime, xldv20pmTrAtmObjectCreation=xldv20pmTrAtmObjectCreation, Xldv20pmConnectionIndexType=Xldv20pmConnectionIndexType, xldv20pmD3cNeErroredSecondsPLCP=xldv20pmD3cNeErroredSecondsPLCP, xldv20pmS1cNeErroredSeconds=xldv20pmS1cNeErroredSeconds, xldv20pmAcoEndpointType=xldv20pmAcoEndpointType, xldv20pmS1cNeLosSeconds=xldv20pmS1cNeLosSeconds, xldv20pmThresholding=xldv20pmThresholding, xldv20pmAcoIntervalType=xldv20pmAcoIntervalType, xldv20pmPerformanceManagementControl=xldv20pmPerformanceManagementControl, xldv20pmImaLinkCurrentTable=xldv20pmImaLinkCurrentTable, xldv20pmD3hFeCodeViolationsPLCP=xldv20pmD3hFeCodeViolationsPLCP, xldv20pmAcoConnectionIndexType=xldv20pmAcoConnectionIndexType, xldv20pmD3cNeCodeViolationsPLCP=xldv20pmD3cNeCodeViolationsPLCP, Xldv20pmIntervalType=Xldv20pmIntervalType, xldv20pmChNeSeverelyErroredSeconds=xldv20pmChNeSeverelyErroredSeconds, xldv20pmS1cFeErroredSeconds=xldv20pmS1cFeErroredSeconds, xldv20pmS1cFeBackgroundBlockErrors=xldv20pmS1cFeBackgroundBlockErrors, xldv20pmImaGroupHistoryUnavailSecs=xldv20pmImaGroupHistoryUnavailSecs, xldv20pmAhTransmittedUserCells=xldv20pmAhTransmittedUserCells, xldv20pmImaLinkCurrentFeTxUnusableSecs=xldv20pmImaLinkCurrentFeTxUnusableSecs, xldv20pmImaGroupCurrentTable=xldv20pmImaGroupCurrentTable, xldv20pmTcThresholdLimitIndex=xldv20pmTcThresholdLimitIndex, Xldv20pmAtmCounterType=Xldv20pmAtmCounterType, xldv20pmD3cNeSeverelyErroredSecondsPLCP=xldv20pmD3cNeSeverelyErroredSecondsPLCP, xldv20pmD3cNeUnavailableSecondsPLCP=xldv20pmD3cNeUnavailableSecondsPLCP, xldv20pmS3hNeUnavailableSeconds=xldv20pmS3hNeUnavailableSeconds, xldv20pmAtmThresholdLimitTable=xldv20pmAtmThresholdLimitTable, xldv20pmImaGroupCurrentSuspectFlag=xldv20pmImaGroupCurrentSuspectFlag, xldv20pmD3cNeUnavailableSeconds=xldv20pmD3cNeUnavailableSeconds, xldv20pmImaLinkCurrentNeRxUnusableSecs=xldv20pmImaLinkCurrentNeRxUnusableSecs, xldv20pmTcNrHistEntriesAvailable=xldv20pmTcNrHistEntriesAvailable, xldv20pmImaGroupCurrentNeNumFailures=xldv20pmImaGroupCurrentNeNumFailures, xldv20pmTvPmType=xldv20pmTvPmType, xldv20pmAcLostUserCells=xldv20pmAcLostUserCells, xldv20pmCcIntervalType=xldv20pmCcIntervalType, xldv20pmThlThresholdLimitIndex=xldv20pmThlThresholdLimitIndex, xldv20pmS1hNeSeverelyErroredSeconds=xldv20pmS1hNeSeverelyErroredSeconds, xldv20pmAoBlockSize=xldv20pmAoBlockSize, xldv20pmThlImaLinkNeRxUnusableSecs=xldv20pmThlImaLinkNeRxUnusableSecs, Xldv20pmEndpointType=Xldv20pmEndpointType, xldv20pmTrAtmThresholdCrossingAlert=xldv20pmTrAtmThresholdCrossingAlert, xldv20pmAtmHistoryTable=xldv20pmAtmHistoryTable, xldv20pmS1cFeSeverelyErroredSeconds=xldv20pmS1cFeSeverelyErroredSeconds, xldv20pmAhSuspectFlag=xldv20pmAhSuspectFlag, xldv20pmCoIfIndex=xldv20pmCoIfIndex, xldv20pmChIntervalType=xldv20pmChIntervalType, xldv20pmS1hNeErroredSeconds=xldv20pmS1hNeErroredSeconds, xldv20pmS1hSuspectFlag=xldv20pmS1hSuspectFlag, xldv20pmD3hNeErroredSecondsCP=xldv20pmD3hNeErroredSecondsCP, xldv20pmCcHistEntrySize=xldv20pmCcHistEntrySize, xldv20pmChOAMLevel=xldv20pmChOAMLevel, xldv20pmAcoFlowDirection=xldv20pmAcoFlowDirection, xldv20pmThIntervalType=xldv20pmThIntervalType)
