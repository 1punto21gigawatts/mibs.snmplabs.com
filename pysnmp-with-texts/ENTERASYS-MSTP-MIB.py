#
# PySNMP MIB module ENTERASYS-MSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-MSTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:04:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, IpAddress, Integer32, iso, MibIdentifier, Unsigned32, TimeTicks, ObjectIdentity, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "IpAddress", "Integer32", "iso", "MibIdentifier", "Unsigned32", "TimeTicks", "ObjectIdentity", "Counter32", "Bits")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
etsysMstpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28))
etsysMstpMIB.setRevisions(('2006-11-09 16:40', '2006-10-04 19:54', '2004-07-14 16:25', '2004-04-08 19:59', '2004-02-12 21:38', '2003-01-21 14:27', '2002-10-11 17:05',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysMstpMIB.setRevisionsDescriptions(('Renamed the etsysMstpPortExtnErrorConditions object as the etsysMstpPortExtnNonForwardingReason object, and revamped its definition.', 'Added the etsysMstpPortExtnTable, containing objects for configuring the Loop Protect feature on MSTIs as well as summarizing Spanning Tree error conditions on MSTIs. Added the etsysMstpLoopProtectEvent notification.', 'Added the etsysMstpMaxConfigurableMsts object.', 'Added the etsysMstpMstiExtnTable and etsysMstpMstiExtnBackupRootEnable objects.', 'Added etsysMstpAutoEdgeDetection and etsysMstpBridgeHelloTimeMode objects.', 'Changed syntax of etsysMstpConfigDigest object from SnmpAdminString to HexString. Added applicable range limitations and default values to read-write objects. Enhanced various object descriptions for clarity.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: etsysMstpMIB.setLastUpdated('200611091640Z')
if mibBuilder.loadTexts: etsysMstpMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysMstpMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysMstpMIB.setDescription("This mib module defines a portion of the SNMP enterprise MIBs under Enterasys Networks' enterprise OID pertaining to the Multiple Spanning Tree Protocol defined by IEEE 802.1s. This MIB is used to manage devices which support MSTP. It will be supported until a standard IEEE 802.1s MIB has been defined by the IETF.")
etsysMstpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1))
class HexString(TextualConvention, OctetString):
    description = 'An OCTET-STRING with a suitable display hint.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1024)

etsysMstpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1))
etsysMstpBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2))
etsysMstpPort = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3))
etsysMstpExtn = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4))
etsysMstpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 0))
etsysMstpMaxMstId = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 1), Unsigned32().clone(4094)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpMaxMstId.setReference('IEEE 802.1s clause 12.8.1.2.2')
if mibBuilder.loadTexts: etsysMstpMaxMstId.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMaxMstId.setDescription('The maximum Multiple Spanning Tree (MST) instance ID that this device supports.')
etsysMstpMaxSupportedMsts = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 2), Unsigned32().clone(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpMaxSupportedMsts.setReference('IEEE 802.1s clause 5.1 item j')
if mibBuilder.loadTexts: etsysMstpMaxSupportedMsts.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMaxSupportedMsts.setDescription('The maximum number of Multiple Spanning Tree instances that this device supports. The value of this object is not affected by the value of etsysMstpMaxConfigurableMsts. This object represents the maximum value that etsysMstpMaxConfigurableMsts can be set to.')
etsysMstpNumMsts = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpNumMsts.setReference('IEEE 802.1s clause 12.12.1')
if mibBuilder.loadTexts: etsysMstpNumMsts.setStatus('current')
if mibBuilder.loadTexts: etsysMstpNumMsts.setDescription('The current number of Multiple Spanning Tree instances that are configured in this device.')
etsysMstpMstiTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 4), )
if mibBuilder.loadTexts: etsysMstpMstiTable.setReference('IEEE 802.1s clause 12.12.1')
if mibBuilder.loadTexts: etsysMstpMstiTable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMstiTable.setDescription('The list of configured Multiple Spanning Tree instances.')
etsysMstpMstiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 4, 1), ).setIndexNames((0, "ENTERASYS-MSTP-MIB", "etsysMstpMstId"))
if mibBuilder.loadTexts: etsysMstpMstiEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMstiEntry.setDescription('A table entry representing a Multiple Spanning Tree instance.')
etsysMstpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: etsysMstpMstId.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMstId.setDescription('The unique ID of this Multiple Spanning Tree instance. This value SHALL be between 1 and etsysMstpMaxMstId inclusively.')
etsysMstpMstiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: etsysMstpMstiStatus.setReference('RFC2579 (Textual Conventions for SMIv2)')
if mibBuilder.loadTexts: etsysMstpMstiStatus.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMstiStatus.setDescription('This object allows for the dynamic creation and deletion of the corresponding Spanning Tree instance. Creation and activation of a conceptual row in this table MUST be performed as a single operation -- by setting this object to createAndGo(4) -- and suspension of an active conceptual row is not supported. Consequently, setting this object to createAndWait(5) or notInService(2) SHALL fail. Setting this object to destroy(6) SHALL fail if the corresponding Spanning Tree instance has one or more FIDs allocated to it in the FID to MSTID Allocation Table (etsysMstpAllocTable). Refer to the RowStatus convention for further details on the behavior of this object.')
etsysMstpAllocTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 5), )
if mibBuilder.loadTexts: etsysMstpAllocTable.setReference('IEEE 802.1s clause 12.12.2')
if mibBuilder.loadTexts: etsysMstpAllocTable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpAllocTable.setDescription('A table that contains the mapping of Filtering Databases to Spanning Tree instances.')
etsysMstpAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 5, 1), ).setIndexNames((0, "ENTERASYS-MSTP-MIB", "etsysMstpFdbId"))
if mibBuilder.loadTexts: etsysMstpAllocEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMstpAllocEntry.setDescription('The mapping of a particular Filtering Database to a Spanning Tree instance.')
etsysMstpFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: etsysMstpFdbId.setStatus('current')
if mibBuilder.loadTexts: etsysMstpFdbId.setDescription('The unique ID of the Filtering Database to which the information in this table entry applies. This value SHALL be between 1 and dot1qMaxVlanId inclusively.')
etsysMstpMstIdOfFdb = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpMstIdOfFdb.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMstIdOfFdb.setDescription('The ID of the Spanning Tree instance to which the corresponding FID is mapped. This ID must either be 0 (i.e., the CIST) or be a value which is present in the MSTI Table (etsysMstpMstiTable).')
etsysMstpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 6), )
if mibBuilder.loadTexts: etsysMstpConfigTable.setReference('IEEE 802.1s clause 12.12.3')
if mibBuilder.loadTexts: etsysMstpConfigTable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpConfigTable.setDescription('A table that contains the mapping of VLANs to Spanning Tree instances. This table is a read-only table, its elements derived from the VID to FID allocation table and the FID to MSTID allocation table.')
etsysMstpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 6, 1), ).setIndexNames((0, "ENTERASYS-MSTP-MIB", "etsysMstpVlanId"))
if mibBuilder.loadTexts: etsysMstpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMstpConfigEntry.setDescription('The mapping of a particular VLAN to a Spanning Tree instance.')
etsysMstpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: etsysMstpVlanId.setStatus('current')
if mibBuilder.loadTexts: etsysMstpVlanId.setDescription('The unique ID of the VLAN to which the information in this table entry applies. This value SHALL be between 1 and dot1qMaxVlanId inclusively.')
etsysMstpMstIdOfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpMstIdOfVlan.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMstIdOfVlan.setDescription('The ID of the Spanning Tree instance to which the corresponding VLAN is mapped.')
etsysMstpFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpFormatSelector.setReference('IEEE 802.1s clause 13.7')
if mibBuilder.loadTexts: etsysMstpFormatSelector.setStatus('current')
if mibBuilder.loadTexts: etsysMstpFormatSelector.setDescription('The format selector value of the Configuration Identifier. This has a value of 0 to indicate the format specified in the IEEE 802.1s standard.')
etsysMstpConfigName = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpConfigName.setReference('IEEE 802.1s clause 13.7')
if mibBuilder.loadTexts: etsysMstpConfigName.setStatus('current')
if mibBuilder.loadTexts: etsysMstpConfigName.setDescription('The configuration name of the MST region to which this bridge belongs. The default value is the Bridge Address of this bridge, as a text string using the Hexadecimal Representation defined in IEEE Std. 802.')
etsysMstpRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpRevisionLevel.setReference('IEEE 802.1s clause 13.7')
if mibBuilder.loadTexts: etsysMstpRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: etsysMstpRevisionLevel.setDescription('The revision level of the MST region to which this bridge belongs.')
etsysMstpConfigDigest = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 10), HexString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpConfigDigest.setReference('IEEE 802.1s clause 13.7')
if mibBuilder.loadTexts: etsysMstpConfigDigest.setStatus('current')
if mibBuilder.loadTexts: etsysMstpConfigDigest.setDescription('The Configuration Digest derived from the MST Configuration Table.')
etsysMstpMaxConfigurableMsts = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 1, 11), Unsigned32().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpMaxConfigurableMsts.setReference('IEEE 802.1s clause 5.1 item j')
if mibBuilder.loadTexts: etsysMstpMaxConfigurableMsts.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMaxConfigurableMsts.setDescription('The maximum number of Multiple Spanning Tree instances that can configured on this entity. This object cannot be set to a value greater than the value of etsysMstpMaxSupportedMsts, and cannot be set to a value that is less then the number of currently configured spanning tree instances.')
etsysMstpCistRegionalRootIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 1), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpCistRegionalRootIdentifier.setStatus('current')
if mibBuilder.loadTexts: etsysMstpCistRegionalRootIdentifier.setDescription('The Bridge Identifier of the current CIST Regional Root.')
etsysMstpCistPathCost = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpCistPathCost.setStatus('current')
if mibBuilder.loadTexts: etsysMstpCistPathCost.setDescription('The CIST path cost from this bridge to the CIST Regional Root.')
etsysMstpMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMaxHopCount.setDescription('The maximum number of hops that the information for a particular Spanning Tree instance may traverse (via relay of BPDUs within the applicable MST region) before being discarded. This value is used only if this bridge is the CIST Regional Root and/or the MSTI Regional Root for one or more Multiple Spanning Tree instances.')
etsysMstpBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 4), )
if mibBuilder.loadTexts: etsysMstpBridgeTable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpBridgeTable.setDescription('A table that contains bridge protocol parameter values associated with each configured Multiple Spanning Tree instance.')
etsysMstpBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 4, 1), ).setIndexNames((0, "ENTERASYS-MSTP-MIB", "etsysMstpMstId"))
if mibBuilder.loadTexts: etsysMstpBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMstpBridgeEntry.setDescription('A list of information maintained by each Multiple Spanning Tree instance configured on this bridge.')
etsysMstpBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpBridgePriority.setReference('IEEE 802.1s clause 12.8.1')
if mibBuilder.loadTexts: etsysMstpBridgePriority.setStatus('current')
if mibBuilder.loadTexts: etsysMstpBridgePriority.setDescription('The value of the priority component of the Bridge ID for the corresponding Spanning Tree instance. Specifically, the four most significant bits of the most significant octet of the (8 octet long) Bridge ID followed by 12 zero bits. Note that this object may only be set to a 16-bit value in which the least significant 12 bits are zero, i.e., permissible values are 0-61440, in steps of 4096.')
etsysMstpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpTimeSinceTopologyChange.setReference('IEEE 802.1s clause 12.8.1')
if mibBuilder.loadTexts: etsysMstpTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: etsysMstpTimeSinceTopologyChange.setDescription('The elapsed time, in units of hundredths of a second, since the last time a topology change was detected by the corresponding Spanning Tree instance (specifically, the elapsed time since the tcWhile timer for any port was non-zero).')
etsysMstpTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpTopologyChangeCount.setReference('IEEE 802.1s clause 12.8.1')
if mibBuilder.loadTexts: etsysMstpTopologyChangeCount.setStatus('current')
if mibBuilder.loadTexts: etsysMstpTopologyChangeCount.setDescription('The total number of topology changes detected by the corresponding Spanning Tree instance since the management entity was last reset or initialized (specifically, the count of times that the tcWhile timer for any port has been non-zero).')
etsysMstpTopologyChangeInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpTopologyChangeInProgress.setReference('IEEE 802.1s clause 12.8.1')
if mibBuilder.loadTexts: etsysMstpTopologyChangeInProgress.setStatus('current')
if mibBuilder.loadTexts: etsysMstpTopologyChangeInProgress.setDescription('True(1) if the tcWhile timer is non-zero for any port for the corresponding Spanning Tree instance, false(2) otherwise.')
etsysMstpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpDesignatedRoot.setReference('IEEE 802.1s clause 12.8.1')
if mibBuilder.loadTexts: etsysMstpDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: etsysMstpDesignatedRoot.setDescription('The bridge identifier of the root for the corresponding Spanning Tree instance.')
etsysMstpRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpRootPathCost.setReference('IEEE 802.1s clause 12.8.1')
if mibBuilder.loadTexts: etsysMstpRootPathCost.setStatus('current')
if mibBuilder.loadTexts: etsysMstpRootPathCost.setDescription('The cost of the path to the root of the corresponding Spanning Tree instance as seen from this bridge.')
etsysMstpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpRootPort.setReference('IEEE 802.1s clause 12.8.1')
if mibBuilder.loadTexts: etsysMstpRootPort.setStatus('current')
if mibBuilder.loadTexts: etsysMstpRootPort.setDescription('The port number of the port which offers the lowest cost path from this bridge to the root bridge for the corresponding Spanning Tree instance.')
etsysMstpPortTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1), )
if mibBuilder.loadTexts: etsysMstpPortTable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortTable.setDescription('A table that contains port parameter values for each configured Multiple Spanning Tree instance.')
etsysMstpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1), ).setIndexNames((0, "ENTERASYS-MSTP-MIB", "etsysMstpMstId"), (0, "ENTERASYS-MSTP-MIB", "etsysMstpPortNumber"))
if mibBuilder.loadTexts: etsysMstpPortEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortEntry.setDescription('A list of information maintained for every port by each Multiple Spanning Tree instance configured on this bridge.')
etsysMstpPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: etsysMstpPortNumber.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortNumber.setDescription('The port number of the port for which this entry contains Multiple Spanning Tree Protocol management information.')
etsysMstpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpPortPriority.setReference('IEEE 802.1s clause 12.8.2')
if mibBuilder.loadTexts: etsysMstpPortPriority.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID for the corresponding Spanning Tree instance. Permissible values are 0-240, in steps of 16.')
etsysMstpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpPortState.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortState.setDescription("The port's current state in the corresponding Spanning Tree instance as defined by application of the Multiple Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state. For ports which are administratively disabled (see dot1dStpPortEnable), this object will have a value of disabled(1).")
etsysMstpPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpPortAdminPathCost.setReference('IEEE 802.1s clause 12.8.2, IEEE 802.1t-2001 Table 8-5')
if mibBuilder.loadTexts: etsysMstpPortAdminPathCost.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortAdminPathCost.setDescription("The administratively assigned value for the contribution of this port to the path cost of paths towards the root of the corresponding Spanning Tree instance. Writing a value of '0' assigns the automatically calculated default Path Cost value to the port for this instance. If the default Path Cost is being used, this object returns '0' when read. This complements the object etsysMstpPortOperPathCost, which returns the operational value of the path cost.")
etsysMstpPortOperPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpPortOperPathCost.setReference('IEEE 802.1s clause 12.8.2, IEEE 802.1t-2001 Table 8-5')
if mibBuilder.loadTexts: etsysMstpPortOperPathCost.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortOperPathCost.setDescription('The operational value for the contribution of this port to the path cost of paths towards the root of the corresponding Spanning Tree instance.')
etsysMstpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpPortDesignatedRoot.setReference('IEEE 802.1s clause 12.8.2')
if mibBuilder.loadTexts: etsysMstpPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root of the corresponding Spanning Tree in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
etsysMstpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpPortDesignatedCost.setReference('IEEE 802.1s clause 12.8.2')
if mibBuilder.loadTexts: etsysMstpPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port, for the corresponding Spanning Tree instance. This value is compared to the Root Path Cost field in received bridge PDUs.')
etsysMstpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpPortDesignatedBridge.setReference('IEEE 802.1s clause 12.8.2')
if mibBuilder.loadTexts: etsysMstpPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment on the corresponding Spanning Tree instance.")
etsysMstpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpPortDesignatedPort.setReference('IEEE 802.1s clause 12.8.2')
if mibBuilder.loadTexts: etsysMstpPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment on the corresponding Spanning Tree instance.")
etsysMstpPortRoleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backUp", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpPortRoleValue.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortRoleValue.setDescription("Indicates this port's role on the corresponding Spanning Tree instance. disabled -- this port has no role on this MST instance. root -- this port has the role of root port on this MST instance. designated -- this port has the role of designated port on this MST instance. alternate -- this port has the role of alternate port on this MST instance. backUp -- this port has the role of backup port on this MST instance. master -- this port has the role of master port on this MST instance.")
etsysMstpGlobalPortTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 2), )
if mibBuilder.loadTexts: etsysMstpGlobalPortTable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpGlobalPortTable.setDescription('A table that contains port parameter values which apply to all Spanning Tree instances.')
etsysMstpGlobalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 2, 1), ).setIndexNames((0, "ENTERASYS-MSTP-MIB", "etsysMstpPortNumber"))
if mibBuilder.loadTexts: etsysMstpGlobalPortEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMstpGlobalPortEntry.setDescription('A list of information maintained for every port which applies to all Spanning Tree instances.')
etsysMstpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpHelloTime.setReference('IEEE 802.1s clause 12.8.2')
if mibBuilder.loadTexts: etsysMstpHelloTime.setStatus('current')
if mibBuilder.loadTexts: etsysMstpHelloTime.setDescription('The amount of time, in hundredths of a second, between the transmission of Configuration bridge PDUs on this port when it has the role of designated port for any Spanning Tree instance. This is the actual value that this bridge is currently using.')
etsysMstpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpPortHelloTime.setReference('IEEE 802.1s clause 12.8.2')
if mibBuilder.loadTexts: etsysMstpPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortHelloTime.setDescription("The value, in hundredths of a second, that all bridges attached to this port's LAN segment use for HelloTime when this bridge is acting as the CIST root.")
etsysMstpBoundaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpBoundaryPort.setStatus('current')
if mibBuilder.loadTexts: etsysMstpBoundaryPort.setDescription('True(1) if this port is attached to a LAN which is in a different MST Region than this bridge, false(2) otherwise.')
etsysMstpAutoEdgeDetection = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpAutoEdgeDetection.setReference('IEEE 802.1D-D4 Section 17.25.')
if mibBuilder.loadTexts: etsysMstpAutoEdgeDetection.setStatus('current')
if mibBuilder.loadTexts: etsysMstpAutoEdgeDetection.setDescription('The enabled/disabled status of automatic edge detection.')
etsysMstpBridgeHelloTimeMode = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 2), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpBridgeHelloTimeMode.setReference('IEEE 802.1s-2002 Section 13.22(e) and 12.8.2.1.3(s).')
if mibBuilder.loadTexts: etsysMstpBridgeHelloTimeMode.setStatus('current')
if mibBuilder.loadTexts: etsysMstpBridgeHelloTimeMode.setDescription('The enabled/disabled status of the legacy bridge hello mode of operation. When enabled, and this bridge is acting as the root bridge, dot1dStpBridgeHelloTime is used. When disabled, and this bridge is acting as the root bridge, etsysMstpPortHelloTime is used.')
etsysMstpMstiExtnTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 3), )
if mibBuilder.loadTexts: etsysMstpMstiExtnTable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMstiExtnTable.setDescription('Extensions to the table of Multiple Spanning Tree instances.')
etsysMstpMstiExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 3, 1), )
etsysMstpMstiEntry.registerAugmentions(("ENTERASYS-MSTP-MIB", "etsysMstpMstiExtnEntry"))
etsysMstpMstiExtnEntry.setIndexNames(*etsysMstpMstiEntry.getIndexNames())
if mibBuilder.loadTexts: etsysMstpMstiExtnEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMstiExtnEntry.setDescription('A list of extensions to the information maintained for each Multiple Spanning Tree instance.')
etsysMstpMstiExtnBackupRootEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 3, 1, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpMstiExtnBackupRootEnable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMstiExtnBackupRootEnable.setDescription('The enabled/disabled status of the Backup Root functionality on this MSTI.')
etsysMstpPortExtnTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 4), )
if mibBuilder.loadTexts: etsysMstpPortExtnTable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortExtnTable.setDescription('Extensions to the table that contains port parameter values for each configured Multiple Spanning Tree instance.')
etsysMstpPortExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 4, 1), )
etsysMstpPortEntry.registerAugmentions(("ENTERASYS-MSTP-MIB", "etsysMstpPortExtnEntry"))
etsysMstpPortExtnEntry.setIndexNames(*etsysMstpPortEntry.getIndexNames())
if mibBuilder.loadTexts: etsysMstpPortExtnEntry.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortExtnEntry.setDescription('A list of extensions to the information maintained for every port by each Multiple Spanning Tree instance configured on this bridge.')
etsysMstpPortExtnNonForwardingReason = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("disputed", 2), ("spanGuardLocked", 3), ("loopProtectEvent", 4), ("loopProtectAdvisory", 5), ("loopbackDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysMstpPortExtnNonForwardingReason.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortExtnNonForwardingReason.setDescription('Indicates the reason why this port has been placed in a non-forwarding state on this MSTI (other than as a result of normal Spanning Tree protocol operation). none(1) - the port has not been placed in a non-forwarding state due to any exceptional condition. disputed(2) - the port has been placed in listening state because it has a designated role and an inferior designated BPDU has been received. spanGuardLocked(3) - the port has been placed in blocking state because it is configured as an admin edge port and a BPDU has been received. loopProtectEvent(4) - the port has been placed in listening or blocking state because a BPDU timeout has occurred and the port is awaiting reception of a type 2 BPDU on a point-to-point link. loopProtectAdvisory(5) - the port has been placed in listening state because a BPDU timeout has occurred (as with a Loop Protect event), but this condition may be normal because the link partner does not support the Loop Protect feature. loopbackDetected(6) - the port has been placed in blocking state because a loopback condition has been detected.')
etsysMstpPortExtnLoopProtectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 4, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpPortExtnLoopProtectEnable.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortExtnLoopProtectEnable.setDescription('The enabled/disabled status of the Loop Protect functionality for this port on this MSTI.')
etsysMstpPortExtnLoopProtectBlocking = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 4, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysMstpPortExtnLoopProtectBlocking.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortExtnLoopProtectBlocking.setDescription('The state of this port on this MSTI with respect to the Loop Protect feature. true(1) - this port is being held in the blocking state by the Loop Protect feature. false(2) - this port is not being held in the blocking state by the Loop Protect feature. When this object has a value of true(1) setting its value to false(2) will cause the Loop Protect feature to no longer hold the port in the blocking state. All other set operations on this object are undefined and MUST NOT have any effect.')
etsysMstpLoopProtectEvent = NotificationType((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 1, 0, 1)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpMstId"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortNumber"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortExtnLoopProtectBlocking"))
if mibBuilder.loadTexts: etsysMstpLoopProtectEvent.setStatus('current')
if mibBuilder.loadTexts: etsysMstpLoopProtectEvent.setDescription('This notification indicates that a Loop Protect event has occurred on a bridge port on an MSTI.')
etsysMstpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2))
etsysMstpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1))
etsysMstpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 2))
etsysMstpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 1)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpMaxMstId"), ("ENTERASYS-MSTP-MIB", "etsysMstpMaxSupportedMsts"), ("ENTERASYS-MSTP-MIB", "etsysMstpNumMsts"), ("ENTERASYS-MSTP-MIB", "etsysMstpMstiStatus"), ("ENTERASYS-MSTP-MIB", "etsysMstpMstIdOfFdb"), ("ENTERASYS-MSTP-MIB", "etsysMstpMstIdOfVlan"), ("ENTERASYS-MSTP-MIB", "etsysMstpFormatSelector"), ("ENTERASYS-MSTP-MIB", "etsysMstpConfigName"), ("ENTERASYS-MSTP-MIB", "etsysMstpRevisionLevel"), ("ENTERASYS-MSTP-MIB", "etsysMstpConfigDigest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpConfigGroup = etsysMstpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpConfigGroup.setDescription('A collection of objects providing configuration support for the Multiple Spanning Tree Protocol.')
etsysMstpBridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 2)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpCistRegionalRootIdentifier"), ("ENTERASYS-MSTP-MIB", "etsysMstpCistPathCost"), ("ENTERASYS-MSTP-MIB", "etsysMstpMaxHopCount"), ("ENTERASYS-MSTP-MIB", "etsysMstpBridgePriority"), ("ENTERASYS-MSTP-MIB", "etsysMstpTimeSinceTopologyChange"), ("ENTERASYS-MSTP-MIB", "etsysMstpTopologyChangeCount"), ("ENTERASYS-MSTP-MIB", "etsysMstpTopologyChangeInProgress"), ("ENTERASYS-MSTP-MIB", "etsysMstpDesignatedRoot"), ("ENTERASYS-MSTP-MIB", "etsysMstpRootPathCost"), ("ENTERASYS-MSTP-MIB", "etsysMstpRootPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpBridgeGroup = etsysMstpBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpBridgeGroup.setDescription('A collection of objects providing bridge-level support for the Multiple Spanning Tree Protocol.')
etsysMstpPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 3)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpPortPriority"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortState"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortAdminPathCost"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortOperPathCost"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortDesignatedRoot"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortDesignatedCost"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortDesignatedBridge"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortDesignatedPort"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortRoleValue"), ("ENTERASYS-MSTP-MIB", "etsysMstpHelloTime"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortHelloTime"), ("ENTERASYS-MSTP-MIB", "etsysMstpBoundaryPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpPortGroup = etsysMstpPortGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpPortGroup.setDescription('A collection of objects providing port-level support for the Multiple Spanning Tree Protocol.')
etsysMstpAutoEdgeDetectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 4)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpAutoEdgeDetection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpAutoEdgeDetectGroup = etsysMstpAutoEdgeDetectGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpAutoEdgeDetectGroup.setDescription('An object for controlling Auto Edge Detection.')
etsysMstpBridgeHelloTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 5)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpBridgeHelloTimeMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpBridgeHelloTimeGroup = etsysMstpBridgeHelloTimeGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpBridgeHelloTimeGroup.setDescription('An object for modifying the Hello Time mode.')
etsysMstpBackupRootGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 6)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpMstiExtnBackupRootEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpBackupRootGroup = etsysMstpBackupRootGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpBackupRootGroup.setDescription('An object for enabling and disabling the Backup Root feature.')
etsysMstpMaxInstancesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 7)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpMaxConfigurableMsts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpMaxInstancesGroup = etsysMstpMaxInstancesGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpMaxInstancesGroup.setDescription('An object for restricting the number of configurable MSTIs.')
etsysMstpNonForwardingReasonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 8)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpPortExtnNonForwardingReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpNonForwardingReasonGroup = etsysMstpNonForwardingReasonGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpNonForwardingReasonGroup.setDescription('An object that indicates the reason for an exceptional non-forwarding condition per port/MSTI.')
etsysMstpLoopProtectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 9)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpPortExtnLoopProtectEnable"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortExtnLoopProtectBlocking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpLoopProtectGroup = etsysMstpLoopProtectGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpLoopProtectGroup.setDescription('A collection of objects providing support for the Loop Protect feature.')
etsysMstpLoopProtectNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 1, 10)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpLoopProtectEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpLoopProtectNotificationGroup = etsysMstpLoopProtectNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: etsysMstpLoopProtectNotificationGroup.setDescription('The Loop Protect Event Notification for MSTIs.')
etsysMstpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 28, 2, 2, 1)).setObjects(("ENTERASYS-MSTP-MIB", "etsysMstpConfigGroup"), ("ENTERASYS-MSTP-MIB", "etsysMstpBridgeGroup"), ("ENTERASYS-MSTP-MIB", "etsysMstpPortGroup"), ("ENTERASYS-MSTP-MIB", "etsysMstpAutoEdgeDetectGroup"), ("ENTERASYS-MSTP-MIB", "etsysMstpBridgeHelloTimeGroup"), ("ENTERASYS-MSTP-MIB", "etsysMstpBackupRootGroup"), ("ENTERASYS-MSTP-MIB", "etsysMstpMaxInstancesGroup"), ("ENTERASYS-MSTP-MIB", "etsysMstpNonForwardingReasonGroup"), ("ENTERASYS-MSTP-MIB", "etsysMstpLoopProtectGroup"), ("ENTERASYS-MSTP-MIB", "etsysMstpLoopProtectNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysMstpCompliance = etsysMstpCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysMstpCompliance.setDescription('The compliance statement for devices that support the Multiple Spanning Tree Protocol.')
mibBuilder.exportSymbols("ENTERASYS-MSTP-MIB", etsysMstpBridgeGroup=etsysMstpBridgeGroup, etsysMstpMstiStatus=etsysMstpMstiStatus, etsysMstpPortOperPathCost=etsysMstpPortOperPathCost, etsysMstpCompliance=etsysMstpCompliance, etsysMstpTopologyChangeInProgress=etsysMstpTopologyChangeInProgress, etsysMstpPortState=etsysMstpPortState, etsysMstpLoopProtectNotificationGroup=etsysMstpLoopProtectNotificationGroup, etsysMstpPortPriority=etsysMstpPortPriority, PYSNMP_MODULE_ID=etsysMstpMIB, etsysMstpTopologyChangeCount=etsysMstpTopologyChangeCount, etsysMstpMstIdOfVlan=etsysMstpMstIdOfVlan, etsysMstpHelloTime=etsysMstpHelloTime, etsysMstpFormatSelector=etsysMstpFormatSelector, etsysMstpConfigName=etsysMstpConfigName, etsysMstpAllocTable=etsysMstpAllocTable, etsysMstpAutoEdgeDetectGroup=etsysMstpAutoEdgeDetectGroup, HexString=HexString, etsysMstpBoundaryPort=etsysMstpBoundaryPort, etsysMstpNotifications=etsysMstpNotifications, etsysMstpObjects=etsysMstpObjects, etsysMstpConfigTable=etsysMstpConfigTable, etsysMstpRootPort=etsysMstpRootPort, etsysMstpGroups=etsysMstpGroups, etsysMstpMstiExtnBackupRootEnable=etsysMstpMstiExtnBackupRootEnable, etsysMstpPortDesignatedBridge=etsysMstpPortDesignatedBridge, etsysMstpConfig=etsysMstpConfig, etsysMstpMaxInstancesGroup=etsysMstpMaxInstancesGroup, etsysMstpNonForwardingReasonGroup=etsysMstpNonForwardingReasonGroup, etsysMstpCompliances=etsysMstpCompliances, etsysMstpLoopProtectEvent=etsysMstpLoopProtectEvent, etsysMstpBridgeHelloTimeMode=etsysMstpBridgeHelloTimeMode, etsysMstpAutoEdgeDetection=etsysMstpAutoEdgeDetection, etsysMstpMaxMstId=etsysMstpMaxMstId, etsysMstpPort=etsysMstpPort, etsysMstpMIB=etsysMstpMIB, etsysMstpPortDesignatedPort=etsysMstpPortDesignatedPort, etsysMstpPortGroup=etsysMstpPortGroup, etsysMstpMstId=etsysMstpMstId, etsysMstpMaxConfigurableMsts=etsysMstpMaxConfigurableMsts, etsysMstpPortExtnTable=etsysMstpPortExtnTable, etsysMstpGlobalPortTable=etsysMstpGlobalPortTable, etsysMstpMstIdOfFdb=etsysMstpMstIdOfFdb, etsysMstpAllocEntry=etsysMstpAllocEntry, etsysMstpNumMsts=etsysMstpNumMsts, etsysMstpPortNumber=etsysMstpPortNumber, etsysMstpBridgeHelloTimeGroup=etsysMstpBridgeHelloTimeGroup, etsysMstpPortExtnNonForwardingReason=etsysMstpPortExtnNonForwardingReason, etsysMstpTimeSinceTopologyChange=etsysMstpTimeSinceTopologyChange, etsysMstpGlobalPortEntry=etsysMstpGlobalPortEntry, etsysMstpPortTable=etsysMstpPortTable, etsysMstpPortEntry=etsysMstpPortEntry, etsysMstpConfigEntry=etsysMstpConfigEntry, etsysMstpDesignatedRoot=etsysMstpDesignatedRoot, etsysMstpConfigGroup=etsysMstpConfigGroup, etsysMstpVlanId=etsysMstpVlanId, etsysMstpExtn=etsysMstpExtn, etsysMstpPortDesignatedRoot=etsysMstpPortDesignatedRoot, etsysMstpCistRegionalRootIdentifier=etsysMstpCistRegionalRootIdentifier, etsysMstpPortAdminPathCost=etsysMstpPortAdminPathCost, etsysMstpBackupRootGroup=etsysMstpBackupRootGroup, etsysMstpConfigDigest=etsysMstpConfigDigest, etsysMstpPortDesignatedCost=etsysMstpPortDesignatedCost, etsysMstpLoopProtectGroup=etsysMstpLoopProtectGroup, etsysMstpFdbId=etsysMstpFdbId, etsysMstpMstiEntry=etsysMstpMstiEntry, etsysMstpRevisionLevel=etsysMstpRevisionLevel, etsysMstpBridgeTable=etsysMstpBridgeTable, etsysMstpPortExtnEntry=etsysMstpPortExtnEntry, etsysMstpPortExtnLoopProtectBlocking=etsysMstpPortExtnLoopProtectBlocking, etsysMstpMaxHopCount=etsysMstpMaxHopCount, etsysMstpMaxSupportedMsts=etsysMstpMaxSupportedMsts, etsysMstpMstiExtnEntry=etsysMstpMstiExtnEntry, etsysMstpMstiExtnTable=etsysMstpMstiExtnTable, etsysMstpConformance=etsysMstpConformance, etsysMstpBridgePriority=etsysMstpBridgePriority, etsysMstpPortHelloTime=etsysMstpPortHelloTime, etsysMstpRootPathCost=etsysMstpRootPathCost, etsysMstpBridge=etsysMstpBridge, etsysMstpPortRoleValue=etsysMstpPortRoleValue, etsysMstpBridgeEntry=etsysMstpBridgeEntry, etsysMstpPortExtnLoopProtectEnable=etsysMstpPortExtnLoopProtectEnable, etsysMstpCistPathCost=etsysMstpCistPathCost, etsysMstpMstiTable=etsysMstpMstiTable)
