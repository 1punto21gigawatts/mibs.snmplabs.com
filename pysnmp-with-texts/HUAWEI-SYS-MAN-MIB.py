#
# PySNMP MIB module HUAWEI-SYS-MAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SYS-MAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
entPhysicalName, entPhysicalIndex, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName", "entPhysicalIndex", "PhysicalIndex")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Bits, Integer32, ObjectIdentity, MibIdentifier, NotificationType, Unsigned32, Counter32, Counter64, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Bits", "Integer32", "ObjectIdentity", "MibIdentifier", "NotificationType", "Unsigned32", "Counter32", "Counter64", "ModuleIdentity", "IpAddress")
DateAndTime, RowStatus, DisplayString, TextualConvention, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "DisplayString", "TextualConvention", "RowPointer")
huaweiSystemManMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19))
huaweiSystemManMIB.setRevisions(('2015-03-10 00:00', '2015-01-12 00:00', '2014-09-15 00:00', '2014-09-12 00:00', '2014-09-03 00:00', '2014-07-28 00:00', '2014-07-23 00:00', '2014-07-08 00:00', '2014-06-03 00:00', '2014-05-22 00:00', '2014-03-27 00:00', '2014-03-18 00:00', '2014-03-17 00:00', '2013-10-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: huaweiSystemManMIB.setRevisionsDescriptions(('Modified hwPatchFailReason for patch.', 'Add hwSysEvmTraps for evm.', 'Modified hwSysRebootReason. Add new reboot reason.', 'Modified hwSysCfgFileName description. hwSysCfgFileName is a string of 5 to 64 characters.', 'Add two hwIssuState: issuRollBackByUserCancel, issuRollBackByExceptional to hwIssuState.', 'Add one hwPatchErrorCode : patchMisoperation to hwPatchErrorType .', 'Modified hwPatchFailReason for patch.', ' Add hwSysWlanApUpgradeAssistantPackageNotMatchNotify for wlan ap upgrade.', 'Modified hwSystemBoardExlude/hwSystemBoardExludeClear to hwSystemBoardExclude/hwSystemBoardExcludeClear.', 'Add nodes for android upgrade.', 'Add nodes for wlan ap upgrade.', 'Add hwIssuPatchFile leaf into HwSysUpgradeEntry.', 'Add two trap nodes hwSystemBoardExlude and hwSystemBoardExludeClear to huaweiSystemManMIBNotifications Table.', 'Add two trap nodes hwSysPafChangeNotification and hwSysLicenseChangeNotification to huaweiSystemManMIBNotifications Table.',))
if mibBuilder.loadTexts: huaweiSystemManMIB.setLastUpdated('201503100000Z')
if mibBuilder.loadTexts: huaweiSystemManMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: huaweiSystemManMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: huaweiSystemManMIB.setDescription('The HUAWEI-SYS-MAN-MIB contains objects to manage the system. The module defines the information about system, such as system time, the current configuration file and system image file, system reload actions, and notifications. By querying the system time, configuration files and system image files, NMS can reboot the device in the specified time and the specified configuration and system image.')
class HWPatchErrorType(TextualConvention, Integer32):
    description = ' description. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 103, 104, 30, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 70, 71, 72, 73, 80, 81, 82, 90, 91, 92, 93, 95, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 173, 174, 176, 177, 178, 179, 180, 171, 172, 183, 185, 184, 186, 181, 182, 187, 188, 189, 190, 65535))
    namedValues = NamedValues(("initNoMemory", 1), ("initMemProtectFail", 2), ("fetchInputIsNull", 5), ("fetchFlagNotSame", 6), ("fetchProgVerInvalid", 7), ("fetchProgCrcInvalid", 8), ("fetchPatNoInvalid", 9), ("fetchTotalNumInvalid", 10), ("fetchUnitCrcInvalid", 11), ("fetchFuncNumTooMany", 12), ("fetchTypeInvalid", 13), ("fetchCommonAfterTemp", 14), ("fetchLengthNotSuited", 15), ("fetchCodeAddrNotSuited", 16), ("fetchDataAddrNotSuited", 17), ("fetchBaseAddrNotSuited", 18), ("fetchCodeLenOverflow", 19), ("fetchDataLenOverflow", 20), ("fetchOldAfterIndependent", 103), ("fetchUpdateDependency", 104), ("chgproChangeModeFailed", 30), ("activeNumInvalid", 40), ("activeHasBeenActived", 41), ("activeNotExist", 42), ("activeStateInvalid", 43), ("activeCodeAddrNotSuited", 44), ("activeDataAddrNotSuited", 45), ("activeBaseAddrNotSuited", 46), ("activeFormatUnknown", 47), ("runNumInvalid", 55), ("runHasInRunning", 56), ("runNotActive", 57), ("runIdleState", 58), ("runBadState", 59), ("deactNumInvalid", 70), ("deactRunOrActive", 71), ("deactRunningState", 72), ("deactBadState", 73), ("removeNumInvalid", 80), ("removeHasInIdle", 81), ("removeBadStatus", 82), ("caclcrcFileCrcInvalid", 90), ("caclcrcUnitCrcInvalid", 91), ("caclcrcOutputIsNull", 92), ("caclcrcNumInvalid", 93), ("caclcrcBadUnitCrc", 95), ("showNumInvalid", 100), ("showCodeLenIsZero", 101), ("showDataLenIsZero", 102), ("addlistBadParam", 105), ("addlistMemAllocFail", 106), ("depToListBadParamDep", 107), ("depToListBadParamList", 108), ("depToListMemFreeFail", 109), ("depToListAddItemFail", 110), ("listToDepBadParamDep", 111), ("listToDepBadParamList", 112), ("listToDepBadParamDepCount", 113), ("updateDepBadParam", 114), ("updateDepMemAllocFail", 115), ("updateDepDepToListFail", 116), ("updateDepToInterFail", 117), ("updateDepFromInterFail", 118), ("updateDepListToDepFail", 119), ("depToInterBadParam", 120), ("depToInterInvalidNo", 121), ("depToInterAddFail", 122), ("interToDepBadParam", 123), ("interToDepAppendFail", 124), ("appendListBadParam", 125), ("appendListAddFail", 126), ("indActiveBadParam", 127), ("indActiveAlreadyActive", 128), ("indActiveListFail", 129), ("indActiveListGenFail", 130), ("indActiveListAppendFail", 131), ("indActiveMemFreeFail", 132), ("indActiveDepIdle", 133), ("indActiveDepInvalid", 134), ("indActiveCodeAddrNotSuited", 135), ("indActiveDataAddrNotSuited", 136), ("indActiveBaseAddrNotSuited", 137), ("indActiveNotLoaded", 138), ("indActiveFuncFail", 139), ("indPatchFileNoInd", 140), ("indRunFail", 141), ("indDeactiveFail", 142), ("indRemoveFail", 143), ("indGetDepOfPara", 144), ("indGetDepOnPara", 145), ("indGetDepOnFail", 146), ("fetchBufferPara", 147), ("fetchBufferFail", 148), ("getStatePara", 149), ("indActiveAlreadyRunning", 150), ("indFreeListInputNull", 151), ("indFreeListMemFreeErr", 152), ("indBitTblToArrayInputNull", 153), ("indBitTblToArrayFreeFail", 154), ("indBitTblToArrayAllocFail", 155), ("indBitTblToArrayBitsetMore", 156), ("indBitTblToArrayBitsetLess", 157), ("listToDepBadParamAllocFail", 158), ("listToDepBadParamFreeFail", 159), ("indDeactiveFreeNull", 160), ("indRemoveFreeFail", 161), ("getInfoBufNull", 162), ("getInfoOutputNull", 163), ("getInfoFlagNotSame", 164), ("getInfoProgCrcInvalid", 165), ("getInfoFileCrcInvalid", 166), ("getInfoUnitCrcInvalid", 167), ("indPatchOpNotconfig", 169), ("normalOpNotconfig", 170), ("indDeactiveDeative", 173), ("indDeactiveRunning", 174), ("indDeactiveInvalid", 176), ("indRunDeactive", 177), ("indRunRunning", 178), ("indRunIdle", 179), ("indRunInvalid", 180), ("indActiveIdle", 171), ("indActiveInvalid", 172), ("indFetchActive", 183), ("indFetchRunning", 185), ("indFetchDeactive", 184), ("indFetchInvalid", 186), ("indRemoveIdle", 181), ("indRemoveInvalid", 182), ("patchFileNotExist", 187), ("patchRestoreFailed", 188), ("patchPackageError", 189), ("patchMisoperation", 190), ("unknown", 65535))

huaweiSystemManMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1))
hwSysClock = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 1))
hwSysLocalClock = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysLocalClock.setStatus('current')
if mibBuilder.loadTexts: hwSysLocalClock.setDescription('This object indicates the local time of the device.')
hwSysCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2))
hwSysCurTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2, 1), )
if mibBuilder.loadTexts: hwSysCurTable.setStatus('current')
if mibBuilder.loadTexts: hwSysCurTable.setDescription('The current status of system. A configuration file and an image file are used to describe the current status.')
hwSysCurEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2, 1, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysCurEntPhysicalIndex"))
if mibBuilder.loadTexts: hwSysCurEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysCurEntry.setDescription('An entry of hwSysCurTable. It is indexed by hwSysCurEntPhysicalIndex.')
hwSysCurEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwSysCurEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysCurEntPhysicalIndex.setDescription('The value of this object identifies the system index.')
hwSysCurCFGFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCurCFGFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysCurCFGFileIndex.setDescription('The value of this object identifies the index of the configuration file in the configuration file list. The value is referenced from hwSysCFGFileTable. The value ranges from 1 to 2147483647. ')
hwSysCurImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCurImageIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysCurImageIndex.setDescription('The value of this object identifies the index of the image file in the image file list. The value is referenced from hwSysImageTable. The value ranges from 1 to 2147483647. ')
hwSysCurPafFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCurPafFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysCurPafFileIndex.setDescription('The value of this object identifies the index of the PAF file in the PAF file list. ')
hwSysCurLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCurLicenseIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysCurLicenseIndex.setDescription('The value of this object identifies the index of the license file in the license file list. ')
hwSysCurPatchFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCurPatchFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysCurPatchFileIndex.setDescription('The value of this object identifies the index of the patch file in the patch file list. ')
hwSysCurVoiceFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCurVoiceFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysCurVoiceFileIndex.setDescription('The value of this object identifies the index of the configuration file in the configuration file list. The value is referenced from hwSysCFGFileTable. The value ranges from 1 to 2147483647. ')
hwSysReload = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3))
hwSysReloadSchedule = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysReloadSchedule.setStatus('obsolete')
if mibBuilder.loadTexts: hwSysReloadSchedule.setDescription('The value of this object identifies the record number used when the device restarts. The value ranges from 0 to 2147483647. After the system restarts, the value returns to 0. 0: initial value. 65536: main board schedule method. ')
hwSysReloadAction = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reloadUnavailable", 1), ("reloadOnSchedule", 2), ("reloadAtOnce", 3), ("reloadCancel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysReloadAction.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadAction.setDescription('The value of this object identifies restart types. 1: reloadUnavailable 2: reloadOnSchedule, indicating periodical restart 3: reloadAtOnce, indicating immediate restart without considering hwSysReloadScheduleTime 4: reloadCancel, indicating that all the planned restart activities are cancelled. If hwSysReloadSchedule is invalid or the rows that hwSysReloadScheduleEntry and hwSysReloadSchedule point to are not activated, all the restart activities are ignored and an inconsistent value is returned. When the restart of the system is complete or no restart activities exist, the value of this object is reloadUnavailable(1). ')
hwSysReloadScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3), )
if mibBuilder.loadTexts: hwSysReloadScheduleTable.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadScheduleTable.setDescription('A reload parameters table.')
hwSysReloadScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysReloadScheduleIndex"))
if mibBuilder.loadTexts: hwSysReloadScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadScheduleEntry.setDescription('Entry of hwSysReloadScheduleTable.')
hwSysReloadScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwSysReloadScheduleIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadScheduleIndex.setDescription('The value of this object identifies the index of the instance. The value ranges from 0 to 2147483647.')
hwSysReloadEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 2), PhysicalIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadEntity.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadEntity.setDescription('This object indicates the index of the restarting entity. The value is referred to from entPhysicalTable. 1. When get/get-next, 1 means active main board, 2 means slave main board, 65535 means other board. 2. When set, 2 means slave main board, other values mean active main board. ')
hwSysReloadCfgFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadCfgFile.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadCfgFile.setDescription('The value of this object identifies the configuration file used after the restart. The value is limited by hwSysCFGFileTable. The value ranges from 0 to 2147483647. The default value is 0, which means the configuration file remains unchanged. ')
hwSysReloadImage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadImage.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadImage.setDescription('The value of this object identifies the image file used after the restart. The value is limited by hwSysImageTable. The value ranges from 1 to 2147483647. ')
hwSysReloadReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadReason.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadReason.setDescription('This object indicates the cause of the restart. The value is a string of 0 to 255 characters. After the system restarts, the character string is deleted. ')
hwSysReloadScheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 6), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadScheduleTime.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadScheduleTime.setDescription('This object indicates the time of the restart. The only valid value of this object is an 8-byte string which indicates the local time of the switch. The maximum scheduled time is 30 days from the current system clock time. If the value set is earlier than the value of hwSysLocalClock or beyond the maximum scheduled time limit, a bad value error occurred. The value of all-zero octet strings indicates system restart at once if the reload action is reloadOnSchedule(1). ')
hwSysReloadRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadRowStatus.setDescription("If one of values of hwSysReloadEntity, hwSysReloadCfgFile and hwSysReloadImage is invalid, the value of hwSysReloadRowStatus cannot be set to 'active'. A valid entry means the specified element is available in the current system. Reload an entity indexed by hwSysReloadEntity with the startup configuration file and the image may be not allowed. Herein the entry is invalid. ")
hwSysReloadPafFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadPafFile.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadPafFile.setDescription('The value of this object identifies the PAF file used after the restart.')
hwSysReloadLicenseFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadLicenseFile.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadLicenseFile.setDescription('The value of this object identifies the license file used after the restart.')
hwSysReloadPatchFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadPatchFile.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadPatchFile.setDescription('The value of this object identifies the patch file used after the restart.')
hwSysReloadPatchState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("run", 1), ("unused", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadPatchState.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadPatchState.setDescription('The value of this object identifies the running status of the patch at the next startup. That is, whether the loaded patch is in the Run state at the next startup. run(1): indicates that the loaded patch is in the Run state at the next startup. unused(255): indicates that the loaded patch is in the original state at the next startup. ')
hwSysReloadOperateDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("slave", 2), ("chassis", 3), ("unused", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadOperateDestType.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadOperateDestType.setDescription('This object indicates the object to be restarted.')
hwSysReloadOperateDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadOperateDestIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadOperateDestIndex.setDescription("This object indicates the index of the board needs to be restarted. The get/get-next result is 'unused'. but, you can't use 'unused' to set. ")
hwSysReloadVoiceFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadVoiceFile.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadVoiceFile.setDescription('The value of this object identifies the license file used after the restart.')
hwSysReloadAndroidFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSysReloadAndroidFile.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadAndroidFile.setDescription('The value of this object identifies the android file used after the restart. The value is limited by hwSysAndroidFileTable. The value ranges from 0 to 2147483647. The default value is 0, which means the android file remains unchanged. ')
hwSysReboot = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("rebootWholeRoute", 2), ("rebootSlave", 3), ("slaveSwitch", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysReboot.setStatus('current')
if mibBuilder.loadTexts: hwSysReboot.setDescription('The value of this object identifies the restart of the master and slave boards. Values are as follows unused(1): indicates that this value is not used. Generally, this value is read. rebootAllRoute(2): indicates that the integrated device is restarted. rebootSlave(3): indicates that the slave board is restarted. slaveSwitch(4): indicates that the switchover between the main and slave boards is performed. ')
hwSysSlaveSwitchEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysSlaveSwitchEnable.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchEnable.setDescription('The value of this object identifies whether the switchover between the main and the slave boards is enabled. enable(1): indicates that the switchover between the main and slave boards is enabled. disable(2): indicates that the switchover between the main and slave boards is not enabled. ')
hwSysLatestRebootErrorInfo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysLatestRebootErrorInfo.setStatus('current')
if mibBuilder.loadTexts: hwSysLatestRebootErrorInfo.setDescription('This object indicates the cause of the last restart.')
hwSysSlaveSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 7), )
if mibBuilder.loadTexts: hwSysSlaveSwitchTable.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchTable.setDescription('A slave switchover enable parameters table.')
hwSysSlaveSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 7, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchIndex"))
if mibBuilder.loadTexts: hwSysSlaveSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchEntry.setDescription('Entry of hwSysSlaveSwitchTable.')
hwSysSlaveSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 80)))
if mibBuilder.loadTexts: hwSysSlaveSwitchIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchIndex.setDescription('The value of the object identifies the index of the table.')
hwSysSlaveSwitchChassisNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysSlaveSwitchChassisNum.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchChassisNum.setDescription('The value of the object identifies the chassis number.')
hwSysSlaveSwitchOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unused", 1), ("slaveSwitch", 2), ("slaveSwitchLock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysSlaveSwitchOperType.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchOperType.setDescription('Operation type. The object has the following values: unused(1): means the default value. slaveswitch(2): perform force switchover. slaveswitchlock(3): enable the force switchover, this value should be used with the object of hwSysSlaveSwitchEnableStatus. ')
hwSysSlaveSwitchEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 7, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysSlaveSwitchEnableStatus.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchEnableStatus.setDescription('The enable status of switchover for AMB (Active Main Board) and SMB (Standby Main Board). enable(1): enable the force switchover. disable(2): disable the force switchover. ')
hwSysSlaveSwitchSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 7, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysSlaveSwitchSrc.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchSrc.setDescription('The source slot for slave switchover.')
hwSysSlaveSwitchDst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 7, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysSlaveSwitchDst.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchDst.setDescription('The destination slot for slave switchover.')
hwSysDelayReboot = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysDelayReboot.setStatus('current')
if mibBuilder.loadTexts: hwSysDelayReboot.setDescription('Restart the device at a delayed time. The delayed time can be set up to 43200 minutes. The node is used to set the delayed time, cancel the setting, or check the status of the delayed restart. If a value within the range of 0 to 43200 is entered, the delayed time is set. If the value 65535 is entered, the setting is cancelled. During system reboot, a return value 65534 is displayed if the Get or Walk operation is performed. Other values are invalid. ')
hwSysImage = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4))
hwSysImageNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysImageNum.setStatus('current')
if mibBuilder.loadTexts: hwSysImageNum.setDescription('The value of this object identifies the number of image files. The object calculates the number of image files given by hwSysImageTable. The value ranges from 0 to 2147483647. ')
hwSysImageTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4, 2), )
if mibBuilder.loadTexts: hwSysImageTable.setStatus('current')
if mibBuilder.loadTexts: hwSysImageTable.setDescription('The system image management table.')
hwSysImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysImageIndex"))
if mibBuilder.loadTexts: hwSysImageEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysImageEntry.setDescription('A system image entry. Each entry consists of information of a system image. hwSysImageIndex exclusively decides an image file.')
hwSysImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwSysImageIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysImageIndex.setDescription('The value of this object identifies the index of the image file.')
hwSysImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysImageName.setStatus('current')
if mibBuilder.loadTexts: hwSysImageName.setDescription('This object indicates the name of the image file. A file name containing path and suffix is a string of 4 to 64 characters. ')
hwSysImageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysImageSize.setStatus('current')
if mibBuilder.loadTexts: hwSysImageSize.setDescription('The value of this object identifies the size of the image file. The value ranges from 0 to 2147483647, in bytes. The size depends on the actual file and is limited by the physical storage device. ')
hwSysImageLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysImageLocation.setStatus('current')
if mibBuilder.loadTexts: hwSysImageLocation.setDescription('This object indicates the location of the image file, namely the path. ')
hwSysImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysImageVersion.setStatus('current')
if mibBuilder.loadTexts: hwSysImageVersion.setDescription('The value of this object identifies the version of the image file.')
hwSysImageReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysImageReason.setStatus('current')
if mibBuilder.loadTexts: hwSysImageReason.setDescription('The value of this object identifies the error cause of the image file.')
hwSysCFGFile = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 5))
hwSysCFGFileNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCFGFileNum.setStatus('current')
if mibBuilder.loadTexts: hwSysCFGFileNum.setDescription('The value of this object identifies the number of configuration files. The object calculates the number of configuration files given by hwSysCFGFileTable. The value ranges from 0 to 2147483647. ')
hwSysCFGFileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 5, 2), )
if mibBuilder.loadTexts: hwSysCFGFileTable.setStatus('current')
if mibBuilder.loadTexts: hwSysCFGFileTable.setDescription('A table of configuration files in this system.')
hwSysCFGFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 5, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysCFGFileIndex"))
if mibBuilder.loadTexts: hwSysCFGFileEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysCFGFileEntry.setDescription('A configuration file entry. Each entry consists of information of a configuration file. hwSysCFGFileIndex exclusively decides a configuration file.')
hwSysCFGFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwSysCFGFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysCFGFileIndex.setDescription('The value of this object identifies the index of the configuration file.')
hwSysCFGFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCFGFileName.setStatus('current')
if mibBuilder.loadTexts: hwSysCFGFileName.setDescription('This object indicates the name of the configuration file. Currently, Huawei products support two formats of configuration files, namely, .CFG and .ZIP. A file name containing path and suffix is a string of 5 to 64 characters. ')
hwSysCFGFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCFGFileSize.setStatus('current')
if mibBuilder.loadTexts: hwSysCFGFileSize.setDescription('The value of this object identifies the size of the configuration file. The value ranges from 0 to 2147483647. ')
hwSysCFGFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCFGFileLocation.setStatus('current')
if mibBuilder.loadTexts: hwSysCFGFileLocation.setDescription('This object indicates the location of the configuration file, namely, the path.')
hwSysCFGFileReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysCFGFileReason.setStatus('current')
if mibBuilder.loadTexts: hwSysCFGFileReason.setDescription('This object indicates the error cause of the configuration file.')
hwSysPafFile = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 6))
hwSysPafFileNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysPafFileNum.setStatus('current')
if mibBuilder.loadTexts: hwSysPafFileNum.setDescription('The value of this object identifies the number of PAF files in the system.')
hwSysPafFileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 6, 2), )
if mibBuilder.loadTexts: hwSysPafFileTable.setStatus('current')
if mibBuilder.loadTexts: hwSysPafFileTable.setDescription('A table of paf files in this system.')
hwSysPafFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 6, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysPafFileIndex"))
if mibBuilder.loadTexts: hwSysPafFileEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysPafFileEntry.setDescription('A paf file entry. Each entry consists of information of a paf file. hwSysPafFileIndex exclusively decides a configuration file.')
hwSysPafFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwSysPafFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysPafFileIndex.setDescription('The value of this object identifies the index of this table.')
hwSysPafFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysPafFileName.setStatus('current')
if mibBuilder.loadTexts: hwSysPafFileName.setDescription('This object indicates the name of the PAF file.')
hwSysPafFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysPafFileSize.setStatus('current')
if mibBuilder.loadTexts: hwSysPafFileSize.setDescription('The value of this object identifies the size of the PAF file.')
hwSysPafFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysPafFileLocation.setStatus('current')
if mibBuilder.loadTexts: hwSysPafFileLocation.setDescription('This object indicates the position of the PAF file.')
hwSysPafFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysPafFileVersion.setStatus('current')
if mibBuilder.loadTexts: hwSysPafFileVersion.setDescription('This object indicates the version of the PAF file.')
hwSysLicenseFile = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 7))
hwSysLicenseFileNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysLicenseFileNum.setStatus('current')
if mibBuilder.loadTexts: hwSysLicenseFileNum.setDescription('The value of this object identifies the number of license files in the system.')
hwSysLicenseFileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 7, 2), )
if mibBuilder.loadTexts: hwSysLicenseFileTable.setStatus('current')
if mibBuilder.loadTexts: hwSysLicenseFileTable.setDescription('A table of license files in this system.')
hwSysLicenseFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 7, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysLicenseFileIndex"))
if mibBuilder.loadTexts: hwSysLicenseFileEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysLicenseFileEntry.setDescription('A license file entry. Each entry consists of information of a license file. hwSysLicenseFileIndex exclusively decides a configuration file.')
hwSysLicenseFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwSysLicenseFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysLicenseFileIndex.setDescription('The value of this object identifies the index of this table.')
hwSysLicenseFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysLicenseFileName.setStatus('current')
if mibBuilder.loadTexts: hwSysLicenseFileName.setDescription('This object indicates the name of the license file.')
hwSysLicenseFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysLicenseFileSize.setStatus('current')
if mibBuilder.loadTexts: hwSysLicenseFileSize.setDescription('This object indicates the size of the license file.')
hwSysLicenseFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 7, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysLicenseFileLocation.setStatus('current')
if mibBuilder.loadTexts: hwSysLicenseFileLocation.setDescription('This object indicates the position of the license file.')
hwPatch = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8))
hwPatchBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 1))
hwPatchFileNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchFileNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchFileNum.setDescription('The value of this object identifies the number of patches in the system.')
hwPatchRecordReset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unused", 1), ("resetPatchHistory", 2), ("resetPatchError", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPatchRecordReset.setStatus('current')
if mibBuilder.loadTexts: hwPatchRecordReset.setDescription('Clear the patch records. unused(1): unused. resetPatchHistory(2): clears the hwPatchHistoryTable record. resetPatchError(3): clears the hwPatchErrorTable record.')
hwPatchHistoryTableMax = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPatchHistoryTableMax.setStatus('current')
if mibBuilder.loadTexts: hwPatchHistoryTableMax.setDescription('Set the size of hwPatchHistoryTable.')
hwPatchTrapEnble = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPatchTrapEnble.setStatus('current')
if mibBuilder.loadTexts: hwPatchTrapEnble.setDescription('The value of this object determines whether to generate the trap of HUAWEI-SYS-MAN-MIB. enable(1): Trap is enabled. disable(2): Trap is not enabled.')
hwPatchErrorTableMax = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPatchErrorTableMax.setStatus('current')
if mibBuilder.loadTexts: hwPatchErrorTableMax.setDescription('The value of this object identifies the maximum number of recorded errors supported by hwPatchErrorTable.')
hwPatchId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchId.setStatus('current')
if mibBuilder.loadTexts: hwPatchId.setDescription('This object indicates the patch ID on the device.')
hwPatchLatestId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchLatestId.setStatus('current')
if mibBuilder.loadTexts: hwPatchLatestId.setDescription('This object indicates the latest patch ID on the device.')
hwPatchFailReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9))).clone(namedValues=NamedValues(("patchOpenErr", 1), ("getPatchErr", 2), ("patchSpaceShortage", 3), ("patchConflict", 4), ("versionErr", 5), ("synchronizePatchPackageError", 8), ("patchConfigInconsistError", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchFailReason.setStatus('current')
if mibBuilder.loadTexts: hwPatchFailReason.setDescription('This object is an index that specifies patch fail reason.')
hwPatchFileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 2), )
if mibBuilder.loadTexts: hwPatchFileTable.setStatus('current')
if mibBuilder.loadTexts: hwPatchFileTable.setDescription('Patch file query table.')
hwPatchFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwPatchFileIndex"))
if mibBuilder.loadTexts: hwPatchFileEntry.setStatus('current')
if mibBuilder.loadTexts: hwPatchFileEntry.setDescription('Defines an entry in the hwPatchFileTable.')
hwPatchFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwPatchFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchFileIndex.setDescription('The value of this object identifies the index of this table.')
hwPatchFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchFileName.setStatus('current')
if mibBuilder.loadTexts: hwPatchFileName.setDescription('This object indicates the name of a patch file.')
hwPatchFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchFileSize.setStatus('current')
if mibBuilder.loadTexts: hwPatchFileSize.setDescription('This object indicates the size of a patch file.')
hwPatchFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchFileLocation.setStatus('current')
if mibBuilder.loadTexts: hwPatchFileLocation.setDescription('This object indicates the position of a patch file.')
hwPatchFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchFileVersion.setStatus('current')
if mibBuilder.loadTexts: hwPatchFileVersion.setDescription('This object indicates the version of the patch file.')
hwLoadPatchTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 4), )
if mibBuilder.loadTexts: hwLoadPatchTable.setStatus('current')
if mibBuilder.loadTexts: hwLoadPatchTable.setDescription('The load table of the patch file. Load the patch file to the memory: hwSlotIndex:The slot ID of the destination device to be loaded by the patch file, hwPatchFileIndex:The index of the patch file, If hwSlotIndex is 128, it indicates all slots of the device.')
hwLoadPatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 4, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwPatchSlotIndex"), (0, "HUAWEI-SYS-MAN-MIB", "hwPatchFileIndex"))
if mibBuilder.loadTexts: hwLoadPatchEntry.setStatus('current')
if mibBuilder.loadTexts: hwLoadPatchEntry.setDescription('Defines an entry in the hwLoadPatchTable.')
hwPatchLoadDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("slave", 2), ("slot", 3), ("chassis", 4), ("unused", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPatchLoadDestType.setStatus('current')
if mibBuilder.loadTexts: hwPatchLoadDestType.setDescription('This object indicates the type of the board to be loaded with the patch.')
hwPatchLoadDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 4, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPatchLoadDestIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchLoadDestIndex.setDescription('This object indicates the index of the board to be loaded with the patch.')
hwPatchLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loading", 1), ("success", 2), ("failure", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchLoadState.setStatus('current')
if mibBuilder.loadTexts: hwPatchLoadState.setDescription('Patch loading state: loading(1):Patch is loading. success(2):Patch loading succeeded. failure(3):Patch loading failed. none(4):Patch and board do not match.')
hwLoadPatchRowState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLoadPatchRowState.setStatus('current')
if mibBuilder.loadTexts: hwLoadPatchRowState.setDescription('This object identifies the status of a row.')
hwPatchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5))
hwPatchTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1), )
if mibBuilder.loadTexts: hwPatchTable.setStatus('current')
if mibBuilder.loadTexts: hwPatchTable.setDescription('Running status transfer and query of the patch. If hwSlotIndex is 128, it indicates all slots of the device. If hwPatchNum is 65535, it indicates all patches of the specified slot. If hwPatchNum is 0, it indicates the NP patch of the specified slot. If hwPatchNum is in range from 1 to 200, it indicates the C patch of the specified slot. ')
hwPatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwPatchSlotIndex"), (0, "HUAWEI-SYS-MAN-MIB", "hwPatchIndex"))
if mibBuilder.loadTexts: hwPatchEntry.setStatus('current')
if mibBuilder.loadTexts: hwPatchEntry.setDescription('Defines an entry in the hwPatchTable.')
hwPatchSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hwPatchSlotIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchSlotIndex.setDescription('The value of this object identifies the index of the slot.')
hwPatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwPatchIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchIndex.setDescription('This object indicates the index of the patch.')
hwPatchUsedFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchUsedFileName.setStatus('current')
if mibBuilder.loadTexts: hwPatchUsedFileName.setDescription('This object indicates the name of the patch file.')
hwPatchVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchVersion.setStatus('current')
if mibBuilder.loadTexts: hwPatchVersion.setDescription('This object indicates the version of the patch file.')
hwPatchDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchDescription.setStatus('current')
if mibBuilder.loadTexts: hwPatchDescription.setDescription('This object indicates the description of the patch.')
hwPatchProgramVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchProgramVersion.setStatus('current')
if mibBuilder.loadTexts: hwPatchProgramVersion.setDescription('The value of the object identifies the version number of the host software.')
hwPatchFuncNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchFuncNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchFuncNum.setDescription('The value of this object identifies the number functions contained in the patch.')
hwPatchTextLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchTextLen.setStatus('current')
if mibBuilder.loadTexts: hwPatchTextLen.setDescription('The value of this object identifies the length of the patch code.')
hwPatchDataLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchDataLen.setStatus('current')
if mibBuilder.loadTexts: hwPatchDataLen.setDescription('The value of this object identifies the length of the patch data.')
hwPatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hotCommon", 1), ("hotTemporary", 2), ("coolCommon", 3), ("coolTemporary", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchType.setStatus('current')
if mibBuilder.loadTexts: hwPatchType.setDescription('The value of this object identifies the patch type. hotCommon(1): indicates the common hot patch. hotTemporary(2): indicates the temporary hot patch. coolCommon(3): indicates the common cool patch. coolTemporary(4): indicates the temporary cool patch.')
hwPatchBuildTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchBuildTime.setStatus('current')
if mibBuilder.loadTexts: hwPatchBuildTime.setDescription('This object indicates the time when a patch file is built.')
hwPatchActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchActiveTime.setStatus('current')
if mibBuilder.loadTexts: hwPatchActiveTime.setDescription('This object indicates the time when a patch file is activated.')
hwPatchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("run", 1), ("active", 2), ("deactive", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPatchAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwPatchAdminStatus.setDescription('The value of this object identifies the operation status of a patch. Run (1): indicates that the patch status is Run. Active(2): indicates the patch status is Active. Deactive(3): indicates the patch status is Deactive. Delete(4): indicates that the patch is deleted.')
hwPatchOperateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("patchRunning", 1), ("patchActive", 2), ("patchDeactive", 3), ("patchDeleting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchOperateState.setStatus('current')
if mibBuilder.loadTexts: hwPatchOperateState.setDescription('status of the patch. patchRunning(1): indicates that current status of the patch is Run. patchActive(2): indicates that current status of the patch is Active. patchDeactive(3): indicates that current status of the patch is Deactive.')
hwPatchOperateDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("slave", 2), ("slot", 3), ("chassis", 4), ("unused", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPatchOperateDestType.setStatus('current')
if mibBuilder.loadTexts: hwPatchOperateDestType.setDescription('Patch operate object type,it combine with the hwPatchOperateDestIndex to note the operate object.')
hwPatchOperateDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 1, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPatchOperateDestIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchOperateDestIndex.setDescription('Patch operate object index,it combine with chassis,the value of the hwPatchOperateDestType to note the operate object.hwPatchOperateDestIndex is value such as ccc1,clc2 etc.')
hwPatchStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2), )
if mibBuilder.loadTexts: hwPatchStateTable.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateTable.setDescription('The statistics information of the C patch area on each slot.')
hwPatchStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwPatchSlotIndex"))
if mibBuilder.loadTexts: hwPatchStateEntry.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateEntry.setDescription('Defines an entry in the hwPatchStateTable.')
hwPatchNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchNumMax.setStatus('current')
if mibBuilder.loadTexts: hwPatchNumMax.setDescription('The value of this object identifies the maximum number of patches.')
hwPatchIdleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchIdleNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchIdleNum.setDescription('The value of this object identifies the number of idle patches.')
hwPatchTextMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchTextMax.setStatus('current')
if mibBuilder.loadTexts: hwPatchTextMax.setDescription('The value of this object identifies the size of the code in the patch area.')
hwPatchDataMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchDataMax.setStatus('current')
if mibBuilder.loadTexts: hwPatchDataMax.setDescription('The value of this object identifies the size of the data in the patch area.')
hwPatchStateTextUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStateTextUsed.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateTextUsed.setDescription('The value of this object identifies the size of the used code in the patch area.')
hwPatchStateDataUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStateDataUsed.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateDataUsed.setDescription('The value of this object identifies the size of the used data in the patch area.')
hwPatchStateTotalPatchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStateTotalPatchNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateTotalPatchNum.setDescription('The value of this object identifies the total number of used patches.')
hwPatchStateTempPatchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStateTempPatchNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateTempPatchNum.setDescription('The value of this object identifies the total number of used temporary patches.')
hwPatchStateCommonPatchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStateCommonPatchNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateCommonPatchNum.setDescription('The value of this object identifies the total number of used common patches.')
hwPatchStateRuningPatchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStateRuningPatchNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateRuningPatchNum.setDescription('The value of this object identifies the number of patches in the Run state in the patch area.')
hwPatchStateActivePatchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStateActivePatchNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateActivePatchNum.setDescription('The value of this object identifies the number of patches in the Active state in the patch area.')
hwPatchStateDeactivePatchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchStateDeactivePatchNum.setStatus('current')
if mibBuilder.loadTexts: hwPatchStateDeactivePatchNum.setDescription('The value of this object identifies the number of patches in the Deactive state in the patch area.')
hwPatchHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3), )
if mibBuilder.loadTexts: hwPatchHistoryTable.setStatus('current')
if mibBuilder.loadTexts: hwPatchHistoryTable.setDescription('Patch history table.')
hwPatchHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwPatchHistoryIndex"))
if mibBuilder.loadTexts: hwPatchHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: hwPatchHistoryEntry.setDescription('Defines an entry in the hwPatchHistoryTable.')
hwPatchHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwPatchHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchHistoryIndex.setDescription('This object indicates the index of the table.')
hwPatchHistoryProgrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchHistoryProgrameVersion.setStatus('current')
if mibBuilder.loadTexts: hwPatchHistoryProgrameVersion.setDescription('The value of the object identifies the version number of the image file.')
hwPatchHistoryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchHistoryVersion.setStatus('current')
if mibBuilder.loadTexts: hwPatchHistoryVersion.setDescription('The value of this object identifies the version of the patch.')
hwSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotId.setStatus('current')
if mibBuilder.loadTexts: hwSlotId.setDescription('The value of the object identifies the slot number of the patch.')
hwPatchBeginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchBeginIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchBeginIndex.setDescription('The value of this object identifies the start ID of the loaded patch.')
hwPatchEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchEndIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchEndIndex.setDescription('The value of this object identifies the end ID of the loaded patch.')
hwPatchHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("running", 1), ("active", 2), ("deactive", 3), ("delete", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchHistoryAction.setStatus('current')
if mibBuilder.loadTexts: hwPatchHistoryAction.setDescription('The value of this object identifies the patch status.')
hwPatchHistoryBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchHistoryBeginTime.setStatus('current')
if mibBuilder.loadTexts: hwPatchHistoryBeginTime.setDescription('This object indicates the start time of running the patch.')
hwPatchHistoryEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchHistoryEndTime.setStatus('current')
if mibBuilder.loadTexts: hwPatchHistoryEndTime.setDescription('This object indicates the end time of running the patch.')
hwPatchErrorTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 4), )
if mibBuilder.loadTexts: hwPatchErrorTable.setStatus('current')
if mibBuilder.loadTexts: hwPatchErrorTable.setDescription('The error record table of patch operation.')
hwPatchErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 4, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwPatchErrorIndex"))
if mibBuilder.loadTexts: hwPatchErrorEntry.setStatus('current')
if mibBuilder.loadTexts: hwPatchErrorEntry.setDescription('Defines an entry in the hwPatchErrorTable.')
hwPatchErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwPatchErrorIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchErrorIndex.setDescription('This object indicates the index of the patch error.')
hwPatchErrorSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchErrorSlot.setStatus('current')
if mibBuilder.loadTexts: hwPatchErrorSlot.setDescription('This object indicates the number of the slot related to a patch error.')
hwPatchErrorPatchFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchErrorPatchFileName.setStatus('current')
if mibBuilder.loadTexts: hwPatchErrorPatchFileName.setDescription('This object indicates the index of the patch file when the patch has an error.')
hwPatchErrorPatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchErrorPatchIndex.setStatus('current')
if mibBuilder.loadTexts: hwPatchErrorPatchIndex.setDescription('This object indicates the index of the patch when the patch has an error.')
hwPatchErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 8, 5, 4, 1, 5), HWPatchErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPatchErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwPatchErrorCode.setDescription('This object indicates the flag of the patch error.')
hwBootRom = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11))
hwBootRomTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1), )
if mibBuilder.loadTexts: hwBootRomTable.setStatus('current')
if mibBuilder.loadTexts: hwBootRomTable.setDescription('Boot ROM startup parameter query table.')
hwBootRomEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwBootRomIndex"))
if mibBuilder.loadTexts: hwBootRomEntry.setStatus('current')
if mibBuilder.loadTexts: hwBootRomEntry.setDescription('Defines an entry in the hwBootRomTable.')
hwBootRomIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2))))
if mibBuilder.loadTexts: hwBootRomIndex.setStatus('current')
if mibBuilder.loadTexts: hwBootRomIndex.setDescription('The value of this object identifies the index of the BootROM table. ')
hwBootRomBootDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomBootDevice.setStatus('current')
if mibBuilder.loadTexts: hwBootRomBootDevice.setDescription('This object indicates the name of the BootROM startup device.')
hwBootRomProcessorNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomProcessorNo.setStatus('current')
if mibBuilder.loadTexts: hwBootRomProcessorNo.setDescription('The value of this object identifies the number of the BootROM processor.')
hwBootRomHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomHostName.setStatus('current')
if mibBuilder.loadTexts: hwBootRomHostName.setDescription('The object indicates the name of the BootROM host.')
hwBootRomFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomFileName.setStatus('current')
if mibBuilder.loadTexts: hwBootRomFileName.setDescription('The object indicates the name of the BootROM file.')
hwBootRomIpOnEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomIpOnEthernet.setStatus('current')
if mibBuilder.loadTexts: hwBootRomIpOnEthernet.setDescription('The object indicates the IP address of the BootROM Ethernet interface.')
hwBootRomIpOnBackPlane = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomIpOnBackPlane.setStatus('current')
if mibBuilder.loadTexts: hwBootRomIpOnBackPlane.setDescription('The object indicates the IP address of the BootROM backplane.')
hwBootRomHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomHostIp.setStatus('current')
if mibBuilder.loadTexts: hwBootRomHostIp.setDescription('The object indicates the IP address of the BootROM host.')
hwBootRomGatewayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomGatewayIp.setStatus('current')
if mibBuilder.loadTexts: hwBootRomGatewayIp.setDescription('The object indicates the IP address of the BootROM gateway.')
hwBootRomUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomUserName.setStatus('current')
if mibBuilder.loadTexts: hwBootRomUserName.setDescription('The object indicates the name of the BootROM user.')
hwBootRomPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomPassword.setStatus('current')
if mibBuilder.loadTexts: hwBootRomPassword.setDescription('The object indicates the BootROM password.')
hwBootRomTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomTargetName.setStatus('current')
if mibBuilder.loadTexts: hwBootRomTargetName.setDescription('The object indicates the name of the BootROM target.')
hwBootRomStartupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomStartupScript.setStatus('current')
if mibBuilder.loadTexts: hwBootRomStartupScript.setDescription('The object indicates the BootROM startup script.')
hwBootRomXModemBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomXModemBaudRate.setStatus('current')
if mibBuilder.loadTexts: hwBootRomXModemBaudRate.setDescription('The value of the object identifies the baud rate for transmitting the XModem data.')
hwBootRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 11, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBootRomVersion.setStatus('current')
if mibBuilder.loadTexts: hwBootRomVersion.setDescription('Boot ROM version.')
hwSysUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12))
hwSysUpgradeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 1), )
if mibBuilder.loadTexts: hwSysUpgradeTable.setStatus('current')
if mibBuilder.loadTexts: hwSysUpgradeTable.setDescription('ISSU upgrade table.')
hwSysUpgradeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 1, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwIssuIndex"))
if mibBuilder.loadTexts: hwSysUpgradeEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysUpgradeEntry.setDescription('Defines an entry in the hwSysUpgradeTable.')
hwIssuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwIssuIndex.setStatus('current')
if mibBuilder.loadTexts: hwIssuIndex.setDescription('Set system issu table index.')
hwIssuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("issuUpgrade", 1), ("issuPrecheck", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIssuMode.setStatus('current')
if mibBuilder.loadTexts: hwIssuMode.setDescription('Set system issu upgrade mode.')
hwIssuImageFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIssuImageFile.setStatus('current')
if mibBuilder.loadTexts: hwIssuImageFile.setDescription('The name of the image file.')
hwIssuPafFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIssuPafFile.setStatus('current')
if mibBuilder.loadTexts: hwIssuPafFile.setDescription('The name of the paf file.')
hwIssuLicenseFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIssuLicenseFile.setStatus('current')
if mibBuilder.loadTexts: hwIssuLicenseFile.setDescription('The name of the license file.')
hwIssuPatchFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIssuPatchFile.setStatus('current')
if mibBuilder.loadTexts: hwIssuPatchFile.setDescription('The name of the patch file.')
hwIssuState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noIssuUpgrading", 1), ("issuUpgrading", 2), ("issuExceptional", 3), ("issuRollBackByUserCancel", 4), ("issuRollBackByExceptional", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIssuState.setStatus('current')
if mibBuilder.loadTexts: hwIssuState.setDescription('System issu upgrade state.')
hwIssuConditionCheck = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("notRealtimeBackup", 2), ("slotAbnormal", 3), ("configurationChange", 4), ("otherAbnormal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIssuConditionCheck.setStatus('current')
if mibBuilder.loadTexts: hwIssuConditionCheck.setDescription('System issu upgrade condition check. The default check result is normal.')
hwSysSourceIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 13))
hwSysSourceIndexTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 13, 1), )
if mibBuilder.loadTexts: hwSysSourceIndexTable.setStatus('current')
if mibBuilder.loadTexts: hwSysSourceIndexTable.setDescription('System file Index query table.')
hwSysSourceIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 13, 1, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysFileType"), (0, "HUAWEI-SYS-MAN-MIB", "hwSysFileName"))
if mibBuilder.loadTexts: hwSysSourceIndexEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysSourceIndexEntry.setDescription('Defines an entry in the hwBootRomTable.')
hwSysFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("image", 1), ("config", 2), ("paf", 3), ("license", 4), ("patch", 5))))
if mibBuilder.loadTexts: hwSysFileType.setStatus('current')
if mibBuilder.loadTexts: hwSysFileType.setDescription('The value of this object is an index that indicates the type of a file.')
hwSysFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 13, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 110)))
if mibBuilder.loadTexts: hwSysFileName.setStatus('current')
if mibBuilder.loadTexts: hwSysFileName.setDescription('This object is an index that indicates the name of a file on the main control board.')
hwSysFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysFileIndex.setDescription('The value of this object identifies the index of a file in the specified table. If the value is 0, it indicates that this file does not exist in the specified table.')
hwSysRebootInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 14))
hwSysRebootTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysRebootTimes.setStatus('current')
if mibBuilder.loadTexts: hwSysRebootTimes.setDescription('The value of the device reboot times. ')
hwSysRebootRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 14, 2), )
if mibBuilder.loadTexts: hwSysRebootRecordTable.setStatus('current')
if mibBuilder.loadTexts: hwSysRebootRecordTable.setDescription('A reboot information record table.')
hwSysRebootRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 14, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysRebootRecordIndex"))
if mibBuilder.loadTexts: hwSysRebootRecordEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysRebootRecordEntry.setDescription('Entry of hwSysReloadScheduleTable.')
hwSysRebootRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwSysRebootRecordIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysRebootRecordIndex.setDescription('The index of hwSysRebootRecordTable.')
hwSysRebootReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("manual", 1), ("powerOff", 2), ("unknown", 3), ("schedule", 4), ("software", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysRebootReason.setStatus('current')
if mibBuilder.loadTexts: hwSysRebootReason.setDescription("The reason of system's reboot.")
hwSysRebootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 14, 2, 1, 3), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysRebootTime.setStatus('current')
if mibBuilder.loadTexts: hwSysRebootTime.setDescription('The time at which the reboot action occurred. we will only take octet strings with length 8 for this object which indicates the local time of the switch. The maximum scheduled time is 30 days from the current system clock time. field octets contents range 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 ')
hwSysDeviceCheck = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 15))
hwSysDeviceCheckStart = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("checkStart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysDeviceCheckStart.setStatus('current')
if mibBuilder.loadTexts: hwSysDeviceCheckStart.setDescription('Set system check start.')
hwSysDeviceCheckState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("done", 1), ("checking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysDeviceCheckState.setStatus('current')
if mibBuilder.loadTexts: hwSysDeviceCheckState.setDescription('Get system check state.')
hwSysSwitchoverState = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19))
hwSysSwitchoverStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 1), )
if mibBuilder.loadTexts: hwSysSwitchoverStateTable.setStatus('current')
if mibBuilder.loadTexts: hwSysSwitchoverStateTable.setDescription('Get switchover state of single-chassis')
hwSysSwitchoverStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 1, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysSwitchoverStateIndex"))
if mibBuilder.loadTexts: hwSysSwitchoverStateEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysSwitchoverStateEntry.setDescription('Entry of hwSysSwitchoverStateTable.')
hwSysSwitchoverStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwSysSwitchoverStateIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysSwitchoverStateIndex.setDescription('This object indicates the index of the table.')
hwSysSwitchoverSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysSwitchoverSlotId.setStatus('current')
if mibBuilder.loadTexts: hwSysSwitchoverSlotId.setDescription('The value of this object identifies the slot number of the board.')
hwSysSwitchoverBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("systemMaster", 3), ("systemSlave", 4), ("issuOldMaster", 5), ("issuNewMaster", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysSwitchoverBoardType.setStatus('current')
if mibBuilder.loadTexts: hwSysSwitchoverBoardType.setDescription('The value of this object identifies the type of the board.')
hwSysSwitchoverInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 190))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysSwitchoverInfo.setStatus('current')
if mibBuilder.loadTexts: hwSysSwitchoverInfo.setDescription('The value of this object descries the real-time information of HA status.')
hwSysSwitchoverStateMultiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 2), )
if mibBuilder.loadTexts: hwSysSwitchoverStateMultiTable.setStatus('current')
if mibBuilder.loadTexts: hwSysSwitchoverStateMultiTable.setDescription('Get switchover state of multi-chassis')
hwSysSwitchoverStateMultiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysMultiSwtStateIndex"))
if mibBuilder.loadTexts: hwSysSwitchoverStateMultiEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysSwitchoverStateMultiEntry.setDescription('Entry of hwSysSwitchoverStateMultiTable.')
hwSysMultiSwtStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwSysMultiSwtStateIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysMultiSwtStateIndex.setDescription('This object indicates the index of the table.')
hwSysMultiSwtChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysMultiSwtChassisId.setStatus('current')
if mibBuilder.loadTexts: hwSysMultiSwtChassisId.setDescription('The value of this object identifies the chassis id.')
hwSysMultiSwtSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysMultiSwtSlotId.setStatus('current')
if mibBuilder.loadTexts: hwSysMultiSwtSlotId.setDescription('The value of this object identifies the slot number of the board.')
hwSysMultiSwtBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("systemMaster", 3), ("systemSlave", 4), ("issuOldMaster", 5), ("issuNewMaster", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysMultiSwtBoardType.setStatus('current')
if mibBuilder.loadTexts: hwSysMultiSwtBoardType.setDescription('The value of this object identifies the type of the board.')
hwSysMultiSwtInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 19, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 190))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysMultiSwtInfo.setStatus('current')
if mibBuilder.loadTexts: hwSysMultiSwtInfo.setDescription('The value of this object descries the real-time information of HA status.')
hwSysVoiceFile = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 20))
hwSysVoiceFileNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysVoiceFileNum.setStatus('current')
if mibBuilder.loadTexts: hwSysVoiceFileNum.setDescription('The value of this object identifies the number of configuration files. The object calculates the number of configuration files given by hwSysCFGFileTable. The value ranges from 0 to 2147483647. ')
hwSysVoiceFileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 20, 2), )
if mibBuilder.loadTexts: hwSysVoiceFileTable.setStatus('current')
if mibBuilder.loadTexts: hwSysVoiceFileTable.setDescription('A table of configuration files in this system.')
hwSysVoiceFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 20, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysVoiceFileIndex"))
if mibBuilder.loadTexts: hwSysVoiceFileEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysVoiceFileEntry.setDescription('A configuration file entry. Each entry consists of information of a configuration file. hwSysCFGFileIndex exclusively decides a configuration file.')
hwSysVoiceFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwSysVoiceFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysVoiceFileIndex.setDescription('The value of this object identifies the index of the configuration file.')
hwSysVoiceFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 20, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysVoiceFileName.setStatus('current')
if mibBuilder.loadTexts: hwSysVoiceFileName.setDescription('This object indicates the name of the configuration file. Currently, Huawei products support two formats of configuration files, namely, .CFG and .ZIP. A file name containing path and suffix is a string of 4 to 64 characters. ')
hwSysVoiceFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysVoiceFileSize.setStatus('current')
if mibBuilder.loadTexts: hwSysVoiceFileSize.setDescription('The value of this object identifies the size of the configuration file. The value ranges from 0 to 2147483647. ')
hwSysVoiceFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 20, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysVoiceFileLocation.setStatus('current')
if mibBuilder.loadTexts: hwSysVoiceFileLocation.setDescription('This object indicates the location of the configuration file, namely, the path.')
hwSysWlanApUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24))
hwSysWlanApUpgradeCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 1))
hwSysWlanApUpgradeMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ftp", 1), ("sftp", 2), ("tftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysWlanApUpgradeMode.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeMode.setDescription('The value of this object identifies the ap upgrade mode. The value ranges from 1 to 3.')
hwSysWlanApUpgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysWlanApUpgradeFileName.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeFileName.setDescription('The value of this object identifies the filename of the ap upgrade file. The value ranges from 1 to 127.')
hwSysWlanApUpgradeServerIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysWlanApUpgradeServerIp.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeServerIp.setDescription('The value of this object identifies server ip address in ipv4 format.')
hwSysWlanApUpgradeServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysWlanApUpgradeServerUserName.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeServerUserName.setDescription('The value of this object identifies the username of server. The value ranges from 0 to 31.')
hwSysWlanApUpgradeServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysWlanApUpgradeServerPassword.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeServerPassword.setDescription('The value of this object identifies the password of server. The value ranges from 0 to 63.')
hwSysWlanApUpgradeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 2))
hwSysWlanApUpgradeProgressStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("updating", 0), ("updateSuccessful", 1), ("updateFailed", 2), ("failToDownloadFile", 4), ("efsAndVersionMismatched", 5), ("invalidFileName", 6), ("efsAndApTypeMismatched", 7), ("fileContentError", 8), ("writingMemoryError", 9), ("noUpdateResult", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysWlanApUpgradeProgressStatus.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeProgressStatus.setDescription('The value of this object identifies the status of the upgrade or the last result of the upgrade. The value ranges from 0 to 10.')
hwSysWlanApUpgradeLoadProgress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysWlanApUpgradeLoadProgress.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeLoadProgress.setDescription('The value of this object identifies the progress of file downloading. The value ranges from 0 to 100.')
hwSysWlanApUpgradeStorageProgress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysWlanApUpgradeStorageProgress.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeStorageProgress.setDescription('The value of this object identifies the progress of file storaging. The value ranges from 0 to 100.')
hwSysWlanApUpgradeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 3))
hwSysWlanApUpgradeBeginNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 3, 1))
if mibBuilder.loadTexts: hwSysWlanApUpgradeBeginNotify.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeBeginNotify.setDescription('This notification occurs when ap begin to update.')
hwSysWlanApUpgradeResultNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 3, 2)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeProgressStatus"))
if mibBuilder.loadTexts: hwSysWlanApUpgradeResultNotify.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeResultNotify.setDescription('This notification occurs when ap has updated successfully or failed.')
hwSysWlanApUpgradeUbootNotMatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 3, 3))
if mibBuilder.loadTexts: hwSysWlanApUpgradeUbootNotMatchNotify.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeUbootNotMatchNotify.setDescription('This notification occurs when ap uboot not match version.')
hwSysWlanApUpgradeAssistantPackageNotMatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 24, 3, 4))
if mibBuilder.loadTexts: hwSysWlanApUpgradeAssistantPackageNotMatchNotify.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeAssistantPackageNotMatchNotify.setDescription('This notification occurs when ap upgrade-assistant-package not match version.')
hwSysAndroidFile = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 25))
hwSysAndroidFileNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 25, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysAndroidFileNum.setStatus('current')
if mibBuilder.loadTexts: hwSysAndroidFileNum.setDescription('The value of this object identifies the number of Android files. The object calculates the number of android files given by hwSysAndroidFileTable. The value ranges from 0 to 2147483647. ')
hwSysAndroidFileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 25, 2), )
if mibBuilder.loadTexts: hwSysAndroidFileTable.setStatus('current')
if mibBuilder.loadTexts: hwSysAndroidFileTable.setDescription('A table of android files in this system.')
hwSysAndroidFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 25, 2, 1), ).setIndexNames((0, "HUAWEI-SYS-MAN-MIB", "hwSysAndroidFileIndex"))
if mibBuilder.loadTexts: hwSysAndroidFileEntry.setStatus('current')
if mibBuilder.loadTexts: hwSysAndroidFileEntry.setDescription('A android file entry. Each entry consists of information of a android file. hwSysAndroidFileIndex exclusively decides a android file.')
hwSysAndroidFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwSysAndroidFileIndex.setStatus('current')
if mibBuilder.loadTexts: hwSysAndroidFileIndex.setDescription('The value of this object identifies the index of the android file.')
hwSysAndroidFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 25, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysAndroidFileName.setStatus('current')
if mibBuilder.loadTexts: hwSysAndroidFileName.setDescription('This object indicates the name of the android file. Currently, Huawei products support one format of android files, namely, .BIN. A file name containing path and suffix is a string of 4 to 64 characters. ')
hwSysAndroidFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysAndroidFileSize.setStatus('current')
if mibBuilder.loadTexts: hwSysAndroidFileSize.setDescription('The value of this object identifies the size of the android file. The value ranges from 0 to 2147483647. ')
hwSysAndroidFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 25, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysAndroidFileLocation.setStatus('current')
if mibBuilder.loadTexts: hwSysAndroidFileLocation.setDescription('This object indicates the location of the android file, namely, the path.')
hwSysAndroidFileReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 1, 25, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysAndroidFileReason.setStatus('current')
if mibBuilder.loadTexts: hwSysAndroidFileReason.setDescription('This object indicates the error cause of the android file.')
huaweiSystemManMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2))
hwSysClockChangedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 1)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysLocalClock"))
if mibBuilder.loadTexts: hwSysClockChangedNotification.setStatus('current')
if mibBuilder.loadTexts: hwSysClockChangedNotification.setDescription('This object indicates the notification sent when the system clock changes. When the system clock changes, this trap is triggered. For example, the system clock is changed through command lines. ')
hwSysReloadNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 2)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysReloadImage"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadCfgFile"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadReason"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadScheduleTime"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadAction"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadPafFile"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadLicenseFile"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadPatchFile"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadAndroidFile"))
if mibBuilder.loadTexts: hwSysReloadNotification.setStatus('current')
if mibBuilder.loadTexts: hwSysReloadNotification.setDescription('This object indicates the restart notification.')
hwSysMasterHDError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 3))
if mibBuilder.loadTexts: hwSysMasterHDError.setStatus('current')
if mibBuilder.loadTexts: hwSysMasterHDError.setDescription('When the hard disk on master board cannot be read and written because of a certain error, the hard disk on master board is unregistered and the notification is sent. ')
hwSysSlaveHDError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 4))
if mibBuilder.loadTexts: hwSysSlaveHDError.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveHDError.setDescription('When the hard disk on slave board cannot be read and written because of a certain error, the hard disk on slave board is unregistered and the notification is sent. ')
hwPatchTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 5))
hwPatchErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 5, 1)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchErrorSlot"), ("HUAWEI-SYS-MAN-MIB", "hwPatchErrorPatchIndex"), ("HUAWEI-SYS-MAN-MIB", "hwPatchErrorCode"), ("HUAWEI-SYS-MAN-MIB", "hwPatchErrorPatchFileName"))
if mibBuilder.loadTexts: hwPatchErrorTrap.setStatus('current')
if mibBuilder.loadTexts: hwPatchErrorTrap.setDescription('The trap is generated when the patch operation error occurs.')
hwPatchActiveOverTimeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 5, 2)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchOperateState"))
if mibBuilder.loadTexts: hwPatchActiveOverTimeTrap.setStatus('current')
if mibBuilder.loadTexts: hwPatchActiveOverTimeTrap.setDescription('The patch is not run within 24 hours after it is activated.')
hwPatchMalfunctionComebackTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 5, 3)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchOperateState"))
if mibBuilder.loadTexts: hwPatchMalfunctionComebackTrap.setStatus('current')
if mibBuilder.loadTexts: hwPatchMalfunctionComebackTrap.setDescription('The patch operation is restored.')
hwPatchUpdateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 5, 4)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchVersion"), ("HUAWEI-SYS-MAN-MIB", "hwPatchType"), ("HUAWEI-SYS-MAN-MIB", "hwPatchOperateState"))
if mibBuilder.loadTexts: hwPatchUpdateTrap.setStatus('current')
if mibBuilder.loadTexts: hwPatchUpdateTrap.setDescription('The patch state change notification.')
hwSysMasterCfcardError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 6))
if mibBuilder.loadTexts: hwSysMasterCfcardError.setStatus('current')
if mibBuilder.loadTexts: hwSysMasterCfcardError.setDescription("When the cfcard on master board can't be read and written because of some error, the Cfcard on master board will be unregistered and the notification is sent. ")
hwSysSlaveCfcardError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 7))
if mibBuilder.loadTexts: hwSysSlaveCfcardError.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveCfcardError.setDescription("When the cfcard on slave board can't be read and written because of some error, the Cfcard on slave board will be unregistered and the notification is sent. ")
hwSysSlaveSwitchSuccessNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 8)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchChassisNum"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchSrc"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchDst"))
if mibBuilder.loadTexts: hwSysSlaveSwitchSuccessNotification.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchSuccessNotification.setDescription('This object indicates that the hwSysSlaveSwitchChassisNum chassis is successfully switched.')
hwSysSlaveSwitchFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 9)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchChassisNum"))
if mibBuilder.loadTexts: hwSysSlaveSwitchFailNotification.setStatus('current')
if mibBuilder.loadTexts: hwSysSlaveSwitchFailNotification.setDescription('This object indicates that the hwSysSlaveSwitchChassisNum chassis fails to be switched.')
hwSysIssuNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 10)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwIssuState"), ("HUAWEI-SYS-MAN-MIB", "hwIssuConditionCheck"))
if mibBuilder.loadTexts: hwSysIssuNotification.setStatus('current')
if mibBuilder.loadTexts: hwSysIssuNotification.setDescription('When the ISSU upgrade over, it will send success or failed message.')
hwPatchInstallFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 11)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchUsedFileName"), ("HUAWEI-SYS-MAN-MIB", "hwPatchVersion"), ("HUAWEI-SYS-MAN-MIB", "hwPatchFailReason"))
if mibBuilder.loadTexts: hwPatchInstallFail.setStatus('current')
if mibBuilder.loadTexts: hwPatchInstallFail.setDescription('The patch package install fail notification.')
hwPatchInstallFailClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 12)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchUsedFileName"), ("HUAWEI-SYS-MAN-MIB", "hwPatchVersion"), ("HUAWEI-SYS-MAN-MIB", "hwPatchFailReason"))
if mibBuilder.loadTexts: hwPatchInstallFailClear.setStatus('current')
if mibBuilder.loadTexts: hwPatchInstallFailClear.setDescription('The patch package install fail clear notification.')
hwSumUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 13)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysImageVersion"))
if mibBuilder.loadTexts: hwSumUpgradeSuccess.setStatus('current')
if mibBuilder.loadTexts: hwSumUpgradeSuccess.setDescription('The patch package upgrade success notification')
hwSysCfgFileErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 14)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysCFGFileName"), ("HUAWEI-SYS-MAN-MIB", "hwSysCFGFileReason"))
if mibBuilder.loadTexts: hwSysCfgFileErrorNotification.setStatus('current')
if mibBuilder.loadTexts: hwSysCfgFileErrorNotification.setDescription('This object notifies that some error occurs when the configuration file is specified as the next startup configuration file.')
hwSysImageErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 15)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysImageName"), ("HUAWEI-SYS-MAN-MIB", "hwSysImageName"), ("HUAWEI-SYS-MAN-MIB", "hwSysImageReason"))
if mibBuilder.loadTexts: hwSysImageErrorNotification.setStatus('current')
if mibBuilder.loadTexts: hwSysImageErrorNotification.setDescription('The image file upgrade fail notification. The first hwSysImageName indicates the current image file, and the second hwSysImageName indicates the next startup image file.')
hwSysPafChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 16)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysReloadEntity"), ("HUAWEI-SYS-MAN-MIB", "hwSysPafFileName"))
if mibBuilder.loadTexts: hwSysPafChangeNotification.setStatus('current')
if mibBuilder.loadTexts: hwSysPafChangeNotification.setDescription('This object indicates the notification sent when the system PAF file changes.The hwSysPafFileName indicates system PAF file, and the hwSysReloadEntity indicates the board type(1 means main board,2 means slave main board).')
hwSysLicenseChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 17)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysReloadEntity"), ("HUAWEI-SYS-MAN-MIB", "hwSysLicenseFileName"))
if mibBuilder.loadTexts: hwSysLicenseChangeNotification.setStatus('current')
if mibBuilder.loadTexts: hwSysLicenseChangeNotification.setDescription('This object indicates the notification sent when the system license file changes.The hwSysLicenseFileName indicates the system license file, and the hwSysReloadEntity indicates the board type(1 means main board,2 means slave main board).')
hwSystemBoardExclude = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 18)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSystemBoardExclude.setStatus('current')
if mibBuilder.loadTexts: hwSystemBoardExclude.setDescription('The board(s) excluded during software upgrading')
hwSystemBoardExcludeClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 19)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSystemBoardExcludeClear.setStatus('current')
if mibBuilder.loadTexts: hwSystemBoardExcludeClear.setDescription('The board(s) excluded retrieved during software upgrading')
hwSysEvmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20))
hwSysEvmTrapsObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 1))
hwSysEvmRoleName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 1, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwSysEvmRoleName.setStatus('current')
if mibBuilder.loadTexts: hwSysEvmRoleName.setDescription('The value of this object identifies the number of Android files. The object calculates the number of android files given by hwSysAndroidFileTable. The value ranges from 0 to 2147483647. ')
hwSysEvmDownloadFileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwSysEvmDownloadFileName.setStatus('current')
if mibBuilder.loadTexts: hwSysEvmDownloadFileName.setDescription('The value of this object identifies the number of Android files. The object calculates the number of android files given by hwSysAndroidFileTable. The value ranges from 0 to 2147483647. ')
hwSysEvmInstallFileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 1, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwSysEvmInstallFileName.setStatus('current')
if mibBuilder.loadTexts: hwSysEvmInstallFileName.setDescription('The value of this object identifies the number of Android files. The object calculates the number of android files given by hwSysAndroidFileTable. The value ranges from 0 to 2147483647. ')
hwSysEvmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 2))
hwEvmVmAbnormalRunNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 2, 1)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysEvmRoleName"))
if mibBuilder.loadTexts: hwEvmVmAbnormalRunNotification.setStatus('current')
if mibBuilder.loadTexts: hwEvmVmAbnormalRunNotification.setDescription('The board(s) excluded retrieved during software upgrading')
hwEvmVmNotRunningNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 2, 2)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysEvmRoleName"))
if mibBuilder.loadTexts: hwEvmVmNotRunningNotification.setStatus('current')
if mibBuilder.loadTexts: hwEvmVmNotRunningNotification.setDescription('The board(s) excluded retrieved during software upgrading')
hwEvmVmAbnormalRestartNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 2, 3)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysEvmRoleName"))
if mibBuilder.loadTexts: hwEvmVmAbnormalRestartNotification.setStatus('current')
if mibBuilder.loadTexts: hwEvmVmAbnormalRestartNotification.setDescription('The board(s) excluded retrieved during software upgrading')
hwEvmDownloadFailedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 2, 4)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysEvmDownloadFileName"))
if mibBuilder.loadTexts: hwEvmDownloadFailedNotification.setStatus('current')
if mibBuilder.loadTexts: hwEvmDownloadFailedNotification.setDescription('The board(s) excluded retrieved during software upgrading')
hwEvmInstallFailedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 2, 20, 2, 5)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysEvmInstallFileName"))
if mibBuilder.loadTexts: hwEvmInstallFailedNotification.setStatus('current')
if mibBuilder.loadTexts: hwEvmInstallFailedNotification.setDescription('The board(s) excluded retrieved during software upgrading')
huaweiSystemManMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3))
huaweiSystemManMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 1))
huaweiSystemManMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 1, 1)).setObjects(("HUAWEI-SYS-MAN-MIB", "huaweiSysClockGroup"), ("HUAWEI-SYS-MAN-MIB", "huaweiSysReloadGroup"), ("HUAWEI-SYS-MAN-MIB", "huaweiSysImageGroup"), ("HUAWEI-SYS-MAN-MIB", "huaweiSysCFGFileGroup"), ("HUAWEI-SYS-MAN-MIB", "huaweiSystemManNotificationGroup"), ("HUAWEI-SYS-MAN-MIB", "huaweihwSysEvmTrapsObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweiSystemManMIBCompliance = huaweiSystemManMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: huaweiSystemManMIBCompliance.setDescription('The compliance statement for entities which implement the Huawei system management MIB.')
huaweiSystemManMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2))
huaweiSysClockGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 1)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysLocalClock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweiSysClockGroup = huaweiSysClockGroup.setStatus('current')
if mibBuilder.loadTexts: huaweiSysClockGroup.setDescription('A collection of objects providing mandatory system reload.')
huaweiSysReloadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 2)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysReloadSchedule"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadAction"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadImage"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadCfgFile"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadReason"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadPatchFile"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadLicenseFile"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadPafFile"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadPatchState"), ("HUAWEI-SYS-MAN-MIB", "hwSysLatestRebootErrorInfo"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadScheduleTime"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadEntity"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadRowStatus"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadOperateDestType"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadOperateDestIndex"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchChassisNum"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchOperType"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchEnableStatus"), ("HUAWEI-SYS-MAN-MIB", "hwSysDelayReboot"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadAndroidFile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweiSysReloadGroup = huaweiSysReloadGroup.setStatus('current')
if mibBuilder.loadTexts: huaweiSysReloadGroup.setDescription(' A collection of objects providing mandatory system clock information.')
huaweiSysImageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 3)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysImageNum"), ("HUAWEI-SYS-MAN-MIB", "hwSysImageName"), ("HUAWEI-SYS-MAN-MIB", "hwSysImageSize"), ("HUAWEI-SYS-MAN-MIB", "hwSysImageLocation"), ("HUAWEI-SYS-MAN-MIB", "hwSysImageVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweiSysImageGroup = huaweiSysImageGroup.setStatus('current')
if mibBuilder.loadTexts: huaweiSysImageGroup.setDescription('A collection of objects providing mandatory system image information.')
huaweiSysCFGFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 4)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysCFGFileNum"), ("HUAWEI-SYS-MAN-MIB", "hwSysCFGFileName"), ("HUAWEI-SYS-MAN-MIB", "hwSysCFGFileSize"), ("HUAWEI-SYS-MAN-MIB", "hwSysCFGFileLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweiSysCFGFileGroup = huaweiSysCFGFileGroup.setStatus('current')
if mibBuilder.loadTexts: huaweiSysCFGFileGroup.setDescription('A collection of objects providing mandatory system configureation file information.')
hwSysCurGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 5)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysCurCFGFileIndex"), ("HUAWEI-SYS-MAN-MIB", "hwSysCurImageIndex"), ("HUAWEI-SYS-MAN-MIB", "hwSysCurPafFileIndex"), ("HUAWEI-SYS-MAN-MIB", "hwSysCurLicenseIndex"), ("HUAWEI-SYS-MAN-MIB", "hwSysCurPatchFileIndex"), ("HUAWEI-SYS-MAN-MIB", "hwSysCurVoiceFileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysCurGroup = hwSysCurGroup.setStatus('current')
if mibBuilder.loadTexts: hwSysCurGroup.setDescription('A collection of system current status.')
huaweiSystemManNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 6)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysClockChangedNotification"), ("HUAWEI-SYS-MAN-MIB", "hwSysReloadNotification"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchSuccessNotification"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchFailNotification"), ("HUAWEI-SYS-MAN-MIB", "hwSysIssuNotification"), ("HUAWEI-SYS-MAN-MIB", "hwPatchInstallFail"), ("HUAWEI-SYS-MAN-MIB", "hwPatchInstallFailClear"), ("HUAWEI-SYS-MAN-MIB", "hwSumUpgradeSuccess"), ("HUAWEI-SYS-MAN-MIB", "hwSysCfgFileErrorNotification"), ("HUAWEI-SYS-MAN-MIB", "hwSysImageErrorNotification"), ("HUAWEI-SYS-MAN-MIB", "hwSysPafChangeNotification"), ("HUAWEI-SYS-MAN-MIB", "hwSysLicenseChangeNotification"), ("HUAWEI-SYS-MAN-MIB", "hwSystemBoardExclude"), ("HUAWEI-SYS-MAN-MIB", "hwSystemBoardExcludeClear"), ("HUAWEI-SYS-MAN-MIB", "hwEvmVmAbnormalRunNotification"), ("HUAWEI-SYS-MAN-MIB", "hwEvmVmNotRunningNotification"), ("HUAWEI-SYS-MAN-MIB", "hwEvmVmAbnormalRestartNotification"), ("HUAWEI-SYS-MAN-MIB", "hwEvmDownloadFailedNotification"), ("HUAWEI-SYS-MAN-MIB", "hwEvmInstallFailedNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweiSystemManNotificationGroup = huaweiSystemManNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: huaweiSystemManNotificationGroup.setDescription('A collection of notification.')
huaweiSystemHDNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 7)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysMasterHDError"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveHDError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweiSystemHDNotificationGroup = huaweiSystemHDNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: huaweiSystemHDNotificationGroup.setDescription('A collection of notification about system hard disk.')
hwPatchLoadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 8)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchLoadDestType"), ("HUAWEI-SYS-MAN-MIB", "hwPatchLoadDestIndex"), ("HUAWEI-SYS-MAN-MIB", "hwLoadPatchRowState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPatchLoadGroup = hwPatchLoadGroup.setStatus('current')
if mibBuilder.loadTexts: hwPatchLoadGroup.setDescription('Description.')
hwPatchTrapsGrop = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 9)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchErrorTrap"), ("HUAWEI-SYS-MAN-MIB", "hwPatchActiveOverTimeTrap"), ("HUAWEI-SYS-MAN-MIB", "hwPatchMalfunctionComebackTrap"), ("HUAWEI-SYS-MAN-MIB", "hwPatchUpdateTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPatchTrapsGrop = hwPatchTrapsGrop.setStatus('current')
if mibBuilder.loadTexts: hwPatchTrapsGrop.setDescription('Patch operation error.')
hwPatchInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 10)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchDescription"), ("HUAWEI-SYS-MAN-MIB", "hwPatchFuncNum"), ("HUAWEI-SYS-MAN-MIB", "hwPatchTextLen"), ("HUAWEI-SYS-MAN-MIB", "hwPatchDataLen"), ("HUAWEI-SYS-MAN-MIB", "hwPatchType"), ("HUAWEI-SYS-MAN-MIB", "hwPatchAdminStatus"), ("HUAWEI-SYS-MAN-MIB", "hwPatchStateTempPatchNum"), ("HUAWEI-SYS-MAN-MIB", "hwPatchStateCommonPatchNum"), ("HUAWEI-SYS-MAN-MIB", "hwPatchStateRuningPatchNum"), ("HUAWEI-SYS-MAN-MIB", "hwPatchStateActivePatchNum"), ("HUAWEI-SYS-MAN-MIB", "hwPatchStateDeactivePatchNum"), ("HUAWEI-SYS-MAN-MIB", "hwPatchHistoryVersion"), ("HUAWEI-SYS-MAN-MIB", "hwPatchStateTotalPatchNum"), ("HUAWEI-SYS-MAN-MIB", "hwPatchStateDataUsed"), ("HUAWEI-SYS-MAN-MIB", "hwPatchStateTextUsed"), ("HUAWEI-SYS-MAN-MIB", "hwPatchDataMax"), ("HUAWEI-SYS-MAN-MIB", "hwPatchTextMax"), ("HUAWEI-SYS-MAN-MIB", "hwPatchIdleNum"), ("HUAWEI-SYS-MAN-MIB", "hwPatchNumMax"), ("HUAWEI-SYS-MAN-MIB", "hwPatchActiveTime"), ("HUAWEI-SYS-MAN-MIB", "hwPatchBuildTime"), ("HUAWEI-SYS-MAN-MIB", "hwPatchVersion"), ("HUAWEI-SYS-MAN-MIB", "hwPatchHistoryProgrameVersion"), ("HUAWEI-SYS-MAN-MIB", "hwPatchFileName"), ("HUAWEI-SYS-MAN-MIB", "hwPatchUsedFileName"), ("HUAWEI-SYS-MAN-MIB", "hwPatchErrorTableMax"), ("HUAWEI-SYS-MAN-MIB", "hwPatchHistoryTableMax"), ("HUAWEI-SYS-MAN-MIB", "hwPatchRecordReset"), ("HUAWEI-SYS-MAN-MIB", "hwPatchProgramVersion"), ("HUAWEI-SYS-MAN-MIB", "hwPatchOperateState"), ("HUAWEI-SYS-MAN-MIB", "hwPatchErrorSlot"), ("HUAWEI-SYS-MAN-MIB", "hwPatchErrorPatchIndex"), ("HUAWEI-SYS-MAN-MIB", "hwPatchErrorCode"), ("HUAWEI-SYS-MAN-MIB", "hwPatchHistoryBeginTime"), ("HUAWEI-SYS-MAN-MIB", "hwPatchHistoryEndTime"), ("HUAWEI-SYS-MAN-MIB", "hwPatchHistoryAction"), ("HUAWEI-SYS-MAN-MIB", "hwPatchEndIndex"), ("HUAWEI-SYS-MAN-MIB", "hwPatchTrapEnble"), ("HUAWEI-SYS-MAN-MIB", "hwPatchBeginIndex"), ("HUAWEI-SYS-MAN-MIB", "hwPatchId"), ("HUAWEI-SYS-MAN-MIB", "hwPatchLatestId"), ("HUAWEI-SYS-MAN-MIB", "hwSlotId"), ("HUAWEI-SYS-MAN-MIB", "hwPatchErrorPatchFileName"), ("HUAWEI-SYS-MAN-MIB", "hwPatchFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPatchInfoGroup = hwPatchInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwPatchInfoGroup.setDescription('Description.')
hwPatchFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 11)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwPatchFileName"), ("HUAWEI-SYS-MAN-MIB", "hwPatchFileSize"), ("HUAWEI-SYS-MAN-MIB", "hwPatchFileLocation"), ("HUAWEI-SYS-MAN-MIB", "hwPatchFileVersion"), ("HUAWEI-SYS-MAN-MIB", "hwPatchFileNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPatchFileGroup = hwPatchFileGroup.setStatus('current')
if mibBuilder.loadTexts: hwPatchFileGroup.setDescription('Description.')
hwSysPafFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 13)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysPafFileName"), ("HUAWEI-SYS-MAN-MIB", "hwSysPafFileSize"), ("HUAWEI-SYS-MAN-MIB", "hwSysPafFileLocation"), ("HUAWEI-SYS-MAN-MIB", "hwSysPafFileVersion"), ("HUAWEI-SYS-MAN-MIB", "hwSysPafFileNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysPafFileGroup = hwSysPafFileGroup.setStatus('current')
if mibBuilder.loadTexts: hwSysPafFileGroup.setDescription('Description.')
hwSysPafLicenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 14)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysLicenseFileNum"), ("HUAWEI-SYS-MAN-MIB", "hwSysLicenseFileName"), ("HUAWEI-SYS-MAN-MIB", "hwSysLicenseFileSize"), ("HUAWEI-SYS-MAN-MIB", "hwSysLicenseFileLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysPafLicenseGroup = hwSysPafLicenseGroup.setStatus('current')
if mibBuilder.loadTexts: hwSysPafLicenseGroup.setDescription('Description.')
hwSysRebootAndSwitchGrop = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 15)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysReboot"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveSwitchEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysRebootAndSwitchGrop = hwSysRebootAndSwitchGrop.setStatus('current')
if mibBuilder.loadTexts: hwSysRebootAndSwitchGrop.setDescription('Description.')
hwBootRomGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 16)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwBootRomBootDevice"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomHostName"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomFileName"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomIpOnEthernet"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomIpOnBackPlane"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomHostIp"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomGatewayIp"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomUserName"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomPassword"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomTargetName"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomStartupScript"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomXModemBaudRate"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomVersion"), ("HUAWEI-SYS-MAN-MIB", "hwBootRomProcessorNo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBootRomGroup = hwBootRomGroup.setStatus('current')
if mibBuilder.loadTexts: hwBootRomGroup.setDescription('Description.')
hwSystemCfcardNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 17)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysMasterCfcardError"), ("HUAWEI-SYS-MAN-MIB", "hwSysSlaveCfcardError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSystemCfcardNotificationGroup = hwSystemCfcardNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwSystemCfcardNotificationGroup.setDescription('A collection of notification about system cfcard.')
hwSysUpgradeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 18)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwIssuMode"), ("HUAWEI-SYS-MAN-MIB", "hwIssuImageFile"), ("HUAWEI-SYS-MAN-MIB", "hwIssuPafFile"), ("HUAWEI-SYS-MAN-MIB", "hwIssuLicenseFile"), ("HUAWEI-SYS-MAN-MIB", "hwIssuPatchFile"), ("HUAWEI-SYS-MAN-MIB", "hwIssuState"), ("HUAWEI-SYS-MAN-MIB", "hwIssuConditionCheck"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysUpgradeGroup = hwSysUpgradeGroup.setStatus('current')
if mibBuilder.loadTexts: hwSysUpgradeGroup.setDescription('A collection of system upgrade.')
hwSysRebootInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 19)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysRebootTimes"), ("HUAWEI-SYS-MAN-MIB", "hwSysRebootReason"), ("HUAWEI-SYS-MAN-MIB", "hwSysRebootTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysRebootInfoGroup = hwSysRebootInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwSysRebootInfoGroup.setDescription('A collection of system upgrade.')
hwSysDeviceCheckGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 20)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysDeviceCheckStart"), ("HUAWEI-SYS-MAN-MIB", "hwSysDeviceCheckState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysDeviceCheckGroup = hwSysDeviceCheckGroup.setStatus('current')
if mibBuilder.loadTexts: hwSysDeviceCheckGroup.setDescription('A collection of system device checks.')
huaweiSysVoiceFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 21)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysVoiceFileNum"), ("HUAWEI-SYS-MAN-MIB", "hwSysVoiceFileName"), ("HUAWEI-SYS-MAN-MIB", "hwSysVoiceFileSize"), ("HUAWEI-SYS-MAN-MIB", "hwSysVoiceFileLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweiSysVoiceFileGroup = huaweiSysVoiceFileGroup.setStatus('current')
if mibBuilder.loadTexts: huaweiSysVoiceFileGroup.setDescription('A collection of objects providing mandatory system configureation file information.')
hwSysWlanApUpgradeCmdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 22)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeMode"), ("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeFileName"), ("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeServerIp"), ("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeServerUserName"), ("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeServerPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysWlanApUpgradeCmdGroup = hwSysWlanApUpgradeCmdGroup.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeCmdGroup.setDescription('A collection of system wlan ap upgrade.')
hwSysWlanApUpgradeStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 23)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeProgressStatus"), ("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeLoadProgress"), ("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeStorageProgress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysWlanApUpgradeStatusGroup = hwSysWlanApUpgradeStatusGroup.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeStatusGroup.setDescription('A collection of system wlan ap upgrade status.')
hwSysWlanApUpgradeNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 24)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeBeginNotify"), ("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeResultNotify"), ("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeUbootNotMatchNotify"), ("HUAWEI-SYS-MAN-MIB", "hwSysWlanApUpgradeAssistantPackageNotMatchNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSysWlanApUpgradeNotificationsGroup = hwSysWlanApUpgradeNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hwSysWlanApUpgradeNotificationsGroup.setDescription('A collection of system wlan ap upgrade notifications.')
huaweiSysAndroidFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 25)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysAndroidFileNum"), ("HUAWEI-SYS-MAN-MIB", "hwSysAndroidFileName"), ("HUAWEI-SYS-MAN-MIB", "hwSysAndroidFileSize"), ("HUAWEI-SYS-MAN-MIB", "hwSysAndroidFileLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweiSysAndroidFileGroup = huaweiSysAndroidFileGroup.setStatus('current')
if mibBuilder.loadTexts: huaweiSysAndroidFileGroup.setDescription('A collection of objects providing mandatory system android file information.')
huaweihwSysEvmTrapsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 19, 3, 2, 26)).setObjects(("HUAWEI-SYS-MAN-MIB", "hwSysEvmRoleName"), ("HUAWEI-SYS-MAN-MIB", "hwSysEvmDownloadFileName"), ("HUAWEI-SYS-MAN-MIB", "hwSysEvmInstallFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    huaweihwSysEvmTrapsObjectGroup = huaweihwSysEvmTrapsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: huaweihwSysEvmTrapsObjectGroup.setDescription('A collection of objects providing EVM system trap objects.')
mibBuilder.exportSymbols("HUAWEI-SYS-MAN-MIB", hwSysCFGFileSize=hwSysCFGFileSize, hwPatchProgramVersion=hwPatchProgramVersion, hwSysDeviceCheckState=hwSysDeviceCheckState, hwSysCFGFileEntry=hwSysCFGFileEntry, hwSysMultiSwtChassisId=hwSysMultiSwtChassisId, hwSysSlaveCfcardError=hwSysSlaveCfcardError, hwSysClockChangedNotification=hwSysClockChangedNotification, hwSysFileType=hwSysFileType, hwSysReloadScheduleIndex=hwSysReloadScheduleIndex, hwSysCFGFileIndex=hwSysCFGFileIndex, hwPatchEndIndex=hwPatchEndIndex, hwSysWlanApUpgradeServerIp=hwSysWlanApUpgradeServerIp, hwSysReloadScheduleTime=hwSysReloadScheduleTime, hwEvmDownloadFailedNotification=hwEvmDownloadFailedNotification, hwBootRomGroup=hwBootRomGroup, hwPatchErrorCode=hwPatchErrorCode, hwSysWlanApUpgradeStatus=hwSysWlanApUpgradeStatus, hwSysReloadScheduleEntry=hwSysReloadScheduleEntry, hwPatchRecordReset=hwPatchRecordReset, hwSysCurCFGFileIndex=hwSysCurCFGFileIndex, hwPatchBuildTime=hwPatchBuildTime, huaweiSystemManMIBCompliance=huaweiSystemManMIBCompliance, hwSysReloadImage=hwSysReloadImage, hwSysCFGFile=hwSysCFGFile, hwSystemBoardExclude=hwSystemBoardExclude, hwSysCurPafFileIndex=hwSysCurPafFileIndex, hwSysEvmNotifications=hwSysEvmNotifications, hwPatchErrorTableMax=hwPatchErrorTableMax, hwPatchErrorPatchIndex=hwPatchErrorPatchIndex, hwSysVoiceFileTable=hwSysVoiceFileTable, hwSysWlanApUpgradeCmdGroup=hwSysWlanApUpgradeCmdGroup, hwSysReloadOperateDestIndex=hwSysReloadOperateDestIndex, hwLoadPatchEntry=hwLoadPatchEntry, hwSysVoiceFileLocation=hwSysVoiceFileLocation, hwSysImageSize=hwSysImageSize, hwPatchStateActivePatchNum=hwPatchStateActivePatchNum, hwPatchUpdateTrap=hwPatchUpdateTrap, huaweiSystemManMIBGroups=huaweiSystemManMIBGroups, hwSysCurrent=hwSysCurrent, hwPatchFileLocation=hwPatchFileLocation, hwIssuState=hwIssuState, hwBootRomIpOnEthernet=hwBootRomIpOnEthernet, huaweiSystemManMIBConformance=huaweiSystemManMIBConformance, hwSysRebootRecordTable=hwSysRebootRecordTable, hwSysReloadCfgFile=hwSysReloadCfgFile, huaweiSystemManMIBCompliances=huaweiSystemManMIBCompliances, hwSysReloadRowStatus=hwSysReloadRowStatus, hwPatch=hwPatch, hwIssuMode=hwIssuMode, hwSysReloadLicenseFile=hwSysReloadLicenseFile, hwBootRomTargetName=hwBootRomTargetName, hwPatchErrorSlot=hwPatchErrorSlot, hwPatchTextLen=hwPatchTextLen, hwSysSlaveSwitchDst=hwSysSlaveSwitchDst, hwSysWlanApUpgradeNotificationsGroup=hwSysWlanApUpgradeNotificationsGroup, hwSysWlanApUpgradeAssistantPackageNotMatchNotify=hwSysWlanApUpgradeAssistantPackageNotMatchNotify, hwEvmVmAbnormalRestartNotification=hwEvmVmAbnormalRestartNotification, hwPatchFuncNum=hwPatchFuncNum, hwSysPafFileName=hwSysPafFileName, hwSysLicenseFileLocation=hwSysLicenseFileLocation, hwSysSlaveSwitchSuccessNotification=hwSysSlaveSwitchSuccessNotification, hwSysLicenseFileTable=hwSysLicenseFileTable, hwBootRomGatewayIp=hwBootRomGatewayIp, hwPatchType=hwPatchType, hwSysWlanApUpgradeBeginNotify=hwSysWlanApUpgradeBeginNotify, hwSysImageTable=hwSysImageTable, hwIssuImageFile=hwIssuImageFile, hwSysRebootRecordEntry=hwSysRebootRecordEntry, hwSysReloadAction=hwSysReloadAction, hwSysEvmTraps=hwSysEvmTraps, hwSysVoiceFileSize=hwSysVoiceFileSize, hwSysVoiceFileName=hwSysVoiceFileName, hwPatchStateDataUsed=hwPatchStateDataUsed, hwBootRomEntry=hwBootRomEntry, hwPatchTrap=hwPatchTrap, hwSysSourceIndexEntry=hwSysSourceIndexEntry, huaweiSystemManNotificationGroup=huaweiSystemManNotificationGroup, hwPatchInstallFailClear=hwPatchInstallFailClear, hwEvmVmAbnormalRunNotification=hwEvmVmAbnormalRunNotification, hwSysLicenseFileNum=hwSysLicenseFileNum, huaweiSysReloadGroup=huaweiSysReloadGroup, hwPatchHistoryEndTime=hwPatchHistoryEndTime, hwSysCurEntry=hwSysCurEntry, huaweiSysVoiceFileGroup=huaweiSysVoiceFileGroup, huaweiSystemManMIBObjects=huaweiSystemManMIBObjects, hwSysCurImageIndex=hwSysCurImageIndex, hwSysPafFileSize=hwSysPafFileSize, hwSysSlaveSwitchEnable=hwSysSlaveSwitchEnable, hwSysCurLicenseIndex=hwSysCurLicenseIndex, hwSysReloadEntity=hwSysReloadEntity, hwBootRomXModemBaudRate=hwBootRomXModemBaudRate, huaweiSysAndroidFileGroup=huaweiSysAndroidFileGroup, hwSysMasterCfcardError=hwSysMasterCfcardError, huaweiSysCFGFileGroup=huaweiSysCFGFileGroup, hwSysSwitchoverState=hwSysSwitchoverState, hwSysMultiSwtBoardType=hwSysMultiSwtBoardType, hwSysMasterHDError=hwSysMasterHDError, hwSysSwitchoverStateIndex=hwSysSwitchoverStateIndex, hwPatchFileSize=hwPatchFileSize, hwSysSlaveSwitchEnableStatus=hwSysSlaveSwitchEnableStatus, hwSysSlaveSwitchTable=hwSysSlaveSwitchTable, hwSysImageErrorNotification=hwSysImageErrorNotification, hwPatchNumMax=hwPatchNumMax, hwPatchOperateDestIndex=hwPatchOperateDestIndex, hwPatchIdleNum=hwPatchIdleNum, hwSysFileName=hwSysFileName, hwPatchDataMax=hwPatchDataMax, HWPatchErrorType=HWPatchErrorType, hwSysAndroidFileName=hwSysAndroidFileName, hwPatchLoadDestType=hwPatchLoadDestType, hwSysWlanApUpgradeStorageProgress=hwSysWlanApUpgradeStorageProgress, hwSysImageNum=hwSysImageNum, hwSysPafFileTable=hwSysPafFileTable, hwSysImageName=hwSysImageName, hwSysSlaveSwitchChassisNum=hwSysSlaveSwitchChassisNum, hwSysUpgradeGroup=hwSysUpgradeGroup, hwSysSlaveSwitchFailNotification=hwSysSlaveSwitchFailNotification, hwPatchErrorEntry=hwPatchErrorEntry, hwPatchStateTable=hwPatchStateTable, hwPatchHistoryBeginTime=hwPatchHistoryBeginTime, hwSysUpgradeTable=hwSysUpgradeTable, huaweiSysImageGroup=huaweiSysImageGroup, hwPatchInfoGroup=hwPatchInfoGroup, hwBootRomVersion=hwBootRomVersion, hwSysRebootInfo=hwSysRebootInfo, hwSumUpgradeSuccess=hwSumUpgradeSuccess, hwSysLocalClock=hwSysLocalClock, hwSysSwitchoverStateTable=hwSysSwitchoverStateTable, hwSysUpgrade=hwSysUpgrade, huaweiSystemHDNotificationGroup=huaweiSystemHDNotificationGroup, hwSysAndroidFileIndex=hwSysAndroidFileIndex, hwSysDeviceCheckStart=hwSysDeviceCheckStart, hwPatchIndex=hwPatchIndex, hwPatchAdminStatus=hwPatchAdminStatus, huaweihwSysEvmTrapsObjectGroup=huaweihwSysEvmTrapsObjectGroup, hwSysRebootAndSwitchGrop=hwSysRebootAndSwitchGrop, hwSysReload=hwSysReload, hwSysVoiceFileIndex=hwSysVoiceFileIndex, hwPatchLoadDestIndex=hwPatchLoadDestIndex, hwSysCfgFileErrorNotification=hwSysCfgFileErrorNotification, hwPatchStateCommonPatchNum=hwPatchStateCommonPatchNum, hwSysMultiSwtSlotId=hwSysMultiSwtSlotId, hwPatchFileEntry=hwPatchFileEntry, hwSysVoiceFileNum=hwSysVoiceFileNum, hwPatchBeginIndex=hwPatchBeginIndex, hwSysCFGFileReason=hwSysCFGFileReason, hwSysCurPatchFileIndex=hwSysCurPatchFileIndex, hwSysLicenseFileIndex=hwSysLicenseFileIndex, hwSysWlanApUpgradeUbootNotMatchNotify=hwSysWlanApUpgradeUbootNotMatchNotify, hwSysWlanApUpgradeNotifications=hwSysWlanApUpgradeNotifications, hwSysReloadReason=hwSysReloadReason, hwSysWlanApUpgradeResultNotify=hwSysWlanApUpgradeResultNotify, hwPatchMalfunctionComebackTrap=hwPatchMalfunctionComebackTrap, hwPatchHistoryProgrameVersion=hwPatchHistoryProgrameVersion, hwPatchDataLen=hwPatchDataLen, hwSysWlanApUpgradeServerPassword=hwSysWlanApUpgradeServerPassword, hwBootRomProcessorNo=hwBootRomProcessorNo, hwSysPafFile=hwSysPafFile, hwSysLicenseFileSize=hwSysLicenseFileSize, hwPatchFileTable=hwPatchFileTable, hwSysSlaveSwitchIndex=hwSysSlaveSwitchIndex, hwPatchTextMax=hwPatchTextMax, hwBootRomPassword=hwBootRomPassword, hwSysLatestRebootErrorInfo=hwSysLatestRebootErrorInfo, hwBootRomHostName=hwBootRomHostName, hwPatchUsedFileName=hwPatchUsedFileName, hwBootRomIndex=hwBootRomIndex, hwPatchFileIndex=hwPatchFileIndex, hwPatchActiveOverTimeTrap=hwPatchActiveOverTimeTrap, hwSysImageVersion=hwSysImageVersion, hwBootRomStartupScript=hwBootRomStartupScript, hwSlotId=hwSlotId, hwSysCurGroup=hwSysCurGroup, hwPatchErrorTable=hwPatchErrorTable, hwSysReloadOperateDestType=hwSysReloadOperateDestType, hwSysWlanApUpgradeLoadProgress=hwSysWlanApUpgradeLoadProgress, hwSystemCfcardNotificationGroup=hwSystemCfcardNotificationGroup, hwPatchId=hwPatchId, hwSysImageIndex=hwSysImageIndex, hwSysSwitchoverStateMultiEntry=hwSysSwitchoverStateMultiEntry, hwSysReloadScheduleTable=hwSysReloadScheduleTable, hwIssuIndex=hwIssuIndex, huaweiSystemManMIBNotifications=huaweiSystemManMIBNotifications, hwPatchStateRuningPatchNum=hwPatchStateRuningPatchNum, hwSysCurEntPhysicalIndex=hwSysCurEntPhysicalIndex, hwSysImage=hwSysImage, hwSysEvmInstallFileName=hwSysEvmInstallFileName, hwPatchFileGroup=hwPatchFileGroup, hwSysImageLocation=hwSysImageLocation, hwSysReloadPatchFile=hwSysReloadPatchFile, hwPatchHistoryIndex=hwPatchHistoryIndex, hwSysAndroidFileLocation=hwSysAndroidFileLocation, hwSysMultiSwtInfo=hwSysMultiSwtInfo, hwSysPafFileGroup=hwSysPafFileGroup, hwLoadPatchTable=hwLoadPatchTable, hwEvmVmNotRunningNotification=hwEvmVmNotRunningNotification, hwSysSwitchoverSlotId=hwSysSwitchoverSlotId, hwSysImageEntry=hwSysImageEntry, hwSysAndroidFileReason=hwSysAndroidFileReason, hwPatchErrorTrap=hwPatchErrorTrap, hwSysSwitchoverStateEntry=hwSysSwitchoverStateEntry, hwPatchTable=hwPatchTable, hwPatchInfo=hwPatchInfo, hwPatchHistoryEntry=hwPatchHistoryEntry, hwPatchStateDeactivePatchNum=hwPatchStateDeactivePatchNum, hwSysReloadVoiceFile=hwSysReloadVoiceFile, hwSysLicenseChangeNotification=hwSysLicenseChangeNotification, hwSysReloadNotification=hwSysReloadNotification, hwPatchLatestId=hwPatchLatestId, hwSysEvmRoleName=hwSysEvmRoleName, hwSysCurVoiceFileIndex=hwSysCurVoiceFileIndex, hwSysWlanApUpgrade=hwSysWlanApUpgrade, hwIssuLicenseFile=hwIssuLicenseFile, hwPatchStateEntry=hwPatchStateEntry, hwPatchLoadState=hwPatchLoadState, hwSysIssuNotification=hwSysIssuNotification, hwSysSourceIndexTable=hwSysSourceIndexTable, hwPatchHistoryVersion=hwPatchHistoryVersion, hwSysReloadPafFile=hwSysReloadPafFile, hwSysWlanApUpgradeCmd=hwSysWlanApUpgradeCmd, hwSysLicenseFileEntry=hwSysLicenseFileEntry, hwPatchActiveTime=hwPatchActiveTime, hwSysWlanApUpgradeMode=hwSysWlanApUpgradeMode, hwSysSlaveSwitchSrc=hwSysSlaveSwitchSrc, hwSysLicenseFile=hwSysLicenseFile, hwPatchHistoryAction=hwPatchHistoryAction, hwSysWlanApUpgradeFileName=hwSysWlanApUpgradeFileName, hwSysAndroidFileSize=hwSysAndroidFileSize, hwPatchOperateDestType=hwPatchOperateDestType, hwSysAndroidFileTable=hwSysAndroidFileTable, hwPatchTrapEnble=hwPatchTrapEnble, hwPatchFailReason=hwPatchFailReason, hwPatchStateTempPatchNum=hwPatchStateTempPatchNum, hwSysAndroidFileEntry=hwSysAndroidFileEntry, hwSysPafFileIndex=hwSysPafFileIndex, hwSysReloadPatchState=hwSysReloadPatchState, hwPatchBase=hwPatchBase, hwSysRebootReason=hwSysRebootReason, hwSystemBoardExcludeClear=hwSystemBoardExcludeClear, hwSysReloadSchedule=hwSysReloadSchedule, hwPatchStateTotalPatchNum=hwPatchStateTotalPatchNum, hwSysPafFileVersion=hwSysPafFileVersion, hwSysRebootTime=hwSysRebootTime, hwSysCurTable=hwSysCurTable, hwSysDeviceCheck=hwSysDeviceCheck, hwPatchFileNum=hwPatchFileNum, hwSysPafFileEntry=hwSysPafFileEntry, hwSysMultiSwtStateIndex=hwSysMultiSwtStateIndex, hwPatchInstallFail=hwPatchInstallFail, hwBootRomTable=hwBootRomTable, hwPatchSlotIndex=hwPatchSlotIndex, hwIssuPatchFile=hwIssuPatchFile, PYSNMP_MODULE_ID=huaweiSystemManMIB, hwSysPafFileNum=hwSysPafFileNum)
mibBuilder.exportSymbols("HUAWEI-SYS-MAN-MIB", hwPatchErrorIndex=hwPatchErrorIndex, hwSysWlanApUpgradeProgressStatus=hwSysWlanApUpgradeProgressStatus, hwSysSwitchoverBoardType=hwSysSwitchoverBoardType, hwSysAndroidFile=hwSysAndroidFile, hwSysEvmDownloadFileName=hwSysEvmDownloadFileName, hwPatchTrapsGrop=hwPatchTrapsGrop, hwSysWlanApUpgradeServerUserName=hwSysWlanApUpgradeServerUserName, hwSysPafLicenseGroup=hwSysPafLicenseGroup, hwSysCFGFileNum=hwSysCFGFileNum, hwSysCFGFileLocation=hwSysCFGFileLocation, hwSysPafChangeNotification=hwSysPafChangeNotification, hwSysImageReason=hwSysImageReason, hwPatchHistoryTable=hwPatchHistoryTable, hwPatchOperateState=hwPatchOperateState, hwSysDeviceCheckGroup=hwSysDeviceCheckGroup, hwLoadPatchRowState=hwLoadPatchRowState, hwSysVoiceFileEntry=hwSysVoiceFileEntry, hwSysCFGFileName=hwSysCFGFileName, hwSysCFGFileTable=hwSysCFGFileTable, hwSysPafFileLocation=hwSysPafFileLocation, hwPatchEntry=hwPatchEntry, hwSysReloadAndroidFile=hwSysReloadAndroidFile, hwBootRom=hwBootRom, hwSysAndroidFileNum=hwSysAndroidFileNum, hwSysSlaveSwitchEntry=hwSysSlaveSwitchEntry, hwPatchVersion=hwPatchVersion, huaweiSystemManMIB=huaweiSystemManMIB, hwSysWlanApUpgradeStatusGroup=hwSysWlanApUpgradeStatusGroup, huaweiSysClockGroup=huaweiSysClockGroup, hwEvmInstallFailedNotification=hwEvmInstallFailedNotification, hwSysUpgradeEntry=hwSysUpgradeEntry, hwPatchFileVersion=hwPatchFileVersion, hwPatchErrorPatchFileName=hwPatchErrorPatchFileName, hwSysLicenseFileName=hwSysLicenseFileName, hwSysClock=hwSysClock, hwSysEvmTrapsObject=hwSysEvmTrapsObject, hwSysRebootTimes=hwSysRebootTimes, hwSysSwitchoverInfo=hwSysSwitchoverInfo, hwBootRomFileName=hwBootRomFileName, hwSysSourceIndex=hwSysSourceIndex, hwSysRebootRecordIndex=hwSysRebootRecordIndex, hwIssuConditionCheck=hwIssuConditionCheck, hwPatchFileName=hwPatchFileName, hwPatchStateTextUsed=hwPatchStateTextUsed, hwBootRomIpOnBackPlane=hwBootRomIpOnBackPlane, hwBootRomUserName=hwBootRomUserName, hwBootRomBootDevice=hwBootRomBootDevice, hwPatchLoadGroup=hwPatchLoadGroup, hwPatchDescription=hwPatchDescription, hwSysRebootInfoGroup=hwSysRebootInfoGroup, hwSysSlaveSwitchOperType=hwSysSlaveSwitchOperType, hwIssuPafFile=hwIssuPafFile, hwPatchHistoryTableMax=hwPatchHistoryTableMax, hwSysFileIndex=hwSysFileIndex, hwSysSwitchoverStateMultiTable=hwSysSwitchoverStateMultiTable, hwSysSlaveHDError=hwSysSlaveHDError, hwBootRomHostIp=hwBootRomHostIp, hwSysDelayReboot=hwSysDelayReboot, hwSysReboot=hwSysReboot, hwSysVoiceFile=hwSysVoiceFile)
