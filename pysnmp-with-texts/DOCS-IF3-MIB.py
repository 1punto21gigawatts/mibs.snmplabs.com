#
# PySNMP MIB module DOCS-IF3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-IF3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
NodeName, = mibBuilder.importSymbols("CLAB-TOPO-MIB", "NodeName")
docsDevEvLevel, docsDevEvLastTime, docsDevEvId, docsDevEvText = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel", "docsDevEvLastTime", "docsDevEvId", "docsDevEvText")
DocsisUpstreamType, DocsEqualizerData, DocsisQosVersion, TenthdB, TenthdBmV = mibBuilder.importSymbols("DOCS-IF-MIB", "DocsisUpstreamType", "DocsEqualizerData", "DocsisQosVersion", "TenthdB", "TenthdBmV")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
InetAddressIPv4, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressIPv6")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
SnmpTagList, = mibBuilder.importSymbols("SNMP-TARGET-MIB", "SnmpTagList")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Unsigned32, NotificationType, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, MibIdentifier, ObjectIdentity, ModuleIdentity, Bits, iso, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Bits", "iso", "TimeTicks", "Counter32")
TruthValue, DisplayString, StorageType, RowStatus, TextualConvention, DateAndTime, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "StorageType", "RowStatus", "TextualConvention", "DateAndTime", "MacAddress")
docsIf3Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20))
docsIf3Mib.setRevisions(('2017-06-15 00:00', '2016-08-04 00:00', '2016-05-05 00:00', '2015-05-20 00:00', '2015-04-08 00:00', '2013-11-19 00:00', '2013-04-04 00:00', '2012-11-13 00:00', '2012-08-09 00:00', '2011-02-10 00:00', '2010-06-11 00:00', '2010-01-15 00:00', '2009-05-29 00:00', '2009-01-21 00:00', '2008-05-22 00:00', '2008-02-15 00:00', '2007-12-06 00:00', '2007-08-03 00:00', '2007-05-18 00:00', '2007-02-23 00:00', '2006-12-07 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsIf3Mib.setRevisionsDescriptions(('Revised Version includes ECN DOCS-IF3-MIB-N-17.1741-1 to add Apache license.', 'Revised Version includes ECN DOCS-IF3-MIB-N-16.1560-1', 'Revised Version includes ECNs CCAP-OSSIv3.1-N-1509-1 and OSSIv3.0-N-15.1398-1; supersedes CCAP-OSSIv3.1-N-16.1431-1', 'Revised Version includes ECN CM-OSSIv3.1-N-15.1309-1', 'Revised Version includes ECN CM-OSSIv3.1-N-14.1222-3', 'Revised Version includes ECN OSSIv3.0-N-13.1119-3 and published as I22', 'Revised Version includes ECNs OSSIv3.0-N-12.1083 and OSSIv3.0-N-13.1093 and published as I21', 'Revised Version includes ECN OSSIv3.0-N-12.1079-4 and published as I20', 'Revised Version includes ECN OSSIv3.0-N-12.1064-3 and published as I19', 'Revised Version includes ECNs OSSIv3.0-N-10.0962-5 and OSSIv3.0-N-10.0984-1 and published as I14', 'Revised Version includes ECN OSSIv3.0-N-10.0906-2 and published as I12', 'Revised Version includes ECNs OSSIv3.0-N-09.0871-4 OSSIv3.0-N-09.0872-4 OSSIv3.0-N-09.0881-3 and published as I11', 'Revised Version includes ECN OSSIv3.0-N-09.0775-3 and published as I09', 'Revised Version includes ECNs OSSIv3.0-N-08.0651-3 OSSIv3.0-N-08.0700-4 and published as I08', 'Revised Version includes ECN OSSIv3.0-N-08.0645-4 and published as I07', 'Revised Version includes ECN OSSIv3.0-N-07.0605-1 and published as I06', 'Revised Version includes ECNs OSSIv3.0-N-07.0522-6 OSSIv3.0-N-07.0554-4 and published as I05', 'Revised Version includes ECNs OSSIv3.0-N-07.0481-2 OSSIv3.0-N-07.0480-3 and published as I04', 'Revised Version includes ECNs OSSIv3.0-N-07.0447-2 OSSIv3.0-N-07.0446-4 OSSIv3.0-N-07.0445-3 OSSIv3.0-N-07.0441-4 OSSIv3.0-N-07.0422-5 OSSIv3.0-N-07.0413-3 OSSIv3.0-N-07.0410-4 OSSIv3.0-N-07.0392-1 OSSIv3.0-N-07.0384-1 OSSIv3.0-N-06.0357-1 and published as I03', 'Revised Version includes ECN OSSIv3.0-N-06.0357-1 and published as IO2', 'Initial version, published as part of the CableLabs OSSIv3.0 specification CM-SP-OSSIv3.0-I01-061207',))
if mibBuilder.loadTexts: docsIf3Mib.setLastUpdated('201706150000Z')
if mibBuilder.loadTexts: docsIf3Mib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: docsIf3Mib.setContactInfo('Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, Colorado 80027-9750 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsIf3Mib.setDescription("Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. This MIB module contains the management objects for the management of DOCSIS 3.0 features, primarily channel bonding, interface topology and enhanced signal quality monitoring. Copyright 1999-2017 Cable Television Laboratories, Inc. All rights reserved.")
class CmRegState(TextualConvention, Integer32):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Cable Modem - CMTS Interaction section.'
    description = "This data type defines the CM connectivity state as reported by the CM. The enumerated values associated with the CmRegState are: 'other' indicates any state not described below. 'notReady' indicates that the CM has not started the registration process yet. 'notSynchronized' indicates that the CM has not initiated or completed the synchronization of the downstream physical layer 'phySynchronized' indicates that the CM has completed the synchronization of the downstream physical layer 'dsTopologyResolutionInProgress' indicates that the CM is attempting to determine its MD-DS-SG 'usParametersAcquired' indicates that the CM has completed the upstream parameters acquisition or have completed the downstream and upstream service groups resolution, whether the CM is registering in a pre-3.0 or a 3.0 CMTS. 'rangingInProgress' indicates that the CM has initiated the ranging process. 'rangingComplete' indicates that the CM has completed initial ranging and received a Ranging Status of success from the CMTS in the RNG-RSP message. 'eaeInProgress' indicates that the CM has sent an Auth Info message for EAE. 'dhcpv4InProgress' indicates that the CM has sent a DHCPv4 DISCOVER to gain IP connectivity. 'dhcpv6InProgress' indicates that the CM has sent an DHCPv6 Solicit message. 'dhcpv4Complete' indicates that the CM has received a DHCPv4 ACK message from the CMTS. 'dhcpv6Complete' indicates that the CM has received a DHCPv6 Reply message from the CMTS. 'todEstablished' indicates that the CM has successfully acquired time of day. If the ToD is acquired after the CM is operational, this value should not be reported. 'securityEstablished' indicates that the CM has successfully completed the BPI initialization process. 'configFileDownloadComplete' indicates that the CM has completed the config file download process. 'registrationInProgress' indicates that the CM has sent a Registration Request (REG-REQ or REG-REQ-MP) 'registrationComplete' indicates that the CM has successfully completed the Registration process with the CMTS. 'accessDenied' indicates that the CM has received a registration aborted notification from the CMTS 'operational' indicates that the CM has completed all necessary initialization steps and is operational. 'bpiInit' indicates that the CM has started the BPI initialization process as indicated in the CM config file. If the CM already performed EAE, this state is skipped by the CM. 'forwardingDisabled' indicates that the registration process was completed, but the network access option in the received configuration file prohibits forwarding. 'rfMuteAll' indicates that the CM is instructed to mute all channels in the CM-CTRL-REQ message from CMTS."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 21, 5, 22, 6, 14, 15, 16, 7, 17, 8, 9, 10, 18, 11, 13, 12, 19, 20, 23))
    namedValues = NamedValues(("other", 1), ("notReady", 2), ("notSynchronized", 3), ("phySynchronized", 4), ("dsTopologyResolutionInProgress", 21), ("usParametersAcquired", 5), ("rangingInProgress", 22), ("rangingComplete", 6), ("eaeInProgress", 14), ("dhcpv4InProgress", 15), ("dhcpv6InProgress", 16), ("dhcpv4Complete", 7), ("dhcpv6Complete", 17), ("todEstablished", 8), ("securityEstablished", 9), ("configFileDownloadComplete", 10), ("registrationInProgress", 18), ("registrationComplete", 11), ("accessDenied", 13), ("operational", 12), ("bpiInit", 19), ("forwardingDisabled", 20), ("rfMuteAll", 23))

class CmtsCmRegState(TextualConvention, Integer32):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Cable Modem - CMTS Interaction section.'
    description = "This data type defines the CM connectivity states as reported by the CMTS. The enumerated values associated with the CmtsCmRegState are: 'other' indicates any state not described below. 'initialRanging' indicates that the CMTS has received an Initial Ranging Request message from the CM, and the ranging process is not yet complete. 'rangingAutoAdjComplete' indicates that the CM has completed initial ranging and the CMTS sends a Ranging Status of success in the RNG-RSP. 'startEae' indicates that the CMTS has received an Auth Info message for EAE from the CM. 'startDhcpv4' indicates that the CMTS has received a DHCPv4 DISCOVER message from the CM. 'startDhcpv6' indicates that the CMTS has received a DHCPv6 Solicit message from the CM. 'dhcpv4Complete' indicates that the CMTS has sent a DHCPv4 ACK message to the CM. 'dhcpv6Complete' indicates that the CMTS has sent a DHCPv6 Reply message to the CM. 'startConfigFileDownload' indicates that the CM has started the config file download. If the TFTP Proxy feature is not enabled, the CMTS may not report this state. 'configFileDownloadComplete' indicates that the CM has completed the config file download process. If the TFTP Proxy feature is not enabled, the CMTS is not required to report this state. 'startRegistration' indicates that the CMTS has received a Registration Request (REG-REQ or REG-REQ-MP) from the CM. 'registrationComplete' indicates that the CMTS has received a Registration Acknowledge (REG-ACK) with a confirmation code of okay/success. 'operational' indicates that the CM has completed all necessary initialization steps and is operational. 'bpiInit' indicates that the CMTS has received an Auth Info or Auth Request message as part of BPI Initialization. 'forwardingDisabled' indicates that the registration process was completed, but the network access option in the received configuration file prohibits forwarding. 'rfMuteAll' indicates that the CM is instructed to mute all channels in the CM-CTRL-REQ message from CMTS."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 10, 11, 12, 5, 13, 14, 15, 16, 6, 8, 9, 17, 18))
    namedValues = NamedValues(("other", 1), ("initialRanging", 2), ("rangingAutoAdjComplete", 4), ("startEae", 10), ("startDhcpv4", 11), ("startDhcpv6", 12), ("dhcpv4Complete", 5), ("dhcpv6Complete", 13), ("startConfigFileDownload", 14), ("configFileDownloadComplete", 15), ("startRegistration", 16), ("registrationComplete", 6), ("operational", 8), ("bpiInit", 9), ("forwardingDisabled", 17), ("rfMuteAll", 18))

class ScdmaSelectionString(TextualConvention, OctetString):
    reference = 'DOCSIS 3.0 Physical Layer Specification CM-SP-PHYv3.0-I05-070803, Mini-slot Numbering Parameters in UCD section.'
    description = "This data type represents the S-CDMA selection string for active codes used with Selectable Active Codes Mode 2. A 128-bit string indicating which codes are active. The first element in the string corresponds to code 0 (the all-ones code), and the last element in the string corresponds to code 127. A '1' element in the string indicates an active code, and a '0' indicates an unused code. A zero-length string is returned for an unknown or non-applicable value."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), )
class AmplitudeData(TextualConvention, OctetString):
    description = "This data type represents a sequence of spectral amplitudes. Each spectral amplitude value corresponds to a bin. The format of the bin measurement is as follows. Sequence of: 4 bytes: ChCenterFreq The center frequency of the upstream channel. 4 bytes: FreqSpan The width in Hz of the band across which the spectral amplitudes characterizing the channel are measured. 4 bytes: NumberOfBins The number of data points or bins that compose the spectral data. The leftmost bin corresponds to the lower band edge, the rightmost bin corresponds to the upper band edge, and the middle bin center is aligned with the center frequency of the analysis span. 4 bytes: BinSpacing The frequency separation between adjacent bin centers. It is derived from the frequency span and the number of bins or data points. The bin spacing is computed as: BinSpacing = FrequencySpan/(NumberOfBins -1) The larger the number of bins the finer the resolution. 4 bytes: ResolutionBW The resolution bandwidth or equivalent noise bandwidth of each bin. If spectral windowing is used (based on vendor implementation), the bin spacing and resolution bandwidth would not generally be the same. n bytes: Amplitude (2 bytes * NumberOfBins) A sequence of two byte elements. Each element represents the spectral amplitudes in relation to the expected received signal power of a bin, in units of 0.01dB. That is, a test CMTS input signal with square-root raised-cosine spectrum, bandwidth equal to the expected received signal bandwidth, and power equal to the expected received signal power, which is present for the entire spectrum sampling period, will exhibit a spectrum measurement of 0 dB average power in each bin of the signal passband. Each bin element amplitude value format is 2's complement which provides a range of -327.68 dB to 327.67 dB amplitude value for the bin measurement."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 4116), )
class SpectrumAnalysisWindowFunction(TextualConvention, Integer32):
    reference = "Harris, Fredric J. (Jan 1978). 'On the use of Windows for Harmonic Analysis with the Discrete Fourier Transform'. Proceedings of the IEEE, Vol 66, Issue 1, Jan 1978 doi:10.1109/PROC.1978.10837"
    description = 'This object controls the windowing function which will be used when performing the discrete fourier transform for the analysis. Note that all window functions may not be supported by all devices. If an attempt is made to set the object to an unsupported window function, an error of inconsistentValue will be returned.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 0), ("hann", 1), ("blackmanHarris", 2), ("rectangular", 3), ("hamming", 4), ("flatTop", 5), ("gaussian", 6), ("chebyshev", 7))

class Tlv8(TextualConvention, OctetString):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Common Radio Frequency Interface Encodings Annex.'
    description = 'This data type represents a single TLV encoding. This first octet represents the Type of the TLV. The second octet represents an unsigned 8-bit Length of the subsequent Value part of the TLV. The remaining octets represent the value. The Value could be an atomic value or a sequence of one or more sub-TLVs.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 255), )
class ChId(TextualConvention, Unsigned32):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Upstream Channel Descriptor (UCD) section.'
    description = 'This data type is an 8-bit number that represents a provisioned Downstream Channel ID (DCID) or a provisioned Upstream Channel ID (UCID). A Channel Id is unique per direction within a MAC Domain. The value zero is reserved for use when the channel ID is unknown.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

class ChSetId(TextualConvention, Unsigned32):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Channel Bonding section.'
    description = 'This data type is a CMTS-derived unique number within a MAC Domain used to reference a Channel Set within the CMTS. Values in the range of 1 to 255 define a single-channel Channel Set and correspond to either the Downstream Channel ID (DCID) or an Upstream Channel ID (UCID) of that channel. Values greater than 255 indicate a Channel Set consisting of two or more channels in the same direction within the MAC Domain. The value zero is reserved for use when the Channel Set is unknown.'
    status = 'current'
    displayHint = 'd'

class ChannelList(TextualConvention, OctetString):
    description = 'This data type represents a unique set of channel IDs in either the upstream or the downstream direction. Each octet represents a UCID or DCID depending on the direction of the channels within the list. The CMTS must ensure that this combination of channels is unique per direction within the MAC Domain. In order to facilitate Channel ID combinatorial uniqueness across all channel lists, a query to retrieve the value of an attribute of this type, returns the set of channels in the channel list in ascending order of Channel Ids.'
    status = 'current'
    displayHint = '1d,'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class AttributeMask(TextualConvention, Bits):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Service Flow Assignment section.'
    description = "This data type consists of a sequence of 32-bit positions used to select the bonding group or the channel to which a service flow is assigned. DOCSIS defines three types of Attribute Masks for which this type applies: The Provisionied Attribute Mask that is configured to a Bonding Group or a single-channel, whereas the Required Attribute and the Forbidden Attribute Mask are part of the Service Flow QOS Parameter Set to be matched with the Provisioned Attribute Mask of CMTS-configured Bonding Groups or single-channels. DOCSIS reserves the assignment of the meaning of the first 8 bit positions (left to right) as follows: Bit 0: 'bonding' Bit 1: 'lowLatency' Bit 2: 'highAvailability' Bit positions 3-15 are reserved. Bit positions 16-31 are freely assigned by operators to represent their own constraints on the channel(s) selection for a particular service flow."
    status = 'current'
    namedValues = NamedValues(("bonding", 0), ("lowLatency", 1), ("highAvailability", 2))

class AttrAggrRuleMask(TextualConvention, OctetString):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Service Flow Assignment section.'
    description = 'This data type represents a sequence of 32-bit positions that defines logical (e.g., AND, OR) operations to match against the channel list Provisioned Mask and Service Flow Required Mask bit positions when the CMTS is determining the service flow for assignment to a bonding group not configured by the management system.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class RcpId(TextualConvention, OctetString):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, RCP-ID section in the Common Radio Frequency Interface Encodings Annex.'
    description = "This data type defines a 'Receive Channel Profile Identifier' (RCP-ID). An RCP-ID consists of 5-octet length string where the first 3-bytes (from left to right corresponds to the Organizational Unique ID (OUI) followed by a two-byte vendor-maintained identifier to represent multiple versions or models of RCP-IDs."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 5)
    fixedLength = 5

class Dsid(TextualConvention, Unsigned32):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, DSID Definition section.'
    description = 'This data type defines the 20-bit Downstream Service Identifier (DSID) used by the CM for downstream resequencing, filtering, and forwarding. The value zero is reserved for use when the DSID is unknown or does not apply.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 1048575)

class RangingState(TextualConvention, Integer32):
    reference = 'DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Cable Modem - CMTS Interaction section.'
    description = "This data type defines the CM ranging state as reported by the CMTS. The enumerated values associated with the RangingState are: 'other' indicates any state not described below. 'aborted' indicates that the CMTS has sent a ranging abort. 'retriesExceeded' indicates that the CM ranging retry limit has exceeded. 'success' indicates that the CMTS has sent a ranging success in the ranging response. 'continue' indicates that the CMTS has sent a ranging continue in the ranging response. 'timeoutT4' indicates that the T4 timer expired on the CM."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("aborted", 2), ("retriesExceeded", 3), ("success", 4), ("continue", 5), ("timeoutT4", 6))

class IfDirection(TextualConvention, Integer32):
    description = 'Indicates a direction on an RF MAC interface. The value downstream(1) is from Cable Modem Termination System to Cable Modem. The value upstream(2) is from Cable Modem to Cable Modem Termination System.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("downstream", 1), ("upstream", 2))

docsIf3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 0))
docsIf3MibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1))
docsIf3CmtsEventNotif = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 0, 1)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLastTime"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: docsIf3CmtsEventNotif.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsEventNotif.setDescription("A notification to report a DOCSIS event detected on the CMTS. This notification includes the following information: - docsDevEvLevel: the DOCSIS priority level associated with the event. - docsDevEvId: the numeric identifier of the event. - docsDevEvText: The text description of the event. - docsDevEvLastTime: The local date and time when this event was generated. - sysName: the administratively-assigned name of the CMTS. e.g., The fully-qualified domain name as indicated in RFC 3418 or in the absence the IP address of the CMTS administrative interface in dot '.' notation for IPv4 and colon ':' notation for and IPv6 Address as indicated in RFC 3164")
if mibBuilder.loadTexts: docsIf3CmtsEventNotif.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I07-080522, Format and Content for Event, Syslog, and SNMP Notification Annex. RFC 3418, RFC 3164')
docsIf3CmEventNotif = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 0, 2)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLastTime"))
if mibBuilder.loadTexts: docsIf3CmEventNotif.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEventNotif.setDescription('A notification to report a DOCSIS event detected on the CM. This notification includes the following information: - docsDevEvLevel: the priority level associated with the event. - docsDevEvId: the unique identifier of the event that occurred. - docsDevEvText: a textual description of the event. - docsDevEvLastTime: The local date and time when this event was generated.')
if mibBuilder.loadTexts: docsIf3CmEventNotif.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I07-080522, Format and Content for Event, Syslog, and SNMP Notification Annex.')
docsIf3CmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1), )
if mibBuilder.loadTexts: docsIf3CmStatusTable.setReference('RFC 4546')
if mibBuilder.loadTexts: docsIf3CmStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusTable.setDescription('This object defines attributes of the CM connectivity status. This object provides CM connectivity status information of the CM previously available in the SNMP table docsIfCmStatusTable.')
docsIf3CmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf3CmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusEntry.setDescription('The conceptual row of docsIf3CmStatusTable. An instance exist for the CM MAC Domain Interface.')
docsIf3CmStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 1), CmRegState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusValue.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Establishing IP Connectivity section.')
if mibBuilder.loadTexts: docsIf3CmStatusValue.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusValue.setDescription('This attribute denotes the current CM connectivity state. For the case of IP acquisition related states, this attribute reflects states for the current CM provisioning mode, not the other DHCP process associated with dual stack operation.')
docsIf3CmStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 5), ValueSizeConstraint(6, 6), ValueSizeConstraint(7, 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusCode.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I09-090529, Format and Content for Event, Syslog, and SNMP Notification Annex.')
if mibBuilder.loadTexts: docsIf3CmStatusCode.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusCode.setDescription("This attribute denotes the status code for CM as defined in the OSSI Specification. The status code consists of a single character indicating error groups, followed by a two- or three-digit number indicating the status condition, followed by a decimal. An example of a returned value could be 'T101.0'. The zero-length hex string indicates no status code yet registered.")
docsIf3CmStatusResets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 3), Counter32()).setUnits('resets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusResets.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusResets.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusResets.setDescription('This attribute denotes the number of times the CM reset or initialized this interface. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusLostSyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 4), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusLostSyncs.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusLostSyncs.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusLostSyncs.setDescription('This attribute denotes the number of times the CM lost synchronization with the downstream channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusInvalidMaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 5), Counter32()).setUnits('maps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusInvalidMaps.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusInvalidMaps.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusInvalidMaps.setDescription('This attribute denotes the number of times the CM received invalid MAP messages. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusInvalidUcds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 6), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusInvalidUcds.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusInvalidUcds.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusInvalidUcds.setDescription('This attribute denotes the number of times the CM received invalid UCD messages. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusInvalidRangingRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusInvalidRangingRsps.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusInvalidRangingRsps.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusInvalidRangingRsps.setDescription('This attribute denotes the number of times the CM received invalid ranging response messages. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusInvalidRegRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusInvalidRegRsps.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusInvalidRegRsps.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusInvalidRegRsps.setDescription('This attribute denotes the number of times the CM received invalid registration response messages. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusT1Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 9), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusT1Timeouts.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusT1Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusT1Timeouts.setDescription('This attribute denotes the number of times counter T1 expired in the CM. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusT2Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 10), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusT2Timeouts.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusT2Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusT2Timeouts.setDescription('This attribute denotes the number of times counter T2 expired in the CM. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusUCCsSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 11), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUCCsSuccesses.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusUCCsSuccesses.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3CmStatusUCCsSuccesses.setDescription('This attribute denotes the number of successful Upstream Channel Change transactions. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusUCCFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 12), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUCCFails.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusUCCFails.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3CmStatusUCCFails.setDescription('This attribute denotes the number of failed Upstream Channel Change transactions. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the CM MAC Domain interface.')
docsIf3CmStatusEnergyMgt1x1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusEnergyMgt1x1OperStatus.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I20-121155, Energy Management Mode Indicator section.')
if mibBuilder.loadTexts: docsIf3CmStatusEnergyMgt1x1OperStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusEnergyMgt1x1OperStatus.setDescription("This attribute indicates whether the CM is currently operating in Energy Management 1x1 Mode. If this attribute returns 'true', the CM is operating in Energy Management 1x1 Mode.")
docsIf3CmStatusUsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2), )
if mibBuilder.loadTexts: docsIf3CmStatusUsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsTable.setDescription("This object defines PHY and MAC information about the CM's upstream channels operating in Multiple Transmit Channel (MTC) mode or in a Pre-3.0 DOSCIS transmit channel mode. This object provides per-CM Upstream channel information previously available in the SNMP table docsIfCmStatusTable.")
docsIf3CmStatusUsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf3CmStatusUsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsEntry.setDescription("The conceptual row of docsIf3CmStatusUsTable. An instance exist for each of the CM's SC-QAM upstream channels which are configured for data transmission.")
docsIf3CmStatusUsTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1, 1), TenthdBmV()).setUnits('TenthdBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUsTxPower.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsTxPower.setDescription('This attribute represents the operational CM transmit power for this SC-QAM upstream channel. In order for this attribute to provide consistent information under all circumstances, a 3.1 CM will report the average total power for the SC-QAM channel the same as was done for DOCSIS 3.0, regardless of whether it is operating with a 3.1 or a 3.0 CMTS. The value that is reported was referred to as Pr in the DOCSIS 3.0 PHY Spec. This attribute is not applicable for OFDMA channels.')
docsIf3CmStatusUsT3Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1, 2), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUsT3Timeouts.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusUsT3Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsT3Timeouts.setDescription('This attribute denotes the number of times counter T3 expired in the CM for this upstream channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
docsIf3CmStatusUsT4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1, 3), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUsT4Timeouts.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusUsT4Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsT4Timeouts.setDescription('This attribute denotes the number of times counter T4 expired in the CM for this upstream channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
docsIf3CmStatusUsRangingAborteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1, 4), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUsRangingAborteds.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusUsRangingAborteds.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsRangingAborteds.setDescription('This attribute denotes the number of times the ranging process was aborted by the CMTS. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime ([RFC2863]) for the associated upstream channel.')
docsIf3CmStatusUsModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1, 5), DocsisUpstreamType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUsModulationType.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusUsModulationType.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsModulationType.setDescription("This attribute indicates modulation type status currently used by the CM for this upstream channel. Since this object specifically identifies PHY Layer mode, the shared upstream channel type 'tdmaAndAtdma' is not permitted.")
docsIf3CmStatusUsEqData = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1, 6), DocsEqualizerData()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUsEqData.setReference('RFC 2863. RFC 4546.')
if mibBuilder.loadTexts: docsIf3CmStatusUsEqData.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsEqData.setDescription('This attribute indicates the pre-equalization data for the specified upstream Channel on this CM after convolution with data indicated in the RNG-RSP. This data is valid when docsIfUpChannelPreEqEnable RFC 4546 is set to true.')
docsIf3CmStatusUsT3Exceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1, 7), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUsT3Exceededs.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmStatusUsT3Exceededs.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsT3Exceededs.setDescription('This attribute denotes the number of times for excessive T3 timeouts. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
docsIf3CmStatusUsIsMuted = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUsIsMuted.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522 section Media Access Control specification.')
if mibBuilder.loadTexts: docsIf3CmStatusUsIsMuted.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsIsMuted.setDescription('This attribute denotes whether the upstream channel is muted.')
docsIf3CmStatusUsRangingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 2, 1, 9), RangingState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmStatusUsRangingStatus.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, section Media Access Control specification.')
if mibBuilder.loadTexts: docsIf3CmStatusUsRangingStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmStatusUsRangingStatus.setDescription('This attribute denotes the ranging state of the CM.')
docsIf3CmtsCmRegStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3), )
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusTable.setDescription("This object defines attributes that represent the CM's registration status as tracked by the CMTS. Refer to the individual attribute definitions for applicability to 3.0 and 3.1 Cable Modems.")
docsIf3CmtsCmRegStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId"))
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusEntry.setDescription('The conceptual row of docsIf3CmtsCmRegStatusTable.')
docsIf3CmtsCmRegStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusId.setDescription('This attribute uniquely identifies a CM. The CMTS must assign a single id value for each CM MAC address seen by the CMTS. The CMTS should ensure that the association between an Id and MAC Address remains constant during CMTS uptime.')
docsIf3CmtsCmRegStatusMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusMacAddr.setDescription('This attribute represents the MAC address of the CM. If the CM has multiple MAC addresses, this is the MAC address associated with the MAC Domain interface.')
docsIf3CmtsCmRegStatusIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 3), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusIPv6Addr.setDescription('This attribute represents the IPv6 address of the CM. If the CM has no Internet address assigned, or the Internet address is unknown, the value of this attribute is the all zeros address.')
docsIf3CmtsCmRegStatusIPv6LinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 4), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusIPv6LinkLocal.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusIPv6LinkLocal.setDescription('This attribute represents the IPv6 local scope address of the CM. If the CM has no link local address assigned, or the Internet address is unknown, the value of this attribute is the all zeros address.')
docsIf3CmtsCmRegStatusIPv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 5), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusIPv4Addr.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusIPv4Addr.setDescription('This attribute represents the IPv4 address of this CM. If the CM has no IP address assigned, or the IP address is unknown, this object returns 0.0.0.0.')
docsIf3CmtsCmRegStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 6), CmtsCmRegState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusValue.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Cable Modem Initialization and Reinitialization section.')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusValue.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusValue.setDescription('This attribute represents the current CM connectivity state.')
docsIf3CmtsCmRegStatusMdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusMdIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusMdIfIndex.setDescription('This attribute represents the interface Index of the CMTS MAC Domain where the CM is active. If the interface is unknown, the CMTS returns a value of zero.')
docsIf3CmtsCmRegStatusMdCmSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusMdCmSgId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Cable Modem Service Group (CM-SG) section.')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusMdCmSgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusMdCmSgId.setDescription('This attribute represents the ID of the MAC Domain CM Service Group Id (MD-CM-SG-ID) in which the CM is registered. If the ID is unknown, the CMTS returns a value of zero.')
docsIf3CmtsCmRegStatusRcpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 9), RcpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusRcpId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, RCP-ID section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusRcpId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusRcpId.setDescription('This attribute represents the RCP-ID associated with the CM if the CM is in DOCSIS 3.0 mode. If the RCP-ID is unknown or the CM is in DOCSIS 3.1 mode, the CMTS returns a five octet long string of zeros.')
docsIf3CmtsCmRegStatusRccStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusRccStatusId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusRccStatusId.setDescription('This attribute represents the RCC Id the CMTS used to configure the CM receive channel set during the registration process, if the CM is in DOCSIS 3.0 mode. If unknown or the CM is in DOCSIS 3.1 mode, the CMTS returns the value zero.')
docsIf3CmtsCmRegStatusRcsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 11), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusRcsId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Cable Modem Physical Receive Channel Configuration section and the Receive Channels section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusRcsId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusRcsId.setDescription('This attribute represents the Receive Channel Set (RCS) that the CM is currently using. If the RCS is unknown, the CMTS returns the value zero.')
docsIf3CmtsCmRegStatusTcsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 12), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusTcsId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Changes to the Transmit Channel Set section.')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusTcsId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusTcsId.setDescription('This attribute represents Transmit Channel Set (TCS) the CM is currently using. If the TCS is unknown, the CMTS returns the value zero.')
docsIf3CmtsCmRegStatusQosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 13), DocsisQosVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusQosVersion.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusQosVersion.setDescription('This attribute denotes the queuing services the CM registered, either DOCSIS 1.1 QoS or DOCSIS 1.0 CoS mode.')
docsIf3CmtsCmRegStatusLastRegTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusLastRegTime.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusLastRegTime.setDescription('This attribute represents the last time the CM registered.')
docsIf3CmtsCmRegStatusAddrResolutionReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusAddrResolutionReqs.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I13-100611, Secure Provisioning section. RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusAddrResolutionReqs.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusAddrResolutionReqs.setDescription('This attribute counts the number of upstream packets received on the SIDs assigned to a CM that are any of the following: Upstream IPv4 ARP Requests Upstream IPv6 Neighbor Solicitation Requests (For Routing CMTSs) Upstream IPv4 or IPv6 packets to unresolved destinations in locally connected downstream subnets in the HFC. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated MAC Domain interface.')
docsIf3CmtsCmRegStatusEnergyMgtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 16), Bits().clone(namedValues=NamedValues(("em1x1Mode", 0), ("dlsMode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusEnergyMgtEnabled.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610, Energy Management Features section.')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusEnergyMgtEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusEnergyMgtEnabled.setDescription('This attribute indicates which, if any, of the Energy Management Features are enabled for this CM. If this attribute returns the em1x1Mode(0) bit set, the CM is configured with the Energy Management 1x1 Feature enabled. If this attribute returns the dlsMode(1) bit set, the CM is configured with the DLS Feature enabled. If this attribute returns all bits cleared, the CM will not request to operate in any Energy Management mode of operation. Note: This attribute only indicates if an Energy Management Feature is enabled/disabled via the CM config file and registration request/response exchange and does not indicate whether the CM is actively operating in an Energy Management Mode.')
docsIf3CmtsCmRegStatusEnergyMgtOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 3, 1, 17), Bits().clone(namedValues=NamedValues(("em1x1Mode", 0), ("dlsMode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusEnergyMgtOperStatus.setReference('DOCSIS 3.1 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.1-I03-140610, Energy Management Mode Indicator section.')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusEnergyMgtOperStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmRegStatusEnergyMgtOperStatus.setDescription("This attribute indicates whether the CM is currently operating in an Energy Management Mode. If this attribute returns the em1x1Mode(0) bit set, the CM is operating in Energy Management 1x1 Mode. If this attribute returns the dlsMode(1) bit set, the CM is operating in DLS Mode. If this attribute returns all bits cleared, the CM is not operating in any Energy Management Mode. This attribute always returns 0x00 (no bits set) in the case when docsIf3CmtsCmRegStatusEnergyMgtEnabled is set to 0x00 (no Energy Management Features enabled). Note: dlsMode(1) and em1x1Mode(0) are mutually exclusive, thus a return value where both of these bits are 'true' is invalid.")
docsIf3CmtsCmUsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4), )
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusTable.setDescription('This object defines status information of the CM currently in use Upstream Logical Channels, as reported by the CMTS.')
docsIf3CmtsCmUsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId"), (0, "DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusChIfIndex"))
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusEntry.setDescription('The conceptual row of docsIf3CmtsCmUsStatusTable.')
docsIf3CmtsCmUsStatusChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusChIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusChIfIndex.setDescription('This attribute is a key that represents the ifIndex of the upstream interface.')
docsIf3CmtsCmUsStatusModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 2), DocsisUpstreamType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusModulationType.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusModulationType.setDescription('This attribute represents the modulation type currently used by this upstream channel.')
docsIf3CmtsCmUsStatusRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 3), TenthdBmV()).setUnits('TenthdBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusRxPower.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusRxPower.setDescription('This attribute represents the receive power of this upstream channel. The reported value represents the total average power for the channel regardless of whether the CM is reporting Pr, total average power, or P1.6r, the power spectral density in an equivalent 1.6 MHz spectrum.')
docsIf3CmtsCmUsStatusSignalNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 4), TenthdB()).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusSignalNoise.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusSignalNoise.setDescription('This attribute represents Signal/Noise ratio as perceived for upstream data from the CM on this upstream channel.')
docsIf3CmtsCmUsStatusMicroreflections = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('-dBc').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusMicroreflections.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusMicroreflections.setDescription('This attribute represents microreflections received on this upstream channel.')
docsIf3CmtsCmUsStatusEqData = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 6), DocsEqualizerData()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusEqData.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusEqData.setDescription('This attribute represents the equalization data for the CM on this upstream channel.')
docsIf3CmtsCmUsStatusUnerroreds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusUnerroreds.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusUnerroreds.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusUnerroreds.setDescription('This attribute represents the codewords received without error from the CM on this interface. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
docsIf3CmtsCmUsStatusCorrecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusCorrecteds.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusCorrecteds.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusCorrecteds.setDescription('This attribute represents the codewords received with correctable errors from the CM on this upstream channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
docsIf3CmtsCmUsStatusUncorrectables = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusUncorrectables.setReference('RFC 2863.')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusUncorrectables.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusUncorrectables.setDescription('This attribute represents the codewords received with uncorrectable errors from the CM on this upstream channel. Discontinuities in the value of this counter can occur at re-initialization of the managed system, and at other times as indicated by the value of ifCounterDiscontinuityTime for the associated upstream channel.')
docsIf3CmtsCmUsStatusHighResolutionTimingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 10), Integer32()).setUnits('time tick/(64*256)').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusHighResolutionTimingOffset.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusHighResolutionTimingOffset.setDescription("This attribute represents the current measured round trip time on this CM's upstream channel in units of (6.25 microseconds/(64*256)). This attribute returns zero if the value is unknown.")
docsIf3CmtsCmUsStatusIsMuted = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusIsMuted.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, section Media Access Control specification.')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusIsMuted.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusIsMuted.setDescription("This attribute has a value 'true' to indicate that the CM's upstream channel has been muted via CM-CTRL-REQ/CM-CTRL-RSP message exchange.")
docsIf3CmtsCmUsStatusRangingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 4, 1, 12), RangingState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusRangingStatus.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, section Media Access Control specification.')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusRangingStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmUsStatusRangingStatus.setDescription('This attribute denotes the ranging state of the CM.')
docsIf3MdChCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 5), )
if mibBuilder.loadTexts: docsIf3MdChCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdChCfgTable.setDescription('This object configures the association of downstream and upstream channels to a particular MAC Domain (MD) on a CMTS. The creation of channels and MAC domain object interface instances is vendor-specific. In particular, the assignment of the channel interface index is normally vendor-specific. Therefore, this object is intended only for associating channels to a MAC Domain and assumes that those channels were previously configured. The CMTS may have restrictions on which channels can be configured in the same MAC Domain. For example, it could require the upstream channels to be from the same line card. This object supports the creation and deletion of multiple instances. Creation of a new instance of this object requires the ChId attribute to be set.')
docsIf3MdChCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3MdChCfgChIfIndex"))
if mibBuilder.loadTexts: docsIf3MdChCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdChCfgEntry.setDescription('The conceptual row of docsIf3MdChCfgTable. The ifIndex key corresponds to the MAC Domain interface where the channel is configured. The CMTS persists all instances of MdChCfg across reinitializations.')
docsIf3MdChCfgChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: docsIf3MdChCfgChIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdChCfgChIfIndex.setDescription('This key represents the interface index of an existing upstream or downstream channel that is configured to be part of the MAC Domain. For the case of upstream interfaces the CMTS could reject the assignment of upstream logical channels under the same physical upstream interface to different MAC Domains.')
docsIf3MdChCfgIsPriCapableDs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 5, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3MdChCfgIsPriCapableDs.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdChCfgIsPriCapableDs.setDescription("If set to 'true', this attribute configures the downstream channel as Primary-Capable. The default value for a downstream channel is 'true'. This attribute is not relevant for upstream interfaces, therefore it reports the value 'false' for such interfaces. A CMTS may restrict the permitted value of this attribute based upon physical channel capabilities.")
docsIf3MdChCfgChId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 5, 1, 3), ChId().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3MdChCfgChId.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdChCfgChId.setDescription('This attribute contains the 8-bit Downstream Channel ID (DCID) or Upstream Channel ID (UCID) configured for the channel in the MAC Domain.')
docsIf3MdChCfgSfProvAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 5, 1, 4), AttributeMask().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3MdChCfgSfProvAttrMask.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdChCfgSfProvAttrMask.setDescription('This attribute contains Provisioned Attribute Mask of non-bonded service flow assignment to this channel.')
docsIf3MdChCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3MdChCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdChCfgRowStatus.setDescription('The status of this instance.')
docsIf3RccCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 6), )
if mibBuilder.loadTexts: docsIf3RccCfgTable.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RccCfgTable.setDescription('This object identifies the scope of the Receive Channel Configuration (RCC) and provides a top level container for the Receive Module and Receive Channel objects. The CMTS selects an instance of this object to assign to a CM when it registers. This object supports the creation and deletion of multiple instances.')
docsIf3RccCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3RccCfgRcpId"), (0, "DOCS-IF3-MIB", "docsIf3RccCfgRccCfgId"))
if mibBuilder.loadTexts: docsIf3RccCfgEntry.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RccCfgEntry.setDescription('The conceptual row of docsIf3RccCfgTable. The ifIndex key corresponds to the MAC Domain interface where the RCC is configured. The CMTS persists all instances of RccCfg across reinitializations.')
docsIf3RccCfgRcpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 6, 1, 1), RcpId())
if mibBuilder.loadTexts: docsIf3RccCfgRcpId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Standard Receive Channel Profile Encodings Annex.')
if mibBuilder.loadTexts: docsIf3RccCfgRcpId.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RccCfgRcpId.setDescription("This key represents the 'Receive Channel Profile Identifier' (RCP-ID) configured for the MAC Domain indicated by this instance.")
docsIf3RccCfgRccCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsIf3RccCfgRccCfgId.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RccCfgRccCfgId.setDescription('This key denotes an RCC combination assignment for a particular RcpId and is unique per combination of MAC Domain and RcpId.')
docsIf3RccCfgVendorSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 252)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RccCfgVendorSpecific.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Receive Channel Profile/Configuration Vendor Specific Parameters section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3RccCfgVendorSpecific.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RccCfgVendorSpecific.setDescription('This attribute contains vendor-specific information of the CM Receive Channel configuration.')
docsIf3RccCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 6, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RccCfgDescription.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RccCfgDescription.setDescription('This attribute contains a human-readable description of the CM RCP Configuration.')
docsIf3RccCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RccCfgRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RccCfgRowStatus.setDescription('The status of this instance.')
docsIf3RccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 7), )
if mibBuilder.loadTexts: docsIf3RccStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3RccStatusTable.setDescription('The RCC Status object provides a read-only view of the statically-configured (from the RccCfg object) and dynamically-created RCCs. The CMTS creates an RCC Status instance for each unique MAC Domain Cable Modem Service Group (MD-CM-SG) to which it signals an RCC to the CM.')
docsIf3RccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3RccStatusRcpId"), (0, "DOCS-IF3-MIB", "docsIf3RccStatusRccStatusId"))
if mibBuilder.loadTexts: docsIf3RccStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3RccStatusEntry.setDescription('The conceptual row of docsIf3RccStatusTable. The ifIndex key corresponds to the MAC Domain interface where the RCC is configured.')
docsIf3RccStatusRcpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 7, 1, 1), RcpId())
if mibBuilder.loadTexts: docsIf3RccStatusRcpId.setStatus('current')
if mibBuilder.loadTexts: docsIf3RccStatusRcpId.setDescription('This key represents the RCP-ID to which this instance applies.')
docsIf3RccStatusRccStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsIf3RccStatusRccStatusId.setStatus('current')
if mibBuilder.loadTexts: docsIf3RccStatusRccStatusId.setDescription('This key represents an RCC combination for a particular RcpId either from an RCC configuration object or a CMTS-determined RCC and is unique per combination of MAC Domain IfIndex and RcpId.')
docsIf3RccStatusRccCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3RccStatusRccCfgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3RccStatusRccCfgId.setDescription('This attribute identifies an RCC-Configured combination from which this instance was defined. If nonzero, it corresponds to the RccCfg instance from which the RCC was created. Zero means that the RCC was dynamically created by the CMTS.')
docsIf3RccStatusValidityCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3), ("wrongPrimaryDs", 4), ("missingPrimaryDs", 5), ("multiplePrimaryDs", 6), ("duplicateDs", 7), ("wrongFrequencyRange", 8), ("wrongConnectivity", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3RccStatusValidityCode.setStatus('current')
if mibBuilder.loadTexts: docsIf3RccStatusValidityCode.setDescription('This attribute indicates whether the RCC instance of this object is valid or not. An RCC Status instance from a configured or a dynamic RCC could become invalid, for example, due changes in the topology.')
docsIf3RccStatusValidityCodeText = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 7, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3RccStatusValidityCodeText.setStatus('current')
if mibBuilder.loadTexts: docsIf3RccStatusValidityCodeText.setDescription('This attribute contains the CMTS vendor-specific log information from the Receive Channel Configuration Status encoding.')
docsIf3RxChCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 8), )
if mibBuilder.loadTexts: docsIf3RxChCfgTable.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxChCfgTable.setDescription('The Receive Channel Configuration object permits an operator to configure how CMs registered with certain Receive Channel Profiles will configure the Receive Channels within their profile. When a CM registers with an RCP for which all Receive Channel Indices (RcIds) are configured in the Receive Module object and all Receive Channels are configured within this object, the CMTS should use the configuration within these objects to set the Receive Channel Configuration returned to the CM in a REG-RSP message. A CMTS may require configuration of all pertinent Receive Module and Receive Channel instances in order to register a CM that reports a Receive Channel Profile (RCP), including any standard Receive Channel Profiles. If the CM reports multiple RCPs, and Receive Module and Receive Channel objects have instances for more than one RCP, the particular RCP selected by the CMTS is not specified. A CMTS is not restricted to assigning Receive Modules based only on the contents of this object. This object supports the creation and deletion of multiple instances. Creation of a new instance of this object requires the ChIfIndex attribute to be set and a valid reference of a RccCfg instance.')
docsIf3RxChCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3RccCfgRcpId"), (0, "DOCS-IF3-MIB", "docsIf3RccCfgRccCfgId"), (0, "DOCS-IF3-MIB", "docsIf3RxChCfgRcId"))
if mibBuilder.loadTexts: docsIf3RxChCfgEntry.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxChCfgEntry.setDescription('The conceptual row of docsIf3RxChCfgTable. The ifIndex key corresponds to the MAC Domain interface where the RCC is configured. The CMTS persists all instances of ReceiveChannelCfg across reinitializations.')
docsIf3RxChCfgRcId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsIf3RxChCfgRcId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Receive Channel Index section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3RxChCfgRcId.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxChCfgRcId.setDescription('This key represents an identifier for the parameters of the Receive Channel instance within the Receive Channel Profile.')
docsIf3RxChCfgChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 8, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RxChCfgChIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxChCfgChIfIndex.setDescription('This attribute contains the interface index of a Downstream Channel that this Receive Channel Instance defines.')
docsIf3RxChCfgPrimaryDsIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 8, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RxChCfgPrimaryDsIndicator.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Receive Channel Primary Downstream Channel Indicator section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3RxChCfgPrimaryDsIndicator.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxChCfgPrimaryDsIndicator.setDescription("If set to 'true', this attribute indicates the Receive Channel is to be the primary-capable downstream channel for the CM receiving this RCC. Otherwise, the downstream channel is to be a non-primary-capable channel.")
docsIf3RxChCfgRcRmConnectivityId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RxChCfgRcRmConnectivityId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Receive Channel Connectivity section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3RxChCfgRcRmConnectivityId.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxChCfgRcRmConnectivityId.setDescription('This attribute indicates the Receive Module (via the RmId from the ReceiveModule object) to which this Receive Channel connects. If this object contains a zero value (and thus no Receive Channel Connectivity), the Receive Channel Connectivity TLV is omitted from the RCC.')
docsIf3RxChCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RxChCfgRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxChCfgRowStatus.setDescription('The status of this instance.')
docsIf3RxChStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 9), )
if mibBuilder.loadTexts: docsIf3RxChStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxChStatusTable.setDescription('The Receive Channel Status object reports the status of the statically-configured and dynamically-created Receive Channels within an RCC.')
docsIf3RxChStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3RccStatusRcpId"), (0, "DOCS-IF3-MIB", "docsIf3RccStatusRccStatusId"), (0, "DOCS-IF3-MIB", "docsIf3RxChStatusRcId"))
if mibBuilder.loadTexts: docsIf3RxChStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxChStatusEntry.setDescription('The conceptual row of docsIf3RxChStatusTable. The ifIndex key corresponds to the MAC Domain interface where the RCC is configured. When this object is defined on the CM, the value of RccStatusId is always 1.')
docsIf3RxChStatusRcId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsIf3RxChStatusRcId.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxChStatusRcId.setDescription('This key represents an identifier for the parameters of the Receive Channel instance within the Receive Channel Profile.')
docsIf3RxChStatusChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 9, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3RxChStatusChIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxChStatusChIfIndex.setDescription('This attribute contains the interface index of the Downstream Channel that this Receive Channel Instance defines.')
docsIf3RxChStatusPrimaryDsIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3RxChStatusPrimaryDsIndicator.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxChStatusPrimaryDsIndicator.setDescription("If set to 'true', this attribute indicates the Receive Channel is to be the primary-capable downstream channel for the CM receiving this RCC. Otherwise, the downstream channel is to be a non-primary-capable channel.")
docsIf3RxChStatusRcRmConnectivityId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3RxChStatusRcRmConnectivityId.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxChStatusRcRmConnectivityId.setDescription('This attribute identifies the Receive Module to which this Receive Channel connects. A value a zero indicates that the Receive Channel Connectivity TLV is omitted from the RCC.')
docsIf3RxModuleCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 10), )
if mibBuilder.loadTexts: docsIf3RxModuleCfgTable.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxModuleCfgTable.setDescription('The Receive Module Configuration object permits an operator to configure how CMs with certain Receive Channel Profiles (RCPs) will configure the Receive Modules within their profile upon CM registration. When a CM registers with an RCP for which all Receive Module Indices (RmIds) are configured in this object and all Receive Channels are configured within the Receive Channel (ReceiveChannel) object, the CMTS should use the configuration within these objects to set the Receive Channel Configuration assigned to the CM in a REG-RSP message. A CMTS may require configuration of all pertinent Receive Module and Receive Channel instances (i.e., MIB table entries) in order to register a CM that reports a Receive Channel Profile. If the CM reports multiple RCPs, and Receive Module and Receive Channel objects have instances (i.e., MIB table entries) for more than one RCP reported by the CM, the particular RCP selected by the CMTS is not specified. A CMTS is not restricted to assigning Receive Modules based only on the contents of this object. This object supports the creation and deletion of multiple instances. Creation of a new instance of this object requires the reference of a valid RccCfg instance.')
docsIf3RxModuleCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3RccCfgRcpId"), (0, "DOCS-IF3-MIB", "docsIf3RccCfgRccCfgId"), (0, "DOCS-IF3-MIB", "docsIf3RxModuleCfgRmId"))
if mibBuilder.loadTexts: docsIf3RxModuleCfgEntry.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxModuleCfgEntry.setDescription('The conceptual row of docsIf3RxModuleCfgTable. The ifIndex key corresponds to the MAC Domain interface where the RCC is configured.')
docsIf3RxModuleCfgRmId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsIf3RxModuleCfgRmId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Receive Module Index in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3RxModuleCfgRmId.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxModuleCfgRmId.setDescription('This key represents an identifier of a Receive Module instance within the Receive Channel Profile.')
docsIf3RxModuleCfgRmRmConnectivityId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RxModuleCfgRmRmConnectivityId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Receive Module Connectivity section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3RxModuleCfgRmRmConnectivityId.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxModuleCfgRmRmConnectivityId.setDescription('This attribute represents the higher level (i.e., closer to RF) Receive Module to which this Receive Module connects. If this object contains a zero value (and thus no Receive Module Connectivity), the Receive Module Connectivity TLV is omitted from the RCC. Within a single instance of the ReceiveModule object, the RmRmConnectivityId attribute cannot contain the same value as the RmId attribute. The RmRmConnectivityId attribute points to a separate ReceiveModule object instance with the same value of RccCfgId.')
docsIf3RxModuleCfgFirstCenterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 10, 1, 3), Unsigned32()).setUnits('Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RxModuleCfgFirstCenterFrequency.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Receive Module First Channel Center Frequency Assignment section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3RxModuleCfgFirstCenterFrequency.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxModuleCfgFirstCenterFrequency.setDescription('This attribute represents the center frequency, in Hz, and a multiple of 62500, that indicates the lowest frequency channel of the Receive Module, or 0 if not applicable to the Receive Module.')
docsIf3RxModuleCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3RxModuleCfgRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3RxModuleCfgRowStatus.setDescription('The status of this instance.')
docsIf3RxModuleStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 11), )
if mibBuilder.loadTexts: docsIf3RxModuleStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxModuleStatusTable.setDescription('The Receive Module Status object provides a read-only view of the statically configured and dynamically created Receive Modules within an RCC.')
docsIf3RxModuleStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3RccStatusRcpId"), (0, "DOCS-IF3-MIB", "docsIf3RccStatusRccStatusId"), (0, "DOCS-IF3-MIB", "docsIf3RxModuleStatusRmId"))
if mibBuilder.loadTexts: docsIf3RxModuleStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxModuleStatusEntry.setDescription('The conceptual row of docsIf3RxModuleStatusTable. The ifIndex key corresponds to the MAC Domain interface where the RCC is configured. When this object is defined on the CM, the value of RccStatusId is always 1.')
docsIf3RxModuleStatusRmId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsIf3RxModuleStatusRmId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Receive Module Index section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3RxModuleStatusRmId.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxModuleStatusRmId.setDescription('This key represents an identifier of a Receive Module instance within the Receive Channel Profile.')
docsIf3RxModuleStatusRmRmConnectivityId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3RxModuleStatusRmRmConnectivityId.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxModuleStatusRmRmConnectivityId.setDescription('This attribute represents the Receive Module to which this Receive Module connects. Requirements for module connectivity are detailed in the RmRmConnectivityId of the RccCfg object. A value of zero indicates that the Receive Module TLV is omitted from the RCC.')
docsIf3RxModuleStatusFirstCenterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 11, 1, 3), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3RxModuleStatusFirstCenterFrequency.setStatus('current')
if mibBuilder.loadTexts: docsIf3RxModuleStatusFirstCenterFrequency.setDescription('This attribute represents the low frequency channel of the Receive Module, or 0 if not applicable to the Receive Module.')
docsIf3MdNodeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 12), )
if mibBuilder.loadTexts: docsIf3MdNodeStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdNodeStatusTable.setDescription('This object reports the MD-DS-SG-ID and MD-US-SG-ID associated with a MD-CM-SG-ID within a MAC Domain and the Fiber Nodes reached by the MD-CM-SG.')
docsIf3MdNodeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3MdNodeStatusNodeName"), (0, "DOCS-IF3-MIB", "docsIf3MdNodeStatusMdCmSgId"))
if mibBuilder.loadTexts: docsIf3MdNodeStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdNodeStatusEntry.setDescription('The conceptual row of docsIf3MdNodeStatusTable. The ifIndex key corresponds to the MAC Domain interface where the MD-CM-SG-ID is configured.')
docsIf3MdNodeStatusNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 12, 1, 1), NodeName().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: docsIf3MdNodeStatusNodeName.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdNodeStatusNodeName.setDescription('This key represents the name of a fiber node associated with a MD-CM-SG of a MAC Domain.')
docsIf3MdNodeStatusMdCmSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsIf3MdNodeStatusMdCmSgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdNodeStatusMdCmSgId.setDescription('This attribute is a key and indicates the MD-CM-SG-ID of this instance. A particular MdCmSgId in a MAC Domain is associated with one or more Fiber Nodes.')
docsIf3MdNodeStatusMdDsSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3MdNodeStatusMdDsSgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdNodeStatusMdDsSgId.setDescription('This attribute corresponds to the MD-DS-SG-ID of the MD-CM-SG of this object instance. The MdDsSgId values are unique within a MAC Domain.')
docsIf3MdNodeStatusMdUsSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3MdNodeStatusMdUsSgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdNodeStatusMdUsSgId.setDescription('This attribute corresponds to the MD-US-SG-ID of the MD-CM-SG of this object instance. The MdUsSgId values are unique within a MAC Domain.')
docsIf3MdDsSgStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 13), )
if mibBuilder.loadTexts: docsIf3MdDsSgStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdDsSgStatusTable.setDescription('This object returns the list of downstream channel associated with a MAC Domain MD-DS-SG-ID.')
docsIf3MdDsSgStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3MdDsSgStatusMdDsSgId"))
if mibBuilder.loadTexts: docsIf3MdDsSgStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdDsSgStatusEntry.setDescription('The conceptual row of docsIf3MdDsSgStatusTable. The ifIndex key corresponds to the MAC Domain interface where the MD-DS-SG-ID is configured. The CMTS is not required to persist instances of this object across reinitializations.')
docsIf3MdDsSgStatusMdDsSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsIf3MdDsSgStatusMdDsSgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdDsSgStatusMdDsSgId.setDescription('This key represents a MD-DS-SG-ID in a Mac Domain.')
docsIf3MdDsSgStatusChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 13, 1, 2), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3MdDsSgStatusChSetId.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdDsSgStatusChSetId.setDescription('This attribute represents a reference to the list of downstream channels of the MD-DS-SG-ID.')
docsIf3MdUsSgStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 14), )
if mibBuilder.loadTexts: docsIf3MdUsSgStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdUsSgStatusTable.setDescription('This object returns the list of upstream channels associated with a MAC Domain MD-US-SG-ID.')
docsIf3MdUsSgStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3MdUsSgStatusMdUsSgId"))
if mibBuilder.loadTexts: docsIf3MdUsSgStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdUsSgStatusEntry.setDescription('The conceptual row of docsIf3MdUsSgStatusTable. The ifIndex key corresponds to the MAC Domain interface where the MD-DS-SG-ID is configured. The CMTS is not required to persist instances of this object across reinitializations.')
docsIf3MdUsSgStatusMdUsSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsIf3MdUsSgStatusMdUsSgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdUsSgStatusMdUsSgId.setDescription('This key represents a MD-US-SG-ID in a Mac Domain.')
docsIf3MdUsSgStatusChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 14, 1, 2), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3MdUsSgStatusChSetId.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdUsSgStatusChSetId.setDescription('This attribute represents a reference to the list of upstream channels of the MD-US-SG-ID.')
docsIf3MdUsToDsChMappingTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 15), )
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingTable.setDescription('This object returns the set of downstream channels that carry UCDs and MAPs for a particular upstream channel in a MAC Domain.')
docsIf3MdUsToDsChMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 15, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3MdUsToDsChMappingUsIfIndex"), (0, "DOCS-IF3-MIB", "docsIf3MdUsToDsChMappingDsIfIndex"), (0, "DOCS-IF3-MIB", "docsIf3MdUsToDsChMappingMdIfIndex"))
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingEntry.setDescription('The conceptual row of docsIf3MdUsToDsChMappingTable.')
docsIf3MdUsToDsChMappingUsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 15, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingUsIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingUsIfIndex.setDescription('This key represents the interface index of the upstream channel to which this instance applies.')
docsIf3MdUsToDsChMappingDsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 15, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingDsIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingDsIfIndex.setDescription('This key represents the interface index of a downstream channel carrying in UCDs and Maps associated with the upstream channel defined by this instance.')
docsIf3MdUsToDsChMappingMdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 15, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingMdIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdUsToDsChMappingMdIfIndex.setDescription('This key represents the MAC domain of the upstream and downstream channels of this instance.')
docsIf3MdCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16), )
if mibBuilder.loadTexts: docsIf3MdCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgTable.setDescription('This object contains MAC domain level control and configuration attributes.')
docsIf3MdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf3MdCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgEntry.setDescription('The conceptual row of docsIf3MdCfgTable. The CMTS persists all instances of MdCfg across reinitializations. The ifIndex key corresponds to the MAC Domain interface.')
docsIf3MdCfgMddInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(2000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgMddInterval.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Parameters and Constants Annex.')
if mibBuilder.loadTexts: docsIf3MdCfgMddInterval.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgMddInterval.setDescription('This attribute configures the interval for the insertion of MDD messages in each downstream channel of a MAC Domain.')
docsIf3MdCfgIpProvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ipv4Only", 0), ("ipv6Only", 1), ("alternate", 2), ("dualStack", 3))).clone('ipv6Only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgIpProvMode.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, IP Initialization Parameters TLV section.')
if mibBuilder.loadTexts: docsIf3MdCfgIpProvMode.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgIpProvMode.setDescription("This attribute configures the CMTS IP provisioning mode for a MAC Domain. When this attribute is set to 'ipv4Only' the CM will acquire a single IPv4 address for the CM management stack. When this attribute is set to 'ipv6Only' the CM will acquire a single IPv6 address for the CM management stack. When this attribute is set to 'alternate' the CM will acquire a single IPv6 address for the CM management stack and, if failures occur, the CM will fall back to provision and operation with an IPv4 address. When this attribute is set to 'dualStack' the CM will acquire both an IPv6 and IPv4 address for provisioning and operation.")
docsIf3MdCfgCmStatusEvCtlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgCmStatusEvCtlEnabled.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, CM-STATUS Event Control section ')
if mibBuilder.loadTexts: docsIf3MdCfgCmStatusEvCtlEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgCmStatusEvCtlEnabled.setDescription("If set to 'true', this attribute enables the signaling of the CM-Status Event reporting mechanism.")
docsIf3MdCfgUsFreqRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("extended", 1))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgUsFreqRange.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Upstream Frequency Upper Band Edge TLV section.')
if mibBuilder.loadTexts: docsIf3MdCfgUsFreqRange.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgUsFreqRange.setDescription("This attribute indicates in MDD messages the upstream frequency upper band edge of an upstream Channel. A value 'standard' means Standard Frequency Range and a value 'extended' means Extended Frequency Range.")
docsIf3MdCfgMcastDsidFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgMcastDsidFwdEnabled.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Multicast DSID-based Forwarding (MDF) Modes section in the Compatibility with Previous Versions of DOCSIS Annex.')
if mibBuilder.loadTexts: docsIf3MdCfgMcastDsidFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgMcastDsidFwdEnabled.setDescription("If set to 'true', this attribute enables the CMTS to use IP Multicast DSID Forwarding (MDF) for the MAC domain.")
docsIf3MdCfgMultRxChModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgMultRxChModeEnabled.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Downstream Channel Bonding section.')
if mibBuilder.loadTexts: docsIf3MdCfgMultRxChModeEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgMultRxChModeEnabled.setDescription("If set to 'true', this attribute enables Downstream Channel Bonding for the MAC Domain.")
docsIf3MdCfgMultTxChModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgMultTxChModeEnabled.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Upstream Channel Bonding section.')
if mibBuilder.loadTexts: docsIf3MdCfgMultTxChModeEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgMultTxChModeEnabled.setDescription("If set to 'true', this attribute enables Multiple Transmit Channel (MTC) Mode for the MAC Domain.")
docsIf3MdCfgEarlyAuthEncrCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disableEae", 1), ("enableEaeRangingBasedEnforcement", 2), ("enableEaeCapabilityBasedEnforcement", 3), ("enableEaeTotalEnforcement", 4))).clone('enableEaeRangingBasedEnforcement')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgEarlyAuthEncrCtrl.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I06-071206, Early Authentication and Encryption section.')
if mibBuilder.loadTexts: docsIf3MdCfgEarlyAuthEncrCtrl.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgEarlyAuthEncrCtrl.setDescription("This attribute enables or disables early authentication and encryption (EAE) signaling for the MAC Domain. It also defines the type of EAE enforcement in the case that EAE is enabled. If set to 'disableEAE', EAE is disabled for the MAC Domain. If set to 'enableEaeRangingBasedEnforcement', 'enableEaeCapabilityBasedEnforcement' or 'enableEaeTotalEnforcement', EAE is enabled for the MAC Domain. The following EAE enforcement methods are defined in the case where EAE signaling is enabled: The option 'enableEaeRangingBasedEnforcement' indicates EAE is enforced on CMs that perform ranging with a B-INIT-RNG-REQ message. The option 'enableEaeCapabilityBasedEnforcement' indicates EAE is enforced on CMs that perform ranging with a B-INIT-RNG-REQ message in which the EAE capability flag is set. The option 'enableEaeTotalEnforcement' indicates EAE is enforced on all CMs regardless of their EAE capabilities.")
docsIf3MdCfgTftpProxyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgTftpProxyEnabled.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I06-071206, TFTP Configuration File Security section.')
if mibBuilder.loadTexts: docsIf3MdCfgTftpProxyEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgTftpProxyEnabled.setDescription("If set to 'true', this attribute enables TFTP Proxy functionality for the MAC Domain.")
docsIf3MdCfgSrcAddrVerifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgSrcAddrVerifEnabled.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I06-071206, Source Address Verification section.')
if mibBuilder.loadTexts: docsIf3MdCfgSrcAddrVerifEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgSrcAddrVerifEnabled.setDescription("If set to 'true', this attribute enables Source Address Verification (SAV) functionality for the MAC Domain.")
docsIf3MdCfgDownChannelAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("annexA", 3), ("annexB", 4), ("annexC", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3MdCfgDownChannelAnnex.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgDownChannelAnnex.setDescription('This attribute defines the ITU-J-83 Annex being used for this MAC Domain. The value of this attribute indicates the conformance of the implementation to important regional cable standards. Valid enumerations for the attribute are: unknown other annexA : Annex A from ITU-J83 is used. annexB : Annex B from ITU-J83 is used. annexC : Annex C from ITU-J83 is used. Values 6-255 are reserved.')
docsIf3MdCfgCmUdcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgCmUdcEnabled.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Subscriber Management TLVs section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3MdCfgCmUdcEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgCmUdcEnabled.setDescription("If set to 'true', this attribute instructs the CMTS MAC Domain to enable Upstream Drop Classifiers (UDC) for the CMs attempting registration in this MAC Domain.")
docsIf3MdCfgSendUdcRulesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgSendUdcRulesEnabled.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Subscriber Management TLVs section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3MdCfgSendUdcRulesEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgSendUdcRulesEnabled.setDescription("If set to 'true' and when the CM signals to the CMTS 'Upstream Drop Classifier Group ID' encodings, this attribute instructs the CMTS MAC Domain to send the Subscriber Management Filters rules associated with the 'Upstream Drop Classifier Group ID' encodings to the CM in the form of UDCs when the following conditions occurs: - The attribute CmUdcEnabled value for this MAC Domain is set to 'true', and - The CM has the UDC capability advertised as supported. If there is no a single Subscriber Management Filter configured in the CMTS for the CM's signaled UDC Group ID, the CMTS does not send UDC encodings to the CM. It is vendor specific whether the CMTS maintains enforcement of the CM signaled or default Subscriber Management Filter groups in the upstream direction.")
docsIf3MdCfgServiceTypeIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 14), SnmpTagList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgServiceTypeIdList.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Service Type Identifier section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3MdCfgServiceTypeIdList.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgServiceTypeIdList.setDescription("This attribute indicates the list of Service Type IDs associated with the MAC Domain. During the CM registration process the CMTS will attempt to redirect the CM to a MAC Domain where the CM' Service Type TLV is contained in this attribute.")
docsIf3MdCfgBpi2EnforceCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 0), ("qosCfgFileWithBpi2AndCapabPrivSupportEnabled", 1), ("qosCfgFileWithBpi2Enabled", 2), ("qosCfgFile", 3), ("total", 4))).clone('qosCfgFileWithBpi2Enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgBpi2EnforceCtrl.setReference('DOCSIS 3.0 Security Specification CM-SP-SECv3.0-I12-100115, BPI+ Enforce section.')
if mibBuilder.loadTexts: docsIf3MdCfgBpi2EnforceCtrl.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgBpi2EnforceCtrl.setDescription("This attribute indicates the level of BPI+ enforcement policies with the MAC Domain. The following BPI+ enforcement policies are defined in the case where BPI+ is enabled: The option 'disable' indicates the CMTS does not enforce BPI+. The option 'qosCfgFileWithBpi2AndCapabPrivSupportEnabled' indicates the CMTS enforces BPI+ on CMs that register with a DOCSIS 1.1 style configuration file with parameters indicating BPI+ is enabled (missing TLV 29 or containing TLV 29 set to enable) and with a Modem Capabilities Privacy Support TLV (5.6) set to BPI+ support. The option 'qosCfgFileWithBpi2Enabled' indicates the CMTS enforces BPI+ on CMs that register with a DOCSIS 1.1 style configuration file with parameters indicating BPI+ is enabled (missing TLV 29 or containing TLV 29 set to enable). The option 'qosCfgFile' indicates the CMTS enforces BPI+ on CMs that register with a DOCSIS 1.1 style configuration file. The option 'total' indicates the CMTS enforces BPI+ on all CMs.")
docsIf3MdCfgEnergyMgt1x1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 16, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3MdCfgEnergyMgt1x1Enabled.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I20-121113, Energy Management Capabilities section.')
if mibBuilder.loadTexts: docsIf3MdCfgEnergyMgt1x1Enabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3MdCfgEnergyMgt1x1Enabled.setDescription("This attribute indicates whether the CMTS is configured for 1x1 Energy Management Mode of operation on a per MAC Domain basis. If this attribute is set to 'true', the CMTS is configured for 1x1 Energy Management Mode of operation on this MAC Domain. If this attribute is set to 'false', the Energy Management 1x1 Mode of operation is disabled in the CMTS on this MAC Domain")
docsIf3BondingGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 17), )
if mibBuilder.loadTexts: docsIf3BondingGrpCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgTable.setDescription('This object defines statically configured Downstream Bonding Groups and Upstream Bonding Groups on the CMTS. This object supports the creation and deletion of multiple instances. Creation of a new instance of this object requires the ChList attribute to be set.')
docsIf3BondingGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3BondingGrpCfgDir"), (0, "DOCS-IF3-MIB", "docsIf3BondingGrpCfgCfgId"))
if mibBuilder.loadTexts: docsIf3BondingGrpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgEntry.setDescription('The conceptual row of docsIf3BondingGrpCfgTable. The ifIndex key corresponds to the MAC Domain interface where the Bonding Group is configured. The CMTS persists all instances of BondingGrpCfg across reinitializations.')
docsIf3BondingGrpCfgDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 17, 1, 1), IfDirection())
if mibBuilder.loadTexts: docsIf3BondingGrpCfgDir.setStatus('current')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgDir.setDescription('This attribute defines the ordered list of channels that comprise the channel set')
docsIf3BondingGrpCfgCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: docsIf3BondingGrpCfgCfgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgCfgId.setDescription('This key represents the configured bonding group identifier in the indicated direction for the MAC Domain. This attribute is used for the sole purpose of tracking bonding groups defined by management systems.')
docsIf3BondingGrpCfgChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 17, 1, 3), ChannelList().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3BondingGrpCfgChList.setStatus('current')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgChList.setDescription('This attribute contains the list of channels of the bonding group.')
docsIf3BondingGrpCfgSfProvAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 17, 1, 4), AttributeMask().clone(hexValue="80000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3BondingGrpCfgSfProvAttrMask.setStatus('current')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgSfProvAttrMask.setDescription('This attribute represents the Provisioned Attribute Mask encoding for the bonding group.')
docsIf3BondingGrpCfgDsidReseqWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 17, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 180), ValueRangeConstraint(255, 255), )).clone(255)).setUnits('hundredMicroseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3BondingGrpCfgDsidReseqWaitTime.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Service Flow Assignment section.')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgDsidReseqWaitTime.setStatus('current')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgDsidReseqWaitTime.setDescription('For a Downstream Bonding Group, this attribute provides the DSID Resequencing Wait Time that is to be used for all DSIDs associated with this Downstream Bonding Group. The value of 255 indicates that the DSID Resequencing Wait Time is determined by the CMTS. The value zero in not supported for downstream bonding groups. For an Upstream Bonding Group, this attribute has no meaning and returns the value 0.')
docsIf3BondingGrpCfgDsidReseqWarnThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 17, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 179), ValueRangeConstraint(255, 255), )).clone(255)).setUnits('hundredMicroseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3BondingGrpCfgDsidReseqWarnThrshld.setStatus('current')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgDsidReseqWarnThrshld.setDescription('For a Downstream Bonding Group, this attribute provides the DSID Resequencing Warning Threshold that is to be used for all DSIDs associated with this Downstream Bonding Group. The value of 255 indicates that the DSID Resequencing Warning Threshold is determined by the CMTS. The value of 0 indicates that the threshold warnings are disabled. When the value of DsidReseqWaitTime is not equal to 0 or 255, the CMTS must ensure that the value of this object is either 255 or less than the value of DsidReseqWaitTime.')
docsIf3BondingGrpCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 17, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3BondingGrpCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf3BondingGrpCfgRowStatus.setDescription('The status of this instance.')
docsIf3DsBondingGrpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 18), )
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusTable.setDescription('This object returns administratively-configured and CMTS defined downstream bonding groups.')
docsIf3DsBondingGrpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3DsBondingGrpStatusChSetId"))
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusEntry.setDescription('The conceptual row of docsIf3DsBondingGrpStatusTable. The ifIndex key corresponds to the MAC Domain interface where the Bonding Group is configured.')
docsIf3DsBondingGrpStatusChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 18, 1, 1), ChSetId())
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusChSetId.setStatus('current')
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusChSetId.setDescription('This key represents the identifier for the Downstream Bonding Group or the single-downstream channel of this instance.')
docsIf3DsBondingGrpStatusMdDsSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 18, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusMdDsSgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusMdDsSgId.setDescription('This attribute corresponds to the MD-DS-SG-ID that includes all the downstream channels of the Downstream Bonding Group. The value zero indicates that the bonding group does not contain channels from a single MD-DS-SG and therefore the bonding group is not valid and usable.')
docsIf3DsBondingGrpStatusCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 18, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusCfgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3DsBondingGrpStatusCfgId.setDescription('This attribute provides the BondingGrpCfgId for the downstream bonding group if it was configured. Otherwise, the zero value indicates that the CMTS will define the bonding group.')
docsIf3UsBondingGrpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 19), )
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusTable.setDescription('This object returns administratively-configured and CMTS-defined upstream bonding groups.')
docsIf3UsBondingGrpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3UsBondingGrpStatusChSetId"))
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusEntry.setDescription('The conceptual row of docsIf3UsBondingGrpStatusTable. The ifIndex key corresponds to the MAC Domain interface where the Bonding Group is configured.')
docsIf3UsBondingGrpStatusChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 19, 1, 1), ChSetId())
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusChSetId.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusChSetId.setDescription('This key represents the identifier for the Upstream Bonding Group or the single-upstream channel of this instance.')
docsIf3UsBondingGrpStatusMdUsSgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusMdUsSgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusMdUsSgId.setDescription('This attribute corresponds to the MD-US-SG-ID that includes all the upstream channels of the Upstream Bonding Group. The value zero indicates that the bonding group does not contain channels from a single MD-US-SG and therefore the bonding group is not valid and usable.')
docsIf3UsBondingGrpStatusCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 19, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusCfgId.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsBondingGrpStatusCfgId.setDescription('This attribute provides the BondingGrpCfgId for the upstream bonding group if it was configured. Otherwise, the zero value indicates that the CMTS defines the bonding group.')
docsIf3UsChExtTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 20), )
if mibBuilder.loadTexts: docsIf3UsChExtTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsChExtTable.setDescription('This object defines management extensions for upstream channels, in particular SCDMA parameters.')
docsIf3UsChExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf3UsChExtEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsChExtEntry.setDescription('The conceptual row of docsIf3UsChExtTable. The ifIndex key corresponds to each of the upstream channels.')
docsIf3UsChExtSacCodeHoppingSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("sac1NoCodeHopping", 1), ("sac1CodeHoppingMode1", 2), ("sac2CodeHoppingMode2", 3), ("sac2NoCodeHopping", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3UsChExtSacCodeHoppingSelectionMode.setReference('DOCSIS 3.0 Physical Layer Specification CM-SP-PHYv3.0-I05-070803, Mini-slot Numbering Parameters in UCD section.')
if mibBuilder.loadTexts: docsIf3UsChExtSacCodeHoppingSelectionMode.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsChExtSacCodeHoppingSelectionMode.setDescription("This attribute indicates the selection mode for active codes and code hopping. 'none' Non-SCDMA channel 'sac1NoCodeHopping' Selectable active codes mode 1 and code hopping disabled 'sac1CodeHoppingMode1' Selectable active codes mode 1 and code hopping mode 1 'sac2CodeHoppingMode2' Selectable active codes mode 2 and code hopping mode 2 'sac2NoCodeHopping' Selectable active codes mode 2 and code hopping disabled.")
docsIf3UsChExtScdmaSelectionStringActiveCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 20, 1, 2), ScdmaSelectionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3UsChExtScdmaSelectionStringActiveCodes.setReference('DOCSIS 3.0 Physical Layer Specification CM-SP-PHYv3.0-I05-070803, Mini-slot Numbering Parameters in UCD section.')
if mibBuilder.loadTexts: docsIf3UsChExtScdmaSelectionStringActiveCodes.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsChExtScdmaSelectionStringActiveCodes.setDescription("This attribute represents the active codes of the upstream channel and it is applicable only when SacCodeHoppingSelectionMode is 'sac2CodeHoppingMode2.")
docsIf3CmCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 21))
docsIf3CmCapabilitiesReq = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 21, 1), Tlv8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmCapabilitiesReq.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Modem Capabilities Encoding section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3CmCapabilitiesReq.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmCapabilitiesReq.setDescription("This attribute contains the TLV encoding for TLV-5 sent in a REG-REQ. The first byte of this encoding is expected to be '05'H.")
docsIf3CmCapabilitiesRsp = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 21, 2), Tlv8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmCapabilitiesRsp.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Modem Capabilities Encoding section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3CmCapabilitiesRsp.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmCapabilitiesRsp.setDescription("This attribute contains the TLV encoding for TLV-5 received in a REG-RSP. The first byte of this encoding is expected to be '05'H.")
docsIf3UsChSetTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 22), )
if mibBuilder.loadTexts: docsIf3UsChSetTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Partial Service Encoding section and Cable Modem Attribute Masks section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3UsChSetTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsChSetTable.setDescription('This object defines a set of upstream channels. These channel sets may be associated with channel bonding groups, MD-US-SGs, MD-CM-SGs, or any other channel set that the CMTS may derive from other CMTS processes.')
docsIf3UsChSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3UsChSetId"))
if mibBuilder.loadTexts: docsIf3UsChSetEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsChSetEntry.setDescription('The conceptual row of docsIf3UsChSetTable. The ifIndex key corresponds to the MAC Domain interface where the upstream channel set is defined.')
docsIf3UsChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 22, 1, 1), ChSetId())
if mibBuilder.loadTexts: docsIf3UsChSetId.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsChSetId.setDescription('This key defines a reference identifier for the upstream channel set within the MAC Domain.')
docsIf3UsChSetChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 22, 1, 2), ChannelList().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3UsChSetChList.setStatus('current')
if mibBuilder.loadTexts: docsIf3UsChSetChList.setDescription('This attribute defines the ordered list of channels that comprise the upstream channel set')
docsIf3DsChSetTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 23), )
if mibBuilder.loadTexts: docsIf3DsChSetTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Partial Service Encoding section and Cable Modem Attribute Masks section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsIf3DsChSetTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3DsChSetTable.setDescription('This object defines a set of downstream channels. These channel sets may be associated with channel bonding groups, MD-DS-SGs, MD-CM-SGs, or any other channel set that the CMTS may derive from other CMTS processes.')
docsIf3DsChSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3DsChSetId"))
if mibBuilder.loadTexts: docsIf3DsChSetEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3DsChSetEntry.setDescription('The conceptual row of docsIf3DsChSetTable. The ifIndex key corresponds to the MAC Domain interface where the downstream channel set is defined.')
docsIf3DsChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 23, 1, 1), ChSetId())
if mibBuilder.loadTexts: docsIf3DsChSetId.setStatus('current')
if mibBuilder.loadTexts: docsIf3DsChSetId.setDescription('This key defines a reference identifier for the downstream channel set within the MAC Domain.')
docsIf3DsChSetChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 23, 1, 2), ChannelList().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3DsChSetChList.setStatus('current')
if mibBuilder.loadTexts: docsIf3DsChSetChList.setDescription('This attribute defines the ordered list of channels that comprise the downstream channel set.')
docsIf3SignalQualityExtTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 24), )
if mibBuilder.loadTexts: docsIf3SignalQualityExtTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3SignalQualityExtTable.setDescription('This object provides an in-channel received modulation error ratio metric for CM and CMTS.')
docsIf3SignalQualityExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 24, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf3SignalQualityExtEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3SignalQualityExtEntry.setDescription('The conceptual row of docsIf3SignalQualityExtTable. At the CM, this object describes the received modulation error ratio of each downstream channel. At the CMTS, it describes the received modulation error ratio of each logical upstream channel. An entry in this table exists for each ifEntry with an ifType of docsCableDownstream(128) for Cable Modems. For Cable Modem Termination Systems, an entry exists for each ifEntry with an ifType of docsCableUpstreamChannel(205).')
docsIf3SignalQualityExtRxMER = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 24, 1, 1), TenthdB().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3SignalQualityExtRxMER.setStatus('current')
if mibBuilder.loadTexts: docsIf3SignalQualityExtRxMER.setDescription('RxMER provides an in-channel received Modulation Error Ratio (MER). RxMER is defined as an estimate, provided by the demodulator, of the ratio: (average constellation energy with equally likely symbols) / (average squared magnitude of error vector) RxMER is measured just prior to FEC (trellis/Reed-Solomon) decoding. RxMER includes the effects of the HFC channel as well as implementation effects of the modulator and demodulator. Error vector estimation may vary among demodulator implementations. The CMTS RxMER is averaged over a given number of bursts at the burst receiver, which may correspond to transmissions from multiple users. In the case of S-CDMA mode, RxMER is measured on the de-spread signal.')
docsIf3SignalQualityExtRxMerSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3SignalQualityExtRxMerSamples.setStatus('current')
if mibBuilder.loadTexts: docsIf3SignalQualityExtRxMerSamples.setDescription('RxMerSamples is a statistically significant number of symbols for the CM, or bursts for the CMTS, processed to arrive at the RxMER value. For the CMTS, the MER measurement includes only valid bursts that are not in contention regions.')
docsIf3CmtsSignalQualityExtTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 25), )
if mibBuilder.loadTexts: docsIf3CmtsSignalQualityExtTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsSignalQualityExtTable.setDescription('This object provides metrics and parameters associated with received carrier, noise and interference power levels in the upstream channels of the CMTS.')
docsIf3CmtsSignalQualityExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf3CmtsSignalQualityExtEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsSignalQualityExtEntry.setDescription('The conceptual row of docsIf3CmtsSignalQualityExtTable. The ifIndex key corresponds to each of the upstream channels. The CMTS is not required to persist the values of all instances of CmtsSignalQualityExt across reinitialization.')
docsIf3CmtsSignalQualityExtCNIR = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 25, 1, 1), TenthdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsSignalQualityExtCNIR.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsSignalQualityExtCNIR.setDescription('This attribute provides an upstream in-channel Carrier-to-Noise plus Interference Ratio (CNIR). CNIR is defined as the ratio of the expected commanded received signal power at the CMTS input, assuming QPSK0 modulation, to the noise plus interference in the channel. This measurement occurs prior to the point at which the desired CM signal, when present, is demodulated. The measurement includes the effect of the receive matched filter but does not include the effect of any ingress filtering. Both the signal power and noise/interference power are referenced to the same point, e.g., CMTS input.')
docsIf3CmtsSignalQualityExtExpectedRxSignalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 25, 1, 2), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsSignalQualityExtExpectedRxSignalPower.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsSignalQualityExtExpectedRxSignalPower.setDescription('ExpectedReceivedSignalPower is the power of the expected commanded received signal in the channel, referenced to the CMTS input.')
docsIf3CmtsSpectrumAnalysisMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 26), )
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasTable.setDescription('This object is used to configure the logical upstream interfaces to perform the spectrum measurements. This object supports creation and deletion of instances.')
docsIf3CmtsSpectrumAnalysisMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasEntry.setDescription('The conceptual row of docsIf3CmtsSpectrumAnalysisMeasTable. The ifIndex key corresponds to each of the upstream channels. The CMTS is not required to persist instances of this object across reinitializations.')
docsIf3CmtsSpectrumAnalysisMeasAmplitudeData = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 26, 1, 1), AmplitudeData()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasAmplitudeData.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasAmplitudeData.setDescription('This attribute provides a list of the spectral amplitudes corresponding to the frequency bins ordered from lowest to highest frequencies covering the frequency span. Information about the center frequency, frequency span, number of bins and resolution bandwidth are included to provide context to the measurement point The CMTS must support the number of bins as an odd number in order to provide a spectrum representation that is symmetric about the middle data point or bin. The CMTS must support a number of bins greater than or equal to 257 for frequency spans greater than or equal to 6.4 MHz. The CMTS must not exceed 25 kHz bin spacing for measurement of frequency spans less than or equal to 6.4 MHz. The bins measurements are updated periodically at time intervals given by the TimeInterval attribute.')
docsIf3CmtsSpectrumAnalysisMeasTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 26, 1, 2), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasTimeInterval.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasTimeInterval.setDescription('TimeInterval is the CMTS estimated average repetition period of measurements. This attribute defines the average rate at which new spectra can be retrieved.')
docsIf3CmtsSpectrumAnalysisMeasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 26, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsSpectrumAnalysisMeasRowStatus.setDescription('The status of this instance.')
docsIf3CmtsCmCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 27))
docsIf3CmtsCmCtrlCmdMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 27, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdMacAddr.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Media Access Control Specification section.')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdMacAddr.setDescription('This attribute represents the MAC Address of the CM which the CMTS is instructed to send the CM-CTRL-REQ message.')
docsIf3CmtsCmCtrlCmdMuteUsChId = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 27, 2), ChId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdMuteUsChId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Media Access Control Specification section.')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdMuteUsChId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdMuteUsChId.setDescription("This attribute represents the Upstream Channel ID (UCID) to mute or unmute. A value of zero indicates all upstream channels. This attribute is only applicable when the docsIf3CmtsCmCtrlCmdCommit attribute is set to 'mute'.")
docsIf3CmtsCmCtrlCmdMuteInterval = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 27, 3), Unsigned32().clone(1)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdMuteInterval.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Media Access Control Specification section.')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdMuteInterval.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdMuteInterval.setDescription("This attribute represents the length of time that the mute operation is in effect. This attribute is only applicable when the docsIf3CmtsCmCtrlCmdCommit attribute is set to 'mute'. A value of 0 is an indication to unmute the channel referenced by the docsIf3CmtsCmCtrlCmdMuteUsChId attribute while a value of 0xFFFFFFFF is used to mute the channel referenced by the docsIf3CmtsCmCtrlCmdMuteUsChId attribute indefinitely.")
docsIf3CmtsCmCtrlCmdDisableForwarding = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 27, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdDisableForwarding.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Media Access Control Specification section.')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdDisableForwarding.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdDisableForwarding.setDescription("When set to 'true', this attribute disables data forwarding to the CMCI when the docsIf3CmtsCmCtrlCmdCommit attribute is set to 'disableForwarding'. When set to 'false', this attribute enables data forwarding to the CMCI when the docsIf3CmtsCmCtrlCmdCommit attribute is set to 'disableForwarding'. This attribute is only applicable when the docsIf3CmtsCmCtrlCmdCommit attribute is set to 'disableForwarding'.")
docsIf3CmtsCmCtrlCmdCommit = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 27, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mute", 1), ("cmReinit", 2), ("disableForwarding", 3))).clone('mute')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdCommit.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, Media Access Control Specification section.')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdCommit.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmCtrlCmdCommit.setDescription('This attribute indicates the type of command for the CMTS to trigger in the CM-CTRL-REQ message. This attribute will return the value of the last operation performed or the default value if no operation has been performed.')
docsIf3CmDpvStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28), )
if mibBuilder.loadTexts: docsIf3CmDpvStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsTable.setDescription('This object represents the DOCSIS Path Verify Statistics collected in the cable modem device. The CMTS controls the logging of DPV statistics in the cable modem. Therefore the context and nature of the measurements are governed by the CMTS and not self-descriptive when read from the CM.')
docsIf3CmDpvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3CmDpvStatsGrpId"))
if mibBuilder.loadTexts: docsIf3CmDpvStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsEntry.setDescription('The conceptual row of docsIf3CmDpvStatsTable.')
docsIf3CmDpvStatsGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: docsIf3CmDpvStatsGrpId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsGrpId.setDescription('This key represents the DPV Group ID. The CM reports two instance of DPV statistics per downstream normally referred as Statistical Group 1 and Statistical Group 2.')
docsIf3CmDpvStatsLastMeasLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28, 1, 2), Unsigned32()).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmDpvStatsLastMeasLatency.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsLastMeasLatency.setDescription('This attribute represents the last latency measurement for this statistical group.')
docsIf3CmDpvStatsLastMeasTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmDpvStatsLastMeasTime.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsLastMeasTime.setDescription('This attribute represents the last measurement time of the last latency measurement for this statistical group. This attribute reports the EPOC time value when no measurements are being reported or after the statistics were cleared.')
docsIf3CmDpvStatsMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28, 1, 4), Unsigned32()).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmDpvStatsMinLatency.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsMinLatency.setDescription('This attribute represents the minimum latency measurement for this statistical group since the last time statistics were cleared.')
docsIf3CmDpvStatsMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28, 1, 5), Unsigned32()).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmDpvStatsMaxLatency.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsMaxLatency.setDescription('This attribute represents the maximum latency measurement for this statistical group since the last time statistics were cleared.')
docsIf3CmDpvStatsAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28, 1, 6), Unsigned32()).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmDpvStatsAvgLatency.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I08-080522, DOCSIS Path Verification section.')
if mibBuilder.loadTexts: docsIf3CmDpvStatsAvgLatency.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsAvgLatency.setDescription('This attribute represents the average latency measurement for this statistical group since the last time statistics were cleared. The averaging mechanism is controlled by the CMTS, and can be a simple average (mean) or an exponential moving average.')
docsIf3CmDpvStatsNumMeas = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28, 1, 7), Unsigned32()).setUnits('measurements').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmDpvStatsNumMeas.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsNumMeas.setDescription('This attribute represents the number of latency measurements made for this statistical group since the last time statistics were cleared.')
docsIf3CmDpvStatsLastClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 28, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmDpvStatsLastClearTime.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmDpvStatsLastClearTime.setDescription('This attribute represents the last time statistics were cleared for this statistical group.')
docsIf3CmEventCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 29), )
if mibBuilder.loadTexts: docsIf3CmEventCtrlTable.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I11-100115, Section N.2.2.5 CmEventCtrl Object.')
if mibBuilder.loadTexts: docsIf3CmEventCtrlTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEventCtrlTable.setDescription('This object represents the control mechanism to enable the dispatching of events based on the event Id. The following rules define the event control behavior: - The CmEventCtrl object has no instances or contains an instance with Event ID 0. All events matching the Local Log settings of docsDevEvReporting are sent to local log ONLY. - The CmEventCtrl object contains configured instances Only events matching the Event Ids configured in the object are sent according to the settings of the docsDevEvReporting object. The CM does not persist instances of CmEventCtrl across reinitializations.')
docsIf3CmEventCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 29, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmEventCtrlEventId"))
if mibBuilder.loadTexts: docsIf3CmEventCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEventCtrlEntry.setDescription('The conceptual row of docsIf3CmEventCtrlTable.')
docsIf3CmEventCtrlEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 29, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf3CmEventCtrlEventId.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I07-080522, Format and Content for Event, Syslog, and SNMP Notification Annex.')
if mibBuilder.loadTexts: docsIf3CmEventCtrlEventId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEventCtrlEventId.setDescription('This key represents the Event ID of the event being enabled for delivery to a dispatch mechanism (e.g., syslog).')
docsIf3CmEventCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 29, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3CmEventCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEventCtrlStatus.setDescription('The status of this instance.')
docsIf3CmtsEventCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 30), )
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlTable.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I11-100115, Section N.2.3.4 CmtsEventCtrl Object.')
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlTable.setDescription('This object represents the control mechanism to enable the dispatching of events based on the event Id. The following rules define the event control behavior: - The CmtsEventCtrl object has no instances or contains an instance with Event ID 0. All events matching the Local Log settings of docsDevEvReporting are sent to local log ONLY. - The CmtsEventCtrl object contains configured instances Only events matching the Event Ids configured in the object are sent according to the settings of the docsDevEvReporting object. - The CMTS persists all instances of CmtsEventCtrl across reinitializations.')
docsIf3CmtsEventCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 30, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsEventCtrlEventId"))
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlEntry.setDescription('The conceptual row of docsIf3CmtsEventCtrlTable.')
docsIf3CmtsEventCtrlEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 30, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlEventId.setReference('DOCSIS 3.0 Operations Support System Interface Specification CM-SP-OSSIv3.0-I07-080522, Format and Content for Event, Syslog, and SNMP Notification Annex.')
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlEventId.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlEventId.setDescription('This key represents the Event ID of the event being enabled for delivery to a dispatch mechanism (e.g., syslog).')
docsIf3CmtsEventCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsEventCtrlStatus.setDescription('The status of this instance.')
docsIf3CmMdCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 31), )
if mibBuilder.loadTexts: docsIf3CmMdCfgTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmMdCfgTable.setDescription('This object contains CM MAC domain level control and configuration attributes.')
docsIf3CmMdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 31, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf3CmMdCfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmMdCfgEntry.setDescription('The conceptual row of docsIf3CmMdCfgTable. The ifIndex key corresponds to the MAC Domain interface.')
docsIf3CmMdCfgIpProvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("ipv4Only", 0), ("ipv6Only", 1), ("honorMdd", 4))).clone('honorMdd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvMode.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I14-101008, IP Initialization Parameters TLV section.')
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvMode.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvMode.setDescription("This attribute specifies whether the CM honors or ignores the CMTS MDD TLV 5.1 setting in order to configure its IP provisioning mode. The CM relies upon the CMTS to facilitate the successful IP address acquisition independently of the MDD. When this attribute is set to 'ipv4Only' the CM will initiate the acquisition of a single IPv4 address for the CM management stack. When this attribute is set to 'ipv6Only' the CM will initiate the acquisition of a single IPv6 address for the CM management stack. When this attribute is set to 'honorMdd' the CM will initiate the acquisition of an IPv6 or IPv4 address as directed by the MDD message for provisioning and operation.")
docsIf3CmMdCfgIpProvModeResetOnChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 31, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvModeResetOnChange.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I14-101008, IP Initialization Parameters TLV section.')
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvModeResetOnChange.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvModeResetOnChange.setDescription("This attribute determines if the CM is to automatically reset upon change of the IpProvMode attribute. The attribute has a default value of 'false' (2) which means that the CM does not reset upon change to IpProvMode attribute. When this attribute is set to 'true' (1), the CM resets upon a change to the IpProvMode attribute.")
docsIf3CmMdCfgIpProvModeResetOnChangeHoldOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 31, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvModeResetOnChangeHoldOffTimer.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I14-101008, IP Initialization Parameters TLV section.')
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvModeResetOnChangeHoldOffTimer.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvModeResetOnChangeHoldOffTimer.setDescription("This attribute determines how long a CM with IpProvModeResetOnChange set to 'true' waits to reset. When the IpProvModeResetOnChange attribute is set to 'true' (1), the CM will decrement from the configured timer value before resetting. The default value of the IpProvModeResetOnChangeHoldOffTimer is 0 seconds which is equivalent to an immediate reset.")
docsIf3CmMdCfgIpProvModeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 31, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvModeStorageType.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I14-101008, IP Initialization Parameters TLV section.')
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvModeStorageType.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmMdCfgIpProvModeStorageType.setDescription("This attribute determines if the CM persists the value of IpProvMode across a single reset or across all resets. The default value of this attribute is 'nonVolatile' (3) which means that the CM persists the value of IpProvMode across all resets. The CM persists the value of IpProveMode across only a single reset when IpProvModeStorageType is set to volatile(2). Other StorageType values are not applicable for this object; an attempt to set this object to a value of other(1), permanent(4), or readOnly(5) will be rejected with an error code of inconsistentValue.")
docsIf3CmEnergyMgtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 32))
docsIf3CmEnergyMgtCfgFeatureEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 32, 1), Bits().clone(namedValues=NamedValues(("em1x1Feature", 0), ("dls", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmEnergyMgtCfgFeatureEnabled.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I20-121113, Energy Management Features section.')
if mibBuilder.loadTexts: docsIf3CmEnergyMgtCfgFeatureEnabled.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEnergyMgtCfgFeatureEnabled.setDescription('This attribute indicates which energy savings features have been enabled in the Cable Modem. The CM enables use of Energy Management Features only if both the Energy Management Feature Control TLV and Energy Management Modem Capability Response from the CMTS indicate that the feature is enabled. If bit 0 is set, the Energy Management 1x1 Mode feature is enabled. If bit 1 is set, the DOCSIS Light Sleep Mode feature is enabled.')
docsIf3CmEnergyMgtCfgCyclePeriod = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 32, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(900)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmEnergyMgtCfgCyclePeriod.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I20-121113, Energy Management Cycle Period section.')
if mibBuilder.loadTexts: docsIf3CmEnergyMgtCfgCyclePeriod.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEnergyMgtCfgCyclePeriod.setDescription('This attribute specifies a minimum time period (in seconds) that must elapse between EM-REQ transactions in certain situations: - This attribute sets the minimum cycle time that a CM will use for sending requests to enter an Energy Management Mode. The CM will not request to enter an Energy Management Mode while this amount of time has yet to elapse since the last time the CM requested an Energy Management Mode and received a response indicating (0) OK or (1) Reject Temporary (with no Hold-off Timer value provided). - In the case that the CM fails to receive an EM-RSP message after the maximum number of retries, this attribute sets the minimum amount of time to elapse before the CM can attempt another EM-REQ transaction.')
docsIf3CmEnergyMgt1x1CfgTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 33), )
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I20-121113, Energy Management 1x1 Mode Encodings section.')
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgTable.setDescription('This object provides configuration state information on the CM for the Energy Management 1x1 Mode feature.')
docsIf3CmEnergyMgt1x1CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 33, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmEnergyMgt1x1CfgDirection"))
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgEntry.setDescription('The conceptual row of docsIf3CmEnergyMgt1x1CfgTable.')
docsIf3CmEnergyMgt1x1CfgDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 33, 1, 1), IfDirection())
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgDirection.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgDirection.setDescription('This index indicates whether the threshold applies to the upstream or downstream.')
docsIf3CmEnergyMgt1x1CfgEntryBitrateThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 33, 1, 2), Unsigned32()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgEntryBitrateThrshld.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgEntryBitrateThrshld.setDescription('This attribute specifies the upstream or downstream bitrate threshold (in bps) below which the CM will request to enter Energy Management 1x1 Mode operation.')
docsIf3CmEnergyMgt1x1CfgEntryTimeThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 33, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgEntryTimeThrshld.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgEntryTimeThrshld.setDescription('This attribute specifies the number of consecutive seconds that the upstream or downstream data rate needs to remain below the Upstream or Downstream Entry Bitrate Threshold in order to determine that a transition to Energy Management 1x1 Mode is required.')
docsIf3CmEnergyMgt1x1CfgExitBitrateThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 33, 1, 4), Unsigned32()).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgExitBitrateThrshld.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgExitBitrateThrshld.setDescription('This attribute specifies the upstream or downstream bitrate threshold (in bps) above which the CM will request to leave Energy Management 1x1 Mode operation.')
docsIf3CmEnergyMgt1x1CfgExitTimeThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 33, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgExitTimeThrshld.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEnergyMgt1x1CfgExitTimeThrshld.setDescription('This attribute specifies the number of consecutive seconds that the upstream or downstream data rate needs to remain above the Upstream or Downstream Exit Bitrate Threshold in order to determine that a transition out of Energy Management 1x1 Mode is required.')
docsIf3CmSpectrumAnalysisCtrlCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34))
docsIf3CmSpectrumAnalysisCtrlCmdEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdEnable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdEnable.setDescription("This attribute is used to enable or disable the spectrum analyzer feature. Setting this attribute to true triggers the CM to initiate measurements for the spectrum analyzer feature based on the other configuration attributes for the feature. By default, the feature is disabled unless explicitly enabled. Note that the feature may be disabled by the system under certain circumstances if the spectrum analyzer would affect critical services. In such a case, the attribute will return 'false' when read, and will reject sets to 'true' with an error. Once the feature is enabled, any Set operation on the docsIf3CmSpectrumAnalysisCtrlCmd MIB group might not be effective until the feature is re-enabled again.")
docsIf3CmSpectrumAnalysisCtrlCmdInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdInactivityTimeout.setDescription('This attribute controls the length of time after the last spectrum analysis measurement before the feature is automatically disabled. If set to a value of 0, the feature will remain enabled until it is explicitly disabled.')
docsIf3CmSpectrumAnalysisCtrlCmdFirstSegmentCenterFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 3), Unsigned32().clone(93000000)).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdFirstSegmentCenterFrequency.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdFirstSegmentCenterFrequency.setDescription('This attribute controls the center frequency of the first segment for the spectrum analysis measurement. The frequency bins for this segment lie symmetrically to the left and right of this center frequency. If the number of bins in a segment is odd, the segment center frequency lies directly on the center bin. If the number of bins in a segment is even, the segment center frequency lies halfway between two bins. Changing the value of this attribute may result in changes to the docsIf3CmSpectrumAnalysisMeasTable. Note that if this attribute is set to an invalid value, the device may return an error, or may adjust the value of the attribute to the closest valid value.')
docsIf3CmSpectrumAnalysisCtrlCmdLastSegmentCenterFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 4), Unsigned32().clone(993000000)).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdLastSegmentCenterFrequency.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdLastSegmentCenterFrequency.setDescription('This attribute controls the center frequency of the last segment of the spectrum analysis measurement. The frequency bins for this segment lie symmetrically to the left and right of this center frequency. If the number of bins in a segment is odd, the segment center frequency lies directly on the center bin. If the number of bins in a segment is even, the segment center frequency lies halfway between two bins. The value of the LastSegmentCenterFrequency attribute should be equal to the FirstSegmentCenterFrequency plus and integer number of segment spans as determined by the SegmentFrequencySpan. Changing the value of this attribute may result in changes to the docsIf3CmSpectrumAnalysisMeasTable. Note that if this attribute is set to an invalid value, the device may return an error, or may adjust the value of the attribute to the closest valid value.')
docsIf3CmSpectrumAnalysisCtrlCmdSegmentFrequencySpan = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000000, 900000000)).clone(7500000)).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdSegmentFrequencySpan.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdSegmentFrequencySpan.setDescription('This attribute controls the frequency span of each segment (instance) in the docsIf3CmSpectrumAnalysisMeasTable. If set to a value of 0, then a default span will be chosen based on the hardware capabilities of the device. Segments are contiguous from the FirstSegementCenterFrequency to the LastSegmentCenterFrequency and the center frequency for each successive segment is incremented by the SegmentFequencySpan. The number of segments is (LastSegmentCenterFrequency - FirstSegmentCenterFrequency)/SegmentFrequencySpan + 1. A segment is equivalent to an instance in the docsIf3CmSpectrumAnalysisMeasTable. The chosen SegmentFrequencySpan affects the number of entries in the docsIf3CmSpectrumAnalysisMeasTable. A more granular SegmentFrequencySpan may adversely affect the amount of time needed to query the table entries in addition to possibly increasing the acquisition time. Changing the value of this attribute may result in changes to the docsIf3CmSpectrumAnalysisMeasTable. Note that if this attribute is set to an invalid value, the device may return an error, or may adjust the value of the object to the closest valid value.')
docsIf3CmSpectrumAnalysisCtrlCmdNumBinsPerSegment = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 2048)).clone(256)).setUnits('bins-per-segment').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdNumBinsPerSegment.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdNumBinsPerSegment.setDescription('This attribute controls the number of bins collected by the measurement performed for each segment (instance) in the docsIf3CmSpectrumAnalysisMeasTable. Note that if this attribute is set to an invalid value, the device may return an error, or may adjust the value of the attribute to the closest valid value.')
docsIf3CmSpectrumAnalysisCtrlCmdEquivalentNoiseBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 500)).clone(150)).setUnits('hundredthsbin').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdEquivalentNoiseBandwidth.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdEquivalentNoiseBandwidth.setDescription('This attribute allows the user to request an equivalent noise bandwidth for the resolution bandwidth filter used in the spectrum analysis. This corresponds to the spectral width of the window function used when performing a discrete Fourier transform for the analysis. The window function which corresponds to a value written to this object may be obtained by reading the value of the WindowFunction attribute. If an unsupported value is requested, the device may return an error, or choose the closest valid value to the one which is requested. If the closest value is chosen, then a subsequent read of this attribute will return the actual value which is in use.')
docsIf3CmSpectrumAnalysisCtrlCmdWindowFunction = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 8), SpectrumAnalysisWindowFunction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdWindowFunction.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdWindowFunction.setDescription("This attribute controls or indicates the windowing function which will be used when performing the discrete Fourier transform for the analysis. The WindowFunction and the Equivalent Noise Bandwidth are related. If a particular WindowFunction is selected, then the EquivalentNoiseBandwidth for the function which is in use, will be reported by the EquivalentNoiseBandwidth attribute. Alternatively if an EquivalentNoiseBandwidth value is chosen then if a WindowFunction function representing that EquivalentNoiseBandwidth is defined in the CM, that value will be reported in the WindowFunction MIB object, or a value of 'other' will be reported. Use of 'modern' windowing functions not yet defined will likely be reported as 'other'. Note that all window functions may not be supported by all devices. If an attempt is made to set the object to an unsupported window function, or if writing of the WindowFunction is not supported, an error will be returned.")
docsIf3CmSpectrumAnalysisCtrlCmdNumberOfAverages = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 34, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdNumberOfAverages.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisCtrlCmdNumberOfAverages.setDescription("This attribute controls the number of averages that will be performed on spectral bins. The average will be computed using the 'leaky integrator' method, where: reported bin value = alpha*accumulated bin values + (1-alpha)*current bin value. Alpha is one minus the reciprocal of the number of averages. For example, if N=25, then alpha = 0.96. A value of 1 indicates no averaging. Re-writing the number of averages will restart the averaging process. If there are no accumulated values, the accumulators are made equal to the first measured bin amplitudes. If an attempt is made to set the attribute to an unsupported number of averages, an error will be returned.")
docsIf3CmSpectrumAnalysisMeasTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 35), )
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasTable.setDescription('This table provides a list of spectral analysis measurements as performed across a range of center frequencies. The table is capable of representing a full scan of the spectrum.')
docsIf3CmSpectrumAnalysisMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 35, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisMeasFrequency"))
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasEntry.setDescription('Each row in the docsIf3CmSpectrumAnalysisMeasTable represents the spectral analysis around a single center frequency point in the spectrum.')
docsIf3CmSpectrumAnalysisMeasFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 35, 1, 1), Integer32())
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasFrequency.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasFrequency.setDescription('This index indicates the center frequency of the spectral analysis span which is represented by this instance.')
docsIf3CmSpectrumAnalysisMeasAmplitudeData = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 35, 1, 2), AmplitudeData()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasAmplitudeData.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasAmplitudeData.setDescription('This attribute provides a list of the spectral amplitudes as measured at the center frequency specified by the Frequency index. The frequency bins are ordered from lowest to highest frequencies covering the frequency span. Information about the center frequency, frequency span, number of bins and resolution bandwidth are included to provide context to the measurement point.')
docsIf3CmSpectrumAnalysisMeasTotalSegmentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 35, 1, 3), TenthdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasTotalSegmentPower.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmSpectrumAnalysisMeasTotalSegmentPower.setDescription('This attribute provides the total RF power present in the segment with the center frequency equal to the Frequency index and the span equal to the SegmentFrequencySpan. The value represents the sum of the spectrum power in all of the associated bins. The value is computed by summing power (not dB) values and converting the final sum to TenthdB.')
docsIf3CmtsCmEmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 36), )
if mibBuilder.loadTexts: docsIf3CmtsCmEmStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmEmStatsTable.setDescription('This table defines Energy Management mode statistics for the CM as reported by the CMTS. For example, such metrics can provide insight into configuration of appropriate EM 1x1 Mode Activity Detection thresholds on the CM and/or to get feedback on how/if the current thresholds are working well or are causing user experience issues.')
docsIf3CmtsCmEmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 36, 1), ).setIndexNames((0, "DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusId"))
if mibBuilder.loadTexts: docsIf3CmtsCmEmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmEmStatsEntry.setDescription('The conceptual row of docsIf3CmtsCmEmStatsTable.')
docsIf3CmtsCmEmStatsEm1x1ModeTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 36, 1, 1), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmtsCmEmStatsEm1x1ModeTotalDuration.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCmEmStatsEm1x1ModeTotalDuration.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM identified by docsIf3CmtsCmRegStatusId has been in Energy Management 1x1 mode, as controlled by the DBC-REQ Energy Management 1x1 Mode Indicator TLV.')
docsIf3CmEm1x1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 37), )
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTable.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTable.setDescription('This object defines Energy Management 1x1 mode statistics on the CM to provide insight into configuration of appropriate EM 1x1 Mode Activity Detection thresholds and/or to get feedback on how/if the current thresholds are working well or are causing user experience issues. These statistics are only applicable/valid when the Energy Management 1x1 mode is enabled in the CM.')
docsIf3CmEm1x1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 37, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsEntry.setDescription('The conceptual row of docsIf3CmEm1x1StatsTable. An instance exist for the CM MAC Domain Interface.')
docsIf3CmEm1x1StatsNumberTimesCrossedBelowUsEntryThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 37, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsNumberTimesCrossedBelowUsEntryThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsNumberTimesCrossedBelowUsEntryThrshlds.setDescription('This attribute indicates the number of times since registration the CM crossed below the upstream entry bitrate threshold for a number of consecutive seconds equal to or exceeding the upstream entry time threshold.')
docsIf3CmEm1x1StatsNumberTimesCrossedBelowDsEntryThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 37, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsNumberTimesCrossedBelowDsEntryThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsNumberTimesCrossedBelowDsEntryThrshlds.setDescription('This attribute indicates the number of times since registration the CM crossed below the downstream entry bitrate threshold for a number of consecutive seconds equal to or exceeding the downstream entry time threshold.')
docsIf3CmEm1x1StatsTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 37, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTotalDuration.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTotalDuration.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM has been in Energy Management 1x1 mode, as controlled by the DBC-REQ Energy Management 1x1 Mode Indicator TLV. This attribute differs from docsIf3CmEm1x1StatsTotalDurationBelowUsDsThrshlds because it is dependent on effects of the Energy Management Cycle Period, and processing of EM-REQ/EM-RSP messages and DBC messages that specifically indicate entry into or exit from Energy Management 1x1 mode.')
docsIf3CmEm1x1StatsTotalDurationBelowUsThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 37, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTotalDurationBelowUsThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTotalDurationBelowUsThrshlds.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM satisfied upstream conditions for entry into or remaining in Energy Management 1x1 mode.')
docsIf3CmEm1x1StatsTotalDurationBelowDsThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 37, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTotalDurationBelowDsThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTotalDurationBelowDsThrshlds.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM satisfied downstream conditions for entry into or remaining in Energy Management 1x1 mode.')
docsIf3CmEm1x1StatsTotalDurationBelowUsDsThrshlds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 1, 37, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTotalDurationBelowUsDsThrshlds.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmEm1x1StatsTotalDurationBelowUsDsThrshlds.setDescription('This attribute indicates the total time duration, in seconds since registration, the CM, with respect to both upstream and downstream entry and exit thresholds, satisfied conditions for entry into and remaining in Energy Management 1x1 mode. This attribute differs from docsIf3CmEm1x1StatsTotalDuration because it is not dependent on effects of the Energy Management Cycle Period or processing of EM-REQ/EM-RSP messages and DBC messages that specifically indicate entry into or exit from Energy Management 1x1 mode.')
docsIf3MibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2))
docsIf3MibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2, 1))
docsIf3MibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2, 2))
docsIf3CmtsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2, 1, 1)).setObjects(("DOCS-IF3-MIB", "docsIf3CmtsGroup"), ("DOCS-IF3-MIB", "docsIf3CmtsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf3CmtsCompliance = docsIf3CmtsCompliance.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsCompliance.setDescription('The compliance statement for the CMTS.')
docsIf3CmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2, 1, 2)).setObjects(("DOCS-IF3-MIB", "docsIf3CmGroup"), ("DOCS-IF3-MIB", "docsIf3CmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf3CmCompliance = docsIf3CmCompliance.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmCompliance.setDescription('The compliance statement for the CM.')
docsIf3CmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2, 2, 1)).setObjects(("DOCS-IF3-MIB", "docsIf3SignalQualityExtRxMER"), ("DOCS-IF3-MIB", "docsIf3SignalQualityExtRxMerSamples"), ("DOCS-IF3-MIB", "docsIf3MdNodeStatusMdDsSgId"), ("DOCS-IF3-MIB", "docsIf3MdNodeStatusMdUsSgId"), ("DOCS-IF3-MIB", "docsIf3MdDsSgStatusChSetId"), ("DOCS-IF3-MIB", "docsIf3MdUsSgStatusChSetId"), ("DOCS-IF3-MIB", "docsIf3CmtsSignalQualityExtCNIR"), ("DOCS-IF3-MIB", "docsIf3CmtsSignalQualityExtExpectedRxSignalPower"), ("DOCS-IF3-MIB", "docsIf3CmtsSpectrumAnalysisMeasAmplitudeData"), ("DOCS-IF3-MIB", "docsIf3CmtsSpectrumAnalysisMeasTimeInterval"), ("DOCS-IF3-MIB", "docsIf3CmtsSpectrumAnalysisMeasRowStatus"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusMacAddr"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusIPv6Addr"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusIPv6LinkLocal"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusIPv4Addr"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusValue"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusMdIfIndex"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusMdCmSgId"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusRcpId"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusRccStatusId"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusRcsId"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusTcsId"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusQosVersion"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusLastRegTime"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusAddrResolutionReqs"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusEnergyMgtEnabled"), ("DOCS-IF3-MIB", "docsIf3CmtsCmRegStatusEnergyMgtOperStatus"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusModulationType"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusRxPower"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusSignalNoise"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusMicroreflections"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusEqData"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusUnerroreds"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusCorrecteds"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusUncorrectables"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusHighResolutionTimingOffset"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusIsMuted"), ("DOCS-IF3-MIB", "docsIf3CmtsCmUsStatusRangingStatus"), ("DOCS-IF3-MIB", "docsIf3UsChExtSacCodeHoppingSelectionMode"), ("DOCS-IF3-MIB", "docsIf3UsChExtScdmaSelectionStringActiveCodes"), ("DOCS-IF3-MIB", "docsIf3MdCfgMddInterval"), ("DOCS-IF3-MIB", "docsIf3MdCfgIpProvMode"), ("DOCS-IF3-MIB", "docsIf3MdCfgCmStatusEvCtlEnabled"), ("DOCS-IF3-MIB", "docsIf3MdCfgUsFreqRange"), ("DOCS-IF3-MIB", "docsIf3MdCfgMcastDsidFwdEnabled"), ("DOCS-IF3-MIB", "docsIf3MdCfgMultRxChModeEnabled"), ("DOCS-IF3-MIB", "docsIf3MdCfgMultTxChModeEnabled"), ("DOCS-IF3-MIB", "docsIf3MdCfgEarlyAuthEncrCtrl"), ("DOCS-IF3-MIB", "docsIf3MdCfgTftpProxyEnabled"), ("DOCS-IF3-MIB", "docsIf3MdCfgSrcAddrVerifEnabled"), ("DOCS-IF3-MIB", "docsIf3MdCfgDownChannelAnnex"), ("DOCS-IF3-MIB", "docsIf3MdCfgCmUdcEnabled"), ("DOCS-IF3-MIB", "docsIf3MdCfgSendUdcRulesEnabled"), ("DOCS-IF3-MIB", "docsIf3MdCfgServiceTypeIdList"), ("DOCS-IF3-MIB", "docsIf3MdCfgBpi2EnforceCtrl"), ("DOCS-IF3-MIB", "docsIf3MdCfgEnergyMgt1x1Enabled"), ("DOCS-IF3-MIB", "docsIf3MdChCfgIsPriCapableDs"), ("DOCS-IF3-MIB", "docsIf3MdChCfgChId"), ("DOCS-IF3-MIB", "docsIf3MdChCfgSfProvAttrMask"), ("DOCS-IF3-MIB", "docsIf3MdChCfgRowStatus"), ("DOCS-IF3-MIB", "docsIf3MdUsToDsChMappingMdIfIndex"), ("DOCS-IF3-MIB", "docsIf3DsChSetChList"), ("DOCS-IF3-MIB", "docsIf3UsChSetChList"), ("DOCS-IF3-MIB", "docsIf3BondingGrpCfgChList"), ("DOCS-IF3-MIB", "docsIf3BondingGrpCfgSfProvAttrMask"), ("DOCS-IF3-MIB", "docsIf3BondingGrpCfgDsidReseqWaitTime"), ("DOCS-IF3-MIB", "docsIf3BondingGrpCfgDsidReseqWarnThrshld"), ("DOCS-IF3-MIB", "docsIf3BondingGrpCfgRowStatus"), ("DOCS-IF3-MIB", "docsIf3DsBondingGrpStatusMdDsSgId"), ("DOCS-IF3-MIB", "docsIf3DsBondingGrpStatusCfgId"), ("DOCS-IF3-MIB", "docsIf3UsBondingGrpStatusMdUsSgId"), ("DOCS-IF3-MIB", "docsIf3UsBondingGrpStatusCfgId"), ("DOCS-IF3-MIB", "docsIf3RccStatusRccCfgId"), ("DOCS-IF3-MIB", "docsIf3RccStatusValidityCode"), ("DOCS-IF3-MIB", "docsIf3RccStatusValidityCodeText"), ("DOCS-IF3-MIB", "docsIf3RxChStatusChIfIndex"), ("DOCS-IF3-MIB", "docsIf3RxChStatusPrimaryDsIndicator"), ("DOCS-IF3-MIB", "docsIf3RxChStatusRcRmConnectivityId"), ("DOCS-IF3-MIB", "docsIf3RxModuleStatusRmRmConnectivityId"), ("DOCS-IF3-MIB", "docsIf3RxModuleStatusFirstCenterFrequency"), ("DOCS-IF3-MIB", "docsIf3CmtsCmCtrlCmdMacAddr"), ("DOCS-IF3-MIB", "docsIf3CmtsCmCtrlCmdMuteUsChId"), ("DOCS-IF3-MIB", "docsIf3CmtsCmCtrlCmdMuteInterval"), ("DOCS-IF3-MIB", "docsIf3CmtsCmCtrlCmdDisableForwarding"), ("DOCS-IF3-MIB", "docsIf3CmtsCmCtrlCmdCommit"), ("DOCS-IF3-MIB", "docsIf3CmtsEventCtrlStatus"), ("DOCS-IF3-MIB", "docsIf3CmtsCmEmStatsEm1x1ModeTotalDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf3CmtsGroup = docsIf3CmtsGroup.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsGroup.setDescription('Group of objects implemented in a DOCSIS 3.0 CMTS')
docsIf3CmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2, 2, 2)).setObjects(("DOCS-IF3-MIB", "docsIf3SignalQualityExtRxMER"), ("DOCS-IF3-MIB", "docsIf3SignalQualityExtRxMerSamples"), ("DOCS-IF3-MIB", "docsIf3CmStatusValue"), ("DOCS-IF3-MIB", "docsIf3CmStatusCode"), ("DOCS-IF3-MIB", "docsIf3CmStatusResets"), ("DOCS-IF3-MIB", "docsIf3CmStatusLostSyncs"), ("DOCS-IF3-MIB", "docsIf3CmStatusInvalidMaps"), ("DOCS-IF3-MIB", "docsIf3CmStatusInvalidUcds"), ("DOCS-IF3-MIB", "docsIf3CmStatusInvalidRangingRsps"), ("DOCS-IF3-MIB", "docsIf3CmStatusInvalidRegRsps"), ("DOCS-IF3-MIB", "docsIf3CmStatusT1Timeouts"), ("DOCS-IF3-MIB", "docsIf3CmStatusT2Timeouts"), ("DOCS-IF3-MIB", "docsIf3CmStatusEnergyMgt1x1OperStatus"), ("DOCS-IF3-MIB", "docsIf3CmStatusUsTxPower"), ("DOCS-IF3-MIB", "docsIf3CmStatusUsT3Timeouts"), ("DOCS-IF3-MIB", "docsIf3CmStatusUsT4Timeouts"), ("DOCS-IF3-MIB", "docsIf3CmStatusUsRangingAborteds"), ("DOCS-IF3-MIB", "docsIf3CmStatusUsModulationType"), ("DOCS-IF3-MIB", "docsIf3CmStatusUsEqData"), ("DOCS-IF3-MIB", "docsIf3CmStatusUsT3Exceededs"), ("DOCS-IF3-MIB", "docsIf3CmStatusUsIsMuted"), ("DOCS-IF3-MIB", "docsIf3CmStatusUsRangingStatus"), ("DOCS-IF3-MIB", "docsIf3CmCapabilitiesReq"), ("DOCS-IF3-MIB", "docsIf3CmCapabilitiesRsp"), ("DOCS-IF3-MIB", "docsIf3UsChExtSacCodeHoppingSelectionMode"), ("DOCS-IF3-MIB", "docsIf3UsChExtScdmaSelectionStringActiveCodes"), ("DOCS-IF3-MIB", "docsIf3RxChStatusChIfIndex"), ("DOCS-IF3-MIB", "docsIf3RxChStatusPrimaryDsIndicator"), ("DOCS-IF3-MIB", "docsIf3RxChStatusRcRmConnectivityId"), ("DOCS-IF3-MIB", "docsIf3RxModuleStatusRmRmConnectivityId"), ("DOCS-IF3-MIB", "docsIf3RxModuleStatusFirstCenterFrequency"), ("DOCS-IF3-MIB", "docsIf3CmDpvStatsLastMeasLatency"), ("DOCS-IF3-MIB", "docsIf3CmDpvStatsLastMeasTime"), ("DOCS-IF3-MIB", "docsIf3CmDpvStatsMinLatency"), ("DOCS-IF3-MIB", "docsIf3CmDpvStatsMaxLatency"), ("DOCS-IF3-MIB", "docsIf3CmDpvStatsAvgLatency"), ("DOCS-IF3-MIB", "docsIf3CmDpvStatsNumMeas"), ("DOCS-IF3-MIB", "docsIf3CmDpvStatsLastClearTime"), ("DOCS-IF3-MIB", "docsIf3CmEventCtrlStatus"), ("DOCS-IF3-MIB", "docsIf3CmMdCfgIpProvMode"), ("DOCS-IF3-MIB", "docsIf3CmMdCfgIpProvModeResetOnChange"), ("DOCS-IF3-MIB", "docsIf3CmMdCfgIpProvModeResetOnChangeHoldOffTimer"), ("DOCS-IF3-MIB", "docsIf3CmMdCfgIpProvModeStorageType"), ("DOCS-IF3-MIB", "docsIf3CmEnergyMgtCfgFeatureEnabled"), ("DOCS-IF3-MIB", "docsIf3CmEnergyMgtCfgCyclePeriod"), ("DOCS-IF3-MIB", "docsIf3CmEnergyMgt1x1CfgDirection"), ("DOCS-IF3-MIB", "docsIf3CmEnergyMgt1x1CfgEntryBitrateThrshld"), ("DOCS-IF3-MIB", "docsIf3CmEnergyMgt1x1CfgEntryTimeThrshld"), ("DOCS-IF3-MIB", "docsIf3CmEnergyMgt1x1CfgExitBitrateThrshld"), ("DOCS-IF3-MIB", "docsIf3CmEnergyMgt1x1CfgExitTimeThrshld"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdEnable"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdInactivityTimeout"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdFirstSegmentCenterFrequency"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdLastSegmentCenterFrequency"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdSegmentFrequencySpan"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdNumBinsPerSegment"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdEquivalentNoiseBandwidth"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdWindowFunction"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisCtrlCmdNumberOfAverages"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisMeasAmplitudeData"), ("DOCS-IF3-MIB", "docsIf3CmSpectrumAnalysisMeasTotalSegmentPower"), ("DOCS-IF3-MIB", "docsIf3CmEm1x1StatsNumberTimesCrossedBelowUsEntryThrshlds"), ("DOCS-IF3-MIB", "docsIf3CmEm1x1StatsNumberTimesCrossedBelowDsEntryThrshlds"), ("DOCS-IF3-MIB", "docsIf3CmEm1x1StatsTotalDuration"), ("DOCS-IF3-MIB", "docsIf3CmEm1x1StatsTotalDurationBelowUsThrshlds"), ("DOCS-IF3-MIB", "docsIf3CmEm1x1StatsTotalDurationBelowDsThrshlds"), ("DOCS-IF3-MIB", "docsIf3CmEm1x1StatsTotalDurationBelowUsDsThrshlds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf3CmGroup = docsIf3CmGroup.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmGroup.setDescription('Group of objects implemented in a DOCSIS 3.0 CM')
docsIf3CmtsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2, 2, 3)).setObjects(("DOCS-IF3-MIB", "docsIf3CmtsEventNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf3CmtsNotificationGroup = docsIf3CmtsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmtsNotificationGroup.setDescription('CMTS is required to support notifications in this group')
docsIf3CmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2, 2, 4)).setObjects(("DOCS-IF3-MIB", "docsIf3CmEventNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf3CmNotificationGroup = docsIf3CmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: docsIf3CmNotificationGroup.setDescription('CM is required to support notifications in this group')
docsIf3ObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 20, 2, 2, 5)).setObjects(("DOCS-IF3-MIB", "docsIf3RccCfgVendorSpecific"), ("DOCS-IF3-MIB", "docsIf3RccCfgDescription"), ("DOCS-IF3-MIB", "docsIf3RccCfgRowStatus"), ("DOCS-IF3-MIB", "docsIf3RxChCfgChIfIndex"), ("DOCS-IF3-MIB", "docsIf3RxChCfgPrimaryDsIndicator"), ("DOCS-IF3-MIB", "docsIf3RxChCfgRcRmConnectivityId"), ("DOCS-IF3-MIB", "docsIf3RxChCfgRowStatus"), ("DOCS-IF3-MIB", "docsIf3RxModuleCfgRmRmConnectivityId"), ("DOCS-IF3-MIB", "docsIf3RxModuleCfgFirstCenterFrequency"), ("DOCS-IF3-MIB", "docsIf3RxModuleCfgRowStatus"), ("DOCS-IF3-MIB", "docsIf3CmStatusUCCsSuccesses"), ("DOCS-IF3-MIB", "docsIf3CmStatusUCCFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIf3ObsoleteGroup = docsIf3ObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: docsIf3ObsoleteGroup.setDescription('Group of objects not implemented on or for DOCSIS 3.1 devices.')
mibBuilder.exportSymbols("DOCS-IF3-MIB", docsIf3RxChStatusTable=docsIf3RxChStatusTable, docsIf3UsChSetTable=docsIf3UsChSetTable, docsIf3CmStatusEntry=docsIf3CmStatusEntry, docsIf3RccCfgRccCfgId=docsIf3RccCfgRccCfgId, docsIf3MdNodeStatusEntry=docsIf3MdNodeStatusEntry, docsIf3RxModuleCfgFirstCenterFrequency=docsIf3RxModuleCfgFirstCenterFrequency, docsIf3DsChSetId=docsIf3DsChSetId, docsIf3CmEnergyMgt1x1CfgEntryBitrateThrshld=docsIf3CmEnergyMgt1x1CfgEntryBitrateThrshld, docsIf3CmtsNotificationGroup=docsIf3CmtsNotificationGroup, Tlv8=Tlv8, docsIf3MdUsSgStatusChSetId=docsIf3MdUsSgStatusChSetId, docsIf3CmEventCtrlEntry=docsIf3CmEventCtrlEntry, docsIf3CmSpectrumAnalysisMeasAmplitudeData=docsIf3CmSpectrumAnalysisMeasAmplitudeData, docsIf3DsBondingGrpStatusCfgId=docsIf3DsBondingGrpStatusCfgId, docsIf3CmtsCmRegStatusEnergyMgtOperStatus=docsIf3CmtsCmRegStatusEnergyMgtOperStatus, docsIf3CmtsCmUsStatusModulationType=docsIf3CmtsCmUsStatusModulationType, docsIf3MdDsSgStatusEntry=docsIf3MdDsSgStatusEntry, docsIf3CmtsCmUsStatusUncorrectables=docsIf3CmtsCmUsStatusUncorrectables, docsIf3UsBondingGrpStatusChSetId=docsIf3UsBondingGrpStatusChSetId, docsIf3UsBondingGrpStatusMdUsSgId=docsIf3UsBondingGrpStatusMdUsSgId, docsIf3CmtsCmRegStatusIPv6LinkLocal=docsIf3CmtsCmRegStatusIPv6LinkLocal, docsIf3CmtsCmCtrlCmdMuteUsChId=docsIf3CmtsCmCtrlCmdMuteUsChId, docsIf3MdUsSgStatusMdUsSgId=docsIf3MdUsSgStatusMdUsSgId, docsIf3MdChCfgRowStatus=docsIf3MdChCfgRowStatus, docsIf3RxChCfgTable=docsIf3RxChCfgTable, docsIf3UsChSetEntry=docsIf3UsChSetEntry, docsIf3CmMdCfgIpProvMode=docsIf3CmMdCfgIpProvMode, docsIf3CmtsGroup=docsIf3CmtsGroup, docsIf3CmtsCmRegStatusEnergyMgtEnabled=docsIf3CmtsCmRegStatusEnergyMgtEnabled, docsIf3MdCfgCmStatusEvCtlEnabled=docsIf3MdCfgCmStatusEvCtlEnabled, docsIf3CmSpectrumAnalysisCtrlCmdEquivalentNoiseBandwidth=docsIf3CmSpectrumAnalysisCtrlCmdEquivalentNoiseBandwidth, docsIf3MdNodeStatusMdCmSgId=docsIf3MdNodeStatusMdCmSgId, docsIf3CmtsCmEmStatsTable=docsIf3CmtsCmEmStatsTable, docsIf3RxModuleStatusEntry=docsIf3RxModuleStatusEntry, docsIf3CmDpvStatsLastMeasTime=docsIf3CmDpvStatsLastMeasTime, docsIf3CmMdCfgEntry=docsIf3CmMdCfgEntry, docsIf3CmStatusT1Timeouts=docsIf3CmStatusT1Timeouts, docsIf3CmStatusUsT3Timeouts=docsIf3CmStatusUsT3Timeouts, docsIf3CmtsCmUsStatusEqData=docsIf3CmtsCmUsStatusEqData, docsIf3CmtsCmUsStatusUnerroreds=docsIf3CmtsCmUsStatusUnerroreds, docsIf3CmStatusInvalidMaps=docsIf3CmStatusInvalidMaps, docsIf3CmSpectrumAnalysisMeasEntry=docsIf3CmSpectrumAnalysisMeasEntry, docsIf3RccCfgVendorSpecific=docsIf3RccCfgVendorSpecific, docsIf3CmSpectrumAnalysisCtrlCmdNumberOfAverages=docsIf3CmSpectrumAnalysisCtrlCmdNumberOfAverages, docsIf3BondingGrpCfgEntry=docsIf3BondingGrpCfgEntry, docsIf3CmtsCmUsStatusHighResolutionTimingOffset=docsIf3CmtsCmUsStatusHighResolutionTimingOffset, ScdmaSelectionString=ScdmaSelectionString, ChannelList=ChannelList, docsIf3MdCfgEntry=docsIf3MdCfgEntry, docsIf3UsBondingGrpStatusCfgId=docsIf3UsBondingGrpStatusCfgId, docsIf3RxChCfgRowStatus=docsIf3RxChCfgRowStatus, docsIf3CmStatusT2Timeouts=docsIf3CmStatusT2Timeouts, docsIf3RxModuleStatusFirstCenterFrequency=docsIf3RxModuleStatusFirstCenterFrequency, docsIf3MdUsSgStatusTable=docsIf3MdUsSgStatusTable, docsIf3MdCfgCmUdcEnabled=docsIf3MdCfgCmUdcEnabled, docsIf3CmSpectrumAnalysisCtrlCmdSegmentFrequencySpan=docsIf3CmSpectrumAnalysisCtrlCmdSegmentFrequencySpan, docsIf3CmtsCmCtrlCmdMuteInterval=docsIf3CmtsCmCtrlCmdMuteInterval, docsIf3MdCfgTftpProxyEnabled=docsIf3MdCfgTftpProxyEnabled, docsIf3MdUsToDsChMappingMdIfIndex=docsIf3MdUsToDsChMappingMdIfIndex, docsIf3CmtsCmRegStatusQosVersion=docsIf3CmtsCmRegStatusQosVersion, docsIf3CmtsCmRegStatusLastRegTime=docsIf3CmtsCmRegStatusLastRegTime, docsIf3SignalQualityExtTable=docsIf3SignalQualityExtTable, docsIf3CmEnergyMgt1x1CfgTable=docsIf3CmEnergyMgt1x1CfgTable, docsIf3MdChCfgEntry=docsIf3MdChCfgEntry, docsIf3CmtsCmRegStatusRcsId=docsIf3CmtsCmRegStatusRcsId, docsIf3SignalQualityExtEntry=docsIf3SignalQualityExtEntry, docsIf3Mib=docsIf3Mib, docsIf3CmStatusUsTxPower=docsIf3CmStatusUsTxPower, docsIf3RxChCfgChIfIndex=docsIf3RxChCfgChIfIndex, docsIf3RxModuleCfgRmId=docsIf3RxModuleCfgRmId, AttrAggrRuleMask=AttrAggrRuleMask, docsIf3CmStatusUsT3Exceededs=docsIf3CmStatusUsT3Exceededs, docsIf3RccCfgTable=docsIf3RccCfgTable, docsIf3RxModuleStatusTable=docsIf3RxModuleStatusTable, docsIf3MdDsSgStatusTable=docsIf3MdDsSgStatusTable, docsIf3MdUsToDsChMappingDsIfIndex=docsIf3MdUsToDsChMappingDsIfIndex, docsIf3DsBondingGrpStatusEntry=docsIf3DsBondingGrpStatusEntry, docsIf3DsChSetChList=docsIf3DsChSetChList, docsIf3CmtsCmCtrl=docsIf3CmtsCmCtrl, docsIf3CmEnergyMgtCfg=docsIf3CmEnergyMgtCfg, docsIf3MdCfgIpProvMode=docsIf3MdCfgIpProvMode, docsIf3RxModuleStatusRmRmConnectivityId=docsIf3RxModuleStatusRmRmConnectivityId, docsIf3CmStatusLostSyncs=docsIf3CmStatusLostSyncs, docsIf3RccStatusValidityCode=docsIf3RccStatusValidityCode, docsIf3CmtsSpectrumAnalysisMeasRowStatus=docsIf3CmtsSpectrumAnalysisMeasRowStatus, docsIf3CmEm1x1StatsEntry=docsIf3CmEm1x1StatsEntry, docsIf3CmStatusUsModulationType=docsIf3CmStatusUsModulationType, docsIf3CmtsSignalQualityExtCNIR=docsIf3CmtsSignalQualityExtCNIR, docsIf3CmMdCfgIpProvModeResetOnChangeHoldOffTimer=docsIf3CmMdCfgIpProvModeResetOnChangeHoldOffTimer, SpectrumAnalysisWindowFunction=SpectrumAnalysisWindowFunction, docsIf3UsChExtScdmaSelectionStringActiveCodes=docsIf3UsChExtScdmaSelectionStringActiveCodes, docsIf3BondingGrpCfgRowStatus=docsIf3BondingGrpCfgRowStatus, docsIf3CmtsEventCtrlTable=docsIf3CmtsEventCtrlTable, docsIf3MibConformance=docsIf3MibConformance, docsIf3CmtsCmUsStatusSignalNoise=docsIf3CmtsCmUsStatusSignalNoise, docsIf3Notifications=docsIf3Notifications, docsIf3CmStatusUsT4Timeouts=docsIf3CmStatusUsT4Timeouts, docsIf3MdNodeStatusMdUsSgId=docsIf3MdNodeStatusMdUsSgId, docsIf3CmtsCmRegStatusRccStatusId=docsIf3CmtsCmRegStatusRccStatusId, docsIf3CmtsSpectrumAnalysisMeasEntry=docsIf3CmtsSpectrumAnalysisMeasEntry, docsIf3CmSpectrumAnalysisMeasTable=docsIf3CmSpectrumAnalysisMeasTable, docsIf3MibCompliances=docsIf3MibCompliances, docsIf3CmtsCmRegStatusMdIfIndex=docsIf3CmtsCmRegStatusMdIfIndex, docsIf3CmCapabilities=docsIf3CmCapabilities, docsIf3CmEnergyMgt1x1CfgDirection=docsIf3CmEnergyMgt1x1CfgDirection, docsIf3CmSpectrumAnalysisCtrlCmdWindowFunction=docsIf3CmSpectrumAnalysisCtrlCmdWindowFunction, docsIf3CmEnergyMgt1x1CfgEntry=docsIf3CmEnergyMgt1x1CfgEntry, docsIf3BondingGrpCfgDir=docsIf3BondingGrpCfgDir, RangingState=RangingState, docsIf3RxModuleCfgEntry=docsIf3RxModuleCfgEntry, docsIf3CmtsCmRegStatusRcpId=docsIf3CmtsCmRegStatusRcpId, docsIf3MdDsSgStatusMdDsSgId=docsIf3MdDsSgStatusMdDsSgId, docsIf3MibObjects=docsIf3MibObjects, docsIf3CmtsCmRegStatusTcsId=docsIf3CmtsCmRegStatusTcsId, docsIf3SignalQualityExtRxMER=docsIf3SignalQualityExtRxMER, docsIf3MdCfgMultTxChModeEnabled=docsIf3MdCfgMultTxChModeEnabled, docsIf3BondingGrpCfgTable=docsIf3BondingGrpCfgTable, docsIf3CmStatusEnergyMgt1x1OperStatus=docsIf3CmStatusEnergyMgt1x1OperStatus, docsIf3MdChCfgChId=docsIf3MdChCfgChId, docsIf3MdNodeStatusNodeName=docsIf3MdNodeStatusNodeName, docsIf3CmStatusResets=docsIf3CmStatusResets, docsIf3BondingGrpCfgSfProvAttrMask=docsIf3BondingGrpCfgSfProvAttrMask, docsIf3CmtsCmEmStatsEntry=docsIf3CmtsCmEmStatsEntry, docsIf3CmStatusInvalidRegRsps=docsIf3CmStatusInvalidRegRsps, docsIf3MdUsToDsChMappingEntry=docsIf3MdUsToDsChMappingEntry, docsIf3CmtsCmRegStatusValue=docsIf3CmtsCmRegStatusValue, docsIf3CmStatusInvalidUcds=docsIf3CmStatusInvalidUcds, docsIf3CmtsCmUsStatusIsMuted=docsIf3CmtsCmUsStatusIsMuted, docsIf3CmtsCmUsStatusRangingStatus=docsIf3CmtsCmUsStatusRangingStatus, docsIf3RccStatusEntry=docsIf3RccStatusEntry, docsIf3RccStatusRccStatusId=docsIf3RccStatusRccStatusId, docsIf3BondingGrpCfgDsidReseqWaitTime=docsIf3BondingGrpCfgDsidReseqWaitTime, docsIf3MdCfgEnergyMgt1x1Enabled=docsIf3MdCfgEnergyMgt1x1Enabled, docsIf3UsChExtSacCodeHoppingSelectionMode=docsIf3UsChExtSacCodeHoppingSelectionMode, docsIf3MdNodeStatusTable=docsIf3MdNodeStatusTable, docsIf3CmStatusInvalidRangingRsps=docsIf3CmStatusInvalidRangingRsps, docsIf3MdUsSgStatusEntry=docsIf3MdUsSgStatusEntry, docsIf3CmtsSignalQualityExtEntry=docsIf3CmtsSignalQualityExtEntry, docsIf3CmDpvStatsLastClearTime=docsIf3CmDpvStatsLastClearTime, docsIf3CmEm1x1StatsNumberTimesCrossedBelowUsEntryThrshlds=docsIf3CmEm1x1StatsNumberTimesCrossedBelowUsEntryThrshlds, docsIf3CmtsSpectrumAnalysisMeasTable=docsIf3CmtsSpectrumAnalysisMeasTable, docsIf3CmDpvStatsAvgLatency=docsIf3CmDpvStatsAvgLatency, docsIf3RxChStatusRcId=docsIf3RxChStatusRcId, docsIf3CmDpvStatsTable=docsIf3CmDpvStatsTable, docsIf3CmtsCmEmStatsEm1x1ModeTotalDuration=docsIf3CmtsCmEmStatsEm1x1ModeTotalDuration, docsIf3CmStatusUsIsMuted=docsIf3CmStatusUsIsMuted, docsIf3MdChCfgChIfIndex=docsIf3MdChCfgChIfIndex, docsIf3RccCfgRcpId=docsIf3RccCfgRcpId, docsIf3MdCfgSrcAddrVerifEnabled=docsIf3MdCfgSrcAddrVerifEnabled, docsIf3DsBondingGrpStatusMdDsSgId=docsIf3DsBondingGrpStatusMdDsSgId, docsIf3CmStatusCode=docsIf3CmStatusCode, docsIf3CmtsCmCtrlCmdCommit=docsIf3CmtsCmCtrlCmdCommit, docsIf3CmEventCtrlTable=docsIf3CmEventCtrlTable, docsIf3MdCfgMddInterval=docsIf3MdCfgMddInterval, docsIf3UsChExtEntry=docsIf3UsChExtEntry, docsIf3CmCapabilitiesReq=docsIf3CmCapabilitiesReq, docsIf3MibGroups=docsIf3MibGroups, docsIf3CmtsCompliance=docsIf3CmtsCompliance, docsIf3CmtsCmCtrlCmdDisableForwarding=docsIf3CmtsCmCtrlCmdDisableForwarding, docsIf3CmGroup=docsIf3CmGroup, docsIf3CmEnergyMgtCfgCyclePeriod=docsIf3CmEnergyMgtCfgCyclePeriod, docsIf3CmtsCmUsStatusMicroreflections=docsIf3CmtsCmUsStatusMicroreflections, docsIf3MdChCfgSfProvAttrMask=docsIf3MdChCfgSfProvAttrMask, AmplitudeData=AmplitudeData, docsIf3CmMdCfgIpProvModeResetOnChange=docsIf3CmMdCfgIpProvModeResetOnChange, docsIf3CmStatusUsRangingStatus=docsIf3CmStatusUsRangingStatus, Dsid=Dsid, docsIf3RxModuleCfgRmRmConnectivityId=docsIf3RxModuleCfgRmRmConnectivityId, docsIf3DsChSetTable=docsIf3DsChSetTable, docsIf3CmDpvStatsGrpId=docsIf3CmDpvStatsGrpId, docsIf3RxChCfgRcId=docsIf3RxChCfgRcId, docsIf3CmStatusUsEqData=docsIf3CmStatusUsEqData, docsIf3RccCfgDescription=docsIf3RccCfgDescription, docsIf3MdCfgDownChannelAnnex=docsIf3MdCfgDownChannelAnnex, docsIf3MdNodeStatusMdDsSgId=docsIf3MdNodeStatusMdDsSgId, docsIf3CmSpectrumAnalysisCtrlCmdLastSegmentCenterFrequency=docsIf3CmSpectrumAnalysisCtrlCmdLastSegmentCenterFrequency, docsIf3RccStatusTable=docsIf3RccStatusTable, docsIf3BondingGrpCfgCfgId=docsIf3BondingGrpCfgCfgId, docsIf3MdCfgServiceTypeIdList=docsIf3MdCfgServiceTypeIdList, docsIf3CmMdCfgTable=docsIf3CmMdCfgTable, docsIf3CmtsSignalQualityExtExpectedRxSignalPower=docsIf3CmtsSignalQualityExtExpectedRxSignalPower, docsIf3CmEm1x1StatsTotalDurationBelowDsThrshlds=docsIf3CmEm1x1StatsTotalDurationBelowDsThrshlds, docsIf3CmMdCfgIpProvModeStorageType=docsIf3CmMdCfgIpProvModeStorageType, docsIf3MdDsSgStatusChSetId=docsIf3MdDsSgStatusChSetId, docsIf3CmSpectrumAnalysisMeasTotalSegmentPower=docsIf3CmSpectrumAnalysisMeasTotalSegmentPower, IfDirection=IfDirection, docsIf3CmtsCmRegStatusIPv6Addr=docsIf3CmtsCmRegStatusIPv6Addr, docsIf3CmtsCmUsStatusCorrecteds=docsIf3CmtsCmUsStatusCorrecteds, docsIf3MdUsToDsChMappingUsIfIndex=docsIf3MdUsToDsChMappingUsIfIndex, docsIf3CmStatusUsEntry=docsIf3CmStatusUsEntry, docsIf3CmCapabilitiesRsp=docsIf3CmCapabilitiesRsp, docsIf3CmtsCmUsStatusEntry=docsIf3CmtsCmUsStatusEntry, docsIf3CmStatusUsTable=docsIf3CmStatusUsTable, docsIf3CmEnergyMgt1x1CfgExitBitrateThrshld=docsIf3CmEnergyMgt1x1CfgExitBitrateThrshld, docsIf3CmEm1x1StatsTotalDurationBelowUsDsThrshlds=docsIf3CmEm1x1StatsTotalDurationBelowUsDsThrshlds, docsIf3CmtsCmRegStatusMdCmSgId=docsIf3CmtsCmRegStatusMdCmSgId, docsIf3CmSpectrumAnalysisCtrlCmdNumBinsPerSegment=docsIf3CmSpectrumAnalysisCtrlCmdNumBinsPerSegment, docsIf3CmDpvStatsMinLatency=docsIf3CmDpvStatsMinLatency, docsIf3CmtsSignalQualityExtTable=docsIf3CmtsSignalQualityExtTable, docsIf3CmEm1x1StatsNumberTimesCrossedBelowDsEntryThrshlds=docsIf3CmEm1x1StatsNumberTimesCrossedBelowDsEntryThrshlds, docsIf3CmtsEventNotif=docsIf3CmtsEventNotif, docsIf3RxChStatusRcRmConnectivityId=docsIf3RxChStatusRcRmConnectivityId, docsIf3RxChStatusChIfIndex=docsIf3RxChStatusChIfIndex, docsIf3CmtsCmRegStatusEntry=docsIf3CmtsCmRegStatusEntry, docsIf3RxChCfgEntry=docsIf3RxChCfgEntry, docsIf3CmtsCmRegStatusTable=docsIf3CmtsCmRegStatusTable, docsIf3CmtsCmRegStatusAddrResolutionReqs=docsIf3CmtsCmRegStatusAddrResolutionReqs, docsIf3MdChCfgTable=docsIf3MdChCfgTable, docsIf3CmDpvStatsMaxLatency=docsIf3CmDpvStatsMaxLatency, docsIf3CmtsEventCtrlEntry=docsIf3CmtsEventCtrlEntry, docsIf3RxModuleStatusRmId=docsIf3RxModuleStatusRmId, docsIf3UsBondingGrpStatusTable=docsIf3UsBondingGrpStatusTable, docsIf3CmtsCmUsStatusTable=docsIf3CmtsCmUsStatusTable, docsIf3CmSpectrumAnalysisCtrlCmd=docsIf3CmSpectrumAnalysisCtrlCmd, docsIf3CmEm1x1StatsTotalDurationBelowUsThrshlds=docsIf3CmEm1x1StatsTotalDurationBelowUsThrshlds, docsIf3MdChCfgIsPriCapableDs=docsIf3MdChCfgIsPriCapableDs, docsIf3RxModuleCfgRowStatus=docsIf3RxModuleCfgRowStatus, docsIf3RxChCfgRcRmConnectivityId=docsIf3RxChCfgRcRmConnectivityId, RcpId=RcpId, docsIf3BondingGrpCfgDsidReseqWarnThrshld=docsIf3BondingGrpCfgDsidReseqWarnThrshld, docsIf3CmEm1x1StatsTotalDuration=docsIf3CmEm1x1StatsTotalDuration, docsIf3DsBondingGrpStatusChSetId=docsIf3DsBondingGrpStatusChSetId, docsIf3UsChSetId=docsIf3UsChSetId, docsIf3CmStatusTable=docsIf3CmStatusTable, docsIf3CmNotificationGroup=docsIf3CmNotificationGroup, docsIf3MdCfgEarlyAuthEncrCtrl=docsIf3MdCfgEarlyAuthEncrCtrl, docsIf3CmSpectrumAnalysisCtrlCmdFirstSegmentCenterFrequency=docsIf3CmSpectrumAnalysisCtrlCmdFirstSegmentCenterFrequency, docsIf3DsChSetEntry=docsIf3DsChSetEntry, PYSNMP_MODULE_ID=docsIf3Mib, docsIf3MdCfgUsFreqRange=docsIf3MdCfgUsFreqRange, docsIf3CmStatusValue=docsIf3CmStatusValue, docsIf3MdUsToDsChMappingTable=docsIf3MdUsToDsChMappingTable, docsIf3RxChStatusEntry=docsIf3RxChStatusEntry, docsIf3MdCfgMultRxChModeEnabled=docsIf3MdCfgMultRxChModeEnabled, docsIf3CmtsSpectrumAnalysisMeasAmplitudeData=docsIf3CmtsSpectrumAnalysisMeasAmplitudeData, docsIf3CmDpvStatsLastMeasLatency=docsIf3CmDpvStatsLastMeasLatency, docsIf3CmtsCmCtrlCmdMacAddr=docsIf3CmtsCmCtrlCmdMacAddr, docsIf3CmEventCtrlEventId=docsIf3CmEventCtrlEventId, docsIf3CmEm1x1StatsTable=docsIf3CmEm1x1StatsTable, docsIf3SignalQualityExtRxMerSamples=docsIf3SignalQualityExtRxMerSamples, docsIf3CmtsCmUsStatusChIfIndex=docsIf3CmtsCmUsStatusChIfIndex, docsIf3CmtsSpectrumAnalysisMeasTimeInterval=docsIf3CmtsSpectrumAnalysisMeasTimeInterval, docsIf3CmEnergyMgt1x1CfgExitTimeThrshld=docsIf3CmEnergyMgt1x1CfgExitTimeThrshld, docsIf3CmDpvStatsNumMeas=docsIf3CmDpvStatsNumMeas, docsIf3RccStatusRcpId=docsIf3RccStatusRcpId, docsIf3RxChCfgPrimaryDsIndicator=docsIf3RxChCfgPrimaryDsIndicator, docsIf3CmStatusUCCsSuccesses=docsIf3CmStatusUCCsSuccesses, AttributeMask=AttributeMask, docsIf3CmEventCtrlStatus=docsIf3CmEventCtrlStatus, docsIf3MdCfgBpi2EnforceCtrl=docsIf3MdCfgBpi2EnforceCtrl, docsIf3CmSpectrumAnalysisCtrlCmdInactivityTimeout=docsIf3CmSpectrumAnalysisCtrlCmdInactivityTimeout, docsIf3CmSpectrumAnalysisMeasFrequency=docsIf3CmSpectrumAnalysisMeasFrequency, docsIf3CmtsCmUsStatusRxPower=docsIf3CmtsCmUsStatusRxPower, CmtsCmRegState=CmtsCmRegState)
mibBuilder.exportSymbols("DOCS-IF3-MIB", docsIf3CmEnergyMgt1x1CfgEntryTimeThrshld=docsIf3CmEnergyMgt1x1CfgEntryTimeThrshld, docsIf3ObsoleteGroup=docsIf3ObsoleteGroup, ChSetId=ChSetId, ChId=ChId, docsIf3RccStatusRccCfgId=docsIf3RccStatusRccCfgId, docsIf3CmtsEventCtrlEventId=docsIf3CmtsEventCtrlEventId, docsIf3RccCfgEntry=docsIf3RccCfgEntry, docsIf3UsChSetChList=docsIf3UsChSetChList, docsIf3UsBondingGrpStatusEntry=docsIf3UsBondingGrpStatusEntry, docsIf3MdCfgTable=docsIf3MdCfgTable, docsIf3CmCompliance=docsIf3CmCompliance, docsIf3RxModuleCfgTable=docsIf3RxModuleCfgTable, docsIf3CmSpectrumAnalysisCtrlCmdEnable=docsIf3CmSpectrumAnalysisCtrlCmdEnable, docsIf3RccStatusValidityCodeText=docsIf3RccStatusValidityCodeText, CmRegState=CmRegState, docsIf3RxChStatusPrimaryDsIndicator=docsIf3RxChStatusPrimaryDsIndicator, docsIf3CmStatusUsRangingAborteds=docsIf3CmStatusUsRangingAborteds, docsIf3CmtsCmRegStatusId=docsIf3CmtsCmRegStatusId, docsIf3MdCfgMcastDsidFwdEnabled=docsIf3MdCfgMcastDsidFwdEnabled, docsIf3DsBondingGrpStatusTable=docsIf3DsBondingGrpStatusTable, docsIf3MdCfgSendUdcRulesEnabled=docsIf3MdCfgSendUdcRulesEnabled, docsIf3CmtsEventCtrlStatus=docsIf3CmtsEventCtrlStatus, docsIf3CmEnergyMgtCfgFeatureEnabled=docsIf3CmEnergyMgtCfgFeatureEnabled, docsIf3RccCfgRowStatus=docsIf3RccCfgRowStatus, docsIf3UsChExtTable=docsIf3UsChExtTable, docsIf3CmEventNotif=docsIf3CmEventNotif, docsIf3CmtsCmRegStatusMacAddr=docsIf3CmtsCmRegStatusMacAddr, docsIf3CmtsCmRegStatusIPv4Addr=docsIf3CmtsCmRegStatusIPv4Addr, docsIf3CmDpvStatsEntry=docsIf3CmDpvStatsEntry, docsIf3BondingGrpCfgChList=docsIf3BondingGrpCfgChList, docsIf3CmStatusUCCFails=docsIf3CmStatusUCCFails)
