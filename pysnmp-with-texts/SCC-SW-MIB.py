#
# PySNMP MIB module SCC-SW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCC-SW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
sccSidewinder, sccMibSw = mibBuilder.importSymbols("SCC-MIB", "sccSidewinder", "sccMibSw")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysDescr, sysUpTime = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysUpTime")
IpAddress, ModuleIdentity, NotificationType, Counter64, MibIdentifier, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ObjectIdentity, Counter32, Gauge32, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "NotificationType", "Counter64", "MibIdentifier", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ObjectIdentity", "Counter32", "Gauge32", "Bits", "Integer32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
swProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 1573, 3, 1, 5))
swBurb = MibIdentifier((1, 3, 6, 1, 4, 1, 1573, 3, 1, 6))
swBurbedMib2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7))
swTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 1573, 3, 1, 10))
swProxyTable = MibTable((1, 3, 6, 1, 4, 1, 1573, 3, 1, 5, 1), )
if mibBuilder.loadTexts: swProxyTable.setStatus('mandatory')
if mibBuilder.loadTexts: swProxyTable.setDescription('A list of proxy entries.')
swProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1573, 3, 1, 5, 1, 1), ).setIndexNames((0, "SCC-SW-MIB", "swProxyIndex"))
if mibBuilder.loadTexts: swProxyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swProxyEntry.setDescription('An entry containing objects of a proxy.')
swProxyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProxyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swProxyIndex.setDescription('The index of a proxy entry in the proxy table.')
swProxyName = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProxyName.setStatus('mandatory')
if mibBuilder.loadTexts: swProxyName.setDescription('The name of a proxy.')
swProxyAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProxyAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swProxyAdminStatus.setDescription('The configured status of a proxy.')
swProxyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProxyOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swProxyOperStatus.setDescription('The current operational status of a proxy.')
swBurbTotal = MibScalar((1, 3, 6, 1, 4, 1, 1573, 3, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBurbTotal.setStatus('mandatory')
if mibBuilder.loadTexts: swBurbTotal.setDescription('The total number of configured Burbs.')
swBurbViewTable = MibTable((1, 3, 6, 1, 4, 1, 1573, 3, 1, 6, 2), )
if mibBuilder.loadTexts: swBurbViewTable.setStatus('mandatory')
if mibBuilder.loadTexts: swBurbViewTable.setDescription('A list of burb view community name entries.')
swBurbViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1573, 3, 1, 6, 2, 1), ).setIndexNames((0, "SCC-SW-MIB", "swBurbIndex"))
if mibBuilder.loadTexts: swBurbViewEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swBurbViewEntry.setDescription('An entry containing objects of a burb view.')
swBurbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBurbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swBurbIndex.setDescription('The Burb Index.')
swBurbViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBurbViewName.setStatus('mandatory')
if mibBuilder.loadTexts: swBurbViewName.setDescription('Community name for the viewing the burb related information.')
swInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1))
swIp = MibIdentifier((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2))
swTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 3))
swUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 4))
swIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: swIfNumber.setDescription('The number of network interfaces (regardless of their current state) present on this system.')
swIfTable = MibTable((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2), )
if mibBuilder.loadTexts: swIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: swIfTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
swIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1), ).setIndexNames((0, "SCC-SW-MIB", "swIfBurbIndex"), (0, "SCC-SW-MIB", "swIfIndex"))
if mibBuilder.loadTexts: swIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swIfEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
swIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIfIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
swIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: swIfDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
swIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfType.setStatus('mandatory')
if mibBuilder.loadTexts: swIfType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack.")
swIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: swIfMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
swIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: swIfSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth.")
swIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: swIfPhysAddress.setDescription("The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.")
swIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swIfAdminStatus.setDescription('The desired state of the interface. The testing(3) state indicates that no operational packets can be passed.')
swIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swIfOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
swIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: swIfLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
swIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: swIfInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
swIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfInUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: swIfInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
swIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfInNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: swIfInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
swIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: swIfInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
swIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: swIfInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
swIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: swIfInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
swIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: swIfOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
swIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfOutUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: swIfOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
swIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfOutNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: swIfOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
swIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: swIfOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
swIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: swIfOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
swIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfOutQLen.setStatus('mandatory')
if mibBuilder.loadTexts: swIfOutQLen.setDescription('The length of the output packet queue (in packets).')
swIfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: swIfSpecific.setDescription('A reference to MIB definitions specific to the particular media being used to realize the interface. For example, if the interface is realized by an ethernet, then the value of this object refers to a document defining objects specific to ethernet. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.')
swIfBurbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIfBurbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIfBurbIndex.setDescription('A unique value of the Sidewinder suburb index.')
swIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 1), )
if mibBuilder.loadTexts: swIpAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: swIpAddrTable.setDescription("The table of addressing information relevant to this entity's IP addresses.")
swIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 1, 1), ).setIndexNames((0, "SCC-SW-MIB", "swIpAdEntBurbIndex"), (0, "SCC-SW-MIB", "swIpAdEntAddr"))
if mibBuilder.loadTexts: swIpAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swIpAddrEntry.setDescription("The addressing information for one of this entity's IP addresses.")
swIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpAdEntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: swIpAdEntAddr.setDescription("The IP address to which this entry's addressing information pertains.")
swIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpAdEntIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIpAdEntIfIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
swIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpAdEntNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: swIpAdEntNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
swIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpAdEntBcastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: swIpAdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
swIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpAdEntReasmMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: swIpAdEntReasmMaxSize.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface.')
swIpAdEntBurbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpAdEntBurbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIpAdEntBurbIndex.setDescription('A unique value of the Sidewinder suburb index.')
swIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2), )
if mibBuilder.loadTexts: swIpRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteTable.setDescription("This entity's IP Routing table.")
swIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1), ).setIndexNames((0, "SCC-SW-MIB", "swIpRouteBurbIndex"), (0, "SCC-SW-MIB", "swIpRouteDest"))
if mibBuilder.loadTexts: swIpRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteEntry.setDescription('A route to a particular destination.')
swIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteDest.setDescription('The destination IP address of this route. An entry with a value of 0.0.0.0 is considered a default route. Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use.')
swIpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
swIpRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteMetric1.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
swIpRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteMetric2.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
swIpRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteMetric3.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
swIpRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteMetric4.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
swIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteNextHop.setDescription("The IP address of the next hop of this route. (In the case of a route bound to an interface which is realized via a broadcast media, the value of this field is the agent's IP address on that interface.)")
swIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteType.setDescription('The type of route. Note that the values direct(3) and indirect(4) refer to the notion of direct and indirect routing in the IP architecture. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipRouteTable object. That is, it effectively dissasociates the destination identified with said entry from the route identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipRouteType object.')
swIpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpRouteProto.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
swIpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteAge.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
swIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the ipRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the ipRouteMask by determining whether the value of the correspondent ipRouteDest field belong to a class-A, B, or C network, and then using one of: mask network 255.0.0.0 class-A 255.255.0.0 class-B 255.255.255.0 class-C If the value of the ipRouteDest is 0.0.0.0 (a default route), then the mask value is also 0.0.0.0. It should be noted that all IP routing subsystems implicitly use this mechanism.')
swIpRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpRouteMetric5.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
swIpRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpRouteInfo.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this route, as determined by the value specified in the route's ipRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.")
swIpRouteBurbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpRouteBurbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIpRouteBurbIndex.setDescription('A unique value of the Sidewinder suburb index.')
swTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 3, 1), )
if mibBuilder.loadTexts: swTcpConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: swTcpConnTable.setDescription('A table containing TCP connection-specific information.')
swTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 3, 1, 1), ).setIndexNames((0, "SCC-SW-MIB", "swTcpConnBurbIndex"), (0, "SCC-SW-MIB", "swTcpConnLocalAddress"), (0, "SCC-SW-MIB", "swTcpConnLocalPort"), (0, "SCC-SW-MIB", "swTcpConnRemAddress"), (0, "SCC-SW-MIB", "swTcpConnRemPort"))
if mibBuilder.loadTexts: swTcpConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swTcpConnEntry.setDescription('Information about a particular current TCP connection. An object of this type is transient, in that it ceases to exist when (or soon after) the connection makes the transition to the CLOSED state.')
swTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTcpConnState.setStatus('mandatory')
if mibBuilder.loadTexts: swTcpConnState.setDescription("The state of this TCP connection. The only value which may be set by a management station is deleteTCB(12). Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to set this object to any other value. If a management station sets this object to the value deleteTCB(12), then this has the effect of deleting the TCB (as defined in RFC 793) of the corresponding connection on the managed node, resulting in immediate termination of the connection. As an implementation-specific option, a RST segment may be sent from the managed node to the other TCP endpoint (note however that RST segments are not sent reliably).")
swTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTcpConnLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: swTcpConnLocalAddress.setDescription('The local IP address for this TCP connection. In the case of a connection in the listen state which is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used.')
swTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTcpConnLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: swTcpConnLocalPort.setDescription('The local port number for this TCP connection.')
swTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTcpConnRemAddress.setStatus('mandatory')
if mibBuilder.loadTexts: swTcpConnRemAddress.setDescription('The remote IP address for this TCP connection.')
swTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTcpConnRemPort.setStatus('mandatory')
if mibBuilder.loadTexts: swTcpConnRemPort.setDescription('The remote port number for this TCP connection.')
swTcpConnBurbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTcpConnBurbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swTcpConnBurbIndex.setDescription('A unique value of the Sidewinder suburb index.')
swUdpTable = MibTable((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 4, 1), )
if mibBuilder.loadTexts: swUdpTable.setStatus('mandatory')
if mibBuilder.loadTexts: swUdpTable.setDescription('A table containing UDP listener information.')
swUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 4, 1, 1), ).setIndexNames((0, "SCC-SW-MIB", "swUdpBurbIndex"), (0, "SCC-SW-MIB", "swUdpLocalAddress"), (0, "SCC-SW-MIB", "swUdpLocalPort"))
if mibBuilder.loadTexts: swUdpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swUdpEntry.setDescription('Information about a particular current UDP listener.')
swUdpLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUdpLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: swUdpLocalAddress.setDescription('The local IP address for this UDP listener. In the case of a UDP listener which is willing to accept datagrams for any IP interface associated with the node, the value 0.0.0.0 is used.')
swUdpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUdpLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: swUdpLocalPort.setDescription('The local port number for this UDP listener.')
swUdpBurbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1573, 3, 1, 7, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUdpBurbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swUdpBurbIndex.setDescription('A unique value of the Sidewinder suburb index.')
sccAuthenFailSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 1573, 3, 1, 10, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccAuthenFailSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: sccAuthenFailSrcIp.setDescription('The IP address of the host which issued an unauthenticated get or set command')
sccAuthenFailSrcCommName = MibScalar((1, 3, 6, 1, 4, 1, 1573, 3, 1, 10, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccAuthenFailSrcCommName.setStatus('mandatory')
if mibBuilder.loadTexts: sccAuthenFailSrcCommName.setDescription('The community name that comes with the unauthenticated get or set command')
swUser = MibScalar((1, 3, 6, 1, 4, 1, 1573, 3, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUser.setStatus('mandatory')
if mibBuilder.loadTexts: swUser.setDescription('')
swSRoleUser = MibScalar((1, 3, 6, 1, 4, 1, 1573, 3, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSRoleUser.setStatus('mandatory')
if mibBuilder.loadTexts: swSRoleUser.setDescription('')
swSRoleName = MibScalar((1, 3, 6, 1, 4, 1, 1573, 3, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSRoleName.setStatus('mandatory')
if mibBuilder.loadTexts: swSRoleName.setDescription('')
swColdStart = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,0)).setObjects(("SNMPv2-MIB", "sysDescr"), ("SNMPv2-MIB", "sysUpTime"))
if mibBuilder.loadTexts: swColdStart.setDescription("A coldStart trap signifies that the sending protocol entity is reinitializing itself such that the agent's configuration or the rotocol entity implementation may be altered.")
swAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,4)).setObjects(("SCC-SW-MIB", "sccAuthenFailSrcIp"), ("SCC-SW-MIB", "sccAuthenFailSrcCommName"))
if mibBuilder.loadTexts: swAuthenticationFailure.setDescription('An authenticationFailure trap signifies that the sending protocol entity is the addressee of a protocol message that is not properly authenticated. While implementations of the SNMP must be capable of generating this trap, they must also be capable of suppressing the emission of such traps via an implementation- specific mechanism.')
swNetTrafficThresholds = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,201))
if mibBuilder.loadTexts: swNetTrafficThresholds.setDescription('The trap occurs when the number of traffix audit events written by the various proxies going through the Sidewinder exceeds a specified number in a specified time period.')
swAttackAttempt = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,202))
if mibBuilder.loadTexts: swAttackAttempt.setDescription('The trap occurs when one of the services on the Sidewinder sees a suspecious occurrence.')
swTeViolation = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,203))
if mibBuilder.loadTexts: swTeViolation.setDescription('The trap occurs when an unauthorizeduser tries to read, write, or execute a protected file on the Sidewinder.')
swAclThresholds = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,204))
if mibBuilder.loadTexts: swAclThresholds.setDescription('The trap occurs when the number of times users are denied access to services exceeds a specified number.')
swBadProxyAuth = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,205))
if mibBuilder.loadTexts: swBadProxyAuth.setDescription('The trap occurs when a user tries to get authenticated to the telnet or FTP proxy and he or she enters invalid data.')
swNetProbeAttempt = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,206))
if mibBuilder.loadTexts: swNetProbeAttempt.setDescription('The trap occurs when a user try to connect or send a message to a TCP or UDP port that either has no service associated with it of is associated with an unsupported service.')
swMailFilterFailure = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,207))
if mibBuilder.loadTexts: swMailFilterFailure.setDescription('The trap occurs when the number of mail messages that failed the filter exceeds a specified threshold in a specified time period.')
swIPSECFailure = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,208))
if mibBuilder.loadTexts: swIPSECFailure.setDescription('The trap occurs when the IPSEC subsystem detects a failure in authentication or encryption of network traffic. This can be caused by a number of things ranging from key configuration errors, ISAKMP problems, interoperability issues, and network attacks.')
swFAILOVEREvent = NotificationType((1, 3, 6, 1, 4, 1, 1573, 2, 1) + (0,209))
if mibBuilder.loadTexts: swFAILOVEREvent.setDescription('The trap occurs when failover events occur. These events include a master starting, a slave becoming a master or releasing control, or possible failover errors.')
mibBuilder.exportSymbols("SCC-SW-MIB", swIfDescr=swIfDescr, swIpRouteIfIndex=swIpRouteIfIndex, swTcpConnTable=swTcpConnTable, swBurbTotal=swBurbTotal, swIfLastChange=swIfLastChange, swIfEntry=swIfEntry, swIfInUnknownProtos=swIfInUnknownProtos, swTcpConnLocalAddress=swTcpConnLocalAddress, swIfOutQLen=swIfOutQLen, swIfPhysAddress=swIfPhysAddress, swIpAdEntIfIndex=swIpAdEntIfIndex, swUdpBurbIndex=swUdpBurbIndex, swNetTrafficThresholds=swNetTrafficThresholds, swIpAdEntBcastAddr=swIpAdEntBcastAddr, swIfInDiscards=swIfInDiscards, swBurbIndex=swBurbIndex, swProxyAdminStatus=swProxyAdminStatus, swInterfaces=swInterfaces, swIfMtu=swIfMtu, swBurbViewName=swBurbViewName, swBurbViewEntry=swBurbViewEntry, swBurbedMib2=swBurbedMib2, swIpRouteMetric5=swIpRouteMetric5, swIfInNUcastPkts=swIfInNUcastPkts, swProxyName=swProxyName, swIfOutUcastPkts=swIfOutUcastPkts, swIpRouteEntry=swIpRouteEntry, swUser=swUser, swUdpEntry=swUdpEntry, swNetProbeAttempt=swNetProbeAttempt, swTrap=swTrap, swTcpConnBurbIndex=swTcpConnBurbIndex, swSRoleUser=swSRoleUser, swBurbViewTable=swBurbViewTable, sccAuthenFailSrcCommName=sccAuthenFailSrcCommName, swIpRouteMetric3=swIpRouteMetric3, swTcpConnRemPort=swTcpConnRemPort, swTcp=swTcp, swTcpConnRemAddress=swTcpConnRemAddress, swIfBurbIndex=swIfBurbIndex, swIfSpeed=swIfSpeed, swFAILOVEREvent=swFAILOVEREvent, swProxyIndex=swProxyIndex, swIfOutDiscards=swIfOutDiscards, swIpRouteMetric1=swIpRouteMetric1, swIPSECFailure=swIPSECFailure, swProxy=swProxy, swIfTable=swIfTable, swIpAdEntReasmMaxSize=swIpAdEntReasmMaxSize, sccAuthenFailSrcIp=sccAuthenFailSrcIp, swUdp=swUdp, swProxyEntry=swProxyEntry, swAclThresholds=swAclThresholds, swIpAdEntNetMask=swIpAdEntNetMask, swIpRouteInfo=swIpRouteInfo, swTcpConnState=swTcpConnState, swIfType=swIfType, swIpAdEntBurbIndex=swIpAdEntBurbIndex, swTcpConnEntry=swTcpConnEntry, swProxyTable=swProxyTable, swIfAdminStatus=swIfAdminStatus, swIpRouteDest=swIpRouteDest, swIpRouteTable=swIpRouteTable, swIfOutOctets=swIfOutOctets, swColdStart=swColdStart, swTeViolation=swTeViolation, swTcpConnLocalPort=swTcpConnLocalPort, swBadProxyAuth=swBadProxyAuth, swIpRouteType=swIpRouteType, swIpRouteProto=swIpRouteProto, swIp=swIp, swIfOutErrors=swIfOutErrors, swSRoleName=swSRoleName, swIpRouteBurbIndex=swIpRouteBurbIndex, swAttackAttempt=swAttackAttempt, swUdpLocalPort=swUdpLocalPort, swIpRouteNextHop=swIpRouteNextHop, swIfInOctets=swIfInOctets, swIpAddrEntry=swIpAddrEntry, swIpRouteAge=swIpRouteAge, swIpRouteMetric4=swIpRouteMetric4, swMailFilterFailure=swMailFilterFailure, swIfInUcastPkts=swIfInUcastPkts, swIpRouteMask=swIpRouteMask, swIfNumber=swIfNumber, swIfInErrors=swIfInErrors, swAuthenticationFailure=swAuthenticationFailure, swIfSpecific=swIfSpecific, swIpAdEntAddr=swIpAdEntAddr, swIpRouteMetric2=swIpRouteMetric2, swBurb=swBurb, swIfOperStatus=swIfOperStatus, swUdpTable=swUdpTable, swUdpLocalAddress=swUdpLocalAddress, swIpAddrTable=swIpAddrTable, swIfIndex=swIfIndex, swIfOutNUcastPkts=swIfOutNUcastPkts, swProxyOperStatus=swProxyOperStatus)
