#
# PySNMP MIB module CISCO-IETF-MEGACO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-MEGACO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, TimeTicks, Integer32, ModuleIdentity, NotificationType, ObjectIdentity, Bits, Counter32, Unsigned32, iso, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Integer32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Bits", "Counter32", "Unsigned32", "iso", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString, AutonomousType, TimeStamp, RowStatus, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "AutonomousType", "TimeStamp", "RowStatus", "TestAndIncr")
ciscoIetfMegacoMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 99999))
ciscoIetfMegacoMIB.setRevisions(('2003-04-28 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIetfMegacoMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIetfMegacoMIB.setLastUpdated('200304281200Z')
if mibBuilder.loadTexts: ciscoIetfMegacoMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIetfMegacoMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice-gateway@cisco.com')
if mibBuilder.loadTexts: ciscoIetfMegacoMIB.setDescription('This MIB module is based on the Internet Draft draft-ietf-megaco-mib-05.txt. It defines the attributes of Megaco protocol. Reference: ITU H.248 (Rev. COM16-107).')
ciscoIetfMegacoMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99999, 0))
ciscoIetfMegacoMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1))
cmedConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1))
cmedStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2))
cmedConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3))
cmedProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 4))
class CMediaGatewayId(TextualConvention, Integer32):
    description = 'Possible Media Gateway Id that can be used to identify any media gateway uniquely'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class CMediaGatewayLinkId(TextualConvention, Unsigned32):
    description = 'Possible Media Gateway Link Id that can be used to identify any media gateway link uniquely'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class CMediaGatewayTermId(TextualConvention, Unsigned32):
    description = 'Possible Termination Id that can be used to identify any media gateway termination uniquely'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

cmedLinkIdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 1), )
if mibBuilder.loadTexts: cmedLinkIdTable.setStatus('current')
if mibBuilder.loadTexts: cmedLinkIdTable.setDescription('This table contains a nextLinkId for each Gateway. It provides the manager with the nextLinkId for use in creating new Gateway Table Entries.')
cmedLinkIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayId"))
if mibBuilder.loadTexts: cmedLinkIdEntry.setStatus('current')
if mibBuilder.loadTexts: cmedLinkIdEntry.setDescription('This table contains the NextLinkId for this Gateway and is indexed by mediaGatewayId.')
cmedNextLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 1, 1, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmedNextLinkId.setStatus('current')
if mibBuilder.loadTexts: cmedNextLinkId.setDescription("The Next Value for a cmedGatewayLinkId. Assists the manager in selecting a value for cmedGatewayLinkId. Using the TestAndIncr syntax, A Manager will 'lock' this variable, ensuring single access.")
cmedGatewayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2), )
if mibBuilder.loadTexts: cmedGatewayConfigTable.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayConfigTable.setDescription('A list of cmedGatewayConfigEntry objects.')
cmedGatewayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayId"), (0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayLinkId"))
if mibBuilder.loadTexts: cmedGatewayConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayConfigEntry.setDescription('Entry holding configuration information about a group of Media Gateway Controllers sharing the same signaling link.')
cmedGatewayId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 1), CMediaGatewayId())
if mibBuilder.loadTexts: cmedGatewayId.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayId.setDescription('The unique Media Gateway Id which identifies this media gateway')
cmedGatewayLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 2), CMediaGatewayLinkId())
if mibBuilder.loadTexts: cmedGatewayLinkId.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayLinkId.setDescription('The unique link id which identifies the signaling link that this gateway uses to communicate with the Gateway Controllers to form an H.248 association.')
cmedGatewayLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedGatewayLinkName.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayLinkName.setDescription('A descriptive name of this signaling link / media gateway combination')
cmedGatewayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedGatewayIPAddress.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayIPAddress.setDescription('The IP address that the Media Gateway Controller will use to communicate with the Media Gateway. This object reflects the IP address over control PVC that user configures in cMediaGwIpConfigTable. The value 0.0.0.0 is returned if the entry is invalid.')
cmedGatewayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2944)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedGatewayPort.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayPort.setDescription('TCP/UDP port number that the Media Gateway Controller will use to communicate with the Media Gateway. The value 0 is returned if the entry is invalid.')
cmedGatewayEncodingScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("text", 1), ("binary", 2))).clone('text')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedGatewayEncodingScheme.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayEncodingScheme.setDescription('The encoding scheme that would be used to encode the H.248 messages that are sent/received to/from the gateway controller')
cmedGatewayProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("other", 2), ("dss1Ip", 3), ("ipdc", 4), ("megacov1", 5), ("megacov2", 6), ("mgcp", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedGatewayProtocol.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayProtocol.setDescription('Type of the control protocol in use notApplicable (1) - other (2) - Other (none from the list below) dss1-ip (3) - Q931+ ipdc (4) - IPDC megacov1 (5) - MEGACO/H.248 Version 1 megacov2 (6) - MEGACO/H.248 Version 2 mgcp (7) - MGCP ')
cmedGatewaySigTptProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("sctp", 3), ("other", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedGatewaySigTptProtocol.setStatus('current')
if mibBuilder.loadTexts: cmedGatewaySigTptProtocol.setDescription('Type of the transport protocol that is being used to transport the H.248 signaling traffic')
cmedGatewayAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedGatewayAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayAdminStatus.setDescription('The desired state of the gateway. The testing(3) state indicates that no signaling packets can be passed. When a managed system initializes, all gateways start with cmedGatewayAdminStatus in the down(2) state. As a result of either explicit management action or per configuration information retained by the managed system, cmedGatewayAdminStatus is then changed to either the up(1) or testing(3) states (or remains in the down(2) state).')
cmedGatewayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedGatewayOperStatus.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayOperStatus.setDescription('The current operational state of the gateway. up (1) - ready to communicate with MGC down (2) testing(3) - in some test mode unknown(4) - status can not be determined for some reason. The testing(3) state indicates that no signaling packets can be passed. If cmedGatewayAdminStatus is down(2) then cmedGatewayOperStatus should be down(2). If cmedGatewayAdminStatus is changed to up(1) then cmedGatewayOperStatus should change to up(1) if the gateway is ready to transmit and receive signaling traffic; it should remain in the down(2) state if and only if there is a fault that prevents it from going to the up(1) state')
cmedGatewayLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedGatewayLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayLastStatusChange.setDescription('The value of sysUpTime at the time the associated link entered its current operational status. If the current status was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
cmedGatewayResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("other", 2), ("reset", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedGatewayResetStatistics.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayResetStatistics.setDescription("This object can be used to reset all statistics collected for this media gateway link so far. Statistics will be reset when the object is SET to 'reset'. Upon reset, the agent changes the value of this object to 'notApplicable'.")
cmedGatewayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedGatewayRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayRowStatus.setDescription('This is used to create new rows, modify existing rows and to delete existing rows.')
cmedGwyControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 3), )
if mibBuilder.loadTexts: cmedGwyControllerTable.setStatus('current')
if mibBuilder.loadTexts: cmedGwyControllerTable.setDescription('List of the Media Gateway Controllers that are managed in the network')
cmedGwyControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayId"), (0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayLinkId"), (0, "CISCO-IETF-MEGACO-MIB", "cmedGwyControllerId"))
if mibBuilder.loadTexts: cmedGwyControllerEntry.setStatus('current')
if mibBuilder.loadTexts: cmedGwyControllerEntry.setDescription('Entry holding information about an individual Media Gateway Controller.')
cmedGwyControllerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cmedGwyControllerId.setStatus('current')
if mibBuilder.loadTexts: cmedGwyControllerId.setDescription('An unique identification number that is assigned to the gateway controller by the manager')
cmedGwyControllerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmedGwyControllerIPAddress.setStatus('current')
if mibBuilder.loadTexts: cmedGwyControllerIPAddress.setDescription('The IP address of the Media Gateway Controller. The value 0.0.0.0 is returned if the entry is invalid.')
cmedGwyControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmedGwyControllerPort.setStatus('current')
if mibBuilder.loadTexts: cmedGwyControllerPort.setDescription('TCP port of the Media Gateway Controller. The value 0 is returned if the entry is invalid.')
cmedGwyControllerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmedGwyControllerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cmedGwyControllerAdminStatus.setDescription('The desired state of the gateway. The testing(3) state indicates that no signaling packets can be passed. When a managed system initializes, all gateways start with cmedGwyControllerAdminStatus in the down(2) state. As a result of either explicit management action or per configuration information retained by the managed system, cmedGwyControllerAdminStatus is then changed to either the up(1) or testing(3) states (or remains in the down(2) state).')
cmedGwyControllerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedGwyControllerOperStatus.setStatus('current')
if mibBuilder.loadTexts: cmedGwyControllerOperStatus.setDescription('The current operational state of the gateway controller. The standby(3) state indicates that it is in the standby mode and no signaling packets can be passed. If cmedGwyControllerAdminStatus is down(2) then cmedGwyControllerOperStatus should be down(2). If cmedGwyControllerAdminStatus is changed to up(1), then cmedGwyControllerOperStatus should change to up(1). If the gateway controller is ready to transmit and receive signaling traffic; it should remain in the down(2) state if and only if there is a fault that prevents it from going to the up(1) state')
cmedGatewayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1), )
if mibBuilder.loadTexts: cmedGatewayStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayStatsTable.setDescription('A list of mediaGatewayTableEntry objects.')
cmedGatewayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayId"), (0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayLinkId"))
if mibBuilder.loadTexts: cmedGatewayStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmedGatewayStatsEntry.setDescription('Entry holding statistics about a group of media Gateway/signaling link pair ')
cmedNumInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedNumInMessages.setStatus('current')
if mibBuilder.loadTexts: cmedNumInMessages.setDescription('Total number of messages received on the link.')
cmedNumInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedNumInOctets.setStatus('current')
if mibBuilder.loadTexts: cmedNumInOctets.setDescription('Total number of octets received on the link.')
cmedNumOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedNumOutMessages.setStatus('current')
if mibBuilder.loadTexts: cmedNumOutMessages.setDescription('Total number of messages sent on the link.')
cmedNumOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedNumOutOctets.setStatus('current')
if mibBuilder.loadTexts: cmedNumOutOctets.setDescription('Total number of octets sent on the link.')
cmedNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedNumErrors.setStatus('current')
if mibBuilder.loadTexts: cmedNumErrors.setDescription('Total number of signaling-level errors encountered. Includes, but is not limited to, number of bad messages received, number of failures to sent a message and number of other errors.')
cmedNumTimerRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedNumTimerRecovery.setStatus('current')
if mibBuilder.loadTexts: cmedNumTimerRecovery.setDescription('Total Number of timer recovery events since the statistics was last reset. This reflects all protocol timers that are supported (For H.248, T - start timer, S - short timer, L - long timer, and Z - long duration timer etc)')
cmedTransportNumLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedTransportNumLosses.setStatus('current')
if mibBuilder.loadTexts: cmedTransportNumLosses.setDescription('Number of times a transport link was lost (excluding switch-over cases). A link loss is defined as loss of communication with the entity (MGC) due to hardware/transient problems in the interface or other related hardware/software')
cmedTransportNumSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedTransportNumSwitchover.setStatus('current')
if mibBuilder.loadTexts: cmedTransportNumSwitchover.setDescription('Number of times when the signaling was switched over to an alternative link. This includes switchover due to the Handoffs initiated by the gateway controllers')
cmedTransportTotalNumAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedTransportTotalNumAlarms.setStatus('current')
if mibBuilder.loadTexts: cmedTransportTotalNumAlarms.setDescription('Total number of all alarms issued for the transport layer.')
cmedTransportLastEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("other", 2), ("linkUp", 3), ("linkLoss", 4), ("persistentError", 5), ("linkShutdown", 6), ("switchOver", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedTransportLastEvent.setStatus('current')
if mibBuilder.loadTexts: cmedTransportLastEvent.setDescription('Last event reported by the transport layer. notApplicable (1) - Invalid/unknown. other (2) - None from the list below. linkUp (3) - Transport link is up. linkLoss (4) - Transport link loss. persistentError (5) - No link - persistent error. linkShutdown (6) - Link is shut down. switchOver (7) - Fail-over.')
cmedTransportLastEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedTransportLastEventTime.setStatus('current')
if mibBuilder.loadTexts: cmedTransportLastEventTime.setDescription('The value of sysUpTime at the time when the event specified by cmedTransportLastEvent occurred. If the last event occurred prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
cmedLastStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 2, 1, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedLastStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: cmedLastStatisticsReset.setDescription('The value of sysUpTime at the time when the statistics were reset. If the reset occurred prior to the last re-initialization of the local network management subsystem, this object contains a zero value.')
cmedTermIdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 1), )
if mibBuilder.loadTexts: cmedTermIdTable.setStatus('current')
if mibBuilder.loadTexts: cmedTermIdTable.setDescription('This table contains a nextTerminationId for each Gateway. It provides the manager with the nextTerminationId for use in creating a new TerminationsTable Entry.')
cmedTermIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayId"))
if mibBuilder.loadTexts: cmedTermIdEntry.setStatus('current')
if mibBuilder.loadTexts: cmedTermIdEntry.setDescription('This table contains a nextTerminationId for each Gateway, and is indexed by mediaGatewayId.')
cmedNextTerminationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 1, 1, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmedNextTerminationId.setStatus('current')
if mibBuilder.loadTexts: cmedNextTerminationId.setDescription("The Next Value for a MediaGateway TerminationId. Assists the manager in selecting a value for cmedTermId. Using the TestAndIncr syntax, A Manager will 'lock' this variable, ensuring single access.")
cmedTerminationsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 2), )
if mibBuilder.loadTexts: cmedTerminationsTable.setStatus('current')
if mibBuilder.loadTexts: cmedTerminationsTable.setDescription('This table contains information about terminations in a media gateway. It is a list of terminations. The number of entries equals to the total number of terminations for all contexts in a gateway.')
cmedTerminationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayId"), (0, "CISCO-IETF-MEGACO-MIB", "cmedTermId"))
if mibBuilder.loadTexts: cmedTerminationsEntry.setStatus('current')
if mibBuilder.loadTexts: cmedTerminationsEntry.setDescription('It contains objects that describe a termination.')
cmedTermId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 2, 1, 1), CMediaGatewayTermId())
if mibBuilder.loadTexts: cmedTermId.setStatus('current')
if mibBuilder.loadTexts: cmedTermId.setDescription('An unique identification number that is assigned to the termination by a media gateway. This is the TerminationId that would be used in the protocol messages that are sent from the gateway')
cmedTermName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedTermName.setStatus('current')
if mibBuilder.loadTexts: cmedTermName.setDescription("A descriptive name that would describe this termination and its use. For example, 'emergency-ds0-1' indicating that this termination is reserved as an emergency DS0 channel")
cmedTermAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedTermAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cmedTermAdminStatus.setDescription('The desired state of the termination. The testing(3) state indicates that no connections can be created for this termination. When a managed system initializes, all terminations start with cmedTermAdminStatus in the outOfService(2) state. As a result of either explicit management action or per configuration information retained by the managed system, cmedTermAdminStatus is then changed to either the inService(1) or testing(3) states (or remains in the outOfService(2) state).')
cmedTermOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmedTermOperStatus.setStatus('current')
if mibBuilder.loadTexts: cmedTermOperStatus.setDescription('The current operational state of the termination. The testing(3) state indicates that it is in the testing mode and no connections can be created on it. If cmedTermAdminStatus is outOfService(2) then cmedTermOperStatus should be down(2). If cmedTermAdminStatus is changed to up(1) then cmedTermOperStatus should change to up (1) and the termination is ready to accept connections; it should remain in the down(2) state if and only if there is a fault that prevents it from going to the up(1) state')
cmedTermInterfaceIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 2, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedTermInterfaceIdentifier.setStatus('current')
if mibBuilder.loadTexts: cmedTermInterfaceIdentifier.setDescription('A number that uniquely identifies the interface in the physical gateway. This is the ifIndex in the ifTable, that this termination would be using to communicate to other gateways')
cmedTermPropertyProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedTermPropertyProfileId.setStatus('current')
if mibBuilder.loadTexts: cmedTermPropertyProfileId.setDescription('This determines the profile of the termination which determines what kind of capabilities this termination has. This is an index into the cmedPropertyProfileTable which identifies all the profile that are available')
cmedTermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedTermRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmedTermRowStatus.setDescription('This is used to create new rows in this table, Modify existing rows, and to delete existing rows.')
cmedPropertyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 3), )
if mibBuilder.loadTexts: cmedPropertyProfileTable.setStatus('current')
if mibBuilder.loadTexts: cmedPropertyProfileTable.setDescription('This table contains a list of the properties supported in a Profile. A Manager builds a Profile of properties, then ties each termination to a defined profile')
cmedPropertyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-IETF-MEGACO-MIB", "cmedGatewayId"), (0, "CISCO-IETF-MEGACO-MIB", "cmedPropertyProfileId"), (0, "CISCO-IETF-MEGACO-MIB", "cmedPropertyProfileIndex"))
if mibBuilder.loadTexts: cmedPropertyProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cmedPropertyProfileEntry.setDescription('Each row represents a default property of the Property Profile N-entries per mediaGatewayId/PropertyId, one entry per property.')
cmedPropertyProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cmedPropertyProfileId.setStatus('current')
if mibBuilder.loadTexts: cmedPropertyProfileId.setDescription('This PropertyProfile Identifier uniquely identifies this set of properties. This is the value each termination would refer, when they would like to support all the properties in this profile')
cmedPropertyProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cmedPropertyProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cmedPropertyProfileIndex.setDescription("This is the index to the PropertyProfile This is just a 'counter' through the cmedPropertyProfile Table. ie, property=1 property=2 etc.")
cmedPropertyProfileProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 3, 1, 3), AutonomousType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedPropertyProfileProperty.setStatus('current')
if mibBuilder.loadTexts: cmedPropertyProfileProperty.setDescription('The Property supported by this Profile. This is an Object ID (OID) defined in a package MIB to identify a Particular property (such as AnalogLines, Tones etc).')
cmedPropertyProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99999, 1, 3, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmedPropertyProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmedPropertyProfileRowStatus.setDescription('It is used to create new rows in this table, modify existing rows, and to delete existing rows.')
ciscoIetfMegacoMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99999, 3))
cmedCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99999, 3, 1))
cmedConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99999, 3, 2))
cmedCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 99999, 3, 1, 1)).setObjects(("CISCO-IETF-MEGACO-MIB", "cmedConfig"), ("CISCO-IETF-MEGACO-MIB", "cmedStatsGroup"), ("CISCO-IETF-MEGACO-MIB", "cmedGwyControllerGroup"), ("CISCO-IETF-MEGACO-MIB", "cmedNextIdGroup"), ("CISCO-IETF-MEGACO-MIB", "cmedTermGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmedCompliance = cmedCompliance.setStatus('current')
if mibBuilder.loadTexts: cmedCompliance.setDescription('Compliance statement for entities which implement the CISCO-IETF-MEGACO-MIB.')
cmedConfig = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99999, 3, 2, 1)).setObjects(("CISCO-IETF-MEGACO-MIB", "cmedGatewayLinkName"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewayIPAddress"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewayPort"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewayEncodingScheme"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewayProtocol"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewaySigTptProtocol"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewayAdminStatus"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewayOperStatus"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewayLastStatusChange"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewayResetStatistics"), ("CISCO-IETF-MEGACO-MIB", "cmedGatewayRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmedConfig = cmedConfig.setStatus('current')
if mibBuilder.loadTexts: cmedConfig.setDescription('This group contains of all the configuration Information for a Media Gateway. This group is mandatory for any implementation managing a media gateway or a group of media gateways')
cmedStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99999, 3, 2, 2)).setObjects(("CISCO-IETF-MEGACO-MIB", "cmedNumInMessages"), ("CISCO-IETF-MEGACO-MIB", "cmedNumInOctets"), ("CISCO-IETF-MEGACO-MIB", "cmedNumOutMessages"), ("CISCO-IETF-MEGACO-MIB", "cmedNumOutOctets"), ("CISCO-IETF-MEGACO-MIB", "cmedNumErrors"), ("CISCO-IETF-MEGACO-MIB", "cmedNumTimerRecovery"), ("CISCO-IETF-MEGACO-MIB", "cmedTransportNumLosses"), ("CISCO-IETF-MEGACO-MIB", "cmedTransportNumSwitchover"), ("CISCO-IETF-MEGACO-MIB", "cmedTransportTotalNumAlarms"), ("CISCO-IETF-MEGACO-MIB", "cmedTransportLastEvent"), ("CISCO-IETF-MEGACO-MIB", "cmedTransportLastEventTime"), ("CISCO-IETF-MEGACO-MIB", "cmedLastStatisticsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmedStatsGroup = cmedStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cmedStatsGroup.setDescription('This group contains of all the statistics Information for a Media Gateway. This group is mandatory for any implementation managing a media gateway or a group of media gateways')
cmedGwyControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99999, 3, 2, 3)).setObjects(("CISCO-IETF-MEGACO-MIB", "cmedGwyControllerIPAddress"), ("CISCO-IETF-MEGACO-MIB", "cmedGwyControllerPort"), ("CISCO-IETF-MEGACO-MIB", "cmedGwyControllerAdminStatus"), ("CISCO-IETF-MEGACO-MIB", "cmedGwyControllerOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmedGwyControllerGroup = cmedGwyControllerGroup.setStatus('current')
if mibBuilder.loadTexts: cmedGwyControllerGroup.setDescription('This group contains of all the configuration Information for a Media Gateway Controller. This group is mandatory for any implementation managing a media gateway controller or a group of media gateway controllers. It is also mandatory for implementations managing media gateway(s)')
cmedNextIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99999, 3, 2, 4)).setObjects(("CISCO-IETF-MEGACO-MIB", "cmedNextTerminationId"), ("CISCO-IETF-MEGACO-MIB", "cmedNextLinkId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmedNextIdGroup = cmedNextIdGroup.setStatus('current')
if mibBuilder.loadTexts: cmedNextIdGroup.setDescription("Agent provides NextId's to the Manager to assist in selecting and creating new table entries. This group is optional for all the implementations. But when it is not implemented, it is the manager's responsibility to uniquely determine these ids")
cmedTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99999, 3, 2, 5)).setObjects(("CISCO-IETF-MEGACO-MIB", "cmedTermName"), ("CISCO-IETF-MEGACO-MIB", "cmedTermAdminStatus"), ("CISCO-IETF-MEGACO-MIB", "cmedTermOperStatus"), ("CISCO-IETF-MEGACO-MIB", "cmedTermInterfaceIdentifier"), ("CISCO-IETF-MEGACO-MIB", "cmedTermPropertyProfileId"), ("CISCO-IETF-MEGACO-MIB", "cmedTermRowStatus"), ("CISCO-IETF-MEGACO-MIB", "cmedPropertyProfileProperty"), ("CISCO-IETF-MEGACO-MIB", "cmedPropertyProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmedTermGroup = cmedTermGroup.setStatus('current')
if mibBuilder.loadTexts: cmedTermGroup.setDescription('This group contains of all the configuration Information for a termination. This group is mandatory for any implementation managing termination.')
mibBuilder.exportSymbols("CISCO-IETF-MEGACO-MIB", cmedTermOperStatus=cmedTermOperStatus, cmedConnections=cmedConnections, cmedGatewayStatsEntry=cmedGatewayStatsEntry, cmedTransportTotalNumAlarms=cmedTransportTotalNumAlarms, cmedLinkIdTable=cmedLinkIdTable, cmedGatewayIPAddress=cmedGatewayIPAddress, cmedPropertyProfileRowStatus=cmedPropertyProfileRowStatus, cmedGatewayId=cmedGatewayId, ciscoIetfMegacoMIBNotifs=ciscoIetfMegacoMIBNotifs, cmedGatewayStatsTable=cmedGatewayStatsTable, cmedTermInterfaceIdentifier=cmedTermInterfaceIdentifier, cmedCompliance=cmedCompliance, CMediaGatewayTermId=CMediaGatewayTermId, cmedTerminationsTable=cmedTerminationsTable, cmedPropertyProfileId=cmedPropertyProfileId, cmedGatewayLastStatusChange=cmedGatewayLastStatusChange, cmedGwyControllerAdminStatus=cmedGwyControllerAdminStatus, cmedLinkIdEntry=cmedLinkIdEntry, cmedTermName=cmedTermName, cmedNumInMessages=cmedNumInMessages, cmedStatistics=cmedStatistics, cmedPropertyProfileIndex=cmedPropertyProfileIndex, cmedPropertyProfileProperty=cmedPropertyProfileProperty, cmedTransportNumSwitchover=cmedTransportNumSwitchover, cmedGatewayEncodingScheme=cmedGatewayEncodingScheme, cmedNextIdGroup=cmedNextIdGroup, cmedGwyControllerIPAddress=cmedGwyControllerIPAddress, cmedGatewayRowStatus=cmedGatewayRowStatus, cmedGatewayOperStatus=cmedGatewayOperStatus, cmedLastStatisticsReset=cmedLastStatisticsReset, cmedGatewayPort=cmedGatewayPort, cmedGwyControllerId=cmedGwyControllerId, cmedTermIdEntry=cmedTermIdEntry, cmedTransportNumLosses=cmedTransportNumLosses, cmedGatewaySigTptProtocol=cmedGatewaySigTptProtocol, cmedGatewayConfigTable=cmedGatewayConfigTable, cmedGwyControllerEntry=cmedGwyControllerEntry, cmedTermId=cmedTermId, cmedTermPropertyProfileId=cmedTermPropertyProfileId, CMediaGatewayId=CMediaGatewayId, PYSNMP_MODULE_ID=ciscoIetfMegacoMIB, cmedGwyControllerOperStatus=cmedGwyControllerOperStatus, ciscoIetfMegacoMIB=ciscoIetfMegacoMIB, cmedConfiguration=cmedConfiguration, cmedGatewayProtocol=cmedGatewayProtocol, cmedTransportLastEvent=cmedTransportLastEvent, cmedProperties=cmedProperties, cmedTerminationsEntry=cmedTerminationsEntry, cmedTransportLastEventTime=cmedTransportLastEventTime, cmedGatewayResetStatistics=cmedGatewayResetStatistics, cmedConfigGroups=cmedConfigGroups, cmedStatsGroup=cmedStatsGroup, cmedTermIdTable=cmedTermIdTable, cmedConfig=cmedConfig, CMediaGatewayLinkId=CMediaGatewayLinkId, cmedNextTerminationId=cmedNextTerminationId, cmedGwyControllerTable=cmedGwyControllerTable, cmedTermGroup=cmedTermGroup, cmedNextLinkId=cmedNextLinkId, cmedNumErrors=cmedNumErrors, cmedGwyControllerGroup=cmedGwyControllerGroup, cmedGwyControllerPort=cmedGwyControllerPort, ciscoIetfMegacoMIBConformance=ciscoIetfMegacoMIBConformance, cmedGatewayConfigEntry=cmedGatewayConfigEntry, cmedNumOutOctets=cmedNumOutOctets, cmedTermAdminStatus=cmedTermAdminStatus, cmedGatewayLinkName=cmedGatewayLinkName, cmedCompliances=cmedCompliances, cmedNumInOctets=cmedNumInOctets, cmedPropertyProfileEntry=cmedPropertyProfileEntry, ciscoIetfMegacoMIBObjects=ciscoIetfMegacoMIBObjects, cmedTermRowStatus=cmedTermRowStatus, cmedNumTimerRecovery=cmedNumTimerRecovery, cmedGatewayLinkId=cmedGatewayLinkId, cmedGatewayAdminStatus=cmedGatewayAdminStatus, cmedPropertyProfileTable=cmedPropertyProfileTable, cmedNumOutMessages=cmedNumOutMessages)
