#
# PySNMP MIB module OMNI-gx2dualdrr2x-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2dualdrr2x-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
gx2DualDrr2x, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2DualDrr2x")
trapIdentifier, trapNetworkElemOperState, trapChangedValueDisplayString, trapNetworkElemAdminState, trapPerceivedSeverity, trapNetworkElemModelNumber, trapNetworkElemSerialNum, trapNetworkElemAlarmStatus, trapNETrapLastTrapTimeStamp, trapChangedValueInteger, trapText, trapChangedObjectId, trapNetworkElemAvailStatus = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapIdentifier", "trapNetworkElemOperState", "trapChangedValueDisplayString", "trapNetworkElemAdminState", "trapPerceivedSeverity", "trapNetworkElemModelNumber", "trapNetworkElemSerialNum", "trapNetworkElemAlarmStatus", "trapNETrapLastTrapTimeStamp", "trapChangedValueInteger", "trapText", "trapChangedObjectId", "trapNetworkElemAvailStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, iso, MibIdentifier, ModuleIdentity, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Unsigned32, Bits, TimeTicks, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "iso", "MibIdentifier", "ModuleIdentity", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Unsigned32", "Bits", "TimeTicks", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2dualdrr2xDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 1))
gx2dualdrr2xAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2), )
if mibBuilder.loadTexts: gx2dualdrr2xAnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xAnalogTable.setDescription('This table contains gx2dualdrr2x specific analog parameters with nominal,limits and current values.')
gx2dualdrr2xAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1), ).setIndexNames((0, "OMNI-gx2dualdrr2x-MIB", "gx2dualdrr2xAnalogTableIndex"))
if mibBuilder.loadTexts: gx2dualdrr2xAnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xAnalogEntry.setDescription('This list contains the analog parameters and descriptions.')
gx2dualdrr2xDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3), )
if mibBuilder.loadTexts: gx2dualdrr2xDigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xDigitalTable.setDescription('This table contains gx2dualdrr2x specific digital parameters with nominal and current values.')
gx2dualdrr2xDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2), ).setIndexNames((0, "OMNI-gx2dualdrr2x-MIB", "gx2dualdrr2xDigitalTableIndex"))
if mibBuilder.loadTexts: gx2dualdrr2xDigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xDigitalEntry.setDescription('This list contains individual digital parameters and descriptions.')
gx2dualdrr2xStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4), )
if mibBuilder.loadTexts: gx2dualdrr2xStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xStatusTable.setDescription('This table contains gx2dualdrr2x specific status parameters with nominal and current values.')
gx2dualdrr2xStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3), ).setIndexNames((0, "OMNI-gx2dualdrr2x-MIB", "gx2dualdrr2xStatusTableIndex"))
if mibBuilder.loadTexts: gx2dualdrr2xStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xStatusEntry.setDescription('This list contains Status parameters and descriptions.')
gx2dualdrr2xFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5), )
if mibBuilder.loadTexts: gx2dualdrr2xFactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xFactoryTable.setDescription('This table contains gx2dualdrr2x specific factory setting parameters with nominal and current values.')
gx2dualdrr2xFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4), ).setIndexNames((0, "OMNI-gx2dualdrr2x-MIB", "gx2dualdrr2xFactoryTableIndex"))
if mibBuilder.loadTexts: gx2dualdrr2xFactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xFactoryEntry.setDescription('This list contains Factory setting parameters and descriptions.')
gx2dualdrr2xAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dualdrr2xAnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xAnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
dualdrr2xlabelRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelRecdOptPwr1.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelRecdOptPwr1.setDescription('The value of this object provides the label of the Channel 1 Received Opt power Analog parameter.')
dualdrr2xuomRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomRecdOptPwr1.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomRecdOptPwr1.setDescription('The value of this object provides the Unit of Measure of the Channel 1 Received Opt power Analog parameter.')
dualdrr2xmajorHighRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighRecdOptPwr1.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xmajorHighRecdOptPwr1.setDescription('This object is not used by this module and always returns the value of the Channel 1 Received Opt power Major High Alarm Limit Analog parameter.')
dualdrr2xmajorLowRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowRecdOptPwr1.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xmajorLowRecdOptPwr1.setDescription('This object is not used by this module and always returns the value of the Channel 1 Received Opt power Major High Alarm Limit Analog parameter.')
dualdrr2xminorHighRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighRecdOptPwr1.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighRecdOptPwr1.setDescription('This object is not used by this module and always returns the value of 10^e10 . It is kept here for persistence.')
dualdrr2xminorLowRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowRecdOptPwr1.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowRecdOptPwr1.setDescription('This object is not used by this module and always returns the value of 10^e10 . It is kept here for persistence.')
dualdrr2xcurrentValueRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 8), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xcurrentValueRecdOptPwr1.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueRecdOptPwr1.setDescription('The value of this object provides the Current value of the Channel 1 Received Opt power.')
dualdrr2xstateFlagRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagRecdOptPwr1.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagRecdOptPwr1.setDescription('The value of this object provides the state of the Channel 1 Received Opt power Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueRecdOptPwr1.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueRecdOptPwr1.setDescription('The value of this object provides the minimum value of the Channel 1 Received Opt power.')
dualdrr2xmaxValueRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueRecdOptPwr1.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueRecdOptPwr1.setDescription('The value of this object provides the maximum value of the Channel 1 Received Opt power.')
dualdrr2xalarmStateRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateRecdOptPwr1.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateRecdOptPwr1.setDescription('The value of this object provides the curent alarm state of the Channel 1 Received Opt power.')
dualdrr2xlabelRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelRecdOptPwr2.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelRecdOptPwr2.setDescription('The value of this object provides the label of the Channel 2 Received Opt power Analog parameter.')
dualdrr2xuomRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomRecdOptPwr2.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomRecdOptPwr2.setDescription('The value of this object provides the Unit of Measure of the Channel 2 Received Opt power Analog parameter.')
dualdrr2xmajorHighRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighRecdOptPwr2.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xmajorHighRecdOptPwr2.setDescription('This object is not used by this module and always returns the value of the Channel 2 Received Opt power Major High Alarm Limit Analog parameter.')
dualdrr2xmajorLowRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowRecdOptPwr2.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xmajorLowRecdOptPwr2.setDescription('This object is not used by this module and always returns the value of the Channel 2 Received Opt power Major High Alarm Limit Analog parameter.')
dualdrr2xminorHighRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighRecdOptPwr2.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighRecdOptPwr2.setDescription('This object is not used by this module and always returns the value of 10^e10 . It is kept here for persistence.')
dualdrr2xminorLowRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowRecdOptPwr2.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowRecdOptPwr2.setDescription('This object is not used by this module and always returns the value of 10^e10 . It is kept here for persistence.')
dualdrr2xcurrentValueRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xcurrentValueRecdOptPwr2.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueRecdOptPwr2.setDescription('The value of this object provides the Current value of the Channel 2 Received Opt power.')
dualdrr2xstateFlagRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagRecdOptPwr2.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagRecdOptPwr2.setDescription('The value of this object provides the state of the Channel 2 Received Opt power Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueRecdOptPwr2.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueRecdOptPwr2.setDescription('The value of this object provides the minimum value of the Channel 2 Received Opt power.')
dualdrr2xmaxValueRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueRecdOptPwr2.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueRecdOptPwr2.setDescription('The value of this object provides the maximum value of the Channel 2 Received Opt power.')
dualdrr2xalarmStateRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateRecdOptPwr2.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateRecdOptPwr2.setDescription('The value of this object provides the curent alarm state of the Channel 2 Received optical power.')
dualdrr2xlabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelModTemp.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelModTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
dualdrr2xuomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomModTemp.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
dualdrr2xmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighModTemp.setDescription('The value of this object provides the Major High alarm value of the Module Temperature Analog parameter.')
dualdrr2xmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowModTemp.setDescription('The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter.')
dualdrr2xminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminorHighModTemp.setDescription('The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter.')
dualdrr2xminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminorLowModTemp.setDescription('The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter.')
dualdrr2xcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter.')
dualdrr2xstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagModTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueModTemp.setDescription('The value of this object provides the minimum value the Module Temperature Analog parameter can achive.')
dualdrr2xmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueModTemp.setDescription('The value of this object provides the maximum value the Module Temperature Analog parameter can achive.')
dualdrr2xalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
dualdrr2xlabel12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabel12VCurrent.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabel12VCurrent.setDescription('The value of this object provides the label of the 12v power supply Current Analog parameter.')
dualdrr2xuom12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuom12VCurrent.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuom12VCurrent.setDescription('The value of this object provides the Unit of Measure of the 12v power supply Current Analog parameter.')
dualdrr2xmajorHigh12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHigh12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHigh12VCurrent.setDescription('The value of this object provides the Major High alarm value of the 12v power supply Current Analog parameter.')
dualdrr2xmajorLow12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLow12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLow12VCurrent.setDescription('The value of this object provides the Major Low alarm value of the 12v power supply Current Analog parameter.')
dualdrr2xminorHigh12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHigh12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminorHigh12VCurrent.setDescription('The value of this object provides the Minor High alarm value of the 12v power supply Current Analog parameter.')
dualdrr2xminorLow12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLow12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminorLow12VCurrent.setDescription('The value of this object provides the Minor Low alarm value of the 12v power supply Current Analog parameter.')
dualdrr2xcurrentValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValue12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValue12VCurrent.setDescription('The value of this object provides the Current value of the 12v power supply Current parameter.')
dualdrr2xstateFlag12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlag12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlag12VCurrent.setDescription('The value of this object provides the state of the 12v power supply Current Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValue12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValue12VCurrent.setDescription('The value of this object provides the minimum value the 12v power supply Current Analog parameter can achive.')
dualdrr2xmaxValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValue12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValue12VCurrent.setDescription('The value of this object provides the maximum value the 12v power supply Current Analog parameter can achive.')
dualdrr2xalarmState12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmState12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmState12VCurrent.setDescription('The value of this object provides the curent alarm state of the 12v power supply Current Analog parameter.')
dualdrr2xlabelFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelFanSpeed.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelFanSpeed.setDescription('The value of this object provides the label of the Fan Speed Analog parameter.')
dualdrr2xuomFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomFanSpeed.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomFanSpeed.setDescription('The value of this object provides the Unit of Measure of the Fan Speed Analog parameter.')
dualdrr2xmajorHighFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighFanSpeed.setDescription('The value of this object provides the Major High alarm value of the Fan Speed Analog parameter.')
dualdrr2xmajorLowFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowFanSpeed.setDescription('The value of this object provides the Major Low alarm value of the Fan Speed Analog parameter.')
dualdrr2xminorHighFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighFanSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighFanSpeed.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowFanSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowFanSpeed.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueFanSpeed.setDescription('The value of this object provides the current value of the Fan Speed Analog parameter.')
dualdrr2xstateFlagFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagFanSpeed.setDescription('The value of this object provides the state of the Fan Speed Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueFanSpeed.setDescription('The value of this object provides the minimum value the Fan Speed Analog parameter can achive.')
dualdrr2xmaxValueFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueFanSpeed.setDescription('The value of this object provides the maximum value the Fan Speed Analog parameter can achive.')
dualdrr2xalarmStateFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateFanSpeed.setDescription('The value of this object provides the curent alarm state of the Fan Speed Analog parameter.')
dualdrr2xlabelTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx0SFPWave.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx0SFPWave.setDescription('The value of this object provides the label of the Tx 0 SFP Wavelength Analog parameter.')
dualdrr2xuomTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx0SFPWave.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx0SFPWave.setDescription('The value of this object provides the Unit of Measure of the Tx 0 SFP Wavelength Analog parameter.')
dualdrr2xmajorHighTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx0SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx0SFPWave.setDescription('The value of this object provides the Major High alarm value of the Tx 0 SFP Wavelength Analog parameter.')
dualdrr2xmajorLowTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx0SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx0SFPWave.setDescription('The value of this object provides the Major Low alarm value of the Tx 0 SFP Wavelength Analog parameter.')
dualdrr2xminorHighTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx0SFPWave.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx0SFPWave.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx0SFPWave.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx0SFPWave.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx0SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx0SFPWave.setDescription('The value of this object provides the current value of the Tx 0 SFP Wavelength Analog parameter.')
dualdrr2xstateFlagTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx0SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx0SFPWave.setDescription('The value of this object provides the state of the Tx 0 SFP Wavelength Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx0SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx0SFPWave.setDescription('The value of this object provides the minimum value the Tx 0 SFP Wavelength Analog parameter can achive.')
dualdrr2xmaxValueTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx0SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx0SFPWave.setDescription('The value of this object provides the maximum value the Tx 0 SFP Wavelength Analog parameter can achive.')
dualdrr2xalarmStateTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx0SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx0SFPWave.setDescription('The value of this object provides the curent alarm state of the Tx 0 SFP Wavelength Analog parameter.')
dualdrr2xlabelTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx0OptPwr.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx0OptPwr.setDescription('The value of this object provides the label of the Tx 0 Optical Power Analog parameter.')
dualdrr2xuomTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx0OptPwr.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx0OptPwr.setDescription('The value of this object provides the Unit of Measure of the Tx 0 Optical Power Analog parameter.')
dualdrr2xmajorHighTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx0OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx0OptPwr.setDescription('The value of this object provides the Major High alarm value of the Tx 0 Optical Power Analog parameter.')
dualdrr2xmajorLowTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx0OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx0OptPwr.setDescription('The value of this object provides the Major Low alarm value of the Tx 0 Optical Power Analog parameter.')
dualdrr2xminorHighTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx0OptPwr.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx0OptPwr.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx0OptPwr.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx0OptPwr.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx0OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx0OptPwr.setDescription('The value of this object provides the current value of the Tx 0 Optical Power Analog parameter.')
dualdrr2xstateFlagTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx0OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx0OptPwr.setDescription('The value of this object provides the state of the Tx 0 Optical Power Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx0OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx0OptPwr.setDescription('The value of this object provides the minimum value the Tx 0 Optical Power Analog parameter can achive.')
dualdrr2xmaxValueTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx0OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx0OptPwr.setDescription('The value of this object provides the maximum value the Tx 0 Optical Power Analog parameter can achive.')
dualdrr2xalarmStateTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx0OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx0OptPwr.setDescription('The value of this object provides the curent alarm state of the Tx 0 Optical Power Analog parameter.')
dualdrr2xlabelTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx024vCurr.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx024vCurr.setDescription('The value of this object provides the label of the Tx 0 24 Volt Current Analog parameter.')
dualdrr2xuomTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx024vCurr.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx024vCurr.setDescription('The value of this object provides the Unit of Measure of the Tx 0 24 Volt Current Analog parameter.')
dualdrr2xmajorHighTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx024vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx024vCurr.setDescription('The value of this object provides the Major High alarm value of the Tx 0 24 Volt Current Analog parameter.')
dualdrr2xmajorLowTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx024vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx024vCurr.setDescription('The value of this object provides the Major Low alarm value of the Tx 0 24 Volt Current Analog parameter.')
dualdrr2xminorHighTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx024vCurr.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx024vCurr.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx024vCurr.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx024vCurr.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx024vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx024vCurr.setDescription('The value of this object provides the current value of the Tx 0 24 Volt Current Analog parameter.')
dualdrr2xstateFlagTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx024vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx024vCurr.setDescription('The value of this object provides the state of the Tx 0 24 Volt Current Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx024vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx024vCurr.setDescription('The value of this object provides the minimum value the Tx 0 24 Volt Current Analog parameter can achive.')
dualdrr2xmaxValueTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx024vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx024vCurr.setDescription('The value of this object provides the maximum value the Tx 0 24 Volt Current Analog parameter can achive.')
dualdrr2xalarmStateTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx024vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx024vCurr.setDescription('The value of this object provides the curent alarm state of the Tx 0 24 Volt Current Analog parameter.')
dualdrr2xlabelTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx024Volt.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx024Volt.setDescription('The value of this object provides the label of the Tx 0 24 Volt supply voltage Analog parameter.')
dualdrr2xuomTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx024Volt.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx024Volt.setDescription('The value of this object provides the Unit of Measure of the Tx 0 24 Volt supply voltage Analog parameter.')
dualdrr2xmajorHighTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx024Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx024Volt.setDescription('The value of this object provides the Major High alarm value of the Tx 0 24 Volt supply voltage Analog parameter.')
dualdrr2xmajorLowTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx024Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx024Volt.setDescription('The value of this object provides the Major Low alarm value of the Tx 0 24 Volt supply voltage Analog parameter.')
dualdrr2xminorHighTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx024Volt.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx024Volt.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx024Volt.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx024Volt.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx024Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx024Volt.setDescription('The value of this object provides the current value of the Tx 0 24 Volt supply voltage Analog parameter.')
dualdrr2xstateFlagTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx024Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx024Volt.setDescription('The value of this object provides the state of the Tx 0 24 Volt supply voltage Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx024Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx024Volt.setDescription('The value of this object provides the minimum value the Tx 0 24 Volt supply voltage Analog parameter can achive.')
dualdrr2xmaxValueTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx024Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx024Volt.setDescription('The value of this object provides the maximum value the Tx 0 24 Volt supply voltage Analog parameter can achive.')
dualdrr2xalarmStateTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx024Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx024Volt.setDescription('The value of this object provides the curent alarm state of the Tx 0 24 Volt supply voltage Analog parameter.')
dualdrr2xlabelTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx0ModTemp.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx0ModTemp.setDescription('The value of this object provides the label of the Tx 0 24 Module Temperature Analog parameter.')
dualdrr2xuomTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx0ModTemp.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx0ModTemp.setDescription('The value of this object provides the Unit of Measure of the Tx 0 Module Temperature Analog parameter.')
dualdrr2xmajorHighTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx0ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx0ModTemp.setDescription('The value of this object provides the Major High alarm value of the Tx 0 Module Temperature Analog parameter.')
dualdrr2xmajorLowTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx0ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx0ModTemp.setDescription('The value of this object provides the Major Low alarm value of the Tx 0 Module Temperature Analog parameter.')
dualdrr2xminorHighTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx0ModTemp.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx0ModTemp.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx0ModTemp.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx0ModTemp.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx0ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx0ModTemp.setDescription('The value of this object provides the current value of the Tx 0 Module Temperature Analog parameter.')
dualdrr2xstateFlagTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx0ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx0ModTemp.setDescription('The value of this object provides the state of the Tx 0 Module Temperature Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx0ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx0ModTemp.setDescription('The value of this object provides the minimum value the Tx 0 Module Temperature Analog parameter can achive.')
dualdrr2xmaxValueTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx0ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx0ModTemp.setDescription('The value of this object provides the maximum value the Tx 0 Module Temperature Analog parameter can achive.')
dualdrr2xalarmStateTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx0ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx0ModTemp.setDescription('The value of this object provides the curent alarm state of the Tx 0 Module Temperature Analog parameter.')
dualdrr2xlabelTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx1SFPWave.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx1SFPWave.setDescription('The value of this object provides the label of the Tx 1 SFP Wavelength Analog parameter.')
dualdrr2xuomTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx1SFPWave.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx1SFPWave.setDescription('The value of this object provides the Unit of Measure of the Tx 1 SFP Wavelength Analog parameter.')
dualdrr2xmajorHighTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 114), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx1SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx1SFPWave.setDescription('The value of this object provides the Major High alarm value of the Tx 1 SFP Wavelength Analog parameter.')
dualdrr2xmajorLowTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 115), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx1SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx1SFPWave.setDescription('The value of this object provides the Major Low alarm value of the Tx 1 SFP Wavelength Analog parameter.')
dualdrr2xminorHighTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 116), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx1SFPWave.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx1SFPWave.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 117), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx1SFPWave.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx1SFPWave.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 118), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx1SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx1SFPWave.setDescription('The value of this object provides the current value of the Tx 1 SFP Wavelength Analog parameter.')
dualdrr2xstateFlagTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx1SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx1SFPWave.setDescription('The value of this object provides the state of the Tx 1 SFP Wavelength Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 120), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx1SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx1SFPWave.setDescription('The value of this object provides the minimum value the Tx 1 SFP Wavelength Analog parameter can achive.')
dualdrr2xmaxValueTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 121), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx1SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx1SFPWave.setDescription('The value of this object provides the maximum value the Tx 1 SFP Wavelength Analog parameter can achive.')
dualdrr2xalarmStateTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx1SFPWave.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx1SFPWave.setDescription('The value of this object provides the curent alarm state of the Tx 1 SFP Wavelength Analog parameter.')
dualdrr2xlabelTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 123), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx1OptPwr.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx1OptPwr.setDescription('The value of this object provides the label of the Tx 1 Optical Power Analog parameter.')
dualdrr2xuomTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx1OptPwr.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx1OptPwr.setDescription('The value of this object provides the Unit of Measure of the Tx 1 Optical Power Analog parameter.')
dualdrr2xmajorHighTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 125), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx1OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx1OptPwr.setDescription('The value of this object provides the Major High alarm value of the Tx 1 Optical Power Analog parameter.')
dualdrr2xmajorLowTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 126), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx1OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx1OptPwr.setDescription('The value of this object provides the Major Low alarm value of the Tx 1 Optical Power Analog parameter.')
dualdrr2xminorHighTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 127), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx1OptPwr.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx1OptPwr.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 128), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx1OptPwr.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx1OptPwr.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 129), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx1OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx1OptPwr.setDescription('The value of this object provides the current value of the Tx 1 Optical Power Analog parameter.')
dualdrr2xstateFlagTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx1OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx1OptPwr.setDescription('The value of this object provides the state of the Tx 1 Optical Power Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 131), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx1OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx1OptPwr.setDescription('The value of this object provides the minimum value the Tx 1 Optical Power Analog parameter can achive.')
dualdrr2xmaxValueTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 132), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx1OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx1OptPwr.setDescription('The value of this object provides the maximum value the Tx 1 Optical Power Analog parameter can achive.')
dualdrr2xalarmStateTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx1OptPwr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx1OptPwr.setDescription('The value of this object provides the curent alarm state of the Tx 1 Optical Power Analog parameter.')
dualdrr2xlabelTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 134), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx124vCurr.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx124vCurr.setDescription('The value of this object provides the label of the Tx 1 24 VoltCurrent Analog parameter.')
dualdrr2xuomTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 135), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx124vCurr.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx124vCurr.setDescription('The value of this object provides the Unit of Measure of the Tx 1 24 Volt Current Analog parameter.')
dualdrr2xmajorHighTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 136), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx124vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx124vCurr.setDescription('The value of this object provides the Major High alarm value of the Tx 1 24 Volt Current Analog parameter.')
dualdrr2xmajorLowTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 137), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx124vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx124vCurr.setDescription('The value of this object provides the Major Low alarm value of the Tx 1 24 Volt Current Analog parameter.')
dualdrr2xminorHighTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 138), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx124vCurr.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx124vCurr.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 139), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx124vCurr.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx124vCurr.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 140), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx124vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx124vCurr.setDescription('The value of this object provides the current value of the Tx 1 24 Volt Current Analog parameter.')
dualdrr2xstateFlagTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx124vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx124vCurr.setDescription('The value of this object provides the state of the Tx 1 24 Volt Current Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 142), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx124vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx124vCurr.setDescription('The value of this object provides the minimum value the Tx 1 24 Volt Current Analog parameter can achive.')
dualdrr2xmaxValueTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 143), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx124vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx124vCurr.setDescription('The value of this object provides the maximum value the Tx 1 24 Volt Current Analog parameter can achive.')
dualdrr2xalarmStateTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 144), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx124vCurr.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx124vCurr.setDescription('The value of this object provides the curent alarm state of the Tx 1 24 Volt Current Analog parameter.')
dualdrr2xlabelTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 145), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx124Volt.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx124Volt.setDescription('The value of this object provides the label of the Tx 1 24 Volt supply voltage Analog parameter.')
dualdrr2xuomTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 146), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx124Volt.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx124Volt.setDescription('The value of this object provides the Unit of Measure of the Tx 1 24 Volt supply voltage Analog parameter.')
dualdrr2xmajorHighTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 147), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx124Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx124Volt.setDescription('The value of this object provides the Major High alarm value of the Tx 1 24 Volt supply voltage Analog parameter.')
dualdrr2xmajorLowTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 148), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx124Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx124Volt.setDescription('The value of this object provides the Major Low alarm value of the Tx 1 24 Volt supply voltage Analog parameter.')
dualdrr2xminorHighTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 149), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx124Volt.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx124Volt.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 150), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx124Volt.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx124Volt.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 151), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx124Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx124Volt.setDescription('The value of this object provides the current value of the Tx 1 24 Volt supply voltage Analog parameter.')
dualdrr2xstateFlagTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx124Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx124Volt.setDescription('The value of this object provides the state of the Tx 1 24 Volt supply voltage Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 153), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx124Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx124Volt.setDescription('The value of this object provides the minimum value the Tx 1 24 Volt supply voltage Analog parameter can achive.')
dualdrr2xmaxValueTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 154), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx124Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx124Volt.setDescription('The value of this object provides the maximum value the Tx 1 24 Volt supply voltage Analog parameter can achive.')
dualdrr2xalarmStateTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx124Volt.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx124Volt.setDescription('The value of this object provides the curent alarm state of the Tx 1 24 Volt supply voltage Analog parameter.')
dualdrr2xlabelTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 156), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx1ModTemp.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTx1ModTemp.setDescription('The value of this object provides the label of the Tx 1 24 Module Temperature Analog parameter.')
dualdrr2xuomTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 157), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx1ModTemp.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xuomTx1ModTemp.setDescription('The value of this object provides the Unit of Measure of the Tx 1 Module Temperature Analog parameter.')
dualdrr2xmajorHighTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 158), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx1ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorHighTx1ModTemp.setDescription('The value of this object provides the Major High alarm value of the Tx 1 Module Temperature Analog parameter.')
dualdrr2xmajorLowTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 159), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx1ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmajorLowTx1ModTemp.setDescription('The value of this object provides the Major Low alarm value of the Tx 1 Module Temperature Analog parameter.')
dualdrr2xminorHighTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 160), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx1ModTemp.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorHighTx1ModTemp.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xminorLowTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 161), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx1ModTemp.setStatus('obsolete')
if mibBuilder.loadTexts: dualdrr2xminorLowTx1ModTemp.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
dualdrr2xcurrentValueTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 162), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx1ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx1ModTemp.setDescription('The value of this object provides the current value of the Tx 1 Module Temperature Analog parameter.')
dualdrr2xstateFlagTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 163), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx1ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateFlagTx1ModTemp.setDescription('The value of this object provides the state of the Tx 1 Module Temperature Analog parameter. (1-hidden 2-read-only, 3-updateable).')
dualdrr2xminValueTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 164), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx1ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xminValueTx1ModTemp.setDescription('The value of this object provides the minimum value the Tx 1 Module Temperature Analog parameter can achive.')
dualdrr2xmaxValueTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 165), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx1ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xmaxValueTx1ModTemp.setDescription('The value of this object provides the maximum value the Tx 1 Module Temperature Analog parameter can achive.')
dualdrr2xalarmStateTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 166), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx1ModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xalarmStateTx1ModTemp.setDescription('The value of this object provides the curent alarm state of the Tx 1 Module Temperature Analog parameter.')
gx2dualdrr2xDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dualdrr2xDigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xDigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
dualdrr2xlabelTrippoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint1Value.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint1Value.setDescription('The value of this object provides the label of the Trip point Value Digital parameter. The trip point Value defines the RF switch point based on the optical power input to the DRR')
dualdrr2xenumTrippoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTrippoint1Value.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumTrippoint1Value.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueTrippoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint1Value.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint1Value.setDescription('The value of this object reflects the setting of the threshold at which the Trip point activates. It is in 1 dB increments ranging from -25 to -5 dB. The user can enter a number from 0 to 20, where 0 = -5db and 19 = -25db')
dualdrr2xstateflagTrippoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint1Value.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint1Value.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelTrippoint1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint1Mode.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint1Mode.setDescription('The value of this object provides the label of the Trip point mode Digital parameter. The trip point mode defines the RF switch action based on the optical power input to the DRR')
dualdrr2xenumTrippoint1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTrippoint1Mode.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumTrippoint1Mode.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueTrippoint1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarmOnly", 2), ("alarm-and-Switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint1Mode.setDescription('The value of this object is the current value of trip point mode. There are three possible value: 1-off, 2-alarm_only, 3-alarm&switch. If module input optical power is higher than the preset trippoint value, no operational difference for these three modes. If module input optical power is less than the preset trippoint value, 1) When trippoint mode is OFF, no trippoint alarm will be generated and RF output impedance will stay normal as low. 2) When tripoint mode is ALARM_ONLY, trip_point alarm will be generated when the input optical power lower than the preset trippoint level but RF output impedance will stay normal as low. 3) When trippoint mode is ALARM_SWITCH, trip point alarm will be generated and RF output impedance will switch to abnorml')
dualdrr2xstateflagTrippoint1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint1Mode.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelTrippoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint2Value.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint2Value.setDescription('The value of this object provides the label of the Trip point Value Digital parameter. The trip point Value defines the RF switch point based on the optical power input to the DRR')
dualdrr2xenumTrippoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTrippoint2Value.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumTrippoint2Value.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueTrippoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint2Value.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint2Value.setDescription('The value of this object reflects the setting of the threshold at which the Trip point activates. It is in 1 dB increments ranging from -25 to -5 dB. The user can enter a number from 0 to 20, where 0 = -5db and 19 = -25db')
dualdrr2xstateflagTrippoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint2Value.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint2Value.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelTrippoint2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint2Mode.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint2Mode.setDescription('The value of this object provides the label of the Trip point mode Digital parameter. The trip point mode defines the RF switch action based on the optical power input to the DRR')
dualdrr2xenumTrippoint2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTrippoint2Mode.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumTrippoint2Mode.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueTrippoint2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarmOnly", 2), ("alarm-and-Switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint2Mode.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint2Mode.setDescription('The value of this object is the current value of trip point mode. There are three possible value: 1-off, 2-alarm_only, 3-alarm&switch. If module input optical power is higher than the preset trippoint value, no operational difference for these three modes. If module input optical power is less than the preset trippoint value, 1) When trippoint mode is OFF, no trippoint alarm will be generated and RF output impedance will stay normal as low. 2) When tripoint mode is ALARM_ONLY, trip_point alarm will be generated when the input optical power lower than the preset trippoint level but RF output impedance will stay normal as low. 3) When trippoint mode is ALARM_SWITCH, trip point alarm will be generated and RF output impedance will switch to abnorml')
dualdrr2xstateflagTrippoint2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint2Mode.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint2Mode.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelGainChannel1A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel1A.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel1A.setDescription('The value of this object provides the label of the RF Channel 1A Gain Digital parameter. ')
dualdrr2xenumGainChannel1A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumGainChannel1A.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumGainChannel1A.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueGainChannel1A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel1A.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel1A.setDescription('The value of this object reflects the setting of the gain for RF Channel 1A. It is in 1 dB increments ranging from 0 to 20dB. The user can enter a number from 0 to 20')
dualdrr2xstateflagGainChannel1A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel1A.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel1A.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelGainChannel1B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel1B.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel1B.setDescription('The value of this object provides the label of the RF Channel 1B Gain Digital parameter. ')
dualdrr2xenumGainChannel1B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumGainChannel1B.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumGainChannel1B.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueGainChannel1B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel1B.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel1B.setDescription('The value of this object reflects the setting of the gain for RF Channel 1B. It is in 1 dB increments ranging from 0 to 20dB. The user can enter a number from 0 to 20')
dualdrr2xstateflagGainChannel1B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel1B.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel1B.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelGainChannel2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel2A.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel2A.setDescription('The value of this object provides the label of the RF Channel 2A Gain Digital parameter. ')
dualdrr2xenumGainChannel2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumGainChannel2A.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumGainChannel2A.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueGainChannel2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel2A.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel2A.setDescription('The value of this object reflects the setting of the gain for RF Channel 2A. It is in 1 dB increments ranging from 0 to 20dB. The user can enter a number from 0 to 20')
dualdrr2xstateflagGainChannel2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel2A.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel2A.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelGainChannel2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel2B.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel2B.setDescription('The value of this object provides the label of the RF Channel 2B Gain Digital parameter. ')
dualdrr2xenumGainChannel2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumGainChannel2B.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumGainChannel2B.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueGainChannel2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel2B.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel2B.setDescription('The value of this object reflects the setting of the gain for RF Channel 2B. It is in 1 dB increments ranging from 0 to 20dB. The user can enter a number from 0 to 20')
dualdrr2xstateflagGainChannel2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel2B.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel2B.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelTestpointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTestpointSelect.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelTestpointSelect.setDescription("The value of this object provides the label of the Module's test point select Digital parameter. ")
dualdrr2xenumTestpointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTestpointSelect.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumTestpointSelect.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueTestpointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTestpointSelect.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueTestpointSelect.setDescription('The value of this object reflects the setting of the test point selector for The Module. The user can enter a number from 1 to 4')
dualdrr2xstateflagTestpointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTestpointSelect.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagTestpointSelect.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelOpFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelOpFrequency.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelOpFrequency.setDescription("The value of this object provides the label of the Module's active channels Digital parameter. ")
dualdrr2xenumOpFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumOpFrequency.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumOpFrequency.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueOpFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightyfive", 1), ("sixtyfive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueOpFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueOpFrequency.setDescription('The value of this object reflects which channels are active for The Module. The user can enter a number from 1 to 4')
dualdrr2xstateflagOpFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagOpFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagOpFrequency.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelActChanSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelActChanSelect.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelActChanSelect.setDescription("The value of this object provides the label of the Module's active channels Digital parameter. ")
dualdrr2xenumActChanSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumActChanSelect.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumActChanSelect.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
dualdrr2xvalueActChanSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("channel1", 2), ("channel2", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueActChanSelect.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueActChanSelect.setDescription('The value of this object reflects which channels are active for The Module. The user can enter a number from 1 to 4')
dualdrr2xstateflagActChanSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagActChanSelect.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagActChanSelect.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelFactoryDefaultReset.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelFactoryDefaultReset.setDescription('The value of this object provides the label of the Factory Default Reset Digital parameter.')
dualdrr2xenumFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumFactoryDefaultReset.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xenumFactoryDefaultReset.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
dualdrr2xvalueFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueFactoryDefaultReset.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueFactoryDefaultReset.setDescription('The read of this value will return a invalid value. The read will not reflect the actual setting value for this parameter ')
dualdrr2xstateflagFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagFactoryDefaultReset.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagFactoryDefaultReset.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
gx2dualdrr2xStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dualdrr2xStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xStatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
dualdrr2xlabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelBoot.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelBoot.setDescription('The value of this object provides the label of the Boot Status parameter.')
dualdrr2xvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueBoot.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagBoot.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelFlash.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelFlash.setDescription('The value of this object provides the label of the Flash Status parameter.')
dualdrr2xvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueFlash.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagFlash.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
dualdrr2xvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelAlarmDataCrc.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelAlarmDataCrc.setDescription('The value of this object provides the label of the Alarm Data Crc parameter.')
dualdrr2xvalueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueAlarmDataCrc.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagAlarmDataCrc.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelCalibrationDataCrc.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelCalibrationDataCrc.setDescription('The value of this object provides the label of the Calibration Data Crc parameter.')
dualdrr2xvalueCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueCalibrationDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueCalibrationDataCrc.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagCalibrationDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagCalibrationDataCrc.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelHardwareStatus.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelHardwareStatus.setDescription('The value of this object provides the label of the Module Hardware Status parameter.')
dualdrr2xvalueHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueHardwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueHardwareStatus.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagHardwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagHardwareStatus.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelCh1TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelCh1TripPointStatus.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelCh1TripPointStatus.setDescription('The value of this object provides the label of the Optical Trip Point Status parameter.It indicates whether the optical power is above(0) or below(1) trip point value')
dualdrr2xvalueCh1TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueCh1TripPointStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueCh1TripPointStatus.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagCh1TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagCh1TripPointStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagCh1TripPointStatus.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelLink1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelLink1Status.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelLink1Status.setDescription('The value of this object provides the label of the Link Activity Status parameter. It represents receiver out of SYN with transmitter or Demux can not detect the optical signal.')
dualdrr2xvalueLink1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueLink1Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueLink1Status.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagLink1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagLink1Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagLink1Status.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelCh2TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelCh2TripPointStatus.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelCh2TripPointStatus.setDescription('The value of this object provides the label of the Optical Trip Point Status parameter.It indicates whether the optical power is above(0) or below(1) trip point value')
dualdrr2xvalueCh2TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueCh2TripPointStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueCh2TripPointStatus.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagCh2TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagCh2TripPointStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagCh2TripPointStatus.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelLink2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelLink2Status.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelLink2Status.setDescription('The value of this object provides the label of the Link Activity Status parameter. It represents receiver out of SYN with transmitter or Demux can not detect the optical signal.')
dualdrr2xvalueLink2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueLink2Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueLink2Status.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagLink2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagLink2Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagLink2Status.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelDRT1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelDRT1Status.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelDRT1Status.setDescription('The value of this object provides the label of the Link Activity Status parameter. It represents receiver out of SYN with transmitter or Demux can not detect the optical signal.')
dualdrr2xvalueDRT1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueDRT1Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueDRT1Status.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagDRT1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagDRT1Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagDRT1Status.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelSFP0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelSFP0Status.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelSFP0Status.setDescription('The value of this object provides the label of the Link Activity Status parameter. It represents receiver out of SYN with transmitter or Demux can not detect the optical signal.')
dualdrr2xvalueSFP0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueSFP0Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueSFP0Status.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagSFP0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagSFP0Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagSFP0Status.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelDRT2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelDRT2Status.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelDRT2Status.setDescription('The value of this object provides the label of the Link Activity Status parameter. It represents receiver out of SYN with transmitter or Demux can not detect the optical signal.')
dualdrr2xvalueDRT2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueDRT2Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueDRT2Status.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagDRT2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagDRT2Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagDRT2Status.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
dualdrr2xlabelSFP1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelSFP1Status.setStatus('optional')
if mibBuilder.loadTexts: dualdrr2xlabelSFP1Status.setDescription('The value of this object provides the label of the Link Activity Status parameter. It represents receiver out of SYN with transmitter or Demux can not detect the optical signal.')
dualdrr2xvalueSFP1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueSFP1Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xvalueSFP1Status.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
dualdrr2xstateflagSFP1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagSFP1Status.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xstateflagSFP1Status.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
gx2dualdrr2xFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dualdrr2xFactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2dualdrr2xFactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
dualdrr2xbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xbootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xbootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
dualdrr2xbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xbootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xbootStatusByte.setDescription('This object indicates the status of the last boot')
dualdrr2xbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xbank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xbank1CRC.setDescription('This object provides the CRC code of bank 0.')
dualdrr2xbank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xbank2CRC.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xbank2CRC.setDescription('This object provides the CRC code of bank 1.')
dualdrr2xprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xprgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xprgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed')
dualdrr2xfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xfactoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xfactoryCRC.setDescription('This object provides the CRC code for the Factory data.')
dualdrr2xcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("alarm", 2), ("calibration", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcalculateCRC.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xcalculateCRC.setDescription('This object indicates which of the Emnums will have the CRC calculated (1-factory, 2-alarm, 3-calibration).')
dualdrr2xhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xhourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xhourMeter.setDescription('This object provides the hour meter reading of the module.')
dualdrr2xflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xflashPrgCntA.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xflashPrgCntA.setDescription('This object provides the number of times Bank 0 flash has been programmed.')
dualdrr2xflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xflashPrgCntB.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xflashPrgCntB.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
dualdrr2xflashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xflashBankARev.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xflashBankARev.setDescription('This object provides the revision of flash bank 0.')
dualdrr2xflashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xflashBankBRev.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xflashBankBRev.setDescription('This object provides the revision of flash bank 1.')
dualdrr2xSubAgentRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xSubAgentRev.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xSubAgentRev.setDescription('This object provides the subagent revision of receiver module.')
dualdrr2xFPGA0FwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xFPGA0FwRev.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xFPGA0FwRev.setDescription('This object provides the Firmware revision of the first DRR FPGA.')
dualdrr2xFPGA1FwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xFPGA1FwRev.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xFPGA1FwRev.setDescription('This object provides the Firmware revision of the second DRR FPGA.')
dualdrr2xDRT1SerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1SerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT1SerialNo.setDescription('This object provides the Serial Number of the DRT attached to channel 1.')
dualdrr2xDRT1SFPSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1SFPSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT1SFPSerialNo.setDescription('This object provides the Serial Number of the SFP in the DRT attached to channel 1.')
dualdrr2xDRT1SFPPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1SFPPartNo.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT1SFPPartNo.setDescription('This object provides the Part number of the SFP in the DRT attached to channel 1.')
dualdrr2xDRT1FwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1FwRev.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT1FwRev.setDescription('This object provides the Firmware revision of the DRT attached to channel 1.')
dualdrr2xDRT1FpgaFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1FpgaFwRev.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT1FpgaFwRev.setDescription('This object provides the Firmware revision of the FPGA in the DRT attached to channel 1.')
dualdrr2xDRT2SerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2SerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT2SerialNo.setDescription('This object provides the Serial Number of the DRT attached to channel 2')
dualdrr2xDRT2SFPSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2SFPSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT2SFPSerialNo.setDescription('This object provides the Serial Number of the SFP in the DRT attached to channel 2')
dualdrr2xDRT2SFPPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2SFPPartNo.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT2SFPPartNo.setDescription('This object provides the Part number of the SFP in the DRT attached to channel 2.')
dualdrr2xDRT2FwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2FwRev.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT2FwRev.setDescription('This object provides the Firmware revision of the DRT attached to channel 2.')
dualdrr2xDRT2FpgaFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2FpgaFwRev.setStatus('mandatory')
if mibBuilder.loadTexts: dualdrr2xDRT2FpgaFwRev.setDescription('This object provides the Firmware revision of the FPGA in the DRT attached to channel 2.')
trapdualdrrConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapdualdrrConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapdualdrr12VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrr12VCurrentAlarm.setDescription('This trap is issued when the 12V power supply Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapdualdrrModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrModuleTempAlarm.setDescription('This trap is issued when the Internal Module Temperature goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapdualdrrFanSpeedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrFanSpeedAlarm.setDescription('This trap is issued when the Fan Speed parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapdualdrrFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrFlashAlarm.setDescription('This trap is issued when the detects an error during Flash memory operations.')
trapdualdrrBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrBankBootAlarm.setDescription('This trap is issued when the module detects an error while booting from bank 0 or bank 1.')
trapdualdrrAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrAlarmDataCRCAlarm.setDescription('This trap is issued when the Alarm Data CRC is incorrect.')
trapdualdrrHardwareErrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrHardwareErrAlarm.setDescription('This trap is issued when hardware is abnormal.')
trapdualdrrOpticalSignal1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrOpticalSignal1Alarm.setDescription('This trap is issued when the optical signal 1 is beyond the preset range.')
trapdualdrrOpticalSignal2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrOpticalSignal2Alarm.setDescription('This trap is issued when the optical signal 2 is beyond the preset range.')
trapdualdrrFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrFactoryDataCRCAlarm.setDescription('This trap is issued when the Factory Data CRC is incorrect.')
trapdualdrrResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrResetFactoryDefaultAlarm.setDescription('This trap is issued when the Factory Default Reset occurs.')
trapdualdrrTripPoint1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrTripPoint1Alarm.setDescription('This trap is issued when the Input 1 optical power is lower than the custumer set trip point and trippoint mode as ALARM_ONLY or SWITCH & ALARM.')
trapdualdrrTripPoint2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrTripPoint2Alarm.setDescription('This trap is issued when the Input 2 optical power is lower than the custumer set trip point and trippoint mode as ALARM_ONLY or SWITCH & ALARM.')
trapdualdrrLink1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrLink1Alarm.setDescription('This trap is issued when receiver 1 is out of SYN with transmitter')
trapdualdrrLink2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrLink2Alarm.setDescription('This trap is issued when receiver 2 is out of SYN with transmitter')
trapdualdrrCalibrationDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrCalibrationDataCRCAlarm.setDescription('This trap is issued when the Calibration Data CRC is incorrect')
trapdualdrrSFP1OptPWRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrSFP1OptPWRAlarm.setDescription("This trap is issued when SFP 1's optical power is incorrect")
trapdualdrrDRT1Cur24VAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrDRT1Cur24VAlarm.setDescription("This trap is issued when DRT 1's 24 volt current is incorrect")
trapdualdrrDRT1ModTempAarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrDRT1ModTempAarm.setDescription("This trap is issued when DRT 1's Module telperature is incorrect")
trapdualdrrSFP2OptPWRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrSFP2OptPWRAlarm.setDescription("This trap is issued when SFP 2's optical power is incorrect")
trapdualdrrDRT2Cur24VAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrDRT2Cur24VAlarm.setDescription("This trap is issued when DRT 2's 24 volt current is incorrect")
trapdualdrrDRT2ModTempAarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdualdrrDRT2ModTempAarm.setDescription("This trap is issued when DRT 2's Module telperature is incorrect")
mibBuilder.exportSymbols("OMNI-gx2dualdrr2x-MIB", dualdrr2xmajorHighRecdOptPwr2=dualdrr2xmajorHighRecdOptPwr2, gx2dualdrr2xDigitalTableIndex=gx2dualdrr2xDigitalTableIndex, trapdualdrrSFP2OptPWRAlarm=trapdualdrrSFP2OptPWRAlarm, dualdrr2xlabelSFP1Status=dualdrr2xlabelSFP1Status, dualdrr2xlabelTx1ModTemp=dualdrr2xlabelTx1ModTemp, dualdrr2xvalueTestpointSelect=dualdrr2xvalueTestpointSelect, dualdrr2xcurrentValueTx1ModTemp=dualdrr2xcurrentValueTx1ModTemp, gx2dualdrr2xDescriptor=gx2dualdrr2xDescriptor, trapdualdrrTripPoint2Alarm=trapdualdrrTripPoint2Alarm, dualdrr2xlabelTx1SFPWave=dualdrr2xlabelTx1SFPWave, trapdualdrrConfigChangeDisplayString=trapdualdrrConfigChangeDisplayString, dualdrr2xminorHighTx024vCurr=dualdrr2xminorHighTx024vCurr, dualdrr2xvalueGainChannel2B=dualdrr2xvalueGainChannel2B, dualdrr2xstateflagTrippoint1Value=dualdrr2xstateflagTrippoint1Value, trapdualdrr12VCurrentAlarm=trapdualdrr12VCurrentAlarm, dualdrr2xminorLowTx1OptPwr=dualdrr2xminorLowTx1OptPwr, dualdrr2xstateFlagTx124Volt=dualdrr2xstateFlagTx124Volt, dualdrr2xcurrentValueModTemp=dualdrr2xcurrentValueModTemp, dualdrr2xminorLowModTemp=dualdrr2xminorLowModTemp, dualdrr2xvalueActChanSelect=dualdrr2xvalueActChanSelect, dualdrr2xlabelFactoryDataCRC=dualdrr2xlabelFactoryDataCRC, dualdrr2xlabelTx124vCurr=dualdrr2xlabelTx124vCurr, trapdualdrrDRT2Cur24VAlarm=trapdualdrrDRT2Cur24VAlarm, dualdrr2xminorHighTx024Volt=dualdrr2xminorHighTx024Volt, dualdrr2xminorHighTx1OptPwr=dualdrr2xminorHighTx1OptPwr, dualdrr2xmaxValueTx024Volt=dualdrr2xmaxValueTx024Volt, dualdrr2xenumTrippoint1Value=dualdrr2xenumTrippoint1Value, dualdrr2xlabelOpFrequency=dualdrr2xlabelOpFrequency, dualdrr2xalarmStateTx024Volt=dualdrr2xalarmStateTx024Volt, dualdrr2xlabelAlarmDataCrc=dualdrr2xlabelAlarmDataCrc, dualdrr2xalarmStateFanSpeed=dualdrr2xalarmStateFanSpeed, dualdrr2xstateFlagTx1ModTemp=dualdrr2xstateFlagTx1ModTemp, dualdrr2xcurrentValueTx0ModTemp=dualdrr2xcurrentValueTx0ModTemp, dualdrr2xalarmStateRecdOptPwr2=dualdrr2xalarmStateRecdOptPwr2, dualdrr2xlabelTx0OptPwr=dualdrr2xlabelTx0OptPwr, dualdrr2xvalueCh2TripPointStatus=dualdrr2xvalueCh2TripPointStatus, dualdrr2xvalueLink1Status=dualdrr2xvalueLink1Status, dualdrr2xuomTx024vCurr=dualdrr2xuomTx024vCurr, dualdrr2xcurrentValueTx1OptPwr=dualdrr2xcurrentValueTx1OptPwr, dualdrr2xcurrentValueTx124Volt=dualdrr2xcurrentValueTx124Volt, dualdrr2xminorLowTx0OptPwr=dualdrr2xminorLowTx0OptPwr, dualdrr2xmajorHighTx124Volt=dualdrr2xmajorHighTx124Volt, dualdrr2xstateFlagFanSpeed=dualdrr2xstateFlagFanSpeed, gx2dualdrr2xFactoryTable=gx2dualdrr2xFactoryTable, dualdrr2xvalueFactoryDataCRC=dualdrr2xvalueFactoryDataCRC, dualdrr2xmajorHighTx1SFPWave=dualdrr2xmajorHighTx1SFPWave, dualdrr2xvalueTrippoint1Mode=dualdrr2xvalueTrippoint1Mode, dualdrr2xflashPrgCntA=dualdrr2xflashPrgCntA, dualdrr2xlabelTx0SFPWave=dualdrr2xlabelTx0SFPWave, trapdualdrrAlarmDataCRCAlarm=trapdualdrrAlarmDataCRCAlarm, dualdrr2xuomFanSpeed=dualdrr2xuomFanSpeed, dualdrr2xstateflagLink1Status=dualdrr2xstateflagLink1Status, dualdrr2xlabelTrippoint1Value=dualdrr2xlabelTrippoint1Value, dualdrr2xlabelGainChannel2B=dualdrr2xlabelGainChannel2B, dualdrr2xvalueFactoryDefaultReset=dualdrr2xvalueFactoryDefaultReset, dualdrr2xminValueRecdOptPwr1=dualdrr2xminValueRecdOptPwr1, dualdrr2xuomTx024Volt=dualdrr2xuomTx024Volt, dualdrr2xmaxValueTx124vCurr=dualdrr2xmaxValueTx124vCurr, dualdrr2xFPGA1FwRev=dualdrr2xFPGA1FwRev, dualdrr2xlabelTrippoint1Mode=dualdrr2xlabelTrippoint1Mode, dualdrr2xcurrentValueTx024vCurr=dualdrr2xcurrentValueTx024vCurr, dualdrr2xuomModTemp=dualdrr2xuomModTemp, dualdrr2xcurrentValueRecdOptPwr2=dualdrr2xcurrentValueRecdOptPwr2, dualdrr2xvalueOpFrequency=dualdrr2xvalueOpFrequency, trapdualdrrFlashAlarm=trapdualdrrFlashAlarm, dualdrr2xDRT2FpgaFwRev=dualdrr2xDRT2FpgaFwRev, dualdrr2xbootStatusByte=dualdrr2xbootStatusByte, dualdrr2xmajorHighRecdOptPwr1=dualdrr2xmajorHighRecdOptPwr1, dualdrr2xminorHighTx1SFPWave=dualdrr2xminorHighTx1SFPWave, dualdrr2xcalculateCRC=dualdrr2xcalculateCRC, dualdrr2xminorLow12VCurrent=dualdrr2xminorLow12VCurrent, dualdrr2xcurrentValueTx0SFPWave=dualdrr2xcurrentValueTx0SFPWave, gx2dualdrr2xAnalogTableIndex=gx2dualdrr2xAnalogTableIndex, dualdrr2xprgEEPROMByte=dualdrr2xprgEEPROMByte, dualdrr2xmajorLowTx024vCurr=dualdrr2xmajorLowTx024vCurr, dualdrr2xenumTrippoint2Mode=dualdrr2xenumTrippoint2Mode, dualdrr2xminorLowTx024Volt=dualdrr2xminorLowTx024Volt, dualdrr2xalarmStateModTemp=dualdrr2xalarmStateModTemp, dualdrr2xalarmStateTx024vCurr=dualdrr2xalarmStateTx024vCurr, dualdrr2xmaxValueTx024vCurr=dualdrr2xmaxValueTx024vCurr, dualdrr2xmaxValueRecdOptPwr1=dualdrr2xmaxValueRecdOptPwr1, dualdrr2xcurrentValueRecdOptPwr1=dualdrr2xcurrentValueRecdOptPwr1, dualdrr2xminorLowTx1SFPWave=dualdrr2xminorLowTx1SFPWave, dualdrr2xvalueTrippoint2Value=dualdrr2xvalueTrippoint2Value, dualdrr2xhourMeter=dualdrr2xhourMeter, dualdrr2xfactoryCRC=dualdrr2xfactoryCRC, dualdrr2xstateFlagTx0OptPwr=dualdrr2xstateFlagTx0OptPwr, Float=Float, gx2dualdrr2xFactoryEntry=gx2dualdrr2xFactoryEntry, dualdrr2xlabelTx024vCurr=dualdrr2xlabelTx024vCurr, dualdrr2xlabelFactoryDefaultReset=dualdrr2xlabelFactoryDefaultReset, dualdrr2xlabelCalibrationDataCrc=dualdrr2xlabelCalibrationDataCrc, dualdrr2xuomTx124vCurr=dualdrr2xuomTx124vCurr, dualdrr2xlabelLink2Status=dualdrr2xlabelLink2Status, dualdrr2xvalueDRT2Status=dualdrr2xvalueDRT2Status, dualdrr2xuomTx0OptPwr=dualdrr2xuomTx0OptPwr, dualdrr2xstateflagSFP1Status=dualdrr2xstateflagSFP1Status, dualdrr2xalarmStateTx1SFPWave=dualdrr2xalarmStateTx1SFPWave, dualdrr2xvalueGainChannel1A=dualdrr2xvalueGainChannel1A, dualdrr2xminorHighTx0SFPWave=dualdrr2xminorHighTx0SFPWave, dualdrr2xDRT2SFPSerialNo=dualdrr2xDRT2SFPSerialNo, dualdrr2xmajorLowTx0ModTemp=dualdrr2xmajorLowTx0ModTemp, dualdrr2xminValueTx124vCurr=dualdrr2xminValueTx124vCurr, dualdrr2xmaxValueTx1ModTemp=dualdrr2xmaxValueTx1ModTemp, dualdrr2xstateFlagTx0SFPWave=dualdrr2xstateFlagTx0SFPWave, dualdrr2xstateFlagTx0ModTemp=dualdrr2xstateFlagTx0ModTemp, dualdrr2xenumTestpointSelect=dualdrr2xenumTestpointSelect, dualdrr2xlabelTrippoint2Value=dualdrr2xlabelTrippoint2Value, dualdrr2xalarmStateTx1ModTemp=dualdrr2xalarmStateTx1ModTemp, dualdrr2xstateflagBoot=dualdrr2xstateflagBoot, trapdualdrrOpticalSignal1Alarm=trapdualdrrOpticalSignal1Alarm, dualdrr2xcurrentValueTx124vCurr=dualdrr2xcurrentValueTx124vCurr, dualdrr2xstateFlagTx024Volt=dualdrr2xstateFlagTx024Volt, dualdrr2xalarmStateRecdOptPwr1=dualdrr2xalarmStateRecdOptPwr1, dualdrr2xminValueRecdOptPwr2=dualdrr2xminValueRecdOptPwr2, dualdrr2xDRT2SFPPartNo=dualdrr2xDRT2SFPPartNo, dualdrr2xmaxValueTx1OptPwr=dualdrr2xmaxValueTx1OptPwr, dualdrr2xvalueAlarmDataCrc=dualdrr2xvalueAlarmDataCrc, dualdrr2xminorHighFanSpeed=dualdrr2xminorHighFanSpeed, dualdrr2xstateflagAlarmDataCrc=dualdrr2xstateflagAlarmDataCrc, dualdrr2xvalueTrippoint2Mode=dualdrr2xvalueTrippoint2Mode, dualdrr2xminorLowFanSpeed=dualdrr2xminorLowFanSpeed, trapdualdrrCalibrationDataCRCAlarm=trapdualdrrCalibrationDataCRCAlarm, dualdrr2xDRT1FpgaFwRev=dualdrr2xDRT1FpgaFwRev, dualdrr2xminValueTx0SFPWave=dualdrr2xminValueTx0SFPWave, dualdrr2xmajorHighTx0ModTemp=dualdrr2xmajorHighTx0ModTemp, dualdrr2xmajorLowTx124vCurr=dualdrr2xmajorLowTx124vCurr, dualdrr2xcurrentValueTx1SFPWave=dualdrr2xcurrentValueTx1SFPWave, dualdrr2xenumTrippoint2Value=dualdrr2xenumTrippoint2Value, dualdrr2xmajorLowTx1SFPWave=dualdrr2xmajorLowTx1SFPWave, dualdrr2xcurrentValue12VCurrent=dualdrr2xcurrentValue12VCurrent, dualdrr2xminValueTx1ModTemp=dualdrr2xminValueTx1ModTemp, dualdrr2xenumGainChannel2A=dualdrr2xenumGainChannel2A, dualdrr2xlabelTx024Volt=dualdrr2xlabelTx024Volt, dualdrr2xlabelActChanSelect=dualdrr2xlabelActChanSelect, dualdrr2xstateflagActChanSelect=dualdrr2xstateflagActChanSelect, dualdrr2xminValueTx1SFPWave=dualdrr2xminValueTx1SFPWave, dualdrr2xlabelDRT1Status=dualdrr2xlabelDRT1Status, dualdrr2xalarmStateTx1OptPwr=dualdrr2xalarmStateTx1OptPwr, dualdrr2xvalueGainChannel1B=dualdrr2xvalueGainChannel1B, trapdualdrrDRT2ModTempAarm=trapdualdrrDRT2ModTempAarm, dualdrr2xstateFlagModTemp=dualdrr2xstateFlagModTemp, dualdrr2xenumGainChannel1A=dualdrr2xenumGainChannel1A, dualdrr2xmaxValue12VCurrent=dualdrr2xmaxValue12VCurrent, dualdrr2xminValueTx1OptPwr=dualdrr2xminValueTx1OptPwr, dualdrr2xlabelSFP0Status=dualdrr2xlabelSFP0Status, dualdrr2xstateflagLink2Status=dualdrr2xstateflagLink2Status, dualdrr2xlabelDRT2Status=dualdrr2xlabelDRT2Status, gx2dualdrr2xDigitalEntry=gx2dualdrr2xDigitalEntry, dualdrr2xuomRecdOptPwr2=dualdrr2xuomRecdOptPwr2, dualdrr2xmaxValueTx0SFPWave=dualdrr2xmaxValueTx0SFPWave, dualdrr2xlabelCh1TripPointStatus=dualdrr2xlabelCh1TripPointStatus, dualdrr2xlabelTx1OptPwr=dualdrr2xlabelTx1OptPwr, dualdrr2xalarmState12VCurrent=dualdrr2xalarmState12VCurrent, dualdrr2xDRT1FwRev=dualdrr2xDRT1FwRev, dualdrr2xmajorLowRecdOptPwr1=dualdrr2xmajorLowRecdOptPwr1, dualdrr2xstateflagCalibrationDataCrc=dualdrr2xstateflagCalibrationDataCrc, dualdrr2xuomTx0SFPWave=dualdrr2xuomTx0SFPWave, dualdrr2xstateflagSFP0Status=dualdrr2xstateflagSFP0Status, dualdrr2xlabelTx124Volt=dualdrr2xlabelTx124Volt, gx2dualdrr2xStatusEntry=gx2dualdrr2xStatusEntry, dualdrr2xalarmStateTx124Volt=dualdrr2xalarmStateTx124Volt, dualdrr2xvalueTrippoint1Value=dualdrr2xvalueTrippoint1Value, dualdrr2xmajorHighTx1OptPwr=dualdrr2xmajorHighTx1OptPwr, dualdrr2xminorHighTx124Volt=dualdrr2xminorHighTx124Volt, dualdrr2xstateflagHardwareStatus=dualdrr2xstateflagHardwareStatus, dualdrr2xenumGainChannel1B=dualdrr2xenumGainChannel1B, trapdualdrrLink1Alarm=trapdualdrrLink1Alarm, dualdrr2xalarmStateTx0ModTemp=dualdrr2xalarmStateTx0ModTemp, dualdrr2xstateflagGainChannel2A=dualdrr2xstateflagGainChannel2A, dualdrr2xminValueTx124Volt=dualdrr2xminValueTx124Volt, dualdrr2xlabelFanSpeed=dualdrr2xlabelFanSpeed, dualdrr2xlabelGainChannel2A=dualdrr2xlabelGainChannel2A, gx2dualdrr2xStatusTable=gx2dualdrr2xStatusTable, dualdrr2xmajorHighFanSpeed=dualdrr2xmajorHighFanSpeed, dualdrr2xDRT1SFPSerialNo=dualdrr2xDRT1SFPSerialNo, dualdrr2xstateFlagTx1SFPWave=dualdrr2xstateFlagTx1SFPWave, dualdrr2xenumActChanSelect=dualdrr2xenumActChanSelect, dualdrr2xuomTx1OptPwr=dualdrr2xuomTx1OptPwr, dualdrr2xlabelCh2TripPointStatus=dualdrr2xlabelCh2TripPointStatus, dualdrr2xminorLowRecdOptPwr1=dualdrr2xminorLowRecdOptPwr1, dualdrr2xlabelModTemp=dualdrr2xlabelModTemp, dualdrr2xvalueDRT1Status=dualdrr2xvalueDRT1Status, dualdrr2xminorLowTx1ModTemp=dualdrr2xminorLowTx1ModTemp, dualdrr2xmaxValueRecdOptPwr2=dualdrr2xmaxValueRecdOptPwr2, dualdrr2xminorLowTx0ModTemp=dualdrr2xminorLowTx0ModTemp, dualdrr2xminorHighTx124vCurr=dualdrr2xminorHighTx124vCurr, trapdualdrrDRT1Cur24VAlarm=trapdualdrrDRT1Cur24VAlarm, dualdrr2xmajorHighTx124vCurr=dualdrr2xmajorHighTx124vCurr, dualdrr2xmaxValueTx1SFPWave=dualdrr2xmaxValueTx1SFPWave, dualdrr2xenumTrippoint1Mode=dualdrr2xenumTrippoint1Mode, dualdrr2xminorHighModTemp=dualdrr2xminorHighModTemp, dualdrr2xenumGainChannel2B=dualdrr2xenumGainChannel2B, dualdrr2xminorLowTx124Volt=dualdrr2xminorLowTx124Volt, dualdrr2xvalueLink2Status=dualdrr2xvalueLink2Status, dualdrr2xlabelRecdOptPwr2=dualdrr2xlabelRecdOptPwr2, dualdrr2xmajorLowTx124Volt=dualdrr2xmajorLowTx124Volt, dualdrr2xmajorHighTx024vCurr=dualdrr2xmajorHighTx024vCurr, dualdrr2xmaxValueModTemp=dualdrr2xmaxValueModTemp, dualdrr2xlabelGainChannel1B=dualdrr2xlabelGainChannel1B, trapdualdrrBankBootAlarm=trapdualdrrBankBootAlarm, dualdrr2xmajorLowTx0SFPWave=dualdrr2xmajorLowTx0SFPWave, dualdrr2xalarmStateTx0OptPwr=dualdrr2xalarmStateTx0OptPwr, dualdrr2xalarmStateTx124vCurr=dualdrr2xalarmStateTx124vCurr, dualdrr2xlabelTestpointSelect=dualdrr2xlabelTestpointSelect, gx2dualdrr2xFactoryTableIndex=gx2dualdrr2xFactoryTableIndex, dualdrr2xDRT2FwRev=dualdrr2xDRT2FwRev, dualdrr2xvalueFlash=dualdrr2xvalueFlash, dualdrr2xuomTx1SFPWave=dualdrr2xuomTx1SFPWave, dualdrr2xstateflagGainChannel1A=dualdrr2xstateflagGainChannel1A, dualdrr2xmajorHighTx024Volt=dualdrr2xmajorHighTx024Volt, dualdrr2xminorHighTx1ModTemp=dualdrr2xminorHighTx1ModTemp, dualdrr2xcurrentValueTx024Volt=dualdrr2xcurrentValueTx024Volt, dualdrr2xminValueFanSpeed=dualdrr2xminValueFanSpeed, dualdrr2xalarmStateTx0SFPWave=dualdrr2xalarmStateTx0SFPWave, dualdrr2xlabelFlash=dualdrr2xlabelFlash, gx2dualdrr2xAnalogTable=gx2dualdrr2xAnalogTable, dualdrr2xvalueSFP0Status=dualdrr2xvalueSFP0Status, dualdrr2xstateflagFactoryDataCRC=dualdrr2xstateflagFactoryDataCRC, trapdualdrrOpticalSignal2Alarm=trapdualdrrOpticalSignal2Alarm, dualdrr2xstateflagGainChannel2B=dualdrr2xstateflagGainChannel2B, trapdualdrrLink2Alarm=trapdualdrrLink2Alarm, trapdualdrrFanSpeedAlarm=trapdualdrrFanSpeedAlarm, dualdrr2xstateFlagTx1OptPwr=dualdrr2xstateFlagTx1OptPwr, dualdrr2xmajorHighTx0SFPWave=dualdrr2xmajorHighTx0SFPWave, dualdrr2xstateFlagRecdOptPwr2=dualdrr2xstateFlagRecdOptPwr2, dualdrr2xuomTx124Volt=dualdrr2xuomTx124Volt, dualdrr2xlabelRecdOptPwr1=dualdrr2xlabelRecdOptPwr1, dualdrr2xminorHighTx0OptPwr=dualdrr2xminorHighTx0OptPwr, dualdrr2xbank2CRC=dualdrr2xbank2CRC, dualdrr2xminorHighTx0ModTemp=dualdrr2xminorHighTx0ModTemp, dualdrr2xstateflagTrippoint2Value=dualdrr2xstateflagTrippoint2Value, dualdrr2xlabelLink1Status=dualdrr2xlabelLink1Status, dualdrr2xvalueCh1TripPointStatus=dualdrr2xvalueCh1TripPointStatus, dualdrr2xmajorLowTx0OptPwr=dualdrr2xmajorLowTx0OptPwr, trapdualdrrModuleTempAlarm=trapdualdrrModuleTempAlarm, dualdrr2xFPGA0FwRev=dualdrr2xFPGA0FwRev, dualdrr2xstateflagDRT2Status=dualdrr2xstateflagDRT2Status, dualdrr2xmajorLowTx1ModTemp=dualdrr2xmajorLowTx1ModTemp, gx2dualdrr2xAnalogEntry=gx2dualdrr2xAnalogEntry, dualdrr2xflashBankARev=dualdrr2xflashBankARev, trapdualdrrResetFactoryDefaultAlarm=trapdualdrrResetFactoryDefaultAlarm, dualdrr2xenumFactoryDefaultReset=dualdrr2xenumFactoryDefaultReset, dualdrr2xmajorLowModTemp=dualdrr2xmajorLowModTemp, dualdrr2xflashPrgCntB=dualdrr2xflashPrgCntB, dualdrr2xstateFlag12VCurrent=dualdrr2xstateFlag12VCurrent, dualdrr2xminValueTx0OptPwr=dualdrr2xminValueTx0OptPwr, trapdualdrrHardwareErrAlarm=trapdualdrrHardwareErrAlarm, dualdrr2xbank1CRC=dualdrr2xbank1CRC, dualdrr2xstateflagFlash=dualdrr2xstateflagFlash, dualdrr2xDRT1SerialNo=dualdrr2xDRT1SerialNo, dualdrr2xstateflagFactoryDefaultReset=dualdrr2xstateflagFactoryDefaultReset, dualdrr2xvalueBoot=dualdrr2xvalueBoot, dualdrr2xvalueCalibrationDataCrc=dualdrr2xvalueCalibrationDataCrc)
mibBuilder.exportSymbols("OMNI-gx2dualdrr2x-MIB", dualdrr2xvalueSFP1Status=dualdrr2xvalueSFP1Status, dualdrr2xminorLowRecdOptPwr2=dualdrr2xminorLowRecdOptPwr2, dualdrr2xmajorHigh12VCurrent=dualdrr2xmajorHigh12VCurrent, dualdrr2xuomTx1ModTemp=dualdrr2xuomTx1ModTemp, dualdrr2xstateflagTrippoint2Mode=dualdrr2xstateflagTrippoint2Mode, dualdrr2xminorHigh12VCurrent=dualdrr2xminorHigh12VCurrent, dualdrr2xminorHighRecdOptPwr2=dualdrr2xminorHighRecdOptPwr2, dualdrr2xstateFlagTx124vCurr=dualdrr2xstateFlagTx124vCurr, dualdrr2xlabelHardwareStatus=dualdrr2xlabelHardwareStatus, dualdrr2xvalueGainChannel2A=dualdrr2xvalueGainChannel2A, dualdrr2xstateflagCh2TripPointStatus=dualdrr2xstateflagCh2TripPointStatus, dualdrr2xminorHighRecdOptPwr1=dualdrr2xminorHighRecdOptPwr1, dualdrr2xuom12VCurrent=dualdrr2xuom12VCurrent, dualdrr2xminValue12VCurrent=dualdrr2xminValue12VCurrent, dualdrr2xminValueTx024vCurr=dualdrr2xminValueTx024vCurr, dualdrr2xstateflagDRT1Status=dualdrr2xstateflagDRT1Status, dualdrr2xmajorLowRecdOptPwr2=dualdrr2xmajorLowRecdOptPwr2, gx2dualdrr2xStatusTableIndex=gx2dualdrr2xStatusTableIndex, dualdrr2xmajorLow12VCurrent=dualdrr2xmajorLow12VCurrent, dualdrr2xlabelTrippoint2Mode=dualdrr2xlabelTrippoint2Mode, dualdrr2xminValueTx0ModTemp=dualdrr2xminValueTx0ModTemp, dualdrr2xflashBankBRev=dualdrr2xflashBankBRev, dualdrr2xminValueTx024Volt=dualdrr2xminValueTx024Volt, dualdrr2xmajorLowFanSpeed=dualdrr2xmajorLowFanSpeed, dualdrr2xstateflagOpFrequency=dualdrr2xstateflagOpFrequency, dualdrr2xmaxValueTx0ModTemp=dualdrr2xmaxValueTx0ModTemp, trapdualdrrTripPoint1Alarm=trapdualdrrTripPoint1Alarm, dualdrr2xstateFlagRecdOptPwr1=dualdrr2xstateFlagRecdOptPwr1, dualdrr2xmaxValueTx124Volt=dualdrr2xmaxValueTx124Volt, dualdrr2xmajorHighModTemp=dualdrr2xmajorHighModTemp, dualdrr2xminorLowTx124vCurr=dualdrr2xminorLowTx124vCurr, dualdrr2xvalueHardwareStatus=dualdrr2xvalueHardwareStatus, dualdrr2xstateflagGainChannel1B=dualdrr2xstateflagGainChannel1B, dualdrr2xlabel12VCurrent=dualdrr2xlabel12VCurrent, dualdrr2xbootControlByte=dualdrr2xbootControlByte, dualdrr2xSubAgentRev=dualdrr2xSubAgentRev, trapdualdrrFactoryDataCRCAlarm=trapdualdrrFactoryDataCRCAlarm, dualdrr2xminorLowTx0SFPWave=dualdrr2xminorLowTx0SFPWave, dualdrr2xmajorLowTx024Volt=dualdrr2xmajorLowTx024Volt, dualdrr2xstateflagTrippoint1Mode=dualdrr2xstateflagTrippoint1Mode, gx2dualdrr2xDigitalTable=gx2dualdrr2xDigitalTable, trapdualdrrSFP1OptPWRAlarm=trapdualdrrSFP1OptPWRAlarm, trapdualdrrConfigChangeInteger=trapdualdrrConfigChangeInteger, dualdrr2xenumOpFrequency=dualdrr2xenumOpFrequency, dualdrr2xstateflagTestpointSelect=dualdrr2xstateflagTestpointSelect, dualdrr2xmaxValueFanSpeed=dualdrr2xmaxValueFanSpeed, dualdrr2xstateFlagTx024vCurr=dualdrr2xstateFlagTx024vCurr, dualdrr2xDRT1SFPPartNo=dualdrr2xDRT1SFPPartNo, dualdrr2xcurrentValueFanSpeed=dualdrr2xcurrentValueFanSpeed, dualdrr2xuomRecdOptPwr1=dualdrr2xuomRecdOptPwr1, dualdrr2xmajorLowTx1OptPwr=dualdrr2xmajorLowTx1OptPwr, dualdrr2xlabelTx0ModTemp=dualdrr2xlabelTx0ModTemp, dualdrr2xminorLowTx024vCurr=dualdrr2xminorLowTx024vCurr, dualdrr2xuomTx0ModTemp=dualdrr2xuomTx0ModTemp, dualdrr2xmajorHighTx1ModTemp=dualdrr2xmajorHighTx1ModTemp, dualdrr2xlabelBoot=dualdrr2xlabelBoot, dualdrr2xmajorHighTx0OptPwr=dualdrr2xmajorHighTx0OptPwr, dualdrr2xDRT2SerialNo=dualdrr2xDRT2SerialNo, trapdualdrrDRT1ModTempAarm=trapdualdrrDRT1ModTempAarm, dualdrr2xmaxValueTx0OptPwr=dualdrr2xmaxValueTx0OptPwr, dualdrr2xminValueModTemp=dualdrr2xminValueModTemp, dualdrr2xcurrentValueTx0OptPwr=dualdrr2xcurrentValueTx0OptPwr, dualdrr2xstateflagCh1TripPointStatus=dualdrr2xstateflagCh1TripPointStatus, dualdrr2xlabelGainChannel1A=dualdrr2xlabelGainChannel1A)
