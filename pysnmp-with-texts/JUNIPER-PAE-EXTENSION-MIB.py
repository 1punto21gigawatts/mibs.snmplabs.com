#
# PySNMP MIB module JUNIPER-PAE-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-PAE-EXTENSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
jnxExPaeExtension, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExPaeExtension")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, Integer32, ObjectIdentity, TimeTicks, Bits, IpAddress, MibIdentifier, iso, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "Integer32", "ObjectIdentity", "TimeTicks", "Bits", "IpAddress", "MibIdentifier", "iso", "Counter32", "Unsigned32")
TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
jnxPaeExtensionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1))
if mibBuilder.loadTexts: jnxPaeExtensionMIB.setLastUpdated('200706071000Z')
if mibBuilder.loadTexts: jnxPaeExtensionMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxPaeExtensionMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxPaeExtensionMIB.setDescription("This is Juniper Networks' implementation of enterprise specific MIB for IEEE802.1x PAE Extension MIB. This MIB Module supports Static MAC Authetication.")
jnxPaeExtensionMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 0))
jnxPaeExtensionMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1))
jnxAuthProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAuthProfileName.setStatus('current')
if mibBuilder.loadTexts: jnxAuthProfileName.setDescription('The Authentication Profile Name is given by this object. The access profile with this name is already defined with the radius server ip address, port and secret key.')
jnxPaeAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: jnxPaeAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigTable.setDescription('A table that contains the configuration objects for the Authenticator PAE associated with each port.')
jnxPaeAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: jnxPaeAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigEntry.setDescription('An Entry appears in the table for each PAE Authenticator Port.')
jnxPaeAuthConfigMacAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMacAuthStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigMacAuthStatus.setDescription('This object specifies whether MAC Authentication is enabled on the specified PAE port.')
jnxPaeAuthConfigGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigGuestVlan.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigGuestVlan.setDescription('This object specifies the Vlan to which the unauthenticated client moves to. The Vlan should exist on the switch and is user cofigurable per port.')
jnxPaeAuthConfigNumberRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigNumberRetries.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigNumberRetries.setDescription('This sets the number of failed authentications on an interface before invoking the quiet period, during which no one can be authenticated on that interface.')
jnxPaeAuthConfigSupplicantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single", 1), ("single-secure", 2), ("multiple", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigSupplicantMode.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigSupplicantMode.setDescription('This object specifies the supplicant mode of MAC Authentication enabled on the specified PAE port.')
jnxPaeAuthConfigMacRadius = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMacRadius.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigMacRadius.setDescription('This object specifies the Mac-Radius mode of MAC Authentication enabled on the specified PAE port.')
jnxPaeAuthConfigMacRadiusRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMacRadiusRestrict.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigMacRadiusRestrict.setDescription('This object specifies the Mac-Radius mode of MAC Authentication enabled on the specified PAE port.')
jnxPaeAuthConfigReAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigReAuthenticate.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigReAuthenticate.setDescription('This object specifies Re-Authentication is enabled or not on the specified PAE port.')
jnxPaeAuthConfigQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigQuietPeriod.setDescription('This object specifies Time to wait after an authentication failure on the specified PAE port.')
jnxPaeAuthConfigMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigMaxRequests.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigMaxRequests.setDescription('This object specifies Number of EAPOL RequestIDs to send before timing out on the specified PAE port.')
jnxPaeAuthConfigClientsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigClientsRejected.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigClientsRejected.setDescription('This object specifies VLAN name or 802.1q tag for authentication rejected clients on the specified PAE port.')
jnxPaeAuthConfigServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigServerTimeout.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigServerTimeout.setDescription('This object specifies Authentication server timeout interval on the specified PAE port.')
jnxPaeAuthConfigSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigSuppTimeout.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigSuppTimeout.setDescription('This object specifies Time to wait for a client response on the specified PAE port.')
jnxPaeAuthConfigTransmitPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPaeAuthConfigTransmitPeriod.setStatus('current')
if mibBuilder.loadTexts: jnxPaeAuthConfigTransmitPeriod.setDescription('This object specifies Interval before retransmitting initial EAPOL PDUs on the specified PAE port.')
jnxStaticMacAuthBypassTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3), )
if mibBuilder.loadTexts: jnxStaticMacAuthBypassTable.setStatus('current')
if mibBuilder.loadTexts: jnxStaticMacAuthBypassTable.setDescription('The static MAC list provides an authentication bypass mechanism for clients connected to a port. The MAC address of the clients is first checked in a local database which is a user specified static list of MAC addresses and if a match is found, the client is assumed to be successfully authenticated and the port is opened up for it. No further authentication is done for that client. The VLAN that the client should be moved to or the interfaces on which the MAC address should be allowed from can also be optionally stored in this table. This will enable devices like printers, which do not support 802.1X, to be connected on 802.1X enabled ports. If a match is not found in the static list, 802.1X or MAC authentication is initiated. This table contains the static list of MAC addresses specified by the user.')
jnxStaticMacAuthBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-PAE-EXTENSION-MIB", "jnxStaticMacAddress"))
if mibBuilder.loadTexts: jnxStaticMacAuthBypassEntry.setStatus('current')
if mibBuilder.loadTexts: jnxStaticMacAuthBypassEntry.setDescription('A table entry specifies the MacAddress of the client and the Vlan the client is to be moved.')
jnxStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: jnxStaticMacAddress.setStatus('current')
if mibBuilder.loadTexts: jnxStaticMacAddress.setDescription('This object specifies the MAC Address of the client connected to the particular PAE port.')
jnxStaticMacVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxStaticMacVlanName.setStatus('current')
if mibBuilder.loadTexts: jnxStaticMacVlanName.setDescription('This object specifies the Vlan to which the client is assigned to.')
jnxStaticMacAuthBypassIfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: jnxStaticMacAuthBypassIfTable.setStatus('current')
if mibBuilder.loadTexts: jnxStaticMacAuthBypassIfTable.setDescription('This table provides the list of interfaces on which each MAC Address in the jnxStaticMacAuthBypassTable can be allowed from. If it is detected on any other interface, the authentication is not bypassed.')
jnxStaticMacAuthBypassIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-PAE-EXTENSION-MIB", "jnxStaticMacAddress"), (0, "JUNIPER-PAE-EXTENSION-MIB", "jnxStaticMacIfIndex"))
if mibBuilder.loadTexts: jnxStaticMacAuthBypassIfEntry.setStatus('current')
if mibBuilder.loadTexts: jnxStaticMacAuthBypassIfEntry.setDescription('For each MAC Address in the jnxStaticMacAuthBypassTable an entry is present in this table.It specifies the list of interfaces from which the specified MAC Address is allowed from.')
jnxStaticMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 3, 1, 1, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxStaticMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxStaticMacIfIndex.setDescription('This object specifies the list of interfaces from which the MAC Address is allowed from. If it is detected on any other interface, the authentication is bypassed.')
mibBuilder.exportSymbols("JUNIPER-PAE-EXTENSION-MIB", jnxPaeAuthConfigTransmitPeriod=jnxPaeAuthConfigTransmitPeriod, jnxStaticMacVlanName=jnxStaticMacVlanName, PYSNMP_MODULE_ID=jnxPaeExtensionMIB, jnxPaeAuthConfigMacRadiusRestrict=jnxPaeAuthConfigMacRadiusRestrict, jnxStaticMacAuthBypassIfEntry=jnxStaticMacAuthBypassIfEntry, jnxPaeAuthConfigMacAuthStatus=jnxPaeAuthConfigMacAuthStatus, jnxPaeAuthConfigTable=jnxPaeAuthConfigTable, jnxPaeAuthConfigNumberRetries=jnxPaeAuthConfigNumberRetries, jnxPaeExtensionMIBNotification=jnxPaeExtensionMIBNotification, jnxPaeAuthConfigServerTimeout=jnxPaeAuthConfigServerTimeout, jnxPaeAuthConfigSuppTimeout=jnxPaeAuthConfigSuppTimeout, jnxPaeAuthConfigEntry=jnxPaeAuthConfigEntry, jnxAuthProfileName=jnxAuthProfileName, jnxStaticMacAuthBypassTable=jnxStaticMacAuthBypassTable, jnxStaticMacAuthBypassEntry=jnxStaticMacAuthBypassEntry, jnxPaeAuthConfigReAuthenticate=jnxPaeAuthConfigReAuthenticate, jnxPaeAuthConfigMacRadius=jnxPaeAuthConfigMacRadius, jnxPaeAuthConfigMaxRequests=jnxPaeAuthConfigMaxRequests, jnxStaticMacAuthBypassIfTable=jnxStaticMacAuthBypassIfTable, jnxStaticMacAddress=jnxStaticMacAddress, jnxPaeAuthConfigSupplicantMode=jnxPaeAuthConfigSupplicantMode, jnxStaticMacIfIndex=jnxStaticMacIfIndex, jnxPaeAuthConfigGuestVlan=jnxPaeAuthConfigGuestVlan, jnxPaeExtensionMIB=jnxPaeExtensionMIB, jnxPaeExtensionMIBObjects=jnxPaeExtensionMIBObjects, jnxPaeAuthConfigQuietPeriod=jnxPaeAuthConfigQuietPeriod, jnxPaeAuthConfigClientsRejected=jnxPaeAuthConfigClientsRejected)
