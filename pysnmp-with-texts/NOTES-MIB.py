#
# PySNMP MIB module NOTES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOTES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:24:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, enterprises, NotificationType, Counter64, Gauge32, ModuleIdentity, iso, Unsigned32, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "enterprises", "NotificationType", "Counter64", "Gauge32", "ModuleIdentity", "iso", "Unsigned32", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lotus = MibIdentifier((1, 3, 6, 1, 4, 1, 334))
notes = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72))
notesPump = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 73))
lnInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1))
lnControl = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 2))
lnInterceptor = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 3))
lnUnix = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 4))
mapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 100))
lnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1))
lnMail = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4))
lnReplica = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5))
lnServer = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6))
lnComm = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7))
lnDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8))
lnMem = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9))
lnDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10))
lnAgentMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11))
lnMTA = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12))
lnWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13))
lnObject = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14))
lnDomino = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15))
lnCalendar = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16))
lnCollector = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 17))
lnServerTask = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1))
lnServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2))
lnServerStats = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3))
lnCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4))
lnOpenRedirects = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8))
lnOpenRequest = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 9))
lnClusterTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10))
lnReplicaCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6))
lnMainProxyAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 100, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMainProxyAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lnMainProxyAgentVersion.setDescription('Information relevant to the Lotus Main SNMP Proxy Agent')
lnAllStatsTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 1), )
if mibBuilder.loadTexts: lnAllStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lnAllStatsTable.setDescription('A table containing a one statistic per entry view of the entire Notes server statistics structure.')
lnAllStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 1, 1), ).setIndexNames((0, "NOTES-MIB", "lnStatisticIndex"))
if mibBuilder.loadTexts: lnAllStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnAllStatsEntry.setDescription('The entry type definition for the lnAllStatsTable.')
lnStatisticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnStatisticIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lnStatisticIndex.setDescription('A unique value for each statistic in the Notes server statistics structure.')
lnStatisticString = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnStatisticString.setStatus('mandatory')
if mibBuilder.loadTexts: lnStatisticString.setDescription('A string describing one statistic from the Notes Server statistics structure.')
lnStatsStartTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnStatsStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: lnStatsStartTime.setDescription('Time and date at which the statistics agent was last started. Represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnStatsCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnStatsCurrentTime.setStatus('mandatory')
if mibBuilder.loadTexts: lnStatsCurrentTime.setDescription('Time and date of the last statistics update. Represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnDeadMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDeadMail.setStatus('optional')
if mibBuilder.loadTexts: lnDeadMail.setDescription('Number of dead (undeliverable) mail messages.')
lnDeliveredMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDeliveredMail.setStatus('optional')
if mibBuilder.loadTexts: lnDeliveredMail.setDescription('Number of messges received by router.')
lnTotalMailFailures = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTotalMailFailures.setStatus('optional')
if mibBuilder.loadTexts: lnTotalMailFailures.setDescription('Total number of routing failures since the server started.')
lnTotalRoutedMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTotalRoutedMail.setStatus('optional')
if mibBuilder.loadTexts: lnTotalRoutedMail.setDescription('Total number of mail messages routed since the server started.')
lnTransferredMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTransferredMail.setStatus('optional')
if mibBuilder.loadTexts: lnTransferredMail.setDescription('Number of messages router attempted to transfer.')
lnWaitingMail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWaitingMail.setStatus('optional')
if mibBuilder.loadTexts: lnWaitingMail.setDescription('Number of mail messages waiting to be routed.')
lnNumWaitingRecipients = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNumWaitingRecipients.setStatus('optional')
if mibBuilder.loadTexts: lnNumWaitingRecipients.setDescription('Number of pending mail messages awaiting local delivery.')
lnMailDomain = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMailDomain.setStatus('optional')
if mibBuilder.loadTexts: lnMailDomain.setDescription("Notes server's mail domain.")
lnAverageMailDeliverTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnAverageMailDeliverTime.setStatus('optional')
if mibBuilder.loadTexts: lnAverageMailDeliverTime.setDescription('Average time for mail delivery in seconds.')
lnAverageMailServerHops = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnAverageMailServerHops.setStatus('optional')
if mibBuilder.loadTexts: lnAverageMailServerHops.setDescription('Average number of server hops for mail delivery.')
lnAverageMailSizeDelivered = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnAverageMailSizeDelivered.setStatus('optional')
if mibBuilder.loadTexts: lnAverageMailSizeDelivered.setDescription('Average size of mail messages delivered in bytes.')
lnMaximumMailDeliverTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMaximumMailDeliverTime.setStatus('optional')
if mibBuilder.loadTexts: lnMaximumMailDeliverTime.setDescription('Maximum time for mail delivery in seconds.')
lnMaximumMailServerHops = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMaximumMailServerHops.setStatus('optional')
if mibBuilder.loadTexts: lnMaximumMailServerHops.setDescription('Maximum number of server hops for mail delivery.')
lnMaximumMailSizeDelivered = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMaximumMailSizeDelivered.setStatus('optional')
if mibBuilder.loadTexts: lnMaximumMailSizeDelivered.setDescription('Maximum size of mail delivered in bytes.')
lnMinimumMailDeliverTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMinimumMailDeliverTime.setStatus('optional')
if mibBuilder.loadTexts: lnMinimumMailDeliverTime.setDescription('Minimum time for mail delivery in seconds.')
lnMinimumMailServerHops = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMinimumMailServerHops.setStatus('optional')
if mibBuilder.loadTexts: lnMinimumMailServerHops.setDescription('Minimum number of server hops for mail delivery.')
lnMinimumMailSizeDelivered = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMinimumMailSizeDelivered.setStatus('optional')
if mibBuilder.loadTexts: lnMinimumMailSizeDelivered.setDescription('Minimum size of mail delivered in bytes.')
lnTotalKBTransferred = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTotalKBTransferred.setStatus('optional')
if mibBuilder.loadTexts: lnTotalKBTransferred.setDescription('Total mail transferred in kilobytes.')
lnMailTransferFailures = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMailTransferFailures.setStatus('optional')
if mibBuilder.loadTexts: lnMailTransferFailures.setDescription('Number of mail messages the router was unable to transfer.')
lnRepDocsAdded = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepDocsAdded.setStatus('optional')
if mibBuilder.loadTexts: lnRepDocsAdded.setDescription('Number of docs added via replication since server was started.')
lnRepDocsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepDocsDeleted.setStatus('optional')
if mibBuilder.loadTexts: lnRepDocsDeleted.setDescription('Number of docs deleted via replication since server was started.')
lnRepDocsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepDocsUpdated.setStatus('optional')
if mibBuilder.loadTexts: lnRepDocsUpdated.setDescription('Number of docs updated via replication since server was started.')
lnRepFailed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepFailed.setStatus('optional')
if mibBuilder.loadTexts: lnRepFailed.setDescription('Number of replications that generated an error.')
lnRepSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepSuccessful.setStatus('optional')
if mibBuilder.loadTexts: lnRepSuccessful.setDescription('Number of successful replications.')
lnRepClusterDocsAdded = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterDocsAdded.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterDocsAdded.setDescription('The number of documents added by the cluster replicator')
lnRepClusterDocsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterDocsDeleted.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterDocsDeleted.setDescription('The number of documents deleted by the cluster replicator')
lnRepClusterDocsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterDocsUpdated.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterDocsUpdated.setDescription('The number of documents updated by the cluster replicator')
lnRepClusterFailed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterFailed.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterFailed.setDescription('The number of failed replications since server startup.')
lnRepClusterFilesLocal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterFilesLocal.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterFilesLocal.setDescription('The number of databases on the current server for which there are replicas on other servers in the cluster.')
lnRepClusterFilesRemote = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterFilesRemote.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterFilesRemote.setDescription('The number of databases on other servers to which the cluster replicator pushes changes.')
lnRepClusterRetrySkipped = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterRetrySkipped.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterRetrySkipped.setDescription('The number of times the cluster replicator did not attempt to replicate a database. The retry is skipped when the destination server is known to be unreachable, or the database is waiting for another retry attempt.')
lnRepClusterRetryWaiting = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterRetryWaiting.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterRetryWaiting.setDescription('The number of replicas that are waiting for retry attempts.')
lnRepClusterSecondsOnQueue = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSecondsOnQueue.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterSecondsOnQueue.setDescription('The amount of time in seconds that the last database replicated spent on the work queue.')
lnRepClusterSecondsOnQueueAvg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSecondsOnQueueAvg.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterSecondsOnQueueAvg.setDescription('The average amount of time in seconds that a database spent on the work queue.')
lnRepClusterSecondsOnQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSecondsOnQueueMax.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterSecondsOnQueueMax.setDescription('The maximum amount of time in seconds that a database spent on the work queue.')
lnRepClusterServers = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterServers.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterServers.setDescription('The number of other servers in the cluster that are receiving replications from this server.')
lnRepClusterSessionBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSessionBytesIn.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterSessionBytesIn.setDescription('The total number of bytes received during cluster replication')
lnRepClusterSessionBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSessionBytesOut.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterSessionBytesOut.setDescription('The total number of bytes sent during cluster replication')
lnRepClusterSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterSuccessful.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterSuccessful.setDescription('The number of successful replications since server startup.')
lnRepClusterWorkQueueDepth = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterWorkQueueDepth.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterWorkQueueDepth.setDescription('The current number of databases awaiting replication by the cluster replicator.')
lnRepClusterWorkQueueDepthAvg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterWorkQueueDepthAvg.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterWorkQueueDepthAvg.setDescription('The average work queue depth since server startup.')
lnRepClusterWorkQueueDepthMax = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 5, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRepClusterWorkQueueDepthMax.setStatus('optional')
if mibBuilder.loadTexts: lnRepClusterWorkQueueDepthMax.setDescription('The maximum depth reached by the work queue since server startup.')
lnTaskCount = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskCount.setStatus('mandatory')
if mibBuilder.loadTexts: lnTaskCount.setDescription('Number of Notes server tasks currently executing.')
lnTaskTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2), )
if mibBuilder.loadTexts: lnTaskTable.setStatus('mandatory')
if mibBuilder.loadTexts: lnTaskTable.setDescription('A table containing one entry for each Notes server task that is actually running.')
lnTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "NOTES-MIB", "lnTaskIndex"))
if mibBuilder.loadTexts: lnTaskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnTaskEntry.setDescription('The entry type definition for the lnTaskTable.')
lnTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lnTaskIndex.setDescription('A unique value for each entry in lnTaskTable.')
lnTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))).clone(namedValues=NamedValues(("databaseserver", 1), ("event", 2), ("reporter", 3), ("replicator", 4), ("indexer", 5), ("router", 6), ("eventinterceptor", 7), ("querysethandler", 8), ("reflectoragent", 9), ("webretriever", 10), ("calendarconnector", 11), ("schedulemanager", 12), ("unknownaddin", 13), ("adminprocess", 14), ("httpwebserver", 15), ("chronos", 16), ("collector", 17), ("inotes", 18), ("billing", 19), ("clusterreplicator", 20), ("clusterdbdirmgr", 21), ("clusteradmin", 22), ("agentmanager", 23), ("cataloger", 24), ("databasecompactor", 25), ("designer", 26), ("objectstoremgr", 27), ("pop3server", 28), ("statistics", 29), ("stats", 30), ("databasefixup", 31), ("innews", 32), ("webpublisher", 33), ("ccmailmta", 34), ("smtpmta", 35), ("x400mta", 36), ("ldapserver", 37), ("nntpserver", 38), ("imapserver", 39), ("imap4server", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskType.setStatus('mandatory')
if mibBuilder.loadTexts: lnTaskType.setDescription('The type of server task being represented by this entry')
lnTaskData = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskData.setStatus('mandatory')
if mibBuilder.loadTexts: lnTaskData.setDescription('Information associated with this task entry. See the description for lnTaskType.')
lnTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTaskName.setStatus('mandatory')
if mibBuilder.loadTexts: lnTaskName.setDescription('The actual name of the task as it appears in the SERVER.TASK statistic on the server')
lnReplicatorStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnReplicatorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lnReplicatorStatus.setDescription('Status of the Replicator task. Provided as a separate MIB variable for the sake of efficiency.')
lnRouterStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnRouterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lnRouterStatus.setDescription('Status of the Router task. Provided as a separate MIB variable for the sake of efficiency.')
lnEventStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEventStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lnEventStatus.setDescription('Status of the Event task. Provided as a separate MIB variable for the sake of efficiency.')
lnServerName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerName.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerName.setDescription('Server Name.')
lnServerTitle = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTitle.setStatus('optional')
if mibBuilder.loadTexts: lnServerTitle.setDescription('Title assigned to this server.')
lnServerAdministrators = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerAdministrators.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerAdministrators.setDescription('Contents of Administrator field from server record in Public Address book.')
lnServerNotesVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerNotesVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerNotesVersion.setDescription('Release of the Notes server that is running.')
lnServerSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerSystemVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerSystemVersion.setDescription('Release of the Operating System running on the server.')
lnServerBootID = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerBootID.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerBootID.setDescription('Unique number identifying the time this server was last booted.')
lnServerDataPath = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerDataPath.setStatus('optional')
if mibBuilder.loadTexts: lnServerDataPath.setDescription("Drive and directory defined as this server's data directory.")
lnServerSwapPath = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerSwapPath.setStatus('optional')
if mibBuilder.loadTexts: lnServerSwapPath.setDescription("Drive and directory for this server's swap file (NOTE: this stat relies on the NOTES.INI variable 'SWAPPATH' if config.sys contains a swap path different from the default.)")
lnServerRS232Ports = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerRS232Ports.setStatus('optional')
if mibBuilder.loadTexts: lnServerRS232Ports.setDescription('Number of RS232 ports on this server.')
lnServerCoprocessor = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerCoprocessor.setStatus('optional')
if mibBuilder.loadTexts: lnServerCoprocessor.setDescription("Returns 'Yes', if server is a 486 or 386 w/ 387, otherwise, Returns 'No'.")
lnServerOS = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("os2", 1), ("netware", 2), ("windowsnt", 3), ("unix", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOS.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerOS.setDescription('Operating System the current Notes server is running.')
lnServerCPUCount = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerCPUCount.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerCPUCount.setDescription('The number of processors installed on this server.')
lnServerCPUType = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerCPUType.setStatus('optional')
if mibBuilder.loadTexts: lnServerCPUType.setDescription('The type of processor installed on the server (386,486, Pentium, etc).')
lnServerUsersTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14), )
if mibBuilder.loadTexts: lnServerUsersTable.setStatus('optional')
if mibBuilder.loadTexts: lnServerUsersTable.setDescription('A table containing one entry for each Notes user on the server.')
lnServerPorts = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerPorts.setStatus('optional')
if mibBuilder.loadTexts: lnServerPorts.setDescription('A list of ports on the server.')
lnServerPoweredBy = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerPoweredBy.setStatus('optional')
if mibBuilder.loadTexts: lnServerPoweredBy.setDescription('Indicates what is powering the Domino server. A value here would indicate the system is running Release 4.5 or better of the Domino server. Value should = Notes')
lnServerUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1), ).setIndexNames((0, "NOTES-MIB", "lnServerUsersIndex"))
if mibBuilder.loadTexts: lnServerUsersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerUsersEntry.setDescription('The entry type definition for the lnServerUsersTable.')
lnServerUsersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsersIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerUsersIndex.setDescription('A unique value for each entry in lnServerUsersTable.')
lnServerUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUserName.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerUserName.setDescription('Notes UserName of server user.')
lnServerUserSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUserSessionID.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerUserSessionID.setDescription("The user's Notes session ID.")
lnServerUserAccessedDBs = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUserAccessedDBs.setStatus('mandatory')
if mibBuilder.loadTexts: lnServerUserAccessedDBs.setDescription('The number of databases accessed by the users.')
lnServerDroppedSessions = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerDroppedSessions.setStatus('optional')
if mibBuilder.loadTexts: lnServerDroppedSessions.setDescription('Number of dropped sessions.')
lnServerTransPerMin = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTransPerMin.setStatus('optional')
if mibBuilder.loadTexts: lnServerTransPerMin.setDescription('Average number of transactions per minute since the server was started.')
lnServerTransPerMinPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTransPerMinPeak.setStatus('optional')
if mibBuilder.loadTexts: lnServerTransPerMinPeak.setDescription('Peak number of transactions that took place in any given minute since the server was started.')
lnServerTransPerMinPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTransPerMinPeakTime.setStatus('optional')
if mibBuilder.loadTexts: lnServerTransPerMinPeakTime.setDescription('Date and time when the peak number of transactions per minute was last reached. Represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnServerTransTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTransTotal.setStatus('optional')
if mibBuilder.loadTexts: lnServerTransTotal.setDescription('Total number of transactions the server has completed since it was started.')
lnServerUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers.setStatus('optional')
if mibBuilder.loadTexts: lnServerUsers.setDescription('Number of users with sessions open on the server.')
lnServerUsers1MinPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers1MinPeak.setStatus('optional')
if mibBuilder.loadTexts: lnServerUsers1MinPeak.setDescription('The peak number of concurrent users active within the last minute.')
lnServerUsers1MinPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers1MinPeakTime.setStatus('optional')
if mibBuilder.loadTexts: lnServerUsers1MinPeakTime.setDescription('Date and time when the peak number of active concurrent users were reached within the last minute. Represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnServerUsers5MinPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers5MinPeak.setStatus('optional')
if mibBuilder.loadTexts: lnServerUsers5MinPeak.setDescription('The peak number of concurrent users that were active within the last five minutes.')
lnServerUsers5MinPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsers5MinPeakTime.setStatus('optional')
if mibBuilder.loadTexts: lnServerUsers5MinPeakTime.setDescription('Date and time when the peak number of active concurrent users were reached within the last five minutes. Represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnServerUsersPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsersPeak.setStatus('optional')
if mibBuilder.loadTexts: lnServerUsersPeak.setDescription('The peak number of concurrent users with open sessions since the server was started.')
lnServerUsersPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerUsersPeakTime.setStatus('optional')
if mibBuilder.loadTexts: lnServerUsersPeakTime.setDescription('Date and time when the peak number of concurrent users with open sessions was last reached. Represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnServerOpenReqMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOpenReqMaxUsers.setStatus('optional')
if mibBuilder.loadTexts: lnServerOpenReqMaxUsers.setDescription('The number of times that a client has attempted to open a database on this server when the server was at its MAXUSERS limit.')
lnServerOpenReqPreV4Client = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOpenReqPreV4Client.setStatus('optional')
if mibBuilder.loadTexts: lnServerOpenReqPreV4Client.setDescription('The number of times Notes Release 4.0 (or higher) clients have attempted to open a database on this server.')
lnServerOpenReqRestricted = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOpenReqRestricted.setStatus('optional')
if mibBuilder.loadTexts: lnServerOpenReqRestricted.setDescription('The number of times that a client has attempted to open a database on this server when the server was RESTRICTED.')
lnServerOpenReqV4Client = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerOpenReqV4Client.setStatus('optional')
if mibBuilder.loadTexts: lnServerOpenReqV4Client.setDescription('The number of times Notes Clients post Release 4.0 have attempted to open a database on this server.')
lnServerBusyTimeQueryReceivedCount = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerBusyTimeQueryReceivedCount.setStatus('optional')
if mibBuilder.loadTexts: lnServerBusyTimeQueryReceivedCount.setDescription("The number of external 'busytime' queries the server has received.")
lnServerBusyTimeQueryRetObjSched = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerBusyTimeQueryRetObjSched.setStatus('optional')
if mibBuilder.loadTexts: lnServerBusyTimeQueryRetObjSched.setDescription('The number of schedules that were returned by queries counted by lnServerBusyTimeQueriesReceivedCount')
lnNumClosedOldSessions = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNumClosedOldSessions.setStatus('optional')
if mibBuilder.loadTexts: lnNumClosedOldSessions.setDescription('Number of sessions dropped because of too many concurrent users.')
lnNetbiosTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2), )
if mibBuilder.loadTexts: lnNetbiosTable.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetbiosTable.setDescription('A table containing one entry for each active NetBIOS port on the server. Notes R3 only.')
lnNetbiosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1), ).setIndexNames((0, "NOTES-MIB", "lnNBIndex"))
if mibBuilder.loadTexts: lnNetbiosEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetbiosEntry.setDescription('The entry type definition for the lnNetbiosTable, Notes R3')
lnNBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBIndex.setDescription('A unique value for each entry in lnNetbiosTable.')
lnNBPort = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBPort.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBPort.setDescription('NetBIOS port associated with this table entry.')
lnNBUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBUnitNumber.setDescription('Unit number for this NetBIOS port.')
lnNBMajVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBMajVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBMajVersion.setDescription('Major version number of the NetBIOS driver being run on this port.')
lnNMMinVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNMMinVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lnNMMinVersion.setDescription('Minor version number of the NetBIOS driver being run on this port.')
lnNBReportPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBReportPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBReportPeriod.setDescription('Period of time over which the statistics for this port have been accumulating.')
lnNBInUseSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBInUseSessions.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBInUseSessions.setDescription('Number of NetBIOS sessions currently in use.')
lnNBMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBMaxSessions.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBMaxSessions.setDescription('Maximum number of concurrent NetBIOS sessions configured for this port.')
lnNBAvailCmdBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBAvailCmdBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBAvailCmdBlocks.setDescription('The number of NetBIOS command blocks which are currently available for use.')
lnNBTotalCmdBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBTotalCmdBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBTotalCmdBlocks.setDescription('Maximum number of NetBIOS command blocks configured for this port.')
lnNBPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBPacketSize.setDescription('Packet size for this NetBIOS port (in bytes).')
lnNBReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBReceivedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBReceivedPackets.setDescription('Total number of packets received by this port.')
lnNBSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBSentPackets.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBSentPackets.setDescription('Total number of packets sent from this port.')
lnNBAbortedTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBAbortedTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBAbortedTransmissions.setDescription('Number of aborted transmissions for this port.')
lnNBRetriedTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBRetriedTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBRetriedTransmissions.setDescription('Number of retried transmissions for this port.')
lnNBAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBAlignmentErrors.setDescription('Number of alignment errors for this port.')
lnNBCollisionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBCollisionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBCollisionErrors.setDescription('Number of collision errors for this port.')
lnNBCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNBCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lnNBCRCErrors.setDescription('Number of checksum errors for this port.')
lnXPCTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3), )
if mibBuilder.loadTexts: lnXPCTable.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCTable.setDescription('A table containing one entry for each active XPC port on the server.')
lnXPCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1), ).setIndexNames((0, "NOTES-MIB", "lnXPCIndex"))
if mibBuilder.loadTexts: lnXPCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCEntry.setDescription('The entry type definition for the lnXPCTable.')
lnXPCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCIndex.setDescription('A unique value for each entry in the lnXPCTable.')
lnXPCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCPort.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCPort.setDescription('XPC port associated with this table entry.')
lnXPCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCStatus.setDescription('The status of this XPC port.')
lnXPCCarrierSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCCarrierSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCCarrierSpeed.setDescription('Communication speed (in bits per second) between local modem and remote modem.')
lnXPCPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCPortSpeed.setDescription('Communication speed (in bits per second) between server and local modem.')
lnXPCActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCActiveSessions.setDescription('Number of active user sessions on this XPC port.')
lnXPCKiloBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCKiloBytesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCKiloBytesReceived.setDescription('Number of kilobytes received by this port.')
lnXPCKiloBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCKiloBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCKiloBytesSent.setDescription('Number of kilobytes sent by this port.')
lnXPCMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCMsgsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCMsgsReceived.setDescription('Number of messages received by this port.')
lnXPCMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCMsgsSent.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCMsgsSent.setDescription('Number of messages sent by this port.')
lnXPCCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCCRCErrors.setDescription('Number of checksum errors from this port.')
lnXPCPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCPortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCPortErrors.setDescription('Number of port errors.')
lnXPCRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnXPCRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: lnXPCRetransmissions.setDescription('Number of retransmissions from this port.')
lnAppleTalkStatsLogged = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnAppleTalkStatsLogged.setStatus('optional')
if mibBuilder.loadTexts: lnAppleTalkStatsLogged.setDescription('Number of AppleTalk statistics logged by the Notes server.')
lnNetWareSPXIIStatsLogged = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetWareSPXIIStatsLogged.setStatus('optional')
if mibBuilder.loadTexts: lnNetWareSPXIIStatsLogged.setDescription('Number of NetWare SPX II statistics logged by the Notes server.')
lnNetPortTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6), )
if mibBuilder.loadTexts: lnNetPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortTable.setDescription('A table containing one entry for each configured Notes network port on the server. This table is new to the MIB as of Notes Release 4. This table replaces most of the lnComm variables, remaining for backward compatibility, found in Release 3 of Notes.')
lnNetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1), ).setIndexNames((0, "NOTES-MIB", "lnNetPortIndex"))
if mibBuilder.loadTexts: lnNetPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortEntry.setDescription('The entry type definition for the lnNetPortTable. This is specific to Notes Release 4.')
lnNetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortIndex.setDescription('A unique value for each entry in lnPortTable.')
lnNetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortName.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortName.setDescription('The port name associate with this entry.')
lnNetPortKBytesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortKBytesRec.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortKBytesRec.setDescription("Total kilobytes received on this port. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnNetPortKBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortKBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortKBytesSent.setDescription("Total kilobytes sent on this port. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnNetPortSessEstIn = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessEstIn.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortSessEstIn.setDescription('The number of inbound sessions established on this port.')
lnNetPortSessEstOut = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessEstOut.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortSessEstOut.setDescription('The number of outbound sessions established on this port.')
lnNetPortSessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessLimit.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortSessLimit.setDescription('The current limit on the number of concurrent sessions on the port.')
lnNetPortSessLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessLimitMax.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortSessLimitMax.setDescription('Upward boundary of the range in which lnPortSessLimit may vary.')
lnNetPortSessLimitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessLimitMin.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortSessLimitMin.setDescription('Lower boundary of the range in which lnPortSessLimit may vary.')
lnNetPortSessPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessPeak.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortSessPeak.setDescription('The peak number of concurrent sessions on this port.')
lnNetPortSessRecycled = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessRecycled.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortSessRecycled.setDescription('Number of dropped sessions due to low network resources.')
lnNetPortSessRecycling = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNetPortSessRecycling.setStatus('mandatory')
if mibBuilder.loadTexts: lnNetPortSessRecycling.setDescription('Number of sessions currently being dropped due to low network resources.')
lnSNARemoteLU = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNARemoteLU.setStatus('optional')
if mibBuilder.loadTexts: lnSNARemoteLU.setDescription('Remote LU.')
lnSNALocalLU = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNALocalLU.setStatus('optional')
if mibBuilder.loadTexts: lnSNALocalLU.setDescription('Local LU.')
lnSNALNCVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNALNCVersion.setStatus('optional')
if mibBuilder.loadTexts: lnSNALNCVersion.setDescription('SNA LNC Version.')
lnSNAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAVersion.setStatus('optional')
if mibBuilder.loadTexts: lnSNAVersion.setDescription('SNA Version.')
lnSNAMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAMaxSessions.setStatus('optional')
if mibBuilder.loadTexts: lnSNAMaxSessions.setDescription('Maximum number of SNA sessions that can exist.')
lnSNAActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAActiveSessions.setStatus('optional')
if mibBuilder.loadTexts: lnSNAActiveSessions.setDescription('The total number of active SNA sessions.')
lnSNATPType = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNATPType.setStatus('optional')
if mibBuilder.loadTexts: lnSNATPType.setDescription('SNA transaction program type.')
lnSNATPState = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNATPState.setStatus('optional')
if mibBuilder.loadTexts: lnSNATPState.setDescription('SNA transaction program state.')
lnSNAConversationId = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAConversationId.setStatus('optional')
if mibBuilder.loadTexts: lnSNAConversationId.setDescription('SNA conversation ID.')
lnSNAMaxSendRUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAMaxSendRUSize.setStatus('optional')
if mibBuilder.loadTexts: lnSNAMaxSendRUSize.setDescription('Maximum send request unit size sent.')
lnSNAMaxRcvRUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAMaxRcvRUSize.setStatus('optional')
if mibBuilder.loadTexts: lnSNAMaxRcvRUSize.setDescription('Maximum send request unit size received.')
lnSNASendPacingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNASendPacingSize.setStatus('optional')
if mibBuilder.loadTexts: lnSNASendPacingSize.setDescription('The maximum number of outstanding request units which can be transmitted before receiving a pacing response from the remote LU.')
lnSNARcvPacingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNARcvPacingSize.setStatus('optional')
if mibBuilder.loadTexts: lnSNARcvPacingSize.setDescription('The maximum number of oustanding request units which can be received before transmitting a pacing response to the remote LU.')
lnSNAPacingType = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnSNAPacingType.setStatus('optional')
if mibBuilder.loadTexts: lnSNAPacingType.setDescription('The SNA pacing size was originally determined at the creation of a session and remained constant through the life of the session. More recent implementations allow the pacing size to dynamically change through the life of the session to increase efficiency and take advantage of available buffers. This number represents the type of pacing done.')
lnX25LocalResets = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25LocalResets.setStatus('optional')
if mibBuilder.loadTexts: lnX25LocalResets.setDescription('The total number of local resets on this X25 port.')
lnX25RemoteResets = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25RemoteResets.setStatus('optional')
if mibBuilder.loadTexts: lnX25RemoteResets.setDescription('The total number of remote resets on this X25 port.')
lnX25WindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25WindowSize.setStatus('optional')
if mibBuilder.loadTexts: lnX25WindowSize.setDescription('The window size on this X25 port.')
lnX25FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25FrameSize.setStatus('optional')
if mibBuilder.loadTexts: lnX25FrameSize.setDescription('The network frame size on this X25 port.')
lnX25PktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25PktSize.setStatus('optional')
if mibBuilder.loadTexts: lnX25PktSize.setDescription('The network packet size on this X25 port.')
lnX25UnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25UnderRuns.setStatus('optional')
if mibBuilder.loadTexts: lnX25UnderRuns.setDescription('This occurs when data is not given to the UART on an X.25 board fast enough for it to generate a complete packet on the wire.')
lnX25OverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25OverRuns.setStatus('optional')
if mibBuilder.loadTexts: lnX25OverRuns.setDescription('This occurs when data is given to the UART on an X.25 board faster than the board can generate packets to put on the wire.')
lnX25REJTran = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25REJTran.setStatus('optional')
if mibBuilder.loadTexts: lnX25REJTran.setDescription('The total number of REJs transmitted by this X25 port.')
lnX25REJRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25REJRcv.setStatus('optional')
if mibBuilder.loadTexts: lnX25REJRcv.setDescription('The total number of REJs received by this X25 port.')
lnX25VCCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25VCCfg.setStatus('optional')
if mibBuilder.loadTexts: lnX25VCCfg.setDescription('The total number of virtual circuits configured on this X25 port.')
lnX25VCInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25VCInUse.setStatus('optional')
if mibBuilder.loadTexts: lnX25VCInUse.setDescription('The total number of virtual circuits currently in use on this X25 port.')
lnX25CRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25CRCErrors.setStatus('optional')
if mibBuilder.loadTexts: lnX25CRCErrors.setDescription('The remote DTE address on this X25 port.')
lnX25LocalDTEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 7, 6, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnX25LocalDTEAddress.setStatus('optional')
if mibBuilder.loadTexts: lnX25LocalDTEAddress.setDescription('The local DTE address on this X25 port.')
lnDiskFixed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDiskFixed.setStatus('mandatory')
if mibBuilder.loadTexts: lnDiskFixed.setDescription('Number of fixed disks configured on this server.')
lnDiskFreeSwap = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDiskFreeSwap.setStatus('optional')
if mibBuilder.loadTexts: lnDiskFreeSwap.setDescription('Amount of free space left in swap area (in kilobytes).')
lnDriveTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3), )
if mibBuilder.loadTexts: lnDriveTable.setStatus('mandatory')
if mibBuilder.loadTexts: lnDriveTable.setDescription('A table containing one entry for each disk (including network disks) configured on the server.')
lnDiskRemote = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDiskRemote.setStatus('optional')
if mibBuilder.loadTexts: lnDiskRemote.setDescription('The number of network disks or volumes mounted.')
lnDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1), ).setIndexNames((0, "NOTES-MIB", "lnDriveIndex"))
if mibBuilder.loadTexts: lnDriveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnDriveEntry.setDescription('The entry type definition for the lnDriveTable.')
lnDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lnDriveIndex.setDescription('A unique value for each entry in lnDriveTable.')
lnDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDriveLetter.setStatus('mandatory')
if mibBuilder.loadTexts: lnDriveLetter.setDescription('The drive letter of the disk associated with this entry.')
lnDriveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDriveSize.setStatus('mandatory')
if mibBuilder.loadTexts: lnDriveSize.setDescription("The total size of this drive in kilobytes. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDriveFree = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDriveFree.setStatus('mandatory')
if mibBuilder.loadTexts: lnDriveFree.setDescription("The amount of free space left on this drive in kilobytes. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnMemAllocTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemAllocTotal.setStatus('mandatory')
if mibBuilder.loadTexts: lnMemAllocTotal.setDescription('Total memory allocated (should be sum of process and shared).')
lnMemAllocProcess = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemAllocProcess.setStatus('mandatory')
if mibBuilder.loadTexts: lnMemAllocProcess.setDescription('Total process-private memory allocated by all currently-running processes.')
lnMemAllocShared = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemAllocShared.setStatus('mandatory')
if mibBuilder.loadTexts: lnMemAllocShared.setDescription('Total shared memory allocated.')
lnMemAvailability = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemAvailability.setStatus('mandatory')
if mibBuilder.loadTexts: lnMemAvailability.setDescription('Available memory on this server.')
lnMemFree = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemFree.setStatus('mandatory')
if mibBuilder.loadTexts: lnMemFree.setDescription("Total free memory, reported in kilobytes, as shown in the MEM.FREE Notes statistic. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnMemSwapSize = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemSwapSize.setStatus('optional')
if mibBuilder.loadTexts: lnMemSwapSize.setDescription("Size of swap file (NOTE: this stat relies on the NOTES.INI variable 'SWAPPATH' if config.sys contains a swap path different from the default.)")
lnMemPhysicalRAM = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMemPhysicalRAM.setStatus('optional')
if mibBuilder.loadTexts: lnMemPhysicalRAM.setDescription('The total amount of physical memory on the server.')
lnDBBufferControlPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferControlPoolSize.setStatus('optional')
if mibBuilder.loadTexts: lnDBBufferControlPoolSize.setDescription('Size of the buffer control pool.')
lnDBBufferControlPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferControlPoolUsed.setStatus('optional')
if mibBuilder.loadTexts: lnDBBufferControlPoolUsed.setDescription("Number of bytes used in buffer control pool. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDBBufferPoolAllocated = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolAllocated.setStatus('optional')
if mibBuilder.loadTexts: lnDBBufferPoolAllocated.setDescription('Number of bytes allocated from the buffer pool.')
lnDBBufferPoolMaximum = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolMaximum.setStatus('optional')
if mibBuilder.loadTexts: lnDBBufferPoolMaximum.setDescription('Maximum size of the buffer pool.')
lnDBBufferPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolUsed.setStatus('optional')
if mibBuilder.loadTexts: lnDBBufferPoolUsed.setDescription('Number of used buffers from the buffer pool.')
lnDBNSFPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNSFPoolSize.setStatus('optional')
if mibBuilder.loadTexts: lnDBNSFPoolSize.setDescription('Size of NSF pool.')
lnDBNSFPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNSFPoolUsed.setStatus('optional')
if mibBuilder.loadTexts: lnDBNSFPoolUsed.setDescription("Amount of space used in NSF pool. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDBBufferPoolPercentReadsInBuffer = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolPercentReadsInBuffer.setStatus('optional')
if mibBuilder.loadTexts: lnDBBufferPoolPercentReadsInBuffer.setDescription('Percentage of buffer pool reads.')
lnDBBufferPoolReads = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolReads.setStatus('optional')
if mibBuilder.loadTexts: lnDBBufferPoolReads.setDescription('Number of database buffer pool reads.')
lnDBBufferPoolWrites = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferPoolWrites.setStatus('optional')
if mibBuilder.loadTexts: lnDBBufferPoolWrites.setDescription('Number of database buffer pool writes.')
lnDBNIFPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNIFPoolSize.setStatus('optional')
if mibBuilder.loadTexts: lnDBNIFPoolSize.setDescription('Size of database NIF pool.')
lnDBNIFPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNIFPoolUsed.setStatus('optional')
if mibBuilder.loadTexts: lnDBNIFPoolUsed.setDescription("Number of database NIF pools. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDBNIFPoolPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNIFPoolPeak.setStatus('optional')
if mibBuilder.loadTexts: lnDBNIFPoolPeak.setDescription("The peak number of database NIF pools. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDBNSFPoolPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBNSFPoolPeak.setStatus('optional')
if mibBuilder.loadTexts: lnDBNSFPoolPeak.setDescription("The peak number of database NSF pools. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDBCacheCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheCurrentEntries.setStatus('optional')
if mibBuilder.loadTexts: lnDBCacheCurrentEntries.setDescription('The number of databases currently in the cache. Administrators should monitor this number to see whether it approaches the NSF-DBCACHE-MAXENTRIES setting. If it does, this indicates the cache is under pressure. If this situation occurs frequently, the administrator should increase the setting for NSF-DBCACHE-MAXENTRIES.')
lnDBCacheHighWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheHighWaterMark.setStatus('optional')
if mibBuilder.loadTexts: lnDBCacheHighWaterMark.setDescription('The maximum number of databases in the cache during this running of the Domino server program. Note that this number may be artificially high due to startup activity, so it may be of limited use as a genuine indicator of cache performance.')
lnDBCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheHits.setStatus('optional')
if mibBuilder.loadTexts: lnDBCacheHits.setDescription("The number of times an lnDBCacheInitialDbOpen is satisfied by finding a database in the cache. A high 'hits-to-opens' ratio indicates the database cache is working effectively, since most users are opening databases in the cache without having to wait for the usual time required by an initial (non-cache) open. If the ratio is low (in other words, more users are having to wait for databases not in the cache to open), the administrator can increase the NSF-DBCACHE-MAXENTRIES settings.")
lnDBCacheInitialDbOpens = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheInitialDbOpens.setStatus('optional')
if mibBuilder.loadTexts: lnDBCacheInitialDbOpens.setDescription('The number of times a user/server opened a database that was not already being used by another user/server. By comparing this number to lnDBCacheHits, administrators can gauge the effectiveness of the cache.')
lnDBCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheLookups.setStatus('optional')
if mibBuilder.loadTexts: lnDBCacheLookups.setDescription('The number of lookups performed on the cache.')
lnDBCacheMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheMaxEntries.setStatus('optional')
if mibBuilder.loadTexts: lnDBCacheMaxEntries.setDescription('The number of databases that the server can currently hold in its cache at once.')
lnDBCacheOvercrowdingRejections = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBCacheOvercrowdingRejections.setStatus('optional')
if mibBuilder.loadTexts: lnDBCacheOvercrowdingRejections.setDescription('The number of times a database is not placed into the cache when it is closed because lnDBCacheCurrentEntries equals or exceeds lnDBCacheMaxEntries*1.5. This number should stay low. If it begins to rise, you should increase the NSF-DbCache-Maxentries settings.')
lnDBBufferControlPoolPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 10, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDBBufferControlPoolPeak.setStatus('optional')
if mibBuilder.loadTexts: lnDBBufferControlPoolPeak.setDescription("The peak size of buffer control pool. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDailyAccessDenials = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyAccessDenials.setStatus('optional')
if mibBuilder.loadTexts: lnDailyAccessDenials.setDescription('The number of times the agent manager failed to execute a given task, probably due to ACL restrictions.')
lnDailyScheduledRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyScheduledRuns.setStatus('optional')
if mibBuilder.loadTexts: lnDailyScheduledRuns.setDescription('The number of tasks that the agent manager has scheduled to run during the course of the day.')
lnDailyTriggeredRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyTriggeredRuns.setStatus('optional')
if mibBuilder.loadTexts: lnDailyTriggeredRuns.setDescription('The number of tasks that the agent manager has had triggered to run by an event during the course of the day.')
lnDailyUnsuccessfulRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyUnsuccessfulRuns.setStatus('optional')
if mibBuilder.loadTexts: lnDailyUnsuccessfulRuns.setDescription('The number of tasks the agent manager has unsuccessfully run during the course of the day.')
lnDailyUsedRunTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDailyUsedRunTime.setStatus('optional')
if mibBuilder.loadTexts: lnDailyUsedRunTime.setDescription('The number of seconds used to run an agent.')
lnHourlyAccessDenials = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyAccessDenials.setStatus('optional')
if mibBuilder.loadTexts: lnHourlyAccessDenials.setDescription('The number of tasks that the agent manager failed to execute during the last hour, probably due to ACL restrictions.')
lnHourlyScheduledRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyScheduledRuns.setStatus('optional')
if mibBuilder.loadTexts: lnHourlyScheduledRuns.setDescription('The number of tasks the agent manager has scheduled to run during the last hour.')
lnHourlyTriggeredRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyTriggeredRuns.setStatus('optional')
if mibBuilder.loadTexts: lnHourlyTriggeredRuns.setDescription('The number of tasks the agent manager has had triggered to run by an event during the last hour.')
lnHourlyUnsuccessfulRuns = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyUnsuccessfulRuns.setStatus('optional')
if mibBuilder.loadTexts: lnHourlyUnsuccessfulRuns.setDescription('The number of tasks the agent manager has unsuccessfully run during the last hour.')
lnHourlyUsedRunTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 11, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnHourlyUsedRunTime.setStatus('optional')
if mibBuilder.loadTexts: lnHourlyUsedRunTime.setDescription('The number of seconds to run an agent.')
lnMTATable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1), )
if mibBuilder.loadTexts: lnMTATable.setStatus('mandatory')
if mibBuilder.loadTexts: lnMTATable.setDescription('A table containing one entry for each running Notes server MTA.')
lnMTAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1), ).setIndexNames((0, "NOTES-MIB", "lnMTAIndex"))
if mibBuilder.loadTexts: lnMTAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnMTAEntry.setDescription('The entry type definition for the lnMTATable.')
lnMTAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lnMTAIndex.setDescription('A unique value for each MTA running on the Notes server.')
lnMTAName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTAName.setStatus('mandatory')
if mibBuilder.loadTexts: lnMTAName.setDescription('A string representing the name of a MTA running on the Notes server.')
lnMTADeadMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTADeadMsgs.setStatus('optional')
if mibBuilder.loadTexts: lnMTADeadMsgs.setDescription('The number of dead mail messages. (Messages that are stuck in the MTA queue.)')
lnMTAWaitingRecp = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTAWaitingRecp.setStatus('optional')
if mibBuilder.loadTexts: lnMTAWaitingRecp.setDescription('The number of recipients for pending mail. (The number of recipients responsible for lnMTAWaitingMsgs.)')
lnMTAWaitingMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTAWaitingMsgs.setStatus('optional')
if mibBuilder.loadTexts: lnMTAWaitingMsgs.setDescription('The amount of mail awaiting routing. (The number of messages that are in the process of being routed.)')
lnMTATransferFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTATransferFailures.setStatus('optional')
if mibBuilder.loadTexts: lnMTATransferFailures.setDescription('The number of messages the MTA could not transfer.')
lnMTATotalKBTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTATotalKBTransferred.setStatus('optional')
if mibBuilder.loadTexts: lnMTATotalKBTransferred.setDescription("The total number of kilobyte transferred outbound or into any of the .box's by this MTA.")
lnMTATransferredMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTATransferredMsgs.setStatus('optional')
if mibBuilder.loadTexts: lnMTATransferredMsgs.setDescription("The total number of messages transferred outbound or into any of the .box's by this MTA.")
lnMTATotalRouted = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMTATotalRouted.setStatus('optional')
if mibBuilder.loadTexts: lnMTATotalRouted.setDescription("The total amount of mail routed (# of recipients routed to) outbound or into any of the .box's.")
lnWebAccessFtp = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebAccessFtp.setStatus('optional')
if mibBuilder.loadTexts: lnWebAccessFtp.setDescription('The number of FTP connections on this Web server.')
lnWebAccessGopher = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebAccessGopher.setStatus('optional')
if mibBuilder.loadTexts: lnWebAccessGopher.setDescription('The number of Gopher connections on this Web server.')
lnWebAccessHttp = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebAccessHttp.setStatus('optional')
if mibBuilder.loadTexts: lnWebAccessHttp.setDescription('The number of HTTP connections on this Web server.')
lnWebKBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebKBytesReceived.setStatus('optional')
if mibBuilder.loadTexts: lnWebKBytesReceived.setDescription('Total kilobytes received by this Web server.')
lnWebKBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebKBytesSent.setStatus('optional')
if mibBuilder.loadTexts: lnWebKBytesSent.setDescription('Total kilobytes sent by this Web server.')
lnWebImageCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebImageCacheHits.setStatus('optional')
if mibBuilder.loadTexts: lnWebImageCacheHits.setDescription('The number of successful hits on the image cache.')
lnWebImageCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebImageCacheMisses.setStatus('optional')
if mibBuilder.loadTexts: lnWebImageCacheMisses.setDescription('The number of image cache misses.')
lnWebLogMessages = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebLogMessages.setStatus('optional')
if mibBuilder.loadTexts: lnWebLogMessages.setDescription(" 'Yes' if message logging is turned on.")
lnWebActiveProcesses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebActiveProcesses.setStatus('optional')
if mibBuilder.loadTexts: lnWebActiveProcesses.setDescription('The number of active Web Retriever processes.')
lnWebBusyProcesses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebBusyProcesses.setStatus('optional')
if mibBuilder.loadTexts: lnWebBusyProcesses.setDescription('The number of Web Retriever processes currently busy working.')
lnWebIdleProcesses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebIdleProcesses.setStatus('optional')
if mibBuilder.loadTexts: lnWebIdleProcesses.setDescription('The number of Web Retriever processes that are sitting idle.')
lnWebMaxProcesses = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebMaxProcesses.setStatus('optional')
if mibBuilder.loadTexts: lnWebMaxProcesses.setDescription('The maximum number of Web Retriever processes allowable on this server.')
lnWebProcessState = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcessState.setStatus('optional')
if mibBuilder.loadTexts: lnWebProcessState.setDescription('The number of image cache misses.')
lnWebTimeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebTimeCurrent.setStatus('optional')
if mibBuilder.loadTexts: lnWebTimeCurrent.setDescription('The current time, as set on this Web Retriever.')
lnWebTimeDuration = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebTimeDuration.setStatus('optional')
if mibBuilder.loadTexts: lnWebTimeDuration.setDescription('Shows the amount of time this Web Retriever has been running.')
lnWebTimeStart = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebTimeStart.setStatus('optional')
if mibBuilder.loadTexts: lnWebTimeStart.setDescription('The time the Web Retriever processes started.')
lnWebUrlFail = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebUrlFail.setStatus('optional')
if mibBuilder.loadTexts: lnWebUrlFail.setDescription('The number URL requests that have failed on this Web Retriever.')
lnWebUrlRequested = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebUrlRequested.setStatus('optional')
if mibBuilder.loadTexts: lnWebUrlRequested.setDescription('The total number of URL requests on this Web Retriever.')
lnWebUrlSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebUrlSucceeded.setStatus('optional')
if mibBuilder.loadTexts: lnWebUrlSucceeded.setDescription('The number of URL requests successfully completed on this server.')
lnWebRetrieverVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebRetrieverVersion.setStatus('optional')
if mibBuilder.loadTexts: lnWebRetrieverVersion.setDescription('The version of the Web Retriever software that is running.')
lnWebVpoolMaxBuf = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxBuf.setStatus('optional')
if mibBuilder.loadTexts: lnWebVpoolMaxBuf.setDescription('The number of buffer VPOOLs which have reached maximum size.')
lnWebVpoolMaxElement = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxElement.setStatus('optional')
if mibBuilder.loadTexts: lnWebVpoolMaxElement.setDescription('The number of element VPOOLs which have reached maximum size.')
lnWebVpoolMaxMarker = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxMarker.setStatus('optional')
if mibBuilder.loadTexts: lnWebVpoolMaxMarker.setDescription('The number of marker VPOOLs which have reached maximum size.')
lnWebVpoolMaxText = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxText.setStatus('optional')
if mibBuilder.loadTexts: lnWebVpoolMaxText.setDescription('The number of text VPOOLs which have reached maximum size.')
lnWebVpoolMaxUrl = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebVpoolMaxUrl.setStatus('optional')
if mibBuilder.loadTexts: lnWebVpoolMaxUrl.setDescription('The number of URL VPOOLs which have reached maximum size.')
lnWebProcessTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26), )
if mibBuilder.loadTexts: lnWebProcessTable.setStatus('optional')
if mibBuilder.loadTexts: lnWebProcessTable.setDescription('This table will show statistics for all Web Retriever processes on the server.')
lnWebProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1), ).setIndexNames((0, "NOTES-MIB", "lnWebProcIndex"))
if mibBuilder.loadTexts: lnWebProcEntry.setStatus('optional')
if mibBuilder.loadTexts: lnWebProcEntry.setDescription('This defines the MIB variables specific to each Web Retriever process.')
lnWebProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcIndex.setDescription('A unique index entry for each Web Retriever process.')
lnWebProcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcNumber.setDescription('The number associated with the Web Retriever process in the Notes stats structure.')
lnWebProcAccFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcAccFtp.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcAccFtp.setDescription('The number of FTP connections this Web Retriever process is handling.')
lnWebProcAccGopher = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcAccGopher.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcAccGopher.setDescription('The number of Gopher connections this Web Retriever process is handling.')
lnWebProcAccHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcAccHttp.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcAccHttp.setDescription('The number of HTTP connections this Web Retriever process is handling.')
lnWebProcKBytesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcKBytesRec.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcKBytesRec.setDescription('The total number of kilobytes this Web Retriever process has received.')
lnWebProcKBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcKBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcKBytesSent.setDescription('The total number of kilobytes this Web Retriever process has sent.')
lnWebProcCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcCacheHits.setDescription('The total number of successful image cache hits for this Web Retriever.')
lnWebProcCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcCacheMisses.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcCacheMisses.setDescription('The total number of image cache misses for this Web Retriever.')
lnWebProcPid = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcPid.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcPid.setDescription('The process ID associated with this Web Retriever process.')
lnWebProcUrlFail = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcUrlFail.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcUrlFail.setDescription('The number of URL opens that failed for this Web Retriever process.')
lnWebProcUrlReq = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcUrlReq.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcUrlReq.setDescription('The number of URL open requests this Web Retriever process handled.')
lnWebProcUrlSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcUrlSucc.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcUrlSucc.setDescription('The number of successful URL opens this Web Retriever process handled.')
lnWebProcVpoolCurBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurBuf.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolCurBuf.setDescription('The number of buffer VPOOLs currently allocated for this Web Retriever process.')
lnWebProcVpoolCurElement = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurElement.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolCurElement.setDescription('The number of element VPOOLs currently allocated for this Web Retriever process.')
lnWebProcVpoolCurMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurMarker.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolCurMarker.setDescription('The number of marker VPOOLs currently allocated for this Web Retriever process.')
lnWebProcVpoolCurText = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurText.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolCurText.setDescription('The number of text VPOOLs currently allocated for this Web Retriever process.')
lnWebProcVpoolCurUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolCurUrl.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolCurUrl.setDescription('The number of URL VPOOLs currently allocated for this Web Retriever process.')
lnWebProcVpoolMaxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxBuf.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolMaxBuf.setDescription('The number of buffer VPOOLs allocated for this Web Retriever process that have reached their maximum size.')
lnWebProcVpoolMaxElement = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxElement.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolMaxElement.setDescription('The number of element VPOOLs allocated to this Web Retriever process that have reached their maximum size.')
lnWebProcVpoolMaxMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxMarker.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolMaxMarker.setDescription('The number of VPOOLs allocated to this Web Retriever process that have reached their maximum size.')
lnWebProcVpoolMaxText = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxText.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolMaxText.setDescription('The number of text VPOOLs allocated to this Web Retriever process that have reached their maximum size.')
lnWebProcVpoolMaxUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 13, 26, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnWebProcVpoolMaxUrl.setStatus('mandatory')
if mibBuilder.loadTexts: lnWebProcVpoolMaxUrl.setDescription('The number of URL VPOOLs allocated to this Web Retriever process that have reached their maximum size.')
lnObjectFileName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectFileName.setStatus('optional')
if mibBuilder.loadTexts: lnObjectFileName.setDescription('The name of the primary single-copy object store (SCOS) database currently in use.')
lnObjectTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2), )
if mibBuilder.loadTexts: lnObjectTable.setStatus('optional')
if mibBuilder.loadTexts: lnObjectTable.setDescription('This table describes statistics for the single-copy object store of each SCOS database that is currently being accessed.')
lnObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1), )
if mibBuilder.loadTexts: lnObjectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnObjectEntry.setDescription('All items in LnObjectTable.')
lnObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectIndex.setStatus('optional')
if mibBuilder.loadTexts: lnObjectIndex.setDescription('An internal index for each SCOS database in use.')
lnObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectName.setStatus('optional')
if mibBuilder.loadTexts: lnObjectName.setDescription('The name of the single copy object store database.')
lnObjectSharedBy01 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy01.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy01.setDescription('Messages with 1 pointer.')
lnObjectSharedBy02 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy02.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy02.setDescription('Messages with 2 pointers.')
lnObjectSharedBy03 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy03.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy03.setDescription('Messages with 3 pointers.')
lnObjectSharedBy04 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy04.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy04.setDescription('Messages with 4 pointers.')
lnObjectSharedBy05 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy05.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy05.setDescription('Messages with 5 pointers.')
lnObjectSharedBy06 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy06.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy06.setDescription('Messages with 6 pointers.')
lnObjectSharedBy07 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy07.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy07.setDescription('Messages with 7 pointers.')
lnObjectSharedBy08 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy08.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy08.setDescription('Messages with 8 pointers.')
lnObjectSharedBy09 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy09.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy09.setDescription('Messages with 9 pointers.')
lnObjectSharedBy10 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy10.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy10.setDescription('Messages with 10 pointers.')
lnObjectSharedBy11 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy11.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy11.setDescription('Messages with 11 pointers.')
lnObjectSharedBy12 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy12.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy12.setDescription('Messages with 12 pointers.')
lnObjectSharedBy13 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy13.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy13.setDescription('Messages with 13 pointers.')
lnObjectSharedBy14 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy14.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy14.setDescription('Messages with 14 pointers.')
lnObjectSharedBy15 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy15.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy15.setDescription('Messages with 15 pointers.')
lnObjectSharedBy16 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy16.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy16.setDescription('Messages with 16 pointers.')
lnObjectSharedBy17 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy17.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy17.setDescription('Messages with 17 pointers.')
lnObjectSharedBy18 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy18.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy18.setDescription('Messages with 18 pointers.')
lnObjectSharedBy19 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy19.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy19.setDescription('Messages with 19 pointers.')
lnObjectSharedBy20 = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedBy20.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedBy20.setDescription('Messages with 20 pointers.')
lnObjectSharedByGreater = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedByGreater.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedByGreater.setDescription('Messages with more than 20 pointers.')
lnObjectSharedByTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 14, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnObjectSharedByTotal.setStatus('optional')
if mibBuilder.loadTexts: lnObjectSharedByTotal.setDescription('The total number of shared messages.')
lnDominoInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1))
lnDominoCmdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2))
lnDominoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3))
lnDominoBuildName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoBuildName.setStatus('optional')
if mibBuilder.loadTexts: lnDominoBuildName.setDescription('The name given to the build.')
lnDominoBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoBuildNumber.setStatus('optional')
if mibBuilder.loadTexts: lnDominoBuildNumber.setDescription('The build number given to the build.')
lnDominoBuildPlatform = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoBuildPlatform.setStatus('optional')
if mibBuilder.loadTexts: lnDominoBuildPlatform.setDescription('The platform this build was created on.')
lnDominoBuildVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoBuildVersion.setStatus('optional')
if mibBuilder.loadTexts: lnDominoBuildVersion.setDescription('The version string associated with this build.')
lnDominoThreadsActivePeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoThreadsActivePeak.setStatus('optional')
if mibBuilder.loadTexts: lnDominoThreadsActivePeak.setDescription('The peak number of active threads since the Domino server was started.')
lnDominoThreadsTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoThreadsTotal.setStatus('optional')
if mibBuilder.loadTexts: lnDominoThreadsTotal.setDescription('The total number of available threads to service Domino requests.')
lnDominoThreadsPeakTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoThreadsPeakTotal.setStatus('optional')
if mibBuilder.loadTexts: lnDominoThreadsPeakTotal.setDescription('The total peak number of active threads since the Domino server was started.')
lnDominoThreadsPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoThreadsPeakTime.setStatus('optional')
if mibBuilder.loadTexts: lnDominoThreadsPeakTime.setDescription('The time when the peak number of threads to service Domino requests occured, represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnDominoStartTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoStartTime.setStatus('optional')
if mibBuilder.loadTexts: lnDominoStartTime.setDescription('The time and date the Domino server was started, represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnDominoReqPerMinTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerMinTotal.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPerMinTotal.setDescription("The total number of Domino requests in the last minute. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDominoReqPerMinPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerMinPeak.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPerMinPeak.setDescription('The highest number of Domino requests to occur during a one minute interval.')
lnDominoReqPerMinPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerMinPeakTime.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPerMinPeakTime.setDescription('The time that the peak number of Domino requests occured during a one minute interval, represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnDominoReqPer5MinsTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPer5MinsTotal.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPer5MinsTotal.setDescription("The total number of Domino requests in the last five minutes. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDominoReqPer5MinsPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPer5MinsPeak.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPer5MinsPeak.setDescription('The highest number of Domino requests to occur during a five minute interval.')
lnDominoReqPer5MinsPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPer5MinsPeakTime.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPer5MinsPeakTime.setDescription('The time that the peak number of Domino requets occured during a five minute interval, represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnDominoReqPerHourTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerHourTotal.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPerHourTotal.setDescription("The total number of Domino requetss in the last hour. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDominoReqPerHourPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerHourPeak.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPerHourPeak.setDescription('The highest number of Domino requests to occur during a 1 hour interval.')
lnDominoReqPerHourPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerHourPeakTime.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPerHourPeakTime.setDescription('The time that the peak number of Domino requests occured during a one hour interval, represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnDominoReqPerDayTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerDayTotal.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPerDayTotal.setDescription("The total number of Domino requestes in the last day. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDominoReqPerDayPeak = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerDayPeak.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPerDayPeak.setDescription('The highest number of Domino requests to occur during a one day interval.')
lnDominoReqPerDayPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoReqPerDayPeakTime.setStatus('optional')
if mibBuilder.loadTexts: lnDominoReqPerDayPeakTime.setDescription('The time that the peak number of Domino requests occured during a one day interval, represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnDominoRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoRequestsTotal.setStatus('optional')
if mibBuilder.loadTexts: lnDominoRequestsTotal.setDescription("The total number of Domino requests since the Domino server was started. A value of zero may indicate the statistic's value is too large to be passed via SNMP.")
lnDominoCacheCommandDisplaceRate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCacheCommandDisplaceRate.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCacheCommandDisplaceRate.setDescription('Command cache displace rate.')
lnDominoCacheCommandHitRate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCacheCommandHitRate.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCacheCommandHitRate.setDescription('Domino command cache hit rate.')
lnDominoCacheDatabaseDisplaceRate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCacheDatabaseDisplaceRate.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCacheDatabaseDisplaceRate.setDescription('Domino database cache displace rate.')
lnDominoCacheDatabaseHitRate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCacheDatabaseHitRate.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCacheDatabaseHitRate.setDescription('Domino database cache hit rate.')
lnDominoCmdInfoEditDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoEditDocument.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoEditDocument.setDescription('The number of EditDocument commands requested since the Domino server was started.')
lnDominoCmdInfoOpenServer = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenServer.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenServer.setDescription('The number of OpenServer commands requested since the Domino server was started.')
lnDominoCmdInfoOpenDatabase = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenDatabase.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenDatabase.setDescription('The number of OpenDatabase commands requested since the Domino server was started.')
lnDominoCmdInfoOpenView = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenView.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenView.setDescription('The number of OpenView commands requested since the Domino server was started.')
lnDominoCmdInfoOpenDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenDocument.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenDocument.setDescription('The number of OpenDocument commands requested since the Domino server was started.')
lnDominoCmdInfoOpenElement = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenElement.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenElement.setDescription('The number of OpenElement commands requested since the Domino server was started.')
lnDominoCmdInfoOpenIcon = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenIcon.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenIcon.setDescription('The number of OpenIcon commands requested since the Domino server was started.')
lnDominoCmdInfoOpenForm = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenForm.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenForm.setDescription('The number of OpenForm commands requested since the Domino server was started.')
lnDominoCmdInfoOpenAgent = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenAgent.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenAgent.setDescription('The number of OpenAgent commands requested since the Domino server was started.')
lnDominoCmdInfoOpenNavigator = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenNavigator.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenNavigator.setDescription('The number of OpenNavigator commands requested since the Domino server was started.')
lnDominoCmdInfoOpenAbout = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenAbout.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenAbout.setDescription('The number of OpenAbout commands requested since the Domino server was started.')
lnDominoCmdInfoOpenHelp = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoOpenHelp.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoOpenHelp.setDescription('The number of OpenHelp commands requested since the Domino server was started.')
lnDominoCmdInfoCreateDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoCreateDocument.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoCreateDocument.setDescription('The number of CreateDocument commands requested since the Domino server was started.')
lnDominoCmdInfoSaveDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoSaveDocument.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoSaveDocument.setDescription('The number of SaveDocument commands requested since the Domino server was started.')
lnDominoCmdInfoDeleteDocument = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoDeleteDocument.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoDeleteDocument.setDescription('The number of DeleteDocument commands requested since the Domino server was started.')
lnDominoCmdInfoSearchSite = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoSearchSite.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoSearchSite.setDescription('The number of SearchSite commands requested since the Domino server was started.')
lnDominoCmdInfoSearchView = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoSearchView.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoSearchView.setDescription('The number of SearchView commands requested since the Domino server was started.')
lnDominoCmdInfoUnknown = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoUnknown.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoUnknown.setDescription('The number of unrecognized Domino commands.')
lnDominoCmdInfoLogin = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoLogin.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoLogin.setDescription('The number of Login commands requested since the Domino server was started.')
lnDominoCmdInfoNavigate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoNavigate.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoNavigate.setDescription('The number of Navigate commands requested since the Domino server was started.')
lnDominoCmdInfoReadForm = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoReadForm.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoReadForm.setDescription('The number of Read Form commands requested since the Domino server was started.')
lnDominoCmdInfoTotal = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCmdInfoTotal.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCmdInfoTotal.setDescription('The total number of commands performed since the Domino server was started.')
lnDominoCfgPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgPortNumber.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgPortNumber.setDescription('The TCP/IP port number from the server record.')
lnDominoCfgPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgPortStatus.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgPortStatus.setDescription('The TCP/IP port status (enabled or disabled).')
lnDominoCfgHostName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgHostName.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgHostName.setDescription('The HostName of the Domino server.')
lnDominoCfgDNSLookup = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDNSLookup.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgDNSLookup.setDescription('The status of DNS lookup (enabled or disabled).')
lnDominoCfgHomeURL = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgHomeURL.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgHomeURL.setDescription('The URL that requests are directed to if only the server name is specified.')
lnDominoCfgWelcomePage = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgWelcomePage.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgWelcomePage.setDescription('The page name to direct to if no explicit page name is specified in the URL.')
lnDominoCfgActiveThreadsMax = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgActiveThreadsMax.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgActiveThreadsMax.setDescription('The maximum number of active threads servicing HTTP requests.')
lnDominoCfgActiveThreadsMin = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgActiveThreadsMin.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgActiveThreadsMin.setDescription('The minimum number of active threads servicing HTTP requests.')
lnDominoCfgSSLPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgSSLPortNumber.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgSSLPortNumber.setDescription('The TCP/IP port number for HTTP requests using SLL.')
lnDominoCfgSSLStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgSSLStatus.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgSSLStatus.setDescription('The SSL status (enabled or disabled).')
lnDominoCfgSSLKeyFile = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgSSLKeyFile.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgSSLKeyFile.setDescription('The file name for SSL keys.')
lnDominoCfgCacheDirectory = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgCacheDirectory.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgCacheDirectory.setDescription('The directory for the Domino cache.')
lnDominoCfgCacheSizeMax = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgCacheSizeMax.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgCacheSizeMax.setDescription('The maximum size of the Domino cache in MB.')
lnDominoCfgCacheDelete = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgCacheDelete.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgCacheDelete.setDescription('Delete Domino cache on shutdown (enabled or disabled).')
lnDominoCfgGarbageCollectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgGarbageCollectionStatus.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgGarbageCollectionStatus.setDescription('Status of garbage collection (enabled or disabled).')
lnDominoCfgGarbageCollectionInterval = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgGarbageCollectionInterval.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgGarbageCollectionInterval.setDescription('The interval between garbage collections in minutes.')
lnDominoCfgImageFormat = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgImageFormat.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgImageFormat.setDescription('Graphics conversion image format.')
lnDominoCfgImageInterlaced = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgImageInterlaced.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgImageInterlaced.setDescription('Graphics interlacing (enabled or disabled).')
lnDominoCfgViewLines = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgViewLines.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgViewLines.setDescription('The number of lines per view segment.')
lnDominoCfgDirectoryHTML = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryHTML.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgDirectoryHTML.setDescription('The location of the HTML directory setting.')
lnDominoCfgDirectoryURLPathCGI = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryURLPathCGI.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgDirectoryURLPathCGI.setDescription('The CGI URL path.')
lnDominoCfgDirectoryCGI = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryCGI.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgDirectoryCGI.setDescription('The location of the CGI directory setting.')
lnDominoCfgDirectoryURLPathIcons = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryURLPathIcons.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgDirectoryURLPathIcons.setDescription('The Domino icons URL path.')
lnDominoCfgDirectoryIcons = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgDirectoryIcons.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgDirectoryIcons.setDescription('The location of the Domino icons directory setting.')
lnDominoCfgLogAccess = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgLogAccess.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgLogAccess.setDescription('The filename for Domino access logs.')
lnDominoCfgLogError = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgLogError.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgLogError.setDescription('The filename for Domino error logs.')
lnDominoCfgLogTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgLogTimeStamp.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgLogTimeStamp.setDescription('The Domino timestamp format.')
lnDominoCfgLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgLogFilter.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgLogFilter.setDescription('The Domino log filter setting.')
lnDominoCfgTimeoutIdleThread = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgTimeoutIdleThread.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgTimeoutIdleThread.setDescription('The interval (in minutes) before idle threads timeout.')
lnDominoCfgTimeoutInput = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgTimeoutInput.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgTimeoutInput.setDescription('The interval (in minutes) before timeout expires while waiting for input.')
lnDominoCfgTimeoutOutput = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgTimeoutOutput.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgTimeoutOutput.setDescription('The interval (in minutes) before timeout expires while waiting for output.')
lnDominoCfgTimeoutCGI = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 15, 3, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnDominoCfgTimeoutCGI.setStatus('optional')
if mibBuilder.loadTexts: lnDominoCfgTimeoutCGI.setDescription('The interval (in minutes) before CGI timeout expires while waiting for input.')
lnCalTotalAllApptsResources = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalAllApptsResources.setStatus('optional')
if mibBuilder.loadTexts: lnCalTotalAllApptsResources.setDescription('The total number of scheduled appointment and resource reservations.')
lnCalTotalAllUsersResources = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalAllUsersResources.setStatus('optional')
if mibBuilder.loadTexts: lnCalTotalAllUsersResources.setDescription('The total number of resources that have been reserved, plus the number of users with scheduled appointments.')
lnCalTotalAppointments = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalAppointments.setStatus('optional')
if mibBuilder.loadTexts: lnCalTotalAppointments.setDescription('The total number of scheduled appointments.')
lnCalTotalReservations = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalReservations.setStatus('optional')
if mibBuilder.loadTexts: lnCalTotalReservations.setDescription('The total number of reservations for resources.')
lnCalTotalResources = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalResources.setStatus('optional')
if mibBuilder.loadTexts: lnCalTotalResources.setDescription('The total number of resources that have been reserved.')
lnCalTotalUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496795))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCalTotalUsers.setStatus('optional')
if mibBuilder.loadTexts: lnCalTotalUsers.setDescription('The total number of users that have scheduled appointments.')
lnCollectorTimeCollected = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 17, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCollectorTimeCollected.setStatus('mandatory')
if mibBuilder.loadTexts: lnCollectorTimeCollected.setDescription('Time and date at which the statistics collector task last collected statistics; represented as the number of seconds since midnight 1/1/70 GMT (UNIX epoch).')
lnCollectorTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 17, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnCollectorTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: lnCollectorTimeElapsed.setDescription('The time that has elapsed since the statistics collector task was started.')
lnMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lnMIBVersion.setDescription('Domino SNMP support level (MIB Version).')
lnQSBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnQSBuildNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lnQSBuildNumber.setDescription('The build number of the Query/Set Notes add-in task.')
lnClusterName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterName.setStatus('optional')
if mibBuilder.loadTexts: lnClusterName.setDescription('The name of the cluster this server is a member of.')
lnClusterAvailIndex = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterAvailIndex.setStatus('optional')
if mibBuilder.loadTexts: lnClusterAvailIndex.setDescription("The current percentage or an index of the current server's availability. A value of 0 indicates that the server has virtually no available resources. A value of 100 indicates that the server is completely available.")
lnClusterAvailThreshold = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterAvailThreshold.setStatus('optional')
if mibBuilder.loadTexts: lnClusterAvailThreshold.setDescription("The current setting of this server's availability threshold. The value is compared against lnClusterAvailIndex. BUSY - The availability index has dropped below the threshold.")
lnClusterPortName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterPortName.setStatus('optional')
if mibBuilder.loadTexts: lnClusterPortName.setDescription('Default PortName being used for intra cluster network traffic. There is no default port. Any available and active port may be used for intra cluster traffic.')
lnClusterProbeCount = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterProbeCount.setStatus('optional')
if mibBuilder.loadTexts: lnClusterProbeCount.setDescription('The total number of times this cluster member has completed a probe request for another cluster member.')
lnClusterProbeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterProbeTimeout.setStatus('optional')
if mibBuilder.loadTexts: lnClusterProbeTimeout.setDescription('In Minutes. The interval between intra cluster probes or cluster member heartbeats.')
lnClusterTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTable.setStatus('optional')
if mibBuilder.loadTexts: lnClusterTable.setDescription('A table containing one entry for each configured Notes server cluster member known by this server.')
lnClusterProbeError = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterProbeError.setStatus('optional')
if mibBuilder.loadTexts: lnClusterProbeError.setDescription('The number of times a server received an error while probing another server.')
lnClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7, 1), ).setMaxAccess("readonly").setIndexNames((0, "NOTES-MIB", "lnClusterTableIndex"))
if mibBuilder.loadTexts: lnClusterEntry.setStatus('optional')
if mibBuilder.loadTexts: lnClusterEntry.setDescription('The entry type definition for the lnClusterTable.')
lnClusterTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTableIndex.setStatus('optional')
if mibBuilder.loadTexts: lnClusterTableIndex.setDescription('A unique value for each entry in the lnClusterTable.')
lnClusterMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterMemberName.setStatus('optional')
if mibBuilder.loadTexts: lnClusterMemberName.setDescription('Name of Notes Cluster Member.')
lnClusterMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterMemberIndex.setStatus('optional')
if mibBuilder.loadTexts: lnClusterMemberIndex.setDescription('The last known load information for a cluster member.')
lnClusterFailoverByPathSucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterFailoverByPathSucc.setStatus('optional')
if mibBuilder.loadTexts: lnClusterFailoverByPathSucc.setDescription('The number of times this server was successfully able to redirect a client to another cluster member after the client was unable to open a database by pathname on a cluster member.')
lnClusterFailoverByPathUnsucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterFailoverByPathUnsucc.setStatus('optional')
if mibBuilder.loadTexts: lnClusterFailoverByPathUnsucc.setDescription('The number of times this server was unsuccessful at redirecting a client to another cluster member after the client was unable to open a database by pathname for a cluster member.')
lnClusterFailoverSucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterFailoverSucc.setStatus('optional')
if mibBuilder.loadTexts: lnClusterFailoverSucc.setDescription('The number of times this server was successfully able to redirect a client to another cluster member after the client was unable to open a database by replica ID on a cluster member.')
lnClusterFailoverUnsucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterFailoverUnsucc.setStatus('optional')
if mibBuilder.loadTexts: lnClusterFailoverUnsucc.setDescription('The number of times this server was unsuccessful at redirecting a client to another cluster member after the client was unable to open a database by replica ID on a cluster member.')
lnClusterLoadBalByPathSucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterLoadBalByPathSucc.setStatus('optional')
if mibBuilder.loadTexts: lnClusterLoadBalByPathSucc.setDescription('The number of times this server was successfully able to redirect a client to another cluster member after the client attempted to open a database by pathname on a cluster member that was BUSY.')
lnClusterLoadBalByPathUnsucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterLoadBalByPathUnsucc.setStatus('optional')
if mibBuilder.loadTexts: lnClusterLoadBalByPathUnsucc.setDescription('The number of times this server was unsuccessful at redirecting a client to another cluster member after the client attempted to open a database by pathname on a cluster member that was BUSY.')
lnClusterLoadBalSucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterLoadBalSucc.setStatus('optional')
if mibBuilder.loadTexts: lnClusterLoadBalSucc.setDescription('The number of times this server was successfully able to redirect a client to another cluster member after the client attempted to open a database by replica ID on a cluster member that was BUSY.')
lnClusterLoadBalUnsucc = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterLoadBalUnsucc.setStatus('optional')
if mibBuilder.loadTexts: lnClusterLoadBalUnsucc.setDescription('The number of times this server was unsuccessful at redirecting a client to another cluster member after the client attempted to open a database by replica ID on a cluster member that was BUSY.')
lnClusterOpenReqClustBusy = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterOpenReqClustBusy.setStatus('optional')
if mibBuilder.loadTexts: lnClusterOpenReqClustBusy.setDescription('The number of times that a client attempted to open a database on this cluster member when it and the rest of the cluster were BUSY.')
lnClusterOpenReqDBOutofServ = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterOpenReqDBOutofServ.setStatus('optional')
if mibBuilder.loadTexts: lnClusterOpenReqDBOutofServ.setDescription('The number of times a client attempted to open a database that has been marked as out of service on this cluster member.')
lnClusterOpenReqLoadBalanced = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterOpenReqLoadBalanced.setStatus('optional')
if mibBuilder.loadTexts: lnClusterOpenReqLoadBalanced.setDescription('The number of times a client attempted to open a database on this cluster member when the cluster member was BUSY.')
lnClusterTransIntAvgTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransIntAvgTime.setStatus('optional')
if mibBuilder.loadTexts: lnClusterTransIntAvgTime.setDescription('Average transaction time (in milliseconds) for this member of the cluster. Based on transaction data captured over a number of recent intervals of time.')
lnClusterTransIntInSec = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransIntInSec.setStatus('optional')
if mibBuilder.loadTexts: lnClusterTransIntInSec.setDescription('Current setting for the length of the intervals. Used to capture transaction data for load balance computations.')
lnClusterTransIntUsedInAvg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransIntUsedInAvg.setStatus('optional')
if mibBuilder.loadTexts: lnClusterTransIntUsedInAvg.setDescription('Current setting of the number for intervals being used to capture transaction data on load balance computations.')
lnClusterTransLastIntAvgTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransLastIntAvgTime.setStatus('optional')
if mibBuilder.loadTexts: lnClusterTransLastIntAvgTime.setDescription('Average transaction time for the last interval of transaction data captured on this cluster member.')
lnClusterTransNormValue = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 1, 1, 6, 4, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnClusterTransNormValue.setStatus('optional')
if mibBuilder.loadTexts: lnClusterTransNormValue.setDescription('The current setting for the acceptable average transaction time (in milliseconds) on this cluster member.')
lnNotesServerSetState = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnNotesServerSetState.setStatus('mandatory')
if mibBuilder.loadTexts: lnNotesServerSetState.setDescription("Set to 'down' to shut Notes server down, set to 'up' to restart Notes server. Note: access to this feature is controlled through external (non-SNMP) security measures.")
lnNotesServerState = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("not-responding", 3), ("crashed", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnNotesServerState.setStatus('mandatory')
if mibBuilder.loadTexts: lnNotesServerState.setDescription("Equals 'down' if the Notes server is down, equals 'up' if the Notes server is running.")
lnLastTrapSeq = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnLastTrapSeq.setStatus('mandatory')
if mibBuilder.loadTexts: lnLastTrapSeq.setDescription('Sequence number of last trap sent. Same as the index number that trap in the lnRecentTrapsTable.')
lnRecentTrapsTable = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 2, 4), )
if mibBuilder.loadTexts: lnRecentTrapsTable.setStatus('mandatory')
if mibBuilder.loadTexts: lnRecentTrapsTable.setDescription('A table containing the last 10 generated traps.')
lnRecentTrapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 2, 4, 1), ).setIndexNames((0, "NOTES-MIB", "lnTrapSeq"))
if mibBuilder.loadTexts: lnRecentTrapsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lnRecentTrapsEntry.setDescription('The entry type definition for the lnRecentTrapsTable.')
lnTrapSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTrapSeq.setStatus('mandatory')
if mibBuilder.loadTexts: lnTrapSeq.setDescription('A unique value for each trap record in the sequence of entries returned to the lnRecentTrapsTable.')
lnTrapInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTrapInfo.setStatus('mandatory')
if mibBuilder.loadTexts: lnTrapInfo.setDescription('A string containing the information for a trap.')
lnRemoteReboot = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnRemoteReboot.setStatus('mandatory')
if mibBuilder.loadTexts: lnRemoteReboot.setDescription("Set to 'yes' to reboot the entire system. This value will be returned as 'yes' if the system is in the process of rebooting but hasn't come down yet")
lnServerTbl = MibTable((1, 3, 6, 1, 4, 1, 334, 72, 2, 6), )
if mibBuilder.loadTexts: lnServerTbl.setStatus('optional')
if mibBuilder.loadTexts: lnServerTbl.setDescription('A table containing the list of Domino Servers that have been partitioned across this machine. This must be configured by the system administrator. This table only reflects the Domino Servers that are listed in the file lnsnmp.ini since there is no way to query a given machine for a list of potentially available servers.')
lnTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnTotalPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: lnTotalPartitions.setDescription("If the file lnsnmp.ini exists, this MIB variable will represent the number of 'Server=' entries in that file. If the file lnsnmp.ini does not exist, the value of lnTotalPartitions will equal zero.")
lnMPAIniFileLocation = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnMPAIniFileLocation.setStatus('mandatory')
if mibBuilder.loadTexts: lnMPAIniFileLocation.setDescription('The directory that the file lnsnmp.ini was read from. Normally this is either the Windows-NT directory or this will be /opt/lotus for UNIX systems. However, on either platform, if the file is not found, the PATH environment variable will be searched. The first instance of lnsnmp.ini in the PATH will be opened.')
lnServerTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1), ).setIndexNames((0, "NOTES-MIB", "lnServerTblIndex"))
if mibBuilder.loadTexts: lnServerTblEntry.setStatus('optional')
if mibBuilder.loadTexts: lnServerTblEntry.setDescription('The entry type definition for the lnServerTbl.')
lnServerTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblIndex.setStatus('optional')
if mibBuilder.loadTexts: lnServerTblIndex.setDescription('The MIB index for this row in the lnServerTbl.')
lnServerTblName = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblName.setStatus('optional')
if mibBuilder.loadTexts: lnServerTblName.setDescription("The name of the server as it appears in lnsnmp.ini. However, if a server's addin task registers with the Main Proxy Agent, The addin task will update the server's name with the correct name if a match can be found.")
lnServerTblNotesPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblNotesPartition.setStatus('optional')
if mibBuilder.loadTexts: lnServerTblNotesPartition.setDescription('The value that is entered in lnsnmp.ini. This MUST match the environment variable NOTESPARTITION for Domino Servers partitioned on Windows-NT Systems. This has no real meaning for Domino Servers on UNIX platforms.')
lnServerTblDataDir = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblDataDir.setStatus('optional')
if mibBuilder.loadTexts: lnServerTblDataDir.setDescription('The data directory of the given Domino server as entered in lnsnmp.ini; See lnServerTblDataDirValid for an indication on whether or not this is a valid Domino Server data directory.')
lnServerTblDataDirValid = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblDataDirValid.setStatus('optional')
if mibBuilder.loadTexts: lnServerTblDataDirValid.setDescription('The Main Proxy Agent validates the Domino Server data directory that is entered in lnsnmp.ini. This will be TRUE if this is a valid directory and the file notes.ini exists within that directory. It will be false otherwise.')
lnServerTblState = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerTblState.setStatus('optional')
if mibBuilder.loadTexts: lnServerTblState.setDescription('This will indicate the current state of the server. The server will be considered down until at least one of the Domino Management Agent tasks starts and registers with the Main Proxy Agent.')
lnServerIdentifiedItself = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnServerIdentifiedItself.setStatus('optional')
if mibBuilder.loadTexts: lnServerIdentifiedItself.setDescription('This will indicate if the server has ever run and identified itself to the Main Proxy Agent at any time during the current lifespan of the Main Proxy Agent. This may be used as an indication that a given Domino server may not be configured correctly in lnsnmp.ini. The server identification occurs when one of the Domino Management Agent addin tasks is started.')
lnServerTblSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 72, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnServerTblSetState.setStatus('optional')
if mibBuilder.loadTexts: lnServerTblSetState.setDescription('This will indicate the current state of the Domino server and allow remote SNMP control over stopping & starting the Domion server. The server will be considered down until at least one of the Domino management Agent addin tasks starts and registers with the Main Proxy Agent.')
lnEvtServer = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtServer.setStatus('mandatory')
if mibBuilder.loadTexts: lnEvtServer.setDescription('Originating server for this event.')
lnEvtType = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("communications", 1), ("security", 2), ("mail", 3), ("replication", 4), ("resource", 5), ("miscellaneous", 6), ("server", 7), ("alarm", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtType.setStatus('mandatory')
if mibBuilder.loadTexts: lnEvtType.setDescription('Returns a value for the type of this event.')
lnEvtSeverity = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("fatal", 1), ("failure", 2), ("warning1", 3), ("warning2", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: lnEvtSeverity.setDescription('Returns a value for the severity of this event.')
lnEvtWhen = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtWhen.setStatus('mandatory')
if mibBuilder.loadTexts: lnEvtWhen.setDescription('Returns a value for the date and time of this event.')
lnEvtData = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtData.setStatus('mandatory')
if mibBuilder.loadTexts: lnEvtData.setDescription('Information about this event.')
lnEvtSeq = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnEvtSeq.setStatus('mandatory')
if mibBuilder.loadTexts: lnEvtSeq.setDescription('Sequence number of this event for internal use only. This information is not available in this MIB variable. If you wish to determine the sequence number for the last trap, please see the variable lnControl.lnRecentTrapsTable.lnRecentTrapEntry.lnTrapSeq.')
lnAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 4, 1))
lnSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 72, 4, 2))
lnAlarmServerHandle = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmServerHandle.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmServerHandle.setDescription('This represents the server for which the alarm will be generated for.')
lnAlarmTargetHandle = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmTargetHandle.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmTargetHandle.setDescription('This represents the entity on the server that caused the alarm to be generated')
lnAlarmDate = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmDate.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmDate.setDescription('The date the alarm occured.')
lnAlarmTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmTime.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmTime.setDescription('The time the alarm occured.')
lnAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("normal", 0), ("informational", 1), ("disabled", 2), ("unmanaged", 3), ("unknown", 4), ("marginal", 5), ("warning", 6), ("minor", 7), ("major", 8), ("critical", 9))))
if mibBuilder.loadTexts: lnAlarmSeverity.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmSeverity.setDescription('The severity of the alarm being generated by the SNMP trap')
lnAlarmIntArg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: lnAlarmIntArg.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmIntArg.setDescription('Returns a value for the integer argument associated with the Alarm.')
lnAlarmLongArg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnAlarmLongArg.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmLongArg.setDescription('The long integer argument associated with the Alarm.')
lnAlarmDoubleArg = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 8), OctetString())
if mibBuilder.loadTexts: lnAlarmDoubleArg.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmDoubleArg.setDescription('The string representation of a floating point value.')
lnAlarmTextArg1 = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 9), OctetString())
if mibBuilder.loadTexts: lnAlarmTextArg1.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmTextArg1.setDescription('The first text argument associated with the Alarm.')
lnAlarmTextArg2 = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 10), OctetString())
if mibBuilder.loadTexts: lnAlarmTextArg2.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmTextArg2.setDescription('The second text argument associated with the Alarm.')
lnAlarmSeverityStr = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 11), DisplayString())
if mibBuilder.loadTexts: lnAlarmSeverityStr.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmSeverityStr.setDescription('A string representation of the alarm severity. This is used in the trap that is sent to the management station to be displayed on the NetView event cards.')
lnAlarmTypeStr = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 12), DisplayString())
if mibBuilder.loadTexts: lnAlarmTypeStr.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmTypeStr.setDescription("A string representation of the alarm's type. This is used in the trap that is sent to the management station to be displayed on the NetView event cards.")
lnAlarmMessage = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 13), DisplayString())
if mibBuilder.loadTexts: lnAlarmMessage.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmMessage.setDescription('A message indicating why the alarm was raised. This is used in the trap that is sent to the management station to be displayed on the NetView event cards.')
lnAlarmMessageExt = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 14), DisplayString())
if mibBuilder.loadTexts: lnAlarmMessageExt.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmMessageExt.setDescription('A message extension with more detailed information explaining why the alarm was raised. This is used in the trap that is sent to the management station to be displayed on the NetView event cards.')
lnAlarmServerName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 1, 15), DisplayString())
if mibBuilder.loadTexts: lnAlarmServerName.setStatus('optional')
if mibBuilder.loadTexts: lnAlarmServerName.setDescription('The server name of the Notes server the alarm was raised against. This is used in the trap that is sent to the management station to be displayed in the NetView event cards.')
lnSignalServerId = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnSignalServerId.setStatus('optional')
if mibBuilder.loadTexts: lnSignalServerId.setDescription('This variable will be embedded in the lnSignalServerConfigChg trap. This is an integer that represents the ServerId of the Notes server that caused the signal to be raised.')
lnSignalOldServerType = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnSignalOldServerType.setStatus('optional')
if mibBuilder.loadTexts: lnSignalOldServerType.setDescription('This variable will be embedded in the lnSignalServerConfigChg trap. This is an the integer value representing the old server class.')
lnSignalNewServerType = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnSignalNewServerType.setStatus('optional')
if mibBuilder.loadTexts: lnSignalNewServerType.setDescription('This variable will be embedded in the lnSignalServerConfigChg trap. This is an integer value representing the new server class.')
lnSignalWhatHasChanged = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: lnSignalWhatHasChanged.setStatus('optional')
if mibBuilder.loadTexts: lnSignalWhatHasChanged.setDescription('This variable will be embedded in the lnSignalServerConfigChg trap. This is an integer value indicating what has changed on the server.')
lnSignalServerName = MibScalar((1, 3, 6, 1, 4, 1, 334, 72, 4, 2, 5), DisplayString())
if mibBuilder.loadTexts: lnSignalServerName.setStatus('optional')
if mibBuilder.loadTexts: lnSignalServerName.setDescription('The server name. This will appear in the information trap displayed in the NetView Event Cards when a specific server has had all its alarms cleared.')
lnUnknownEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,0)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
if mibBuilder.loadTexts: lnUnknownEventTrap.setDescription('This trap indicates that a Notes Event of Unknown severity has occurred. Configuration of which events generated traps is performed in the Public Address book.')
lnFatalEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,1)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
if mibBuilder.loadTexts: lnFatalEventTrap.setDescription('This trap indicates that a Notes Event of Fatal severity has occurred. Configuration of which events generated traps is performed in the Public Address book.')
lnFailureEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,2)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
if mibBuilder.loadTexts: lnFailureEventTrap.setDescription('This trap indicates that a Notes Event of Failure severity has occurred. Configuration of which events generated traps is performed in the Public Address book.')
lnWarning1EventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,3)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
if mibBuilder.loadTexts: lnWarning1EventTrap.setDescription('This trap indicates that a Notes Event of Warning1 severity has occurred. Configuration of which events generated traps is performed in the Public Address book.')
lnWarning2EventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,4)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
if mibBuilder.loadTexts: lnWarning2EventTrap.setDescription('This trap indicates that a Notes Event of Warning2 severity has occurred. Configuration of which events generated traps is performed in the Public Address book.')
lnNormalEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,5)).setObjects(("NOTES-MIB", "lnEvtServer"), ("NOTES-MIB", "lnEvtType"), ("NOTES-MIB", "lnEvtSeverity"), ("NOTES-MIB", "lnEvtWhen"), ("NOTES-MIB", "lnEvtData"), ("NOTES-MIB", "lnEvtSeq"))
if mibBuilder.loadTexts: lnNormalEventTrap.setDescription('This trap indicates that a Notes Event of Normal severity has occurred. Configuration of which events generated traps is performed in the Public Address book.')
lnServerUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,11)).setObjects(("NOTES-MIB", "lnEvtServer"))
if mibBuilder.loadTexts: lnServerUpTrap.setDescription('This trap indicates that the Notes server has come up.')
lnServerDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,12)).setObjects(("NOTES-MIB", "lnEvtServer"))
if mibBuilder.loadTexts: lnServerDownTrap.setDescription('This trap indicates that the Notes server has gone down.')
lnServerPulseFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,13)).setObjects(("NOTES-MIB", "lnEvtServer"))
if mibBuilder.loadTexts: lnServerPulseFailedTrap.setDescription('This trap indicates that the Notes server is not responding to the Lotus notes SNMP agent. The server may have crashed, or may be busy.')
lnServerPulseRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,14)).setObjects(("NOTES-MIB", "lnEvtServer"))
if mibBuilder.loadTexts: lnServerPulseRestoredTrap.setDescription('This trap indicates that the Notes server is now responding to the Lotus notes SNMP agent.')
lnSystemRebootingTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,15))
if mibBuilder.loadTexts: lnSystemRebootingTrap.setDescription('This trap indicates that the operating system the Notes server is running has recieved an SNMP reboot request. The system is now rebooting, this may take up to 5 minutes.')
lnServerNotRespondingTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,16)).setObjects(("NOTES-MIB", "lnEvtServer"))
if mibBuilder.loadTexts: lnServerNotRespondingTrap.setDescription('This trap indicates that the Notes server has not responded to the Lotus Notes SNMP agent for several minutes. There is a chance that the Notes server may have crashed.')
lnServerNowRespondingTrap = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,17)).setObjects(("NOTES-MIB", "lnEvtServer"))
if mibBuilder.loadTexts: lnServerNowRespondingTrap.setDescription('This trap indicates that the Notes server is now responding to the Lotus Notes SNMP agent after failing to respond for several minutes. The server may be overloaded.')
lnAlarmStatisticThreshold = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,30)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmStatisticThreshold.setDescription('This trap is sent by NotesView for AIX when an alarm statistic threshold is hit')
lnAlarmServerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,31)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmServerStatusChange.setDescription('This trap is sent by NotesView for AIX when the alarm status of the server changes.')
lnAlarmPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,32)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmPortStatusChange.setDescription('This trap is sent by NotesView for AIX when the alarm status of a port changes.')
lnAlarmTaskStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,33)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmTaskStatusChange.setDescription('This trap is sent by NotesView for AIX when the alarm status of a permanent task changes.')
lnAlarmNVStatClear = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,34)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmNVStatClear.setDescription('This trap is sent by NotesView for AIX to indicate that an alarm statistic threshold condition has been cleared.')
lnAlarmAutoDiscovery = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,35)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmAutoDiscovery.setDescription('This trap is sent by NotesView for AIX to indicate a discrepancy between the information that Autodiscovery has detected, and what the server has reported.')
lnAlarmServerNotesEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,36)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmServerNotesEvent.setDescription('This trap is sent by NotesView for AIX when a Notes server event occurs.')
lnAlarmServerCfgChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,37)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmServerCfgChangeEvent.setDescription('This trap is sent by NotesView for AIX if the server configuration has changed.')
lnAlarmMailProbeEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,38)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmMailProbeEvent.setDescription('This trap is sent by NotesView for AIX if the Mail Probe task needs to generate an alarm.')
lnAlarmNSFRemoteConsoleEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,40)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmNSFRemoteConsoleEvent.setDescription('This trap is sent by NotesView for AIX if the there is an NSF remote console event')
lnAlarmMailBoxEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,41)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmMailBoxEvent.setDescription('This trap is sent by NotesView for AIX if the there is a MailBox event.')
lnAlarmServerSNMPEvent = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,39)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"), ("NOTES-MIB", "lnAlarmTargetHandle"), ("NOTES-MIB", "lnAlarmDate"), ("NOTES-MIB", "lnAlarmTime"), ("NOTES-MIB", "lnAlarmSeverity"), ("NOTES-MIB", "lnAlarmIntArg"), ("NOTES-MIB", "lnAlarmLongArg"), ("NOTES-MIB", "lnAlarmDoubleArg"), ("NOTES-MIB", "lnAlarmTextArg1"), ("NOTES-MIB", "lnAlarmTextArg2"))
if mibBuilder.loadTexts: lnAlarmServerSNMPEvent.setDescription('This trap is sent by NotesView for AIX if the there is an SNMP event that generates an alarm.')
lnAlarmClearAll = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,50))
if mibBuilder.loadTexts: lnAlarmClearAll.setDescription('This trap is sent by NotesView for AIX to cause the alarm manager daemon (nvalarmgrd) to clear all alarms for all servers and connections. The status of all objects on the map will be reset to UNKNOWN.')
lnAlarmClearServers = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,51)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"))
if mibBuilder.loadTexts: lnAlarmClearServers.setDescription('This trap is sent by NotesView for AIX to cause the alarm manager daemon (nvalarmgrd) to clear all alarms for a given server or group of servers. The status of all the connections for each serverId specified in the PDU will also be cleared. The resulting status of all related objects on the map will be reset to UNKNOWN.')
lnSignalAutodiscoveryStart = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,52))
if mibBuilder.loadTexts: lnSignalAutodiscoveryStart.setDescription('This trap is sent by the NotesView for AIX console when the Autodiscovery process starts. The NotesView Alarm Manager daemon (nvalarmgrd) will suspends all Alarm processing until the Autodiscovery process is complete.')
lnSignalAutodiscoveryFinished = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,53))
if mibBuilder.loadTexts: lnSignalAutodiscoveryFinished.setDescription('This trap will be used by NotesView for AIX to signal the Alarm Manager daemon (nvalarmgrd) that the Autodiscovery process has completed or stopped. Alarm processing will continue at this point, and all alarms that were received during Autodiscovery will be processed.')
lnSignalServerConfigChg = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,54)).setObjects(("NOTES-MIB", "lnSignalServerId"), ("NOTES-MIB", "lnSignalOldServerType"), ("NOTES-MIB", "lnSignalNewServerType"), ("NOTES-MIB", "lnSignalWhatHasChanged"))
if mibBuilder.loadTexts: lnSignalServerConfigChg.setDescription('This trap will be used by NotesView for AIX to signal the Alarm Manager daemon (nvalarmgrd) that there has been a Notes server configuration change.')
lnTrapRequestMostSevereStatus = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,55)).setObjects(("NOTES-MIB", "lnAlarmServerHandle"))
if mibBuilder.loadTexts: lnTrapRequestMostSevereStatus.setDescription('This trap will be sent by the NotesView management station when it needs to be updated with the most severe status of a given object')
lnTrapDisplayAlarmClearServers = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,60)).setObjects(("NOTES-MIB", "lnSignalServerId"), ("NOTES-MIB", "lnSignalServerName"))
if mibBuilder.loadTexts: lnTrapDisplayAlarmClearServers.setDescription('This trap will be generated by the NotesView Alarm Manager in order to display which server had its alarms cleared as a result of receiving lnAlarmClearServers (trap type 51). One of these traps will be generated for each server bound in the PDU for the lnAlarmClearServers trap. For display only. The Alarm Manager does not do any processing for this trap.')
lnTrapDisplayClearedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,70)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
if mibBuilder.loadTexts: lnTrapDisplayClearedAlarm.setDescription("This trap will be sent by the NotesView management station when it receives a clearing alarm from the poller (or console) to display the alarm information on the NetView event cards. The alarms are configured not to be displayed in the event cards, since the PDU of an Alarm trap doesn't contain any information useful to the user. Once the alarm is received, the PDU is deciphered and this informational trap is generated by the NotesView Alarm Manager.")
lnTrapDisplayIndeterminateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,71)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
if mibBuilder.loadTexts: lnTrapDisplayIndeterminateAlarm.setDescription("This trap will be sent by the NotesView management station when it receives an indeterminate alarm from the poller (or console) to display the alarm information on the NetView event cards. The alarms are configured not to be displayed in the event cards, since the PDU of an Alarm trap doesn't contain any information useful to the user. Once the alarm is received, the PDU is deciphered and this informational trap is generated by the NotesView Alarm Manager.")
lnTrapDisplayWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,72)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
if mibBuilder.loadTexts: lnTrapDisplayWarningAlarm.setDescription("This trap will be sent by the NotesView management station when it receives a warning alarm from the poller (or console) to display the alarm information on the NetView event cards. The alarms are configured not to be displayed on the event cards, since the PDU of an Alarm trap doesn't contain any information useful to the user. Once the alarm is received, the PDU is deciphered and this informational trap is generated by the NotesView Alarm Manager.")
lnTrapDisplayMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,73)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
if mibBuilder.loadTexts: lnTrapDisplayMinorAlarm.setDescription("This trap will be sent by the NotesView management station when it receives a minor alarm from the poller (or console) to display the alarm information on the NetView event cards. The alarms are configured not to be displayed in the event cards, since the PDU of an Alarm trap doesn't contain any information useful to the user. Once the alarm is received, the PDU is deciphered and this informational trap is generated by the NotesView Alarm Manager.")
lnTrapDisplayCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,74)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
if mibBuilder.loadTexts: lnTrapDisplayCriticalAlarm.setDescription("This trap will be sent by the NotesView management station when it receives a critical alarm from the poller (or console) to display the alarm information on the NetView event cards. The alarms are configured not to be displayed in the event cards, since the PDU of an Alarm trap doesn't contain any information useful to the user. Once the alarm is received, the PDU is deciphered and this informational trap is generated by the NotesView Alarm Manager.")
lnTrapDisplayMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 334, 72) + (0,75)).setObjects(("NOTES-MIB", "lnAlarmSeverityStr"), ("NOTES-MIB", "lnAlarmTypeStr"), ("NOTES-MIB", "lnAlarmMessage"), ("NOTES-MIB", "lnAlarmMessageExt"))
if mibBuilder.loadTexts: lnTrapDisplayMajorAlarm.setDescription("This trap will be sent by the NotesView management station when it receives a major alarm from the poller (or console) to display the alarm information on the NetView event cards. The alarms are configured not to be displayed in the event cards, since the PDU of an Alarm trap doesn't contain any information useful to the user. Once the alarm is received, the PDU is deciphered and this informational trap is generated by the NotesView Alarm Manager.")
mibBuilder.exportSymbols("NOTES-MIB", lnObjectFileName=lnObjectFileName, lnX25UnderRuns=lnX25UnderRuns, lnDominoReqPerHourTotal=lnDominoReqPerHourTotal, lnXPCMsgsSent=lnXPCMsgsSent, lnWebProcAccGopher=lnWebProcAccGopher, lnDominoThreadsPeakTotal=lnDominoThreadsPeakTotal, mapInfo=mapInfo, lnDriveSize=lnDriveSize, lnServerTblSetState=lnServerTblSetState, lnServerTblName=lnServerTblName, lnNBAvailCmdBlocks=lnNBAvailCmdBlocks, lnWebProcVpoolMaxText=lnWebProcVpoolMaxText, lnRepClusterSecondsOnQueueMax=lnRepClusterSecondsOnQueueMax, lnDiskFixed=lnDiskFixed, lnObjectSharedBy15=lnObjectSharedBy15, lnWebLogMessages=lnWebLogMessages, lnServerTblIndex=lnServerTblIndex, lnWarning2EventTrap=lnWarning2EventTrap, lnEvtData=lnEvtData, lnServerSystemVersion=lnServerSystemVersion, lnComm=lnComm, lnWebProcEntry=lnWebProcEntry, lnRepSuccessful=lnRepSuccessful, lnCalTotalReservations=lnCalTotalReservations, lnDominoCmdInfoOpenForm=lnDominoCmdInfoOpenForm, lnClusterTransIntInSec=lnClusterTransIntInSec, lnTrapRequestMostSevereStatus=lnTrapRequestMostSevereStatus, lnTaskType=lnTaskType, lnClusterFailoverSucc=lnClusterFailoverSucc, lnDBNIFPoolUsed=lnDBNIFPoolUsed, lnEvtSeq=lnEvtSeq, lnMTATable=lnMTATable, lnNBReportPeriod=lnNBReportPeriod, lnClusterLoadBalUnsucc=lnClusterLoadBalUnsucc, lnObjectSharedBy14=lnObjectSharedBy14, lnAlarmTime=lnAlarmTime, lnRepClusterSecondsOnQueue=lnRepClusterSecondsOnQueue, lnTotalRoutedMail=lnTotalRoutedMail, lnDominoCmdInfoOpenDocument=lnDominoCmdInfoOpenDocument, lnDominoCmdInfoNavigate=lnDominoCmdInfoNavigate, lnCalTotalResources=lnCalTotalResources, lnAlarmMessage=lnAlarmMessage, lnDailyTriggeredRuns=lnDailyTriggeredRuns, lnHourlyUsedRunTime=lnHourlyUsedRunTime, lnAlarmClearAll=lnAlarmClearAll, lnDBBufferPoolAllocated=lnDBBufferPoolAllocated, lnTrapDisplayWarningAlarm=lnTrapDisplayWarningAlarm, lnXPCKiloBytesReceived=lnXPCKiloBytesReceived, lnAlarmSeverityStr=lnAlarmSeverityStr, lnAverageMailDeliverTime=lnAverageMailDeliverTime, lnDominoCfgGarbageCollectionInterval=lnDominoCfgGarbageCollectionInterval, lnServerAdministrators=lnServerAdministrators, lnNBMaxSessions=lnNBMaxSessions, lnNetPortSessRecycling=lnNetPortSessRecycling, lnMinimumMailServerHops=lnMinimumMailServerHops, lnWebUrlFail=lnWebUrlFail, lnAlarmStatisticThreshold=lnAlarmStatisticThreshold, lnWebTimeCurrent=lnWebTimeCurrent, lnAlarmServerHandle=lnAlarmServerHandle, lnHourlyUnsuccessfulRuns=lnHourlyUnsuccessfulRuns, lnMTATotalRouted=lnMTATotalRouted, lnDominoCmdInfoDeleteDocument=lnDominoCmdInfoDeleteDocument, lnDominoCfgWelcomePage=lnDominoCfgWelcomePage, lnTrapSeq=lnTrapSeq, lnWebAccessHttp=lnWebAccessHttp, lnServerPulseFailedTrap=lnServerPulseFailedTrap, lnDatabase=lnDatabase, lnObjectTable=lnObjectTable, lnXPCCarrierSpeed=lnXPCCarrierSpeed, lnClusterTable=lnClusterTable, lnOpenRedirects=lnOpenRedirects, lnMailDomain=lnMailDomain, lnWebProcUrlFail=lnWebProcUrlFail, lnDominoThreadsPeakTime=lnDominoThreadsPeakTime, lnRepClusterWorkQueueDepthAvg=lnRepClusterWorkQueueDepthAvg, lnServerUsersTable=lnServerUsersTable, lnClusterMemberName=lnClusterMemberName, lnAlarmServerCfgChangeEvent=lnAlarmServerCfgChangeEvent, lnHourlyAccessDenials=lnHourlyAccessDenials, lnObjectSharedBy06=lnObjectSharedBy06, lnTaskEntry=lnTaskEntry, lnDominoBuildName=lnDominoBuildName, lnWebProcessState=lnWebProcessState, lnDBCacheLookups=lnDBCacheLookups, lnRepClusterDocsDeleted=lnRepClusterDocsDeleted, lnRepClusterFilesLocal=lnRepClusterFilesLocal, lnObjectSharedBy01=lnObjectSharedBy01, lnDriveIndex=lnDriveIndex, lnX25WindowSize=lnX25WindowSize, lnMemFree=lnMemFree, lnServerNotesVersion=lnServerNotesVersion, lnSNASendPacingSize=lnSNASendPacingSize, lnWebImageCacheMisses=lnWebImageCacheMisses, lnMTATransferredMsgs=lnMTATransferredMsgs, lnSignalAutodiscoveryStart=lnSignalAutodiscoveryStart, lnClusterProbeError=lnClusterProbeError, lnDominoCfgDirectoryURLPathCGI=lnDominoCfgDirectoryURLPathCGI, lnServerUsersIndex=lnServerUsersIndex, lnDominoCmdInfoSearchView=lnDominoCmdInfoSearchView, lnAlarmMailProbeEvent=lnAlarmMailProbeEvent, lnWebProcessTable=lnWebProcessTable, lnDominoCfgImageFormat=lnDominoCfgImageFormat, lnNBCRCErrors=lnNBCRCErrors, lnDominoCmdInfoOpenAgent=lnDominoCmdInfoOpenAgent, lnClusterTransIntUsedInAvg=lnClusterTransIntUsedInAvg, lnAlarmDoubleArg=lnAlarmDoubleArg, lnNormalEventTrap=lnNormalEventTrap, lnRepClusterSecondsOnQueueAvg=lnRepClusterSecondsOnQueueAvg, lnDiskFreeSwap=lnDiskFreeSwap, lnDominoCmdInfoOpenHelp=lnDominoCmdInfoOpenHelp, lnDominoCmdInfoOpenAbout=lnDominoCmdInfoOpenAbout, lnClusterProbeTimeout=lnClusterProbeTimeout, lnWebTimeStart=lnWebTimeStart, lnAlarmNVStatClear=lnAlarmNVStatClear, lnWebRetrieverVersion=lnWebRetrieverVersion, lnDailyScheduledRuns=lnDailyScheduledRuns, lnXPCMsgsReceived=lnXPCMsgsReceived, lnDominoBuildPlatform=lnDominoBuildPlatform, lnDominoCacheCommandDisplaceRate=lnDominoCacheCommandDisplaceRate, lnMIBVersion=lnMIBVersion, lnRouterStatus=lnRouterStatus, lnObject=lnObject, lnServerNotRespondingTrap=lnServerNotRespondingTrap, lnWebProcIndex=lnWebProcIndex, lnDominoStartTime=lnDominoStartTime, lnClusterOpenReqLoadBalanced=lnClusterOpenReqLoadBalanced, lnSNAMaxSendRUSize=lnSNAMaxSendRUSize, lnRepClusterFilesRemote=lnRepClusterFilesRemote, lnServerCoprocessor=lnServerCoprocessor, lnNBAlignmentErrors=lnNBAlignmentErrors, lnWebTimeDuration=lnWebTimeDuration, lnSNALNCVersion=lnSNALNCVersion, lnServerTblDataDir=lnServerTblDataDir, lnDriveFree=lnDriveFree, lnWebProcKBytesRec=lnWebProcKBytesRec, lnObjectSharedBy16=lnObjectSharedBy16, lnMinimumMailSizeDelivered=lnMinimumMailSizeDelivered, lnDBCacheMaxEntries=lnDBCacheMaxEntries, lnClusterOpenReqDBOutofServ=lnClusterOpenReqDBOutofServ, lnRepDocsUpdated=lnRepDocsUpdated, lnServerStats=lnServerStats, lnRepClusterServers=lnRepClusterServers, lnDBBufferPoolReads=lnDBBufferPoolReads, lnNBSentPackets=lnNBSentPackets, lnRepClusterFailed=lnRepClusterFailed, lnSNAActiveSessions=lnSNAActiveSessions, lnReplicatorStatus=lnReplicatorStatus, lnDominoCacheDatabaseHitRate=lnDominoCacheDatabaseHitRate, lnDominoBuildVersion=lnDominoBuildVersion, lnCalTotalAllUsersResources=lnCalTotalAllUsersResources, lnStatsStartTime=lnStatsStartTime, lnRepClusterRetrySkipped=lnRepClusterRetrySkipped, lnDominoCmdInfoOpenIcon=lnDominoCmdInfoOpenIcon, lnWebVpoolMaxText=lnWebVpoolMaxText, lnDBCacheInitialDbOpens=lnDBCacheInitialDbOpens, lnMaximumMailServerHops=lnMaximumMailServerHops, lnAlarmServerName=lnAlarmServerName, lnDominoCfgCacheSizeMax=lnDominoCfgCacheSizeMax, lnSNAVersion=lnSNAVersion, lnSNARcvPacingSize=lnSNARcvPacingSize, lnDominoCacheDatabaseDisplaceRate=lnDominoCacheDatabaseDisplaceRate, lnDBCacheOvercrowdingRejections=lnDBCacheOvercrowdingRejections, lnServerOpenReqMaxUsers=lnServerOpenReqMaxUsers, lnSNATPState=lnSNATPState, lnServerUsers=lnServerUsers, lnXPCPortSpeed=lnXPCPortSpeed, lnServerOpenReqPreV4Client=lnServerOpenReqPreV4Client, lnWebUrlRequested=lnWebUrlRequested, lnWebProcPid=lnWebProcPid, lnStatsCurrentTime=lnStatsCurrentTime, lnWebProcVpoolMaxUrl=lnWebProcVpoolMaxUrl, lnNotesServerState=lnNotesServerState, lnEvtWhen=lnEvtWhen, lnAlarmServerNotesEvent=lnAlarmServerNotesEvent, lnDominoCfgActiveThreadsMax=lnDominoCfgActiveThreadsMax, lnReplicaCluster=lnReplicaCluster, lnDominoCmdInfoSearchSite=lnDominoCmdInfoSearchSite, lnSNAMaxRcvRUSize=lnSNAMaxRcvRUSize, lnTransferredMail=lnTransferredMail, lnDBBufferPoolUsed=lnDBBufferPoolUsed, lnDominoReqPerDayPeakTime=lnDominoReqPerDayPeakTime, lnServerUsersPeak=lnServerUsersPeak, lnMTATotalKBTransferred=lnMTATotalKBTransferred, lnNetPortSessLimit=lnNetPortSessLimit, lnRepClusterDocsUpdated=lnRepClusterDocsUpdated, lnNetWareSPXIIStatsLogged=lnNetWareSPXIIStatsLogged, lnObjectSharedBy19=lnObjectSharedBy19, lnX25PktSize=lnX25PktSize, lnObjectSharedBy13=lnObjectSharedBy13, lnDBBufferControlPoolSize=lnDBBufferControlPoolSize, lnNBCollisionErrors=lnNBCollisionErrors, lnAgentMgr=lnAgentMgr, lnMemSwapSize=lnMemSwapSize, lnDominoCfgDirectoryHTML=lnDominoCfgDirectoryHTML, lnRecentTrapsTable=lnRecentTrapsTable, lnDominoConfig=lnDominoConfig, lnClusterName=lnClusterName, lnEventStatus=lnEventStatus, lnX25LocalDTEAddress=lnX25LocalDTEAddress, lnNetPortSessLimitMin=lnNetPortSessLimitMin, lnOpenRequest=lnOpenRequest, lnDBCacheCurrentEntries=lnDBCacheCurrentEntries, lnDBBufferPoolMaximum=lnDBBufferPoolMaximum, lnDriveTable=lnDriveTable, lnTaskTable=lnTaskTable, lnDominoReqPerHourPeak=lnDominoReqPerHourPeak, lnDominoCfgHomeURL=lnDominoCfgHomeURL, lnMemAllocShared=lnMemAllocShared, lnNetPortSessLimitMax=lnNetPortSessLimitMax, lnRepDocsAdded=lnRepDocsAdded, lnX25RemoteResets=lnX25RemoteResets, lnMTAEntry=lnMTAEntry, lnMPAIniFileLocation=lnMPAIniFileLocation, lnRepClusterWorkQueueDepthMax=lnRepClusterWorkQueueDepthMax, lnXPCEntry=lnXPCEntry, lnEvtSeverity=lnEvtSeverity, lnClusterFailoverUnsucc=lnClusterFailoverUnsucc, lnCalTotalAppointments=lnCalTotalAppointments, lnDominoCfgSSLPortNumber=lnDominoCfgSSLPortNumber, lnServerBusyTimeQueryRetObjSched=lnServerBusyTimeQueryRetObjSched, lnServerTblDataDirValid=lnServerTblDataDirValid, lnCollector=lnCollector, lnClusterEntry=lnClusterEntry, lnClusterAvailThreshold=lnClusterAvailThreshold, lnObjectSharedBy03=lnObjectSharedBy03, lnWebProcCacheHits=lnWebProcCacheHits, lnDominoInfo=lnDominoInfo, lnDominoCfgDNSLookup=lnDominoCfgDNSLookup, lnCollectorTimeCollected=lnCollectorTimeCollected, lnAlarmNSFRemoteConsoleEvent=lnAlarmNSFRemoteConsoleEvent, lnWebProcVpoolCurMarker=lnWebProcVpoolCurMarker, lnTrapDisplayClearedAlarm=lnTrapDisplayClearedAlarm, lnNetPortKBytesSent=lnNetPortKBytesSent, lnAlarmServerStatusChange=lnAlarmServerStatusChange, lnDominoCmdInfoTotal=lnDominoCmdInfoTotal, lnServerUsers5MinPeakTime=lnServerUsers5MinPeakTime, lnRepClusterRetryWaiting=lnRepClusterRetryWaiting, lnSignalAutodiscoveryFinished=lnSignalAutodiscoveryFinished, lnWebAccessFtp=lnWebAccessFtp, lnAlarmClearServers=lnAlarmClearServers, lnServerTransTotal=lnServerTransTotal, lnDominoCfgViewLines=lnDominoCfgViewLines, lnXPCRetransmissions=lnXPCRetransmissions, lnWeb=lnWeb, lnWebVpoolMaxBuf=lnWebVpoolMaxBuf, lnObjectSharedBy11=lnObjectSharedBy11, lnWebProcAccFtp=lnWebProcAccFtp, lnSignalServerConfigChg=lnSignalServerConfigChg, lnServerUserName=lnServerUserName, lnWebImageCacheHits=lnWebImageCacheHits, lnSystemRebootingTrap=lnSystemRebootingTrap, lnCalendar=lnCalendar, lnWebProcVpoolCurBuf=lnWebProcVpoolCurBuf, lnSignalNewServerType=lnSignalNewServerType)
mibBuilder.exportSymbols("NOTES-MIB", lnDBBufferPoolWrites=lnDBBufferPoolWrites, lnTrapDisplayCriticalAlarm=lnTrapDisplayCriticalAlarm, lnServerDataPath=lnServerDataPath, lnAverageMailServerHops=lnAverageMailServerHops, lnObjectSharedBy08=lnObjectSharedBy08, lnAllStatsEntry=lnAllStatsEntry, lnEvtServer=lnEvtServer, lnClusterProbeCount=lnClusterProbeCount, lnNetPortName=lnNetPortName, lnX25LocalResets=lnX25LocalResets, lnWebProcAccHttp=lnWebProcAccHttp, lnDominoCmdInfoOpenView=lnDominoCmdInfoOpenView, lnMTAWaitingRecp=lnMTAWaitingRecp, lnTrapInfo=lnTrapInfo, lnRecentTrapsEntry=lnRecentTrapsEntry, lnDominoCmdInfoSaveDocument=lnDominoCmdInfoSaveDocument, lnObjectName=lnObjectName, lnDominoThreadsTotal=lnDominoThreadsTotal, lnNetbiosTable=lnNetbiosTable, lnSignal=lnSignal, lnTotalMailFailures=lnTotalMailFailures, lnDominoCmdInfoOpenNavigator=lnDominoCmdInfoOpenNavigator, lnMainProxyAgentVersion=lnMainProxyAgentVersion, lnObjectSharedBy17=lnObjectSharedBy17, lnNetPortIndex=lnNetPortIndex, lnMTAIndex=lnMTAIndex, lnDominoCfgPortNumber=lnDominoCfgPortNumber, lnServerBusyTimeQueryReceivedCount=lnServerBusyTimeQueryReceivedCount, lnAlarmTargetHandle=lnAlarmTargetHandle, lnDominoReqPer5MinsPeak=lnDominoReqPer5MinsPeak, lnNumWaitingRecipients=lnNumWaitingRecipients, lnServerUsersPeakTime=lnServerUsersPeakTime, lnTotalPartitions=lnTotalPartitions, lnQSBuildNumber=lnQSBuildNumber, lnServerName=lnServerName, lnClusterFailoverByPathUnsucc=lnClusterFailoverByPathUnsucc, lnObjectSharedBy20=lnObjectSharedBy20, lnTaskIndex=lnTaskIndex, lnServerTask=lnServerTask, lnServerTransPerMinPeak=lnServerTransPerMinPeak, lnDBCacheHighWaterMark=lnDBCacheHighWaterMark, lnDominoReqPerMinTotal=lnDominoReqPerMinTotal, lnServerUpTrap=lnServerUpTrap, lnCalTotalAllApptsResources=lnCalTotalAllApptsResources, lnSignalServerId=lnSignalServerId, lnClusterMemberIndex=lnClusterMemberIndex, lnDominoCmdInfo=lnDominoCmdInfo, lnDomino=lnDomino, lnMTAWaitingMsgs=lnMTAWaitingMsgs, lnServerPoweredBy=lnServerPoweredBy, lnNetPortSessEstIn=lnNetPortSessEstIn, lnAlarm=lnAlarm, lnXPCPort=lnXPCPort, lnAlarmIntArg=lnAlarmIntArg, lnSNALocalLU=lnSNALocalLU, lnTrapDisplayIndeterminateAlarm=lnTrapDisplayIndeterminateAlarm, lnTrapDisplayMajorAlarm=lnTrapDisplayMajorAlarm, lnDailyAccessDenials=lnDailyAccessDenials, lnSNAMaxSessions=lnSNAMaxSessions, lnDominoCfgDirectoryIcons=lnDominoCfgDirectoryIcons, lnDriveEntry=lnDriveEntry, lnClusterOpenReqClustBusy=lnClusterOpenReqClustBusy, lnDominoCmdInfoCreateDocument=lnDominoCmdInfoCreateDocument, lnRemoteReboot=lnRemoteReboot, lnDominoCfgDirectoryURLPathIcons=lnDominoCfgDirectoryURLPathIcons, lnDominoCmdInfoUnknown=lnDominoCmdInfoUnknown, lnNBInUseSessions=lnNBInUseSessions, lnNBPacketSize=lnNBPacketSize, lnCluster=lnCluster, lnMailTransferFailures=lnMailTransferFailures, lnX25VCInUse=lnX25VCInUse, lnTaskName=lnTaskName, lnWebBusyProcesses=lnWebBusyProcesses, lnDominoCfgCacheDirectory=lnDominoCfgCacheDirectory, lnNBIndex=lnNBIndex, notesPump=notesPump, lnWebProcNumber=lnWebProcNumber, lnSNAPacingType=lnSNAPacingType, lnServerUserSessionID=lnServerUserSessionID, lnDominoCfgLogError=lnDominoCfgLogError, lnAlarmLongArg=lnAlarmLongArg, lnNBPort=lnNBPort, lnAlarmAutoDiscovery=lnAlarmAutoDiscovery, notes=notes, lnWebKBytesSent=lnWebKBytesSent, lnDominoCfgLogAccess=lnDominoCfgLogAccess, lnServerPorts=lnServerPorts, lnServerUsers5MinPeak=lnServerUsers5MinPeak, lnDominoCfgTimeoutInput=lnDominoCfgTimeoutInput, lnCollectorTimeElapsed=lnCollectorTimeElapsed, lnX25OverRuns=lnX25OverRuns, lnDominoCfgTimeoutOutput=lnDominoCfgTimeoutOutput, lnHourlyTriggeredRuns=lnHourlyTriggeredRuns, lnDriveLetter=lnDriveLetter, lnInterceptor=lnInterceptor, lnNBRetriedTransmissions=lnNBRetriedTransmissions, lnDBCacheHits=lnDBCacheHits, lnDBNIFPoolPeak=lnDBNIFPoolPeak, lnDiskRemote=lnDiskRemote, lnDeadMail=lnDeadMail, lnServerTitle=lnServerTitle, lnWebProcVpoolMaxBuf=lnWebProcVpoolMaxBuf, lnDBNSFPoolPeak=lnDBNSFPoolPeak, lnX25REJTran=lnX25REJTran, lnNetbiosEntry=lnNetbiosEntry, lnMemAllocProcess=lnMemAllocProcess, lnStatisticIndex=lnStatisticIndex, lnXPCCRCErrors=lnXPCCRCErrors, lnDominoReqPerDayTotal=lnDominoReqPerDayTotal, lnSNARemoteLU=lnSNARemoteLU, lnDominoReqPerMinPeakTime=lnDominoReqPerMinPeakTime, lnDominoRequestsTotal=lnDominoRequestsTotal, lnXPCPortErrors=lnXPCPortErrors, lnTaskData=lnTaskData, lotus=lotus, lnAlarmTextArg2=lnAlarmTextArg2, lnDailyUsedRunTime=lnDailyUsedRunTime, lnSignalWhatHasChanged=lnSignalWhatHasChanged, lnDBNSFPoolSize=lnDBNSFPoolSize, lnMemAllocTotal=lnMemAllocTotal, lnDailyUnsuccessfulRuns=lnDailyUnsuccessfulRuns, lnWebProcVpoolMaxElement=lnWebProcVpoolMaxElement, lnMTATransferFailures=lnMTATransferFailures, lnDominoCfgGarbageCollectionStatus=lnDominoCfgGarbageCollectionStatus, lnLastTrapSeq=lnLastTrapSeq, lnServerUserAccessedDBs=lnServerUserAccessedDBs, lnDominoCfgDirectoryCGI=lnDominoCfgDirectoryCGI, lnNBAbortedTransmissions=lnNBAbortedTransmissions, lnWebVpoolMaxUrl=lnWebVpoolMaxUrl, lnFatalEventTrap=lnFatalEventTrap, lnClusterTransIntAvgTime=lnClusterTransIntAvgTime, lnStats=lnStats, lnDominoCfgLogFilter=lnDominoCfgLogFilter, lnServerTblState=lnServerTblState, lnMinimumMailDeliverTime=lnMinimumMailDeliverTime, lnNetPortKBytesRec=lnNetPortKBytesRec, lnDominoReqPerDayPeak=lnDominoReqPerDayPeak, lnDominoCacheCommandHitRate=lnDominoCacheCommandHitRate, lnServerTbl=lnServerTbl, lnServerCPUType=lnServerCPUType, lnMemAvailability=lnMemAvailability, lnWebProcCacheMisses=lnWebProcCacheMisses, lnObjectSharedByGreater=lnObjectSharedByGreater, lnDominoCfgHostName=lnDominoCfgHostName, lnXPCKiloBytesSent=lnXPCKiloBytesSent, lnAlarmPortStatusChange=lnAlarmPortStatusChange, lnDominoCfgSSLKeyFile=lnDominoCfgSSLKeyFile, lnWebProcVpoolCurUrl=lnWebProcVpoolCurUrl, lnClusterLoadBalSucc=lnClusterLoadBalSucc, lnServerDownTrap=lnServerDownTrap, lnNetPortSessPeak=lnNetPortSessPeak, lnDominoCfgTimeoutCGI=lnDominoCfgTimeoutCGI, lnObjectEntry=lnObjectEntry, lnWebProcUrlReq=lnWebProcUrlReq, lnAlarmMessageExt=lnAlarmMessageExt, lnHourlyScheduledRuns=lnHourlyScheduledRuns, lnObjectSharedBy05=lnObjectSharedBy05, lnServerUsersEntry=lnServerUsersEntry, lnServerTblNotesPartition=lnServerTblNotesPartition, lnNBTotalCmdBlocks=lnNBTotalCmdBlocks, lnTrapDisplayMinorAlarm=lnTrapDisplayMinorAlarm, lnRepClusterSessionBytesOut=lnRepClusterSessionBytesOut, lnMemPhysicalRAM=lnMemPhysicalRAM, lnNBReceivedPackets=lnNBReceivedPackets, lnDominoCmdInfoLogin=lnDominoCmdInfoLogin, lnClusterLoadBalByPathSucc=lnClusterLoadBalByPathSucc, lnAlarmDate=lnAlarmDate, lnObjectSharedBy09=lnObjectSharedBy09, lnCalTotalUsers=lnCalTotalUsers, lnClusterTransLastIntAvgTime=lnClusterTransLastIntAvgTime, lnDisk=lnDisk, lnNumClosedOldSessions=lnNumClosedOldSessions, lnServerOpenReqV4Client=lnServerOpenReqV4Client, lnServerOpenReqRestricted=lnServerOpenReqRestricted, lnNetPortSessRecycled=lnNetPortSessRecycled, lnEvtType=lnEvtType, lnDominoCmdInfoReadForm=lnDominoCmdInfoReadForm, lnDominoBuildNumber=lnDominoBuildNumber, lnClusterTransNormValue=lnClusterTransNormValue, lnAllStatsTable=lnAllStatsTable, lnWebProcVpoolCurText=lnWebProcVpoolCurText, lnNBMajVersion=lnNBMajVersion, lnRepClusterDocsAdded=lnRepClusterDocsAdded, lnWebProcUrlSucc=lnWebProcUrlSucc, lnDominoReqPerMinPeak=lnDominoReqPerMinPeak, lnServerSwapPath=lnServerSwapPath, lnWebAccessGopher=lnWebAccessGopher, lnRepFailed=lnRepFailed, lnObjectIndex=lnObjectIndex, lnWebMaxProcesses=lnWebMaxProcesses, lnClusterLoadBalByPathUnsucc=lnClusterLoadBalByPathUnsucc, lnDominoCfgActiveThreadsMin=lnDominoCfgActiveThreadsMin, lnXPCTable=lnXPCTable, lnDominoCmdInfoEditDocument=lnDominoCmdInfoEditDocument, lnDominoReqPerHourPeakTime=lnDominoReqPerHourPeakTime, lnObjectSharedBy02=lnObjectSharedBy02, lnWebIdleProcesses=lnWebIdleProcesses, lnObjectSharedBy10=lnObjectSharedBy10, lnX25REJRcv=lnX25REJRcv, lnX25FrameSize=lnX25FrameSize, lnServerTransPerMinPeakTime=lnServerTransPerMinPeakTime, lnServerOS=lnServerOS, lnDeliveredMail=lnDeliveredMail, lnUnknownEventTrap=lnUnknownEventTrap, lnClusterAvailIndex=lnClusterAvailIndex, lnServerTblEntry=lnServerTblEntry, lnDominoCfgPortStatus=lnDominoCfgPortStatus, lnInfo=lnInfo, lnUnix=lnUnix, lnRepDocsDeleted=lnRepDocsDeleted, lnMTA=lnMTA, lnDominoReqPer5MinsTotal=lnDominoReqPer5MinsTotal, lnWebProcVpoolMaxMarker=lnWebProcVpoolMaxMarker, lnAlarmServerSNMPEvent=lnAlarmServerSNMPEvent, lnSNATPType=lnSNATPType, lnServerUsers1MinPeakTime=lnServerUsers1MinPeakTime, lnWebVpoolMaxMarker=lnWebVpoolMaxMarker, lnNMMinVersion=lnNMMinVersion, lnAlarmMailBoxEvent=lnAlarmMailBoxEvent, lnObjectSharedBy07=lnObjectSharedBy07, lnNetPortSessEstOut=lnNetPortSessEstOut, lnAlarmTaskStatusChange=lnAlarmTaskStatusChange, lnDBNIFPoolSize=lnDBNIFPoolSize, lnAlarmSeverity=lnAlarmSeverity, lnDominoCmdInfoOpenDatabase=lnDominoCmdInfoOpenDatabase, lnObjectSharedBy18=lnObjectSharedBy18, lnTaskCount=lnTaskCount, lnServerTransPerMin=lnServerTransPerMin, lnStatisticString=lnStatisticString, lnDBBufferPoolPercentReadsInBuffer=lnDBBufferPoolPercentReadsInBuffer, lnServerPulseRestoredTrap=lnServerPulseRestoredTrap, lnServerIdentifiedItself=lnServerIdentifiedItself, lnRepClusterWorkQueueDepth=lnRepClusterWorkQueueDepth, lnDominoCfgCacheDelete=lnDominoCfgCacheDelete, lnRepClusterSessionBytesIn=lnRepClusterSessionBytesIn, lnX25CRCErrors=lnX25CRCErrors, lnServerCPUCount=lnServerCPUCount, lnWebActiveProcesses=lnWebActiveProcesses, lnServer=lnServer, lnDominoCfgImageInterlaced=lnDominoCfgImageInterlaced, lnReplica=lnReplica, lnSignalServerName=lnSignalServerName, lnDBBufferControlPoolPeak=lnDBBufferControlPoolPeak, lnSNAConversationId=lnSNAConversationId, lnWarning1EventTrap=lnWarning1EventTrap, lnXPCIndex=lnXPCIndex, lnDBBufferControlPoolUsed=lnDBBufferControlPoolUsed, lnObjectSharedBy12=lnObjectSharedBy12, lnMem=lnMem, lnMaximumMailSizeDelivered=lnMaximumMailSizeDelivered, lnNetPortTable=lnNetPortTable, lnMTAName=lnMTAName, lnWebUrlSucceeded=lnWebUrlSucceeded, lnWebProcVpoolCurElement=lnWebProcVpoolCurElement)
mibBuilder.exportSymbols("NOTES-MIB", lnAppleTalkStatsLogged=lnAppleTalkStatsLogged, lnTrapDisplayAlarmClearServers=lnTrapDisplayAlarmClearServers, lnFailureEventTrap=lnFailureEventTrap, lnNetPortEntry=lnNetPortEntry, lnRepClusterSuccessful=lnRepClusterSuccessful, lnWebVpoolMaxElement=lnWebVpoolMaxElement, lnAverageMailSizeDelivered=lnAverageMailSizeDelivered, lnServerRS232Ports=lnServerRS232Ports, lnServerUsers1MinPeak=lnServerUsers1MinPeak, lnTotalKBTransferred=lnTotalKBTransferred, lnNBUnitNumber=lnNBUnitNumber, lnDominoCfgLogTimeStamp=lnDominoCfgLogTimeStamp, lnDominoCmdInfoOpenElement=lnDominoCmdInfoOpenElement, lnWaitingMail=lnWaitingMail, lnMail=lnMail, lnServerInfo=lnServerInfo, lnObjectSharedBy04=lnObjectSharedBy04, lnX25VCCfg=lnX25VCCfg, lnClusterFailoverByPathSucc=lnClusterFailoverByPathSucc, lnClusterTableIndex=lnClusterTableIndex, lnNotesServerSetState=lnNotesServerSetState, lnWebKBytesReceived=lnWebKBytesReceived, lnDominoCfgSSLStatus=lnDominoCfgSSLStatus, lnDBNSFPoolUsed=lnDBNSFPoolUsed, lnWebProcKBytesSent=lnWebProcKBytesSent, lnClusterPortName=lnClusterPortName, lnDominoCmdInfoOpenServer=lnDominoCmdInfoOpenServer, lnServerDroppedSessions=lnServerDroppedSessions, lnMTADeadMsgs=lnMTADeadMsgs, lnServerNowRespondingTrap=lnServerNowRespondingTrap, lnServerBootID=lnServerBootID, lnControl=lnControl, lnSignalOldServerType=lnSignalOldServerType, lnDominoThreadsActivePeak=lnDominoThreadsActivePeak, lnDominoCfgTimeoutIdleThread=lnDominoCfgTimeoutIdleThread, lnXPCActiveSessions=lnXPCActiveSessions, lnClusterTrans=lnClusterTrans, lnMaximumMailDeliverTime=lnMaximumMailDeliverTime, lnDominoReqPer5MinsPeakTime=lnDominoReqPer5MinsPeakTime, lnXPCStatus=lnXPCStatus, lnObjectSharedByTotal=lnObjectSharedByTotal, lnAlarmTypeStr=lnAlarmTypeStr, lnAlarmTextArg1=lnAlarmTextArg1)
