#
# PySNMP MIB module ZTE-UAS-MULTICAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZTE-UAS-MULTICAST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibIdentifier, NotificationType, TimeTicks, IpAddress, Gauge32, Counter32, Bits, enterprises, Unsigned32, iso, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "NotificationType", "TimeTicks", "IpAddress", "Gauge32", "Counter32", "Bits", "enterprises", "Unsigned32", "iso", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
zxMulticastMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3902, 1006, 2))
if mibBuilder.loadTexts: zxMulticastMib.setLastUpdated('200610231700Z')
if mibBuilder.loadTexts: zxMulticastMib.setOrganization('ZTE Co.')
if mibBuilder.loadTexts: zxMulticastMib.setContactInfo('')
if mibBuilder.loadTexts: zxMulticastMib.setDescription('This mib defines multicast management for uas')
zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
zxUas = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006))
zxUasMulticastMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1))
zxUasTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 2))
zxUasMulticastSwitch = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxUasMulticastSwitch.setStatus('current')
if mibBuilder.loadTexts: zxUasMulticastSwitch.setDescription('The switch of multicast')
zxIgmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2))
zxPimGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3))
zxIgmpUasGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4))
zxIgmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1), )
if mibBuilder.loadTexts: zxIgmpGroupTable.setStatus('current')
if mibBuilder.loadTexts: zxIgmpGroupTable.setDescription('This table contains igmp group information')
zxIgmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpGroupAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpGroupInterface"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpGroupLastReporterCircuit"))
if mibBuilder.loadTexts: zxIgmpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: zxIgmpGroupEntry.setDescription('The entry of zxIgmpGroupTable')
zxIgmpGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupAddr.setStatus('current')
if mibBuilder.loadTexts: zxIgmpGroupAddr.setDescription('IGMP group address.')
zxIgmpGroupInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupInterface.setStatus('current')
if mibBuilder.loadTexts: zxIgmpGroupInterface.setDescription('IGMP group interface name,contains fei,smartgroup,vbui and so on')
zxIgmpGroupFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("ip", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupFlag.setStatus('current')
if mibBuilder.loadTexts: zxIgmpGroupFlag.setDescription('Subscriber type,contains PPP and IP Subscriber type.')
zxIgmpGroupPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupPresent.setStatus('current')
if mibBuilder.loadTexts: zxIgmpGroupPresent.setDescription('The time length since the group created,such as HH:MM:SS.')
zxIgmpGroupExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupExpire.setStatus('current')
if mibBuilder.loadTexts: zxIgmpGroupExpire.setDescription('The expire time length which the group will be expire, for static group the value is never,other is HH:MM:SS.')
zxIgmpGroupLastReporterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpGroupLastReporterCircuit.setStatus('current')
if mibBuilder.loadTexts: zxIgmpGroupLastReporterCircuit.setDescription('The circuit of the last reporter.')
zxIgmpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2), )
if mibBuilder.loadTexts: zxIgmpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInterfaceTable.setDescription('This table contains igmp interface information')
zxIgmpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpInterface"))
if mibBuilder.loadTexts: zxIgmpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInterfaceEntry.setDescription('The entry of zxIgmpInterfaceTable')
zxIgmpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpInterface.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInterface.setDescription('IGMP interface name,contains fei,smartgroup,vbui and so on.')
zxIgmpInfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpInfIpAddr.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInfIpAddr.setDescription('The IP address of the interface.')
zxIgmpInfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpInfMask.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInfMask.setDescription('The submask of the interface.')
zxIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: zxIgmpVersion.setDescription('The version of IGMP running on the interface')
zxIgmpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpQueryInterval.setStatus('current')
if mibBuilder.loadTexts: zxIgmpQueryInterval.setDescription('IGMP query interval,the units is second.')
zxIgmpLastMemQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpLastMemQueryIntvl.setStatus('current')
if mibBuilder.loadTexts: zxIgmpLastMemQueryIntvl.setDescription('IGMP group-special query interval, the units is second. For Igmpv1 the value is 0.')
zxIgmpMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: zxIgmpMaxResponseTime.setDescription('Max response time of IGMP group-special query, the units is second. For Igmpv1 the value is 0.')
zxIgmpQuerierTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpQuerierTimeout.setStatus('current')
if mibBuilder.loadTexts: zxIgmpQuerierTimeout.setDescription('The alive time that other uas can be a querier, the units is second. For Igmpv1 the value is 0.')
zxIgmpQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpQuerier.setStatus('current')
if mibBuilder.loadTexts: zxIgmpQuerier.setDescription('The IP address of the querier.')
zxIgmpQuerierExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpQuerierExpire.setStatus('current')
if mibBuilder.loadTexts: zxIgmpQuerierExpire.setDescription('The expire time length which the querier will be expire, the value is never or HH:MM:SS.')
zxIgmpInboundAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpInboundAcl.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInboundAcl.setDescription('IGMP access-group. 0 means Inbound IGMP access group is not set')
zxIgmpImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: zxIgmpImmediateLeave.setDescription('Immediate leave group number when receive release packet. 0 means IGMP immediate leave control is not set. 100 means IGMP immediate leave for all groups. other is group number.')
zxIgmpInfRevPktTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3), )
if mibBuilder.loadTexts: zxIgmpInfRevPktTable.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInfRevPktTable.setDescription('This table contains igmp interface received packets')
zxIgmpInfRevPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpRevPktInterface"))
if mibBuilder.loadTexts: zxIgmpInfRevPktEntry.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInfRevPktEntry.setDescription('The entry of zxIgmpInfRevPktTable')
zxIgmpRevPktInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktInterface.setStatus('current')
if mibBuilder.loadTexts: zxIgmpRevPktInterface.setDescription('IGMP interface name,contains fei,smartgroup,vbui and so on.')
zxIgmpRevPktQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktQuery.setStatus('current')
if mibBuilder.loadTexts: zxIgmpRevPktQuery.setDescription('Received query packet count from this interface.')
zxIgmpRevPktReportV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktReportV2.setStatus('current')
if mibBuilder.loadTexts: zxIgmpRevPktReportV2.setDescription('Received report IGMPv2 packet count from this interface.')
zxIgmpRevPktLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktLeave.setStatus('current')
if mibBuilder.loadTexts: zxIgmpRevPktLeave.setDescription('Received leave packet count from this interface.')
zxIgmpRevPktReportV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktReportV1.setStatus('current')
if mibBuilder.loadTexts: zxIgmpRevPktReportV1.setDescription('Received report IGMPv1 packet count from this interface.')
zxIgmpRevPktOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktOther.setStatus('current')
if mibBuilder.loadTexts: zxIgmpRevPktOther.setDescription('Received other packet count from this interface.')
zxIgmpRevPktTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpRevPktTotal.setStatus('current')
if mibBuilder.loadTexts: zxIgmpRevPktTotal.setDescription('Received total packet count from this interface.')
zxIgmpInfSendPktTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4), )
if mibBuilder.loadTexts: zxIgmpInfSendPktTable.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInfSendPktTable.setDescription('This table contains igmp interface sent packets')
zxIgmpInfSendPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpSendPktInterface"))
if mibBuilder.loadTexts: zxIgmpInfSendPktEntry.setStatus('current')
if mibBuilder.loadTexts: zxIgmpInfSendPktEntry.setDescription('The entry of zxIgmpInfSendPktTable')
zxIgmpSendPktInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpSendPktInterface.setStatus('current')
if mibBuilder.loadTexts: zxIgmpSendPktInterface.setDescription('IGMP interface name,contains fei,smartgroup,vbui and so on.')
zxIgmpSendPktQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpSendPktQuery.setStatus('current')
if mibBuilder.loadTexts: zxIgmpSendPktQuery.setDescription('Sent query packet count from this interface.')
zxIgmpSendPktSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpSendPktSpec.setStatus('current')
if mibBuilder.loadTexts: zxIgmpSendPktSpec.setDescription('Sent special IGMP packet count from this interface.')
zxIgmpSendPktTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpSendPktTotal.setStatus('current')
if mibBuilder.loadTexts: zxIgmpSendPktTotal.setDescription('Sent total packet count from this interface.')
zxIgmpServerLogTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5), )
if mibBuilder.loadTexts: zxIgmpServerLogTable.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogTable.setDescription('This table contains igmp server log.')
zxIgmpServerLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpServerLogInterface"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpServerLogGroupAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpServerLogSourceAddr"))
if mibBuilder.loadTexts: zxIgmpServerLogEntry.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogEntry.setDescription('The entry of zxIgmpServerLogTable')
zxIgmpServerLogInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogInterface.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogInterface.setDescription('The interface name where the server lies')
zxIgmpServerLogProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pimSm", 1), ("pimDm", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogProtocol.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogProtocol.setDescription('The protocol type.')
zxIgmpServerLogVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogVpi.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogVpi.setDescription('The circuit vpi or vlan id.')
zxIgmpServerLogVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogVci.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogVci.setDescription('The circuit vci or second vlan id.')
zxIgmpServerLogGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogGroupAddr.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogGroupAddr.setDescription('The server multicast group address.')
zxIgmpServerLogSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogSourceAddr.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogSourceAddr.setDescription('The server source address.')
zxIgmpServerLogRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogRecTime.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogRecTime.setDescription('The time received.')
zxIgmpServerLogPPPoESID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpServerLogPPPoESID.setStatus('current')
if mibBuilder.loadTexts: zxIgmpServerLogPPPoESID.setDescription('The PPPoE session id.')
zxPimBSR = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimBSR.setStatus('current')
if mibBuilder.loadTexts: zxPimBSR.setDescription('BSR information.')
zxPimCBsr = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimCBsr.setStatus('current')
if mibBuilder.loadTexts: zxPimCBsr.setDescription('candidate BSR information of this router.')
zxPimCRP = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimCRP.setStatus('current')
if mibBuilder.loadTexts: zxPimCRP.setDescription('candidate RP information of this router.')
zxPimRpMapTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4), )
if mibBuilder.loadTexts: zxPimRpMapTable.setStatus('current')
if mibBuilder.loadTexts: zxPimRpMapTable.setDescription('This table contains pim rp map.')
zxPimRpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxPimRpMapGroupAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxPimRpMapGroupMask"), (0, "ZTE-UAS-MULTICAST-MIB", "zxPimRpMapRpAddr"))
if mibBuilder.loadTexts: zxPimRpMapEntry.setStatus('current')
if mibBuilder.loadTexts: zxPimRpMapEntry.setDescription('The entry of zxPimRpMapTable')
zxPimRpMapGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimRpMapGroupAddr.setStatus('current')
if mibBuilder.loadTexts: zxPimRpMapGroupAddr.setDescription('The multicast group address.')
zxPimRpMapGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimRpMapGroupMask.setStatus('current')
if mibBuilder.loadTexts: zxPimRpMapGroupMask.setDescription('The multicast group address submask.')
zxPimRpMapRpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimRpMapRpAddr.setStatus('current')
if mibBuilder.loadTexts: zxPimRpMapRpAddr.setDescription('The rp address.')
zxPimRpMapRpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimRpMapRpDescr.setStatus('current')
if mibBuilder.loadTexts: zxPimRpMapRpDescr.setDescription('The rp description,such as type and priority.')
zxPimSmInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5), )
if mibBuilder.loadTexts: zxPimSmInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: zxPimSmInterfaceTable.setDescription('This table contains pimsm interface information.')
zxPimSmIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmInterface"))
if mibBuilder.loadTexts: zxPimSmIntfEntry.setStatus('current')
if mibBuilder.loadTexts: zxPimSmIntfEntry.setDescription('The entry of zxPimSmInterfaceTable')
zxPimSmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmAddr.setStatus('current')
if mibBuilder.loadTexts: zxPimSmAddr.setDescription('The interface Ip address.')
zxPimSmInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmInterface.setStatus('current')
if mibBuilder.loadTexts: zxPimSmInterface.setDescription('The interface name.')
zxPimSmIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmIntfState.setStatus('current')
if mibBuilder.loadTexts: zxPimSmIntfState.setDescription('The interface state.')
zxPimSmNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrCount.setStatus('current')
if mibBuilder.loadTexts: zxPimSmNbrCount.setDescription('The neighbour count.')
zxPimSmQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmQueryIntvl.setStatus('current')
if mibBuilder.loadTexts: zxPimSmQueryIntvl.setDescription('The query inerval,the units is second.')
zxPimSmDR = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmDR.setStatus('current')
if mibBuilder.loadTexts: zxPimSmDR.setDescription('The DR Ip address.')
zxPimSmDrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmDrPriority.setStatus('current')
if mibBuilder.loadTexts: zxPimSmDrPriority.setDescription('The DR priority.')
zxPimSmNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6), )
if mibBuilder.loadTexts: zxPimSmNbrTable.setStatus('current')
if mibBuilder.loadTexts: zxPimSmNbrTable.setDescription('This table contains pimsm neighbour information.')
zxPimSmNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmNbrAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmNbrIntf"))
if mibBuilder.loadTexts: zxPimSmNbrEntry.setStatus('current')
if mibBuilder.loadTexts: zxPimSmNbrEntry.setDescription('The entry of zxPimSmNbrTable')
zxPimSmNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrAddr.setStatus('current')
if mibBuilder.loadTexts: zxPimSmNbrAddr.setDescription('The neighbour Ip address.')
zxPimSmNbrIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrIntf.setStatus('current')
if mibBuilder.loadTexts: zxPimSmNbrIntf.setDescription('The interface name.')
zxPimSmNbrDrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrDrPriority.setStatus('current')
if mibBuilder.loadTexts: zxPimSmNbrDrPriority.setDescription('The DR priority.')
zxPimSmNbrUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrUptime.setStatus('current')
if mibBuilder.loadTexts: zxPimSmNbrUptime.setDescription('The time of the neighbour created.')
zxPimSmNbrExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrExpire.setStatus('current')
if mibBuilder.loadTexts: zxPimSmNbrExpire.setDescription('The time of the neighbour expires.')
zxPimSmNbrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmNbrVer.setStatus('current')
if mibBuilder.loadTexts: zxPimSmNbrVer.setDescription('The IGMP version.')
zxPimSmPktTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7), )
if mibBuilder.loadTexts: zxPimSmPktTable.setStatus('current')
if mibBuilder.loadTexts: zxPimSmPktTable.setDescription('This table contains pimsm packet information.')
zxPimSmPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmPktIntf"), (0, "ZTE-UAS-MULTICAST-MIB", "zxPimSmPktType"))
if mibBuilder.loadTexts: zxPimSmPktEntry.setStatus('current')
if mibBuilder.loadTexts: zxPimSmPktEntry.setDescription('The entry of zxPimSmPktTable')
zxPimSmPktIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktIntf.setStatus('current')
if mibBuilder.loadTexts: zxPimSmPktIntf.setDescription('The interface name.')
zxPimSmPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("hello", 1), ("register", 2), ("register-Stop", 3), ("joinOrPrune", 4), ("bsr", 5), ("assert", 6), ("graft", 7), ("graft-ack", 8), ("crp-adv", 9), ("probe", 10), ("err-type", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktType.setStatus('current')
if mibBuilder.loadTexts: zxPimSmPktType.setDescription('The packet type.')
zxPimSmPktRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktRxOk.setStatus('current')
if mibBuilder.loadTexts: zxPimSmPktRxOk.setDescription('The ok packet received from this interface.')
zxPimSmPktTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktTxOk.setStatus('current')
if mibBuilder.loadTexts: zxPimSmPktTxOk.setDescription('The ok packet sent from this interface.')
zxPimSmPktRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktRxError.setStatus('current')
if mibBuilder.loadTexts: zxPimSmPktRxError.setDescription('The error packet received from this interface.')
zxPimSmPktTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxPimSmPktTxError.setStatus('current')
if mibBuilder.loadTexts: zxPimSmPktTxError.setDescription('The error packet sent from this interface.')
zxIgmpUasAclSwitch = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasAclSwitch.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasAclSwitch.setDescription('The switch of IGMP ACL.')
zxIgmpUasPrivateServerLogSwitch = MibScalar((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasPrivateServerLogSwitch.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasPrivateServerLogSwitch.setDescription('The switch of IGMP private server log.')
zxIgmpUasAclTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 3), )
if mibBuilder.loadTexts: zxIgmpUasAclTable.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasAclTable.setDescription('This table contains IGMP ACL permitted.')
zxIgmpUasAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 3, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasAclSourceAddr"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasAclDestAddr"))
if mibBuilder.loadTexts: zxIgmpUasAclEntry.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasAclEntry.setDescription('The entry of zxIgmpUasAclTable')
zxIgmpUasAclSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasAclSourceAddr.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasAclSourceAddr.setDescription('The permitted souce IP address.')
zxIgmpUasAclDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasAclDestAddr.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasAclDestAddr.setDescription('The permitted destination IP address or any.')
zxIgmpUasServiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4), )
if mibBuilder.loadTexts: zxIgmpUasServiceProfileTable.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfileTable.setDescription('This table contains IGMP service profile.')
zxIgmpUasServiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1), ).setIndexNames((0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasServiceProfileNumber"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasServiceProfilePrwGroup"), (0, "ZTE-UAS-MULTICAST-MIB", "zxIgmpUasServiceProfilePrwGroupMask"))
if mibBuilder.loadTexts: zxIgmpUasServiceProfileEntry.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfileEntry.setDescription('The entry of zxIgmpUasServiceProfileTable')
zxIgmpUasServiceProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileNumber.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfileNumber.setDescription('The service profile number.')
zxIgmpUasServiceProfileAccGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileAccGroup.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfileAccGroup.setDescription('The service profile related security ACL.')
zxIgmpUasServiceProfileDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileDescr.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfileDescr.setDescription('The service profile description.')
zxIgmpUasServiceProfileMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileMaxGroup.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfileMaxGroup.setDescription('The max multicast group count')
zxIgmpUasServiceProfileMaxPrwGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileMaxPrwGroup.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfileMaxPrwGroup.setDescription('The max preview multicast group count.')
zxIgmpUasServiceProfilePrwGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfilePrwGroup.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfilePrwGroup.setDescription('The channel multicast group address.')
zxIgmpUasServiceProfilePrwGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfilePrwGroupMask.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfilePrwGroupMask.setDescription('The channel multicast group address submask.')
zxIgmpUasServiceProfileMaxPrwCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfileMaxPrwCount.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfileMaxPrwCount.setDescription('The max preview count. This attribute is related to zxIgmpUasServiceProfilePrwGroup.')
zxIgmpUasServiceProfilePrwResumeIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 1006, 2, 1, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxIgmpUasServiceProfilePrwResumeIntvl.setStatus('current')
if mibBuilder.loadTexts: zxIgmpUasServiceProfilePrwResumeIntvl.setDescription('The max preview time. This attribute is related to zxIgmpUasServiceProfilePrwGroup.')
mibBuilder.exportSymbols("ZTE-UAS-MULTICAST-MIB", zxIgmpServerLogPPPoESID=zxIgmpServerLogPPPoESID, zxPimSmPktIntf=zxPimSmPktIntf, zxIgmpRevPktReportV1=zxIgmpRevPktReportV1, zxPimSmNbrCount=zxPimSmNbrCount, zxPimSmPktTable=zxPimSmPktTable, zxIgmpRevPktInterface=zxIgmpRevPktInterface, zxIgmpRevPktTotal=zxIgmpRevPktTotal, zxPimSmNbrExpire=zxPimSmNbrExpire, zxIgmpGroupAddr=zxIgmpGroupAddr, zxIgmpRevPktReportV2=zxIgmpRevPktReportV2, zxIgmpInterfaceEntry=zxIgmpInterfaceEntry, zxIgmpServerLogInterface=zxIgmpServerLogInterface, zxIgmpServerLogEntry=zxIgmpServerLogEntry, zxIgmpServerLogVci=zxIgmpServerLogVci, zxIgmpUasServiceProfileNumber=zxIgmpUasServiceProfileNumber, zxIgmpInterface=zxIgmpInterface, zxPimSmInterfaceTable=zxPimSmInterfaceTable, zxIgmpRevPktQuery=zxIgmpRevPktQuery, zxPimSmPktEntry=zxPimSmPktEntry, zxIgmpServerLogTable=zxIgmpServerLogTable, zxIgmpUasAclSwitch=zxIgmpUasAclSwitch, zxPimRpMapGroupAddr=zxPimRpMapGroupAddr, zxIgmpInfRevPktEntry=zxIgmpInfRevPktEntry, zxPimRpMapGroupMask=zxPimRpMapGroupMask, zxPimSmDrPriority=zxPimSmDrPriority, zxPimSmNbrIntf=zxPimSmNbrIntf, zxIgmpUasServiceProfileTable=zxIgmpUasServiceProfileTable, zxIgmpRevPktLeave=zxIgmpRevPktLeave, zxPimRpMapRpAddr=zxPimRpMapRpAddr, zxIgmpServerLogVpi=zxIgmpServerLogVpi, zxIgmpGroupFlag=zxIgmpGroupFlag, zxPimRpMapTable=zxPimRpMapTable, zxPimSmPktTxError=zxPimSmPktTxError, zxIgmpImmediateLeave=zxIgmpImmediateLeave, zxPimSmNbrDrPriority=zxPimSmNbrDrPriority, zxPimBSR=zxPimBSR, zxPimSmAddr=zxPimSmAddr, zxIgmpServerLogGroupAddr=zxIgmpServerLogGroupAddr, zxIgmpGroupExpire=zxIgmpGroupExpire, zxIgmpUasServiceProfileDescr=zxIgmpUasServiceProfileDescr, zxPimSmIntfState=zxPimSmIntfState, zxIgmpQueryInterval=zxIgmpQueryInterval, zxIgmpUasServiceProfileMaxPrwCount=zxIgmpUasServiceProfileMaxPrwCount, zxPimCRP=zxPimCRP, zxIgmpVersion=zxIgmpVersion, zxIgmpInfMask=zxIgmpInfMask, zxIgmpMaxResponseTime=zxIgmpMaxResponseTime, zxIgmpInfRevPktTable=zxIgmpInfRevPktTable, zxIgmpServerLogProtocol=zxIgmpServerLogProtocol, zxIgmpQuerierExpire=zxIgmpQuerierExpire, zxIgmpUasServiceProfilePrwResumeIntvl=zxIgmpUasServiceProfilePrwResumeIntvl, zxIgmpGroupTable=zxIgmpGroupTable, zxIgmpUasPrivateServerLogSwitch=zxIgmpUasPrivateServerLogSwitch, zxPimRpMapRpDescr=zxPimRpMapRpDescr, zxPimSmQueryIntvl=zxPimSmQueryIntvl, zxPimSmIntfEntry=zxPimSmIntfEntry, PYSNMP_MODULE_ID=zxMulticastMib, zxIgmpGroupLastReporterCircuit=zxIgmpGroupLastReporterCircuit, zxIgmpRevPktOther=zxIgmpRevPktOther, zxIgmpUasServiceProfileMaxGroup=zxIgmpUasServiceProfileMaxGroup, zxIgmpSendPktQuery=zxIgmpSendPktQuery, zxPimSmNbrVer=zxPimSmNbrVer, zxPimSmPktTxOk=zxPimSmPktTxOk, zxPimSmDR=zxPimSmDR, zxPimSmNbrEntry=zxPimSmNbrEntry, zxIgmpUasAclSourceAddr=zxIgmpUasAclSourceAddr, zxUasMulticastMibObjects=zxUasMulticastMibObjects, zxPimRpMapEntry=zxPimRpMapEntry, zxIgmpInfIpAddr=zxIgmpInfIpAddr, zxPimSmNbrTable=zxPimSmNbrTable, zxIgmpUasAclEntry=zxIgmpUasAclEntry, zxIgmpUasServiceProfileEntry=zxIgmpUasServiceProfileEntry, zxIgmpSendPktTotal=zxIgmpSendPktTotal, zxIgmpGroup=zxIgmpGroup, zxPimCBsr=zxPimCBsr, zxIgmpServerLogSourceAddr=zxIgmpServerLogSourceAddr, zxUas=zxUas, zxPimSmInterface=zxPimSmInterface, zxUasMulticastSwitch=zxUasMulticastSwitch, zxIgmpQuerier=zxIgmpQuerier, zxPimSmPktType=zxPimSmPktType, zxIgmpUasAclTable=zxIgmpUasAclTable, zxIgmpGroupInterface=zxIgmpGroupInterface, zxIgmpLastMemQueryIntvl=zxIgmpLastMemQueryIntvl, zxIgmpQuerierTimeout=zxIgmpQuerierTimeout, zxIgmpUasServiceProfilePrwGroupMask=zxIgmpUasServiceProfilePrwGroupMask, zxMulticastMib=zxMulticastMib, zxPimSmNbrAddr=zxPimSmNbrAddr, zxUasTraps=zxUasTraps, zxIgmpUasServiceProfileAccGroup=zxIgmpUasServiceProfileAccGroup, zxIgmpUasServiceProfileMaxPrwGroup=zxIgmpUasServiceProfileMaxPrwGroup, zxIgmpGroupPresent=zxIgmpGroupPresent, zxPimSmNbrUptime=zxPimSmNbrUptime, zxIgmpUasAclDestAddr=zxIgmpUasAclDestAddr, zxPimSmPktRxOk=zxPimSmPktRxOk, zxIgmpGroupEntry=zxIgmpGroupEntry, zxIgmpUasGroup=zxIgmpUasGroup, zte=zte, zxIgmpUasServiceProfilePrwGroup=zxIgmpUasServiceProfilePrwGroup, zxIgmpServerLogRecTime=zxIgmpServerLogRecTime, zxPimSmPktRxError=zxPimSmPktRxError, zxIgmpInfSendPktTable=zxIgmpInfSendPktTable, zxIgmpInfSendPktEntry=zxIgmpInfSendPktEntry, zxIgmpInboundAcl=zxIgmpInboundAcl, zxPimGroup=zxPimGroup, zxIgmpSendPktSpec=zxIgmpSendPktSpec, zxIgmpSendPktInterface=zxIgmpSendPktInterface, zxIgmpInterfaceTable=zxIgmpInterfaceTable)
