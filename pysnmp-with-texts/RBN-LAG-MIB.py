#
# PySNMP MIB module RBN-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-LAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnSlot, RbnPort = mibBuilder.importSymbols("RBN-TC", "RbnSlot", "RbnPort")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, Bits, Integer32, ModuleIdentity, TimeTicks, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, MibIdentifier, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Bits", "Integer32", "ModuleIdentity", "TimeTicks", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "MibIdentifier", "NotificationType", "Unsigned32")
DateAndTime, DisplayString, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "MacAddress", "TruthValue")
rbnMcLagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 102))
rbnMcLagMIB.setRevisions(('2012-06-01 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnMcLagMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: rbnMcLagMIB.setLastUpdated('201206011800Z')
if mibBuilder.loadTexts: rbnMcLagMIB.setOrganization('Ericsson AB.')
if mibBuilder.loadTexts: rbnMcLagMIB.setContactInfo(' Ericsson AB. 100 Headquarters Dr San Jose, CA 95134 USA Phone: +1 408 750-5000 Fax: +1 408 750-5599 ')
if mibBuilder.loadTexts: rbnMcLagMIB.setDescription(' This MIB contains managed object defintions for the MC-LAG.')
rbnMcLagNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0))
rbnMcLagObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1))
rbnMcLagConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2))
rbnMcLagTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1), )
if mibBuilder.loadTexts: rbnMcLagTable.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagTable.setDescription('This table consists of MC-LAG management objects.')
rbnMcLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1), ).setIndexNames((0, "RBN-LAG-MIB", "rbnMcLagName"))
if mibBuilder.loadTexts: rbnMcLagEntry.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagEntry.setDescription('Each entry contains management objects of an MC-LAG node.')
rbnMcLagName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: rbnMcLagName.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagName.setDescription('This object contains the name of the MC-LAG.')
rbnMcLagId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagId.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagId.setDescription('The LINK-GROUP ID.')
rbnMcLagSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagSystemPriority.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagSystemPriority.setDescription('Configured system priority for the MC-LAG.')
rbnMcLagSystemMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagSystemMacAddress.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagSystemMacAddress.setDescription('The system MAC address for the MC-LAG.')
rbnMcLagRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagRevertiveMode.setDescription('Indicates whether the port is in revertive mode.')
rbnMcLagRevertiveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagRevertiveHoldTimer.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagRevertiveHoldTimer.setDescription('This object indicates the time delayed before the MC-LAG is reverted back to the former active.')
rbnMcLagOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagOperState.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagOperState.setDescription('The current MC-LAG state: Up - When the MC-LAG is active on one of the two chassis. Down - When the MC-LAG is down. Standby - When the MC-LAG is standby')
rbnMcLagOperErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noError", 0), ("configMismatch", 1), ("priorityError", 2), ("downMinLink", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagOperErrorCode.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagOperErrorCode.setDescription(' The reason that MC-LAG is Down. configMismatch - MC-LAG is down because of config mismatch priorityError - MC-LAG is down because of config mismatch downMinLink - MC-LAG is down because of min-link error')
rbnMcLagSwitchOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagSwitchOverTime.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagSwitchOverTime.setDescription('This indicated the last time MC-LAG was switched-over.')
rbnMcLagSwitchOverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagSwitchOverReason.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagSwitchOverReason.setDescription(' This indicate in text the reason for MC-LAG switchover. ')
rbnMcLagConstituentTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2), )
if mibBuilder.loadTexts: rbnMcLagConstituentTable.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagConstituentTable.setDescription(' This is a table of constituent ports for a LAG')
rbnMcLagConstituentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1), ).setIndexNames((0, "RBN-LAG-MIB", "rbnMcLagName"), (0, "RBN-LAG-MIB", "rbnMcLagConstituentSlot"), (0, "RBN-LAG-MIB", "rbnMcLagConstituentPort"))
if mibBuilder.loadTexts: rbnMcLagConstituentEntry.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagConstituentEntry.setDescription('A constituent port of an MCLAG.')
rbnMcLagConstituentSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnMcLagConstituentSlot.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagConstituentSlot.setDescription(' This indicates the slot number of the constituent port.')
rbnMcLagConstituentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1, 2), RbnPort())
if mibBuilder.loadTexts: rbnMcLagConstituentPort.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagConstituentPort.setDescription(' This indicates the port number of the constituent port')
rbnMcLagConstituentPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagConstituentPortPriority.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagConstituentPortPriority.setDescription(' This indicates the configured priority of the constituent port.')
rbnMcLagConstituentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagConstituentPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagConstituentPortIfIndex.setDescription(' The interface index associated with the constituent port.')
rbnMcLagSwitchOverEvent = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 1)).setObjects(("RBN-LAG-MIB", "rbnMcLagOperState"), ("RBN-LAG-MIB", "rbnMcLagSwitchOverReason"))
if mibBuilder.loadTexts: rbnMcLagSwitchOverEvent.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagSwitchOverEvent.setDescription('An MC-LAG switch-over trap indicates a switch-over has happened and also identifying which chassis will become active and chassis.')
rbnMcLagOperFailed = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 2)).setObjects(("RBN-LAG-MIB", "rbnMcLagOperState"), ("RBN-LAG-MIB", "rbnMcLagOperErrorCode"))
if mibBuilder.loadTexts: rbnMcLagOperFailed.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagOperFailed.setDescription('his trap indicates MC-LAG has failed and why.')
rbnMcLagOperFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 3)).setObjects(("RBN-LAG-MIB", "rbnMcLagOperState"))
if mibBuilder.loadTexts: rbnMcLagOperFailureCleared.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagOperFailureCleared.setDescription('his trap indicates MC-LAG has failed and why.')
rbnMcLagConstituentPortUp = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 4)).setObjects(("RBN-LAG-MIB", "rbnMcLagConstituentPortPriority"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortIfIndex"))
if mibBuilder.loadTexts: rbnMcLagConstituentPortUp.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagConstituentPortUp.setDescription('This trap indicates which constituent ports has failed in the MC-LAG.')
rbnMcLagConstituentPortDown = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 5)).setObjects(("RBN-LAG-MIB", "rbnMcLagConstituentPortPriority"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortIfIndex"))
if mibBuilder.loadTexts: rbnMcLagConstituentPortDown.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagConstituentPortDown.setDescription('This trap indicates which constituent ports has failed in the MC-LAG.')
rbnMcLagGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 1))
rbnMcLagCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 2))
rbnMcLagModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 2, 1)).setObjects(("RBN-LAG-MIB", "rbnMcLagObjectGroup"), ("RBN-LAG-MIB", "rbnMcLagNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMcLagModuleCompliance = rbnMcLagModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagModuleCompliance.setDescription('Compliance statement for agents that provide support for the RBN-LAG-MIB')
rbnMcLagObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 1, 1)).setObjects(("RBN-LAG-MIB", "rbnMcLagId"), ("RBN-LAG-MIB", "rbnMcLagSystemPriority"), ("RBN-LAG-MIB", "rbnMcLagSystemMacAddress"), ("RBN-LAG-MIB", "rbnMcLagRevertiveMode"), ("RBN-LAG-MIB", "rbnMcLagRevertiveHoldTimer"), ("RBN-LAG-MIB", "rbnMcLagOperState"), ("RBN-LAG-MIB", "rbnMcLagOperErrorCode"), ("RBN-LAG-MIB", "rbnMcLagSwitchOverTime"), ("RBN-LAG-MIB", "rbnMcLagSwitchOverReason"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortPriority"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMcLagObjectGroup = rbnMcLagObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagObjectGroup.setDescription('Collection of scalar objects required for Multi-chassis Link-group management.')
rbnMcLagNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 1, 2)).setObjects(("RBN-LAG-MIB", "rbnMcLagSwitchOverEvent"), ("RBN-LAG-MIB", "rbnMcLagOperFailed"), ("RBN-LAG-MIB", "rbnMcLagOperFailureCleared"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortUp"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMcLagNotificationGroup = rbnMcLagNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: rbnMcLagNotificationGroup.setDescription('Objects required for Multi-chassis Link-group notifications.')
mibBuilder.exportSymbols("RBN-LAG-MIB", rbnMcLagModuleCompliance=rbnMcLagModuleCompliance, rbnMcLagConstituentPortDown=rbnMcLagConstituentPortDown, rbnMcLagOperState=rbnMcLagOperState, rbnMcLagConstituentTable=rbnMcLagConstituentTable, rbnMcLagConstituentEntry=rbnMcLagConstituentEntry, rbnMcLagConstituentSlot=rbnMcLagConstituentSlot, rbnMcLagConstituentPort=rbnMcLagConstituentPort, rbnMcLagSystemPriority=rbnMcLagSystemPriority, rbnMcLagRevertiveHoldTimer=rbnMcLagRevertiveHoldTimer, rbnMcLagOperFailureCleared=rbnMcLagOperFailureCleared, rbnMcLagConstituentPortIfIndex=rbnMcLagConstituentPortIfIndex, rbnMcLagGroups=rbnMcLagGroups, rbnMcLagRevertiveMode=rbnMcLagRevertiveMode, rbnMcLagMIB=rbnMcLagMIB, PYSNMP_MODULE_ID=rbnMcLagMIB, rbnMcLagEntry=rbnMcLagEntry, rbnMcLagSwitchOverTime=rbnMcLagSwitchOverTime, rbnMcLagConformance=rbnMcLagConformance, rbnMcLagNotificationGroup=rbnMcLagNotificationGroup, rbnMcLagObjectGroup=rbnMcLagObjectGroup, rbnMcLagObjects=rbnMcLagObjects, rbnMcLagSystemMacAddress=rbnMcLagSystemMacAddress, rbnMcLagOperFailed=rbnMcLagOperFailed, rbnMcLagConstituentPortPriority=rbnMcLagConstituentPortPriority, rbnMcLagCompliances=rbnMcLagCompliances, rbnMcLagConstituentPortUp=rbnMcLagConstituentPortUp, rbnMcLagOperErrorCode=rbnMcLagOperErrorCode, rbnMcLagId=rbnMcLagId, rbnMcLagTable=rbnMcLagTable, rbnMcLagSwitchOverEvent=rbnMcLagSwitchOverEvent, rbnMcLagNotifications=rbnMcLagNotifications, rbnMcLagName=rbnMcLagName, rbnMcLagSwitchOverReason=rbnMcLagSwitchOverReason)
