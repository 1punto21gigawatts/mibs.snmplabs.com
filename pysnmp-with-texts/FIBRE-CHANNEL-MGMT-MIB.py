#
# PySNMP MIB module FIBRE-CHANNEL-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FIBRE-CHANNEL-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, ModuleIdentity, Counter64, IpAddress, Counter32, iso, Integer32, NotificationType, MibIdentifier, Bits, Unsigned32, TimeTicks, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "Counter64", "IpAddress", "Counter32", "iso", "Integer32", "NotificationType", "MibIdentifier", "Bits", "Unsigned32", "TimeTicks", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
fcMgmtMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 8888))
fcMgmtMIB.setRevisions(('2001-01-15 00:00', '2000-12-04 00:00', '2000-11-26 00:00', '2000-04-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fcMgmtMIB.setRevisionsDescriptions(("Made the following edits: - Made all '<xxx>Index' objects read-only (some were not-accessible). - Added all '<xxx>Index' objects to their appropriate group in the Conformance section (those which had been not-accessible had been excluded).", 'Made the following edits: - Used FcPortFCClass as the type for the fcConnUnitPortFCClassCap and fcConnUnitPortFCClassOp objects in the FcConnUnitPortEntry SEQUENCE statement. - Used fcConnUnitGlobalId instead of fcConnUnitId as notification objects in the fcConnUnitDeletedTrap and fcConnUnitEventTrap NOTIFICATION-TYPE macros.', 'The goal of this version was to re-write into SMIv2.', 'Initial revision, published as RFC XXXX.',))
if mibBuilder.loadTexts: fcMgmtMIB.setLastUpdated('200101150000Z')
if mibBuilder.loadTexts: fcMgmtMIB.setOrganization('IETF IPFC Working Group')
if mibBuilder.loadTexts: fcMgmtMIB.setContactInfo('S. Blumenau EMC Corporation 171 South Street Hopkinton, MA 01748-9103 U.S.A Tel: +1 508 435 1000 Fax: +1 508 435 4657 Email: blumenau_steven@emc.com')
if mibBuilder.loadTexts: fcMgmtMIB.setDescription('The fibre channel management MIB module.')
fcMgmtNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 8888, 0))
fcMgmtObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 8888, 1))
fcMgmtConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 8888, 2))
fcMgmtConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 8888, 1, 1))
fcMgmtNotifyFilter = MibIdentifier((1, 3, 6, 1, 2, 1, 8888, 1, 2))
fcMgmtStatistics = MibIdentifier((1, 3, 6, 1, 2, 1, 8888, 1, 3))
fcMgmtSNS = MibIdentifier((1, 3, 6, 1, 2, 1, 8888, 1, 4))
fcMgmtCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 8888, 2, 1))
fcMgmtGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 8888, 2, 2))
class FcNameId(TextualConvention, OctetString):
    description = 'Represents the Worldwide Name (WWN; IEEE 60-bit variety; standard part of T11 definitions for fibre channel) associated with a Fibre Channel (FC) entity.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class FcGlobalId(TextualConvention, OctetString):
    description = 'Represents the Worldwide Name (WWN; IEEE 124-bit variety) associated with a Fibre Channel (FC) entity.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class FcEventSeverity(TextualConvention, Integer32):
    description = 'The set of values which define the event severity that will be logged by this connectivity unit. Values unknown (1) through debug (9) are essentially self-explanatory; mark (10) means that all messages are logged.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("emergency", 2), ("alert", 3), ("critical", 4), ("error", 5), ("warning", 6), ("notify", 7), ("info", 8), ("debug", 9), ("mark", 10))

class FcUnitType(TextualConvention, Integer32):
    description = 'unknown (1) cannot be determined other (2) none of the following hub (3) passive connectivity unit supporting loop protocol. switch (4) active connectivity unit supporting multiple protocols. gateway (5) unit that converts not only the interface but also encapsulates the frame into another protocol. The assumption is that there are always two gateways connected together. For example, FC <-> ATM. converter (6) unit that converts from one interface to another. For example, FC <-> SCSI. hba (7) host bus adapter proxyAgent (8) software proxy-agent storageDevice (9) disk,cd,tape,etc host (10) host computer storageSubsystem (11) raid, library, etc module (12) subcomponent of a system swDriver (13) software driver storageAccessDevice (14) provides storage management and access for hetergeneous hosts and heterogeneous devices.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("hub", 3), ("switch", 4), ("gateway", 5), ("converter", 6), ("hba", 7), ("proxyAgent", 8), ("storageDevice", 9), ("host", 10), ("storageSubsystem", 11), ("module", 12), ("swDriver", 13), ("storageAccessDevice", 14))

class FcPortFCClass(TextualConvention, Bits):
    description = 'Represents the class(es) of service represented on a given port, in a given operational context.'
    status = 'current'
    namedValues = NamedValues(("unknown", 0), ("classF", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5), ("class5", 6), ("class6", 7))

fcConnUnitNumber = MibScalar((1, 3, 6, 1, 2, 1, 8888, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitNumber.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitNumber.setDescription('The number of connectivity units present on this system. May be a count of the boards in a chassis or the number of full boxes in a rack.')
fcConnURL = MibScalar((1, 3, 6, 1, 2, 1, 8888, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnURL.setStatus('current')
if mibBuilder.loadTexts: fcConnURL.setDescription('The top-level URL of the system. If it does not exist the value is an empty string. The URL format is implementation dependent and can have keywords embedded that are preceeded by a percent sign (eg, %USER). The following are the defined keywords that will be recognized and replaced with data during a launch: USER - replace with username PASSWORD - replace with password GLOBALID - replace with globalid SERIALNO - replace with serial number A management application will read this object from the MIB, provide values for any of the keywords listed above that are present in the string, and then use the URL to invoke or launch the program referenced.')
fcConnUnitTable = MibTable((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3), )
if mibBuilder.loadTexts: fcConnUnitTable.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitTable.setDescription("The connectivity table contains general information on the system's units. The number of entries is given by the value of fcConnUnitNumber. It is 1 for stand-alone systems.")
fcConnUnitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1), ).setIndexNames((0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitId"))
if mibBuilder.loadTexts: fcConnUnitEntry.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEntry.setDescription('A connectivity unit entry containing objects for a particular unit.')
fcConnUnitId = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitId.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitId.setDescription('The unique identification for this connectivity unit among those within this proxy domain. The value MUST be unique within the proxy domain because it is the index variable for fcConnUnitTable. The value assigned to a given conectivity unit SHOULD be persistent across agent and unit resets. It SHOULD be the same as fcConnUnitGlobalId if fcConnUnitGlobalId is known and stable.')
fcConnUnitGlobalId = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 2), FcGlobalId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitGlobalId.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitGlobalId.setDescription('An optional global-scope identifier for this connectivity unit. It MUST be a WWN for this connectivity unit or 16 octets of value zero. WWN formats requiring fewer than 16 octets MUST be extended to 16 octets with trailing zero octets. If a WWN is used for fcConnUnitId, the same WWN MUST be used for fcConnUnitGlobalId. When a non-zero value is provided, it SHOULD be persistent across agent and unit resets. It SHOULD be globally unique. It SHOULD be one of these FC-PH/PH3 formats: IEEE (NAA=1) IEEE Extended (NAA=2) IEEE Registered (NAA=5). IEEE Registered extended (NAA=6). Use of the IEEE formats allows any IEEE-registered vendor to assure global uniqueness independently. The following are some references on IEEE WWN formats: http://standards.ieee.org/regauth/oui/tutorials/fibreformat.html http://standards.ieee.org/regauth/oui/tutorials/fibrecomp_id.html If one or more WWNs are associated with the connectivity unit via other management methods, one of them SHOULD be used for fcConnUnitGlobalId. If there is not a WWN assigned specifically to the connectivity unit, there is some merit, though not a requirement, to using a WWN assigned to (one of) its permanently attached FC/LAN interface(s). This can not risk uniqueness, though. As a counterexample, if your agent runs in a host and the host has an HBA, it is quite possible that agent, host, and HBA will all be distinct connectivity units, so the host and agent can not use the WWN of the HBA. Another example: If your hub has a built-in Ethernet port, it might be reasonable for the hub to use its LAN address (prefixed with the appropriate NAA) as its fcConnUnitId. But if the Ethernet were a replaceable PCCard, the hub should have an independent ID.')
fcConnUnitType = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 3), FcUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitType.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitType.setDescription('The type of this connectivity unit.')
fcConnUnitNumPorts = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitNumPorts.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitNumPorts.setDescription('The number of physical ports in the connectivity unit (internal/embedded, external).')
fcConnUnitNumLinks = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitNumLinks.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitNumLinks.setDescription('The number of links in the link table.')
fcConnUnitState = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitState.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitState.setDescription('This object reports the overall state of the connectivity unit. The meaning of all values is essentially self-explanatory. Any of these values may occur with any of the fcConnUnitStatus values.')
fcConnUnitStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("unused", 2), ("ok", 3), ("warning", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitStatus.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitStatus.setDescription('This object reports the overall status of the connectivity unit. The warning (4) value means that the connectivity unit needs attention; all other values are essentially self-explanatory. Any of these values may occur with any of the fcConnUnitState values.')
fcConnUnitProduct = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitProduct.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitProduct.setDescription("The connectivity unit vendor's product model name.")
fcConnUnitSerialNo = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSerialNo.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSerialNo.setDescription('The serial number identification for this connectivity unit.')
fcConnUnitUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitUpTime.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitUpTime.setDescription('The number of centiseconds since the last unit initialization.')
fcConnUnitUrl = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitUrl.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitUrl.setDescription('URL to launch a management application, if applicable. Otherwise empty string. In a standalone unit, this would be the same as the top-level URL. This has the same definition as fcConnURL for keywords.')
fcConnUnitDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitDomainId.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitDomainId.setDescription('24 bit Fibre Channel address ID of this connectivity unit. Following the fibre channel standard, the right-most bit of the right-most octet is for the least significant bit of the address value; the left-most bit of the left-most octet, if needed, is for the most significant bit of the address value. If this value is not applicable, all bits set to 1.')
fcConnUnitProxyMaster = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitProxyMaster.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitProxyMaster.setDescription("A value of 'yes' means this is the proxy master unit for a set of managed units. For example, this could be the only unit with a management card in it for a set of units. A standalone unit should return 'yes' for this object.")
fcConnUnitPrincipal = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPrincipal.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPrincipal.setDescription('Whether this connectivity unit is the principal unit within the group of fabric elements. If this value is not applicable, return unknown.')
fcConnUnitNumSensors = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitNumSensors.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitNumSensors.setDescription('Number of sensors in the fcConnUnitSensorTable.')
fcConnUnitNumRevs = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitNumRevs.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitNumRevs.setDescription('The number of revisions in the fcConnUnitRevsTable.')
fcConnUnitModuleId = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitModuleId.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitModuleId.setDescription("This is a unique id, persistent between boots, that can be used to group a set of connectivity units together into a module. The intended use would be to create a connectivity unit with a fcConnUnitType of 'module' to represent a physical or logical group of connectivity units. Then the members of the group would set the value of fcConnUnitId for this 'container' connectivity unit. fcConnUnitModuleId should be zeros if this connectivity unit is not part of a module.")
fcConnUnitName = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 18), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnUnitName.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitName.setDescription('A name for this connectivity unit. This object value should be persistent between boots.')
fcConnUnitInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 19), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnUnitInfo.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitInfo.setDescription('Information about this connectivity unit. This object value should be persistent between boots.')
fcConnUnitControl = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("resetConnUnitColdStart", 3), ("resetConnUnitWarmStart", 4), ("offlineConnUnit", 5), ("onlineConnUnit", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnUnitControl.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitControl.setDescription("This object is used to control the addressed connectivity unit. NOTE: 'ColdStart' and 'WarmStart' are as defined in mib-2 and are not meant to be a factory reset. resetConnUnitColdStart: the addressed unit performs a 'ColdStart' reset. resetConnUnitWarmStart: the addressed unit performs a 'WarmStart' reset. offlineConnUnit: the addressed unit puts itself into an implementation dependant 'offline' state. In general,if a unit is in an offline state, it cannot be used to perform meaningful Fibre Channel work. onlineConnUnit: the addressed unit puts itself into an implementation dependant 'online' state. In general, if a unit is in an online state, it is capable of performing meaningful Fibre Channel work. NOTE: Each implementation may chose not to support SNMP Set operations for any or all of these values. For Sets specifying varbinds for instances of this object and values not supported by a given implementation, the agent will return the SNMP WrongValue PDU error code.")
fcConnUnitContact = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 21), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnUnitContact.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitContact.setDescription('Contact information for this connectivity unit. The contact information is intended to facilitate contacting someone in case of problems, questions, etc. (e.g., the a help desk internal to a company).')
fcConnUnitLocation = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 22), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnUnitLocation.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLocation.setDescription('Location information for this connectivity unit.')
fcConnUnitEventFilter = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 23), FcEventSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnUnitEventFilter.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventFilter.setDescription('This value defines the event severity that will be logged by this connectivity unit. All events of severity less than or equal to fcConnUnitEventFilter are logged in the fcConnUnitEventTable.')
fcConnUnitNumEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitNumEvents.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitNumEvents.setDescription('Number of events currently in the fcConnUnitEventTable.')
fcConnUnitMaxEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitMaxEvents.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitMaxEvents.setDescription('Max number of events that can be recorded at any one time in the fcConnUnitEventTable.')
fcConnUnitEventCurrID = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitEventCurrID.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventCurrID.setDescription('The last used event ID (fcConnUnitEventId) recorded in the fcConnUnitEventTable. When no events are presently recorded in the fcConnUnitEventTable, the value of this object MUST be zero.')
fcConnUnitFabricID = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 3, 1, 27), FcGlobalId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitFabricID.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitFabricID.setDescription('A globally unique value to identify the fabric that this ConnUnit belongs to, otherwise empty string. This would typically be equal to the connUnitGlobalID of the primary switch in a Fibre Channel fabric.')
fcConnUnitRevsTable = MibTable((1, 3, 6, 1, 2, 1, 8888, 1, 1, 4), )
if mibBuilder.loadTexts: fcConnUnitRevsTable.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitRevsTable.setDescription('Table of the revisions of components (e.g., firmware, hardware, etc.) supported by the connectivity units managed by this agent.')
fcConnUnitRevsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8888, 1, 1, 4, 1), ).setIndexNames((0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitId"), (0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitRevsIndex"))
if mibBuilder.loadTexts: fcConnUnitRevsEntry.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitRevsEntry.setDescription('A row in the fcConnUnitRevsTable.')
fcConnUnitRevsIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitRevsIndex.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitRevsIndex.setDescription('A unique value among all fcConnUnitRevsEntrys with the same value of fcConnUnitId, in the range between 1 and fcConnUnitNumRevs[fcConnUnitId].')
fcConnUnitRevsRevision = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitRevsRevision.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitRevsRevision.setDescription('A vendor-specific value identifying a revision of a component of the connectivity unit.')
fcConnUnitRevsDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitRevsDescription.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitRevsDescription.setDescription('Description of a component in the ConnUnit to which the revision corresponds.')
fcConnUnitSensorTable = MibTable((1, 3, 6, 1, 2, 1, 8888, 1, 1, 5), )
if mibBuilder.loadTexts: fcConnUnitSensorTable.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorTable.setDescription('Table of the sensors supported by each connectivity unit.')
fcConnUnitSensorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8888, 1, 1, 5, 1), ).setIndexNames((0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitId"), (0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorIndex"))
if mibBuilder.loadTexts: fcConnUnitSensorEntry.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorEntry.setDescription('Each entry contains the information for a specific sensor.')
fcConnUnitSensorIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSensorIndex.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorIndex.setDescription('A unique value among all fcConnUnitSensorEntrys with the same value of fcConnUnitId, in the range between 1 and fcConnUnitNumSensors[fcConnUnitId].')
fcConnUnitSensorName = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSensorName.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorName.setDescription('A textual identification of the sensor intended primarily for operator use.')
fcConnUnitSensorStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("ok", 3), ("warning", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSensorStatus.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorStatus.setDescription('The status indicated by the sensor. unknown (1) = the unit cannot determine the status other (2) = the status does not fit any of the remaining values ok (3) = indicates good status warning (4) = indicates the unit needs attention failed (5) = indicates the unit is non-functional')
fcConnUnitSensorInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 5, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSensorInfo.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorInfo.setDescription('Miscellaneous static information about the sensor such as its serial number.')
fcConnUnitSensorMessage = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 5, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSensorMessage.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorMessage.setDescription("This describes the status of the sensor as a message. It may also provide more resolution on the sensor indication, for example 'Cover temperature 1503K, above nominal operating range'")
fcConnUnitSensorType = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("battery", 3), ("fan", 4), ("powerSupply", 5), ("transmitter", 6), ("enclosure", 7), ("board", 8), ("receiver", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSensorType.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorType.setDescription('The type of component being monitored by this sensor. The unknown (1) and other (2) values meanings analogous to those for the fcConnUnitSensorStatus object; all other values are essentially self-explanatory.')
fcConnUnitSensorCharacteristic = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("temperature", 3), ("pressure", 4), ("emf", 5), ("currentValue", 6), ("airflow", 7), ("frequency", 8), ("power", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSensorCharacteristic.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorCharacteristic.setDescription('The characteristics being monitored by this sensor. The unknown (1) and other (2) values meanings analogous to those for the fcConnUnitSensorStatus object; emf (5) refers to electro-magnetic field; all other values are essentially self-explanatory.')
fcConnUnitPortTable = MibTable((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6), )
if mibBuilder.loadTexts: fcConnUnitPortTable.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortTable.setDescription('Generic information on ports for a specific connectivity unit.')
fcConnUnitPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1), ).setIndexNames((0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitId"), (0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortIndex"))
if mibBuilder.loadTexts: fcConnUnitPortEntry.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortEntry.setDescription('Each entry contains the information for a specific port.')
fcConnUnitPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortIndex.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortIndex.setDescription('A unique value among all fcConnUnitPortEntrys on this connectivity unit, between 1 and fcConnUnitNumPorts.')
fcConnUnitPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("notPresent", 3), ("hubPort", 4), ("nPort", 5), ("lPort", 6), ("flPort", 7), ("fPort", 8), ("ePort", 9), ("gPort", 10), ("domainController", 11), ("hubController", 12), ("scsi", 13), ("escon", 14), ("lan", 15), ("wan", 16), ("wdm", 17), ("ib", 18), ("ipstore", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortType.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortType.setDescription('The port type refers to the protocol active on the port and can take one of the following values: unknown (1) - cannot be determined other (2) - none of the following: notPresent (3) - no port hubPort (4) - hub port nPort (5) - end port for fabric lPort (6) - end port for loop flPort (7) - public loop fPort (8) - fabric port ePort (9) - fabric expansion port gPort (10) - generic fabric port domainController (11) - domain controller hubController (12) - hub controller scsi (13) - parallel SCSI port escon (14) - escon port lan (15) - LAN port wan (16) - WAN port wdm (17) - optical wave division multiplex ib (18) - Infiniband ipstore (19) - storage over IP')
fcConnUnitPortFCClassCap = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 3), FcPortFCClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortFCClassCap.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortFCClassCap.setDescription('Bit mask that specifies the classes of service capability of this port. If this object is not applicable, the agent MUST return all bits set to zero.')
fcConnUnitPortFCClassOp = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 4), FcPortFCClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortFCClassOp.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortFCClassOp.setDescription('Bit mask that specifies the classes of service that are currently operational at this port. If this object is not applicable, the agent MUST return all bits set to zero.')
fcConnUnitPortState = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("offline", 3), ("bypassed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortState.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortState.setDescription('The current state of the port hardware. The bypassed value (4) means that the port is online but is currently being isolated from the loop or fabric for some reason; the other values are essentially self-explanatory. Any value for this object may co-exist with any value for the fcConnUnitPortStatus object.')
fcConnUnitPortStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("unused", 2), ("ok", 3), ("warning", 4), ("failure", 5), ("notParticipating", 6), ("initializing", 7), ("bypassed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatus.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatus.setDescription('The current overall protocol status for the port. The warning value (4) means that the port needs attention; the notParticipating value (6) means that protocol is not being processed; the initializing value (7) means that the port is in the process of coming into service; the bypassed value (8) means that the port has been manually or automatically isolated from the loop or fabric; the other values are essentially self-explanatory. Any value for this object may co-exist with any value for the fcConnUnitPortState object.')
fcConnUnitPortTransmitterType = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("unused", 3), ("shortwave", 4), ("longwave", 5), ("copper", 6), ("scsi", 7), ("longwaveNoOFC", 8), ("shortwaveNoOFC", 9), ("longwaveLED", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortTransmitterType.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortTransmitterType.setDescription('The technology of the port transceiver.')
fcConnUnitPortModuleType = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("gbic", 3), ("embedded", 4), ("glm", 5), ("gbicSerialId", 6), ("gbicNoSerialId", 7), ("gbicNotInstalled", 8), ("smallFormFactor", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortModuleType.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortModuleType.setDescription("The module type of the port connector. This object refers to the hardware implementation of the port. The embedded value (4) means 'fixed' (e.g., oneXnine).")
fcConnUnitPortWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 9), FcGlobalId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortWwn.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortWwn.setDescription('The World Wide Name of the port if applicable, otherwise empty string.')
fcConnUnitPortFCId = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortFCId.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortFCId.setDescription('This is the assigned Fibre Channel ID of this port. This value is expected to be a Big Endian value of 24 bits. If this is loop, then it is the ALPA that is connected. If this is an eport, then it will only contain the domain ID left justified, zero filled. If this port does not have a Fibre Channel address, return all bits set to 1.')
fcConnUnitPortSerialNo = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortSerialNo.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortSerialNo.setDescription('The serial number identification of the unit (e.g., for a GBIC). If this is not applicable, return a zero-length string.')
fcConnUnitPortRevision = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortRevision.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortRevision.setDescription('The port revision (e.g., for a GBIC).')
fcConnUnitPortVendor = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortVendor.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortVendor.setDescription('The port vendor (e.g., for a GBIC).')
fcConnUnitPortSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 14), Unsigned32()).setUnits('kilobytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortSpeed.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortSpeed.setDescription('The speed of the port in kilobytes per second.')
fcConnUnitPortControl = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("resetConnUnitPort", 3), ("bypassConnUnitPort", 4), ("unbypassConnUnitPort", 5), ("offlineConnUnitPort", 6), ("onlineConnUnitPort", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnUnitPortControl.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortControl.setDescription("This object is used to control the addressed fcConnUnit's port. Valid commands are: unknown and invalid are only used as values that are read. resetConnUnitPort (3): If the addressed connectivity unit allows this operation to be performed on this port, the addressed port performs a vendor-specific 'reset' operation. Examples of these operations are: the Link Reset protocol, the Loop Initialization protocol, or a resynchronization occurring between the transceiver in the addressed port to the transceiver that the port is connected to. bypassConnUnitPort (4): If the addressed connectivity unit allows this operation to be performed to this port, the addressed port performs a vendor-specific 'bypass' operation. Examples of these operations are: transitioning from online to offline, a request (NON- PARTICIPATING) command to the Loop Port state machine, or removal of the port from an arbitrated loop by a hub. unbypassConnUnitPort (5): If the addressed connectivity unit allows this operation to be performed to this port, the addressed port performs a vendor-specific 'unbypass' operation. Examples of these operations are: the Link Failure protocol, a request (PARTICIPATING) command to the Loop Port state machine, or addition of the port to an arbitrated loop by a hub. offlineConnUnitPort (6): If the addressed connectivity unit allows this operation to be performed to this port, the addressed port performs a vendor-specific 'offline' operation. Examples of these operations are: disabling a port's transceiver, the Link Failure protocol, request (NON-PARTICIPATING) command to the Loop Port state machine, or removal of the port from an arbitrated loop by a hub. onlineConnUnitPort (7): If the addressed connectivity unit allows this operation to be performed to this port, the addressed port performs a vendor-specific 'online' operation. Examples of these operations are: enabling a port's transceiver, the Link Failure protocol, request (PARTICIPATING) command to the Loop Port state machine, or addition of the port from an arbitrated loop by a hub. NOTE: Each implementation may chose not to support SNMP Set operations for any or all of these values. For Sets specifying varbinds for instances of this object and values not supported by a given implementation, the agent will return the SNMP WrongValue PDU error code.")
fcConnUnitPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 16), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnUnitPortName.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortName.setDescription('A string describing the addressed port.')
fcConnUnitPortPhysicalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortPhysicalNumber.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortPhysicalNumber.setDescription('This is the internal port number this port is known by. In many implementations, this should be the same as fcConnUnitPortIndex. Some implementations may have an internal port representation not compatible with the rules for table indices. In that case, provide the internal representation of this port in this object. This value may also be used in the fcConnUnitLinkPortNumberX or fcConnUnitLinkPortNumberY objects of the fcConnUnitLinkTable.')
fcConnUnitPortProtocolCap = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortProtocolCap.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortProtocolCap.setDescription('Bit mask that specifies the driver level protocol capability of this port. If this is not applicable, return all bits set to zero. The bits have the following definition: unknown - 0 Loop - 1 Fabric - 2 SCSI - 4 TCP/IP - 8 VI - 16 FICON - 32')
fcConnUnitPortProtocolOp = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortProtocolOp.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortProtocolOp.setDescription('Bit mask that specifies the driver level protocol(s) that are currently operational. If this is not applicable, return all bits set to zero. This object has the same definition as fcConnUnitPortProtocolCap')
fcConnUnitPortNodeWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 20), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortNodeWwn.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortNodeWwn.setDescription('The Node World Wide Name of the port if applicable, otherwise all zeros. This should have the same value for a group of related ports. The container is defined as the largest physical entity. For example, all ports on HBAs on a host will have the same Node WWN. All ports on the same storage subsystem will have the ame Node WWN.')
fcConnUnitPortHWState = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("failed", 2), ("bypassed", 3), ("active", 4), ("loopback", 5), ("txfault", 6), ("noMedia", 7), ("linkDown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortHWState.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortHWState.setDescription('The hardware detected state of the port.')
fcConnUnitEventTable = MibTable((1, 3, 6, 1, 2, 1, 8888, 1, 1, 7), )
if mibBuilder.loadTexts: fcConnUnitEventTable.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventTable.setDescription('The table of connectivity unit events. Errors, warnings, and information should be reported in this table.')
fcConnUnitEventEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8888, 1, 1, 7, 1), ).setIndexNames((0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitId"), (0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventIndex"))
if mibBuilder.loadTexts: fcConnUnitEventEntry.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventEntry.setDescription('Each entry contains information on a specific event for the given connectivity unit.')
fcConnUnitEventIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitEventIndex.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventIndex.setDescription("Each connectivity unit has its own event buffer. As it wraps, it may write over previous events. This object is an index into the buffer. It is recommended that this table be read using 'getNext's to retrieve the initial table. The management application should read the event table at periodic intervals and then determine if any new entries were added by comparing the last known index value with the current highest index value. The management application should then update its copy of the event table. If the read interval is too long, it is possible that there may be events that may not be contained in the agent's internal event buffer. For example, an agent may read events 50-75. At the next read interval, fcConnUnitEventCurrID is 189. If the management app tries to read event index 76, and the agent's internal buffer is 100 entries max, event index 76 will no longer be available. The index value is an incrementing integer starting from one every time there is a table reset. On table reset, all contents are emptied and all indeces are set to zero. When an event is added to the table, the event is assigned the next higher integer value than the last item entered into the table. If the index value reaches its maximum value, the next item entered will cause the index value to roll over and start at one again.")
fcConnUnitREventTime = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitREventTime.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitREventTime.setDescription('This is the real time when the event occurred. It has the following format. DDMMYYYY HHMMSS DD=day number MM=month number YYYY=year number HH=hour number MM=minute number SS=seconds number If not applicable, return a NULL string.')
fcConnUnitSEventTime = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 7, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSEventTime.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSEventTime.setDescription('This is the sysuptime timestamp when the event occurred.')
fcConnUnitEventSeverity = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 7, 1, 4), FcEventSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitEventSeverity.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventSeverity.setDescription('The event severity level.')
fcConnUnitEventType = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("status", 3), ("configuration", 4), ("topology", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitEventType.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventType.setDescription('The type of this event.')
fcConnUnitEventObject = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 7, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitEventObject.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventObject.setDescription('This is used with the fcConnUnitEventType to identify which object the event refers to. It can be the OID of a connectivity unit or of another object like fcConnUnitPortStatus[...]')
fcConnUnitEventDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 7, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitEventDescr.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventDescr.setDescription('The description of the event.')
fcConnUnitLinkTable = MibTable((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8), )
if mibBuilder.loadTexts: fcConnUnitLinkTable.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkTable.setDescription('A list of links know to this agent from this connectivity unit to other connectivity units.')
fcConnUnitLinkEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1), ).setIndexNames((0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitId"), (0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkIndex"))
if mibBuilder.loadTexts: fcConnUnitLinkEntry.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkEntry.setDescription('An entry describing a particular link to another.')
fcConnUnitLinkIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkIndex.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkIndex.setDescription('This value is used to create a unique value for each entry in the link table with the same fcConnUnitId. The value can only be reused if it is not currently in use and the value is the next candidate to be used. This value is allowed to wrap at the highest value represented by the number of bits. This value is reset to zero when the system is reset and the first value to be used is 1.')
fcConnUnitLinkNodeIdX = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkNodeIdX.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkNodeIdX.setDescription('The node WWN of the unit at one end of the link. If the node WWN is unknown and the node is an fcConnUnit in the responding agent then the value of this object MUST be equal to its fcConnUnitId.')
fcConnUnitLinkPortNumberX = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkPortNumberX.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkPortNumberX.setDescription('The port number on the unit specified by fcConnUnitLinkNodeIdX if known, otherwise -1. If the value is non-negative then it will be equal to fcConnUnitPortPhysicalNumber.')
fcConnUnitLinkPortWwnX = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkPortWwnX.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkPortWwnX.setDescription('The port WWN of the unit specified by fcConnUnitLinkNodeIdX if known, otherwise 16 octets of binary 0.')
fcConnUnitLinkNodeIdY = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkNodeIdY.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkNodeIdY.setDescription('The node WWN of the unit at the other end of the link. If the node WWN is unknown and the node is an fcConnUnit in the responding agent, then the value of this object MUST be equal to its fcConnUnitId.')
fcConnUnitLinkPortNumberY = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkPortNumberY.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkPortNumberY.setDescription('The port number on the unit specified by fcConnUnitLinkNodeIdY if known, otherwise -1. If the value is non-negative then it will be equal to fcConnUnitPortPhysicalNumber.')
fcConnUnitLinkPortWwnY = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkPortWwnY.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkPortWwnY.setDescription('The port WWN on the unit specified by fcConnUnitLinkNodeIdY if known, otherwise 16 octets of binary 0.')
fcConnUnitLinkAgentAddressY = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkAgentAddressY.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkAgentAddressY.setDescription('The address of an FCMGMT MIB agent for the node identified by fcConnUnitLinkNodeIdY, if known; otherwise 16 octets of binary 0.')
fcConnUnitLinkAgentAddressTypeY = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkAgentAddressTypeY.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkAgentAddressTypeY.setDescription("If fcConnUnitLinkAgentAddressY is non-zero, then it is a protocol address. fcConnUnitLinkAgentAddressTypeY is the the 'address family number' assigned by IANA to identify the address format (eg, 1 is Ipv4, 2 is Ipv6).")
fcConnUnitLinkAgentMask = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkAgentMask.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkAgentMask.setDescription('The mask to use for the address specified.')
fcConnUnitLinkAgentPortY = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkAgentPortY.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkAgentPortY.setDescription('The IP port number for the agent. This is provided in case the agent is at a non-standard SNMP port.')
fcConnUnitLinkUnitTypeY = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 12), FcUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkUnitTypeY.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkUnitTypeY.setDescription('Type of the FC connectivity unit as defined in fcConnUnitType.')
fcConnUnitLinkConnIdY = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 1, 8, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitLinkConnIdY.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitLinkConnIdY.setDescription('This is the Fibre Channel ID of this port. If the connectivity unit is a switch, this is expected to be a 24-bit Big Endian value. If this is loop, then it is the ALPA that is connected. If this is an e-port, then it will only contain the domain ID. If not any of those, unknown or cascaded loop, return all bits set to 1.')
fcConnUnitPortStatTable = MibTable((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1), )
if mibBuilder.loadTexts: fcConnUnitPortStatTable.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatTable.setDescription('A list of statistics for the ports.')
fcConnUnitPortStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1), ).setIndexNames((0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitId"), (0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatIndex"))
if mibBuilder.loadTexts: fcConnUnitPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatEntry.setDescription('An entry describing port statistics.')
fcConnUnitPortStatIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatIndex.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatIndex.setDescription('A unique value among all entrys in this table, between 0 and fcConnUnitNumPort[fcConnUnitPortUnitId].')
fcConnUnitPortStatErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatErrs.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatErrs.setDescription('A count of the errors that have occured on this port.')
fcConnUnitPortStatTxObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatTxObjects.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatTxObjects.setDescription('The number of frames/packets/IOs/etc that have been transmitted by this port. Note: A Fibre Channel frame starts with SOF and ends with EOF. FC loop devices should not count frames passed through. This value represents the sum total for all other Tx objects.')
fcConnUnitPortStatRxObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatRxObjects.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatRxObjects.setDescription('The number of frames/packets/IOs/etc that have been received by this port. Note: A Fibre Channel frame starts with SOF and ends with EOF. FC loop devices should not count frames passed through. This value represents the sum total for all other Rx objects.')
fcConnUnitPortStatTxElements = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatTxElements.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatTxElements.setDescription('The number of octets or bytes that have been transmitted by this port. One second periodic polling of the port. This value is saved and compared with the next polled value to compute net throughput. Note, for Fibre Channel, ordered sets are not included in the count.')
fcConnUnitPortStatRxElements = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatRxElements.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatRxElements.setDescription('The number of octets or bytes that have been received by this port. One second periodic polling of the port. This value is saved and compared with the next polled value to compute net throughput. Note, for Fibre Channel, ordered sets are not included in the count.')
fcConnUnitPortStatBBCreditZero = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatBBCreditZero.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatBBCreditZero.setDescription('Count of transitions in/out of BBcredit zero state. The other side is not providing any credit. Note, this is a Fibre Channel stat only.')
fcConnUnitPortStatInputBuffsFull = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatInputBuffsFull.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatInputBuffsFull.setDescription('Count of occurrences when all input buffers of a port were full and outbound buffer-to-buffer credit transitioned to zero. There is no credit to provide to other side. Note, this is a Fibre Channel stat only.')
fcConnUnitPortStatFBSYFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatFBSYFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatFBSYFrames.setDescription('Count of times that FBSY was returned to this port as a result of a frame that could not be delivered to the other end of the link. This occurs if either the Fabric or the destination port is temporarily busy. Port can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat. This is the sum of all classes. If you cannot keep the by class counters, then keep the sum counters.')
fcConnUnitPortStatPBSYFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatPBSYFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatPBSYFrames.setDescription('Count of times that PBSY was returned to this port as a result of a frame that could not be delivered to the other end of the link. This occurs if the destination port is temporarily busy. PBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.This is the sum of all classes. If you cannot keep the by class counters, then keep the sum counters.')
fcConnUnitPortStatFRJTFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatFRJTFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatFRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Frame that was rejected by the fabric. Note, this is the total for all classes and is a Fibre Channel only stat.')
fcConnUnitPortStatPRJTFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatPRJTFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatPRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Frame that was rejected at the destination N_Port. Note, this is the total for all classes and is a Fibre Channel only stat.')
fcConnUnitPortStatC1RxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC1RxFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC1RxFrames.setDescription('Count of Class 1 Frames received at this port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC1TxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC1TxFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC1TxFrames.setDescription('Count of Class 1 Frames transmitted out this port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC1FBSYFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC1FBSYFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC1FBSYFrames.setDescription('Count of times that FBSY was returned to this port as a result of a Class 1 Frame that could not be delivered to the other end of the link. This occurs if either the Fabric or the destination port is temporarily busy. FBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC1PBSYFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC1PBSYFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC1PBSYFrames.setDescription('Count of times that PBSY was returned to this port as a result of a Class 1 Frame that could not be delivered to the other end of the link. This occurs if the destination N_Port is temporarily busy. PBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC1FRJTFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC1FRJTFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC1FRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Class 1 Frame that was rejected by the fabric. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC1PRJTFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC1PRJTFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC1PRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Class 1 Frame that was rejected at the destination N_Port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC2RxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC2RxFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC2RxFrames.setDescription('Count of Class 2 Frames received at this port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC2TxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC2TxFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC2TxFrames.setDescription('Count of Class 2 Frames transmitted out this port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC2FBSYFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC2FBSYFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC2FBSYFrames.setDescription('Count of times that FBSY was returned to this port as a result of a Class 2 Frame that could not be delivered to the other end of the link. This occurs if either the Fabric or the destination port is temporarily busy. FBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC2PBSYFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC2PBSYFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC2PBSYFrames.setDescription('Count of times that PBSY was returned to this port as a result of a Class 2 Frame that could not be delivered to the other end of the link. This occurs if the destination N_Port is temporarily busy. PBSY can only occur on SOFc1 frames (the frames that establish a connection). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC2FRJTFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC2FRJTFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC2FRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Class 2 Frame that was rejected by the fabric. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC2PRJTFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC2PRJTFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC2PRJTFrames.setDescription('Count of times that FRJT was returned to this port as a result of a Class 2 Frame that was rejected at the destination N_Port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC3RxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC3RxFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC3RxFrames.setDescription('Count of Class 3 Frames received at this port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC3TxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC3TxFrames.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC3TxFrames.setDescription('Count of Class 3 Frames transmitted out of this port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatC3Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatC3Discards.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatC3Discards.setDescription('Count of Class 3 Frames that were discarded upon reception at this port. There is no FBSY or FRJT generated for Class 3 Frames. They are simply discarded if they cannot be delivered. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatRxMcastObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatRxMcastObjects.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatRxMcastObjects.setDescription('Count of Multicast Frames or Packets received at this port.')
fcConnUnitPortStatTxMcastObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatTxMcastObjects.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatTxMcastObjects.setDescription('Count of Multicast Frames or Packets transmitted out this port.')
fcConnUnitPortStatRxBcastObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatRxBcastObjects.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatRxBcastObjects.setDescription('Count of Broadcast Frames or Packets received at this port.')
fcConnUnitPortStatTxBcastObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatTxBcastObjects.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatTxBcastObjects.setDescription('Count of Broadcast Frames or Packets transmitted out this port. On a Fibre Channel loop, count only OPNr frames generated.')
fcConnUnitPortStatRxLinkResets = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatRxLinkResets.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatRxLinkResets.setDescription('Count of Link resets. This is the number of LRs received. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatTxLinkResets = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatTxLinkResets.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatTxLinkResets.setDescription('Count of Link resets. This is the number LRs transmitted. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatLinkResets = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatLinkResets.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatLinkResets.setDescription('Count of Link resets and LIPs detected at this port. The number times the reset link protocol is initiated. These are the count of the logical resets, a count of the number of primatives. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatRxOfflineSeqs = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatRxOfflineSeqs.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatRxOfflineSeqs.setDescription('Count of Offline Primitive OLS received at this port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatTxOfflineSeqs = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatTxOfflineSeqs.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatTxOfflineSeqs.setDescription('Count of Offline Primitive OLS transmitted by this port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatOfflineSeqs = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatOfflineSeqs.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatOfflineSeqs.setDescription('Count of Offline Primitive sequence received at this port. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatLinkFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatLinkFailures.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatLinkFailures.setDescription('Count of link failures. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatInvalidCRC = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatInvalidCRC.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatInvalidCRC.setDescription('Count of frames received with invalid CRC. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Loop ports should not count CRC errors passing through when monitoring. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatInvalidTxWords = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatInvalidTxWords.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatInvalidTxWords.setDescription('Count of invalid transmission words received at this port. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatPSPErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatPSPErrs.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatPSPErrs.setDescription('Count of primitive sequence protocol (PSP) errors detected at this port. This count is part of the Link Error Status Block (LESB) FC-PH 29.8). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatLossOfSignal = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatLossOfSignal.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatLossOfSignal.setDescription('Count of instances of signal loss detected at port. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatLossOfSync = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatLossOfSync.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatLossOfSync.setDescription('Count of instances of synchronization loss detected at port. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatInvOrderedSets = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatInvOrderedSets.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatInvOrderedSets.setDescription('Count of invalid ordered sets received at port. This count is part of the Link Error Status Block (LESB). (FC-PH 29.8). Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatFramesTooLong = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatFramesTooLong.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatFramesTooLong.setDescription('Count of frames received at this port where the frame length was greater than what was agreed to in FLOGI/PLOGI. This could be caused by losing the end of frame delimiter. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatFramesTooShort = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatFramesTooShort.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatFramesTooShort.setDescription('Count of frames received at this port where the frame length was less than the minimum indicated by the frame header - normally 24 bytes, but it could be more if the DFCTL field indicates an optional header should have been present. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatAddressErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatAddressErrs.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatAddressErrs.setDescription('Count of frames received with unknown addressing. e.g. unknown SID or DID. The SID or DID is not known to the routing algorithm. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatDelimiterErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatDelimiterErrs.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatDelimiterErrs.setDescription('Count of invalid frame delimiters received at this port. An example is a frame with a class 2 start and and a class 3 at the end. Note, this is a Fibre Channel only stat.')
fcConnUnitPortStatEncodingErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 3, 1, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitPortStatEncodingErrs.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatEncodingErrs.setDescription('Count of disparity errors received at this port. Note, this is a Fibre Channel only stat.')
fcConnUnitSnsMaxRows = MibScalar((1, 3, 6, 1, 2, 1, 8888, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsMaxRows.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsMaxRows.setDescription('The maximum number of rows in the fcConnUnitSnsTable table.')
fcConnUnitSnsTable = MibTable((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1), )
if mibBuilder.loadTexts: fcConnUnitSnsTable.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsTable.setDescription('This table contains an entry for each object registered with this port in the switch.')
fcConnUnitSnsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1), ).setIndexNames((0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitId"), (0, "FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsPortName"))
if mibBuilder.loadTexts: fcConnUnitSnsEntry.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsEntry.setDescription('The Simple Name Server table for the port represented by fcConnUnitSnsPortName .')
fcConnUnitSnsPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 1), FcGlobalId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsPortIdentifier.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsPortIdentifier.setDescription('The Port Identifier for this entry in the SNS table.')
fcConnUnitSnsPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 2), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsPortName.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsPortName.setDescription('The Port WWN for this entry in the SNS table.')
fcConnUnitSnsNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 3), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsNodeName.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsNodeName.setDescription('The Node Name for this entry in the SNS table.')
fcConnUnitSnsClassOfSvc = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsClassOfSvc.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsClassOfSvc.setDescription('The Classes of Service offered by this entry in the SNS table.')
fcConnUnitSnsNodeIPAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsNodeIPAddress.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsNodeIPAddress.setDescription('The IPv6 formatted address of the Node for this entry in the SNS table.')
fcConnUnitSnsProcAssoc = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsProcAssoc.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsProcAssoc.setDescription('The Process Associator for this entry in the SNS table.')
fcConnUnitSnsFC4Type = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsFC4Type.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsFC4Type.setDescription('The FC-4 Types supported by this entry in the SNS table.')
fcConnUnitSnsPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsPortType.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsPortType.setDescription('The Port Type of this entry in the SNS table.')
fcConnUnitSnsPortIPAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsPortIPAddress.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsPortIPAddress.setDescription('The IPv6 formatted address of this entry in the SNS table.')
fcConnUnitSnsFabricPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 10), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsFabricPortName.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsFabricPortName.setDescription('The Fabric Port name of this entry in the SNS table.')
fcConnUnitSnsHardAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 11), FcGlobalId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsHardAddress.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsHardAddress.setDescription('The Hard ALPA of this entry in the SNS table.')
fcConnUnitSnsSymbolicPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsSymbolicPortName.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsSymbolicPortName.setDescription('The Symbolic Port Name of this entry in the SNS table.')
fcConnUnitSnsSymbolicNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcConnUnitSnsSymbolicNodeName.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSnsSymbolicNodeName.setDescription('The Symbolic Node Name of this entry in the SNS table.')
fcTrapMaxClients = MibScalar((1, 3, 6, 1, 2, 1, 8888, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTrapMaxClients.setStatus('current')
if mibBuilder.loadTexts: fcTrapMaxClients.setDescription('The maximum number of SNMP trap recipients supported by the connectivity unit.')
fcTrapClientCount = MibScalar((1, 3, 6, 1, 2, 1, 8888, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTrapClientCount.setStatus('current')
if mibBuilder.loadTexts: fcTrapClientCount.setDescription('The current number of rows in the trap table.')
fcTrapRegTable = MibTable((1, 3, 6, 1, 2, 1, 8888, 1, 2, 3), )
if mibBuilder.loadTexts: fcTrapRegTable.setStatus('current')
if mibBuilder.loadTexts: fcTrapRegTable.setDescription('A table containing a row for each IP address/port number that traps will be sent to.')
fcTrapRegEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8888, 1, 2, 3, 1), ).setIndexNames((0, "FIBRE-CHANNEL-MGMT-MIB", "fcTrapRegIpAddress"), (0, "FIBRE-CHANNEL-MGMT-MIB", "fcTrapRegPort"))
if mibBuilder.loadTexts: fcTrapRegEntry.setStatus('current')
if mibBuilder.loadTexts: fcTrapRegEntry.setDescription('Ip/Port pair for a specific client.')
fcTrapRegIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 2, 3, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcTrapRegIpAddress.setStatus('current')
if mibBuilder.loadTexts: fcTrapRegIpAddress.setDescription('The Ip address of a client registered for traps.')
fcTrapRegPort = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcTrapRegPort.setStatus('current')
if mibBuilder.loadTexts: fcTrapRegPort.setDescription('The UDP port to send traps to for this host. Normally this would be the standard trap port (UDP/162).')
fcTrapRegFilter = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 2, 3, 1, 3), FcEventSeverity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcTrapRegFilter.setStatus('current')
if mibBuilder.loadTexts: fcTrapRegFilter.setDescription('This value defines the trap severity filter for this trap host. The fcConnUnit will send to the designated target entity traps that have a severity level less than or equal to this value.')
fcTrapRegRowState = MibTableColumn((1, 3, 6, 1, 2, 1, 8888, 1, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcTrapRegRowState.setStatus('current')
if mibBuilder.loadTexts: fcTrapRegRowState.setDescription('Specifies the operational status of the row. A RowStatus object may take any of six defined values: - active: traps may be sent as specified in this row; a management application may change the value of any objects in the row when the status is active. - notInService: traps will not be sent using this row. - notReady: the conceptual row exists in the agent, but is missing information necessary to send traps (i.e., if any of the other objects in the row are not present or contain invalid values); this value may not be supplied by a management application. - createAndGo: supplied by a management application wishing to create a new instance of a conceptual row, supplying valid values for the all the other objects in the row, and have its status automatically set to active, making it available for use in sending traps. - createAndWait: supplied by a management application wishing to create a new instance of a conceptual row but not make it available for use in sending traps at that time; and, - destroy: supplied by a management application wishing to delete an existing conceptual row.')
fcConnUnitStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 8888, 0, 1)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitStatus"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitState"))
if mibBuilder.loadTexts: fcConnUnitStatusChange.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitStatusChange.setDescription('The overall status of the connectivity unit has changed. Recommended severity level (for filtering): alert')
fcConnUnitDeletedTrap = NotificationType((1, 3, 6, 1, 2, 1, 8888, 0, 2)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitGlobalId"))
if mibBuilder.loadTexts: fcConnUnitDeletedTrap.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitDeletedTrap.setDescription('An fcConnUnit has been deleted from this agent. Recommended severity level (for filtering): warning')
fcConnUnitEventTrap = NotificationType((1, 3, 6, 1, 2, 1, 8888, 0, 3)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitGlobalId"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventType"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventObject"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventDescr"))
if mibBuilder.loadTexts: fcConnUnitEventTrap.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitEventTrap.setDescription('An event has been generated by the connectivity unit. Recommended severity level (for filtering): info')
fcConnUnitSensorStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 8888, 0, 4)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorStatus"))
if mibBuilder.loadTexts: fcConnUnitSensorStatusChange.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitSensorStatusChange.setDescription('The overall status of the connectivity unit has changed. Recommended severity level (for filtering): alert')
fcConnUnitPortStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 8888, 0, 5)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatus"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortState"))
if mibBuilder.loadTexts: fcConnUnitPortStatusChange.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitPortStatusChange.setDescription('The overall status of the connectivity unit has changed. Recommended severity level (for filtering): alert')
fcMgmtCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 8888, 2, 1, 1)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitGroup"), ("FIBRE-CHANNEL-MGMT-MIB", "fcCuEventGroup"), ("FIBRE-CHANNEL-MGMT-MIB", "fcCuLinkGroup"), ("FIBRE-CHANNEL-MGMT-MIB", "fcCuPortStatsGroup"), ("FIBRE-CHANNEL-MGMT-MIB", "fcCuTrapFiltersGroup"), ("FIBRE-CHANNEL-MGMT-MIB", "fcCuNotificationsGroup"), ("FIBRE-CHANNEL-MGMT-MIB", "fcCuSNSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcMgmtCompliance = fcMgmtCompliance.setStatus('current')
if mibBuilder.loadTexts: fcMgmtCompliance.setDescription('The compliance statement for Fibre Channel entities which implement this MIB module.')
fcConnUnitGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 8888, 2, 2, 1)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitNumber"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnURL"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitId"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitGlobalId"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitType"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitNumPorts"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitNumLinks"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitState"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitStatus"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitProduct"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSerialNo"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitUpTime"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitUrl"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitDomainId"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitProxyMaster"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPrincipal"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitNumSensors"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitNumRevs"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitModuleId"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitName"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitInfo"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitControl"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitContact"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLocation"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventFilter"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitNumEvents"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitMaxEvents"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventCurrID"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitFabricID"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitRevsIndex"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitRevsRevision"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitRevsDescription"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorIndex"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorName"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorStatus"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorInfo"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorMessage"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorType"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorCharacteristic"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortIndex"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortType"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortFCClassCap"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortFCClassOp"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortState"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatus"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortTransmitterType"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortModuleType"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortWwn"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortFCId"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortSerialNo"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortRevision"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortVendor"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortSpeed"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortControl"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortName"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortPhysicalNumber"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortProtocolCap"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortProtocolOp"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortNodeWwn"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortHWState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcConnUnitGroup = fcConnUnitGroup.setStatus('current')
if mibBuilder.loadTexts: fcConnUnitGroup.setDescription('The collection of objects providing Fibre Channel connectivity unit instrumentation and control.')
fcCuEventGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 8888, 2, 2, 2)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventIndex"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitREventTime"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSEventTime"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventSeverity"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventType"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventObject"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcCuEventGroup = fcCuEventGroup.setStatus('current')
if mibBuilder.loadTexts: fcCuEventGroup.setDescription('The collection of objects providing Fibre Channel connectivity unit event information.')
fcCuLinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 8888, 2, 2, 3)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkIndex"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkNodeIdX"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkPortNumberX"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkPortWwnX"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkNodeIdY"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkPortNumberY"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkPortWwnY"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkAgentAddressY"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkAgentAddressTypeY"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkAgentMask"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkAgentPortY"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkUnitTypeY"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitLinkConnIdY"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcCuLinkGroup = fcCuLinkGroup.setStatus('current')
if mibBuilder.loadTexts: fcCuLinkGroup.setDescription('The collection of objects providing Fibre Channel connectivity unit link (topology) information.')
fcCuPortStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 8888, 2, 2, 4)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatIndex"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatErrs"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatTxObjects"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatRxObjects"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatTxElements"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatRxElements"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatBBCreditZero"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatInputBuffsFull"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatFBSYFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatPBSYFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatFRJTFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatPRJTFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC1RxFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC1TxFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC1FBSYFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC1PBSYFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC1FRJTFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC1PRJTFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC2RxFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC2TxFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC2FBSYFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC2PBSYFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC2FRJTFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC2PRJTFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC3RxFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC3TxFrames"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatC3Discards"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatRxMcastObjects"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatTxMcastObjects"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatRxBcastObjects"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatTxBcastObjects"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatRxLinkResets"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatTxLinkResets"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatLinkResets"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatRxOfflineSeqs"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatTxOfflineSeqs"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatOfflineSeqs"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatLinkFailures"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatInvalidCRC"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatInvalidTxWords"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatPSPErrs"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatLossOfSignal"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatLossOfSync"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatInvOrderedSets"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatFramesTooLong"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatFramesTooShort"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatAddressErrs"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatDelimiterErrs"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatEncodingErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcCuPortStatsGroup = fcCuPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: fcCuPortStatsGroup.setDescription('The collection of objects providing Fibre Channel connectivity unit port statistics.')
fcCuSNSGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 8888, 2, 2, 5)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsMaxRows"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsPortIdentifier"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsPortName"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsNodeName"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsClassOfSvc"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsNodeIPAddress"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsProcAssoc"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsFC4Type"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsPortType"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsPortIPAddress"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsFabricPortName"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsHardAddress"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsSymbolicPortName"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSnsSymbolicNodeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcCuSNSGroup = fcCuSNSGroup.setStatus('current')
if mibBuilder.loadTexts: fcCuSNSGroup.setDescription('The collection of objects providing Fibre Channel connectivity unit simple name server information.')
fcCuTrapFiltersGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 8888, 2, 2, 6)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcTrapMaxClients"), ("FIBRE-CHANNEL-MGMT-MIB", "fcTrapClientCount"), ("FIBRE-CHANNEL-MGMT-MIB", "fcTrapRegIpAddress"), ("FIBRE-CHANNEL-MGMT-MIB", "fcTrapRegPort"), ("FIBRE-CHANNEL-MGMT-MIB", "fcTrapRegFilter"), ("FIBRE-CHANNEL-MGMT-MIB", "fcTrapRegRowState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcCuTrapFiltersGroup = fcCuTrapFiltersGroup.setStatus('current')
if mibBuilder.loadTexts: fcCuTrapFiltersGroup.setDescription('The collection of objects controlling SNMP notification (i.e., trap) destinations.')
fcCuNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 8888, 2, 2, 7)).setObjects(("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitStatusChange"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitDeletedTrap"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitEventTrap"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitSensorStatusChange"), ("FIBRE-CHANNEL-MGMT-MIB", "fcConnUnitPortStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcCuNotificationsGroup = fcCuNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: fcCuNotificationsGroup.setDescription('The set of SNMP notifications which an agent is required to implement.')
mibBuilder.exportSymbols("FIBRE-CHANNEL-MGMT-MIB", FcUnitType=FcUnitType, fcConnUnitType=fcConnUnitType, fcMgmtMIB=fcMgmtMIB, fcConnUnitPortStatEncodingErrs=fcConnUnitPortStatEncodingErrs, fcConnUnitPortStatLossOfSignal=fcConnUnitPortStatLossOfSignal, fcConnUnitControl=fcConnUnitControl, fcConnUnitPortStatDelimiterErrs=fcConnUnitPortStatDelimiterErrs, fcConnUnitRevsIndex=fcConnUnitRevsIndex, fcConnUnitPortStatLinkFailures=fcConnUnitPortStatLinkFailures, fcConnUnitNumRevs=fcConnUnitNumRevs, fcConnUnitNumPorts=fcConnUnitNumPorts, fcConnUnitPortTransmitterType=fcConnUnitPortTransmitterType, fcConnUnitLocation=fcConnUnitLocation, fcConnUnitPortStatFBSYFrames=fcConnUnitPortStatFBSYFrames, fcConnUnitPortStatC2RxFrames=fcConnUnitPortStatC2RxFrames, fcConnUnitName=fcConnUnitName, fcConnUnitPortPhysicalNumber=fcConnUnitPortPhysicalNumber, fcConnUnitEventTrap=fcConnUnitEventTrap, fcConnUnitPortName=fcConnUnitPortName, fcConnUnitPortSerialNo=fcConnUnitPortSerialNo, fcConnUnitEntry=fcConnUnitEntry, fcConnUnitState=fcConnUnitState, fcConnUnitPortStatFramesTooLong=fcConnUnitPortStatFramesTooLong, FcEventSeverity=FcEventSeverity, fcConnUnitLinkPortWwnY=fcConnUnitLinkPortWwnY, fcConnUnitPortVendor=fcConnUnitPortVendor, fcConnUnitPortStatTxMcastObjects=fcConnUnitPortStatTxMcastObjects, fcConnUnitPortStatC2PBSYFrames=fcConnUnitPortStatC2PBSYFrames, fcConnUnitPortStatInvOrderedSets=fcConnUnitPortStatInvOrderedSets, fcTrapRegIpAddress=fcTrapRegIpAddress, fcConnUnitSEventTime=fcConnUnitSEventTime, fcConnUnitNumEvents=fcConnUnitNumEvents, fcConnUnitSnsClassOfSvc=fcConnUnitSnsClassOfSvc, fcMgmtCompliances=fcMgmtCompliances, fcConnUnitPortType=fcConnUnitPortType, fcConnUnitEventSeverity=fcConnUnitEventSeverity, fcConnUnitPortProtocolCap=fcConnUnitPortProtocolCap, fcConnUnitREventTime=fcConnUnitREventTime, fcConnUnitSnsPortType=fcConnUnitSnsPortType, fcConnUnitEventCurrID=fcConnUnitEventCurrID, fcConnUnitLinkConnIdY=fcConnUnitLinkConnIdY, fcConnUnitPortStatC1FRJTFrames=fcConnUnitPortStatC1FRJTFrames, fcConnUnitPortRevision=fcConnUnitPortRevision, fcConnUnitDomainId=fcConnUnitDomainId, fcConnUnitPortStatErrs=fcConnUnitPortStatErrs, fcConnUnitPortStatTxOfflineSeqs=fcConnUnitPortStatTxOfflineSeqs, fcConnUnitProduct=fcConnUnitProduct, fcCuEventGroup=fcCuEventGroup, fcMgmtNotifications=fcMgmtNotifications, fcConnUnitContact=fcConnUnitContact, fcConnUnitEventFilter=fcConnUnitEventFilter, fcConnUnitSensorEntry=fcConnUnitSensorEntry, fcConnUnitPortStatPRJTFrames=fcConnUnitPortStatPRJTFrames, FcPortFCClass=FcPortFCClass, fcMgmtConfig=fcMgmtConfig, fcConnUnitPortStatRxObjects=fcConnUnitPortStatRxObjects, fcConnUnitSnsProcAssoc=fcConnUnitSnsProcAssoc, fcConnUnitRevsEntry=fcConnUnitRevsEntry, fcConnUnitPortStatLossOfSync=fcConnUnitPortStatLossOfSync, fcConnUnitSensorName=fcConnUnitSensorName, fcConnUnitLinkUnitTypeY=fcConnUnitLinkUnitTypeY, fcConnUnitRevsRevision=fcConnUnitRevsRevision, fcConnUnitPortStatInvalidCRC=fcConnUnitPortStatInvalidCRC, fcCuLinkGroup=fcCuLinkGroup, fcConnUnitPortStatC3RxFrames=fcConnUnitPortStatC3RxFrames, fcConnUnitEventTable=fcConnUnitEventTable, fcConnUnitSnsSymbolicPortName=fcConnUnitSnsSymbolicPortName, fcConnUnitPortStatRxOfflineSeqs=fcConnUnitPortStatRxOfflineSeqs, fcConnUnitPortFCClassOp=fcConnUnitPortFCClassOp, fcTrapRegRowState=fcTrapRegRowState, fcConnUnitStatus=fcConnUnitStatus, fcConnUnitSerialNo=fcConnUnitSerialNo, fcTrapClientCount=fcTrapClientCount, fcConnUnitPortStatTxElements=fcConnUnitPortStatTxElements, fcConnUnitLinkAgentAddressY=fcConnUnitLinkAgentAddressY, fcConnUnitLinkEntry=fcConnUnitLinkEntry, fcConnUnitPortStatOfflineSeqs=fcConnUnitPortStatOfflineSeqs, fcConnUnitPortStatPSPErrs=fcConnUnitPortStatPSPErrs, fcConnUnitPortStatTable=fcConnUnitPortStatTable, fcConnUnitPortSpeed=fcConnUnitPortSpeed, fcConnUnitPortEntry=fcConnUnitPortEntry, fcConnUnitPortStatC1FBSYFrames=fcConnUnitPortStatC1FBSYFrames, fcConnUnitRevsDescription=fcConnUnitRevsDescription, fcConnUnitPortStatC2PRJTFrames=fcConnUnitPortStatC2PRJTFrames, fcConnUnitLinkTable=fcConnUnitLinkTable, fcConnUnitPortTable=fcConnUnitPortTable, fcConnUnitPortStatInputBuffsFull=fcConnUnitPortStatInputBuffsFull, fcConnUnitLinkPortNumberX=fcConnUnitLinkPortNumberX, fcConnUnitPortStatIndex=fcConnUnitPortStatIndex, fcConnUnitSnsFC4Type=fcConnUnitSnsFC4Type, fcConnUnitPortStatRxMcastObjects=fcConnUnitPortStatRxMcastObjects, fcTrapRegEntry=fcTrapRegEntry, FcGlobalId=FcGlobalId, fcConnUnitSensorCharacteristic=fcConnUnitSensorCharacteristic, fcConnUnitPortControl=fcConnUnitPortControl, fcConnUnitPortFCId=fcConnUnitPortFCId, fcConnUnitPortFCClassCap=fcConnUnitPortFCClassCap, fcConnUnitLinkPortNumberY=fcConnUnitLinkPortNumberY, fcConnUnitMaxEvents=fcConnUnitMaxEvents, fcConnUnitPortStatRxLinkResets=fcConnUnitPortStatRxLinkResets, fcConnUnitPortIndex=fcConnUnitPortIndex, fcConnUnitSnsHardAddress=fcConnUnitSnsHardAddress, fcTrapRegFilter=fcTrapRegFilter, fcConnUnitPortStatus=fcConnUnitPortStatus, fcTrapMaxClients=fcTrapMaxClients, fcConnUnitSensorMessage=fcConnUnitSensorMessage, fcConnUnitPortStatTxLinkResets=fcConnUnitPortStatTxLinkResets, fcConnUnitLinkAgentPortY=fcConnUnitLinkAgentPortY, fcMgmtGroups=fcMgmtGroups, fcConnUnitSensorIndex=fcConnUnitSensorIndex, fcConnUnitGroup=fcConnUnitGroup, fcConnUnitLinkNodeIdX=fcConnUnitLinkNodeIdX, fcCuNotificationsGroup=fcCuNotificationsGroup, fcConnUnitPortStatC2FRJTFrames=fcConnUnitPortStatC2FRJTFrames, fcConnUnitPortNodeWwn=fcConnUnitPortNodeWwn, fcConnUnitSensorType=fcConnUnitSensorType, fcConnUnitPortStatBBCreditZero=fcConnUnitPortStatBBCreditZero, fcConnUnitSnsFabricPortName=fcConnUnitSnsFabricPortName, fcCuSNSGroup=fcCuSNSGroup, fcConnUnitPortStatFramesTooShort=fcConnUnitPortStatFramesTooShort, fcConnUnitSnsTable=fcConnUnitSnsTable, fcConnURL=fcConnURL, fcConnUnitProxyMaster=fcConnUnitProxyMaster, fcConnUnitSensorTable=fcConnUnitSensorTable, fcConnUnitEventType=fcConnUnitEventType, fcConnUnitPortStatC2FBSYFrames=fcConnUnitPortStatC2FBSYFrames, fcConnUnitPortStatAddressErrs=fcConnUnitPortStatAddressErrs, fcConnUnitSnsMaxRows=fcConnUnitSnsMaxRows, fcConnUnitPortState=fcConnUnitPortState, fcConnUnitPortStatFRJTFrames=fcConnUnitPortStatFRJTFrames, fcConnUnitPortStatTxBcastObjects=fcConnUnitPortStatTxBcastObjects, fcConnUnitSnsPortIdentifier=fcConnUnitSnsPortIdentifier, fcMgmtSNS=fcMgmtSNS, fcConnUnitSnsNodeName=fcConnUnitSnsNodeName, fcTrapRegPort=fcTrapRegPort, fcConnUnitPortStatC3TxFrames=fcConnUnitPortStatC3TxFrames, fcConnUnitRevsTable=fcConnUnitRevsTable, fcConnUnitNumber=fcConnUnitNumber, fcConnUnitNumSensors=fcConnUnitNumSensors, fcConnUnitId=fcConnUnitId, fcConnUnitPortStatC1PRJTFrames=fcConnUnitPortStatC1PRJTFrames, fcConnUnitFabricID=fcConnUnitFabricID, fcConnUnitUpTime=fcConnUnitUpTime, fcMgmtNotifyFilter=fcMgmtNotifyFilter, fcConnUnitInfo=fcConnUnitInfo, fcConnUnitPortStatLinkResets=fcConnUnitPortStatLinkResets, fcConnUnitEventIndex=fcConnUnitEventIndex, fcConnUnitGlobalId=fcConnUnitGlobalId, fcConnUnitNumLinks=fcConnUnitNumLinks, fcConnUnitEventDescr=fcConnUnitEventDescr, fcConnUnitStatusChange=fcConnUnitStatusChange, fcConnUnitPortModuleType=fcConnUnitPortModuleType, fcConnUnitLinkAgentAddressTypeY=fcConnUnitLinkAgentAddressTypeY, fcConnUnitPortStatInvalidTxWords=fcConnUnitPortStatInvalidTxWords, fcConnUnitSnsSymbolicNodeName=fcConnUnitSnsSymbolicNodeName, fcConnUnitPortStatC2TxFrames=fcConnUnitPortStatC2TxFrames, fcConnUnitLinkPortWwnX=fcConnUnitLinkPortWwnX, fcConnUnitSnsPortIPAddress=fcConnUnitSnsPortIPAddress, fcMgmtStatistics=fcMgmtStatistics, fcTrapRegTable=fcTrapRegTable, FcNameId=FcNameId, fcConnUnitSnsPortName=fcConnUnitSnsPortName, fcConnUnitSensorStatusChange=fcConnUnitSensorStatusChange, fcConnUnitPortStatC1RxFrames=fcConnUnitPortStatC1RxFrames, fcConnUnitPrincipal=fcConnUnitPrincipal, fcConnUnitPortStatC1PBSYFrames=fcConnUnitPortStatC1PBSYFrames, fcConnUnitSensorInfo=fcConnUnitSensorInfo, fcConnUnitPortStatEntry=fcConnUnitPortStatEntry, fcConnUnitModuleId=fcConnUnitModuleId, fcConnUnitLinkIndex=fcConnUnitLinkIndex, fcCuTrapFiltersGroup=fcCuTrapFiltersGroup, fcConnUnitUrl=fcConnUnitUrl, fcCuPortStatsGroup=fcCuPortStatsGroup, fcConnUnitPortStatusChange=fcConnUnitPortStatusChange, fcConnUnitLinkNodeIdY=fcConnUnitLinkNodeIdY, fcConnUnitPortStatTxObjects=fcConnUnitPortStatTxObjects, fcConnUnitSnsNodeIPAddress=fcConnUnitSnsNodeIPAddress, fcConnUnitEventObject=fcConnUnitEventObject, fcMgmtConformance=fcMgmtConformance, fcMgmtCompliance=fcMgmtCompliance, fcConnUnitPortStatPBSYFrames=fcConnUnitPortStatPBSYFrames, fcConnUnitPortWwn=fcConnUnitPortWwn, fcConnUnitSnsEntry=fcConnUnitSnsEntry, fcConnUnitDeletedTrap=fcConnUnitDeletedTrap, fcConnUnitPortStatC3Discards=fcConnUnitPortStatC3Discards, fcConnUnitLinkAgentMask=fcConnUnitLinkAgentMask, fcConnUnitPortStatC1TxFrames=fcConnUnitPortStatC1TxFrames, fcConnUnitEventEntry=fcConnUnitEventEntry, fcConnUnitPortStatRxBcastObjects=fcConnUnitPortStatRxBcastObjects, fcMgmtObjects=fcMgmtObjects, PYSNMP_MODULE_ID=fcMgmtMIB, fcConnUnitTable=fcConnUnitTable, fcConnUnitPortHWState=fcConnUnitPortHWState, fcConnUnitSensorStatus=fcConnUnitSensorStatus, fcConnUnitPortStatRxElements=fcConnUnitPortStatRxElements, fcConnUnitPortProtocolOp=fcConnUnitPortProtocolOp)
