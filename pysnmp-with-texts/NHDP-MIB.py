#
# PySNMP MIB module NHDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NHDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:21:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
Float32TC, = mibBuilder.importSymbols("FLOAT-TC-MIB", "Float32TC")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressPrefixLength", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, TimeTicks, IpAddress, mib_2, Counter64, Gauge32, ObjectIdentity, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, iso, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "IpAddress", "mib-2", "Counter64", "Gauge32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "iso", "NotificationType", "Counter32")
TruthValue, DisplayString, TimeStamp, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention")
nhdpMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 213))
nhdpMIB.setRevisions(('2012-10-22 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nhdpMIB.setRevisionsDescriptions(('Initial version of this MIB module, published as RFC 6779.',))
if mibBuilder.loadTexts: nhdpMIB.setLastUpdated('201210221000Z')
if mibBuilder.loadTexts: nhdpMIB.setOrganization('IETF MANET Working Group')
if mibBuilder.loadTexts: nhdpMIB.setContactInfo('WG E-Mail: manet@ietf.org WG Chairs: sratliff@cisco.com jmacker@nrl.navy.mil Editors: Ulrich Herberg LIX, Ecole Polytechnique 91128 Palaiseau Cedex France ulrich@herberg.name http://www.herberg.name/ Robert G. Cole US Army CERDEC Space and Terrestrial Communications 6010 Frankford Street Bldg 6010, Room 453H Aberdeen Proving Ground, Maryland 21005 USA +1 443 395-8744 robert.g.cole@us.army.mil http://www.cs.jhu.edu/~rgcole/ Ian D Chakeres DRS CenGen 9250 Bendix Road North Columbia, Maryland 21045 USA ian.chakeres@gmail.com http://www.ianchak.com/')
if mibBuilder.loadTexts: nhdpMIB.setDescription("This NHDP-MIB module is applicable to routers implementing the Neighborhood Discovery Protocol defined in RFC 6130. Copyright (c) 2012 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info). This version of this MIB module is part of RFC 6779; see the RFC itself for full legal notices.")
nhdpNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 0))
nhdpObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 1))
nhdpConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 2))
class NeighborIfIndex(TextualConvention, Unsigned32):
    description = "An arbitrary, locally unique identifier associated with a virtual interface of a discovered NHDP neighbor. Due to the nature of NHDP, the local router may not know if two distinct addresses belong to the same interface of a neighbor or to two different interfaces. As the local router gains more knowledge of its neighbors, its local view may change, and this table will be updated to reflect the local router's current understanding, associating address sets to neighbor interfaces. The local router identifies a virtual neighbor interface through the receipt of address lists advertised through an NHDP HELLO message. All objects of type NeighborIfIndex are assigned by the agent out of a common number space. The value for each discovered virtual neighbor interface may not remain constant from one re-initialization of the entity's network management agent to the next re-initialization. If the local router gains information associating two virtual interfaces on a neighbor as a common interface, then the agent MUST aggregate the two address sets to a single index chosen from the set of aggregated indexes, and it MUST update all tables in this MIB module that are indexed by indexes of type NeighborIfIndex. It MAY then reuse freed index values following the next agent restart. The specific value is meaningful only within a given SNMP entity."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NeighborRouterIndex(TextualConvention, Unsigned32):
    description = "An arbitrary, locally unique identifier associated with a virtual discovered neighbor (one or two hop). Due to the nature of NHDP, the local router may identify multiple virtual neighbors that, in fact, are one and the same. Neighbors that are two hops away with more than one advertised address will exhibit this behavior. As the local router's knowledge of its neighbors' topology increases, the local router will be able to associate multiple virtual neighbor indexes into a single virtual neighbor index chosen from the set of aggregated indexes; it MUST update all tables in this MIB module indexed by these indexes, and it MAY reuse the freed indexes following the next agent re-initialization. All objects of type NeighborRouterIndex are assigned by the agent out of a common number space. The NeighborRouterIndex defines a discovered NHDP peer virtual neighbor of the local router. The value for each discovered virtual neighbor index MUST remain constant at least from one re-initialization of the entity's network management agent to the next re-initialization, except if an application is deleted and re-created. The specific value is meaningful only within a given SNMP entity. A NeighborRouterIndex value MUST not be reused until the next agent restart."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

nhdpConfigurationObjGrp = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 1, 1))
nhdpInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 1, 1), )
if mibBuilder.loadTexts: nhdpInterfaceTable.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: nhdpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: nhdpInterfaceTable.setDescription("The nhdpInterfaceTable describes the configuration of the interfaces of this router that are intended to use MANET control protocols. As such, this table 'sparse augments' the ifTable specifically when NHDP is to be configured to operate over this interface. The interface is identified by the ifIndex from the interfaces group defined in the Interfaces Group MIB module. A conceptual row in this table exists if and only if either a manager has explicitly created the row or there is an interface on the managed device that supports and runs NHDP. The manager can create a row by setting rowStatus to 'createAndGo' or 'createAndWait'. Row objects having associated DEFVAL clauses are automatically defined by the agent with these values during row creation, unless the manager explicitly defines these object values during the row creation. If the corresponding entry with ifIndex value is deleted from the Interface Table, then the entry in this table is automatically deleted, NHDP is disabled on this interface, and all configuration and state information related to this interface is to be removed from memory.")
nhdpInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpIfIndex"))
if mibBuilder.loadTexts: nhdpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpInterfaceEntry.setDescription('The nhdpInterfaceEntry describes one NHDP local interface configuration as indexed by its ifIndex as defined in the Standard MIB II Interface Table (RFC 2863). The objects in this table are persistent, and when written, the device SHOULD save the change to non-volatile storage. For further information on the storage behavior for these objects, refer to the description for the nhdpIfRowStatus object.')
nhdpIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nhdpIfIndex.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: nhdpIfIndex.setStatus('current')
if mibBuilder.loadTexts: nhdpIfIndex.setDescription('This value MUST correspond to an ifIndex referring to a valid entry in the Interfaces Table.')
nhdpIfName = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfName.setStatus('current')
if mibBuilder.loadTexts: nhdpIfName.setDescription("The textual name of the interface. The value of this object SHOULD be the name of the interface as assigned by the local device. This can be a text-name, such as 'le0' or a simple port number, such as '1', depending on the interface-naming syntax of the device. If there is no local name or this object is otherwise not applicable, then this object contains a zero-length string.")
nhdpIfStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpIfStatus.setStatus('current')
if mibBuilder.loadTexts: nhdpIfStatus.setDescription("nhdpIfStatus indicates whether this interface is currently running NHDP. A value of 'true(1)' indicates that NHDP is running on this interface. A value of 'false(2)' indicates that NHDP is not currently running on this interface. This corresponds to the I_manet parameter in the Local Interface Set of NHDP.")
nhdpHelloInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 4), Unsigned32().clone(2000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpHelloInterval.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpHelloInterval.setStatus('current')
if mibBuilder.loadTexts: nhdpHelloInterval.setDescription('nhdpHelloInterval corresponds to HELLO_INTERVAL of NHDP and represents the maximum time between the transmission of two successive HELLO messages on this MANET interface. Guidance for setting this object may be found in Section 5 of the NHDP specification (RFC 6130), which indicates that: o nhdpHelloInterval > 0 o nhdpHelloInterval >= nhdpHelloMinInterval')
nhdpHelloMinInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 5), Unsigned32().clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpHelloMinInterval.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpHelloMinInterval.setStatus('current')
if mibBuilder.loadTexts: nhdpHelloMinInterval.setDescription('nhdpHelloMinInterval corresponds to HELLO_MIN_INTERVAL of NHDP and represents the minimum interval between transmission of two successive HELLO messages on this MANET interface. Guidance for setting this object may be found in Section 5 of the NHDP specification (RFC 6130), which indicates that: o nhdpHelloMinInterval <= nhdpHelloInterval')
nhdpRefreshInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 6), Unsigned32().clone(2000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpRefreshInterval.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: nhdpRefreshInterval.setDescription('nhdpRefreshInterval corresponds to REFRESH_INTERVAL of NHDP and represents the maximum interval between advertisements of each 1-hop neighbor network address and its status. Each advertisement is in a HELLO message on this MANET interface. Guidance for setting this object may be found in Section 5 of the NHDP specification (RFC 6130), which indicates that: o nhdpRefreshInterval >= nhdpHelloInterval')
nhdpLHoldTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 7), Unsigned32().clone(6000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpLHoldTime.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLHoldTime.setStatus('current')
if mibBuilder.loadTexts: nhdpLHoldTime.setDescription('nhdpLHoldTime corresponds to L_HOLD_TIME of NHDP and represents the period of advertisement, on this MANET interface, of former 1-hop neighbor network addresses as lost in HELLO messages, allowing recipients of these HELLO messages to accelerate removal of this information from their Link Sets. Guidance for setting this object may be found in Section 5 of the NHDP specification (RFC 6130), which indicates that it should be assigned a value significantly greater than the refresh interval held by nhdpRefreshInterval.')
nhdpHHoldTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 8), Unsigned32().clone(6000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpHHoldTime.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpHHoldTime.setStatus('current')
if mibBuilder.loadTexts: nhdpHHoldTime.setDescription("nhdpHHoldTime corresponds to H_HOLD_TIME of NHDP and is used as the value in the VALIDITY_TIME Message TLV included in all HELLO messages on this MANET interface. It is then used by each router receiving such a HELLO message to indicate the validity of the information taken from that HELLO message and recorded in the receiving router's Information Bases. Guidance for setting this object may be found in Section 5 of the NHDP specification (RFC 6130), which indicates that it should be assigned a value significantly greater than the refresh interval held by nhdpRefreshInterval and must be representable as described in RFC 5497.")
nhdpHystAcceptQuality = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 9), Float32TC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpHystAcceptQuality.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpHystAcceptQuality.setStatus('current')
if mibBuilder.loadTexts: nhdpHystAcceptQuality.setDescription("nhdpHystAcceptQuality corresponds to HYST_ACCEPT of NHDP and represents the link quality threshold at or above which a link becomes usable, if it was not already so. Guidance for setting this object may be found in Section 5 of the NHDP specification (RFC 6130), which indicates that: o 0 <= nhdpHystRejectQuality <= nhdpHystAcceptQuality <= 1.0 The default value for this object is 1.0. According to RFC 6340: Since these textual conventions are defined in terms of the OCTET STRING type, the SMI's mechanisms for formally setting range constraints are not available. MIB designers using these textual conventions will need to use DESCRIPTION clauses to spell out any applicable range constraints beyond those implied by the underlying IEEE types. Therefore, this object does not have a DEFVAL clause.")
nhdpHystRejectQuality = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 10), Float32TC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpHystRejectQuality.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpHystRejectQuality.setStatus('current')
if mibBuilder.loadTexts: nhdpHystRejectQuality.setDescription("nhdpHystRejectQuality corresponds to HYST_REJECT of NHDP and represents the link quality threshold below which a link becomes unusable, if it was not already so. Guidance for setting this object may be found in Section 5 of the NHDP specification (RFC 6130), which indicates that: o 0 <= nhdpHystRejectQuality <= nhdpHystAcceptQuality <= 1.0 The default value for this object is 0.0. According to RFC 6340: Since these textual conventions are defined in terms of the OCTET STRING type, the SMI's mechanisms for formally setting range constraints are not available. MIB designers using these textual conventions will need to use DESCRIPTION clauses to spell out any applicable range constraints beyond those implied by the underlying IEEE types. Therefore, this object does not have a DEFVAL clause.")
nhdpInitialQuality = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 11), Float32TC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpInitialQuality.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpInitialQuality.setStatus('current')
if mibBuilder.loadTexts: nhdpInitialQuality.setDescription("nhdpInitialQuality corresponds to INITIAL_QUALITY of NHDP and represents the initial quality of a newly identified link. Guidance for setting this object may be found in Section 5 of the NHDP specification (RFC 6130), which indicates that: o 0 <= nhdpInitialQuality <= 1.0 The default value for this object is 1.0. According to RFC 6340: Since these textual conventions are defined in terms of the OCTET STRING type, the SMI's mechanisms for formally setting range constraints are not available. MIB designers using these textual conventions will need to use DESCRIPTION clauses to spell out any applicable range constraints beyond those implied by the underlying IEEE types. Therefore, this object does not have a DEFVAL clause.")
nhdpInitialPending = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpInitialPending.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpInitialPending.setStatus('current')
if mibBuilder.loadTexts: nhdpInitialPending.setDescription("nhdpInitialPending corresponds to INITIAL_PENDING of NHDP. If the value of this object is 'true(1)', then a newly identified link is considered pending and is not usable until the link quality has reached or exceeded the nhdpHystAcceptQuality threshold. Guidance for setting this object may be found in Section 5 of the NHDP specification (RFC 6130), which indicates that: o If nhdpInitialQuality >= nhdpHystAcceptQuality, then nhdpInitialPending := false(2). o If nhdpInitialQuality < nhdpHystRejectQuality, then nhdpInitialPending := true(1).")
nhdpHpMaxJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 13), Unsigned32().clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpHpMaxJitter.setReference('Section 5 of RFC 5148 - Jitter Considerations in Mobile Ad Hoc Networks (MANETs), Clausen, T., Dearlove, C., and B. Adamson, February 2008')
if mibBuilder.loadTexts: nhdpHpMaxJitter.setStatus('current')
if mibBuilder.loadTexts: nhdpHpMaxJitter.setDescription('nhdpHpMaxJitter corresponds to HP_MAXJITTER of NHDP and represents the value of MAXJITTER used in RFC 5148 for periodically generated HELLO messages on this MANET interface. Guidance for setting this object may be found in Section 5 of RFC 5148, which indicates that: o nhdpHpMaxJitter <= nhdpHelloInterval / 2 o nhdpHpMaxJitter should not be greater than nhdpHelloInterval / 4 o If nhdpMinHelloInterval > 0, then nhdpHpMaxJitter <= nhdpHelloMinInterval; and nhdpHpMaxJitter should not be greater than nhdpHelloMinInterval / 2')
nhdpHtMaxJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 14), Unsigned32().clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpHtMaxJitter.setReference('Section 5 of RFC 5148 - Jitter Considerations in Mobile Ad Hoc Networks (MANETs), Clausen, T., Dearlove, C., and B. Adamson, February 2008')
if mibBuilder.loadTexts: nhdpHtMaxJitter.setStatus('current')
if mibBuilder.loadTexts: nhdpHtMaxJitter.setDescription('nhdpHtMaxJitter corresponds to HT_MAXJITTER of NHDP and represents the value of MAXJITTER used in RFC 5148 for externally triggered HELLO messages on this MANET interface. Guidance for setting this object may be found in Section 5 of RFC 5148, which indicates that: o nhdpHtMaxJitter <= nhdpHelloInterval / 2 o nhdpHtMaxJitter should not be greater than nhdpHelloInterval / 4 o If nhdpMinHelloInterval > 0, then nhdpHtMaxJitter <= nhdpHelloMinInterval; and nhdpHtMaxJitter should not be greater than nhdpHelloMinInterval / 2')
nhdpIfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 1, 1, 15), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpIfRowStatus.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: nhdpIfRowStatus.setDescription("This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified. An entry may not exist in the 'active(1)' state unless all objects in the entry have a defined appropriate value. For objects with DEFVAL clauses, the management station does not need to specify the value of this object in order for the row to transit to the 'active(1)' state; the default value for this object is used. For objects that do not have DEFVAL clauses, then the network manager MUST specify the value of this object prior to this row transitioning to the 'active(1)' state. When this object transitions to 'active(1)', all objects in this row SHOULD be written to non-volatile (stable) storage. Read-create objects in this row MAY be modified. When an object in a row with nhdpIfRowStatus of 'active(1)' is changed, then the updated value MUST be reflected in NHDP, and this new object value MUST be written to non-volatile storage. If the value of this object is not equal to 'active(1)', all associated entries in the nhdpLibLocalIfSetTable, nhdpInterfaceStateTable, nhdpIibLinkSetTable, and nhdpInterfacePerfTable MUST be deleted.")
nhdpNHoldTime = MibScalar((1, 3, 6, 1, 2, 1, 213, 1, 1, 2), Unsigned32().clone(6000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nhdpNHoldTime.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpNHoldTime.setStatus('current')
if mibBuilder.loadTexts: nhdpNHoldTime.setDescription('nhdpNHoldTime corresponds to N_HOLD_TIME of NHDP and is used as the period during which former 1-hop neighbor network addresses are advertised as lost in HELLO messages, allowing recipients of these HELLO messages to accelerate removal of this information from their 2-Hop Sets. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
nhdpIHoldTime = MibScalar((1, 3, 6, 1, 2, 1, 213, 1, 1, 3), Unsigned32().clone(6000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nhdpIHoldTime.setReference('Section 5 on Protocol Parameters and Constraints of RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIHoldTime.setStatus('current')
if mibBuilder.loadTexts: nhdpIHoldTime.setDescription('nhdpIHoldTime corresponds to I_HOLD_TIME of NHDP and represents the period for which a recently used local interface network address is recorded. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
nhdpLibLocalIfSetTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 1, 4), )
if mibBuilder.loadTexts: nhdpLibLocalIfSetTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibLocalIfSetTable.setStatus('current')
if mibBuilder.loadTexts: nhdpLibLocalIfSetTable.setDescription("A router's Local Interface Set records all network addresses that are defined as local MANET interface network addresses. As such, this table 'sparse augments' the nhdpInterfaceTable when network addresses are being defined for the interfaces existing within the nhdpInterfaceTable. The local interface is defined by the nhdpIfIndex. The Local Interface Set consists of Local Interface Address Tuples per MANET interface and their prefix lengths (in order to determine the network addresses related to the interface). A conceptual row in this table exists if and only if a manager has explicitly created the row. The manager can create a row by setting rowStatus to 'createAndGo' or 'createAndWait'. Further guidance on the addition or removal of local addresses and network addresses is found in Section 9 of RFC 6130.")
nhdpLibLocalIfSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 1, 4, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpLibLocalIfSetIndex"))
if mibBuilder.loadTexts: nhdpLibLocalIfSetEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibLocalIfSetEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpLibLocalIfSetEntry.setDescription("A router's Local Interface Set consists of Configured Interface Address Tuples for each network interface. The objects in this table are persistent, and when written, the device SHOULD save the change to non-volatile storage. For further information on the storage behavior for these objects, refer to the description for the nhdpLibLocalIfSetRowStatus object.")
nhdpLibLocalIfSetIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: nhdpLibLocalIfSetIndex.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIndex.setStatus('current')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIndex.setDescription('The index for this table. Necessary because multiple addresses may be associated with a given nhdpIfIndex.')
nhdpLibLocalIfSetIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 4, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpLibLocalIfSetIfIndex.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIfIndex.setStatus('current')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIfIndex.setDescription('Specifies the local nhdpIfIndex for which this IP address was added.')
nhdpLibLocalIfSetIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpLibLocalIfSetIpAddrType.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIpAddrType.setDescription("The type of the nhdpLibLocalIfSetIpAddr in the InetAddress MIB (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
nhdpLibLocalIfSetIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 4, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpLibLocalIfSetIpAddr.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIpAddr.setStatus('current')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIpAddr.setDescription('nhdpLibLocalIfSetIpAddr is an address of an interface of this router. This object is interpreted according to the setting of nhdpLibLocalIfSetIpAddrType.')
nhdpLibLocalIfSetIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 4, 1, 5), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpLibLocalIfSetIpAddrPrefixLen.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: nhdpLibLocalIfSetIpAddrPrefixLen.setDescription('Indicates the number of leading one bits that form the mask. The mask is logically ANDed to the nhdpLibLocalIfSetIpAddr to determine the address prefix. A row match is true if the address used as an index falls within the network address range defined by the address prefix.')
nhdpLibLocalIfSetRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 4, 1, 6), RowStatus().clone('notReady')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nhdpLibLocalIfSetRowStatus.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibLocalIfSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: nhdpLibLocalIfSetRowStatus.setDescription("This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified. An entry may not exist in the 'active(1)' state unless all read-create objects in the entry have a defined appropriate value. As no objects in this table have DEFVAL clauses, the management station MUST specify the values of all read-create objects prior to this row transitioning to the 'active(1)' state. When this object transitions to 'active(1)', all objects in this row SHOULD be written to non-volatile (stable) storage. Read-create objects in this row MAY be modified. When an object in a row with nhdpIfRowStatus of 'active(1)' is changed, then the updated value MUST be reflected in NHDP, and this new object value MUST be written to non-volatile storage.")
nhdpLibRemovedIfAddrSetTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 1, 5), )
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetTable.setStatus('current')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetTable.setDescription("A router's Removed Interface Address Set records network addresses that were recently used as local interface network addresses. If a router's interface network addresses are immutable, then the Removed Interface Address Set is always empty and may be omitted. It consists of Removed Interface Address Tuples, one per network address.")
nhdpLibRemovedIfAddrSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 1, 5, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpLibRemovedIfAddrSetIndex"))
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetEntry.setDescription("A router's Removed Interface Address Set consists of Removed Interface Address Tuples, one per network address: (IR_local_iface_addr, IR_time) The association between these addresses and the router's Interface is found in the Standard MIB II's IP address table (RFC 1213).")
nhdpLibRemovedIfAddrSetIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIndex.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIndex.setStatus('current')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIndex.setDescription('The index for this table. Necessary because multiple addresses may be associated with a given nhdpIfIndex.')
nhdpLibRemovedIfAddrSetIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIpAddrType.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIpAddrType.setDescription("The type of the nhdpLibRemovedIfAddrSetIpAddr in the InetAddress MIB (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
nhdpLibRemovedIfAddrSetIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 5, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIpAddr.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIpAddr.setStatus('current')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIpAddr.setDescription('nhdpLibRemovedIfAddrSetIpAddr is a recently used address of an interface of this router.')
nhdpLibRemovedIfAddrSetIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 5, 1, 4), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIpAddrPrefixLen.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIpAddrPrefixLen.setDescription('Indicates the number of leading one bits that form the mask. The mask is logically ANDed to the nhdpLibRemovedIfAddrSetIpAddr to determine the address prefix. A row match is true if the address used as an index falls within the network address range defined by the address prefix.')
nhdpLibRemovedIfAddrSetIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 5, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIfIndex.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIfIndex.setStatus('current')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIfIndex.setDescription('Specifies the local IfIndex from which this IP address was recently removed.')
nhdpLibRemovedIfAddrSetIRTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 1, 5, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIRTime.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIRTime.setStatus('current')
if mibBuilder.loadTexts: nhdpLibRemovedIfAddrSetIRTime.setDescription('nhdpLibRemovedIfAddrSetIRTime specifies the value of sysUptime when this entry should expire and be removed from the nhdpLibRemovedIfAddrSetTable.')
nhdpStateObjGrp = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 1, 2))
nhdpUpTime = MibScalar((1, 3, 6, 1, 2, 1, 213, 1, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpUpTime.setStatus('current')
if mibBuilder.loadTexts: nhdpUpTime.setDescription('The value of sysUpTime at the time the current NHDP process was initialized.')
nhdpInterfaceStateTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 2, 2), )
if mibBuilder.loadTexts: nhdpInterfaceStateTable.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000.')
if mibBuilder.loadTexts: nhdpInterfaceStateTable.setStatus('current')
if mibBuilder.loadTexts: nhdpInterfaceStateTable.setDescription('nhdpInterfaceStateTable lists state information related to specific interfaces of this router. The value of nhdpIfIndex is an ifIndex from the interfaces group defined in the Interfaces Group MIB. The objects in this table are persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
nhdpInterfaceStateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 2, 2, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpIfIndex"))
if mibBuilder.loadTexts: nhdpInterfaceStateEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpInterfaceStateEntry.setDescription('nhdpInterfaceStateEntry describes one NHDP local interface state as indexed by its nhdpIfIndex.')
nhdpIfStateUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 2, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfStateUpTime.setStatus('current')
if mibBuilder.loadTexts: nhdpIfStateUpTime.setDescription('The value of the sysUpTime when NHDP was last initialized on this MANET interface.')
nhdpDiscIfSetTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 2, 3), )
if mibBuilder.loadTexts: nhdpDiscIfSetTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfSetTable.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfSetTable.setDescription("A router's set of discovered interfaces on neighboring routers.")
nhdpDiscIfSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 2, 3, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpDiscIfSetIndex"))
if mibBuilder.loadTexts: nhdpDiscIfSetEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfSetEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfSetEntry.setDescription('The entries include the nhdpDiscRouterIndex of the discovered router, the nhdpDiscIfIndex of the discovered interface, and the current set of addresses associated with this neighbor interface. The nhdpDiscIfIndex uniquely identifies the remote interface address sets through this table. It does not need to be unique across the MANET but MUST be locally unique within this router.')
nhdpDiscIfSetIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: nhdpDiscIfSetIndex.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfSetIndex.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfSetIndex.setDescription('The index for this table. Necessary because multiple addresses may be associated with a given nhdpDiscIfIndex.')
nhdpDiscIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 3, 1, 2), NeighborIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscIfIndex.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfIndex.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfIndex.setDescription("The NHDP interface index (locally created) of a neighbor's interface. Used for cross- indexing into other NHDP tables and other MIB modules.")
nhdpDiscRouterIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 3, 1, 3), NeighborRouterIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscRouterIndex.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscRouterIndex.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscRouterIndex.setDescription('The NHDP neighbor index (locally created) of a neighboring router. Used for cross- indexing into other NHDP tables and other MIB modules.')
nhdpDiscIfSetIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 3, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscIfSetIpAddrType.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfSetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfSetIpAddrType.setDescription("The type of the nhdpDiscIfSetIpAddr in the InetAddress MIB (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
nhdpDiscIfSetIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 3, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscIfSetIpAddr.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfSetIpAddr.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfSetIpAddr.setDescription('The nhdpDiscIfSetIpAddr is a recently used address of a neighbor of this router.')
nhdpDiscIfSetIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 3, 1, 6), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscIfSetIpAddrPrefixLen.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfSetIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfSetIpAddrPrefixLen.setDescription('Indicates the number of leading one bits that form the mask. The mask is logically ANDed to the nhdpDiscIfSetIpAddr to determine the address prefix. A row match is true if the address used as an index falls within the network address range defined by the address prefix.')
nhdpIibLinkSetTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 2, 4), )
if mibBuilder.loadTexts: nhdpIibLinkSetTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIibLinkSetTable.setStatus('current')
if mibBuilder.loadTexts: nhdpIibLinkSetTable.setDescription('A Link Set of an interface records all links from other routers that are, or recently were, 1-hop neighbors.')
nhdpIibLinkSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 2, 4, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpIfIndex"), (0, "NHDP-MIB", "nhdpDiscIfIndex"))
if mibBuilder.loadTexts: nhdpIibLinkSetEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIibLinkSetEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpIibLinkSetEntry.setDescription('A Link Set consists of Link Tuples, each representing a single link indexed by the local and remote interface pair: (L_neighbor_iface_addr_list, L_HEARD_time, L_SYM_time, L_quality, L_pending, L_lost, L_time). The local interface is indexed via the nhdpIfIndex. The 1-hop interface is indexed via the nhdpDiscIfIndex. There SHOULD be an entry in this table for each local interface and associated 1-hop neighbor reachable on this local interface. Note that L_quality is not included in the entries below, because updates may be required too frequently.')
nhdpIibLinkSetLHeardTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 4, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIibLinkSetLHeardTime.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIibLinkSetLHeardTime.setStatus('current')
if mibBuilder.loadTexts: nhdpIibLinkSetLHeardTime.setDescription('nhdpIibLinkSetLHeardTime corresponds to L_HEARD_time of NHDP and represents the time up to which the MANET interface of the 1-hop neighbor would be considered heard if not considering link quality.')
nhdpIibLinkSetLSymTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 4, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIibLinkSetLSymTime.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIibLinkSetLSymTime.setStatus('current')
if mibBuilder.loadTexts: nhdpIibLinkSetLSymTime.setDescription('nhdpIibLinkSetLSymTime corresponds to L_SYM_time of NHDP and represents the time up to which the link to the 1-hop neighbor would be considered symmetric if not considering link quality.')
nhdpIibLinkSetLPending = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIibLinkSetLPending.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIibLinkSetLPending.setStatus('current')
if mibBuilder.loadTexts: nhdpIibLinkSetLPending.setDescription('nhdpIibLinkSetLPending corresponds to L_pending of NHDP and is a boolean flag, describing if a link is considered pending (i.e., a candidate, but not yet established, link).')
nhdpIibLinkSetLLost = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIibLinkSetLLost.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIibLinkSetLLost.setStatus('current')
if mibBuilder.loadTexts: nhdpIibLinkSetLLost.setDescription('nhdpIibLinkSetLLost corresponds to L_lost of NHDP and is a boolean flag, describing if a link is considered lost due to low link quality.')
nhdpIibLinkSetLTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIibLinkSetLTime.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIibLinkSetLTime.setStatus('current')
if mibBuilder.loadTexts: nhdpIibLinkSetLTime.setDescription('nhdpIibLinkSetLTime specifies the value of sysUptime when this entry should expire and be removed from the nhdpIibLinkSetTable.')
nhdpIib2HopSetTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 2, 5), )
if mibBuilder.loadTexts: nhdpIib2HopSetTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetTable.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetTable.setDescription('A 2-Hop Set of an interface records network addresses of symmetric 2-hop neighbors and the symmetric links to symmetric 1-hop neighbors through which these symmetric 2-hop neighbors can be reached. It consists of 2-Hop Tuples.')
nhdpIib2HopSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 2, 5, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpIfIndex"), (0, "NHDP-MIB", "nhdpDiscIfIndex"), (0, "NHDP-MIB", "nhdpIib2HopSetIpAddressType"), (0, "NHDP-MIB", "nhdpIib2HopSetIpAddress"))
if mibBuilder.loadTexts: nhdpIib2HopSetEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetEntry.setDescription('nhdpIib2HopSetTable consists of 2-Hop Tuples, each representing a single network address of a symmetric 2-hop neighbor and a single MANET interface of a symmetric 1-hop neighbor. (N2_neighbor_iface_addr_list, N2_2hop_addr, N2_time). The entries include the 2-hop neighbor addresses, which act as the table index, and associated 1-hop symmetric link address set, designated through nhdpDiscIfIndex, and an expiration time. The nhdpIfIndex in the INDEX is the interface index of the local interface through which these 2-hop addresses are accessible. The nhdpDiscIfIndex in the INDEX represents the 1-hop neighbor interface through which these 2-hop addresses are reachable.')
nhdpIib2HopSetIpAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: nhdpIib2HopSetIpAddressType.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetIpAddressType.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetIpAddressType.setDescription("The type of the nhdpIib2HopSetIpAddress in the InetAddress MIB module (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
nhdpIib2HopSetIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: nhdpIib2HopSetIpAddress.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetIpAddress.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetIpAddress.setDescription('nhdpIib2HopSetIpAddr corresponds to N2_2hop_addr of NHDP and is a network address of a symmetric 2-hop neighbor that has a symmetric link (using any MANET interface) to the indicated symmetric 1-hop neighbor.')
nhdpIib2HopSetIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 5, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIib2HopSetIpAddrPrefixLen.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetIpAddrPrefixLen.setDescription('Indicates the number of leading one bits that form the mask. The mask is logically ANDed to the nhdpIib2HopSetIpAddress to determine the address prefix. A row match is true if the address used as an index falls within the network address range defined by the address prefix.')
nhdpIib2HopSet1HopIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 5, 1, 4), NeighborIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIib2HopSet1HopIfIndex.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSet1HopIfIndex.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSet1HopIfIndex.setDescription('nhdpIib2HopSet1HopIfIndex is nhdpDiscIfIndex of the 1-hop neighbor that communicated the ipAddress of the 2-hop neighbor in this row entry.')
nhdpIib2HopSetN2Time = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 5, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIib2HopSetN2Time.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetN2Time.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetN2Time.setDescription('nhdpIib2HopSetN2Time specifies the value of sysUptime when this entry should expire and be removed from the nhdpIib2HopSetTable.')
nhdpNibNeighborSetTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 2, 6), )
if mibBuilder.loadTexts: nhdpNibNeighborSetTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpNibNeighborSetTable.setStatus('current')
if mibBuilder.loadTexts: nhdpNibNeighborSetTable.setDescription("A router's Neighbor Set records all network addresses of each 1-hop neighbor.")
nhdpNibNeighborSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 2, 6, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpDiscRouterIndex"))
if mibBuilder.loadTexts: nhdpNibNeighborSetEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpNibNeighborSetEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpNibNeighborSetEntry.setDescription("A router's Neighbor Set consists of Neighbor Tuples, each representing a single 1-hop neighbor: (N_neighbor_addr_list, N_symmetric)")
nhdpNibNeighborSetNSymmetric = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpNibNeighborSetNSymmetric.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpNibNeighborSetNSymmetric.setStatus('current')
if mibBuilder.loadTexts: nhdpNibNeighborSetNSymmetric.setDescription('nhdpNibNeighborNSymmetric corresponds to N_symmetric of NHDP and is a boolean flag, describing if this is a symmetric 1-hop neighbor.')
nhdpNibLostNeighborSetTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 2, 7), )
if mibBuilder.loadTexts: nhdpNibLostNeighborSetTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpNibLostNeighborSetTable.setStatus('current')
if mibBuilder.loadTexts: nhdpNibLostNeighborSetTable.setDescription("A router's Lost Neighbor Set records network addresses of routers that were recently symmetric 1-hop neighbors but are now advertised as lost.")
nhdpNibLostNeighborSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 2, 7, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpDiscRouterIndex"))
if mibBuilder.loadTexts: nhdpNibLostNeighborSetEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpNibLostNeighborSetEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpNibLostNeighborSetEntry.setDescription("A router's Lost Neighbor Set consists of Lost Neighbor Tuples, each representing a single such network address: (NL_neighbor_addr, NL_time)")
nhdpNibLostNeighborSetNLTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 2, 7, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpNibLostNeighborSetNLTime.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpNibLostNeighborSetNLTime.setStatus('current')
if mibBuilder.loadTexts: nhdpNibLostNeighborSetNLTime.setDescription('nhdpNibLostNeighborSetNLTime specifies the value of sysUptime when this entry should expire and be removed from the nhdpNibLostNeighborSetTable.')
nhdpPerformanceObjGrp = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 1, 3))
nhdpInterfacePerfTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 3, 1), )
if mibBuilder.loadTexts: nhdpInterfacePerfTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpInterfacePerfTable.setStatus('current')
if mibBuilder.loadTexts: nhdpInterfacePerfTable.setDescription('This table summarizes performance objects that are measured per local NHDP interface.')
nhdpInterfacePerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpIfIndex"))
if mibBuilder.loadTexts: nhdpInterfacePerfEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpInterfacePerfEntry.setDescription('A single entry contains performance counters for a local NHDP interface.')
nhdpIfHelloMessageXmits = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1, 1), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfHelloMessageXmits.setStatus('current')
if mibBuilder.loadTexts: nhdpIfHelloMessageXmits.setDescription('A counter is incremented each time a HELLO message has been transmitted on that interface.')
nhdpIfHelloMessageRecvd = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1, 2), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfHelloMessageRecvd.setStatus('current')
if mibBuilder.loadTexts: nhdpIfHelloMessageRecvd.setDescription('A counter is incremented each time a HELLO message has been received on that interface.')
nhdpIfHelloMessageXmitAccumulatedSize = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfHelloMessageXmitAccumulatedSize.setStatus('current')
if mibBuilder.loadTexts: nhdpIfHelloMessageXmitAccumulatedSize.setDescription('A counter is incremented by the number of octets in a HELLO message each time a HELLO message has been sent.')
nhdpIfHelloMessageRecvdAccumulatedSize = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1, 4), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfHelloMessageRecvdAccumulatedSize.setStatus('current')
if mibBuilder.loadTexts: nhdpIfHelloMessageRecvdAccumulatedSize.setDescription('A counter is incremented by the number of octets in a HELLO message each time a HELLO message has been received.')
nhdpIfHelloMessageTriggeredXmits = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfHelloMessageTriggeredXmits.setStatus('current')
if mibBuilder.loadTexts: nhdpIfHelloMessageTriggeredXmits.setDescription('A counter is incremented each time a triggered HELLO message has been sent.')
nhdpIfHelloMessagePeriodicXmits = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1, 6), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfHelloMessagePeriodicXmits.setStatus('current')
if mibBuilder.loadTexts: nhdpIfHelloMessagePeriodicXmits.setDescription('A counter is incremented each time a periodic HELLO message has been sent.')
nhdpIfHelloMessageXmitAccumulatedSymmetricNeighborCount = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1, 7), Counter32()).setUnits('neighbors').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfHelloMessageXmitAccumulatedSymmetricNeighborCount.setStatus('current')
if mibBuilder.loadTexts: nhdpIfHelloMessageXmitAccumulatedSymmetricNeighborCount.setDescription('A counter is incremented by the number of advertised symmetric neighbors in a HELLO each time a HELLO message has been sent.')
nhdpIfHelloMessageXmitAccumulatedHeardNeighborCount = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1, 8), Counter32()).setUnits('neighbors').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfHelloMessageXmitAccumulatedHeardNeighborCount.setStatus('current')
if mibBuilder.loadTexts: nhdpIfHelloMessageXmitAccumulatedHeardNeighborCount.setDescription('A counter is incremented by the number of advertised heard neighbors in a HELLO each time a HELLO message has been sent.')
nhdpIfHelloMessageXmitAccumulatedLostNeighborCount = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 1, 1, 9), Counter32()).setUnits('neighbors').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIfHelloMessageXmitAccumulatedLostNeighborCount.setStatus('current')
if mibBuilder.loadTexts: nhdpIfHelloMessageXmitAccumulatedLostNeighborCount.setDescription('A counter is incremented by the number of advertised lost neighbors in a HELLO each time a HELLO message has been sent.')
nhdpDiscIfSetPerfTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 3, 2), )
if mibBuilder.loadTexts: nhdpDiscIfSetPerfTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfSetPerfTable.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfSetPerfTable.setDescription("A router's set of performance properties for each discovered interface of a neighbor.")
nhdpDiscIfSetPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 3, 2, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpDiscIfIndex"))
if mibBuilder.loadTexts: nhdpDiscIfSetPerfEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfSetPerfEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfSetPerfEntry.setDescription('There is an entry for each discovered interface of a neighbor.')
nhdpDiscIfRecvdPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 2, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscIfRecvdPackets.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfRecvdPackets.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfRecvdPackets.setDescription('This counter increments each time this router receives a packet from that interface of the neighbor.')
nhdpDiscIfExpectedPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 2, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscIfExpectedPackets.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscIfExpectedPackets.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscIfExpectedPackets.setDescription('This counter increments by the number of missed packets from this neighbor based on the packet sequence number each time this router receives a packet from that interface of the neighbor.')
nhdpNibNeighborSetChanges = MibScalar((1, 3, 6, 1, 2, 1, 213, 1, 3, 3), Counter32()).setUnits('changes').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpNibNeighborSetChanges.setStatus('current')
if mibBuilder.loadTexts: nhdpNibNeighborSetChanges.setDescription('This counter increments each time the Neighbor Set changes. A change occurs whenever a new Neighbor Tuple has been added, a Neighbor Tuple has been removed, or any entry of a Neighbor Tuple has been modified.')
nhdpDiscNeighborSetPerfTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 3, 4), )
if mibBuilder.loadTexts: nhdpDiscNeighborSetPerfTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscNeighborSetPerfTable.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscNeighborSetPerfTable.setDescription("A router's set of discovered neighbors and their properties.")
nhdpDiscNeighborSetPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 3, 4, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpDiscRouterIndex"))
if mibBuilder.loadTexts: nhdpDiscNeighborSetPerfEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscNeighborSetPerfEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscNeighborSetPerfEntry.setDescription('The entries include the nhdpDiscRouterIndex of the discovered router as well as performance objects related to changes of the Neighbor Set.')
nhdpDiscNeighborNibNeighborSetChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 4, 1, 1), Counter32()).setUnits('changes').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscNeighborNibNeighborSetChanges.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscNeighborNibNeighborSetChanges.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscNeighborNibNeighborSetChanges.setDescription('This object returns the number of changes to the given Neighbor Tuple.')
nhdpDiscNeighborNibNeighborSetUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 4, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscNeighborNibNeighborSetUpTime.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscNeighborNibNeighborSetUpTime.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscNeighborNibNeighborSetUpTime.setDescription("This object returns the sysUpTime when the neighbor becomes 'nbrup'. A neighbor is said to become 'nbrup' if a new nhdpNibNeighborSetEntry is created for a particular nhdpNibNeighborSetRouterIndex. It becomes 'nbrdown' if the entry for that neighbor has been deleted.")
nhdpDiscNeighborNibNeighborSetReachableLinkChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 4, 1, 3), Counter32()).setUnits('changes').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpDiscNeighborNibNeighborSetReachableLinkChanges.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpDiscNeighborNibNeighborSetReachableLinkChanges.setStatus('current')
if mibBuilder.loadTexts: nhdpDiscNeighborNibNeighborSetReachableLinkChanges.setDescription('This object counts each time the neighbor changes the interface(s) over which it is reachable. A change in the set of Link Tuples corresponding to the appropriate Neighbor Tuple is registered, i.e., a corresponding Link Tuple is added or removed from the set of all corresponding Link Tuples.')
nhdpIib2HopSetPerfTable = MibTable((1, 3, 6, 1, 2, 1, 213, 1, 3, 5), )
if mibBuilder.loadTexts: nhdpIib2HopSetPerfTable.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetPerfTable.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetPerfTable.setDescription('This table contains performance objects per discovered 2-hop neighbor.')
nhdpIib2HopSetPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 213, 1, 3, 5, 1), ).setIndexNames((0, "NHDP-MIB", "nhdpDiscRouterIndex"))
if mibBuilder.loadTexts: nhdpIib2HopSetPerfEntry.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetPerfEntry.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetPerfEntry.setDescription('The entries contain performance objects per discovered 2-hop neighbor.')
nhdpIib2HopSetPerfChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 5, 1, 1), Counter32()).setUnits('changes').setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIib2HopSetPerfChanges.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetPerfChanges.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetPerfChanges.setDescription("This object counts the changes of the union of all N2_neighbor_iface_addr_list of 2-Hop Tuples with an N2_2hop_addr equal to one of the given 2-hop neighbor's addresses.")
nhdpIib2HopSetPerfUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 213, 1, 3, 5, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpIib2HopSetPerfUpTime.setReference('RFC 6130 - Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP), Clausen, T., Dearlove, C., and J. Dean, April 2011')
if mibBuilder.loadTexts: nhdpIib2HopSetPerfUpTime.setStatus('current')
if mibBuilder.loadTexts: nhdpIib2HopSetPerfUpTime.setDescription('This object returns the sysUpTime when the 2-Hop Tuple corresponding to the given 2-hop neighbor IP address was registered in the nhdpIib2HopSetTable.')
nhdpNotificationsObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 0, 0))
nhdpNotificationsControl = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 0, 1))
nhdpNotificationsStates = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 0, 2))
nhdpNbrStateChange = NotificationType((1, 3, 6, 1, 2, 1, 213, 0, 0, 1)).setObjects(("NHDP-MIB", "nhdpIfName"), ("NHDP-MIB", "nhdpNbrState"))
if mibBuilder.loadTexts: nhdpNbrStateChange.setStatus('current')
if mibBuilder.loadTexts: nhdpNbrStateChange.setDescription("nhdpNbrStateChange is a notification sent when more than nhdpNbrStateChangeThreshold neighbors change their status (i.e., 'down(0)', 'asymmetric(1)', or 'symmetric(2)') within a time window of nhdpNbrStateChangeWindow.")
nhdp2HopNbrStateChange = NotificationType((1, 3, 6, 1, 2, 1, 213, 0, 0, 2)).setObjects(("NHDP-MIB", "nhdpIfName"), ("NHDP-MIB", "nhdp2HopNbrState"))
if mibBuilder.loadTexts: nhdp2HopNbrStateChange.setStatus('current')
if mibBuilder.loadTexts: nhdp2HopNbrStateChange.setDescription("nhdp2HopNbrStateChange is a notification sent when more than nhdp2HopNbrStateChangeThreshold 2-hop neighbors change their status (i.e., 'down(0)' or 'up(1)') within a time window of nhdp2HopNbrStateChangeWindow.")
nhdpIfStateChange = NotificationType((1, 3, 6, 1, 2, 1, 213, 0, 0, 3)).setObjects(("NHDP-MIB", "nhdpIfName"), ("NHDP-MIB", "nhdpIfStatus"))
if mibBuilder.loadTexts: nhdpIfStateChange.setStatus('current')
if mibBuilder.loadTexts: nhdpIfStateChange.setDescription('nhdpIfStateChange is a notification sent when nhdpIfStatus has changed on this interface.')
nhdpNbrStateChangeThreshold = MibScalar((1, 3, 6, 1, 2, 1, 213, 0, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('changes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nhdpNbrStateChangeThreshold.setStatus('current')
if mibBuilder.loadTexts: nhdpNbrStateChangeThreshold.setDescription('A threshold value for the nhdpNbrStateChange object. If the number of occurrences exceeds this threshold within the previous nhdpNbrStateChangeWindow, then the nhdpNbrStateChange notification is to be sent. It is recommended that the value of this threshold be set to at least 10 and higher in dense topologies with frequent expected topology changes.')
nhdpNbrStateChangeWindow = MibScalar((1, 3, 6, 1, 2, 1, 213, 0, 1, 2), TimeTicks().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nhdpNbrStateChangeWindow.setStatus('current')
if mibBuilder.loadTexts: nhdpNbrStateChangeWindow.setDescription('A time window for the nhdpNbrStateChange object. If the number of occurrences exceeds the nhdpNbrStateChangeThreshold within the previous nhdpNbrStateChangeWindow, then the nhdpNbrStateChange notification is to be sent. It is recommended that the value for this window be set to at least 5 times the nhdpHelloInterval. This object represents the time in hundredths of a second.')
nhdp2HopNbrStateChangeThreshold = MibScalar((1, 3, 6, 1, 2, 1, 213, 0, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('changes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nhdp2HopNbrStateChangeThreshold.setStatus('current')
if mibBuilder.loadTexts: nhdp2HopNbrStateChangeThreshold.setDescription('A threshold value for the nhdp2HopNbrStateChange object. If the number of occurrences exceeds this threshold within the previous nhdp2HopNbrStateChangeWindow, then the nhdp2HopNbrStateChange notification is to be sent. It is recommended that the value of this threshold be set to at least 10 and higher when topologies are expected to be highly dynamic.')
nhdp2HopNbrStateChangeWindow = MibScalar((1, 3, 6, 1, 2, 1, 213, 0, 1, 4), TimeTicks().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nhdp2HopNbrStateChangeWindow.setStatus('current')
if mibBuilder.loadTexts: nhdp2HopNbrStateChangeWindow.setDescription('A time window for the nhdp2HopNbrStateChange object. If the number of occurrences exceeds the nhdp2HopNbrStateChangeThreshold within the previous nhdp2HopNbrStateChangeWindow, then the nhdp2HopNbrStateChange notification is to be sent. It is recommended that the value for this window be set to at least 5 times nhdpHelloInterval. This object represents the time in hundredths of a second.')
nhdpNbrState = MibScalar((1, 3, 6, 1, 2, 1, 213, 0, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("asymmetric", 1), ("symmetric", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdpNbrState.setStatus('current')
if mibBuilder.loadTexts: nhdpNbrState.setDescription("NHDP neighbor states. In NHDP, it is not necessary to remove Protocol Tuples from Protocol Sets at the exact time indicated, only to behave as if the Protocol Tuples were removed at that time. This case is indicated here as 'down(0)', all other cases being indicated as 'asymmetric(1)' or 'symmetric(2)'. If 'down(0)', the direct neighbor is also added to the nhdpNibLostNeighborSetTable.")
nhdp2HopNbrState = MibScalar((1, 3, 6, 1, 2, 1, 213, 0, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nhdp2HopNbrState.setStatus('current')
if mibBuilder.loadTexts: nhdp2HopNbrState.setDescription("NHDP 2-hop neighbor states. In NHDP, it is not necessary to remove Protocol Tuples from Protocol Sets at the exact time indicated, only to behave as if the Protocol Tuples were removed at that time. This case is indicated here as 'down(0)'; otherwise, it is 'up(1)'.")
nhdpCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 2, 1))
nhdpMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 213, 2, 2))
nhdpBasicCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 213, 2, 1, 1)).setObjects(("NHDP-MIB", "nhdpConfigurationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nhdpBasicCompliance = nhdpBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: nhdpBasicCompliance.setDescription('The basic implementation requirements for managed network entities that implement NHDP.')
nhdpFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 213, 2, 1, 2)).setObjects(("NHDP-MIB", "nhdpConfigurationGroup"), ("NHDP-MIB", "nhdpStateGroup"), ("NHDP-MIB", "nhdpNotificationObjectGroup"), ("NHDP-MIB", "nhdpNotificationGroup"), ("NHDP-MIB", "nhdpPerformanceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nhdpFullCompliance = nhdpFullCompliance.setStatus('current')
if mibBuilder.loadTexts: nhdpFullCompliance.setDescription('The full implementation requirements for managed network entities that implement NHDP.')
nhdpConfigurationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 213, 2, 2, 2)).setObjects(("NHDP-MIB", "nhdpIfName"), ("NHDP-MIB", "nhdpIfStatus"), ("NHDP-MIB", "nhdpHelloInterval"), ("NHDP-MIB", "nhdpHelloMinInterval"), ("NHDP-MIB", "nhdpRefreshInterval"), ("NHDP-MIB", "nhdpLHoldTime"), ("NHDP-MIB", "nhdpHHoldTime"), ("NHDP-MIB", "nhdpHystAcceptQuality"), ("NHDP-MIB", "nhdpHystRejectQuality"), ("NHDP-MIB", "nhdpInitialQuality"), ("NHDP-MIB", "nhdpInitialPending"), ("NHDP-MIB", "nhdpHpMaxJitter"), ("NHDP-MIB", "nhdpHtMaxJitter"), ("NHDP-MIB", "nhdpNHoldTime"), ("NHDP-MIB", "nhdpIHoldTime"), ("NHDP-MIB", "nhdpIfRowStatus"), ("NHDP-MIB", "nhdpLibLocalIfSetIfIndex"), ("NHDP-MIB", "nhdpLibLocalIfSetIpAddrType"), ("NHDP-MIB", "nhdpLibLocalIfSetIpAddr"), ("NHDP-MIB", "nhdpLibLocalIfSetIpAddrPrefixLen"), ("NHDP-MIB", "nhdpLibLocalIfSetRowStatus"), ("NHDP-MIB", "nhdpLibRemovedIfAddrSetIpAddrType"), ("NHDP-MIB", "nhdpLibRemovedIfAddrSetIpAddr"), ("NHDP-MIB", "nhdpLibRemovedIfAddrSetIpAddrPrefixLen"), ("NHDP-MIB", "nhdpLibRemovedIfAddrSetIfIndex"), ("NHDP-MIB", "nhdpLibRemovedIfAddrSetIRTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nhdpConfigurationGroup = nhdpConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: nhdpConfigurationGroup.setDescription('Set of NHDP configuration objects implemented in this module.')
nhdpStateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 213, 2, 2, 3)).setObjects(("NHDP-MIB", "nhdpUpTime"), ("NHDP-MIB", "nhdpIfStateUpTime"), ("NHDP-MIB", "nhdpDiscRouterIndex"), ("NHDP-MIB", "nhdpDiscIfIndex"), ("NHDP-MIB", "nhdpDiscIfSetIpAddrType"), ("NHDP-MIB", "nhdpDiscIfSetIpAddr"), ("NHDP-MIB", "nhdpDiscIfSetIpAddrPrefixLen"), ("NHDP-MIB", "nhdpIibLinkSetLHeardTime"), ("NHDP-MIB", "nhdpIibLinkSetLSymTime"), ("NHDP-MIB", "nhdpIibLinkSetLPending"), ("NHDP-MIB", "nhdpIibLinkSetLLost"), ("NHDP-MIB", "nhdpIibLinkSetLTime"), ("NHDP-MIB", "nhdpIib2HopSetIpAddrPrefixLen"), ("NHDP-MIB", "nhdpIib2HopSet1HopIfIndex"), ("NHDP-MIB", "nhdpIib2HopSetN2Time"), ("NHDP-MIB", "nhdpNibNeighborSetNSymmetric"), ("NHDP-MIB", "nhdpNibLostNeighborSetNLTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nhdpStateGroup = nhdpStateGroup.setStatus('current')
if mibBuilder.loadTexts: nhdpStateGroup.setDescription('Set of NHDP state objects implemented in this module.')
nhdpPerformanceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 213, 2, 2, 4)).setObjects(("NHDP-MIB", "nhdpIfHelloMessageXmits"), ("NHDP-MIB", "nhdpIfHelloMessageRecvd"), ("NHDP-MIB", "nhdpIfHelloMessageXmitAccumulatedSize"), ("NHDP-MIB", "nhdpIfHelloMessageRecvdAccumulatedSize"), ("NHDP-MIB", "nhdpIfHelloMessageTriggeredXmits"), ("NHDP-MIB", "nhdpIfHelloMessagePeriodicXmits"), ("NHDP-MIB", "nhdpIfHelloMessageXmitAccumulatedSymmetricNeighborCount"), ("NHDP-MIB", "nhdpIfHelloMessageXmitAccumulatedHeardNeighborCount"), ("NHDP-MIB", "nhdpIfHelloMessageXmitAccumulatedLostNeighborCount"), ("NHDP-MIB", "nhdpDiscIfRecvdPackets"), ("NHDP-MIB", "nhdpDiscIfExpectedPackets"), ("NHDP-MIB", "nhdpNibNeighborSetChanges"), ("NHDP-MIB", "nhdpDiscNeighborNibNeighborSetChanges"), ("NHDP-MIB", "nhdpDiscNeighborNibNeighborSetUpTime"), ("NHDP-MIB", "nhdpDiscNeighborNibNeighborSetReachableLinkChanges"), ("NHDP-MIB", "nhdpIib2HopSetPerfChanges"), ("NHDP-MIB", "nhdpIib2HopSetPerfUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nhdpPerformanceGroup = nhdpPerformanceGroup.setStatus('current')
if mibBuilder.loadTexts: nhdpPerformanceGroup.setDescription('Set of NHDP performance objects implemented in this module.')
nhdpNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 213, 2, 2, 5)).setObjects(("NHDP-MIB", "nhdpNbrStateChangeThreshold"), ("NHDP-MIB", "nhdpNbrStateChangeWindow"), ("NHDP-MIB", "nhdp2HopNbrStateChangeThreshold"), ("NHDP-MIB", "nhdp2HopNbrStateChangeWindow"), ("NHDP-MIB", "nhdpNbrState"), ("NHDP-MIB", "nhdp2HopNbrState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nhdpNotificationObjectGroup = nhdpNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: nhdpNotificationObjectGroup.setDescription('Set of NHDP notification objects implemented in this module.')
nhdpNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 213, 2, 2, 6)).setObjects(("NHDP-MIB", "nhdpNbrStateChange"), ("NHDP-MIB", "nhdp2HopNbrStateChange"), ("NHDP-MIB", "nhdpIfStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nhdpNotificationGroup = nhdpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: nhdpNotificationGroup.setDescription('Set of NHDP notifications implemented in this module.')
mibBuilder.exportSymbols("NHDP-MIB", nhdpIibLinkSetTable=nhdpIibLinkSetTable, nhdpRefreshInterval=nhdpRefreshInterval, nhdpLibRemovedIfAddrSetIpAddrPrefixLen=nhdpLibRemovedIfAddrSetIpAddrPrefixLen, nhdpDiscNeighborNibNeighborSetChanges=nhdpDiscNeighborNibNeighborSetChanges, nhdpDiscIfSetEntry=nhdpDiscIfSetEntry, nhdpDiscRouterIndex=nhdpDiscRouterIndex, nhdpNibLostNeighborSetTable=nhdpNibLostNeighborSetTable, nhdpNbrStateChangeWindow=nhdpNbrStateChangeWindow, nhdpDiscIfExpectedPackets=nhdpDiscIfExpectedPackets, nhdpIibLinkSetLHeardTime=nhdpIibLinkSetLHeardTime, nhdpLibLocalIfSetEntry=nhdpLibLocalIfSetEntry, nhdpNotificationGroup=nhdpNotificationGroup, nhdpNotificationsStates=nhdpNotificationsStates, nhdpNotificationsObjects=nhdpNotificationsObjects, nhdpIib2HopSetIpAddressType=nhdpIib2HopSetIpAddressType, nhdpConfigurationGroup=nhdpConfigurationGroup, nhdpBasicCompliance=nhdpBasicCompliance, nhdpNotificationObjectGroup=nhdpNotificationObjectGroup, nhdp2HopNbrState=nhdp2HopNbrState, nhdpIib2HopSetIpAddress=nhdpIib2HopSetIpAddress, nhdpStateGroup=nhdpStateGroup, nhdpHystRejectQuality=nhdpHystRejectQuality, nhdpNibLostNeighborSetEntry=nhdpNibLostNeighborSetEntry, nhdpHelloMinInterval=nhdpHelloMinInterval, nhdpIfHelloMessageRecvdAccumulatedSize=nhdpIfHelloMessageRecvdAccumulatedSize, nhdpPerformanceGroup=nhdpPerformanceGroup, nhdpDiscNeighborSetPerfEntry=nhdpDiscNeighborSetPerfEntry, nhdpLibRemovedIfAddrSetIRTime=nhdpLibRemovedIfAddrSetIRTime, nhdpCompliances=nhdpCompliances, nhdpDiscIfIndex=nhdpDiscIfIndex, nhdpHpMaxJitter=nhdpHpMaxJitter, PYSNMP_MODULE_ID=nhdpMIB, NeighborIfIndex=NeighborIfIndex, nhdpIfStateUpTime=nhdpIfStateUpTime, nhdpHystAcceptQuality=nhdpHystAcceptQuality, nhdpNbrStateChange=nhdpNbrStateChange, nhdpDiscIfSetIpAddrType=nhdpDiscIfSetIpAddrType, nhdpLibRemovedIfAddrSetIpAddrType=nhdpLibRemovedIfAddrSetIpAddrType, nhdpIfRowStatus=nhdpIfRowStatus, nhdpLibLocalIfSetRowStatus=nhdpLibLocalIfSetRowStatus, nhdpDiscIfSetTable=nhdpDiscIfSetTable, nhdpIib2HopSetEntry=nhdpIib2HopSetEntry, nhdpNibLostNeighborSetNLTime=nhdpNibLostNeighborSetNLTime, nhdpNibNeighborSetTable=nhdpNibNeighborSetTable, nhdpDiscIfSetPerfTable=nhdpDiscIfSetPerfTable, nhdpIib2HopSetPerfUpTime=nhdpIib2HopSetPerfUpTime, nhdpIibLinkSetLTime=nhdpIibLinkSetLTime, nhdpIfHelloMessageTriggeredXmits=nhdpIfHelloMessageTriggeredXmits, nhdpDiscNeighborSetPerfTable=nhdpDiscNeighborSetPerfTable, nhdpIfHelloMessageXmitAccumulatedLostNeighborCount=nhdpIfHelloMessageXmitAccumulatedLostNeighborCount, nhdpLibLocalIfSetIpAddrPrefixLen=nhdpLibLocalIfSetIpAddrPrefixLen, nhdpDiscNeighborNibNeighborSetUpTime=nhdpDiscNeighborNibNeighborSetUpTime, nhdpIib2HopSetPerfTable=nhdpIib2HopSetPerfTable, nhdpIib2HopSetTable=nhdpIib2HopSetTable, nhdpInterfaceEntry=nhdpInterfaceEntry, nhdp2HopNbrStateChange=nhdp2HopNbrStateChange, nhdpDiscIfRecvdPackets=nhdpDiscIfRecvdPackets, nhdpIibLinkSetLSymTime=nhdpIibLinkSetLSymTime, nhdp2HopNbrStateChangeThreshold=nhdp2HopNbrStateChangeThreshold, nhdpLibLocalIfSetIpAddr=nhdpLibLocalIfSetIpAddr, nhdpIib2HopSetPerfEntry=nhdpIib2HopSetPerfEntry, nhdpDiscIfSetIpAddrPrefixLen=nhdpDiscIfSetIpAddrPrefixLen, nhdpIib2HopSetN2Time=nhdpIib2HopSetN2Time, nhdpLibRemovedIfAddrSetIfIndex=nhdpLibRemovedIfAddrSetIfIndex, nhdpDiscIfSetIpAddr=nhdpDiscIfSetIpAddr, nhdpIfHelloMessagePeriodicXmits=nhdpIfHelloMessagePeriodicXmits, nhdpIib2HopSetIpAddrPrefixLen=nhdpIib2HopSetIpAddrPrefixLen, nhdpLibRemovedIfAddrSetIpAddr=nhdpLibRemovedIfAddrSetIpAddr, nhdpIfStateChange=nhdpIfStateChange, nhdpInterfaceTable=nhdpInterfaceTable, nhdpInterfaceStateEntry=nhdpInterfaceStateEntry, nhdpLibLocalIfSetTable=nhdpLibLocalIfSetTable, nhdpIibLinkSetLLost=nhdpIibLinkSetLLost, nhdpIfHelloMessageRecvd=nhdpIfHelloMessageRecvd, nhdpInterfacePerfEntry=nhdpInterfacePerfEntry, nhdpIfIndex=nhdpIfIndex, nhdpIibLinkSetLPending=nhdpIibLinkSetLPending, nhdpLHoldTime=nhdpLHoldTime, nhdpDiscNeighborNibNeighborSetReachableLinkChanges=nhdpDiscNeighborNibNeighborSetReachableLinkChanges, nhdpConfigurationObjGrp=nhdpConfigurationObjGrp, NeighborRouterIndex=NeighborRouterIndex, nhdpLibRemovedIfAddrSetEntry=nhdpLibRemovedIfAddrSetEntry, nhdpMIBGroups=nhdpMIBGroups, nhdpNbrStateChangeThreshold=nhdpNbrStateChangeThreshold, nhdpHtMaxJitter=nhdpHtMaxJitter, nhdpIfHelloMessageXmitAccumulatedSymmetricNeighborCount=nhdpIfHelloMessageXmitAccumulatedSymmetricNeighborCount, nhdpLibLocalIfSetIfIndex=nhdpLibLocalIfSetIfIndex, nhdpNibNeighborSetEntry=nhdpNibNeighborSetEntry, nhdpIibLinkSetEntry=nhdpIibLinkSetEntry, nhdpUpTime=nhdpUpTime, nhdpIib2HopSetPerfChanges=nhdpIib2HopSetPerfChanges, nhdpInitialPending=nhdpInitialPending, nhdpInitialQuality=nhdpInitialQuality, nhdpLibRemovedIfAddrSetTable=nhdpLibRemovedIfAddrSetTable, nhdpNibNeighborSetNSymmetric=nhdpNibNeighborSetNSymmetric, nhdpNHoldTime=nhdpNHoldTime, nhdpIfHelloMessageXmits=nhdpIfHelloMessageXmits, nhdpConformance=nhdpConformance, nhdpIfHelloMessageXmitAccumulatedSize=nhdpIfHelloMessageXmitAccumulatedSize, nhdp2HopNbrStateChangeWindow=nhdp2HopNbrStateChangeWindow, nhdpFullCompliance=nhdpFullCompliance, nhdpIfStatus=nhdpIfStatus, nhdpObjects=nhdpObjects, nhdpHelloInterval=nhdpHelloInterval, nhdpInterfaceStateTable=nhdpInterfaceStateTable, nhdpStateObjGrp=nhdpStateObjGrp, nhdpIHoldTime=nhdpIHoldTime, nhdpPerformanceObjGrp=nhdpPerformanceObjGrp, nhdpDiscIfSetIndex=nhdpDiscIfSetIndex, nhdpIfName=nhdpIfName, nhdpNotificationsControl=nhdpNotificationsControl, nhdpIfHelloMessageXmitAccumulatedHeardNeighborCount=nhdpIfHelloMessageXmitAccumulatedHeardNeighborCount, nhdpMIB=nhdpMIB, nhdpInterfacePerfTable=nhdpInterfacePerfTable, nhdpDiscIfSetPerfEntry=nhdpDiscIfSetPerfEntry, nhdpLibLocalIfSetIpAddrType=nhdpLibLocalIfSetIpAddrType, nhdpNibNeighborSetChanges=nhdpNibNeighborSetChanges, nhdpIib2HopSet1HopIfIndex=nhdpIib2HopSet1HopIfIndex, nhdpLibRemovedIfAddrSetIndex=nhdpLibRemovedIfAddrSetIndex, nhdpNotifications=nhdpNotifications, nhdpHHoldTime=nhdpHHoldTime, nhdpNbrState=nhdpNbrState, nhdpLibLocalIfSetIndex=nhdpLibLocalIfSetIndex)
