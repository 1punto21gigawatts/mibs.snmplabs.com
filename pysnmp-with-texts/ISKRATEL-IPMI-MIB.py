#
# PySNMP MIB module ISKRATEL-IPMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISKRATEL-IPMI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
msanAdditionalConf, = mibBuilder.importSymbols("ISKRATEL-MSAN-MIB", "msanAdditionalConf")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, NotificationType, Counter64, IpAddress, Counter32, Bits, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "NotificationType", "Counter64", "IpAddress", "Counter32", "Bits", "iso", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
msanShMC = ModuleIdentity((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33))
if mibBuilder.loadTexts: msanShMC.setLastUpdated('201203280944Z')
if mibBuilder.loadTexts: msanShMC.setOrganization('Iskratel')
if mibBuilder.loadTexts: msanShMC.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: msanShMC.setDescription('Description.')
msanShMCImpControllerVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1), )
if mibBuilder.loadTexts: msanShMCImpControllerVariablesTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerVariablesTable.setDescription('A Imp Controller report')
msanShMCImpControllerVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCImpControllerIndex"))
if mibBuilder.loadTexts: msanShMCImpControllerVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerVariablesEntry.setDescription('An IPM Controller entry')
msanShMCImpControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerIndex.setDescription('Table entry index, equal to <addr>')
msanShMCImpControllerSdrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerSdrVersion.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerSdrVersion.setDescription('SDR Version of the Management Controller Device Locator Record for this controller')
msanShMCImpControllerPicmgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerPicmgVersion.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerPicmgVersion.setDescription('PICMG Extension Version as reported by controller in a Get PICMG Properties replay')
msanShMCImpControllerSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerSlaveAddress.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerSlaveAddress.setDescription('Device Slave Address as defined in the Management Controller Device Locator Record for this controller')
msanShMCImpControllerChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerChannelNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerChannelNumber.setDescription('Channel Number as defined in the Management Controller Device Locator Record for this controller')
msanShMCImpControllerPowerStateNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerPowerStateNotification.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerPowerStateNotification.setDescription('Power State Notification as defined in the Management Controller Device Locator Record for this controller')
msanShMCImpControllerGlobalInitialisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerGlobalInitialisation.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerGlobalInitialisation.setDescription('Global Initialisation as defined in the Management Controller Device Locator Record for this controller')
msanShMCImpControllerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerCapabilities.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerCapabilities.setDescription('Device Capabilities as defined in the Management Controller Device Locator Record for this controller')
msanShMCImpControllerIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerIdString.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerIdString.setDescription('Device ID String as defined in the Management Controller Device Locator Record for this controller')
msanShMCImpControllerMaximumFru = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerMaximumFru.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerMaximumFru.setDescription('Max FRU Device ID as reported by controller in a Get PICMG Properties replay')
msanShMCImpControllerOwnFruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerOwnFruId.setStatus('current')
if mibBuilder.loadTexts: msanShMCImpControllerOwnFruId.setDescription('FRU Device ID from IPM Controller as reported by controller in a Get PICMG Properties replay')
msanShMCFruDeviceVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2), )
if mibBuilder.loadTexts: msanShMCFruDeviceVariablesTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceVariablesTable.setDescription('A FRU Device report')
msanShMCFruDeviceVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCFruDeviceIndex"))
if mibBuilder.loadTexts: msanShMCFruDeviceVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceVariablesEntry.setDescription('An IPM Controller entry')
msanShMCFruDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, -1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceIndex.setDescription('Table entry index, equal to <ipmb_addr> << 16 | <fru_id>')
msanShMCFruDeviceSdrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceSdrVersion.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceSdrVersion.setDescription('SDR Version of the Management Controller Device Locator Record for this FRU')
msanShMCFruDeviceSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceSlaveAddress.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceSlaveAddress.setDescription('Device Slave Address as defined in the Management Controller Device Locator Record for this FRU')
msanShMCFruDeviceSFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceSFruDeviceId.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceSFruDeviceId.setDescription('FRU Device as defined in the Management Controller Device Locator Record for this FRU')
msanShMCFruDeviceChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceChannelNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceChannelNumber.setDescription('Channel Number as defined in the Management Controller Device Locator Record for this FRU')
msanShMCFruDeviceDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceDeviceType.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceDeviceType.setDescription("For FRUs with FRU Device ID different from zero: Device Type as defined in the FRU Device Locator Record for this FRU. Since the Management Controller Device Locator Record doesn't provide the Device Type information, for Management Controller devices (FRU #0), this field is set to FRU Inventory Device (10h).")
msanShMCFruDeviceDeviceTypeModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceDeviceTypeModifier.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceDeviceTypeModifier.setDescription("For FRUs with FRU Device ID different from zero: Device Type as defined in the FRU Device Locator Record for this FRU. Since the Management Controller Device Locator Record doesn't provide the Device Type information, for Management Controller devices (FRU #0), this field is set to Unspecified (FFh).")
msanShMCFruDeviceFruEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceFruEntityId.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceFruEntityId.setDescription('(FRU) entity ID as defined in the Management Controller Device Locator Record for this FRU')
msanShMCFruDeviceFruEntityInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceFruEntityInstance.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceFruEntityInstance.setDescription('Channel Number as defined in the Management Controller Device Locator Record for this controller')
msanShMCFruDeviceIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceIdString.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceIdString.setDescription('Device ID String as defined in the Management Controller Device Locator Record for this FRU')
msanShMCFruDeviceHotSwapState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceHotSwapState.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceHotSwapState.setDescription('Current PICMG 3.0 FRU state (M0..M7) for this FRU. If this variable is equal to n, that means that the FRU is in stat Mn')
msanShMCFruDeviceActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCFruDeviceActivated.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruDeviceActivated.setDescription('When reading: 1 means that the FRU device is active (that is, in state M4), 0 is return otherwise. When writing: writing 1 to this variable triggers sending the Set FRU Activation (Activate FRU) command to this FRU, if the FRU is in state M2 or M5, and sending Set FRU Activation policy (Clear Locked) command if the FRU is in state M1. writin 0 to this variable triggers sending the Set FRU Activation (Deactivate FRU) command to this FRU, if the FRU is in state M2, M3, M4 or M5, and sending Set FRU Activation policy (Set Locked) command if the FRU is in state M1 or M6')
msanShMCSensorVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3), )
if mibBuilder.loadTexts: msanShMCSensorVariablesTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorVariablesTable.setDescription('A Sensor report')
msanShMCSensorVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCSensorIndex"))
if mibBuilder.loadTexts: msanShMCSensorVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorVariablesEntry.setDescription('An IPM Controller entry')
msanShMCSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, -1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorIndex.setDescription('Table entry index, equal to <ipmb_addr> << 16 | <seqnum>')
msanShMCSensorSdrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorSdrVersion.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorSdrVersion.setDescription('SDR Version of the Sensor Record')
msanShMCSensorRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorRecordType.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorRecordType.setDescription('Record Type of Sensor Record: 01h - for Full Sensor Records')
msanShMCSensorOwnerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorOwnerId.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorOwnerId.setDescription('Sensor Owner ID as defined in the Sensor Record')
msanShMCSensorOwnerLun = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorOwnerLun.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorOwnerLun.setDescription('Sensor Owner LUN as defined in the Sensor Record')
msanShMCSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorNumber.setDescription('Sensor Number as defined in the Sensor Record')
msanShMCSensorEntityInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorEntityInstance.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorEntityInstance.setDescription('Entity Instance as defined in the Sensor Record')
msanShMCSensorEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorEntityId.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorEntityId.setDescription('Entity ID as defined in the Sensor Record')
msanShMCSensorInitialisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorInitialisation.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorInitialisation.setDescription('Sensor Initialisation as defined in the Sensor Record')
msanShMCSensorCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorCapabilities.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorCapabilities.setDescription('Sensor Capabilities as defined in the Sensor Record')
msanShMCSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorType.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorType.setDescription('Sensor Type as defined in the Sensor Record')
msanShMCSensorEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorEvent.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorEvent.setDescription('Event/reading Type Code as defined in the Sensor Record')
msanShMCSensorAssertionEventMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorAssertionEventMask.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorAssertionEventMask.setDescription('Assertion Event Mask / Lower Treshold Reading Mask as defined in the Sensor Record')
msanShMCSensorDeassertionEventMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorDeassertionEventMask.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorDeassertionEventMask.setDescription('Deassertion Event Mask / Upper Treshold Reading Mask as defined in the Sensor Record')
msanShMCSensorMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorMask.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorMask.setDescription('Discrete Reading Mask / Settable Treshold Mask as defined in the Sensor Record')
msanShMCSensorUnit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUnit1.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorUnit1.setDescription('Sensor Units 1 as defined in the Sensor Record')
msanShMCSensorUnit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUnit2.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorUnit2.setDescription('Sensor Units 2 as defined in the Sensor Record')
msanShMCSensorUnit3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUnit3.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorUnit3.setDescription('Sensor Units 3 as defined in the Sensor Record')
msanShMCSensorLinearization = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorLinearization.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorLinearization.setDescription('Linearization as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorM = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorM.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorM.setDescription('M sensor reading conversion parameter as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorTolerance.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorTolerance.setDescription('Tolerance sensor reading conversion parameter as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorB = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorB.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorB.setDescription('B sensor reading conversion parameter as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorAccuracy.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorAccuracy.setDescription('Accuracy sensor reading conversion parameter as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorAccuracyExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorAccuracyExp.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorAccuracyExp.setDescription('Accuracy exp sensor reading conversion parameter as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorRexp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorRexp.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorRexp.setDescription('R exp sensor reading conversion parameter as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorBexp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorBexp.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorBexp.setDescription('B exp sensor reading conversion parameter as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorCharacteristicFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorCharacteristicFlags.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorCharacteristicFlags.setDescription('Analog characteristic flags as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorReading.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorReading.setDescription('Current sensor reading in raw form.')
msanShMCSensorProcessedReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorProcessedReading.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorProcessedReading.setDescription('Current sensor reading processed according to reading conversion formula for this sensor')
msanShMCSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNominalReading.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorNominalReading.setDescription('Nominal Reading as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNormalMaximum.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorNormalMaximum.setDescription('Normal Maximum as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNormalMinimum.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorNormalMinimum.setDescription('Normal Minimum as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorMaximumReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorMaximumReading.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorMaximumReading.setDescription('Sensor Maximum Reading as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorMinimumReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorMinimumReading.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorMinimumReading.setDescription('Sensor Minimum Reading as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorUpperNonRecoverableThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUpperNonRecoverableThr.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorUpperNonRecoverableThr.setDescription('Upper non-recoverable Threshold as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorUpperCriticalThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUpperCriticalThr.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorUpperCriticalThr.setDescription('Upper critical Threshold as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorUpperNonCriticalThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUpperNonCriticalThr.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorUpperNonCriticalThr.setDescription('Upper non-critical Threshold as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorLowerNonRecoverableThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorLowerNonRecoverableThr.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorLowerNonRecoverableThr.setDescription('Lower non-recoverable Threshold as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorLowerCriticalThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorLowerCriticalThr.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorLowerCriticalThr.setDescription('Lower critical Threshold as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorLowerNonCriticalThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorLowerNonCriticalThr.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorLowerNonCriticalThr.setDescription('Lower non-critical Threshold as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorPositiveGoingThrHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorPositiveGoingThrHysteresis.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorPositiveGoingThrHysteresis.setDescription('Positive-going Threshold Hysteresis as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorNegativeGoingThrHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNegativeGoingThrHysteresis.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorNegativeGoingThrHysteresis.setDescription('Negative-going Threshold Hysteresis as defined in the Sensor Record. Valid only for full Sensor Records.')
msanShMCSensorIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorIdString.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorIdString.setDescription('Device ID String as defined in the Sensor Record.')
msanShMCSensorEntireSensorData = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorEntireSensorData.setStatus('current')
if mibBuilder.loadTexts: msanShMCSensorEntireSensorData.setDescription('Device ID String as defined in the Sensor Record.')
msanShMCBoardsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4), )
if mibBuilder.loadTexts: msanShMCBoardsTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardsTable.setDescription('A list of boards')
msanShMCBoardsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCBoardsIndex"))
if mibBuilder.loadTexts: msanShMCBoardsEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardsEntry.setDescription('An IPM Controller entry')
msanShMCBoardsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardsIndex.setDescription('Table index equal to <boardnum>')
msanShMCBoardsBoardBasicPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicPresent.setDescription('0 - Board is absent 1 - Board is present')
msanShMCBoardsBoardBasicHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicHealthy.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicHealthy.setDescription('Causes the BMC to return a high level version of the system health status in integer. The BMC returns an integer with the following values: 0 - off 1 - on')
msanShMCBoardsBoardBasicReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("cold", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicReset.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicReset.setDescription('on read: 1 - board is in reset state 0 - otherwise on write: 0 - do nothing 1 - perform COLD reset')
msanShMCBoardsBoardBasicSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicSlaveAddress.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicSlaveAddress.setDescription('The on board IPMI controller 7-bit I2C addresses for IPMB messages')
msanShMCBoardsBoardBasicFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicFruDeviceId.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicFruDeviceId.setDescription('FRU Device ID field is used to identify individual FRU devices on the given LUN in the management controller. Up to 255 FRU devices can be located on a given LUN. FRU Device ID #00 at LUN 00b is predefined as being the FRU Device for the FRU that the management controller is located on. Since there are four possible LUNs for a management controller, this means up to 255*4 FRU devices can be supported behind a single management controller using this mechanism. The Read/Write FRU Device commands provide an abstracted interface that hides the technology used to implement the FRU device from system software.')
msanShMCSelTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 5), )
if mibBuilder.loadTexts: msanShMCSelTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCSelTable.setDescription('A list of Sel')
msanShMCSelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 5, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCSelIndex"))
if mibBuilder.loadTexts: msanShMCSelEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCSelEntry.setDescription('An System Event Log Variables entry')
msanShMCSelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSelIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCSelIndex.setDescription('Table entry index, equal to <recid>')
msanShMCSelcontents = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSelcontents.setStatus('current')
if mibBuilder.loadTexts: msanShMCSelcontents.setDescription('Contents of the SEL entry')
msanShMCShelfTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 6), )
if mibBuilder.loadTexts: msanShMCShelfTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfTable.setDescription('A list of Shelf')
msanShMCShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 6, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCShelfIndex"))
if mibBuilder.loadTexts: msanShMCShelfEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfEntry.setDescription('An System Event Log Variables entry')
msanShMCShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfIndex.setDescription('Table entry index, equal to <shelfid>')
msanShMCShelfHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfHealthy.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfHealthy.setDescription("1 - if the shelf doesn't have unhealthy components, 0 - if there exist unhelthy components in the shelf")
msanShMCPefConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8))
msanShMCPefConfigurationSetInProgress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationSetInProgress.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationSetInProgress.setDescription('Set in progrese parameter')
msanShMCPefConfigurationControl = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationControl.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationControl.setDescription('PEF Control parameter')
msanShMCPefConfigurationActionGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationActionGlobalControl.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationActionGlobalControl.setDescription('PEF Action global control parameter')
msanShMCPefConfigurationStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationStartupDelay.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationStartupDelay.setDescription('PEF Startup Delay parameter')
msanShMCPefConfigurationAlertStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStartupDelay.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStartupDelay.setDescription('PEF Alert Startup Delay parameter')
msanShMCPefConfigurationNumberOfEventFilters = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationNumberOfEventFilters.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationNumberOfEventFilters.setDescription('Number of Event Filters parameter')
msanShMCPefConfigurationNumberOfAlertPoliciEntries = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationNumberOfAlertPoliciEntries.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationNumberOfAlertPoliciEntries.setDescription('Number of Alert Polici Entries parameter')
msanShMCPefConfigurationSystemGuid = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationSystemGuid.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationSystemGuid.setDescription("System GUID parameter, excluding the 'Used to fill in the GUID field in a PET Trap' byte")
msanShMCPefConfigurationNumberOfAlertStrings = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationNumberOfAlertStrings.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationNumberOfAlertStrings.setDescription('Number of Alert Strings parameter')
msanShMCPefConfigurationEventFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 14), )
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterTable.setDescription('A list of PefConfigurationEventFilter')
msanShMCPefConfigurationEventFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 14, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCPefConfigurationEventFilterIndex"))
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterEntry.setDescription('An System Event Log Variables entry')
msanShMCPefConfigurationEventFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterIndex.setDescription('Table entry index, equal to <filter>')
msanShMCPefConfigurationEventFilterData = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterData.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterData.setDescription('Event Filter Table entry data, excluding the Set Selector byte')
msanShMCPefConfigurationAlertStringTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19), )
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringTable.setDescription('A list of PEF Configuration Alert String')
msanShMCPefConfigurationAlertStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCPefConfigurationAlertStringIndex"))
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringEntry.setDescription('An System Event Log Variables entry')
msanShMCPefConfigurationAlertStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringIndex.setDescription('Table entry index, equal to <strnum>')
msanShMCPefConfigurationAlertStringKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringKey.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringKey.setDescription('Alert String Keys entry data, excluding the Set Selector byte')
msanShMCPefConfigurationAlertString = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertString.setStatus('current')
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertString.setDescription('Alert Strings entry data, excluding the Set Selector byte')
msanShMCFruInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20), )
if mibBuilder.loadTexts: msanShMCFruInfoTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruInfoTable.setDescription('A list of Fru Infornations')
msanShMCFruInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCFruInfoIndex"))
if mibBuilder.loadTexts: msanShMCFruInfoEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruInfoEntry.setDescription('An FRU information')
msanShMCFruInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruInfoIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruInfoIndex.setDescription('Index = (<ipmb addr> << 24) | (<fru id> << 16) | <block number>')
msanShMCFruInfoData = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruInfoData.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruInfoData.setDescription('A block of data')
msanShMCFruInfoDataWo = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCFruInfoDataWo.setStatus('current')
if mibBuilder.loadTexts: msanShMCFruInfoDataWo.setDescription('Write any number of bytes up to 32. Due to limitations in the current version of the SNMP agent, <block number> is interpreted as a byte offest')
msanShMCBoardVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32), )
if mibBuilder.loadTexts: msanShMCBoardVariablesTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesTable.setDescription('A list of boards')
msanShMCBoardVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCBoardVariablesBoardBasicSlotNumber"))
if mibBuilder.loadTexts: msanShMCBoardVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesEntry.setDescription('An IPM Controller entry')
msanShMCBoardVariablesBoardBasicSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicSlotNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicSlotNumber.setDescription('Table index equal to <boardnum>')
msanShMCBoardVariablesBoardBasicPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicPresent.setDescription('0 - Board is absent 1 - Board is present')
msanShMCBoardVariablesBoardBasicHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicHealthy.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicHealthy.setDescription('Causes the BMC to return a high level version of the system health status in integer. The BMC returns an integer with the following values: 0 - off 1 - on')
msanShMCBoardVariablesBoardBasicReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("cold", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicReset.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicReset.setDescription('on read: 1 - board is in reset state 0 - otherwise on write: 0 - do nothing 1 - perform COLD reset')
msanShMCBoardVariablesBoardBasicPowered = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("powered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicPowered.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicPowered.setDescription('on read: 1 - board is powered 0 - otherwise')
msanShMCBoardVariablesBoardBasicSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicSlaveAddress.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicSlaveAddress.setDescription('The on board IPMI controller 7-bit I2C addresses for IPMB messages')
msanShMCBoardVariablesBoardBasicFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicFruDeviceId.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicFruDeviceId.setDescription('FRU Device ID field is used to identify individual FRU devices on the given LUN in the management controller. Up to 255 FRU devices can be located on a given LUN. FRU Device ID #00 at LUN 00b is predefined as being the FRU Device for the FRU that the management controller is located on. Since there are four possible LUNs for a management controller, this means up to 255*4 FRU devices can be supported behind a single management controller using this mechanism. The Read/Write FRU Device commands provide an abstracted interface that hides the technology used to implement the FRU device from system software.')
msanShMCBoardVariablesBoardBasicFruinfoProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicFruinfoProductAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicFruinfoProductAreaPresent.setDescription('1 - if product area is present 0 - otherwise')
msanShMCBoardVariablesBoardBasicProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductManufacturer.setDescription('Returns the product manufacturer from the board FRU information or N/A')
msanShMCBoardVariablesBoardBasicProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductName.setDescription('Returns the product name from the board FRU information or N/A')
msanShMCBoardVariablesBoardBasicProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductPartModelNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductPartModelNumber.setDescription('Returns the product part model from the board FRU information or N/A')
msanShMCBoardVariablesBoardBasicProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductVersionNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductVersionNumber.setDescription('Returns the product version number from the board FRU information or N/A')
msanShMCBoardVariablesBoardBasicProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductSerialNumber.setDescription('Returns the product serial number from the board FRU information or N/A')
msanShMCBoardVariablesBoardBasicBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardAreaPresent.setDescription('1 - if board area is present 0 - otherwise')
msanShMCBoardVariablesBoardBasicBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardManufacturer.setDescription('Returns the board manufacturer from the board FRU information or N/A')
msanShMCBoardVariablesBoardBasicBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardProductName.setDescription('Returns the board product name from the board FRU information or N/A')
msanShMCBoardVariablesBoardBasicBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardSerialNumber.setDescription('Returns the board serial number from the board FRU information or N/A')
msanShMCBoardVariablesBoardBasicBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardPartNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardPartNumber.setDescription('Returns the board part number from the board FRU information or N/A')
msanShMCBoardVariablesBoardBasicBoardManufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardManufactureTime.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardManufactureTime.setDescription('Returns the board manufacturing time: the number of seconds since 00:00:00, January 1, 1970, CoordinatedUnivarsal Time (UTC): -1 if the corresponding field is not present in the board FRu information.')
msanShMCBoardVariablesSelectivePowerOffSwitchOffType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("switchOff", 2), ("switchOn", 3))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCBoardVariablesSelectivePowerOffSwitchOffType.setStatus('current')
if mibBuilder.loadTexts: msanShMCBoardVariablesSelectivePowerOffSwitchOffType.setDescription('Selective_Power_Off switch off type per board.')
msanShMCFanTrayVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33), )
if mibBuilder.loadTexts: msanShMCFanTrayVariablesTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayVariablesTable.setDescription('A list of Fan Trays')
msanShMCFanTrayVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCFanTraySlotNumber"))
if mibBuilder.loadTexts: msanShMCFanTrayVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayVariablesEntry.setDescription('An IPM Controller entry')
msanShMCFanTraySlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTraySlotNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTraySlotNumber.setDescription('Table index equal to <boardnum>,<Lun>,<Fru id><Sensor number>')
msanShMCFanTrayPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayPresent.setDescription('0 - Board is absent 1 - Board is present')
msanShMCFanTrayHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayHealthy.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayHealthy.setDescription('Causes the BMC to return a high level version of the system health status in integer. The BMC returns an integer with the following values: 0 - off 1 - on')
msanShMCFanTrayHealthLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCFanTrayHealthLed.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayHealthLed.setDescription('on read: 1 - led is on 0 - led is off on write: 0 - turn led off 1 - turn led on')
msanShMCFanTraySlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTraySlaveAddress.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTraySlaveAddress.setDescription('The on board IPMI controller 7-bit I2C addresses for IPMB messages')
msanShMCFanTrayFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruDeviceId.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruDeviceId.setDescription('FRU Device ID field is used to identify individual FRU devices on the given LUN in the management controller. Up to 255 FRU devices can be located on a given LUN. FRU Device ID #00 at LUN 00b is predefined as being the FRU Device for the FRU that the management controller is located on. Since there are four possible LUNs for a management controller, this means up to 255*4 FRU devices can be supported behind a single management controller using this mechanism. The Read/Write FRU Device commands provide an abstracted interface that hides the technology used to implement the FRU device from system software.')
msanShMCFanTrayFruinfoProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductAreaPresent.setDescription('1 - if product area is present 0 - otherwise')
msanShMCFanTrayFruinfoProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductManufacturer.setDescription('Returns the product manufacturer from the board FRU information or N/A')
msanShMCFanTrayFruinfoProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductName.setDescription('Returns the product name from the board FRU information or N/A')
msanShMCFanTrayFruinfoProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductPartModelNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductPartModelNumber.setDescription('Returns the product part model from the board FRU information or N/A')
msanShMCFanTrayFruinfoProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductVersionNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductVersionNumber.setDescription('Returns the product version number from the board FRU information or N/A')
msanShMCFanTrayFruinfoProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductSerialNumber.setDescription('Returns the product serial number from the board FRU information or N/A')
msanShMCFanTrayFruinfoBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardAreaPresent.setDescription('1 - if board area is present 0 - otherwise')
msanShMCFanTrayFruinfoBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardManufacturer.setDescription('Returns the board manufacturer from the board FRU information or N/A')
msanShMCFanTrayFruinfoBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardProductName.setDescription('Returns the board product name from the board FRU information or N/A')
msanShMCFanTrayFruinfoBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardSerialNumber.setDescription('Returns the board serial number from the board FRU information or N/A')
msanShMCFanTrayFruinfoBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardPartNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardPartNumber.setDescription('Returns the board part number from the board FRU information or N/A')
msanShMCFanTrayFruinfoBoardManufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardManufactureTime.setStatus('current')
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardManufactureTime.setDescription('Returns the board manufacturing time: the number of seconds since 00:00:00, January 1, 1970, CoordinatedUnivarsal Time (UTC): -1 if the corresponding field is not present in the board FRu information.')
msanShMCPowerSupplyVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34), )
if mibBuilder.loadTexts: msanShMCPowerSupplyVariablesTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyVariablesTable.setDescription('A list of Power Supplys')
msanShMCPowerSupplyVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCPowerSupplySlotNumber"))
if mibBuilder.loadTexts: msanShMCPowerSupplyVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyVariablesEntry.setDescription('An IPM Controller entry')
msanShMCPowerSupplySlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplySlotNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplySlotNumber.setDescription('Table index equal to <boardnum>,<Lun>,<Fru id><Sensor number>')
msanShMCPowerSupplyDegrade = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyDegrade.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyDegrade.setDescription('0 - Board is absent 1 - Board is present')
msanShMCPowerSupplyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFail.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFail.setDescription('Causes the BMC to return a high level version of the system health status in integer. The BMC returns an integer with the following values: 0 - off 1 - on')
msanShMCPowerSupplyInhibit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("inhibit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPowerSupplyInhibit.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyInhibit.setDescription('on read: 1 - if power supply is in the Inhibited state 0 - otherwise on write: 1 - Inhibit power supply 0 - Reenable power supply')
msanShMCPowerSupplyHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPowerSupplyHealthy.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyHealthy.setDescription('Causes the BMC to return a high level version of the system health status in integer. The BMC returns an integer with the following values: 0 - off 1 - on')
msanShMCPowerSupplySlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplySlaveAddress.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplySlaveAddress.setDescription('The on board IPMI controller 7-bit I2C addresses for IPMB messages')
msanShMCPowerSupplyFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruDeviceId.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruDeviceId.setDescription('FRU Device ID field is used to identify individual FRU devices on the given LUN in the management controller. Up to 255 FRU devices can be located on a given LUN. FRU Device ID #00 at LUN 00b is predefined as being the FRU Device for the FRU that the management controller is located on. Since there are four possible LUNs for a management controller, this means up to 255*4 FRU devices can be supported behind a single management controller using this mechanism. The Read/Write FRU Device commands provide an abstracted interface that hides the technology used to implement the FRU device from system software.')
msanShMCPowerSupplyFruinfoProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductAreaPresent.setDescription('1 - if product area is present 0 - otherwise')
msanShMCPowerSupplyFruinfoProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductManufacturer.setDescription('Returns the product manufacturer from the board FRU information or N/A')
msanShMCPowerSupplyFruinfoProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductName.setDescription('Returns the product name from the board FRU information or N/A')
msanShMCPowerSupplyFruinfoProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductPartModelNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductPartModelNumber.setDescription('Returns the product part model from the board FRU information or N/A')
msanShMCPowerSupplyFruinfoProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductVersionNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductVersionNumber.setDescription('Returns the product version number from the board FRU information or N/A')
msanShMCPowerSupplyFruinfoProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductSerialNumber.setDescription('Returns the product serial number from the board FRU information or N/A')
msanShMCPowerSupplyFruinfoBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardAreaPresent.setDescription('1 - if board area is present 0 - otherwise')
msanShMCPowerSupplyFruinfoBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardManufacturer.setDescription('Returns the board manufacturer from the board FRU information or N/A')
msanShMCPowerSupplyFruinfoBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardProductName.setDescription('Returns the board product name from the board FRU information or N/A')
msanShMCPowerSupplyFruinfoBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardSerialNumber.setDescription('Returns the board serial number from the board FRU information or N/A')
msanShMCPowerSupplyFruinfoBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardPartNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardPartNumber.setDescription('Returns the board part number from the board FRU information or N/A')
msanShMCPowerSupplyFruinfoBoardmanufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardmanufactureTime.setStatus('current')
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardmanufactureTime.setDescription('Returns the board manufacturing time: the number of seconds since 00:00:00, January 1, 1970, CoordinatedUnivarsal Time (UTC): -1 if the corresponding field is not present in the board FRu information.')
msanShMCShelfManagerVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35), )
if mibBuilder.loadTexts: msanShMCShelfManagerVariablesTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerVariablesTable.setDescription('A list of Shelf Managers')
msanShMCShelfManagerVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCShelfManagerSlotNumber"))
if mibBuilder.loadTexts: msanShMCShelfManagerVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerVariablesEntry.setDescription('An IPM Controller entry')
msanShMCShelfManagerSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerSlotNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerSlotNumber.setDescription('Table index equal to <boardnum>,<Lun>,<Fru id><Sensor number>')
msanShMCShelfManagerSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerSlaveAddress.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerSlaveAddress.setDescription('The on board IPMI controller 7-bit I2C addresses for IPMB messages')
msanShMCShelfManagerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerPresent.setDescription('0 - Shelf manager is absent 1 - Shelf manager is present')
msanShMCShelfManagerHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerHealthy.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerHealthy.setDescription('Causes the BMC to return a high level version of the system health status in integer. The BMC returns an integer with the following values: 0 - off 1 - on')
msanShMCShelfManagerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCShelfManagerActive.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerActive.setDescription('on read: 1 - Shelf manager is active 0 - Shelf manager is in standby on write: 0 - initiate switchover other - no change')
msanShMCShelfManagerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("cold", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCShelfManagerReset.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerReset.setDescription('on read: 1 - board is in reset state 0 - otherwise on write: 0 - do nothing 1 - perform COLD reset')
msanShMCShelfManagerFruinfoProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductAreaPresent.setDescription('1 - if product area is present 0 - otherwise')
msanShMCShelfManagerFruinfoProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductManufacturer.setDescription('Returns the product manufacturer from the board FRU information or N/A')
msanShMCShelfManagerFruinfoProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductName.setDescription('Returns the product name from the board FRU information or N/A')
msanShMCShelfManagerFruinfoProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductPartModelNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductPartModelNumber.setDescription('Returns the product part model from the board FRU information or N/A')
msanShMCShelfManagerFruinfoProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductVersionNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductVersionNumber.setDescription('Returns the product version number from the board FRU information or N/A')
msanShMCShelfManagerFruinfoProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductSerialNumber.setDescription('Returns the product serial number from the board FRU information or N/A')
msanShMCShelfManagerFruinfoBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardAreaPresent.setDescription('1 - if board area is present 0 - otherwise')
msanShMCShelfManagerFruinfoBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardManufacturer.setDescription('Returns the board manufacturer from the board FRU information or N/A')
msanShMCShelfManagerFruinfoBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardProductName.setDescription('Returns the board product name from the board FRU information or N/A')
msanShMCShelfManagerFruinfoBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardSerialNumber.setDescription('Returns the board serial number from the board FRU information or N/A')
msanShMCShelfManagerFruinfoBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardPartNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardPartNumber.setDescription('Returns the board part number from the board FRU information or N/A')
msanShMCShelfManagerFruinfoBoardmanufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardmanufactureTime.setStatus('current')
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardmanufactureTime.setDescription('Returns the board manufacturing time: the number of seconds since 00:00:00, January 1, 1970, CoordinatedUnivarsal Time (UTC): -1 if the corresponding field is not present in the board FRu information.')
msanShMCChassisVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36), )
if mibBuilder.loadTexts: msanShMCChassisVariablesTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisVariablesTable.setDescription('A Chassis report')
msanShMCChassisVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCChassisId"))
if mibBuilder.loadTexts: msanShMCChassisVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisVariablesEntry.setDescription('An IPM Controller entry')
msanShMCChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisId.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisId.setDescription('Shelf Address')
msanShMCChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisType.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisType.setDescription('The 8 bit Chassis type from the Shelf FRU Information')
msanShMCChassisPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisPartNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisPartNumber.setDescription('Chassis Part Number from the Shelf FRU Information')
msanShMCChassisSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisSerialNumber.setDescription('Chassis Serial Number from the Shelf FRU Information')
msanShMCChassisProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisProductAreaPresent.setDescription('1 - if product area is present 0 - otherwise')
msanShMCChassisProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisProductManufacturer.setDescription('Returns the product manufacturer from the board FRU information or N/A')
msanShMCChassisProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisProductName.setDescription('Returns the product name from the board FRU information or N/A')
msanShMCChassisProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductPartModelNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisProductPartModelNumber.setDescription('Returns the product part model from the board FRU information or N/A')
msanShMCChassisProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductVersionNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisProductVersionNumber.setDescription('Returns the product version number from the board FRU information or N/A')
msanShMCChassisProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisProductSerialNumber.setDescription('Returns the product serial number from the board FRU information or N/A')
msanShMCChassisBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardAreaPresent.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisBoardAreaPresent.setDescription('1 - if board area is present 0 - otherwise')
msanShMCChassisBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardManufacturer.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisBoardManufacturer.setDescription('Returns the board manufacturer from the board FRU information or N/A')
msanShMCChassisBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardProductName.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisBoardProductName.setDescription('Returns the board product name from the board FRU information or N/A')
msanShMCChassisBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisBoardSerialNumber.setDescription('Returns the board serial number from the board FRU information or N/A')
msanShMCChassisBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardPartNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisBoardPartNumber.setDescription('Returns the board part number from the board FRU information or N/A')
msanShMCChassisBoardmanufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardmanufactureTime.setStatus('current')
if mibBuilder.loadTexts: msanShMCChassisBoardmanufactureTime.setDescription('Returns the board manufacturing time: the number of seconds since 00:00:00, January 1, 1970, CoordinatedUnivarsal Time (UTC): -1 if the corresponding field is not present in the board FRu information.')
msanShMCEventVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37), )
if mibBuilder.loadTexts: msanShMCEventVariablesTable.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventVariablesTable.setDescription('A Event report')
msanShMCEventVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCEventIndex"))
if mibBuilder.loadTexts: msanShMCEventVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventVariablesEntry.setDescription('An IPM Controller entry')
msanShMCEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventIndex.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventIndex.setDescription('Table entry index, equal to <selentrynum>')
msanShMCEventDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCEventDelete.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventDelete.setDescription('returns 0 on reading, Writing 1 causes the current SEL entry to be deleted')
msanShMCEventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventTimeStamp.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventTimeStamp.setDescription('Returns the board manufacturing time: the number of seconds since 00:00:00, January 1, 1970, CoordinatedUnivarsal Time (UTC): -1 if the corresponding field is not present in the board FRu information.')
msanShMCEventClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 225, 240))).clone(namedValues=NamedValues(("other", 0), ("temperature", 1), ("voltage", 2), ("current", 3), ("fan", 4), ("powerstate", 225), ("hotswap", 240)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventClass.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventClass.setDescription('Event class')
msanShMCEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("other", 0), ("aboveUpperNonRecoverable", 1), ("aboveUpperCritical", 2), ("aboveUpperNonCritical", 3), ("belowLowerNonrecoverable", 4), ("belowLowerCritical", 5), ("belowLowerNonCritical", 6), ("inserted", 7), ("activated", 8), ("communicationLost", 9), ("communicationRestored", 10), ("deactivated", 11), ("extracted", 12), ("powerDegrade", 13), ("powerFail", 14), ("powerInhibit", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventType.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventType.setDescription('Event type')
msanShMCEventAsserted = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deasserted", 0), ("asserted", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventAsserted.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventAsserted.setDescription('Event type')
msanShMCEventOriginSiteType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginSiteType.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventOriginSiteType.setDescription('Origin Site Type')
msanShMCEventOriginSiteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginSiteNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventOriginSiteNumber.setDescription('Origin Site Number')
msanShMCEventOriginSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginSlaveAddress.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventOriginSlaveAddress.setDescription('Origin Slave Address')
msanShMCEventOriginFruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginFruId.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventOriginFruId.setDescription('Origin FRU ID')
msanShMCEventOriginSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginSensorNumber.setStatus('current')
if mibBuilder.loadTexts: msanShMCEventOriginSensorNumber.setDescription('Origin Sensor Number')
msanShMCGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 38))
msanShMCSelectivePowerOffAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 38, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCSelectivePowerOffAdminMode.setStatus('current')
if mibBuilder.loadTexts: msanShMCSelectivePowerOffAdminMode.setDescription('Selective_Power_Off power off delay.')
msanSHMCSelectivePowerOffOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 38, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSHMCSelectivePowerOffOffDelay.setStatus('current')
if mibBuilder.loadTexts: msanSHMCSelectivePowerOffOffDelay.setDescription('Selective_Power_Off power off delay.')
msanSHMCSelectivePowerOffOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 38, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSHMCSelectivePowerOffOnDelay.setStatus('current')
if mibBuilder.loadTexts: msanSHMCSelectivePowerOffOnDelay.setDescription('Selective_Power_Off power on delay.')
mibBuilder.exportSymbols("ISKRATEL-IPMI-MIB", msanShMCFanTrayFruinfoBoardAreaPresent=msanShMCFanTrayFruinfoBoardAreaPresent, msanShMCFruDeviceChannelNumber=msanShMCFruDeviceChannelNumber, msanShMCShelfManagerFruinfoBoardAreaPresent=msanShMCShelfManagerFruinfoBoardAreaPresent, msanShMCImpControllerSlaveAddress=msanShMCImpControllerSlaveAddress, msanShMCEventVariablesEntry=msanShMCEventVariablesEntry, msanShMCFruDeviceVariablesTable=msanShMCFruDeviceVariablesTable, msanShMCPefConfigurationSystemGuid=msanShMCPefConfigurationSystemGuid, msanShMCFanTrayVariablesEntry=msanShMCFanTrayVariablesEntry, msanShMCPowerSupplySlotNumber=msanShMCPowerSupplySlotNumber, msanShMCEventClass=msanShMCEventClass, msanShMCBoardVariablesBoardBasicReset=msanShMCBoardVariablesBoardBasicReset, msanShMCImpControllerIdString=msanShMCImpControllerIdString, msanShMCEventDelete=msanShMCEventDelete, msanShMCEventOriginSensorNumber=msanShMCEventOriginSensorNumber, msanShMCBoardVariablesBoardBasicBoardManufactureTime=msanShMCBoardVariablesBoardBasicBoardManufactureTime, msanShMCBoardVariablesBoardBasicPowered=msanShMCBoardVariablesBoardBasicPowered, msanShMCBoardVariablesBoardBasicProductName=msanShMCBoardVariablesBoardBasicProductName, msanShMCSensorCharacteristicFlags=msanShMCSensorCharacteristicFlags, msanShMCImpControllerSdrVersion=msanShMCImpControllerSdrVersion, msanShMCPowerSupplyFruinfoProductManufacturer=msanShMCPowerSupplyFruinfoProductManufacturer, msanShMCSensorNominalReading=msanShMCSensorNominalReading, msanShMCPowerSupplyFruinfoBoardManufacturer=msanShMCPowerSupplyFruinfoBoardManufacturer, msanShMCChassisProductSerialNumber=msanShMCChassisProductSerialNumber, msanShMCChassisBoardProductName=msanShMCChassisBoardProductName, msanShMCSensorTolerance=msanShMCSensorTolerance, msanShMCImpControllerPicmgVersion=msanShMCImpControllerPicmgVersion, msanShMCEventOriginSiteType=msanShMCEventOriginSiteType, msanShMCSelIndex=msanShMCSelIndex, msanShMCShelfManagerFruinfoProductManufacturer=msanShMCShelfManagerFruinfoProductManufacturer, msanShMCPowerSupplySlaveAddress=msanShMCPowerSupplySlaveAddress, msanShMCShelfManagerFruinfoProductVersionNumber=msanShMCShelfManagerFruinfoProductVersionNumber, msanShMCFanTrayHealthy=msanShMCFanTrayHealthy, msanShMCChassisProductPartModelNumber=msanShMCChassisProductPartModelNumber, msanShMCSensorProcessedReading=msanShMCSensorProcessedReading, msanShMCShelfManagerFruinfoBoardmanufactureTime=msanShMCShelfManagerFruinfoBoardmanufactureTime, msanShMCFanTrayFruinfoProductAreaPresent=msanShMCFanTrayFruinfoProductAreaPresent, msanShMCChassisVariablesEntry=msanShMCChassisVariablesEntry, msanShMCEventTimeStamp=msanShMCEventTimeStamp, msanShMCFruDeviceHotSwapState=msanShMCFruDeviceHotSwapState, msanShMCSensorNegativeGoingThrHysteresis=msanShMCSensorNegativeGoingThrHysteresis, msanShMCSensorUnit2=msanShMCSensorUnit2, msanShMCBoardVariablesSelectivePowerOffSwitchOffType=msanShMCBoardVariablesSelectivePowerOffSwitchOffType, msanShMCSelectivePowerOffAdminMode=msanShMCSelectivePowerOffAdminMode, msanShMCPefConfigurationEventFilterEntry=msanShMCPefConfigurationEventFilterEntry, msanShMCShelfIndex=msanShMCShelfIndex, msanShMCSensorIdString=msanShMCSensorIdString, msanShMCFruDeviceSlaveAddress=msanShMCFruDeviceSlaveAddress, msanShMCSensorLowerNonCriticalThr=msanShMCSensorLowerNonCriticalThr, msanShMCImpControllerOwnFruId=msanShMCImpControllerOwnFruId, msanShMCSensorMask=msanShMCSensorMask, msanShMCPefConfigurationAlertStringIndex=msanShMCPefConfigurationAlertStringIndex, msanShMCFanTrayFruDeviceId=msanShMCFanTrayFruDeviceId, msanShMCImpControllerCapabilities=msanShMCImpControllerCapabilities, msanShMCShelfManagerFruinfoBoardProductName=msanShMCShelfManagerFruinfoBoardProductName, msanSHMCSelectivePowerOffOnDelay=msanSHMCSelectivePowerOffOnDelay, msanShMCChassisBoardAreaPresent=msanShMCChassisBoardAreaPresent, msanShMCShelfTable=msanShMCShelfTable, msanShMCSensorUpperCriticalThr=msanShMCSensorUpperCriticalThr, msanShMCSensorMinimumReading=msanShMCSensorMinimumReading, msanShMCSelTable=msanShMCSelTable, msanShMCShelfManagerReset=msanShMCShelfManagerReset, msanShMCChassisPartNumber=msanShMCChassisPartNumber, msanShMCEventOriginFruId=msanShMCEventOriginFruId, msanShMCPefConfigurationNumberOfAlertPoliciEntries=msanShMCPefConfigurationNumberOfAlertPoliciEntries, msanShMCPefConfigurationAlertStringEntry=msanShMCPefConfigurationAlertStringEntry, msanShMCPowerSupplyVariablesEntry=msanShMCPowerSupplyVariablesEntry, msanShMCShelfManagerActive=msanShMCShelfManagerActive, msanShMCChassisProductName=msanShMCChassisProductName, msanShMCEventOriginSiteNumber=msanShMCEventOriginSiteNumber, msanShMCSensorRexp=msanShMCSensorRexp, msanShMCSensorAssertionEventMask=msanShMCSensorAssertionEventMask, msanShMCSensorEntireSensorData=msanShMCSensorEntireSensorData, msanShMCPefConfigurationSetInProgress=msanShMCPefConfigurationSetInProgress, msanShMCBoardsBoardBasicHealthy=msanShMCBoardsBoardBasicHealthy, msanShMCBoardVariablesBoardBasicProductManufacturer=msanShMCBoardVariablesBoardBasicProductManufacturer, msanShMCFanTraySlaveAddress=msanShMCFanTraySlaveAddress, msanShMCFruInfoDataWo=msanShMCFruInfoDataWo, msanShMCFanTrayFruinfoBoardSerialNumber=msanShMCFanTrayFruinfoBoardSerialNumber, msanShMCShelfManagerFruinfoBoardPartNumber=msanShMCShelfManagerFruinfoBoardPartNumber, msanShMCBoardVariablesBoardBasicSlaveAddress=msanShMCBoardVariablesBoardBasicSlaveAddress, msanShMCFanTrayFruinfoBoardPartNumber=msanShMCFanTrayFruinfoBoardPartNumber, msanShMCPefConfigurationControl=msanShMCPefConfigurationControl, msanShMCFruInfoData=msanShMCFruInfoData, msanShMCSensorLinearization=msanShMCSensorLinearization, msanShMCFruDeviceSFruDeviceId=msanShMCFruDeviceSFruDeviceId, msanShMCBoardVariablesBoardBasicBoardManufacturer=msanShMCBoardVariablesBoardBasicBoardManufacturer, msanShMCShelfManagerFruinfoProductName=msanShMCShelfManagerFruinfoProductName, msanShMCChassisProductVersionNumber=msanShMCChassisProductVersionNumber, msanShMCFruInfoTable=msanShMCFruInfoTable, msanShMCSensorType=msanShMCSensorType, msanShMCSelcontents=msanShMCSelcontents, msanShMCShelfManagerFruinfoBoardManufacturer=msanShMCShelfManagerFruinfoBoardManufacturer, msanShMCImpControllerMaximumFru=msanShMCImpControllerMaximumFru, msanShMCBoardVariablesBoardBasicBoardProductName=msanShMCBoardVariablesBoardBasicBoardProductName, msanShMCSensorVariablesEntry=msanShMCSensorVariablesEntry, msanShMCBoardVariablesEntry=msanShMCBoardVariablesEntry, msanShMCBoardVariablesBoardBasicSlotNumber=msanShMCBoardVariablesBoardBasicSlotNumber, msanShMCPowerSupplyFruinfoBoardAreaPresent=msanShMCPowerSupplyFruinfoBoardAreaPresent, msanShMCGlobal=msanShMCGlobal, msanShMCFanTrayFruinfoProductVersionNumber=msanShMCFanTrayFruinfoProductVersionNumber, msanShMCChassisId=msanShMCChassisId, msanShMCBoardsTable=msanShMCBoardsTable, msanShMC=msanShMC, msanShMCPefConfigurationAlertStringKey=msanShMCPefConfigurationAlertStringKey, msanShMCFruDeviceFruEntityId=msanShMCFruDeviceFruEntityId, msanShMCShelfManagerVariablesEntry=msanShMCShelfManagerVariablesEntry, msanShMCPefConfigurationEventFilterIndex=msanShMCPefConfigurationEventFilterIndex, msanShMCSensorM=msanShMCSensorM, msanShMCFanTrayFruinfoBoardManufactureTime=msanShMCFanTrayFruinfoBoardManufactureTime, msanShMCFruDeviceVariablesEntry=msanShMCFruDeviceVariablesEntry, msanShMCImpControllerIndex=msanShMCImpControllerIndex, msanShMCFruDeviceSdrVersion=msanShMCFruDeviceSdrVersion, msanShMCSensorEntityId=msanShMCSensorEntityId, msanShMCSensorIndex=msanShMCSensorIndex, msanShMCBoardsBoardBasicReset=msanShMCBoardsBoardBasicReset, msanShMCBoardVariablesBoardBasicBoardSerialNumber=msanShMCBoardVariablesBoardBasicBoardSerialNumber, msanShMCSensorAccuracy=msanShMCSensorAccuracy, msanShMCShelfManagerSlaveAddress=msanShMCShelfManagerSlaveAddress, msanShMCBoardVariablesBoardBasicPresent=msanShMCBoardVariablesBoardBasicPresent, msanShMCSensorEntityInstance=msanShMCSensorEntityInstance, msanShMCEventOriginSlaveAddress=msanShMCEventOriginSlaveAddress, msanShMCSensorUnit1=msanShMCSensorUnit1, msanShMCBoardVariablesBoardBasicBoardAreaPresent=msanShMCBoardVariablesBoardBasicBoardAreaPresent, msanShMCChassisVariablesTable=msanShMCChassisVariablesTable, PYSNMP_MODULE_ID=msanShMC, msanShMCShelfManagerFruinfoProductPartModelNumber=msanShMCShelfManagerFruinfoProductPartModelNumber, msanShMCSelEntry=msanShMCSelEntry, msanShMCFruDeviceDeviceType=msanShMCFruDeviceDeviceType, msanShMCImpControllerPowerStateNotification=msanShMCImpControllerPowerStateNotification, msanShMCShelfManagerPresent=msanShMCShelfManagerPresent, msanShMCBoardVariablesBoardBasicBoardPartNumber=msanShMCBoardVariablesBoardBasicBoardPartNumber, msanShMCBoardVariablesBoardBasicProductVersionNumber=msanShMCBoardVariablesBoardBasicProductVersionNumber, msanShMCShelfManagerFruinfoProductSerialNumber=msanShMCShelfManagerFruinfoProductSerialNumber, msanShMCImpControllerVariablesTable=msanShMCImpControllerVariablesTable, msanShMCChassisType=msanShMCChassisType, msanShMCEventIndex=msanShMCEventIndex, msanShMCPowerSupplyDegrade=msanShMCPowerSupplyDegrade, msanShMCImpControllerGlobalInitialisation=msanShMCImpControllerGlobalInitialisation, msanShMCPowerSupplyFruinfoBoardmanufactureTime=msanShMCPowerSupplyFruinfoBoardmanufactureTime, msanShMCBoardsBoardBasicFruDeviceId=msanShMCBoardsBoardBasicFruDeviceId, msanShMCChassisProductManufacturer=msanShMCChassisProductManufacturer, msanShMCSensorOwnerId=msanShMCSensorOwnerId, msanShMCPowerSupplyFruinfoProductName=msanShMCPowerSupplyFruinfoProductName, msanShMCEventType=msanShMCEventType, msanShMCPowerSupplyHealthy=msanShMCPowerSupplyHealthy, msanShMCPowerSupplyFruDeviceId=msanShMCPowerSupplyFruDeviceId, msanShMCPowerSupplyFruinfoBoardProductName=msanShMCPowerSupplyFruinfoBoardProductName, msanShMCPefConfigurationAlertString=msanShMCPefConfigurationAlertString, msanShMCSensorReading=msanShMCSensorReading, msanShMCBoardsBoardBasicSlaveAddress=msanShMCBoardsBoardBasicSlaveAddress, msanShMCFanTrayFruinfoBoardProductName=msanShMCFanTrayFruinfoBoardProductName, msanShMCShelfManagerSlotNumber=msanShMCShelfManagerSlotNumber, msanShMCSensorUpperNonRecoverableThr=msanShMCSensorUpperNonRecoverableThr, msanShMCPefConfigurationActionGlobalControl=msanShMCPefConfigurationActionGlobalControl, msanShMCFanTrayFruinfoProductPartModelNumber=msanShMCFanTrayFruinfoProductPartModelNumber, msanShMCBoardVariablesTable=msanShMCBoardVariablesTable, msanShMCFruDeviceIndex=msanShMCFruDeviceIndex, msanShMCSensorB=msanShMCSensorB, msanSHMCSelectivePowerOffOffDelay=msanSHMCSelectivePowerOffOffDelay, msanShMCShelfHealthy=msanShMCShelfHealthy, msanShMCShelfManagerFruinfoBoardSerialNumber=msanShMCShelfManagerFruinfoBoardSerialNumber, msanShMCFanTraySlotNumber=msanShMCFanTraySlotNumber, msanShMCBoardVariablesBoardBasicProductPartModelNumber=msanShMCBoardVariablesBoardBasicProductPartModelNumber, msanShMCSensorAccuracyExp=msanShMCSensorAccuracyExp, msanShMCPowerSupplyFail=msanShMCPowerSupplyFail, msanShMCSensorLowerCriticalThr=msanShMCSensorLowerCriticalThr, msanShMCFruDeviceDeviceTypeModifier=msanShMCFruDeviceDeviceTypeModifier, msanShMCSensorInitialisation=msanShMCSensorInitialisation, msanShMCShelfEntry=msanShMCShelfEntry, msanShMCPowerSupplyFruinfoBoardPartNumber=msanShMCPowerSupplyFruinfoBoardPartNumber, msanShMCFruInfoIndex=msanShMCFruInfoIndex, msanShMCChassisBoardPartNumber=msanShMCChassisBoardPartNumber, msanShMCFruDeviceIdString=msanShMCFruDeviceIdString, msanShMCSensorRecordType=msanShMCSensorRecordType, msanShMCSensorDeassertionEventMask=msanShMCSensorDeassertionEventMask, msanShMCPefConfigurationAlertStartupDelay=msanShMCPefConfigurationAlertStartupDelay, msanShMCFanTrayHealthLed=msanShMCFanTrayHealthLed, msanShMCSensorNormalMaximum=msanShMCSensorNormalMaximum, msanShMCFruInfoEntry=msanShMCFruInfoEntry, msanShMCFanTrayFruinfoBoardManufacturer=msanShMCFanTrayFruinfoBoardManufacturer, msanShMCSensorLowerNonRecoverableThr=msanShMCSensorLowerNonRecoverableThr, msanShMCBoardVariablesBoardBasicFruinfoProductAreaPresent=msanShMCBoardVariablesBoardBasicFruinfoProductAreaPresent, msanShMCPefConfiguration=msanShMCPefConfiguration, msanShMCChassisBoardSerialNumber=msanShMCChassisBoardSerialNumber, msanShMCShelfManagerHealthy=msanShMCShelfManagerHealthy, msanShMCPowerSupplyFruinfoProductSerialNumber=msanShMCPowerSupplyFruinfoProductSerialNumber, msanShMCFruDeviceFruEntityInstance=msanShMCFruDeviceFruEntityInstance, msanShMCSensorCapabilities=msanShMCSensorCapabilities, msanShMCBoardVariablesBoardBasicHealthy=msanShMCBoardVariablesBoardBasicHealthy, msanShMCSensorSdrVersion=msanShMCSensorSdrVersion, msanShMCPefConfigurationNumberOfAlertStrings=msanShMCPefConfigurationNumberOfAlertStrings, msanShMCPefConfigurationNumberOfEventFilters=msanShMCPefConfigurationNumberOfEventFilters, msanShMCFanTrayPresent=msanShMCFanTrayPresent, msanShMCShelfManagerVariablesTable=msanShMCShelfManagerVariablesTable, msanShMCBoardVariablesBoardBasicFruDeviceId=msanShMCBoardVariablesBoardBasicFruDeviceId, msanShMCPowerSupplyFruinfoProductVersionNumber=msanShMCPowerSupplyFruinfoProductVersionNumber, msanShMCFanTrayVariablesTable=msanShMCFanTrayVariablesTable, msanShMCEventVariablesTable=msanShMCEventVariablesTable, msanShMCFruDeviceActivated=msanShMCFruDeviceActivated, msanShMCSensorNumber=msanShMCSensorNumber, msanShMCSensorVariablesTable=msanShMCSensorVariablesTable, msanShMCShelfManagerFruinfoProductAreaPresent=msanShMCShelfManagerFruinfoProductAreaPresent, msanShMCChassisBoardManufacturer=msanShMCChassisBoardManufacturer, msanShMCChassisBoardmanufactureTime=msanShMCChassisBoardmanufactureTime, msanShMCBoardVariablesBoardBasicProductSerialNumber=msanShMCBoardVariablesBoardBasicProductSerialNumber, msanShMCChassisSerialNumber=msanShMCChassisSerialNumber, msanShMCPefConfigurationEventFilterTable=msanShMCPefConfigurationEventFilterTable, msanShMCSensorMaximumReading=msanShMCSensorMaximumReading, msanShMCSensorOwnerLun=msanShMCSensorOwnerLun, msanShMCPowerSupplyFruinfoProductPartModelNumber=msanShMCPowerSupplyFruinfoProductPartModelNumber, msanShMCEventAsserted=msanShMCEventAsserted, msanShMCSensorNormalMinimum=msanShMCSensorNormalMinimum, msanShMCImpControllerVariablesEntry=msanShMCImpControllerVariablesEntry, msanShMCSensorPositiveGoingThrHysteresis=msanShMCSensorPositiveGoingThrHysteresis, msanShMCPefConfigurationAlertStringTable=msanShMCPefConfigurationAlertStringTable, msanShMCFanTrayFruinfoProductName=msanShMCFanTrayFruinfoProductName, msanShMCFanTrayFruinfoProductSerialNumber=msanShMCFanTrayFruinfoProductSerialNumber, msanShMCPowerSupplyVariablesTable=msanShMCPowerSupplyVariablesTable, msanShMCPowerSupplyInhibit=msanShMCPowerSupplyInhibit, msanShMCFanTrayFruinfoProductManufacturer=msanShMCFanTrayFruinfoProductManufacturer, msanShMCPowerSupplyFruinfoBoardSerialNumber=msanShMCPowerSupplyFruinfoBoardSerialNumber, msanShMCPefConfigurationStartupDelay=msanShMCPefConfigurationStartupDelay, msanShMCImpControllerChannelNumber=msanShMCImpControllerChannelNumber, msanShMCBoardsIndex=msanShMCBoardsIndex, msanShMCChassisProductAreaPresent=msanShMCChassisProductAreaPresent, msanShMCBoardsEntry=msanShMCBoardsEntry, msanShMCSensorEvent=msanShMCSensorEvent, msanShMCSensorBexp=msanShMCSensorBexp, msanShMCBoardsBoardBasicPresent=msanShMCBoardsBoardBasicPresent, msanShMCPefConfigurationEventFilterData=msanShMCPefConfigurationEventFilterData, msanShMCSensorUnit3=msanShMCSensorUnit3, msanShMCPowerSupplyFruinfoProductAreaPresent=msanShMCPowerSupplyFruinfoProductAreaPresent, msanShMCSensorUpperNonCriticalThr=msanShMCSensorUpperNonCriticalThr)
