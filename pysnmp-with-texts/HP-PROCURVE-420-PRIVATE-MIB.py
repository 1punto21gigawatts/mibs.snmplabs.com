#
# PySNMP MIB module HP-PROCURVE-420-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-PROCURVE-420-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:36:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
mgmt, Counter64, Unsigned32, Counter32, ModuleIdentity, MibIdentifier, Bits, Gauge32, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, enterprises, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "mgmt", "Counter64", "Unsigned32", "Counter32", "ModuleIdentity", "MibIdentifier", "Bits", "Gauge32", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "enterprises", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class PhysAddress(OctetString):
    pass

class Guage32(Counter32):
    pass

class MacAddress(OctetString):
    pass

class DisplayString(OctetString):
    pass

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 1))
    namedValues = NamedValues(("false", 2), ("true", 1))

hP = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
enterprise = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3))
accessPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7))
proCurve = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11))
hPProCuve420 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37))
enterpriseApSys = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 1))
enterpriseApLineMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 2))
enterpriseApPortMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3))
enterpriseApFileTransferMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 4))
enterpriseApResetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 5))
enterpriseApIpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 6))
enterpriseAPdot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7))
swHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: swHardwareVer.setDescription('Hardware version of the main board.')
swBootRomVer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('mandatory')
if mibBuilder.loadTexts: swBootRomVer.setDescription('Boot ROM code version of the main board.')
swOpCodeVer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('mandatory')
if mibBuilder.loadTexts: swOpCodeVer.setDescription('Operation code version of the main board.')
swCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swCountryCode.setStatus('mandatory')
if mibBuilder.loadTexts: swCountryCode.setDescription('Country code of the AP. AL-ALBANIA, DZ-ALGERIA, AR-ARGENTINA, AM-ARMENIA, AU-AUSTRALIA, AT-AUSTRIA, AZ-AZERBAIJAN, BH-BAHRAIN, BY-BELARUS, BE-BELGIUM, BZ-BELIZE, BO-BOLVIA, BR-BRAZIL, BN-BRUNEI_DARUSSALAM, BG-BULGARIA, CA-CANADA, CL-CHILE, CN-CHINA, CO-COLOMBIA, CR-COSTA_RICA, HR-CROATIA, CY-CYPRUS, CZ-CZECH_REPUBLIC, DK-DENMARK, DO-DOMINICAN_REPUBLIC, EC-ECUADOR, EG-EGYPT, EE-ESTONIA, FI-FINLAND, FR-FRANCE, GE-GEORGIA, DE-GERMANY, GR-GREECE, GT-GUATEMALA, HK-HONG_KONG, HU-HUNGARY, IS-ICELAND, IN-INDIA, ID-INDONESIA, IR-IRAN, IE-IRELAND, IL-ISRAEL, IT-ITALY, JP-JAPAN, JO-JORDAN, KZ-KAZAKHSTAN, KP-NORTH_KOREA, KR-KOREA_REPUBLIC, KW-KUWAIT, LV-LATVIA, LB-LEBANON, LI-LIECHTENSTEIN, LT-LITHUANIA, LU-LUXEMBOURG, MO-MACAU, MK-MACEDONIA, MY-MALAYSIA, MX-MEXICO, MC-MONACO, MA-MOROCCO, NA-NORTH_AMERICA, NL-NETHERLANDS, NZ-NEW_ZEALAND, NO-NORWAY, OM-OMAN, PK-PAKISTAN, PA-PANAMA, PE-PERU, PH-PHILIPPINES, PL-POLAND, PT-PORTUGAL, PR-PUERTO_RICO, QA-QATAR, RO-ROMANIA, RU-RUSSIA, SA-SAUDI_ARABIA, SG-SINGAPORE, SK-SLOVAK_REPUBLIC, SI-SLOVENIA, ZA-SOUTH_AFRICA, ES-SPAIN, SE-SWEDEN, CH-SWITZERLAND, SY-SYRIA, TW-TAIWAN, TH-THAILAND, TR-TURKEY, UA-UKRAINE, AE-UNITED_ARAB_EMIRATES, GB-UNITED_KINGDOM, US-UNITED_STATES, UY-URUGUAY, VE-VENEZUELA, VN-VIETNAM')
lineTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 2, 1), )
if mibBuilder.loadTexts: lineTable.setStatus('mandatory')
if mibBuilder.loadTexts: lineTable.setDescription('Table of descriptive and status information about configuration of each RS-232 line in this system')
lineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 2, 1, 1), ).setIndexNames((0, "HP-PROCURVE-420-PRIVATE-MIB", "lineIndex"))
if mibBuilder.loadTexts: lineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lineEntry.setDescription('An entry in the table, containing information about configuration in one RS232 line of the Access Point.')
lineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lineIndex.setDescription('This is defined as RS-232 index.')
lineDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: lineDataBits.setDescription('This is defined as number of data bits for the RS232 interface.')
lineParity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("none", 99), ("odd", 1), ("even", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineParity.setStatus('mandatory')
if mibBuilder.loadTexts: lineParity.setDescription('This is defined as parity of the RS232 interface.')
lineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lineSpeed.setDescription('This is defined as the speed of the RS-232 interface.')
lineStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: lineStopBits.setDescription('This is defined as the number of stop bits for the RS-232 interface.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
if mibBuilder.loadTexts: portTable.setDescription("Table of descriptive and status information about configuration of each switch port (including expansion slot) in this system. This table also contains information about each trunk (similar to Cisco's EtherChannel).")
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1), ).setIndexNames((0, "HP-PROCURVE-420-PRIVATE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('mandatory')
if mibBuilder.loadTexts: portName.setDescription('Indicates the port name. This is same as ifAlias in the IF-MIB (RFC2863 or later).')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseMiniGBIC", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
if mibBuilder.loadTexts: portType.setDescription('Indicates the port type.')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("auto", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('mandatory')
if mibBuilder.loadTexts: portSpeedDpxCfg.setDescription('Set the port speed and duplex mode as follows: halfDuplex10(2) - 10Mbps and half duplex mode fullDuplex10(3) - 10Mbps and full duplex mode halfDuplex100(4) - 100Mbps and half duplex mode fullDuplex100(5) - 100Mbps and full duplex mode halfDuplex1000(6) - 1000Mbps and half duplex mode fullDuplex1000(7) - 1000Mbps and full duplex mode hundredBaseTX port can be set as halfDuplex10(2) fullDuplex10(3) halfDuplex100(4) fullDuplex100(5) hundredBaseFX port can be set as halfDuplex100(4) fullDuplex100(5) thousandBaseSX port can be set as halfDuplex1000(6) fullDuplex1000(7) The actual operating speed and duplex of the port is given by portSpeedDpxStatus.')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('mandatory')
if mibBuilder.loadTexts: portFlowCtrlCfg.setDescription('(1) Flow control mechanism is enabled. If the port type is hundredBaseTX or thousandBaseSX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, the port uses IEEE 802.3x flow control mechanism. If the port type is hundredBaseFX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, Flow control mechanism will not function. (2) Flow control mechanism is disabled. (3) Flow control mechanism is backPressure. when the port is in fullDuplex mode.This flow control mechanism will not function. (4) Flow control mechanism is IEEE 802.3x flow control. when the port is in halfDuplex mode.This flow control mechanism will not function. hundredBaseTX and thousandBaseSX port can be set as: enabled(1), disabled(2), backPressure(3), dot3xFlowControl(4). hundredBaseFX port can be set as: enabled(1), disabled(2), backPressure(3). The actual flow control mechanism is used given by portFlowCtrlStatus.')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("portCap10half", 99), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: portCapabilities.setDescription('Port capabilities.')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: portAutonegotiation.setDescription('Whether autonegotiation is enabled.')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portSpeedDpxStatus.setDescription('The operating speed and duplex mode of the switched port. If this index is a trunk, the speed is the speed of its individual members. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portFlowCtrlStatus.setDescription('(2) BackPressure flow control machanism is used. (3) IEEE 802.3 flow control machanism is used. (4) Flow control mechanism is disabled. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
transferStart = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("go", 1), ("nogo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferStart.setStatus('mandatory')
if mibBuilder.loadTexts: transferStart.setDescription('Set to go(1) to start a transfer.')
transferType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferType.setStatus('mandatory')
if mibBuilder.loadTexts: transferType.setDescription('Type of file to transfer.')
fileType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileType.setStatus('mandatory')
if mibBuilder.loadTexts: fileType.setDescription('Type of file to transfer.')
srcFile = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srcFile.setStatus('mandatory')
if mibBuilder.loadTexts: srcFile.setDescription('The source file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
destFile = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destFile.setStatus('mandatory')
if mibBuilder.loadTexts: destFile.setDescription('The destination file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
fileServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 4, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServer.setStatus('mandatory')
if mibBuilder.loadTexts: fileServer.setDescription("The IP address of the TFTP server for transfer when a download is next requested via this MIB. This value is set to `0.0.0.0' when no IP address has been specified.")
userName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('mandatory')
if mibBuilder.loadTexts: userName.setDescription('The username specified for an FTP Transfer.')
password = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('mandatory')
if mibBuilder.loadTexts: password.setDescription('The password specified for an FTP Transfer.')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('mandatory')
if mibBuilder.loadTexts: restartOpCodeFile.setDescription('Name of op-code file for start-up.')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('mandatory')
if mibBuilder.loadTexts: restartControl.setDescription('Setting this object to warmBoot(2) causes the device to restart the application software with current configuration parameters saved in non-volatile memory. Setting this object to coldBoot(3) causes the device to reinitialize configuration parameters in non-volatile memory to default values and restart the application software. When the device is running normally, this variable has a value of running(1).')
netConfigIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigIPAddress.setDescription('The IP address of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use DHCP to try to figure out what these values should be. If DHCP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
netConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigSubnetMask.setDescription('The subnet mask of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use DHCP to try to figure out what these values should be. If DHCP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: netDefaultGateway.setDescription('The IP Address of the default gateway. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('mandatory')
if mibBuilder.loadTexts: ipHttpState.setDescription('Whether HTTP is enabled.')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipHttpPort.setDescription('The port number for HTTP.')
hpdot11StationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 1), )
if mibBuilder.loadTexts: hpdot11StationConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11StationConfigTable.setDescription('Table of descriptive and status information about configuration of each radio of the AP.')
hpdot11StationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 1, 1), ).setIndexNames((0, "HP-PROCURVE-420-PRIVATE-MIB", "hpdot11portIndex"))
if mibBuilder.loadTexts: hpdot11StationConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11StationConfigEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
hpdot11portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpdot11portIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11portIndex.setDescription('Radio index of the AP.')
hpdot11DesiredSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11DesiredSSID.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11DesiredSSID.setDescription('This attribute reflects the Service Set ID used in the DesiredSSID parameter of the most recent MLME_Scan.request. This value may be modified by an external management entity and used by the local SME to make decisions about the Scanning process.')
hpdot11BeaconPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11BeaconPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11BeaconPeriod.setDescription('This attribute shall specify the number of ms that a station shall use for scheduling Beacon transmissions. This value is transmitted in Beacon and Probe Response frames.')
hpdot11DTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11DTIMPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11DTIMPeriod.setDescription('This attribute shall specify the number of beacon intervals that shall elapse between transmission of Beacons frames containing a TIM element whose DTIM Count field is 0. This value is transmitted in the DTIM Period field of Beacon frames.')
hpdot11OperationalRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 108))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11OperationalRateSet.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11OperationalRateSet.setDescription('This attribute shall specify the set of data rates at which the station may transmit data. Each octet contains a value representing a rate. Each rate shall be within the range from 2 to 127, corresponding to data rates in increments of 500 kb/s from 1 Mbit/s to 63.5 Mbit/s, and shall be supported (as indicated in the supported rates table) for receiving data. This value is reported in transmitted Beacon, Probe Request, Probe Response, Association Request, Association Response, Reassociation Request, and Reassociation Response frames, and is used to determine whether a BSS with which the station desires to synchronize is suitable. It is also used when starting a BSS, as specified in 10.3.')
hpdot11AuthenticationAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11AuthenticationAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11AuthenticationAlgorithm.setDescription('This attribute shall be a set of all the authentication algorithms supported by the STAs. The following are the default values and the associated algorithm. Value = 1: Open System Value = 2: Shared Key')
hpdot11PrivacyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 2), )
if mibBuilder.loadTexts: hpdot11PrivacyTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11PrivacyTable.setDescription('Table of descriptive and status information about configuration of each radio of the AP.')
hpdot11PrivacyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 2, 1), ).setIndexNames((0, "HP-PROCURVE-420-PRIVATE-MIB", "hpdot11PrivacyportIndex"))
if mibBuilder.loadTexts: hpdot11PrivacyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11PrivacyEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
hpdot11PrivacyportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpdot11PrivacyportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11PrivacyportIndex.setDescription('Radio index of the AP.')
hpdot11PrivacyInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11PrivacyInvoked.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11PrivacyInvoked.setDescription('When this attribute is true, it shall indicate that the IEEE 802.11 WEP mechanism is used for transmitting frames of type Data. The default value of this attribute shall be false.')
hpdot11WEPDefaultKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11WEPDefaultKeyID.setReference('ISO/IEC 8802-11:1999, 8.3.2')
if mibBuilder.loadTexts: hpdot11WEPDefaultKeyID.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11WEPDefaultKeyID.setDescription('This attribute shall indicate the use of the first, second, or third element of the WEPDefaultKeys array when set to values of zero, one, or two(the fourth are reserved for dynamic key). The default value of this attribute shall be 0.')
hpdot11WEPKeyMappingLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11WEPKeyMappingLength.setReference('ISO/IEC 8802-11:1999, 8.3.2')
if mibBuilder.loadTexts: hpdot11WEPKeyMappingLength.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11WEPKeyMappingLength.setDescription('The maximum number of tuples that dot11WEPKeyMappings can hold.')
hpdot11mac = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 3))
hpdot11OperationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 3, 1), )
if mibBuilder.loadTexts: hpdot11OperationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11OperationTable.setDescription('Table of descriptive and status information about configuration of each radio of the AP.')
hpdot11OperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 3, 1, 1), ).setIndexNames((0, "HP-PROCURVE-420-PRIVATE-MIB", "hpdot11OperationIndex"))
if mibBuilder.loadTexts: hpdot11OperationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11OperationEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
hpdot11OperationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpdot11OperationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11OperationIndex.setDescription('Radio index of the AP.')
hpdot11RTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11RTSThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11RTSThreshold.setDescription('This attribute shall indicate the number of octets in an MPDU, below which an RTS/CTS handshake shall not be performed. An RTS/CTS handshake shall be performed at the beginning of any frame exchange sequence where the MPDU is of type Data or Management, the MPDU has an individual address in the Address1 field, and the length of the MPDU is greater than this threshold. (For additional details, refer to Table 21 in 9.7.) Setting this attribute to be larger than the maximum MSDU size shall have the effect of turning off the RTS/CTS handshake for frames of Data or Management type transmitted by this STA. Setting this attribute to zero shall have the effect of turning on the RTS/CTS handshake for all frames of Data or Management type transmitted by this STA. The default value of this attribute shall be 2347.')
hpdot11FragmentationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11FragmentationThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11FragmentationThreshold.setDescription('This attribute shall specify the mandatory maximum size, in octets, of the MPDU that may be delivered to the PHY. An MSDU shall be broken into fragments if its size exceeds the value of this attribute after adding MAC headers and trailers. An MSDU or MMPDU shall be fragmented when the resulting frame has an individual address in the Address1 field, and the length of the frame is larger than this threshold. The default value for this attribute shall be the lesser of 2346 or the aMPDUMaxLength of the attached PHY and shall never exceed the lesser of 2346 or the aMPDUMaxLength of the attached PHY. The value of this attribute shall never be less than 256.')
hpdot11phy = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 4))
hpdot11PhyOperationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 4, 1), )
if mibBuilder.loadTexts: hpdot11PhyOperationTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11PhyOperationTable.setDescription('Table of descriptive and status information about configuration of each radio of the AP.')
hpdot11PhyOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 4, 1, 1), ).setIndexNames((0, "HP-PROCURVE-420-PRIVATE-MIB", "hpdot11Index"))
if mibBuilder.loadTexts: hpdot11PhyOperationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11PhyOperationEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
hpdot11Index = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpdot11Index.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11Index.setDescription('Radio index of the AP.')
hpdot11CurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11CurrentChannel.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11CurrentChannel.setDescription('The current operating frequency channel of the network')
hpdot11TurboModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("none", 99), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpdot11TurboModeEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11TurboModeEnabled.setDescription('This attribute, when true, shall indicate that the propietory turbo mode option is enabled. The default value of this attribute shall be false.')
hpdot11PreambleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11PreambleLength.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11PreambleLength.setDescription('This attribute determines whether or not a short or a long preamble is used to delineate 802.11 frames.')
hpdot11AuthenticationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 5))
hpdot118021xSupport = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot118021xSupport.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot118021xSupport.setDescription('This attribute, when true(1), indicates that the Enterprise Access Point supports the 802.1x authentication algorithm.')
hpdot118021xRequired = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 5, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot118021xRequired.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot118021xRequired.setDescription('This attribute, when true(1), indicates that the Enterprise Access Point requires successful 802.1x authentication for any clients accessing the network.')
hpdot11AuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 6), )
if mibBuilder.loadTexts: hpdot11AuthenticationServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11AuthenticationServerTable.setDescription('Table of descriptive and status information about configuration of each authentication server.')
hpdot11AuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 6, 1), ).setIndexNames((0, "HP-PROCURVE-420-PRIVATE-MIB", "hpdot11serverIndex"))
if mibBuilder.loadTexts: hpdot11AuthenticationServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11AuthenticationServerEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
hpdot11serverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: hpdot11serverIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11serverIndex.setDescription('Radio index of the AP.')
hpdot11AuthenticationServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11AuthenticationServer.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11AuthenticationServer.setDescription('This values indicates the IP address of the authentication server.')
hpdot11AuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11AuthenticationPort.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11AuthenticationPort.setDescription('This values indicates the UDP Port used by the primary authentication server.')
hpdot11AuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11AuthenticationKey.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11AuthenticationKey.setDescription('This values indicates the shared key used by the authentication server.')
hpdot11AuthenticationRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11AuthenticationRetransmit.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11AuthenticationRetransmit.setDescription('This values indicates the retransmit timer length used by the authentication server.')
hpdot11AuthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11AuthenticationTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11AuthenticationTimeout.setDescription('This values indicates the Timeout value(sec) used by the authentication server.')
hpdot11FilterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 7), )
if mibBuilder.loadTexts: hpdot11FilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11FilterTable.setDescription('Table of status information about each configured MAC Address Filtering Entry.')
hpdot11FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 7, 1), ).setIndexNames((0, "HP-PROCURVE-420-PRIVATE-MIB", "hpdot11FilterIndex"))
if mibBuilder.loadTexts: hpdot11FilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11FilterEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
hpdot11FilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: hpdot11FilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11FilterIndex.setDescription('Filter index.')
hpdot11FilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 7, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11FilterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11FilterAddress.setDescription('This values indicates the MAC address of the filter entry.')
hpdot11FilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 31))).clone(namedValues=NamedValues(("allowed", 30), ("denied", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11FilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11FilterStatus.setDescription('This values indicates the Status of the filter entry. Ifallowed, the client is allowed access to the network. If disallowed, the no frames will be forwarded to the network from the client.')
hpdot11smt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 8))
hpdot11WEPDefaultKeys11g = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 8, 1))
hpdot11WEPDefaultKeys11gTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 8, 1, 1), )
if mibBuilder.loadTexts: hpdot11WEPDefaultKeys11gTable.setReference('IEEE Std 802.11-1997, 8.3.2')
if mibBuilder.loadTexts: hpdot11WEPDefaultKeys11gTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11WEPDefaultKeys11gTable.setDescription('Conceptual table for WEP default keys. This table shall contain the four WEP default secret key values corresponding to the four possible KeyID values. The WEP default secret keys are logically WRITE-ONLY. Attempts to read the entries in this table shall return unsuccessful status and values of null or zero. The default value of each WEP default key shall be null.')
hpdot11WEPDefaultKeys11gEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 8, 1, 1, 1), ).setIndexNames((0, "HP-PROCURVE-420-PRIVATE-MIB", "dot11WEPDefaultKey11gLength"))
if mibBuilder.loadTexts: hpdot11WEPDefaultKeys11gEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11WEPDefaultKeys11gEntry.setDescription('An Entry (conceptual row) in the WEP Default Keys Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
hpdot11WEPDefaultKey11gLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 152))).clone(namedValues=NamedValues(("sixtyFour", 64), ("oneHundredTwentyEight", 128), ("oneHundredFiftyTwo", 152))).clone('oneHundredTwentyEight')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11WEPDefaultKey11gLength.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11WEPDefaultKey11gLength.setDescription('A 40(64)-bits [5 octets WEP], 104(128)-bits [13 octets] or 128(152)-bits [16 octets]')
hpdot11WEPDefaultKey11gIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hpdot11WEPDefaultKey11gIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11WEPDefaultKey11gIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the WEP Default Keys Table. The value of this variable is equal to the WEPDefaultKeyID + 1')
hpdot11WEPDefaultKey11gValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 37, 7, 8, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpdot11WEPDefaultKey11gValue.setStatus('mandatory')
if mibBuilder.loadTexts: hpdot11WEPDefaultKey11gValue.setDescription('A 40(64)-bits [5 octets WEP] or 104(128)-bits [13 octets] default secret key value.')
mibBuilder.exportSymbols("HP-PROCURVE-420-PRIVATE-MIB", hpdot11Index=hpdot11Index, ipHttpState=ipHttpState, transferStart=transferStart, portCapabilities=portCapabilities, password=password, hpdot11WEPKeyMappingLength=hpdot11WEPKeyMappingLength, lineDataBits=lineDataBits, hpdot11WEPDefaultKeys11g=hpdot11WEPDefaultKeys11g, hpdot11FilterStatus=hpdot11FilterStatus, lineTable=lineTable, hpdot11smt=hpdot11smt, swOpCodeVer=swOpCodeVer, fileType=fileType, enterpriseApPortMgnt=enterpriseApPortMgnt, hpdot11WEPDefaultKeyID=hpdot11WEPDefaultKeyID, proCurve=proCurve, lineIndex=lineIndex, enterprise=enterprise, enterpriseAPdot11=enterpriseAPdot11, hpdot118021xRequired=hpdot118021xRequired, restartControl=restartControl, hpdot11serverIndex=hpdot11serverIndex, hpdot11WEPDefaultKey11gIndex=hpdot11WEPDefaultKey11gIndex, enterpriseApLineMgnt=enterpriseApLineMgnt, hpdot11AuthenticationServerEntry=hpdot11AuthenticationServerEntry, hPProCuve420=hPProCuve420, netDefaultGateway=netDefaultGateway, PhysAddress=PhysAddress, hpdot11OperationTable=hpdot11OperationTable, hpdot11RTSThreshold=hpdot11RTSThreshold, srcFile=srcFile, Guage32=Guage32, transferType=transferType, fileServer=fileServer, hpdot11DesiredSSID=hpdot11DesiredSSID, portAutonegotiation=portAutonegotiation, hpdot11AuthenticationServerTable=hpdot11AuthenticationServerTable, ipHttpPort=ipHttpPort, hpdot11phy=hpdot11phy, netConfigSubnetMask=netConfigSubnetMask, hpdot11PhyOperationEntry=hpdot11PhyOperationEntry, hpdot11StationConfigTable=hpdot11StationConfigTable, portFlowCtrlStatus=portFlowCtrlStatus, userName=userName, hpdot11BeaconPeriod=hpdot11BeaconPeriod, lineStopBits=lineStopBits, MacAddress=MacAddress, hpdot11FilterIndex=hpdot11FilterIndex, hpdot11AuthenticationKey=hpdot11AuthenticationKey, hpdot11AuthenticationServer=hpdot11AuthenticationServer, hpdot11WEPDefaultKey11gLength=hpdot11WEPDefaultKey11gLength, lineEntry=lineEntry, DisplayString=DisplayString, portType=portType, hpdot11PrivacyportIndex=hpdot11PrivacyportIndex, enterpriseApResetMgt=enterpriseApResetMgt, hpdot11OperationEntry=hpdot11OperationEntry, accessPoint=accessPoint, portEntry=portEntry, portIndex=portIndex, portName=portName, wireless=wireless, portFlowCtrlCfg=portFlowCtrlCfg, portSpeedDpxStatus=portSpeedDpxStatus, hpdot11PrivacyTable=hpdot11PrivacyTable, hpdot11WEPDefaultKeys11gTable=hpdot11WEPDefaultKeys11gTable, enterpriseApFileTransferMgt=enterpriseApFileTransferMgt, hpdot11AuthenticationRetransmit=hpdot11AuthenticationRetransmit, enterpriseApSys=enterpriseApSys, hpdot11FilterTable=hpdot11FilterTable, hpdot11FragmentationThreshold=hpdot11FragmentationThreshold, netConfigIPAddress=netConfigIPAddress, restartOpCodeFile=restartOpCodeFile, hpdot11AuthenticationPort=hpdot11AuthenticationPort, enterpriseApIpMgt=enterpriseApIpMgt, hpdot11AuthenticationAlgorithm=hpdot11AuthenticationAlgorithm, hpdot11PrivacyEntry=hpdot11PrivacyEntry, hpdot11FilterAddress=hpdot11FilterAddress, hpdot11OperationalRateSet=hpdot11OperationalRateSet, hpdot11OperationIndex=hpdot11OperationIndex, hpdot11WEPDefaultKeys11gEntry=hpdot11WEPDefaultKeys11gEntry, lineParity=lineParity, TruthValue=TruthValue, portTable=portTable, hpdot11PreambleLength=hpdot11PreambleLength, swBootRomVer=swBootRomVer, hpdot11FilterEntry=hpdot11FilterEntry, hpdot11portIndex=hpdot11portIndex, hP=hP, hpdot11StationConfigEntry=hpdot11StationConfigEntry, hpdot11DTIMPeriod=hpdot11DTIMPeriod, hpdot11AuthenticationEntry=hpdot11AuthenticationEntry, hpdot11PrivacyInvoked=hpdot11PrivacyInvoked, swCountryCode=swCountryCode, hpdot11WEPDefaultKey11gValue=hpdot11WEPDefaultKey11gValue, hpdot118021xSupport=hpdot118021xSupport, hpdot11TurboModeEnabled=hpdot11TurboModeEnabled, lineSpeed=lineSpeed, swHardwareVer=swHardwareVer, hpdot11mac=hpdot11mac, hpdot11PhyOperationTable=hpdot11PhyOperationTable, portSpeedDpxCfg=portSpeedDpxCfg, hpdot11CurrentChannel=hpdot11CurrentChannel, hpdot11AuthenticationTimeout=hpdot11AuthenticationTimeout, destFile=destFile)
