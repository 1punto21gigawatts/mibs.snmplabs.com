#
# PySNMP MIB module SWAPCOM-SCC (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWAPCOM-SCC
# Produced by pysmi-0.3.4 at Wed May  1 15:12:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, NotificationType, MibIdentifier, iso, ModuleIdentity, enterprises, Unsigned32, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "NotificationType", "MibIdentifier", "iso", "ModuleIdentity", "enterprises", "Unsigned32", "Bits", "TimeTicks")
MacAddress, TimeInterval, TextualConvention, DateAndTime, DisplayString, TruthValue, StorageType, TestAndIncr, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TimeInterval", "TextualConvention", "DateAndTime", "DisplayString", "TruthValue", "StorageType", "TestAndIncr", "RowStatus")
swapcom = ModuleIdentity((1, 3, 6, 1, 4, 1, 11308))
swapcom.setRevisions(('1970-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: swapcom.setRevisionsDescriptions(('Revision Description',))
if mibBuilder.loadTexts: swapcom.setLastUpdated('2007381648Z')
if mibBuilder.loadTexts: swapcom.setOrganization('Organization name')
if mibBuilder.loadTexts: swapcom.setContactInfo('Contact information')
if mibBuilder.loadTexts: swapcom.setDescription('Description')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
scc = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3))
platform = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3, 1))
platformPlatformId = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformPlatformId.setStatus('current')
if mibBuilder.loadTexts: platformPlatformId.setDescription('Identifier of the local platform')
platformPlatformStatus = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformPlatformStatus.setStatus('current')
if mibBuilder.loadTexts: platformPlatformStatus.setDescription('Status of local platform (0=Initializing / 1=Platform initialized / 2=Domains initialized / 3=Platform started and ready')
versionTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 2), )
if mibBuilder.loadTexts: versionTable.setStatus('current')
if mibBuilder.loadTexts: versionTable.setDescription('Components version')
versionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1), ).setIndexNames((0, "SWAPCOM-SCC", "versionProductName"))
if mibBuilder.loadTexts: versionEntry.setStatus('current')
if mibBuilder.loadTexts: versionEntry.setDescription('The entry for versionTable')
versionProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionProductName.setStatus('current')
if mibBuilder.loadTexts: versionProductName.setDescription('Name of the component')
versionProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionProductVersion.setStatus('current')
if mibBuilder.loadTexts: versionProductVersion.setDescription('Version of the component, follows the standard SWAPCOM versioning')
versionBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionBuildNumber.setStatus('current')
if mibBuilder.loadTexts: versionBuildNumber.setDescription('Component build number')
versionBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionBuildDate.setStatus('current')
if mibBuilder.loadTexts: versionBuildDate.setDescription('Component build date')
transactionManager = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3, 3))
transactionManagerLongTransactionThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerLongTransactionThreshold.setStatus('current')
if mibBuilder.loadTexts: transactionManagerLongTransactionThreshold.setDescription('Threshold duration for long transaction detection')
transactionManagerActiveTransactionCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerActiveTransactionCurrentCount.setStatus('current')
if mibBuilder.loadTexts: transactionManagerActiveTransactionCurrentCount.setDescription('Number of current active transaction')
transactionManagerActiveTransactionMinCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerActiveTransactionMinCount.setStatus('current')
if mibBuilder.loadTexts: transactionManagerActiveTransactionMinCount.setDescription('Minimum number of active transaction')
transactionManagerActiveTransactionMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerActiveTransactionMaxCount.setStatus('current')
if mibBuilder.loadTexts: transactionManagerActiveTransactionMaxCount.setDescription('Maximum number of active transaction')
transactionManagerCommittedTransactionCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerCommittedTransactionCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: transactionManagerCommittedTransactionCumulativeCount.setDescription('Number of transaction committed')
transactionManagerRolledbackTransactionCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerRolledbackTransactionCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: transactionManagerRolledbackTransactionCumulativeCount.setDescription('Number of transaction rollbacked')
transactionManagerTransactionCumulativeTime = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerTransactionCumulativeTime.setStatus('current')
if mibBuilder.loadTexts: transactionManagerTransactionCumulativeTime.setDescription('Cumulative transaction time')
transactionManagerTransactionMinTime = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerTransactionMinTime.setStatus('current')
if mibBuilder.loadTexts: transactionManagerTransactionMinTime.setDescription('Minimum transaction duration time')
transactionManagerTransactionMaxTime = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerTransactionMaxTime.setStatus('current')
if mibBuilder.loadTexts: transactionManagerTransactionMaxTime.setDescription('Maximum transaction duration time')
transactionManagerTransactionManagerLastError = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerTransactionManagerLastError.setStatus('current')
if mibBuilder.loadTexts: transactionManagerTransactionManagerLastError.setDescription('Last error message that occured in the transaction manager')
lockManager = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3, 4))
lockManagerLockedItemCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockedItemCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: lockManagerLockedItemCumulativeCount.setDescription('Number of lock acquired')
lockManagerLockedItemCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockedItemCurrentCount.setStatus('current')
if mibBuilder.loadTexts: lockManagerLockedItemCurrentCount.setDescription('Number of currenty locked objects')
lockManagerLockedItemMinCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockedItemMinCount.setStatus('current')
if mibBuilder.loadTexts: lockManagerLockedItemMinCount.setDescription('Minimum number of locked objects')
lockManagerLockedItemMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockedItemMaxCount.setStatus('current')
if mibBuilder.loadTexts: lockManagerLockedItemMaxCount.setDescription('Maximum number of locked objects')
lockManagerLockRejectedOnDeadlockCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockRejectedOnDeadlockCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: lockManagerLockRejectedOnDeadlockCumulativeCount.setDescription('Number of lock rejected on deadlock')
lockManagerLockRejectedOnTimeoutCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockRejectedOnTimeoutCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: lockManagerLockRejectedOnTimeoutCumulativeCount.setDescription('Number of lock rejected on timeout')
lockManagerBlockedTransactionCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerBlockedTransactionCurrentCount.setStatus('current')
if mibBuilder.loadTexts: lockManagerBlockedTransactionCurrentCount.setDescription('Number of currently blocked transaction in lockmanager')
lockManagerBlockedTransactionMinCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerBlockedTransactionMinCount.setStatus('current')
if mibBuilder.loadTexts: lockManagerBlockedTransactionMinCount.setDescription('Minimum number of blocked transaction in lockmanager')
lockManagerBlockedTransactionMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerBlockedTransactionMaxCount.setStatus('current')
if mibBuilder.loadTexts: lockManagerBlockedTransactionMaxCount.setDescription('Maximum number of blocked transaction in lockmanager')
schedulerTaskTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 5), )
if mibBuilder.loadTexts: schedulerTaskTable.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskTable.setDescription('Status of tasks registered in the scheduler')
schedulerTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1), ).setIndexNames((0, "SWAPCOM-SCC", "schedulerTaskName"))
if mibBuilder.loadTexts: schedulerTaskEntry.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskEntry.setDescription('The entry for schedulerTaskTable')
schedulerTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskName.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskName.setDescription('Name of the task')
schedulerTaskRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskRunning.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskRunning.setDescription('Indicate if the task is currenlty being executed')
schedulerTaskExecutionCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskExecutionCumulativeCount.setDescription('Number of executions succesfully done')
schedulerTaskExecutionCumulativeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionCumulativeTime.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskExecutionCumulativeTime.setDescription('Cumulative processing time (success and failure)')
schedulerTaskExecutionMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionMinTime.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskExecutionMinTime.setDescription('Minimum processing time of the task')
schedulerTaskExecutionMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionMaxTime.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskExecutionMaxTime.setDescription('Maximum processing time of the task')
schedulerTaskExecutionRetryCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionRetryCurrentCount.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskExecutionRetryCurrentCount.setDescription('Number of execution failure')
schedulerTaskExecutionLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionLastError.setStatus('current')
if mibBuilder.loadTexts: schedulerTaskExecutionLastError.setDescription('Message of the last execution failure')
alarmProbeTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 12), )
if mibBuilder.loadTexts: alarmProbeTable.setStatus('current')
if mibBuilder.loadTexts: alarmProbeTable.setDescription('Alarm probes status of the platform')
alarmProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1), ).setIndexNames((0, "SWAPCOM-SCC", "alarmProbeAlertType"), (0, "SWAPCOM-SCC", "alarmProbeAlertSource"))
if mibBuilder.loadTexts: alarmProbeEntry.setStatus('current')
if mibBuilder.loadTexts: alarmProbeEntry.setDescription('The entry for alarmProbeTable')
alarmProbeAlertType = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeAlertType.setStatus('current')
if mibBuilder.loadTexts: alarmProbeAlertType.setDescription('Type of the probe alarm')
alarmProbeAlertSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeAlertSource.setStatus('current')
if mibBuilder.loadTexts: alarmProbeAlertSource.setDescription('Source of the probe alarm')
alarmProbeSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmProbeSeverity.setDescription('Current severity of the probe')
alarmProbeLastSeverityChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeLastSeverityChange.setStatus('current')
if mibBuilder.loadTexts: alarmProbeLastSeverityChange.setDescription('Date of the last severity value change')
remotePlatformTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 21), )
if mibBuilder.loadTexts: remotePlatformTable.setStatus('current')
if mibBuilder.loadTexts: remotePlatformTable.setDescription('Remote platform connected to this one')
remotePlatformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 21, 1), ).setIndexNames((0, "SWAPCOM-SCC", "remotePlatformPlatformId"))
if mibBuilder.loadTexts: remotePlatformEntry.setStatus('current')
if mibBuilder.loadTexts: remotePlatformEntry.setDescription('The entry for remotePlatformTable')
remotePlatformPlatformId = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 21, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformId.setStatus('current')
if mibBuilder.loadTexts: remotePlatformPlatformId.setDescription('Identifier of the remote platform')
remotePlatformPlatformProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 21, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformProtocol.setStatus('current')
if mibBuilder.loadTexts: remotePlatformPlatformProtocol.setDescription('Protocol used to communicate with the remote platform')
remotePlatformRemotePlatformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformRemotePlatformStatus.setStatus('current')
if mibBuilder.loadTexts: remotePlatformRemotePlatformStatus.setDescription('Status of the remote platform connection (-2=unknown / -1=down / 3=up)')
asynchronousEventQueueTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 22), )
if mibBuilder.loadTexts: asynchronousEventQueueTable.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueTable.setDescription('Asynchronous event queues status')
asynchronousEventQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1), ).setIndexNames((0, "SWAPCOM-SCC", "asynchronousEventQueuePlatformId"))
if mibBuilder.loadTexts: asynchronousEventQueueEntry.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueEntry.setDescription('The entry for asynchronousEventQueueTable')
asynchronousEventQueuePlatformId = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueuePlatformId.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueuePlatformId.setDescription('Identifier of the platform events queue')
asynchronousEventQueueInsertedEventCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueInsertedEventCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueInsertedEventCumulativeCount.setDescription('Number of generated asynchronous events')
asynchronousEventQueueWaitingEventCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueWaitingEventCurrentCount.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueWaitingEventCurrentCount.setDescription('Number of events that are pending in the send queue')
asynchronousEventQueueWaitingEventMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueWaitingEventMinCount.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueWaitingEventMinCount.setDescription('Minimum number of events pending in the send queue')
asynchronousEventQueueWaitingEventMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueWaitingEventMaxCount.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueWaitingEventMaxCount.setDescription('Maximum number of events pending in the send queue')
asynchronousEventQueueProcessedEventCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueProcessedEventCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueProcessedEventCumulativeCount.setDescription('Number of successfully sent asynchronous events')
asynchronousEventQueueEventProcessingCumulativeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueEventProcessingCumulativeTime.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueEventProcessingCumulativeTime.setDescription('Cumulated time of event processing')
asynchronousEventQueueEventProcessingMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueEventProcessingMinTime.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueEventProcessingMinTime.setDescription('Minimum event processing time')
asynchronousEventQueueEventProcessingMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueEventProcessingMaxTime.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueEventProcessingMaxTime.setDescription('Maximum event processing time')
asynchronousEventQueueFailedEventCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueFailedEventCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueFailedEventCumulativeCount.setDescription("Number of asynchronous events in the 'failed' queue")
asynchronousEventQueueFailedEventLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueFailedEventLastError.setStatus('current')
if mibBuilder.loadTexts: asynchronousEventQueueFailedEventLastError.setDescription('Last error message of events process failure')
slsConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3, 23))
slsConnectionConnected = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 23, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slsConnectionConnected.setStatus('current')
if mibBuilder.loadTexts: slsConnectionConnected.setDescription('Indicate if the platform is connected to the SLS')
slsConnectionLicenseCheckSuccessCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 23, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slsConnectionLicenseCheckSuccessCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: slsConnectionLicenseCheckSuccessCumulativeCount.setDescription('Number of successfull license check')
slsConnectionLicenseCheckFailedCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 23, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slsConnectionLicenseCheckFailedCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: slsConnectionLicenseCheckFailedCumulativeCount.setDescription('Number of failed license check')
slsConnectionLicenseCheckLastError = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 23, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slsConnectionLicenseCheckLastError.setStatus('current')
if mibBuilder.loadTexts: slsConnectionLicenseCheckLastError.setDescription('Last error message that occured in the SLS connection')
sqlPoolXATable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 24), )
if mibBuilder.loadTexts: sqlPoolXATable.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXATable.setDescription('SQLPool status and properties')
sqlPoolXAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1), ).setIndexNames((0, "SWAPCOM-SCC", "sqlPoolXAName"))
if mibBuilder.loadTexts: sqlPoolXAEntry.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXAEntry.setDescription('The entry for sqlPoolXATable')
sqlPoolXAName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAName.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXAName.setDescription('Name of the connection pool')
sqlPoolXASqlPlatformName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXASqlPlatformName.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXASqlPlatformName.setDescription('Detected database type')
sqlPoolXADatabaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXADatabaseName.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXADatabaseName.setDescription('Raw database name')
sqlPoolXADriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXADriverName.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXADriverName.setDescription('Name of the JDBC driver')
sqlPoolXADriverClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXADriverClassName.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXADriverClassName.setDescription('Name of the JDBC driver class')
sqlPoolXAMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAMaximumSize.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXAMaximumSize.setDescription('Maximum size of connection pool')
sqlPoolXAMaximumIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAMaximumIdleTime.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXAMaximumIdleTime.setDescription('Maximum life duration of a connection in the pool')
sqlPoolXAMaximumWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAMaximumWaitTime.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXAMaximumWaitTime.setDescription('Maximum waiting time for getting a connection when the pool is exhausted')
sqlPoolXACheckIsClosedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckIsClosedInterval.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACheckIsClosedInterval.setDescription('Minimum time between two connection checking')
sqlPoolXACreateConnectionSuccessCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACreateConnectionSuccessCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACreateConnectionSuccessCumulativeCount.setDescription('Number of connections succesfully created')
sqlPoolXACreateConnectionFailureCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACreateConnectionFailureCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACreateConnectionFailureCumulativeCount.setDescription('Number of connection creation failure')
sqlPoolXACreateConnectionLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACreateConnectionLastError.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACreateConnectionLastError.setDescription('Last exception message during checkout failure')
sqlPoolXAConnectionCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAConnectionCurrentCount.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXAConnectionCurrentCount.setDescription('Current size of the connection pool')
sqlPoolXAConnectionMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAConnectionMinCount.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXAConnectionMinCount.setDescription('Minimum size reached by the connection pool')
sqlPoolXAConnectionMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAConnectionMaxCount.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXAConnectionMaxCount.setDescription('Maximum size reached by the connection pool')
sqlPoolXACheckedOutConnectionCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionCurrentCount.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionCurrentCount.setDescription('Current number of connection that are checked out from the pool')
sqlPoolXACheckedOutConnectionMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMinCount.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMinCount.setDescription('Minimum number of simultaneous checked out connections reached by the pool')
sqlPoolXACheckedOutConnectionMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMaxCount.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMaxCount.setDescription('Maximum number of simultaneous checked out connections reached by the pool')
sqlPoolXACheckedOutConnectionCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionCumulativeCount.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionCumulativeCount.setDescription('Number of checkout performed from pool')
sqlPoolXACheckedOutConnectionCumulativeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionCumulativeTime.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionCumulativeTime.setDescription('Cumulation of time that the connections are checked out from the pool')
sqlPoolXACheckedOutConnectionMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMinTime.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMinTime.setDescription('Minimum time that a connection has been checked out from the pool')
sqlPoolXACheckedOutConnectionMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMaxTime.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMaxTime.setDescription('Maximum time that a connection has been checked out from the pool')
sqlPoolXACheckedOutConnectionAverageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionAverageTime.setStatus('current')
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionAverageTime.setDescription('Connection checkedout average time (equals to CheckedOutConnectionCumulativeTime divided by CheckedOutConnectionCumulativeCount')
mibBuilder.exportSymbols("SWAPCOM-SCC", lockManagerLockRejectedOnTimeoutCumulativeCount=lockManagerLockRejectedOnTimeoutCumulativeCount, versionProductName=versionProductName, transactionManagerTransactionCumulativeTime=transactionManagerTransactionCumulativeTime, sqlPoolXAConnectionMaxCount=sqlPoolXAConnectionMaxCount, lockManagerLockRejectedOnDeadlockCumulativeCount=lockManagerLockRejectedOnDeadlockCumulativeCount, org=org, asynchronousEventQueueFailedEventLastError=asynchronousEventQueueFailedEventLastError, lockManagerLockedItemMinCount=lockManagerLockedItemMinCount, sqlPoolXAConnectionMinCount=sqlPoolXAConnectionMinCount, lockManagerLockedItemMaxCount=lockManagerLockedItemMaxCount, schedulerTaskEntry=schedulerTaskEntry, asynchronousEventQueueFailedEventCumulativeCount=asynchronousEventQueueFailedEventCumulativeCount, sqlPoolXAMaximumWaitTime=sqlPoolXAMaximumWaitTime, alarmProbeAlertType=alarmProbeAlertType, internet=internet, sqlPoolXADatabaseName=sqlPoolXADatabaseName, dod=dod, sqlPoolXACheckedOutConnectionCurrentCount=sqlPoolXACheckedOutConnectionCurrentCount, sqlPoolXADriverClassName=sqlPoolXADriverClassName, schedulerTaskExecutionCumulativeCount=schedulerTaskExecutionCumulativeCount, transactionManagerActiveTransactionCurrentCount=transactionManagerActiveTransactionCurrentCount, sqlPoolXACreateConnectionFailureCumulativeCount=sqlPoolXACreateConnectionFailureCumulativeCount, platformPlatformId=platformPlatformId, remotePlatformPlatformProtocol=remotePlatformPlatformProtocol, schedulerTaskExecutionLastError=schedulerTaskExecutionLastError, transactionManagerRolledbackTransactionCumulativeCount=transactionManagerRolledbackTransactionCumulativeCount, sqlPoolXASqlPlatformName=sqlPoolXASqlPlatformName, lockManagerBlockedTransactionCurrentCount=lockManagerBlockedTransactionCurrentCount, remotePlatformPlatformId=remotePlatformPlatformId, alarmProbeAlertSource=alarmProbeAlertSource, schedulerTaskExecutionMaxTime=schedulerTaskExecutionMaxTime, slsConnectionConnected=slsConnectionConnected, transactionManagerTransactionManagerLastError=transactionManagerTransactionManagerLastError, versionBuildDate=versionBuildDate, asynchronousEventQueueWaitingEventMaxCount=asynchronousEventQueueWaitingEventMaxCount, swapcom=swapcom, alarmProbeLastSeverityChange=alarmProbeLastSeverityChange, sqlPoolXACheckIsClosedInterval=sqlPoolXACheckIsClosedInterval, asynchronousEventQueueEventProcessingCumulativeTime=asynchronousEventQueueEventProcessingCumulativeTime, PYSNMP_MODULE_ID=swapcom, slsConnectionLicenseCheckLastError=slsConnectionLicenseCheckLastError, private=private, lockManager=lockManager, remotePlatformTable=remotePlatformTable, sqlPoolXACheckedOutConnectionAverageTime=sqlPoolXACheckedOutConnectionAverageTime, sqlPoolXACheckedOutConnectionCumulativeTime=sqlPoolXACheckedOutConnectionCumulativeTime, sqlPoolXACheckedOutConnectionMaxTime=sqlPoolXACheckedOutConnectionMaxTime, lockManagerBlockedTransactionMinCount=lockManagerBlockedTransactionMinCount, asynchronousEventQueueWaitingEventMinCount=asynchronousEventQueueWaitingEventMinCount, lockManagerBlockedTransactionMaxCount=lockManagerBlockedTransactionMaxCount, schedulerTaskTable=schedulerTaskTable, sqlPoolXAConnectionCurrentCount=sqlPoolXAConnectionCurrentCount, transactionManager=transactionManager, schedulerTaskName=schedulerTaskName, sqlPoolXAEntry=sqlPoolXAEntry, remotePlatformRemotePlatformStatus=remotePlatformRemotePlatformStatus, alarmProbeEntry=alarmProbeEntry, sqlPoolXACreateConnectionLastError=sqlPoolXACreateConnectionLastError, sqlPoolXACheckedOutConnectionMinCount=sqlPoolXACheckedOutConnectionMinCount, slsConnection=slsConnection, sqlPoolXAName=sqlPoolXAName, sqlPoolXAMaximumIdleTime=sqlPoolXAMaximumIdleTime, transactionManagerTransactionMinTime=transactionManagerTransactionMinTime, sqlPoolXACreateConnectionSuccessCumulativeCount=sqlPoolXACreateConnectionSuccessCumulativeCount, versionProductVersion=versionProductVersion, alarmProbeTable=alarmProbeTable, asynchronousEventQueueWaitingEventCurrentCount=asynchronousEventQueueWaitingEventCurrentCount, asynchronousEventQueueEntry=asynchronousEventQueueEntry, remotePlatformEntry=remotePlatformEntry, asynchronousEventQueuePlatformId=asynchronousEventQueuePlatformId, sqlPoolXACheckedOutConnectionMaxCount=sqlPoolXACheckedOutConnectionMaxCount, schedulerTaskRunning=schedulerTaskRunning, asynchronousEventQueueTable=asynchronousEventQueueTable, transactionManagerActiveTransactionMaxCount=transactionManagerActiveTransactionMaxCount, alarmProbeSeverity=alarmProbeSeverity, versionTable=versionTable, versionEntry=versionEntry, sqlPoolXAMaximumSize=sqlPoolXAMaximumSize, schedulerTaskExecutionMinTime=schedulerTaskExecutionMinTime, asynchronousEventQueueInsertedEventCumulativeCount=asynchronousEventQueueInsertedEventCumulativeCount, schedulerTaskExecutionRetryCurrentCount=schedulerTaskExecutionRetryCurrentCount, schedulerTaskExecutionCumulativeTime=schedulerTaskExecutionCumulativeTime, lockManagerLockedItemCumulativeCount=lockManagerLockedItemCumulativeCount, sqlPoolXACheckedOutConnectionMinTime=sqlPoolXACheckedOutConnectionMinTime, slsConnectionLicenseCheckFailedCumulativeCount=slsConnectionLicenseCheckFailedCumulativeCount, transactionManagerLongTransactionThreshold=transactionManagerLongTransactionThreshold, versionBuildNumber=versionBuildNumber, enterprises=enterprises, sqlPoolXADriverName=sqlPoolXADriverName, scc=scc, transactionManagerCommittedTransactionCumulativeCount=transactionManagerCommittedTransactionCumulativeCount, platform=platform, platformPlatformStatus=platformPlatformStatus, asynchronousEventQueueEventProcessingMinTime=asynchronousEventQueueEventProcessingMinTime, transactionManagerActiveTransactionMinCount=transactionManagerActiveTransactionMinCount, lockManagerLockedItemCurrentCount=lockManagerLockedItemCurrentCount, asynchronousEventQueueEventProcessingMaxTime=asynchronousEventQueueEventProcessingMaxTime, slsConnectionLicenseCheckSuccessCumulativeCount=slsConnectionLicenseCheckSuccessCumulativeCount, sqlPoolXACheckedOutConnectionCumulativeCount=sqlPoolXACheckedOutConnectionCumulativeCount, transactionManagerTransactionMaxTime=transactionManagerTransactionMaxTime, asynchronousEventQueueProcessedEventCumulativeCount=asynchronousEventQueueProcessedEventCumulativeCount, sqlPoolXATable=sqlPoolXATable)
