#
# PySNMP MIB module FN100-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FN100-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, ModuleIdentity, Bits, Integer32, mgmt, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Gauge32, Unsigned32, NotificationType, iso, enterprises, Counter64, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "Bits", "Integer32", "mgmt", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Gauge32", "Unsigned32", "NotificationType", "iso", "enterprises", "Counter64", "TimeTicks", "IpAddress")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
cmu = MibIdentifier((1, 3, 6, 1, 4, 1, 3))
sigma = MibIdentifier((1, 3, 6, 1, 4, 1, 97))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 1))
platform = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5))
es_1fe = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3)).setLabel("es-1fe")
sfhw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 1))
sfsw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 2))
sfadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 3))
sfswdis = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 4))
sfaddr = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 5))
sfif = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 6))
sfuart = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 7))
sfdebug = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 8))
sfproto = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 9))
sftrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 10))
sfworkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 5, 3, 11))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 2))
cmuSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 1))
cmuKip = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 2))
cmuRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 3, 1, 3))
sysID = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("es-1fe-bridge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysID.setStatus('mandatory')
if mibBuilder.loadTexts: sysID.setDescription('')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
if mibBuilder.loadTexts: sysReset.setDescription('')
sysTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traps-need-acks", 1), ("traps-not-acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapAck.setStatus('mandatory')
if mibBuilder.loadTexts: sysTrapAck.setDescription('')
sysTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: sysTrapTime.setDescription('')
sysTrapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapRetry.setStatus('mandatory')
if mibBuilder.loadTexts: sysTrapRetry.setDescription('')
sysTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPort.setStatus('mandatory')
if mibBuilder.loadTexts: sysTrapPort.setDescription('')
sfhwDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwDiagCode.setDescription('')
sfhwManufData = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwManufData.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwManufData.setDescription('')
sfhwPortCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwPortCount.setDescription('')
sfhwPortTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4), )
if mibBuilder.loadTexts: sfhwPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwPortTable.setDescription('')
sfhwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1), ).setIndexNames((0, "FN100-MIB", "sfhwPortIndex"))
if mibBuilder.loadTexts: sfhwPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwPortEntry.setDescription('')
sfhwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwPortIndex.setDescription('')
sfhwPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 255))).clone(namedValues=NamedValues(("port-csma", 1), ("port-uart", 6), ("port-none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortType.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwPortType.setDescription('')
sfhwPortSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 13, 16, 80, 255))).clone(namedValues=NamedValues(("csmacd-fx", 10), ("csmacd-tpx", 13), ("csmacd-tpx-fx", 16), ("uart-female-9pin", 80), ("no-information", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortSubType.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwPortSubType.setDescription('')
sfhwPortDiagPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("diag-passed", 1), ("diag-failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwPortDiagPassed.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwPortDiagPassed.setDescription('')
sfhwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 1, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfhwAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sfhwAddr.setDescription('')
sfswNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sfswNumber.setDescription('')
sfswFilesetTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2), )
if mibBuilder.loadTexts: sfswFilesetTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfswFilesetTable.setDescription('')
sfswFileset = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1), ).setIndexNames((0, "FN100-MIB", "sfswIndex"))
if mibBuilder.loadTexts: sfswFileset.setStatus('mandatory')
if mibBuilder.loadTexts: sfswFileset.setDescription('')
sfswIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currently-executing", 1), ("next-boot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfswIndex.setDescription('')
sfswDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sfswDesc.setDescription('')
sfswCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfswCount.setDescription('')
sfswType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswType.setStatus('mandatory')
if mibBuilder.loadTexts: sfswType.setDescription('')
sfswSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswSizes.setStatus('mandatory')
if mibBuilder.loadTexts: sfswSizes.setDescription('')
sfswStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswStarts.setStatus('mandatory')
if mibBuilder.loadTexts: sfswStarts.setDescription('')
sfswBases = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswBases.setStatus('mandatory')
if mibBuilder.loadTexts: sfswBases.setDescription('')
sfswFlashBank = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("first-bank", 1), ("second-bank", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswFlashBank.setStatus('mandatory')
if mibBuilder.loadTexts: sfswFlashBank.setDescription('')
sfadminFatalErr = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminFatalErr.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminFatalErr.setDescription('')
sfadminAnyPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminAnyPass.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminAnyPass.setDescription('')
sfadminGetPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminGetPass.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminGetPass.setDescription('')
sfadminNMSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminNMSIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminNMSIPAddr.setDescription('')
sfadminAlarmDynamic = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminAlarmDynamic.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminAlarmDynamic.setDescription('')
sfadminAlarmAddressChange = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminAlarmAddressChange.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminAlarmAddressChange.setDescription('')
sfadminStorageFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminStorageFailure.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminStorageFailure.setDescription('')
sfadminAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminAuthenticationFailure.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminAuthenticationFailure.setDescription('')
sfadminMPReceiveCongests = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminMPReceiveCongests.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminMPReceiveCongests.setDescription('')
sfadminArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminArpEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminArpEntries.setDescription('')
sfadminArpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminArpStatics.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminArpStatics.setDescription('')
sfadminArpOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminArpOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminArpOverflows.setDescription('')
sfadminIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminIpEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminIpEntries.setDescription('')
sfadminIpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminIpStatics.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminIpStatics.setDescription('')
sfadminStaticPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminStaticPreference.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminStaticPreference.setDescription('')
sfadminRipPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminRipPreference.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminRipPreference.setDescription('')
sfadminRipRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminRipRouteDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminRipRouteDiscards.setDescription('')
sfadminRebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-change", 1), ("tftp-config", 2), ("revert-to-defaults", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminRebootConfig.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminRebootConfig.setDescription('')
sfadminTempOK = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperature-normal", 1), ("temperature-too-hot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfadminTempOK.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminTempOK.setDescription('')
sfadminDisableButton = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminDisableButton.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminDisableButton.setDescription('')
sfadminButtonSelection = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("led-any-activity", 1), ("led-rx-activity", 2), ("led-tx-activity", 3), ("led-any-collision", 4), ("led-programmed", 5), ("led-speed", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminButtonSelection.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminButtonSelection.setDescription('')
sfadminLEDProgramOption = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("program-led-any-error", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminLEDProgramOption.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminLEDProgramOption.setDescription('')
sfadminVirtualSwitch1 = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminVirtualSwitch1.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminVirtualSwitch1.setDescription('')
sfadminVirtualSwitch2 = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 24), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminVirtualSwitch2.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminVirtualSwitch2.setDescription('')
sfadminVirtualSwitch3 = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminVirtualSwitch3.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminVirtualSwitch3.setDescription('')
sfadminVirtualSwitch4 = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminVirtualSwitch4.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminVirtualSwitch4.setDescription('')
sfadminDefaultVirtualSwitch = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("virtual-switch-1", 1), ("virtual-switch-2", 2), ("virtual-switch-3", 3), ("virtual-switch-4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfadminDefaultVirtualSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: sfadminDefaultVirtualSwitch.setDescription('Default virtual switch number when accessing the MIB via SNMP. Set this attribute prior to accessing the Bridge MIB records.')
sfswdisDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswdisDesc.setStatus('mandatory')
if mibBuilder.loadTexts: sfswdisDesc.setDescription('')
sfswdisAccess = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("any-software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfswdisAccess.setStatus('mandatory')
if mibBuilder.loadTexts: sfswdisAccess.setDescription('')
sfswdisWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("config-error", 3), ("flash-error", 4), ("config-and-flash-errors", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfswdisWriteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfswdisWriteStatus.setDescription('')
sfswdisConfigIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfswdisConfigIp.setStatus('mandatory')
if mibBuilder.loadTexts: sfswdisConfigIp.setDescription('')
sfswdisConfigRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfswdisConfigRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfswdisConfigRetryTime.setDescription('')
sfswdisConfigTotalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfswdisConfigTotalTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sfswdisConfigTotalTimeout.setDescription('')
sfaddrDynamics = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDynamics.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDynamics.setDescription('')
sfaddrDynamicMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 2), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrDynamicMax.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDynamicMax.setDescription('')
sfaddrFlags = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrFlags.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrFlags.setDescription('')
sfaddrMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrMAC.setDescription('')
sfaddrPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrPort.setDescription('')
sfaddrOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("read-random", 1), ("read-next", 2), ("reserved", 3), ("update", 4), ("delete", 5), ("read-block", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrOperation.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrOperation.setDescription('')
sfaddrIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrIndex.setDescription('')
sfaddrNext = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrNext.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrNext.setDescription('')
sfaddrBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrBlockSize.setDescription('')
sfaddrBlock = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrBlock.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrBlock.setDescription('')
sfaddrAlarmMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrAlarmMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrAlarmMAC.setDescription('')
sfaddrDbFullBuckets = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbFullBuckets.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbFullBuckets.setDescription('')
sfaddrDbMaxFullBuckets = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrDbMaxFullBuckets.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbMaxFullBuckets.setDescription('')
sfaddrDbMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbMaxSize.setDescription('')
sfaddrDbBuckets = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbBuckets.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbBuckets.setDescription('')
sfaddrDbSearchDepth = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfaddrDbSearchDepth.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbSearchDepth.setDescription('')
sfaddrDbDistribution = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbDistribution.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbDistribution.setDescription('')
sfaddrDbTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18), )
if mibBuilder.loadTexts: sfaddrDbTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbTable.setDescription('')
sfaddrDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18, 1), ).setIndexNames((0, "FN100-MIB", "sfaddrDbBucketAddress"))
if mibBuilder.loadTexts: sfaddrDbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbEntry.setDescription('')
sfaddrDbBucketAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbBucketAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbBucketAddress.setDescription('')
sfaddrDbBucketEntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbBucketEntCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbBucketEntCnt.setDescription('')
sfaddrDbBucketEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 5, 18, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfaddrDbBucketEntries.setStatus('mandatory')
if mibBuilder.loadTexts: sfaddrDbBucketEntries.setDescription('')
sfifTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1), )
if mibBuilder.loadTexts: sfifTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfifTable.setDescription('')
sfifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1), ).setIndexNames((0, "FN100-MIB", "sfifIndex"))
if mibBuilder.loadTexts: sfifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfifEntry.setDescription('')
sfifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfifIndex.setDescription('')
sfifRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfifRxCnt.setDescription('')
sfifTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfifTxCnt.setDescription('')
sfifTxStormCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifTxStormCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sfifTxStormCnt.setDescription('')
sfifTxStormTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifTxStormTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfifTxStormTime.setDescription('')
sfifFilterFloodSourceSame = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifFilterFloodSourceSame.setStatus('mandatory')
if mibBuilder.loadTexts: sfifFilterFloodSourceSame.setDescription('')
sfifFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifFunction.setStatus('mandatory')
if mibBuilder.loadTexts: sfifFunction.setDescription('')
sfifRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxPacket.setStatus('mandatory')
if mibBuilder.loadTexts: sfifRxPacket.setDescription('')
sfifRxHwFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxHwFCSs.setStatus('mandatory')
if mibBuilder.loadTexts: sfifRxHwFCSs.setDescription('')
sfifRxQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxQueues.setStatus('mandatory')
if mibBuilder.loadTexts: sfifRxQueues.setDescription('')
sfifTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTxPacket.setStatus('mandatory')
if mibBuilder.loadTexts: sfifTxPacket.setDescription('')
sfifTxStorms = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTxStorms.setStatus('mandatory')
if mibBuilder.loadTexts: sfifTxStorms.setDescription('')
sfifStatisticsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifStatisticsTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfifStatisticsTime.setDescription('')
sfifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sfifIpAddr.setDescription('')
sfifIpGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifIpGroupAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sfifIpGroupAddr.setDescription('')
sfifRxForwardChars = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxForwardChars.setStatus('mandatory')
if mibBuilder.loadTexts: sfifRxForwardChars.setDescription('')
sfifRxFilteredChars = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifRxFilteredChars.setStatus('mandatory')
if mibBuilder.loadTexts: sfifRxFilteredChars.setDescription('')
sfifSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: sfifSpeed.setDescription('')
sfifMgntRxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifMgntRxQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfifMgntRxQueueSize.setDescription('')
sfifVirtualSwitchID = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifVirtualSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: sfifVirtualSwitchID.setDescription('')
sfifTPLinkOK = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTPLinkOK.setStatus('mandatory')
if mibBuilder.loadTexts: sfifTPLinkOK.setDescription('')
sfifLedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("led-on", 1), ("led-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifLedOn.setStatus('mandatory')
if mibBuilder.loadTexts: sfifLedOn.setDescription('')
sfifTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifTxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: sfifTxCollisions.setDescription('')
sfifFuseOkay = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifFuseOkay.setStatus('mandatory')
if mibBuilder.loadTexts: sfifFuseOkay.setDescription('')
sfifCrashEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifCrashEvents.setStatus('mandatory')
if mibBuilder.loadTexts: sfifCrashEvents.setDescription('')
sfifCrashTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 26), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifCrashTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfifCrashTime.setDescription('')
sfifMinimumUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 27), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifMinimumUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfifMinimumUpTime.setDescription('')
sfifDMAFlowControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifDMAFlowControlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sfifDMAFlowControlEnable.setDescription('')
sfifDMARetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifDMARetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfifDMARetryCount.setDescription('')
sfifDMARetryBufferCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifDMARetryBufferCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfifDMARetryBufferCount.setDescription('')
sfifDMAPeakRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifDMAPeakRetries.setStatus('mandatory')
if mibBuilder.loadTexts: sfifDMAPeakRetries.setDescription('')
sfifDMATotalRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifDMATotalRetries.setStatus('mandatory')
if mibBuilder.loadTexts: sfifDMATotalRetries.setDescription('')
sfifDMAPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifDMAPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sfifDMAPackets.setDescription('')
sfifDMADroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifDMADroppedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sfifDMADroppedPackets.setDescription('')
sfifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: sfifDescr.setDescription('')
sfifMgtDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifMgtDroppedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sfifMgtDroppedPackets.setDescription('')
sfifLinkStatusOutages = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfifLinkStatusOutages.setStatus('mandatory')
if mibBuilder.loadTexts: sfifLinkStatusOutages.setDescription('')
sfifLocalFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 6, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardware", 1), ("software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfifLocalFilter.setStatus('mandatory')
if mibBuilder.loadTexts: sfifLocalFilter.setDescription('')
sfuartTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1), )
if mibBuilder.loadTexts: sfuartTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfuartTable.setDescription('')
sfuartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1), ).setIndexNames((0, "FN100-MIB", "sfuartIndex"))
if mibBuilder.loadTexts: sfuartEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfuartEntry.setDescription('')
sfuartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfuartIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfuartIndex.setDescription('')
sfuartBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("external-clock", 1), ("b1200-baud", 2), ("b2400-baud", 3), ("b4800-baud", 4), ("b9600-baud", 5), ("b19200-baud", 6), ("b38400-baud", 7), ("b56-kilobits", 8), ("b1544-kilobits", 9), ("b2048-kilobits", 10), ("b45-megabits", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfuartBaud.setStatus('mandatory')
if mibBuilder.loadTexts: sfuartBaud.setDescription('')
sfuartAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfuartAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfuartAlignmentErrors.setDescription('')
sfuartOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfuartOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfuartOverrunErrors.setDescription('')
sfdebugStringID = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfdebugStringID.setStatus('mandatory')
if mibBuilder.loadTexts: sfdebugStringID.setDescription('')
sfdebugString = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfdebugString.setStatus('mandatory')
if mibBuilder.loadTexts: sfdebugString.setDescription('')
sfdebugTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3), )
if mibBuilder.loadTexts: sfdebugTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfdebugTable.setDescription('')
sfdebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1), ).setIndexNames((0, "FN100-MIB", "sfdebugIndex"))
if mibBuilder.loadTexts: sfdebugEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfdebugEntry.setDescription('')
sfdebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100))).clone(namedValues=NamedValues(("debug-port1", 1), ("debug-port2", 2), ("debug-port3", 3), ("debug-port4", 4), ("debug-port5", 5), ("debug-port6", 6), ("debug-port7", 7), ("debug-port8", 8), ("debug-port9", 9), ("debug-port10", 10), ("debug-port11", 11), ("debug-port12", 12), ("debug-mp", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfdebugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfdebugIndex.setDescription('')
sfdebugOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("examine", 1), ("modify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfdebugOperation.setStatus('mandatory')
if mibBuilder.loadTexts: sfdebugOperation.setDescription('')
sfdebugBase = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfdebugBase.setStatus('mandatory')
if mibBuilder.loadTexts: sfdebugBase.setDescription('')
sfdebugLength = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfdebugLength.setStatus('mandatory')
if mibBuilder.loadTexts: sfdebugLength.setDescription('')
sfdebugData = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 8, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfdebugData.setStatus('mandatory')
if mibBuilder.loadTexts: sfdebugData.setDescription('')
sfprotoTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1), )
if mibBuilder.loadTexts: sfprotoTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfprotoTable.setDescription('This table contains configuration information specify- ing the types of protocols used to bridge, route, translate, and filter frames for each port.')
sfprotoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1), ).setIndexNames((0, "FN100-MIB", "sfprotoIfIndex"))
if mibBuilder.loadTexts: sfprotoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfprotoEntry.setDescription('Each entry in this table specifies which protocols are used by a particular port in the ES/1.')
sfprotoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfprotoIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfprotoIfIndex.setDescription("Identifies the interface (port) to which this entry's information belongs. The value of this variable corresponds to ifIndex, as well as most of the other port identification values in related MIBs.")
sfprotoBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("transparent", 1), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfprotoBridge.setStatus('mandatory')
if mibBuilder.loadTexts: sfprotoBridge.setDescription('Defines the bridging method to be applied to frames received at, or destined for, this port. Ethernet and FDDI ports may be configured for transparent, srt, or none. Token Ring ports may be configured for any of the four options. The UART may only be configured to none.')
sfprotoSuppressBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("suppressed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfprotoSuppressBpdu.setStatus('mandatory')
if mibBuilder.loadTexts: sfprotoSuppressBpdu.setDescription('Allows transmission of spanning tree protocol packets to be suppressed. If normal(1), 802.1d spanning tree packets and source-routing spanning tree packets are transmitted as usual. If suppressed(2), these packets are not transmitted. This option may be needed for in- teroperability with non-802.1d spanning tree protocols (e.g., DEC LanBridge 100).')
sfprotoRipListen = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfprotoRipListen.setStatus('mandatory')
if mibBuilder.loadTexts: sfprotoRipListen.setDescription('Specifies whether the port should listen for internet Routing Information Protocol (RFC-1058) packets, in order to build the routing table for the unit.')
sfprotoTrunking = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfprotoTrunking.setStatus('mandatory')
if mibBuilder.loadTexts: sfprotoTrunking.setDescription("Specifies whether SMC's trunking protocol (an extension to the standard Spanning Tree) is to be used over this port.")
sftrunkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1), )
if mibBuilder.loadTexts: sftrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkTable.setDescription('This table describes the trunking status and attributes of the interfaces that are configured for bridge trunking.')
sftrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1), ).setIndexNames((0, "FN100-MIB", "sftrunkIfIndex"))
if mibBuilder.loadTexts: sftrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkEntry.setDescription('An entry exists in this table for each physical interface (port) that is configured for trunking.')
sftrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkIfIndex.setDescription('Identifies a physical interface (port) which is configured for LAN trunking. The value of this variable corresponds to ifIndex, as well as most of the other port identification values in related MIBs.')
sftrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 1), ("oneway", 2), ("joined", 3), ("helddown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkState.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkState.setDescription('If closed(1) then this link has not yet received any Trunking PDUs. If oneway(2) then incoming Trunking PDUs do not indicate that our PDUs are being successfully received by the far end. If joined(3) then this link is actively participating in the trunk group. If helddown(4) then an error has been detected and the link is being held out-of-service until the error clears.')
sftrunkRemoteBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkRemoteBridgeId.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkRemoteBridgeId.setDescription('The bridge ID of the remote bridge.')
sftrunkRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkRemoteIp.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkRemoteIp.setDescription('The IP address of the remote bridge, as reported by that bridge for administrative purposes.')
sftrunkLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("in-bpdu", 2), ("multiple-bridges", 3), ("no-ack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkLastError.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkLastError.setDescription('The reason for failure when the link is in helddown state.')
sftrunkLinkOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkLinkOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkLinkOrdinal.setDescription('The position of this link within the trunk group.')
sftrunkLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkLinkCount.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkLinkCount.setDescription('The number of links within the trunk group.')
sftrunkLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftrunkLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: sftrunkLastChange.setDescription('The number of seconds since sftrunkState changed.')
sfworkGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfworkGroupNextIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfworkGroupNextIndex.setDescription('The next available workgroup index to be used. When creating a new workgroup, it is recommended to read the value of the variable and use it to key into the workgroup table.')
sfworkGroupCurrentCounts = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfworkGroupCurrentCounts.setStatus('mandatory')
if mibBuilder.loadTexts: sfworkGroupCurrentCounts.setDescription('The total number of workgroups currently defined.')
sfworkGroupMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfworkGroupMaxCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfworkGroupMaxCount.setDescription('The maximum number of workgroups allowed.')
sfworkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4), )
if mibBuilder.loadTexts: sfworkGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfworkGroupTable.setDescription('This table contains work group definitions for the interfaces.')
sfworkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1), ).setIndexNames((0, "FN100-MIB", "sfworkGroupIndex"))
if mibBuilder.loadTexts: sfworkGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfworkGroupEntry.setDescription('Each entry in this table contains a definition of a work group.')
sfworkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfworkGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfworkGroupIndex.setDescription('An integer that identifies the work group, used as an index to this table.')
sfworkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfworkGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: sfworkGroupName.setDescription('A 1-16 character work group name.')
sfworkGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("workgroup-all", 1), ("workgroup-multicast", 2), ("workgroup-unicast", 3), ("workgroup-invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfworkGroupType.setStatus('mandatory')
if mibBuilder.loadTexts: sfworkGroupType.setDescription('The type of work group.')
sfworkGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 5, 3, 11, 4, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfworkGroupPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfworkGroupPort.setDescription('A list of all ports within the group. The first octet specified ports 1-8, the second 9-16, etc.')
mibBuilder.exportSymbols("FN100-MIB", sfuartTable=sfuartTable, sfaddrDbDistribution=sfaddrDbDistribution, sftrunkRemoteIp=sftrunkRemoteIp, sfifStatisticsTime=sfifStatisticsTime, sfaddrPort=sfaddrPort, sfswdisAccess=sfswdisAccess, cmu=cmu, sfprotoIfIndex=sfprotoIfIndex, sfadminAnyPass=sfadminAnyPass, sfadminLEDProgramOption=sfadminLEDProgramOption, sfhwPortTable=sfhwPortTable, sfadminDefaultVirtualSwitch=sfadminDefaultVirtualSwitch, sfaddrOperation=sfaddrOperation, sfswdisConfigIp=sfswdisConfigIp, sftrunkLastChange=sftrunkLastChange, sfswdis=sfswdis, sfprotoEntry=sfprotoEntry, mibs=mibs, sfifFuseOkay=sfifFuseOkay, sfifLedOn=sfifLedOn, sfdebugTable=sfdebugTable, sfifTxPacket=sfifTxPacket, sfdebugStringID=sfdebugStringID, sysID=sysID, sfifMinimumUpTime=sfifMinimumUpTime, sfifTxCnt=sfifTxCnt, sfifEntry=sfifEntry, sfdebugBase=sfdebugBase, sfdebug=sfdebug, sfworkGroupCurrentCounts=sfworkGroupCurrentCounts, sfadminStorageFailure=sfadminStorageFailure, sfaddrIndex=sfaddrIndex, sfaddrDbFullBuckets=sfaddrDbFullBuckets, sfadminMPReceiveCongests=sfadminMPReceiveCongests, sysReset=sysReset, sfifDMATotalRetries=sfifDMATotalRetries, es_1fe=es_1fe, sfadminArpOverflows=sfadminArpOverflows, sfhwPortEntry=sfhwPortEntry, sfhwPortDiagPassed=sfhwPortDiagPassed, sfifDMAFlowControlEnable=sfifDMAFlowControlEnable, sfadminDisableButton=sfadminDisableButton, cmuRouter=cmuRouter, sfswFlashBank=sfswFlashBank, sfifDMARetryCount=sfifDMARetryCount, sfifLinkStatusOutages=sfifLinkStatusOutages, sfadminButtonSelection=sfadminButtonSelection, sfworkGroupNextIndex=sfworkGroupNextIndex, sfifDMAPackets=sfifDMAPackets, sftrunkLinkCount=sftrunkLinkCount, sfaddrNext=sfaddrNext, sfifFilterFloodSourceSame=sfifFilterFloodSourceSame, sfif=sfif, sfdebugLength=sfdebugLength, sfifDMAPeakRetries=sfifDMAPeakRetries, sfworkGroupIndex=sfworkGroupIndex, cmuSNMP=cmuSNMP, sigma=sigma, sfhwPortSubType=sfhwPortSubType, sfswType=sfswType, sfifSpeed=sfifSpeed, sfdebugOperation=sfdebugOperation, platform=platform, sfuartOverrunErrors=sfuartOverrunErrors, sfuartBaud=sfuartBaud, sfswDesc=sfswDesc, sfadminRipRouteDiscards=sfadminRipRouteDiscards, sfaddrMAC=sfaddrMAC, sfaddrDbSearchDepth=sfaddrDbSearchDepth, sfadminVirtualSwitch2=sfadminVirtualSwitch2, sfifDMADroppedPackets=sfifDMADroppedPackets, sfaddr=sfaddr, sfifMgntRxQueueSize=sfifMgntRxQueueSize, sftrunkState=sftrunkState, sfifCrashTime=sfifCrashTime, sfdebugString=sfdebugString, sfworkGroupEntry=sfworkGroupEntry, sfaddrAlarmMAC=sfaddrAlarmMAC, sfifLocalFilter=sfifLocalFilter, sfifCrashEvents=sfifCrashEvents, sfadminRebootConfig=sfadminRebootConfig, sfhwAddr=sfhwAddr, sfaddrDbMaxFullBuckets=sfaddrDbMaxFullBuckets, sfadminFatalErr=sfadminFatalErr, sfswStarts=sfswStarts, sfaddrDynamicMax=sfaddrDynamicMax, sfuartEntry=sfuartEntry, sfifTxStormTime=sfifTxStormTime, sfadminVirtualSwitch1=sfadminVirtualSwitch1, sfhwPortCount=sfhwPortCount, sfhwManufData=sfhwManufData, sfifRxFilteredChars=sfifRxFilteredChars, sfhw=sfhw, sfifFunction=sfifFunction, sfadmin=sfadmin, sfworkGroupType=sfworkGroupType, sys=sys, sfworkGroup=sfworkGroup, sysTrapTime=sysTrapTime, sftrunkRemoteBridgeId=sftrunkRemoteBridgeId, sfswIndex=sfswIndex, sfifDMARetryBufferCount=sfifDMARetryBufferCount, sfadminGetPass=sfadminGetPass, sfswSizes=sfswSizes, sfswdisConfigRetryTime=sfswdisConfigRetryTime, sfaddrBlock=sfaddrBlock, sfadminVirtualSwitch4=sfadminVirtualSwitch4, sfswFilesetTable=sfswFilesetTable, sfhwPortType=sfhwPortType, sfswFileset=sfswFileset, sysTrapRetry=sysTrapRetry, sfaddrDbEntry=sfaddrDbEntry, sfadminVirtualSwitch3=sfadminVirtualSwitch3, sfaddrDbMaxSize=sfaddrDbMaxSize, sfifMgtDroppedPackets=sfifMgtDroppedPackets, sfifIpGroupAddr=sfifIpGroupAddr, sfifTPLinkOK=sfifTPLinkOK, sfifTxStorms=sfifTxStorms, sfworkGroupPort=sfworkGroupPort, sftrunkTable=sftrunkTable, sfaddrDbBucketEntCnt=sfaddrDbBucketEntCnt, sfdebugIndex=sfdebugIndex, sfswNumber=sfswNumber, sfuart=sfuart, sysTrapAck=sysTrapAck, sfswCount=sfswCount, sfdebugData=sfdebugData, sfifIpAddr=sfifIpAddr, sfaddrFlags=sfaddrFlags, sfaddrDbBucketAddress=sfaddrDbBucketAddress, sfprotoTrunking=sfprotoTrunking, sfadminArpStatics=sfadminArpStatics, sfadminAlarmDynamic=sfadminAlarmDynamic, sfaddrDynamics=sfaddrDynamics, sfadminNMSIPAddr=sfadminNMSIPAddr, sysTrapPort=sysTrapPort, sfadminStaticPreference=sfadminStaticPreference, sfifRxPacket=sfifRxPacket, sfifRxForwardChars=sfifRxForwardChars, sfadminAuthenticationFailure=sfadminAuthenticationFailure, sftrunkIfIndex=sftrunkIfIndex, sfadminAlarmAddressChange=sfadminAlarmAddressChange, sfdebugEntry=sfdebugEntry, sftrunkLastError=sftrunkLastError, sfadminRipPreference=sfadminRipPreference, sfworkGroupName=sfworkGroupName, cmuKip=cmuKip, sfprotoSuppressBpdu=sfprotoSuppressBpdu, sfswBases=sfswBases, sfworkGroupMaxCount=sfworkGroupMaxCount, systems=systems, sfhwDiagCode=sfhwDiagCode, sfadminArpEntries=sfadminArpEntries, sfadminIpEntries=sfadminIpEntries, sfhwPortIndex=sfhwPortIndex, sfsw=sfsw, sftrunk=sftrunk, sftrunkLinkOrdinal=sftrunkLinkOrdinal, sfswdisDesc=sfswdisDesc, sfaddrDbBuckets=sfaddrDbBuckets, sfifIndex=sfifIndex, sfifTxCollisions=sfifTxCollisions, sfaddrDbBucketEntries=sfaddrDbBucketEntries, sfaddrDbTable=sfaddrDbTable, sfprotoTable=sfprotoTable, sfworkGroupTable=sfworkGroupTable, sfuartAlignmentErrors=sfuartAlignmentErrors, sfifRxCnt=sfifRxCnt, sfswdisConfigTotalTimeout=sfswdisConfigTotalTimeout, sfaddrBlockSize=sfaddrBlockSize, sftrunkEntry=sftrunkEntry, sfifVirtualSwitchID=sfifVirtualSwitchID, sfifRxQueues=sfifRxQueues, sfadminIpStatics=sfadminIpStatics, sfuartIndex=sfuartIndex, sfproto=sfproto, sfifDescr=sfifDescr, sfifTxStormCnt=sfifTxStormCnt, sfprotoRipListen=sfprotoRipListen, sfadminTempOK=sfadminTempOK, sfswdisWriteStatus=sfswdisWriteStatus, sfprotoBridge=sfprotoBridge, sfifRxHwFCSs=sfifRxHwFCSs, sfifTable=sfifTable)
