#
# PySNMP MIB module OSPF-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OSPF-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ospfNbrRestartHelperAge, ospfAreaNssaTranslatorState, ospfVirtNbrRtrId, ospfRestartStatus, ospfLsdbAreaId, ospfAddressLessIf, ospfLsdbType, ospfNbrIpAddr, ospfAreaId, ospfRestartExitReason, ospfNbrRestartHelperStatus, ospfVirtNbrRestartHelperAge, ospfVirtIfState, ospfNbrRestartHelperExitReason, ospfIfIpAddress, ospfIfState, ospfRestartInterval, ospfVirtNbrRestartHelperExitReason, ospfNbrRtrId, ospfVirtNbrRestartHelperStatus, ospf, ospfExtLsdbLimit, ospfLsdbLsid, ospfVirtIfAreaId, ospfVirtNbrArea, ospfLsdbRouterId, ospfNbrAddressLessIndex, ospfRouterId, ospfVirtNbrState, ospfNbrState, ospfVirtIfNeighbor = mibBuilder.importSymbols("OSPF-MIB", "ospfNbrRestartHelperAge", "ospfAreaNssaTranslatorState", "ospfVirtNbrRtrId", "ospfRestartStatus", "ospfLsdbAreaId", "ospfAddressLessIf", "ospfLsdbType", "ospfNbrIpAddr", "ospfAreaId", "ospfRestartExitReason", "ospfNbrRestartHelperStatus", "ospfVirtNbrRestartHelperAge", "ospfVirtIfState", "ospfNbrRestartHelperExitReason", "ospfIfIpAddress", "ospfIfState", "ospfRestartInterval", "ospfVirtNbrRestartHelperExitReason", "ospfNbrRtrId", "ospfVirtNbrRestartHelperStatus", "ospf", "ospfExtLsdbLimit", "ospfLsdbLsid", "ospfVirtIfAreaId", "ospfVirtNbrArea", "ospfLsdbRouterId", "ospfNbrAddressLessIndex", "ospfRouterId", "ospfVirtNbrState", "ospfNbrState", "ospfVirtIfNeighbor")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, IpAddress, iso, Bits, ModuleIdentity, Counter64, Integer32, TimeTicks, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "iso", "Bits", "ModuleIdentity", "Counter64", "Integer32", "TimeTicks", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ospfTrap = ModuleIdentity((1, 3, 6, 1, 2, 1, 14, 16))
ospfTrap.setRevisions(('2006-11-10 00:00', '1995-01-20 12:25',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ospfTrap.setRevisionsDescriptions(('Updated for latest changes to OSPFv2: -added graceful restart related traps -added new config error types -added ospfNssaTranslatorStatusChange trap. See Appendix B of RFC 4750 for more details. This version published as part of RFC 4750', 'The initial SMIv2 revision of this MIB module, published in RFC 1850.',))
if mibBuilder.loadTexts: ospfTrap.setLastUpdated('200611100000Z')
if mibBuilder.loadTexts: ospfTrap.setOrganization('IETF OSPF Working Group')
if mibBuilder.loadTexts: ospfTrap.setContactInfo('WG E-Mail: ospf@ietf.org WG Chairs: acee@cisco.com rohit@gmail.com Editors: Dan Joyal Nortel 600 Technology Park Drive Billerica, MA 01821 djoyal@nortel.com Piotr Galecki Airvana 19 Alpha Road Chelmsford, MA 01824 pgalecki@airvana.com Spencer Giacalone CSFB Eleven Madison Ave New York, NY 10010-3629 spencer.giacalone@gmail.com')
if mibBuilder.loadTexts: ospfTrap.setDescription('The MIB module to describe traps for the OSPF Version 2 Protocol. Copyright (C) The IETF Trust (2006). This version of this MIB module is part of RFC 4750; see the RFC itself for full legal notices.')
ospfTrapControl = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 1))
ospfTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 2))
ospfSetTrap = MibScalar((1, 3, 6, 1, 2, 1, 14, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSetTrap.setStatus('current')
if mibBuilder.loadTexts: ospfSetTrap.setDescription('A 4-octet string serving as a bit map for the trap events defined by the OSPF traps. This object is used to enable and disable specific OSPF traps where a 1 in the bit field represents enabled. The right-most bit (least significant) represents trap 0. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.')
ospfConfigErrorType = MibScalar((1, 3, 6, 1, 2, 1, 14, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("badVersion", 1), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("authTypeMismatch", 5), ("authFailure", 6), ("netMaskMismatch", 7), ("helloIntervalMismatch", 8), ("deadIntervalMismatch", 9), ("optionMismatch", 10), ("mtuMismatch", 11), ("duplicateRouterId", 12), ("noError", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfConfigErrorType.setStatus('current')
if mibBuilder.loadTexts: ospfConfigErrorType.setDescription('Potential types of configuration conflicts. Used by the ospfConfigError and ospfConfigVirtError traps. When the last value of a trap using this object is needed, but no traps of that type have been sent, this value pertaining to this object should be returned as noError.')
ospfPacketType = MibScalar((1, 3, 6, 1, 2, 1, 14, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("hello", 1), ("dbDescript", 2), ("lsReq", 3), ("lsUpdate", 4), ("lsAck", 5), ("nullPacket", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfPacketType.setStatus('current')
if mibBuilder.loadTexts: ospfPacketType.setDescription('OSPF packet types. When the last value of a trap using this object is needed, but no traps of that type have been sent, this value pertaining to this object should be returned as nullPacket.')
ospfPacketSrc = MibScalar((1, 3, 6, 1, 2, 1, 14, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfPacketSrc.setStatus('current')
if mibBuilder.loadTexts: ospfPacketSrc.setDescription('The IP address of an inbound packet that cannot be identified by a neighbor instance. When the last value of a trap using this object is needed, but no traps of that type have been sent, this value pertaining to this object should be returned as 0.0.0.0.')
ospfVirtIfStateChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 1)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-MIB", "ospfVirtIfState"))
if mibBuilder.loadTexts: ospfVirtIfStateChange.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIfStateChange.setDescription('An ospfVirtIfStateChange trap signifies that there has been a change in the state of an OSPF virtual interface. This trap should be generated when the interface state regresses (e.g., goes from Point-to-Point to Down) or progresses to a terminal state (i.e., Point-to-Point).')
ospfNbrStateChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 2)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfNbrIpAddr"), ("OSPF-MIB", "ospfNbrAddressLessIndex"), ("OSPF-MIB", "ospfNbrRtrId"), ("OSPF-MIB", "ospfNbrState"))
if mibBuilder.loadTexts: ospfNbrStateChange.setStatus('current')
if mibBuilder.loadTexts: ospfNbrStateChange.setDescription('An ospfNbrStateChange trap signifies that there has been a change in the state of a non-virtual OSPF neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., 2-Way or Full). When an neighbor transitions from or to Full on non-broadcast multi-access and broadcast networks, the trap should be generated by the designated router. A designated router transitioning to Down will be noted by ospfIfStateChange.')
ospfVirtNbrStateChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 3)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfVirtNbrArea"), ("OSPF-MIB", "ospfVirtNbrRtrId"), ("OSPF-MIB", "ospfVirtNbrState"))
if mibBuilder.loadTexts: ospfVirtNbrStateChange.setStatus('current')
if mibBuilder.loadTexts: ospfVirtNbrStateChange.setDescription('An ospfVirtNbrStateChange trap signifies that there has been a change in the state of an OSPF virtual neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., Full).')
ospfIfConfigError = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 4)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-MIB", "ospfAddressLessIf"), ("OSPF-TRAP-MIB", "ospfPacketSrc"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-TRAP-MIB", "ospfPacketType"))
if mibBuilder.loadTexts: ospfIfConfigError.setStatus('current')
if mibBuilder.loadTexts: ospfIfConfigError.setDescription("An ospfIfConfigError trap signifies that a packet has been received on a non-virtual interface from a router whose configuration parameters conflict with this router's configuration parameters. Note that the event optionMismatch should cause a trap only if it prevents an adjacency from forming.")
ospfVirtIfConfigError = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 5)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-TRAP-MIB", "ospfPacketType"))
if mibBuilder.loadTexts: ospfVirtIfConfigError.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIfConfigError.setDescription("An ospfVirtIfConfigError trap signifies that a packet has been received on a virtual interface from a router whose configuration parameters conflict with this router's configuration parameters. Note that the event optionMismatch should cause a trap only if it prevents an adjacency from forming.")
ospfIfAuthFailure = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 6)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-MIB", "ospfAddressLessIf"), ("OSPF-TRAP-MIB", "ospfPacketSrc"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-TRAP-MIB", "ospfPacketType"))
if mibBuilder.loadTexts: ospfIfAuthFailure.setStatus('current')
if mibBuilder.loadTexts: ospfIfAuthFailure.setDescription("An ospfIfAuthFailure trap signifies that a packet has been received on a non-virtual interface from a router whose authentication key or authentication type conflicts with this router's authentication key or authentication type.")
ospfVirtIfAuthFailure = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 7)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-TRAP-MIB", "ospfPacketType"))
if mibBuilder.loadTexts: ospfVirtIfAuthFailure.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIfAuthFailure.setDescription("An ospfVirtIfAuthFailure trap signifies that a packet has been received on a virtual interface from a router whose authentication key or authentication type conflicts with this router's authentication key or authentication type.")
ospfIfRxBadPacket = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 8)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-MIB", "ospfAddressLessIf"), ("OSPF-TRAP-MIB", "ospfPacketSrc"), ("OSPF-TRAP-MIB", "ospfPacketType"))
if mibBuilder.loadTexts: ospfIfRxBadPacket.setStatus('current')
if mibBuilder.loadTexts: ospfIfRxBadPacket.setDescription('An ospfIfRxBadPacket trap signifies that an OSPF packet has been received on a non-virtual interface that cannot be parsed.')
ospfVirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 9)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-TRAP-MIB", "ospfPacketType"))
if mibBuilder.loadTexts: ospfVirtIfRxBadPacket.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIfRxBadPacket.setDescription('An ospfVirtIfRxBadPacket trap signifies that an OSPF packet has been received on a virtual interface that cannot be parsed.')
ospfTxRetransmit = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 10)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-MIB", "ospfAddressLessIf"), ("OSPF-MIB", "ospfNbrRtrId"), ("OSPF-TRAP-MIB", "ospfPacketType"), ("OSPF-MIB", "ospfLsdbType"), ("OSPF-MIB", "ospfLsdbLsid"), ("OSPF-MIB", "ospfLsdbRouterId"))
if mibBuilder.loadTexts: ospfTxRetransmit.setStatus('current')
if mibBuilder.loadTexts: ospfTxRetransmit.setDescription('An ospfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a non-virtual interface. All packets that may be retransmitted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
ospfVirtIfTxRetransmit = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 11)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-TRAP-MIB", "ospfPacketType"), ("OSPF-MIB", "ospfLsdbType"), ("OSPF-MIB", "ospfLsdbLsid"), ("OSPF-MIB", "ospfLsdbRouterId"))
if mibBuilder.loadTexts: ospfVirtIfTxRetransmit.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIfTxRetransmit.setDescription('An ospfVirtIfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a virtual interface. All packets that may be retransmitted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
ospfOriginateLsa = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 12)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfLsdbAreaId"), ("OSPF-MIB", "ospfLsdbType"), ("OSPF-MIB", "ospfLsdbLsid"), ("OSPF-MIB", "ospfLsdbRouterId"))
if mibBuilder.loadTexts: ospfOriginateLsa.setStatus('current')
if mibBuilder.loadTexts: ospfOriginateLsa.setDescription('An ospfOriginateLsa trap signifies that a new LSA has been originated by this router. This trap should not be invoked for simple refreshes of LSAs (which happens every 30 minutes), but instead will only be invoked when an LSA is (re)originated due to a topology change. Additionally, this trap does not include LSAs that are being flushed because they have reached MaxAge.')
ospfMaxAgeLsa = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 13)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfLsdbAreaId"), ("OSPF-MIB", "ospfLsdbType"), ("OSPF-MIB", "ospfLsdbLsid"), ("OSPF-MIB", "ospfLsdbRouterId"))
if mibBuilder.loadTexts: ospfMaxAgeLsa.setStatus('current')
if mibBuilder.loadTexts: ospfMaxAgeLsa.setDescription("An ospfMaxAgeLsa trap signifies that one of the LSAs in the router's link state database has aged to MaxAge.")
ospfLsdbOverflow = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 14)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfExtLsdbLimit"))
if mibBuilder.loadTexts: ospfLsdbOverflow.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbOverflow.setDescription("An ospfLsdbOverflow trap signifies that the number of LSAs in the router's link state database has exceeded ospfExtLsdbLimit.")
ospfLsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 15)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfExtLsdbLimit"))
if mibBuilder.loadTexts: ospfLsdbApproachingOverflow.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbApproachingOverflow.setDescription("An ospfLsdbApproachingOverflow trap signifies that the number of LSAs in the router's link state database has exceeded ninety percent of ospfExtLsdbLimit.")
ospfIfStateChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 16)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-MIB", "ospfAddressLessIf"), ("OSPF-MIB", "ospfIfState"))
if mibBuilder.loadTexts: ospfIfStateChange.setStatus('current')
if mibBuilder.loadTexts: ospfIfStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of a non-virtual OSPF interface. This trap should be generated when the interface state regresses (e.g., goes from Dr to Down) or progresses to a terminal state (i.e., Point-to-Point, DR Other, Dr, or Backup).')
ospfNssaTranslatorStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 17)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfAreaId"), ("OSPF-MIB", "ospfAreaNssaTranslatorState"))
if mibBuilder.loadTexts: ospfNssaTranslatorStatusChange.setStatus('current')
if mibBuilder.loadTexts: ospfNssaTranslatorStatusChange.setDescription("An ospfNssaTranslatorStatusChange trap indicates that there has been a change in the router's ability to translate OSPF type-7 LSAs into OSPF type-5 LSAs. This trap should be generated when the translator status transitions from or to any defined status on a per-area basis.")
ospfRestartStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 18)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfRestartStatus"), ("OSPF-MIB", "ospfRestartInterval"), ("OSPF-MIB", "ospfRestartExitReason"))
if mibBuilder.loadTexts: ospfRestartStatusChange.setStatus('current')
if mibBuilder.loadTexts: ospfRestartStatusChange.setDescription('An ospfRestartStatusChange trap signifies that there has been a change in the graceful restart state for the router. This trap should be generated when the router restart status changes.')
ospfNbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 19)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfNbrIpAddr"), ("OSPF-MIB", "ospfNbrAddressLessIndex"), ("OSPF-MIB", "ospfNbrRtrId"), ("OSPF-MIB", "ospfNbrRestartHelperStatus"), ("OSPF-MIB", "ospfNbrRestartHelperAge"), ("OSPF-MIB", "ospfNbrRestartHelperExitReason"))
if mibBuilder.loadTexts: ospfNbrRestartHelperStatusChange.setStatus('current')
if mibBuilder.loadTexts: ospfNbrRestartHelperStatusChange.setDescription('An ospfNbrRestartHelperStatusChange trap signifies that there has been a change in the graceful restart helper state for the neighbor. This trap should be generated when the neighbor restart helper status transitions for a neighbor.')
ospfVirtNbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 20)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfVirtNbrArea"), ("OSPF-MIB", "ospfVirtNbrRtrId"), ("OSPF-MIB", "ospfVirtNbrRestartHelperStatus"), ("OSPF-MIB", "ospfVirtNbrRestartHelperAge"), ("OSPF-MIB", "ospfVirtNbrRestartHelperExitReason"))
if mibBuilder.loadTexts: ospfVirtNbrRestartHelperStatusChange.setStatus('current')
if mibBuilder.loadTexts: ospfVirtNbrRestartHelperStatusChange.setDescription('An ospfVirtNbrRestartHelperStatusChange trap signifies that there has been a change in the graceful restart helper state for the virtual neighbor. This trap should be generated when the virtual neighbor restart helper status transitions for a virtual neighbor.')
ospfTrapConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 3))
ospfTrapGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 3, 1))
ospfTrapCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 3, 2))
ospfTrapCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 14, 16, 3, 2, 1)).setObjects(("OSPF-TRAP-MIB", "ospfTrapControlGroup"), ("OSPF-TRAP-MIB", "ospfTrapControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ospfTrapCompliance = ospfTrapCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ospfTrapCompliance.setDescription('The compliance statement.')
ospfTrapCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 14, 16, 3, 2, 2)).setObjects(("OSPF-TRAP-MIB", "ospfTrapControlGroup"), ("OSPF-TRAP-MIB", "ospfTrapEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ospfTrapCompliance2 = ospfTrapCompliance2.setStatus('current')
if mibBuilder.loadTexts: ospfTrapCompliance2.setDescription('The compliance statement.')
ospfTrapControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 14, 16, 3, 1, 1)).setObjects(("OSPF-TRAP-MIB", "ospfSetTrap"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-TRAP-MIB", "ospfPacketType"), ("OSPF-TRAP-MIB", "ospfPacketSrc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ospfTrapControlGroup = ospfTrapControlGroup.setStatus('current')
if mibBuilder.loadTexts: ospfTrapControlGroup.setDescription('These objects are required to control traps from OSPF systems.')
ospfTrapEventGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 14, 16, 3, 1, 2)).setObjects(("OSPF-TRAP-MIB", "ospfVirtIfStateChange"), ("OSPF-TRAP-MIB", "ospfNbrStateChange"), ("OSPF-TRAP-MIB", "ospfVirtNbrStateChange"), ("OSPF-TRAP-MIB", "ospfIfConfigError"), ("OSPF-TRAP-MIB", "ospfVirtIfConfigError"), ("OSPF-TRAP-MIB", "ospfIfAuthFailure"), ("OSPF-TRAP-MIB", "ospfVirtIfAuthFailure"), ("OSPF-TRAP-MIB", "ospfIfRxBadPacket"), ("OSPF-TRAP-MIB", "ospfVirtIfRxBadPacket"), ("OSPF-TRAP-MIB", "ospfTxRetransmit"), ("OSPF-TRAP-MIB", "ospfVirtIfTxRetransmit"), ("OSPF-TRAP-MIB", "ospfOriginateLsa"), ("OSPF-TRAP-MIB", "ospfMaxAgeLsa"), ("OSPF-TRAP-MIB", "ospfLsdbOverflow"), ("OSPF-TRAP-MIB", "ospfLsdbApproachingOverflow"), ("OSPF-TRAP-MIB", "ospfIfStateChange"), ("OSPF-TRAP-MIB", "ospfNssaTranslatorStatusChange"), ("OSPF-TRAP-MIB", "ospfRestartStatusChange"), ("OSPF-TRAP-MIB", "ospfNbrRestartHelperStatusChange"), ("OSPF-TRAP-MIB", "ospfVirtNbrRestartHelperStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ospfTrapEventGroup = ospfTrapEventGroup.setStatus('current')
if mibBuilder.loadTexts: ospfTrapEventGroup.setDescription('A grouping of OSPF trap events, as specified in NOTIFICATION-TYPE constructs.')
mibBuilder.exportSymbols("OSPF-TRAP-MIB", ospfPacketType=ospfPacketType, ospfTrapControlGroup=ospfTrapControlGroup, ospfVirtIfAuthFailure=ospfVirtIfAuthFailure, ospfVirtNbrStateChange=ospfVirtNbrStateChange, ospfNbrStateChange=ospfNbrStateChange, ospfTrapCompliance=ospfTrapCompliance, ospfTraps=ospfTraps, ospfNbrRestartHelperStatusChange=ospfNbrRestartHelperStatusChange, ospfVirtIfConfigError=ospfVirtIfConfigError, ospfConfigErrorType=ospfConfigErrorType, ospfOriginateLsa=ospfOriginateLsa, ospfMaxAgeLsa=ospfMaxAgeLsa, ospfRestartStatusChange=ospfRestartStatusChange, PYSNMP_MODULE_ID=ospfTrap, ospfTrapConformance=ospfTrapConformance, ospfIfStateChange=ospfIfStateChange, ospfVirtIfTxRetransmit=ospfVirtIfTxRetransmit, ospfPacketSrc=ospfPacketSrc, ospfTrapCompliance2=ospfTrapCompliance2, ospfVirtIfRxBadPacket=ospfVirtIfRxBadPacket, ospfLsdbOverflow=ospfLsdbOverflow, ospfTrap=ospfTrap, ospfVirtIfStateChange=ospfVirtIfStateChange, ospfTrapEventGroup=ospfTrapEventGroup, ospfTrapControl=ospfTrapControl, ospfVirtNbrRestartHelperStatusChange=ospfVirtNbrRestartHelperStatusChange, ospfLsdbApproachingOverflow=ospfLsdbApproachingOverflow, ospfIfRxBadPacket=ospfIfRxBadPacket, ospfSetTrap=ospfSetTrap, ospfTxRetransmit=ospfTxRetransmit, ospfIfConfigError=ospfIfConfigError, ospfIfAuthFailure=ospfIfAuthFailure, ospfTrapGroups=ospfTrapGroups, ospfNssaTranslatorStatusChange=ospfNssaTranslatorStatusChange, ospfTrapCompliances=ospfTrapCompliances)
