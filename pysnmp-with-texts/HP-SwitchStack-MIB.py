#
# PySNMP MIB module HP-SwitchStack-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SwitchStack-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:36:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, MibIdentifier, iso, Counter32, IpAddress, NotificationType, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "MibIdentifier", "iso", "Counter32", "IpAddress", "NotificationType", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Integer32", "Bits")
MacAddress, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "RowStatus")
hpSwitchVirtualStackMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10))
hpSwitchVirtualStackMib.setRevisions(('2010-10-29 19:46', '2000-11-03 23:44',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpSwitchVirtualStackMib.setRevisionsDescriptions(('Added hpSwitchStackMemberPasswordLong to hpSwitchStackConfigMemberEntry.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpSwitchVirtualStackMib.setLastUpdated('201010291946Z')
if mibBuilder.loadTexts: hpSwitchVirtualStackMib.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpSwitchVirtualStackMib.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpSwitchVirtualStackMib.setDescription('This MIB module describes objects for managing the Stacking features of devices in the HP Integrated Communication Facility product line.')
hpSwitchStackConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 1))
hpSwitchStackAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("candidate", 1), ("disabled", 2), ("member", 3), ("command", 4), ("pending", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStackAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackAdminStatus.setDescription('The operational status of the stacking feature.')
hpSwitchStackCommandAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStackCommandAddr.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackCommandAddr.setDescription("This variable is only valid if 'hpSwitchStackAdminStatus' has been set 'member'. This is the MAC address of the command switch for this member.")
hpSwitchStackName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStackName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackName.setDescription("This variable is only valid if 'hpSwitchStackAdminStatus' has been set 'command-switch'. This is the name of the stack for which this switch is serving as the command switch (maximum length of 20 characters).")
hpSwitchStackPropagate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStackPropagate.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackPropagate.setDescription("Enable/disable SNMP community propagation. This variable is only valid if 'hpSwitchStackAdminStatus' has been set to 'command-switch'.")
hpSwitchStackAutoJoin = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStackAutoJoin.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackAutoJoin.setDescription('Enable/disable auto join on stack. This variable is only valid for candidate switch.')
hpSwitchStackAutoGrab = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStackAutoGrab.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackAutoGrab.setDescription("Enable/disable auto grab on stack. This variable is only valid if 'hpSwitchStackAdminStatus' has been set to 'command-switch'.")
hpSwitchStackConfigMemberTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 2), )
if mibBuilder.loadTexts: hpSwitchStackConfigMemberTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackConfigMemberTable.setDescription("A table that contains a group of member switches configured to be in this switch's stack.")
hpSwitchStackConfigMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 2, 1), ).setIndexNames((0, "HP-SwitchStack-MIB", "hpSwitchStackMemberSwitchNum"))
if mibBuilder.loadTexts: hpSwitchStackConfigMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackConfigMemberEntry.setDescription("A group of member switches configured to be in this switch's stack.")
hpSwitchStackMemberSwitchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStackMemberSwitchNum.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackMemberSwitchNum.setDescription('An index that uniquely identifies the member switch associated with this row entry.')
hpSwitchStackMemberMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchStackMemberMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackMemberMacAddr.setDescription('The MAC Address that identifies the member switch.')
hpSwitchStackMemberPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchStackMemberPassword.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchStackMemberPassword.setDescription('The manager password configured on the member switch. This object represents the first 17 octets of the object hpSwitchStackMemberPasswordLong; reading or writing a value to this object will also read or write hpSwitchStackMemberPasswordLong, truncating the length to 17 octets. This object always returns a 0 length octet string when read.')
hpSwitchStackMemberEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchStackMemberEntryStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackMemberEntryStatus.setDescription('The status of a stack member entry.')
hpSwitchStackMemberPasswordLong = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1025))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchStackMemberPasswordLong.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackMemberPasswordLong.setDescription('The manager password configured on the member switch. This object always returns a 0 length octet string when read. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product.')
hpStackStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 3))
hpStackStatsName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsName.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsName.setDescription('The stack name of this switch.')
hpStackStatsMembersNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsMembersNum.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMembersNum.setDescription("Number of member switches that have joined this switch's stack. This variable is only valid if this switch has been set as a 'command-switch'.")
hpStackStatsMembersUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsMembersUnreachable.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMembersUnreachable.setDescription("The number of unreachable member switches. This variable is only valid if this switch has been set as a 'command-switch'.")
hpStackStatsMemberID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsMemberID.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMemberID.setDescription('The number by which member switch is known on the stack.')
hpStackStatsMgmtIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 3, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsMgmtIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMgmtIpAddr.setDescription("The IP address of the Stack manager switch (command switch). This variable is only valid if this switch has been set as a 'member-switch'.")
hpStackStatsStackingStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("joined", 1), ("pending", 2), ("noReponse", 3), ("notCommand", 4), ("stackFull", 5), ("remoteFailure", 6), ("unknownFailure", 7), ("evicted", 8), ("commandUp", 9), ("commandDown", 10), ("unusedStatus", 11), ("undiscovered", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsStackingStatus.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsStackingStatus.setDescription("The status of this switch. This variable is only valid if this switch has been set as a 'member-switch'.")
hpStackStatsMembersTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 4), )
if mibBuilder.loadTexts: hpStackStatsMembersTable.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMembersTable.setDescription("A table containing the member switches that have joined this switch's stack.")
hpStackStatsMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 4, 1), ).setIndexNames((0, "HP-SwitchStack-MIB", "hpStackStatsMemberSwitchIndx"))
if mibBuilder.loadTexts: hpStackStatsMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMemberEntry.setDescription('The information associated with each row in the member table.')
hpStackStatsMemberSwitchIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsMemberSwitchIndx.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMemberSwitchIndx.setDescription('The index identifying the member switch.')
hpStackStatsMemberMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsMemberMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMemberMacAddr.setDescription('The MAC address of the member switch.')
hpStackStatsMemberSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsMemberSystemName.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMemberSystemName.setDescription('The system name of the member switch.')
hpStackStatsMemberDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsMemberDeviceType.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMemberDeviceType.setDescription('The device type of the member switch.')
hpStackStatsMemberOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("pending", 1), ("joined", 2), ("noReponse", 3), ("stackingDisabled", 4), ("invalidPassword", 5), ("commanderAnotherStack", 6), ("remoteFailure", 7), ("unknownFailure", 8), ("rejected", 9), ("memberUp", 10), ("memberDown", 11), ("commanderThisStack", 12), ("unusedStatus", 13), ("undiscovered", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackStatsMemberOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpStackStatsMemberOperStatus.setDescription('The current state of the member switch.')
hpSwitchDiscoveryConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 5))
hpSwitchDiscoveryAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDiscoveryAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDiscoveryAdminStatus.setDescription('The operational status of the discovery protocol.')
hpSwitchDiscoveryTransmissionInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDiscoveryTransmissionInterval.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDiscoveryTransmissionInterval.setDescription('The interval between the sending out of new discovery packets.')
hpDiscoverStatsCandidatesTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 6), )
if mibBuilder.loadTexts: hpDiscoverStatsCandidatesTable.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsCandidatesTable.setDescription('A table containing the switches that have been discovered as a candidate to form a stack.')
hpDiscoverStatsCandidateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 6, 1), ).setIndexNames((0, "HP-SwitchStack-MIB", "hpDiscoverStatsCandidateMacAddr"))
if mibBuilder.loadTexts: hpDiscoverStatsCandidateEntry.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsCandidateEntry.setDescription('The information associated with each row in the candidate table.')
hpDiscoverStatsCandidateMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDiscoverStatsCandidateMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsCandidateMacAddr.setDescription('The MAC address of the candidate switch. Used as an index identifying row in the table.')
hpDiscoverStatsCandidateSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDiscoverStatsCandidateSystemName.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsCandidateSystemName.setDescription('The system name of the candidate switch.')
hpDiscoverStatsCandidateDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDiscoverStatsCandidateDeviceType.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsCandidateDeviceType.setDescription('The device type of the candidate switch.')
hpDiscoverStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 7), )
if mibBuilder.loadTexts: hpDiscoverStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsTable.setDescription('A table containing the switches that have been discovered on the network.')
hpDiscoverStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 7, 1), ).setIndexNames((0, "HP-SwitchStack-MIB", "hpDiscoverStatsSwitchIndex"))
if mibBuilder.loadTexts: hpDiscoverStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsEntry.setDescription('The information associated with each row in the discover table.')
hpDiscoverStatsSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDiscoverStatsSwitchIndex.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsSwitchIndex.setDescription('The index identifying the row in the table.')
hpDiscoverStatsSwitchStackName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDiscoverStatsSwitchStackName.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsSwitchStackName.setDescription('The stack name of the discovered switch.')
hpDiscoverStatsSwitchMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 7, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDiscoverStatsSwitchMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsSwitchMacAddr.setDescription('The MAC address of the discovered switch.')
hpDiscoverStatsSwitchSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDiscoverStatsSwitchSystemName.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsSwitchSystemName.setDescription('The system name of the discovered switch.')
hpDiscoverStatsSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDiscoverStatsSwitchStatus.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsSwitchStatus.setDescription('The status of the discovered switch.')
hpSwitchVirtualStackMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8))
hpSwitchVirtualStackMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8, 1))
hpSwitchVirtualStackMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8, 2))
hpSwitchVirtualStackMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8, 1, 1)).setObjects(("HP-SwitchStack-MIB", "hpSwitchStackConfigGroup"), ("HP-SwitchStack-MIB", "hpSwitchStackStatsGroup"), ("HP-SwitchStack-MIB", "hpSwitchDiscoverConfigGroup"), ("HP-SwitchStack-MIB", "hpDiscoverStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchVirtualStackMibCompliance = hpSwitchVirtualStackMibCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchVirtualStackMibCompliance.setDescription('The compliance statement for devices implementing the HP Stack Mib.')
hpSwitchVirtualStackMibCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8, 1, 2)).setObjects(("HP-SwitchStack-MIB", "hpSwitchStackConfigGroup1"), ("HP-SwitchStack-MIB", "hpSwitchStackStatsGroup"), ("HP-SwitchStack-MIB", "hpSwitchDiscoverConfigGroup"), ("HP-SwitchStack-MIB", "hpDiscoverStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchVirtualStackMibCompliance1 = hpSwitchVirtualStackMibCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchVirtualStackMibCompliance1.setDescription('The compliance statement for devices implementing the HP Stack Mib.')
hpSwitchStackConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8, 2, 1)).setObjects(("HP-SwitchStack-MIB", "hpSwitchStackAdminStatus"), ("HP-SwitchStack-MIB", "hpSwitchStackCommandAddr"), ("HP-SwitchStack-MIB", "hpSwitchStackName"), ("HP-SwitchStack-MIB", "hpSwitchStackPropagate"), ("HP-SwitchStack-MIB", "hpSwitchStackAutoJoin"), ("HP-SwitchStack-MIB", "hpSwitchStackAutoGrab"), ("HP-SwitchStack-MIB", "hpSwitchStackMemberSwitchNum"), ("HP-SwitchStack-MIB", "hpSwitchStackMemberMacAddr"), ("HP-SwitchStack-MIB", "hpSwitchStackMemberPassword"), ("HP-SwitchStack-MIB", "hpSwitchStackMemberEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchStackConfigGroup = hpSwitchStackConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchStackConfigGroup.setDescription('A collection of objects for configuring a stack.')
hpSwitchStackStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8, 2, 2)).setObjects(("HP-SwitchStack-MIB", "hpStackStatsName"), ("HP-SwitchStack-MIB", "hpStackStatsMembersNum"), ("HP-SwitchStack-MIB", "hpStackStatsMembersUnreachable"), ("HP-SwitchStack-MIB", "hpStackStatsMemberID"), ("HP-SwitchStack-MIB", "hpStackStatsMgmtIpAddr"), ("HP-SwitchStack-MIB", "hpStackStatsStackingStatus"), ("HP-SwitchStack-MIB", "hpStackStatsMemberSwitchIndx"), ("HP-SwitchStack-MIB", "hpStackStatsMemberMacAddr"), ("HP-SwitchStack-MIB", "hpStackStatsMemberSystemName"), ("HP-SwitchStack-MIB", "hpStackStatsMemberDeviceType"), ("HP-SwitchStack-MIB", "hpStackStatsMemberOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchStackStatsGroup = hpSwitchStackStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackStatsGroup.setDescription('A collection of objects for determining state and status of a stack.')
hpSwitchDiscoverConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8, 2, 3)).setObjects(("HP-SwitchStack-MIB", "hpSwitchDiscoveryAdminStatus"), ("HP-SwitchStack-MIB", "hpSwitchDiscoveryTransmissionInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDiscoverConfigGroup = hpSwitchDiscoverConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDiscoverConfigGroup.setDescription('A collection of objects for configuring the state of the stack discovery protocol.')
hpDiscoverStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8, 2, 4)).setObjects(("HP-SwitchStack-MIB", "hpDiscoverStatsCandidateMacAddr"), ("HP-SwitchStack-MIB", "hpDiscoverStatsCandidateSystemName"), ("HP-SwitchStack-MIB", "hpDiscoverStatsCandidateDeviceType"), ("HP-SwitchStack-MIB", "hpDiscoverStatsSwitchIndex"), ("HP-SwitchStack-MIB", "hpDiscoverStatsSwitchStackName"), ("HP-SwitchStack-MIB", "hpDiscoverStatsSwitchMacAddr"), ("HP-SwitchStack-MIB", "hpDiscoverStatsSwitchSystemName"), ("HP-SwitchStack-MIB", "hpDiscoverStatsSwitchStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpDiscoverStatsGroup = hpDiscoverStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpDiscoverStatsGroup.setDescription('A collection of objects for viewing the discovered devices by the stack discovery protocol.')
hpSwitchStackConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 10, 8, 2, 5)).setObjects(("HP-SwitchStack-MIB", "hpSwitchStackAdminStatus"), ("HP-SwitchStack-MIB", "hpSwitchStackCommandAddr"), ("HP-SwitchStack-MIB", "hpSwitchStackName"), ("HP-SwitchStack-MIB", "hpSwitchStackPropagate"), ("HP-SwitchStack-MIB", "hpSwitchStackAutoJoin"), ("HP-SwitchStack-MIB", "hpSwitchStackAutoGrab"), ("HP-SwitchStack-MIB", "hpSwitchStackMemberSwitchNum"), ("HP-SwitchStack-MIB", "hpSwitchStackMemberMacAddr"), ("HP-SwitchStack-MIB", "hpSwitchStackMemberPasswordLong"), ("HP-SwitchStack-MIB", "hpSwitchStackMemberEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchStackConfigGroup1 = hpSwitchStackConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStackConfigGroup1.setDescription('A collection of objects for configuring a stack.')
mibBuilder.exportSymbols("HP-SwitchStack-MIB", hpStackStatsMemberMacAddr=hpStackStatsMemberMacAddr, hpSwitchVirtualStackMib=hpSwitchVirtualStackMib, hpSwitchVirtualStackMibCompliances=hpSwitchVirtualStackMibCompliances, hpStackStatsMembersTable=hpStackStatsMembersTable, hpSwitchStackPropagate=hpSwitchStackPropagate, hpSwitchDiscoveryTransmissionInterval=hpSwitchDiscoveryTransmissionInterval, hpDiscoverStatsCandidateEntry=hpDiscoverStatsCandidateEntry, hpSwitchStackMemberSwitchNum=hpSwitchStackMemberSwitchNum, hpDiscoverStatsCandidateDeviceType=hpDiscoverStatsCandidateDeviceType, hpDiscoverStatsTable=hpDiscoverStatsTable, hpSwitchDiscoveryAdminStatus=hpSwitchDiscoveryAdminStatus, hpDiscoverStatsSwitchStatus=hpDiscoverStatsSwitchStatus, hpSwitchVirtualStackMibCompliance=hpSwitchVirtualStackMibCompliance, hpSwitchStackName=hpSwitchStackName, hpSwitchStackMemberPasswordLong=hpSwitchStackMemberPasswordLong, hpSwitchStackConfigMemberEntry=hpSwitchStackConfigMemberEntry, hpSwitchStackCommandAddr=hpSwitchStackCommandAddr, hpSwitchStackConfigGroup=hpSwitchStackConfigGroup, hpStackStatsMembersNum=hpStackStatsMembersNum, hpSwitchStackStatsGroup=hpSwitchStackStatsGroup, hpStackStatsMemberEntry=hpStackStatsMemberEntry, hpDiscoverStatsCandidateSystemName=hpDiscoverStatsCandidateSystemName, hpDiscoverStatsSwitchMacAddr=hpDiscoverStatsSwitchMacAddr, hpStackStatsMembersUnreachable=hpStackStatsMembersUnreachable, hpStackStatsStackingStatus=hpStackStatsStackingStatus, hpDiscoverStatsSwitchStackName=hpDiscoverStatsSwitchStackName, hpSwitchDiscoveryConfig=hpSwitchDiscoveryConfig, hpDiscoverStatsCandidatesTable=hpDiscoverStatsCandidatesTable, hpSwitchStackConfigGroup1=hpSwitchStackConfigGroup1, hpSwitchStackMemberMacAddr=hpSwitchStackMemberMacAddr, hpDiscoverStatsEntry=hpDiscoverStatsEntry, hpStackStatsMemberOperStatus=hpStackStatsMemberOperStatus, hpSwitchDiscoverConfigGroup=hpSwitchDiscoverConfigGroup, hpSwitchStackMemberPassword=hpSwitchStackMemberPassword, hpStackStatsMemberDeviceType=hpStackStatsMemberDeviceType, hpSwitchVirtualStackMibCompliance1=hpSwitchVirtualStackMibCompliance1, hpSwitchStackAutoGrab=hpSwitchStackAutoGrab, hpStackStatsMemberSwitchIndx=hpStackStatsMemberSwitchIndx, PYSNMP_MODULE_ID=hpSwitchVirtualStackMib, hpDiscoverStatsCandidateMacAddr=hpDiscoverStatsCandidateMacAddr, hpSwitchVirtualStackMibConformance=hpSwitchVirtualStackMibConformance, hpDiscoverStatsGroup=hpDiscoverStatsGroup, hpSwitchStackMemberEntryStatus=hpSwitchStackMemberEntryStatus, hpSwitchStackConfigMemberTable=hpSwitchStackConfigMemberTable, hpStackStatsMgmtIpAddr=hpStackStatsMgmtIpAddr, hpSwitchVirtualStackMibGroups=hpSwitchVirtualStackMibGroups, hpDiscoverStatsSwitchIndex=hpDiscoverStatsSwitchIndex, hpSwitchStackConfig=hpSwitchStackConfig, hpStackStatsMemberID=hpStackStatsMemberID, hpStackStatsName=hpStackStatsName, hpSwitchStackAutoJoin=hpSwitchStackAutoJoin, hpStackStats=hpStackStats, hpDiscoverStatsSwitchSystemName=hpDiscoverStatsSwitchSystemName, hpSwitchStackAdminStatus=hpSwitchStackAdminStatus, hpStackStatsMemberSystemName=hpStackStatsMemberSystemName)
