#
# PySNMP MIB module X25G-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/X25G-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
experimental, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, Counter32, IpAddress, Bits, ObjectIdentity, ModuleIdentity, MibIdentifier, TimeTicks, NotificationType, enterprises, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "experimental", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "Counter32", "IpAddress", "Bits", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "TimeTicks", "NotificationType", "enterprises", "Integer32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
x25g = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11))
x25gwId = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11, 1))
x25gwIdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1), )
if mibBuilder.loadTexts: x25gwIdTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdTable.setDescription('A table that contains information that identifies the hardware and software that make up the specified X.25 card.')
x25gwIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1), ).setIndexNames((0, "X25G-MIB", "x25gwIdIndex"))
if mibBuilder.loadTexts: x25gwIdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdEntry.setDescription('There is one entry in this table for every X.25 card in the chassis.')
x25gwIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdIndex.setDescription('An index that uniquely identifies the X.25 card for which this row in the table pertains. The value of this index matches the value of the index for the corresponding entity in the entity table of the chassis MIB.')
x25gwIdHardwareSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdHardwareSerNum.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdHardwareSerNum.setDescription("The X.25 card's hardware serial number as stored in EEPROM.")
x25gwIdHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdHardwareRev.setDescription('The hardware revision of the specified X.25 card as stored in its EEPROM.')
x25gwIdSoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdSoftwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdSoftwareRev.setDescription('The revision of the software being executed in the specified X.25 card.')
x25gwIdCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("i80386", 1), ("i80486", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdCpuType.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdCpuType.setDescription('Defines the type of CPU present on the X.25 Gateway NAC.')
x25gwIdRamInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdRamInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdRamInstalled.setDescription('Specifies the amount of DRAM installed on the X.25 Gateway NAC in Kbytes.')
x25gwIdFlashInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdFlashInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdFlashInstalled.setDescription('Specifies the amount of Flash Rom installed on the X.25 Gateway NAC in Kbytes.')
x25gwIdOperCfgSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operNvram", 1), ("adminChanged", 2), ("adminNvram", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdOperCfgSts.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdOperCfgSts.setDescription('Informs the operator as to whether the operational parameters are the NVRAM parameters or if the administrative parameters have been saved to NVRAM.')
x25gwIdSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdSelfTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdSelfTestResult.setDescription('Displays the results of the most resent self test performed by the X.25 Gateway NAC. If all tests have passed a value of 0 is returned.')
x25gwIdMgmtConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdMgmtConnect.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwIdMgmtConnect.setDescription('Indicates the current status of X.25 gateway user interface.')
x25gwCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11, 2))
x25gwCmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1), )
if mibBuilder.loadTexts: x25gwCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdTable.setDescription('The X.25 Card Command table contains an entry for each of the manageable X.25 Cards in the chassis. It provides a means through which to take specific actions on one or more X.25 cards in the NAS chassis. The number of entries in this table is given by the value of x25gwIdNumber.')
x25gwCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1), ).setIndexNames((0, "X25G-MIB", "x25gwCmdIndex"))
if mibBuilder.loadTexts: x25gwCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdEntry.setDescription('There is one X.25 Card Command entry per X.25 Card in the chassis.')
x25gwCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCmdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdIndex.setDescription("A unique value for each X.25 Card in the chassis. The value of this object matches the value of the index of the corresponding X.25 Card's entry in the entity table of the chassis MIB.")
x25gwCmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCmdMgtStationId.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdMgtStationId.setDescription('This object is a generic read-write variable that a Management Station (MS) can use to guarantee that the results from a given command are the results of a command issued by that specific MS. Each MS must SET a unique value to this object when doing commands and GET the value of this object together with x25gwCmdReqId and x25gwCmdResult to detect interference from other MSs.')
x25gwCmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCmdReqId.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdReqId.setDescription('This object contains the value of the request-id field in the SNMP PDU which invoked the current or most recent command or test on this X.25 Card. If the request-id is unknown or undefined, this object contains the value zero.')
x25gwCmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noCommand", 1), ("saveToNVRAM", 2), ("restoreFromDefault", 4), ("nonDisruptSelfTest", 5), ("disruptSelfTest", 6), ("softwareReset", 7), ("downloadCfgFile", 8), ("uploadCfgFile", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCmdFunction.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdFunction.setDescription('This object contains a value which describes the command which is being invoked.')
x25gwCmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCmdForce.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdForce.setDescription('In some cases, the X.25 Card may be in a state such that certain commands could adversely affect connections. In such cases, a command request with this object not present or set to noForce will result in a warning. If the operator elects to ignore such warnings, this object can be set to force in a subsequent issue of the command to cause the command to be carried out regardless of its potentially hazzardous effects.')
x25gwCmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCmdParam.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdParam.setDescription('This object contains parameters that are specific to the particular command being issued. In some cases, there will be no aditional parameters required.')
x25gwCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCmdResult.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdResult.setDescription('This object contains the result of the most recently requested command or test, or the value none(1) if no commands have been requested since the last reset.')
x25gwCmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 20, 22, 46, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 86, 87, 88, 93))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("fileTooBig", 46), ("userInterfaceActive", 58), ("badFlashRomID", 61), ("badFlashVoltage", 62), ("flashEraseError", 63), ("eraseSequenceError", 64), ("eraseExecutionError", 65), ("receiveBufferOverflow", 66), ("badProgramVoltage", 68), ("programmingDataError", 69), ("programCodeError", 70), ("invalidCodeError", 71), ("romCrcBad", 72), ("pendingSoftwareDownload", 73), ("ramCrcBad", 74), ("invalidRomId", 75), ("cardIdMismatch", 84), ("cardIdUnknown", 85), ("tftpTimeout", 86), ("flashEraseTimeout", 87), ("invalidFileHeader", 88), ("bulkTransferInProcess", 93)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCmdCode.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCmdCode.setDescription('The Value of this object is value of this object is noError(1) if the command was successful, and indicates a further description of what went wrong if it was unsuccessful.')
x25gwCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11, 3))
x25gwCfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1), )
if mibBuilder.loadTexts: x25gwCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgTable.setDescription('A table of configurable parameters specific to the X.25 Gateway NAC.')
x25gwCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1), ).setIndexNames((0, "X25G-MIB", "x25gwCfgIndex"))
if mibBuilder.loadTexts: x25gwCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgEntry.setDescription('')
x25gwCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgIndex.setDescription('A unique value for each X.25 NAC installed in the chassis. The value of this index is identical to the index in the USR chassis MIB associates with the X.25 Gateway Card entity.')
x25gwCfgUiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("padAccess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCfgUiPort.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgUiPort.setDescription('Defines how the user interface port on the X.25 NIC will be used. When configured for PAD access the UI port will provide a means of accessing the X.25 network via a direct connected serial device.')
x25gwCfgLocModemConn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("dial", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgLocModemConn.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgLocModemConn.setDescription('Defines whether the gateway UI access will be via direct attachment or by Dial up Modem.')
x25gwCfgRoutingType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("subAddr", 2), ("callUserData", 3), ("both", 4), ("managmentOnly", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgRoutingType.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgRoutingType.setDescription('Determines the means by which X.25 call will be routed to the NMC or modem. Default=None(1).')
x25gwCfgCudRoutStr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgCudRoutStr.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgCudRoutStr.setDescription('Call user data string is used to compare to the incoming X.25 call request CUD. If they match then the call is routed to the NMC. Default=MGMTOVX25. ')
x25gwCfgX121SubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgX121SubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgX121SubAddr.setDescription('X.121 Subaddress is used to compare to the incoming X.25 call request Subaddress. If they match then the call is routed to the NMC. Default=99.')
x25gwCfgSysDate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgSysDate.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgSysDate.setDescription('X.25 gateway system date. Default = 01-01-95.')
x25gwCfgSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgSysTime.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwCfgSysTime.setDescription('X.25 gateway system time. Default = 00:00:00.')
x25gwTrapEna = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11, 4))
x25gwTrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 11, 4, 1), )
if mibBuilder.loadTexts: x25gwTrapEnaTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwTrapEnaTable.setDescription('Table containing objects to enable traps on the X.25 Cards in the chassis.')
x25gwTrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 11, 4, 1, 1), ).setIndexNames((0, "X25G-MIB", "x25gwTrapEnaIndex"))
if mibBuilder.loadTexts: x25gwTrapEnaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwTrapEnaEntry.setDescription('There is one entry for each X.25 Card in the chassis.')
x25gwTrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwTrapEnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwTrapEnaIndex.setDescription('A unique index identifying the X.25 Card to which the trap enable objects pertain.')
x25gwTrapEnaUiReset = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwTrapEnaUiReset.setStatus('mandatory')
if mibBuilder.loadTexts: x25gwTrapEnaUiReset.setDescription('Enables reporting of NAC Reset by user interface command traps. Default=disable(2).')
mibBuilder.exportSymbols("X25G-MIB", x25gwIdCpuType=x25gwIdCpuType, x25gwIdHardwareSerNum=x25gwIdHardwareSerNum, x25gwCmdParam=x25gwCmdParam, usr=usr, x25gwIdMgmtConnect=x25gwIdMgmtConnect, x25gwCmdIndex=x25gwCmdIndex, x25gwCmdResult=x25gwCmdResult, x25gwIdRamInstalled=x25gwIdRamInstalled, x25gwIdHardwareRev=x25gwIdHardwareRev, x25gwCfg=x25gwCfg, x25gwCfgEntry=x25gwCfgEntry, x25gwCfgX121SubAddr=x25gwCfgX121SubAddr, x25g=x25g, x25gwCmdFunction=x25gwCmdFunction, x25gwTrapEna=x25gwTrapEna, x25gwTrapEnaTable=x25gwTrapEnaTable, x25gwTrapEnaEntry=x25gwTrapEnaEntry, x25gwCmdCode=x25gwCmdCode, x25gwCmdForce=x25gwCmdForce, x25gwCfgSysTime=x25gwCfgSysTime, x25gwCfgUiPort=x25gwCfgUiPort, x25gwCmdTable=x25gwCmdTable, x25gwIdSoftwareRev=x25gwIdSoftwareRev, x25gwCfgSysDate=x25gwCfgSysDate, x25gwIdOperCfgSts=x25gwIdOperCfgSts, x25gwIdIndex=x25gwIdIndex, x25gwCmdReqId=x25gwCmdReqId, x25gwIdTable=x25gwIdTable, x25gwCfgIndex=x25gwCfgIndex, x25gwCmdEntry=x25gwCmdEntry, x25gwTrapEnaIndex=x25gwTrapEnaIndex, x25gwCmd=x25gwCmd, x25gwId=x25gwId, x25gwCmdMgtStationId=x25gwCmdMgtStationId, nas=nas, x25gwCfgLocModemConn=x25gwCfgLocModemConn, x25gwIdEntry=x25gwIdEntry, x25gwCfgTable=x25gwCfgTable, x25gwCfgCudRoutStr=x25gwCfgCudRoutStr, x25gwTrapEnaUiReset=x25gwTrapEnaUiReset, x25gwIdSelfTestResult=x25gwIdSelfTestResult, x25gwCfgRoutingType=x25gwCfgRoutingType, x25gwIdFlashInstalled=x25gwIdFlashInstalled)
