#
# PySNMP MIB module NSCDXCDA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSCDXCDA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
nscDx, = mibBuilder.importSymbols("NSC-MIB", "nscDx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Gauge32, NotificationType, IpAddress, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Integer32, ModuleIdentity, NotificationType, MibIdentifier, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "NotificationType", "IpAddress", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Integer32", "ModuleIdentity", "NotificationType", "MibIdentifier", "Unsigned32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nscDxCda = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3))
nscDxCdaTraceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1), )
if mibBuilder.loadTexts: nscDxCdaTraceInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoTable.setDescription('List of trace information entries.')
nscDxCdaTraceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1), ).setIndexNames((0, "NSCDXCDA-MIB", "nscDxCdaTraceInfoEntKeyId"))
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntry.setDescription('Trace information entry.')
nscDxCdaTraceInfoEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxCdaTraceInfoEntTraceSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTraceSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTraceSeverity.setDescription('Trace buffer severity level. Higher numbers indicate that the message is more important than lower numbers.')
nscDxCdaTraceInfoEntTraceFacilityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTraceFacilityMask.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTraceFacilityMask.setDescription('Bit mask of trace facilities enabled. Facilities available: Executive (0x00000001), Console (0x00000002), Packets (0x00000004), Bridge (0x00000008), LocalIP (0x00000010), Dlcx (0x00000020), Xport (0x00020000), Session (0x00040000), Device (0x00080000), Bus&tag (0x00100000), Escon (0x00200000), Greenline (0x00400000), Ho15 (0x00800000), Isr (0x01000000), All (0xffffffff), None (0x0)')
nscDxCdaTraceInfoEntTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTrapSeverity.setDescription('Trap severity level. Higher numbers indicate that the message is more important than lower numbers.')
nscDxCdaTraceInfoEntTrapFacilityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTrapFacilityMask.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTrapFacilityMask.setDescription('Bit mask of trap facilities enabled. Facilities available: Executive (0x00000001), Console (0x00000002), Packets (0x00000004), Bridge (0x00000008), LocalIP (0x00000010), Dlcx (0x00000020), Xport (0x00020000), Session (0x00040000), Device (0x00080000), Bus&tag (0x00100000), Escon (0x00200000), Greenline (0x00400000), Ho15 (0x00800000), Isr (0x01000000), All (0xffffffff), None (0x0)')
nscDxCdaTraceInfoEntFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("executive", 0), ("console", 1), ("packets", 2), ("bridge", 3), ("localip", 4), ("dlcx", 5), ("xport", 17), ("session", 18), ("device", 19), ("bus-tag", 20), ("escon", 21), ("greenline", 22), ("ho15", 23), ("isr", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntFacility.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntFacility.setDescription('Facility (activity in progress) of last trace/trap.')
nscDxCdaTraceInfoEntSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntSeverity.setDescription('Severity of last trace/trap. Higher numbers indicate that the message is more important than lower numbers.')
nscDxCdaTraceInfoEntMsgnum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntMsgnum.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntMsgnum.setDescription('Message number representing the last trace/trap.')
nscDxCdaTraceInfoEntTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTimestamp.setDescription('Timestamp of last trace/trap. This value is an unsigned 32 bit integer which wraps when it reaches it highest value. The speed that the count changes is board dependent, but it is usually the processor clock speed.')
nscDxCdaTraceInfoEntMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntMsg.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntMsg.setDescription('Ascii string of last trace/trap.')
nscDxCdaTraceTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2), )
if mibBuilder.loadTexts: nscDxCdaTraceTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceTable.setDescription('List of trace entries.')
nscDxCdaTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1), ).setIndexNames((0, "NSCDXCDA-MIB", "nscDxCdaTraceEntKeyId"), (0, "NSCDXCDA-MIB", "nscDxCdaTraceEntNum"))
if mibBuilder.loadTexts: nscDxCdaTraceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceEntry.setDescription('Trace entry.')
nscDxCdaTraceEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxCdaTraceEntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntNum.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceEntNum.setDescription('Trace entry number.')
nscDxCdaTraceEntFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("executive", 0), ("console", 1), ("packets", 2), ("bridge", 3), ("localip", 4), ("dlcx", 5), ("xport", 17), ("session", 18), ("device", 19), ("bus-tag", 20), ("escon", 21), ("greenline", 22), ("ho15", 23), ("isr", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntFacility.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceEntFacility.setDescription('Facility of this trace message.')
nscDxCdaTraceEntSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceEntSeverity.setDescription('Severity of this trace message. Higher numbers indicate that the message is more important than lower numbers.')
nscDxCdaTraceEntMsgnum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntMsgnum.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceEntMsgnum.setDescription('Message number representing this trace message.')
nscDxCdaTraceEntTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceEntTimestamp.setDescription('Timestamp of last trace/trap. This value is an unsigned 32 bit integer which wraps when it reaches it highest value. The speed that the count changes is board dependent, but it is usually the processor clock speed.')
nscDxCdaTraceEntMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntMsg.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaTraceEntMsg.setDescription('Ascii string of this trace message.')
nscDxCdaProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3), )
if mibBuilder.loadTexts: nscDxCdaProfilesTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaProfilesTable.setDescription('List of profile entries.')
nscDxCdaProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1), ).setIndexNames((0, "NSCDXCDA-MIB", "nscDxCdaProfilesEntKeyId"))
if mibBuilder.loadTexts: nscDxCdaProfilesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaProfilesEntry.setDescription('Profile entry.')
nscDxCdaProfilesEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaProfilesEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaProfilesEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxCdaProfilesEntDateWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaProfilesEntDateWritten.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaProfilesEntDateWritten.setDescription('The date that the profiles were last saved. The date is stored with the high order (first) byte zero, the second byte is the month, the third byte is the day and the low order (fourth) byte is the year. Each byte is stored as two, four bit decimal digits (BCD). For example the value 0x11 represents 11 in decimal.')
nscDxCdaProfilesEntTimeWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaProfilesEntTimeWritten.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaProfilesEntTimeWritten.setDescription('The time that the profiles were last saved. The time is stored with the high order (first) byte zero, the second byte is the hour, the third byte is the minute and the low order (fourth) byte is the second. Each byte is stored as two, four bit decimal digits (BCD). For example the value 0x53 represents 53 in decimal.')
nscDxCdaProfilesEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaProfilesEntName.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaProfilesEntName.setDescription('Console name displayed in console prompt.')
nscDxCdaProfilesEntSaveProfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modified", 1), ("up-to-date", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaProfilesEntSaveProfiles.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaProfilesEntSaveProfiles.setDescription('Toggle switch to save profiles in eeprom.')
nscDxCdaProfilesEntProcessorSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaProfilesEntProcessorSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxCdaProfilesEntProcessorSpecific.setDescription('A reference to MIB definitions specific to the particular processor being used to realize the interface. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.')
nscDxTrace = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 1, 3) + (0,1)).setObjects(("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntKeyId"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntFacility"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntSeverity"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntMsgnum"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntTimestamp"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntMsg"))
if mibBuilder.loadTexts: nscDxTrace.setDescription('The nscDxTrace event is generated when a trace message is generated with (1) severity greater or equal to the trap severity and (2) facility included in the trap faclility.')
mibBuilder.exportSymbols("NSCDXCDA-MIB", nscDxCdaTraceEntKeyId=nscDxCdaTraceEntKeyId, nscDxCdaTraceEntMsg=nscDxCdaTraceEntMsg, nscDxCdaProfilesTable=nscDxCdaProfilesTable, nscDxCdaProfilesEntName=nscDxCdaProfilesEntName, nscDxCdaTraceInfoEntMsg=nscDxCdaTraceInfoEntMsg, nscDxCdaTraceEntNum=nscDxCdaTraceEntNum, nscDxCdaTraceInfoEntFacility=nscDxCdaTraceInfoEntFacility, nscDxCdaTraceEntFacility=nscDxCdaTraceEntFacility, nscDxCdaTraceTable=nscDxCdaTraceTable, nscDxCdaProfilesEntTimeWritten=nscDxCdaProfilesEntTimeWritten, nscDxCdaTraceInfoEntTrapFacilityMask=nscDxCdaTraceInfoEntTrapFacilityMask, nscDxCdaTraceInfoTable=nscDxCdaTraceInfoTable, nscDxCdaTraceEntMsgnum=nscDxCdaTraceEntMsgnum, nscDxCdaTraceInfoEntMsgnum=nscDxCdaTraceInfoEntMsgnum, nscDxCdaProfilesEntDateWritten=nscDxCdaProfilesEntDateWritten, nscDxCdaProfilesEntProcessorSpecific=nscDxCdaProfilesEntProcessorSpecific, nscDxCdaTraceInfoEntTraceFacilityMask=nscDxCdaTraceInfoEntTraceFacilityMask, nscDxCdaTraceInfoEntTraceSeverity=nscDxCdaTraceInfoEntTraceSeverity, nscDxCdaTraceEntTimestamp=nscDxCdaTraceEntTimestamp, nscDxTrace=nscDxTrace, nscDxCdaTraceInfoEntSeverity=nscDxCdaTraceInfoEntSeverity, nscDxCdaProfilesEntKeyId=nscDxCdaProfilesEntKeyId, nscDxCdaTraceInfoEntTimestamp=nscDxCdaTraceInfoEntTimestamp, nscDxCdaTraceInfoEntKeyId=nscDxCdaTraceInfoEntKeyId, nscDxCdaTraceInfoEntry=nscDxCdaTraceInfoEntry, nscDxCdaProfilesEntry=nscDxCdaProfilesEntry, nscDxCdaTraceInfoEntTrapSeverity=nscDxCdaTraceInfoEntTrapSeverity, nscDxCdaProfilesEntSaveProfiles=nscDxCdaProfilesEntSaveProfiles, nscDxCda=nscDxCda, nscDxCdaTraceEntSeverity=nscDxCdaTraceEntSeverity, nscDxCdaTraceEntry=nscDxCdaTraceEntry)
