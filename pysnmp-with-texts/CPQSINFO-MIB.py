#
# PySNMP MIB module CPQSINFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQSINFO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
cpqHoTrapFlags, compaq = mibBuilder.importSymbols("CPQHOST-MIB", "cpqHoTrapFlags", "compaq")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
IpAddress, TimeTicks, iso, Unsigned32, NotificationType, NotificationType, Gauge32, ModuleIdentity, Bits, ObjectIdentity, Counter64, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "iso", "Unsigned32", "NotificationType", "NotificationType", "Gauge32", "ModuleIdentity", "Bits", "ObjectIdentity", "Counter64", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2))
cpqSiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 1))
cpqSiComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2))
cpqSiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 1))
cpqSiAsset = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 2))
cpqSiSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 3))
cpqSiSystemBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 4))
cpqSiBoardRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 5))
cpqSiRackServer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 6))
cpqSiVideo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 7))
cpqSiMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 8))
cpqSiHotPlugSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 9))
cpqSiSystemBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 10))
cpqSiDockingStation = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 11))
cpqSiFru = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 12))
cpqSiRackEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 13))
cpqSiServerBlade = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 14))
cpqSiRack = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 15))
cpqSiMP = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 16))
cpqSiOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4))
cpqSiMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMibRevMajor.setDescription('The major revision level of the MIB. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
cpqSiMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMibRevMinor.setDescription('The minor revision level of the MIB. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqSiMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMibCondition.setDescription('The overall condition. This object represents the overall status of the server information represented by this MIB.')
cpqSiOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiOsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiOsCommonPollFreq.setDescription("The Insight Agent's polling frequency. The frequency, in seconds, at which the Insight Agent requests information from the device driver. A frequency of zero (0) indicates that the Insight Agent retrieves the information upon request of a management station, it does not poll the device driver at a specific interval. If the poll frequency is zero (0) all attempts to write to this object will fail. If the poll frequency is non-zero, setting this value will change the polling frequency of the Insight Agent. Setting the poll frequency to zero (0) will always fail, an agent may also choose to fail any request to change the poll frequency to a value that would severely impact system performance.")
cpqSiOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqSiOsCommonModuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiOsCommonModuleTable.setDescription('A table of software modules that provide an interface to the device this MIB describes.')
cpqSiOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqSiOsCommonModuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiOsCommonModuleEntry.setDescription('A description of a software module that provides an interface to the device this MIB describes.')
cpqSiOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModuleIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiOsCommonModuleIndex.setDescription('A unique index for this module description.')
cpqSiOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModuleName.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiOsCommonModuleName.setDescription('The module name.')
cpqSiOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModuleVersion.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiOsCommonModuleVersion.setDescription('The module version in XX.YY format. Where XX is the major version number and YY is the minor version number. This field will be a null (size 0) string if the agent cannot provide the module version.')
cpqSiOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModuleDate.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiOsCommonModuleDate.setDescription('The module date. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first.')
cpqSiOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModulePurpose.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiOsCommonModulePurpose.setDescription('The purpose of the module described in this entry.')
cpqSiSysSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysSerialNum.setDescription('The serial number of the physical system unit. The string will be empty if the system does not report the serial number function.')
cpqSiFormFactor = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("portable", 2), ("laptop", 3), ("desktop", 4), ("tower", 5), ("mini-tower", 6), ("rack-mount", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiFormFactor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFormFactor.setDescription('The form factor of the system. Setting this variable to unknown will fail.')
cpqSiAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiAssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiAssetTag.setDescription('The customer changeable identifier that is set to the system serial number at the time of manufacture. The string will be empty if the system does not report this function.')
cpqSiOwnershipTag = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOwnershipTag.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiOwnershipTag.setDescription('This is a customer changeable identifier that will be displayed by ROM at POST. This is an 80 byte standard ASCII character string and is Administrator Password protected. An example could be: Property of Hewlett-Packard Company The string should be NULL terminated. This item will be empty if the system does not report this function.')
cpqSiSysServiceNum = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysServiceNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysServiceNum.setDescription('The service number of the system unit. The string will be empty if the system does not report the system service number.')
cpqSiSysProductId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysProductId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysProductId.setDescription('The product id string of the system unit. The string will be empty if the system does not report the product id.')
cpqSiAssetTagMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiAssetTagMaxLength.setStatus('optional')
if mibBuilder.loadTexts: cpqSiAssetTagMaxLength.setDescription(' Maximum allowed size in bytes of the asset tag.')
cpqSiVirtualSystemTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8), )
if mibBuilder.loadTexts: cpqSiVirtualSystemTable.setStatus('optional')
if mibBuilder.loadTexts: cpqSiVirtualSystemTable.setDescription('A table of virtual system information entries.')
cpqSiVirtualSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiVirtualSystemIndex"))
if mibBuilder.loadTexts: cpqSiVirtualSystemEntry.setStatus('optional')
if mibBuilder.loadTexts: cpqSiVirtualSystemEntry.setDescription('A virtual system information table entry.')
cpqSiVirtualSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVirtualSystemIndex.setStatus('optional')
if mibBuilder.loadTexts: cpqSiVirtualSystemIndex.setDescription('The unique index of the virtual system information entry.')
cpqSiVirtualSystemSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVirtualSystemSerialNumber.setStatus('optional')
if mibBuilder.loadTexts: cpqSiVirtualSystemSerialNumber.setDescription('The HP Virtual Serial Number for the computer system package. The Virtual Serial Number is the system serial number exposed to the operating system when running in an HP Virtual Connect environment. The Virtual Serial Number presented here will correspond to the Virtual UUID at the same index location.')
cpqSiVirtualSystemUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVirtualSystemUUID.setStatus('optional')
if mibBuilder.loadTexts: cpqSiVirtualSystemUUID.setDescription('The HP Virtual UUID for the computer system package. The Virtual UUID is the UUID number exposed to the operating system when running in an HP Virtual Connect environment. The Virtual UUID presented here will correspond to the Virtual serial number at the same index location.')
cpqSiPowerOnPassword = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPowerOnPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiPowerOnPassword.setDescription('The state of the power on password feature.')
cpqSiNetServerMode = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiNetServerMode.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiNetServerMode.setDescription('The state of the network server mode feature.')
cpqSiQuickLockPassword = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiQuickLockPassword.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiQuickLockPassword.setDescription('The state of the quicklock password feature.')
cpqSiQuickBlank = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiQuickBlank.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiQuickBlank.setDescription('The state of the quick blank screen feature.')
cpqSiDisketteBootControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDisketteBootControl.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiDisketteBootControl.setDescription('The state of the diskette boot control feature.')
cpqSiSerialPortAControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSerialPortAControl.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSerialPortAControl.setDescription('The state of the access control for the primary serial port interface embedded in the system board.')
cpqSiSerialPortBControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSerialPortBControl.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSerialPortBControl.setDescription('The state of the access control for the secondary serial port interface embedded in the system board.')
cpqSiParallelPortControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiParallelPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiParallelPortControl.setDescription('The state of the access control for the parallel port interface embedded in the system board.')
cpqSiFloppyDiskControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFloppyDiskControl.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFloppyDiskControl.setDescription('The state of the access control for the floppy diskette interface embedded in the system board.')
cpqSiFixedDiskControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFixedDiskControl.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFixedDiskControl.setDescription('The state of the access control for the fixed disk interface embedded in the system board.')
cpqSiHoodRemovedTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHoodRemovedTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHoodRemovedTime.setDescription('Last detection of hood removed by Smart Hood Sensor.')
cpqSiHoodSensorConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("notifyUser", 3), ("adminPasswordProtected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHoodSensorConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHoodSensorConfiguration.setDescription('This is the current configuration of the Smart Cover sensor. The following values are currently defined: other(1) Smart Cover sensor is not supported on this system or cannot be determined by the Insight Agent. You may need to upgrade your software. disabled(2) Smart Cover sensor will not detect a hood removal and cpqSiHoodRemovedTime will not be updated. notifyUser(3) Smart Cover sensor will detect a hood removal and will display a message at POST for the user. adminPasswordProtected(4) Smart Cover sensor will detect a hood removal and will display a message at POST for the user to enter the Admin Password. The system will not boot until proper password is entered.')
cpqSiSmartCoverLockStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("unlocked", 2), ("locked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSmartCoverLockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSmartCoverLockStatus.setDescription('This is the current status of the Smart Cover Lock. The following values are currently defined: other(1) Smart Cover Lock is not supported on this system or cannot be determined by the Insight Agent. You may need to upgrade your software. unlocked(2) Smart Cover Lock is not locked. The status will be set to unlocked due to one of the following: 1. The system hood is removed, or 2. There is no administrator password set, or 3. The administrator manually sets status to unlock. locked(3) Smart Cover Lock is locked. The administrator password is required to unlock the hood.')
cpqSiUSBPortControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("legacydisabled", 4), ("externalportdisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiUSBPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiUSBPortControl.setDescription('The state of the access control for the Universal Serial Bus interface(s) embedded in the system board. other(1) If Status could not be determined. disabled(2) USB interface is disable. enabled(3) USB interface is enable. legacydisabled(4) Legacy USB interface is disabled. externalportdisabled(5) External USB Ports are disabled.')
cpqSiProductId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProductId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiProductId.setDescription('The machine product ID. This value indicates the product type of the system board in this system. The value 127 will be given if the machine ID cannot be determined. A value of 127 will also be used for the special case of a machine containing neither EISA nor ISA slots.')
cpqSiProductName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProductName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiProductName.setDescription('The machine product name. The name of the machine used in this system.')
cpqSiAuxiliaryInput = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiAuxiliaryInput.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiAuxiliaryInput.setDescription('The state of the auxiliary input (pointing) device.')
cpqSiMemModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5), )
if mibBuilder.loadTexts: cpqSiMemModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleTable.setDescription('A table of memory module descriptions.')
cpqSiMemModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiMemBoardIndex"), (0, "CPQSINFO-MIB", "cpqSiMemModuleIndex"))
if mibBuilder.loadTexts: cpqSiMemModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleEntry.setDescription('A memory module description.')
cpqSiMemBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemBoardIndex.setDescription('The slot in which the memory board or cartridge is installed. A value of 0 indicates memory installed directly on the system board.')
cpqSiMemModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleIndex.setDescription('The memory module number.')
cpqSiMemModuleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleSize.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleSize.setDescription('Module memory size in kilobytes. A kilobyte of memory is defined as 1024 bytes. A size of 0 indicates the module is not present.')
cpqSiMemModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("board", 2), ("cpqSingleWidthModule", 3), ("cpqDoubleWidthModule", 4), ("simm", 5), ("pcmcia", 6), ("compaq-specific", 7), ("dimm", 8), ("smallOutlineDimm", 9), ("rimm", 10), ("srimm", 11), ("fb-dimm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleType.setDescription('Type of memory module installed. The value other(1) will be given if the type is not known. The value board(2) will be given if the memory module is permanently mounted (not modular) on a system board or memory expansion board.')
cpqSiMemModuleSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleSpeed.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiMemModuleSpeed.setDescription('Module memory speed in nanoseconds. The value zero (0) will be given if the module speed cannot be determined.')
cpqSiMemModuleTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("fastPageMode", 2), ("edoPageMode", 3), ("burstEdoPageMode", 4), ("synchronous", 5), ("rdram", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleTechnology.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleTechnology.setDescription('Technology type of memory module installed. The value other(1) will be given if the technology is not known.')
cpqSiMemModuleManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleManufacturer.setDescription("The memory module's manufacturer name. This field will be a null (size 0) string if the manufacturer name is not available.")
cpqSiMemModulePartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModulePartNo.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModulePartNo.setDescription("The memory module's manufacturer part number. This field will be a null (size 0) string if the manufacturer part number is not available.")
cpqSiMemModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleDate.setDescription('The memory module date of manufacture. field octets contents range ===== ====== ====================== ======== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the date of manufacture is not available. The hour, minute, and second fields will always be set to 0.')
cpqSiMemModuleSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiMemModuleSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleSerialNo.setDescription("The memory module's serial number. This field will be a null (size 0) string if the serial number is not available.")
cpqSiMemModuleECCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("degradedModuleIndexUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleECCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleECCStatus.setDescription('This provides the current status of the correctable memory errors for this memory module. The following status values are supported: other(1): ECC is not supported on this memory module. ok(2): The correctable error count is below threshold. degraded(3): The correctable error count has exceeded threshold. degradedModuleIndexUnknown(4): The correctable error count has exceeded threshold. The module index not available.')
cpqSiMemModuleHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleHwLocation.setStatus('optional')
if mibBuilder.loadTexts: cpqSiMemModuleHwLocation.setDescription('A text description of the hardware location, on complex multi SBB hardware only, for the memory module. A NULL string indicates that the hardware location could not be determined or is irrelevant.')
cpqSiMemModuleFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemModuleFrequency.setDescription('The memory module frequency in MHz. The value zero (0) will be given if the module frequency cannot be determined.')
cpqSiMemModuleCellTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleCellTablePtr.setStatus('optional')
if mibBuilder.loadTexts: cpqSiMemModuleCellTablePtr.setDescription('Index for the cell in cpqSeCellTable where the memory board is installed.')
cpqSiMemModuleCellStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("deconfigured", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleCellStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqSiMemModuleCellStatus.setDescription('This provides the current status for this memory module. The following status values are supported: other(1): The memory module status is not available ok(2): The memory module is active deconfigured(3): The memory module is not ready')
cpqSiMemModulePartNoMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModulePartNoMfgr.setStatus('optional')
if mibBuilder.loadTexts: cpqSiMemModulePartNoMfgr.setDescription("The memory module's manufacturer's part number. This field will be a null (size 0) string if the manufacturer part number is not available.")
cpqSiMemModuleSerialNoMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleSerialNoMfgr.setStatus('optional')
if mibBuilder.loadTexts: cpqSiMemModuleSerialNoMfgr.setDescription("The memory module's manufacturer's serial number. This field will be a null (size 0) string if the manufacturer serial number is not available.")
cpqSiSystemId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSystemId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSystemId.setDescription('The System ID. This value indicates the system ID of the system board in this system. This ID replaces the product ID used in older machines (cpqSiProductId). A value of 7Eh for the cpqSiProductId indicates that the cpqSiSystemId should be used to identify the system. A value of zero (0) indicates that the system ID function is not supported on this machine. In this case, the cpqSiProductId should be used to identify the system.')
cpqSiSystemCpuId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSystemCpuId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSystemCpuId.setDescription('The System ID : CPU Component. This value indicates the CPU type of the system board in this system. A value of zero (0) indicates that the CPU type cannot be determined.')
cpqSiFlashRomSupport = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFlashRomSupport.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFlashRomSupport.setDescription('This value indicates if this system supports flash upgradable system ROM.')
cpqSiQuickTestRomDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiQuickTestRomDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiQuickTestRomDate.setDescription('This value indicates the date of the current quick test ROM image. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if quick test ROM is not present. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first.')
cpqSiReboot = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2693, 8115, 9037))).clone(namedValues=NamedValues(("notAvailable", 1), ("available", 2), ("defaultOnlyAvailable", 3), ("rebootToCpqUtils", 2693), ("rebootToDefault", 8115), ("autoShutdown", 9037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiReboot.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiReboot.setDescription('This object may contain the following values: notAvailable(1) the system does not support the reboot functionality. Setting this object to notAvailable(1) has no effect. available(2) the system supports the both reboot to functionalities. Setting this object to available(2) has no effect. defaultOnlyAvailable(3) the system supports the only the default reboot functionality. Setting this object to available(3) has no effect. rebootToCpqUtils(2693) the system will reboot to the System Utilities if the reboot functionality is available. If possible, the agent will attempt to gracefully shutdown the operating system before performing the reboot. If this functionality is unavailable on this system then all sets will have no effect. rebootToDefault(8115) the system will reboot and allow the default boot process to occur if the reboot functionality is available. If possible, the agent will attempt to gracefully shutdown the operating system before performing the reboot. If this functionality is unavailable on this system then all sets will have no effect. autoShutdown(9037) If possible, the agent will attempt to gracefully shutdown the operating system. The agent will not preform a reboot. ')
cpqSiProcMicroPatchTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11), )
if mibBuilder.loadTexts: cpqSiProcMicroPatchTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiProcMicroPatchTable.setDescription('This table lists the set of processor microcode patches that the system ROM contains. During post, the ROM will apply the appropriate patches to the CPU microcode. Scan this table to ensure that a patch is being applied to a processor.')
cpqSiProcMicroPatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiProcMicroPatchIndex"))
if mibBuilder.loadTexts: cpqSiProcMicroPatchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiProcMicroPatchEntry.setDescription('An entry describing one microcode patch contained in the system ROM.')
cpqSiProcMicroPatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProcMicroPatchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiProcMicroPatchIndex.setDescription('Index into the microcode patch table.')
cpqSiProcMicroPatchId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProcMicroPatchId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiProcMicroPatchId.setDescription('The ID of this particular CPU microcode patch.')
cpqSiProcMicroPatchDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProcMicroPatchDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiProcMicroPatchDate.setDescription('This value indicates the date of this CPU microcode patch. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) NOTE: Year is stored in packed BCD. The most significant part is in the second octet. For example: 1995 would be stored as 0x95 0x19. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first.')
cpqSiProcMicroPatchFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProcMicroPatchFamily.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiProcMicroPatchFamily.setDescription('The valid family/model/step of the processor that this CPU microcode patch applies to. field octets contents range ===== ====== ======= ===== 1 1 CPU Step 0..255 2 2 CPU Model 0..255 3 3 CPU Family 0..255 ')
cpqSiPowerMgmtStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPowerMgmtStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiPowerMgmtStatus.setDescription('The state of power management.')
cpqSiRebootFlags = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiRebootFlags.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRebootFlags.setDescription('The Reboot Flags. This is a collection of flags used to indicate the re-boot options available. This integer is a bitmap, with each bit indicating the availability of an option. If the bit is set to 1, the option is available; otherwise it is not. Multiple options are allowed. NOTE: bit 31 is the most significant bit, bit 0 is the least significant. Status This is a collection of flags. Each bit has the following meaning when it is on (1): Bit 31: Execute Set Bit 30-6: RESERVED Bit 5: Boot to ROM Based Setup Bit 4: RESERVED Bit 3: Boot to OS Bit 2: Boot to Utils Bit 1: Warm Boot Bit 0: Cold Boot')
cpqSiMemErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemErrorIndex.setDescription('Placeholder for memory module number for ECC traps. Represents the number of the memory module for which an ECC status change has occurred. Set to 65535 if module number not available.')
cpqSiMemECCCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemECCCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemECCCondition.setDescription('This provides the current condition of the correctable memory errors for the entire memory. The following status values are supported: other(1) : ECC is not supported. ok(2) : The correctable error count is below threshold. degraded(3) : The correctable error count has exceeded threshold.')
cpqSiMemConfigChangeData = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemConfigChangeData.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMemConfigChangeData.setDescription('Text string for the memory configuration change trap.')
cpqSiServerSystemId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiServerSystemId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiServerSystemId.setDescription('A Server System ID. This value is used to uniquely identify systems via a unique ID on systems that do not support the EISA bus.')
cpqSiPowerScheme = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unsupported", 1), ("other", 2), ("power-saver", 3), ("balanced", 4), ("high-performance", 5), ("user-defined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPowerScheme.setStatus('optional')
if mibBuilder.loadTexts: cpqSiPowerScheme.setDescription('The current active power plan or power scheme of the system.')
cpqSiPowerSchemeName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPowerSchemeName.setStatus('optional')
if mibBuilder.loadTexts: cpqSiPowerSchemeName.setDescription('The name of current active power plan or power scheme of the system. When cpqSiPowerScheme has a value of user-defined(6), the user defined name can be populated here.')
cpqSiCurrentPerformanceStatePointer = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiCurrentPerformanceStatePointer.setStatus('optional')
if mibBuilder.loadTexts: cpqSiCurrentPerformanceStatePointer.setDescription('Pointer to cpqSiPerfStateIndex in cpqSiPerfStateTable to indicate the current performance state of the system.')
cpqSiMinPerformanceState = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMinPerformanceState.setStatus('optional')
if mibBuilder.loadTexts: cpqSiMinPerformanceState.setDescription('The slowest performance state by the selected power state policy.')
cpqSiMaxPerformanceState = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMaxPerformanceState.setStatus('optional')
if mibBuilder.loadTexts: cpqSiMaxPerformanceState.setDescription('The fastest performance state supported by the selected power state policy.')
cpqSiPerfStateTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23), )
if mibBuilder.loadTexts: cpqSiPerfStateTable.setStatus('optional')
if mibBuilder.loadTexts: cpqSiPerfStateTable.setDescription('A table of supported performance states of the system.')
cpqSiPerfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiPerfStateIndex"))
if mibBuilder.loadTexts: cpqSiPerfStateEntry.setStatus('optional')
if mibBuilder.loadTexts: cpqSiPerfStateEntry.setDescription('An entry describing a supported performance state of the system.')
cpqSiPerfStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPerfStateIndex.setStatus('optional')
if mibBuilder.loadTexts: cpqSiPerfStateIndex.setDescription('Index into the performance state table. cpqSiCurrentPerformanceStatePointer should point to one of these values.')
cpqSiPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPerfState.setStatus('optional')
if mibBuilder.loadTexts: cpqSiPerfState.setDescription('Performance state number. A unique number assigned to a performance state instance.')
cpqSiPerfStateCpuFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPerfStateCpuFrequency.setStatus('optional')
if mibBuilder.loadTexts: cpqSiPerfStateCpuFrequency.setDescription('The processor frequency in megahertz for this performance state instance.')
cpqSiPerfStateCpuPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPerfStateCpuPower.setStatus('optional')
if mibBuilder.loadTexts: cpqSiPerfStateCpuPower.setDescription('The processor power setting in milliwatts for this performance state instance.')
cpqSiTPMmodule = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("presentEnabled", 3), ("presentDisabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiTPMmodule.setStatus('optional')
if mibBuilder.loadTexts: cpqSiTPMmodule.setDescription('This field will be populated if TPM module is present in the system board. other(1) No record of TPM exist. absent(2) TPM module is not present in the system. presentEnabled(3) TPM module is present in the system and currently enabled. presentDisabled(4) TPM module is present in the system and currently not enabled.')
cpqSiCurRevDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiCurRevDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiCurRevDate.setDescription("The current board revision configuration date in MM/DD/YY format. This is the date that the EISA Configuration Utility was used to define the current configuration. This value will contain 'N/A' if this system does not support this feature.")
cpqSiPrevRevDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPrevRevDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiPrevRevDate.setDescription("The previous board revision configuration date in MM/DD/YY format. This is the date that the EISA Configuration Utility was used to define the previous configuration. This value will contain 'N/A' if this system does not support this feature.")
cpqSiBoardRevTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3), )
if mibBuilder.loadTexts: cpqSiBoardRevTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiBoardRevTable.setDescription('A table of board revision descriptions.')
cpqSiBoardRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiBoardRevSlotIndex"), (0, "CPQSINFO-MIB", "cpqSiBoardRevIndex"))
if mibBuilder.loadTexts: cpqSiBoardRevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiBoardRevEntry.setDescription('A board revision description.')
cpqSiBoardRevSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiBoardRevSlotIndex.setDescription('The slot in which the board described in this entry resides. Zero (0) indicates the system board.')
cpqSiBoardRevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiBoardRevIndex.setDescription('A number that uniquely specifies which board in a specific slot is described in this entry. Zero (0) indicates the main board in this slot. Any other number indicates a daughter board or a component of the main board.')
cpqSiBoardRevId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiBoardRevId.setDescription('A description of the board type. The defined types are: Type ============== System Board Processor n (n = the processor number) Memory n (n = the memory board number) Slot n (n = the slot the board occupies) Other types may be defined at a later date.')
cpqSiBoardRevCur = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevCur.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiBoardRevCur.setDescription('The current revision for the board described in this entry. This value will be N/A if there is no current revision information.')
cpqSiBoardRevPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevPrev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiBoardRevPrev.setDescription('The revision for the board described in this entry prior to the current configuration. This value will be N/A if there is no previous revision information.')
cpqSiBoardRevHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevHwLocation.setStatus('optional')
if mibBuilder.loadTexts: cpqSiBoardRevHwLocation.setDescription('A text description of the hardware location, on complex multi SBB hardware only, for the board. A NULL string indicates that the hardware location could not be determined or is irrelevant.')
cpqSiFirmwareRevTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4), )
if mibBuilder.loadTexts: cpqSiFirmwareRevTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFirmwareRevTable.setDescription('A table of firmware revision descriptions.')
cpqSiFirmwareRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiFirmwareRevIndex"))
if mibBuilder.loadTexts: cpqSiFirmwareRevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFirmwareRevEntry.setDescription('A firmware revision description.')
cpqSiFirmwareRevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareRevIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFirmwareRevIndex.setDescription('Locally-unique index for this entry.')
cpqSiFirmwareRevDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareRevDesc.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFirmwareRevDesc.setDescription('Description, e.g. SRM console, ARC console, System BIOS, etc.')
cpqSiFirmwareRevString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareRevString.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFirmwareRevString.setDescription('Version number, possibly of the form Vx.y or Vx.y-z.')
cpqSiFirmwareRevCellTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareRevCellTablePtr.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiFirmwareRevCellTablePtr.setDescription('Index for the cell in cpqSeCellTable where this firmware is located')
cpqSiFirmwareLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareLocation.setStatus('optional')
if mibBuilder.loadTexts: cpqSiFirmwareLocation.setDescription('Description of which board the firmware is located in.')
cpqSiFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqSiFirmwareStatus.setDescription('The current status for this firmware.')
cpqSiFirmwareCfgTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 5), )
if mibBuilder.loadTexts: cpqSiFirmwareCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFirmwareCfgTable.setDescription('Table of soft switches and symbols maintained by the firmware. May be operating system and/or option-specific and will certainly be system-specific. This list is intended to be easily extensible and support arbitrary datatypes. It includes such switches as powerup options, default dump device, etc. Note - the string comparison for svrFwSymbolName is case insensitive.')
cpqSiFirmwareCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 5, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiFirmwareCfgName"))
if mibBuilder.loadTexts: cpqSiFirmwareCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFirmwareCfgEntry.setDescription('Each entry represents one variable or symbol maintained by or stored by some instance of firmware in the system.')
cpqSiFirmwareCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareCfgName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFirmwareCfgName.setDescription('The firmware configuration symbol name as visible from the console.')
cpqSiFirmwareCfgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareCfgValue.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFirmwareCfgValue.setDescription('The firmware configuration symbol value. Null if none or unknown.')
cpqSiRackServerShutdownRole = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiRackServerShutdownRole.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackServerShutdownRole.setDescription("This entry describes this system's role in a rack-mounted uninterruptible power supply family. The master both communicates with the UPS and derives its power from the UPS. The slave derives its power from the UPS, but does not communicate with it.")
cpqSiRackServerMasterName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiRackServerMasterName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackServerMasterName.setDescription('This entry describes the name of the master server in a rack-mounted uninterruptible power supply family. A slave system would communicate with this server to derive UPS status.')
cpqSiVideoEdidRaw = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoEdidRaw.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiVideoEdidRaw.setDescription('The raw value returned from the video EDID function.')
cpqSiVideoDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoDesc.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiVideoDesc.setDescription('The manufacturer and model description of the video display.')
cpqSiVideoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoSerialNumber.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiVideoSerialNumber.setDescription('The serial number of the video display.')
cpqSiVideoManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoManufactureDate.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiVideoManufactureDate.setDescription('The date of manufacture of the video display in the following format: field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the date. The date information that is given resolves to a year and week, so the hour, minute, and second field will be set to 0, the month and day fields will give the monday of the week of manufacture.')
cpqSiVideoHeight = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoHeight.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiVideoHeight.setDescription('The maximum image height of the video display in centimeters')
cpqSiVideoWidth = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoWidth.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiVideoWidth.setDescription('The maximum image width of the video display in centimeters')
cpqSiVideoMaxHorPixel = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoMaxHorPixel.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiVideoMaxHorPixel.setDescription('The number of horizontal pixels in the highest resolution video mode supported.')
cpqSiVideoMaxVertPixel = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoMaxVertPixel.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiVideoMaxVertPixel.setDescription('The number of vertical pixels in the highest resolution video mode supported.')
cpqSiVideoMaxRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoMaxRefreshRate.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSiVideoMaxRefreshRate.setDescription('The video refresh rate in Hz of the highest resolution video mode supported.')
cpqSiMonitorOverallCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorOverallCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorOverallCondition.setDescription("This value specifies the overall condition of the system's monitor(s). The following conditions are supported: other(1) The monitor does not support fault reporting or condition is unknown. ok(2) The monitor is operating OK. degraded(3) The monitor has detected a fault. The monitor is still useable but action should be taken to return the monitor to ok. failed(4) The monitor has detected a fault. The monitor will not be useable. Action should be taken to replace the monitor.")
cpqSiMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2), )
if mibBuilder.loadTexts: cpqSiMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorTable.setDescription('A table of all video monitor descriptions connected to this system.')
cpqSiMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiMonitorIndex"))
if mibBuilder.loadTexts: cpqSiMonitorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorEntry.setDescription('A video monitor description.')
cpqSiMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorIndex.setDescription('A unique index for each video display connected to the system.')
cpqSiMonitorEdidRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorEdidRaw.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorEdidRaw.setDescription('The raw value returned from the video EDID function.')
cpqSiMonitorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorDesc.setDescription('The manufacturer and model description of the video display.')
cpqSiMonitorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorSerialNumber.setDescription('The serial number of the video display.')
cpqSiMonitorManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorManufactureDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorManufactureDate.setDescription('The date of manufacture of the video display in the following format: field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the date. The date information that is given resolves to a year and week, so the hour, minute, and second field will be set to 0, the month and day fields will give the monday of the week of manufacture.')
cpqSiMonitorHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorHeight.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorHeight.setDescription('The maximum image height of the video display in centimeters')
cpqSiMonitorWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorWidth.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorWidth.setDescription('The maximum image width of the video display in centimeters')
cpqSiMonitorMaxHorPixel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorMaxHorPixel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorMaxHorPixel.setDescription('The number of horizontal pixels in the highest resolution video mode supported.')
cpqSiMonitorMaxVertPixel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorMaxVertPixel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorMaxVertPixel.setDescription('The number of vertical pixels in the highest resolution video mode supported.')
cpqSiMonitorMaxRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorMaxRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorMaxRefreshRate.setDescription('The video refresh rate in Hz of the highest resolution video mode supported.')
cpqSiMonitorManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorManufacturer.setDescription('The manufacturer of the video display.')
cpqSiMonitorThermalCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorThermalCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorThermalCondition.setDescription("This provides the condition of the monitor's internal temperature. This value will be one of the following: other(1) Monitor thermal fault reporting is not supported by this monitor or the Insight Agent does not recognize the status. You may need to upgrade your software. ok(2) The internal temperature is within normal limits. degraded(3) The internal temperature is outside normal operating range.")
cpqSiMonitorOperationalCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorOperationalCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorOperationalCondition.setDescription("This provides the condition of the monitor's operational features. This condition value will be one of the following: other(1) Monitor operational fault reporting is not supported by this monitor or the Insight Agent does not recognize the status. You may need to upgrade your software. ok(2) The monitor is operating within normal limits. degraded(3) The monitor is not functioning within normal operating limits. At least one of the operational features has become degraded. failed(4) The monitor is not functioning within normal operating limits. At least one of the operational features has failed causing the monitor to not be usable. The monitor should be replaced.")
cpqSiMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("thermalDegraded", 4), ("operationalFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiMonitorStatus.setDescription("This provides the status of the monitor's fault reporting features. This status value will be one of the following: other(1) Monitor fault reporting is not supported by this monitor or the Insight Agent does not recognize the status. You may need to upgrade your software. unknown(2) The monitor status is unknown because the monitor is either in power saving mode or it has been turned off. ok(3) The monitor is operating within normal limits. thermalDegraded(4) The monitor's internal temperature is not functioning within normal operating limits. operationalFailure(5) The monitor is not functioning within normal operating limits. At least one of the operational features has failed. The monitor should be replaced.")
cpqSiHotPlugSlotSupported = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotSupported.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotSupported.setDescription('This value specifies if this system supports the Hot Pluggable Slot feature.')
cpqSiHotPlugSlotCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotCondition.setDescription('This value specifies the overall condition of the Hot Plug Slot feature. The Hot Plug condition is set as follows: other(1) When Hot Plug Slots are not supported or condition is unknown. ok(2) If there are no hot plug slots with a condition of degraded or failed. degraded(3) If there are degraded slot entries but none failed. failed(4) If there are failed slot entries.')
cpqSiHotPlugSlotChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotChangeCount.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotChangeCount.setDescription('This value will be incremented each time a hot plug event occurs resulting in a change in the hot plug slot table.')
cpqSiHotPlugSlotTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4), )
if mibBuilder.loadTexts: cpqSiHotPlugSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotTable.setDescription('A list of Hot Plug Slot information entries.')
cpqSiHotPlugSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiHotPlugSlotChassis"), (0, "CPQSINFO-MIB", "cpqSiHotPlugSlotIndex"))
if mibBuilder.loadTexts: cpqSiHotPlugSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotEntry.setDescription('A description of a Hot Plug Slot.')
cpqSiHotPlugSlotChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotChassis.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotChassis.setDescription('The Chassis where this hot plug slot resides.')
cpqSiHotPlugSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotIndex.setDescription('The slot within the chassis for this hot plug slot.')
cpqSiHotPlugSlotBoardPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("present", 2), ("absent", 3), ("presentButSuspended", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotBoardPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotBoardPresent.setDescription('This value indicates whether a board is present(2) in or absent(3) from the slot. A value of other(1) indicates the information could not be obtained.')
cpqSiHotPlugSlotPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("powerOn", 2), ("powerOff", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotPowerState.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotPowerState.setDescription('This value is set to powerOn(2) when power is being supplied to the slot and powerOff(3) when power is not being supplied. A value of other(1) indicates the information could not be obtained.')
cpqSiHotPlugSlotBoardCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotBoardCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotBoardCondition.setDescription('This value specifies the condition of the hot plug slot. The hot plug condition is set as follows: other(1) When the condition could not be determined. ok(2) The slot is powered up and operating normally. degraded(3) If the board in the slot is not fully functioning. failed(4) If the slot is failed for any reason. See the status code for more information on the failure.')
cpqSiHotPlugSlotErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noError", 1), ("generalError", 2), ("wrongRevision", 3), ("wrongBoard", 4), ("cannotConfig", 5), ("powerFault", 6), ("unexpectedPowerLoss", 7), ("wrongSpeed", 8), ("functionalFailure", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiHotPlugSlotErrorStatus.setDescription('This value specifies the status of the hot plug slot. The hot plug slot status is set as follows: noError(1) The slot is operating normally. generalError(2) A general error occurred. wrongRevision(3) The revision of the replacement adapter was different from the original adapter. wrongBoard(4) The model of the replacement adapter was different from the original adapter. cannotConfig(5) The adapter could not be configured. powerFault(6) A power fault occurred for the slot. unexpectedPowerLoss(7) Power was unexpectedly lost from the slot. wrongSpeed(8) The adapter cannot be run at the current bus speed. functionlFailure(9) The adapter is not functioning correctly. This may be caused by a cabling problem.')
cpqSiHotPlugSlotHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotHwLocation.setStatus('optional')
if mibBuilder.loadTexts: cpqSiHotPlugSlotHwLocation.setDescription('A text description of the hardware location, on complex multi SBB hardware only, for the hot plug slot. A NULL string indicates that the hardware location could not be determined or is irrelevant.')
cpqSiSystemBatteryOverallCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSystemBatteryOverallCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSystemBatteryOverallCondition.setDescription('This value specifies the overall condition of all of the system batteries. The following conditions are supported: other(1) The system does not use system batteries or the battery condition is unknown. ok(2) All System Batteries are operating OK. degraded(3) One or more of the System Batteries has degraded. The degraded battery will continue to function but should be replaced. failed(4) One of more of the System Batteries has failed. The failed battery is no longer usable. Action should be taken to replace the battery.')
cpqSiSysBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2), )
if mibBuilder.loadTexts: cpqSiSysBatteryTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryTable.setDescription('A table of System Batteries.')
cpqSiSysBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiSysBatteryIndex"))
if mibBuilder.loadTexts: cpqSiSysBatteryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryEntry.setDescription('A system battery description.')
cpqSiSysBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryIndex.setDescription('A unique index for this battery entry.')
cpqSiSysBatteryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryModel.setDescription('The model name for this battery.')
cpqSiSysBatterySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatterySerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatterySerialNum.setDescription('The serial number for this battery.')
cpqSiSysBatteryAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryAssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryAssetTag.setDescription("This is the customer changeable battery identifier that is set to this system battery's serial number at the time of manufacture. The string will be empty if the battery does support this function.")
cpqSiSysBatteryManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryManufacturer.setDescription("The battery's manufacturer's name. The string will be empty if the battery does support this function.")
cpqSiSysBatteryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryDate.setDescription("The battery's manufacture date. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first. The string will be empty if the battery does support this function.")
cpqSiSysBatterySmartVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatterySmartVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatterySmartVersion.setDescription('The Smart Battery Data Specification version number supported by this battery. The string will be empty if the system battery does support this function.')
cpqSiSysBatteryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryCondition.setDescription('This provides the current condition of this system battery. The following status values are supported: other(1) The battery does not support condition monitoring or the Insight Agent cannot determine condition. ok(2) The battery is operating normally. No user action is required. degraded(3) The battery is degraded. The battery is still usable but should be replaced. failed(4) The battery has failed. The battery is no longer usable and should be replaced soon.')
cpqSiSysBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("capacityDegraded", 3), ("chargeFault", 4), ("batteryFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryStatus.setDescription('This provides the current status of the battery. The following status values are supported: other(1): This battery does not support status reporting. ok(2): The battery is operating ok. User Action: No action required. capacityDegraded(3): Significant battery degradation has occurred. The battery can no longer be fully recharged. User Action: If using multiple batteries, run the Power Conservation Utility to identify the battery location. Contact your System Administrator or Authorized Reseller to order a replacement battery. chargeFault(4): One or more batteries are not functioning properly. User Action: Make sure all batteries are operating in the recommended temperature range. Check for foreign objects in the battery slots. Remove and reinsert all batteries to resume normal battery operation. Contact your System Administrator or Authorized Reseller if you are still experiencing problems. batteryFailure(5): The battery has failed and must be replaced. User Action: Contact your System Administrator or Authorized Reseller to order a replacement battery. Recycle your old battery. For proper disposal information, refer to the documentation that came with your computer.')
cpqSiSysBatteryChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("lead-Acid", 3), ("nickel-Cadmium", 4), ("nickel-Metal-Hydride", 5), ("lithium-Ion", 6), ("zinc-Air", 7), ("lithium-Polymer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryChemistry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryChemistry.setDescription('The chemistry of the battery.')
cpqSiSysBatteryRemainingCap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryRemainingCap.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryRemainingCap.setDescription("This is a percentage of the battery's remaining capacity from its design capacity. If this attribute is not supported, 65535 is returned.")
cpqSiSysBatteryFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryFirmwareRevision.setDescription('This is the revision level of the firmware on the battery. If this attribute is not supported, 255 is returned.')
cpqSiSysBatteryHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryHardwareRevision.setDescription('This is the revision level of the hardware on the battery. If this attribute is not supported, 255 is returned.')
cpqSiSysBatteryFullCap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryFullCap.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryFullCap.setDescription("This is the mWatt-Hours of the battery's Full capacity on the current charge. If this attribute is not supported, 65535 is returned.")
cpqSiSysBatteryDesignCap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryDesignCap.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiSysBatteryDesignCap.setDescription("This is the mWatt-Hours of the battery's design capacity as specified by the manufacturer. If this attribute is not supported, 65535 is returned.")
cpqSiSysBatteryHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryHwLocation.setStatus('optional')
if mibBuilder.loadTexts: cpqSiSysBatteryHwLocation.setDescription('A text description of the hardware location, on complex multi SBB hardware only, for the battery. A NULL string indicates that the hardware location could not be determined or is irrelevant.')
cpqSiDockingStationStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("docked", 2), ("undocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDockingStationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiDockingStationStatus.setDescription('This value specifies the connection of the computer system to a docking station. The following connection states are supported: notSupported(1) This system does not interface to a docking station. docked(2) This system is connected to a docking station. undocked(3) This system is not connect to a docking station.')
cpqSiDockingStationSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDockingStationSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiDockingStationSerialNum.setDescription('The serial number of the docking station. The string will be empty if the docking station does not support a serial or the system does not interface to a docking station.')
cpqSiDockingStationModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDockingStationModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiDockingStationModel.setDescription('The model name of the docking station. The string will be empty if the docking station does not report the model name or the system does not interface to a docking station.')
cpqSiDockingStationAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDockingStationAssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiDockingStationAssetTag.setDescription('This is a customer changeable identifier that is set to the docking station serial number at the time of manufacture. The string will be empty if the docking station does not report an asset tag or the system does not interface to a docking station.')
cpqSiFruTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1), )
if mibBuilder.loadTexts: cpqSiFruTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruTable.setDescription('Table of Field Replaceable Units of system, providing inventory and asset control information. This table is referenced from logical hardware descriptions elsewhere in the MIB.')
cpqSiFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiFruIndex"))
if mibBuilder.loadTexts: cpqSiFruEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruEntry.setDescription('Each entry represents a Field Replaceable Unit (FRU) of hardware.')
cpqSiFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruIndex.setDescription('A locally-unique index value.')
cpqSiFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("motherBoard", 3), ("processor", 4), ("memoryCard", 5), ("memoryModule", 6), ("peripheralDevice", 7), ("systemBusBridge", 8), ("powerSupply", 9), ("chassis", 10), ("fan", 11), ("ioCard", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruType.setDescription('General category of the type of FRU that this is.')
cpqSiFruDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiFruDescr.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruDescr.setDescription('More detailed description of FRU type, if known.')
cpqSiFruVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruVendor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruVendor.setDescription('Manufacturer name or ID.')
cpqSiFruPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruPartNumber.setDescription('Number by which this unit is orderable.')
cpqSiFruRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruRevision.setDescription("Version number of this unit. If artwork level is available, it will appear as 'Artwork: XXX' following FRU version portion.")
cpqSiFruFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruFirmwareRevision.setDescription('The revision of the firmware, if any. Otherwise null.')
cpqSiFruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruSerialNumber.setDescription("The serial number of this unit's instance.")
cpqSiFruAssetNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiFruAssetNo.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruAssetNo.setDescription('The asset number for this unit. This string may be limited.')
cpqSiFruClass = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("currentBoardInSlot", 3), ("priorBoardInSlot", 4), ("parentBoard", 5), ("priorParentBoard", 6), ("priorParentSystem", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruClass.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruClass.setDescription('Represents the status category of the unit.')
cpqSiFruSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruSlotNumber.setDescription('Physical slot number of FRU.')
cpqSiFruSubAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruSubAssemblyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruSubAssemblyNumber.setDescription('Subassembly containing this FRU. From FRU V5.0.')
cpqSiFruAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruAssemblyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruAssemblyNumber.setDescription('Assembly containing this FRU. From FRU V5.0.')
cpqSiFruChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruChassisNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruChassisNumber.setDescription('Chassis containing this FRU. From FRU V5.0.')
cpqSiFruPositionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruPositionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruPositionNumber.setDescription('Position in Chassis to help locate FRU. From FRU V5.0.')
cpqSiFruCabinetIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruCabinetIDNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruCabinetIDNumber.setDescription('Cabinet number containing this FRU. From FRU V5.0.')
cpqSiFruSiteLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruSiteLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruSiteLocation.setDescription('Site code for system containing this FRU. From FRU V5.0.')
cpqSiFruDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruDiagStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruDiagStatus.setDescription('Use system status values to describe current state of the FRU.')
cpqSiFruExtendedDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruExtendedDiagStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiFruExtendedDiagStatus.setDescription('Diagnostic Status value returned by Device Specific diagnostics. Usually through a diagnostic status register on the device. See product manual for bit descriptions.')
cpqSiFruCellTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruCellTablePtr.setStatus('optional')
if mibBuilder.loadTexts: cpqSiFruCellTablePtr.setDescription('Index for the cell in cpqSeCellTable where this FRU is physically located.')
cpqSiFruIOCTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruIOCTablePtr.setStatus('optional')
if mibBuilder.loadTexts: cpqSiFruIOCTablePtr.setDescription('Index for the I/O Chassis in cpqSeIOCTablePtr where this FRU is physically located')
cpqSiFruFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruFileId.setStatus('optional')
if mibBuilder.loadTexts: cpqSiFruFileId.setDescription('This represents the FRU file identifier')
cpqSiFruScanRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruScanRev.setStatus('optional')
if mibBuilder.loadTexts: cpqSiFruScanRev.setDescription('This represents FRU scan revision')
cpqSiRackEnclosureMgrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1), )
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrTable.setDescription('Table of possible rack and/or enclosure based systems.')
cpqSiRackEnclosureMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiRackEnclosureMgrIndex"))
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrEntry.setDescription('A entry for a rack and/or enclosure based system.')
cpqSiRackEnclosureMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrIndex.setDescription('A locally-unique index value.')
cpqSiRackEnclosureMgrType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("noEnclosureManagement", 2), ("enclosureManagement", 3), ("onboardAdminManagement", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrType.setDescription('This value specifies the type of enclosure management. other(1) When the type not be determined. noEnclosureManagement(2) The server is part of a rack/enclosure managed system, but there is no dedicated enclosure manager. enclosureManagement(3) The server is part of a rack/enclosure managed system with a dedicated enclosure manager. onboardAdminManagement(4) The server is part of a rack/enclosure managed system with a onboard Administrator.')
cpqSiRackEnclosureMgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrIpAddr.setDescription('The IP address of the rack enclosure manager. The string will be empty if the enclosure does not report the information or it could not be determined.')
cpqSiRackEnclosureMgrWebLink = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrWebLink.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrWebLink.setDescription('The web link to the enclosure managers web based management information for the enclosure. The string will be empty if the enclosure does not report the information or it could not be determined.')
cpqSiRackEnclosureMgrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrCondition.setDescription('The overall condition of the Enclosure. For more detailed status information, follow the cpqSiEnclosureMgrWebLink through the Web Management Agent interface. other(1) This is the default condition for systems when cpqSiRackEnclosureMgrType has a value of noEnclosureManagement(2). When cpqSiRackEnclosureMgrType has a value of enclosureManagement(3), this indicates the status of the enclosure manager could not be determined. ok(2) The enclosure manager is in an ok state. Follow the cpqSiRackEnclosureMgrWebLink link in the Web Management Agents to manage the enclosure. degraded(3) The enclosure manager is in a degraded state. Follow the cpqSiRackEnclosureMgrWebLink link in the Web Management Agents to manage the enclosure. failed(4) The enclosure manager is in a failed state. Follow the cpqSiRackEnclosureMgrWebLink link in the Web Management Agents to manage the enclosure.')
cpqSiRackEnclosureMgrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrSerialNumber.setDescription('The serial number of the enclosure. The string will be empty if the enclosure does not report the information or it could not be determined.')
cpqSiRackEnclosureMgrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrModel.setStatus('optional')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrModel.setDescription('The model name of the enclosure. The string will be empty if it could not be determined.')
cpqSiRackEnclosureMgrName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrName.setStatus('optional')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrName.setDescription('The name of the enclosure. This name logically groups together the Blade servers installed in the same enclosure and it is shared with the other servers in the enclosure. The string will be empty if it could not be determined.')
cpqSiRackEnclosureMgrFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrFwRev.setStatus('optional')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrFwRev.setDescription('The Firmware revision of the Enclosure Manager/Onboard Administrator. The string will be empty if it could not be determined.')
cpqSiRackEnclosureMgrProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrProductID.setStatus('optional')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrProductID.setDescription('The Enclosure product identifier. The string will be empty if it could not be determined.')
cpqSiRackEnclosureMgrUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrUUID.setStatus('optional')
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrUUID.setDescription('The Enclosure unique identifier. The string will be empty if it could not be determined.')
cpqSiServerBladeEnclosureBayNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiServerBladeEnclosureBayNumber.setStatus('optional')
if mibBuilder.loadTexts: cpqSiServerBladeEnclosureBayNumber.setDescription('This value specifies the enclosure bay number occupied by the blade. In case of a blade occupying multiple bays, this will be the lowest enclosure bay number of all the bay numbers occupied by this balde')
cpqSiServerBladeHeight = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("halfHeightBlade", 2), ("fullHeightBlade", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiServerBladeHeight.setStatus('optional')
if mibBuilder.loadTexts: cpqSiServerBladeHeight.setDescription('Blade height is the Blade length. unknown(1) This indicates it could not be determined. halfHeightBlade(2) This indicates a half-height server Blade. fullHeightBlade(3) This indicates a full-height server Blade.')
cpqSiServerBladeWidth = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("singleWide", 2), ("doubleWide", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiServerBladeWidth.setStatus('optional')
if mibBuilder.loadTexts: cpqSiServerBladeWidth.setDescription('Width of the Blade in terms of Enclosure Bays. This pertain to the Blade side that connects to the enclosure backplane.')
cpqSiRackName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 15, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackName.setStatus('optional')
if mibBuilder.loadTexts: cpqSiRackName.setDescription('The rack name. This name is used to logically group together enclosures in a rack and it is shared with other enclosures in the rack. The string will be empty if it could not be determined.')
cpqSiRackUUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 15, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackUUID.setStatus('optional')
if mibBuilder.loadTexts: cpqSiRackUUID.setDescription('The rack unique identifier. The string will be empty if it could be determined.')
cpqSiMPHostName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 16, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMPHostName.setStatus('optional')
if mibBuilder.loadTexts: cpqSiMPHostName.setDescription('The host name of the Management Processor. The string will be empty if it could not be determined.')
cpqSiMPHealthStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMPHealthStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqSiMPHealthStatus.setDescription('The health status of the Management Processor.')
cpqSiHoodRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSiHoodRemoved.setDescription("System hood is removed. The hood status has been set to removed. The system's hood is not in a properly installed state. This situation may result in improper cooling of the system due to air flow changes caused by the missing hood. User Action: Replace the cover (hood), ensure the system's cover is properly installed. Verify the system is in working order.")
cpqSiMonitorConditionOK = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMonitorIndex"))
if mibBuilder.loadTexts: cpqSiMonitorConditionOK.setDescription("Fault reporting features have returned to within their normal operating range for the monitor indicated by cpqSiMonitorIndex. The monitor's condition has been set to OK. User Action: None.")
cpqSiMonitorConditionDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMonitorIndex"))
if mibBuilder.loadTexts: cpqSiMonitorConditionDegraded.setDescription("A fault reporting feature has exceeded normal limits for the monitor indicated by the cpqSiMonitorIndex. The monitor's condition is degraded due to the internal temperature exceeding normal operating limits. The monitor is still useable, but action should be taken to return the condition to OK. User Action: Physically check for obstructions to air flow around the monitor. Check the thermostat in the room that the system occupies. Allow the monitor to cool by turning off the monitor for 5 minutes then turn the monitor back on. After the monitor cools, another alarm indicating an improving condition, such as Monitor OK, will be issued.")
cpqSiMonitorConditionFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMonitorIndex"))
if mibBuilder.loadTexts: cpqSiMonitorConditionFailed.setDescription("A fault reporting feature has exceeded normal limits in the monitor indicated by the cpqSiMonitorIndex. The monitor's condition has been set to failed due to an operational feature exceeding normal operating limits. The monitor will not be useable and should be replaced. User Action: Make a note of the monitor model number and serial number. Replace the monitor. Refer to the appropriate Maintenance and Service Guide for detailed information on a component replacement.")
cpqSiCorrMemErrStatusDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMemErrorIndex"))
if mibBuilder.loadTexts: cpqSiCorrMemErrStatusDegraded.setDescription("Correctable memory error count has exceeded the threshold for the memory module indicated by the 'cpqSiMemErrorIndex' variable. The appropriate cpqSiMemModuleECCStatus has been set to degraded. User Action: For Desktops, the System Administrator should run the F10 Diagnostics on this system and select RAM LONG TEST. If it is determined that a module needs replacing, schedule maintenance for the system and replace the failed memory module. Refer to the appropriate Maintenance and Service Guide for detailed information on a component replacement.")
cpqSiCorrMemErrStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMemErrorIndex"))
if mibBuilder.loadTexts: cpqSiCorrMemErrStatusOk.setDescription("Correctable memory error count is now below the threshold for the memory module indicated by the 'cpqSiMemErrorIndex' variable. The appropriate cpqSiMemModuleECCStatus has been set to ok. User Action: None.")
cpqSiMemConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMemConfigChangeData"))
if mibBuilder.loadTexts: cpqSiMemConfigChange.setDescription('A memory configuration change has occurred. CpqSiMemConfigChangeData will indicate which memory modules slots have changed. User Action: You may want to verify a valid reason for a memory configuration to have occurred. If system issuing the alert is a Desktop running NT, the memory configuration change information is also logged in the NT System Log.')
cpqSiHotPlugSlotBoardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotChassis"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotIndex"))
if mibBuilder.loadTexts: cpqSiHotPlugSlotBoardRemoved.setDescription('Hot Plug Slot Board Removed. A Hot Plug Slot Board has been removed from the specified chassis and slot. User Action: None.')
cpqSiHotPlugSlotBoardInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotChassis"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotIndex"))
if mibBuilder.loadTexts: cpqSiHotPlugSlotBoardInserted.setDescription('Hot Plug Slot Board Inserted. A Hot Plug Slot Board has been inserted into the specified chassis and slot. User Action: None.')
cpqSiHotPlugSlotPowerUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotChassis"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotIndex"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotErrorStatus"))
if mibBuilder.loadTexts: cpqSiHotPlugSlotPowerUpFailed.setDescription('Hot Plug Slot Board Failed Power-Up. A Hot Plug Slot Board has failed to power-up in the specified chassis and slot. User Action: Insure the board and all cables are installed correctly and the board type and revision are the same as the replaced board.')
cpqSiSysBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiSysBatteryIndex"), ("CPQSINFO-MIB", "cpqSiSysBatterySerialNum"))
if mibBuilder.loadTexts: cpqSiSysBatteryFailure.setDescription('The battery indicated by cpqSiSysBatteryIndex has failed and must be replaced. User Action: Contact your System Administrator or Authorized Reseller to order a replacement battery. Recycle your old battery. For proper disposal information, refer to the documentation that came with your computer.')
cpqSiSysBatteryChargingDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiSysBatteryIndex"), ("CPQSINFO-MIB", "cpqSiSysBatterySerialNum"))
if mibBuilder.loadTexts: cpqSiSysBatteryChargingDegraded.setDescription('Significant battery degradation has occurred with battery indicated by cpqSiSysBatteryIndex. The battery can no longer be fully recharged. User Action: If using multiple batteries, run the Power Conservation Utility to identify the battery location. Contact your System Administrator or Authorized Reseller to order a replacement battery.')
cpqSiSysBatteryCalibrationError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiSysBatteryIndex"), ("CPQSINFO-MIB", "cpqSiSysBatterySerialNum"))
if mibBuilder.loadTexts: cpqSiSysBatteryCalibrationError.setDescription('Calibration is needed with battery indicated by cpqSiSysBatteryIndex. The battery can not correctly indicate capacity. User Action: Run the Power Conservation Utility. Contact your System Administrator or Authorized Reseller to order a replacement battery.')
mibBuilder.exportSymbols("CPQSINFO-MIB", cpqSiHotPlugSlotPowerState=cpqSiHotPlugSlotPowerState, cpqSiComponent=cpqSiComponent, cpqSiDisketteBootControl=cpqSiDisketteBootControl, cpqSiRackEnclosureMgrCondition=cpqSiRackEnclosureMgrCondition, cpqSiSysBatteryIndex=cpqSiSysBatteryIndex, cpqSiFruSubAssemblyNumber=cpqSiFruSubAssemblyNumber, cpqSiCurrentPerformanceStatePointer=cpqSiCurrentPerformanceStatePointer, cpqSiMibRevMinor=cpqSiMibRevMinor, cpqSiPerfStateTable=cpqSiPerfStateTable, cpqSiMemConfigChange=cpqSiMemConfigChange, cpqSiSysBatteryHardwareRevision=cpqSiSysBatteryHardwareRevision, cpqSiMemModuleTable=cpqSiMemModuleTable, cpqSiMemConfigChangeData=cpqSiMemConfigChangeData, cpqSiFirmwareRevCellTablePtr=cpqSiFirmwareRevCellTablePtr, cpqSiHotPlugSlotChangeCount=cpqSiHotPlugSlotChangeCount, cpqSiSysSerialNum=cpqSiSysSerialNum, cpqSiDockingStationAssetTag=cpqSiDockingStationAssetTag, cpqSiVirtualSystemEntry=cpqSiVirtualSystemEntry, cpqSiVideoSerialNumber=cpqSiVideoSerialNumber, cpqSiMonitorWidth=cpqSiMonitorWidth, cpqSiSysBatteryEntry=cpqSiSysBatteryEntry, cpqSiMonitorIndex=cpqSiMonitorIndex, cpqSiRackEnclosureMgrModel=cpqSiRackEnclosureMgrModel, cpqSiBoardRevTable=cpqSiBoardRevTable, cpqSiRackEnclosureMgrName=cpqSiRackEnclosureMgrName, cpqSiOsCommonModulePurpose=cpqSiOsCommonModulePurpose, cpqSiQuickLockPassword=cpqSiQuickLockPassword, cpqSiReboot=cpqSiReboot, cpqSiHotPlugSlotIndex=cpqSiHotPlugSlotIndex, cpqSiMPHostName=cpqSiMPHostName, cpqSiProcMicroPatchTable=cpqSiProcMicroPatchTable, cpqSiFixedDiskControl=cpqSiFixedDiskControl, cpqSiSecurity=cpqSiSecurity, cpqSiMonitorConditionFailed=cpqSiMonitorConditionFailed, cpqSiVirtualSystemIndex=cpqSiVirtualSystemIndex, cpqSiMemModuleDate=cpqSiMemModuleDate, cpqSiMemModuleSize=cpqSiMemModuleSize, cpqSiBoardRev=cpqSiBoardRev, cpqSiDockingStationModel=cpqSiDockingStationModel, cpqSiVirtualSystemSerialNumber=cpqSiVirtualSystemSerialNumber, cpqSiMemECCCondition=cpqSiMemECCCondition, cpqSiSysBatterySerialNum=cpqSiSysBatterySerialNum, cpqSiRackEnclosureMgrEntry=cpqSiRackEnclosureMgrEntry, cpqSiFirmwareRevString=cpqSiFirmwareRevString, cpqSiFirmwareLocation=cpqSiFirmwareLocation, cpqSiProductName=cpqSiProductName, cpqSiHotPlugSlotPowerUpFailed=cpqSiHotPlugSlotPowerUpFailed, cpqSiSysServiceNum=cpqSiSysServiceNum, cpqSiFruChassisNumber=cpqSiFruChassisNumber, cpqSiAssetTag=cpqSiAssetTag, cpqSiSystemCpuId=cpqSiSystemCpuId, cpqSiMemErrorIndex=cpqSiMemErrorIndex, cpqSiSysBatteryAssetTag=cpqSiSysBatteryAssetTag, cpqSiServerSystemId=cpqSiServerSystemId, cpqSiMemModuleManufacturer=cpqSiMemModuleManufacturer, cpqSiHotPlugSlotBoardPresent=cpqSiHotPlugSlotBoardPresent, cpqSiMonitorManufacturer=cpqSiMonitorManufacturer, cpqSiAuxiliaryInput=cpqSiAuxiliaryInput, cpqSiFloppyDiskControl=cpqSiFloppyDiskControl, cpqSiAsset=cpqSiAsset, cpqSiProcMicroPatchDate=cpqSiProcMicroPatchDate, cpqSiOwnershipTag=cpqSiOwnershipTag, cpqSiFirmwareRevEntry=cpqSiFirmwareRevEntry, cpqSiFruTable=cpqSiFruTable, cpqSiRackEnclosureMgrWebLink=cpqSiRackEnclosureMgrWebLink, cpqSiRackEnclosureMgrSerialNumber=cpqSiRackEnclosureMgrSerialNumber, cpqSiSysBatteryFailure=cpqSiSysBatteryFailure, cpqSiProductId=cpqSiProductId, cpqSiHotPlugSlotErrorStatus=cpqSiHotPlugSlotErrorStatus, cpqSiMonitorConditionDegraded=cpqSiMonitorConditionDegraded, cpqSiHotPlugSlotChassis=cpqSiHotPlugSlotChassis, cpqSiFirmwareRevTable=cpqSiFirmwareRevTable, cpqSiCorrMemErrStatusDegraded=cpqSiCorrMemErrStatusDegraded, cpqSiMonitor=cpqSiMonitor, cpqSiMonitorThermalCondition=cpqSiMonitorThermalCondition, cpqSiSysBatteryFirmwareRevision=cpqSiSysBatteryFirmwareRevision, cpqSiMPHealthStatus=cpqSiMPHealthStatus, cpqSiPerfStateIndex=cpqSiPerfStateIndex, cpqSiOsCommonModuleTable=cpqSiOsCommonModuleTable, cpqSiOsCommonModuleEntry=cpqSiOsCommonModuleEntry, cpqSiFirmwareCfgValue=cpqSiFirmwareCfgValue, cpqSiRackEnclosureMgrIpAddr=cpqSiRackEnclosureMgrIpAddr, cpqSiFruDescr=cpqSiFruDescr, cpqSiVirtualSystemUUID=cpqSiVirtualSystemUUID, cpqSiSysProductId=cpqSiSysProductId, cpqSiOsCommonModuleIndex=cpqSiOsCommonModuleIndex, cpqSiMonitorEdidRaw=cpqSiMonitorEdidRaw, cpqSiRackEnclosureMgrUUID=cpqSiRackEnclosureMgrUUID, cpqSiSysBatterySmartVersion=cpqSiSysBatterySmartVersion, cpqSiServerBladeHeight=cpqSiServerBladeHeight, cpqSiHotPlugSlotBoardInserted=cpqSiHotPlugSlotBoardInserted, cpqSiMemModuleType=cpqSiMemModuleType, cpqSiFormFactor=cpqSiFormFactor, cpqSiSysBatteryDate=cpqSiSysBatteryDate, cpqSiFirmwareStatus=cpqSiFirmwareStatus, cpqSiFirmwareRevIndex=cpqSiFirmwareRevIndex, cpqSiCurRevDate=cpqSiCurRevDate, cpqSiHoodSensorConfiguration=cpqSiHoodSensorConfiguration, cpqSiQuickBlank=cpqSiQuickBlank, cpqSiMemModuleSerialNoMfgr=cpqSiMemModuleSerialNoMfgr, cpqSiSerialPortBControl=cpqSiSerialPortBControl, cpqSiPerfState=cpqSiPerfState, cpqSiBoardRevCur=cpqSiBoardRevCur, cpqSiBoardRevPrev=cpqSiBoardRevPrev, cpqSiVideoDesc=cpqSiVideoDesc, cpqSiSysBatteryTable=cpqSiSysBatteryTable, cpqSiMemModuleCellTablePtr=cpqSiMemModuleCellTablePtr, cpqSiMP=cpqSiMP, cpqSiSysBatteryChemistry=cpqSiSysBatteryChemistry, cpqSiFruCabinetIDNumber=cpqSiFruCabinetIDNumber, cpqSiOsCommonPollFreq=cpqSiOsCommonPollFreq, cpqSiMonitorOperationalCondition=cpqSiMonitorOperationalCondition, cpqSiFruPositionNumber=cpqSiFruPositionNumber, cpqSiCorrMemErrStatusOk=cpqSiCorrMemErrStatusOk, cpqSiHotPlugSlotBoardCondition=cpqSiHotPlugSlotBoardCondition, cpqSiInterface=cpqSiInterface, cpqSiPowerMgmtStatus=cpqSiPowerMgmtStatus, cpqSiHotPlugSlot=cpqSiHotPlugSlot, cpqSiPerfStateCpuPower=cpqSiPerfStateCpuPower, cpqSiTPMmodule=cpqSiTPMmodule, cpqSiSysBatteryStatus=cpqSiSysBatteryStatus, cpqSiMonitorSerialNumber=cpqSiMonitorSerialNumber, cpqSiSystemId=cpqSiSystemId, cpqSiServerBladeWidth=cpqSiServerBladeWidth, cpqSiFruSlotNumber=cpqSiFruSlotNumber, cpqSiHotPlugSlotBoardRemoved=cpqSiHotPlugSlotBoardRemoved, cpqSiVideoWidth=cpqSiVideoWidth, cpqSiProcMicroPatchIndex=cpqSiProcMicroPatchIndex, cpqSiMonitorTable=cpqSiMonitorTable, cpqSiFlashRomSupport=cpqSiFlashRomSupport, cpqSiParallelPortControl=cpqSiParallelPortControl, cpqSiRackServer=cpqSiRackServer, cpqSiMemModuleEntry=cpqSiMemModuleEntry, cpqSiVideo=cpqSiVideo, cpqSiProcMicroPatchEntry=cpqSiProcMicroPatchEntry, cpqSiFirmwareCfgTable=cpqSiFirmwareCfgTable, cpqSiFirmwareCfgName=cpqSiFirmwareCfgName, cpqSiHotPlugSlotEntry=cpqSiHotPlugSlotEntry, cpqSiMemModuleFrequency=cpqSiMemModuleFrequency, cpqSiFruSiteLocation=cpqSiFruSiteLocation, cpqSiSysBatteryCondition=cpqSiSysBatteryCondition, cpqSiBoardRevEntry=cpqSiBoardRevEntry, cpqSiPerfStateCpuFrequency=cpqSiPerfStateCpuFrequency, cpqSiDockingStation=cpqSiDockingStation, cpqSiRackEnclosure=cpqSiRackEnclosure, cpqSiRackUUID=cpqSiRackUUID, cpqSiRackEnclosureMgrType=cpqSiRackEnclosureMgrType, cpqSiSysBatteryFullCap=cpqSiSysBatteryFullCap, cpqSiMibCondition=cpqSiMibCondition, cpqSiVideoEdidRaw=cpqSiVideoEdidRaw, cpqSiFru=cpqSiFru, cpqSiMibRevMajor=cpqSiMibRevMajor, cpqSiPowerScheme=cpqSiPowerScheme, cpqSiMaxPerformanceState=cpqSiMaxPerformanceState, cpqSiBoardRevIndex=cpqSiBoardRevIndex, cpqSiRackServerShutdownRole=cpqSiRackServerShutdownRole, cpqSiMemModuleIndex=cpqSiMemModuleIndex, cpqSiFruAssetNo=cpqSiFruAssetNo, cpqSiPerfStateEntry=cpqSiPerfStateEntry, cpqSiNetServerMode=cpqSiNetServerMode, cpqSiFruAssemblyNumber=cpqSiFruAssemblyNumber, cpqSiHotPlugSlotSupported=cpqSiHotPlugSlotSupported, cpqSiFruExtendedDiagStatus=cpqSiFruExtendedDiagStatus, cpqSiFruCellTablePtr=cpqSiFruCellTablePtr, cpqSiOsCommonModuleVersion=cpqSiOsCommonModuleVersion, cpqSiHotPlugSlotTable=cpqSiHotPlugSlotTable, cpqSiServerBlade=cpqSiServerBlade, cpqSiSysBatteryDesignCap=cpqSiSysBatteryDesignCap, cpqSiMemModuleSerialNo=cpqSiMemModuleSerialNo, cpqSiMonitorConditionOK=cpqSiMonitorConditionOK, cpqSiFirmwareCfgEntry=cpqSiFirmwareCfgEntry, cpqSiMemModuleSpeed=cpqSiMemModuleSpeed, cpqSiVideoMaxRefreshRate=cpqSiVideoMaxRefreshRate, cpqSiMonitorOverallCondition=cpqSiMonitorOverallCondition, cpqSiMonitorEntry=cpqSiMonitorEntry, cpqSiRackEnclosureMgrTable=cpqSiRackEnclosureMgrTable, cpqSiRackEnclosureMgrIndex=cpqSiRackEnclosureMgrIndex, cpqSiMemModuleTechnology=cpqSiMemModuleTechnology, cpqSiVirtualSystemTable=cpqSiVirtualSystemTable, cpqSiMemBoardIndex=cpqSiMemBoardIndex, cpqSiFruIndex=cpqSiFruIndex, cpqSiHoodRemovedTime=cpqSiHoodRemovedTime, cpqSiFirmwareRevDesc=cpqSiFirmwareRevDesc, cpqSiMonitorMaxRefreshRate=cpqSiMonitorMaxRefreshRate, cpqSiMinPerformanceState=cpqSiMinPerformanceState, cpqSiVideoMaxHorPixel=cpqSiVideoMaxHorPixel, cpqSiMonitorDesc=cpqSiMonitorDesc, cpqSiHotPlugSlotHwLocation=cpqSiHotPlugSlotHwLocation, cpqSiHotPlugSlotCondition=cpqSiHotPlugSlotCondition, cpqSiRackEnclosureMgrProductID=cpqSiRackEnclosureMgrProductID, cpqSiFruIOCTablePtr=cpqSiFruIOCTablePtr, cpqSiSysBatteryChargingDegraded=cpqSiSysBatteryChargingDegraded, cpqSiOsCommon=cpqSiOsCommon, cpqSiFruEntry=cpqSiFruEntry, cpqSiSystemBattery=cpqSiSystemBattery, cpqSiMonitorStatus=cpqSiMonitorStatus, cpqSiProcMicroPatchId=cpqSiProcMicroPatchId, cpqSiFruFirmwareRevision=cpqSiFruFirmwareRevision, cpqSiServerBladeEnclosureBayNumber=cpqSiServerBladeEnclosureBayNumber, cpqSiSysBatteryCalibrationError=cpqSiSysBatteryCalibrationError, cpqSiFruRevision=cpqSiFruRevision, cpqSiFruScanRev=cpqSiFruScanRev, cpqSiMonitorMaxHorPixel=cpqSiMonitorMaxHorPixel, cpqSiRack=cpqSiRack, cpqSiRackName=cpqSiRackName, cpqSiFruClass=cpqSiFruClass, cpqSiSysBatteryModel=cpqSiSysBatteryModel, cpqSiBoardRevHwLocation=cpqSiBoardRevHwLocation, cpqSiMemModulePartNoMfgr=cpqSiMemModulePartNoMfgr, cpqSiSystemBatteryOverallCondition=cpqSiSystemBatteryOverallCondition, cpqSiSmartCoverLockStatus=cpqSiSmartCoverLockStatus, cpqSiBoardRevId=cpqSiBoardRevId, cpqSiHoodRemoved=cpqSiHoodRemoved, cpqSiProcMicroPatchFamily=cpqSiProcMicroPatchFamily, cpqSiSysBatteryManufacturer=cpqSiSysBatteryManufacturer, cpqSiVideoManufactureDate=cpqSiVideoManufactureDate, cpqSiDockingStationStatus=cpqSiDockingStationStatus, cpqSiPrevRevDate=cpqSiPrevRevDate, cpqSiRackServerMasterName=cpqSiRackServerMasterName, cpqSiFruFileId=cpqSiFruFileId, cpqSiFruVendor=cpqSiFruVendor, cpqSiRackEnclosureMgrFwRev=cpqSiRackEnclosureMgrFwRev, cpqSiVideoMaxVertPixel=cpqSiVideoMaxVertPixel, cpqSiOsCommonModuleName=cpqSiOsCommonModuleName, cpqSiMemModuleHwLocation=cpqSiMemModuleHwLocation, cpqSiAssetTagMaxLength=cpqSiAssetTagMaxLength, cpqSiMemModuleECCStatus=cpqSiMemModuleECCStatus, cpqSiMonitorManufactureDate=cpqSiMonitorManufactureDate, cpqSiSystemBoard=cpqSiSystemBoard, cpqSystemInfo=cpqSystemInfo, cpqSiFruSerialNumber=cpqSiFruSerialNumber, cpqSiSysBatteryHwLocation=cpqSiSysBatteryHwLocation, cpqSiMemModulePartNo=cpqSiMemModulePartNo, cpqSiFruType=cpqSiFruType, cpqSiFruDiagStatus=cpqSiFruDiagStatus, cpqSiOsCommonModuleDate=cpqSiOsCommonModuleDate, cpqSiBoardRevSlotIndex=cpqSiBoardRevSlotIndex, cpqSiSysBatteryRemainingCap=cpqSiSysBatteryRemainingCap, cpqSiUSBPortControl=cpqSiUSBPortControl, cpqSiPowerOnPassword=cpqSiPowerOnPassword, cpqSiMonitorMaxVertPixel=cpqSiMonitorMaxVertPixel, cpqSiMonitorHeight=cpqSiMonitorHeight, cpqSiDockingStationSerialNum=cpqSiDockingStationSerialNum, cpqSiPowerSchemeName=cpqSiPowerSchemeName, cpqSiVideoHeight=cpqSiVideoHeight, cpqSiQuickTestRomDate=cpqSiQuickTestRomDate, cpqSiSerialPortAControl=cpqSiSerialPortAControl, cpqSiMibRev=cpqSiMibRev, cpqSiMemModuleCellStatus=cpqSiMemModuleCellStatus, cpqSiRebootFlags=cpqSiRebootFlags, cpqSiFruPartNumber=cpqSiFruPartNumber)
