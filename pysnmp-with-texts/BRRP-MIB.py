#
# PySNMP MIB module BRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BRRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, IpAddress, enterprises, Integer32, Gauge32, iso, NotificationType, ModuleIdentity, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "enterprises", "Integer32", "Gauge32", "iso", "NotificationType", "ModuleIdentity", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "ObjectIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
brrp = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 40))
biboBrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 40, 1), )
if mibBuilder.loadTexts: biboBrrpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperTable.setDescription("Operations table for a BRRP router which consists of a sequence (i.e., one or more conceptual rows) of 'biboBrrpOperEntry' items.")
biboBrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1), ).setIndexNames((0, "BRRP-MIB", "biboBrrpVirtIfIndex"), (0, "BRRP-MIB", "biboBrrpOperVrId"))
if mibBuilder.loadTexts: biboBrrpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperEntry.setDescription("An entry in the biboBrrpOperTable containing the operational characteristics of a virtual router. On a BRRP router, a given virtual router is identified by a combination of the IF index and VRID. Rows in the table cannot be modified unless the value of `biboBrrpOperAdminState' is `disabled' and the `biboBrrpOperState' has transitioned to `initialize'.")
biboBrrpOperVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpOperVrId.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperVrId.setDescription('This object contains the Virtual Router Identifier (VRID).')
biboBrrpVirtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpVirtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpVirtIfIndex.setDescription('The index of the virtual interface used by the virtual router.')
biboBrrpOperMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpOperMasterIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperMasterIpAddr.setDescription("The master router's real (primary) IP address. This is the IP address listed as the source in BRRP advertisement last received by this virtual router.")
biboBrrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3))).clone('initialize')).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpOperState.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperState.setDescription("The current state of the virtual router. This object has four defined values: - `initialize', which indicates that all the virtual router is waiting for a startup event. - `backup', which indicates the virtual router is monitoring the availability of the master router. - `master', which indicates that the virtual router is forwarding packets for IP addresses that are associated with this router. Setting the `brrpOperAdminState' object (below) initiates transitions in the value of this object.")
biboBrrpOperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("delete", 3))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpOperAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperAdminState.setDescription("This object will enable/disable the virtual router function. Setting the value to `up', will transition the state of the virtual router from `initialize' to `backup' or `master', depending on the value of `brrpOperPriority'. Setting the value to `down', will transition the router from `master' or `backup' to `initialize'. State transitions may not be immediate; they sometimes depend on other factors, such as the interface (IF) state. The `brrpOperAdminState' object must be set to `down' prior to modifying the other read-only objects in the conceptual row. The value of the `brrpOperRowStatus' object (below) must be `active', signifying that the conceptual row is valid (i.e., the objects are correctly set), in order for this object to be set to `up'. Use `delete' to delete this table entry permanently.")
biboBrrpOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpOperPriority.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperPriority.setDescription("This object specifies the priority to be used for the virtual router master election process. Higher values imply higher priority. A priority of '0', although not settable, is sent by the master router to indicate that this router has ceased to participate in BRRP and a backup virtual router should transition to become a new master. A priority of 255 is used for the router that owns the associated IP address(es).")
biboBrrpOperAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simpleTextPassword", 2), ("ipAuthenticationHeader", 3))).clone('noAuthentication')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpOperAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperAuthType.setDescription('Authentication type used for BRRP protocol exchanges between virtual routers. This value of this object is the same for a given ifIndex. New enumerations to this list can only be added via a new RFC on the standards track.')
biboBrrpOperAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpOperAuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperAuthKey.setDescription("The Authentication Key. This object is set according to the value of the 'brrpOperAuthType' object ('simpleTextPassword' or 'ipAuthenticationHeader'). If the length of the value is less than 16 octets, the agent will left adjust and zero fill to 16 octets. The value of this object is the same for a given ifIndex. When read, biboBrrpOperAuthKey always returns an Octet String of length zero.")
biboBrrpOperAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpOperAdvertisementInterval.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperAdvertisementInterval.setDescription('The time interval, in seconds, between sending advertisement messages. Only the master router sends BRRP advertisements.')
biboBrrpOperMasterDownRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpOperMasterDownRetries.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperMasterDownRetries.setDescription('Calculation of the MasterDownInterval from RFC 2338: Skew_Time = ((256 - Priority) / 256) MasterDownInterval = (MasterDownRetries * AdvertisementInterval) + Skew_Time')
biboBrrpOperPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpOperPreemptMode.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperPreemptMode.setDescription('Controls whether a higher priority virtual router will preempt a lower priority master.')
biboBrrpOperVirtualRouterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpOperVirtualRouterUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperVirtualRouterUpTime.setDescription("This is the value of the `sysUpTime' object when this virtual router (i.e., the `brrpOperState') transitioned out of `initialized'.")
biboBrrpMasterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboBrrpMasterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpMasterIfIndex.setDescription('The index of the master interface controlling the virtual router.')
biboBrrpOperDecrPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpOperDecrPrio.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpOperDecrPrio.setDescription("This is the value currently decremented from the virtual router priority to be used for the virtual router master election process Actual priority = (biboBrrpOperPriority - biboBrrpOperDecrPrio) This value could be either '0' or 'aliveSlaveBrrpDecrPrio': - it is set to 'aliveSlaveBrrpDecrPrio' when the alive surveillance (aliveSlaveBrrpState) triggers 'decrPrio' while this router state is 'up' (biboBrrpOperState). - it is cleared to '0' when the alive surveillance (aliveSlaveBrrpState) triggers 'up' while this router state is already 'up' (biboBrrpOperState). The default value is '0'.")
biboBrrpRouterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 40, 2), )
if mibBuilder.loadTexts: biboBrrpRouterStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpRouterStatsTable.setDescription('Table of virtual router statistics.')
biboBrrpRouterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1), ).setIndexNames((0, "BRRP-MIB", "biboBrrpStatsIfIndex"), (0, "BRRP-MIB", "biboBrrpStatsVrId"))
if mibBuilder.loadTexts: biboBrrpRouterStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpRouterStatsEntry.setDescription('An entry in the table, containing statistics information about a given virtual router.')
biboBrrpStatsVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsVrId.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsVrId.setDescription('This object contains the Virtual Router Identifier (VRID).')
biboBrrpStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsIfIndex.setDescription('The index of the virtual interface used by the virtual router.')
biboBrrpStatsBecomeMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsBecomeMaster.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsBecomeMaster.setDescription("The total number of times that this virtual router's state has transitioned to MASTER.")
biboBrrpStatsAdvertiseRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsAdvertiseRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsAdvertiseRcvd.setDescription('The total number of BRRP advertisements received by this virtual router.')
biboBrrpStatsAdvertiseIntervalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsAdvertiseIntervalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsAdvertiseIntervalErrors.setDescription('The total number of BRRP advertisement packets received for which the advertisement interval is different than the one configured for the local virtual router.')
biboBrrpStatsAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsAuthFailures.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsAuthFailures.setDescription('The total number of BRRP packets received that do not pass the authentication check.')
biboBrrpStatsIpTtlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsIpTtlErrors.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsIpTtlErrors.setDescription('The total number of BRRP packets received by the virtual router with IP TTL (Time-To-Live) not equal to 255.')
biboBrrpStatsInvalidTypePktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsInvalidTypePktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsInvalidTypePktsRcvd.setDescription("The number of BRRP packets received by the virtual router with an invalid value in the 'type' field.")
biboBrrpStatsInvalidAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsInvalidAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsInvalidAuthType.setDescription('The total number of packets received with an unknown authentication type.')
biboBrrpStatsAuthTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsAuthTypeMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsAuthTypeMismatch.setDescription("The total number of packets received with 'Auth Type' not equal to the locally configured authentication method (`brrpOperAuthType').")
biboBrrpStatsPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsPacketLengthErrors.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsPacketLengthErrors.setDescription('The total number of packets received with a packet length less than the length of the BRRP header.')
biboBrrpStatsChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsChecksumErrors.setDescription('The total number of BRRP packets received with an invalid BRRP checksum value.')
biboBrrpStatsVersionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 40, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboBrrpStatsVersionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: biboBrrpStatsVersionErrors.setDescription('The total number of BRRP packets received with an unknown or unsupported version number.')
mibBuilder.exportSymbols("BRRP-MIB", bibo=bibo, biboBrrpStatsPacketLengthErrors=biboBrrpStatsPacketLengthErrors, biboBrrpStatsBecomeMaster=biboBrrpStatsBecomeMaster, biboBrrpOperAdvertisementInterval=biboBrrpOperAdvertisementInterval, biboBrrpStatsInvalidTypePktsRcvd=biboBrrpStatsInvalidTypePktsRcvd, biboBrrpStatsAdvertiseRcvd=biboBrrpStatsAdvertiseRcvd, biboBrrpOperVirtualRouterUpTime=biboBrrpOperVirtualRouterUpTime, biboBrrpStatsChecksumErrors=biboBrrpStatsChecksumErrors, brrp=brrp, biboBrrpMasterIfIndex=biboBrrpMasterIfIndex, biboBrrpStatsAdvertiseIntervalErrors=biboBrrpStatsAdvertiseIntervalErrors, biboBrrpOperAuthType=biboBrrpOperAuthType, biboBrrpOperMasterDownRetries=biboBrrpOperMasterDownRetries, biboBrrpOperPreemptMode=biboBrrpOperPreemptMode, biboBrrpOperAdminState=biboBrrpOperAdminState, biboBrrpOperPriority=biboBrrpOperPriority, biboBrrpOperAuthKey=biboBrrpOperAuthKey, biboBrrpOperTable=biboBrrpOperTable, biboBrrpStatsIfIndex=biboBrrpStatsIfIndex, biboBrrpRouterStatsEntry=biboBrrpRouterStatsEntry, biboBrrpVirtIfIndex=biboBrrpVirtIfIndex, biboBrrpStatsAuthTypeMismatch=biboBrrpStatsAuthTypeMismatch, biboBrrpRouterStatsTable=biboBrrpRouterStatsTable, biboBrrpOperMasterIpAddr=biboBrrpOperMasterIpAddr, bintec=bintec, biboBrrpOperEntry=biboBrrpOperEntry, biboBrrpStatsVersionErrors=biboBrrpStatsVersionErrors, biboBrrpStatsIpTtlErrors=biboBrrpStatsIpTtlErrors, biboBrrpStatsInvalidAuthType=biboBrrpStatsInvalidAuthType, biboBrrpOperVrId=biboBrrpOperVrId, biboBrrpOperState=biboBrrpOperState, biboBrrpOperDecrPrio=biboBrrpOperDecrPrio, biboBrrpStatsAuthFailures=biboBrrpStatsAuthFailures, biboBrrpStatsVrId=biboBrrpStatsVrId)
