#
# PySNMP MIB module BLADETYPE2-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADETYPE2-ACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hpSwitchBladeType2_Mgmt, = mibBuilder.importSymbols("HP-SWITCH-PL-MIB", "hpSwitchBladeType2-Mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Counter32, Unsigned32, Gauge32, IpAddress, MibIdentifier, iso, TimeTicks, Integer32, Bits, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Counter32", "Unsigned32", "Gauge32", "IpAddress", "MibIdentifier", "iso", "TimeTicks", "Integer32", "Bits", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
acl = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9))
if mibBuilder.loadTexts: acl.setLastUpdated('200510120000Z')
if mibBuilder.loadTexts: acl.setOrganization('Hewlett Packard Company')
if mibBuilder.loadTexts: acl.setContactInfo('customerservice@hp.com')
if mibBuilder.loadTexts: acl.setDescription('The MIB module for the Access Control List configuration and statistics.')
acConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1))
acList = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1))
aclBlock = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2))
aclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3))
aclCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1), )
if mibBuilder.loadTexts: aclCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTable.setDescription('The table of current ACL configuration.')
aclCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1), ).setIndexNames((0, "BLADETYPE2-ACL-MIB", "aclCurCfgIndex"))
if mibBuilder.loadTexts: aclCurCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEntry.setDescription('Current information about a particular ACL configuration entry.')
aclCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aclCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgIndex.setDescription('The index associated with this ACL entry.')
aclCurCfgBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgBlock.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgBlock.setDescription('The index of the ACL block to which this ACL entry is a member of. A value of zero means the ACL is not a member of any block.')
aclCurCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgGroup.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgGroup.setDescription('The index of the ACL group to which this ACL entry is a member of. A value of zero means the ACL is not a member of any group.')
aclCurCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setcos", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgFilterAction.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgFilterAction.setDescription('The action to be performed on a packet that matches the filter settings of this ACL entry.')
aclCurCfgFilterActionSetCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgFilterActionSetCOS.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgFilterActionSetCOS.setDescription('The value to be used when the action to be performed is setCOS for this ACL entry.')
aclCurCfgEthFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ethernet2", 1), ("snap", 2), ("llc", 3), ("ieee802dot3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEthFmt.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEthFmt.setDescription('The packet ethernet format to be filtered.')
aclCurCfgTagFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTagFmt.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTagFmt.setDescription('The packet tag format to be filtered.')
aclCurCfgSrcMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcMACAddress.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcMACAddress.setDescription('The source MAC address to be filtered.')
aclCurCfgSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcMACMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcMACMask.setDescription('The address mask applied to aclCurCfgSrcMACAddress for filtering.')
aclCurCfgDstMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstMACAddress.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstMACAddress.setDescription('The destination MAC address to be filtered.')
aclCurCfgDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstMACMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstMACMask.setDescription('The address mask applied to aclCurCfgDstMACAddress for filtering.')
aclCurCfgEthernetTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("rarp", 5), ("any", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEthernetTypeName.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEthernetTypeName.setDescription('The Ethernet type to be filtered. If the value of this object is other(7), the value of aclNewCfgEthernetTypeValue indicates the ethernet type that will be filtered.')
aclCurCfgEthernetTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEthernetTypeValue.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEthernetTypeValue.setDescription('The Ethernet type value to be filtered. The value of this object is equivalent to the value of aclNewCfgEthernetTypeName except when the value of aclNewCfgEthernetTypeName is other(7), which can be any user-defined value for this object.')
aclCurCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgVLanId.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgVLanId.setDescription('The virtual LAN identifier to be filtered.')
aclCurCfgVLanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgVLanMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgVLanMask.setDescription('The mask applied to aclCurCfgVLanId for filtering.')
aclCurCfg8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfg8021pPriority.setStatus('current')
if mibBuilder.loadTexts: aclCurCfg8021pPriority.setDescription('The 802.1p priority to be filtered.')
aclCurCfgTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTypeOfService.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTypeOfService.setDescription('The type of service to be filtered.')
aclCurCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgProtocol.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgProtocol.setDescription('The protocol to be filtered.')
aclCurCfgSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcIPAddress.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcIPAddress.setDescription('The source IP address to be filtered.')
aclCurCfgSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcIPMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcIPMask.setDescription('The address mask applied to aclCurCfgSrcIPAddress for filtering.')
aclCurCfgDstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstIPAddress.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstIPAddress.setDescription('The destination IP address to be filtered.')
aclCurCfgDstIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstIPMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstIPMask.setDescription('The address mask applied to aclCurCfgDstIPAddress for filtering.')
aclCurCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcPort.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcPort.setDescription('The source TCP/UDP port number to be filtered.')
aclCurCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcPortMask.setDescription('The mask applied to aclCurCfgSrcPort for filtering.')
aclCurCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstPort.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstPort.setDescription('The destination TCP/UDP port number to be filtered.')
aclCurCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstPortMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstPortMask.setDescription('The mask applied to aclCurCfgDstPort for filtering.')
aclCurCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 28), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTCPFlags.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTCPFlags.setDescription('The TCP flags to be filtered. OCTET xxxxxxxx ||||..|| ||||..||_tcpFIN(7) ||||..|__tcpSYN(6) |||| ||||_____tcpACK(3) |||______tcpURG(2) ||_______reserved2(1) |________reserved1(0) where: - reserved1 - 0; - reserved2 - 0; - x - 0 or 1; ')
aclCurCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 39), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTCPFlagsMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTCPFlagsMask.setDescription('The TCP flags mask. OCTET xxxxxxxx ||||..|| ||||..||_tcpFIN(7) ||||..|__tcpSYN(6) |||| ||||_____tcpACK(3) |||______tcpURG(2) ||_______reserved2(1) |________reserved1(0) where: - reserved1 - 0; - reserved2 - 0; - x - 0 or 1; ')
aclCurCfgEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEgressPorts.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEgressPorts.setDescription('The port list in the ACL configured for egress filtering. The ports are presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ port 9 || || || ||___ port 8 || |____ port 7 || . . . ||_________ port 2 |__________ port 1 where x: 1 - the represented port is configured for filtering. 0 - the represented port is not configured for filtering.')
aclCurCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgStatistics.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgStatistics.setDescription('Whether statistics collection for this ACL is enabled or not.')
aclNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2), )
if mibBuilder.loadTexts: aclNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTable.setDescription('The table of new ACL configuration.')
aclNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1), ).setIndexNames((0, "BLADETYPE2-ACL-MIB", "aclNewCfgIndex"))
if mibBuilder.loadTexts: aclNewCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEntry.setDescription('New information about a particular ACL configuration.')
aclNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aclNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgIndex.setDescription('The index associated with this ACL entry.')
aclNewCfgBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgBlock.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgBlock.setDescription('The index of the ACL block to which this ACL entry is a member of. A value of zero means the ACL is not a member of any block.')
aclNewCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgGroup.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgGroup.setDescription('The index of the ACL group to which this ACL entry is a member of. A value of zero means the ACL is not a member of any group.')
aclNewCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setcos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgFilterAction.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgFilterAction.setDescription('The action to be performed on a packet that matches the filter settings of this ACL entry.')
aclNewCfgFilterActionSetCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("cos0", 1), ("cos1", 2), ("cos2", 3), ("cos3", 4), ("cos4", 5), ("cos5", 6), ("cos6", 7), ("cos7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgFilterActionSetCOS.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgFilterActionSetCOS.setDescription('The COS queue to be used when the action for this ACL entry is set to SetCOS.')
aclNewCfgEthFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ethernet2", 1), ("snap", 2), ("llc", 3), ("ieee802dot3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthFmt.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEthFmt.setDescription('The packet ethernet format to be filtered.')
aclNewCfgTagFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("tagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTagFmt.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTagFmt.setDescription('The packet tagging format to be filtered.')
aclNewCfgSrcMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcMACAddress.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcMACAddress.setDescription('The source MAC address to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgSrcMACMask object, if not yet set, will be automatically set to ff:ff:ff:ff:ff.')
aclNewCfgSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcMACMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcMACMask.setDescription('The address mask to be applied to aclNewCfgSrcMACAddress for filtering.')
aclNewCfgDstMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 11), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstMACAddress.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstMACAddress.setDescription('The destination MAC address to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgDstMACMask object, if not yet set, will be automatically set to ff:ff:ff:ff:ff.')
aclNewCfgDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstMACMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstMACMask.setDescription('The address mask to be applied to aclNewCfgDstMACAddress for filtering.')
aclNewCfgEthernetTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("rarp", 5), ("any", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthernetTypeName.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEthernetTypeName.setDescription('The Ethernet type to be filtered. If the value of this object is other(7), the value of aclNewCfgEthernetTypeValue indicates the ethernet type that will be filtered. If this object is set to a value other than other(7), the value of the aclNewCfgEthernetTypeValue object is automatically set, as follows: aclNewCfgEthernetTypeName aclNewCfgEthernetTypeValue none(0) 0 arp(1) 2054 (0x0806) ipv4(2) 2048 (0x0800) ipv6(3) 34525 (0x86dd) mpls(4) 34887 (0x8847) rarp(5) 32821 (0x8035) any(6) 65535 (0xffff) ')
aclNewCfgEthernetTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthernetTypeValue.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEthernetTypeValue.setDescription('The Ethernet type value to be filtered. The value of this object is equivalent to the value of aclNewCfgEthernetTypeName except when the value of aclNewCfgEthernetTypeName is other(7), which can be any user-defined value for this object.')
aclNewCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgVLanId.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgVLanId.setDescription('The virtual LAN identifier to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgVLanMask object, if not yet set, will be automatically set to 4095 (0xfff).')
aclNewCfgVLanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgVLanMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgVLanMask.setDescription('The mask to be applied to aclNewCfgVLanId for filtering.')
aclNewCfg8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfg8021pPriority.setStatus('current')
if mibBuilder.loadTexts: aclNewCfg8021pPriority.setDescription('The 802.1p priority to be filtered.')
aclNewCfgTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTypeOfService.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTypeOfService.setDescription('The type of service to be filtered.')
aclNewCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgProtocol.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgProtocol.setDescription('The protocol to be filtered.')
aclNewCfgSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcIPAddress.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcIPAddress.setDescription('The source IP address to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgSrcIPMask object, if not yet set, will be automatically set to 255.255.255.255.')
aclNewCfgSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcIPMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcIPMask.setDescription('The address mask to be applied to aclNewCfgSrcIPAddress for filtering.')
aclNewCfgDstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstIPAddress.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstIPAddress.setDescription('The destination IP address to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgDstIPMask object, if not yet set, will be automatically set to 255.255.255.255.')
aclNewCfgDstIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstIPMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstIPMask.setDescription('The address mask to be applied to aclNewCfgDstIPAddress for filtering.')
aclNewCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcPort.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcPort.setDescription('The source TCP/UDP port number to be filtered. Whenever this object is set if the aclNewCfgSrcPortMask object is not set will be automatically set to 65535 (0xffff).')
aclNewCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcPortMask.setDescription('The mask to be applied to aclNewCfgSrcPort for filtering.')
aclNewCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstPort.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstPort.setDescription('The destination TCP/UDP port number to be filtered. Whenever this object is set the aclNewCfgSrcPortMask object, if not yet set, will be automatically set to 65535 (0xffff).')
aclNewCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstPortMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstPortMask.setDescription('The mask to be applied to aclNewCfgDstPort for filtering.')
aclNewCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 28), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTCPFlags.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTCPFlags.setDescription('The TCP flags to be filtered. The TCP flags are presented in bitmap format, as follows: OCTET xxxxxxxx ||||..|| ||||..||_tcpFIN(7) ||||..|__tcpSYN(6) |||| ||||_____tcpACK(3) |||______tcpURG(2) ||_______reserved2(1) |________reserved1(0) where: - reserved1 - 0; - reserved2 - 0; - x - 0 or 1; ')
aclNewCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 39), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTCPFlagsMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTCPFlagsMask.setDescription('The TCP flags mask. The TCP flags are presented in bitmap format, as follows: OCTET xxxxxxxx ||||..|| ||||..||_tcpFIN(7) ||||..|__tcpSYN(6) |||| ||||_____tcpACK(3) |||______tcpURG(2) ||_______reserved2(1) |________reserved1(0) where: - reserved1 - 0; - reserved2 - 0; - x - 0 or 1; Default value is 0x3f.')
aclNewCfgEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgEgressPorts.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEgressPorts.setDescription('The port list in the ACL configured for egress filtering. The ports are presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ port 9 || || || ||___ port 8 || |____ port 7 || . . . ||_________ port 2 |__________ port 1 where x: 1 - the represented port is configured for filtering. 0 - the represented port is not configured for filtering.')
aclNewCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgStatistics.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgStatistics.setDescription('Whether statistics collection for this ACL is enabled or not.')
aclNewCfgAddEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAddEgressPort.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAddEgressPort.setDescription('The port to be added to the specified ACL for egress filtering. A value of zero is always returned when this object is read.')
aclNewCfgRemoveEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgRemoveEgressPort.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgRemoveEgressPort.setDescription('The port to be removed from the specified ACL. A value of zero is always returned when this object is read.')
aclNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDelete.setDescription('This is an action object to delete an ACL entry. A value of other(1) is always returned when this object is read.')
aclBlockCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 1), )
if mibBuilder.loadTexts: aclBlockCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclBlockCurCfgTable.setDescription('The table of current ACL block configuration.')
aclBlockCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 1, 1), ).setIndexNames((0, "BLADETYPE2-ACL-MIB", "aclBlockCurCfgIndex"))
if mibBuilder.loadTexts: aclBlockCurCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclBlockCurCfgEntry.setDescription('Current information about a particular ACL block configuration.')
aclBlockCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aclBlockCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclBlockCurCfgIndex.setDescription('The index associated with this ACL block entry.')
aclBlockCurCfgMemberAcls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclBlockCurCfgMemberAcls.setStatus('current')
if mibBuilder.loadTexts: aclBlockCurCfgMemberAcls.setDescription('The ACL members of this ACL block, presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ ACL 9 || || || ||___ ACL 8 || |____ ACL 7 || . . . ||_________ ACL 2 |__________ ACL 1 where x: 1 - the represented ACL is a member of the block. 0 - the represented ACL is not a member of the block.')
aclBlockNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 2), )
if mibBuilder.loadTexts: aclBlockNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclBlockNewCfgTable.setDescription('The table of new ACL block configuration.')
aclBlockNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-ACL-MIB", "aclBlockNewCfgIndex"))
if mibBuilder.loadTexts: aclBlockNewCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclBlockNewCfgEntry.setDescription('New information about a particular ACL block configuration.')
aclBlockNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aclBlockNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclBlockNewCfgIndex.setDescription('The index associated with this ACL block entry.')
aclBlockNewCfgMemberAcls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclBlockNewCfgMemberAcls.setStatus('current')
if mibBuilder.loadTexts: aclBlockNewCfgMemberAcls.setDescription('The ACL members of this ACL block, presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ ACL 9 || || || ||___ ACL 8 || |____ ACL 7 || . . . ||_________ ACL 2 |__________ ACL 1 where x: 1 - the represented ACL is a member of the block. 0 - the represented ACL is not a member of the block.')
aclBlockNewCfgAddAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclBlockNewCfgAddAcl.setStatus('current')
if mibBuilder.loadTexts: aclBlockNewCfgAddAcl.setDescription('The index of the ACL entry to be added into this ACL block. A successful set operation on this object will also set the bit corresponding to the ACL entry in the aclBlockNewCfgMemberAcls bitmap. A value of zero is always returned when this object is read.')
aclBlockNewCfgRemoveAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclBlockNewCfgRemoveAcl.setStatus('current')
if mibBuilder.loadTexts: aclBlockNewCfgRemoveAcl.setDescription('The index of the ACL entry to be removed from this ACL block. A successful set operation on this object will unset the bit corresponding to the ACL entry in the aclBlockNewCfgMemberAcls bitmap. A value of zero is always returned when this object is read.')
aclBlockNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclBlockNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: aclBlockNewCfgDelete.setDescription('This is an action object to delete an ACL block. A value of other(1) is always returned when this object is read.')
aclGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 1), )
if mibBuilder.loadTexts: aclGroupCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclGroupCurCfgTable.setDescription('The table of current ACL Group configuration.')
aclGroupCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-ACL-MIB", "aclGroupCurCfgIndex"))
if mibBuilder.loadTexts: aclGroupCurCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclGroupCurCfgEntry.setDescription('Information about a particular ACL configuration.')
aclGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aclGroupCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclGroupCurCfgIndex.setDescription('The index associated with this ACL Group entry.')
aclGroupCurCfgMemberAcls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclGroupCurCfgMemberAcls.setStatus('current')
if mibBuilder.loadTexts: aclGroupCurCfgMemberAcls.setDescription('The ACL members of this ACL group, presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ ACL 9 || || || ||___ ACL 8 || |____ ACL 7 || . . . ||_________ ACL 2 |__________ ACL 1 where x: 1 - the represented ACL is a member of the group. 0 - the represented ACL is not a member of the group.')
aclGroupCurCfgMemberBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclGroupCurCfgMemberBlocks.setStatus('current')
if mibBuilder.loadTexts: aclGroupCurCfgMemberBlocks.setDescription('The ACL block members of this ACL group, presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ ACL Block 9 || || || ||___ ACL Block 8 || |____ ACL Block 7 || . . . . ||_________ ACL Block 2 |__________ ACL Block 1 where x: 1 - the represented ACL block is a member of the group. 0 - the represented ACL block is not a member of the group.')
aclGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2), )
if mibBuilder.loadTexts: aclGroupNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgTable.setDescription('The table of new ACL Group configuration.')
aclGroupNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-ACL-MIB", "aclGroupNewCfgIndex"))
if mibBuilder.loadTexts: aclGroupNewCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgEntry.setDescription('New information about a particular ACL configuration.')
aclGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aclGroupNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgIndex.setDescription('The index associated with this ACL Group entry.')
aclGroupNewCfgMemberAcls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclGroupNewCfgMemberAcls.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgMemberAcls.setDescription('The ACL members of this ACL group, presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ ACL 9 || || || ||___ ACL 8 || |____ ACL 7 || . . . ||_________ ACL 2 |__________ ACL 1 where x: 1 - the represented ACL is a member of the group. 0 - the represented ACL is not a member of the group.')
aclGroupNewCfgMemberBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclGroupNewCfgMemberBlocks.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgMemberBlocks.setDescription('The ACL block members of this ACL group, presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ ACL Block 9 || || || ||___ ACL Block 8 || |____ ACL Block 7 || . . . . ||_________ ACL Block 2 |__________ ACL Block 1 where x: 1 - the represented ACL block is a member of the group. 0 - the represented ACL block is not a member of the group.')
aclGroupNewCfgAddAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclGroupNewCfgAddAcl.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgAddAcl.setDescription('The index of the ACL entry to be added into this ACL group. A successful set operation on this object will also set the bit corresponding to the ACL entry in the aclGroupNewCfgMemberAcls bitmap. A value of zero is always returned when this object is read.')
aclGroupNewCfgRemoveAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclGroupNewCfgRemoveAcl.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgRemoveAcl.setDescription('The index of the ACL entry to be removed from this ACL group. A successful set operation on this object will unset the bit corresponding to the ACL entry in the aclGroupNewCfgMemberAcls bitmap. A value of zero is always returned when this object is read.')
aclGroupNewCfgAddBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclGroupNewCfgAddBlock.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgAddBlock.setDescription('The index of the ACL block entry to be added into this ACL group. A successful set operation on this object will also set the bit corresponding to the ACL block entry in the aclGroupNewCfgMemberBlocks bitmap. A value of zero is always returned when this object is read.')
aclGroupNewCfgRemoveBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclGroupNewCfgRemoveBlock.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgRemoveBlock.setDescription('The index of the ACL block entry to be removed from this ACL group. A successful set operation on this object will unset the bit corresponding to the ACL block entry in the aclGroupNewCfgMemberBlocks bitmap. A value of zero is always returned when this object is read.')
aclGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 9, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclGroupNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgDelete.setDescription('This is an action object to delete an ACL group. A value of other(1) is always returned when this object is read.')
mibBuilder.exportSymbols("BLADETYPE2-ACL-MIB", aclGroupCurCfgMemberBlocks=aclGroupCurCfgMemberBlocks, acl=acl, aclNewCfgSrcIPAddress=aclNewCfgSrcIPAddress, aclGroupNewCfgDelete=aclGroupNewCfgDelete, aclCurCfgDstMACMask=aclCurCfgDstMACMask, aclBlockNewCfgRemoveAcl=aclBlockNewCfgRemoveAcl, aclCurCfgTable=aclCurCfgTable, aclNewCfgDstIPAddress=aclNewCfgDstIPAddress, aclCurCfgEthFmt=aclCurCfgEthFmt, aclNewCfgSrcMACMask=aclNewCfgSrcMACMask, aclNewCfgVLanId=aclNewCfgVLanId, aclNewCfgTagFmt=aclNewCfgTagFmt, aclCurCfgTCPFlags=aclCurCfgTCPFlags, aclNewCfgSrcIPMask=aclNewCfgSrcIPMask, aclCurCfgVLanId=aclCurCfgVLanId, aclNewCfgDelete=aclNewCfgDelete, aclNewCfgDstIPMask=aclNewCfgDstIPMask, aclNewCfgTypeOfService=aclNewCfgTypeOfService, aclNewCfgTCPFlagsMask=aclNewCfgTCPFlagsMask, aclNewCfgEgressPorts=aclNewCfgEgressPorts, aclGroupNewCfgRemoveBlock=aclGroupNewCfgRemoveBlock, aclNewCfgDstPortMask=aclNewCfgDstPortMask, aclBlockCurCfgEntry=aclBlockCurCfgEntry, aclBlock=aclBlock, aclCurCfgTypeOfService=aclCurCfgTypeOfService, aclNewCfgAddEgressPort=aclNewCfgAddEgressPort, aclCurCfgSrcIPMask=aclCurCfgSrcIPMask, aclNewCfgEntry=aclNewCfgEntry, aclCurCfgEthernetTypeValue=aclCurCfgEthernetTypeValue, aclBlockCurCfgMemberAcls=aclBlockCurCfgMemberAcls, aclCurCfgSrcPortMask=aclCurCfgSrcPortMask, aclNewCfgSrcPortMask=aclNewCfgSrcPortMask, aclBlockCurCfgTable=aclBlockCurCfgTable, aclNewCfgStatistics=aclNewCfgStatistics, aclCurCfgProtocol=aclCurCfgProtocol, aclCurCfgTCPFlagsMask=aclCurCfgTCPFlagsMask, aclCurCfgSrcMACMask=aclCurCfgSrcMACMask, aclGroupNewCfgMemberAcls=aclGroupNewCfgMemberAcls, aclCurCfgTagFmt=aclCurCfgTagFmt, aclCurCfgDstPort=aclCurCfgDstPort, aclGroupNewCfgEntry=aclGroupNewCfgEntry, aclCurCfgDstIPMask=aclCurCfgDstIPMask, aclGroup=aclGroup, aclGroupCurCfgTable=aclGroupCurCfgTable, aclNewCfgEthernetTypeName=aclNewCfgEthernetTypeName, aclCurCfgFilterAction=aclCurCfgFilterAction, aclBlockNewCfgEntry=aclBlockNewCfgEntry, aclNewCfgDstMACAddress=aclNewCfgDstMACAddress, acList=acList, aclNewCfgEthFmt=aclNewCfgEthFmt, aclNewCfgGroup=aclNewCfgGroup, aclCurCfgDstIPAddress=aclCurCfgDstIPAddress, aclGroupCurCfgIndex=aclGroupCurCfgIndex, aclNewCfgFilterActionSetCOS=aclNewCfgFilterActionSetCOS, aclNewCfgSrcMACAddress=aclNewCfgSrcMACAddress, aclBlockNewCfgIndex=aclBlockNewCfgIndex, aclNewCfgBlock=aclNewCfgBlock, aclCurCfgFilterActionSetCOS=aclCurCfgFilterActionSetCOS, aclCurCfgDstPortMask=aclCurCfgDstPortMask, aclCurCfgDstMACAddress=aclCurCfgDstMACAddress, aclNewCfgVLanMask=aclNewCfgVLanMask, aclBlockNewCfgMemberAcls=aclBlockNewCfgMemberAcls, aclGroupNewCfgMemberBlocks=aclGroupNewCfgMemberBlocks, aclGroupCurCfgEntry=aclGroupCurCfgEntry, aclNewCfgRemoveEgressPort=aclNewCfgRemoveEgressPort, aclBlockCurCfgIndex=aclBlockCurCfgIndex, aclCurCfgEntry=aclCurCfgEntry, aclNewCfgFilterAction=aclNewCfgFilterAction, acConfig=acConfig, aclCurCfgSrcMACAddress=aclCurCfgSrcMACAddress, aclCurCfgSrcIPAddress=aclCurCfgSrcIPAddress, aclCurCfgSrcPort=aclCurCfgSrcPort, aclNewCfgTable=aclNewCfgTable, aclCurCfgIndex=aclCurCfgIndex, aclGroupNewCfgAddBlock=aclGroupNewCfgAddBlock, PYSNMP_MODULE_ID=acl, aclNewCfg8021pPriority=aclNewCfg8021pPriority, aclGroupNewCfgRemoveAcl=aclGroupNewCfgRemoveAcl, aclNewCfgEthernetTypeValue=aclNewCfgEthernetTypeValue, aclNewCfgProtocol=aclNewCfgProtocol, aclCurCfgEgressPorts=aclCurCfgEgressPorts, aclGroupNewCfgIndex=aclGroupNewCfgIndex, aclCurCfg8021pPriority=aclCurCfg8021pPriority, aclNewCfgIndex=aclNewCfgIndex, aclBlockNewCfgTable=aclBlockNewCfgTable, aclCurCfgBlock=aclCurCfgBlock, aclGroupNewCfgTable=aclGroupNewCfgTable, aclNewCfgDstPort=aclNewCfgDstPort, aclNewCfgSrcPort=aclNewCfgSrcPort, aclBlockNewCfgDelete=aclBlockNewCfgDelete, aclBlockNewCfgAddAcl=aclBlockNewCfgAddAcl, aclCurCfgEthernetTypeName=aclCurCfgEthernetTypeName, aclNewCfgDstMACMask=aclNewCfgDstMACMask, aclCurCfgGroup=aclCurCfgGroup, aclGroupNewCfgAddAcl=aclGroupNewCfgAddAcl, aclNewCfgTCPFlags=aclNewCfgTCPFlags, aclCurCfgVLanMask=aclCurCfgVLanMask, aclGroupCurCfgMemberAcls=aclGroupCurCfgMemberAcls, aclCurCfgStatistics=aclCurCfgStatistics)
