#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-Frf5EpMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-Frf5EpMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
mscMcsMgrIndex, mscMcsMgr = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex", "mscMcsMgr")
StorageType, Counter32, DisplayString, Unsigned32, Integer32, RowPointer, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "StorageType", "Counter32", "DisplayString", "Unsigned32", "Integer32", "RowPointer", "RowStatus")
HexString, AsciiString, NonReplicated, IntegerSequence = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "HexString", "AsciiString", "NonReplicated", "IntegerSequence")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Counter32, NotificationType, Gauge32, Unsigned32, Bits, Integer32, TimeTicks, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Counter32", "NotificationType", "Gauge32", "Unsigned32", "Bits", "Integer32", "TimeTicks", "ModuleIdentity", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
frf5EpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 121))
mscMcsMgrFrf5EpG = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14))
mscMcsMgrFrf5EpGRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 1), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGRowStatusTable.setDescription('This entry controls the addition and deletion of mscMcsMgrFrf5EpG components.')
mscMcsMgrFrf5EpGRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGRowStatusEntry.setDescription('A single entry in the table represents a single mscMcsMgrFrf5EpG component.')
mscMcsMgrFrf5EpGRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscMcsMgrFrf5EpG components. These components can be added and deleted.')
mscMcsMgrFrf5EpGComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscMcsMgrFrf5EpGStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGStorageType.setDescription('This variable represents the storage type value for the mscMcsMgrFrf5EpG tables.')
mscMcsMgrFrf5EpGIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGIndex.setDescription('This variable represents the index for the mscMcsMgrFrf5EpG tables.')
mscMcsMgrFrf5EpGAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2))
mscMcsMgrFrf5EpGAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 1), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrRowStatusTable.setDescription('This entry controls the addition and deletion of mscMcsMgrFrf5EpGAddr components.')
mscMcsMgrFrf5EpGAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGAddrIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrRowStatusEntry.setDescription('A single entry in the table represents a single mscMcsMgrFrf5EpGAddr component.')
mscMcsMgrFrf5EpGAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscMcsMgrFrf5EpGAddr components. These components cannot be added nor deleted.')
mscMcsMgrFrf5EpGAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscMcsMgrFrf5EpGAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrStorageType.setDescription('This variable represents the storage type value for the mscMcsMgrFrf5EpGAddr tables.')
mscMcsMgrFrf5EpGAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrIndex.setDescription('This variable represents the index for the mscMcsMgrFrf5EpGAddr tables.')
mscMcsMgrFrf5EpGAddrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 10), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrProvTable.setDescription('This group contains the provisionable attributes of the Address component.')
mscMcsMgrFrf5EpGAddrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGAddrIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrProvEntry.setDescription('An entry in the mscMcsMgrFrf5EpGAddrProvTable.')
mscMcsMgrFrf5EpGAddrRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 44))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrRemoteAddress.setDescription("This attribute specifies the ATM End System Address (AESA) in the ISO NSAP format that is used by each EndPoint under this Frf5EpG to establish a VCC. For example, NSAP ATM address '45000006138292323F000000000020480D002900'.")
mscMcsMgrFrf5EpGAddrCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 750)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrCommentText.setDescription('This optional attribute contains additional textual information to be added by the network operator.')
mscMcsMgrFrf5EpGAddrAddrPreTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 362), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrAddrPreTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrAddrPreTable.setDescription("This attribute specifies the list of prefixes directed to the EndPoints under this Frf5EndPointGroup. The individual end point is selected for each subconnection on the basis of its supportedTransferPriorities. For example, E.164 prefix 'e.613722', X.121 prefix 'x.302'.")
mscMcsMgrFrf5EpGAddrAddrPreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 362, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGAddrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGAddrAddrPreValue"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrAddrPreEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrAddrPreEntry.setDescription('An entry in the mscMcsMgrFrf5EpGAddrAddrPreTable.')
mscMcsMgrFrf5EpGAddrAddrPreValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 362, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrAddrPreValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrAddrPreValue.setDescription('This variable represents both the value and the index for the mscMcsMgrFrf5EpGAddrAddrPreTable.')
mscMcsMgrFrf5EpGAddrAddrPreRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 2, 362, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrAddrPreRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGAddrAddrPreRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscMcsMgrFrf5EpGAddrAddrPreTable.')
mscMcsMgrFrf5EpGEp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3))
mscMcsMgrFrf5EpGEpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 1), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpRowStatusTable.setDescription('This entry controls the addition and deletion of mscMcsMgrFrf5EpGEp components.')
mscMcsMgrFrf5EpGEpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpRowStatusEntry.setDescription('A single entry in the table represents a single mscMcsMgrFrf5EpGEp component.')
mscMcsMgrFrf5EpGEpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscMcsMgrFrf5EpGEp components. These components can be added and deleted.')
mscMcsMgrFrf5EpGEpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscMcsMgrFrf5EpGEpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpStorageType.setDescription('This variable represents the storage type value for the mscMcsMgrFrf5EpGEp tables.')
mscMcsMgrFrf5EpGEpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpIndex.setDescription('This variable represents the index for the mscMcsMgrFrf5EpGEp tables.')
mscMcsMgrFrf5EpGEpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
mscMcsMgrFrf5EpGEpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpStateEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpStateTable.')
mscMcsMgrFrf5EpGEpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscMcsMgrFrf5EpGEpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscMcsMgrFrf5EpGEpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscMcsMgrFrf5EpGEpAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
mscMcsMgrFrf5EpGEpProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
mscMcsMgrFrf5EpGEpControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
mscMcsMgrFrf5EpGEpAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
mscMcsMgrFrf5EpGEpStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
mscMcsMgrFrf5EpGEpUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
mscMcsMgrFrf5EpGEpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpOperTable.setDescription('This group contains the operational attributes for the FRF.5 ATM connection.')
mscMcsMgrFrf5EpGEpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpOperEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpOperTable.')
mscMcsMgrFrf5EpGEpLastVccClearCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLastVccClearCause.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLastVccClearCause.setDescription('This attribute indicates the clear cause value of the last SPVC release message received on the FRF.5 end point Vcc pipe.')
mscMcsMgrFrf5EpGEpConnectionTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpConnectionTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpConnectionTransferPriority.setDescription('This attribute indicates the transfer priority used to establish the ATM connection and to multiplex the Frame Relay DLCIs.')
mscMcsMgrFrf5EpGEpServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ubr", 0), ("cbr", 1), ("rtVbr", 2), ("nrtVbr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpServiceCategory.setDescription('This attribute indicates the ATM service category that is used for this connection.')
mscMcsMgrFrf5EpGEpPeakCellRate01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpPeakCellRate01.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpPeakCellRate01.setDescription('This attribute indicates the Peak Cell Rate (PCR) of the FRF.5 ATM VCC for all cells (with CLP=0 and CLP=1). The pcr01 is derived from the End Point traffic parameters using the conversion policy of the connectionTransferPriority. The conversion policy is defined under the ModuleData FrameRelayService AtmNetworking TransferPriority/n component.')
mscMcsMgrFrf5EpGEpSustainedCellRate0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpSustainedCellRate0.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpSustainedCellRate0.setDescription('This attribute indicates the Sustained Cell Rate (SCR) of the FRF.5 ATM VCC for high priority cells (with CLP=0). The scr0 is derived from the End Point traffic parameters using the conversion policy of the connectionTransferPriority. The conversion policy is defined under the ModuleData FrameRelayService AtmNetworking TransferPriority/n component.')
mscMcsMgrFrf5EpGEpSustainedCellRate01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpSustainedCellRate01.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpSustainedCellRate01.setDescription('This attribute indicates the Sustained Cell Rate (SCR) of the FRF.5 ATM VCC for all cells (with CLP=0 and CLP=1). The scr01 is derived from the End Point traffic parameters using the conversion policy of the connectionTransferPriority. The conversion policy is defined under the ModuleData FrameRelayService AtmNetworking TransferPriority/n component.')
mscMcsMgrFrf5EpGEpMaximumBurstSize0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpMaximumBurstSize0.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpMaximumBurstSize0.setDescription('This attribute indicates the Maximum Burst Size (MBS) of the FRF.5 ATM VCC for high priority cells (with CLP=0). The mbs0 is derived from the End Point traffic parameters using the conversion policy of the connectionTransferPriority. The conversion policy is defined under the ModuleData FrameRelayService AtmNetworking TransferPriority/n component.')
mscMcsMgrFrf5EpGEpMaximumBurstSize01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpMaximumBurstSize01.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpMaximumBurstSize01.setDescription('This attribute indicates the Maximum Burst Size (MBS) of the FRF.5 ATM VCC for all cells (with CLP=0 and CLP=1). The mbs01 is derived from the End Point traffic parameters using the conversion policy of the connectionTransferPriority. The conversion policy is defined under the ModuleData FrameRelayService AtmNetworking TransferPriority/n component.')
mscMcsMgrFrf5EpGEpAvgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8187)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAvgFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAvgFrameSize.setDescription('This attribute indicates the average frame size that is used in the traffic parameter conversion policy calculations for this end point.')
mscMcsMgrFrf5EpGEpTrafficParmConversionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpTrafficParmConversionPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpTrafficParmConversionPolicy.setDescription('This attribute indicates the traffic parameter conversion policy used to specify the equivalent ATM bandwidth rate at this end point. Policy 3 characterizes the traffic in the following way: - ATM traffic descriptor type 6 is selected - PCR0+1 is based on the AR - SCR0+1 is based on the CIR and EIR - MBS0+1 is based on Bc,Be,CIR,EIR and AR - Takes into account that the instananeous rate of the frame relay stream can burst above CIR and up tp the AR. Policy 4 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected. Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by UPC traffic policer. - PCR0+1 is based on the AR - SCR0 is based on the CIR - MBS0 is based on Bc,CIR and AR - There is no direct characterization of EIR. The allowed EIR can be derived using the difference between the AR and CIR. Policy 5 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected . Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by UPC traffic policer - PCR0+1 is based on CIR and EIR - SCR0 is based on the CIR - MBS0 is based on the Bc,CIR and AR - The maximum PCR is no longer based on AR but based on the CIR and EIR. Policy 6 characterizes the traffic in the following way: - ATM traffic descriptor type 3 is selected - PCR0+1 is based only on CIR.')
mscMcsMgrFrf5EpGEpType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpType.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpType.setDescription('This attribute indicates the FRF.5 End Point type. If the value is master, this End Point is responsible for initiating the call to set up the FRF.5 ATM VCC. If the value is slave, this End Point receives call setup requests from the remote end.')
mscMcsMgrFrf5EpGEpLastVccCauseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 11, 1, 20), HexString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLastVccCauseDiag.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLastVccCauseDiag.setDescription('This attribute indicates the diagnostic value of the last SPVC release message received on the FRF.5 end point Vcc pipe.')
mscMcsMgrFrf5EpGEpLmi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2))
mscMcsMgrFrf5EpGEpLmiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 1), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiRowStatusTable.setDescription('This entry controls the addition and deletion of mscMcsMgrFrf5EpGEpLmi components.')
mscMcsMgrFrf5EpGEpLmiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpLmiIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiRowStatusEntry.setDescription('A single entry in the table represents a single mscMcsMgrFrf5EpGEpLmi component.')
mscMcsMgrFrf5EpGEpLmiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscMcsMgrFrf5EpGEpLmi components. These components can be added and deleted.')
mscMcsMgrFrf5EpGEpLmiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscMcsMgrFrf5EpGEpLmiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStorageType.setDescription('This variable represents the storage type value for the mscMcsMgrFrf5EpGEpLmi tables.')
mscMcsMgrFrf5EpGEpLmiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiIndex.setDescription('This variable represents the index for the mscMcsMgrFrf5EpGEpLmi tables.')
mscMcsMgrFrf5EpGEpLmiParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 10), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiParmsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiParmsTable.setDescription('This group contains the provisionable attributes of the Local Management Interface component.')
mscMcsMgrFrf5EpGEpLmiParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpLmiIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiParmsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiParmsEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpLmiParmsTable.')
mscMcsMgrFrf5EpGEpLmiProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ansi", 2), ("ccitt", 3))).clone('ccitt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiProcedures.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiProcedures.setDescription('This attribute selects the procedures to be used for the Local Management Interface. The following are the supported procedures: none: no Local Management Interface procedures are running on the ATM VCC. This accomodates remote interworking functions which do not implement LMI procedures. In this case, the remaining attributes of this group will be ignored. ccitt: Local Management Interface procedures from the CCITT specification are supported. Dlci/0 is used for the LMI protocol, to comply with FRF.5. ansi: Local Management Interface procedures from the ANSI specification are supported. DLCI 0 is used for the LMI protocol.')
mscMcsMgrFrf5EpGEpLmiAsyncStatusReport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiAsyncStatusReport.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiAsyncStatusReport.setDescription('This attribute selects the use of asynchronous PVC status report procedures as specified in the CCITT specification (ITU-T Q.933, Annex A), and the ANSI specification Annex D.')
mscMcsMgrFrf5EpGEpLmiErrorEventThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiErrorEventThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiErrorEventThreshold.setDescription('For the network side procedure, an event is defined as follows: (1) receipt of a STATUS ENQUIRY message, or (2) expiration of timer T392. An error event is (1) nonreceipt of STATUS ENQUIRY in T392 seconds; (2) invalid format of an LMI message; (3) invalid receive sequence number. For the user side procedure, an event is defined as a polling cycle or a status enquiry and status report exchange. An error event is (1) non-receipt of a STATUS within the polling cycle, or (2) invalid format of an LMI message, or (3) invalid sequence number. This attribute specifies the number of error events which, if they occur within eventCount events, will cause a protocol error condition. The condition is cleared after eventCount sequential correct events occur. It must be less than or equal to eventCount (n393).')
mscMcsMgrFrf5EpGEpLmiEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiEventCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiEventCount.setDescription('This attribute specifies the number of contiguous events within which no more than eventErrorThreshold error events are allowed. It must be greater than or equal to errorEventThreshold (n392).')
mscMcsMgrFrf5EpGEpLmiCheckPointTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 255)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiCheckPointTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiCheckPointTimer.setDescription('This attribute selects the time (in seconds) within which a STATUS ENQUIRY message is expected. It must be greater than linkVerificationTimer (t391).')
mscMcsMgrFrf5EpGEpLmiSide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("network", 0), ("user", 1), ("both", 2))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiSide.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiSide.setDescription('This attribute selects the user side procedure (DTE), or the network side procedure (DCE), or both the user side and the network side procedures of the LMI. This attribute can be set to user, network or both.')
mscMcsMgrFrf5EpGEpLmiNniParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 11), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiNniParmsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiNniParmsTable.setDescription('This group contains the provisionable attributes of the FRF.5 LMI procedures which are unique to NNI.')
mscMcsMgrFrf5EpGEpLmiNniParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpLmiIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiNniParmsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiNniParmsEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpLmiNniParmsTable.')
mscMcsMgrFrf5EpGEpLmiFullStatusPollingCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiFullStatusPollingCycles.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiFullStatusPollingCycles.setDescription('This attribute specifies how frequently the FRF.5 LMI initiates a Status Enquiry for a full PVC status report. A polling cycle is a Status Enquiry and Status Report exchange.')
mscMcsMgrFrf5EpGEpLmiLinkVerificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 255)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiLinkVerificationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiLinkVerificationTimer.setDescription('This attribute specifies how frequently the FRF.5 LMI initiates a Status Enquiry for link integrity verification. It must be less than checkPointTimer (t392).')
mscMcsMgrFrf5EpGEpLmiStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 12), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscMcsMgrFrf5EpGEpLmiStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpLmiIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStateEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpLmiStateTable.')
mscMcsMgrFrf5EpGEpLmiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscMcsMgrFrf5EpGEpLmiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscMcsMgrFrf5EpGEpLmiUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscMcsMgrFrf5EpGEpLmiPsiTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 13), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiPsiTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiPsiTable.setDescription('This group provides the protocol status of the Local Management Interface.')
mscMcsMgrFrf5EpGEpLmiPsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpLmiIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiPsiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiPsiEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpLmiPsiTable.')
mscMcsMgrFrf5EpGEpLmiProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("errorCondition", 0), ("normalCondition", 1))).clone('normalCondition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiProtocolStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiProtocolStatus.setDescription('This attribute indicates whether the LMI is in an error condition or whether the protocol is behaving normally. This attribute will be set to errorCondition after enough LMI errors have been detected to warrant a change in condition. This occurs when n392 of the last n393 events are in error. The error condition is lifted when a sufficient number of consecutive events has occurred without error. This occurs when n393 consecutive good events take place. The consequence of an error condition is that all DLCIs on this interface will become inactive in both directions.')
mscMcsMgrFrf5EpGEpLmiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStatsTable.setDescription('This group contains the operational statistics for the FRF.5 NNI Local Management Interface.')
mscMcsMgrFrf5EpGEpLmiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpLmiIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStatsEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpLmiStatsTable.')
mscMcsMgrFrf5EpGEpLmiKeepAliveStatusToInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiKeepAliveStatusToInterface.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiKeepAliveStatusToInterface.setDescription('This attribute counts the Local Management Interface keep alive status messages sent to the ATM VCC in response to a status enquiry for keep alive status. When the maximum count is reached it wraps to zero.')
mscMcsMgrFrf5EpGEpLmiFullStatusToInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiFullStatusToInterface.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiFullStatusToInterface.setDescription('This attribute counts the Local Management Interface full status messages sent to the ATM VCC in response to a status enquiry for keep alive or full status. When the maximum count is reached it wraps to zero.')
mscMcsMgrFrf5EpGEpLmiKeepAliveStatusEnqFromInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiKeepAliveStatusEnqFromInterface.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiKeepAliveStatusEnqFromInterface.setDescription('This attribute counts the Local Management Interface valid keep alive status enquiry messages received from the ATM VCC. When the maximum count is reached it wraps to zero.')
mscMcsMgrFrf5EpGEpLmiFullStatusEnqFromInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiFullStatusEnqFromInterface.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiFullStatusEnqFromInterface.setDescription('This attribute counts the Local Management Interface valid full status enquiry messages received from the ATM VCC. When the maximum count is reached it wraps to zero.')
mscMcsMgrFrf5EpGEpLmiNetworkSideEventHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiNetworkSideEventHistory.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiNetworkSideEventHistory.setDescription("This attribute displays the Local Management Interface network side procedure event history in order of occurrence. An event is represented by a single symbol. A '+' symbol indicates a good event. An 'X' symbol indicates a protocol error event. The left most event is the most recent to occur. The provisioned eventCount dictates the maximum number of events displayed. A good event is triggered by receipt of a valid status enquiry message. An error event is either a T392 timer expiry or receipt of a status enquiry with an incorrect sequence number.")
mscMcsMgrFrf5EpGEpLmiUserSideEventHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiUserSideEventHistory.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiUserSideEventHistory.setDescription("This attribute displays the Local Management Interface user side procedure event history in order of occurrence. An event is represented by a single symbol. A '+' symbol indicates a good event. An 'X' symbol indicates a protocol error event. The left most event is the most recent to occur. The provisioned eventCount dictates the maximum number of events displayed. A good event is triggered by receipt of a valid status message. An error event is either a T391 timer expiry or receipt of a status message with an incorrect sequence number.")
mscMcsMgrFrf5EpGEpLmiProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiProtocolErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiProtocolErrors.setDescription('This attribute counts the number of Local Management Interface protocol errors. It is the sum of the sequence (sequenceErrors and statusSequenceErrors) and timeout (pollingVerifTimeouts and noStatusReportCount) errors. When the maximum count is reached it wraps to zero.')
mscMcsMgrFrf5EpGEpLmiUnexpectedIes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiUnexpectedIes.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiUnexpectedIes.setDescription('This attribute counts the number of Local Managament Interface frames received with an Information Element identifier that is unknown or unexpected. An unexpected Information Element is not a protocol error. When the maximum count is reached, this counter wraps to zero.')
mscMcsMgrFrf5EpGEpLmiSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiSequenceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiSequenceErrors.setDescription('This attribute counts the number of Local Management Interface Status Enquiry message sequence errors. A sequence error is receipt of a Status Enquiry message with a receive sequence number not equal to the last send sequence number. When the maximum count is reached the counter wraps to zero.')
mscMcsMgrFrf5EpGEpLmiStatusSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStatusSequenceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiStatusSequenceErrors.setDescription('This attribute counts the number of Local Management Interface Status message sequence errors. A sequence error is receipt of a Status message with a receive sequence number not equal to the last send sequence number. When the maximum count is reached the counter wraps to zero.')
mscMcsMgrFrf5EpGEpLmiUnexpectedReports = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiUnexpectedReports.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiUnexpectedReports.setDescription('This attribute counts the number of Local Management Interface frames received with an unknown or unexpected report type. An unexpected report type is not a protocol error. When the maximum count is reached the counter wraps to zero.')
mscMcsMgrFrf5EpGEpLmiPollingVerifTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiPollingVerifTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiPollingVerifTimeouts.setDescription('This attribute counts the checkPointTimer (T392) expiries occurring on the Local Management Interface. When the maximum count is reached the counter wraps to zero.')
mscMcsMgrFrf5EpGEpLmiNoStatusReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiNoStatusReportCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiNoStatusReportCount.setDescription('This attribute counts the number of times when no status report or an invalid status report comes from the external network. This attribute is incremented: i) after a status enquiry is sent out and the T391 timer expires without having a status report received. ii) if an invalid status report is received. When the maximum count is reached it wraps to zero.')
mscMcsMgrFrf5EpGEpLmiKeepAliveEnqToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiKeepAliveEnqToIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiKeepAliveEnqToIf.setDescription('This attribute counts the number of Local Management Interface keep alive enquiry status messages sent to the external user device for keep alive status. When the maximum count is reached it wraps to zero.')
mscMcsMgrFrf5EpGEpLmiFullStatusEnqToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 2, 14, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiFullStatusEnqToIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpLmiFullStatusEnqToIf.setDescription('This attribute counts the number of Local Management Interface full status messages sent to the external user device in response to a status enquiry for keep alive or full status. When the maximum count is reached it wraps to zero.')
mscMcsMgrFrf5EpGEpEpd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3))
mscMcsMgrFrf5EpGEpEpdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 1), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdRowStatusTable.setDescription('This entry controls the addition and deletion of mscMcsMgrFrf5EpGEpEpd components.')
mscMcsMgrFrf5EpGEpEpdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpEpdIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdRowStatusEntry.setDescription('A single entry in the table represents a single mscMcsMgrFrf5EpGEpEpd component.')
mscMcsMgrFrf5EpGEpEpdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscMcsMgrFrf5EpGEpEpd components. These components cannot be added nor deleted.')
mscMcsMgrFrf5EpGEpEpdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscMcsMgrFrf5EpGEpEpdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdStorageType.setDescription('This variable represents the storage type value for the mscMcsMgrFrf5EpGEpEpd tables.')
mscMcsMgrFrf5EpGEpEpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdIndex.setDescription('This variable represents the index for the mscMcsMgrFrf5EpGEpEpd tables.')
mscMcsMgrFrf5EpGEpEpdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdProvTable.setDescription('This group contains the provisionable attributes of the FRF.5 End Point.')
mscMcsMgrFrf5EpGEpEpdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpEpdIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdProvEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpEpdProvTable.')
mscMcsMgrFrf5EpGEpEpdRemoteConnectionIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10, 1, 3), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdRemoteConnectionIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdRemoteConnectionIdentifier.setDescription('This attribute specifies the remote connection identifier. It either represents the VPI.VCI logical channel number assignment of a remote ATM interface, or the Endpoint.Frf5EndPointGroup instances of a remote Passport FRF.5 EndPoint.')
mscMcsMgrFrf5EpGEpEpdConnectionTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdConnectionTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdConnectionTransferPriority.setDescription('This attribute specifies the transfer priority used to establish the ATM connection. The EndPoint references the ModuleData FrameRelayService AtmNetworking TransferPriority/n component to determine the ATM service category to be used by the connection. This attribute is also used to determine which EndPoint within an Frf5EndPointGroup is to multiplex a particular FrAtm Dlci. DESCRIPTION')
mscMcsMgrFrf5EpGEpEpdCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCommittedInformationRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCommittedInformationRate.setDescription('This attribute specifies the committed information rate (CIR), and represents the rate at which the network FRF.5 ATM VCC agrees to transfer information under normal conditions. A conservative CIR value would be the sum of the CIRs of all the individual FrAtm Dlcis multiplexed by the VCC. The cir is converted into ATM service parameters according to the conversion policy specified by the connectionTransferPriority attribute. The conversion policy is defined under the ModuleData FrameRelayService AtmNetworking TransferPriority/n component.')
mscMcsMgrFrf5EpGEpEpdExcessInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdExcessInformationRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdExcessInformationRate.setDescription('This attribute specifies the excess information rate (EIR), and represents the rate at which the network FRF.5 ATM VCC attempts to transfer information. A conservative EIR value would be the sum of the EIRs of all the individual FrAtm Dlcis multiplexed by the VCC. The eir is converted into ATM service parameters according to the conversion policy specified by the connectionTransferPriority attribute. The conversion policy is defined under the ModuleData FrameRelayService AtmNetworking TransferPriority/n component.')
mscMcsMgrFrf5EpGEpEpdCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(16000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCommittedBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCommittedBurstSize.setDescription('This attribute specifies the committed burst size (Bc), and represents the amount of data that the network FRF.5 ATM VCC agrees to transfer under normal conditions. A conservative Bc value would be the sum of the Bcs of all the individual FrAtm Dlcis multiplexed by the VCC. The bc is converted into ATM service parameters according to the conversion policy specified by the connectionTransferPriority attribute. The conversion policy is defined under the ModuleData FrameRelayService AtmNetworking TransferPriority/n component.')
mscMcsMgrFrf5EpGEpEpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("master", 0), ("slave", 1))).clone('master')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdType.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdType.setDescription('This attribute specifies the FRF.5 End Point type. If the value is provisioned as master, this End Point is responsible for initiating the SPVC call to set up the FRF.5 ATM VCC. If the value is provisioned as slave, this End Point receives call setup requests from a master remote end.')
mscMcsMgrFrf5EpGEpEpdAccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(1536000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdAccessRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdAccessRate.setDescription("This attribute represents the access rate of the FRF.5 EndPoint. A conservative value would be the sum of the access rates of all the FrAtms' that have DLCIs multiplexed by the VCC. The access rate is converted into ATM service parameters when conversion policies 3, 4 and 5 are used. For policy 6, this attribute is ignored.")
mscMcsMgrFrf5EpGEpEpdExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdExcessBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdExcessBurstSize.setDescription('This attribute specifies the excess burst size (Be), and represents the amount of uncommitted data that the network FRF.5 ATM VCC agrees to transfer under normal conditions. A conservative Be value would be the sum of the Bes of all the individual FrAtm Dlcis multiplexed by the VCC. The be is converted into ATM service parameters according to the conversion policy specified by the connectionTransferPriority attribute. The conversion policy is defined under the ModuleData FrameRelayService AtmNetworking TransferPriority/n component.')
mscMcsMgrFrf5EpGEpEpdCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 11), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscMcsMgrFrf5EpGEpEpdCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpEpdIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCidDataEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpEpdCidDataTable.')
mscMcsMgrFrf5EpGEpEpdCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpEpdCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscMcsMgrFrf5EpGEpDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4))
mscMcsMgrFrf5EpGEpDlciRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 1), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscMcsMgrFrf5EpGEpDlci components.')
mscMcsMgrFrf5EpGEpDlciRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpDlciIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciRowStatusEntry.setDescription('A single entry in the table represents a single mscMcsMgrFrf5EpGEpDlci component.')
mscMcsMgrFrf5EpGEpDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscMcsMgrFrf5EpGEpDlci components. These components cannot be added nor deleted.')
mscMcsMgrFrf5EpGEpDlciComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscMcsMgrFrf5EpGEpDlciStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciStorageType.setDescription('This variable represents the storage type value for the mscMcsMgrFrf5EpGEpDlci tables.')
mscMcsMgrFrf5EpGEpDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 1007), ValueRangeConstraint(1022, 1022), )))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciIndex.setDescription('This variable represents the index for the mscMcsMgrFrf5EpGEpDlci tables.')
mscMcsMgrFrf5EpGEpDlciOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 10), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the operational attributes for the FRF.5 DLCI.')
mscMcsMgrFrf5EpGEpDlciOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpDlciIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciOperEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpDlciOperTable.')
mscMcsMgrFrf5EpGEpDlciABitStatusToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciABitStatusToIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciABitStatusToIf.setDescription('This attribute indicates the most recent A-bit status sent to the ATM VCC. If the value is inactive, the reason for the LMI failure is given by the aBitReasonToNetwork.')
mscMcsMgrFrf5EpGEpDlciABitReasonToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 0), ("remoteUserSignaled", 1), ("localLmiError", 2), ("remoteLmiError", 3), ("localLinkDown", 4), ("remoteLinkDown", 5), ("pvcDown", 6))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciABitReasonToIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciABitReasonToIf.setDescription('This attribute indicates the reason for the latest inactive A-bit status sent to the ATM VCC. The value is notApplicable when the aBitStatusToNetwork is active. The value is remoteUserSignaled if the FrAtm originating the A-Bit status has detected that the virtual circuit is down at the remote network through the LMI protocol. The FrAtm must be running network site LMI protocol for this A-Bit status reason to be sent. The value is localLmiError if the LMI protocol is down at this Ep. The value is remoteLmiError if the LMI protocol is down at the FrAtm originating this A-Bit status reason. The value is localLinkDown if the physical interface is disabled at this Ep. The value is pvcDown if no A-Bit status has been sent to this Ep (i.e., no A-Bit status has been relayed from the FrAtm). The value is remoteLinkDown if the physical interface is disabled at the FrAtm originating this A-Bit status reason.')
mscMcsMgrFrf5EpGEpDlciABitStatusFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciABitStatusFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciABitStatusFromIf.setDescription('This attribute indicates the most recent A-bit status received from the ATM VCC. If the value is inactive, the reason for the LMI failure is given by the aBitReasonFromNetwork.')
mscMcsMgrFrf5EpGEpDlciABitReasonFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 7))).clone(namedValues=NamedValues(("notApplicable", 0), ("remoteUserSignalled", 1), ("localLmiError", 2), ("localLinkDown", 4), ("missingFromLmiReport", 7))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciABitReasonFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciABitReasonFromIf.setDescription('This attributes indicates the reason for the latest inactive A-bit status received from the ATM VCC. The value is notApplicable when the aBitStatusFromNetwork is active. The value is remoteUserSignaled if the remote FRF.5 End Point originating the A-Bit status has detected that the virtual circuit is down at the remote network through the LMI protocol. The remote FRF.5 End Point must be running network site LMI protocol for this A-Bit status reason to be sent. The value is localLmiError if the LMI protocol is down at this Ep. The value is localLinkDown if the physical interface is disabled at this Ep. The value is missingFromLmiReport if the remote FRF.5 End Point did not provide a reason along with the inactive A-Bit status.')
mscMcsMgrFrf5EpGEpDlciAccessConnectionComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 4, 10, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciAccessConnectionComponent.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpDlciAccessConnectionComponent.setDescription('This attribute identifies the FrAtm Dlci to which this Dlci component is bound.')
mscMcsMgrFrf5EpGEpAtmCon = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5))
mscMcsMgrFrf5EpGEpAtmConRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5, 1), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConRowStatusTable.setDescription('This entry controls the addition and deletion of mscMcsMgrFrf5EpGEpAtmCon components.')
mscMcsMgrFrf5EpGEpAtmConRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpAtmConIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConRowStatusEntry.setDescription('A single entry in the table represents a single mscMcsMgrFrf5EpGEpAtmCon component.')
mscMcsMgrFrf5EpGEpAtmConRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscMcsMgrFrf5EpGEpAtmCon components. These components cannot be added nor deleted.')
mscMcsMgrFrf5EpGEpAtmConComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscMcsMgrFrf5EpGEpAtmConStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConStorageType.setDescription('This variable represents the storage type value for the mscMcsMgrFrf5EpGEpAtmCon tables.')
mscMcsMgrFrf5EpGEpAtmConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConIndex.setDescription('This variable represents the index for the mscMcsMgrFrf5EpGEpAtmCon tables.')
mscMcsMgrFrf5EpGEpAtmConOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5, 10), )
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConOperTable.setDescription('This attribute group contains the operational attributes for the NapAtmConnection component.')
mscMcsMgrFrf5EpGEpAtmConOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-McsMgrMIB", "mscMcsMgrIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpIndex"), (0, "Nortel-MsCarrier-MscPassport-Frf5EpMIB", "mscMcsMgrFrf5EpGEpAtmConIndex"))
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConOperEntry.setDescription('An entry in the mscMcsMgrFrf5EpGEpAtmConOperTable.')
mscMcsMgrFrf5EpGEpAtmConNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 122, 14, 3, 5, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: mscMcsMgrFrf5EpGEpAtmConNextHop.setDescription('This attribute shows the component name of the AtmIf Vcc Ep or AtmCon component to which this switched connection is established.')
frf5EpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 121, 1))
frf5EpGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 121, 1, 1))
frf5EpGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 121, 1, 1, 3))
frf5EpGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 121, 1, 1, 3, 2))
frf5EpCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 121, 3))
frf5EpCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 121, 3, 1))
frf5EpCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 121, 3, 1, 3))
frf5EpCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 121, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-Frf5EpMIB", mscMcsMgrFrf5EpGEpControlStatus=mscMcsMgrFrf5EpGEpControlStatus, mscMcsMgrFrf5EpGEpEpdCustomerIdentifier=mscMcsMgrFrf5EpGEpEpdCustomerIdentifier, mscMcsMgrFrf5EpGEpLmiStatsTable=mscMcsMgrFrf5EpGEpLmiStatsTable, mscMcsMgrFrf5EpGEpDlciComponentName=mscMcsMgrFrf5EpGEpDlciComponentName, mscMcsMgrFrf5EpGEpServiceCategory=mscMcsMgrFrf5EpGEpServiceCategory, frf5EpMIB=frf5EpMIB, mscMcsMgrFrf5EpGComponentName=mscMcsMgrFrf5EpGComponentName, mscMcsMgrFrf5EpGEpLmi=mscMcsMgrFrf5EpGEpLmi, mscMcsMgrFrf5EpGEpLmiPsiEntry=mscMcsMgrFrf5EpGEpLmiPsiEntry, mscMcsMgrFrf5EpGAddrAddrPreEntry=mscMcsMgrFrf5EpGAddrAddrPreEntry, mscMcsMgrFrf5EpGEpAdminState=mscMcsMgrFrf5EpGEpAdminState, mscMcsMgrFrf5EpGRowStatusEntry=mscMcsMgrFrf5EpGRowStatusEntry, mscMcsMgrFrf5EpGEpStorageType=mscMcsMgrFrf5EpGEpStorageType, frf5EpCapabilitiesCA02=frf5EpCapabilitiesCA02, mscMcsMgrFrf5EpGRowStatus=mscMcsMgrFrf5EpGRowStatus, mscMcsMgrFrf5EpGEpLmiSide=mscMcsMgrFrf5EpGEpLmiSide, mscMcsMgrFrf5EpGEpOperationalState=mscMcsMgrFrf5EpGEpOperationalState, mscMcsMgrFrf5EpGEpLmiFullStatusEnqFromInterface=mscMcsMgrFrf5EpGEpLmiFullStatusEnqFromInterface, mscMcsMgrFrf5EpGEpOperEntry=mscMcsMgrFrf5EpGEpOperEntry, mscMcsMgrFrf5EpGEpMaximumBurstSize01=mscMcsMgrFrf5EpGEpMaximumBurstSize01, mscMcsMgrFrf5EpGEpEpdRowStatusTable=mscMcsMgrFrf5EpGEpEpdRowStatusTable, mscMcsMgrFrf5EpGEpConnectionTransferPriority=mscMcsMgrFrf5EpGEpConnectionTransferPriority, mscMcsMgrFrf5EpGEpEpdExcessBurstSize=mscMcsMgrFrf5EpGEpEpdExcessBurstSize, mscMcsMgrFrf5EpGEpUsageState=mscMcsMgrFrf5EpGEpUsageState, mscMcsMgrFrf5EpGEpType=mscMcsMgrFrf5EpGEpType, mscMcsMgrFrf5EpGEpEpdIndex=mscMcsMgrFrf5EpGEpEpdIndex, mscMcsMgrFrf5EpGEpLmiAdminState=mscMcsMgrFrf5EpGEpLmiAdminState, mscMcsMgrFrf5EpGEpEpdProvTable=mscMcsMgrFrf5EpGEpEpdProvTable, frf5EpGroupCA02=frf5EpGroupCA02, mscMcsMgrFrf5EpGEpRowStatusEntry=mscMcsMgrFrf5EpGEpRowStatusEntry, mscMcsMgrFrf5EpGEpLmiLinkVerificationTimer=mscMcsMgrFrf5EpGEpLmiLinkVerificationTimer, mscMcsMgrFrf5EpGEpDlciABitStatusToIf=mscMcsMgrFrf5EpGEpDlciABitStatusToIf, mscMcsMgrFrf5EpGEpLmiNniParmsTable=mscMcsMgrFrf5EpGEpLmiNniParmsTable, mscMcsMgrFrf5EpGEpUnknownStatus=mscMcsMgrFrf5EpGEpUnknownStatus, mscMcsMgrFrf5EpGEpLmiStateTable=mscMcsMgrFrf5EpGEpLmiStateTable, mscMcsMgrFrf5EpGEpEpdAccessRate=mscMcsMgrFrf5EpGEpEpdAccessRate, mscMcsMgrFrf5EpGEpLmiRowStatusEntry=mscMcsMgrFrf5EpGEpLmiRowStatusEntry, mscMcsMgrFrf5EpGEpAvailabilityStatus=mscMcsMgrFrf5EpGEpAvailabilityStatus, mscMcsMgrFrf5EpGEpEpdCidDataTable=mscMcsMgrFrf5EpGEpEpdCidDataTable, mscMcsMgrFrf5EpGAddrRemoteAddress=mscMcsMgrFrf5EpGAddrRemoteAddress, mscMcsMgrFrf5EpGEpLmiKeepAliveEnqToIf=mscMcsMgrFrf5EpGEpLmiKeepAliveEnqToIf, mscMcsMgrFrf5EpGEpAtmConIndex=mscMcsMgrFrf5EpGEpAtmConIndex, mscMcsMgrFrf5EpGEpStateTable=mscMcsMgrFrf5EpGEpStateTable, mscMcsMgrFrf5EpGAddrRowStatus=mscMcsMgrFrf5EpGAddrRowStatus, mscMcsMgrFrf5EpGEpLmiOperationalState=mscMcsMgrFrf5EpGEpLmiOperationalState, mscMcsMgrFrf5EpGAddrProvEntry=mscMcsMgrFrf5EpGAddrProvEntry, mscMcsMgrFrf5EpGEpComponentName=mscMcsMgrFrf5EpGEpComponentName, mscMcsMgrFrf5EpGEpAlarmStatus=mscMcsMgrFrf5EpGEpAlarmStatus, mscMcsMgrFrf5EpGEpAtmConComponentName=mscMcsMgrFrf5EpGEpAtmConComponentName, mscMcsMgrFrf5EpGAddrRowStatusEntry=mscMcsMgrFrf5EpGAddrRowStatusEntry, mscMcsMgrFrf5EpGEpDlciABitStatusFromIf=mscMcsMgrFrf5EpGEpDlciABitStatusFromIf, mscMcsMgrFrf5EpGStorageType=mscMcsMgrFrf5EpGStorageType, mscMcsMgrFrf5EpGEpEpdCidDataEntry=mscMcsMgrFrf5EpGEpEpdCidDataEntry, mscMcsMgrFrf5EpGRowStatusTable=mscMcsMgrFrf5EpGRowStatusTable, mscMcsMgrFrf5EpGEpLmiUsageState=mscMcsMgrFrf5EpGEpLmiUsageState, mscMcsMgrFrf5EpGEpEpdRemoteConnectionIdentifier=mscMcsMgrFrf5EpGEpEpdRemoteConnectionIdentifier, mscMcsMgrFrf5EpGEpMaximumBurstSize0=mscMcsMgrFrf5EpGEpMaximumBurstSize0, mscMcsMgrFrf5EpGEpLmiPollingVerifTimeouts=mscMcsMgrFrf5EpGEpLmiPollingVerifTimeouts, mscMcsMgrFrf5EpGEpLmiComponentName=mscMcsMgrFrf5EpGEpLmiComponentName, mscMcsMgrFrf5EpGEpEpdRowStatus=mscMcsMgrFrf5EpGEpEpdRowStatus, mscMcsMgrFrf5EpGAddrComponentName=mscMcsMgrFrf5EpGAddrComponentName, mscMcsMgrFrf5EpGEpLmiErrorEventThreshold=mscMcsMgrFrf5EpGEpLmiErrorEventThreshold, mscMcsMgrFrf5EpGEpLmiKeepAliveStatusToInterface=mscMcsMgrFrf5EpGEpLmiKeepAliveStatusToInterface, mscMcsMgrFrf5EpGAddrIndex=mscMcsMgrFrf5EpGAddrIndex, mscMcsMgrFrf5EpGEpLmiRowStatusTable=mscMcsMgrFrf5EpGEpLmiRowStatusTable, frf5EpGroupCA=frf5EpGroupCA, mscMcsMgrFrf5EpGEpAtmConRowStatus=mscMcsMgrFrf5EpGEpAtmConRowStatus, mscMcsMgrFrf5EpGEpAtmCon=mscMcsMgrFrf5EpGEpAtmCon, mscMcsMgrFrf5EpGEpLmiProtocolStatus=mscMcsMgrFrf5EpGEpLmiProtocolStatus, frf5EpCapabilitiesCA=frf5EpCapabilitiesCA, mscMcsMgrFrf5EpGEpEpdType=mscMcsMgrFrf5EpGEpEpdType, mscMcsMgrFrf5EpGEpAtmConOperTable=mscMcsMgrFrf5EpGEpAtmConOperTable, mscMcsMgrFrf5EpGEpSustainedCellRate0=mscMcsMgrFrf5EpGEpSustainedCellRate0, mscMcsMgrFrf5EpGAddrRowStatusTable=mscMcsMgrFrf5EpGAddrRowStatusTable, mscMcsMgrFrf5EpGAddrProvTable=mscMcsMgrFrf5EpGAddrProvTable, mscMcsMgrFrf5EpGEpOperTable=mscMcsMgrFrf5EpGEpOperTable, mscMcsMgrFrf5EpGEpLmiStatusSequenceErrors=mscMcsMgrFrf5EpGEpLmiStatusSequenceErrors, mscMcsMgrFrf5EpGEpLmiEventCount=mscMcsMgrFrf5EpGEpLmiEventCount, mscMcsMgrFrf5EpGEpAtmConRowStatusEntry=mscMcsMgrFrf5EpGEpAtmConRowStatusEntry, mscMcsMgrFrf5EpGEpAtmConNextHop=mscMcsMgrFrf5EpGEpAtmConNextHop, mscMcsMgrFrf5EpGEpLmiFullStatusEnqToIf=mscMcsMgrFrf5EpGEpLmiFullStatusEnqToIf, mscMcsMgrFrf5EpGEpEpdExcessInformationRate=mscMcsMgrFrf5EpGEpEpdExcessInformationRate, mscMcsMgrFrf5EpGAddrCommentText=mscMcsMgrFrf5EpGAddrCommentText, mscMcsMgrFrf5EpGEpRowStatusTable=mscMcsMgrFrf5EpGEpRowStatusTable, mscMcsMgrFrf5EpGEpProceduralStatus=mscMcsMgrFrf5EpGEpProceduralStatus, mscMcsMgrFrf5EpGAddrStorageType=mscMcsMgrFrf5EpGAddrStorageType, mscMcsMgrFrf5EpGEpLmiSequenceErrors=mscMcsMgrFrf5EpGEpLmiSequenceErrors, mscMcsMgrFrf5EpGEpEpdProvEntry=mscMcsMgrFrf5EpGEpEpdProvEntry, mscMcsMgrFrf5EpGEpLmiFullStatusToInterface=mscMcsMgrFrf5EpGEpLmiFullStatusToInterface, mscMcsMgrFrf5EpGEpEpdRowStatusEntry=mscMcsMgrFrf5EpGEpEpdRowStatusEntry, mscMcsMgrFrf5EpG=mscMcsMgrFrf5EpG, frf5EpCapabilities=frf5EpCapabilities, mscMcsMgrFrf5EpGEpEpd=mscMcsMgrFrf5EpGEpEpd, mscMcsMgrFrf5EpGEpStandbyStatus=mscMcsMgrFrf5EpGEpStandbyStatus, mscMcsMgrFrf5EpGEpStateEntry=mscMcsMgrFrf5EpGEpStateEntry, mscMcsMgrFrf5EpGEpLmiParmsTable=mscMcsMgrFrf5EpGEpLmiParmsTable, mscMcsMgrFrf5EpGEpEpdConnectionTransferPriority=mscMcsMgrFrf5EpGEpEpdConnectionTransferPriority, mscMcsMgrFrf5EpGEpEpdCommittedBurstSize=mscMcsMgrFrf5EpGEpEpdCommittedBurstSize, mscMcsMgrFrf5EpGEpDlciRowStatusTable=mscMcsMgrFrf5EpGEpDlciRowStatusTable, frf5EpCapabilitiesCA02A=frf5EpCapabilitiesCA02A, mscMcsMgrFrf5EpGEpLmiUnexpectedReports=mscMcsMgrFrf5EpGEpLmiUnexpectedReports, mscMcsMgrFrf5EpGIndex=mscMcsMgrFrf5EpGIndex, mscMcsMgrFrf5EpGEpLmiStatsEntry=mscMcsMgrFrf5EpGEpLmiStatsEntry, mscMcsMgrFrf5EpGEpLastVccClearCause=mscMcsMgrFrf5EpGEpLastVccClearCause, mscMcsMgrFrf5EpGEpEpdComponentName=mscMcsMgrFrf5EpGEpEpdComponentName, mscMcsMgrFrf5EpGEpLmiCheckPointTimer=mscMcsMgrFrf5EpGEpLmiCheckPointTimer, mscMcsMgrFrf5EpGAddrAddrPreValue=mscMcsMgrFrf5EpGAddrAddrPreValue, mscMcsMgrFrf5EpGAddrAddrPreRowStatus=mscMcsMgrFrf5EpGAddrAddrPreRowStatus, mscMcsMgrFrf5EpGEpLmiUnexpectedIes=mscMcsMgrFrf5EpGEpLmiUnexpectedIes, mscMcsMgrFrf5EpGEpEpdStorageType=mscMcsMgrFrf5EpGEpEpdStorageType, mscMcsMgrFrf5EpGEpLmiNoStatusReportCount=mscMcsMgrFrf5EpGEpLmiNoStatusReportCount, mscMcsMgrFrf5EpGEpLmiProtocolErrors=mscMcsMgrFrf5EpGEpLmiProtocolErrors, mscMcsMgrFrf5EpGEpDlciRowStatusEntry=mscMcsMgrFrf5EpGEpDlciRowStatusEntry, mscMcsMgrFrf5EpGEpPeakCellRate01=mscMcsMgrFrf5EpGEpPeakCellRate01, mscMcsMgrFrf5EpGEpDlciABitReasonFromIf=mscMcsMgrFrf5EpGEpDlciABitReasonFromIf, mscMcsMgrFrf5EpGEp=mscMcsMgrFrf5EpGEp, mscMcsMgrFrf5EpGEpLastVccCauseDiag=mscMcsMgrFrf5EpGEpLastVccCauseDiag, mscMcsMgrFrf5EpGEpLmiIndex=mscMcsMgrFrf5EpGEpLmiIndex, mscMcsMgrFrf5EpGEpLmiProcedures=mscMcsMgrFrf5EpGEpLmiProcedures, mscMcsMgrFrf5EpGEpLmiKeepAliveStatusEnqFromInterface=mscMcsMgrFrf5EpGEpLmiKeepAliveStatusEnqFromInterface, mscMcsMgrFrf5EpGEpEpdCommittedInformationRate=mscMcsMgrFrf5EpGEpEpdCommittedInformationRate, mscMcsMgrFrf5EpGAddr=mscMcsMgrFrf5EpGAddr, mscMcsMgrFrf5EpGEpTrafficParmConversionPolicy=mscMcsMgrFrf5EpGEpTrafficParmConversionPolicy, mscMcsMgrFrf5EpGEpDlciStorageType=mscMcsMgrFrf5EpGEpDlciStorageType, mscMcsMgrFrf5EpGEpLmiPsiTable=mscMcsMgrFrf5EpGEpLmiPsiTable, mscMcsMgrFrf5EpGEpAtmConOperEntry=mscMcsMgrFrf5EpGEpAtmConOperEntry, mscMcsMgrFrf5EpGEpDlciOperEntry=mscMcsMgrFrf5EpGEpDlciOperEntry, mscMcsMgrFrf5EpGEpLmiAsyncStatusReport=mscMcsMgrFrf5EpGEpLmiAsyncStatusReport, mscMcsMgrFrf5EpGAddrAddrPreTable=mscMcsMgrFrf5EpGAddrAddrPreTable, mscMcsMgrFrf5EpGEpSustainedCellRate01=mscMcsMgrFrf5EpGEpSustainedCellRate01, mscMcsMgrFrf5EpGEpAtmConStorageType=mscMcsMgrFrf5EpGEpAtmConStorageType, mscMcsMgrFrf5EpGEpLmiUserSideEventHistory=mscMcsMgrFrf5EpGEpLmiUserSideEventHistory, mscMcsMgrFrf5EpGEpLmiRowStatus=mscMcsMgrFrf5EpGEpLmiRowStatus, mscMcsMgrFrf5EpGEpDlciAccessConnectionComponent=mscMcsMgrFrf5EpGEpDlciAccessConnectionComponent, mscMcsMgrFrf5EpGEpDlciRowStatus=mscMcsMgrFrf5EpGEpDlciRowStatus, mscMcsMgrFrf5EpGEpLmiStorageType=mscMcsMgrFrf5EpGEpLmiStorageType, mscMcsMgrFrf5EpGEpLmiParmsEntry=mscMcsMgrFrf5EpGEpLmiParmsEntry, frf5EpGroup=frf5EpGroup, mscMcsMgrFrf5EpGEpRowStatus=mscMcsMgrFrf5EpGEpRowStatus, mscMcsMgrFrf5EpGEpDlci=mscMcsMgrFrf5EpGEpDlci, mscMcsMgrFrf5EpGEpLmiStateEntry=mscMcsMgrFrf5EpGEpLmiStateEntry, frf5EpGroupCA02A=frf5EpGroupCA02A, mscMcsMgrFrf5EpGEpLmiFullStatusPollingCycles=mscMcsMgrFrf5EpGEpLmiFullStatusPollingCycles, mscMcsMgrFrf5EpGEpAtmConRowStatusTable=mscMcsMgrFrf5EpGEpAtmConRowStatusTable, mscMcsMgrFrf5EpGEpLmiNetworkSideEventHistory=mscMcsMgrFrf5EpGEpLmiNetworkSideEventHistory, mscMcsMgrFrf5EpGEpDlciIndex=mscMcsMgrFrf5EpGEpDlciIndex, mscMcsMgrFrf5EpGEpDlciOperTable=mscMcsMgrFrf5EpGEpDlciOperTable, mscMcsMgrFrf5EpGEpAvgFrameSize=mscMcsMgrFrf5EpGEpAvgFrameSize, mscMcsMgrFrf5EpGEpIndex=mscMcsMgrFrf5EpGEpIndex, mscMcsMgrFrf5EpGEpDlciABitReasonToIf=mscMcsMgrFrf5EpGEpDlciABitReasonToIf, mscMcsMgrFrf5EpGEpLmiNniParmsEntry=mscMcsMgrFrf5EpGEpLmiNniParmsEntry)
