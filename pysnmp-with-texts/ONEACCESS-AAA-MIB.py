#
# PySNMP MIB module ONEACCESS-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ONEACCESS-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:34:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
oacMIBModules, oacExpIMManagement = mibBuilder.importSymbols("ONEACCESS-GLOBAL-REG", "oacMIBModules", "oacExpIMManagement")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, ModuleIdentity, Bits, Gauge32, Counter32, Integer32, iso, IpAddress, TimeTicks, Counter64, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Bits", "Gauge32", "Counter32", "Integer32", "iso", "IpAddress", "TimeTicks", "Counter64", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
PhysAddress, TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
oacAAAConfigMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 13191, 1, 100, 690))
oacAAAConfigMIB.setRevisions(('2011-07-26 00:00', '2011-06-15 00:00', '2010-12-17 00:01', '2010-07-08 00:01',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: oacAAAConfigMIB.setRevisionsDescriptions(('Contact updated', 'Add index for oacAAAAuthenticationServerConfigEntry and oacAAAGroupServerConfigEntry', 'Fixed some minor corrections', 'This MIB defines configuration capabilities relating to AAA. OneOS supports authentication with two types of servers. 1) Radius Server. 2) TACACS Server. The device can be configured to authenticate with a radius server or an tacacs server or use the local user database on the system. This MIB defines configuring clients for: Radius Server Tacacs Server also AAA configuration on ONEOS which includes authenticating a user to login to the device or use the enable command. Defines the AAA accounting configuration. ',))
if mibBuilder.loadTexts: oacAAAConfigMIB.setLastUpdated('201107260000Z')
if mibBuilder.loadTexts: oacAAAConfigMIB.setOrganization(' OneAccess ')
if mibBuilder.loadTexts: oacAAAConfigMIB.setContactInfo('Pascal KESTELOOT Postal: ONE ACCESS 381 Avenue du Gnral de Gaulle 92140 Clamart, France FRANCE Tel: (+33) 01 41 87 70 00 Fax: (+33) 01 41 87 74 00 E-mail: pascal.kesteloot@oneaccess-net.com')
if mibBuilder.loadTexts: oacAAAConfigMIB.setDescription('Fixed the issues related to octet string range')
oacAAAConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10))
oacAAAConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1))
oacAAAConfigConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 2))
oacAAARadiusServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 1), )
if mibBuilder.loadTexts: oacAAARadiusServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusServerConfigTable.setDescription('Configuring Radius Server: For the device to authenticate with an radius server database, the following parameters have to be configured. The cli command for adding a radius server details is radius-server <RADIUS-server-ip> [<RADIUS-UDP-port>] <shared-key> [ <interface> <unit> ] The snmp table will contain the following attributes. 1) hostname or IP Address String 2) Radius Server Port Integer 1-65535 3) Shared Key String. 4) Retransmit Integer 1-100 default 3 5) Timeout Integer 1-600 default 3 6) Interface InterfaceIndex')
oacAAARadiusServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 1, 1), ).setIndexNames((0, "ONEACCESS-AAA-MIB", "oacAAARadiusServerInfo"), (0, "ONEACCESS-AAA-MIB", "oacAAARadiusServerPort"))
if mibBuilder.loadTexts: oacAAARadiusServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusServerConfigEntry.setDescription('The Radius Server config entry will hold the details of one radius servers configured for the client to send the requests for authentication. This table is indexed on oacAAARadiusServrInfo which can be either an ipaddress or hostname of the Radius Server. ')
oacAAARadiusServerInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAARadiusServerInfo.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusServerInfo.setDescription('The Info can be an : A.B.C.D IPv4 host address A.B.C.D Ipv4 subnet hostname Hostname.')
oacAAARadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAARadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusServerPort.setDescription('The default server port to which radius client will connect to a radius server is 1812. But the user can always specify the port to which the client should connect when contacting the configured radius server.')
oacAAARadiusServerSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAARadiusServerSharedKey.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusServerSharedKey.setDescription('Pre shared key between the radius client and server.')
oacAAARadiusServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAARadiusServerRetries.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusServerRetries.setDescription('The Client can do the configured number of retries to this radius server before moving to the next radius server. The default number of retries is 3.')
oacAAARadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAARadiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusServerTimeout.setDescription('The nummber of seconds to wait before to call a timeout. The default value is 3 seconds.')
oacAAARadiusServerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 1, 1, 6), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAARadiusServerInterface.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusServerInterface.setDescription('The interface for this device to use to contact the radius server for auth requests. It is identified by the ifIndex. Each interface/unit is identified by an ifIndex.')
oacAAARadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAARadiusServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusServerRowStatus.setDescription('The Row status for an entry in the oacAAARadiusServerConfigTable.')
oacAAARadiusConfigAccPort = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacAAARadiusConfigAccPort.setStatus('current')
if mibBuilder.loadTexts: oacAAARadiusConfigAccPort.setDescription('Set the port for Radius accouting. reset or deletion of this value is not possible the port value can only be modified.')
oacAAATacacsServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 3), )
if mibBuilder.loadTexts: oacAAATacacsServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacAAATacacsServerConfigTable.setDescription('Configuring Tacacs client: The cli to add tacacs server info for the tacacs client is tacacs-server <host> [<port>] <key> [ <interface> <unit> ] Hence the snmp table for to hold the tacacs server info has the following 1) hostname or IP Address OCTET STRING 2) TACACs serverport Integer 1-65535 3) Shared Key OCTET STRING 4) Timeout integer 1-600 default 3 5) Interface InterfaceIndex')
oacAAATacacsServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 3, 1), ).setIndexNames((0, "ONEACCESS-AAA-MIB", "oacAAATacacsServerInfo"), (0, "ONEACCESS-AAA-MIB", "oacAAATacacsServerPort"))
if mibBuilder.loadTexts: oacAAATacacsServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacAAATacacsServerConfigEntry.setDescription('An entry holds the information per tacacs server configured. the entry is uniquely identified/indexed by the oacAAATacacsServerInfo which can be either the IPv4 address or an hostname.')
oacAAATacacsServerInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 3, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAATacacsServerInfo.setStatus('current')
if mibBuilder.loadTexts: oacAAATacacsServerInfo.setDescription('The Info can be an : A.B.C.D IPv4 host address A.B.C.D Ipv4 subnet hostname Hostname.')
oacAAATacacsServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(49)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAATacacsServerPort.setStatus('current')
if mibBuilder.loadTexts: oacAAATacacsServerPort.setDescription('The default for an tacacs client to connect to tacacs server is 49. But this can vary depending on the server configuration. Hence when a tacacs server is added the port on which this server is running has to be specified.')
oacAAATacacsServerSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAATacacsServerSharedKey.setStatus('current')
if mibBuilder.loadTexts: oacAAATacacsServerSharedKey.setDescription('The shared key will be used to authenticate a tacacs client with the tacacs server. This has key is different from the user authentication keys.')
oacAAATacacsServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAATacacsServerTimeout.setStatus('current')
if mibBuilder.loadTexts: oacAAATacacsServerTimeout.setDescription('The default timeout value for an client to wait for a response from the tacacs server is set to 3 seconds. but this can be modified by setting a value.')
oacAAATacacsServerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 3, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAATacacsServerInterface.setStatus('current')
if mibBuilder.loadTexts: oacAAATacacsServerInterface.setDescription('The interface which this tacacs client should use to contact the configured tacacs server. The interface is identified by the ifIndex.')
oacAAATacacsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAATacacsServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: oacAAATacacsServerRowStatus.setDescription('The Rowstatus for this entry.')
oacAAATacacsConfigUseUsername = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacAAATacacsConfigUseUsername.setStatus('current')
if mibBuilder.loadTexts: oacAAATacacsConfigUseUsername.setDescription('usage of user name for authentication for enable command.')
oacAAAAuthenticationServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 5), )
if mibBuilder.loadTexts: oacAAAAuthenticationServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationServerConfigTable.setDescription('AAA configuration on OneOS The AAA servers can be configured to either authenticate user login or authenticate enable commands for a given user. OneOS can either use all radius servers or all tacas servers or a group of configured radius servers or a group of configured tacacs servers or only the local database. By default if a radius/tacacs servers are configured, ONEOS will use the AAA servers in the order in which they are configured. The following commands are available to configure the AAA servers. aaa authentication login {default|console|network} {<group-name>|radius|tacacs} aaa authentication enable {default|console|network} {<group-name>|radius|tacacs} Hence the following will be the attributes for the AAA authentication configuration table 1) Authentication for (login or enable) Integer as enum 2) Authentication from (default or console or network) Integer as enum 3) Authentication servertype String')
oacAAAAuthenticationServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 5, 1), ).setIndexNames((0, "ONEACCESS-AAA-MIB", "oacAAAAuthenticationFeature"), (0, "ONEACCESS-AAA-MIB", "oacAAAAuthenticationReqSrc"))
if mibBuilder.loadTexts: oacAAAAuthenticationServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationServerConfigEntry.setDescription('An entry will define how a login/enable from console or network will use which group of servers of either radius or tacacs. Each entry is uniquly identified by an dual index.')
oacAAAAuthenticationFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("login", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAuthenticationFeature.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationFeature.setDescription('A user can login to the device and just monitor. A user can configure the device when he enters the enabled mode. The device will challenge an user for authentication when ever he enters and enabled command.')
oacAAAAuthenticationReqSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("console", 2), ("network", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAuthenticationReqSrc.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationReqSrc.setDescription('The user can access the device either thru the default mode or from the console or from the network like ssh and telnet.')
oacAAAAuthenticationSvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAuthenticationSvrType.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationSvrType.setDescription('The authentication servers can be either a group of radius serves or a group of tacacs servers or all radius servers or all tacacs server.')
oacAAAAuthenticationServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAuthenticationServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationServerRowStatus.setDescription('The Row status for this entry.')
oacAAAAuthenticationConfigBannerSeqTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 6), )
if mibBuilder.loadTexts: oacAAAAuthenticationConfigBannerSeqTable.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationConfigBannerSeqTable.setDescription('This table holds upto 40 banner messages used in authentication')
oacAAAAuthenticationConfigBannerSeqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 6, 1), ).setIndexNames((0, "ONEACCESS-AAA-MIB", "oacAAAAuthenticationBannerSequence"))
if mibBuilder.loadTexts: oacAAAAuthenticationConfigBannerSeqEntry.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationConfigBannerSeqEntry.setDescription('Each entry will hold one banner string')
oacAAAAuthenticationBannerSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAuthenticationBannerSequence.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationBannerSequence.setDescription('The maximum number of strings that can be stored are 40.')
oacAAAAuthenticationBannerString = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAuthenticationBannerString.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationBannerString.setDescription('banner test is a set of string maximum upto 255 characters.')
oacAAAAuthenticationBannerSeqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAuthenticationBannerSeqRowStatus.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthenticationBannerSeqRowStatus.setDescription('The row status of this entry')
oacAAAGroupServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 7), )
if mibBuilder.loadTexts: oacAAAGroupServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacAAAGroupServerConfigTable.setDescription('Configuring AAA Group Servers: The cli command to configure a group of servers aaa group server { radius | tacacs } <group-name> server {<A.B.C.D>|<hostname> } The SNMP table for group servers will be 1) group name OCTET STRING 2) group type INTEGER (ENUM) 3) server OCTET STRING')
oacAAAGroupServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 7, 1), ).setIndexNames((0, "ONEACCESS-AAA-MIB", "oacAAAServerGroupName"))
if mibBuilder.loadTexts: oacAAAGroupServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacAAAGroupServerConfigEntry.setDescription('A group server entry will hold information about an configured radius or tacacs server to which group it belongs to.')
oacAAAServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 7, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAServerGroupName.setStatus('current')
if mibBuilder.loadTexts: oacAAAServerGroupName.setDescription('The group name which is the index for each entry.')
oacAAAServerGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("tacacs", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAServerGroupType.setStatus('current')
if mibBuilder.loadTexts: oacAAAServerGroupType.setDescription('Only server of type defined above can be added to this group. all the servers can be either of type radius or type tacacs.')
oacAAAServerGroupServerInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 7, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAServerGroupServerInfo.setStatus('current')
if mibBuilder.loadTexts: oacAAAServerGroupServerInfo.setDescription('This object will hold the inforamtion about the server, which can be an IPv4 Address or an Hostname.')
oacAAAServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAServerGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: oacAAAServerGroupRowStatus.setDescription('The row status for this entry.')
oacAAAAuthorizationConfigCmdLevelDefTacacs = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacAAAAuthorizationConfigCmdLevelDefTacacs.setStatus('current')
if mibBuilder.loadTexts: oacAAAAuthorizationConfigCmdLevelDefTacacs.setDescription('To enable AAA authorization for a given privilege level')
oacAAAAccCmdsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 9), )
if mibBuilder.loadTexts: oacAAAAccCmdsConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacAAAAccCmdsConfigTable.setDescription('This table provides the information for AAA accounting commands. SNMP table for the above command will be 1) access level of the command INTEGER 0-15 2) tacacs+ group OCTET STRING default all.')
oacAAAAccCmdsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 9, 1), ).setIndexNames((0, "ONEACCESS-AAA-MIB", "oacAAAAccCmdAccessLevel"))
if mibBuilder.loadTexts: oacAAAAccCmdsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacAAAAccCmdsConfigEntry.setDescription('each entry will define an access level and the tacacs group name.')
oacAAAAccCmdAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAccCmdAccessLevel.setStatus('current')
if mibBuilder.loadTexts: oacAAAAccCmdAccessLevel.setDescription('The command access level for which accounting has to be done.')
oacAAAAccTacacsGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 9, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAccTacacsGroupName.setStatus('current')
if mibBuilder.loadTexts: oacAAAAccTacacsGroupName.setDescription('The group of servers that can be used to perform accounting for a given command access level.')
oacAAAAccCmdsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacAAAAccCmdsRowStatus.setStatus('current')
if mibBuilder.loadTexts: oacAAAAccCmdsRowStatus.setDescription('The row status for this entry.')
oacAAAAccConfigExecStartStop = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacAAAAccConfigExecStartStop.setStatus('current')
if mibBuilder.loadTexts: oacAAAAccConfigExecStartStop.setDescription('Set EXEC accounting and the method is default, to use start-stop record accounting notice. Uses TACACS+ server for accounting.')
oacAAAAccConfigSystemStartStop = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacAAAAccConfigSystemStartStop.setStatus('current')
if mibBuilder.loadTexts: oacAAAAccConfigSystemStartStop.setDescription('Set System accounting and the method is default, to use start-stop record accounting notice. Uses TACACS+ server for accounting.')
oacAAAConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 2, 1))
oacAAAConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 2, 1, 1)).setObjects(("ONEACCESS-AAA-MIB", "oacAAAAccConfigSystemStartStop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oacAAAConfigGroup = oacAAAConfigGroup.setStatus('current')
if mibBuilder.loadTexts: oacAAAConfigGroup.setDescription('Group of AAA objects')
oacAAACompls = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 10, 2, 2))
mibBuilder.exportSymbols("ONEACCESS-AAA-MIB", oacAAAAuthenticationBannerString=oacAAAAuthenticationBannerString, oacAAATacacsServerSharedKey=oacAAATacacsServerSharedKey, oacAAATacacsServerPort=oacAAATacacsServerPort, oacAAAServerGroupRowStatus=oacAAAServerGroupRowStatus, oacAAAAccTacacsGroupName=oacAAAAccTacacsGroupName, oacAAAConfigConformance=oacAAAConfigConformance, oacAAAAccCmdsConfigTable=oacAAAAccCmdsConfigTable, oacAAAAccCmdsRowStatus=oacAAAAccCmdsRowStatus, oacAAAGroupServerConfigEntry=oacAAAGroupServerConfigEntry, oacAAATacacsServerConfigEntry=oacAAATacacsServerConfigEntry, oacAAARadiusServerRowStatus=oacAAARadiusServerRowStatus, oacAAAServerGroupName=oacAAAServerGroupName, oacAAATacacsServerConfigTable=oacAAATacacsServerConfigTable, oacAAAGroupServerConfigTable=oacAAAGroupServerConfigTable, oacAAAAccConfigSystemStartStop=oacAAAAccConfigSystemStartStop, oacAAARadiusServerInterface=oacAAARadiusServerInterface, oacAAAAuthenticationFeature=oacAAAAuthenticationFeature, oacAAAServerGroupType=oacAAAServerGroupType, oacAAAAccConfigExecStartStop=oacAAAAccConfigExecStartStop, oacAAATacacsConfigUseUsername=oacAAATacacsConfigUseUsername, oacAAAAuthenticationReqSrc=oacAAAAuthenticationReqSrc, oacAAAConfigMIB=oacAAAConfigMIB, oacAAARadiusConfigAccPort=oacAAARadiusConfigAccPort, oacAAATacacsServerInfo=oacAAATacacsServerInfo, oacAAAAuthorizationConfigCmdLevelDefTacacs=oacAAAAuthorizationConfigCmdLevelDefTacacs, oacAAAAuthenticationServerConfigTable=oacAAAAuthenticationServerConfigTable, oacAAAAuthenticationBannerSeqRowStatus=oacAAAAuthenticationBannerSeqRowStatus, oacAAARadiusServerConfigEntry=oacAAARadiusServerConfigEntry, oacAAAAuthenticationConfigBannerSeqTable=oacAAAAuthenticationConfigBannerSeqTable, oacAAATacacsServerRowStatus=oacAAATacacsServerRowStatus, oacAAAAuthenticationBannerSequence=oacAAAAuthenticationBannerSequence, oacAAARadiusServerInfo=oacAAARadiusServerInfo, oacAAAAuthenticationServerRowStatus=oacAAAAuthenticationServerRowStatus, oacAAARadiusServerConfigTable=oacAAARadiusServerConfigTable, oacAAAAuthenticationConfigBannerSeqEntry=oacAAAAuthenticationConfigBannerSeqEntry, oacAAARadiusServerTimeout=oacAAARadiusServerTimeout, oacAAAConfigObjects=oacAAAConfigObjects, oacAAARadiusServerSharedKey=oacAAARadiusServerSharedKey, oacAAAAuthenticationSvrType=oacAAAAuthenticationSvrType, oacAAAServerGroupServerInfo=oacAAAServerGroupServerInfo, oacAAAAccCmdAccessLevel=oacAAAAccCmdAccessLevel, oacAAAConfigGroups=oacAAAConfigGroups, oacAAAConfigGroup=oacAAAConfigGroup, PYSNMP_MODULE_ID=oacAAAConfigMIB, oacAAARadiusServerPort=oacAAARadiusServerPort, oacAAACompls=oacAAACompls, oacAAAAuthenticationServerConfigEntry=oacAAAAuthenticationServerConfigEntry, oacAAATacacsServerTimeout=oacAAATacacsServerTimeout, oacAAAAccCmdsConfigEntry=oacAAAAccCmdsConfigEntry, oacAAARadiusServerRetries=oacAAARadiusServerRetries, oacAAAConfig=oacAAAConfig, oacAAATacacsServerInterface=oacAAATacacsServerInterface)
