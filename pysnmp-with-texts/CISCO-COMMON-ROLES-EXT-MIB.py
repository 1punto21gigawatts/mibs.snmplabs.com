#
# PySNMP MIB module CISCO-COMMON-ROLES-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-COMMON-ROLES-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ccrmConfigurationExtGroup, = mibBuilder.importSymbols("CISCO-COMMON-ROLES-MIB", "ccrmConfigurationExtGroup")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, Integer32, TimeTicks, Counter64, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, NotificationType, Gauge32, MibIdentifier, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "TimeTicks", "Counter64", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "NotificationType", "Gauge32", "MibIdentifier", "iso", "Unsigned32")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
ciscoCommonRolesExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 651))
ciscoCommonRolesExtMIB.setRevisions(('2008-02-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCommonRolesExtMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCommonRolesExtMIB.setLastUpdated('200802150000Z')
if mibBuilder.loadTexts: ciscoCommonRolesExtMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoCommonRolesExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoCommonRolesExtMIB.setDescription("A MIB Module for managing the roles that are common between access methods like Command Line Interface (CLI), SNMP and XML interface. This MIB is an extension to the CISCO-COMMON-ROLES-MIB, which is for managing Common Roles on a device with fixed feature. Terminology: Commands are the basic operations that can be performed on a device. For example 'show aaa *', 'clear aaa *', 'config t; ip arp *'. Commands can be organized into groups called Features. Features can be organized into groups called Feature Groups. The constituents of a Feature (i.e. Commands) and the constituents of a Feature Group (i.e. Features) are collectively referred to as Feature Elements. This MIB extends the CISCO-COMMON-ROLES-MIB by adding the following. Features can be organized into groups called feature groups. Access privileges can be assigned to feature group(s) associated with a Role. The five access privileges (clear, config, debug, show & exec) are replaced by two access privileges ('read' and 'readWrite'). These two privileges have no relation to the replaced five privileges. The types of objects to which access can be restricted is extended to include VLANs and Interfaces. A device implementing this MIB need not implement CISCO-COMMON-ROLES-MIB.")
ciscoCommonRolesExtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 651, 0))
ciscoCommonRolesExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 651, 1))
ciscoCommonRolesExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 651, 2))
ccreInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 1))
ccreRoleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2))
ccreRuleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 3))
class CcreOperation(TextualConvention, Integer32):
    description = "Privileges allowed for a common role. read - Read opeation readWrite - Read-Write operation Note that if a privilege is not supported by an access method, then it does not apply to that access method. There privileges are not related to the privileges defined in 'CommonRoleOperation'"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("read", 1), ("readWrite", 2))

class CcreResourceAccess(TextualConvention, Bits):
    description = "A User can be restricted from accessing resources, in addition to being restricted from performing certain operations. For e.g. a user assigned a role can be restricted from accessing all VLANs configured on the device except VLAN 1 and 4, or a user can be allowed to access all VSANs configured on the device except VSAN 5 and 10, or a User can be allowed to access Interface 1, 5, 10, 15 and 20 and restricted from accessing all other interfaces. This Bit mask lists the types of resources to which user access can be controlled. vsan(0) Bit value of 0 indicates that the user has access to no VSANs. However a user can be selectively assigned access to VSANs and each such accessible VSAN will have an entry in the 'ccreRoleScopeTable'. Bit value of 1 indicates that the user has access to all VSANs. In this case there are no VSAN entries in the 'ccreRoleScopeTable'. Setting the bit to 1 results in deletion of all VSAN entries from the ccreRoleScopeTable, for the role identified by 'ccreRoleName'. vlan(1) Bit value of 0 indicates that the user has access to no VLANs. However a user can be selectively assigned access to VLANs and each such accessible VLAN will have an entry in the 'ccreRoleScopeTable'. Bit value of 1 indicates that the user has access to all VLANs. In this case there are no VLAN entries in the 'ccreRoleScopeTable'. Setting the bit to 1 results in deletion of all VLAN entries from the ccreRoleScopeTable, for the role identified by 'ccreRoleName'. interface(2) Bit value of 0 indicates that the user has access to no interfaces. However a user can be selectively assigned access to interfaces and each such accessible interface will have an entry in the 'ccreRoleScopeTable'. Bit value of 1 indicates that the user has access to all interfaces. In this case there are no interface entries in the 'ccreRoleScopeTable'. Setting the bit to 1 results in deletion of all interface entries from the ccreRoleScopeTable, for the role identified by 'ccreRoleName'."
    status = 'current'
    namedValues = NamedValues(("vsan", 0), ("vlan", 1), ("interface", 2))

ccreFeatureElementTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 1, 1), )
if mibBuilder.loadTexts: ccreFeatureElementTable.setStatus('current')
if mibBuilder.loadTexts: ccreFeatureElementTable.setDescription("This table lists all the features and feature groups configured on a device. For each feature it lists all the command(s) contained in the feature. For each feature groups it lists all the features contained in the group. A feature element is either a feature or a feature group. A device may have some predefined features which may not be editable by a user. In addition, a device may allow a user to define new feature group. A device implementing this MIB need not implement the objects that form a conceptual row in the 'commonRolesFeatureTable' table defined in the CISCO-COMMON-ROLES MIB. The entries in this table are persistent across device reboots.")
ccreFeatureElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-COMMON-ROLES-EXT-MIB", "ccreFeatureName"), (0, "CISCO-COMMON-ROLES-EXT-MIB", "ccreFeatureElementIndex"))
if mibBuilder.loadTexts: ccreFeatureElementEntry.setStatus('current')
if mibBuilder.loadTexts: ccreFeatureElementEntry.setDescription("An entry (conceptual row) in the ccreFeatureElementTable. Each row in this table represents an element (command or a feature) contained in a feature or a feature group. For example a 'radius' feature that contains three commands - 'radius-server', 'radius-cfs' and 'aaa group server radius', this table will have three entries, one each for the three commands. ccreFeatureName ccreFeatureIndex ccreFeatureElementName 'radius' 1 'radius-server' 'radius' 2 'radius-cfs' 'radius' 3 'aaa group server radius' 'arp' 1 'show arp' 'arp' 2 'clear ip arp'")
ccreFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ccreFeatureName.setStatus('current')
if mibBuilder.loadTexts: ccreFeatureName.setDescription('Identifies the feature or the feature group for which this entry represents an element. This object is the same as the commonRoleFeatureName.')
ccreFeatureElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ccreFeatureElementIndex.setStatus('current')
if mibBuilder.loadTexts: ccreFeatureElementIndex.setDescription('An index value for this element which uniquely distinguishes it from all other elements of same feature.')
ccreFeatureElementName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreFeatureElementName.setStatus('current')
if mibBuilder.loadTexts: ccreFeatureElementName.setDescription('Name of the feature element represented by this row.')
ccreFeatureElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("command", 1), ("feature", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreFeatureElementType.setStatus('current')
if mibBuilder.loadTexts: ccreFeatureElementType.setDescription("An indication of the type of element represented by this row. When this field has the value 'command', this row represents a command name. When this field has the value 'feature', this row represents a feature name. This field must have the value 'none' when a feature could not otherwise be represented in this table because the feature does not yet have any elements defined for it. When features are added to an empty feature-group, the row with element type 'none' is still maintained in this table. Deleting this row (with type as 'none') will delete the feature group and all other rows representing relationship between this feature group and its members. A feature should have at least one element, whereas a feature-group may have zero or more entries. All entries in this table are persistent across device reboots")
ccreFeatureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreFeatureRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccreFeatureRowStatus.setDescription('Status of this row.')
ccreRoleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 2), )
if mibBuilder.loadTexts: ccreRoleTable.setStatus('current')
if mibBuilder.loadTexts: ccreRoleTable.setDescription("This table lists all the common roles configured on this device. Common roles are the user roles which are common across SNMP and CLI. A device implementing this MIB need not implement the objects that form a conceptual row in the 'commonRoleTable' defined in the CISCO-COMMON-ROLES MIB. This table and the 'commonRoleTable' table both have one entry per Role defined on the device. However unlike the 'commonRoleTable', this table does not contain any scope restriction information. The scope restriction information instead is contained in the 'ccreRoleScopeTable' Table. If a device implements this this table along with 'commonRoleTable' a row existing in 'commonRoleTable' should also exist in this table and vice versa. All entries in this table are persistent across device reboots.")
ccreRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleName"))
if mibBuilder.loadTexts: ccreRoleEntry.setStatus('current')
if mibBuilder.loadTexts: ccreRoleEntry.setDescription('An entry (conceptual row) in the ccreRoleTable. One entry per role defined on the device.')
ccreRoleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: ccreRoleName.setStatus('current')
if mibBuilder.loadTexts: ccreRoleName.setDescription('Name of the common role. This is same as commonRoleName.')
ccreRoleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRoleDescription.setStatus('current')
if mibBuilder.loadTexts: ccreRoleDescription.setDescription('Description of the common role. This is same as commonRoleDescription.')
ccreRoleResourceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 2, 1, 3), CcreResourceAccess()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRoleResourceAccess.setStatus('current')
if mibBuilder.loadTexts: ccreRoleResourceAccess.setDescription("Defines the default access to the resources to which access can be controlled. vsan(0) Bit value of 0 indicates that the user has access to no VSANs. However a user can be selectively assigned access to VSANs and each such accessible VSAN will have an entry in the 'ccreRoleScopeTable'. Bit value of 1 indicates that the user has access to all VSANs. In this case there are no VSAN entries in the 'ccreRoleScopeTable'. Setting the bit to 1 results in deletion of all VSAN entries from the ccreRoleScopeTable, for the role identified by 'ccreRoleName'. vlan(1) Bit value of 0 indicates that the user has access to no VLANs. However a user can be selectively assigned access to VLANs and each such accessible VLAN will have an entry in the 'ccreRoleScopeTable'. Bit value of 1 indicates that the user has access to all VLANs. In this case there are no VLAN entries in the 'ccreRoleScopeTable'. Setting the bit to 1 results in deletion of all VLAN entries from the ccreRoleScopeTable, for the role identified by 'ccreRoleName'. interface(2) Bit value of 0 indicates that the user has access to no Interfaces. However a user can be selectively assigned access to interfaces and each such accessible interface will have an entry in the 'ccreRoleScopeTable'. Bit value of 1 indicates that the user has access to all interfaces. In this case there are no interface entries in the 'ccreRoleScopeTable'. Setting the bit to 1 results in deletion of all interface entries from the ccreRoleScopeTable, for the role identified by 'ccreRoleName'. For example a role which has access to all VSANs, all VLANs and no Interface will have this field set as - - - |0|1|1| - - -")
ccreRoleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRoleRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccreRoleRowStatus.setDescription('Status of this role.')
ccreRoleScopeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 3), )
if mibBuilder.loadTexts: ccreRoleScopeTable.setStatus('current')
if mibBuilder.loadTexts: ccreRoleScopeTable.setDescription("This table lists the resources to which a user belonging to a role can access. A role may be restricted from accessing various resources of a device. This table lists the resources that a role can access. If for a role there is no entry in this table, then restriction, if any, is determined by the ccrePermitAllPolicies object in the ccreRoleTable. Each resource (VSAN, VLAN or Interface) to which a role has access to, has a separate entry in the table. For e.g. if a role has access to VLAN 1, 2, 6 and 7; VSAN 2, 5 and 8 and interface 2/1 and 2/3, this table will have 9 entries, 4 for VSANs, 3 for VLANs and 2 for Interfaces. Entries in this table can be created/deleted using ccreRoleScopeRowStatus. The table provides the same information as 'commonRoleScopeRestriction', 'commonRoleScope1' and 'commonRoleScope2' but in a different way. The object 'commonRoleScope1' and 'commonRoleScope2' are 256*8 bit mask with each bit representing a VLAN. 'commonRoleScope1' identifies VLANS 1 to 2048 whereas 'commonRoleScope2' identifies VLANS 2049 to 4096. In this table, there is a separate entry for each VSAN, along with separate entry for each VLAN and Interface to which a role has access. The purpose of this table is to remove the limit of 4096 that are supported by 'commonRoleTable'. All entries in this table are persistent across device reboots")
ccreRoleScopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleName"), (0, "CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleScopeIndex"))
if mibBuilder.loadTexts: ccreRoleScopeEntry.setStatus('current')
if mibBuilder.loadTexts: ccreRoleScopeEntry.setDescription("An entry (conceptual row) in the ccreRoleScopeTable. There is one entry for each different scope value of a Role. If a Role 'R1' is defined to have scope on VSAN-1, VSAN-2, VLAN-1, VLAN#, Interface fc1/1 and fc1/2, then there will be six entries for role 'R1' in this table, one each for VSAN-1, VSAN2, VLAN-1, VLAN-1, fc1/1 and fc1/2.")
ccreRoleScopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ccreRoleScopeIndex.setStatus('current')
if mibBuilder.loadTexts: ccreRoleScopeIndex.setDescription('An index value for this entry which uniquely distinguishes it from all other entries for same Role.')
ccreRoleScopeRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vsan", 1), ("vlan", 2), ("interface", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRoleScopeRestriction.setStatus('current')
if mibBuilder.loadTexts: ccreRoleScopeRestriction.setDescription('This object indicates the type of the scope restriction about which the information is provided by row.')
ccreRoleScopeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRoleScopeValue.setStatus('current')
if mibBuilder.loadTexts: ccreRoleScopeValue.setDescription("This object identifies the resource this role can access. If the value of 'ccreRoleScopeRestriction' is 'vsan' or 'vlan', this object specifies the Id (which is a number) of the VSAN/VLAN. If the value of 'ccreRoleScopeRestriction' is 'interface', this object specifies the IfIndex of the interface.")
ccreRoleScopeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRoleScopeRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccreRoleScopeRowStatus.setDescription('Status of this scope restriction entry.')
ccreRuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 3, 2), )
if mibBuilder.loadTexts: ccreRuleTable.setStatus('current')
if mibBuilder.loadTexts: ccreRuleTable.setDescription("This table lists all the rules configured for roles defined in the ccreRoleTable. Each rule defines the access (permit/deny) allowed to a particular command, feature or a feature group. Entries in this table are also created/deleted using ccreRuleRowStatus. A row in this table cannot be made 'active' until a value is explicitly provided for that row's instances of following objects : - ccreRuleOperation If ccreRuleFeatureElementName is a command, then - ccreRuleOperation is not needed to be set A device implementing this MIB need not implement the objects that form a conceptual row in the 'commonRuleRoleTable' table, which is defined in the CISCO-COMMON-ROLES-MIB. There is no relation between the rows in 'commonRuleRoleTable' and this table as both define different operation types. Each table can have rows with no corresponding rows in other table. All entries in this table are persistent across device reboots")
ccreRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleName"), (0, "CISCO-COMMON-ROLES-EXT-MIB", "ccreRuleNumber"))
if mibBuilder.loadTexts: ccreRuleEntry.setStatus('current')
if mibBuilder.loadTexts: ccreRuleEntry.setDescription("An entry (conceptual row) in the ccreRuleRuleTable. There is one entry for each Rule contained in a Role. For eg. if a Role 'R1' has 6 rules, there will be six entries for Role 'R1'.")
ccreRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: ccreRuleNumber.setStatus('current')
if mibBuilder.loadTexts: ccreRuleNumber.setDescription('A unique index for a rule in a particular role. The rule are applied according to their rule number, i.e. Rule 1 will be the first rule applied followed by Rule 2 and so on. Rule numbers need not be contiguous, for e.g. a Role can have three rule numbered 1, 4 & 7. Further when a new rule is added to this Role it can be rule number 2 or 5 or 9 (any number other than 1, 4 and 7).')
ccreRuleFeatureElementName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRuleFeatureElementName.setStatus('current')
if mibBuilder.loadTexts: ccreRuleFeatureElementName.setDescription('Name of the command or feature or feature group. If this is a zero-length string, then this rule applies to all the features supported on the device as enumerated in commonRoleFeatureTable.')
ccreRuleFeatureElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("command", 1), ("feature", 2), ("featureGroup", 3), ("all", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRuleFeatureElementType.setStatus('current')
if mibBuilder.loadTexts: ccreRuleFeatureElementType.setDescription('Specifies the type of entry (command or feature or feature group) as specified by the object ccreRuleFeatureElementName')
ccreRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 3, 2, 1, 4), CcreOperation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRuleOperation.setStatus('current')
if mibBuilder.loadTexts: ccreRuleOperation.setDescription('The operation for this rule.')
ccreRuleOperationPermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 3, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRuleOperationPermitted.setStatus('current')
if mibBuilder.loadTexts: ccreRuleOperationPermitted.setDescription("This object tells if the operation `ccreRuleOperation' is permitted or denied. The operation is permitted if the value of this object is `true'. If the value of the object is 'false', the operation is not permitted.")
ccreRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 651, 1, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccreRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccreRuleRowStatus.setDescription('Status of this rule.')
ccreMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 651, 2, 1))
ccreMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 651, 2, 2))
ccreMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 651, 2, 1, 1)).setObjects(("CISCO-COMMON-ROLES-EXT-MIB", "ccreConfigurationGroup"), ("CISCO-COMMON-ROLES-MIB", "ccrmConfigurationExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccreMIBCompliance = ccreMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ccreMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-COMMON-ROLES-EXT-MIB.')
ccreConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 651, 2, 2, 1)).setObjects(("CISCO-COMMON-ROLES-EXT-MIB", "ccreFeatureElementName"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreFeatureElementType"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreFeatureRowStatus"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleDescription"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleResourceAccess"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleRowStatus"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleScopeRestriction"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleScopeValue"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRoleScopeRowStatus"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRuleFeatureElementName"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRuleFeatureElementType"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRuleOperation"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRuleOperationPermitted"), ("CISCO-COMMON-ROLES-EXT-MIB", "ccreRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccreConfigurationGroup = ccreConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: ccreConfigurationGroup.setDescription('A collection of objects for Common Roles Extention configuration.')
mibBuilder.exportSymbols("CISCO-COMMON-ROLES-EXT-MIB", ccreMIBGroups=ccreMIBGroups, ciscoCommonRolesExtMIBObjects=ciscoCommonRolesExtMIBObjects, ciscoCommonRolesExtMIB=ciscoCommonRolesExtMIB, ccreRoleScopeValue=ccreRoleScopeValue, ccreRoleScopeIndex=ccreRoleScopeIndex, ccreRoleEntry=ccreRoleEntry, ccreRuleOperationPermitted=ccreRuleOperationPermitted, ccreConfigurationGroup=ccreConfigurationGroup, ccreRoleTable=ccreRoleTable, ccreRoleRowStatus=ccreRoleRowStatus, ccreRoleScopeEntry=ccreRoleScopeEntry, CcreOperation=CcreOperation, ccreRoleResourceAccess=ccreRoleResourceAccess, ccreRuleTable=ccreRuleTable, ciscoCommonRolesExtNotifications=ciscoCommonRolesExtNotifications, ccreFeatureName=ccreFeatureName, ccreRuleFeatureElementName=ccreRuleFeatureElementName, ccreFeatureElementIndex=ccreFeatureElementIndex, ccreFeatureElementType=ccreFeatureElementType, ccreRoleScopeTable=ccreRoleScopeTable, ccreFeatureRowStatus=ccreFeatureRowStatus, ccreFeatureElementEntry=ccreFeatureElementEntry, ccreRoleDescription=ccreRoleDescription, ccreRuleFeatureElementType=ccreRuleFeatureElementType, PYSNMP_MODULE_ID=ciscoCommonRolesExtMIB, ccreRuleRowStatus=ccreRuleRowStatus, ccreRuleConfig=ccreRuleConfig, ccreMIBCompliances=ccreMIBCompliances, ciscoCommonRolesExtMIBConformance=ciscoCommonRolesExtMIBConformance, ccreInfo=ccreInfo, ccreRoleName=ccreRoleName, CcreResourceAccess=CcreResourceAccess, ccreRoleScopeRowStatus=ccreRoleScopeRowStatus, ccreRuleEntry=ccreRuleEntry, ccreFeatureElementTable=ccreFeatureElementTable, ccreRuleOperation=ccreRuleOperation, ccreRuleNumber=ccreRuleNumber, ccreMIBCompliance=ccreMIBCompliance, ccreRoleScopeRestriction=ccreRoleScopeRestriction, ccreRoleConfig=ccreRoleConfig, ccreFeatureElementName=ccreFeatureElementName)
