#
# PySNMP MIB module H3C-IPX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-IPX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:22:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, Integer32, Bits, Counter64, NotificationType, Gauge32, iso, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Integer32", "Bits", "Counter64", "NotificationType", "Gauge32", "iso", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
h3cIpx = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34))
if mibBuilder.loadTexts: h3cIpx.setLastUpdated('200412241036Z')
if mibBuilder.loadTexts: h3cIpx.setOrganization('Huawei 3Com Technologies Co.,Ltd.')
if mibBuilder.loadTexts: h3cIpx.setContactInfo('Mib Team Platform Team Huawei 3Com Technologies Co.,Ltd. Hai-Dian District Beijing P.R. China http://www.huawei-3com.com Zip:100085')
if mibBuilder.loadTexts: h3cIpx.setDescription('This mib defines management information used on products which support ipx protocol. It includes 4 parts: 1.ipx interface configuration group - This group contains configurable management information and statistic information on each interface. 2.rip group - Rip means route information protocol. This group contains configurable management information and route status and route statistic information. 3.sap group - Sap means service access group. This group contains all service information. 4.ipx statistics group - This group includes ipx statistic information on all interfaces.')
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

h3cIpxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1))
h3cIpxRip = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2))
h3cIpxSap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3))
h3cIpxStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4))
h3cIpxStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxStatus.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatus.setDescription('This object is used to enable or disable ipx globally.')
h3cIpxIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2), )
if mibBuilder.loadTexts: h3cIpxIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfConfigTable.setDescription('Table of configurable management information on each interface.')
h3cIpxIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1), ).setIndexNames((0, "H3C-IPX-MIB", "h3cIpxIfIndex"))
if mibBuilder.loadTexts: h3cIpxIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfConfigEntry.setDescription('An entry in the table, containing management information about a single interface.')
h3cIpxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cIpxIfIndex.setReference('ifIndex')
if mibBuilder.loadTexts: h3cIpxIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfIndex.setDescription('This variable uniquely identifies the interface to which the configurations are applied.')
h3cIpxIfNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfNetId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfNetId.setDescription('The network number of the IPX address of this interface.')
h3cIpxIfNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfNodeId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfNodeId.setDescription('The node number of the IPX address of this interface.')
h3cIpxIfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 4), EnabledStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfSplitHorizon.setDescription("This node is used to set the split horizon status. Its default value is 'enabled'. In this case, the interface which receives a message can't send this message from the same interface. This function can avoid route loop. But it is unused for point to point link. If it is set to 'disabled', split horizon is disable.")
h3cIPxIfTick = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIPxIfTick.setStatus('current')
if mibBuilder.loadTexts: h3cIPxIfTick.setDescription("This object is used to set this interface's delay time. It is counted by ticks which is 1/18 second. By default, the ethernet interface's delay time is 1 tick, asynchronous serial interface's delay time is 30 ticks, WAN interface's delay time is 6 ticks.")
h3cIpxIfUpdateChangeOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 6), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfUpdateChangeOnly.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfUpdateChangeOnly.setDescription("When this variable is set to 'enabled', updating change is on. And sap and rip will send updating packets periodically to avoid broadcast storm. Whereas updating change is off.")
h3cIpxIfRipMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(432, 1500)).clone(432)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfRipMtu.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfRipMtu.setDescription('This variable is used to define the max length of RIP updating packets.')
h3cIpxIfEncapsuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dot2", 1), ("dot3", 2), ("ethernet-2", 3), ("snap", 4), ("unkown", 5))).clone('dot3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfEncapsuleType.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfEncapsuleType.setDescription("This node is used to define the encapsulating form of IPX packets. 'dot2' indicates the form is 802.2, while 'dot3' means 802.3. And 'snap' indicates the form is ethernet-snap. It takes effect only on ethernet interface, and the default value is 'dot3', while 'unkown' for other types of port.")
h3cIpxIfNetbiosPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 9), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfNetbiosPropagation.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfNetbiosPropagation.setDescription('This node is used to configure whether the current interface can forward broadcasting packets which IPX type is 20 used for NetBIOS.')
h3cIpxIfSapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 10), EnabledStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfSapStatus.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfSapStatus.setDescription('The status of sap on the current interface. It is enabled when ipx is enabled on this interface.')
h3cIpxIfSapMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(480, 1500)).clone(480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfSapMtu.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfSapMtu.setDescription('This variable is used to define the max length of SAP refreshing packets.')
h3cIpxIfGnsReply = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 12), EnabledStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfGnsReply.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfGnsReply.setDescription('This object is used to enable or disable the current interface to response the IPX GNS request.')
h3cIpxIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfRowStatus.setDescription("The status of this row. To create a row, user can select 'createAndGo'. If the row is created successfully, this object will became 'active'. To delete one row, user can select 'destory' and the row will be deleted.")
h3cIpxRouteMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxRouteMultiplier.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteMultiplier.setDescription('This node is used to calculate Rip aging time of route information. The absolute aging time = (h3cIpxRouteMultiplier * h3cIpxRouteUpdateTimer).')
h3cIpxRouteUpdateTimer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxRouteUpdateTimer.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteUpdateTimer.setDescription('This node is used to set rip updating time which is based on seconds')
h3cIpxRouteImpRouteStatic = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxRouteImpRouteStatic.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteImpRouteStatic.setDescription('This object determines whether static route can be imported.')
h3cIpxRouteLoadBalancePaths = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxRouteLoadBalancePaths.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteLoadBalancePaths.setDescription('This object defines the max equivalent paths to the same destination. If the newly defined value is smaller than the current value, the routes out of the new value will be set inactive.')
h3cIpxRouteMaxResPaths = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxRouteMaxResPaths.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteMaxResPaths.setDescription('This object defines the max dynamic routes to the same destination. If the newly defined value is smaller than the current value, the routes will not be deleted until they age out or are deleted manually.')
h3cIpxRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6), )
if mibBuilder.loadTexts: h3cIpxRouteTable.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteTable.setDescription('This table contains all dynamic and direct ipx route information of this system. The information of this table is read only.')
h3cIpxRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1), ).setIndexNames((0, "H3C-IPX-MIB", "h3cIpxRouteIndex"))
if mibBuilder.loadTexts: h3cIpxRouteEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteEntry.setDescription('Each entry includes a dynamic or direct route.')
h3cIpxRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cIpxRouteIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteIndex.setDescription('This object uniquely identifies a route.')
h3cIpxRouteDestNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteDestNetId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteDestNetId.setDescription('The destination network number of this route information, and its value ranges from 1 to 0xfffffffe.')
h3cIpxRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteNextHop.setDescription('The next hop of this route.')
h3cIpxRoutePro = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("rip", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRoutePro.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRoutePro.setDescription('The protocol type of this route information.')
h3cIpxRoutePre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRoutePre.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRoutePre.setDescription("The preference of this route information. The direct route's preference is 0, and it can't be modified. Dynamic route's default preference is 100.")
h3cIpxRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteTicks.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteTicks.setDescription('The time, in ticks, that the packet takes to reach the destination.')
h3cIpxRouteHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteHops.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteHops.setDescription('The object indicates the number of hops that the packet must be passed through to reach the destination.')
h3cIpxRouteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteTime.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteTime.setDescription('The aging time of this route information. The aging time of static and interface route information is 0.')
h3cIpxRouteOutInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteOutInterface.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteOutInterface.setDescription('The out interface of this route information.')
h3cIpxStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7), )
if mibBuilder.loadTexts: h3cIpxStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRouteTable.setDescription('This table contains all static ipx route information of this system.')
h3cIpxStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7, 1), ).setIndexNames((0, "H3C-IPX-MIB", "h3cIpxStaticRouteDestNetId"), (0, "H3C-IPX-MIB", "h3cIpxStaticRouteNextHop"))
if mibBuilder.loadTexts: h3cIpxStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRouteEntry.setDescription('Each entry includes one static route information.')
h3cIpxStaticRouteDestNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4))
if mibBuilder.loadTexts: h3cIpxStaticRouteDestNetId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRouteDestNetId.setDescription('The index of Static Route Table. This object and h3cIpxStaticRouteNextHop uniquely identify a static route. The destination network number of this static route information,and its value ranges from 1 to 0xfffffffe. Note that the broadcast network number is 0xffffffff and is not allowed in IPX. The network number of 0xfffffffe would be considered to be the network number of default route.')
h3cIpxStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10))
if mibBuilder.loadTexts: h3cIpxStaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRouteNextHop.setDescription('The sub-index of Static Route Table. The next hop of this static route information.')
h3cIpxStaticRoutePre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticRoutePre.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRoutePre.setDescription("The preference of this route information. Static route's preference is 60, and it can be configured.")
h3cIpxStaticRouteOutIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticRouteOutIf.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRouteOutIf.setDescription('The out interface of this route. This interface can be serial or pos interface. ')
h3cIpxStaticRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticRouteTicks.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRouteTicks.setDescription('The time, in ticks that the packet takes to reach the destination with the static route.')
h3cIpxStaticRouteHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticRouteHops.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRouteHops.setDescription('This object indicates how many hops are needed to arrive at the destination network.')
h3cIpxStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRouteStatus.setDescription('The status of this static route.')
h3cIpxStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticRouteRowStatus.setDescription("The status of this row. To create a row, user can select 'createAndGo'. If the row is created successfully, this object will became 'active'. To delete one row, user can select 'destory' and the row will be deleted.")
h3cIpxRouteStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 8), )
if mibBuilder.loadTexts: h3cIpxRouteStatTable.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteStatTable.setDescription('A table includes all statistic route information.')
h3cIpxRouteStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 8, 1), ).setIndexNames((0, "H3C-IPX-MIB", "h3cIpxRouteStatPro"))
if mibBuilder.loadTexts: h3cIpxRouteStatEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteStatEntry.setDescription('An entry records a statistic information of route.')
h3cIpxRouteStatPro = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("direct", 1), ("static", 2), ("rip", 3), ("default", 4), ("total", 5))))
if mibBuilder.loadTexts: h3cIpxRouteStatPro.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteStatPro.setDescription("The protocol type of the route information. The value of 'total' is the total amount of all kinds of IPX routes.")
h3cIpxRouteStatRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteStatRoutes.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteStatRoutes.setDescription('The route amount of the corresponding protocol type.')
h3cIpxRouteStatActives = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteStatActives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteStatActives.setDescription('The active route amount of the corresponding protocol type.')
h3cIpxRouteStatAddeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteStatAddeds.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteStatAddeds.setDescription('The added route amount of the corresponding protocol type.')
h3cIpxRouteStatDeleteds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteStatDeleteds.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteStatDeleteds.setDescription('The deleted but not freed route amount of the corresponding protocol type.')
h3cIpxRouteStatFreeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 2, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxRouteStatFreeds.setStatus('current')
if mibBuilder.loadTexts: h3cIpxRouteStatFreeds.setDescription('The freed route amount of the corresponding protocol type.')
h3cIpxSapMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxSapMultiplier.setStatus('current')
if mibBuilder.loadTexts: h3cIpxSapMultiplier.setDescription('This node is used to calculate aging time of service information. The absolute aging time = (h3cIpxSapMultiplier * h3cIpxSapUpdateTimer).')
h3cIpxSapUpdateTimer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxSapUpdateTimer.setStatus('current')
if mibBuilder.loadTexts: h3cIpxSapUpdateTimer.setDescription('This node is used to set service packet updating time which is based on seconds.')
h3cIpxSapGnsLoadBalance = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 3), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxSapGnsLoadBalance.setStatus('current')
if mibBuilder.loadTexts: h3cIpxSapGnsLoadBalance.setDescription("This object is used to set whether the system will reply to the GNS request with the Round-Robin way. By default, the system will response to the GNS request with the servers known to the device in turn, preventing from the nearest server's over loading. With value of disabled, in this way, the system will response to the request with the nearest server(who has smallest hop in system's service information table).")
h3cIpxSapMaxResServers = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIpxSapMaxResServers.setStatus('current')
if mibBuilder.loadTexts: h3cIpxSapMaxResServers.setDescription('This object is used to configure maximum number of servers of a type. If the newly defined value is smaller than the previous value, the information out of the value will not be deleted. If the queue reaches to the maximum number, no new information can be added.')
h3cIpxServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5), )
if mibBuilder.loadTexts: h3cIpxServiceTable.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceTable.setDescription('This table inlcudes all dynamic service information. The dynamic service information can be read only.')
h3cIpxServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1), ).setIndexNames((0, "H3C-IPX-MIB", "h3cIpxServiceIndex"))
if mibBuilder.loadTexts: h3cIpxServiceEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceEntry.setDescription('One entry records one service')
h3cIpxServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cIpxServiceIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceIndex.setDescription('This object uniquely identifies a service information.')
h3cIpxServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxServiceName.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceName.setDescription('The name of the service.')
h3cIpxServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxServiceType.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceType.setDescription('The service type.')
h3cIpxServiceNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxServiceNetId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceNetId.setDescription('The IPX network number portion of the IPX address of the service.')
h3cIpxServiceNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxServiceNodeId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceNodeId.setDescription('The IPX node number portion of the IPX address of the service.')
h3cIpxServiceSocketNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxServiceSocketNo.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceSocketNo.setDescription('The socket portion of the IPX address of the service')
h3cIpxServicePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxServicePreference.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServicePreference.setDescription('The service preference of the service')
h3cIpxServiceHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxServiceHops.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceHops.setDescription('The hops from the device to the server.')
h3cIpxServiceRecvIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxServiceRecvIf.setStatus('current')
if mibBuilder.loadTexts: h3cIpxServiceRecvIf.setDescription('Interface from which the service is receieved')
h3cIpxStaticServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6), )
if mibBuilder.loadTexts: h3cIpxStaticServiceTable.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServiceTable.setDescription('This table inlcudes all static service information. This table supports to creation and deletione of a static service, but not supports to modification')
h3cIpxStaticServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1), ).setIndexNames((0, "H3C-IPX-MIB", "h3cIpxStaticServiceType"), (0, "H3C-IPX-MIB", "h3cIpxStaticServiceName"), (0, "H3C-IPX-MIB", "h3cIpxStaticServiceNetId"))
if mibBuilder.loadTexts: h3cIpxStaticServiceEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServiceEntry.setDescription('An entry records one service')
h3cIpxStaticServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2))
if mibBuilder.loadTexts: h3cIpxStaticServiceType.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServiceType.setDescription('The index of static service table.')
h3cIpxStaticServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47)))
if mibBuilder.loadTexts: h3cIpxStaticServiceName.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServiceName.setDescription('The sub-index of static service table. The name of the service.')
h3cIpxStaticServiceNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4))
if mibBuilder.loadTexts: h3cIpxStaticServiceNetId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServiceNetId.setDescription('The sub-index of static service table. The IPX network number portion of the IPX address of the service.')
h3cIpxStaticServiceNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticServiceNodeId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServiceNodeId.setDescription('The IPX node number portion of the IPX address of the service.')
h3cIpxStatciServiceSocketNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStatciServiceSocketNo.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatciServiceSocketNo.setDescription('The socket portion of the IPX address of the service.')
h3cIpxStaticServicePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticServicePreference.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServicePreference.setDescription('The service preference of the server.')
h3cIpxStaticServiceHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticServiceHops.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServiceHops.setDescription('The hops from the device to the server.')
h3cIpxStaticServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticServiceStatus.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServiceStatus.setDescription('The status of the service that you created. The value of this object is determined by system.')
h3cIpxStaticServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 3, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIpxStaticServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaticServiceRowStatus.setDescription("The status of this row. To create a row, user can select 'createAndGo'. If the row is created successfully, this object will became 'active'. To delete one row, user can select 'destory' and the row will be deleted.")
h3cIpxStatGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1))
h3cIpxStatInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2))
h3cIpxStatTotalReceives = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatTotalReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatTotalReceives.setDescription('The total number of packets received.')
h3cIpxStatPitchs = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatPitchs.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatPitchs.setDescription('The number of received packets filled by device when forwarding or delivering up to upper protocol.')
h3cIpxStatLenErrors = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatLenErrors.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatLenErrors.setDescription('The number of received packets discarded due to length error.')
h3cIpxStatFormatErrors = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatFormatErrors.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatFormatErrors.setDescription('The number of received packets discarded due to format error.')
h3cIpxStatBadHops = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatBadHops.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatBadHops.setDescription("The number of received packets which's value of field Hops is greater than 16.")
h3cIpxStatHopsDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatHopsDiscards.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatHopsDiscards.setDescription('The number of received packets of which hops portion is equal to 16.')
h3cIpxStatOtherErrors = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatOtherErrors.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatOtherErrors.setDescription('The number of received packets discarded due to other error.')
h3cIpxStatLocalDests = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatLocalDests.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatLocalDests.setDescription('The number of received packets which destination is the local device. Note that this would include the IPX NetBIOS propagation packets and those broadcast packets just to the network on which local device resides.')
h3cIpxStatCantDeals = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatCantDeals.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatCantDeals.setDescription("The number of received packets with which can't be dealt. One possible reason for discarding such a packet would be receiving a packet of an unknown or unsupported protocol.")
h3cIpxStatForwards = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatForwards.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatForwards.setDescription('The number of received packets to be forwarded in the case that the entity was not their final destination.')
h3cIpxStatGenerates = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatGenerates.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatGenerates.setDescription('The number of sent packets that the device generated itself.')
h3cIpxStatNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatNoRoutes.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatNoRoutes.setDescription('The number of packets discarded due to no route to the destination was found in routing table.')
h3cIpxStatOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatOutDiscards.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatOutDiscards.setDescription('The number of packets to be discarded when sending out. Note that this counter would not include the packet(s) discarded due to no route.')
h3cIpxStatRipSends = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatRipSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatRipSends.setDescription('The total number of RIP packets sent.')
h3cIpxStatRipReceives = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatRipReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatRipReceives.setDescription('The total number of RIP packets received.')
h3cIpxStaRipRspSends = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStaRipRspSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaRipRspSends.setDescription('The total number of RIP response packets sent. ')
h3cIpxStaRipRspReceives = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStaRipRspReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStaRipRspReceives.setDescription('The total number of RIP response packets received.')
h3cIpxStatRipReqReceives = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatRipReqReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatRipReqReceives.setDescription('The total number of RIP request packets received.')
h3cIpxStatRipReqDeals = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatRipReqDeals.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatRipReqDeals.setDescription('The total number of RIP request packets dealt with.')
h3cIpxStatRipReqSends = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatRipReqSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatRipReqSends.setDescription('The total number of RIP request packets sent.')
h3cIpxStatRipPeriUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatRipPeriUpdates.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatRipPeriUpdates.setDescription('The total number of periodic update RIP packets sent.')
h3cIpxStatSapGenReqReceives = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatSapGenReqReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatSapGenReqReceives.setDescription('The total number of SAP general request packets received.')
h3cIpxStatSapSpecReqReceives = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatSapSpecReqReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatSapSpecReqReceives.setDescription('The total number of SAP specific request packets received.')
h3cIpxStatSapGnsReqReceives = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatSapGnsReqReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatSapGnsReqReceives.setDescription('The total number of SAP GNS request packets received.')
h3cIpxStatSapGenRspSends = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatSapGenRspSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatSapGenRspSends.setDescription('The total number of SAP general response packets sent.')
h3cIpxStatSapSpecRspSends = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatSapSpecRspSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatSapSpecRspSends.setDescription('The total number of SAP specific response packets sent.')
h3cIpxStatSapGnsRspSends = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatSapGnsRspSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatSapGnsRspSends.setDescription('The total number of SAP GNS response packets sent.')
h3cIpxStatSapPeriUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatSapPeriUpdates.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatSapPeriUpdates.setDescription('The total number of SAP periodic update packets sent.')
h3cIpxStatSapInPktErrors = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxStatSapInPktErrors.setStatus('current')
if mibBuilder.loadTexts: h3cIpxStatSapInPktErrors.setDescription('The total number of SAP error packets received.')
h3cIpxIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1), )
if mibBuilder.loadTexts: h3cIpxIfStatTable.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatTable.setDescription('The table of the statistic information on each interface.')
h3cIpxIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1), ).setIndexNames((0, "H3C-IPX-MIB", "h3cIpxIfStatIndex"))
if mibBuilder.loadTexts: h3cIpxIfStatEntry.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatEntry.setDescription('The entry of the statistic table.')
h3cIpxIfStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cIpxIfStatIndex.setReference('ifIndex')
if mibBuilder.loadTexts: h3cIpxIfStatIndex.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatIndex.setDescription("The index of the table's entry. According to the interface's index.")
h3cIpxIfStatNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatNetId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatNetId.setDescription('The network number of the IPX address of this interface.')
h3cIpxIfStatNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatNodeId.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatNodeId.setDescription('The node number of the IPX address of this interface.')
h3cIpxIfStatIpxReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatIpxReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatIpxReceives.setDescription('The total number of packets received on the interface.')
h3cIpxIfStatIpxSends = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatIpxSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatIpxSends.setDescription('The total number of packets sent on the interface.')
h3cIpxIfStatIpxRecvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatIpxRecvBytes.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatIpxRecvBytes.setDescription('The total number of bytes received on the interface.')
h3cIpxIfStatIpxSendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatIpxSendBytes.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatIpxSendBytes.setDescription('The total number of bytes sent on the interface.')
h3cIpxIfStatRipReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatRipReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatRipReceives.setDescription('The total number of RIP packets received on the interface.')
h3cIpxIfStatRipSends = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatRipSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatRipSends.setDescription('The total number of RIP packets sent on the interface.')
h3cIpxIfStatRipDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatRipDiscards.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatRipDiscards.setDescription('The total number of RIP packets discarded on the interface.')
h3cIpxIfStatRipSpecReqReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatRipSpecReqReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatRipSpecReqReceives.setDescription('The total number of RIP specific request packets received on the interface.')
h3cIpxIfStatRipSpecRspSends = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatRipSpecRspSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatRipSpecRspSends.setDescription('The total number of RIP specific response packets sent on the interface.')
h3cIpxIfStatRipGenReqReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatRipGenReqReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatRipGenReqReceives.setDescription('The total number of RIP general request packets received on the interface.')
h3cIpxIfStatRipGenRspSends = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatRipGenRspSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatRipGenRspSends.setDescription('The total number of RIP general response packets sent on the interface.')
h3cIpxIfStatSapReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatSapReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatSapReceives.setDescription('The total number of SAP packets received on the interface.')
h3cIpxIfStatSapSends = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatSapSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatSapSends.setDescription('The total number of SAP packets sent on the interface.')
h3cIpxIfStatSapDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatSapDiscards.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatSapDiscards.setDescription('The total number of SAP packets discarded on the interface.')
h3cIpxIfStatSapGnsReqReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatSapGnsReqReceives.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatSapGnsReqReceives.setDescription('The total number of SAP GNS response packets received on the interface.')
h3cIpxIfStatSapGnsRspSends = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 34, 4, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIpxIfStatSapGnsRspSends.setStatus('current')
if mibBuilder.loadTexts: h3cIpxIfStatSapGnsRspSends.setDescription('The total number of SAP GNS response packets sent on the interface.')
mibBuilder.exportSymbols("H3C-IPX-MIB", h3cIpxStatSapPeriUpdates=h3cIpxStatSapPeriUpdates, h3cIpxServiceNetId=h3cIpxServiceNetId, h3cIpxStaticRouteEntry=h3cIpxStaticRouteEntry, h3cIpxStatRipPeriUpdates=h3cIpxStatRipPeriUpdates, h3cIpxIfSapStatus=h3cIpxIfSapStatus, h3cIpxServiceIndex=h3cIpxServiceIndex, h3cIpxIfStatNetId=h3cIpxIfStatNetId, h3cIpxRoutePre=h3cIpxRoutePre, h3cIpxStaticRoutePre=h3cIpxStaticRoutePre, h3cIpxStatRipReceives=h3cIpxStatRipReceives, h3cIpxStaRipRspReceives=h3cIpxStaRipRspReceives, h3cIpxStatInterface=h3cIpxStatInterface, h3cIpxStatCantDeals=h3cIpxStatCantDeals, h3cIpxRouteMultiplier=h3cIpxRouteMultiplier, h3cIpxRouteLoadBalancePaths=h3cIpxRouteLoadBalancePaths, h3cIpxStatNoRoutes=h3cIpxStatNoRoutes, h3cIpxIfStatEntry=h3cIpxIfStatEntry, h3cIpxStaticServiceTable=h3cIpxStaticServiceTable, h3cIpxRouteDestNetId=h3cIpxRouteDestNetId, h3cIpxSapMultiplier=h3cIpxSapMultiplier, h3cIpxServiceEntry=h3cIpxServiceEntry, PYSNMP_MODULE_ID=h3cIpx, h3cIpxRouteEntry=h3cIpxRouteEntry, h3cIpxStatSapGenReqReceives=h3cIpxStatSapGenReqReceives, h3cIpxIfConfigEntry=h3cIpxIfConfigEntry, h3cIpxIfStatIpxSends=h3cIpxIfStatIpxSends, h3cIpxIfNetbiosPropagation=h3cIpxIfNetbiosPropagation, h3cIpxRouteImpRouteStatic=h3cIpxRouteImpRouteStatic, h3cIpxStatSapGenRspSends=h3cIpxStatSapGenRspSends, h3cIpxStatOtherErrors=h3cIpxStatOtherErrors, h3cIpxStaticRouteStatus=h3cIpxStaticRouteStatus, h3cIpxIfStatIpxReceives=h3cIpxIfStatIpxReceives, h3cIpxServiceSocketNo=h3cIpxServiceSocketNo, h3cIpxStatBadHops=h3cIpxStatBadHops, h3cIpxStaticServiceStatus=h3cIpxStaticServiceStatus, h3cIpxRouteIndex=h3cIpxRouteIndex, h3cIpxIfStatRipDiscards=h3cIpxIfStatRipDiscards, h3cIpxStatSapSpecReqReceives=h3cIpxStatSapSpecReqReceives, h3cIpxIfStatIndex=h3cIpxIfStatIndex, h3cIpxIfStatRipSpecReqReceives=h3cIpxIfStatRipSpecReqReceives, h3cIpxStatSapSpecRspSends=h3cIpxStatSapSpecRspSends, h3cIpxStatGenerates=h3cIpxStatGenerates, h3cIpxRouteStatDeleteds=h3cIpxRouteStatDeleteds, h3cIpx=h3cIpx, h3cIpxRouteTime=h3cIpxRouteTime, h3cIpxIfSapMtu=h3cIpxIfSapMtu, h3cIpxSapUpdateTimer=h3cIpxSapUpdateTimer, h3cIpxSapMaxResServers=h3cIpxSapMaxResServers, h3cIpxStaticRouteDestNetId=h3cIpxStaticRouteDestNetId, h3cIpxStaticRouteRowStatus=h3cIpxStaticRouteRowStatus, EnabledStatus=EnabledStatus, h3cIpxIfNetId=h3cIpxIfNetId, h3cIpxRouteStatFreeds=h3cIpxRouteStatFreeds, h3cIpxStatOutDiscards=h3cIpxStatOutDiscards, h3cIpxStatRipSends=h3cIpxStatRipSends, h3cIPxIfTick=h3cIPxIfTick, h3cIpxRip=h3cIpxRip, h3cIpxRouteStatTable=h3cIpxRouteStatTable, h3cIpxIfStatSapSends=h3cIpxIfStatSapSends, h3cIpxRouteMaxResPaths=h3cIpxRouteMaxResPaths, h3cIpxRouteTable=h3cIpxRouteTable, h3cIpxStaticRouteTicks=h3cIpxStaticRouteTicks, h3cIpxStatFormatErrors=h3cIpxStatFormatErrors, h3cIpxIfStatIpxSendBytes=h3cIpxIfStatIpxSendBytes, h3cIpxIfStatRipGenReqReceives=h3cIpxIfStatRipGenReqReceives, h3cIpxRouteStatEntry=h3cIpxRouteStatEntry, h3cIpxIfStatSapGnsReqReceives=h3cIpxIfStatSapGnsReqReceives, h3cIpxRouteUpdateTimer=h3cIpxRouteUpdateTimer, h3cIpxStaticRouteHops=h3cIpxStaticRouteHops, h3cIpxIfStatSapReceives=h3cIpxIfStatSapReceives, h3cIpxStaticServiceHops=h3cIpxStaticServiceHops, h3cIpxStatSapInPktErrors=h3cIpxStatSapInPktErrors, h3cIpxIfUpdateChangeOnly=h3cIpxIfUpdateChangeOnly, h3cIpxStaticServiceRowStatus=h3cIpxStaticServiceRowStatus, h3cIpxStaticRouteTable=h3cIpxStaticRouteTable, h3cIpxRouteStatRoutes=h3cIpxRouteStatRoutes, h3cIpxStaticServiceNodeId=h3cIpxStaticServiceNodeId, h3cIpxServiceNodeId=h3cIpxServiceNodeId, h3cIpxIfStatRipSpecRspSends=h3cIpxIfStatRipSpecRspSends, h3cIpxStatGlobal=h3cIpxStatGlobal, h3cIpxStatciServiceSocketNo=h3cIpxStatciServiceSocketNo, h3cIpxIfConfigTable=h3cIpxIfConfigTable, h3cIpxIfNodeId=h3cIpxIfNodeId, h3cIpxServiceType=h3cIpxServiceType, h3cIpxRouteHops=h3cIpxRouteHops, h3cIpxIfStatTable=h3cIpxIfStatTable, h3cIpxServiceHops=h3cIpxServiceHops, h3cIpxStaticServiceName=h3cIpxStaticServiceName, h3cIpxStatRipReqSends=h3cIpxStatRipReqSends, h3cIpxIfRipMtu=h3cIpxIfRipMtu, h3cIpxStatRipReqReceives=h3cIpxStatRipReqReceives, h3cIpxServiceName=h3cIpxServiceName, h3cIpxServiceTable=h3cIpxServiceTable, h3cIpxRouteStatPro=h3cIpxRouteStatPro, h3cIpxStaticServicePreference=h3cIpxStaticServicePreference, h3cIpxStatSapGnsReqReceives=h3cIpxStatSapGnsReqReceives, h3cIpxIfStatSapDiscards=h3cIpxIfStatSapDiscards, h3cIpxRouteStatAddeds=h3cIpxRouteStatAddeds, h3cIpxStatPitchs=h3cIpxStatPitchs, h3cIpxStatLenErrors=h3cIpxStatLenErrors, h3cIpxRoutePro=h3cIpxRoutePro, h3cIpxServicePreference=h3cIpxServicePreference, h3cIpxRouteTicks=h3cIpxRouteTicks, h3cIpxStat=h3cIpxStat, h3cIpxIfGnsReply=h3cIpxIfGnsReply, h3cIpxIfStatRipSends=h3cIpxIfStatRipSends, h3cIpxStaticRouteOutIf=h3cIpxStaticRouteOutIf, h3cIpxStatHopsDiscards=h3cIpxStatHopsDiscards, h3cIpxStatLocalDests=h3cIpxStatLocalDests, h3cIpxStatSapGnsRspSends=h3cIpxStatSapGnsRspSends, h3cIpxServiceRecvIf=h3cIpxServiceRecvIf, h3cIpxStaticServiceType=h3cIpxStaticServiceType, h3cIpxIfRowStatus=h3cIpxIfRowStatus, h3cIpxIfStatRipReceives=h3cIpxIfStatRipReceives, h3cIpxStaticServiceEntry=h3cIpxStaticServiceEntry, h3cIpxStatTotalReceives=h3cIpxStatTotalReceives, h3cIpxStatForwards=h3cIpxStatForwards, h3cIpxConfig=h3cIpxConfig, h3cIpxStaRipRspSends=h3cIpxStaRipRspSends, h3cIpxRouteStatActives=h3cIpxRouteStatActives, h3cIpxIfStatRipGenRspSends=h3cIpxIfStatRipGenRspSends, h3cIpxIfSplitHorizon=h3cIpxIfSplitHorizon, h3cIpxSapGnsLoadBalance=h3cIpxSapGnsLoadBalance, h3cIpxStatRipReqDeals=h3cIpxStatRipReqDeals, h3cIpxIfStatIpxRecvBytes=h3cIpxIfStatIpxRecvBytes, h3cIpxIfEncapsuleType=h3cIpxIfEncapsuleType, h3cIpxRouteOutInterface=h3cIpxRouteOutInterface, h3cIpxIfIndex=h3cIpxIfIndex, h3cIpxRouteNextHop=h3cIpxRouteNextHop, h3cIpxSap=h3cIpxSap, h3cIpxIfStatNodeId=h3cIpxIfStatNodeId, h3cIpxStatus=h3cIpxStatus, h3cIpxStaticRouteNextHop=h3cIpxStaticRouteNextHop, h3cIpxIfStatSapGnsRspSends=h3cIpxIfStatSapGnsRspSends, h3cIpxStaticServiceNetId=h3cIpxStaticServiceNetId)
