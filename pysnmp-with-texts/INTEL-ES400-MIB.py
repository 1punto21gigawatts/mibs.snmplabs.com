#
# PySNMP MIB module INTEL-ES400-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-ES400-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, Gauge32, iso, ModuleIdentity, ObjectIdentity, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, enterprises, MibIdentifier, Bits, Integer32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Gauge32", "iso", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "enterprises", "MibIdentifier", "Bits", "Integer32", "Counter64", "NotificationType")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
mib2ext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6))
es400 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17))
es400Agent = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 1))
es400Chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 2))
es400Port = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 3))
es400FDb = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 4))
es400LinkAggr = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 5))
es400PortMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 6))
es400IgmpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 7))
es400Vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 8))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class VlanIndex(Integer32):
    pass

es400AgentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1))
es400AgentRuntimeSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentRuntimeSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentRuntimeSwVersion.setDescription("This is a textual description of the runtime software version and revision. If the version number is one and revision number is zero es400AgentRuntimeSwVersion would be 'Ver. 1.0'")
es400AgentPromFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentPromFwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentPromFwVersion.setDescription("This is a textual description of the agent PROM firmware version and revision. If the version number is one and revision number is zero es400AgentPromFwVersion would be 'Ver. 1.0'")
es400AgentHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentHwRevision.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentHwRevision.setDescription('This is a integer number of the hardware revision.')
es400AgentMgmtProtocolCapability = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("snmp-ip", 2), ("snmp-ipx", 3), ("snmp-ip-ipx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentMgmtProtocolCapability.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentMgmtProtocolCapability.setDescription('The network management protocol(s) supported by this agent.')
es400AgentMibSupportTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 5), )
if mibBuilder.loadTexts: es400AgentMibSupportTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentMibSupportTable.setDescription('A list of MIB capability entries supported by this agent.')
es400AgentMibSupportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 5, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400AgentMibSupportIndex"))
if mibBuilder.loadTexts: es400AgentMibSupportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentMibSupportEntry.setDescription('A MIB capability entry contains objects describing a particular MIB supported by this agent.')
es400AgentMibSupportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentMibSupportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentMibSupportIndex.setDescription('A list of es400AgentMibSupportDescr entries.')
es400AgentMibSupportDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentMibSupportDescr.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentMibSupportDescr.setDescription('The name of the MIB supported by the agent.')
es400AgentMibSupportVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentMibSupportVersion.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentMibSupportVersion.setDescription('The version of the MIB specified in this entry.')
es400AgentMibSupportType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("proprietary", 3), ("experiment", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentMibSupportType.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentMibSupportType.setDescription('The type of the MIB specified in this entry.')
es400AgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 2))
es400AgentSwUpdateMode = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("network-load", 2), ("out-of-band-load", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentSwUpdateMode.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentSwUpdateMode.setDescription('The download media used by the system to download the runtime software.')
es400AgentSwUpdateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentSwUpdateCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentSwUpdateCtrl.setDescription('Current status of configuration software download control. The setting is effective the next time you reset or power on the hub.')
es400AgentBootFile = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentBootFile.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentBootFile.setDescription('The name of the configuration file to be downloaded from the TFTP server when software update is enabled.')
es400AgentFirmwareUpdateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentFirmwareUpdateCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentFirmwareUpdateCtrl.setDescription('Current status of firmware software download control. The setting is effective the next time you reset or power on the hub.')
es400AgentFirmwareFile = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentFirmwareFile.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentFirmwareFile.setDescription('The name of the firmware file to be downloaded from the TFTP server when software update is enabled.')
es400AgentSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("cold-start", 2), ("warm-start", 3), ("no-reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentSystemReset.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentSystemReset.setDescription('This object indicates the agent system reset state. Setting this object to no-reset(4) has no effect. Setting this object to cold-start(2) or warm-start(3) will reset the agent. The agent always returns no-reset(4) when this object is read.')
es400AgentRs232PortConfig = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("console", 2), ("out-of-band", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentRs232PortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentRs232PortConfig.setDescription('This object indicates the RS-232C mode while device restart.')
es400AgentOutOfBandBaudRateConfig = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentOutOfBandBaudRateConfig.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentOutOfBandBaudRateConfig.setDescription('This object indicates the out_of_band baud rate while device restart.')
es400AgentIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3))
es400AgentIpNumOfIf = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentIpNumOfIf.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpNumOfIf.setDescription('The total number of IP interfaces supported by this agent.')
es400AgentIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 2), )
if mibBuilder.loadTexts: es400AgentIpIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpIfTable.setDescription('A list of IP interface entries supported by the agent.')
es400AgentIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 2, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400AgentIpIfIndex"))
if mibBuilder.loadTexts: es400AgentIpIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpIfEntry.setDescription('An es400AgentIPIfEntry contains information about a particular IP interface.')
es400AgentIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentIpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpIfIndex.setDescription('This object uniquely identifies the IP interface number in the es400AgentIpIfTable. This value should never greater than es400AgentIpNumOfIf')
es400AgentIpIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentIpIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpIfAddress.setDescription('The IP address of the interface.')
es400AgentIpIfNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentIpIfNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpIfNetMask.setDescription('The IP net mask for this interface.')
es400AgentIpIfDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentIpIfDefaultRouter.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpIfDefaultRouter.setDescription('The default gateway for this IP interface.')
es400AgentIpIfMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 2, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentIpIfMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpIfMacAddr.setDescription('The MAC address of this IP interface. For interfaces which do not have such an address. (e.g., a serial line), this object should contain an octet string of zero length.')
es400AgentIpIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 28))).clone(namedValues=NamedValues(("other", 1), ("ethernet-csmacd", 6), ("slip", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentIpIfType.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpIfType.setDescription('The physical layer interface of the IP interface.')
es400AgentIpBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentIpBootServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpBootServerAddr.setDescription('The IP Address of Boot Server.')
es400AgentIpGetIpFromBootpServer = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentIpGetIpFromBootpServer.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpGetIpFromBootpServer.setDescription('This object indicates whether the agent get its system IP address from Bootp server at start up.')
es400AgentIpUnauthAddr = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentIpUnauthAddr.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpUnauthAddr.setDescription('The IP address of an unauthorized SNMP packet.')
es400AgentIpUnauthComm = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentIpUnauthComm.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpUnauthComm.setDescription('The community string of an unauthorized SNMP packet.')
es400AgentIpLastBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentIpLastBootServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpLastBootServerAddr.setDescription('The last IP address used as Boot server IP address.')
es400AgentIpLastIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 3, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentIpLastIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentIpLastIpAddr.setDescription('The last IP address used as the agent system IP address.')
es400AgentTrapAddressTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 4), )
if mibBuilder.loadTexts: es400AgentTrapAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentTrapAddressTable.setDescription('A list of trap manager entries to which to send SNMP traps .')
es400AgentTrapAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 4, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400AgentTrapIndex"))
if mibBuilder.loadTexts: es400AgentTrapAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentTrapAddressEntry.setDescription('This entry contains the particular trap manager settings.')
es400AgentTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400AgentTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentTrapIndex.setDescription('The table index to receive SNMP traps from this device.')
es400AgentTrapAddressIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentTrapAddressIp.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentTrapAddressIp.setDescription('The IP address to receive SNMP traps from this device.')
es400AgentTrapAddressComm = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentTrapAddressComm.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentTrapAddressComm.setDescription('The community string of the SNMP trap packet sent to the trap manager.')
es400AgentTrapAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400AgentTrapAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es400AgentTrapAddressStatus.setDescription('This object indicates whether or not the trap should be send to this trap manager.')
es400ChassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 1))
es400ChassisInfoSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400ChassisInfoSystemUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisInfoSystemUpTime.setDescription('The value of sysUpTime at the time the switch entered its current operational state. If the current state was entered prior to the last re-initialization, then this object contains a zero value. This value is in units of seconds.')
es400ChassisInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400ChassisInfoTotalNumOfPort.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisInfoTotalNumOfPort.setDescription('The number of ports within this switch. This value is the sum of the ports within this switch.')
es400ChassisInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400ChassisInfoNumOfPortInUse.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisInfoNumOfPortInUse.setDescription('The number of ports in this switch connected to the segment or the end stations.')
es400ChassisInfoConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400ChassisInfoConsoleInUse.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisInfoConsoleInUse.setDescription('This usage indication of console system.')
es400ChassisInfoFrontPanelLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400ChassisInfoFrontPanelLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisInfoFrontPanelLedStatus.setDescription('This object is a set of LED indications. The first two octets is defined as system LED. The first LED is power LED. The second LED is status LED. The other octets following the second octets are the port LED. Every two bytes are presented to a port. The first byte is presentd to the Link/Activity LED. The second byte is presented to the Speed LED. There is one byte per LED. The most significant bit is used for blink/solid: Off = The LED is lit permanently. On = The LED blinks. The three least significant bits are used for color: 1 = not lit, 2 = green, 3 = yellow,(orange) 4 = blue, 5 = red, 0+6+7 not used The four remaining bits are currently unused and must be 0.')
es400ChassisInfoSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("proceeding", 2), ("completed", 3), ("changed-not-save", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400ChassisInfoSaveCfg.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisInfoSaveCfg.setDescription('This object indicates the status of the device configuration. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. proceeding(2) - the device configuration is saving into the NV-RAM. completed(3) V all of the device configuration parameters have been saved into NV-RAM. changed-not-save V some of the device configuration parameters have been changed but not saved into NV-RAM. failed(5) - The processing of saving device configuration is failed.')
es400ChassisConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2))
es400ChassisConfigStpState = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisConfigStpState.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigStpState.setDescription('This object can be enabled or disabled spanning tree algorithm during runtime of the system.When the device is in 802.1Q Vlan mode, this object will be enabled and cannot be disabled.')
es400ChassisConfigIGMPCaptureState = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisConfigIGMPCaptureState.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigIGMPCaptureState.setDescription('This object indicates Internet Group Management Protocol (IGMP) capture function is enabled or disabled.')
es400ChassisConfigPartitionModeState = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisConfigPartitionModeState.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigPartitionModeState.setDescription('This object used to enable or disable port auto partition. When the object apply for all ports of the device')
es400ChassisConfigTableLockState = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisConfigTableLockState.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigTableLockState.setDescription("This object indicates whether the address table is locked. In other words, the address table doesn't learn any more new address. The aging timer is suspended when the address table is locked. As long as the table is locked, all of the frames are dropped if the destination can not be found in the address.")
es400ChassisConfigSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: es400ChassisConfigSaveCfg.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigSaveCfg.setDescription('As the object is set, the current device configuration is save into to NV-RAM.')
es400ChassisConfigHOLState = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisConfigHOLState.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigHOLState.setDescription("The object provides a way to prevent HOL (Head Of Line) blocking between ports. HOL protection may prevent forwarding a packet to a blocking port.The idea relies on the assumption that it is better to discard packets destined to blocking ports, then to let them consume more and more buffers in the input-port's Rx-counters because eventually these input ports may become totally blocked. The meanings of the values are: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - HOL function disable for device. enabled(3) - HOL function enable for device.")
es400ChassisConfigAddrLookupModes = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sequential-mode", 2), ("random-mode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisConfigAddrLookupModes.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigAddrLookupModes.setDescription('The object provides a way to select the algorithm that optimizes the lookup depending on the network configuration. The setting will be effective after next system reboot. The meanings of the values are: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. sequential-mode(2) - Uses MAC address, optimized for sequential address (basic mode or tag mode). random-mode(3) - Uses MAC address, optimized for random address (basic mode or tag mode).')
es400ChassisConfigUploadImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisConfigUploadImageFileName.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigUploadImageFileName.setDescription('The name of the image file to be uploaded from the device to TFTP server when enabling image upload function (by writing es400ChassisConfigUploadImage).')
es400ChassisConfigUploadImage = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: es400ChassisConfigUploadImage.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigUploadImage.setDescription('Image file upload control. Writing it by any value will immediately invoke image upload function.')
es400ChassisConfigHighPriorityServiceRatio = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("pkt-1high-1low", 2), ("pkt-4high-1low", 3), ("pkt-8high-1low", 4), ("pkt-12high-1low", 5), ("all-high-before-low", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisConfigHighPriorityServiceRatio.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisConfigHighPriorityServiceRatio.setDescription('The object provides a way to select an internal round-robin priority weight between low-priority queue and high-priority queue. The meanings of the values are: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. pkt-1high-1low(2) - 1 pkt transmitted from HIGH, 1 pkt from LOW. pkt-4high-1low(3) - 4 pkt transmitted from HIGH, 1 pkt from LOW. pkt-8high-1low(4) - 8 pkt transmitted from HIGH, 1 pkt from LOW. pkt-12high-1low(5) - 12 pkt transmitted from HIGH, 1 pkt from LOW. all-high-before-low(6) - all pkt transmitted from HIGH, 0 pkt from LOW. LOW will be served only if HIGH is empty. If HIGH queue is emptied before finishing the count, the count will be reset until next first HIGH comes in.')
es400ChassisAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 3))
es400ChassisAlarmPartition = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisAlarmPartition.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisAlarmPartition.setDescription("Depending on this object, the device send a trap or not when any one of the device's ports was partitioned.")
es400ChassisAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisAlarmNewRoot.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisAlarmNewRoot.setDescription('When the device has become the new root of the Spanning Tree, this object decide whether to send a new root trap.')
es400ChassisAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisAlarmTopologyChange.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisAlarmTopologyChange.setDescription("This object determine to send a trap or not when the switch topology was changed. If the object is enabled(3), the topologyChange trap is sent by the device when any of its configured ports transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. For the same port tranition, the device doesn't send the trap if this object value is disabled or other.")
es400ChassisAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400ChassisAlarmLinkChange.setStatus('mandatory')
if mibBuilder.loadTexts: es400ChassisAlarmLinkChange.setDescription("This object determine to send a trap or not when the link was changed. If the object is enabled(3), the Link Change trap is sent by the device when any of its ports link change. The device doesn't send the trap if this object value is disabled or other.")
es400PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 1), )
if mibBuilder.loadTexts: es400PortInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortInfoTable.setDescription('A table that contains information about every port.')
es400PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 1, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400PortInfoIndex"))
if mibBuilder.loadTexts: es400PortInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortInfoEntry.setDescription('A list of information for each port of the device.')
es400PortInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortInfoIndex.setDescription('This object indicates switch port number.(1..Max port number)')
es400PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("portType-UTP", 2), ("portType-AUI", 3), ("portType-Fiber", 4), ("portType-BNC", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortInfoType.setDescription('This object indicates the connector type of this port.')
es400PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortInfoLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortInfoLinkStatus.setDescription('This object indicates the port link status.')
es400PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("half-10Mbps", 2), ("full-10Mbps", 3), ("half-100Mbps", 4), ("full-100Mbps", 5), ("half-1Gigabps", 6), ("full-1Gigabps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortInfoNwayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortInfoNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
es400PortInfoFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("flowctrl-disabled", 2), ("flowctrl-enabled", 3), ("backpressure-disabled", 4), ("backpressure-enabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortInfoFlowCtrlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortInfoFlowCtrlStatus.setDescription('This object indicates the port flow control status.')
es400PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2), )
if mibBuilder.loadTexts: es400PortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigTable.setDescription('A table that contains control information about every port.')
es400PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400PortConfigIndex"))
if mibBuilder.loadTexts: es400PortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigEntry.setDescription('A list of control information for each port of the device.')
es400PortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigIndex.setDescription('This object indicates the device port number.(1..Max port number)')
es400PortConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigAdminState.setDescription('This object decide the port enabled or disabled.')
es400PortConfigLinkStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigLinkStatusAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigLinkStatusAlarmState.setDescription('Depending on this object to determine to send a trap or not when link status changes .')
es400PortConfigNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigNwayState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigNwayState.setDescription('Chose the port speed, duplex mode, and N-Way function mode.')
es400PortConfigFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigFlowCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigFlowCtrlState.setDescription('Set IEEE 802.3x compliant flow control function as enabled or disabled. And IEEE 802.3x compliant flow control function work only when the port is in full duplex mode.If the port is set Auto-negotiation enabled, the object stands for flow control capability. The results should be referred to es400PortInfoFlowCtrlStatus object. If the port is in force mode, this objects is simply used to set the flow control state (on/off). In force mode, if you change it from enabled to disabled state, it will work after next system restart. But the flow control changing from disabled to enabled state, it will immediately work.')
es400PortConfigBackPressState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigBackPressState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigBackPressState.setDescription('Depending on this object determine to enable or disable the backpressure function when the port is working in half duplex mode.')
es400PortConfigLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigLockState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigLockState.setDescription("The state of this entry. When the es400ChassisConfigTableLockState object is enabled, the state is not changed. The meanings of the values are: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - Port lock funtion disable. enable(3) - Locking a port. Once the port is locked, it will not learn new SA addresses, and drop unknown/moved-SA packets forwarding to/from such ports. This is a way to prevent undesired traffic from being received or transmmited on the port. Note that locking a port doesn't lock the MAC address entries associated with the locked port, i.e. the existing address entries of the locked port will be age out even though it is locked.")
es400PortConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("default", 2), ("force-low-priority", 3), ("force-high-priority", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigPriority.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigPriority.setDescription('The priority queueing for packets received on this port, except for BPDU/IGMP packets and packets with unknown unicast destination address. IGMP and BPDU packets are always routed with high priority; packets with unknown unicast destination addresses are always routed with low priority. Other packets follow the rules below: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. default(2) - A packet is normally classified as low priority ,unless at least one of the following is true: .The packet contained a TAG (per 802.1Q definition) with the priority greater or equal to 4. .The address-table entry for the destination address had Pd=HIGH. force-low_priority(3) - A packet is normally classified as low priority. force-high_priority(4) - A packet is normally classified as high priority.')
es400PortConfigStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigStpState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigStpState.setDescription("The state of STP(spanning tree algorithm) operation on this port. That's meaning the port whether add in the STP. The value enabled(3) indicates that STP is enabled on this port, as long as es400ChassisConfigStpState is also enabled for this device.When disabled(2) but es400ChassisConfigStpState is still enabled for the device, STP is disabled on this port : any BPDU packets received will be discarded and no BPDU packets will be propagated from the port.When the device is in 802.1Q Vlan mode, this object will be enabled and cannot be disabled.")
es400PortConfigHOLState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigHOLState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigHOLState.setDescription("The object provides a way to prevent HOL (Head Of Line) blocking between ports. HOL protection may prevent forwarding a packet to a blocking port.The idea relies on the assumption that it is better to discard packets destined to blocking ports, then to let them consume more and more buffers in the input-port's Rx-counters because eventually these input ports may become totally blocked. The value enabled(3) indicates that HOL function is enabled on this port, as long as es400ChassisConfigHOLState is also enabled for this device. When disabled(2) but es400ChassisConfigHOLState is still enabled for the device, HOL function is disabled on this port. The meanings of the values are: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - HOL function disable. enabled(3) - HOL function enable.")
es400PortConfigBroadcastStormThr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigBroadcastStormThr.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigBroadcastStormThr.setDescription("This object contains the setting of the broadcast storm threshold control on each port. The threshold value is represented by the percentage of the port's total bandwidth used by broadcast traffic. The broadcast storm control function is enabled/disabled by es400PortConfigBroadcastStormCtrl object. When broadcast storm control function is enabled, if broadcast traffic for a port rises above the threshold, the port will be blocked and a trap is sent to management user. When the broadcast storm traffic falls below the threshold, the blocked port will forward packets again and a trap is sent to management user too. The maximum value is 20")
es400PortConfigBroadcastStormCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortConfigBroadcastStormCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigBroadcastStormCtrl.setDescription('This object indicates whether to enable the broadcast storm control. Refer to es400PortConfigBroadcastStormThr for details. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - disable the broadcast storm control function . enabled(3) - enable the broadcast storm control function .')
es400PortConfigCleanAllStatisticCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 2, 1, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: es400PortConfigCleanAllStatisticCounter.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortConfigCleanAllStatisticCounter.setDescription("Setting this object will reset current device's all statistic counters.")
es400PortStatTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3), )
if mibBuilder.loadTexts: es400PortStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatTable.setDescription('A list of port statistic Counter entries.')
es400PortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400PortStatIndex"))
if mibBuilder.loadTexts: es400PortStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatEntry.setDescription('This entry include all the port statistic Counter which support by the device, like Bytes received, Bytes Sent ...')
es400PortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatIndex.setDescription('This object indicates the device port number.(1..Max port number)')
es400PortStatByteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatByteRx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatByteRx.setDescription('es400ChassisConfigCounterMode = 2(switched-frames):This counter is incre- mented once for every data octet of good packets(unicast + multi- cast + broadcast) received. es400ChassisConfigCounterMode = 3(all-frames):This counter is incremented once for every data octet of good packets(unicast + multicast + broadcast packets) and for local and dropped packets.')
es400PortStatByteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatByteTx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatByteTx.setDescription('This counter is incremented once for every data octet of a trans- mitted good packet.')
es400PortStatFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFrameRx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFrameRx.setDescription('es400ChassisConfigCounterMode = 2(switched-frames):This counter is incre- mented once for every good packet(unicast + multicast + broadcast ) received. es400ChassisConfigCounterMode = 3(all-frames):This counter is incremented once for every good packet(unicast + multicast + broadcast packets) and for local and dropped packets received.')
es400PortStatFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFrameTx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFrameTx.setDescription('This counter is incremented once for every transmitted good packet.')
es400PortStatTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatTotalBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatTotalBytesRx.setDescription('This counter is incremented once for every data octet of all received packets. This include data octets of rejected and local packets which are not forwarded to the switching core for trans- mission. This counter should reflect all the data octets received on the line. Note: A nibble is not counted as a whole byte.')
es400PortStatTotalFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatTotalFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatTotalFramesRx.setDescription('This counter is incremented once for every received packets. This include rejected and local packets which are not forwarded to the switching core for transmission. This counter should reflect all packets received on the line.')
es400PortStatBroadcastFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatBroadcastFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatBroadcastFramesRx.setDescription('es400ChassisConfigCounterMode = 2(switched-frames):This counter is incre- mented once for every good broadcast packet received. es400ChassisConfigCounterMode = 3(all-frames):This counter is incremented once for every good broadcast packet received and for local and dropped broadcast packets.')
es400PortStatMulticastFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatMulticastFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatMulticastFramesRx.setDescription('es400ChassisConfigCounterMode = 2(switched-frames):This counter is incre- mented once for every good multicast packet received. es400ChassisConfigCounterMode = 3(all-frames):This counter is incremented once for every good multicast packet received and for local and dropped multicast packets. This counter does not include broad- cast packets.')
es400PortStatCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatCRCError.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatCRCError.setDescription('This counter is incremented once for every received packet which meets all the following conditions: 1.Packet data length is between 64 and 1518 bytes inclusive. 2.Packet has invalid CRC. 3.Collision event , late collision event and receive error event have not been detected.')
es400PortStatOversizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatOversizeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatOversizeFrames.setDescription('The number of good frames with length more than 1518 bytes.')
es400PortStatFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFragments.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFragments.setDescription('This counter is incremented once for every received packet which meets all the following conditions: 1.Packet data length is less than 64 bytes or packet withourt SFD and is less than 64 bytes in length. 2.Packet has invalid CRC. 3.Collision event , late collision event and receive error event have not been detected.')
es400PortStatJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatJabber.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatJabber.setDescription('The number of frames with length more than 1518 bytes and with CRC error or misaligned.')
es400PortStatCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatCollision.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatCollision.setDescription('The number of Collisions')
es400PortStatLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatLateCollision.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatLateCollision.setDescription('The number of Late Collision(collision occurring later than 576th transmitted bit).')
es400PortStatFrames_64_bytes = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 16), Counter32()).setLabel("es400PortStatFrames-64-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFrames_64_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFrames_64_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 64 bytes. This counter includes reject- ed received and transmitted packets.')
es400PortStatFrames_65_127_bytes = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 17), Counter32()).setLabel("es400PortStatFrames-65-127-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFrames_65_127_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFrames_65_127_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 65 to 127 bytes. This counter includes rejected received and transmitted packets.')
es400PortStatFrames_128_255_bytes = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 18), Counter32()).setLabel("es400PortStatFrames-128-255-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFrames_128_255_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFrames_128_255_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 128 to 255 bytes. This counter includes rejected received and transmitted packets.')
es400PortStatFrames_256_511_bytes = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 19), Counter32()).setLabel("es400PortStatFrames-256-511-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFrames_256_511_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFrames_256_511_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 256 to 511 bytes. This counter includes rejected received and transmitted packets.')
es400PortStatFrames_512_1023_bytes = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 20), Counter32()).setLabel("es400PortStatFrames-512-1023-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFrames_512_1023_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFrames_512_1023_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 512 to 1023 bytes. This counter includ- es rejected received and transmitted packets.')
es400PortStatFrames_1024_1536_bytes = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 21), Counter32()).setLabel("es400PortStatFrames-1024-1536-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFrames_1024_1536_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFrames_1024_1536_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 1024 to 1536 bytes. This counter includ- es rejected received and transmitted packets.')
es400PortStatFramesDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatFramesDroppedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatFramesDroppedFrames.setDescription('This counter is incremented once for every received dropped pack- et.')
es400PortStatMulticastFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatMulticastFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatMulticastFramesTx.setDescription('The number of multicast frames sent. This counter does not include broadcast packets.')
es400PortStatBroadcastFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatBroadcastFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatBroadcastFramesTx.setDescription('The number of broadcast frames sent.')
es400PortStatUndersizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 3, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortStatUndersizeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortStatUndersizeFrames.setDescription('This counter is incremented once for every received packet which meets all the following conditions: 1.Packet data length is less than 64 bytes. 2.Packet has valid CRC. 3.Collision event , late collision event and receive error event have not been detected.')
es400FDbStaticTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 1), )
if mibBuilder.loadTexts: es400FDbStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbStaticTable.setDescription('Like typical legacy bridge devices, FDB table records the mapping of Source MAC Address and its associated source port, and forward incoming packets to its destination port according to the Destination MAC Address of the packet as well as the MAC-port pair entries of the FDB table. Note that the priority of FDB table entries is lower than Filtering Table, i.e. if there is a table hash collision between the entries of FDB Table and Filtering Table inside the switch H/W address table, then Filtering Table entry overwrite the colliding entry of FDB Table. See es400FDbFilterTable description also.')
es400FDbStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 1, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400FdbStaticVid"), (0, "INTEL-ES400-MIB", "es400FDbStaticAddressIndex"))
if mibBuilder.loadTexts: es400FDbStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbStaticEntry.setDescription('A list of information specifies which ports the frames with specific destination MAC address to go.')
es400FdbStaticVid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400FdbStaticVid.setStatus('mandatory')
if mibBuilder.loadTexts: es400FdbStaticVid.setDescription('This object indicates the VLAN-ID. If the es400VlanInfoStatus is port-base mode , the object ranges from 1 to 12. If VLAN is in mac-based mode or disabled, the object indicates the default VLAN-ID (0).')
es400FDbStaticAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400FDbStaticAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbStaticAddressIndex.setDescription("The destination MAC address in a frame to which this entry's forwarding information applies. This object can take the value of an unicast address or the multicast address.")
es400FDbStaticPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400FDbStaticPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbStaticPortMap.setDescription("The set of ports to which frames received from a specific port and destined for a specific MAC address, are allowed to be forwarded. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'.(Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.)")
es400FDbStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400FDbStaticState.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbStaticState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
es400FDbStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("apply", 2), ("not-apply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400FDbStaticStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbStaticStatus.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. apply(2) - this entry is currently in use and reside in the table. not-apply(3) - this entry is reside in the table but currently not in use due to conflict with filter table.')
es400FDbFilterTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 2), )
if mibBuilder.loadTexts: es400FDbFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbFilterTable.setDescription("A table which contains the filtering information of the unicast/multicast entries. This table is used by the transparent switching function in determining how to filter the received frames. The Filtering Table entries' priority overrides Static FDB Table as well as IGMP table entries, say, if there is a hash table entry collision between Filtering Table and Static FDB Table setting in the switch device's H/W address table, then Filter Table entry setting overwrites the colliding entry in Static FDB Table. See es400FDbStaticTable description also.")
es400FDbFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 2, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400FdbFilterVid"), (0, "INTEL-ES400-MIB", "es400FDbFilterAddressIndex"))
if mibBuilder.loadTexts: es400FDbFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbFilterEntry.setDescription('A list of information about a specific unicast/multicast MAC address for which the switch has filtering information.')
es400FdbFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400FdbFilterVid.setStatus('mandatory')
if mibBuilder.loadTexts: es400FdbFilterVid.setDescription('This object indicates the VLAN-ID. If the es400VlanInfoStatus is port-base mode , the object ranges from 1 to 12. If VLAN is in mac-based mode or disabled, the object indicates the default VLAN-ID (0).')
es400FDbFilterAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400FDbFilterAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbFilterAddressIndex.setDescription('This object indicates a unicast/multicast MAC address for which the bridge has filtering information.')
es400FDbFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dst-src-addr", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400FDbFilterState.setStatus('mandatory')
if mibBuilder.loadTexts: es400FDbFilterState.setDescription("This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. dst-src-addr(2) - recieved frames's destination address or source address are currently used to be filtered as it meets with the MAC address entry of the table. invalid(3) - writing this value to the object, and then the corresponding entry will be removed from the table.")
portPartition = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 17) + (0,1)).setObjects(("INTEL-ES400-MIB", "es400PortInfoIndex"))
if mibBuilder.loadTexts: portPartition.setDescription('The trap is sent whenever the port state enter the Partion mode when more than 61 collisions occur while trasmitting.')
linkChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 17) + (0,2)).setObjects(("INTEL-ES400-MIB", "es400PortInfoIndex"))
if mibBuilder.loadTexts: linkChangeEvent.setDescription('The trap is sent whenever the link state of a port changes from link up to link down or from link down to link up')
broadcastRisingStorm = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 17) + (0,3)).setObjects(("INTEL-ES400-MIB", "es400PortInfoIndex"))
if mibBuilder.loadTexts: broadcastRisingStorm.setDescription('The trap indicates that broadcast higher rising threshold . This trap including the port ID')
broadcastFallingStorm = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 17) + (0,4)).setObjects(("INTEL-ES400-MIB", "es400PortInfoIndex"))
if mibBuilder.loadTexts: broadcastFallingStorm.setDescription('The trap indicates that broadcast higher falling threshold . This trap including the port ID')
es400LinkAggrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 5, 1), )
if mibBuilder.loadTexts: es400LinkAggrTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400LinkAggrTable.setDescription('This table specifys which ports group a set of ports(up to 8) into a single logical link.')
es400LinkAggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 5, 1, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400LinkAggrIndex"))
if mibBuilder.loadTexts: es400LinkAggrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400LinkAggrEntry.setDescription('A list of information specifies which ports group a set of ports(up to 8) into a single logical link.')
es400LinkAggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400LinkAggrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400LinkAggrIndex.setDescription('The index of logical port trunk.The device max support 4 trunk groups. The trunk group number depend on the total number of device ports and the existence of module.')
es400LinkAggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400LinkAggrName.setStatus('mandatory')
if mibBuilder.loadTexts: es400LinkAggrName.setDescription('The name of logical port trunk.')
es400LinkAggrMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400LinkAggrMasterPort.setStatus('mandatory')
if mibBuilder.loadTexts: es400LinkAggrMasterPort.setDescription('The object indicates the master port number of the port trunk entry.The first port of the trunk is implicitly configured to be the master logical port.When using Port Trunk, you can not configure the other ports of the group except the master port. Their configuration must be same as the master port (e.g. speed, duplex, enabled/disabled, flow control, and so on).')
es400LinkAggrMemberNum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400LinkAggrMemberNum.setStatus('mandatory')
if mibBuilder.loadTexts: es400LinkAggrMemberNum.setDescription('Indicate how many number of ports is included in this Trunk. If the trunk is located at expansion module (i.e. es400LinkAggrIndex equals to 4(24 ports) or 3(16 ports)) and the module is 100-FX, the maximum number of ports in the trunk is 2. The maximum number of ports is 8 for other trunks.')
es400LinkAggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400LinkAggrState.setStatus('mandatory')
if mibBuilder.loadTexts: es400LinkAggrState.setDescription('This object decide the port trunk enabled or disabled.')
es400PortMirrorCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 6, 1), )
if mibBuilder.loadTexts: es400PortMirrorCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortMirrorCtrlTable.setDescription("A list of port snooping entries.Port snooping function provide an easy way to monitor traffic on any port. In this way any good packets appears on the source mirror port also shows up on the target mirror port and doesn't to reconstruct the LAN.")
es400PortMirrorCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 6, 1, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400PortMirrorCtrlIndex"))
if mibBuilder.loadTexts: es400PortMirrorCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortMirrorCtrlEntry.setDescription('A list of information provide an easy way to monitor traffic on any port. The use can bring a fancy network monitor attaching to any target mirror port and set the port to be monitored as source mirror port. ')
es400PortMirrorCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortMirrorCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortMirrorCtrlIndex.setDescription('This object indicates the port snooping entry number.There is just only one now.')
es400PortMirrorCtrlSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortMirrorCtrlSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortMirrorCtrlSourcePort.setDescription('This object indicates switch which port will be mirrored.')
es400PortMirrorCtrlTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortMirrorCtrlTargetPort.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortMirrorCtrlTargetPort.setDescription('This object indicates switch which port will sniff another port. A aggregate port member cannot be configured as a target mirroring port.')
es400PortMirrorCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortMirrorCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortMirrorCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - Mirror funtion disable. enable(3) - Mirror funtion enable and mirror received or transmit packet by mirror source port.')
es400IgmpSnoopConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 1), )
if mibBuilder.loadTexts: es400IgmpSnoopConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopConfigTable.setDescription("The table controls the Vlan's IGMP function. Its scale depends on current VLAN state (es400VlanInfoStatus). If VLAN is disabled or in Mac-Base mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries can be up to 12, with index range from 1 to 12. When in 802.1q mode, this entry table is only valid in static registration entries.")
es400IgmpSnoopConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 1, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400IgmpSnoopConfigIndex"))
if mibBuilder.loadTexts: es400IgmpSnoopConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopConfigEntry.setDescription('The entry in IGMP control table (es400IgmpSnoopConfigTable). The entry is effective only when IGMP capture switch (es400Chassis- ConfigIGMPCaptureState) is enabled.')
es400IgmpSnoopConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopConfigIndex.setDescription('This object indicates the IGMP control entry number.Its scale depends on current VLAN state (es400VlanInfoStatus). If VLAN is disabled or in Mac-Base mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries is 12, with index range from 1 to 12.')
es400IgmpSnoopConfigVid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400IgmpSnoopConfigVid.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopConfigVid.setDescription("This object indicates the IGMP control entry's VLAN id. If VLAN is disabled or in Mac-Base mode, the Vid is always 0 and cannot be changed by management users. If VLAN is in Port-Base mode, the Vid is arranged from 1 to 12 , fixed form. If VLAN is in 802.1q mode, the Vid setting can vary from 1 to 4094 by management user, and the Vid in each entry must be unique in the IGMP Control Table.")
es400IgmpSnoopConfigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400IgmpSnoopConfigTimer.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopConfigTimer.setDescription('The timer value for sending IGMP query packet when none was sent by the multicast router in the LAN. The timer works in per-VLAN basis. Our device will be activated to send the query message if the timer is expired. Please reference RFC2236-1997. And it recommends a default of 125 seconds. The timeout value must be at least 30 seconds.')
es400IgmpSnoopConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400IgmpSnoopConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopConfigState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - IGMP funtion is disabled for this entry. enable(3) - IGMP funtion is enabled for this entry.')
es400IgmpSnoopInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 2), )
if mibBuilder.loadTexts: es400IgmpSnoopInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopInfoTable.setDescription('The table contains the number current IGMP query packets which is captured by this device, as well as the IGMP query packets sent by the device.')
es400IgmpSnoopInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 2, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400IgmpSnoopInfoIndex"))
if mibBuilder.loadTexts: es400IgmpSnoopInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopInfoEntry.setDescription('Information about current IGMP query information, provided that es400ChassisConfigIGMPCaptureState and es400IgmpSnoopConfigState of associated VLAN entry are all enabled.')
es400IgmpSnoopInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopInfoIndex.setDescription('This object indicates the IGMP query information entry number. It could be up to 12 entries, depending on current number of VLAN entries.')
es400IgmpSnoopInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopInfoVid.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopInfoVid.setDescription('This object indicates the Vid of associated IGMP info table entry. It follows es400IgmpSnoopConfigVid in the associated entry of IGMP control table (es400IgmpSnoopConfigTable).')
es400IgmpSnoopInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopInfoQueryCount.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopInfoQueryCount.setDescription('This object indicates the number of query packets received since the IGMP function enabled, in per-VLAN basis.')
es400IgmpSnoopInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopInfoTxQueryCount.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopInfoTxQueryCount.setDescription('This object indicates the send count of IGMP query messages, in per-VLAN basis. In case of IGMP timer expiration, the switch sends IGMP query packets to related VLAN member ports and increment this object by 1.')
es400IgmpSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 3), )
if mibBuilder.loadTexts: es400IgmpSnoopTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopTable.setDescription('The table containing current IGMP information which captured by this device, provided that es400ChassisConfigIGMPCaptureState and es400IgmpSnoopConfigState of associated VLAN entry are all enabled. Note that the priority of IGMP table entries is lower than Filtering Table, i.e. if there is a table hash collision between the entries of IGMP Table and Filtering Table inside the switch H/W address table, then Filtering Table entry overwrite the colliding entry of IGMP Table. See es400FDbFilterTable description also.')
es400IgmpSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 3, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400IgmpSnoopVid"), (0, "INTEL-ES400-MIB", "es400IgmpSnoopGroupIpAddr"))
if mibBuilder.loadTexts: es400IgmpSnoopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopEntry.setDescription('Information about current IGMP information which captured by this device , provided that es400ChassisConfigIGMPCaptureState and es400IgmpSnoopConfigState of associated VLAN entry are all enabled.')
es400IgmpSnoopVid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopVid.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopVid.setDescription('This object indicates the Vid of individual IGMP table entry. It shows the Vid of IGMP report information captured on network.')
es400IgmpSnoopGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopGroupIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopGroupIpAddr.setDescription('This object is identify group ip address which is captured from IGMP packet, in per-Vlan basis.')
es400IgmpSnoopMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopMacAddr.setDescription('This object is identify mac address which is corresponding to es400IgmpSnoopGroupIpAddr, in per-Vlan basis..')
es400IgmpSnoopPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 3, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopPortMap.setDescription('This object indicates which ports are belong to the same multicast group, in per-Vlan basis. Each multicast group has a octect string to indicate with port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.')
es400IgmpSnoopReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400IgmpSnoopReportCount.setStatus('mandatory')
if mibBuilder.loadTexts: es400IgmpSnoopReportCount.setDescription('This object indicate how much report packet was receive by our device corresponding with this entry from IGMP function enabled, in per-Vlan basis.')
es400VlanConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("mac-base", 3), ("port-base", 4), ("ieee8021q", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400VlanConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: es400VlanConfigMode.setDescription('This object control which Vlan function will be enable (or disable) when the switch hub restart at the startup (power on) or warm start.')
es400VlanInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("mac-base", 3), ("port-base", 4), ("ieee8021q", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400VlanInfoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es400VlanInfoStatus.setDescription('This object indicate which Vlan function be enable (or disable) in mandatoryly stage. There are no effect when change es400VlanConfigMode vlaue in the system running.')
es400VlanSnmpPortInfo = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 3), VlanIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400VlanSnmpPortInfo.setStatus('mandatory')
if mibBuilder.loadTexts: es400VlanSnmpPortInfo.setDescription('This object controls which Vlan is binded with system snmp port. Its scale depends on current VLAN state (es400VlanInfoStatus). If VLAN is disabled or in Mac-Base mode, the Vid is always 0 and cannot be changed by management users. If VLAN is in 802.1q mode, the Vid setting can vary from 1 to 4094 by management user. If VLAN is in Port-Base mode, the Vid setting can vary from 1 to 12 by management user.')
es400MacVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4))
es400MacVlanTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400MacVlanTotalNum.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanTotalNum.setDescription('The total number of Mac base Vlan within this switch hub.')
es400MacVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 2), )
if mibBuilder.loadTexts: es400MacVlanConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanConfigTable.setDescription('A table that contains MAC-Based VLAN list entries for the switch. Management users can create a MAC-Based VLAN entry by adding a new list (es400MacVlanConfigEntry) in this table.')
es400MacVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 2, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400MacVlanDesc"))
if mibBuilder.loadTexts: es400MacVlanConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanConfigEntry.setDescription('A list of information about a specific MAC-Based VLAN configuration in es400MacVlanConfigTable.')
es400MacVlanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400MacVlanDesc.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanDesc.setDescription('A textual description of the Mac Base Vlan.')
es400MacVlanMacMemberNum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400MacVlanMacMemberNum.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanMacMemberNum.setDescription('This object indicates the total number of MAC addresses contained in the VLAN entry.')
es400MacVlanCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400MacVlanCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanCtrlState.setDescription('This object indicates the MacBase Vlan state. Writing disabled value to the object will remove the corresponding entry from the table.')
es400MacVlanAddrTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400MacVlanAddrTotalNum.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanAddrTotalNum.setDescription('The total number of Mac base Vlan address entry within this switch hub.')
es400MacVlanAddrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 4), )
if mibBuilder.loadTexts: es400MacVlanAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanAddrTable.setDescription('A table that contains information about unicast entries for which the switch has forwarding and/or filtering information. This information is used by the transparent switching function in determining how to propagate a received frame. Note that the priority of MacVlanAddr table entries is lowest than Filtering Table and FDB Table, i.e. if there is a table hash collision between the entries of MacVlanAddr Table and Filtering Table inside the switch H/W address table, then Filtering Table entry overwrite the colliding entry of MacVlanAddr Table. This state is same of FDB table. See es400FDbFilterTable and es400FDbStaticTable description also.')
es400MacVlanAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 4, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400MacVlanAddress"))
if mibBuilder.loadTexts: es400MacVlanAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanAddrEntry.setDescription('A list of information about a specific unicast MAC address for which the switch has some forwarding and/or filtering information.')
es400MacVlanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400MacVlanAddress.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanAddress.setDescription('This object indictaes a unicast MAC address for which the bridge has forwarding and/or filtering information.')
es400MacVlanAddrDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400MacVlanAddrDesc.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanAddrDesc.setDescription("This object references to the MAC-Base VLAN description (es400MacVlanDesc) which the MAC address belong to. You must update the VLAN description with an VLAN description which is already exist on MAC-Base VLAN control table. If the VLAN description on the MAC-Base VLAN control table doesn't exist , the corresponding entry will be removed from the table.")
es400MacVlanAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400MacVlanAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanAddrState.setDescription('This object indicates the MacBase Vlan Address entry state. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
es400MacVlanAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("apply", 2), ("not-apply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400MacVlanAddrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: es400MacVlanAddrStatus.setDescription('This object indicates the MacBase Vlan Address entry state. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. apply(2) - this entry is currently in use and reside in the table. not-apply(3) - this entry is reside in the table but currently not in use due to conflict with filter table.')
es400PortVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5))
es400PortVlanTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortVlanTotalNum.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanTotalNum.setDescription('The total number of Port-Base Vlan which is in enabled state within this switch hub.')
es400PortVlanDefaultVlanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 2), )
if mibBuilder.loadTexts: es400PortVlanDefaultVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanDefaultVlanTable.setDescription('A table that contains default Port-Based VLAN list entries for the switch. The entry (Vid = 1,i.e. es400PortVlanDefaultPvid = 1) is defalut Port-Based VLAN , maintained by system.')
es400PortVlanDefaultVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 2, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400PortVlanDefaultPvid"))
if mibBuilder.loadTexts: es400PortVlanDefaultVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanDefaultVlanEntry.setDescription('A list of default Port-Based VLAN information in es400PortVlanDefaultVlanTable.')
es400PortVlanDefaultPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortVlanDefaultPvid.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanDefaultPvid.setDescription('This object indicates the default Port-Base Vlan ID. It occupies only 1 entry in VLAN table, with VID=1.')
es400PortVlanDefaultDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortVlanDefaultDesc.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanDefaultDesc.setDescription('A textual description of the Port-Base Vlan.')
es400PortVlanDefaultPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortVlanDefaultPortList.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanDefaultPortList.setDescription('This object indicates the port member set of the specified Vlan. Each Vlan has a octect string to indicate the port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.')
es400PortVlanDefaultPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortVlanDefaultPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanDefaultPortNumber.setDescription('This object indicates the number of ports of the entry.')
es400PortVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 3), )
if mibBuilder.loadTexts: es400PortVlanConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanConfigTable.setDescription("A table that contains Port-Based VLAN list entries for the switch. The device can't support port overlapping in Port-Based VLAN.")
es400PortVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 3, 1), ).setIndexNames((0, "INTEL-ES400-MIB", "es400PortVlanConfigPvid"))
if mibBuilder.loadTexts: es400PortVlanConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanConfigEntry.setDescription('A list of information about a specific Port-Based VLAN configuration in es400PortVlanConfigTable.')
es400PortVlanConfigPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortVlanConfigPvid.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanConfigPvid.setDescription('This object indicates the Port-Base Vlan ID. There are up to 11 entries for current product now. The object range varies from 2 to 12.')
es400PortVlanConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortVlanConfigDesc.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanConfigDesc.setDescription('A textual description of the Port-Base Vlan. It cannot be a null string. And each description must be unique in the table.')
es400PortVlanConfigPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 3, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortVlanConfigPortList.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanConfigPortList.setDescription('This object indicates which ports are belong to the Vlan. Each Vlan has a octect string to indicate with port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.')
es400PortVlanConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es400PortVlanConfigPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanConfigPortNumber.setDescription('This object indicates the number of ports of the entry.')
es400PortVlanConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 17, 8, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es400PortVlanConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: es400PortVlanConfigState.setDescription(' This object indicates the Port-Base Vlan state. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - writing this value to the object, and then the corresponding entry will be removed from the table. enabled(3) - this entry is reside in the table.')
mibBuilder.exportSymbols("INTEL-ES400-MIB", es400PortConfigEntry=es400PortConfigEntry, es400IgmpSnoopGroupIpAddr=es400IgmpSnoopGroupIpAddr, es400AgentFirmwareUpdateCtrl=es400AgentFirmwareUpdateCtrl, es400PortConfigBackPressState=es400PortConfigBackPressState, es400PortStatMulticastFramesRx=es400PortStatMulticastFramesRx, es400ChassisInfoConsoleInUse=es400ChassisInfoConsoleInUse, es400PortConfigFlowCtrlState=es400PortConfigFlowCtrlState, es400LinkAggrIndex=es400LinkAggrIndex, es400MacVlanTotalNum=es400MacVlanTotalNum, es400FDbStaticTable=es400FDbStaticTable, es400IgmpSnoopInfoVid=es400IgmpSnoopInfoVid, es400PortConfigLinkStatusAlarmState=es400PortConfigLinkStatusAlarmState, es400ChassisInfoFrontPanelLedStatus=es400ChassisInfoFrontPanelLedStatus, es400PortConfigStpState=es400PortConfigStpState, es400PortStatBroadcastFramesTx=es400PortStatBroadcastFramesTx, es400FDbFilterState=es400FDbFilterState, es400IgmpSnoopTable=es400IgmpSnoopTable, es400PortStatByteTx=es400PortStatByteTx, es400IgmpSnoopReportCount=es400IgmpSnoopReportCount, es400ChassisConfigAddrLookupModes=es400ChassisConfigAddrLookupModes, es400AgentSwUpdateCtrl=es400AgentSwUpdateCtrl, es400VlanSnmpPortInfo=es400VlanSnmpPortInfo, es400FDbStaticAddressIndex=es400FDbStaticAddressIndex, es400AgentIpIfEntry=es400AgentIpIfEntry, es400AgentIpConfig=es400AgentIpConfig, es400PortConfigAdminState=es400PortConfigAdminState, es400ChassisConfigUploadImageFileName=es400ChassisConfigUploadImageFileName, es400PortVlanConfigPortList=es400PortVlanConfigPortList, es400ChassisConfig=es400ChassisConfig, es400AgentSystemReset=es400AgentSystemReset, es400PortVlanDefaultPortList=es400PortVlanDefaultPortList, MacAddress=MacAddress, portPartition=portPartition, es400AgentIpUnauthComm=es400AgentIpUnauthComm, es400FDbFilterEntry=es400FDbFilterEntry, es400PortStatCRCError=es400PortStatCRCError, es400PortInfoFlowCtrlStatus=es400PortInfoFlowCtrlStatus, es400IgmpSnoopConfigState=es400IgmpSnoopConfigState, es400PortVlanDefaultPortNumber=es400PortVlanDefaultPortNumber, es400PortStatFrames_1024_1536_bytes=es400PortStatFrames_1024_1536_bytes, intel=intel, es400PortStatIndex=es400PortStatIndex, es400AgentMgmtProtocolCapability=es400AgentMgmtProtocolCapability, es400PortStatFrames_256_511_bytes=es400PortStatFrames_256_511_bytes, es400AgentTrapAddressComm=es400AgentTrapAddressComm, es400IgmpSnoop=es400IgmpSnoop, PortList=PortList, es400PortInfoTable=es400PortInfoTable, es400ChassisInfoSaveCfg=es400ChassisInfoSaveCfg, es400PortConfigHOLState=es400PortConfigHOLState, VlanIndex=VlanIndex, es400PortInfoType=es400PortInfoType, es400ChassisConfigHighPriorityServiceRatio=es400ChassisConfigHighPriorityServiceRatio, es400PortConfigNwayState=es400PortConfigNwayState, es400AgentMibSupportEntry=es400AgentMibSupportEntry, es400MacVlanAddrTotalNum=es400MacVlanAddrTotalNum, es400PortVlanConfigDesc=es400PortVlanConfigDesc, es400LinkAggr=es400LinkAggr, es400ChassisAlarmPartition=es400ChassisAlarmPartition, es400PortVlanConfigTable=es400PortVlanConfigTable, es400PortConfigTable=es400PortConfigTable, es400ChassisConfigPartitionModeState=es400ChassisConfigPartitionModeState, es400AgentMibSupportVersion=es400AgentMibSupportVersion, es400AgentMibSupportDescr=es400AgentMibSupportDescr, es400PortMirrorCtrlSourcePort=es400PortMirrorCtrlSourcePort, es400ChassisInfoTotalNumOfPort=es400ChassisInfoTotalNumOfPort, es400PortStatCollision=es400PortStatCollision, es400AgentRuntimeSwVersion=es400AgentRuntimeSwVersion, es400PortStatBroadcastFramesRx=es400PortStatBroadcastFramesRx, es400FDbStaticPortMap=es400FDbStaticPortMap, es400PortMirrorCtrlState=es400PortMirrorCtrlState, es400AgentIpIfDefaultRouter=es400AgentIpIfDefaultRouter, es400AgentIpNumOfIf=es400AgentIpNumOfIf, mib2ext=mib2ext, es400PortStatFrameRx=es400PortStatFrameRx, es400PortMirrorCtrlTable=es400PortMirrorCtrlTable, es400IgmpSnoopInfoQueryCount=es400IgmpSnoopInfoQueryCount, es400ChassisAlarmLinkChange=es400ChassisAlarmLinkChange, es400PortVlanConfigPvid=es400PortVlanConfigPvid, es400PortStatFrames_128_255_bytes=es400PortStatFrames_128_255_bytes, es400PortMirrorCtrlIndex=es400PortMirrorCtrlIndex, es400IgmpSnoopConfigVid=es400IgmpSnoopConfigVid, es400IgmpSnoopConfigIndex=es400IgmpSnoopConfigIndex, es400PortInfoNwayStatus=es400PortInfoNwayStatus, es400AgentIpIfNetMask=es400AgentIpIfNetMask, es400PortStatUndersizeFrames=es400PortStatUndersizeFrames, es400AgentMibSupportType=es400AgentMibSupportType, es400MacVlanCtrlState=es400MacVlanCtrlState, es400FDbStaticEntry=es400FDbStaticEntry, es400MacVlanConfigEntry=es400MacVlanConfigEntry, es400IgmpSnoopConfigTable=es400IgmpSnoopConfigTable, es400AgentIpIfMacAddr=es400AgentIpIfMacAddr, es400ChassisInfo=es400ChassisInfo, es400PortStatFramesDroppedFrames=es400PortStatFramesDroppedFrames, es400ChassisAlarmNewRoot=es400ChassisAlarmNewRoot, es400FDbFilterTable=es400FDbFilterTable, es400IgmpSnoopInfoTable=es400IgmpSnoopInfoTable, es400MacVlanAddrEntry=es400MacVlanAddrEntry, es400AgentMibSupportIndex=es400AgentMibSupportIndex, es400PortStatMulticastFramesTx=es400PortStatMulticastFramesTx, es400ChassisAlarmTopologyChange=es400ChassisAlarmTopologyChange, es400PortStatFrames_512_1023_bytes=es400PortStatFrames_512_1023_bytes, es400ChassisConfigIGMPCaptureState=es400ChassisConfigIGMPCaptureState, es400AgentTrapIndex=es400AgentTrapIndex, es400LinkAggrMasterPort=es400LinkAggrMasterPort, es400IgmpSnoopInfoEntry=es400IgmpSnoopInfoEntry, es400PortVlanDefaultVlanEntry=es400PortVlanDefaultVlanEntry, es400IgmpSnoopInfoTxQueryCount=es400IgmpSnoopInfoTxQueryCount, es400FDbStaticState=es400FDbStaticState, es400PortInfoIndex=es400PortInfoIndex, es400AgentIpIfIndex=es400AgentIpIfIndex, es400PortInfoEntry=es400PortInfoEntry, es400PortInfoLinkStatus=es400PortInfoLinkStatus, es400AgentMibSupportTable=es400AgentMibSupportTable, es400ChassisInfoNumOfPortInUse=es400ChassisInfoNumOfPortInUse, es400ChassisConfigStpState=es400ChassisConfigStpState, es400PortStatTotalBytesRx=es400PortStatTotalBytesRx, es400MacVlanAddrTable=es400MacVlanAddrTable, es400AgentOutOfBandBaudRateConfig=es400AgentOutOfBandBaudRateConfig, es400ChassisConfigSaveCfg=es400ChassisConfigSaveCfg, es400AgentInfo=es400AgentInfo, es400PortStatJabber=es400PortStatJabber, es400AgentHwRevision=es400AgentHwRevision, es400ChassisInfoSystemUpTime=es400ChassisInfoSystemUpTime, es400IgmpSnoopMacAddr=es400IgmpSnoopMacAddr, es400Chassis=es400Chassis, es400AgentPromFwVersion=es400AgentPromFwVersion, es400LinkAggrState=es400LinkAggrState, es400AgentTrapAddressEntry=es400AgentTrapAddressEntry, es400Port=es400Port, es400MacVlanAddress=es400MacVlanAddress, es400FDbFilterAddressIndex=es400FDbFilterAddressIndex, es400ChassisConfigUploadImage=es400ChassisConfigUploadImage, es400PortMirror=es400PortMirror, es400ChassisAlarm=es400ChassisAlarm, es400PortStatLateCollision=es400PortStatLateCollision, es400AgentIpIfType=es400AgentIpIfType, es400MacVlanConfigTable=es400MacVlanConfigTable, es400AgentIpLastBootServerAddr=es400AgentIpLastBootServerAddr, es400IgmpSnoopPortMap=es400IgmpSnoopPortMap, es400PortConfigLockState=es400PortConfigLockState, es400PortStatFrames_64_bytes=es400PortStatFrames_64_bytes, es400AgentTrapAddressTable=es400AgentTrapAddressTable, es400LinkAggrEntry=es400LinkAggrEntry, es400PortConfigPriority=es400PortConfigPriority, es400IgmpSnoopVid=es400IgmpSnoopVid, es400ChassisConfigTableLockState=es400ChassisConfigTableLockState, es400PortVlanTotalNum=es400PortVlanTotalNum, es400MacVlanDesc=es400MacVlanDesc, es400PortVlan=es400PortVlan, broadcastRisingStorm=broadcastRisingStorm, es400PortVlanDefaultDesc=es400PortVlanDefaultDesc, es400AgentConfig=es400AgentConfig, es400PortStatFragments=es400PortStatFragments, es400AgentBootFile=es400AgentBootFile, es400PortVlanConfigPortNumber=es400PortVlanConfigPortNumber, es400AgentSwUpdateMode=es400AgentSwUpdateMode, es400Vlan=es400Vlan, es400PortStatFrameTx=es400PortStatFrameTx, es400IgmpSnoopInfoIndex=es400IgmpSnoopInfoIndex, es400IgmpSnoopConfigEntry=es400IgmpSnoopConfigEntry, es400VlanConfigMode=es400VlanConfigMode, es400PortVlanConfigState=es400PortVlanConfigState, es400PortStatByteRx=es400PortStatByteRx, es400IgmpSnoopEntry=es400IgmpSnoopEntry, es400AgentFirmwareFile=es400AgentFirmwareFile, es400Agent=es400Agent, es400FDb=es400FDb, es400AgentIpIfTable=es400AgentIpIfTable, es400AgentIpUnauthAddr=es400AgentIpUnauthAddr, es400AgentTrapAddressIp=es400AgentTrapAddressIp, es400AgentIpBootServerAddr=es400AgentIpBootServerAddr, es400PortStatTotalFramesRx=es400PortStatTotalFramesRx, es400MacVlanAddrDesc=es400MacVlanAddrDesc, es400PortConfigBroadcastStormThr=es400PortConfigBroadcastStormThr, es400PortVlanDefaultVlanTable=es400PortVlanDefaultVlanTable, es400FdbFilterVid=es400FdbFilterVid, es400ChassisConfigHOLState=es400ChassisConfigHOLState, es400AgentRs232PortConfig=es400AgentRs232PortConfig, es400PortStatTable=es400PortStatTable, es400PortMirrorCtrlTargetPort=es400PortMirrorCtrlTargetPort, es400=es400, es400MacVlan=es400MacVlan, es400PortVlanConfigEntry=es400PortVlanConfigEntry, es400PortConfigIndex=es400PortConfigIndex, es400LinkAggrName=es400LinkAggrName, es400AgentTrapAddressStatus=es400AgentTrapAddressStatus, es400FDbStaticStatus=es400FDbStaticStatus, es400PortVlanDefaultPvid=es400PortVlanDefaultPvid, es400LinkAggrTable=es400LinkAggrTable, es400IgmpSnoopConfigTimer=es400IgmpSnoopConfigTimer, es400PortMirrorCtrlEntry=es400PortMirrorCtrlEntry, broadcastFallingStorm=broadcastFallingStorm, es400MacVlanAddrState=es400MacVlanAddrState, es400AgentIpIfAddress=es400AgentIpIfAddress, es400PortConfigBroadcastStormCtrl=es400PortConfigBroadcastStormCtrl, es400PortStatEntry=es400PortStatEntry, es400PortStatFrames_65_127_bytes=es400PortStatFrames_65_127_bytes, es400FdbStaticVid=es400FdbStaticVid, es400VlanInfoStatus=es400VlanInfoStatus, es400AgentIpGetIpFromBootpServer=es400AgentIpGetIpFromBootpServer, es400PortStatOversizeFrames=es400PortStatOversizeFrames, es400LinkAggrMemberNum=es400LinkAggrMemberNum, es400PortConfigCleanAllStatisticCounter=es400PortConfigCleanAllStatisticCounter, es400AgentIpLastIpAddr=es400AgentIpLastIpAddr, es400MacVlanAddrStatus=es400MacVlanAddrStatus, linkChangeEvent=linkChangeEvent, es400MacVlanMacMemberNum=es400MacVlanMacMemberNum)
