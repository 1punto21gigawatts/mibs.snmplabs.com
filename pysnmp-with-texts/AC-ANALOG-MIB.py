#
# PySNMP MIB module AC-ANALOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-ANALOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
acRegistrations, acBoardMibs, acProducts, acGeneric, audioCodes = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acRegistrations", "acBoardMibs", "acProducts", "acGeneric", "audioCodes")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Integer32, ModuleIdentity, Counter32, MibIdentifier, NotificationType, iso, Counter64, Gauge32, ObjectIdentity, enterprises, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "Counter32", "MibIdentifier", "NotificationType", "iso", "Counter64", "Gauge32", "ObjectIdentity", "enterprises", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention, DateAndTime, TAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "TAddress")
acAnalog = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8))
if mibBuilder.loadTexts: acAnalog.setLastUpdated('200911181414Z')
if mibBuilder.loadTexts: acAnalog.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acAnalog.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acAnalog.setDescription('')
acAnalogConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1))
acAnalogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 1))
acAnalogMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 1, 1))
acAnalogMiscCurrentDisconnectDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogMiscCurrentDisconnectDuration.setStatus('current')
if mibBuilder.loadTexts: acAnalogMiscCurrentDisconnectDuration.setDescription('Defines the current-disconnect duration (in msec). This value is used in generation and detection. Access: Offline. AC INI-Param: CurrentDisconnectDuration')
acAnalogMiscFlashHookPeriod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(25, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogMiscFlashHookPeriod.setStatus('current')
if mibBuilder.loadTexts: acAnalogMiscFlashHookPeriod.setDescription('Defines the flashhook period (in msec) for both analog and IP sides. For the analog side it defines: - The maximal hook-flash detection period (for FXS gateways). A longer signal is considered offhook / onhook event. - The hook-flash generation period (for FXO gateways). For the IP side it defines the flash-hook period that is reported to IP. The valid range is 25 to 1500. The default value is 700 msec. Note: For FXO gateways, a constant of 90 msec must be added to the required hook-flash period. For example, to generate a 450 msec hook-flash, set FlashHookPeriod to 540. . Access: Instant. AC INI-Param: FLASHHOOKPERIOD')
acAnalogMiscGroundKeyDetection = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogMiscGroundKeyDetection.setStatus('current')
if mibBuilder.loadTexts: acAnalogMiscGroundKeyDetection.setDescription('Enables/disables the analog ground key detection. 0 = Disable 1= Enable. Access: Offline. AC INI-Param: GroundKeyDetection')
acAuxiliaryFiles = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 1, 2))
acAuxiliaryFilesFxsCoefficients = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 1, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAuxiliaryFilesFxsCoefficients.setStatus('current')
if mibBuilder.loadTexts: acAuxiliaryFilesFxsCoefficients.setDescription('Defines the FXS coefficient file name. AC INI-Param: FXSCOEFFILENAME')
acAuxiliaryFilesFxoCoefficients = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 1, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAuxiliaryFilesFxoCoefficients.setStatus('current')
if mibBuilder.loadTexts: acAuxiliaryFilesFxoCoefficients.setDescription('Defines the FXO coefficient filename. Max. 47 characters. AC INI-Param: FXOCOEFFILENAME')
acAnalogFxoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2))
acAnalogFxo = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1))
acAnalogFxoFarEndDisconnectType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectType.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectType.setDescription('This parameter sets the source for the acEV_FAR_END_DISCONNECTED event (or for the relevant control protocol event). It is a bit field parameter, hence (for example) if both CPT and current disconnect are required, the parameter should be set to 5. FarDisconnect contributor: 1 = CPT 2 = PolarityReversal 4 = CurrentDisconnect 8 = Silence. Access: Offline. AC INI-Param: FARENDDISCONNECTTYPE')
acAnalogFxoCountryCoefficients = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(66, 70))).clone(namedValues=NamedValues(("europe", 66), ("unitedStates", 70)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxoCountryCoefficients.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoCountryCoefficients.setDescription('Allows the user to modify the line characteristic (AC and DC) according to country. Access: Offline. AC INI-Param: CountryCoefficients')
acAnalogFxoDCRemover = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxoDCRemover.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoDCRemover.setDescription('Determines whether to enable the analog DC remover in the DAA. One of the following values: 0 = DC remover is disabled 1 = DC remover is enabled. Access: Offline. AC INI-Param: EnableAnalogDCRemover')
acAnalogFxoFarEndDisconnectToneTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 21), )
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneTable.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneTable.setDescription('')
acAnalogFxoFarEndDisconnectToneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 21, 1), ).setIndexNames((0, "AC-ANALOG-MIB", "acAnalogFxoFarEndDisconnectToneIndex"))
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneEntry.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneEntry.setDescription('')
acAnalogFxoFarEndDisconnectToneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneRowStatus.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneRowStatus.setDescription('Far End Disconnect table row-status. AC INI-Param: N/A')
acAnalogFxoFarEndDisconnectToneAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneAction.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneAction.setDescription('Far End Disconnect table action. AC INI-Param: N/A')
acAnalogFxoFarEndDisconnectToneActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneActionResult.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneActionResult.setDescription('Far End Disconnect table result. AC INI-Param: N/A')
acAnalogFxoFarEndDisconnectToneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 21, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneIndex.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneIndex.setDescription('Index for table use. AC INI-Param: N/A')
acAnalogFxoFarEndDisconnectToneType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 2, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 298, 299))).clone(namedValues=NamedValues(("acNullTone", 0), ("acDialTone", 1), ("acRingingTone", 2), ("acBusyTone", 3), ("acCongestionTone", 4), ("acSpecialInfoTone", 5), ("acWarningTone", 6), ("acReorderTone", 7), ("acConfirmationTone", 8), ("acWaitingTone", 9), ("acCallProgressCo1Tone", 10), ("acCallProgressCo2Tone", 11), ("acOldMilliwattTone", 12), ("acNewMilliwattTone", 13), ("acMessageWaitingIndicator", 14), ("acStutterDialTone", 15), ("acStutterOffHookWarningTone", 16), ("acWaitingTone1", 17), ("acComfortTone", 18), ("acNAKTone", 19), ("acVacantNumberTone", 20), ("acSpecialConditionTone", 21), ("acDialTone2", 22), ("acOnHoldTone", 23), ("acCallTransferDialTone", 24), ("acCallForwardTone", 25), ("acCreditCardServiceTone", 26), ("acSpecialRecallDialTone", 27), ("acAlertingTone", 28), ("acNetworkCongestionTone", 29), ("acWaitingTone2", 30), ("acWaitingTone3", 31), ("acWaitingTone4", 32), ("acConfEnterTone", 33), ("acConfExitTone", 34), ("acConfLockTone", 35), ("acConfUnlockTone", 36), ("acConfTimeLimitTone", 37), ("acPayphoneRecognitionTone", 38), ("acCallerWaitingTone", 39), ("acCNGFaxTone", 40), ("acPrecConfNotifyType", 41), ("acPresConfNotifyType", 42), ("acPrecPreemptType", 43), ("acPrecRTType", 44), ("acR15reqOfANItone", 45), ("acCo1Tone", 200), ("acCo2Tone", 201), ("acPlayRecordBeepTone", 202), ("acTrunkTestingTestProgressTone", 203), ("acTrunkTestingTestTone", 204), ("acTrunkTestingGuardTone", 205), ("acFSKTrunkTestingTone", 206), ("acGeneralTrunkTestingTone1", 207), ("acGeneralTrunkTestingTone2", 208), ("acGeneralTrunkTestingTone3", 209), ("acSpecialInfoToneFirst", 210), ("acSpecialInfoToneSecond", 211), ("acSpecialInfoToneThird", 212), ("acTTYTone", 213), ("acTT904ContinuityTone", 214), ("acTTMilliwattLossMeasureTone", 215), ("acCarrierDialTone", 216), ("acCarrierAnswerTone", 217), ("acCarrierChargingTone", 218), ("acLongDistanceIndicatorTone", 219), ("acSTUModemFirstTone", 298), ("acSTUModemSecondTone", 299)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneType.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoFarEndDisconnectToneType.setDescription('Defines which CPT types are detected as far-end disconnect. The CPT type is based on the acTCallProgressToneType enum. This is valid when FarEndDisconnectType allows CPT detection. Range = An array of up to 4 tone types. Access: Offline. AC INI-Param: DISCONNECTTONETYPE')
acAnalogFxsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3))
acAnalogFxs = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1))
acAnalogFxsPolarityReversalType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("soft", 0), ("hard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsPolarityReversalType.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsPolarityReversalType.setDescription('Sets the type of the polarity reversal signal used for the network far-end answer and disconnect indications. Smooth reversal prevents negative effects as non-required ringing. 0 = Soft reverse polarity 1 = Hard reverse polarity. Access: Offline. AC INI-Param: POLARITYREVERSALTYPE')
acAnalogFxsMeteringType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mt12kHz", 0), ("mt16kHz", 1), ("mtPolarityReversal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsMeteringType.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsMeteringType.setDescription('Sets the metering method for charging pulses. 0 = 12 kHz sinusoidal bursts 1 = 16 kHz sinusoidal bursts 2 = Polarity Reversal pulses. Access: Offline. AC INI-Param: METERINGTYPE')
acAnalogFxsLifeLineType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acLifeLineType-Hardware-Only", 0), ("acLifeLineTypeHardware-And-Link-Detection", 1), ("acLifeLineType-Hardware-And-Link-And-Network-Detection", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsLifeLineType.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLifeLineType.setDescription('Defines the Lifeline phone type. The Lifeline phone is available (for FXS only) on port 4 in MP-104 and MP-108, on port 2 in MP-102, on ports 1-4 in the MP-118, and on port 2 of each analog module in the Mediant 1000. 0 = activate Lifeline phone on power down 1 = activate Lifeline phone on power down or on detection of LAN disconnect 2 = activate Lifeline phone on power down, or on detection of LAN disconnect, or on loss of ping. Access: Offline. AC INI-Param: LIFELINETYPE')
acAnalogFxsMinFlashHookTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(25, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsMinFlashHookTime.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsMinFlashHookTime.setDescription('Sets the minimal time (in msec) for detection of a flash-hook event (for FXS only). The valid range is 25 to 300. The default value is 300 msec. Detection is guaranteed for flash hook periods of at least 60 msec (when setting the minimal time to 25). Flash-hook signals that last a shorter period of time are ignored. Note: It is recommended to reduce the detection time by 50 msec from the desired value (e.g. if you set the value as 200 msec, then enter 150 msec, i.e. 200 minus 50). . Access: Offline. AC INI-Param: MINFLASHHOOKTIME')
acAnalogFxsCallerIDTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsCallerIDTimingMode.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsCallerIDTimingMode.setDescription('Defines the Analog CallerID Timing Mode. 0 = CallerID transferred between first and second rings 1 = CallerID transferred on valid Off ring. Access: Offline. AC INI-Param: ANALOGCALLERIDTIMINGMODE')
acAnalogFxsBellcoreCallerIDTypeOneSubStandard = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bellcore-Between-Rings", 0), ("bellcore-Not-Ring-Related", 1), ("bellcore-Before-Ring-RP-AS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsBellcoreCallerIDTypeOneSubStandard.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsBellcoreCallerIDTypeOneSubStandard.setDescription('Selects the sub-standard of the Bellcore Caller ID type. 0 = Between_Rings 1 = Not_Ring_Related 2 = Before_Ring_RP_AS. Access: Offline. AC INI-Param: BellcoreCallerIDTypeOneSubStandard')
acAnalogFxsETSICallerIDTypeOneSubStandard = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("eTSI-Between-Rings", 0), ("eTSI-Before-Ring-DT-AS", 1), ("eTSI-Before-Ring-RP-AS", 2), ("eTSI-Before-Ring-LR-DT-AS", 3), ("eTSI-Not-Ring-Related-DT-AS", 4), ("eTSI-Not-Ring-Related-RP-AS", 5), ("eTSI-Not-Ring-Related-LR-DT-AS", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsETSICallerIDTypeOneSubStandard.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsETSICallerIDTypeOneSubStandard.setDescription('Selects the number denoting the ETSI CallerID Type 1 sub-standard. Either: 0 = ETSI_Between_Rings 1 = ETSI_Before_Ring_DT_AS 2 = ETSI_Before_Ring_RP_AS 3 = ETSI_Before_Ring_LR_DT_AS 4 = ETSI_Not_Ring_Related_DT_AS 5 = ETSI_Not_Ring_Related_RP_AS 6 = ETSI_Not_Ring_Related_LR_DT_AS. Access: Offline. AC INI-Param: ETSICallerIDTypeOneSubStandard')
acAnalogFxsETSIVMWITypeOneStandard = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("eTSI-VMWI-Between-Rings", 0), ("eTSI-VMWI-Before-Ring-DT-AS", 1), ("eTSI-VMWI-Before-Ring-RP-AS", 2), ("eTSI-VMWI-Before-Ring-LR-DT-AS", 3), ("eTSI-VMWI-Not-Ring-Related-DT-AS", 4), ("eTSI-VMWI-Not-Ring-Related-RP-AS", 5), ("eTSI-VMWI-Not-Ring-Related-LR-DT-AS", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsETSIVMWITypeOneStandard.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsETSIVMWITypeOneStandard.setDescription('Selects the number denoting the ETSI VMWI Type 1 Standard. Choose: 0 = ETSI_VMWI_Between_Rings 1 = ETSI_VMWI_Before_Ring_DT_AS 2 = ETSI_VMWI_Before_Ring_RP_AS 3 = ETSI_VMWI_Before_Ring_LR_DT_AS 4 = ETSI_VMWI_Not_Ring_Related_DT_AS 5 = ETSI_VMWI_Not_Ring_Related_RP_AS 6 = ETSI_VMWI_Not_Ring_Related_LR_DT_AS. Access: Offline. AC INI-Param: ETSIVMWITypeOneStandard')
acAnalogFxsBellcoreVMWITypeOneStandard = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bellcore-VMWI-Between-Rings", 0), ("bellcore-VMWI-Not-Ring-Related", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsBellcoreVMWITypeOneStandard.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsBellcoreVMWITypeOneStandard.setDescription('Use this parameter to select the Bellcore VMWI standard. 0 - Between_Rings 1 - Not_Ring_Related. Access: Offline. AC INI-Param: BellcoreVMWITypeOneStandard')
acAnalogFxsDisableAutoCalibration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsDisableAutoCalibration.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsDisableAutoCalibration.setDescription('Determines whether to enable the analog Autocalibration in the DAA. One of the following values: 0 = Auto calibration is enabled 1 = Auto calibration is disabled. Access: Offline. AC INI-Param: DisableAnalogAutoCalibration')
acAnalogFxsExternalLifeLinePorts = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsExternalLifeLinePorts.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsExternalLifeLinePorts.setDescription('Set the amount of FXS ports which will be connected to an external life line and will be disabled (max value is half of the FXS ports). Access: Offline. AC INI-Param: ExternalLifeLinePorts')
acAnalogFxsCountryCoefficients = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(66, 70))).clone(namedValues=NamedValues(("europe", 66), ("unitedStates", 70)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsCountryCoefficients.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsCountryCoefficients.setDescription('Allows the user to modify the line characteristic (AC and DC) according to country. Access: Offline. AC INI-Param: FXSCountryCoefficients')
acAnalogFxsTTXVoltageLevel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", -1), ("ttxVoltageLevel0V", 0), ("ttxVoltageLevel05", 1), ("ttxVoltageLevel1V", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsTTXVoltageLevel.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsTTXVoltageLevel.setDescription('Sets the TTX pulses voltage level. 0 = 0Vrms sinusoidal bursts 1 = 0.5Vrms sinusoidal bursts 2 = 1Vrms sinusoidal bursts -1 = notAvailable. Access: Offline. AC INI-Param: AnalogTTXVoltageLevel')
acAnalogStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2))
acAnalogStatusMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 1))
acAnalogStatusMiscFxsOrFxo = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fXO", 0), ("fXS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogStatusMiscFxsOrFxo.setStatus('current')
if mibBuilder.loadTexts: acAnalogStatusMiscFxsOrFxo.setDescription('Board is Fxs Or Fxo (For all devices except MP118). For MP118 - see acAnalogFxsFxoType for a line specific status. AC INI-Param: N/A')
acAnalogStatusMiscBoardTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogStatusMiscBoardTemperature.setStatus('current')
if mibBuilder.loadTexts: acAnalogStatusMiscBoardTemperature.setDescription('Temperature of the board in degrees Celsius, should not go higher then 60!. AC INI-Param: N/A')
acAnalogStatusMiscAnalogChannelsCount = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogStatusMiscAnalogChannelsCount.setStatus('current')
if mibBuilder.loadTexts: acAnalogStatusMiscAnalogChannelsCount.setDescription('Number of the Analog channels in the board. AC INI-Param: N/A')
acAnalogFxsFxo = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 20))
acAnalogFxsFxoTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 20, 1), )
if mibBuilder.loadTexts: acAnalogFxsFxoTable.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsFxoTable.setDescription('')
acAnalogFxsFxoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 20, 1, 1), ).setIndexNames((0, "AC-ANALOG-MIB", "acAnalogFxsFxoIndex"))
if mibBuilder.loadTexts: acAnalogFxsFxoEntry.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsFxoEntry.setDescription('')
acAnalogFxsFxoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 20, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: acAnalogFxsFxoIndex.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsFxoIndex.setDescription('Index for table use. AC INI-Param: N/A')
acAnalogFxsFxoType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fXO", 0), ("fXS", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsFxoType.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsFxoType.setDescription('Line is Fxs Or Fxo. AC INI-Param: N/A')
acAnalogFxsFxoChipRevNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 20, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsFxoChipRevNum.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsFxoChipRevNum.setDescription("Fxs/Fxo's Chip revision number. AC INI-Param: N/A")
acAnalogFxsFxoHookState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onHookState", 1), ("offHookState", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsFxoHookState.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsFxoHookState.setDescription('The hook state of the analog line. AC INI-Param: N/A')
acAnalogAction = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3))
acAnalogFxoAction = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1))
acAnalogFxoLineTestTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1), )
if mibBuilder.loadTexts: acAnalogFxoLineTestTable.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestTable.setDescription('')
acAnalogFxoLineTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1), ).setIndexNames((0, "AC-ANALOG-MIB", "acAnalogFxoLineTestIndex"))
if mibBuilder.loadTexts: acAnalogFxoLineTestEntry.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestEntry.setDescription('')
acAnalogFxoLineTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: acAnalogFxoLineTestIndex.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestIndex.setDescription('Index for table use. AC INI-Param: N/A')
acAnalogFxoLineTestActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noTestActivated", 0), ("runLineTest", 1), ("lineTestDone", 2), ("testFailed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxoLineTestActivate.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestActivate.setDescription('Activate line testing in an FXO analog line according to a given line-index. AC INI-Param: N/A')
acAnalogFxoLineTestHookState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onHookState", 1), ("offHookState", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoLineTestHookState.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestHookState.setDescription('The hook state of the analog line. AC INI-Param: N/A')
acAnalogFxoLineTestPolarityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalPolarity", 1), ("reversePolarity", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoLineTestPolarityStatus.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestPolarityStatus.setDescription("The line's polarity state. AC INI-Param: N/A")
acAnalogFxoLineTestLineConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lineDisconnected", 1), ("lineConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoLineTestLineConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestLineConnectionStatus.setDescription("The connection's status of the line. AC INI-Param: N/A")
acAnalogFxoLineTestLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoLineTestLineCurrent.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestLineCurrent.setDescription("The line's current [ma]. AC INI-Param: N/A")
acAnalogFxoLineTestLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoLineTestLineVoltage.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestLineVoltage.setDescription("The line's voltage [V]. AC INI-Param: N/A")
acAnalogFxoLineTestRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoLineTestRingState.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestRingState.setDescription("The Ring's State. AC INI-Param: N/A")
acAnalogFxoLineTestLinePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoLineTestLinePolarity.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestLinePolarity.setDescription("The line's polarity state. AC INI-Param: N/A")
acAnalogFxoLineTestMwiState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoLineTestMwiState.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestMwiState.setDescription("Mwi's state. AC INI-Param: N/A")
acAnalogFxoLineTestLastCurrentDisconnectDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxoLineTestLastCurrentDisconnectDuration.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxoLineTestLastCurrentDisconnectDuration.setDescription('Last current disconnect duration in msec. AC INI-Param: N/A')
acAnalogFxsAction = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2))
acAnalogFxsLineTestTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1), )
if mibBuilder.loadTexts: acAnalogFxsLineTestTable.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestTable.setDescription('')
acAnalogFxsLineTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1), ).setIndexNames((0, "AC-ANALOG-MIB", "acAnalogFxsLineTestIndex"))
if mibBuilder.loadTexts: acAnalogFxsLineTestEntry.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestEntry.setDescription('')
acAnalogFxsLineTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: acAnalogFxsLineTestIndex.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestIndex.setDescription('Index for table use. AC INI-Param: N/A')
acAnalogFxsLineTestActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noTestActivated", 0), ("runLineTest", 1), ("lineTestDone", 2), ("testFailed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogFxsLineTestActivate.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestActivate.setDescription('Activate line testing in a FXS analog line according to a given line-index. AC INI-Param: N/A')
acAnalogFxsLineTestHookState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onHookState", 1), ("offHookState", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsLineTestHookState.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestHookState.setDescription('The hook state of the analog line. AC INI-Param: N/A')
acAnalogFxsLineTestRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offRingState", 1), ("onRingState", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsLineTestRingState.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestRingState.setDescription("Line's ring state. AC INI-Param: N/A")
acAnalogFxsLineTestPolarityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalPolarity", 1), ("reversePolarity", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsLineTestPolarityStatus.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestPolarityStatus.setDescription("Line's reversal-polarity. AC INI-Param: N/A")
acAnalogFxsLineTestMessageWaitingIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noWaitingMessage", 1), ("waitingMessage", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsLineTestMessageWaitingIndication.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestMessageWaitingIndication.setDescription("Line's messgae waiting indication state. AC INI-Param: N/A")
acAnalogFxsLineTestLineCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsLineTestLineCurrentReading.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestLineCurrentReading.setDescription('The Line current reading in 10ua units. This test is supported only in line no. 0. Not supported on MP500. In case of MP124 this test is supported in all ports except ports 2 and 3. AC INI-Param: N/A')
acAnalogFxsLineTestLineVoltageReading = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6000, 6000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsLineTestLineVoltageReading.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestLineVoltageReading.setDescription('The Line voltage reading in 10mV units. In case of MP124 the Line voltage reading in 1V units. This test is supported only in line no. 0. Not supported on MP500. In case of MP124 this test is supported in all ports except ports 2 and 3. AC INI-Param: N/A')
acAnalogFxsLineTestAnalogVoltageReading = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 340))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsLineTestAnalogVoltageReading.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestAnalogVoltageReading.setDescription('The current analog voltage reading in 10mV units. his test is supported only in line no. 0. Not supported on MP500. In case of MP124 this test is supported in all ports except ports 2 and 3. AC INI-Param: N/A')
acAnalogFxsLineTestRingVoltageReading = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-13000, 13000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsLineTestRingVoltageReading.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestRingVoltageReading.setDescription('The current ring voltage reading in 10mV units. This test is supported only in line no. 0. Not supported on MP500. In case of MP124 this test is supported in all ports except ports 2 and 3. AC INI-Param: N/A')
acAnalogFxsLineTestLongLineCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogFxsLineTestLongLineCurrentReading.setStatus('current')
if mibBuilder.loadTexts: acAnalogFxsLineTestLongLineCurrentReading.setDescription('The current long line reading in 10ua units. This test is supported only in line no. 0. Not supported on MP500. In case of MP124 this test is supported in all ports except ports 2 and 3. AC INI-Param: N/A')
acAnalogCommonAction = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 3))
acAnalogCommonChannelTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 3, 1), )
if mibBuilder.loadTexts: acAnalogCommonChannelTable.setStatus('current')
if mibBuilder.loadTexts: acAnalogCommonChannelTable.setDescription('Table for common channels operations.')
acAnalogCommonChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 3, 1, 1), ).setIndexNames((0, "AC-ANALOG-MIB", "acAnalogCommonChannelIndex"))
if mibBuilder.loadTexts: acAnalogCommonChannelEntry.setStatus('current')
if mibBuilder.loadTexts: acAnalogCommonChannelEntry.setDescription('')
acAnalogCommonChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)))
if mibBuilder.loadTexts: acAnalogCommonChannelIndex.setStatus('current')
if mibBuilder.loadTexts: acAnalogCommonChannelIndex.setDescription('Index for table use, the current channel. AC INI-Param: N/A')
acAnalogCommonChannelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acAnalogCommonChannelAction.setStatus('current')
if mibBuilder.loadTexts: acAnalogCommonChannelAction.setDescription('An action to make on the current channel, The Reset action is for Analog channels only. AC INI-Param: N/A')
acAnalogLegs = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21))
acAnalogLegsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1), )
if mibBuilder.loadTexts: acAnalogLegsTable.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsTable.setDescription('')
acAnalogLegsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1), ).setIndexNames((0, "AC-ANALOG-MIB", "acAnalogLegsLegIndex"))
if mibBuilder.loadTexts: acAnalogLegsEntry.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsEntry.setDescription('')
acAnalogLegsLegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)))
if mibBuilder.loadTexts: acAnalogLegsLegIndex.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsLegIndex.setDescription('Decribes The Digital EndPoint In A Call. AC INI-Param: N/A')
acAnalogLegsCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogLegsCallIndex.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsCallIndex.setDescription('Decribes The Call which The Rtp EndPoint Participant In It. AC INI-Param: N/A')
acAnalogLegsAnalogType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fxs", 1), ("fxo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogLegsAnalogType.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsAnalogType.setDescription('Describs whether the board is FXS or FXO. AC INI-Param: N/A')
acAnalogLegsEchoCanceller = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogLegsEchoCanceller.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsEchoCanceller.setDescription('Enables or Disables the Echo Canceller. AC INI-Param: N/A')
acAnalogLegsHighPassFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogLegsHighPassFilter.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsHighPassFilter.setDescription('Enables or Disables theHigh Pass Filter. AC INI-Param: N/A')
acAnalogLegsDTMFDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogLegsDTMFDetection.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsDTMFDetection.setDescription('Enables or Disables the DTMF Detection. AC INI-Param: N/A')
acAnalogLegsVoiceVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogLegsVoiceVolume.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsVoiceVolume.setDescription('Describs the volume of the voice in dB. AC INI-Param: N/A')
acAnalogLegsInputGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogLegsInputGain.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsInputGain.setDescription('Describes the Input Gain on the leg in dB. AC INI-Param: N/A')
acAnalogLegsLegName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 8, 2, 21, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acAnalogLegsLegName.setStatus('current')
if mibBuilder.loadTexts: acAnalogLegsLegName.setDescription('Describes the Leg Name as in the Control Protocol. AC INI-Param: N/A')
mibBuilder.exportSymbols("AC-ANALOG-MIB", acAnalogFxsLifeLineType=acAnalogFxsLifeLineType, acAnalogLegsTable=acAnalogLegsTable, acAnalogFxsCountryCoefficients=acAnalogFxsCountryCoefficients, acAnalogFxsPolarityReversalType=acAnalogFxsPolarityReversalType, acAnalogFxsConfig=acAnalogFxsConfig, acAnalogFxsBellcoreCallerIDTypeOneSubStandard=acAnalogFxsBellcoreCallerIDTypeOneSubStandard, acAnalogFxoLineTestActivate=acAnalogFxoLineTestActivate, acAnalogFxsLineTestAnalogVoltageReading=acAnalogFxsLineTestAnalogVoltageReading, acAnalogStatus=acAnalogStatus, acAnalogStatusMiscFxsOrFxo=acAnalogStatusMiscFxsOrFxo, acAnalogFxsLineTestTable=acAnalogFxsLineTestTable, acAnalogFxsFxo=acAnalogFxsFxo, acAnalogCommonChannelIndex=acAnalogCommonChannelIndex, acAnalogLegsDTMFDetection=acAnalogLegsDTMFDetection, acAnalogFxsBellcoreVMWITypeOneStandard=acAnalogFxsBellcoreVMWITypeOneStandard, acAnalogFxsDisableAutoCalibration=acAnalogFxsDisableAutoCalibration, acAnalogFxsLineTestRingVoltageReading=acAnalogFxsLineTestRingVoltageReading, acAnalogFxoFarEndDisconnectToneType=acAnalogFxoFarEndDisconnectToneType, acAnalogFxsFxoTable=acAnalogFxsFxoTable, acAnalogFxsMinFlashHookTime=acAnalogFxsMinFlashHookTime, acAnalogStatusMiscBoardTemperature=acAnalogStatusMiscBoardTemperature, acAnalogLegsAnalogType=acAnalogLegsAnalogType, acAnalogCommonChannelTable=acAnalogCommonChannelTable, acAnalogFxoLineTestIndex=acAnalogFxoLineTestIndex, acAnalogConfig=acAnalogConfig, acAnalogMisc=acAnalogMisc, acAnalogFxsLineTestActivate=acAnalogFxsLineTestActivate, acAnalogFxs=acAnalogFxs, acAnalogFxoFarEndDisconnectToneEntry=acAnalogFxoFarEndDisconnectToneEntry, acAnalogFxsETSICallerIDTypeOneSubStandard=acAnalogFxsETSICallerIDTypeOneSubStandard, acAnalogCommonAction=acAnalogCommonAction, acAnalogFxsLineTestPolarityStatus=acAnalogFxsLineTestPolarityStatus, acAnalogFxsLineTestLineCurrentReading=acAnalogFxsLineTestLineCurrentReading, acAnalogFxoFarEndDisconnectType=acAnalogFxoFarEndDisconnectType, acAnalogFxsAction=acAnalogFxsAction, acAuxiliaryFiles=acAuxiliaryFiles, acAnalogCommonChannelAction=acAnalogCommonChannelAction, acAnalogFxsLineTestLongLineCurrentReading=acAnalogFxsLineTestLongLineCurrentReading, acAnalogFxoAction=acAnalogFxoAction, acAnalogFxsLineTestEntry=acAnalogFxsLineTestEntry, acAnalogCommonChannelEntry=acAnalogCommonChannelEntry, acAuxiliaryFilesFxoCoefficients=acAuxiliaryFilesFxoCoefficients, acAnalogFxoFarEndDisconnectToneRowStatus=acAnalogFxoFarEndDisconnectToneRowStatus, acAnalogFxoFarEndDisconnectToneIndex=acAnalogFxoFarEndDisconnectToneIndex, acAnalogFxoFarEndDisconnectToneTable=acAnalogFxoFarEndDisconnectToneTable, acAnalogFxsFxoHookState=acAnalogFxsFxoHookState, acAnalogFxoConfig=acAnalogFxoConfig, acAnalogConfiguration=acAnalogConfiguration, PYSNMP_MODULE_ID=acAnalog, acAnalogLegsEchoCanceller=acAnalogLegsEchoCanceller, acAnalogFxoLineTestLinePolarity=acAnalogFxoLineTestLinePolarity, acAnalogStatusMisc=acAnalogStatusMisc, acAnalogLegsLegIndex=acAnalogLegsLegIndex, acAnalogLegsCallIndex=acAnalogLegsCallIndex, acAnalogFxsLineTestLineVoltageReading=acAnalogFxsLineTestLineVoltageReading, acAnalogLegsHighPassFilter=acAnalogLegsHighPassFilter, acAnalogFxsLineTestHookState=acAnalogFxsLineTestHookState, acAnalogLegsEntry=acAnalogLegsEntry, acAnalogFxsMeteringType=acAnalogFxsMeteringType, acAnalogFxsETSIVMWITypeOneStandard=acAnalogFxsETSIVMWITypeOneStandard, acAnalogFxsLineTestRingState=acAnalogFxsLineTestRingState, acAnalogFxsFxoType=acAnalogFxsFxoType, acAnalogFxoLineTestPolarityStatus=acAnalogFxoLineTestPolarityStatus, acAnalogStatusMiscAnalogChannelsCount=acAnalogStatusMiscAnalogChannelsCount, acAnalogFxoLineTestLineVoltage=acAnalogFxoLineTestLineVoltage, acAnalogFxsTTXVoltageLevel=acAnalogFxsTTXVoltageLevel, acAnalogLegs=acAnalogLegs, acAnalogFxoFarEndDisconnectToneActionResult=acAnalogFxoFarEndDisconnectToneActionResult, acAnalogFxoDCRemover=acAnalogFxoDCRemover, acAnalogFxsCallerIDTimingMode=acAnalogFxsCallerIDTimingMode, acAnalogFxoLineTestHookState=acAnalogFxoLineTestHookState, acAnalogFxoLineTestLastCurrentDisconnectDuration=acAnalogFxoLineTestLastCurrentDisconnectDuration, acAnalogFxsFxoChipRevNum=acAnalogFxsFxoChipRevNum, acAnalogFxoCountryCoefficients=acAnalogFxoCountryCoefficients, acAnalogLegsLegName=acAnalogLegsLegName, acAnalogFxoLineTestEntry=acAnalogFxoLineTestEntry, acAnalogMiscGroundKeyDetection=acAnalogMiscGroundKeyDetection, acAnalogFxsFxoEntry=acAnalogFxsFxoEntry, acAnalogFxoLineTestTable=acAnalogFxoLineTestTable, acAnalogFxoLineTestLineConnectionStatus=acAnalogFxoLineTestLineConnectionStatus, acAnalogFxsLineTestMessageWaitingIndication=acAnalogFxsLineTestMessageWaitingIndication, acAnalogFxsFxoIndex=acAnalogFxsFxoIndex, acAnalog=acAnalog, acAnalogMiscCurrentDisconnectDuration=acAnalogMiscCurrentDisconnectDuration, acAnalogAction=acAnalogAction, acAnalogFxsLineTestIndex=acAnalogFxsLineTestIndex, acAnalogLegsVoiceVolume=acAnalogLegsVoiceVolume, acAnalogLegsInputGain=acAnalogLegsInputGain, acAnalogFxoFarEndDisconnectToneAction=acAnalogFxoFarEndDisconnectToneAction, acAuxiliaryFilesFxsCoefficients=acAuxiliaryFilesFxsCoefficients, acAnalogFxoLineTestLineCurrent=acAnalogFxoLineTestLineCurrent, acAnalogFxoLineTestRingState=acAnalogFxoLineTestRingState, acAnalogFxo=acAnalogFxo, acAnalogMiscFlashHookPeriod=acAnalogMiscFlashHookPeriod, acAnalogFxoLineTestMwiState=acAnalogFxoLineTestMwiState, acAnalogFxsExternalLifeLinePorts=acAnalogFxsExternalLifeLinePorts)
