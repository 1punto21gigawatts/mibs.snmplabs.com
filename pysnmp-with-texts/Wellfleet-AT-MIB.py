#
# PySNMP MIB module Wellfleet-AT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-AT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Gauge32, Counter32, Counter64, MibIdentifier, IpAddress, TimeTicks, ModuleIdentity, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Gauge32", "Counter32", "Counter64", "MibIdentifier", "IpAddress", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfAppletalkGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfAppletalkGroup")
wfAppleBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1))
wfAppleBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseDelete.setDescription('Create/Delete parameter for determining whether or not AppleTalk is configured on this slot.')
wfAppleBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleBaseDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseDisable.setDescription('Enable/Disable parameter for determining whether or not to startup AppleTalk.')
wfAppleBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseState.setDescription('This parameter relfects the current state of AppleTalk.')
wfAppleBaseDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleBaseDebugLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseDebugLevel.setDescription('Appletalk has control of what debug and info messages are printed.')
wfAppleBaseDdpQueLen = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleBaseDdpQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseDdpQueLen.setDescription('wfAppleBaseDdpQueLen is no longer used.')
wfAppleBaseHomedPort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleBaseHomedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseHomedPort.setDescription('The circuit number of the port on which NBP will register this router.')
wfAppleBaseTotalNets = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleBaseTotalNets.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseTotalNets.setDescription('The total number of networks from all routing protocols.')
wfAppleBaseTotalZones = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleBaseTotalZones.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseTotalZones.setDescription('The total number of zone/rtmp associations. Also the total number of instances of zones in the mib.')
wfAppleBaseTotalZoneNames = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleBaseTotalZoneNames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseTotalZoneNames.setDescription('The total number of unique zone names.')
wfAppleBaseTotalAarpEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleBaseTotalAarpEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseTotalAarpEntries.setDescription('The total number of AARP entries.')
wfAppleBaseEstimatedNets = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleBaseEstimatedNets.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseEstimatedNets.setDescription('This parameter indicates the estimated number of networks that the router will need to keep in its routing table.')
wfAppleBaseEstimatedHosts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleBaseEstimatedHosts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleBaseEstimatedHosts.setDescription('This parameter indicates the estimated number of end stations that the router will need to keep in its AARP table. This should not include end stations that are reached through another router.')
wfAppleMacIPBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('deleted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleMacIPBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleMacIPBaseDelete.setDescription('Create/Delete parameter for determining whether or not MacIP is configured on this box.')
wfAppleMacIPBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleMacIPBaseDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleMacIPBaseDisable.setDescription('Enable/Disable parameter for determining whether or not to startup MacIP.')
wfAppleMacIPBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleMacIPBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleMacIPBaseState.setDescription('This parameter relfects the current state of MACIP.')
wfAppleMacIPZone = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleMacIPZone.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleMacIPZone.setDescription('The zone that this router is in. (For MacIP)')
wfMacIPAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMacIPAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: wfMacIPAddress1.setDescription('The base IP address used for assignment of addresses')
wfMacIPLowerIpAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMacIPLowerIpAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: wfMacIPLowerIpAddress1.setDescription('The base IP address used for assignment of addresses')
wfMacIPUpperIpAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMacIPUpperIpAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: wfMacIPUpperIpAddress1.setDescription('The base IP address used for assignment of addresses')
wfMacIPAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMacIPAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: wfMacIPAddress2.setDescription('The base IP address used for assignment of addresses')
wfMacIPLowerIpAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMacIPLowerIpAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: wfMacIPLowerIpAddress2.setDescription('The base IP address used for assignment of addresses')
wfMacIPUpperIpAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMacIPUpperIpAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: wfMacIPUpperIpAddress2.setDescription('The base IP address used for assignment of addresses')
wfMacIPAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMacIPAddress3.setStatus('mandatory')
if mibBuilder.loadTexts: wfMacIPAddress3.setDescription('The base IP address used for assignment of addresses')
wfMacIPLowerIpAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMacIPLowerIpAddress3.setStatus('mandatory')
if mibBuilder.loadTexts: wfMacIPLowerIpAddress3.setDescription('The base IP address used for assignment of addresses')
wfMacIPUpperIpAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMacIPUpperIpAddress3.setStatus('mandatory')
if mibBuilder.loadTexts: wfMacIPUpperIpAddress3.setDescription('The base IP address used for assignment of addresses')
wfAppleMacIPAddressTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleMacIPAddressTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleMacIPAddressTimeOut.setDescription('The base IP address used for assignment of addresses')
wfAppleMacIPServerRequests = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleMacIPServerRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleMacIPServerRequests.setDescription('The Number of times this router has been asked if it is an MacIP Server')
wfAppleMacIPServerResponces = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleMacIPServerResponces.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleMacIPServerResponces.setDescription('The Number of times this router has responded to server requests.')
wfAppleRtmpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2), )
if mibBuilder.loadTexts: wfAppleRtmpTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpTable.setDescription("The table of elements of AppleTalk's routing RTMP table")
wfAppleRtmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1), ).setIndexNames((0, "Wellfleet-AT-MIB", "wfAppleRtmpNetStart"), (0, "Wellfleet-AT-MIB", "wfAppleRtmpNetEnd"))
if mibBuilder.loadTexts: wfAppleRtmpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpEntry.setDescription('An entry in the Routing table')
wfAppleRtmpNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleRtmpNetStart.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpNetStart.setDescription('The destinatination network range of this route to which this entry pertains. The route is considered the best route to that network. There wil only be one route to a single destination. The address will be in the form of [network min - network max].')
wfAppleRtmpNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleRtmpNetEnd.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpNetEnd.setDescription('The network max in the destination network range to which the routing entry pertains.')
wfAppleRtmpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleRtmpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpPort.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
wfAppleRtmpHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleRtmpHops.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpHops.setDescription('The routing metric to get to this destination network. The measurement is in terms of hops.')
wfAppleRtmpNextHopNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleRtmpNextHopNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpNextHopNet.setDescription('The AppleTalk net of the next hop router for this route.')
wfAppleRtmpNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleRtmpNextHopNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpNextHopNode.setDescription('The AppleTalk node of the next hop router for this route.')
wfAppleRtmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 1), ("suspect", 2), ("goingbad", 3), ("bad", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleRtmpState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpState.setDescription('The state of this routing entry: 1 = Good, 2 = Suspect, 3 = GoingBad, or 4 = Bad.')
wfAppleRtmpProto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rtmp", 1), ("aurp", 2), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleRtmpProto.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpProto.setDescription('The protocol this routing entry was learned through: 1 = RTMP, 2 = AURP, 3 = Static Route.')
wfAppleRtmpAurpNextHopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleRtmpAurpNextHopIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleRtmpAurpNextHopIpAddress.setDescription('The next hop address if this route was learned through AURP.')
wfApplePortTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3), )
if mibBuilder.loadTexts: wfApplePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortTable.setDescription('The port descriptor table that describes the configuration parameters for this port of the AppleTalk Router.')
wfApplePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1), ).setIndexNames((0, "Wellfleet-AT-MIB", "wfApplePortCircuit"))
if mibBuilder.loadTexts: wfApplePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortEntry.setDescription('An entry in the Port Descriptor table')
wfApplePortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDelete.setDescription('Create/Delete parameter. Users perform an SNMP SET operation on this object to create/delete an AppleTalk interface. The default is create.')
wfApplePortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDisable.setDescription('Enable/Disable parameter. Users perforn an SNMP SET operation on this object to enable/disable an AppleTalk interface. Default is enabled.')
wfApplePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortCircuit.setDescription('The circuit number for this interface')
wfApplePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortState.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortState.setDescription('The current state of the AppleTalk port.')
wfApplePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortType.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortType.setDescription('wfApplePortType is reserved for future use')
wfApplePortCksumDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortCksumDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortCksumDisable.setDescription('Flag to enable/disable the calculation of the DDP checksum for packets sourced by the router over this interface. This value has no effect on incoming packets.')
wfApplePortTrEndStation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortTrEndStation.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortTrEndStation.setDescription('When an interface is running token ring this attribute allows for end station source routing. If the interface is not running token ring the attribute has no meaning.')
wfApplePortGniForever = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortGniForever.setStatus('obsolete')
if mibBuilder.loadTexts: wfApplePortGniForever.setDescription('wfApplePortGniForever is ignored. A non-seed interface will send GetNetInfos every 10 seconds until it gets a response.')
wfApplePortAarpFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortAarpFlush.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortAarpFlush.setDescription('The maximum age (in minutes) of an aarp entry before it is deleted. Defaults to 12 hours. Minimum values is five minutes.')
wfApplePortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortMacAddress.setDescription('Configured mac address')
wfApplePortNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNodeId.setDescription('The AppleTalk node id configured for this port/interface. If PortNodeId or PortNetwork is zero the interface will try to acquire an address dynamically.')
wfApplePortNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNetwork.setDescription('The AppleTalk network number configured for this port/interface. If PortNodeId or PortNetwork is zero the interface will try to acquire an address dynamically.')
wfApplePortNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortNetStart.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNetStart.setDescription('The Network start value in the network range for this interface/port. If this is zero, the port is considered non-seed.')
wfApplePortNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortNetEnd.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNetEnd.setDescription('The Network end value in the network range for this interface/port.')
wfApplePortDfltZone = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortDfltZone.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDfltZone.setDescription('The default zone name for this network range/ interface. ')
wfApplePortCurMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortCurMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortCurMacAddress.setDescription('Mac Address used')
wfApplePortCurNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortCurNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortCurNodeId.setDescription('The AppleTalk node id of this port')
wfApplePortCurNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortCurNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortCurNetwork.setDescription('The network number for this port.')
wfApplePortCurNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortCurNetStart.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortCurNetStart.setDescription('The Network start value in the network range for this port.')
wfApplePortCurNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortCurNetEnd.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortCurNetEnd.setDescription('The Network end value in the network range for this port.')
wfApplePortCurDfltZone = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortCurDfltZone.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortCurDfltZone.setDescription('The default zone name for this port')
wfApplePortAarpProbeRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortAarpProbeRxs.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortAarpProbeRxs.setDescription('The number of AARP Probe packets received on this interface.')
wfApplePortAarpProbeTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortAarpProbeTxs.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortAarpProbeTxs.setDescription('The number of AARP Probe packets transmitted on this interface.')
wfApplePortAarpReqRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortAarpReqRxs.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortAarpReqRxs.setDescription('The number of AARP Request packets received on this interface.')
wfApplePortAarpReqTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortAarpReqTxs.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortAarpReqTxs.setDescription('The number of AARP Request packets transmitted on this interface.')
wfApplePortAarpRspRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortAarpRspRxs.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortAarpRspRxs.setDescription('The number of AARP Response packets received on this interface.')
wfApplePortAarpRspTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortAarpRspTxs.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortAarpRspTxs.setDescription('The number of AARP Response packets transmitted on this interface.')
wfApplePortDdpOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpOutRequests.setDescription('The total number of DDP datagrams which were supplied to DDP by local DDP clients in requests for transmission. Note that this counter does not include any datagrams counted in ddpForwRequests.')
wfApplePortDdpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpInReceives.setDescription('The total number of input datagrams received by DDP, including those received in error.')
wfApplePortDdpInLocalDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpInLocalDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpInLocalDatagrams.setDescription('The total number of input DDP datagrams for which this entity was their final DDP destination.')
wfApplePortDdpNoProtocolHandlers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpNoProtocolHandlers.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpNoProtocolHandlers.setDescription('The total number of DDP datagrams addressed to this entity that were addressed to an upper layer protocol for which no protocol handler existed.')
wfApplePortDdpTooShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpTooShortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpTooShortErrors.setDescription('The total number of input DDP datagrams dropped because the received data length was less than the data length specified in the DDP header or the received data length was less than the length of the expected DDP header.')
wfApplePortDdpTooLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpTooLongErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpTooLongErrors.setDescription('The total number of input DDP datagrams dropped because the received data length was greater than the data length specified in the DDP header or because they exceeded the maximum DDP datagram size.')
wfApplePortDdpChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpChecksumErrors.setDescription('The total number of input DDP datagrams for which this DDP entity was their final destination, and which were dropped because of a checksum error.')
wfApplePortDdpForwRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpForwRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpForwRequests.setDescription('The number of input datagrams for which this entity was not their final DDP destination, as a result of which an attempt was made to find a route to forward them to that final destination.')
wfApplePortDdpOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpOutNoRoutes.setDescription('The total number of DDP datagrams dropped because a route could not be found to their final destination.')
wfApplePortDdpBroadcastErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpBroadcastErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpBroadcastErrors.setDescription('The total number of input DDP datagrams dropped because this entity was not their final destination and they were addressed to the link level broadcast.')
wfApplePortDdpHopCountErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortDdpHopCountErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortDdpHopCountErrors.setDescription('The total number of input DDP datagrams dropped because this entity was not their final destination and their hop count would exceed 15.')
wfApplePortRtmpInDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortRtmpInDataPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortRtmpInDataPkts.setDescription('A count of the number of good RTMP data packets received by this entity.')
wfApplePortRtmpOutDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortRtmpOutDataPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortRtmpOutDataPkts.setDescription('A count of the number of RTMP packets sent by this entity.')
wfApplePortRtmpInRequestPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortRtmpInRequestPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortRtmpInRequestPkts.setDescription('A count of the number of good RTMP Request packets received by this entity.')
wfApplePortRtmpNextIREqualChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortRtmpNextIREqualChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortRtmpNextIREqualChanges.setDescription('A count of the number of times RTMP changes the Next Internet Router in a routing entry because the hop count advertised in a routing tuple was equal to the current hop count for a particular network.')
wfApplePortRtmpNextIRLessChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortRtmpNextIRLessChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortRtmpNextIRLessChanges.setDescription('A count of the number of times RTMP changes the Next Internet Router in a routing entry because the hop count advertised in a routing tuple was less than the current hop count for a particular network.')
wfApplePortRtmpRouteDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortRtmpRouteDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortRtmpRouteDeletes.setDescription('A count of the number of times RTMP deletes a route because it was aged out of the table. This can help to detect routing problems.')
wfApplePortRtmpNetworkMismatchErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortRtmpNetworkMismatchErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortRtmpNetworkMismatchErrors.setDescription('The number of times RTMP receives a Data packet from a router who claims to be on a different network than that configured for the receiving port. This can help to detect configuration errors.')
wfApplePortRtmpRoutingTableOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortRtmpRoutingTableOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortRtmpRoutingTableOverflows.setDescription('The number of times RTMP attempted to add a route to the RTMP table but failed due to overflow.')
wfApplePortZipInZipQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipInZipQueries.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipInZipQueries.setDescription('The number of ZIP Queries received by this entity.')
wfApplePortZipInZipReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipInZipReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipInZipReplies.setDescription('The number of ZIP Replies received by this entity.')
wfApplePortZipOutZipReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipOutZipReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipOutZipReplies.setDescription('The number of ZIP Replies sent by this entity.')
wfApplePortZipInZipExtendedReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipInZipExtendedReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipInZipExtendedReplies.setDescription('The number of ZIP Extended Replies received by this entity.')
wfApplePortZipOutZipExtendedReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipOutZipExtendedReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipOutZipExtendedReplies.setDescription('The number of ZIP Extended Replies sent by this entity.')
wfApplePortZipInGetZoneLists = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipInGetZoneLists.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipInGetZoneLists.setDescription('The number of ZIP GetZoneList transactions received by this entity.')
wfApplePortZipOutGetZoneListReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipOutGetZoneListReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipOutGetZoneListReplies.setDescription('The number of ZIP GetZoneListReply transactions sent by this entity.')
wfApplePortZipInGetLocalZones = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipInGetLocalZones.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipInGetLocalZones.setDescription('The number of ZIP GetLocalZone transactions received by this entity.')
wfApplePortZipOutGetLocalZoneReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipOutGetLocalZoneReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipOutGetLocalZoneReplies.setDescription('The number of ZIP GetLocalZoneReply transactions sent by this entity.')
wfApplePortZipInGetMyZones = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipInGetMyZones.setStatus('obsolete')
if mibBuilder.loadTexts: wfApplePortZipInGetMyZones.setDescription('The number of ZIP GetMyZone transactions received by this entity.')
wfApplePortZipOutGetMyZoneReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipOutGetMyZoneReplies.setStatus('obsolete')
if mibBuilder.loadTexts: wfApplePortZipOutGetMyZoneReplies.setDescription('The number of ZIP GetMyZoneReply transactions sent by this entity.')
wfApplePortZipZoneConflictErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipZoneConflictErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipZoneConflictErrors.setDescription("The number of times a conflict has been detected between this entity's zone information and another entity's zone information.")
wfApplePortZipInGetNetInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipInGetNetInfos.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipInGetNetInfos.setDescription('The number of ZIP GetNetInfo packets received on this port by this entity.')
wfApplePortZipOutGetNetInfoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipOutGetNetInfoReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipOutGetNetInfoReplies.setDescription('The number of ZIP GetNetInfoReply packets sent out this port by this entity.')
wfApplePortZipZoneOutInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipZoneOutInvalids.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipZoneOutInvalids.setDescription('The number of times this entity has sent a ZIP GetNetInfo Reply with the zone invalid bit set in response to a GetNetInfo Request with an invalid zone name.')
wfApplePortZipAddressInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipAddressInvalids.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipAddressInvalids.setDescription('The number of times this entity had to broadcast a ZIP GetNetInfo Reply because the GetNetInfo Request had an invalid address.')
wfApplePortZipOutGetNetInfos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipOutGetNetInfos.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipOutGetNetInfos.setDescription('The number of ZIP GetNetInfo packets sent out this port by this entity.')
wfApplePortZipInGetNetInfoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipInGetNetInfoReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipInGetNetInfoReplies.setDescription('The number of ZIP GetNetInfoReply packets received on this port by this entity.')
wfApplePortZipOutZipQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipOutZipQueries.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipOutZipQueries.setDescription('The number of ZIP Queries sent by this entity.')
wfApplePortZipInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortZipInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZipInErrors.setDescription('The number of ZIP packets received by this entity that were rejected for any error.')
wfApplePortNbpInLookUpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpInLookUpRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpInLookUpRequests.setDescription('The number of NBP LookUp Requests received.')
wfApplePortNbpInLookUpReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpInLookUpReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpInLookUpReplies.setDescription('The number of NBP LookUp Replies received.')
wfApplePortNbpInBroadcastRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpInBroadcastRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpInBroadcastRequests.setDescription('The number of NBP Broadcast Requests received.')
wfApplePortNbpInForwardRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpInForwardRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpInForwardRequests.setDescription('The number of NBP Forward Requests received.')
wfApplePortNbpOutLookUpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpOutLookUpRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpOutLookUpRequests.setDescription('The number of NBP LookUp Requests sent.')
wfApplePortNbpOutLookUpReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpOutLookUpReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpOutLookUpReplies.setDescription('The number of NBP LookUp Replies sent.')
wfApplePortNbpOutBroadcastRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpOutBroadcastRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpOutBroadcastRequests.setDescription('The number of NBP Broadcast Requests sent.')
wfApplePortNbpOutForwardRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpOutForwardRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpOutForwardRequests.setDescription('The number of NBP Forward Requests sent.')
wfApplePortNbpRegistrationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpRegistrationFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpRegistrationFailures.setDescription('The number of times this node experienced a failure in attempting to register an NBP entity.')
wfApplePortNbpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortNbpInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortNbpInErrors.setDescription('The number of NBP packets received by this entity that were rejected for any error.')
wfApplePortEchoRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortEchoRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortEchoRequests.setDescription('The number of AppleTalk Echo requests received.')
wfApplePortEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfApplePortEchoReplies.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortEchoReplies.setDescription('The number of AppleTalk Echo replies sent.')
wfApplePortInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15))).clone(namedValues=NamedValues(("cost", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortInterfaceCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortInterfaceCost.setDescription('RTMP Cost for this interface.')
wfApplePortWanBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 80), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortWanBroadcastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortWanBroadcastAddress.setDescription('Frame Relay, SMDS, or ATM broadcast address')
wfApplePortWanSplitHorizonDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortWanSplitHorizonDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortWanSplitHorizonDisable.setDescription('WAN (Frame Relay or ATM) split horizon enabled')
wfApplePortZoneFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("partallow", 3), ("partdeny", 4))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortZoneFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortZoneFilterType.setDescription('Controls zone filtering on this interface. An allow indicates that any wfAppleZoneFilterEntry is a zone that is allowed on the interface. A deny indicates that any ZoneFilterEntry is a zone that should not be advertised out this interface. No ZoneFilterEntrys indicates that all nets and zones are being advertised.')
wfApplePortMacIPDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 3, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfApplePortMacIPDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfApplePortMacIPDisable.setDescription('Enable/Disable parameter for MacIP.')
wfAppleLclZoneTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 4), )
if mibBuilder.loadTexts: wfAppleLclZoneTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleLclZoneTable.setDescription('The Local Zone table describes a list of zone names s serviced by a particular AppleTalk port/interface. In other words, the list of zone names that are associated with a particular network range.')
wfAppleLclZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 4, 1), ).setIndexNames((0, "Wellfleet-AT-MIB", "wfAppleLclZonePortCircuit"), (0, "Wellfleet-AT-MIB", "wfAppleLclZoneIndex"))
if mibBuilder.loadTexts: wfAppleLclZoneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleLclZoneEntry.setDescription('An entry in the Local Zone table')
wfAppleLclZoneDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleLclZoneDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleLclZoneDelete.setDescription('Create/Delete parameter for adding/deleting a zone name to the Local Zone List for a particular AppleTalk network interface.')
wfAppleLclZonePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleLclZonePortCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleLclZonePortCircuit.setDescription('The circuit number for the corresponding AppleTalk interface /port for this zone list. ')
wfAppleLclZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleLclZoneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleLclZoneIndex.setDescription('A unique value for this zone name.')
wfAppleLclZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleLclZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleLclZoneName.setDescription('One of the local zone names defined for this/ interface. ')
wfAppleAarpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 5), )
if mibBuilder.loadTexts: wfAppleAarpTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAarpTable.setDescription('The AppleTalk Address Translation table contains a mapping of AppleTalk Network addresses to its corresponding physical address.')
wfAppleAarpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 5, 1), ).setIndexNames((0, "Wellfleet-AT-MIB", "wfAppleAarpNet"), (0, "Wellfleet-AT-MIB", "wfAppleAarpNode"), (0, "Wellfleet-AT-MIB", "wfAppleAarpIfIndex"))
if mibBuilder.loadTexts: wfAppleAarpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAarpEntry.setDescription('An entry in the Address Mapping table')
wfAppleAarpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAarpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAarpIfIndex.setDescription('The unique value for this interface/cct. This value is the same interface as identified by the value of ifIndex.')
wfAppleAarpNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAarpNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAarpNet.setDescription("The host's AppleTalk address (Net.Nodeid). This address corresponds to the media-dependent 'physical' address for this host.")
wfAppleAarpNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAarpNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAarpNode.setDescription("The host's AppleTalk address (Net.Nodeid). This address corresponds to the media-dependent 'physical' address for this host.")
wfAppleAarpPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAarpPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAarpPhysAddress.setDescription("The media-dependent 'physical' address.")
wfAppleZipTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 6), )
if mibBuilder.loadTexts: wfAppleZipTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZipTable.setDescription('The Zone Information table for reachable AppleTalk Networks.')
wfAppleZipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 6, 1), ).setIndexNames((0, "Wellfleet-AT-MIB", "wfAppleZipZoneNetStart"), (0, "Wellfleet-AT-MIB", "wfAppleZipIndex"))
if mibBuilder.loadTexts: wfAppleZipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZipEntry.setDescription('An entry in the Zone Information table')
wfAppleZipZoneNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleZipZoneNetStart.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZipZoneNetStart.setDescription('The network that starts the range for this entry.')
wfAppleZipZoneNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleZipZoneNetEnd.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZipZoneNetEnd.setDescription('The network that ends the range for this entry.')
wfAppleZipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleZipIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZipIndex.setDescription('The unique value for this zone name.')
wfAppleZipZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleZipZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZipZoneName.setDescription('The ASCII xone name of this entry.')
wfAppleZipZoneState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleZipZoneState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZipZoneState.setDescription('The state of the ZIP entry.')
wfAppleZoneFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 7), )
if mibBuilder.loadTexts: wfAppleZoneFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZoneFilterTable.setDescription('The zone filter table describes a list of zone names filtered on a given AppleTalk port/interface.')
wfAppleZoneFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 7, 1), ).setIndexNames((0, "Wellfleet-AT-MIB", "wfAppleZoneFilterIndex"))
if mibBuilder.loadTexts: wfAppleZoneFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZoneFilterEntry.setDescription('An entry in the Zone Filter table')
wfAppleZoneFilterDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleZoneFilterDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZoneFilterDelete.setDescription('Create/Delete parameter for adding/deleting a zone name to the filter list for a particular AppleTalk network interface.')
wfAppleZoneFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleZoneFilterCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZoneFilterCircuit.setDescription('The circuit number for the corresponding AppleTalk interface for filtered zone entry. This is only valid if wfAppleZoneFilterCircuitType is RTMP')
wfAppleZoneFilterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleZoneFilterIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZoneFilterIpAddress.setDescription('The IP address for the corresponding AURP interface for filtered zone entry. This is only valid if wfAppleZoneFilterCircuitType is AURP.')
wfAppleZoneFilterCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtmp", 1), ("aurp", 2))).clone('rtmp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleZoneFilterCircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZoneFilterCircuitType.setDescription('The type of the circuit the filter is applied on. If RTMP, then wfAppleZoneFilterCircuit is used. If AURP, then wfAppleZoneFilterIpAddress is used.')
wfAppleZoneFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleZoneFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZoneFilterIndex.setDescription('A unique value for this filtered zone name.')
wfAppleZoneFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 7, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleZoneFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleZoneFilterName.setDescription('One of the zone names filtered on this/ interface.')
wfAppleAurpBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8))
wfAppleAurpBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseDelete.setDescription('Create/Delete parameter for determining whether or not AURP is configured on this box.')
wfAppleAurpBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpBaseDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseDisable.setDescription('Enable/Disable parameter for determining whether or not to startup AURP.')
wfAppleAurpBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseState.setDescription('This parameter relfects the current state of AURP.')
wfAppleAurpBaseDomain = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpBaseDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseDomain.setDescription('The domain identfier for the domain that this router resides in.')
wfAppleAurpBaseIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpBaseIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseIpAddress.setDescription('The IP address configured on this router that AURP should use for all of its connections ')
wfAppleAurpBasePromiscuous = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notpromisc", 1), ("promisc", 2))).clone('notpromisc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpBasePromiscuous.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBasePromiscuous.setDescription('AURP Promiscuous mode not supported.')
wfAppleAurpBaseInAcceptedOpenReqs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpBaseInAcceptedOpenReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseInAcceptedOpenReqs.setDescription('The number of Open Requests that were accepted.')
wfAppleAurpBaseInRejectedOpenReqs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpBaseInRejectedOpenReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseInRejectedOpenReqs.setDescription('The number of Open Requests that were rejected.')
wfAppleAurpBaseInRouterDowns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpBaseInRouterDowns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseInRouterDowns.setDescription('The number of Router Down packets that were received.')
wfAppleAurpBaseInPktsNoPeers = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpBaseInPktsNoPeers.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseInPktsNoPeers.setDescription('The number of packets received from UDP for which there is no valid connection.')
wfAppleAurpBaseInInvalidVerions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpBaseInInvalidVerions.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpBaseInInvalidVerions.setDescription('The number of invalid version error received on this tunnel. ')
wfAppleAurpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9), )
if mibBuilder.loadTexts: wfAppleAurpTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpTable.setDescription('Each AURP connection has an entry in this table')
wfAppleAurpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1), ).setIndexNames((0, "Wellfleet-AT-MIB", "wfAppleAurpEntryIpAddress"))
if mibBuilder.loadTexts: wfAppleAurpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntry.setDescription('An entry in the AURP connection table.')
wfAppleAurpEntryDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryDelete.setDescription('Create/Delete para1meter. Users perform an SNMP SET operation on this object to create/delete an AppleTalk AURP interface. The default is create.')
wfAppleAurpEntryDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryDisable.setDescription('Enable/Disable parameter. Users perforn an SNMP SET operation on this object to enable/disable an AppleTalk AURP interface. Default is enabled.')
wfAppleAurpEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryState.setDescription('The current state of the Aurp Entry.')
wfAppleAurpEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryIpAddress.setDescription('Ip address of the remote AURP router with which the connection will be made')
wfAppleAurpEntryZoneFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("partallow", 3), ("partdeny", 4))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryZoneFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryZoneFilterType.setDescription('controls zone filtering on this interface. An allow indicates that any wfAppleZoneFilterEntry is a zone that is allowed on the interface. A deny indicates that any ZoneFilterEntry is a zone that should not be advertised out this interface. No ZoneFilterEntrys indicates that all nets and zones are being advertised.')
wfAppleAurpEntryTimeoutCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryTimeoutCommand.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryTimeoutCommand.setDescription('The amout of time in seconds to wait for an ack before retrying a command.')
wfAppleAurpEntryRetryCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryRetryCommand.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryRetryCommand.setDescription('The number of attempts at a command before determining that the peer is no longer responding.')
wfAppleAurpEntryUpdateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 604800)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryUpdateRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryUpdateRate.setDescription('The rate at which routing table updates are sent on this connection, in seconds. This value should be a multiple of ten.')
wfAppleAurpEntryLhfTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 31536000)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryLhfTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryLhfTimeout.setDescription('The number of seconds to wait for an RI-Rsp, RI-Upd, or ZI-Rsp before sending a tickle request, in seconds. This value should be a multiple of ten.')
wfAppleAurpEntryHopCountReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryHopCountReduction.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryHopCountReduction.setDescription('Enable/Disable for hop count reduction on this connection.')
wfAppleAurpEntryInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryInterfaceCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInterfaceCost.setDescription('Additional cost to add to hop count as advertised in RI-Rsp and RI-Upd.')
wfAppleAurpEntrySuiFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30720))).clone(namedValues=NamedValues(("all", 30720))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntrySuiFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntrySuiFlags.setDescription("The Send Update Information flags. This value matches the 16 bit field sent in OReq and RI-Req packets. The bits are broken down as follows: 0x4000 = Net Add 0x2000 = Net Delete/Net Route Change 0x1000 = Net Distance Change 0x0800 = Zone Change These should be 'OR'ed together for desired updates. e.g. for all updates 0x4000 | 0x2000 | 0x1000 | 0x8000 = 0x7800 = 30720")
wfAppleAurpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryType.setDescription('Reserved for future use')
wfAppleAurpEntryPeerDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryPeerDomainId.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryPeerDomainId.setDescription("The peer's Domain Indicator.")
wfAppleAurpEntryPeerUpdateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryPeerUpdateRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryPeerUpdateRate.setDescription('The update interval specified by the peer in its Open Response, in tens of seconds.')
wfAppleAurpEntryPeerEnvironment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryPeerEnvironment.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryPeerEnvironment.setDescription("The Environment flags found in the peer's Open Response")
wfAppleAurpEntryPeerSuiFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryPeerSuiFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryPeerSuiFlags.setDescription("The Send Update Information flags found in the peer's Open Request and RI Request.")
wfAppleAurpEntryCliConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryCliConnId.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryCliConnId.setDescription("This connection's client connection ID.")
wfAppleAurpEntrySrvConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntrySrvConnId.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntrySrvConnId.setDescription("This connection's server connection ID.")
wfAppleAurpEntryCliSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryCliSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryCliSeqNum.setDescription("This connection's client sequence number.")
wfAppleAurpEntrySrvSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntrySrvSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntrySrvSeqNum.setDescription("This connection's server sequence number.")
wfAppleAurpEntryCommandRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryCommandRetries.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryCommandRetries.setDescription('The number of commands that were retried.')
wfAppleAurpEntryInDelayedDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInDelayedDuplicates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInDelayedDuplicates.setDescription('The number of AURP packets that were received whose sequence number was one less than that expected.')
wfAppleAurpEntryInInvalidConnIds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInInvalidConnIds.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInInvalidConnIds.setDescription('The number of packets received with bad connection IDs.')
wfAppleAurpEntryInInvalidCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInInvalidCommands.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInInvalidCommands.setDescription('The number of AURP packets received that had an illegal value in the command field.')
wfAppleAurpEntryInInvalidSubCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInInvalidSubCodes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInInvalidSubCodes.setDescription('The number of AURP Zone packets received that had an illegal value in the sub command field.')
wfAppleAurpEntryInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInPkts.setDescription('The total number of packets received on this connection.')
wfAppleAurpEntryOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutPkts.setDescription('The total number of packets transmitted on this connection.')
wfAppleAurpEntryInDdpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInDdpPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInDdpPkts.setDescription('The number of data packets received.')
wfAppleAurpEntryOutDdpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutDdpPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutDdpPkts.setDescription('The number of data packets transmitted.')
wfAppleAurpEntryOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutNoRoutes.setDescription('The number of DDP packets dropped because a route could not be found to their final destination. ')
wfAppleAurpEntryHopCountErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryHopCountErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryHopCountErrors.setDescription('The total number of input DDP datagrams dropped because their hop count would exceed 15.')
wfAppleAurpEntryHopCountAdjustments = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryHopCountAdjustments.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryHopCountAdjustments.setDescription('The total number of input DDP datagrams that had their hop count adjusted (if hop count reduction is enabled).')
wfAppleAurpEntryInAurpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInAurpPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInAurpPkts.setDescription('The number of routing packets received')
wfAppleAurpEntryOutAurpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutAurpPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutAurpPkts.setDescription('The number of routing packets transmitted.')
wfAppleAurpEntryInOpenRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInOpenRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInOpenRequests.setDescription('The number of Open Requests received.')
wfAppleAurpEntryOutOpenRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutOpenRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutOpenRequests.setDescription('The number of Open Requests transmitted.')
wfAppleAurpEntryInOpenResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInOpenResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInOpenResponses.setDescription('The number of Open Responses received.')
wfAppleAurpEntryOutOpenResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutOpenResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutOpenResponses.setDescription('The number of Open Responses transmitted.')
wfAppleAurpEntryInRiRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInRiRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInRiRequests.setDescription('The number of Routing Information Requests received.')
wfAppleAurpEntryOutRiRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutRiRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutRiRequests.setDescription('The number of Routing Information Requests transmitted.')
wfAppleAurpEntryInRiResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInRiResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInRiResponses.setDescription('The number of Routing Information Responses received.')
wfAppleAurpEntryOutRiResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutRiResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutRiResponses.setDescription('The number of Routing Information Responses transmitted.')
wfAppleAurpEntryInRiAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInRiAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInRiAcks.setDescription('The number of Routing Information Acknowledgements received.')
wfAppleAurpEntryOutRiAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutRiAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutRiAcks.setDescription('The number of Routing Information Acknowledgements transmitted.')
wfAppleAurpEntryInRiUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInRiUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInRiUpdates.setDescription('The number of Routing Information Updates received.')
wfAppleAurpEntryOutRiUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutRiUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutRiUpdates.setDescription('The number of Routing Information Updates transmitted.')
wfAppleAurpEntryInUpdateNullEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNullEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNullEvents.setDescription('The number of Null update events received.')
wfAppleAurpEntryOutUpdateNullEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNullEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNullEvents.setDescription('The number of update events transmitted.')
wfAppleAurpEntryInUpdateNetAdds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNetAdds.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNetAdds.setDescription('The number of Net Added update events received.')
wfAppleAurpEntryOutUpdateNetAdds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNetAdds.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNetAdds.setDescription('The number of Net Added update events transmitted.')
wfAppleAurpEntryInUpdateNetDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNetDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNetDeletes.setDescription('The number of Net Deleted update events received.')
wfAppleAurpEntryOutUpdateNetDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNetDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNetDeletes.setDescription('The number of Net Deleted update events transmitted.')
wfAppleAurpEntryInUpdateNetRouteChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNetRouteChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNetRouteChanges.setDescription('The number of Net Route Change update events received.')
wfAppleAurpEntryOutUpdateNetRouteChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNetRouteChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNetRouteChanges.setDescription('The number of Net Route Change update events transmitted.')
wfAppleAurpEntryInUpdateNetDistanceChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNetDistanceChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateNetDistanceChanges.setDescription('The number of Net Distance Change update events received.')
wfAppleAurpEntryOutUpdateNetDistanceChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNetDistanceChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateNetDistanceChanges.setDescription('The number of Net Distance Change update events transmitted.')
wfAppleAurpEntryInUpdateZoneChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateZoneChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateZoneChanges.setDescription('The number of Zone Change update events received.')
wfAppleAurpEntryOutUpdateZoneChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateZoneChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateZoneChanges.setDescription('The number of Zone Change update events transmitted.')
wfAppleAurpEntryInUpdateInvalidEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateInvalidEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInUpdateInvalidEvents.setDescription('The number of invalid update events received.')
wfAppleAurpEntryOutUpdateInvalidEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateInvalidEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutUpdateInvalidEvents.setDescription('The number of invalid update events transmitted.')
wfAppleAurpEntryInZiRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInZiRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInZiRequests.setDescription("The number of Zone Information requests received. (This doesn't include RI-Acks with the SZI flag set).")
wfAppleAurpEntryOutZiRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutZiRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutZiRequests.setDescription('The number of Zone Information requests transmitted.')
wfAppleAurpEntryInZiResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInZiResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInZiResponses.setDescription('The number of Zone Information responses received.')
wfAppleAurpEntryOutZiResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutZiResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutZiResponses.setDescription('The number of Zone Information responses transmitted.')
wfAppleAurpEntryInGdzlRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInGdzlRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInGdzlRequests.setDescription('The number of Get Domain Zone List requests received.')
wfAppleAurpEntryOutGdzlRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutGdzlRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutGdzlRequests.setDescription('The number of Get Domain Zone List requests transmitted.')
wfAppleAurpEntryInGdzlResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInGdzlResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInGdzlResponses.setDescription('The number of Get Domain Zone List responses received.')
wfAppleAurpEntryOutGdzlResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutGdzlResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutGdzlResponses.setDescription('The number of Get Domain Zone List responses transmitted.')
wfAppleAurpEntryInGznRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInGznRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInGznRequests.setDescription('The number of Get Zone Nets requests received.')
wfAppleAurpEntryOutGznRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutGznRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutGznRequests.setDescription('The number of Get Zone Nets requests transmitted.')
wfAppleAurpEntryInGznResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInGznResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInGznResponses.setDescription('The number of Get Zone Nets responses received.')
wfAppleAurpEntryOutGznResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutGznResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutGznResponses.setDescription('The number of Get Zone Nets responses transmitted.')
wfAppleAurpEntryInTickles = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInTickles.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInTickles.setDescription('The number of Tickle Requests received.')
wfAppleAurpEntryOutTickles = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutTickles.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutTickles.setDescription('The number of Tickle Requests transmitted.')
wfAppleAurpEntryInTickleAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInTickleAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInTickleAcks.setDescription('The number of Tickle Acknowledgements received.')
wfAppleAurpEntryOutTickleAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutTickleAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutTickleAcks.setDescription('The number of Tickle Acknowledgements transmitted.')
wfAppleAurpEntryInRouterDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryInRouterDowns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryInRouterDowns.setDescription('The number of Router Down notifications received.')
wfAppleAurpEntryOutRouterDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAurpEntryOutRouterDowns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryOutRouterDowns.setDescription('The number of Router Down notifications transmitted.')
wfAppleAurpEntryZoneFiltDfltZone = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 9, 1, 80), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppleAurpEntryZoneFiltDfltZone.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAurpEntryZoneFiltDfltZone.setDescription('The default zone to give to networks that have all of their real zones filtered (by PARTDENY or PARTALLOW zone filtering) out this connection.')
wfAppleAggrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10))
wfAppleAggrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrInPkts.setDescription('The total number of datagrams received')
wfAppleAggrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrOutPkts.setDescription('The total number of datagrams sent (includes datagrams forwarded)')
wfAppleAggrFwdDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrFwdDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrFwdDatagrams.setDescription('The total number of datagrams forwarded')
wfAppleAggrInXsumErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrInXsumErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrInXsumErrs.setDescription('The total number of datagrams destined for a local entity that were dropped because of a checksum error.')
wfAppleAggrInHopCountErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrInHopCountErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrInHopCountErrs.setDescription('The total number of datagrams that could not be forwarded because they would exceed the hop-count limit(15).')
wfAppleAggrInTooShorts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrInTooShorts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrInTooShorts.setDescription('The total number of input DDP datagrams dropped because the received data length was less than the data length specified in the DDP header or the received data length was less than the length of the expected DDP header.')
wfAppleAggrInTooLongs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrInTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrInTooLongs.setDescription('The total number of input DDP datagrams dropped because the received data length was greater than the data length specified in the DDP header or because they exceeded the maximum DDP datagram size.')
wfAppleAggrOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrOutNoRoutes.setDescription('The total number of datagrams queued for transmission thet were discarded because the destination was unreachable.')
wfAppleAggrInLocalDests = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrInLocalDests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrInLocalDests.setDescription('The total number of datagrams destined for a local entity (not forwarded).')
wfAppleAggrInRtmps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrInRtmps.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrInRtmps.setDescription('The total number of RTMP packets received')
wfAppleAggrOutRtmps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 4, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppleAggrOutRtmps.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppleAggrOutRtmps.setDescription('The total number of RTMP packets sent')
mibBuilder.exportSymbols("Wellfleet-AT-MIB", wfAppleZoneFilterIndex=wfAppleZoneFilterIndex, wfAppleAurpEntryOutTickles=wfAppleAurpEntryOutTickles, wfAppleZoneFilterEntry=wfAppleZoneFilterEntry, wfAppleMacIPBaseDelete=wfAppleMacIPBaseDelete, wfApplePortDdpChecksumErrors=wfApplePortDdpChecksumErrors, wfAppleAurpEntryDisable=wfAppleAurpEntryDisable, wfApplePortNbpOutForwardRequests=wfApplePortNbpOutForwardRequests, wfAppleAurpEntryRetryCommand=wfAppleAurpEntryRetryCommand, wfApplePortNbpInForwardRequests=wfApplePortNbpInForwardRequests, wfApplePortZipInZipReplies=wfApplePortZipInZipReplies, wfAppleAurpEntryOutRiAcks=wfAppleAurpEntryOutRiAcks, wfAppleAurpEntryPeerDomainId=wfAppleAurpEntryPeerDomainId, wfAppleAurpEntryInRouterDowns=wfAppleAurpEntryInRouterDowns, wfApplePortCurDfltZone=wfApplePortCurDfltZone, wfAppleMacIPZone=wfAppleMacIPZone, wfAppleAurpEntryInUpdateNetDistanceChanges=wfAppleAurpEntryInUpdateNetDistanceChanges, wfAppleAggrOutNoRoutes=wfAppleAggrOutNoRoutes, wfAppleAurpEntryInInvalidConnIds=wfAppleAurpEntryInInvalidConnIds, wfMacIPLowerIpAddress1=wfMacIPLowerIpAddress1, wfApplePortDdpInReceives=wfApplePortDdpInReceives, wfApplePortAarpReqRxs=wfApplePortAarpReqRxs, wfApplePortNetStart=wfApplePortNetStart, wfApplePortZipInZipExtendedReplies=wfApplePortZipInZipExtendedReplies, wfAppleZoneFilterTable=wfAppleZoneFilterTable, wfApplePortDisable=wfApplePortDisable, wfAppleZipZoneNetEnd=wfAppleZipZoneNetEnd, wfAppleAurpEntryOutZiResponses=wfAppleAurpEntryOutZiResponses, wfAppleAggrStats=wfAppleAggrStats, wfAppleAurpEntryPeerEnvironment=wfAppleAurpEntryPeerEnvironment, wfApplePortDdpNoProtocolHandlers=wfApplePortDdpNoProtocolHandlers, wfApplePortNodeId=wfApplePortNodeId, wfAppleAurpBaseState=wfAppleAurpBaseState, wfAppleAurpBaseIpAddress=wfAppleAurpBaseIpAddress, wfAppleAurpEntrySrvConnId=wfAppleAurpEntrySrvConnId, wfAppleAurpBaseDisable=wfAppleAurpBaseDisable, wfApplePortRtmpRoutingTableOverflows=wfApplePortRtmpRoutingTableOverflows, wfApplePortZipZoneOutInvalids=wfApplePortZipZoneOutInvalids, wfAppleAurpEntryOutGdzlRequests=wfAppleAurpEntryOutGdzlRequests, wfAppleBaseTotalNets=wfAppleBaseTotalNets, wfAppleZipZoneState=wfAppleZipZoneState, wfApplePortNbpOutLookUpRequests=wfApplePortNbpOutLookUpRequests, wfAppleAurpBaseDomain=wfAppleAurpBaseDomain, wfAppleAurpBaseInPktsNoPeers=wfAppleAurpBaseInPktsNoPeers, wfAppleAurpEntryInUpdateNetRouteChanges=wfAppleAurpEntryInUpdateNetRouteChanges, wfAppleAggrFwdDatagrams=wfAppleAggrFwdDatagrams, wfApplePortRtmpRouteDeletes=wfApplePortRtmpRouteDeletes, wfAppleZipEntry=wfAppleZipEntry, wfAppleBaseDebugLevel=wfAppleBaseDebugLevel, wfAppleRtmpEntry=wfAppleRtmpEntry, wfAppleLclZoneName=wfAppleLclZoneName, wfAppleAurpEntryOutRiRequests=wfAppleAurpEntryOutRiRequests, wfAppleRtmpPort=wfAppleRtmpPort, wfApplePortRtmpInRequestPkts=wfApplePortRtmpInRequestPkts, wfAppleAurpEntryInDelayedDuplicates=wfAppleAurpEntryInDelayedDuplicates, wfAppleBaseEstimatedHosts=wfAppleBaseEstimatedHosts, wfAppleAurpEntryOutUpdateNetRouteChanges=wfAppleAurpEntryOutUpdateNetRouteChanges, wfApplePortZipInGetLocalZones=wfApplePortZipInGetLocalZones, wfApplePortNbpOutBroadcastRequests=wfApplePortNbpOutBroadcastRequests, wfApplePortZipInGetNetInfos=wfApplePortZipInGetNetInfos, wfApplePortZipAddressInvalids=wfApplePortZipAddressInvalids, wfAppleZoneFilterCircuit=wfAppleZoneFilterCircuit, wfAppleAggrInPkts=wfAppleAggrInPkts, wfAppleAurpEntryInterfaceCost=wfAppleAurpEntryInterfaceCost, wfAppleAurpTable=wfAppleAurpTable, wfAppleAurpEntrySrvSeqNum=wfAppleAurpEntrySrvSeqNum, wfAppleAurpEntryUpdateRate=wfAppleAurpEntryUpdateRate, wfAppleAurpEntryOutDdpPkts=wfAppleAurpEntryOutDdpPkts, wfAppleAurpEntryOutUpdateZoneChanges=wfAppleAurpEntryOutUpdateZoneChanges, wfAppleRtmpProto=wfAppleRtmpProto, wfAppleAurpEntryOutOpenRequests=wfAppleAurpEntryOutOpenRequests, wfApplePortCksumDisable=wfApplePortCksumDisable, wfApplePortZipInErrors=wfApplePortZipInErrors, wfAppleZoneFilterName=wfAppleZoneFilterName, wfMacIPUpperIpAddress2=wfMacIPUpperIpAddress2, wfApplePortZipOutGetMyZoneReplies=wfApplePortZipOutGetMyZoneReplies, wfAppleAurpEntryOutUpdateNetAdds=wfAppleAurpEntryOutUpdateNetAdds, wfAppleRtmpNetStart=wfAppleRtmpNetStart, wfApplePortGniForever=wfApplePortGniForever, wfAppleAarpNode=wfAppleAarpNode, wfAppleZoneFilterIpAddress=wfAppleZoneFilterIpAddress, wfApplePortNbpInLookUpRequests=wfApplePortNbpInLookUpRequests, wfAppleAurpEntryState=wfAppleAurpEntryState, wfAppleLclZoneIndex=wfAppleLclZoneIndex, wfAppleAurpEntryHopCountReduction=wfAppleAurpEntryHopCountReduction, wfAppleAurpBasePromiscuous=wfAppleAurpBasePromiscuous, wfAppleRtmpNextHopNet=wfAppleRtmpNextHopNet, wfApplePortWanSplitHorizonDisable=wfApplePortWanSplitHorizonDisable, wfApplePortTrEndStation=wfApplePortTrEndStation, wfAppleAurpEntryZoneFiltDfltZone=wfAppleAurpEntryZoneFiltDfltZone, wfAppleAurpEntryInTickleAcks=wfAppleAurpEntryInTickleAcks, wfMacIPLowerIpAddress3=wfMacIPLowerIpAddress3, wfApplePortZipInZipQueries=wfApplePortZipInZipQueries, wfAppleAurpBaseDelete=wfAppleAurpBaseDelete, wfAppleAurpEntryInUpdateNetAdds=wfAppleAurpEntryInUpdateNetAdds, wfAppleRtmpState=wfAppleRtmpState, wfAppleBaseTotalZones=wfAppleBaseTotalZones, wfAppleAurpBaseInInvalidVerions=wfAppleAurpBaseInInvalidVerions, wfAppleAurpEntryOutUpdateInvalidEvents=wfAppleAurpEntryOutUpdateInvalidEvents, wfAppleAarpEntry=wfAppleAarpEntry, wfAppleAarpNet=wfAppleAarpNet, wfAppleAurpEntry=wfAppleAurpEntry, wfAppleAurpEntryZoneFilterType=wfAppleAurpEntryZoneFilterType, wfAppleAurpEntryInUpdateNetDeletes=wfAppleAurpEntryInUpdateNetDeletes, wfAppleAurpEntryOutZiRequests=wfAppleAurpEntryOutZiRequests, wfAppleBase=wfAppleBase, wfApplePortRtmpNextIREqualChanges=wfApplePortRtmpNextIREqualChanges, wfMacIPUpperIpAddress1=wfMacIPUpperIpAddress1, wfApplePortNetEnd=wfApplePortNetEnd, wfApplePortDdpBroadcastErrors=wfApplePortDdpBroadcastErrors, wfAppleAurpEntryType=wfAppleAurpEntryType, wfApplePortRtmpInDataPkts=wfApplePortRtmpInDataPkts, wfAppleZipIndex=wfAppleZipIndex, wfAppleAurpEntryCliConnId=wfAppleAurpEntryCliConnId, wfAppleAurpEntryCliSeqNum=wfAppleAurpEntryCliSeqNum, wfAppleAurpEntryOutUpdateNullEvents=wfAppleAurpEntryOutUpdateNullEvents, wfAppleAurpEntryOutPkts=wfAppleAurpEntryOutPkts, wfAppleAurpBaseInAcceptedOpenReqs=wfAppleAurpBaseInAcceptedOpenReqs, wfAppleAurpEntryOutRouterDowns=wfAppleAurpEntryOutRouterDowns, wfApplePortEchoReplies=wfApplePortEchoReplies, wfApplePortNbpInLookUpReplies=wfApplePortNbpInLookUpReplies, wfAppleAurpEntryPeerSuiFlags=wfAppleAurpEntryPeerSuiFlags, wfAppleRtmpAurpNextHopIpAddress=wfAppleRtmpAurpNextHopIpAddress, wfAppleAurpEntryLhfTimeout=wfAppleAurpEntryLhfTimeout, wfApplePortZipOutGetNetInfoReplies=wfApplePortZipOutGetNetInfoReplies, wfAppleAggrInLocalDests=wfAppleAggrInLocalDests, wfAppleBaseHomedPort=wfAppleBaseHomedPort, wfAppleZipTable=wfAppleZipTable, wfApplePortAarpProbeTxs=wfApplePortAarpProbeTxs, wfAppleAurpEntryInOpenResponses=wfAppleAurpEntryInOpenResponses, wfAppleAurpEntryInUpdateNullEvents=wfAppleAurpEntryInUpdateNullEvents, wfAppleMacIPBaseDisable=wfAppleMacIPBaseDisable, wfAppleAurpEntryInGdzlResponses=wfAppleAurpEntryInGdzlResponses, wfAppleMacIPBaseState=wfAppleMacIPBaseState, wfAppleAurpEntryInGznRequests=wfAppleAurpEntryInGznRequests, wfAppleAurpEntryPeerUpdateRate=wfAppleAurpEntryPeerUpdateRate, wfAppleAurpEntryOutAurpPkts=wfAppleAurpEntryOutAurpPkts, wfAppleLclZoneEntry=wfAppleLclZoneEntry, wfAppleAurpEntryInRiRequests=wfAppleAurpEntryInRiRequests, wfApplePortType=wfApplePortType, wfAppleRtmpNextHopNode=wfAppleRtmpNextHopNode, wfAppleAurpEntryInInvalidCommands=wfAppleAurpEntryInInvalidCommands, wfAppleMacIPAddressTimeOut=wfAppleMacIPAddressTimeOut, wfAppleAurpEntryOutUpdateNetDistanceChanges=wfAppleAurpEntryOutUpdateNetDistanceChanges, wfAppleAurpEntryOutNoRoutes=wfAppleAurpEntryOutNoRoutes, wfApplePortZoneFilterType=wfApplePortZoneFilterType, wfAppleAggrInRtmps=wfAppleAggrInRtmps, wfMacIPAddress3=wfMacIPAddress3, wfApplePortAarpProbeRxs=wfApplePortAarpProbeRxs, wfApplePortDdpOutNoRoutes=wfApplePortDdpOutNoRoutes, wfApplePortAarpRspTxs=wfApplePortAarpRspTxs, wfAppleAurpEntryHopCountErrors=wfAppleAurpEntryHopCountErrors, wfAppleAurpEntryInGznResponses=wfAppleAurpEntryInGznResponses, wfAppleAggrInXsumErrs=wfAppleAggrInXsumErrs, wfAppleAarpIfIndex=wfAppleAarpIfIndex, wfAppleAurpEntryInTickles=wfAppleAurpEntryInTickles, wfAppleAggrInTooShorts=wfAppleAggrInTooShorts, wfAppleAurpEntryCommandRetries=wfAppleAurpEntryCommandRetries, wfApplePortNbpInErrors=wfApplePortNbpInErrors, wfApplePortMacAddress=wfApplePortMacAddress, wfAppleRtmpTable=wfAppleRtmpTable, wfApplePortDdpHopCountErrors=wfApplePortDdpHopCountErrors, wfApplePortEntry=wfApplePortEntry, wfApplePortDdpTooShortErrors=wfApplePortDdpTooShortErrors, wfAppleAurpEntryInZiResponses=wfAppleAurpEntryInZiResponses, wfAppleAurpBase=wfAppleAurpBase, wfApplePortAarpFlush=wfApplePortAarpFlush, wfAppleAurpEntryInInvalidSubCodes=wfAppleAurpEntryInInvalidSubCodes, wfAppleRtmpHops=wfAppleRtmpHops, wfAppleAurpBaseInRejectedOpenReqs=wfAppleAurpBaseInRejectedOpenReqs, wfAppleAurpEntryHopCountAdjustments=wfAppleAurpEntryHopCountAdjustments, wfApplePortNbpInBroadcastRequests=wfApplePortNbpInBroadcastRequests, wfAppleAurpEntryInPkts=wfAppleAurpEntryInPkts, wfAppleAarpTable=wfAppleAarpTable, wfAppleAurpEntryInRiAcks=wfAppleAurpEntryInRiAcks, wfAppleAurpEntryOutTickleAcks=wfAppleAurpEntryOutTickleAcks, wfAppleAurpEntryOutUpdateNetDeletes=wfAppleAurpEntryOutUpdateNetDeletes, wfAppleAurpEntryDelete=wfAppleAurpEntryDelete, wfAppleAurpEntryOutGznRequests=wfAppleAurpEntryOutGznRequests, wfApplePortZipOutZipQueries=wfApplePortZipOutZipQueries, wfAppleMacIPServerRequests=wfAppleMacIPServerRequests, wfApplePortDdpOutRequests=wfApplePortDdpOutRequests, wfApplePortDdpInLocalDatagrams=wfApplePortDdpInLocalDatagrams, wfAppleBaseDelete=wfAppleBaseDelete, wfAppleRtmpNetEnd=wfAppleRtmpNetEnd, wfApplePortState=wfApplePortState, wfApplePortRtmpNextIRLessChanges=wfApplePortRtmpNextIRLessChanges, wfAppleAggrOutPkts=wfAppleAggrOutPkts, wfApplePortCurNetEnd=wfApplePortCurNetEnd, wfApplePortCurNodeId=wfApplePortCurNodeId, wfApplePortCurNetStart=wfApplePortCurNetStart, wfApplePortZipInGetNetInfoReplies=wfApplePortZipInGetNetInfoReplies, wfApplePortDdpTooLongErrors=wfApplePortDdpTooLongErrors, wfApplePortDelete=wfApplePortDelete, wfAppleAurpEntrySuiFlags=wfAppleAurpEntrySuiFlags, wfApplePortZipOutGetLocalZoneReplies=wfApplePortZipOutGetLocalZoneReplies, wfApplePortEchoRequests=wfApplePortEchoRequests, wfAppleBaseState=wfAppleBaseState, wfApplePortMacIPDisable=wfApplePortMacIPDisable, wfApplePortZipOutZipExtendedReplies=wfApplePortZipOutZipExtendedReplies, wfAppleAggrInHopCountErrs=wfAppleAggrInHopCountErrs, wfAppleAarpPhysAddress=wfAppleAarpPhysAddress, wfApplePortZipOutGetZoneListReplies=wfApplePortZipOutGetZoneListReplies, wfApplePortInterfaceCost=wfApplePortInterfaceCost, wfApplePortZipInGetMyZones=wfApplePortZipInGetMyZones, wfAppleAurpEntryInRiResponses=wfAppleAurpEntryInRiResponses, wfAppleAurpEntryInAurpPkts=wfAppleAurpEntryInAurpPkts, wfAppleBaseEstimatedNets=wfAppleBaseEstimatedNets, wfAppleBaseTotalZoneNames=wfAppleBaseTotalZoneNames, wfAppleAurpEntryOutGznResponses=wfAppleAurpEntryOutGznResponses, wfAppleAggrOutRtmps=wfAppleAggrOutRtmps, wfApplePortNbpOutLookUpReplies=wfApplePortNbpOutLookUpReplies, wfAppleAurpEntryInUpdateInvalidEvents=wfAppleAurpEntryInUpdateInvalidEvents, wfAppleBaseDisable=wfAppleBaseDisable, wfApplePortNetwork=wfApplePortNetwork, wfMacIPAddress2=wfMacIPAddress2, wfApplePortTable=wfApplePortTable, wfApplePortWanBroadcastAddress=wfApplePortWanBroadcastAddress, wfAppleAurpEntryOutGdzlResponses=wfAppleAurpEntryOutGdzlResponses, wfAppleAurpEntryInZiRequests=wfAppleAurpEntryInZiRequests, wfMacIPUpperIpAddress3=wfMacIPUpperIpAddress3, wfAppleAurpEntryInOpenRequests=wfAppleAurpEntryInOpenRequests, wfAppleAurpEntryInGdzlRequests=wfAppleAurpEntryInGdzlRequests, wfApplePortAarpRspRxs=wfApplePortAarpRspRxs, wfAppleAurpEntryInRiUpdates=wfAppleAurpEntryInRiUpdates, wfAppleAurpBaseInRouterDowns=wfAppleAurpBaseInRouterDowns, wfApplePortZipZoneConflictErrors=wfApplePortZipZoneConflictErrors, wfApplePortCurMacAddress=wfApplePortCurMacAddress, wfApplePortRtmpOutDataPkts=wfApplePortRtmpOutDataPkts, wfApplePortZipOutZipReplies=wfApplePortZipOutZipReplies, wfAppleAurpEntryOutRiUpdates=wfAppleAurpEntryOutRiUpdates, wfAppleAurpEntryOutRiResponses=wfAppleAurpEntryOutRiResponses, wfAppleAggrInTooLongs=wfAppleAggrInTooLongs, wfAppleBaseDdpQueLen=wfAppleBaseDdpQueLen, wfAppleZoneFilterCircuitType=wfAppleZoneFilterCircuitType, wfAppleBaseTotalAarpEntries=wfAppleBaseTotalAarpEntries, wfApplePortCircuit=wfApplePortCircuit, wfAppleAurpEntryTimeoutCommand=wfAppleAurpEntryTimeoutCommand, wfMacIPAddress1=wfMacIPAddress1, wfApplePortRtmpNetworkMismatchErrors=wfApplePortRtmpNetworkMismatchErrors, wfAppleLclZonePortCircuit=wfAppleLclZonePortCircuit, wfAppleZipZoneNetStart=wfAppleZipZoneNetStart, wfApplePortZipOutGetNetInfos=wfApplePortZipOutGetNetInfos, wfAppleLclZoneTable=wfAppleLclZoneTable, wfAppleZoneFilterDelete=wfAppleZoneFilterDelete, wfAppleAurpEntryInUpdateZoneChanges=wfAppleAurpEntryInUpdateZoneChanges, wfAppleAurpEntryInDdpPkts=wfAppleAurpEntryInDdpPkts, wfAppleAurpEntryOutOpenResponses=wfAppleAurpEntryOutOpenResponses, wfAppleLclZoneDelete=wfAppleLclZoneDelete, wfApplePortAarpReqTxs=wfApplePortAarpReqTxs, wfApplePortDfltZone=wfApplePortDfltZone, wfAppleAurpEntryIpAddress=wfAppleAurpEntryIpAddress, wfAppleZipZoneName=wfAppleZipZoneName, wfApplePortZipInGetZoneLists=wfApplePortZipInGetZoneLists, wfAppleMacIPServerResponces=wfAppleMacIPServerResponces)
mibBuilder.exportSymbols("Wellfleet-AT-MIB", wfApplePortDdpForwRequests=wfApplePortDdpForwRequests, wfMacIPLowerIpAddress2=wfMacIPLowerIpAddress2, wfApplePortNbpRegistrationFailures=wfApplePortNbpRegistrationFailures, wfApplePortCurNetwork=wfApplePortCurNetwork)
