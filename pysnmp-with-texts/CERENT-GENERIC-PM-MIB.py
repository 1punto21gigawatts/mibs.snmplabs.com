#
# PySNMP MIB module CERENT-GENERIC-PM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CERENT-GENERIC-PM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
cerentRequirements, cerentGeneric, cerentModules = mibBuilder.importSymbols("CERENT-GLOBAL-REGISTRY", "cerentRequirements", "cerentGeneric", "cerentModules")
CerentAlarmThresholdMonitorType, CerentMonitorType, CerentPeriod, CerentLocation = mibBuilder.importSymbols("CERENT-TC", "CerentAlarmThresholdMonitorType", "CerentMonitorType", "CerentPeriod", "CerentLocation")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Integer32, Gauge32, Counter64, ObjectIdentity, NotificationType, MibIdentifier, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Gauge32", "Counter64", "ObjectIdentity", "NotificationType", "MibIdentifier", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "ModuleIdentity", "Counter32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
cerentGenericPmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3607, 1, 10, 130))
cerentGenericPmMIB.setRevisions(('2004-10-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cerentGenericPmMIB.setRevisionsDescriptions(('Inital version of the module',))
if mibBuilder.loadTexts: cerentGenericPmMIB.setLastUpdated('200410130000Z')
if mibBuilder.loadTexts: cerentGenericPmMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cerentGenericPmMIB.setContactInfo(' support@Cisco.com Postal: Cisco Systems 1450 N. McDowell Blvd. Petaluma, CA 94954 USA Tel: +1-877-323-7368')
if mibBuilder.loadTexts: cerentGenericPmMIB.setDescription('This module defines objects for managing generic thresholds and performance monitoring information')
cerentGenericPmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 90))
cerentGenericPmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 90, 10), )
if mibBuilder.loadTexts: cerentGenericPmThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdTable.setDescription('This table contains one row per performance monitoring threshold.')
cerentGenericPmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 90, 10, 1), ).setIndexNames((0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmThresholdIndex"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmThresholdMonitorType"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmThresholdLocation"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmThresholdPeriod"))
if mibBuilder.loadTexts: cerentGenericPmThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdEntry.setDescription('Row definition for cerentGenericPmThresholdTable')
cerentGenericPmThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cerentGenericPmThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdIndex.setDescription('Identifies each entry in Threshold table. May not start with one and there will be some missing numbers.')
cerentGenericPmThresholdMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 10, 1, 20), CerentMonitorType())
if mibBuilder.loadTexts: cerentGenericPmThresholdMonitorType.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdMonitorType.setDescription('This object indicates the type of metric monitored.')
cerentGenericPmThresholdLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 10, 1, 30), CerentLocation())
if mibBuilder.loadTexts: cerentGenericPmThresholdLocation.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdLocation.setDescription('This indicates if the threshold value represented by this row is for near or far end')
cerentGenericPmThresholdPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 10, 1, 40), CerentPeriod())
if mibBuilder.loadTexts: cerentGenericPmThresholdPeriod.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdPeriod.setDescription('The sampling interval period is indicated here')
cerentGenericPmThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 10, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmThresholdValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdValue.setDescription('The lower word value of the threshold that was provisioned by the NMS')
cerentGenericPmThresholdOverFlowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 10, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmThresholdOverFlowValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdOverFlowValue.setDescription('The higher word value of the threshold that was provisioned by the NMS')
cerentGenericPmThresholdHCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 10, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmThresholdHCValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdHCValue.setDescription('The value of this object will be the 64 bit threshold that was provisioned by the NMS')
cerentGenericPmStatsCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20), )
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentTable.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentTable.setDescription('This table holds all the performance Monitoring statistics for current sampling period.')
cerentGenericPmStatsCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1), ).setIndexNames((0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentIndex"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentType"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentLocation"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentPeriod"))
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentEntry.setDescription('Row definition for cerentGenericPmStatsCurrentTable')
cerentGenericPmStatsCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentIndex.setDescription('Identifies each entry in performance monitor table. May not start with one and there will be some missing numbers.')
cerentGenericPmStatsCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1, 20), CerentMonitorType())
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentType.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentType.setDescription('This object indicates the type of metric monitored.')
cerentGenericPmStatsCurrentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1, 30), CerentLocation())
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentLocation.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentLocation.setDescription('This indicates if the threshold value represented by this row is for near or far end')
cerentGenericPmStatsCurrentPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1, 40), CerentPeriod())
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentPeriod.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentPeriod.setDescription('The sampling interval period is indicated here')
cerentGenericPmStatsCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentValue.setDescription('The counter associated with this monitor type for this entity in the in the current interval of duration defined by cerentGenericPmStatsPeriod')
cerentGenericPmStatsCurrentOverFlowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentOverFlowValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentOverFlowValue.setDescription('The counter holds the higher ordered value associated with this monitor type for this entity in the in the current interval of duration defined by cerentGenericPmStatsPeriod')
cerentGenericPmStatsCurrentHCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentHCValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentHCValue.setDescription('The 64 bit counter associated with this monitor type for this entity in the in the current interval of duration defined by cerentGenericPmStatsCurrentPeriod')
cerentGenericPmStatsCurrentValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1, 80), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentValidData.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentValidData.setDescription('This value indicates if the data for the current sampling period is valid')
cerentGenericPmStatsCurrentValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 20, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentValidIntervals.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentValidIntervals.setDescription('This objects specifies the number of contiguous intervals for which the valid values are available for this performance monitoring type.')
cerentGenericPmStatsIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30), )
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalTable.setDescription('This table holds all the performance Monitoring statistics for completed intervals')
cerentGenericPmStatsIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1), ).setIndexNames((0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalIndex"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalType"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalLocation"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalPeriod"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalNumber"))
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalEntry.setDescription('Row definition for cerentGenericPmStatsIntervalTable')
cerentGenericPmStatsIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalIndex.setDescription('Identifies each entry in performance monitor table. May not start with one and there will be some missing numbers.')
cerentGenericPmStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1, 20), CerentMonitorType())
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalType.setDescription('This object indicates the type of metric monitored.')
cerentGenericPmStatsIntervalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1, 30), CerentLocation())
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalLocation.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalLocation.setDescription('This indicates if the threshold value represented by this row is for near or far end')
cerentGenericPmStatsIntervalPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1, 40), CerentPeriod())
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalPeriod.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalPeriod.setDescription('The sampling interval period is indicated here')
cerentGenericPmStatsIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the statistics is available. The interval identified by 1 is the most recently completed interval and the interval identified by N is the interval immediately preceding the one identified by N-1.')
cerentGenericPmStatsIntervalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalValue.setDescription('The counter associated with this monitor type for this entity in the in a particular interval of duration defined by cerentGenericPmStatsIntervalPeriod')
cerentGenericPmStatsIntervalOverFlowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalOverFlowValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalOverFlowValue.setDescription('The higher order 32 bit value of the counter associated with this monitor type for this entity in the in a particular interval of duration defined by cerentGenericPmStatsIntervalNumber')
cerentGenericPmStatsIntervalHCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalHCValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalHCValue.setDescription('The 64-bit counter associated with this monitor type for this entity in the in a particular interval of duration defined by cerentGenericPmStatsIntervalPeriod')
cerentGenericPmStatsIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 30, 1, 90), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalValidData.setDescription('This value indicates if the data for this interval is valid')
cerentGenericPmAlarmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 90, 40), )
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdTable.setDescription('This table contains one row per performance monitoring AlarmThreshold.')
cerentGenericPmAlarmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 90, 40, 1), ).setIndexNames((0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmAlarmThresholdIndex"), (0, "CERENT-GENERIC-PM-MIB", "cerentGenericPmAlarmThresholdMonitorType"))
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdEntry.setDescription('Row definition for cerentGenericPmAlarmThresoldTable')
cerentGenericPmAlarmThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 40, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdIndex.setDescription('Identifies each entry in AlarmThreshold table. May not start with one and there will be some missing numbers.')
cerentGenericPmAlarmThresholdMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 40, 1, 20), CerentAlarmThresholdMonitorType())
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdMonitorType.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdMonitorType.setDescription('This object indicates the type of metric monitored.')
cerentGenericPmAlarmThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 40, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdValue.setDescription('The lower word value of the AlarmThreshold that was provisioned by the NMS')
cerentGenericPmAlarmThresholdOverFlowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 40, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdOverFlowValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdOverFlowValue.setDescription('The higher word value of the AlarmThreshold that was provisioned by the NMS')
cerentGenericPmAlarmThresholdHCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 90, 40, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdHCValue.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdHCValue.setDescription('The value of this object will be the 64 bit AlarmThreshold that was provisioned by the NMS')
cerentGenericPmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 80))
cerentGenericPmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 80, 1))
cerentGenericPmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 80, 2))
cerentGenericPmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3607, 5, 80, 1, 1)).setObjects(("CERENT-GENERIC-PM-MIB", "cerentGenericPmThresholdGroup"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentGroup"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentGenericPmMIBCompliance = cerentGenericPmMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmMIBCompliance.setDescription('Describes the requirements for conformance to the High Capacity Media Independent Group.')
cerentGenericPmThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 80, 2, 10)).setObjects(("CERENT-GENERIC-PM-MIB", "cerentGenericPmThresholdValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmThresholdOverFlowValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmThresholdHCValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentGenericPmThresholdGroup = cerentGenericPmThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmThresholdGroup.setDescription('The objects for storing all the current alarm thresholds ')
cerentGenericPmStatsCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 80, 2, 20)).setObjects(("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentOverFlowValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentHCValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentValidData"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsCurrentValidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentGenericPmStatsCurrentGroup = cerentGenericPmStatsCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsCurrentGroup.setDescription('The objects for storing all the performance montitoring statistics')
cerentGenericPmStatsIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 80, 2, 30)).setObjects(("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalOverFlowValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalHCValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmStatsIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentGenericPmStatsIntervalGroup = cerentGenericPmStatsIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmStatsIntervalGroup.setDescription('The objects for storing all the performance montitoring statistics')
cerentGenericPmAlarmThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 80, 2, 40)).setObjects(("CERENT-GENERIC-PM-MIB", "cerentGenericPmAlarmThresholdValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmAlarmThresholdOverFlowValue"), ("CERENT-GENERIC-PM-MIB", "cerentGenericPmAlarmThresholdHCValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentGenericPmAlarmThresholdGroup = cerentGenericPmAlarmThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: cerentGenericPmAlarmThresholdGroup.setDescription('The objects for storing all the current alarm thresholds ')
mibBuilder.exportSymbols("CERENT-GENERIC-PM-MIB", cerentGenericPmMIBConformance=cerentGenericPmMIBConformance, cerentGenericPmMIB=cerentGenericPmMIB, cerentGenericPmStatsIntervalOverFlowValue=cerentGenericPmStatsIntervalOverFlowValue, cerentGenericPmThresholdPeriod=cerentGenericPmThresholdPeriod, cerentGenericPmStatsCurrentValidIntervals=cerentGenericPmStatsCurrentValidIntervals, cerentGenericPmThresholdMonitorType=cerentGenericPmThresholdMonitorType, cerentGenericPmStatsCurrentValidData=cerentGenericPmStatsCurrentValidData, cerentGenericPmMIBCompliance=cerentGenericPmMIBCompliance, cerentGenericPmStatsCurrentOverFlowValue=cerentGenericPmStatsCurrentOverFlowValue, cerentGenericPmAlarmThresholdValue=cerentGenericPmAlarmThresholdValue, cerentGenericPmAlarmThresholdGroup=cerentGenericPmAlarmThresholdGroup, cerentGenericPmStatsIntervalTable=cerentGenericPmStatsIntervalTable, cerentGenericPmMIBGroups=cerentGenericPmMIBGroups, cerentGenericPmThresholdGroup=cerentGenericPmThresholdGroup, cerentGenericPmStatsIntervalEntry=cerentGenericPmStatsIntervalEntry, cerentGenericPmThresholdValue=cerentGenericPmThresholdValue, PYSNMP_MODULE_ID=cerentGenericPmMIB, cerentGenericPmStatsCurrentValue=cerentGenericPmStatsCurrentValue, cerentGenericPmStatsIntervalHCValue=cerentGenericPmStatsIntervalHCValue, cerentGenericPmAlarmThresholdOverFlowValue=cerentGenericPmAlarmThresholdOverFlowValue, cerentGenericPmMIBCompliances=cerentGenericPmMIBCompliances, cerentGenericPmThresholdHCValue=cerentGenericPmThresholdHCValue, cerentGenericPmStatsCurrentEntry=cerentGenericPmStatsCurrentEntry, cerentGenericPmStatsCurrentPeriod=cerentGenericPmStatsCurrentPeriod, cerentGenericPmStatsIntervalValue=cerentGenericPmStatsIntervalValue, cerentGenericPmThresholdOverFlowValue=cerentGenericPmThresholdOverFlowValue, cerentGenericPmStatsCurrentLocation=cerentGenericPmStatsCurrentLocation, cerentGenericPmAlarmThresholdTable=cerentGenericPmAlarmThresholdTable, cerentGenericPmAlarmThresholdEntry=cerentGenericPmAlarmThresholdEntry, cerentGenericPmStatsIntervalGroup=cerentGenericPmStatsIntervalGroup, cerentGenericPmStatsCurrentTable=cerentGenericPmStatsCurrentTable, cerentGenericPmStatsCurrentGroup=cerentGenericPmStatsCurrentGroup, cerentGenericPmStatsIntervalLocation=cerentGenericPmStatsIntervalLocation, cerentGenericPmAlarmThresholdHCValue=cerentGenericPmAlarmThresholdHCValue, cerentGenericPmStatsIntervalNumber=cerentGenericPmStatsIntervalNumber, cerentGenericPmThresholdTable=cerentGenericPmThresholdTable, cerentGenericPmStatsIntervalPeriod=cerentGenericPmStatsIntervalPeriod, cerentGenericPmThresholdLocation=cerentGenericPmThresholdLocation, cerentGenericPmThresholdEntry=cerentGenericPmThresholdEntry, cerentGenericPmMIBObjects=cerentGenericPmMIBObjects, cerentGenericPmStatsCurrentIndex=cerentGenericPmStatsCurrentIndex, cerentGenericPmStatsIntervalType=cerentGenericPmStatsIntervalType, cerentGenericPmAlarmThresholdMonitorType=cerentGenericPmAlarmThresholdMonitorType, cerentGenericPmStatsIntervalIndex=cerentGenericPmStatsIntervalIndex, cerentGenericPmThresholdIndex=cerentGenericPmThresholdIndex, cerentGenericPmStatsCurrentType=cerentGenericPmStatsCurrentType, cerentGenericPmAlarmThresholdIndex=cerentGenericPmAlarmThresholdIndex, cerentGenericPmStatsIntervalValidData=cerentGenericPmStatsIntervalValidData, cerentGenericPmStatsCurrentHCValue=cerentGenericPmStatsCurrentHCValue)
