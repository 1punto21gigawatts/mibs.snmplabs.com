#
# PySNMP MIB module ZHNIPFORWARDING (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNIPFORWARDING
# Produced by pysmi-0.3.4 at Wed May  1 15:46:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, IpAddress, enterprises, Counter64, ObjectIdentity, ModuleIdentity, Bits, Gauge32, Integer32, Counter32, NotificationType, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "enterprises", "Counter64", "ObjectIdentity", "ModuleIdentity", "Bits", "Gauge32", "Integer32", "Counter32", "NotificationType", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TruthValue, MacAddress, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DisplayString", "TextualConvention", "RowStatus")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhnIpForwarding = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44))
zhnIpForwarding.setRevisions(('2012-01-27 12:00', '2012-04-20 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhnIpForwarding.setRevisionsDescriptions(('First Draft', 'change ipForwardingInterface and pForwardingForwardingMetric to read-write ',))
if mibBuilder.loadTexts: zhnIpForwarding.setLastUpdated('201204201200Z')
if mibBuilder.loadTexts: zhnIpForwarding.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhnIpForwarding.setContactInfo('Zhone Technologies, Inc. Florida Design Center 8545 126th Avenue North Largo, FL 33773 Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhnIpForwarding.setDescription('This file defines the private Enterprise MIB extensions that define IP Forwarding objects supported by the Zhone CPEs.')
zhnIpForwardingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1))
ipForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1), )
if mibBuilder.loadTexts: ipForwardingTable.setStatus('current')
if mibBuilder.loadTexts: ipForwardingTable.setDescription('Table of IP Forwarding rules')
ipForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1, 1), ).setIndexNames((0, "ZHNIPFORWARDING", "ipForwardingIndex"))
if mibBuilder.loadTexts: ipForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: ipForwardingEntry.setDescription('Table of entries of IP Forwarding rules and static route information.')
ipForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ipForwardingIndex.setStatus('current')
if mibBuilder.loadTexts: ipForwardingIndex.setDescription('IP Forwarding Table index')
ipForwardingIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipForwardingIPVersion.setStatus('current')
if mibBuilder.loadTexts: ipForwardingIPVersion.setDescription('IP version.')
ipForwardingDestIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwardingDestIPAddress.setStatus('current')
if mibBuilder.loadTexts: ipForwardingDestIPAddress.setDescription('Destination address. An empty string or a value of 0.0.0.0 indicates no destination address is specified.')
ipForwardingDestSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwardingDestSubnetMask.setStatus('current')
if mibBuilder.loadTexts: ipForwardingDestSubnetMask.setDescription('Destination subnet mask. An empty string or a value of 0.0.0.0 indicates no destination subnet mask is specified.')
ipForwardingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwardingInterface.setStatus('current')
if mibBuilder.loadTexts: ipForwardingInterface.setDescription('Lan interface to transmit packets.')
ipForwardingGatewayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwardingGatewayIPAddress.setStatus('current')
if mibBuilder.loadTexts: ipForwardingGatewayIPAddress.setDescription('Next hop IP address.')
ipForwardingForwardingMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwardingForwardingMetric.setStatus('current')
if mibBuilder.loadTexts: ipForwardingForwardingMetric.setDescription('Number of hops to reach destination. A value of -1 indicates this metric is not used. ')
ipForwardingTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 1, 1, 1, 8), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwardingTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipForwardingTableRowStatus.setDescription('The SNMP RowStatus of the current row. The following objects must be specified upon row creation: ipForwardingDestIPAddress ipForwardingDestSubnetMask ipForwardingInterface ')
zhnIpForwardingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 2))
zhnIpForwardingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 2, 1))
zhnIpForwardingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 2, 2))
zhnIpForwardingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 2, 2, 1)).setObjects(("ZHNIPFORWARDING", "zhnIpForwardingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnIpForwardingCompliance = zhnIpForwardingCompliance.setStatus('current')
if mibBuilder.loadTexts: zhnIpForwardingCompliance.setDescription('The Compliance statement for SNMP entities which manage the Zhone CPE IP Forwarding and Routing Information')
zhnIpForwardingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 44, 2, 1, 1)).setObjects(("ZHNIPFORWARDING", "ipForwardingIPVersion"), ("ZHNIPFORWARDING", "ipForwardingDestIPAddress"), ("ZHNIPFORWARDING", "ipForwardingDestSubnetMask"), ("ZHNIPFORWARDING", "ipForwardingInterface"), ("ZHNIPFORWARDING", "ipForwardingGatewayIPAddress"), ("ZHNIPFORWARDING", "ipForwardingForwardingMetric"), ("ZHNIPFORWARDING", "ipForwardingTableRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnIpForwardingGroup = zhnIpForwardingGroup.setStatus('current')
if mibBuilder.loadTexts: zhnIpForwardingGroup.setDescription('A collection of Zhone IP objects that describe the layer 3 forwarding and routing information.')
mibBuilder.exportSymbols("ZHNIPFORWARDING", ipForwardingTable=ipForwardingTable, ipForwardingInterface=ipForwardingInterface, ipForwardingDestSubnetMask=ipForwardingDestSubnetMask, ipForwardingIPVersion=ipForwardingIPVersion, ipForwardingTableRowStatus=ipForwardingTableRowStatus, ipForwardingIndex=ipForwardingIndex, zhnIpForwardingGroups=zhnIpForwardingGroups, zhnIpForwardingConformance=zhnIpForwardingConformance, ipForwardingDestIPAddress=ipForwardingDestIPAddress, PYSNMP_MODULE_ID=zhnIpForwarding, ipForwardingEntry=ipForwardingEntry, zhnIpForwardingCompliances=zhnIpForwardingCompliances, ipForwardingGatewayIPAddress=ipForwardingGatewayIPAddress, zhnIpForwardingGroup=zhnIpForwardingGroup, zhnIpForwardingObjects=zhnIpForwardingObjects, zhnIpForwardingCompliance=zhnIpForwardingCompliance, zhnIpForwarding=zhnIpForwarding, ipForwardingForwardingMetric=ipForwardingForwardingMetric)
