#
# PySNMP MIB module IBM-SERVERAID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-SERVERAID-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, enterprises, Integer32, Bits, Counter64, NotificationType, Unsigned32, TimeTicks, ObjectIdentity, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "enterprises", "Integer32", "Bits", "Counter64", "NotificationType", "Unsigned32", "TimeTicks", "ObjectIdentity", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Gauge32", "iso")
DateAndTime, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TruthValue", "TextualConvention")
ibmServeRaidMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2))
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibmServeRaid = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167))
ibmServeRaidNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 0))
ibmServeRaidMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1))
ibmServeRaidConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2))
ibmServeRaidAgentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 1))
ibmServeRaidInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2))
ibmServeRaidTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3))
ibmServeRaidCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2, 1))
ibmServeRaidGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2, 2))
ibmServeRaidAgentKeyIndex = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidAgentKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidAgentKeyIndex.setDescription('')
ibmServeRaidAgentId = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidAgentId.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidAgentId.setDescription('ServeRAID (sub-)agent ID string')
ibmServeRaidAgentCompany = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidAgentCompany.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidAgentCompany.setDescription('ServeRAID (sub-)agent company string')
ibmServeRaidAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidAgentVersion.setDescription('ServeRAID (sub-)agent version string')
ibmServeRaidAgentBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidAgentBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidAgentBuildDate.setDescription('ServeRAID (sub-)agent build date and time')
ibmServeRaidAgentVersionMajor = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidAgentVersionMajor.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidAgentVersionMajor.setDescription('ServeRAID (sub-)agent major version number')
ibmServeRaidAgentVersionMinor = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidAgentVersionMinor.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidAgentVersionMinor.setDescription('ServeRAID (sub-)agent minor version number')
ibmServeRaidControllerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1), )
if mibBuilder.loadTexts: ibmServeRaidControllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidControllerTable.setDescription('ServeRAID Controller table')
ibmServeRaidControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1), ).setIndexNames((0, "IBM-SERVERAID-MIB", "ibmServeRaidKeyIndex"))
if mibBuilder.loadTexts: ibmServeRaidControllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidControllerEntry.setDescription('ServeRAID Controller table entry')
ibmServeRaidKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ibmServeRaidKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidKeyIndex.setDescription('')
ibmServeRaidControllerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ibmServeRaidControllerId.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidControllerId.setDescription('ServeRAID Controller number (index)')
ibmServeRaidModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidModel.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidModel.setDescription('Controller model/submodel')
ibmServeRaidFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidFirmwareVersion.setDescription('Firmware version')
ibmServeRaidBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidBiosVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidBiosVersion.setDescription('BIOS version')
ibmServeRaidDefaultRebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidDefaultRebuildRate.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidDefaultRebuildRate.setDescription('Default rebuild/check rate')
ibmServeRaidNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidNumChannels.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidNumChannels.setDescription('Number of channels currently in use')
ibmServeRaidMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidMaxChannels.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidMaxChannels.setDescription('Maximum number of channels')
ibmServeRaidNumLogicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidNumLogicalDrives.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidNumLogicalDrives.setDescription('Current number of logical drives ')
ibmServeRaidMaxLogicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidMaxLogicalDrives.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidMaxLogicalDrives.setDescription('Maximum logical drives')
ibmServeRaidNumPhysicalDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidNumPhysicalDevices.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidNumPhysicalDevices.setDescription('Current number of physical devices')
ibmServeRaidMaxPhysicalDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidMaxPhysicalDevices.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidMaxPhysicalDevices.setDescription('Maximum physical devices')
ibmServeRaidStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidStripeSize.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidStripeSize.setDescription('Stripe Size (in 1K byte chunks)')
ibmServeRaidSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidSlotNumber.setDescription('Slot number the controller is in')
ibmServeRaidVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidVendorName.setDescription('Name of the controller vendor')
ibmServeRaidGeneralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidGeneralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidGeneralStatus.setDescription('General controller status')
ibmServeRaidPhysDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2), )
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceTable.setDescription('Physical device info table')
ibmServeRaidPhysDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1), ).setIndexNames((0, "IBM-SERVERAID-MIB", "ibmServeRaidPhysDeviceKeyIndex"))
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceEntry.setDescription('Physical device info table entry')
ibmServeRaidPhysDeviceKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceKeyIndex.setDescription('')
ibmServeRaidPhysDeviceChannelNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceChannelNr.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceChannelNr.setDescription('Channel number (index)')
ibmServeRaidPhysDeviceDevNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceDevNr.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceDevNr.setDescription('Physical device number (index). This corresponds to the SCSI ID.')
ibmServeRaidPhysDeviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceModel.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceModel.setDescription('Physical device model name')
ibmServeRaidPhysDeviceCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceCapacity.setDescription('Disk capacity (MBytes)')
ibmServeRaidPhysDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9))).clone(namedValues=NamedValues(("dead", 1), ("online", 2), ("standby", 3), ("rebuild", 4), ("spare", 5), ("ready", 6), ("empty", 7), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceStatus.setDescription('Disk status')
ibmServeRaidPhysDeviceDiskConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceDiskConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceDiskConfigured.setDescription('Indicates if device is a configured disk')
ibmServeRaidPhysDeviceScsiType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 97, 98, 99))).clone(namedValues=NamedValues(("disk", 1), ("tape", 2), ("printer", 3), ("processor", 4), ("writeOnce", 5), ("cdRom", 6), ("scanner", 7), ("optical", 8), ("jukebox", 9), ("commDev", 10), ("enclosure", 97), ("host", 98), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceScsiType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDeviceScsiType.setDescription('SCSI device type')
ibmServeRaidPhysDevicePfaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failurePredicted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidPhysDevicePfaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidPhysDevicePfaStatus.setDescription('Reports status of drive predictive failure analysis, drive should be replaced if failure-predicted. ')
ibmServeRaidLogicalTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 3), )
if mibBuilder.loadTexts: ibmServeRaidLogicalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidLogicalTable.setDescription('ServeRAID Logical drive info table')
ibmServeRaidLogicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 3, 1), ).setIndexNames((0, "IBM-SERVERAID-MIB", "ibmServeRaidLogicalKeyIndex"))
if mibBuilder.loadTexts: ibmServeRaidLogicalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidLogicalEntry.setDescription('Logical drive info table entry')
ibmServeRaidLogicalKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 3, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ibmServeRaidLogicalKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidLogicalKeyIndex.setDescription('')
ibmServeRaidLogicalDriveNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ibmServeRaidLogicalDriveNum.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidLogicalDriveNum.setDescription('Logical drive number (index)')
ibmServeRaidLogicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9))).clone(namedValues=NamedValues(("online", 1), ("critical", 2), ("offline", 3), ("migrating", 4), ("free", 5), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidLogicalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidLogicalStatus.setDescription('Logical drive status')
ibmServeRaidLogicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidLogicalSize.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidLogicalSize.setDescription('Size of logical drive (MBytes)')
ibmServeRaidLogicalRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 3, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidLogicalRaidLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidLogicalRaidLevel.setDescription('Drive RAID level.')
ibmServeRaidLogicalWriteCacheMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("writeBack", 1), ("writeThrough", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmServeRaidLogicalWriteCacheMode.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidLogicalWriteCacheMode.setDescription('Cache write back / write through')
ibmServeRaidTrapController = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 1), Integer32())
if mibBuilder.loadTexts: ibmServeRaidTrapController.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapController.setDescription('The controller number')
ibmServeRaidTrapLogicalDrive = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 2), Integer32())
if mibBuilder.loadTexts: ibmServeRaidTrapLogicalDrive.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapLogicalDrive.setDescription('The logical drive number')
ibmServeRaidTrapChannel = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 3), Integer32())
if mibBuilder.loadTexts: ibmServeRaidTrapChannel.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapChannel.setDescription('The SCSI Channel of the physical drive')
ibmServeRaidTrapScsiId = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 4), Integer32())
if mibBuilder.loadTexts: ibmServeRaidTrapScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapScsiId.setDescription('The SCSI Target id of the physical drive')
ibmServeRaidTrapFan = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 5), Integer32())
if mibBuilder.loadTexts: ibmServeRaidTrapFan.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapFan.setDescription('The fan number in the drive enclosure')
ibmServeRaidTrapPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 6), Integer32())
if mibBuilder.loadTexts: ibmServeRaidTrapPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapPowerSupply.setDescription('The power supply in the drive enclosure')
ibmServeRaidTrapErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 7), Integer32())
if mibBuilder.loadTexts: ibmServeRaidTrapErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapErrorCode.setDescription('The error code reported by the controller')
ibmServeRaidTrapServerName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 8), SnmpAdminString())
if mibBuilder.loadTexts: ibmServeRaidTrapServerName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapServerName.setDescription('Server name this trap comes from')
ibmServeRaidTrapArray = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 9), SnmpAdminString())
if mibBuilder.loadTexts: ibmServeRaidTrapArray.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapArray.setDescription('Alphanumeric digit that identifies the array')
ibmServeRaidTrapFru = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 1, 3, 10), SnmpAdminString())
if mibBuilder.loadTexts: ibmServeRaidTrapFru.setStatus('mandatory')
if mibBuilder.loadTexts: ibmServeRaidTrapFru.setDescription('The fru number of the device')
ibmServeRaidNoControllers = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,201)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"))
if mibBuilder.loadTexts: ibmServeRaidNoControllers.setDescription('Informational: No controllers were found in this system.')
ibmServeRaidControllerFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,202)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidControllerFail.setDescription('Error: Commands not responding on Controller %d.')
ibmServeRaidDeadBattery = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,203)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidDeadBattery.setDescription('Error: The battery-backup cache device on Controller %d needs a new battery.')
ibmServeRaidDeadBatteryCache = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,204)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidDeadBatteryCache.setDescription('Error: The battery-backup cache device on Controller %d is defective %d')
ibmServeRaidPollingFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,205)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidPollingFail.setDescription('Error: Background polling commands not responding on Controller %d %d')
ibmServeRaidConfigFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,206)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"))
if mibBuilder.loadTexts: ibmServeRaidConfigFail.setDescription('Error: Cannot read controller configuration.')
ibmServeRaidControllerAdded = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,207)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidControllerAdded.setDescription('Informational: Controller %d has been added to the system.')
ibmServeRaidControllerReplaced = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,208)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidControllerReplaced.setDescription('Informational: Controller %d has been replaced in the system.')
ibmServeRaidControllerFailover = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,209)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidControllerFailover.setDescription('Informational: Controller %d failover detected. Passive controller is now active.')
ibmServeRaidLogicalDriveCritical = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,301)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidLogicalDriveCritical.setDescription('Warning: Logical Drive %d is Critical on Controller %d.')
ibmServeRaidLogicalDriveBlocked = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,302)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidLogicalDriveBlocked.setDescription('Error: Logical Drive %d is Blocked on Controller %d.')
ibmServeRaidLogicalDriveOffLine = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,303)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidLogicalDriveOffLine.setDescription('Error: Logical Drive %d is Offline on Controller %d.')
ibmServeRaidRebuildDetected = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,304)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidRebuildDetected.setDescription('Informational: Rebuilding Logical Drive %d on Controller %d.')
ibmServeRaidRebuildComplete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,305)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidRebuildComplete.setDescription('Informational: Rebuild complete on Logical Drive %d of Controller %d.')
ibmServeRaidRebuildFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,306)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidRebuildFail.setDescription('Error: Rebuild failed on Logical Drive %d of Controller %d %d.')
ibmServeRaidSyncDetected = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,307)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidSyncDetected.setDescription('Informational: Synchronizing Logical Drive %d on Controller %d.')
ibmServeRaidSyncComplete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,308)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidSyncComplete.setDescription('Informational: Synchronization complete on Logical Drive %d of Controller %d.')
ibmServeRaidSyncFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,309)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidSyncFail.setDescription('Error: Synchronization failed on Logical Drive %d of Controller %d %d.')
ibmServeRaidMigrationDetected = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,310)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidMigrationDetected.setDescription('Informational: Migrating Logical Drive %d on Controller %d.')
ibmServeRaidMigrationComplete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,311)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidMigrationComplete.setDescription('Informational: Migration complete on Logical Drive %d of Controller %d.')
ibmServeRaidMigrationFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,312)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidMigrationFail.setDescription('Error: Migration failed on Logical Drive %d of Controller %d %d.')
ibmServeRaidCompressionDetected = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,313)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidCompressionDetected.setDescription('Informational: Compressing Logical Drive %d on Controller %d.')
ibmServeRaidCompressionComplete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,314)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidCompressionComplete.setDescription('Informational: Compression complete on Logical Drive %d of Controller %d.')
ibmServeRaidcompressionFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,315)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidcompressionFail.setDescription('Error: Compression failed on Logical Drive %d of Controller %d %d.')
ibmServeRaidDecompressionDetected = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,316)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidDecompressionDetected.setDescription('Informational: Decompressing Logical Drive %d on Controller %d.')
ibmServeRaidDecompressionComplete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,317)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidDecompressionComplete.setDescription('Informational: Decompression complete on Logical Drive %d of Controller %d.')
ibmServeRaidDecompressionFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,318)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidDecompressionFail.setDescription('Error: Decompression failed on Logical Drive %d of Controller %d %d.')
ibmServeRaidFlashCopyDetected = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,319)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidFlashCopyDetected.setDescription('Informational: FlashCopying Logical Drive %d on Controller %d.')
ibmServeRaidFlashCopyComplete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,320)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidFlashCopyComplete.setDescription('Informational: FlashCopy complete on Logical Drive %d of Controller %d.')
ibmServeRaidFlashCopyFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,321)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidFlashCopyFail.setDescription('Error: FlashCopy failed on Logical Drive %d of Controller %d %d.')
ibmServeRaidArrayRebuildDetected = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,322)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapArray"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidArrayRebuildDetected.setDescription('Informational: Rebuilding Array %d on Controller %d.')
ibmServeRaidArrayRebuildComplete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,323)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapArray"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidArrayRebuildComplete.setDescription('Informational: Rebuild complete on Array %d of Controller %d.')
ibmServeRaidArrayRebuildFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,324)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapArray"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidArrayRebuildFail.setDescription('Error: Rebuild failed on Array %d of Controller %d %d.')
ibmServeRaidArraySyncDetected = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,325)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapArray"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidArraySyncDetected.setDescription('Informational: Synchronizing Array %d on Controller %d.')
ibmServeRaidArraySyncComplete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,326)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapArray"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidArraySyncComplete.setDescription('Informational: Synchronization complete on Array %d of Controller %d.')
ibmServeRaidArraySyncFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,327)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapArray"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidArraySyncFail.setDescription('Error: Synchronization failed on Array %d of Controller %d %d.')
ibmServeRaidArrayFlashCopyDetected = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,328)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapArray"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidArrayFlashCopyDetected.setDescription('Informational: FlashCopying Array %d on Controller %d.')
ibmServeRaidArrayFlashCopyComplete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,329)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapArray"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidArrayFlashCopyComplete.setDescription('Informational: FlashCopy complete on Array %d of Controller %d.')
ibmServeRaidArrayFlashCopyFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,330)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapArray"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapErrorCode"))
if mibBuilder.loadTexts: ibmServeRaidArrayFlashCopyFail.setDescription('Error: FlashCopy failed on Array %d of Controller %d %d.')
ibmServeRaidLogicalDriveUnblocked = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,331)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapLogicalDrive"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"))
if mibBuilder.loadTexts: ibmServeRaidLogicalDriveUnblocked.setDescription('Informational: Logical Drive %d is unblocked on Controller %d.')
ibmServeRaidDefunctDrive = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,401)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapScsiId"))
if mibBuilder.loadTexts: ibmServeRaidDefunctDrive.setDescription('Error: Defunct drive on Controller %d, Channel %d, SCSI ID %d.')
ibmServeRaidPfaDrive = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,402)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapScsiId"))
if mibBuilder.loadTexts: ibmServeRaidPfaDrive.setDescription('Warning: PFA drive on Controller %d, Channel %d, SCSI ID %d.')
ibmServeRaidDefunctReplaced = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,403)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapScsiId"))
if mibBuilder.loadTexts: ibmServeRaidDefunctReplaced.setDescription('Informational: A drive is set to Hot-Spare on Controller %d, Channel %d, SCSI ID %d.')
ibmServeRaidDefunctDriveFru = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,404)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapFru"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapScsiId"))
if mibBuilder.loadTexts: ibmServeRaidDefunctDriveFru.setDescription('Error: Defunct drive (FRU Part # %d} on controller %d, channel %d, SCSI ID %d.')
ibmServeRaidPfaDriveFru = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,405)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapFru"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapScsiId"))
if mibBuilder.loadTexts: ibmServeRaidPfaDriveFru.setDescription('Warning: PFA drive (FRU Part # %d) on Controller %d, Channel %d, SCSI ID %d.')
ibmServeRaidUnsupportedDrive = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,406)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapScsiId"))
if mibBuilder.loadTexts: ibmServeRaidUnsupportedDrive.setDescription('Warning: Unsupported physical drive found on Controller %d, Channel %d, SCSI ID %d.')
ibmServeRaidEnclosureOK = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,501)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidEnclosureOK.setDescription('Informational: Enclosure device responding on Controller %d, Channel %d.')
ibmServeRaidEnclosureFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,502)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidEnclosureFail.setDescription('Error: Enclosure device not responding on Controller %d, Channel %d.')
ibmServeRaidFanOk = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,503)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapFan"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidFanOk.setDescription('Informational: Enclosure fan %d on Controller %d, Channel %d is now operational.')
ibmServeRaidFanFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,504)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapFan"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidFanFail.setDescription('Error: Enclosure fan %d on Controller %d, Channel %d is malfunctioning.')
ibmServeRaidFanInstalled = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,505)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapFan"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidFanInstalled.setDescription('Informational: Enclosure fan %d on Controller %d, Channel %d has been installed.')
ibmServeRaidFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,506)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapFan"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidFanRemoved.setDescription('Warning: Enclosure fan %d on Controller %d, Channel %d has been removed.')
ibmServeRaidTempOk = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,507)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidTempOk.setDescription('Error: Enclosure temperature is in normal range on Controller %d, Channel %d.')
ibmServeRaidTempFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,508)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidTempFail.setDescription('Error: Enclosure temperature is out of normal range on Controller %d, Channel %d.')
ibmServeRaidPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,509)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapPowerSupply"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidPowerSupplyOk.setDescription('Informational: Enclosure power supply %d on Controller %d, Channel %d is now operational.')
ibmServeRaidPowerSupplyFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,510)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapPowerSupply"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidPowerSupplyFail.setDescription('Error: Enclosure power supply %d on Controller %d, Channel %d is malfunctioning.')
ibmServeRaidPowerSupplyInstalled = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,511)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapPowerSupply"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidPowerSupplyInstalled.setDescription('Informational: Enclosure power supply %d on Controller %d, Channel %d has been installed.')
ibmServeRaidPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,512)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapPowerSupply"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapController"), ("IBM-SERVERAID-MIB", "ibmServeRaidTrapChannel"))
if mibBuilder.loadTexts: ibmServeRaidPowerSupplyRemoved.setDescription('Warning: Enclosure power supply %d on Controller %d, Channel %d has been removed.')
ibmServeRaidTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 167, 2) + (0,601)).setObjects(("IBM-SERVERAID-MIB", "ibmServeRaidTrapServerName"))
if mibBuilder.loadTexts: ibmServeRaidTestTrap.setDescription('Informational: This is a test trap.')
ibmServeRaidAgentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2, 2, 1))
ibmServeRaidControllerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2, 2, 2))
ibmServeRaidPhysicalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2, 2, 3))
ibmServeRaidLogicalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2, 2, 4))
ibmServeRaidTrapInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2, 2, 5))
ibmServeRaidNotificationsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2, 2, 6))
ibmServeRaidCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 167, 2, 2, 1, 1))
mibBuilder.exportSymbols("IBM-SERVERAID-MIB", ibmServeRaidGroups=ibmServeRaidGroups, ibmServeRaidTrapFru=ibmServeRaidTrapFru, ibmServeRaidNumLogicalDrives=ibmServeRaidNumLogicalDrives, ibmServeRaidAgentVersionMinor=ibmServeRaidAgentVersionMinor, ibmServeRaidFirmwareVersion=ibmServeRaidFirmwareVersion, ibmServeRaidAgentKeyIndex=ibmServeRaidAgentKeyIndex, ibmServeRaidModel=ibmServeRaidModel, ibmServeRaidNotifications=ibmServeRaidNotifications, ibmServeRaidArraySyncComplete=ibmServeRaidArraySyncComplete, ibmServeRaidTrapArray=ibmServeRaidTrapArray, ibmServeRaidAgentVersion=ibmServeRaidAgentVersion, ibmServeRaidNumPhysicalDevices=ibmServeRaidNumPhysicalDevices, ibmServeRaidLogicalDriveUnblocked=ibmServeRaidLogicalDriveUnblocked, ibmServeRaidSyncFail=ibmServeRaidSyncFail, ibmServeRaidcompressionFail=ibmServeRaidcompressionFail, ibmServeRaidAgentVersionMajor=ibmServeRaidAgentVersionMajor, ibmServeRaidLogicalDriveOffLine=ibmServeRaidLogicalDriveOffLine, ibmServeRaidMigrationComplete=ibmServeRaidMigrationComplete, ibmServeRaidDefunctReplaced=ibmServeRaidDefunctReplaced, ibmServeRaidKeyIndex=ibmServeRaidKeyIndex, ibmServeRaidEnclosureOK=ibmServeRaidEnclosureOK, ibmServeRaidMaxLogicalDrives=ibmServeRaidMaxLogicalDrives, ibmServeRaidDecompressionFail=ibmServeRaidDecompressionFail, ibmServeRaidDefunctDrive=ibmServeRaidDefunctDrive, ibmServeRaidTrapInfoGroup=ibmServeRaidTrapInfoGroup, ibmServeRaidControllerTable=ibmServeRaidControllerTable, ibm=ibm, ibmServeRaidGeneralStatus=ibmServeRaidGeneralStatus, ibmServeRaidAgentCompany=ibmServeRaidAgentCompany, ibmServeRaidTrapLogicalDrive=ibmServeRaidTrapLogicalDrive, ibmServeRaidSlotNumber=ibmServeRaidSlotNumber, ibmServeRaidLogicalDriveCritical=ibmServeRaidLogicalDriveCritical, ibmServeRaidAgentBuildDate=ibmServeRaidAgentBuildDate, ibmServeRaidFanRemoved=ibmServeRaidFanRemoved, ibmServeRaidAgentId=ibmServeRaidAgentId, ibmServeRaidMigrationDetected=ibmServeRaidMigrationDetected, ibmServeRaidPfaDrive=ibmServeRaidPfaDrive, ibmServeRaidLogicalDriveNum=ibmServeRaidLogicalDriveNum, ibmServeRaidPhysDeviceDevNr=ibmServeRaidPhysDeviceDevNr, ibmProd=ibmProd, ibmServeRaidArraySyncFail=ibmServeRaidArraySyncFail, ibmServeRaidTempOk=ibmServeRaidTempOk, ibmServeRaidNumChannels=ibmServeRaidNumChannels, ibmServeRaidPollingFail=ibmServeRaidPollingFail, ibmServeRaidTrapController=ibmServeRaidTrapController, ibmServeRaidBiosVersion=ibmServeRaidBiosVersion, ibmServeRaidMibObjects=ibmServeRaidMibObjects, ibmServeRaidDeadBattery=ibmServeRaidDeadBattery, ibmServeRaidTempFail=ibmServeRaidTempFail, ibmServeRaidMIB=ibmServeRaidMIB, ibmServeRaidTrapInfo=ibmServeRaidTrapInfo, ibmServeRaidCompressionComplete=ibmServeRaidCompressionComplete, ibmServeRaidTrapPowerSupply=ibmServeRaidTrapPowerSupply, ibmServeRaidControllerFail=ibmServeRaidControllerFail, ibmServeRaidRebuildFail=ibmServeRaidRebuildFail, ibmServeRaidPhysDevicePfaStatus=ibmServeRaidPhysDevicePfaStatus, ibmServeRaidPowerSupplyInstalled=ibmServeRaidPowerSupplyInstalled, ibmServeRaidFanFail=ibmServeRaidFanFail, ibmServeRaidTrapServerName=ibmServeRaidTrapServerName, ibmServeRaidNoControllers=ibmServeRaidNoControllers, ibmServeRaidLogicalKeyIndex=ibmServeRaidLogicalKeyIndex, ibmServeRaidDeadBatteryCache=ibmServeRaidDeadBatteryCache, ibmServeRaidMaxPhysicalDevices=ibmServeRaidMaxPhysicalDevices, ibmServeRaidLogicalEntry=ibmServeRaidLogicalEntry, ibmServeRaidStripeSize=ibmServeRaidStripeSize, ibmServeRaidLogicalTable=ibmServeRaidLogicalTable, ibmServeRaidArraySyncDetected=ibmServeRaidArraySyncDetected, ibmServeRaidPhysDeviceKeyIndex=ibmServeRaidPhysDeviceKeyIndex, ibmServeRaidCompressionDetected=ibmServeRaidCompressionDetected, ibmServeRaidDecompressionComplete=ibmServeRaidDecompressionComplete, ibmServeRaidMigrationFail=ibmServeRaidMigrationFail, ibmServeRaidMaxChannels=ibmServeRaidMaxChannels, ibmServeRaidFlashCopyFail=ibmServeRaidFlashCopyFail, ibmServeRaidRebuildDetected=ibmServeRaidRebuildDetected, ibmServeRaidPhysDeviceTable=ibmServeRaidPhysDeviceTable, ibmServeRaidControllerGroup=ibmServeRaidControllerGroup, ibmServeRaidLogicalWriteCacheMode=ibmServeRaidLogicalWriteCacheMode, ibmServeRaidControllerId=ibmServeRaidControllerId, ibmServeRaidPhysDeviceStatus=ibmServeRaidPhysDeviceStatus, ibmServeRaidLogicalRaidLevel=ibmServeRaidLogicalRaidLevel, ibmServeRaidSyncComplete=ibmServeRaidSyncComplete, ibmServeRaidArrayFlashCopyFail=ibmServeRaidArrayFlashCopyFail, ibmServeRaidControllerReplaced=ibmServeRaidControllerReplaced, ibmServeRaidPowerSupplyRemoved=ibmServeRaidPowerSupplyRemoved, ibmServeRaidSyncDetected=ibmServeRaidSyncDetected, ibmServeRaidPhysDeviceEntry=ibmServeRaidPhysDeviceEntry, ibmServeRaidRebuildComplete=ibmServeRaidRebuildComplete, ibmServeRaidUnsupportedDrive=ibmServeRaidUnsupportedDrive, ibmServeRaidFlashCopyDetected=ibmServeRaidFlashCopyDetected, ibmServeRaidPhysDeviceDiskConfigured=ibmServeRaidPhysDeviceDiskConfigured, ibmServeRaidCompliance=ibmServeRaidCompliance, ibmServeRaidPowerSupplyOk=ibmServeRaidPowerSupplyOk, ibmServeRaidPhysDeviceCapacity=ibmServeRaidPhysDeviceCapacity, ibmServeRaidLogicalDriveBlocked=ibmServeRaidLogicalDriveBlocked, ibmServeRaidArrayRebuildDetected=ibmServeRaidArrayRebuildDetected, ibmServeRaidEnclosureFail=ibmServeRaidEnclosureFail, ibmServeRaidLogicalGroup=ibmServeRaidLogicalGroup, ibmServeRaidArrayRebuildFail=ibmServeRaidArrayRebuildFail, ibmServeRaidTrapChannel=ibmServeRaidTrapChannel, ibmServeRaidAgentGroup=ibmServeRaidAgentGroup, ibmServeRaidFlashCopyComplete=ibmServeRaidFlashCopyComplete, ibmServeRaidControllerAdded=ibmServeRaidControllerAdded, ibmServeRaidFanOk=ibmServeRaidFanOk, ibmServeRaidLogicalStatus=ibmServeRaidLogicalStatus, ibmServeRaid=ibmServeRaid, ibmServeRaidArrayRebuildComplete=ibmServeRaidArrayRebuildComplete, ibmServeRaidArrayFlashCopyDetected=ibmServeRaidArrayFlashCopyDetected, ibmServeRaidCompliances=ibmServeRaidCompliances, ibmServeRaidInfo=ibmServeRaidInfo, ibmServeRaidDefunctDriveFru=ibmServeRaidDefunctDriveFru, ibmServeRaidPhysicalGroup=ibmServeRaidPhysicalGroup, ibmServeRaidTrapErrorCode=ibmServeRaidTrapErrorCode, ibmServeRaidControllerEntry=ibmServeRaidControllerEntry, ibmServeRaidPhysDeviceModel=ibmServeRaidPhysDeviceModel, ibmServeRaidPfaDriveFru=ibmServeRaidPfaDriveFru, ibmServeRaidTrapFan=ibmServeRaidTrapFan, ibmServeRaidPowerSupplyFail=ibmServeRaidPowerSupplyFail, ibmServeRaidAgentInfo=ibmServeRaidAgentInfo, ibmServeRaidArrayFlashCopyComplete=ibmServeRaidArrayFlashCopyComplete, ibmServeRaidControllerFailover=ibmServeRaidControllerFailover, ibmServeRaidTrapScsiId=ibmServeRaidTrapScsiId, ibmServeRaidNotificationsGroup=ibmServeRaidNotificationsGroup, ibmServeRaidConfigFail=ibmServeRaidConfigFail, ibmServeRaidPhysDeviceScsiType=ibmServeRaidPhysDeviceScsiType, ibmServeRaidPhysDeviceChannelNr=ibmServeRaidPhysDeviceChannelNr, ibmServeRaidConformance=ibmServeRaidConformance, ibmServeRaidLogicalSize=ibmServeRaidLogicalSize, ibmServeRaidFanInstalled=ibmServeRaidFanInstalled, ibmServeRaidTestTrap=ibmServeRaidTestTrap, ibmServeRaidVendorName=ibmServeRaidVendorName, ibmServeRaidDefaultRebuildRate=ibmServeRaidDefaultRebuildRate, ibmServeRaidDecompressionDetected=ibmServeRaidDecompressionDetected)
