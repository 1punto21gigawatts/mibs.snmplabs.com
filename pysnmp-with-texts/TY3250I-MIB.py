#
# PySNMP MIB module TY3250I-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TY3250I-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Counter32, ObjectIdentity, Gauge32, IpAddress, Integer32, NotificationType, NotificationType, enterprises, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Counter32", "ObjectIdentity", "Gauge32", "IpAddress", "Integer32", "NotificationType", "NotificationType", "enterprises", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tylink = MibIdentifier((1, 3, 6, 1, 4, 1, 466))
ty3250 = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4))
ty3250SysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 1))
ty3250SysType = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysType.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SysType.setDescription('A textual description of the system model identifier. for example: TYLINK3250')
ty3250SysSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysSoftRev.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SysSoftRev.setDescription('Displays the Software Revision installed in this node.')
ty3250SysHardRev = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysHardRev.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SysHardRev.setDescription('Displays the Hardware Revision of the node.')
ty3250SysNumT1Installed = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysNumT1Installed.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SysNumT1Installed.setDescription('The number of network (T1) ports that are installed. There is 1 on the 3250.')
ty3250SysNumDteInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysNumDteInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SysNumDteInstalled.setDescription('The number of channels (DTE) that are installed. There is 1 on the 3250.')
ty3250SysNumCommInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250SysNumCommInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SysNumCommInstalled.setDescription('The number of Maintenance ports that are installed. The front panel MAINT port is for the user interface, the rear panel COMM port is for Lan(Network) Access.')
ty3250SysName = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250SysName.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SysName.setDescription('The user supplied name of the node. This object does not affect operation, but may be useful for network management.')
ty3250SysResetNode = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(321))).clone(namedValues=NamedValues(("reset-node", 321)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250SysResetNode.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SysResetNode.setDescription('Command to reset the node. NODE WILL BE OFF-LINE AND USER DATA WILL BE INTERRUPTED FOR APPROXIMATELY 15 SECONDS. ')
ty3250CfgT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 3))
ty3250CfgT1Framing = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("d4", 1), ("esf-54016", 2), ("esf-ansi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1Framing.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgT1Framing.setDescription("Type of Framing on this T1 Line. Check with your service provider to determine value. D4 is also known as 'SuperFrame', ESF is 'Extended SuperFrame'. ESF provides enhanced performance monitoring capabilities. ANSI and 54016 refer to the ESF Facility Data Link (FDL).")
ty3250CfgT1LineEncoding = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1LineEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgT1LineEncoding.setDescription("T1 interface bipolar encoding scheme. Check with your service provider to determine value. B8ZS, which inherently provides ample 'ones-density', is recommended. AMI users must pay special attention to the 'ones-density' requirements of the servic provider.")
ty3250CfgT1Density = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-density", 1), ("twelve-half-percent", 2), ("one-in-16", 3), ("one-in-64", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1Density.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgT1Density.setDescription("CSU 'ones density' monitor. Defines the maximum number of consecutive zeros that can be transmitted to the network. If density monitoring is enabled, the composite signal is guaranteed to meet the selected density threshhold at the expense of user data. No-density (4) should be used if B8ZS Line Encoding is chosen or if Channel Density is bit-7-stuff. This option is not applicable if DSX-1 mode is selected.")
ty3250CfgT1Interface = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx-1", 1), ("csu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1Interface.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgT1Interface.setDescription('Enables CSU-specific functions if CSU (1) is selected. CSU functions include Line Build-out, density monitoring, and certain diagnostic features. Selecting DSX-1 (2) will disable these CSU functions for line driver or external CSU applications.')
ty3250CfgT1LboSetting = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 1))).clone(namedValues=NamedValues(("zero-db", 2), ("n7-5-db", 3), ("n15-db", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1LboSetting.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgT1LboSetting.setDescription('CSU Line Build Out. Consult service provider for proper setting; either 0dB (1), -7.5dB (2), or -15dB (3). Not applicable if T1Interface = dsx1.')
ty3250CfgT1Timing = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("loop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1Timing.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgT1Timing.setDescription('T1 network interface timing source. There must be only one source on a T1 line. Node should typically be network (2) timed on a point-to-network application. Line Driver and point-to-point applications typically need one node as internal (1), one as network (2).')
ty3250CfgT1CicuitID = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgT1CicuitID.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgT1CicuitID.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
ty3250CfgDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 4))
ty3250CfgDteLineRate = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgDteLineRate.setDescription('Serial Data Rate in bits-per-second, must be multiple of 8000bps. For example enter 768000 for 768Kb/s. Valid rates depend upon channel density selection: nX56K for bit-7-stuffing, and nX64K for clear-channel (n is an integer 1-24 inclusive).')
ty3250CfgDteChannelDensity = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteChannelDensity.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgDteChannelDensity.setDescription("Packing of serial data into T1 DS0's. Bit-7-stuff (56) allows DTE rates of nX56Kb/s and provides sufficient ones-density on any circuit. Clear-channel (64) allows rates on nX64Kb/s and may require an additional means of density enforcement (eg, B8ZS).")
ty3250CfgDteTiming = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop-1", 1), ("loop-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteTiming.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgDteTiming.setDescription('Serial DTE Transmit Timing mode. Loop-1 (1) uses the clock returned from the DTE (TT/TCE) to sample tx data, Loop-2 (2) uses the clock (ST/TC) generated by the node to sample tx data.')
ty3250CfgDteClockMode = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clock-normal", 1), ("clock-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgDteClockMode.setDescription('Clock-normal samples data with the rising edge of the selected tx clock, clock-invert samples data with the falling edge of the selected tx clock. The tx clock is selected using CfgDteTiming. This clock invertion is most useful when loop-2 timing is used. Only in rare circumstances will clock-invert (2) be used with loop-1 timing.')
ty3250CfgDteDataMode = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data-normal", 1), ("data-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteDataMode.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgDteDataMode.setDescription('Inverts data. Can make some applications, particularly HDLC-based protocols, meet density requirements even across clear channel DS0s in AMI mode. ')
ty3250CfgDteIntfType = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("intf-v35", 3), ("intf-rs449", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgDteIntfType.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgDteIntfType.setDescription('Sets the electrical interface for the DTE port.')
ty3250CfgConnectTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 5))
ty3250CfgConnAutoAssign = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 5, 1))
ty3250ConnAutoT1Index = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnAutoT1Index.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnAutoT1Index.setDescription('Index to T1 network port of interest. 3250 supports one T1 network port (1)')
ty3250ConnStartDS0 = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnStartDS0.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnStartDS0.setDescription("Port1-t1 includes 24 DS0's. This value is the starting DS0 used by the node to allocate DS0s to meet port2-dte's requirements. Sequential, contiguous DS0s are assigned. The number of DS0s required is based upon the DTE Data Rate and DTE Channel Mapping. The node's response to an entry may be gathered by querying ty3250ConnAutoStatus. To assign DS0s in a non-contiguous format, use the CfgEditConnTable.")
ty3250ConnAutoPort = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 33))).clone(namedValues=NamedValues(("port1-t1", 1), ("port2-dte", 2), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnAutoPort.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnAutoPort.setDescription('Selects the port for which DS0s are automatically allocated to on the T1 network port. Node software may not allow connection of port1-t1 to port1-t1.')
ty3250ConnAutoType = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnAutoType.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnAutoType.setDescription('Defines the type of traffic being transported. The 3250 only supports data (1). The selected type will be assigned to all DS0s.')
ty3250ConnDteRate = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnDteRate.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnDteRate.setDescription("Data rate of the 3250's DTE port. Can be changed from the CfgDteTable.")
ty3250ConnDteDensity = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnDteDensity.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnDteDensity.setDescription("Channel/DS0 format for the 3250's DTE port. Can be changed from the CfgDteTable.")
ty3250ConnDs0Required = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnDs0Required.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnDs0Required.setDescription("The number of DS0s required by the node's DTE port. This is based upon the DTE data rate and channel density selections.")
ty3250ConnAutoStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connections-valid", 1), ("incorrect-bandwidth", 2), ("bandwidth-conflict", 3), ("no-current-connections", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnAutoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnAutoStatus.setDescription("Queries the node's connection status. Cause codes will be returned when a connection set is rejected.")
ty3250CfgCurrentConnTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 5, 2), )
if mibBuilder.loadTexts: ty3250CfgCurrentConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCurrentConnTable.setDescription("Retrieves node's active connections assignments for display only. To edit connections, use CfgConnAutoAssign or CfgEditConnTable.")
ty3250CfgCurrentConnections = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1Index"), (0, "TY3250I-MIB", "ty3250Ds0"))
if mibBuilder.loadTexts: ty3250CfgCurrentConnections.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCurrentConnections.setDescription('An entry in the Current Connections Table.')
ty3250T1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1Index.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1Index.setDescription('Index to T1 network port of interest. 3250 only supports one T1 network port (1)')
ty3250Ds0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250Ds0.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250Ds0.setDescription('DS0 number 1 through 24 corresponding to the T1 network port index')
ty3250DtePort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 33))).clone(namedValues=NamedValues(("port1-t1", 1), ("port2-dte", 2), ("not-connected", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DtePort.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DtePort.setDescription('DS0 assignment for indexed T1 network port. After making any adjustments to the connections, the ty3250CfgConnUpdateCmd must be sent. Node software may not permit port1-t1 connections to itself.')
ty3250Type = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250Type.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250Type.setDescription('Defines the type of traffic being transported. The 3250 only supports data (1).')
ty3250CfgEditConnMenu = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 5, 3))
ty3250CfgEditConnCopyCurrtoEdit = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("copy-current", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250CfgEditConnCopyCurrtoEdit.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgEditConnCopyCurrtoEdit.setDescription("Fill the edit buffer with the node's current active connections.")
ty3250CfgEditConnTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2), )
if mibBuilder.loadTexts: ty3250CfgEditConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgEditConnTable.setDescription('Edits current DS0 assignment. After making any adjustments to the connections, the ty3250CfgConnUpdateCmd must be sent.')
ty3250CfgEditConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250ConnT1Index"), (0, "TY3250I-MIB", "ty3250ConnDS0"))
if mibBuilder.loadTexts: ty3250CfgEditConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgEditConnEntry.setDescription('An entry in the Edit Connections table.')
ty3250ConnT1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnT1Index.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnT1Index.setDescription('Index to T1 network port of interest. 3250 only supports one T1 network port (1)')
ty3250ConnDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250ConnDS0.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnDS0.setDescription('DS0 number 1 through 24 corresponding to the T1 network port index')
ty3250ConnDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 33))).clone(namedValues=NamedValues(("port1-t1", 1), ("port2-dte", 2), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnDTE.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnDTE.setDescription('DS0 assignment for indexed T1 network port. After making any adjustments to the connections, the ty3250CfgConnUpdateCmd must be sent. Node software may not permit connections between port1-t1 and itself.')
ty3250ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250ConnType.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250ConnType.setDescription('defines the type of traffic being transported. The 3250 only supports data (1).')
ty3250CfgConnUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 3))
ty3250CfgConnUpdateCmd = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250CfgConnUpdateCmd.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgConnUpdateCmd.setDescription('Updates the connections with the edit buffer. The edit buffer is comprised of any changes sent (set) from the CfgEditConnTable.')
ty3250CfgConnStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connections-valid", 1), ("incorrect-bandwidth", 2), ("bandwidth-conflict", 3), ("no-current-connections", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250CfgConnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgConnStatus.setDescription('Displays node status from the last connection update.')
ty3250CfgEditConnClearEditBuff = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-edit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250CfgEditConnClearEditBuff.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgEditConnClearEditBuff.setDescription('Removes all changes from edit buffer. The edit buffer is comprised of any changes sent (set) from the CfgEditConnTable.')
ty3250CfgCommTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 6))
ty3250CfgCommFormat = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 6, 1), )
if mibBuilder.loadTexts: ty3250CfgCommFormat.setStatus('mandatory')
ty3250CfgCommIntf = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250CfgCommIndex"))
if mibBuilder.loadTexts: ty3250CfgCommIntf.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommIntf.setDescription('Configuration of electrical interface and character format of the communications ports.')
ty3250CfgCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("comm", 1), ("maint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250CfgCommIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommIndex.setDescription('The comm (1) is at the rear and the maint (2) is at the front of the box.')
ty3250CfgCommBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommBaud.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommBaud.setDescription('Baud rate for this Communication port. Values are baud-1200 (1), baud-2400 (2), baud-4800 (3), baud-9600 (4), baud-19200 (5), baud-38400 (6).')
ty3250CfgCommDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommDataBits.setDescription('Databits for this Communication port. Values are databits-7 (1) and databits-8 (2).')
ty3250CfgCommStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommStopBits.setDescription('Number of Stopbits for this Communication port. Values are stopbits-1 (1), stopbits-1-5 (2), and stopbits-2 (3).')
ty3250CfgCommParity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 1), ("odd-parity", 2), ("even-parity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommParity.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommParity.setDescription('Parity for this Communication port. Values are no-parity (1), odd-parity (2), even-parity (3).')
ty3250CfgCommFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-flow-control", 1), ("software-flow-control", 2), ("hardware-flow-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommFlowCtrl.setDescription('Flow Control for this Communication port. Values are off-flow-control (1) and on-flow-control (2).')
ty3250CfgCommModeTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 6, 2), )
if mibBuilder.loadTexts: ty3250CfgCommModeTable.setStatus('mandatory')
ty3250CfgCommModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250CfgCommModeIndex"))
if mibBuilder.loadTexts: ty3250CfgCommModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommModeEntry.setDescription('Ascii communication port configuration.')
ty3250CfgCommModeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("comm", 1), ("maint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommModeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommModeIndex.setDescription('Communication port configured as user interface. The comm (1) is at the rear and the maint (2) is at the front of the box. The 3250 may require that the maint (2) port be used for user interface only.')
ty3250CfgCommMode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("user-interface-vt100", 1), ("slip", 2), ("ethernet", 3), ("token-ring", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommMode.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommMode.setDescription('Defines mode of operation of the selected communication port. The 3250 may require that the user-interface be assigned to the Maint port and a Network access type be assigned to the COMM port.')
ty3250CfgCommMyIP = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommMyIP.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommMyIP.setDescription("The IP address for this node's network access port.")
ty3250CfgCommPeerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommPeerIP.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommPeerIP.setDescription('The IP address for other end of network access connection.')
ty3250CfgCommMask = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommMask.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommMask.setDescription('The IP Network Mask (eg 255.255.255.0) for the network access link.')
ty3250CfgCommMaxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250CfgCommMaxMTU.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgCommMaxMTU.setDescription('The Maximum Transmission Unit is the size of the largest IP packet supported. This value should be set to the lowest value supported by any equipment in the transmission path.')
ty3250CfgSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 7), )
if mibBuilder.loadTexts: ty3250CfgSnmpTable.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250CfgSnmpTable.setDescription('IP addresses and corresponding trap filters.')
ty3250SnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 7, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250SnmpIndex"))
if mibBuilder.loadTexts: ty3250SnmpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SnmpEntry.setDescription('entry of IP addresses and corresponding trap filters.')
ty3250SnmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250SnmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SnmpIndex.setDescription("The index to one of the SNMP manager's address and filter configurations.")
ty3250SnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250SnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250SnmpManagerIP.setDescription("The IP address for the SNMP manager to receive this node's TRAPs.")
ty3250DiagT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 10))
ty3250DiagT1LocLineLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("line-lpbk-disable", 1), ("line-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagT1LocLineLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagT1LocLineLpbk.setDescription('Local Line Loopback on the T1 network port. Data and framing received from the network is transmitted back to the network')
ty3250DiagT1LocPylLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pyl-lpbk-disable", 1), ("pyl-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagT1LocPylLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagT1LocPylLpbk.setDescription('Local Payload Loopback on the T1 network port. Data (NOT framing) received from the network is reframed and transmitted back to the network. ')
ty3250DiagT1LocAggrLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggr-lpbk-disable", 1), ("aggr-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagT1LocAggrLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagT1LocAggrLpbk.setDescription('Local Aggregate Loopback on the T1 network port. Data from the DTE is framed for transmission and looped back through the network receiver towards the DTE.')
ty3250DiagT1RmtLpbkStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-remote-lpbks", 1), ("csu-lpbk-from-remote", 2), ("dsu-lpbk-from-remote", 3), ("pyl-lpbk-from-remote", 4), ("csu-lpbk-sent-to-remote", 5), ("dsu-lpbk-sent-to-remote", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagT1RmtLpbkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagT1RmtLpbkStatus.setDescription("Status of Remote Loopbacks received from the T1 network port. csu-lpbk-from-remote (1) indicates the node is in a Network Line Loopback state due to the reception of the CSU Loop-up pattern from the network. dsu-lpbk-from-remote (2) indicates the node is in a Network Line Loopback state due to the reception of the TyLink proprietary Loop-up pattern a remote node. pyl-lpbk-from-remote (3) indicates the node is in a Payload Loopback state due to the reception of the Facility Data Link's Loop-up pattern from the network (ESF only). csu-lpbk-sent-to-remote (4) indicates the node sent a csu loop up pattern to the remote. The node doesn't know if the loopback was accepted by the remote unit. dsu-lpbk-sent-to-remote (5) indicates the node sent a dsu loop up pattern to the remote. The node doesn't know if the loopback was accepted by the remote unit.")
ty3250DiagT1RmtLpbkCmd = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rmt-csu-lpbk-loopup", 1), ("rmt-csu-lpbk-loopdown", 2), ("rmt-dsu-lpbk-loopup", 3), ("rmt-dsu-lpbk-loopdown", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250DiagT1RmtLpbkCmd.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagT1RmtLpbkCmd.setDescription('Remote loopbacks that can be transmitted out the T1 network port. rmt-csu-lpbk-loopup (1) sends standard CSU loop up code into the network. rmt-csu-lpbk-loopdown (2) sends standard CSU loop down code into the network. rmt-dsu-lpbk-loopup (3) sends TyLink proprietary loop up code into the network. rmt-dsu-lpbk-loopdown (4) sends TyLink proprietary loop up code into the network.')
ty3250DiagDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 11))
ty3250DiagDteLocBidirLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bidir-lpbk-disable", 1), ("bidir-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagDteLocBidirLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagDteLocBidirLpbk.setDescription("Local Bi-directional Loopback on the DTE port. Loops the clock and data back to the DTE at the interface on the 3250; also loops the DTE's network bandwidth back to the network.")
ty3250DiagDteRmtLpbkStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-remote-lpbks", 1), ("bidir-lpbk-from-remote", 2), ("bidir-lpbk-sent-to-remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagDteRmtLpbkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagDteRmtLpbkStatus.setDescription("Status of Remote Loopbacks received for the DTE port. bidir-lpbk-from-remote indictaes that either a proprietary or V54 loop up pattern was received on the DTE's network bandwidth. bidir-lpbk-sent-to-remote indiactes that either a proprietary or V54 loop up pattern was sent to the remote DTE. ")
ty3250DiagDteRmtLpbkCmd = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rmt-bidir-lpbk-loopup-tyl", 1), ("rmt-bidir-lpbk-loopdown-tyl", 2), ("rmt-bidir-lpbk-loopup-v54", 3), ("rmt-bidir-lpbk-loopdown-v54", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250DiagDteRmtLpbkCmd.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagDteRmtLpbkCmd.setDescription('Remote loopbacks that can be transmitted to a remote DTE port rmt-bidir-lpbk-loopup-tyl (1) sends the TyLink proprietary loop up pattern to a remote TyLink DTE. When detected by the remote unit, a DTE Bidirectional Loopback is put up. rmt-bidir-lpbk-loopdown-tyl (2) sends the TyLink proprietary loop down pattern to a remote TyLink DTE. When detected by the remote unit, a DTE Bidirectional Loopback is torn down. rmt-bidir-lpbk-loopup-V54 (3) sends the standard V.54 loop up pattern to a remote, V54-compatible DTE. When detected by the remote unit, a DTE Bidirectional Loopback is put up. rmt-bidir-lpbk-loopdown-V54 (4) sends the standard V.54 loop down pattern to a remote, V54-compatible DTE. When detected by the remote unit, a DTE Bidirectional Loopback is torn down.')
ty3250DiagBerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 4, 12))
ty3250DiagBerPattrn = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pattrn-511", 1), ("pattrn-qrss", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250DiagBerPattrn.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagBerPattrn.setDescription('selects pseudorandom pattern for bit error rate test')
ty3250DiagBerState = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable-t1-bert-on-full-bw", 1), ("enable-t1-bert-on-DTE-bw", 2), ("disable-bert-test", 3), ("inject-error-bert-test", 4), ("clear-error-bert-test", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250DiagBerState.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagBerState.setDescription('BERT test related actions: a: Starts a BERT test on selected bandwidth, b: Stops a BERT test on selected bandwidth, c: Inject Errors while the BERT test is running, d: Clears BERT test errors.')
ty3250DiagBerStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bert-off", 1), ("bert-full-bw-out-of-sync", 2), ("bert-DTE-bw-out-of-sync", 3), ("bert-full-bw-in-sync", 4), ("bert-DTE-bw-in-sync", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagBerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagBerStatus.setDescription('Displays the current BERT test sync status.')
ty3250DiagBerErrors = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagBerErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagBerErrors.setDescription('Displays the number of errors detected in Bert Test.')
ty3250DiagBerTimeElaps = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 12, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250DiagBerTimeElaps.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250DiagBerTimeElaps.setDescription('Elapsed time since BERT test was started or cleared.')
ty3250PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 13), )
if mibBuilder.loadTexts: ty3250PortStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250PortStatusTable.setDescription('Status of a T1 or DTE port.')
ty3250PortStatus = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 13, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250IntfIndex"))
if mibBuilder.loadTexts: ty3250PortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250PortStatus.setDescription('An entry in the DS1 Interval table.')
ty3250IntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250IntfIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. ')
ty3250IntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1-port", 1), ("dte-port", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfType.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250IntfType.setDescription('Port type.')
ty3250IntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("test-mode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfMode.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250IntfMode.setDescription('Status of the indexed port. Inactive (1) indicates the port has no connections. Active (2) indicates connections and data mode. Test-mode (3) indicates connections and diagnostic state for that port.')
ty3250IntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1-frame-sync-okay", 1), ("t1-frame-sync-with-errors", 2), ("signal-present-without-frame-sync", 3), ("signal-not-present", 4), ("not-applicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250IntfStatus.setDescription('Status of the indexed port.')
ty3250IntfAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-alarms", 1), ("red-alarm-declared", 2), ("yellow-alarm-detected", 3), ("unframed-all-ones-detected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250IntfAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250IntfAlarms.setDescription('Alarms present at the indexed port. The node software may not support DTE alarm conditions.')
ty3250PerfT1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 14), )
if mibBuilder.loadTexts: ty3250PerfT1CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250PerfT1CurrentTable.setDescription('The T1 performance numbers for the current 15 minute interval.')
ty3250T1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 14, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1CurrentIndex"))
if mibBuilder.loadTexts: ty3250T1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentEntry.setDescription('An entry in the T1 Current Perf table.')
ty3250T1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentIndex.setDescription('The index value which uniquely identifies the T1 interface to which this entry is applica- ble. ')
ty3250T1CurrentCrc6Events = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentCrc6Events.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentCrc6Events.setDescription('Count of CRC errors detected on an ESF framed circuit. In ESF framing a CRC is generated at the source, based upon the composite data. A CRC error indicates the presence of at least one bit error in an ESF superframe. This field is a free-running accumulation of CRC errors and IS NOT reset when the current 15 minute interval expires. It can be reset with the performance command ty3250T1PerfClearEvents. Not applicable if D4/SF framing is selcted.')
ty3250T1CurrentOofEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentOofEvents.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentOofEvents.setDescription('Count of Out-of-Frame events on a T1 circuit. An out-of- frame event occurs when the frame synchronization criteria is lost and a resynchronization must occur. Data is interrupted during frame resynchronization. This field is a free-running accumulation of OOF transitions and IS NOT reset when the current 15 minute interval expires. It can be reset with the performance command ty3250T1PerfClearEvents.')
ty3250T1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentESs.setDescription('The number of Errored Seconds, encountered by a T1 interface in the current 15 minute inter- val. An errored second is a one-second interval with CRC errors or a loss of frame sync occurred.')
ty3250T1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a t1 interface in the current 15 minute interval. A severely errored second is a one second interval with more than 320 CRC errors or one or more frame sync losses.')
ty3250T1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a t1 interface in the current 15 minute interval. A SEFS is a one second interval with one or more frame sync losses.')
ty3250T1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentUASs.setDescription("The number of Unavailable Seconds encountered by a t1 interface in the current 15 minute in- terval. A UAS is a one second interval during which the received signal is classified as 'unavailable due to excessive errors'. A signal is unavailable after receiving ten consective severely errored seconds and stays unavailable until ten seconds without a severely errored second occur.")
ty3250T1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a t1 interface in the current 15 minute interval. A controlled slip is the replication or deletion of a T1 frame at the receiver. These events often indicate a T1 network timing problem.')
ty3250T1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the current 15 minute interval. A BES is a one second interval with more than one and less than 320 CRC errors.')
ty3250T1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 14, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1CurrentLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CurrentLCVs.setDescription('The number of Line Code Violations (LCVs) en- countered by a DS1 interface in the current 15 minute interval. LCVs are non-B8ZS related violations of the alternate mark inversion protocol. An excessive count usually indicates a B8ZS/AMI configuration mismatch in the T1 network.')
ty3250PerfT1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 15), )
if mibBuilder.loadTexts: ty3250PerfT1IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250PerfT1IntervalTable.setDescription('The DS1 Interval table.')
ty3250T1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 15, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1IntervalIndex"), (0, "TY3250I-MIB", "ty3250T1IntervalNumber"))
if mibBuilder.loadTexts: ty3250T1IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalEntry.setDescription('An entry in the DS1 Interval table.')
ty3250T1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalIndex.setDescription('The index value which uniquely identifies the t1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a NetwLineIndex object instance.')
ty3250T1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
ty3250T1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalESs.setDescription('The number of Errored Seconds encountered by a t1 interface in one of the previous 96, indi- vidual 15 minute, intervals. An errored second is a one-second interval with CRC errors or a loss of frame sync occurred.')
ty3250T1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A severely errored second is a one second interval with more than 320 CRC errors or one or more frame sync losses.')
ty3250T1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A SEFS is a one second interval with one or more frame sync losses.')
ty3250T1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalUASs.setDescription("The number of Unavailable Seconds encountered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A UAS is a one second interval during which the received signal is classified as 'unavailable due to excessive errors'. A signal is unavailable after receiving ten consective severely errored seconds and stays unavailable until ten seconds without a severely errored second occur.")
ty3250T1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A controlled slip is the replication or deletion of a T1 frame at the receiver. These events often indicate a T1 network timing problem.')
ty3250T1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A BES is a one second interval with more than one and less than 320 CRC errors.')
ty3250T1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1IntervalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1IntervalLCVs.setDescription('The number of Line Code Violations (LCVs) en- countered by a DS1 interface in the current 15 minute interval. LCVs are non-B8ZS related violations of the alternate mark inversion protocol. An excessive count usually indicates a B8ZS/AMI configuration mismatch in the T1 network.')
ty3250PerfT1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 16), )
if mibBuilder.loadTexts: ty3250PerfT1TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250PerfT1TotalTable.setDescription('The T1 Total table. 24 hour interval.')
ty3250T1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 16, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1TotalIndex"))
if mibBuilder.loadTexts: ty3250T1TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1TotalEntry.setDescription('An entry in the T1 Total table.')
ty3250T1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1TotalIndex.setDescription('The index value which uniquely identifies the t1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a NetwLineIndex object instance.')
ty3250T1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1TotalESs.setDescription('The number of Errored Seconds encountered by a t1 interface in the previous 24 hour interval. An errored second is a one-second interval with CRC errors or a loss of frame sync occurred.')
ty3250T1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1TotalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a t1 interface in the previous 24 hour interval. A severely errored second is a one second interval with more than 320 CRC errors or one or more frame sync losses.')
ty3250T1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1TotalSEFSs.setDescription('The number of Severely Errored Framing Seconds 24 hour interval. A SEFS is a one second interval with one or more frame sync losses.')
ty3250T1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1TotalUASs.setDescription("The number of Unavailable Seconds encountered by a t1 interface in the previous 24 hour in- terval. A UAS is a one second interval during which the received signal is classified as 'unavailable due to excessive errors'. A signal is unavailable after receiving ten consective severely errored seconds and stays unavailable until ten seconds without a severely errored second occur.")
ty3250T1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1TotalCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a t1 interface in the previous 24 hour interval. A controlled slip is the replication or deletion of a T1 frame at the receiver. These events often indicate a T1 network timing problem.')
ty3250T1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1TotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a t1 interface in the previous 24 hour interval. A BES is a one second interval with more than one and less than 320 CRC errors.')
ty3250T1TotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250T1TotalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1TotalLCVs.setDescription('The number of Line Code Violations (LCVs) en- countered by a t1 interface in the current 15 minute interval. LCVs are non-B8ZS related violations of the alternate mark inversion protocol. An excessive count usually indicates a B8ZS/AMI configuration mismatch in the T1 network.')
ty3250T1PerfCmdTypeTable = MibTable((1, 3, 6, 1, 4, 1, 466, 4, 17), )
if mibBuilder.loadTexts: ty3250T1PerfCmdTypeTable.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1PerfCmdTypeTable.setDescription('An entry in the DS1 Interval table.')
ty3250T1PerfCmdType = MibTableRow((1, 3, 6, 1, 4, 1, 466, 4, 17, 1), ).setIndexNames((0, "TY3250I-MIB", "ty3250T1CommandIndex"))
if mibBuilder.loadTexts: ty3250T1PerfCmdType.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1PerfCmdType.setDescription('An entry in the DS1 Interval table.')
ty3250T1CommandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250T1CommandIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1CommandIndex.setDescription('The index value which uniquely identifies the t1 interface to which this command is applica- ble.')
ty3250T1PerfFreezeState = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze-reg", 1), ("unfreeze-reg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty3250T1PerfFreezeState.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1PerfFreezeState.setDescription("This command halts the node's performance monitoring and freezes the current, interval, and total performance register values.")
ty3250T1PerfClearEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-events", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250T1PerfClearEvents.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1PerfClearEvents.setDescription("This command resets all of the (user's) error event registers. This includes the CRC6 and Out-of-Frame counts. It does not affect the interval or 24 hour performance totals.")
ty3250T1PerfClearAll = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 4, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-all", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty3250T1PerfClearAll.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250T1PerfClearAll.setDescription("This command resets all of the (user's) performance registers.")
ty3250AlarmType = MibScalar((1, 3, 6, 1, 4, 1, 466, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("cold-start", 1), ("authentication", 2), ("t1-netw-carrier-loss", 3), ("t1-netw-carrier-detect", 4), ("t1-netw-sync-loss-declare", 5), ("t1-netw-sync-acquire", 6), ("t1-netw-red-alarm-declare", 7), ("t1-netw-red-alarm-clear", 8), ("t1-netw-yellow-alarm-detect", 9), ("t1-netw-yellow-alarm-clear", 10), ("t1-netw-ais-detect", 11), ("t1-netw-ais-clear", 12), ("t1-controlled-slip", 13), ("configuration-update", 14), ("diagnostic-state", 15), ("diagnostic-clear", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty3250AlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: ty3250AlarmType.setDescription('The type of alarms that are generated on the node')
ty3250Trap = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,0)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250Trap.setDescription('A ty3250Trap trap signifies that the sending node had its `ty3250AlarmType` variable modified.')
ty3250coldstart = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,1)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250coldstart.setDescription('cold-start.')
ty3250authentication = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,2)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250authentication.setDescription('authentication.')
ty3250t1netwcarrierloss = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,3)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwcarrierloss.setDescription('t1-netw-carrier-loss.')
ty3250t1netwcarrierdetect = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,4)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwcarrierdetect.setDescription('t1-netw-carrier-detect.')
ty3250t1netwsynclossdeclare = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,5)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwsynclossdeclare.setDescription('t1-netw-sync-loss-declare.')
ty3250t1netwsyncacquire = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,6)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwsyncacquire.setDescription('t1-netw-sync-acquire.')
ty3250t1netwredalarmdeclare = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,7)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwredalarmdeclare.setDescription('t1-netw-red-alarm-declare.')
ty3250t1netwredalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,8)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwredalarmclear.setDescription('t1-netw-red-alarm-clear.')
ty3250t1netwyellowalarmdetect = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,9)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwyellowalarmdetect.setDescription('t1-netw-yellow-alarm-detect.')
ty3250t1netwyellowalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,10)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwyellowalarmclear.setDescription('.')
ty3250t1netwaisdetect = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,11)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwaisdetect.setDescription('t1-netw-ais-detect.')
ty3250t1netwaisclear = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,12)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1netwaisclear.setDescription('t1-netw-ais-clear.')
ty3250t1controlledslip = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,13)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250t1controlledslip.setDescription('t1-controlled-slip.')
ty3250configurationupdate = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,14)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250configurationupdate.setDescription('configuration-update.')
ty3250diagnosticstate = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,15)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250diagnosticstate.setDescription('diagnostic-state.')
ty3250diagnosticclear = NotificationType((1, 3, 6, 1, 4, 1, 466, 4) + (0,16)).setObjects(("TY3250I-MIB", "ty3250AlarmType"))
if mibBuilder.loadTexts: ty3250diagnosticclear.setDescription('diagnostic-clear.')
mibBuilder.exportSymbols("TY3250I-MIB", ty3250CfgConnAutoAssign=ty3250CfgConnAutoAssign, ty3250CfgCommPeerIP=ty3250CfgCommPeerIP, ty3250CfgEditConnEntry=ty3250CfgEditConnEntry, ty3250CfgConnectTable=ty3250CfgConnectTable, ty3250CfgT1Timing=ty3250CfgT1Timing, ty3250Trap=ty3250Trap, ty3250IntfType=ty3250IntfType, ty3250SysNumT1Installed=ty3250SysNumT1Installed, ty3250CfgEditConnCopyCurrtoEdit=ty3250CfgEditConnCopyCurrtoEdit, ty3250T1IntervalCSSs=ty3250T1IntervalCSSs, ty3250t1netwyellowalarmclear=ty3250t1netwyellowalarmclear, ty3250DiagT1RmtLpbkCmd=ty3250DiagT1RmtLpbkCmd, ty3250SysTable=ty3250SysTable, tylink=tylink, ty3250ConnDS0=ty3250ConnDS0, ty3250T1CurrentUASs=ty3250T1CurrentUASs, ty3250T1CurrentESs=ty3250T1CurrentESs, ty3250ConnType=ty3250ConnType, ty3250CfgCommFlowCtrl=ty3250CfgCommFlowCtrl, ty3250SysSoftRev=ty3250SysSoftRev, ty3250CfgEditConnMenu=ty3250CfgEditConnMenu, ty3250CfgCommIndex=ty3250CfgCommIndex, ty3250CfgConnStatus=ty3250CfgConnStatus, ty3250CfgCommBaud=ty3250CfgCommBaud, ty3250T1TotalCSSs=ty3250T1TotalCSSs, ty3250DtePort=ty3250DtePort, ty3250T1TotalIndex=ty3250T1TotalIndex, ty3250DiagBerPattrn=ty3250DiagBerPattrn, ty3250T1PerfFreezeState=ty3250T1PerfFreezeState, ty3250CfgT1Framing=ty3250CfgT1Framing, ty3250t1controlledslip=ty3250t1controlledslip, ty3250ConnStartDS0=ty3250ConnStartDS0, ty3250CfgConnUpdateCmd=ty3250CfgConnUpdateCmd, ty3250CfgDteTiming=ty3250CfgDteTiming, ty3250T1CurrentEntry=ty3250T1CurrentEntry, ty3250IntfMode=ty3250IntfMode, ty3250DiagDteRmtLpbkCmd=ty3250DiagDteRmtLpbkCmd, ty3250DiagT1LocAggrLpbk=ty3250DiagT1LocAggrLpbk, ty3250t1netwaisclear=ty3250t1netwaisclear, ty3250T1TotalEntry=ty3250T1TotalEntry, ty3250PerfT1TotalTable=ty3250PerfT1TotalTable, ty3250CfgCommModeIndex=ty3250CfgCommModeIndex, ty3250SysNumDteInstalled=ty3250SysNumDteInstalled, ty3250CfgCommMask=ty3250CfgCommMask, ty3250CfgDteDataMode=ty3250CfgDteDataMode, ty3250DiagT1Table=ty3250DiagT1Table, ty3250t1netwsyncacquire=ty3250t1netwsyncacquire, ty3250CfgDteClockMode=ty3250CfgDteClockMode, ty3250SysName=ty3250SysName, ty3250ConnAutoPort=ty3250ConnAutoPort, ty3250SnmpManagerIP=ty3250SnmpManagerIP, ty3250T1CurrentOofEvents=ty3250T1CurrentOofEvents, ty3250T1TotalSEFSs=ty3250T1TotalSEFSs, ty3250T1PerfCmdTypeTable=ty3250T1PerfCmdTypeTable, ty3250CfgConnUpdate=ty3250CfgConnUpdate, ty3250AlarmType=ty3250AlarmType, ty3250T1Index=ty3250T1Index, ty3250DiagBerTable=ty3250DiagBerTable, ty3250t1netwsynclossdeclare=ty3250t1netwsynclossdeclare, ty3250SysNumCommInstalled=ty3250SysNumCommInstalled, ty3250T1PerfClearEvents=ty3250T1PerfClearEvents, ty3250ConnDTE=ty3250ConnDTE, ty3250T1IntervalEntry=ty3250T1IntervalEntry, ty3250CfgDteTable=ty3250CfgDteTable, ty3250CfgCommModeEntry=ty3250CfgCommModeEntry, ty3250T1CurrentLCVs=ty3250T1CurrentLCVs, ty3250=ty3250, ty3250ConnDs0Required=ty3250ConnDs0Required, ty3250T1IntervalSEFSs=ty3250T1IntervalSEFSs, ty3250T1TotalUASs=ty3250T1TotalUASs, ty3250CfgDteLineRate=ty3250CfgDteLineRate, ty3250DiagBerErrors=ty3250DiagBerErrors, ty3250PortStatus=ty3250PortStatus, ty3250T1CurrentCrc6Events=ty3250T1CurrentCrc6Events, ty3250CfgCommMode=ty3250CfgCommMode, ty3250T1TotalESs=ty3250T1TotalESs, ty3250CfgCommMyIP=ty3250CfgCommMyIP, ty3250T1TotalBESs=ty3250T1TotalBESs, ty3250T1IntervalNumber=ty3250T1IntervalNumber, ty3250DiagDteTable=ty3250DiagDteTable, ty3250CfgDteIntfType=ty3250CfgDteIntfType, ty3250T1CommandIndex=ty3250T1CommandIndex, ty3250CfgSnmpTable=ty3250CfgSnmpTable, ty3250DiagT1LocLineLpbk=ty3250DiagT1LocLineLpbk, ty3250T1IntervalIndex=ty3250T1IntervalIndex, ty3250CfgCommTable=ty3250CfgCommTable, ty3250t1netwredalarmdeclare=ty3250t1netwredalarmdeclare, ty3250CfgCommDataBits=ty3250CfgCommDataBits, ty3250T1CurrentSEFSs=ty3250T1CurrentSEFSs, ty3250CfgCommFormat=ty3250CfgCommFormat, ty3250PortStatusTable=ty3250PortStatusTable, ty3250CfgCommModeTable=ty3250CfgCommModeTable, ty3250CfgT1CicuitID=ty3250CfgT1CicuitID, ty3250CfgT1LboSetting=ty3250CfgT1LboSetting, ty3250t1netwyellowalarmdetect=ty3250t1netwyellowalarmdetect, ty3250ConnDteRate=ty3250ConnDteRate, ty3250t1netwredalarmclear=ty3250t1netwredalarmclear, ty3250diagnosticstate=ty3250diagnosticstate, ty3250t1netwaisdetect=ty3250t1netwaisdetect, ty3250CfgDteChannelDensity=ty3250CfgDteChannelDensity, ty3250diagnosticclear=ty3250diagnosticclear, ty3250ConnT1Index=ty3250ConnT1Index, ty3250CfgEditConnClearEditBuff=ty3250CfgEditConnClearEditBuff, ty3250T1PerfClearAll=ty3250T1PerfClearAll, ty3250DiagDteRmtLpbkStatus=ty3250DiagDteRmtLpbkStatus, ty3250SysHardRev=ty3250SysHardRev, ty3250CfgCommMaxMTU=ty3250CfgCommMaxMTU, ty3250CfgCommParity=ty3250CfgCommParity, ty3250SnmpEntry=ty3250SnmpEntry, ty3250DiagBerTimeElaps=ty3250DiagBerTimeElaps, ty3250Type=ty3250Type, ty3250CfgT1Density=ty3250CfgT1Density, ty3250configurationupdate=ty3250configurationupdate, ty3250IntfAlarms=ty3250IntfAlarms, ty3250T1IntervalBESs=ty3250T1IntervalBESs, ty3250SysResetNode=ty3250SysResetNode, ty3250Ds0=ty3250Ds0, ty3250T1CurrentBESs=ty3250T1CurrentBESs, ty3250DiagBerState=ty3250DiagBerState, ty3250DiagT1LocPylLpbk=ty3250DiagT1LocPylLpbk, ty3250IntfIndex=ty3250IntfIndex, ty3250ConnAutoT1Index=ty3250ConnAutoT1Index, ty3250DiagBerStatus=ty3250DiagBerStatus, ty3250PerfT1IntervalTable=ty3250PerfT1IntervalTable, ty3250T1IntervalSESs=ty3250T1IntervalSESs, ty3250CfgT1LineEncoding=ty3250CfgT1LineEncoding, ty3250CfgCommIntf=ty3250CfgCommIntf, ty3250CfgT1Interface=ty3250CfgT1Interface, ty3250ConnAutoType=ty3250ConnAutoType, ty3250ConnAutoStatus=ty3250ConnAutoStatus, ty3250CfgT1Table=ty3250CfgT1Table, ty3250t1netwcarrierdetect=ty3250t1netwcarrierdetect, ty3250T1CurrentIndex=ty3250T1CurrentIndex, ty3250T1TotalLCVs=ty3250T1TotalLCVs, ty3250CfgCurrentConnTable=ty3250CfgCurrentConnTable, ty3250T1PerfCmdType=ty3250T1PerfCmdType, ty3250PerfT1CurrentTable=ty3250PerfT1CurrentTable, ty3250T1CurrentCSSs=ty3250T1CurrentCSSs, ty3250T1IntervalLCVs=ty3250T1IntervalLCVs, ty3250t1netwcarrierloss=ty3250t1netwcarrierloss, ty3250DiagT1RmtLpbkStatus=ty3250DiagT1RmtLpbkStatus, ty3250CfgCommStopBits=ty3250CfgCommStopBits, ty3250DiagDteLocBidirLpbk=ty3250DiagDteLocBidirLpbk, ty3250IntfStatus=ty3250IntfStatus, ty3250T1IntervalESs=ty3250T1IntervalESs, ty3250ConnDteDensity=ty3250ConnDteDensity, ty3250T1IntervalUASs=ty3250T1IntervalUASs, ty3250authentication=ty3250authentication, ty3250coldstart=ty3250coldstart, ty3250T1TotalSESs=ty3250T1TotalSESs, ty3250T1CurrentSESs=ty3250T1CurrentSESs, ty3250SysType=ty3250SysType, ty3250CfgEditConnTable=ty3250CfgEditConnTable, ty3250CfgCurrentConnections=ty3250CfgCurrentConnections, ty3250SnmpIndex=ty3250SnmpIndex)
