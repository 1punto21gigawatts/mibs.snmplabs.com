#
# PySNMP MIB module Dell-GVRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Dell-GVRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:55:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
rnd, = mibBuilder.importSymbols("Dell-MIB", "rnd")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Counter32, Gauge32, IpAddress, MibIdentifier, Integer32, Bits, Unsigned32, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Counter32", "Gauge32", "IpAddress", "MibIdentifier", "Integer32", "Bits", "Unsigned32", "ModuleIdentity", "ObjectIdentity")
TruthValue, TextualConvention, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "TimeInterval", "DisplayString")
rlGvrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 64))
rlGvrp.setRevisions(('2007-01-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlGvrp.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rlGvrp.setLastUpdated('200701020000Z')
if mibBuilder.loadTexts: rlGvrp.setOrganization('Dell')
if mibBuilder.loadTexts: rlGvrp.setContactInfo('www.dell.com')
if mibBuilder.loadTexts: rlGvrp.setDescription('This private MIB module defines GVRP private MIBs.')
rlPortGvrpTimersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 64, 1), )
if mibBuilder.loadTexts: rlPortGvrpTimersTable.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpTimersTable.setDescription('A table of GVRP timer values for every bridge port. This is indexed by dot1dBasePort.')
rlPortGvrpTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 64, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: rlPortGvrpTimersEntry.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpTimersEntry.setDescription('GVRP timer values for a bridge port.')
rlPortGvrpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 1, 1, 1), TimeInterval().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGvrpJoinTime.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpJoinTime.setDescription('The GVRP Join time, in centiseconds.')
rlPortGvrpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 1, 1, 2), TimeInterval().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGvrpLeaveTime.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpLeaveTime.setDescription('The GVRP Leave time, in centiseconds.')
rlPortGvrpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 1, 1, 3), TimeInterval().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGvrpLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpLeaveAllTime.setDescription('The GVRP LeaveAll time, in centiseconds.')
rlPortGvrpOverrideGarp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 1, 1, 4), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGvrpOverrideGarp.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpOverrideGarp.setDescription('If enabled{1}, GVRP timer values for this port are determined by the values in this entry. Otherwise, they are determined by the values in dot1dPortGarpTable.')
rlGvrpSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 64, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGvrpSupported.setStatus('current')
if mibBuilder.loadTexts: rlGvrpSupported.setDescription('Is GVRP supported in this device or not')
rlGvrpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 64, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGvrpMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlGvrpMibVersion.setDescription("MIB's version, the current version is 3.")
rlPortGvrpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 64, 4), )
if mibBuilder.loadTexts: rlPortGvrpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsTable.setDescription('A table of GVRP statistics values for every bridge port. This is indexed by dot1dBasePort.')
rlPortGvrpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 64, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: rlPortGvrpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsEntry.setDescription('GVRP statistics values for a bridge port.')
rlPortGvrpStatisticsRJE = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsRJE.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsRJE.setDescription('The number of Join Empty Received on the port, since the last clearance.')
rlPortGvrpStatisticsRJIn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsRJIn.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsRJIn.setDescription('The number of Join In Received on the port, since the last clearance.')
rlPortGvrpStatisticsREmp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsREmp.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsREmp.setDescription('The number of Empty Received on the port, since the last clearance.')
rlPortGvrpStatisticsRLIn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsRLIn.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsRLIn.setDescription('The number of Leave In Received on the port, since the last clearance.')
rlPortGvrpStatisticsRLE = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsRLE.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsRLE.setDescription('The number of Leave Empty Received on the port, since the last clearance.')
rlPortGvrpStatisticsRLA = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsRLA.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsRLA.setDescription('The number of Leave All Received on the port, since the last clearance.')
rlPortGvrpStatisticsSJE = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsSJE.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsSJE.setDescription('The number of Join Empty Sent on the port, since the last clearance.')
rlPortGvrpStatisticsSJIn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsSJIn.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsSJIn.setDescription('The number of Join In Sent on the port, since the last clearance.')
rlPortGvrpStatisticsSEmp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsSEmp.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsSEmp.setDescription('The number of Empty Sent on the port, since the last clearance.')
rlPortGvrpStatisticsSLIn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsSLIn.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsSLIn.setDescription('The number of Leave In Sent on the port, since the last clearance.')
rlPortGvrpStatisticsSLE = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsSLE.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsSLE.setDescription('The number of Leave Empty Sent on the port, since the last clearance.')
rlPortGvrpStatisticsSLA = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpStatisticsSLA.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsSLA.setDescription('The number of Leave All Sent on the port, since the last clearance.')
rlPortGvrpStatisticsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("passive", 2))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGvrpStatisticsClear.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpStatisticsClear.setDescription("activate - the signal/trigger to clear ALL the rlPortGvrpStatisticsEntry's fields. passive - specify that the rlPortGvrpStatisticsClear field is not activate, or finshed the clearnce process. the rlPortGvrpStatisticsClear return automatically to passive after it was activate.")
rlPortGvrpErrorStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 64, 5), )
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsTable.setDescription('A table of GVRP ErrorStatistics values for every bridge port. This is indexed by dot1dBasePort.')
rlPortGvrpErrorStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 64, 5, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsEntry.setDescription('GVRP ErrorStatistics values for a bridge port.')
rlPortGvrpErrorStatisticsInvProt = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvProt.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvProt.setDescription('The number of Invalid Protocol Id encountered by the GVRP port. (since the last clearance)')
rlPortGvrpErrorStatisticsInvAtyp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvAtyp.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvAtyp.setDescription('The number of Invalid Attribute Type encountered by the GVRP port. (since the last clearance)')
rlPortGvrpErrorStatisticsInvAval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvAval.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvAval.setDescription('The number of Invalid Attribute Value encountered by the GVRP port. (since the last clearance)')
rlPortGvrpErrorStatisticsInvPlen = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvPlen.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvPlen.setDescription('The number of Invalid PDU Length encountered by the GVRP port. (since the last clearance)')
rlPortGvrpErrorStatisticsInvAlen = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvAlen.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvAlen.setDescription('The number of Invalid Attribute Length encountered by the GVRP port. (since the last clearance)')
rlPortGvrpErrorStatisticsInvEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvEvent.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsInvEvent.setDescription('The number of Invalid Event encountered by the GVRP port. (since the last clearance)')
rlPortGvrpErrorStatisticsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("passive", 2))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsClear.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpErrorStatisticsClear.setDescription("activate - the signal/trigger to clear ALL the rlPortGvrpErrorStatisticsEntry's fields. passive - specify that the rlPortGvrpErrorStatisticsClear field is not activate, or finshed the clearnce process. the rlPortGvrpErrorStatisticsClear return automatically to passive after it was activate.")
rlPortGvrpApplicantStatusTable = MibTable((1, 3, 6, 1, 4, 1, 89, 64, 6), )
if mibBuilder.loadTexts: rlPortGvrpApplicantStatusTable.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpApplicantStatusTable.setDescription('A table of GVRP Applicant Status values for every bridge port. This is indexed by dot1dBasePort.')
rlPortGvrpApplicantStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 64, 6, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: rlPortGvrpApplicantStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpApplicantStatusEntry.setDescription('GVRP Applicant Status value for a bridge port.')
rlPortGvrpApplicantStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("participant", 1), ("nonParticipant", 2))).clone('participant')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGvrpApplicantStatusValue.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpApplicantStatusValue.setDescription('participant - the Gvrp enabled port sending GARP PDUs. nonParticipant - preventing the Gvrp enabled port from sending GARP PDUs.')
rlPortGvrpRegistrationModeTable = MibTable((1, 3, 6, 1, 4, 1, 89, 64, 8), )
if mibBuilder.loadTexts: rlPortGvrpRegistrationModeTable.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpRegistrationModeTable.setDescription('A table of GVRP Registration Mode values for every bridge port. This is indexed by dot1dBasePort.')
rlPortGvrpRegistrationModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 64, 8, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: rlPortGvrpRegistrationModeEntry.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpRegistrationModeEntry.setDescription('GVRP Registration Mode value for a bridge port.')
rlPortGvrpRegistrationModeForbidden = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 64, 8, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortGvrpRegistrationModeForbidden.setStatus('current')
if mibBuilder.loadTexts: rlPortGvrpRegistrationModeForbidden.setDescription('true - deregisters all VLANS on the specified port and prevents any VLAN creation or registration on that port. false - the registration operation on this port behaves normally.')
mibBuilder.exportSymbols("Dell-GVRP-MIB", rlPortGvrpErrorStatisticsInvAval=rlPortGvrpErrorStatisticsInvAval, rlPortGvrpRegistrationModeTable=rlPortGvrpRegistrationModeTable, PYSNMP_MODULE_ID=rlGvrp, rlPortGvrpJoinTime=rlPortGvrpJoinTime, rlGvrpMibVersion=rlGvrpMibVersion, rlPortGvrpRegistrationModeForbidden=rlPortGvrpRegistrationModeForbidden, rlPortGvrpErrorStatisticsInvPlen=rlPortGvrpErrorStatisticsInvPlen, rlPortGvrpStatisticsRJIn=rlPortGvrpStatisticsRJIn, rlPortGvrpErrorStatisticsInvProt=rlPortGvrpErrorStatisticsInvProt, rlPortGvrpRegistrationModeEntry=rlPortGvrpRegistrationModeEntry, rlPortGvrpStatisticsRLIn=rlPortGvrpStatisticsRLIn, rlPortGvrpApplicantStatusEntry=rlPortGvrpApplicantStatusEntry, rlPortGvrpStatisticsSLA=rlPortGvrpStatisticsSLA, rlPortGvrpTimersTable=rlPortGvrpTimersTable, rlPortGvrpStatisticsEntry=rlPortGvrpStatisticsEntry, rlPortGvrpTimersEntry=rlPortGvrpTimersEntry, rlPortGvrpLeaveAllTime=rlPortGvrpLeaveAllTime, rlGvrp=rlGvrp, rlPortGvrpOverrideGarp=rlPortGvrpOverrideGarp, rlPortGvrpStatisticsRLE=rlPortGvrpStatisticsRLE, rlPortGvrpErrorStatisticsClear=rlPortGvrpErrorStatisticsClear, rlPortGvrpStatisticsRJE=rlPortGvrpStatisticsRJE, rlPortGvrpStatisticsRLA=rlPortGvrpStatisticsRLA, rlPortGvrpApplicantStatusValue=rlPortGvrpApplicantStatusValue, rlPortGvrpErrorStatisticsInvAlen=rlPortGvrpErrorStatisticsInvAlen, rlPortGvrpStatisticsSJIn=rlPortGvrpStatisticsSJIn, rlPortGvrpErrorStatisticsInvEvent=rlPortGvrpErrorStatisticsInvEvent, rlPortGvrpStatisticsSJE=rlPortGvrpStatisticsSJE, rlPortGvrpStatisticsSEmp=rlPortGvrpStatisticsSEmp, rlPortGvrpStatisticsREmp=rlPortGvrpStatisticsREmp, rlPortGvrpStatisticsSLE=rlPortGvrpStatisticsSLE, rlPortGvrpErrorStatisticsInvAtyp=rlPortGvrpErrorStatisticsInvAtyp, rlPortGvrpStatisticsClear=rlPortGvrpStatisticsClear, rlPortGvrpErrorStatisticsEntry=rlPortGvrpErrorStatisticsEntry, rlPortGvrpLeaveTime=rlPortGvrpLeaveTime, rlGvrpSupported=rlGvrpSupported, rlPortGvrpStatisticsTable=rlPortGvrpStatisticsTable, rlPortGvrpErrorStatisticsTable=rlPortGvrpErrorStatisticsTable, rlPortGvrpApplicantStatusTable=rlPortGvrpApplicantStatusTable, rlPortGvrpStatisticsSLIn=rlPortGvrpStatisticsSLIn)
