#
# PySNMP MIB module Unisphere-Data-L2F-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-L2F-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:31:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, iso, Bits, ObjectIdentity, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, MibIdentifier, Gauge32, Counter64, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "Bits", "ObjectIdentity", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "MibIdentifier", "Gauge32", "Counter64", "Unsigned32", "IpAddress")
TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdEnable, = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdEnable")
usdL2fMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53))
usdL2fMIB.setRevisions(('2001-09-25 13:54', '2001-09-19 18:07',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdL2fMIB.setRevisionsDescriptions(('Added new object usdL2tpSysConfigReceiveDataSequencingIgnore.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdL2fMIB.setLastUpdated('200109251354Z')
if mibBuilder.loadTexts: usdL2fMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdL2fMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdL2fMIB.setDescription('The Layer 2 Forwarding MIB for the Unisphere Networks enterprise.')
class UsdL2fTunnelId(TextualConvention, Integer32):
    description = 'An L2F Tunnel ID. Implementation constraints may restrict the range of values actually used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class UsdL2fSessionId(TextualConvention, Integer32):
    description = 'An L2F Session ID. Implementation constraints may restrict the range of values actually used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class UsdL2fAdminState(TextualConvention, Integer32):
    description = 'The administrative state exerted on L2F tunnels sessions at some scope of control. enabled New tunnels/sessions may be instantiated. disabled All tunnels/sessions are terminated. drain No new tunnels/sessions may be instantiated, but any existing tunnels/sessions may persist until they expire by other means. The DESCRIPTION clause of an object defined to have this syntax must describe the scope of control that object exerts (e.g., all tunnels/sessions across the system, sessions within a single tunnel, etc.).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("enabled", 0), ("disabled", 1), ("drain", 2))

class UsdL2fTransport(TextualConvention, Integer32):
    description = 'Transport type over which L2F is carried.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("other", 0), ("udpIp", 1))

usdL2fTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 0))
usdL2fObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1))
usdL2fTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 2))
usdL2fConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 3))
usdL2fSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1))
usdL2fDestination = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2))
usdL2fTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3))
usdL2fSession = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4))
usdL2fTransport = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5))
usdL2fSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 1))
usdL2fSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2))
usdL2fSysConfigAdminState = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 1, 1), UsdL2fAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2fSysConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysConfigAdminState.setDescription('Exerts control over all L2F tunnels/sessions in the system.')
usdL2fSysConfigDestructTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2fSysConfigDestructTimeout.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysConfigDestructTimeout.setDescription('The amount of time, in seconds, to preserve dynamic tunnels/sessions after they become inactive, e.g. to poll their statistics.')
usdL2fSysConfigIpChecksumEnable = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 1, 3), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2fSysConfigIpChecksumEnable.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysConfigIpChecksumEnable.setDescription('Enable/disable IP checksumming for tunnels with UDP/IP transport.')
usdL2fSysConfigReceiveDataSequencingIgnore = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 1, 4), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2fSysConfigReceiveDataSequencingIgnore.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysConfigReceiveDataSequencingIgnore.setDescription('Enable/disable ignoring of receive sequencing of L2F data packets.')
usdL2fSysStatusProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusProtocolVersion.setDescription('Vector of supported L2F protocol version and revision numbers. Supported versions are identified via a two octet pairing where the first octet indicates the version and the second octet contains the revision.')
usdL2fSysStatusVendorName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusVendorName.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusVendorName.setDescription('Vendor name of the L2F protocol stack.')
usdL2fSysStatusFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusFirmwareRev.setDescription('Firmware revision for the L2F protocol stack.')
usdL2fSysStatusTotalDestinations = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusTotalDestinations.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusTotalDestinations.setDescription('Number of destination creations attempted.')
usdL2fSysStatusFailedDestinations = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusFailedDestinations.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusFailedDestinations.setDescription('Number of destination creation attempts that failed.')
usdL2fSysStatusActiveDestinations = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusActiveDestinations.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusActiveDestinations.setDescription('Number of destinations having at least one active tunnel.')
usdL2fSysStatusTotalTunnels = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusTotalTunnels.setDescription('Number of tunnel creations attempted.')
usdL2fSysStatusFailedTunnels = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusFailedTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusFailedTunnels.setDescription('Number of tunnel creation attempts that failed to reach the established state.')
usdL2fSysStatusFailedTunnelAuthens = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusFailedTunnelAuthens.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusFailedTunnelAuthens.setDescription('Number of tunnel creation attempts that failed authentication.')
usdL2fSysStatusActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusActiveTunnels.setDescription('Number of tunnels currently established.')
usdL2fSysStatusTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusTotalSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusTotalSessions.setDescription('Number of session creations attempted.')
usdL2fSysStatusFailedSessions = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusFailedSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusFailedSessions.setDescription('Number of session creation attempts that failed to reach the established state.')
usdL2fSysStatusActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 1, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSysStatusActiveSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2fSysStatusActiveSessions.setDescription('Number of sessions currently established.')
usdL2fDestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 1))
usdL2fDestStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2))
usdL2fDestStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3))
usdL2fDestConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 1, 2), )
if mibBuilder.loadTexts: usdL2fDestConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestConfigTable.setDescription('The L2F destination configuration table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2fDestStatsTable.')
usdL2fDestConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fDestConfigIfIndex"))
if mibBuilder.loadTexts: usdL2fDestConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestConfigEntry.setDescription('Describes the configuration attributes of an L2F destination.')
usdL2fDestConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fDestConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestConfigIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2fDestConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2fDestConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestConfigRowStatus.setDescription('An implementation may choose not to support administrative configuration of tunnels.')
usdL2fDestConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 1, 2, 1, 3), UsdL2fAdminState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2fDestConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestConfigAdminState.setDescription('The configured administrative state.')
usdL2fDestStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1), )
if mibBuilder.loadTexts: usdL2fDestStatusTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusTable.setDescription('The L2F destination status table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2fDestConfigTable.')
usdL2fDestStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fDestStatusIfIndex"))
if mibBuilder.loadTexts: usdL2fDestStatusEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusEntry.setDescription('Describes the status attributes of an L2F destination.')
usdL2fDestStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fDestStatusIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2fDestStatusTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 2), UsdL2fTransport()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatusTransport.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusTransport.setDescription('The underlying transport over which this L2F destination is carried.')
usdL2fDestStatusEffectiveAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 3), UsdL2fAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatusEffectiveAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusEffectiveAdminState.setDescription('The administrative state currently in effect. This could be the configured admin state for this destination, or an overriding admin state exerted from a higher hierarchical level (system).')
usdL2fDestStatusTotalTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatusTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusTotalTunnels.setDescription('Number of tunnel creations attempted.')
usdL2fDestStatusFailedTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatusFailedTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusFailedTunnels.setDescription('Number of tunnel creation attempts that failed to reach the established state.')
usdL2fDestStatusFailedTunnelAuthens = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatusFailedTunnelAuthens.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusFailedTunnelAuthens.setDescription('Number of tunnel creation attempts that failed authentication.')
usdL2fDestStatusActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatusActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusActiveTunnels.setDescription('Number of tunnels currently established.')
usdL2fDestStatusTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatusTotalSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusTotalSessions.setDescription('Number of session creations attempted.')
usdL2fDestStatusFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatusFailedSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusFailedSessions.setDescription('Number of session creation attempts that failed to reach the established state.')
usdL2fDestStatusActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 2, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatusActiveSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatusActiveSessions.setDescription('Number of sessions currently established.')
usdL2fDestStatTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1), )
if mibBuilder.loadTexts: usdL2fDestStatTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatTable.setDescription('The L2F destination statistics table. Describes the aggregate control and payload statistics for all L2F tunnels configured on each destination. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2fDestConfigTable.')
usdL2fDestStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fDestStatIfIndex"))
if mibBuilder.loadTexts: usdL2fDestStatEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatEntry.setDescription('Describes the aggregate L2F control and payload statistics for all L2F tunnels on an L2F destination.')
usdL2fDestStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fDestStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2fDestStatCtlRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatCtlRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatCtlRecvOctets.setDescription('Number of control octets received.')
usdL2fDestStatCtlRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatCtlRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatCtlRecvPackets.setDescription('Number of control packets received.')
usdL2fDestStatCtlRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatCtlRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatCtlRecvErrors.setDescription('Number of control packets incurring reception errors.')
usdL2fDestStatCtlRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatCtlRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatCtlRecvDiscards.setDescription('Number of control packets discarded after reception.')
usdL2fDestStatCtlSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatCtlSendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatCtlSendOctets.setDescription('Number of control octets sent.')
usdL2fDestStatCtlSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatCtlSendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatCtlSendPackets.setDescription('Number of control packets sent.')
usdL2fDestStatCtlSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatCtlSendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatCtlSendErrors.setDescription('Number of control packets incurring transmission errors.')
usdL2fDestStatCtlSendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatCtlSendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatCtlSendDiscards.setDescription('Number of control packets discarded before transmission.')
usdL2fDestStatPayRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatPayRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatPayRecvOctets.setDescription('Number of payload octets received.')
usdL2fDestStatPayRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatPayRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatPayRecvPackets.setDescription('Number of payload packets received.')
usdL2fDestStatPayRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatPayRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatPayRecvErrors.setDescription('Number of payload packets incurring reception errors.')
usdL2fDestStatPayRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatPayRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatPayRecvDiscards.setDescription('Number of payload packets discarded after reception.')
usdL2fDestStatPaySendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatPaySendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatPaySendOctets.setDescription('Number of payload octets sent.')
usdL2fDestStatPaySendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatPaySendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatPaySendPackets.setDescription('Number of payload packets sent.')
usdL2fDestStatPaySendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatPaySendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatPaySendErrors.setDescription('Number of payload packets incurring transmission errors.')
usdL2fDestStatPaySendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fDestStatPaySendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fDestStatPaySendDiscards.setDescription('Number of payload packets discarded before transmission.')
usdL2fTunnelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 1))
usdL2fTunnelStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2))
usdL2fTunnelStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3))
usdL2fTunnelMap = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4))
usdL2fTunnelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 1, 2), )
if mibBuilder.loadTexts: usdL2fTunnelConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelConfigTable.setDescription('The L2F tunnel configuration table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2fTunnelStatsTable.')
usdL2fTunnelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fTunnelConfigIfIndex"))
if mibBuilder.loadTexts: usdL2fTunnelConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelConfigEntry.setDescription('Describes the configuration attributes of an L2F tunnel.')
usdL2fTunnelConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fTunnelConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelConfigIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2fTunnelConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2fTunnelConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelConfigRowStatus.setDescription('An implementation may choose not to support administrative configuration of tunnels.')
usdL2fTunnelConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 1, 2, 1, 3), UsdL2fAdminState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2fTunnelConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelConfigAdminState.setDescription('The configured administrative state.')
usdL2fTunnelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1), )
if mibBuilder.loadTexts: usdL2fTunnelStatusTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusTable.setDescription('The L2F tunnel status and statistics table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2fTunnelConfigTable.')
usdL2fTunnelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusIfIndex"))
if mibBuilder.loadTexts: usdL2fTunnelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusEntry.setDescription('An L2F tunnel interface stats entry.')
usdL2fTunnelStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fTunnelStatusIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusIfIndex.setDescription('Same as the value of ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2fTunnelStatusTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 2), UsdL2fTransport()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusTransport.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusTransport.setDescription('The underlying transport over which this L2F tunnel is carried.')
usdL2fTunnelStatusLocalTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 3), UsdL2fTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusLocalTunnelId.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusLocalTunnelId.setDescription('The local tunnel identifier.')
usdL2fTunnelStatusRemoteTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 4), UsdL2fTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusRemoteTunnelId.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusRemoteTunnelId.setDescription('The remote tunnel identifier.')
usdL2fTunnelStatusEffectiveAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 5), UsdL2fAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusEffectiveAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusEffectiveAdminState.setDescription('The administrative state currently in effect. This could be the configured admin state for this tunnel, or an overriding admin state exerted from a higher hierarchical level (system, destination).')
usdL2fTunnelStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("connecting", 1), ("established", 2), ("disconnecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusState.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusState.setDescription('The current state of the tunnel.')
usdL2fTunnelStatusInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusInitiated.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusInitiated.setDescription('Indicates whether the tunnel was initiated locally, or by the remote tunnel peer.')
usdL2fTunnelStatusRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusRemoteHostName.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusRemoteHostName.setDescription('The host name obtained during the tunnel establishment phase (via the Host Name AVP) of the L2F peer. If the tunnel is idle, this object should maintain its value from the last time it was connected, or a zero-length string if no name was previously known.')
usdL2fTunnelStatusTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusTotalSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusTotalSessions.setDescription('The total number of sessions that this tunnel has successfully connected through to its tunnel peer since this tunnel was created, including those that have since terminated.')
usdL2fTunnelStatusFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusFailedSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusFailedSessions.setDescription('The number of sessions that were initiated but failed to reach the established phase.')
usdL2fTunnelStatusActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusActiveSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusActiveSessions.setDescription('The current number of sessions in the established state.')
usdL2fTunnelStatusLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusLastErrorCode.setDescription('The last value of the error code as described in the Result Code AVP which caused the tunnel to disconnect.')
usdL2fTunnelStatusLastErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusLastErrorMessage.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusLastErrorMessage.setDescription('The last value of the optional message as described in the Result Code AVP which caused the tunnel to disconnect.')
usdL2fTunnelStatusCumEstabTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 2, 1, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatusCumEstabTime.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatusCumEstabTime.setDescription('The cumulative time in seconds that this tunnel, since first being created, has spent in the established state (which may be punctuated by intervals outside the established state).')
usdL2fTunnelStatTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1), )
if mibBuilder.loadTexts: usdL2fTunnelStatTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatTable.setDescription('The L2F tunnel statistics table. Describes the control and payload statistics for each L2F tunnel. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2fTunnelConfigTable.')
usdL2fTunnelStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fTunnelStatIfIndex"))
if mibBuilder.loadTexts: usdL2fTunnelStatEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatEntry.setDescription('Describes the L2F control and payload statistics for an L2F tunnel.')
usdL2fTunnelStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fTunnelStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2fTunnelStatCtlRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvOctets.setDescription('Number of control octets received.')
usdL2fTunnelStatCtlRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvPackets.setDescription('Number of control packets received.')
usdL2fTunnelStatCtlRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvErrors.setDescription('Number of control packets incurring reception errors.')
usdL2fTunnelStatCtlRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvDiscards.setDescription('Number of control packets discarded after reception.')
usdL2fTunnelStatCtlSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatCtlSendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatCtlSendOctets.setDescription('Number of control octets sent.')
usdL2fTunnelStatCtlSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatCtlSendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatCtlSendPackets.setDescription('Number of control packets sent.')
usdL2fTunnelStatCtlSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatCtlSendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatCtlSendErrors.setDescription('Number of control packets incurring transmission errors.')
usdL2fTunnelStatCtlSendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatCtlSendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatCtlSendDiscards.setDescription('Number of control packets discarded before transmission.')
usdL2fTunnelStatPayRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatPayRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatPayRecvOctets.setDescription('Number of payload octets received.')
usdL2fTunnelStatPayRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatPayRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatPayRecvPackets.setDescription('Number of payload packets received.')
usdL2fTunnelStatPayRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatPayRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatPayRecvErrors.setDescription('Number of payload packets incurring reception errors.')
usdL2fTunnelStatPayRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatPayRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatPayRecvDiscards.setDescription('Number of payload packets discarded after reception.')
usdL2fTunnelStatPaySendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatPaySendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatPaySendOctets.setDescription('Number of payload octets sent.')
usdL2fTunnelStatPaySendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatPaySendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatPaySendPackets.setDescription('Number of payload packets sent.')
usdL2fTunnelStatPaySendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatPaySendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatPaySendErrors.setDescription('Number of payload packets incurring transmission errors.')
usdL2fTunnelStatPaySendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatPaySendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatPaySendDiscards.setDescription('Number of payload packets discarded before transmission.')
usdL2fTunnelStatCtlRecvOutOfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvOutOfSequence.setStatus('current')
if mibBuilder.loadTexts: usdL2fTunnelStatCtlRecvOutOfSequence.setDescription('Number of control packets not received in the correct sequence number order.')
usdL2fMapTifSidToSifTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4, 1), )
if mibBuilder.loadTexts: usdL2fMapTifSidToSifTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapTifSidToSifTable.setDescription('Table of TunnelIf/SessionId -> SessionIf mappings.')
usdL2fMapTifSidToSifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fMapTifSidToSifTunnelIfIndex"), (0, "Unisphere-Data-L2F-MIB", "usdL2fMapTifSidToSifLocalSessionId"))
if mibBuilder.loadTexts: usdL2fMapTifSidToSifEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapTifSidToSifEntry.setDescription('A mapping of TunnelIf/SessionId to SessionIf.')
usdL2fMapTifSidToSifTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fMapTifSidToSifTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapTifSidToSifTunnelIfIndex.setDescription('The ifIndex of a tunnel interface.')
usdL2fMapTifSidToSifLocalSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4, 1, 1, 2), UsdL2fSessionId())
if mibBuilder.loadTexts: usdL2fMapTifSidToSifLocalSessionId.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapTifSidToSifLocalSessionId.setDescription('A local session ID on the associated tunnel interface.')
usdL2fMapTifSidToSifSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fMapTifSidToSifSessionIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapTifSidToSifSessionIfIndex.setDescription("The ifIndex of the session interface identified by this entry's Tunnel ifIndex and local Session Id pair.")
usdL2fMapTidToTifTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4, 2), )
if mibBuilder.loadTexts: usdL2fMapTidToTifTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapTidToTifTable.setDescription('Map L2F tunnel IDs to tunnel interfaces.')
usdL2fMapTidToTifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4, 2, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fMapTidToTifLocalTunnelId"))
if mibBuilder.loadTexts: usdL2fMapTidToTifEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapTidToTifEntry.setDescription('A mapping of L2F tunnel ID to tunnel interface.')
usdL2fMapTidToTifLocalTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4, 2, 1, 1), UsdL2fTunnelId())
if mibBuilder.loadTexts: usdL2fMapTidToTifLocalTunnelId.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapTidToTifLocalTunnelId.setDescription('A local tunnel identifier.')
usdL2fMapTidToTifIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 3, 4, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fMapTidToTifIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapTidToTifIfIndex.setDescription('The ifIndex of the tunnel interface having the associated tunnel identifier.')
usdL2fSessionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 1))
usdL2fSessionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2))
usdL2fSessionStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3))
usdL2fSessionConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 1, 2), )
if mibBuilder.loadTexts: usdL2fSessionConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionConfigTable.setDescription('The L2F session configuration table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2fSessionStatsTable.')
usdL2fSessionConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fSessionConfigIfIndex"))
if mibBuilder.loadTexts: usdL2fSessionConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionConfigEntry.setDescription('Describes the configuration attributes of an L2F session.')
usdL2fSessionConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fSessionConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionConfigIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2fSessionConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2fSessionConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionConfigRowStatus.setDescription('An implementation may choose not to support administrative configuration of tunnels.')
usdL2fSessionConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 1, 2, 1, 3), UsdL2fAdminState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2fSessionConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionConfigAdminState.setDescription('The configured administrative state.')
usdL2fSessionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1), )
if mibBuilder.loadTexts: usdL2fSessionStatusTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusTable.setDescription('The L2F session status and statistics table.')
usdL2fSessionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fSessionStatusIfIndex"))
if mibBuilder.loadTexts: usdL2fSessionStatusEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusEntry.setDescription('An L2F session interface status and statistics entry.')
usdL2fSessionStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fSessionStatusIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusIfIndex.setDescription('The ifIndex of an L2F session interface.')
usdL2fSessionStatusLocalSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 2), UsdL2fSessionId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusLocalSessionId.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusLocalSessionId.setDescription('The local session ID for the session.')
usdL2fSessionStatusRemoteSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 3), UsdL2fSessionId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusRemoteSessionId.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusRemoteSessionId.setDescription('The remote session ID for the session.')
usdL2fSessionStatusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusUserName.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusUserName.setDescription('The peer session name on this interface, typically the login name of the remote user. If the user name is unknown this object will contain a zero-length string.')
usdL2fSessionStatusEffectiveAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 5), UsdL2fAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusEffectiveAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusEffectiveAdminState.setDescription('The administrative state currently in effect. This could be the configured admin state for this session, or an overriding admin state exerted from a higher hierarchical level (system, destination, tunnel).')
usdL2fSessionStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("connecting", 1), ("established", 2), ("disconnecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusState.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusState.setDescription('The current state of the session.')
usdL2fSessionStatusCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("lacIncoming", 1), ("lnsIncoming", 2), ("lacOutgoing", 3), ("lnsOutgoing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusCallType.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusCallType.setDescription('The type of call and role this tunnel peer is providing for this session. For example, lacIncoming(1) indicates this tunnel peer is acting as a LAC and generated a Incoming-Call-Request to the tunnel peer (the LNS). Note that tunnel peers can be both LAC and LNS simultaneously.')
usdL2fSessionStatusTxConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusTxConnectSpeed.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusTxConnectSpeed.setDescription('The last known transmit baud rate for this session.')
usdL2fSessionStatusRxConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusRxConnectSpeed.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusRxConnectSpeed.setDescription('The last known receive baud rate for this session.')
usdL2fSessionStatusProxyLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusProxyLcp.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusProxyLcp.setDescription('Indicates whether the LAC performed proxy LCP for this session.')
usdL2fSessionStatusAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("pppChap", 1), ("pppPap", 2), ("pppMsChap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusAuthMethod.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusAuthMethod.setDescription("The proxy authentication method employed by the LAC for the session. If usdL2fSessionProxyLcp is false(2) this object reports a value of 'none' and should be ignored.")
usdL2fSessionStatusSequencingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("remote", 1), ("local", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusSequencingState.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusSequencingState.setDescription('Indicates which tunnel peers have requested payload sequencing.')
usdL2fSessionStatusLacTunneledIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusLacTunneledIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusLacTunneledIfIndex.setDescription('For pass-through remote client sessions (conventional LAC), the ifIndex of an associated local interface through which the remote LAC client was connected. If unknown, this object contains a value of zero. For locally originated sessions (LNS-like), this object has a value of zero.')
usdL2fSessionStatusCumEstabTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 2, 1, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatusCumEstabTime.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatusCumEstabTime.setDescription('The cumulative time in seconds that this session, since first being created, has spent in the established state (which may be punctuated by intervals outside the established state).')
usdL2fSessionStatTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1), )
if mibBuilder.loadTexts: usdL2fSessionStatTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatTable.setDescription('The L2F session statistics table.')
usdL2fSessionStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fSessionStatIfIndex"))
if mibBuilder.loadTexts: usdL2fSessionStatEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatEntry.setDescription('An L2F session interface statistics entry.')
usdL2fSessionStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fSessionStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatIfIndex.setDescription('The ifIndex of an L2F session interface.')
usdL2fSessionStatPayRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatPayRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatPayRecvOctets.setDescription('Number of payload octets received.')
usdL2fSessionStatPayRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatPayRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatPayRecvPackets.setDescription('Number of payload packets received.')
usdL2fSessionStatPayRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatPayRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatPayRecvErrors.setDescription('Number of payload packets incurring reception errors.')
usdL2fSessionStatPayRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatPayRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatPayRecvDiscards.setDescription('Number of payload packets discarded after reception.')
usdL2fSessionStatPaySendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatPaySendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatPaySendOctets.setDescription('Number of payload octets sent.')
usdL2fSessionStatPaySendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatPaySendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatPaySendPackets.setDescription('Number of payload packets sent.')
usdL2fSessionStatPaySendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatPaySendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatPaySendErrors.setDescription('Number of payload packets incurring transmission errors.')
usdL2fSessionStatPaySendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatPaySendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatPaySendDiscards.setDescription('Number of payload packets discarded before transmission.')
usdL2fSessionStatRecvOutOfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatRecvOutOfSequence.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatRecvOutOfSequence.setDescription('The number of packets received out of sequence.')
usdL2fSessionStatResequencingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatResequencingTimeouts.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatResequencingTimeouts.setDescription('The number of reassembly timeouts that have occurred.')
usdL2fSessionStatPayLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 4, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fSessionStatPayLostPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2fSessionStatPayLostPackets.setDescription('When sequence numbers are enabled, this value represents the estimated number of payload packets lost, based on observed gaps in sequence numbers. This estimate is subject to correction (decrement) upon receipt of out-of-sequence packets that fill previously observed gaps.')
usdL2fTransportUdpIp = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1))
usdL2fUdpIpDestination = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 1))
usdL2fUdpIpTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 2))
usdL2fUdpIpDestTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 1, 1), )
if mibBuilder.loadTexts: usdL2fUdpIpDestTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpDestTable.setDescription('The L2F UDP/IP destination table. Reports the UDP/IP characteristics of a L2F UDP/IP destination. A L2F UDP/IP destination is associated with a local router, a local IP address, and with a remote IP address for the L2F peer. More specific UDP/IP detail per tunnel is reported in the usdL2fUdpIpTunnelTable.')
usdL2fUdpIpDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 1, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fUdpIpDestIfIndex"))
if mibBuilder.loadTexts: usdL2fUdpIpDestEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpDestEntry.setDescription('Describes the UDP/IP attributes of an L2F destination.')
usdL2fUdpIpDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fUdpIpDestIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpDestIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2fUdpIpDestRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fUdpIpDestRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpDestRouterIndex.setDescription('The index of an entry in the usdRouterTable for the local router with which this L2F destination interface is associated.')
usdL2fUdpIpDestLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fUdpIpDestLocalAddress.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpDestLocalAddress.setDescription("This L2F destination's local IP address.")
usdL2fUdpIpDestRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fUdpIpDestRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpDestRemoteAddress.setDescription('The IP address of the remote L2F endpoint.')
usdL2fUdpIpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: usdL2fUdpIpTunnelTable.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpTunnelTable.setDescription('The L2F UDP/IP tunnel table. Reports the UDP/IP characteristics of L2F UDP/IP tunnels. A L2F UDP/IP tunnel is defined in terms of the local and remote IP addresses and UDP ports.')
usdL2fUdpIpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2F-MIB", "usdL2fUdpIpTunnelIfIndex"))
if mibBuilder.loadTexts: usdL2fUdpIpTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpTunnelEntry.setDescription('An L2F UDP/IP tunnel entry.')
usdL2fUdpIpTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2fUdpIpTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpTunnelIfIndex.setDescription('Same as the value of ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2fUdpIpTunnelRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fUdpIpTunnelRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpTunnelRouterIndex.setDescription('The index of an entry in the usdRouterTable for the local router with which this L2F tunnel interface is associated.')
usdL2fUdpIpTunnelLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fUdpIpTunnelLocalAddress.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpTunnelLocalAddress.setDescription('The local IP address for this UDP/IP tunnel.')
usdL2fUdpIpTunnelLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fUdpIpTunnelLocalPort.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpTunnelLocalPort.setDescription('The local UDP port for this UDP/IP tunnel.')
usdL2fUdpIpTunnelRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fUdpIpTunnelRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpTunnelRemoteAddress.setDescription('The remote IP address for this UDP/IP tunnel.')
usdL2fUdpIpTunnelRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 1, 5, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2fUdpIpTunnelRemotePort.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpTunnelRemotePort.setDescription('The remote UDP port for this UDP/IP tunnel.')
usdL2fGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 3, 1))
usdL2fCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 3, 2))
usdL2fCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 3, 2, 1)).setObjects(("Unisphere-Data-L2F-MIB", "usdL2fConfigGroup"), ("Unisphere-Data-L2F-MIB", "usdL2fStatusGroup"), ("Unisphere-Data-L2F-MIB", "usdL2fStatGroup"), ("Unisphere-Data-L2F-MIB", "usdL2fMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2fCompliance = usdL2fCompliance.setStatus('current')
if mibBuilder.loadTexts: usdL2fCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the L2F MIB.')
usdL2fConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 3, 1, 1)).setObjects(("Unisphere-Data-L2F-MIB", "usdL2fSysConfigAdminState"), ("Unisphere-Data-L2F-MIB", "usdL2fSysConfigDestructTimeout"), ("Unisphere-Data-L2F-MIB", "usdL2fSysConfigIpChecksumEnable"), ("Unisphere-Data-L2F-MIB", "usdL2fSysConfigReceiveDataSequencingIgnore"), ("Unisphere-Data-L2F-MIB", "usdL2fDestConfigRowStatus"), ("Unisphere-Data-L2F-MIB", "usdL2fDestConfigAdminState"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelConfigRowStatus"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelConfigAdminState"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionConfigRowStatus"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionConfigAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2fConfigGroup = usdL2fConfigGroup.setStatus('current')
if mibBuilder.loadTexts: usdL2fConfigGroup.setDescription('A collection of objects providing configuration information of the L2F protocol, tunnels and sessions.')
usdL2fStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 3, 1, 2)).setObjects(("Unisphere-Data-L2F-MIB", "usdL2fSysStatusProtocolVersion"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusVendorName"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusFirmwareRev"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusTotalDestinations"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusFailedDestinations"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusActiveDestinations"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusTotalTunnels"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusFailedTunnels"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusFailedTunnelAuthens"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusActiveTunnels"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusTotalSessions"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusFailedSessions"), ("Unisphere-Data-L2F-MIB", "usdL2fSysStatusActiveSessions"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatusTransport"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatusEffectiveAdminState"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatusTotalTunnels"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatusFailedTunnels"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatusFailedTunnelAuthens"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatusActiveTunnels"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatusTotalSessions"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatusFailedSessions"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatusActiveSessions"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusTransport"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusLocalTunnelId"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusRemoteTunnelId"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusEffectiveAdminState"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusState"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusInitiated"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusRemoteHostName"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusTotalSessions"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusFailedSessions"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusActiveSessions"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusLastErrorCode"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusLastErrorMessage"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatusCumEstabTime"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusLocalSessionId"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusRemoteSessionId"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusUserName"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusEffectiveAdminState"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusState"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusCallType"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusTxConnectSpeed"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusRxConnectSpeed"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusProxyLcp"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusAuthMethod"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusSequencingState"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusLacTunneledIfIndex"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatusCumEstabTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2fStatusGroup = usdL2fStatusGroup.setStatus('current')
if mibBuilder.loadTexts: usdL2fStatusGroup.setDescription('A collection of objects providing status of the L2F protocol at the system, destination, tunnel, and session levels.')
usdL2fStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 3, 1, 3)).setObjects(("Unisphere-Data-L2F-MIB", "usdL2fDestStatCtlRecvOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatCtlRecvPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatCtlRecvErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatCtlRecvDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatCtlSendOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatCtlSendPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatCtlSendErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatCtlSendDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatPayRecvOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatPayRecvPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatPayRecvErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatPayRecvDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatPaySendOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatPaySendPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatPaySendErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fDestStatPaySendDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatCtlRecvOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatCtlRecvPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatCtlRecvErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatCtlRecvDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatCtlSendOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatCtlSendPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatCtlSendErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatCtlSendDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatPayRecvOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatPayRecvPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatPayRecvErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatPayRecvDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatPaySendOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatPaySendPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatPaySendErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatPaySendDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fTunnelStatCtlRecvOutOfSequence"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatPayRecvOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatPayRecvPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatPayRecvErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatPayRecvDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatPaySendOctets"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatPaySendPackets"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatPaySendErrors"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatPaySendDiscards"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatRecvOutOfSequence"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatResequencingTimeouts"), ("Unisphere-Data-L2F-MIB", "usdL2fSessionStatPayLostPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2fStatGroup = usdL2fStatGroup.setStatus('current')
if mibBuilder.loadTexts: usdL2fStatGroup.setDescription('A collection of objects providing statistics of the L2F protocol at the destination, tunnel, and session levels.')
usdL2fMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 3, 1, 4)).setObjects(("Unisphere-Data-L2F-MIB", "usdL2fMapTifSidToSifSessionIfIndex"), ("Unisphere-Data-L2F-MIB", "usdL2fMapTidToTifIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2fMapGroup = usdL2fMapGroup.setStatus('current')
if mibBuilder.loadTexts: usdL2fMapGroup.setDescription('A collection of objects providing mapping associations among L2F components.')
usdL2fUdpIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 53, 3, 1, 5)).setObjects(("Unisphere-Data-L2F-MIB", "usdL2fUdpIpDestRouterIndex"), ("Unisphere-Data-L2F-MIB", "usdL2fUdpIpDestLocalAddress"), ("Unisphere-Data-L2F-MIB", "usdL2fUdpIpDestRemoteAddress"), ("Unisphere-Data-L2F-MIB", "usdL2fUdpIpTunnelRouterIndex"), ("Unisphere-Data-L2F-MIB", "usdL2fUdpIpTunnelLocalAddress"), ("Unisphere-Data-L2F-MIB", "usdL2fUdpIpTunnelLocalPort"), ("Unisphere-Data-L2F-MIB", "usdL2fUdpIpTunnelRemoteAddress"), ("Unisphere-Data-L2F-MIB", "usdL2fUdpIpTunnelRemotePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2fUdpIpGroup = usdL2fUdpIpGroup.setStatus('current')
if mibBuilder.loadTexts: usdL2fUdpIpGroup.setDescription('A collection of objects providing UDP/IP transport information for L2F components.')
mibBuilder.exportSymbols("Unisphere-Data-L2F-MIB", usdL2fTunnelConfig=usdL2fTunnelConfig, usdL2fTunnelStatCtlSendDiscards=usdL2fTunnelStatCtlSendDiscards, usdL2fUdpIpDestTable=usdL2fUdpIpDestTable, usdL2fUdpIpDestRemoteAddress=usdL2fUdpIpDestRemoteAddress, usdL2fCompliances=usdL2fCompliances, usdL2fDestStatCtlRecvDiscards=usdL2fDestStatCtlRecvDiscards, usdL2fUdpIpTunnelIfIndex=usdL2fUdpIpTunnelIfIndex, usdL2fSessionStatRecvOutOfSequence=usdL2fSessionStatRecvOutOfSequence, usdL2fSessionStatPaySendDiscards=usdL2fSessionStatPaySendDiscards, usdL2fTunnelStatCtlSendOctets=usdL2fTunnelStatCtlSendOctets, usdL2fSessionStatistics=usdL2fSessionStatistics, usdL2fSessionStatPayRecvOctets=usdL2fSessionStatPayRecvOctets, usdL2fTunnelConfigRowStatus=usdL2fTunnelConfigRowStatus, usdL2fDestConfigTable=usdL2fDestConfigTable, usdL2fSysStatusActiveDestinations=usdL2fSysStatusActiveDestinations, usdL2fTunnelStatCtlSendPackets=usdL2fTunnelStatCtlSendPackets, UsdL2fAdminState=UsdL2fAdminState, usdL2fSessionStatPayLostPackets=usdL2fSessionStatPayLostPackets, usdL2fTunnelStatusEffectiveAdminState=usdL2fTunnelStatusEffectiveAdminState, usdL2fTunnelStatusLocalTunnelId=usdL2fTunnelStatusLocalTunnelId, usdL2fMapTidToTifTable=usdL2fMapTidToTifTable, usdL2fSessionStatEntry=usdL2fSessionStatEntry, usdL2fTunnelConfigAdminState=usdL2fTunnelConfigAdminState, usdL2fSessionStatPaySendOctets=usdL2fSessionStatPaySendOctets, usdL2fSessionConfigTable=usdL2fSessionConfigTable, usdL2fDestStatCtlRecvErrors=usdL2fDestStatCtlRecvErrors, usdL2fSysStatusFailedTunnelAuthens=usdL2fSysStatusFailedTunnelAuthens, usdL2fDestStatusTable=usdL2fDestStatusTable, usdL2fTunnelStatusLastErrorMessage=usdL2fTunnelStatusLastErrorMessage, usdL2fDestStatistics=usdL2fDestStatistics, usdL2fDestStatusTotalTunnels=usdL2fDestStatusTotalTunnels, usdL2fUdpIpDestRouterIndex=usdL2fUdpIpDestRouterIndex, usdL2fTunnelStatusTransport=usdL2fTunnelStatusTransport, usdL2fUdpIpTunnelEntry=usdL2fUdpIpTunnelEntry, usdL2fDestConfigAdminState=usdL2fDestConfigAdminState, usdL2fTunnelStatusLastErrorCode=usdL2fTunnelStatusLastErrorCode, UsdL2fTransport=UsdL2fTransport, usdL2fUdpIpTunnelLocalPort=usdL2fUdpIpTunnelLocalPort, usdL2fDestStatusTransport=usdL2fDestStatusTransport, usdL2fTunnelStatusIfIndex=usdL2fTunnelStatusIfIndex, usdL2fSysStatusActiveTunnels=usdL2fSysStatusActiveTunnels, usdL2fSysStatusTotalSessions=usdL2fSysStatusTotalSessions, usdL2fDestStatusTotalSessions=usdL2fDestStatusTotalSessions, usdL2fTunnelStatistics=usdL2fTunnelStatistics, usdL2fTunnelStatTable=usdL2fTunnelStatTable, usdL2fTunnelStatPayRecvErrors=usdL2fTunnelStatPayRecvErrors, usdL2fSysStatusFailedTunnels=usdL2fSysStatusFailedTunnels, usdL2fDestStatCtlSendDiscards=usdL2fDestStatCtlSendDiscards, usdL2fSysStatusFailedSessions=usdL2fSysStatusFailedSessions, usdL2fSessionStatTable=usdL2fSessionStatTable, usdL2fSysStatusFirmwareRev=usdL2fSysStatusFirmwareRev, usdL2fTunnelStatusRemoteHostName=usdL2fTunnelStatusRemoteHostName, usdL2fTunnelStatEntry=usdL2fTunnelStatEntry, usdL2fSessionStatusLocalSessionId=usdL2fSessionStatusLocalSessionId, usdL2fDestStatCtlSendOctets=usdL2fDestStatCtlSendOctets, usdL2fDestConfig=usdL2fDestConfig, usdL2fTunnelStatus=usdL2fTunnelStatus, usdL2fCompliance=usdL2fCompliance, usdL2fSystemConfig=usdL2fSystemConfig, usdL2fTunnelStatCtlRecvOctets=usdL2fTunnelStatCtlRecvOctets, usdL2fDestStatTable=usdL2fDestStatTable, usdL2fSessionConfigIfIndex=usdL2fSessionConfigIfIndex, usdL2fTunnelStatCtlRecvDiscards=usdL2fTunnelStatCtlRecvDiscards, usdL2fSessionConfigAdminState=usdL2fSessionConfigAdminState, usdL2fTunnelStatPaySendPackets=usdL2fTunnelStatPaySendPackets, usdL2fDestConfigRowStatus=usdL2fDestConfigRowStatus, usdL2fMapTifSidToSifTable=usdL2fMapTifSidToSifTable, PYSNMP_MODULE_ID=usdL2fMIB, usdL2fSession=usdL2fSession, usdL2fTunnelStatusTable=usdL2fTunnelStatusTable, usdL2fUdpIpDestLocalAddress=usdL2fUdpIpDestLocalAddress, usdL2fUdpIpTunnelTable=usdL2fUdpIpTunnelTable, usdL2fTunnelStatusCumEstabTime=usdL2fTunnelStatusCumEstabTime, usdL2fDestStatusActiveTunnels=usdL2fDestStatusActiveTunnels, usdL2fSessionStatPayRecvPackets=usdL2fSessionStatPayRecvPackets, usdL2fDestStatPaySendOctets=usdL2fDestStatPaySendOctets, usdL2fDestStatPaySendErrors=usdL2fDestStatPaySendErrors, usdL2fGroups=usdL2fGroups, usdL2fDestStatusEffectiveAdminState=usdL2fDestStatusEffectiveAdminState, usdL2fSessionConfigEntry=usdL2fSessionConfigEntry, usdL2fDestStatusFailedTunnelAuthens=usdL2fDestStatusFailedTunnelAuthens, usdL2fMapTidToTifIfIndex=usdL2fMapTidToTifIfIndex, usdL2fDestStatPayRecvPackets=usdL2fDestStatPayRecvPackets, usdL2fTunnelConfigIfIndex=usdL2fTunnelConfigIfIndex, usdL2fTunnelStatCtlRecvPackets=usdL2fTunnelStatCtlRecvPackets, usdL2fSessionStatIfIndex=usdL2fSessionStatIfIndex, usdL2fMapTidToTifLocalTunnelId=usdL2fMapTidToTifLocalTunnelId, usdL2fSessionStatusAuthMethod=usdL2fSessionStatusAuthMethod, usdL2fConfigGroup=usdL2fConfigGroup, usdL2fStatGroup=usdL2fStatGroup, usdL2fSysStatusProtocolVersion=usdL2fSysStatusProtocolVersion, usdL2fSysStatusTotalDestinations=usdL2fSysStatusTotalDestinations, usdL2fStatusGroup=usdL2fStatusGroup, usdL2fUdpIpDestination=usdL2fUdpIpDestination, usdL2fDestStatusEntry=usdL2fDestStatusEntry, usdL2fDestStatus=usdL2fDestStatus, usdL2fUdpIpTunnelLocalAddress=usdL2fUdpIpTunnelLocalAddress, usdL2fTunnelStatusEntry=usdL2fTunnelStatusEntry, usdL2fMapTifSidToSifTunnelIfIndex=usdL2fMapTifSidToSifTunnelIfIndex, UsdL2fTunnelId=UsdL2fTunnelId, usdL2fTunnelStatPaySendOctets=usdL2fTunnelStatPaySendOctets, usdL2fSessionStatus=usdL2fSessionStatus, usdL2fMapTifSidToSifLocalSessionId=usdL2fMapTifSidToSifLocalSessionId, usdL2fSessionStatPaySendPackets=usdL2fSessionStatPaySendPackets, usdL2fMapTifSidToSifEntry=usdL2fMapTifSidToSifEntry, usdL2fTunnelStatusRemoteTunnelId=usdL2fTunnelStatusRemoteTunnelId, usdL2fUdpIpDestEntry=usdL2fUdpIpDestEntry, usdL2fObjects=usdL2fObjects, usdL2fSysConfigIpChecksumEnable=usdL2fSysConfigIpChecksumEnable, usdL2fSessionStatusTxConnectSpeed=usdL2fSessionStatusTxConnectSpeed, usdL2fTunnelStatusState=usdL2fTunnelStatusState, usdL2fSessionStatusRxConnectSpeed=usdL2fSessionStatusRxConnectSpeed, usdL2fMIB=usdL2fMIB, usdL2fTransportUdpIp=usdL2fTransportUdpIp, usdL2fSessionStatPayRecvErrors=usdL2fSessionStatPayRecvErrors, usdL2fTrapControl=usdL2fTrapControl, usdL2fSysStatusVendorName=usdL2fSysStatusVendorName, usdL2fDestStatPayRecvErrors=usdL2fDestStatPayRecvErrors, usdL2fDestStatusFailedTunnels=usdL2fDestStatusFailedTunnels, usdL2fSessionStatusEffectiveAdminState=usdL2fSessionStatusEffectiveAdminState, usdL2fSystem=usdL2fSystem, usdL2fDestStatCtlSendPackets=usdL2fDestStatCtlSendPackets, usdL2fUdpIpDestIfIndex=usdL2fUdpIpDestIfIndex, usdL2fSessionStatusUserName=usdL2fSessionStatusUserName, usdL2fUdpIpGroup=usdL2fUdpIpGroup, usdL2fTraps=usdL2fTraps, usdL2fTunnelStatPayRecvPackets=usdL2fTunnelStatPayRecvPackets, usdL2fSysStatusFailedDestinations=usdL2fSysStatusFailedDestinations, usdL2fSysConfigDestructTimeout=usdL2fSysConfigDestructTimeout, usdL2fConformance=usdL2fConformance, usdL2fSessionConfigRowStatus=usdL2fSessionConfigRowStatus, usdL2fSessionStatusCallType=usdL2fSessionStatusCallType, usdL2fSessionStatusState=usdL2fSessionStatusState, usdL2fDestStatusActiveSessions=usdL2fDestStatusActiveSessions, usdL2fDestination=usdL2fDestination, usdL2fTunnelMap=usdL2fTunnelMap, usdL2fDestStatCtlRecvOctets=usdL2fDestStatCtlRecvOctets, usdL2fMapGroup=usdL2fMapGroup, usdL2fMapTifSidToSifSessionIfIndex=usdL2fMapTifSidToSifSessionIfIndex, usdL2fSessionStatResequencingTimeouts=usdL2fSessionStatResequencingTimeouts, usdL2fSessionStatPayRecvDiscards=usdL2fSessionStatPayRecvDiscards, usdL2fTunnelConfigEntry=usdL2fTunnelConfigEntry, usdL2fTunnelStatusFailedSessions=usdL2fTunnelStatusFailedSessions, usdL2fSessionStatusCumEstabTime=usdL2fSessionStatusCumEstabTime, usdL2fTunnelStatCtlRecvErrors=usdL2fTunnelStatCtlRecvErrors, usdL2fTunnelStatCtlSendErrors=usdL2fTunnelStatCtlSendErrors, usdL2fSystemStatus=usdL2fSystemStatus, usdL2fTransport=usdL2fTransport, usdL2fSessionStatusTable=usdL2fSessionStatusTable, usdL2fTunnelConfigTable=usdL2fTunnelConfigTable, usdL2fDestStatPaySendPackets=usdL2fDestStatPaySendPackets, usdL2fSysConfigAdminState=usdL2fSysConfigAdminState, UsdL2fSessionId=UsdL2fSessionId, usdL2fTunnelStatIfIndex=usdL2fTunnelStatIfIndex, usdL2fDestStatCtlRecvPackets=usdL2fDestStatCtlRecvPackets, usdL2fSessionStatusRemoteSessionId=usdL2fSessionStatusRemoteSessionId, usdL2fDestStatPayRecvOctets=usdL2fDestStatPayRecvOctets, usdL2fMapTidToTifEntry=usdL2fMapTidToTifEntry, usdL2fUdpIpTunnelRouterIndex=usdL2fUdpIpTunnelRouterIndex, usdL2fDestStatPayRecvDiscards=usdL2fDestStatPayRecvDiscards, usdL2fSessionStatusEntry=usdL2fSessionStatusEntry, usdL2fSysStatusTotalTunnels=usdL2fSysStatusTotalTunnels, usdL2fDestStatusFailedSessions=usdL2fDestStatusFailedSessions, usdL2fSysConfigReceiveDataSequencingIgnore=usdL2fSysConfigReceiveDataSequencingIgnore, usdL2fDestStatEntry=usdL2fDestStatEntry, usdL2fTunnelStatPayRecvOctets=usdL2fTunnelStatPayRecvOctets, usdL2fTunnelStatusTotalSessions=usdL2fTunnelStatusTotalSessions, usdL2fTunnelStatusActiveSessions=usdL2fTunnelStatusActiveSessions, usdL2fTunnelStatPaySendDiscards=usdL2fTunnelStatPaySendDiscards, usdL2fDestConfigEntry=usdL2fDestConfigEntry, usdL2fUdpIpTunnelRemoteAddress=usdL2fUdpIpTunnelRemoteAddress, usdL2fTunnelStatPayRecvDiscards=usdL2fTunnelStatPayRecvDiscards, usdL2fTunnelStatCtlRecvOutOfSequence=usdL2fTunnelStatCtlRecvOutOfSequence, usdL2fDestConfigIfIndex=usdL2fDestConfigIfIndex, usdL2fDestStatCtlSendErrors=usdL2fDestStatCtlSendErrors, usdL2fSessionConfig=usdL2fSessionConfig, usdL2fUdpIpTunnelRemotePort=usdL2fUdpIpTunnelRemotePort, usdL2fTunnelStatusInitiated=usdL2fTunnelStatusInitiated, usdL2fDestStatPaySendDiscards=usdL2fDestStatPaySendDiscards, usdL2fSessionStatusProxyLcp=usdL2fSessionStatusProxyLcp, usdL2fSessionStatusIfIndex=usdL2fSessionStatusIfIndex, usdL2fDestStatusIfIndex=usdL2fDestStatusIfIndex, usdL2fSysStatusActiveSessions=usdL2fSysStatusActiveSessions, usdL2fUdpIpTunnel=usdL2fUdpIpTunnel, usdL2fTunnel=usdL2fTunnel, usdL2fDestStatIfIndex=usdL2fDestStatIfIndex, usdL2fSessionStatusLacTunneledIfIndex=usdL2fSessionStatusLacTunneledIfIndex, usdL2fSessionStatPaySendErrors=usdL2fSessionStatPaySendErrors, usdL2fTunnelStatPaySendErrors=usdL2fTunnelStatPaySendErrors, usdL2fSessionStatusSequencingState=usdL2fSessionStatusSequencingState)
