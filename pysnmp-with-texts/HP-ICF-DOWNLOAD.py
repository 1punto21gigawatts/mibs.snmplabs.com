#
# PySNMP MIB module HP-ICF-DOWNLOAD (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-DOWNLOAD
# Produced by pysmi-0.3.4 at Wed May  1 13:33:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
hpicfObjectModules, hpicfCommon = mibBuilder.importSymbols("HP-ICF-OID", "hpicfObjectModules", "hpicfCommon")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Unsigned32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Counter32, Integer32, TimeTicks, ObjectIdentity, ModuleIdentity, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Counter32", "Integer32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Gauge32", "iso")
TruthValue, TAddress, RowStatus, DisplayString, TextualConvention, TDomain = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TAddress", "RowStatus", "DisplayString", "TextualConvention", "TDomain")
hpicfDownloadMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4))
hpicfDownloadMib.setRevisions(('2015-10-14 00:00', '2013-06-21 00:00', '2010-05-11 00:00', '2008-12-10 00:00', '2008-04-04 00:00', '2007-11-05 16:16', '2000-11-03 22:16', '1997-03-06 03:36', '1996-09-10 02:25', '1996-01-25 03:56', '1995-07-13 00:00', '1994-11-20 00:00', '1994-02-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfDownloadMib.setRevisionsDescriptions(('Added a new object hpicfDownloadTftpClientBlkSize', 'Added a new object hpicfDownloadTftpClientConfig and deprecated the object hpicfDownloadTftpConfig', 'Added new option coreDump to hpicfDownloadInetFileType and new scalar mib object hpicfDownloadInetCoreDumpModule', 'Added hpicfDownloadAutoTftpTable', 'Objects hpicfDownloadTftp6Config & hpicfDownloadTftp6SeverConfig are deprecated.', 'Added scalar object hpicfDownloadConfigFileUpdateEnabled.', 'Updated division name.', 'Added some ranges that were missing.', 'Updated division name in ORGANIZATION clause.', 'Split this MIB module from the former monolithic hp-icf MIB.', 'Version of MIB module that added support for specifying the download destination, and tracking progress using octet count and passes remaining.', 'Version of MIB module that expanded the error codes for download status.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpicfDownloadMib.setLastUpdated('201510140000Z')
if mibBuilder.loadTexts: hpicfDownloadMib.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfDownloadMib.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfDownloadMib.setDescription('This MIB module manages the network download capabilities for devices in the HP Integrated Communication Facility product line.')
hpicfDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3))
hpicfDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1), )
if mibBuilder.loadTexts: hpicfDownloadTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadTable.setDescription('A table of firmware downloads to this device. There will at any time be either 0 or 1 rows in this table, and the only valid index for this table is 1. It is only a table so that we may take advantage of the RowStatus textual convention for configuring the download parameters. Since this table does not support IPv6, it is deprecated in favor of hpicfDownloadInetTable.')
hpicfDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1), ).setIndexNames((0, "HP-ICF-DOWNLOAD", "hpicfDownloadIndex"))
if mibBuilder.loadTexts: hpicfDownloadEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadEntry.setDescription('The row in the hpicfDownloadTable containing the download parameters. Since this table does not support IPv6, it is deprecated in favor of hpicfDownloadInetEntry.')
hpicfDownloadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("dlInstance", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadIndex.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadIndex.setDescription('The index which uniquely identifies this row. The only legal value for this object is 1.')
hpicfDownloadOwnerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 2), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadOwnerAddress.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadOwnerAddress.setDescription('The transport address of the management station that initiated this download attempt, formatted according to the value of the associated instance of hpicfDownloadOwnerDomain.')
hpicfDownloadOwnerDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 3), TDomain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadOwnerDomain.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadOwnerDomain.setDescription('The kind of transport service used by the management station that initiated this download attempt.')
hpicfDownloadTAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 4), TAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadTAddress.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadTAddress.setDescription("The transport address of the node to download firmware from, formatted according to the value of the associated instance of hpicfDownloadTDomain. An attempt to modify this value will fail if the associated hpicfDownloadStatus object would be equal to 'active' both before and after the modification attempt.")
hpicfDownloadTDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 5), TDomain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadTDomain.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadTDomain.setDescription("The kind of transport service to be used for the download. Currently supports snmpUDPDomain and snmpIPXDomain. An attempt to modify this value will fail if the associated hpicfDownloadStatus object would be equal to 'active' both before and after the modification attempt.")
hpicfDownloadFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadFilename.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadFilename.setDescription("Filename and path of file to download (maximum length of 63 characters + NULL). An attempt to modify this value will fail if the associated hpicfDownloadStatus object would be equal to 'active' both before and after the modification attempt.")
hpicfDownloadResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReset", 1), ("warmReset", 2), ("factoryReset", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadResetType.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadResetType.setDescription('The type of reset to perform after completion of the firmware download. Note that not all agents will support all possible values, and there may be other agent-specific values for this object.')
hpicfDownloadErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("fileNotFound", 1), ("accessViolation", 2), ("diskFull", 3), ("illegalOperation", 4), ("unknownTID", 5), ("fileExists", 6), ("noSuchUser", 7), ("notDefined", 8), ("corruptFile", 9), ("noServer", 10), ("tftpTimeout", 11), ("hardwareError", 12), ("success", 13), ("aborted", 14), ("inProgress", 15), ("idle", 16), ("erasingEeprom", 17), ("incompleteFirmware", 18), ("requirePowerCycle", 19), ("cannotUpgrade", 20), ("cannotDowngrade", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadErrorStatus.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadErrorStatus.setDescription("Status of download. The first seven codes are equal to the codes defined by the TFTP protocol. 'notDefined' is the same as TFTP protocol error 0. The following are the other possible values for this object: corruptFile - the agent detected a problem with the download file format. noServer - the TFTP server at hpicfDownloadTAddress did not respond to the TFTP request. tftpTimeout - the download was aborted due to excessive timeouts. hardwareError - there was a hardware problem on the agent that forced an abort of the download (see hpicfDownloadErrorText for more detailed information). success - the download has completed successfully. aborted - the download was aborted by setting the hpicfDownloadStatus to 'notInService' or 'delete'. inProgress - the TFTP transfer is currently active. idle - means that the download has not yet started (i.e. the value of hpicfDownloadStatus has not yet been set to 'active'). erasingEeprom - the agent is currently erasing the EEPROM device. Currently only used on JetDirect agents. incompleteFirmware - the agent is running an incomplete version of firmware and requires a download. Currently only used on JetDirect agents. requirePowerCycle - the agent must be power cycled to run the newly downloaded firmware. Currently only used on JetDirect agents. cannotUpgrade - the agent's current firmware revision cannot be upgraded to the revision in the download file. cannotDowngrade - the agent's current firmware revision cannot be downgraded to the revision in the download file.")
hpicfDownloadErrorText = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadErrorText.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadErrorText.setDescription('A textual description of the current error status of the firmware download.')
hpicfDownloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadStatus.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadStatus.setDescription("The status of this download entry. This object may not be set to 'active' unless the following columnar objects exist in this row: hpicfDownloadTAddress, hpicfDownloadTDomain, hpicfDownloadFilename, and hpicfDownloadResetType.")
hpicfDownloadPassesLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadPassesLeft.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadPassesLeft.setDescription("The number of passes remaining in the current download attempt. Some agents (currently JetDirect agents) require multiple passes through the download file in order to download a firmware image. This object indicates the number of passes remaining, including the current pass. The object is initialized by the agent to the number of passes required to complete the download when the corresponding instance of hpicfDownloadStatus is set to 'active'. It is decremented by one each time a pass completes.")
hpicfDownloadOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadOctetCount.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadOctetCount.setDescription("The number of octets that have been transferred during the current pass. This object is initialized to zero by the agent when the corresponding instance of hpicfDownloadStatus is set to 'active', and reinitialized to zero at the beginning of each pass.")
hpicfDownloadDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone('/os/primary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadDestination.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadDestination.setDescription("The destination of the download file on the agent. The allowable destination names depend on the type of agent being downloaded. In all cases, a destination of '/os/primary' or '/os/secondary' indicates that this is a download of the agent's firmware image. The agent will use '/os/primary' as the default value for this object when the row is created. ICF router agents also allow a download of a config file. Currently, the name of the config file on the agent is '/config'. An agent should reject an attempt to set this object to a destination name that does not make sense for this type of agent.")
hpicfDownloadLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadLogMaxSize.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadLogMaxSize.setDescription('The maximum number of the download log entries supported by this agent. Note that 0 is a legal value for this variable.')
hpicfDownloadLogSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadLogSize.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadLogSize.setDescription('The number of download log entries currently in the hpicfDownloadLogTable.')
hpicfDownloadLogTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4), )
if mibBuilder.loadTexts: hpicfDownloadLogTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadLogTable.setDescription('A log of the hpicfDownloadSize most recent download attempts to this device. The first entry in the table is the oldest.')
hpicfDownloadLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1), ).setIndexNames((0, "HP-ICF-DOWNLOAD", "hpicfDlLogIndex"))
if mibBuilder.loadTexts: hpicfDownloadLogEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadLogEntry.setDescription('An entry in the hpicfDownloadLogTable containing information about a single download attempt.')
hpicfDlLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDlLogIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfDlLogIndex.setDescription('The index of this entry in the download log table. Index 1 will always contain the oldest entry. If the table is full when a download attempt is made, the new entry becomes the last entry (hpicfDownloadLogMaxSize), and all earlier entries are shifted down by one entry, removing the old index 1.')
hpicfDlLogOwnerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1, 2), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDlLogOwnerAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDlLogOwnerAddress.setDescription('The transport address of the management station that attempted to initiate a download of this device, formatted according to the value of hpicfDlLastOwnerDomain.')
hpicfDlLogOwnerDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1, 3), TDomain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDlLogOwnerDomain.setStatus('current')
if mibBuilder.loadTexts: hpicfDlLogOwnerDomain.setDescription('The kind of transport service used by the management station that attempted to initiate a download of this device.')
hpicfDlLogTAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1, 4), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDlLogTAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDlLogTAddress.setDescription('The transport address of the node from which this device attempted to download firmware, formatted according to the value of hpicfDlLastTDomain.')
hpicfDlLogTDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1, 5), TDomain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDlLogTDomain.setStatus('current')
if mibBuilder.loadTexts: hpicfDlLogTDomain.setDescription('The kind of transport service which was used for the attempt to download firmware to this device.')
hpicfDlLogFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDlLogFilename.setStatus('current')
if mibBuilder.loadTexts: hpicfDlLogFilename.setDescription('The filename from which this device attempted to download firmware.')
hpicfDlLogResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReset", 1), ("warmReset", 2), ("factoryReset", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDlLogResetType.setStatus('current')
if mibBuilder.loadTexts: hpicfDlLogResetType.setDescription('The type of reset requested to be performed after completion of the firmware download attempt.')
hpicfDlLogErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("fileNotFound", 1), ("accessViolation", 2), ("diskFull", 3), ("illegalOperation", 4), ("unknownTID", 5), ("fileExists", 6), ("noSuchUser", 7), ("notDefined", 8), ("corruptFile", 9), ("noServer", 10), ("tftpTimeout", 11), ("hardwareError", 12), ("success", 13), ("aborted", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDlLogErrorStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDlLogErrorStatus.setDescription('The result of the attempt to download firmware to this device. The values are the same as the corresponding values of hpicfDownloadErrorStatus.')
hpicfDlLogErrorText = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDlLogErrorText.setStatus('current')
if mibBuilder.loadTexts: hpicfDlLogErrorText.setDescription('A textual description of the final error status of the attempt to download firmware to this device.')
hpicfDownloadTftpConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadTftpConfig.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadTftpConfig.setDescription('This object allows switch to enable or disable tftp. Default value is 2. Cannot be enabled if sftp is enabled.')
hpicfDownloadTftpServerConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadTftpServerConfig.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadTftpServerConfig.setDescription('When this is true(1), the TFTP server is enabled and will process incoming requests. When this is false(2), the TFTP server will be shut down and will not accept incoming connections.')
hpicfDownloadTftp6Config = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadTftp6Config.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadTftp6Config.setDescription('********* THIS OBJECT IS DEPRECATED ******** This object allows switch to enable or disable tftp. Default value is 2. Cannot be enabled if sftp is enabled.')
hpicfDownloadTftp6ServerConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadTftp6ServerConfig.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadTftp6ServerConfig.setDescription('********* THIS OBJECT IS DEPRECATED ******** When this is true(1), the TFTP server is enabled and will process incoming requests. When this is false(2), the TFTP server will be shut down and will not accept incoming connections.')
hpicfDownloadConfigFileUpdateEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadConfigFileUpdateEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadConfigFileUpdateEnabled.setDescription('This object facilitates enabling/disabling configuration file update through DHCP. By default, this is enabled.')
hpicfDownloadAutoTftpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 11), )
if mibBuilder.loadTexts: hpicfDownloadAutoTftpTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadAutoTftpTable.setDescription('A table for automatic firmware download to the device via TFTP during boot. The firmware image will be downloaded if it has a different version from the firmware running on the switch. There will be only one row at any time for this table, and the only valid index for this table is 1.')
hpicfDownloadAutoTftpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 11, 1), ).setIndexNames((0, "HP-ICF-DOWNLOAD", "hpicfDownloadAutoTftpIndex"))
if mibBuilder.loadTexts: hpicfDownloadAutoTftpEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadAutoTftpEntry.setDescription('The row in the hpicfDownloadAutoTftpTable containing the auto-tftp download parameters.')
hpicfDownloadAutoTftpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpicfDownloadAutoTftpIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadAutoTftpIndex.setDescription('The index which uniquely identifies this row.')
hpicfDownloadAutoTftpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 11, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadAutoTftpAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadAutoTftpAddressType.setDescription('The type of address in the corresponding hpicfDownloadAutoTftpAddress object.')
hpicfDownloadAutoTftpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 11, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadAutoTftpAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadAutoTftpAddress.setDescription('The tftp server address to download firmware from, formatted according to the value of the associated instance of hpicfDownloadAutoTftpAddressType.')
hpicfDownloadAutoTftpRemoteFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadAutoTftpRemoteFilename.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadAutoTftpRemoteFilename.setDescription('The firmware image name to download from tftp-server. It can be upto 255 characters.')
hpicfDownloadAutoTftpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadAutoTftpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadAutoTftpAdminStatus.setDescription('This object enables/disables auto-tftp. The value of hpicfDownloadAutoTftpAddress, hpicfDownloadAutoTftpRemoteFilename can not be empty when hpicfDownloadAutoTftpAdminStatus is enabled.')
hpicfDownloadInetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9), )
if mibBuilder.loadTexts: hpicfDownloadInetTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetTable.setDescription('A table of firmware downloads to this device. There will at any time be either 0 or 1 rows in this table, and the only valid index for this table is 1. It is only a table so that we may take advantage of the RowStatus textual convention for configuring the download parameters.')
hpicfDownloadInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1), ).setIndexNames((0, "HP-ICF-DOWNLOAD", "hpicfDownloadInetIndex"))
if mibBuilder.loadTexts: hpicfDownloadInetEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetEntry.setDescription('The row in the hpicfDownloadInetTable containing the download parameters.')
hpicfDownloadInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadInetIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetIndex.setDescription('The index which uniquely identifies this row.')
hpicfDownloadInetTAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadInetTAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetTAddressType.setDescription("The type of address in the corresponding hpicfDownloadTAddress object. An attempt to modify this value will fail if the associated hpicfDownloadInetStatus object would be equal to 'active' both before and after the modification attempt.")
hpicfDownloadInetTAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadInetTAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetTAddress.setDescription("The transport address of the node to download firmware from, formatted according to the value of the associated instance of hpicfDownloadInetTAddressType. An attempt to modify this value will fail if the associated hpicfDownloadInetStatus object would be equal to 'active' both before and after the modification attempt.")
hpicfDownloadInetFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadInetFilename.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetFilename.setDescription("Filename and path of file to download (maximum length of 63 characters + NULL). An attempt to modify this value will fail if the associated hpicfDownloadInetStatus object would be equal to 'active' both before and after the modification attempt.")
hpicfDownloadInetOwnerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 5), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadInetOwnerAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetOwnerAddressType.setDescription('The type of address in the corresponding hpicfDownloadInetOwnerAddress object.')
hpicfDownloadInetOwnerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadInetOwnerAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetOwnerAddress.setDescription('The transport address of the management station that initiated this download attempt, formatted according to the value of the associated instance of hpicfDownloadInetOwnerAddressType.')
hpicfDownloadInetSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadInetSourcePort.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetSourcePort.setDescription('The port of the management station that initiated this download attempt.')
hpicfDownloadInetDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadInetDestinationPort.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetDestinationPort.setDescription('The port of the management station that initiated this download attempt.')
hpicfDownloadInetFileTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("usb", 1), ("tftp", 2), ("xmodem", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadInetFileTransferType.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetFileTransferType.setDescription('The FileTransfer Method used by the management station to initiate the download attempt.')
hpicfDownloadInetResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReset", 1), ("warmReset", 2), ("factoryReset", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadInetResetType.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetResetType.setDescription('The type of reset to perform after completion of the firmware download. Note that not all agents will support all possible values, and there may be other agent-specific values for this object.')
hpicfDownloadInetErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("fileNotFound", 1), ("accessViolation", 2), ("diskFull", 3), ("illegalOperation", 4), ("unknownTID", 5), ("fileExists", 6), ("noSuchUser", 7), ("notDefined", 8), ("corruptFile", 9), ("noServer", 10), ("tftpTimeout", 11), ("hardwareError", 12), ("success", 13), ("aborted", 14), ("inProgress", 15), ("idle", 16), ("erasingEeprom", 17), ("incompleteFirmware", 18), ("requirePowerCycle", 19), ("cannotUpgrade", 20), ("cannotDowngrade", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadInetErrorStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetErrorStatus.setDescription("Status of download. The first seven codes are equal to the codes defined by the TFTP protocol. 'notDefined' is the same as TFTP protocol error 0. The following are the other possible values for this object: corruptFile - the agent detected a problem with the download file format. noServer - the TFTP server at hpicfDownloadTAddress did not respond to the TFTP request. tftpTimeout - the download was aborted due to excessive timeouts. hardwareError - there was a hardware problem on the agent that forced an abort of the download (see hpicfDownloadErrorText for more detailed information). success - the download has completed successfully. aborted - the download was aborted by setting the hpicfDownloadStatus to 'notInService' or 'delete'. inProgress - the TFTP transfer is currently active. idle - means that the download has not yet started (i.e. the value of hpicfDownloadStatus has not yet been set to 'active'). erasingEeprom - the agent is currently erasing the EEPROM device. Currently only used on JetDirect agents. incompleteFirmware - the agent is running an incomplete version of firmware and requires a download. Currently only used on JetDirect agents. requirePowerCycle - the agent must be power cycled to run the newly downloaded firmware. Currently only used on JetDirect agents. cannotUpgrade - the agent's current firmware revision cannot be upgraded to the revision in the download file. cannotDowngrade - the agent's current firmware revision cannot be downgraded to the revision in the download file.")
hpicfDownloadInetErrorText = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadInetErrorText.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetErrorText.setDescription('A textual description of the current error status of the firmware download.')
hpicfDownloadInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadInetStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetStatus.setDescription("The status of this download entry. This object may not be set to 'active' unless the following columnar objects exist in this row: hpicfDownloadInetTAddress, hpicfDownloadInetTAddressType, hpicfDownloadInetFilename, and hpicfDownloadInetResetType.")
hpicfDownloadInetPassesLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadInetPassesLeft.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetPassesLeft.setDescription("The number of passes remaining in the current download attempt. Some agents (currently JetDirect agents) require multiple passes through the download file in order to download a firmware image. This object indicates the number of passes remaining, including the current pass. The object is initialized by the agent to the number of passes required to complete the download when the corresponding instance of hpicfDownloadStatus is set to 'active'. It is decremented by one each time a pass completes.")
hpicfDownloadInetOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDownloadInetOctetCount.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetOctetCount.setDescription("The number of octets that have been transferred during the current pass. This object is initialized to zero by the agent when the corresponding instance of hpicfDownloadStatus is set to 'active', and reinitialized to zero at the beginning of each pass.")
hpicfDownloadInetDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone('/os/primary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadInetDestination.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetDestination.setDescription("The destination of the download file on the agent. The allowable destination names depend on the type of agent being downloaded. In case of firmware download,destination can be '/os/primary' or '/os/secondary' The agent will use '/os/primary' as the default value for this object when the row is created. In case of downloading a config file, this object is set to the name of the config file on the switch to where it should be downloaded. In case of downloading the startup config, this object is nullified as it is not used. ICF router agents also allow a download of a config file. Currently, the name of the config file on the agent is '/config'. If the hpicfDownloadInetOpType is set to ftget, an agent should reject an attempt to set this object to a destination name that does not make sense for this type of agent. If hpicfDownloadInetOpType is ftput this can be set to a filename present in the tftp server.")
hpicfDownloadInetOpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ftget", 1), ("ftput", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadInetOpType.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetOpType.setDescription('The OpType which is used for Getting or Putting firmware, coreDump and config from/to the TFTP server.')
hpicfDownloadInetFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("flash", 1), ("startUpConfig", 2), ("runningConfig", 3), ("config", 4), ("coreDump", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadInetFileType.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetFileType.setDescription('The FileType used by the management station to initiate the upload/download attempt. OpType-ftput is not supported for flash. OpType-ftget is not supported for runningConfig and coreDump')
hpicfDownloadInetFileModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unix", 1), ("pc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadInetFileModeType.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetFileModeType.setDescription('The FileModeType used by the management station to initiate the download attempt.')
hpicfDownloadInetCoreDumpModule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 9, 1, 20), PhysicalIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDownloadInetCoreDumpModule.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadInetCoreDumpModule.setDescription('This object can be updated if the hpicfDownloadInetFileType is set to coreDump. Valid entPhysicalIndex for this object are management-modules and interface-modules.')
hpicfDownloadTftpClientConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadTftpClientConfig.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadTftpClientConfig.setDescription('This object enables or disables the TFTP client on the switch. The TFTP client is disabled when SFTP and SCP file transfer modes are enabled. A value of (1) indicates that TFTP client is enabled on the switch. A value of (2) indicates that TFTP client is disabled on the switch.')
hpicfDownloadTftpClientBlkSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 8192)).clone(1416)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDownloadTftpClientBlkSize.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadTftpClientBlkSize.setDescription('The size of the TFTP Client block size in bytes. This value can be set only when hpicfDownloadTftpClientConfig is enabled. When hpicfDownloadTftpClientConfig is disabled, this value is reset to its default value. The actual range of the supported block size depends on the implementation.')
hpicfDownloadConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1))
hpicfDownloadCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 1))
hpicfDownloadGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2))
hpicfDownloadCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 1, 1)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadGroup"), ("HP-ICF-DOWNLOAD", "hpicfDownloadLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadCompliance = hpicfDownloadCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadCompliance.setDescription('********* THIS COMPLIANCE IS DEPRECATED ********* The compliance statement for HP ICF network downloadable devices.')
hpicfDownloadConfigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 1, 2)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadConfigGroup"), ("HP-ICF-DOWNLOAD", "hpicfDownloadLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigCompliance = hpicfDownloadConfigCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadConfigCompliance.setDescription('New version of the compliance statement for HP ICF network downloadable devices that allows for monitoring in-progress downloads and for directing a download to different destinations on the device.')
hpicfDownloadConfigInetCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 1, 3)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadConfigInetGroup"), ("HP-ICF-DOWNLOAD", "hpicfDownloadLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigInetCompliance = hpicfDownloadConfigInetCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadConfigInetCompliance.setDescription('New version of the compliance statement for HP ICF network downloadable devices that allows for monitoring in-progress downloads and for directing a download to different destinations on the device.')
hpicfDownloadAutoTftpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 1, 4)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadAutoTftpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadAutoTftpCompliance = hpicfDownloadAutoTftpCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadAutoTftpCompliance.setDescription('The compliance statement for HP ICF network downloadable devices that allows automatic download of a firmware-image on boot.')
hpicfDownloadConfigInetCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 1, 5)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadConfigOtherGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigInetCompliance1 = hpicfDownloadConfigInetCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadConfigInetCompliance1.setDescription('New version of the compliance statement for HP ICF network downloadable devices that allows for monitoring in-progress downloads and for directing a download to different destinations on the device.')
hpicfDownloadConfigInetCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 1, 6)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadConfigOtherGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigInetCompliance2 = hpicfDownloadConfigInetCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadConfigInetCompliance2.setDescription('New version of the compliance statement for HP ICF network downloadable devices that allows for monitoring in-progress downloads and for directing a download to different destinations on the device.')
hpicfDownloadConfigInetCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 1, 7)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadConfigOtherGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigInetCompliance3 = hpicfDownloadConfigInetCompliance3.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadConfigInetCompliance3.setDescription('A New version of the compliance statement for HP ICF network downloadable devices that allows monitoring of downloads in progress and directing a download to different destinations on the device.')
hpicfDownloadConfigInetCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 1, 8)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadConfigOtherGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigInetCompliance4 = hpicfDownloadConfigInetCompliance4.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadConfigInetCompliance4.setDescription('A New version of the compliance statement for HP ICF network downloadable devices that allows monitoring of downloads in progress and directing a download to different destinations on the device.')
hpicfDownloadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2, 1)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadIndex"), ("HP-ICF-DOWNLOAD", "hpicfDownloadOwnerAddress"), ("HP-ICF-DOWNLOAD", "hpicfDownloadOwnerDomain"), ("HP-ICF-DOWNLOAD", "hpicfDownloadTAddress"), ("HP-ICF-DOWNLOAD", "hpicfDownloadTDomain"), ("HP-ICF-DOWNLOAD", "hpicfDownloadFilename"), ("HP-ICF-DOWNLOAD", "hpicfDownloadResetType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadErrorStatus"), ("HP-ICF-DOWNLOAD", "hpicfDownloadErrorText"), ("HP-ICF-DOWNLOAD", "hpicfDownloadStatus"), ("HP-ICF-DOWNLOAD", "hpicfDownloadLogMaxSize"), ("HP-ICF-DOWNLOAD", "hpicfDownloadLogSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadGroup = hpicfDownloadGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadGroup.setDescription('********* THIS GROUP IS DEPRECATED ********* A collection of objects for controlling network download of device firmware to ICF devices.')
hpicfDownloadLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2, 2)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDlLogIndex"), ("HP-ICF-DOWNLOAD", "hpicfDlLogOwnerAddress"), ("HP-ICF-DOWNLOAD", "hpicfDlLogOwnerDomain"), ("HP-ICF-DOWNLOAD", "hpicfDlLogTAddress"), ("HP-ICF-DOWNLOAD", "hpicfDlLogTDomain"), ("HP-ICF-DOWNLOAD", "hpicfDlLogFilename"), ("HP-ICF-DOWNLOAD", "hpicfDlLogResetType"), ("HP-ICF-DOWNLOAD", "hpicfDlLogErrorStatus"), ("HP-ICF-DOWNLOAD", "hpicfDlLogErrorText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadLogGroup = hpicfDownloadLogGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadLogGroup.setDescription('A collection of objects for maintaining a log of network download attempts to ICF devices.')
hpicfDownloadConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2, 3)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadIndex"), ("HP-ICF-DOWNLOAD", "hpicfDownloadOwnerAddress"), ("HP-ICF-DOWNLOAD", "hpicfDownloadOwnerDomain"), ("HP-ICF-DOWNLOAD", "hpicfDownloadTAddress"), ("HP-ICF-DOWNLOAD", "hpicfDownloadTDomain"), ("HP-ICF-DOWNLOAD", "hpicfDownloadFilename"), ("HP-ICF-DOWNLOAD", "hpicfDownloadResetType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadErrorStatus"), ("HP-ICF-DOWNLOAD", "hpicfDownloadErrorText"), ("HP-ICF-DOWNLOAD", "hpicfDownloadStatus"), ("HP-ICF-DOWNLOAD", "hpicfDownloadPassesLeft"), ("HP-ICF-DOWNLOAD", "hpicfDownloadOctetCount"), ("HP-ICF-DOWNLOAD", "hpicfDownloadDestination"), ("HP-ICF-DOWNLOAD", "hpicfDownloadLogMaxSize"), ("HP-ICF-DOWNLOAD", "hpicfDownloadLogSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigGroup = hpicfDownloadConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadConfigGroup.setDescription('A collection of objects for controlling and monitoring network download of device firmware to ICF devices.')
hpicfDownloadConfigInetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2, 4)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadLogMaxSize"), ("HP-ICF-DOWNLOAD", "hpicfDownloadLogSize"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetIndex"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetTAddressType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetTAddress"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetFilename"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetOwnerAddressType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetOwnerAddress"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetSourcePort"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetDestinationPort"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetFileTransferType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetResetType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetErrorStatus"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetErrorText"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetStatus"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetPassesLeft"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetOctetCount"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetDestination"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetOpType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetFileType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetFileModeType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadInetCoreDumpModule"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigInetGroup = hpicfDownloadConfigInetGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadConfigInetGroup.setDescription('A collection of objects for controlling and monitoring network download of device firmware to ICF devices.')
hpicfDownloadAutoTftpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2, 5)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadAutoTftpAddressType"), ("HP-ICF-DOWNLOAD", "hpicfDownloadAutoTftpAddress"), ("HP-ICF-DOWNLOAD", "hpicfDownloadAutoTftpRemoteFilename"), ("HP-ICF-DOWNLOAD", "hpicfDownloadAutoTftpAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadAutoTftpGroup = hpicfDownloadAutoTftpGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadAutoTftpGroup.setDescription('A collection of objects for controlling automatic download of a firmware image to the device.')
hpicfDownloadConfigOtherGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2, 6)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadAutoTftpAdminStatus"), ("HP-ICF-DOWNLOAD", "hpicfDownloadTftpConfig"), ("HP-ICF-DOWNLOAD", "hpicfDownloadTftpServerConfig"), ("HP-ICF-DOWNLOAD", "hpicfDownloadConfigFileUpdateEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigOtherGroup = hpicfDownloadConfigOtherGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadConfigOtherGroup.setDescription('A collection of objects for controlling automatic download of a firmware image to the device.')
hpicfDownloadConfigOtherGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2, 7)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadTftp6Config"), ("HP-ICF-DOWNLOAD", "hpicfDownloadTftp6ServerConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigOtherGroup1 = hpicfDownloadConfigOtherGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDownloadConfigOtherGroup1.setDescription('A collection of objects for controlling automatic download of a firmware image to the device.')
hpicfDownloadConfigOtherGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2, 8)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadAutoTftpAdminStatus"), ("HP-ICF-DOWNLOAD", "hpicfDownloadTftpClientConfig"), ("HP-ICF-DOWNLOAD", "hpicfDownloadTftpServerConfig"), ("HP-ICF-DOWNLOAD", "hpicfDownloadConfigFileUpdateEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigOtherGroup2 = hpicfDownloadConfigOtherGroup2.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadConfigOtherGroup2.setDescription('A collection of objects for controlling the automatic download of a firmware on the device.')
hpicfDownloadConfigOtherGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 4, 1, 2, 9)).setObjects(("HP-ICF-DOWNLOAD", "hpicfDownloadTftpClientBlkSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDownloadConfigOtherGroup3 = hpicfDownloadConfigOtherGroup3.setStatus('current')
if mibBuilder.loadTexts: hpicfDownloadConfigOtherGroup3.setDescription('A collection of objects for controlling the automatic download of a firmware on the device.')
mibBuilder.exportSymbols("HP-ICF-DOWNLOAD", hpicfDownloadInetOwnerAddressType=hpicfDownloadInetOwnerAddressType, hpicfDownloadOwnerDomain=hpicfDownloadOwnerDomain, hpicfDownloadIndex=hpicfDownloadIndex, hpicfDlLogOwnerAddress=hpicfDlLogOwnerAddress, hpicfDownloadLogMaxSize=hpicfDownloadLogMaxSize, hpicfDownloadConfigInetCompliance=hpicfDownloadConfigInetCompliance, hpicfDownloadTftpClientConfig=hpicfDownloadTftpClientConfig, hpicfDownloadConfigInetCompliance4=hpicfDownloadConfigInetCompliance4, hpicfDownloadInetOpType=hpicfDownloadInetOpType, hpicfDownloadConfigGroup=hpicfDownloadConfigGroup, hpicfDownloadGroups=hpicfDownloadGroups, hpicfDlLogIndex=hpicfDlLogIndex, hpicfDownloadInetOwnerAddress=hpicfDownloadInetOwnerAddress, hpicfDownloadConfigOtherGroup2=hpicfDownloadConfigOtherGroup2, hpicfDownloadInetStatus=hpicfDownloadInetStatus, hpicfDownloadInetFileModeType=hpicfDownloadInetFileModeType, hpicfDownloadErrorStatus=hpicfDownloadErrorStatus, hpicfDownloadAutoTftpEntry=hpicfDownloadAutoTftpEntry, hpicfDownloadConfigInetCompliance1=hpicfDownloadConfigInetCompliance1, hpicfDownloadConfigOtherGroup1=hpicfDownloadConfigOtherGroup1, hpicfDownloadAutoTftpTable=hpicfDownloadAutoTftpTable, hpicfDownloadOctetCount=hpicfDownloadOctetCount, hpicfDownloadInetFileType=hpicfDownloadInetFileType, hpicfDownloadInetFileTransferType=hpicfDownloadInetFileTransferType, hpicfDownloadConfigInetCompliance3=hpicfDownloadConfigInetCompliance3, hpicfDownloadInetCoreDumpModule=hpicfDownloadInetCoreDumpModule, hpicfDownloadInetTable=hpicfDownloadInetTable, hpicfDownloadInetResetType=hpicfDownloadInetResetType, hpicfDownloadLogGroup=hpicfDownloadLogGroup, hpicfDownloadConfigOtherGroup=hpicfDownloadConfigOtherGroup, hpicfDownloadDestination=hpicfDownloadDestination, hpicfDlLogErrorText=hpicfDlLogErrorText, hpicfDlLogOwnerDomain=hpicfDlLogOwnerDomain, hpicfDownloadPassesLeft=hpicfDownloadPassesLeft, hpicfDownloadLogTable=hpicfDownloadLogTable, hpicfDownloadTftp6Config=hpicfDownloadTftp6Config, hpicfDlLogTDomain=hpicfDlLogTDomain, hpicfDownloadAutoTftpRemoteFilename=hpicfDownloadAutoTftpRemoteFilename, hpicfDownloadInetEntry=hpicfDownloadInetEntry, hpicfDownloadInetIndex=hpicfDownloadInetIndex, hpicfDownloadInetPassesLeft=hpicfDownloadInetPassesLeft, hpicfDownloadTftpClientBlkSize=hpicfDownloadTftpClientBlkSize, hpicfDownloadConfigCompliance=hpicfDownloadConfigCompliance, hpicfDownload=hpicfDownload, hpicfDownloadConfigInetCompliance2=hpicfDownloadConfigInetCompliance2, hpicfDownloadStatus=hpicfDownloadStatus, hpicfDownloadEntry=hpicfDownloadEntry, hpicfDownloadAutoTftpAddress=hpicfDownloadAutoTftpAddress, hpicfDownloadResetType=hpicfDownloadResetType, hpicfDownloadTDomain=hpicfDownloadTDomain, hpicfDownloadAutoTftpAdminStatus=hpicfDownloadAutoTftpAdminStatus, PYSNMP_MODULE_ID=hpicfDownloadMib, hpicfDownloadGroup=hpicfDownloadGroup, hpicfDownloadTftp6ServerConfig=hpicfDownloadTftp6ServerConfig, hpicfDownloadLogSize=hpicfDownloadLogSize, hpicfDownloadInetErrorStatus=hpicfDownloadInetErrorStatus, hpicfDownloadCompliance=hpicfDownloadCompliance, hpicfDownloadAutoTftpAddressType=hpicfDownloadAutoTftpAddressType, hpicfDownloadAutoTftpCompliance=hpicfDownloadAutoTftpCompliance, hpicfDownloadInetTAddressType=hpicfDownloadInetTAddressType, hpicfDownloadOwnerAddress=hpicfDownloadOwnerAddress, hpicfDownloadAutoTftpGroup=hpicfDownloadAutoTftpGroup, hpicfDownloadConfigInetGroup=hpicfDownloadConfigInetGroup, hpicfDownloadTftpServerConfig=hpicfDownloadTftpServerConfig, hpicfDownloadInetErrorText=hpicfDownloadInetErrorText, hpicfDownloadInetOctetCount=hpicfDownloadInetOctetCount, hpicfDlLogResetType=hpicfDlLogResetType, hpicfDownloadInetFilename=hpicfDownloadInetFilename, hpicfDlLogFilename=hpicfDlLogFilename, hpicfDownloadInetSourcePort=hpicfDownloadInetSourcePort, hpicfDlLogTAddress=hpicfDlLogTAddress, hpicfDownloadTable=hpicfDownloadTable, hpicfDownloadConfigOtherGroup3=hpicfDownloadConfigOtherGroup3, hpicfDownloadTAddress=hpicfDownloadTAddress, hpicfDlLogErrorStatus=hpicfDlLogErrorStatus, hpicfDownloadMib=hpicfDownloadMib, hpicfDownloadAutoTftpIndex=hpicfDownloadAutoTftpIndex, hpicfDownloadLogEntry=hpicfDownloadLogEntry, hpicfDownloadCompliances=hpicfDownloadCompliances, hpicfDownloadConfigFileUpdateEnabled=hpicfDownloadConfigFileUpdateEnabled, hpicfDownloadErrorText=hpicfDownloadErrorText, hpicfDownloadInetDestination=hpicfDownloadInetDestination, hpicfDownloadInetTAddress=hpicfDownloadInetTAddress, hpicfDownloadConformance=hpicfDownloadConformance, hpicfDownloadTftpConfig=hpicfDownloadTftpConfig, hpicfDownloadFilename=hpicfDownloadFilename, hpicfDownloadInetDestinationPort=hpicfDownloadInetDestinationPort)
