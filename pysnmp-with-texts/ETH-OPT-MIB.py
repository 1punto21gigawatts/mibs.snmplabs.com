#
# PySNMP MIB module ETH-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ETH-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Gauge32, Bits, Integer32, iso, ObjectIdentity, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, NotificationType, ModuleIdentity, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "Bits", "Integer32", "iso", "ObjectIdentity", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "NotificationType", "ModuleIdentity", "enterprises", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

cdx6500PPCTdot3PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8), )
if mibBuilder.loadTexts: cdx6500PPCTdot3PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTdot3PortTable.setDescription('This table contains Ethernet interface parameters and state variables, one entry per 802.3 interface.')
cdx6500PPCTdot3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1), ).setIndexNames((0, "ETH-OPT-MIB", "cdx6500dot3IfIndex"))
if mibBuilder.loadTexts: cdx6500PPCTdot3PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTdot3PortEntry.setDescription('A list of Ethernet status and parameter values for an 802.3 interface.')
cdx6500dot3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3IfIndex.setDescription('This object is the port number for the Interface.')
cdx6500dot3LanCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("aui", 2), ("utp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3LanCableType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3LanCableType.setDescription('Two LAN connectors are provided and only one connector, selected by software, is active at any given time. This parameter specifies the type of cable and therefore which connector is used for the LAN interface as follows: utp: Unshielded Twisted Pair (RJ-45) aui: Attachment Unit Interface (DB-15)')
cdx6500dot3PortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3PortMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3PortMacAddress.setDescription('Specifies the MAC address of the LAN port. The entered value of 00-00-00-00-00-00 will be replaced by the Burned In Address (BIA) if the LAN hardware is present.')
cdx6500dot3TransmitQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3TransmitQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3TransmitQueueLimit.setDescription('Number of frames that can be queued on the LAN transmitter before any frame is dropped.')
cdx6500dot3CollisionSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3CollisionSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3CollisionSensitivity.setDescription('This parameter specifies the width required of the collision detection signal, in bit times, before it is recognized that a collision has occurred.')
cdx6500dot3CarrierSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3CarrierSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3CarrierSensitivity.setDescription('This parameter specifies the width required of the carrier sense signal in bit times, before it is recognized as being active. Carrier sense deactivation is recognized immediately. This capability is useful in noisy cable environments.')
cdx6500dot3BridgeLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3BridgeLinkNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3BridgeLinkNum.setDescription('This parameter specifies the bridge link number associated with this LAN port.')
cdx6500dot3RouterIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3RouterIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3RouterIfNum.setDescription('This parameter specifies the router interface number associated with this LAN port.')
cdx6500dot3DuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3DuplexMode.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3DuplexMode.setDescription('This parameter specifies whether this LAN port should run in either Half-Duplex or Full-Duplex mode.')
cdx6500PPSTdot3PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: cdx6500PPSTdot3PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTdot3PortTable.setDescription("A table containing Ethernet statistics, one entry per 802.3 interface. All the statistics are defined using the syntax Counter as 32-bit wrap around counters. Thus, if an interface's hardware maintains these statistics in 16-bit counters, then the agent must read the hardware's counters frequently enough to prevent loss of significance, in order to maintain 32-bit counters in software.")
cdx6500PPSTdot3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "ETH-OPT-MIB", "cdx6500dot3StatsIfIndex"))
if mibBuilder.loadTexts: cdx6500PPSTdot3PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTdot3PortEntry.setDescription('An entry contains the 802.3 statistics for a particular interface.')
cdx6500dot3StatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsIfIndex.setDescription('The value of this object identifies the 802.3 interface for which this entry contains management information. It is also the port number of the interface.')
cdx6500dot3StatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30))).clone(namedValues=NamedValues(("eth", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsPortType.setDescription('The configured value of the Port type.')
cdx6500dot3StatsRxShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsRxShortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsRxShortFrames.setDescription('This counter is incremented when the LAN port observes a receive or transmitted frame which is less than 18 bytes.')
cdx6500dot3StatsRxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsRxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsRxCollisions.setDescription('This counter is incremented when the LAN port observes collisions.')
cdx6500dot3StatsRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsRxLongFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsRxLongFrames.setDescription('This counter is incremented when the LAN port observes a frame that can not be forwarded because of excessive length.')
cdx6500dot3StatsTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsTxDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsTxDiscards.setDescription('This counter is incremented when the LAN port discards the frame because the transmit queue exceeds the maximum queue length.')
cdx6500dot3StatsDataBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsDataBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsDataBytesRx.setDescription('This counter is incremented for each data byte received by the LAN port.')
cdx6500dot3StatsDataBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsDataBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsDataBytesTx.setDescription('This counter is incremented for each data byte transmitted by the LAN port.')
cdx6500dot3StatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsPortStatus.setDescription("Indicates the status of the LAN port. newvalDisabled : same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500dot3StatsLastStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsLastStatReset.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsLastStatReset.setDescription('Time stamp when the statistics were last reset.')
cdx6500dot3StatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500dot3StatsClearStats.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsClearStats.setDescription('This is the command to reset the LAN port statistics.')
cdx6500dot3StatsCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("boot", 2), ("disable", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500dot3StatsCommand.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3StatsCommand.setDescription('This is a control for the 802.3 port. enable : will enable the port. boot : will boot the port. disable : will disable the port.')
cdx6500dot3Statsframesin = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statsframesin.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3Statsframesin.setDescription('This counter is incremented for each frame received by the LAN port.')
cdx6500dot3Statsframesout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statsframesout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3Statsframesout.setDescription('This counter is incremented for each frame transmitted by the LAN port.')
cdx6500dot3Statsfpsin = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statsfpsin.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3Statsfpsin.setDescription('This stat specifies the number of frames per second received by the LAN port.')
cdx6500dot3Statsfpsout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statsfpsout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3Statsfpsout.setDescription('This stat specifies the number of frames per second transmitted by the LAN port.')
cdx6500dot3Statshadiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statshadiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot3Statshadiscards.setDescription('This counter specifies the number of frames the HA discarded.')
mibBuilder.exportSymbols("ETH-OPT-MIB", cdx6500dot3IfIndex=cdx6500dot3IfIndex, cdx6500dot3StatsPortStatus=cdx6500dot3StatsPortStatus, cdx6500dot3StatsIfIndex=cdx6500dot3StatsIfIndex, cdx6500PPSTdot3PortTable=cdx6500PPSTdot3PortTable, cdx6500dot3StatsClearStats=cdx6500dot3StatsClearStats, cdx6500dot3Statsframesin=cdx6500dot3Statsframesin, cdx6500dot3StatsDataBytesTx=cdx6500dot3StatsDataBytesTx, cdx6500dot3RouterIfNum=cdx6500dot3RouterIfNum, cdx6500dot3StatsRxCollisions=cdx6500dot3StatsRxCollisions, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500dot3BridgeLinkNum=cdx6500dot3BridgeLinkNum, cdx6500PPSTdot3PortEntry=cdx6500PPSTdot3PortEntry, DisplayString=DisplayString, cdx6500dot3DuplexMode=cdx6500dot3DuplexMode, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, codex=codex, cdx6500dot3LanCableType=cdx6500dot3LanCableType, cdx6500dot3TransmitQueueLimit=cdx6500dot3TransmitQueueLimit, cdx6500dot3Statshadiscards=cdx6500dot3Statshadiscards, cdx6500dot3Statsfpsout=cdx6500dot3Statsfpsout, cdx6500dot3StatsLastStatReset=cdx6500dot3StatsLastStatReset, cdx6500dot3StatsCommand=cdx6500dot3StatsCommand, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500PPCTdot3PortEntry=cdx6500PPCTdot3PortEntry, cdx6500dot3Statsfpsin=cdx6500dot3Statsfpsin, cdx6500dot3CarrierSensitivity=cdx6500dot3CarrierSensitivity, cdx6500dot3StatsRxShortFrames=cdx6500dot3StatsRxShortFrames, cdx6500dot3CollisionSensitivity=cdx6500dot3CollisionSensitivity, MacAddress=MacAddress, cdxProductSpecific=cdxProductSpecific, cdx6500dot3Statsframesout=cdx6500dot3Statsframesout, cdx6500dot3StatsPortType=cdx6500dot3StatsPortType, cdx6500Statistics=cdx6500Statistics, cdx6500dot3StatsRxLongFrames=cdx6500dot3StatsRxLongFrames, cdx6500dot3StatsTxDiscards=cdx6500dot3StatsTxDiscards, cdx6500dot3StatsDataBytesRx=cdx6500dot3StatsDataBytesRx, cdx6500dot3PortMacAddress=cdx6500dot3PortMacAddress, cdx6500=cdx6500, cdx6500PPCTdot3PortTable=cdx6500PPCTdot3PortTable, cdx6500Configuration=cdx6500Configuration)
