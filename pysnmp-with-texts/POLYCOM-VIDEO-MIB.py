#
# PySNMP MIB module POLYCOM-VIDEO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POLYCOM-VIDEO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, NotificationType, TimeTicks, Gauge32, ObjectIdentity, NotificationType, MibIdentifier, Counter32, Unsigned32, Bits, iso, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "NotificationType", "TimeTicks", "Gauge32", "ObjectIdentity", "NotificationType", "MibIdentifier", "Counter32", "Unsigned32", "Bits", "iso", "enterprises", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
polycom = MibIdentifier((1, 3, 6, 1, 4, 1, 2684))
polycomVideo = MibIdentifier((1, 3, 6, 1, 4, 1, 2684, 1))
polycomAudio = MibIdentifier((1, 3, 6, 1, 4, 1, 2684, 2))
polycomData = MibIdentifier((1, 3, 6, 1, 4, 1, 2684, 3))
polycomViewStation = MibIdentifier((1, 3, 6, 1, 4, 1, 2684, 1, 1))
polycomVSAuthLocation = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSAuthLocation.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSAuthLocation.setDescription('The origin of the last attempted admin login. Valid values are 0(local), 1(ftp), 2(telnet) or 3(web).')
polycomVSPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSPhoneNumber.setDescription('The far site number.')
polycomVSReason = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSReason.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSReason.setDescription('The cause code associated with a call disconnecting.')
polycomVSPlead = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSPlead.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSPlead.setDescription('The contact phone number for the user who sent the help request to GMS.')
polycomVSMicData = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSMicData.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSMicData.setDescription('The current total connected mic count or VTX status.')
polycomVSAutoAnswerSetting = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSAutoAnswerSetting.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSAutoAnswerSetting.setDescription('The current user-specified auto answer setting (i.e. Yes, No, Do_Not_Disturb).')
polycomVSTimeServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSTimeServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSTimeServerAddress.setDescription('The current time server address.')
polycomVSTimeServerSetting = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSTimeServerSetting.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSTimeServerSetting.setDescription('The current time server setting.')
polycomVSGDSAddress = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSGDSAddress.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSGDSAddress.setDescription('The current global directory server address related to a certain GDS event.')
polycomVSGatekeeperAddress = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSGatekeeperAddress.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSGatekeeperAddress.setDescription('The current gatekeeper address related to a certain gatekeeper event.')
polycomVSPreviousIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSPreviousIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSPreviousIPAddress.setDescription('The previous IP address.')
polycomVSCurrentIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSCurrentIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSCurrentIPAddress.setDescription('The current IP address.')
polycomVSPreviousNicType = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSPreviousNicType.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSPreviousNicType.setDescription('The previous network interface card type.')
polycomVSCurrentNicType = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSCurrentNicType.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSCurrentNicType.setDescription('The current network interface card type.')
polycomVSNicLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSNicLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSNicLineNumber.setDescription('The V.35 or ISDN line number related to a certain line event.')
polycomVSPreviousNicLineCount = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSPreviousNicLineCount.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSPreviousNicLineCount.setDescription('The total nic line count (i.e. ISDN Quad BRI = 4 lines).')
polycomVSCurrentNicLineCount = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSCurrentNicLineCount.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSCurrentNicLineCount.setDescription('The current nic line count (i.e. ISDN Quad BRI = 4 lines).')
polycomVSV35PortsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSV35PortsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSV35PortsEnabled.setDescription('The current user specified V.35 ports enabled setting (i.e. 1, 1+2, none).')
polycomVSAuthClientAddress = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSAuthClientAddress.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSAuthClientAddress.setDescription('The address of the login client.')
polycomVSUPnPStatus = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSUPnPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSUPnPStatus.setDescription('The current status of the UPnP device.')
polycomVSPercentPacketLoss = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSPercentPacketLoss.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSPercentPacketLoss.setDescription('The current combined (audio/video) average percentage packet loss when in an H.323 call.')
polycomVSJitter = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSJitter.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSJitter.setDescription('The current combined (audio/video) cumulative average jitter (in ms) when in an H.323 call.')
polycomVSLatency = MibScalar((1, 3, 6, 1, 4, 1, 2684, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomVSLatency.setStatus('mandatory')
if mibBuilder.loadTexts: polycomVSLatency.setDescription('The current average latency based on round trip delay when in an H.323 call.')
loginOK = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,1)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSAuthLocation"), ("POLYCOM-VIDEO-MIB", "polycomVSAuthClientAddress"))
if mibBuilder.loadTexts: loginOK.setDescription('Sent when an administrator logs in via embedded UI, ftp, telnet or web.')
loginFail = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,2)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSAuthLocation"), ("POLYCOM-VIDEO-MIB", "polycomVSAuthClientAddress"))
if mibBuilder.loadTexts: loginFail.setDescription('Sent when an attempt to log in as an administrator fails via embedded UI, ftp, telnet or web.')
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,3))
if mibBuilder.loadTexts: lowBattery.setDescription('Sent when the remote has a low battery.')
callUp = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,4)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSPhoneNumber"))
if mibBuilder.loadTexts: callUp.setDescription('When a call is successfully connected, this notifies the SNMP manager of the far site number.')
callDown = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,5)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSPhoneNumber"))
if mibBuilder.loadTexts: callDown.setDescription('When a call is disconnected with normal call clearing, this notifies the SNMP manager of the far site number.')
callFail = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,6)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSReason"), ("POLYCOM-VIDEO-MIB", "polycomVSPhoneNumber"))
if mibBuilder.loadTexts: callFail.setDescription('When a call is disconnected with a cause code other than normal, this notifies the SNMP manager of the reason.')
userAssist = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,7)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSPlead"))
if mibBuilder.loadTexts: userAssist.setDescription('Sent when a user sends a help request to GMS.')
visualConcertUp = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,8))
if mibBuilder.loadTexts: visualConcertUp.setDescription('Sent when a visual concert pod is connected.')
visualConcertOff = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,9))
if mibBuilder.loadTexts: visualConcertOff.setDescription('Sent when a visual concert pod is disconnected.')
micChange = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,10)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSMicData"))
if mibBuilder.loadTexts: micChange.setDescription('Sent when a mic pod or VTX is connected or disconnected and includes the total mic count.')
autoAnswerChange = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,11)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSAutoAnswerSetting"))
if mibBuilder.loadTexts: autoAnswerChange.setDescription('Sent when the auto answer setting is changed.')
timeServerUp = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,12)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSTimeServerAddress"))
if mibBuilder.loadTexts: timeServerUp.setDescription('Sent when the time server successfully connects.')
timeServerDown = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,13)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSTimeServerAddress"))
if mibBuilder.loadTexts: timeServerDown.setDescription('Sent when the time server is enabled but does not connect correctly.')
timeServerOn = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,14)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSTimeServerSetting"))
if mibBuilder.loadTexts: timeServerOn.setDescription('Sent when the time server is enabled.')
timeServerOff = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,15))
if mibBuilder.loadTexts: timeServerOff.setDescription('Sent when the time server is disabled.')
gdsUp = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,16)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSGDSAddress"))
if mibBuilder.loadTexts: gdsUp.setDescription('Sent when a global directory server successfully connects.')
gdsDown = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,17)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSGDSAddress"))
if mibBuilder.loadTexts: gdsDown.setDescription('Sent when a global directory server is enabled, but not connected correctly.')
gdsOff = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,18)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSGDSAddress"))
if mibBuilder.loadTexts: gdsOff.setDescription('Sent when a global directory server is disabled.')
gatekeeperReg = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,19)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSGatekeeperAddress"))
if mibBuilder.loadTexts: gatekeeperReg.setDescription('Sent when a gatekeeper is registered successfully.')
gatekeeperDown = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,20)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSGatekeeperAddress"))
if mibBuilder.loadTexts: gatekeeperDown.setDescription('Sent when a gatekeeper is specified, but not registered successfully.')
gatekeeperOff = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,21))
if mibBuilder.loadTexts: gatekeeperOff.setDescription('Sent when a gatekeeper is disabled.')
ipAddressChange = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,22)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSPreviousIPAddress"), ("POLYCOM-VIDEO-MIB", "polycomVSCurrentIPAddress"))
if mibBuilder.loadTexts: ipAddressChange.setDescription('Sent when the system IP address has changed.')
interfaceTypeChange = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,23)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSPreviousNicType"), ("POLYCOM-VIDEO-MIB", "polycomVSCurrentNicType"))
if mibBuilder.loadTexts: interfaceTypeChange.setDescription('Sent when the system network interface card type has changed.')
lineEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,24)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSNicLineNumber"))
if mibBuilder.loadTexts: lineEnabled.setDescription('Sent when a V.35 or ISDN line has been enabled.')
lineDisabled = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,25)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSNicLineNumber"))
if mibBuilder.loadTexts: lineDisabled.setDescription('Sent when a V.35 or ISDN line has been disabled.')
lineUp = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,26)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSNicLineNumber"))
if mibBuilder.loadTexts: lineUp.setDescription('Sent when a V.35 or ISDN line has been enabled and becomes available for placing a call.')
lineDown = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,27)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSNicLineNumber"))
if mibBuilder.loadTexts: lineDown.setDescription('Sent when a V.35 or ISDN line has been enabled, but is not working correctly.')
v35PortsEnabled = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,28)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSV35PortsEnabled"))
if mibBuilder.loadTexts: v35PortsEnabled.setDescription('Sent when the V.35 enabled ports setting has changed.')
lineCountChange = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,29)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSPreviousNicLineCount"), ("POLYCOM-VIDEO-MIB", "polycomVSCurrentNicLineCount"))
if mibBuilder.loadTexts: lineCountChange.setDescription('Sent when the total of available V.35 or ISDN lines has changed.')
mainCameraUp = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,30))
if mibBuilder.loadTexts: mainCameraUp.setDescription('Sent when the main camera is working correctly.')
mainCameraDown = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,31))
if mibBuilder.loadTexts: mainCameraDown.setDescription('Sent when the main camera is not working correctly.')
upnpChange = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,32)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSUPnPStatus"))
if mibBuilder.loadTexts: upnpChange.setDescription('Sent when the state of the UPnP device changes.')
percentPacketLossExcessive = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,33)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSPercentPacketLoss"))
if mibBuilder.loadTexts: percentPacketLossExcessive.setDescription('Sent when the combined tx/rx percentage of packet loss exceeds 1 percent based on 1 minute samples.')
jitterExcessive = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,34)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSJitter"))
if mibBuilder.loadTexts: jitterExcessive.setDescription('Sent when the combined tx/rx average jitter exceeds 35 ms based on 1 minute samples.')
latencyExcessive = NotificationType((1, 3, 6, 1, 4, 1, 2684, 1, 1) + (0,35)).setObjects(("POLYCOM-VIDEO-MIB", "polycomVSLatency"))
if mibBuilder.loadTexts: latencyExcessive.setDescription('Sent when the combined tx/rx average latency exceeds 150 ms based on 1 minute samples.')
mibBuilder.exportSymbols("POLYCOM-VIDEO-MIB", callDown=callDown, polycomVSCurrentNicLineCount=polycomVSCurrentNicLineCount, visualConcertOff=visualConcertOff, polycomVSCurrentNicType=polycomVSCurrentNicType, polycomVSReason=polycomVSReason, userAssist=userAssist, timeServerDown=timeServerDown, mainCameraDown=mainCameraDown, polycomVSTimeServerAddress=polycomVSTimeServerAddress, polycomVSCurrentIPAddress=polycomVSCurrentIPAddress, polycomVSUPnPStatus=polycomVSUPnPStatus, gdsOff=gdsOff, latencyExcessive=latencyExcessive, gdsUp=gdsUp, percentPacketLossExcessive=percentPacketLossExcessive, autoAnswerChange=autoAnswerChange, polycomVSPreviousNicLineCount=polycomVSPreviousNicLineCount, polycomVSPreviousNicType=polycomVSPreviousNicType, polycomVSPhoneNumber=polycomVSPhoneNumber, polycomVSTimeServerSetting=polycomVSTimeServerSetting, polycomVSGDSAddress=polycomVSGDSAddress, timeServerOn=timeServerOn, lineEnabled=lineEnabled, polycomVSAutoAnswerSetting=polycomVSAutoAnswerSetting, loginOK=loginOK, timeServerOff=timeServerOff, loginFail=loginFail, callUp=callUp, v35PortsEnabled=v35PortsEnabled, polycomVSNicLineNumber=polycomVSNicLineNumber, callFail=callFail, gatekeeperDown=gatekeeperDown, polycomData=polycomData, polycomVSPlead=polycomVSPlead, polycomVSPercentPacketLoss=polycomVSPercentPacketLoss, polycomVSJitter=polycomVSJitter, polycomVSAuthClientAddress=polycomVSAuthClientAddress, polycomVSPreviousIPAddress=polycomVSPreviousIPAddress, polycomVSMicData=polycomVSMicData, polycomVideo=polycomVideo, micChange=micChange, ipAddressChange=ipAddressChange, polycom=polycom, lineUp=lineUp, lineDown=lineDown, jitterExcessive=jitterExcessive, polycomVSLatency=polycomVSLatency, visualConcertUp=visualConcertUp, polycomAudio=polycomAudio, timeServerUp=timeServerUp, lowBattery=lowBattery, gdsDown=gdsDown, gatekeeperOff=gatekeeperOff, interfaceTypeChange=interfaceTypeChange, polycomViewStation=polycomViewStation, lineDisabled=lineDisabled, lineCountChange=lineCountChange, polycomVSAuthLocation=polycomVSAuthLocation, upnpChange=upnpChange, mainCameraUp=mainCameraUp, polycomVSV35PortsEnabled=polycomVSV35PortsEnabled, polycomVSGatekeeperAddress=polycomVSGatekeeperAddress, gatekeeperReg=gatekeeperReg)
