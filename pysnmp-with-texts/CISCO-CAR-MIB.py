#
# PySNMP MIB module CISCO-CAR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CAR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, Integer32, Counter64, Unsigned32, ModuleIdentity, Bits, NotificationType, TimeTicks, Counter32, ObjectIdentity, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "Integer32", "Counter64", "Unsigned32", "ModuleIdentity", "Bits", "NotificationType", "TimeTicks", "Counter32", "ObjectIdentity", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoCarMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 113))
ciscoCarMIB.setRevisions(('1997-07-18 00:00', '1900-02-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCarMIB.setRevisionsDescriptions(('Initial version of this MIB module.', 'Added 32-bit overflow counters, as well as 64-bit counters for both switched and filtered bytes and packet counts to the statistics table (ccarStatTable).',))
if mibBuilder.loadTexts: ciscoCarMIB.setLastUpdated('0002180000Z')
if mibBuilder.loadTexts: ciscoCarMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCarMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: cs-qos@cisco.com')
if mibBuilder.loadTexts: ciscoCarMIB.setDescription('Cisco CAR MIB - Overview Cisco Weighted Rate-limit, known as Commited Access Rate (CAR), is a traffic control method which uses a set of rate limits to be applied to an interface for packet switching purpose. Each rate limit has a configurable action to be taken when a condition suffices. This MIB incorporates objects from the Cisco Rate-limit line interfaces. Its purpose is to provide Weighted Rate-Limit packet filtering information. ')
ciscoCarMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 113, 1))
ccarConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1))
ccarStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2))
class PacketSource(TextualConvention, Integer32):
    description = 'The source of the packet rate-limited for. input statistics of the input packets. output statistics of the output packets. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("input", 1), ("output", 2))

class RateLimitType(TextualConvention, Integer32):
    description = "The type of traffic rate-limited for. all all traffic. quickAcc traffic matches rate-limit's access list. standardAcc traffic matches standard access list. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("all", 1), ("quickAcc", 2), ("standardAcc", 3))

class RateLimitAction(TextualConvention, Integer32):
    description = 'The action taken after evaluating the rate limit. drop drop the packet. xmit transmit the packet. continue continue to evaluate to the subsequent rate limits. precedXmit rewrite the IP precedence and transmit the packet. precedCont rewrite the IP precedence and allow it evaluated by subsequent rate limits. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("drop", 1), ("xmit", 2), ("continue", 3), ("precedXmit", 4), ("precedCont", 5))

ccarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1), )
if mibBuilder.loadTexts: ccarConfigTable.setStatus('current')
if mibBuilder.loadTexts: ccarConfigTable.setDescription('A table of rate limit configuration entries. Rate Limit is a method of traffic control. It allows a set of rate limits to be configured and applied to packets flowing into/out of an interface to regulate network traffic.')
ccarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAR-MIB", "ccarConfigDirection"), (0, "CISCO-CAR-MIB", "ccarConfigRowIndex"))
if mibBuilder.loadTexts: ccarConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ccarConfigEntry.setDescription('A collection of rate-limit configuration objects on this interface. Entries in the ccarConfigTable is created and deleted via the rate-limit command line interface.')
ccarConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 1), PacketSource())
if mibBuilder.loadTexts: ccarConfigDirection.setStatus('current')
if mibBuilder.loadTexts: ccarConfigDirection.setDescription('The data source for the Rate Limit object.')
ccarConfigRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ccarConfigRowIndex.setStatus('current')
if mibBuilder.loadTexts: ccarConfigRowIndex.setDescription('An arbitrary index for rate limit objects. It will increase as the list is traversed, but may skip.')
ccarConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 3), RateLimitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarConfigType.setStatus('current')
if mibBuilder.loadTexts: ccarConfigType.setDescription('The type of traffic rate-limited against.')
ccarConfigAccIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarConfigAccIdx.setStatus('current')
if mibBuilder.loadTexts: ccarConfigAccIdx.setDescription('The index to the access list if RateLimitType is either quickAcc or standardAcc.')
ccarConfigRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 5), Integer32()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarConfigRate.setStatus('current')
if mibBuilder.loadTexts: ccarConfigRate.setDescription('The comitted access rate. This is the sustained rate permitted by the rate limit.')
ccarConfigLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 6), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarConfigLimit.setStatus('current')
if mibBuilder.loadTexts: ccarConfigLimit.setDescription('The rate limit. The amout of traffic, in bytes, in excess of the committed access rate which will be instantaneously permitted by the rate limit.')
ccarConfigExtLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 7), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarConfigExtLimit.setStatus('current')
if mibBuilder.loadTexts: ccarConfigExtLimit.setDescription('The extended burst limit. The amount of traffic, in bytes, in excess of the burst limit which may be conditionnally permitted by the rate limit. The probability that the traffic is not permitted increases as the received burst increases. P(not permitted) = (BurstRate - ConfLimit) / (ConfLimitExt - ConfLimit).')
ccarConfigConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 8), RateLimitAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarConfigConformAction.setStatus('current')
if mibBuilder.loadTexts: ccarConfigConformAction.setDescription('Action to be taken when the traffic is within the Rate Limit.')
ccarConfigExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 9), RateLimitAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarConfigExceedAction.setStatus('current')
if mibBuilder.loadTexts: ccarConfigExceedAction.setDescription('Action to be taken when the traffic exceeds the Rate Limit.')
ccarStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1), )
if mibBuilder.loadTexts: ccarStatTable.setStatus('current')
if mibBuilder.loadTexts: ccarStatTable.setDescription('A table of rate limit status entries.')
ccarStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1), )
ccarConfigEntry.registerAugmentions(("CISCO-CAR-MIB", "ccarStatEntry"))
ccarStatEntry.setIndexNames(*ccarConfigEntry.getIndexNames())
if mibBuilder.loadTexts: ccarStatEntry.setStatus('current')
if mibBuilder.loadTexts: ccarStatEntry.setDescription('A collection of rate-limit status objects on this interface. Entries are created and deleted via the rate-limit command line interface.')
ccarStatSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: ccarStatSwitchedPkts.setDescription('The counter of packets permitted by this rate limit.')
ccarStatSwitchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 2), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatSwitchedBytes.setStatus('current')
if mibBuilder.loadTexts: ccarStatSwitchedBytes.setDescription('The counter of bytes permitted by this interface.')
ccarStatFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatFilteredPkts.setStatus('current')
if mibBuilder.loadTexts: ccarStatFilteredPkts.setDescription('The counter of packets which exceeded this rate limit.')
ccarStatFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatFilteredBytes.setStatus('current')
if mibBuilder.loadTexts: ccarStatFilteredBytes.setDescription('The counter of bytes which exceeded this rate limit.')
ccarStatCurBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 5), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatCurBurst.setStatus('current')
if mibBuilder.loadTexts: ccarStatCurBurst.setDescription('The current received burst size.')
ccarStatSwitchedPktsOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatSwitchedPktsOverflow.setStatus('current')
if mibBuilder.loadTexts: ccarStatSwitchedPktsOverflow.setDescription('The high-word of the counter of packets permitted by this rate limit. NOTE: The object ccarStatSwitchedPkts contains the lower 32 bits of the switched packet counts. If the number of switched packets is larger than what can be stored in a 32 bit value, then the high word value is stored in this object. As such SNMP Manager applications should combine this object along with the ccarStatSwitchedPkts object to come up with the 64-bit value. SNMP v2c or v3 Manager can use the ccarStatHCSwitchedPkts object directly (which is a 64-bit object).')
ccarStatSwitchedBytesOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatSwitchedBytesOverflow.setStatus('current')
if mibBuilder.loadTexts: ccarStatSwitchedBytesOverflow.setDescription('The high-word of the counter of bytes permitted by this interface. NOTE: The object ccarStatSwitchedBytes contains the lower 32 bits of the switched byte counts. If the number of switched bytes is larger than what can be stored in a 32 bit value, then the high word value is stored in this object. As such SNMP Manager applications should combine this object along with the ccarStatSwitchedBytes object to come up with the 64-bit value. SNMP v2c or v3 Manager can use the ccarStatHCSwitchedBytes object directly (which is a 64-bit object).')
ccarStatFilteredPktsOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatFilteredPktsOverflow.setStatus('current')
if mibBuilder.loadTexts: ccarStatFilteredPktsOverflow.setDescription('The high-word of the counter of packets which exceeded this rate limit. NOTE: The object ccarStatFilteredPkts contains the lower 32 bits of the filtered packet counts. If the number of filtered packets is larger than what can be stored in a 32 bit value, then the high word value is stored in this object. As such SNMP Manager applications should combine this object along with the ccarStatFilteredPkts object to come up with the 64-bit value. SNMP v2c or v3 Manager can use the ccarStatHCFilteredPkts object directly (which is a 64-bit object).')
ccarStatFilteredBytesOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 9), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatFilteredBytesOverflow.setStatus('current')
if mibBuilder.loadTexts: ccarStatFilteredBytesOverflow.setDescription('The high-word of the counter of bytes which exceeded this rate limit. NOTE: The object ccarStatFilteredBytes contains the lower 32 bits of the filtered byte counts. If the number of filtered bytes is larger than what can be stored in a 32 bit value, then the high word value is stored in this object. As such SNMP Manager applications should combine this object along with the ccarStatFilteredBytes object to come up with the 64-bit value. SNMP v2c or v3 Manager can use the ccarStatHCFilteredBytes object directly (which is a 64-bit object).')
ccarStatHCSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 10), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatHCSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: ccarStatHCSwitchedPkts.setDescription('The counter of packets permitted by this rate limit. NOTE: This is a 64 bit (High Capacity) version of the ccarStatSwitchedPkts counter for use with SNMP v2c or v3 Managers')
ccarStatHCSwitchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 11), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatHCSwitchedBytes.setStatus('current')
if mibBuilder.loadTexts: ccarStatHCSwitchedBytes.setDescription('The counter of bytes permitted by this interface. NOTE: This is a 64 bit (High Capacity) version of the ccarStatSwitchedBytes counter for use with SNMP v2c or v3 Managers')
ccarStatHCFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatHCFilteredPkts.setStatus('current')
if mibBuilder.loadTexts: ccarStatHCFilteredPkts.setDescription('The counter of packets which exceeded this rate limit. NOTE: This is a 64 bit (High Capacity) version of the ccarStatFilteredPkts counter for use with SNMP v2c or v3 Managers')
ccarStatHCFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 13), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccarStatHCFilteredBytes.setStatus('current')
if mibBuilder.loadTexts: ccarStatHCFilteredBytes.setDescription('The counter of bytes which exceeded this rate limit. NOTE: This is a 64 bit (High Capacity) version of the ccarStatFilteredBytes counter for use with SNMP v2c or v3 Managers')
ciscoCarMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 113, 3))
ciscoCarMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 113, 3, 1))
ciscoCarMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 113, 3, 2))
ciscoCarMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 113, 3, 1, 1)).setObjects(("CISCO-CAR-MIB", "ciscoCarMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCarMIBCompliance = ciscoCarMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoCarMIBCompliance.setDescription('The compliance statement for entities which implement the CAR on a Cisco router.')
ciscoCarMIBComplianceHCCounters = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 113, 3, 1, 2)).setObjects(("CISCO-CAR-MIB", "ciscoCarMIBGroup"), ("CISCO-CAR-MIB", "ciscoCarMIBHCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCarMIBComplianceHCCounters = ciscoCarMIBComplianceHCCounters.setStatus('current')
if mibBuilder.loadTexts: ciscoCarMIBComplianceHCCounters.setDescription('The compliance statement for entities that implement 64-bit counters for Switched/Filtered Packet/Bytes objects for CAR on a Cisco router.')
ciscoCarMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 113, 3, 2, 1)).setObjects(("CISCO-CAR-MIB", "ccarConfigType"), ("CISCO-CAR-MIB", "ccarConfigAccIdx"), ("CISCO-CAR-MIB", "ccarConfigRate"), ("CISCO-CAR-MIB", "ccarConfigLimit"), ("CISCO-CAR-MIB", "ccarConfigExtLimit"), ("CISCO-CAR-MIB", "ccarConfigConformAction"), ("CISCO-CAR-MIB", "ccarConfigExceedAction"), ("CISCO-CAR-MIB", "ccarStatSwitchedPkts"), ("CISCO-CAR-MIB", "ccarStatSwitchedBytes"), ("CISCO-CAR-MIB", "ccarStatFilteredPkts"), ("CISCO-CAR-MIB", "ccarStatFilteredBytes"), ("CISCO-CAR-MIB", "ccarStatCurBurst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCarMIBGroup = ciscoCarMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCarMIBGroup.setDescription('A collection of objects providing CAR monitoring.')
ciscoCarMIBHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 113, 3, 2, 2)).setObjects(("CISCO-CAR-MIB", "ccarStatSwitchedPktsOverflow"), ("CISCO-CAR-MIB", "ccarStatSwitchedBytesOverflow"), ("CISCO-CAR-MIB", "ccarStatFilteredPktsOverflow"), ("CISCO-CAR-MIB", "ccarStatFilteredBytesOverflow"), ("CISCO-CAR-MIB", "ccarStatHCSwitchedPkts"), ("CISCO-CAR-MIB", "ccarStatHCSwitchedBytes"), ("CISCO-CAR-MIB", "ccarStatHCFilteredPkts"), ("CISCO-CAR-MIB", "ccarStatHCFilteredBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCarMIBHCGroup = ciscoCarMIBHCGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCarMIBHCGroup.setDescription('A collection of high capacity counters (64-bit) provided for CAR monitoring.')
mibBuilder.exportSymbols("CISCO-CAR-MIB", ccarStatHCFilteredBytes=ccarStatHCFilteredBytes, ccarConfigRate=ccarConfigRate, RateLimitType=RateLimitType, ccarConfigLimit=ccarConfigLimit, ccarConfigExceedAction=ccarConfigExceedAction, ccarStatCurBurst=ccarStatCurBurst, ciscoCarMIBCompliance=ciscoCarMIBCompliance, ccarConfigs=ccarConfigs, PacketSource=PacketSource, ccarStatSwitchedPktsOverflow=ccarStatSwitchedPktsOverflow, ciscoCarMIB=ciscoCarMIB, ccarStatSwitchedBytesOverflow=ccarStatSwitchedBytesOverflow, ccarConfigEntry=ccarConfigEntry, RateLimitAction=RateLimitAction, ccarStatFilteredBytesOverflow=ccarStatFilteredBytesOverflow, ccarStatSwitchedBytes=ccarStatSwitchedBytes, ccarConfigTable=ccarConfigTable, ciscoCarMIBCompliances=ciscoCarMIBCompliances, ccarConfigRowIndex=ccarConfigRowIndex, ccarStatFilteredPktsOverflow=ccarStatFilteredPktsOverflow, ciscoCarMIBGroup=ciscoCarMIBGroup, ciscoCarMIBConformance=ciscoCarMIBConformance, ccarStats=ccarStats, ciscoCarMIBComplianceHCCounters=ciscoCarMIBComplianceHCCounters, ccarStatHCFilteredPkts=ccarStatHCFilteredPkts, ccarConfigExtLimit=ccarConfigExtLimit, ciscoCarMIBGroups=ciscoCarMIBGroups, ccarStatTable=ccarStatTable, PYSNMP_MODULE_ID=ciscoCarMIB, ccarStatFilteredPkts=ccarStatFilteredPkts, ccarConfigType=ccarConfigType, ccarStatSwitchedPkts=ccarStatSwitchedPkts, ccarConfigAccIdx=ccarConfigAccIdx, ccarConfigConformAction=ccarConfigConformAction, ciscoCarMIBObjects=ciscoCarMIBObjects, ciscoCarMIBHCGroup=ciscoCarMIBHCGroup, ccarStatEntry=ccarStatEntry, ccarStatHCSwitchedBytes=ccarStatHCSwitchedBytes, ccarConfigDirection=ccarConfigDirection, ccarStatFilteredBytes=ccarStatFilteredBytes, ccarStatHCSwitchedPkts=ccarStatHCSwitchedPkts)
