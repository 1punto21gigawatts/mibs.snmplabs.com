#
# PySNMP MIB module CIENA-CES-RADIUS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-RADIUS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
cienaCesStatistics, = mibBuilder.importSymbols("CIENA-SMI", "cienaCesStatistics")
CienaGlobalState, = mibBuilder.importSymbols("CIENA-TC", "CienaGlobalState")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, TimeTicks, iso, Bits, Integer32, NotificationType, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "TimeTicks", "iso", "Bits", "Integer32", "NotificationType", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Gauge32")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
cienaCesRadiusClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3))
cienaCesRadiusClientMIB.setRevisions(('2016-02-17 00:00', '2015-07-22 00:00', '2015-06-22 00:00', '2014-06-12 00:00', '2014-01-02 00:00', '2012-04-17 00:00', '2010-05-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaCesRadiusClientMIB.setRevisionsDescriptions(('Updated DESCRIPTION of cienaCesRadiusUserLoginStatus, cienaCesRadiusUserLoginAcctStatus, cienaCesRadiusDot1xAuthStatus, and cienaCesRadiusDot1xAcctStatus.', 'Changed the RADIUS authentication string range to accept a zero length string.', 'Added cienaCesRadiusUserLoginAuthSecret, cienaCesRadiusUserLoginAcctAuthSecret, cienaCesRadiusDot1xAuthAuthSecret, cienaCesRadiusDot1xAcctAuthSecret', 'Added cienaCesRadiusUserLoginAcct', 'Added independent Inet addressing and Unsigned32 imports. Deprecated cienaCesRadiusClientTimeout, cienaCesRadiusClientRetries, cienaCesRadiusClientAuthKey, cienaCesRadiusClientAuthKeyUnset, cienaCesRadiusClientSearchType, and cienaCesRadiusClientServerTable. Added cienaCesRadiusUserLoginTable, cienaCesRadiusDot1XAuthTable, cienaCesRadiusDot1XAcctTable', 'Corrected the maximum RADIUS authentication string length from 127 to 64 characters.', 'Initial creation.',))
if mibBuilder.loadTexts: cienaCesRadiusClientMIB.setLastUpdated('201602170000Z')
if mibBuilder.loadTexts: cienaCesRadiusClientMIB.setOrganization('Ciena Corp.')
if mibBuilder.loadTexts: cienaCesRadiusClientMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: cienaCesRadiusClientMIB.setDescription('This module defines the objects used by the RADIUS client.')
class RadiusString(TextualConvention, OctetString):
    description = 'Used to represent the RADIUS authentication string.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 64), )
cienaCesRadiusClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1))
cienaCesRadiusClient = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1))
cienaCesRadiusClientGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 1))
cienaCesRadiusClientServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2))
cienaCesRadiusUserLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3))
cienaCesRadiusUserLoginGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 1))
cienaCesRadiusDot1xAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4))
cienaCesRadiusDot1xAuthGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 1))
cienaCesRadiusDot1xAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5))
cienaCesRadiusDot1xAcctGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 1))
cienaCesRadiusUserLoginAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6))
cienaCesRadiusUserLoginAcctGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 1))
cienaCesRadiusClientMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 2))
cienaCesRadiusClientMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 2, 0))
cienaCesRadiusClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 3))
cienaCesRadiusClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 3, 1))
cienaCesRadiusClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 3, 2))
cienaCesRadiusAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 1, 1), CienaGlobalState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusAdminState.setDescription('Setting this object administratively enables or disables the RADIUS client.')
cienaCesRadiusOperState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 1, 2), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusOperState.setDescription('This object returns the operational state of the RADIUS client.')
cienaCesRadiusClientTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusClientTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientTimeout.setDescription('This is the time in seconds between re-transmissions to the RADIUS server.')
cienaCesRadiusClientRetries = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusClientRetries.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientRetries.setDescription('Indicates the number of times the RADIUS server should be tried before giving up on the server.')
cienaCesRadiusClientAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 1, 5), RadiusString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusClientAuthKey.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientAuthKey.setDescription('The authenticaion key to be used for RADIUS servers. Retrieving the value of this object via SNMP returns an empty string for security reasons.')
cienaCesRadiusClientAuthKeyUnset = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusClientAuthKeyUnset.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientAuthKeyUnset.setDescription('Setting this object to true clears the value of cienaCesRadiusClientAuthKey. Reading this object always returns a value of false.')
cienaCesRadiusClientSearchType = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cached", 1), ("priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusClientSearchType.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientSearchType.setDescription('This object sets the search type of the RADIUS client.')
cienaCesRadiusClientServerTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cienaCesRadiusClientServerTable.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerTable.setDescription('Lists the possible RADIUS servers. While creating an entry, cienaCesRadiusRadiusClientServerStatus and cienaCesRadiusClientServerAddr must be specified. The SNMP multiple set operation must be used to create an entry.')
cienaCesRadiusClientServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1), ).setIndexNames((0, "CIENA-CES-RADIUS-CLIENT-MIB", "cienaCesRadiusClientServerIndex"))
if mibBuilder.loadTexts: cienaCesRadiusClientServerEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerEntry.setDescription('RADIUS server entry.')
cienaCesRadiusClientServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cienaCesRadiusClientServerIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerIndex.setDescription('Specifies the index of this table.')
cienaCesRadiusClientServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusClientServerAddr.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerAddr.setDescription('Host name or IP address of the RADIUS server.')
cienaCesRadiusClientServerResolvedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerResolvedAddr.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerResolvedAddr.setDescription('Specifies the resolved IP address if cienaCesRadiusClientServerAddr is set to host name. If cienaCesRadiusClientServerAddr is set to IP address, then cienaCesRadiusClientServerResolvedAddr contains the same information as cienaCesRadiusClientServerAddr.')
cienaCesRadiusClientServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusClientServerPriority.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerPriority.setDescription('Specifies the priority of RADIUS servers configured on the device.')
cienaCesRadiusClientServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusClientServerAuthPort.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerAuthPort.setDescription('The destination UDP port number to which RADIUS messages should be sent. The RADIUS server is not used for authentication if this port number is 0.')
cienaCesRadiusClientServerRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerRoundTripTime.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerRoundTripTime.setDescription('The time interval (in hundredths of a second) between the most recent Access-Reply/Access-Challenge and the Access-Request that matched it from this RADIUS authentication server.')
cienaCesRadiusClientServerAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessRequests.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessRequests.setDescription('The number of RADIUS Access-Request packets sent to this server. This does not include retransmissions.')
cienaCesRadiusClientServerAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessRetransmissions.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessRetransmissions.setDescription('The number of RADIUS Access-Request packets retransmitted to this RADIUS authentication server.')
cienaCesRadiusClientServerAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessAccepts.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessAccepts.setDescription('The number of RADIUS Access-Accept packets (valid or invalid) received from this server.')
cienaCesRadiusClientServerAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessRejects.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessRejects.setDescription('The number of RADIUS Access-Reject packets (valid or invalid) received from this server.')
cienaCesRadiusClientServerAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessChallenges.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets (valid or invalid) received from this server.')
cienaCesRadiusClientServerMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerMalformedAccessResponses.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerMalformedAccessResponses.setDescription('The number of malformed RADIUS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or signature attributes or unknown types are not included as malformed access responses.')
cienaCesRadiusClientServerBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerBadAuthenticators.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerBadAuthenticators.setDescription('The number of RADIUS Access-Response packets containing invalid authenticators or signature attributes received from this server.')
cienaCesRadiusClientServerPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerPendingRequests.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerPendingRequests.setDescription('The number of RADIUS Access-Request packets destined for this server that have not yet timed out or received a response. This variable is incremented when an Access-Request is sent and decremented due to receipt of an Access-Accept, Access-Reject, Access-Challenge, a timeout, or retransmission.')
cienaCesRadiusClientServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerTimeouts.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry sending to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a request as well as a timeout.')
cienaCesRadiusClientServerUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerUnknownTypes.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the authentication port.')
cienaCesRadiusClientServerPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusClientServerPacketsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerPacketsDropped.setDescription('The number of RADIUS packets which were received from this server on the authentication port and dropped for some other reason.')
cienaCesRadiusClientServerApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userLogin", 1), ("all", 2))).clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusClientServerApplication.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerApplication.setDescription('This object specifies how the RADIUS server should be used for authentication.')
cienaCesRadiusClientServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 2, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusClientServerStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesRadiusClientServerStatus.setDescription("To create a row in this table, a manager must set this object to createAndGo(4). To create an entry, cienaCesRadiusClientServerStatus and cienaCesRadiusClientServerAddr must be specified. The SNMP multiple set operation must be used to create the entry. To disable a RADIUS server, set the cienaCesRadiusClientServerStatus object to 'notInService' state.")
cienaCesRadiusUserLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginTimeout.setDescription('This is the time in seconds between re-transmissions to the RADIUS server.')
cienaCesRadiusUserLoginRetries = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginRetries.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginRetries.setDescription('Indicates the number of times the RADIUS server should be tried before giving up on the server.')
cienaCesRadiusUserLoginAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 1, 3), RadiusString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAuthKey.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAuthKey.setDescription('The authenticaion key to be used for RADIUS servers. Retrieving the value of this object via SNMP returns an empty string for security reasons.')
cienaCesRadiusUserLoginSearchType = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cached", 1), ("priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginSearchType.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginSearchType.setDescription('This object sets the search type of the RADIUS client.')
cienaCesRadiusUserLoginAuthSecret = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 259))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAuthSecret.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAuthSecret.setDescription('Used to set the pre-encrypted secret for user-login auth. When read, this object returns the encrypted secret.')
cienaCesRadiusUserLoginTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2), )
if mibBuilder.loadTexts: cienaCesRadiusUserLoginTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginTable.setDescription('Lists the possible RADIUS user login servers. While creating an entry, cienaCesRadiusUserLoginStatus and cienaCesRadiusUserLoginAddr must be specified. The SNMP multiple set operation must be used to create an entry.')
cienaCesRadiusUserLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1), ).setIndexNames((0, "CIENA-CES-RADIUS-CLIENT-MIB", "cienaCesRadiusUserLoginIndex"))
if mibBuilder.loadTexts: cienaCesRadiusUserLoginEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginEntry.setDescription('RADIUS user login entry.')
cienaCesRadiusUserLoginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cienaCesRadiusUserLoginIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginIndex.setDescription('Specifies the index of this table.')
cienaCesRadiusUserLoginResolvedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginResolvedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginResolvedInetAddrType.setDescription('Specifies the resolved IP address type. This OID is used in conjunction with cienaCesRadiusUserLoginInetAddrress. When set to : ipv4 : cienaCesRadiusUserLoginResolvedInetAddress should be compliant with InetAddressIPv4 ipv6 : cienaCesRadiusUserLoginResolvedInetAddress should be compliant with InetAddressIPv6 ')
cienaCesRadiusUserLoginResolvedInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginResolvedInetAddress.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginResolvedInetAddress.setDescription('Specifies the resolved IP address if cienaCesRadiusUserLoginAddr is set to host name. If cienaCesRadiusUserLoginAddr is set to ip address then cienaCesRadiusUserLoginResolvedInetAddress will contain same information as cienaCesRadiusUserLoginAddr. This OID should be used in conjuction with cienaCesRadiusUserLoginResolvedInetAddrType.')
cienaCesRadiusUserLoginAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAddr.setDescription('Host name or IP address of the RADIUS server.')
cienaCesRadiusUserLoginPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginPriority.setDescription('Specifies the priority of RADIUS servers configured on the device.')
cienaCesRadiusUserLoginAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAuthPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAuthPort.setDescription('The destination UDP port number to which RADIUS messages should be sent. The RADIUS server is not used for authentication if this port number is 0.')
cienaCesRadiusUserLoginClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginClearStatistics.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginClearStatistics.setDescription('This object clears the statistics for a server.')
cienaCesRadiusUserLoginRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginRoundTripTime.setDescription('The time interval (in hundredths of a second) between the most recent Access-Reply/Access-Challenge and the Access-Request that matched it from this RADIUS authentication server.')
cienaCesRadiusUserLoginRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginRequests.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginRequests.setDescription('The number of RADIUS Access-Request packets sent to this server. This does not include retransmissions.')
cienaCesRadiusUserLoginRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginRetransmissions.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginRetransmissions.setDescription('The number of RADIUS Access-Request packets retransmitted to this RADIUS authentication server.')
cienaCesRadiusUserLoginAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAccessAccepts.setDescription('The number of RADIUS Access-Accept packets (valid or invalid) received from this server.')
cienaCesRadiusUserLoginAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAccessRejects.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAccessRejects.setDescription('The number of RADIUS Access-Reject packets (valid or invalid) received from this server.')
cienaCesRadiusUserLoginAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets (valid or invalid) received from this server.')
cienaCesRadiusUserLoginAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets (valid or invalid) received from this server.')
cienaCesRadiusUserLoginMalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginMalformedResponses.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginMalformedResponses.setDescription('The number of malformed RADIUS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or signature attributes or unknown types are not included as malformed access responses.')
cienaCesRadiusUserLoginBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginBadAuthenticators.setDescription('The number of RADIUS Access-Response packets containing invalid authenticators or signature attributes received from this server.')
cienaCesRadiusUserLoginTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginTimeouts.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry sending to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a request as well as a timeout.')
cienaCesRadiusUserLoginUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the authentication port.')
cienaCesRadiusUserLoginPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginPacketsDropped.setDescription('The number of RADIUS packets which were received from this server on the authentication port and dropped for some other reason.')
cienaCesRadiusUserLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 3, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginStatus.setDescription('To create a row in this table, a manager must specify cienaCesRadiusUserLoginAddr and set this object to createAndGo(4). The RADIUS server will initially be administratively disabled. To administratively enable the RADIUS server, set this object to active(1). To administratively disable the RADIUS server set this object to notInService(2).')
cienaCesRadiusUserLoginAcctAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAdminState.setDescription('Setting this object administratively enables/disables the RADIUS user login accounting client on the device.')
cienaCesRadiusUserLoginAcctTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctTimeout.setDescription('This is the time in seconds between re-transmissions to the RADIUS server.')
cienaCesRadiusUserLoginAcctRetries = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctRetries.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctRetries.setDescription('Indicates the number of times the RADIUS server should be tried before giving up on the server.')
cienaCesRadiusUserLoginAcctAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 1, 4), RadiusString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAuthKey.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAuthKey.setDescription('The authenticaion key to be used for RADIUS servers. Retrieving the value of this object via SNMP returns an empty string for security reasons.')
cienaCesRadiusUserLoginAcctSearchType = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cached", 1), ("priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctSearchType.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctSearchType.setDescription('This object sets the search type of the RADIUS client.')
cienaCesRadiusUserLoginAcctAuthSecret = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 259))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAuthSecret.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAuthSecret.setDescription('Used to set the pre-encrypted secret for user-login accounting auth. When read, this object returns the encrypted secret.')
cienaCesRadiusUserLoginAcctTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2), )
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctTable.setDescription('Lists the possible RADIUS user login servers. While creating an entry, cienaCesRadiusUserLoginAcctStatus and cienaCesRadiusUserLoginAcctAddr must be specified. The SNMP multiple set operation must be used to create an entry.')
cienaCesRadiusUserLoginAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1), ).setIndexNames((0, "CIENA-CES-RADIUS-CLIENT-MIB", "cienaCesRadiusUserLoginAcctIndex"))
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctEntry.setDescription('RADIUS user login entry.')
cienaCesRadiusUserLoginAcctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctIndex.setDescription('Specifies the index of this table.')
cienaCesRadiusUserLoginAcctResolvedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctResolvedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctResolvedInetAddrType.setDescription('Specifies the resolved IP address type. This OID is used in conjunction with cienaCesRadiusUserLoginAcctInetAddrress. When set to : ipv4 : cienaCesRadiusUserLoginAcctResolvedInetAddress should be compliant with InetAddressIPv4 ipv6 : cienaCesRadiusUserLoginAcctResolvedInetAddress should be compliant with InetAddressIPv6 ')
cienaCesRadiusUserLoginAcctResolvedInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctResolvedInetAddress.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctResolvedInetAddress.setDescription('Specifies the resolved IP address if cienaCesRadiusUserLoginAcctAddr is set to host name. If cienaCesRadiusUserLoginAcctAddr is set to ip address then cienaCesRadiusUserLoginAcctResolvedInetAddress will contain same information as cienaCesRadiusUserLoginAcctAddr. This OID should be used in conjuction with cienaCesRadiusUserLoginAcctResolvedInetAddrType.')
cienaCesRadiusUserLoginAcctAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAddr.setDescription('Host name or IP address of the RADIUS server.')
cienaCesRadiusUserLoginAcctPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctPriority.setDescription('Specifies the priority of RADIUS servers configured on the device.')
cienaCesRadiusUserLoginAcctAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAuthPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAuthPort.setDescription('The destination UDP port number to which RADIUS messages should be sent. The RADIUS server is not used for authentication if this port number is 0.')
cienaCesRadiusUserLoginAcctClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctClearStatistics.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctClearStatistics.setDescription('This object clears the statistics for a server.')
cienaCesRadiusUserLoginAcctRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctRoundTripTime.setDescription('The time interval (in hundredths of a second) between the most recent Access-Reply/Access-Challenge and the Access-Request that matched it from this RADIUS authentication server.')
cienaCesRadiusUserLoginAcctRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctRequests.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctRequests.setDescription('The number of RADIUS Access-Request packets sent to this server. This does not include retransmissions.')
cienaCesRadiusUserLoginAcctRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctRetransmissions.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctRetransmissions.setDescription('The number of RADIUS Access-Request packets retransmitted to this RADIUS authentication server.')
cienaCesRadiusUserLoginAcctAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAccessAccepts.setDescription('The number of RADIUS Access-Accept packets (valid or invalid) received from this server.')
cienaCesRadiusUserLoginAcctAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAccessRejects.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAccessRejects.setDescription('The number of RADIUS Access-Reject packets (valid or invalid) received from this server.')
cienaCesRadiusUserLoginAcctAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets (valid or invalid) received from this server.')
cienaCesRadiusUserLoginAcctAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets (valid or invalid) received from this server.')
cienaCesRadiusUserLoginAcctMalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctMalformedResponses.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctMalformedResponses.setDescription('The number of malformed RADIUS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or signature attributes or unknown types are not included as malformed access responses.')
cienaCesRadiusUserLoginAcctBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctBadAuthenticators.setDescription('The number of RADIUS Access-Response packets containing invalid authenticators or signature attributes received from this server.')
cienaCesRadiusUserLoginAcctTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctTimeouts.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry sending to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a request as well as a timeout.')
cienaCesRadiusUserLoginAcctUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the authentication port.')
cienaCesRadiusUserLoginAcctPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctPacketsDropped.setDescription('The number of RADIUS packets which were received from this server on the authentication port and dropped for some other reason.')
cienaCesRadiusUserLoginAcctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 6, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusUserLoginAcctStatus.setDescription('To create a row in this table, a manager must specify cienaCesRadiusUserLoginAcctAddr and set this object to createAndGo(4). The RADIUS server will initially be administratively disabled. To administratively enable the RADIUS server, set this object to active(1). To administratively disable the RADIUS server set this object to notInService(2).')
cienaCesRadiusDot1xAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthTimeout.setDescription('This is the time in seconds between re-transmissions to the RADIUS server.')
cienaCesRadiusDot1xAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthRetries.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthRetries.setDescription('Indicates the number of times the RADIUS server should be tried before giving up on the server.')
cienaCesRadiusDot1xAuthAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 1, 3), RadiusString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAuthKey.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAuthKey.setDescription('The authenticaion key to be used for RADIUS servers. Retrieving the value of this object via SNMP returns an empty string for security reasons.')
cienaCesRadiusDot1xAuthSearchType = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priority", 1), ("loadBalance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthSearchType.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthSearchType.setDescription('This object sets the search type of the RADIUS client.')
cienaCesRadiusDot1xAuthGreylistTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 14400)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthGreylistTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthGreylistTimeout.setDescription('The max greylist timeout for a RADIUS Dot1x Auth server between 1 minute and 4 hours.')
cienaCesRadiusDot1xAuthAuthSecret = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 259))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAuthSecret.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAuthSecret.setDescription('Used to set the pre-encrypted secret for dot1x auth. When read, this object returns the encrypted secret.')
cienaCesRadiusDot1xAuthTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2), )
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthTable.setDescription('Lists the possible RADIUS Dot1x auth servers. While creating an entry, cienaCesRadiusDot1xAuthStatus and cienaCesRadiusDot1xAuthAddr must be specified. The SNMP multiple set operation must be used to create an entry.')
cienaCesRadiusDot1xAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1), ).setIndexNames((0, "CIENA-CES-RADIUS-CLIENT-MIB", "cienaCesRadiusDot1xAuthIndex"))
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthEntry.setDescription('RADIUS user login entry.')
cienaCesRadiusDot1xAuthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthIndex.setDescription('Specifies the index of this table.')
cienaCesRadiusDot1xAuthResolvedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthResolvedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthResolvedInetAddrType.setDescription('Specifies the resolved IP address type. This OID is used in conjunction with cienaCesRadiusDot1xAuthInetAddrress. When set to : ipv4 : cienaCesRadiusDot1xAuthResolvedInetAddress should be compliant with InetAddressIPv4 ipv6 : cienaCesRadiusDot1xAuthResolvedInetAddress should be compliant with InetAddressIPv6 ')
cienaCesRadiusDot1xAuthResolvedInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthResolvedInetAddress.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthResolvedInetAddress.setDescription('Specifies the resolved IP address if cienaCesRadiusDot1xAuthAddr is set to host name. If cienaCesRadiusDot1xAuthAddr is set to ip address then cienaCesRadiusDot1xAuthResolvedInetAddress will contain same information as cienaCesRadiusDot1xAuthAddr. This OID should be used in conjuction with cienaCesRadiusDot1xAuthResolvedInetAddrType.')
cienaCesRadiusDot1xAuthAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAddr.setDescription('Host name or IP address of the RADIUS server.')
cienaCesRadiusDot1xAuthPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthPriority.setDescription('Specifies the priority of RADIUS servers configured on the device.')
cienaCesRadiusDot1xAuthAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAuthPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAuthPort.setDescription('The destination UDP port number to which RADIUS messages should be sent. The RADIUS server is not used for authentication if this port number is 0.')
cienaCesRadiusDot1xAuthClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthClearStatistics.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthClearStatistics.setDescription('This object clears the statistics for a server.')
cienaCesRadiusDot1xAuthGreylistTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthGreylistTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthGreylistTimeRemaining.setDescription("Reflects the remaining time before the server removed from the greylist. A value of '0' (zero) indicates the current server is not greylisted")
cienaCesRadiusDot1xAuthRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthRoundTripTime.setDescription('The time interval (in hundredths of a second) between the most recent Access-Reply/Access-Challenge and the Access-Request that matched it from this RADIUS authentication server.')
cienaCesRadiusDot1xAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthRequests.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthRequests.setDescription('The number of RADIUS Access-Request packets sent to this server. This does not include retransmissions.')
cienaCesRadiusDot1xAuthRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthRetransmissions.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthRetransmissions.setDescription('The number of RADIUS Access-Request packets retransmitted to this RADIUS authentication server.')
cienaCesRadiusDot1xAuthAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAccessAccepts.setDescription('The number of RADIUS Access-Accept packets (valid or invalid) received from this server.')
cienaCesRadiusDot1xAuthAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAccessRejects.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAccessRejects.setDescription('The number of RADIUS Access-Reject packets (valid or invalid) received from this server.')
cienaCesRadiusDot1xAuthAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets (valid or invalid) received from this server.')
cienaCesRadiusDot1xAuthAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets (valid or invalid) received from this server.')
cienaCesRadiusDot1xAuthMalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthMalformedResponses.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthMalformedResponses.setDescription('The number of malformed RADIUS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or signature attributes or unknown types are not included as malformed access responses.')
cienaCesRadiusDot1xAuthBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthBadAuthenticators.setDescription('The number of RADIUS Access-Response packets containing invalid authenticators or signature attributes received from this server.')
cienaCesRadiusDot1xAuthTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthTimeouts.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry sending to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a request as well as a timeout.')
cienaCesRadiusDot1xAuthUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the authentication port.')
cienaCesRadiusDot1xAuthPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthPacketsDropped.setDescription('The number of RADIUS packets which were received from this server on the authentication port and dropped for some other reason.')
cienaCesRadiusDot1xAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 4, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAuthStatus.setDescription('To create a row in this table, a manager must specify cienaCesRadiusDot1xAuthAddr and set this object to createAndGo(4). The RADIUS server will initially be administratively disabled. To administratively enable the RADIUS server, set this object to active(1). To administratively disable the RADIUS server set this object to notInService(2).')
cienaCesRadiusDot1xAcctAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAdminState.setDescription('Setting this object administratively enables/disables the RADIUS Dot1x accounting client on the device.')
cienaCesRadiusDot1xAcctTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctTimeout.setDescription('This is the time in seconds between re-transmissions to the RADIUS server.')
cienaCesRadiusDot1xAcctRetries = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctRetries.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctRetries.setDescription('Indicates the number of times the RADIUS server should be tried before giving up on the server.')
cienaCesRadiusDot1xAcctAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 1, 4), RadiusString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAuthKey.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAuthKey.setDescription('The authenticaion key to be used for RADIUS servers. Retrieving the value of this object via SNMP returns an empty string for security reasons.')
cienaCesRadiusDot1xAcctSearchType = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priority", 1), ("loadBalance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctSearchType.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctSearchType.setDescription('This object sets the search type of the RADIUS client.')
cienaCesRadiusDot1xAcctGreylistTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 14400)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctGreylistTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctGreylistTimeout.setDescription('The max greylist timeout for a RADIUS Dot1x Acct server between 1 minute and 4 hours.')
cienaCesRadiusDot1xAcctAuthSecret = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 259))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAuthSecret.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAuthSecret.setDescription('Used to set the pre-encrypted secret for dot1x auth acct. When read, this object returns the encrypted secret.')
cienaCesRadiusDot1xAcctTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2), )
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctTable.setDescription('Lists the possible RADIUS Dot1x Acct servers. While creating an entry, cienaCesRadiusDot1xAcctStatus and cienaCesRadiusDot1xAcctAddr must be specified. The SNMP multiple set operation must be used to create an entry.')
cienaCesRadiusDot1xAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1), ).setIndexNames((0, "CIENA-CES-RADIUS-CLIENT-MIB", "cienaCesRadiusDot1xAcctIndex"))
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctEntry.setDescription('RADIUS user login entry.')
cienaCesRadiusDot1xAcctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctIndex.setDescription('Specifies the index of this table.')
cienaCesRadiusDot1xAcctResolvedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctResolvedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctResolvedInetAddrType.setDescription('Specifies the resolved IP address type. This OID is used in conjunction with cienaCesRadiusDot1xAcctInetAddrress. When set to : ipv4 : cienaCesRadiusDot1xAcctResolvedInetAddress should be compliant with InetAddressIPv4 ipv6 : cienaCesRadiusDot1xAcctResolvedInetAddress should be compliant with InetAddressIPv6 ')
cienaCesRadiusDot1xAcctResolvedInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctResolvedInetAddress.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctResolvedInetAddress.setDescription('Specifies the resolved IP address if cienaCesRadiusDot1xAcctAddr is set to host name. If cienaCesRadiusDot1xAcctAddr is set to ip address then cienaCesRadiusDot1xAcctResolvedInetAddress will contain same information as cienaCesRadiusDot1xAcctAddr. This OID should be used in conjuction with cienaCesRadiusDot1xAcctResolvedInetAddrType.')
cienaCesRadiusDot1xAcctAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAddr.setDescription('Host name or IP address of the RADIUS server.')
cienaCesRadiusDot1xAcctPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctPriority.setDescription('Specifies the priority of RADIUS servers configured on the device.')
cienaCesRadiusDot1xAcctAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAuthPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAuthPort.setDescription('The destination UDP port number to which RADIUS messages should be sent. The RADIUS server is not used for authentication if this port number is 0.')
cienaCesRadiusDot1xAcctClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctClearStatistics.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctClearStatistics.setDescription('This object clears the statistics for a server.')
cienaCesRadiusDot1xAcctGreylistTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctGreylistTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctGreylistTimeRemaining.setDescription("Reflects the remaining time before the server removed from the greylist. A value of '0' (zero) indicates the current server is not greylisted")
cienaCesRadiusDot1xAcctRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctRoundTripTime.setDescription('The time interval (in hundredths of a second) between the most recent Access-Reply/Access-Challenge and the Access-Request that matched it from this RADIUS authentication server.')
cienaCesRadiusDot1xAcctRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctRequests.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctRequests.setDescription('The number of RADIUS Access-Request packets sent to this server. This does not include retransmissions.')
cienaCesRadiusDot1xAcctRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctRetransmissions.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctRetransmissions.setDescription('The number of RADIUS Access-Request packets retransmitted to this RADIUS authentication server.')
cienaCesRadiusDot1xAcctAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAccessAccepts.setDescription('The number of RADIUS Access-Accept packets (valid or invalid) received from this server.')
cienaCesRadiusDot1xAcctAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAccessRejects.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAccessRejects.setDescription('The number of RADIUS Access-Reject packets (valid or invalid) received from this server.')
cienaCesRadiusDot1xAcctAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets (valid or invalid) received from this server.')
cienaCesRadiusDot1xAcctAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctAccountingResponses.setDescription('The number of RADIUS Accounting-Response packets (valid or invalid) received from this server.')
cienaCesRadiusDot1xAcctMalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctMalformedResponses.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctMalformedResponses.setDescription('The number of malformed RADIUS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or signature attributes or unknown types are not included as malformed access responses.')
cienaCesRadiusDot1xAcctBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctBadAuthenticators.setDescription('The number of RADIUS Access-Response packets containing invalid authenticators or signature attributes received from this server.')
cienaCesRadiusDot1xAcctTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctTimeouts.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry sending to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a request as well as a timeout.')
cienaCesRadiusDot1xAcctUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the authentication port.')
cienaCesRadiusDot1xAcctPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctPacketsDropped.setDescription('The number of RADIUS packets which were received from this server on the authentication port and dropped for some other reason.')
cienaCesRadiusDot1xAcctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 3, 1, 1, 5, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesRadiusDot1xAcctStatus.setDescription('To create a row in this table, a manager must specify cienaCesRadiusDot1xAcctAddr and set this object to createAndGo(4). The RADIUS server will initially be administratively disabled. To administratively enable the RADIUS server, set this object to active(1). To administratively disable the RADIUS server set this object to notInService(2).')
mibBuilder.exportSymbols("CIENA-CES-RADIUS-CLIENT-MIB", cienaCesRadiusClientServerAddr=cienaCesRadiusClientServerAddr, cienaCesRadiusUserLoginAcctUnknownTypes=cienaCesRadiusUserLoginAcctUnknownTypes, cienaCesRadiusDot1xAuthAuthSecret=cienaCesRadiusDot1xAuthAuthSecret, cienaCesRadiusDot1xAuthTable=cienaCesRadiusDot1xAuthTable, cienaCesRadiusDot1xAuthClearStatistics=cienaCesRadiusDot1xAuthClearStatistics, cienaCesRadiusDot1xAuthEntry=cienaCesRadiusDot1xAuthEntry, cienaCesRadiusClientMIBCompliances=cienaCesRadiusClientMIBCompliances, cienaCesRadiusUserLoginAcctGlobal=cienaCesRadiusUserLoginAcctGlobal, cienaCesRadiusDot1xAuthAccountingResponses=cienaCesRadiusDot1xAuthAccountingResponses, cienaCesRadiusClientServerRoundTripTime=cienaCesRadiusClientServerRoundTripTime, cienaCesRadiusUserLoginAcctRetries=cienaCesRadiusUserLoginAcctRetries, cienaCesRadiusDot1xAcctRetries=cienaCesRadiusDot1xAcctRetries, cienaCesRadiusClientServerAccessRetransmissions=cienaCesRadiusClientServerAccessRetransmissions, cienaCesRadiusUserLoginAccessAccepts=cienaCesRadiusUserLoginAccessAccepts, cienaCesRadiusUserLoginRoundTripTime=cienaCesRadiusUserLoginRoundTripTime, cienaCesRadiusUserLoginAccountingResponses=cienaCesRadiusUserLoginAccountingResponses, cienaCesRadiusDot1xAcctTimeout=cienaCesRadiusDot1xAcctTimeout, cienaCesRadiusClientServerAccessRequests=cienaCesRadiusClientServerAccessRequests, cienaCesRadiusUserLoginIndex=cienaCesRadiusUserLoginIndex, cienaCesRadiusUserLoginPacketsDropped=cienaCesRadiusUserLoginPacketsDropped, cienaCesRadiusUserLoginAcctIndex=cienaCesRadiusUserLoginAcctIndex, cienaCesRadiusUserLoginAcctBadAuthenticators=cienaCesRadiusUserLoginAcctBadAuthenticators, cienaCesRadiusUserLoginEntry=cienaCesRadiusUserLoginEntry, cienaCesRadiusClientServerMalformedAccessResponses=cienaCesRadiusClientServerMalformedAccessResponses, cienaCesRadiusUserLoginUnknownTypes=cienaCesRadiusUserLoginUnknownTypes, cienaCesRadiusClientGlobal=cienaCesRadiusClientGlobal, cienaCesRadiusUserLoginAuthSecret=cienaCesRadiusUserLoginAuthSecret, cienaCesRadiusUserLoginAcctTimeouts=cienaCesRadiusUserLoginAcctTimeouts, cienaCesRadiusUserLoginAcctPacketsDropped=cienaCesRadiusUserLoginAcctPacketsDropped, cienaCesRadiusUserLoginAcctAccessAccepts=cienaCesRadiusUserLoginAcctAccessAccepts, cienaCesRadiusUserLoginTimeouts=cienaCesRadiusUserLoginTimeouts, cienaCesRadiusUserLoginAcctSearchType=cienaCesRadiusUserLoginAcctSearchType, cienaCesRadiusDot1xAcctEntry=cienaCesRadiusDot1xAcctEntry, cienaCesRadiusClientMIBNotifications=cienaCesRadiusClientMIBNotifications, cienaCesRadiusDot1xAuthGreylistTimeout=cienaCesRadiusDot1xAuthGreylistTimeout, cienaCesRadiusClientServerPacketsDropped=cienaCesRadiusClientServerPacketsDropped, cienaCesRadiusUserLoginAddr=cienaCesRadiusUserLoginAddr, cienaCesRadiusDot1xAcctAuthKey=cienaCesRadiusDot1xAcctAuthKey, cienaCesRadiusUserLoginAcctClearStatistics=cienaCesRadiusUserLoginAcctClearStatistics, cienaCesRadiusDot1xAuthPriority=cienaCesRadiusDot1xAuthPriority, cienaCesRadiusClientServerPriority=cienaCesRadiusClientServerPriority, cienaCesRadiusUserLoginAcctStatus=cienaCesRadiusUserLoginAcctStatus, RadiusString=RadiusString, cienaCesRadiusClientMIBNotificationPrefix=cienaCesRadiusClientMIBNotificationPrefix, cienaCesRadiusDot1xAuthSearchType=cienaCesRadiusDot1xAuthSearchType, cienaCesRadiusDot1xAuthAccessAccepts=cienaCesRadiusDot1xAuthAccessAccepts, cienaCesRadiusUserLoginTimeout=cienaCesRadiusUserLoginTimeout, cienaCesRadiusClientRetries=cienaCesRadiusClientRetries, cienaCesRadiusClientServerUnknownTypes=cienaCesRadiusClientServerUnknownTypes, cienaCesRadiusUserLoginAcctAuthPort=cienaCesRadiusUserLoginAcctAuthPort, cienaCesRadiusUserLoginAcctTable=cienaCesRadiusUserLoginAcctTable, cienaCesRadiusDot1xAuthIndex=cienaCesRadiusDot1xAuthIndex, cienaCesRadiusDot1xAcctAdminState=cienaCesRadiusDot1xAcctAdminState, cienaCesRadiusDot1xAcctRequests=cienaCesRadiusDot1xAcctRequests, cienaCesRadiusClientServerPendingRequests=cienaCesRadiusClientServerPendingRequests, cienaCesRadiusClientServerAccessChallenges=cienaCesRadiusClientServerAccessChallenges, cienaCesRadiusUserLoginAcctAddr=cienaCesRadiusUserLoginAcctAddr, cienaCesRadiusClientServerResolvedAddr=cienaCesRadiusClientServerResolvedAddr, cienaCesRadiusUserLoginAcctRequests=cienaCesRadiusUserLoginAcctRequests, cienaCesRadiusUserLoginAcctAuthKey=cienaCesRadiusUserLoginAcctAuthKey, cienaCesRadiusClientServerBadAuthenticators=cienaCesRadiusClientServerBadAuthenticators, cienaCesRadiusUserLoginAcctEntry=cienaCesRadiusUserLoginAcctEntry, cienaCesRadiusUserLoginResolvedInetAddrType=cienaCesRadiusUserLoginResolvedInetAddrType, cienaCesRadiusDot1xAcctUnknownTypes=cienaCesRadiusDot1xAcctUnknownTypes, cienaCesRadiusDot1xAcct=cienaCesRadiusDot1xAcct, cienaCesRadiusUserLoginSearchType=cienaCesRadiusUserLoginSearchType, cienaCesRadiusUserLoginAcctAdminState=cienaCesRadiusUserLoginAcctAdminState, cienaCesRadiusUserLoginAcctAuthSecret=cienaCesRadiusUserLoginAcctAuthSecret, cienaCesRadiusClient=cienaCesRadiusClient, cienaCesRadiusDot1xAcctGreylistTimeRemaining=cienaCesRadiusDot1xAcctGreylistTimeRemaining, cienaCesRadiusDot1xAuthResolvedInetAddress=cienaCesRadiusDot1xAuthResolvedInetAddress, cienaCesRadiusClientSearchType=cienaCesRadiusClientSearchType, cienaCesRadiusDot1xAuthBadAuthenticators=cienaCesRadiusDot1xAuthBadAuthenticators, cienaCesRadiusDot1xAuthAddr=cienaCesRadiusDot1xAuthAddr, cienaCesRadiusClientAuthKey=cienaCesRadiusClientAuthKey, cienaCesRadiusUserLoginAcctAccessChallenges=cienaCesRadiusUserLoginAcctAccessChallenges, cienaCesRadiusClientServerAccessRejects=cienaCesRadiusClientServerAccessRejects, cienaCesRadiusDot1xAcctSearchType=cienaCesRadiusDot1xAcctSearchType, cienaCesRadiusDot1xAuthTimeouts=cienaCesRadiusDot1xAuthTimeouts, cienaCesRadiusClientServerApplication=cienaCesRadiusClientServerApplication, cienaCesRadiusUserLoginRetransmissions=cienaCesRadiusUserLoginRetransmissions, cienaCesRadiusUserLoginAcctResolvedInetAddrType=cienaCesRadiusUserLoginAcctResolvedInetAddrType, cienaCesRadiusDot1xAcctBadAuthenticators=cienaCesRadiusDot1xAcctBadAuthenticators, cienaCesRadiusDot1xAcctRetransmissions=cienaCesRadiusDot1xAcctRetransmissions, cienaCesRadiusUserLoginAcctRetransmissions=cienaCesRadiusUserLoginAcctRetransmissions, cienaCesRadiusDot1xAcctAccessAccepts=cienaCesRadiusDot1xAcctAccessAccepts, cienaCesRadiusClientServer=cienaCesRadiusClientServer, cienaCesRadiusClientServerTimeouts=cienaCesRadiusClientServerTimeouts, cienaCesRadiusDot1xAcctStatus=cienaCesRadiusDot1xAcctStatus, cienaCesRadiusUserLoginRetries=cienaCesRadiusUserLoginRetries, PYSNMP_MODULE_ID=cienaCesRadiusClientMIB, cienaCesRadiusUserLoginAuthKey=cienaCesRadiusUserLoginAuthKey, cienaCesRadiusDot1xAcctPriority=cienaCesRadiusDot1xAcctPriority, cienaCesRadiusDot1xAuthTimeout=cienaCesRadiusDot1xAuthTimeout, cienaCesRadiusDot1xAuthGlobal=cienaCesRadiusDot1xAuthGlobal, cienaCesRadiusClientServerIndex=cienaCesRadiusClientServerIndex, cienaCesRadiusUserLoginAccessChallenges=cienaCesRadiusUserLoginAccessChallenges, cienaCesRadiusUserLoginAcctRoundTripTime=cienaCesRadiusUserLoginAcctRoundTripTime, cienaCesRadiusUserLoginClearStatistics=cienaCesRadiusUserLoginClearStatistics, cienaCesRadiusUserLoginMalformedResponses=cienaCesRadiusUserLoginMalformedResponses, cienaCesRadiusUserLoginAcctPriority=cienaCesRadiusUserLoginAcctPriority, cienaCesRadiusDot1xAcctRoundTripTime=cienaCesRadiusDot1xAcctRoundTripTime, cienaCesRadiusDot1xAuthAccessChallenges=cienaCesRadiusDot1xAuthAccessChallenges, cienaCesRadiusUserLoginResolvedInetAddress=cienaCesRadiusUserLoginResolvedInetAddress, cienaCesRadiusDot1xAuthAccessRejects=cienaCesRadiusDot1xAuthAccessRejects, cienaCesRadiusClientServerAuthPort=cienaCesRadiusClientServerAuthPort, cienaCesRadiusClientServerEntry=cienaCesRadiusClientServerEntry, cienaCesRadiusUserLoginAcct=cienaCesRadiusUserLoginAcct, cienaCesRadiusDot1xAuthRequests=cienaCesRadiusDot1xAuthRequests, cienaCesRadiusDot1xAcctAccountingResponses=cienaCesRadiusDot1xAcctAccountingResponses, cienaCesRadiusClientMIBObjects=cienaCesRadiusClientMIBObjects, cienaCesRadiusClientServerTable=cienaCesRadiusClientServerTable, cienaCesRadiusDot1xAuthUnknownTypes=cienaCesRadiusDot1xAuthUnknownTypes, cienaCesRadiusDot1xAcctTimeouts=cienaCesRadiusDot1xAcctTimeouts, cienaCesRadiusDot1xAuth=cienaCesRadiusDot1xAuth, cienaCesRadiusClientMIBGroups=cienaCesRadiusClientMIBGroups, cienaCesRadiusDot1xAcctIndex=cienaCesRadiusDot1xAcctIndex, cienaCesRadiusClientAuthKeyUnset=cienaCesRadiusClientAuthKeyUnset, cienaCesRadiusDot1xAuthRetransmissions=cienaCesRadiusDot1xAuthRetransmissions, cienaCesRadiusDot1xAuthResolvedInetAddrType=cienaCesRadiusDot1xAuthResolvedInetAddrType, cienaCesRadiusAdminState=cienaCesRadiusAdminState, cienaCesRadiusUserLoginAccessRejects=cienaCesRadiusUserLoginAccessRejects, cienaCesRadiusDot1xAuthRetries=cienaCesRadiusDot1xAuthRetries, cienaCesRadiusDot1xAcctAccessChallenges=cienaCesRadiusDot1xAcctAccessChallenges, cienaCesRadiusDot1xAcctAddr=cienaCesRadiusDot1xAcctAddr, cienaCesRadiusUserLoginAuthPort=cienaCesRadiusUserLoginAuthPort, cienaCesRadiusDot1xAuthMalformedResponses=cienaCesRadiusDot1xAuthMalformedResponses, cienaCesRadiusDot1xAuthStatus=cienaCesRadiusDot1xAuthStatus, cienaCesRadiusUserLoginRequests=cienaCesRadiusUserLoginRequests, cienaCesRadiusUserLoginStatus=cienaCesRadiusUserLoginStatus, cienaCesRadiusUserLoginAcctResolvedInetAddress=cienaCesRadiusUserLoginAcctResolvedInetAddress, cienaCesRadiusDot1xAuthPacketsDropped=cienaCesRadiusDot1xAuthPacketsDropped, cienaCesRadiusDot1xAcctClearStatistics=cienaCesRadiusDot1xAcctClearStatistics, cienaCesRadiusDot1xAcctResolvedInetAddress=cienaCesRadiusDot1xAcctResolvedInetAddress, cienaCesRadiusDot1xAcctAccessRejects=cienaCesRadiusDot1xAcctAccessRejects, cienaCesRadiusClientMIB=cienaCesRadiusClientMIB, cienaCesRadiusUserLoginPriority=cienaCesRadiusUserLoginPriority, cienaCesRadiusClientMIBConformance=cienaCesRadiusClientMIBConformance, cienaCesRadiusOperState=cienaCesRadiusOperState, cienaCesRadiusDot1xAuthGreylistTimeRemaining=cienaCesRadiusDot1xAuthGreylistTimeRemaining, cienaCesRadiusClientServerStatus=cienaCesRadiusClientServerStatus, cienaCesRadiusDot1xAcctPacketsDropped=cienaCesRadiusDot1xAcctPacketsDropped, cienaCesRadiusUserLoginAcctTimeout=cienaCesRadiusUserLoginAcctTimeout, cienaCesRadiusDot1xAuthAuthPort=cienaCesRadiusDot1xAuthAuthPort, cienaCesRadiusDot1xAcctGlobal=cienaCesRadiusDot1xAcctGlobal, cienaCesRadiusUserLoginAcctAccountingResponses=cienaCesRadiusUserLoginAcctAccountingResponses, cienaCesRadiusUserLoginTable=cienaCesRadiusUserLoginTable, cienaCesRadiusDot1xAcctAuthPort=cienaCesRadiusDot1xAcctAuthPort, cienaCesRadiusUserLoginBadAuthenticators=cienaCesRadiusUserLoginBadAuthenticators, cienaCesRadiusUserLoginAcctAccessRejects=cienaCesRadiusUserLoginAcctAccessRejects, cienaCesRadiusDot1xAcctAuthSecret=cienaCesRadiusDot1xAcctAuthSecret, cienaCesRadiusDot1xAcctMalformedResponses=cienaCesRadiusDot1xAcctMalformedResponses, cienaCesRadiusDot1xAcctResolvedInetAddrType=cienaCesRadiusDot1xAcctResolvedInetAddrType, cienaCesRadiusClientServerAccessAccepts=cienaCesRadiusClientServerAccessAccepts, cienaCesRadiusDot1xAuthAuthKey=cienaCesRadiusDot1xAuthAuthKey, cienaCesRadiusDot1xAcctGreylistTimeout=cienaCesRadiusDot1xAcctGreylistTimeout, cienaCesRadiusUserLoginAcctMalformedResponses=cienaCesRadiusUserLoginAcctMalformedResponses, cienaCesRadiusDot1xAuthRoundTripTime=cienaCesRadiusDot1xAuthRoundTripTime, cienaCesRadiusClientTimeout=cienaCesRadiusClientTimeout, cienaCesRadiusUserLogin=cienaCesRadiusUserLogin, cienaCesRadiusUserLoginGlobal=cienaCesRadiusUserLoginGlobal, cienaCesRadiusDot1xAcctTable=cienaCesRadiusDot1xAcctTable)
