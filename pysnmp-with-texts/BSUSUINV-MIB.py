#
# PySNMP MIB module BSUSUINV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSUSUINV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aniBsuSuGroup, = mibBuilder.importSymbols("ANIROOT-MIB", "aniBsuSuGroup")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
aniBsuWirelessPort, = mibBuilder.importSymbols("BSUWIRELESSIF-MIB", "aniBsuWirelessPort")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter64, Counter32, Unsigned32, Integer32, Bits, NotificationType, Gauge32, ObjectIdentity, MibIdentifier, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Counter32", "Unsigned32", "Integer32", "Bits", "NotificationType", "Gauge32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
aniBsuSuInventory = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 3, 7, 1))
if mibBuilder.loadTexts: aniBsuSuInventory.setLastUpdated('0105091130Z')
if mibBuilder.loadTexts: aniBsuSuInventory.setOrganization('Aperto Networks')
if mibBuilder.loadTexts: aniBsuSuInventory.setContactInfo(' Postal: Aperto Networks Inc 1637 S Main Street Milpitas, California 95035 Tel: +1 408 719 9977 ')
if mibBuilder.loadTexts: aniBsuSuInventory.setDescription('This group allows viewing of SU Inventory information maintained by the BSU. It provides information about all the SUs connected to the particular BSU. ')
aniBsuSuInvTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 7, 1, 1), )
if mibBuilder.loadTexts: aniBsuSuInvTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuInvTable.setDescription('A set of objects in the BSU, maintained for each SU connected to this BSU. ')
aniBsuSuInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 7, 1, 1, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"), (0, "BSUSUINV-MIB", "aniBsuSuMacAddr"))
if mibBuilder.loadTexts: aniBsuSuInvEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuInvEntry.setDescription('Inventory information for a single SU. An entry in this table exists for each SU that is connected to the BSU. ')
aniBsuSuMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuMacAddr.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuMacAddr.setDescription('MAC address of this SU. ')
aniBsuSuIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuIpAddr.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuIpAddr.setDescription('IP address of this SU. ')
aniBsuSuName = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuName.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuName.setDescription('The administrative name for the SU. ')
aniBsuSuCustomerName = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuCustomerName.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuCustomerName.setDescription('The administrative name of the customer who uses this SU. ')
aniBsuSuLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 255))).clone(namedValues=NamedValues(("initial", 1), ("ulm-req-rcvd", 2), ("ulm-rsp-sent", 3), ("dhcp-req-rcvd", 4), ("dhcp-rsp-sent", 5), ("tod-req-rcvd", 6), ("tod-rsp-sent", 7), ("config-file-req-rcvd", 8), ("config-file-req-sent", 9), ("reg-req-rcvd", 10), ("lic-rsp-recd", 11), ("reg-rsp-sent", 12), ("reg-ack-rcvd", 13), ("operational", 14), ("stand-by", 15), ("delete", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuSuLinkStatus.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuLinkStatus.setDescription('The link status of this SU. When set to delete(255), the SU gets deleted from the inventory. Note that any SU that is currently operational cannot be removed from the inventory. ')
aniBsuSuModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuModelNumber.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuModelNumber.setDescription('The model number of the SU. If the model number is not available, a blank string will be displayed. ')
mibBuilder.exportSymbols("BSUSUINV-MIB", aniBsuSuInventory=aniBsuSuInventory, aniBsuSuName=aniBsuSuName, aniBsuSuCustomerName=aniBsuSuCustomerName, aniBsuSuModelNumber=aniBsuSuModelNumber, PYSNMP_MODULE_ID=aniBsuSuInventory, aniBsuSuIpAddr=aniBsuSuIpAddr, aniBsuSuInvTable=aniBsuSuInvTable, aniBsuSuLinkStatus=aniBsuSuLinkStatus, aniBsuSuMacAddr=aniBsuSuMacAddr, aniBsuSuInvEntry=aniBsuSuInvEntry)
