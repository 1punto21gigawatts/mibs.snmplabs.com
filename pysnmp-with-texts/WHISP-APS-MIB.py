#
# PySNMP MIB module WHISP-APS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WHISP-APS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Counter64, ObjectIdentity, Integer32, Gauge32, Bits, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, IpAddress, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "ObjectIdentity", "Integer32", "Gauge32", "Bits", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "IpAddress", "MibIdentifier", "TimeTicks")
DisplayString, MacAddress, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "PhysAddress", "TextualConvention")
whispBoxEsn, whispBoxRFPhysicalRadioEntry = mibBuilder.importSymbols("WHISP-BOX-MIBV2-MIB", "whispBoxEsn", "whispBoxRFPhysicalRadioEntry")
whispBox, whispModules, whispAps = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispBox", "whispModules", "whispAps")
WhispLUID, EventString, WhispMACAddress = mibBuilder.importSymbols("WHISP-TCV2-MIB", "WhispLUID", "EventString", "WhispMACAddress")
whispApsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 1, 1, 12))
if mibBuilder.loadTexts: whispApsMibModule.setLastUpdated('200304150000Z')
if mibBuilder.loadTexts: whispApsMibModule.setOrganization('Cambium Networks')
if mibBuilder.loadTexts: whispApsMibModule.setContactInfo('Canopy Technical Support email: technical-support@canopywireless.com')
if mibBuilder.loadTexts: whispApsMibModule.setDescription('This module contains MIB definitions for APs.')
whispApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1))
whispApsLink = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2))
whispApsLinkTestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1))
whispApsLinkTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2))
whispApsGPS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3))
whispApsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5))
whispApsRegEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1))
whispGPSEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2))
whispApsDfsEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3))
whispApRegulatoryEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4))
whispApRFOverloadEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 5))
whispApsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6))
whispApsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7))
whispApsDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9))
whispApsControls = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 11))
whispApsRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10))
gpsInput = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("generateSyncSignal", 0), ("syncToReceivedSignalTimingPort", 1), ("syncToReceivedSignalPowerPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsInput.setStatus('obsolete')
if mibBuilder.loadTexts: gpsInput.setDescription('The variable is deprecated. See gpsInput in whispBoxConfig.')
rfFreqCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("wired", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreqCarrier.setStatus('deprecated')
if mibBuilder.loadTexts: rfFreqCarrier.setDescription('The variable is deprecated. Please see radioFreqCarrier.')
apLinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLinkSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: apLinkSpeed.setDescription('The variable is deprecated.')
dwnLnkData = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkData.setStatus('deprecated')
if mibBuilder.loadTexts: dwnLnkData.setDescription('This attribute is deprecated. Please see radioDownlinkPercent.')
highPriorityUpLnkPct = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: highPriorityUpLnkPct.setStatus('obsolete')
if mibBuilder.loadTexts: highPriorityUpLnkPct.setDescription('Percentage of uplink slots for high priority data.')
numUAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numUAckSlots.setStatus('obsolete')
if mibBuilder.loadTexts: numUAckSlots.setDescription('Total number of upstream ack slots.')
uAcksReservHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uAcksReservHigh.setStatus('obsolete')
if mibBuilder.loadTexts: uAcksReservHigh.setDescription('Total number of upstream high priority ack slots')
numDAckSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numDAckSlots.setStatus('obsolete')
if mibBuilder.loadTexts: numDAckSlots.setDescription('Total number of downstream ack slots.')
dAcksReservHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dAcksReservHigh.setStatus('obsolete')
if mibBuilder.loadTexts: dAcksReservHigh.setDescription('Total number of high priority downstream ack slots.')
numCtlSlots = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCtlSlots.setStatus('obsolete')
if mibBuilder.loadTexts: numCtlSlots.setDescription('This OID is deprecated, please use numCtlSlotsHW.')
numCtlSlotsReserveHigh = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCtlSlotsReserveHigh.setStatus('obsolete')
if mibBuilder.loadTexts: numCtlSlotsReserveHigh.setDescription('Total number of High priority upstream control (contention) slots.')
upLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 12), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkDataRate.setStatus('current')
if mibBuilder.loadTexts: upLnkDataRate.setDescription('Sustained uplink bandwidth cap.')
upLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 13), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkLimit.setStatus('current')
if mibBuilder.loadTexts: upLnkLimit.setDescription('Burst uplink bandwidth cap.')
dwnLnkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 14), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkDataRate.setStatus('current')
if mibBuilder.loadTexts: dwnLnkDataRate.setDescription('Sustained downlink bandwidth cap.')
dwnLnkLimit = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 15), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkLimit.setStatus('current')
if mibBuilder.loadTexts: dwnLnkLimit.setDescription('Burst downlink bandwidth cap.')
sectorID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sectorID.setStatus('current')
if mibBuilder.loadTexts: sectorID.setDescription('Advertise sector number for an AP. Not supported for PMP450.')
maxRange = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 17), Integer32()).setUnits('miles').setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxRange.setStatus('deprecated')
if mibBuilder.loadTexts: maxRange.setDescription('This attribute is deprecated. Please see radioMaxRange.')
airLinkSecurity = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("standard", 0), ("desEnhanced", 1), ("desEnhancedAndAuthentication", 2), ("authenticationIfAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airLinkSecurity.setStatus('obsolete')
if mibBuilder.loadTexts: airLinkSecurity.setDescription('Air Link Security. desEnhancedAndAuthentication(2) and authenticationIfAvailable(3) are only for APAS.')
berMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("berStream", 0), ("noBerStream", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berMode.setStatus('obsolete')
if mibBuilder.loadTexts: berMode.setDescription('AP backgroup BER mode.')
asIP1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP1.setStatus('obsolete')
if mibBuilder.loadTexts: asIP1.setDescription('Obsoleted. Configure with whispApsDNS.authServer1.')
asIP2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP2.setStatus('obsolete')
if mibBuilder.loadTexts: asIP2.setDescription('Obsoleted. Configure with whispApsDNS.authServer2.')
asIP3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP3.setStatus('obsolete')
if mibBuilder.loadTexts: asIP3.setDescription('Obsoleted. Configure with whispApsDNS.authServer3.')
lanIpAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIpAp.setStatus('current')
if mibBuilder.loadTexts: lanIpAp.setDescription('LAN IP.')
lanMaskAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanMaskAp.setStatus('current')
if mibBuilder.loadTexts: lanMaskAp.setDescription('LAN subnet mask.')
defaultGwAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGwAp.setStatus('current')
if mibBuilder.loadTexts: defaultGwAp.setDescription('Default gateway')
privateIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateIp.setStatus('current')
if mibBuilder.loadTexts: privateIp.setDescription('Private IP.')
gpsTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("gpsTrapDisabled", 0), ("gpsTrapEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsTrap.setStatus('current')
if mibBuilder.loadTexts: gpsTrap.setDescription('Variable to enable/disable GPS sync/out-sync traps.')
regTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("regTrapDisabled", 0), ("regTrapEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: regTrap.setStatus('current')
if mibBuilder.loadTexts: regTrap.setDescription('Variable to enable/disable registration complete/lost traps.')
txSpreading = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("txSpreadingDisabled", 0), ("txSpreadingEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txSpreading.setStatus('current')
if mibBuilder.loadTexts: txSpreading.setDescription('Variable to enable/disable Transmit Frame Spreading. This option is for FSK only.')
apBeaconInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enableApBeaconInfo", 0), ("disableApBeaconInfo", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBeaconInfo.setStatus('current')
if mibBuilder.loadTexts: apBeaconInfo.setDescription('Variable to enable/disable displaying AP beacon info through AP eval.')
authMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("authenticationDisabled", 0), ("authenticationRequiredBam", 1), ("authenticationRequiredAP", 3), ("authenticationRequiredAAA", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authMode.setStatus('current')
if mibBuilder.loadTexts: authMode.setDescription('Variable to enable/disable authentication. The authentication optional mode is for APs only. This variable can only be set when authentication feature is enabled. Setting it to 1 will use a BAM server for authentication of SMs. Setting it to 2 will make use of the Authentication Key on the AP for authenticating SMs. The keys must match on SM and AP in order for the SM to be authenticated in this mode.')
authKeyAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authKeyAp.setStatus('current')
if mibBuilder.loadTexts: authKeyAp.setDescription('Authentication key. It should be 32 character long. Can be used on MultiPoint AP if AP Authentication mode is selected. Otherwise, it is used on Backhauls.')
encryptionMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("encryptionDisabled", 0), ("encryptionEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptionMode.setStatus('current')
if mibBuilder.loadTexts: encryptionMode.setDescription('Variable to enable/disable encryption.')
ntpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerIp.setStatus('obsolete')
if mibBuilder.loadTexts: ntpServerIp.setDescription('Obsoleted. Configure with whispApsDNS.ntpServer1, whispApsDNS.ntpServer2, and whispApsDNS.ntpServer3.')
broadcastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastRetryCount.setStatus('current')
if mibBuilder.loadTexts: broadcastRetryCount.setDescription('Broadcast Repeat Count : Range 0 -- 2. For APs.')
encryptDwBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptDwBroadcast.setStatus('current')
if mibBuilder.loadTexts: encryptDwBroadcast.setDescription('To enable or disable Encrypted Downlink Broadcast. For FSK APs.')
updateAppAddress = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 37), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateAppAddress.setStatus('current')
if mibBuilder.loadTexts: updateAppAddress.setDescription('Update Application Address.')
dfsConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsConfig.setStatus('obsolete')
if mibBuilder.loadTexts: dfsConfig.setDescription('To configure proper regions for Dynamic Frequency Shifting. For 5.2/5.4/5.7 GHz radios.')
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanEnable.setStatus('current')
if mibBuilder.loadTexts: vlanEnable.setDescription('To enable or disable VLAN.')
configSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bam", 0), ("sm", 1), ("bamsm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSource.setStatus('current')
if mibBuilder.loadTexts: configSource.setDescription('To configure CIR, MIR and VLAN through SM or BAM.')
apRateAdapt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("onex", 0), ("onextwox", 1), ("onextwoxthreex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRateAdapt.setStatus('obsolete')
if mibBuilder.loadTexts: apRateAdapt.setDescription('To enable or disable double rate.')
numCtlSlotsHW = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCtlSlotsHW.setStatus('deprecated')
if mibBuilder.loadTexts: numCtlSlotsHW.setDescription('This attribute is deprecated. Please see radioControlSlots.')
displayAPEval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayAPEval.setStatus('current')
if mibBuilder.loadTexts: displayAPEval.setDescription('If enable, it allows display of AP Eval Data at the SM.')
smIsolation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("smIsolationDisable", 0), ("smIsolationDrop", 1), ("smIsolationFwd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smIsolation.setStatus('current')
if mibBuilder.loadTexts: smIsolation.setDescription('(0) -- Disable SM Isolation. (1) -- Enable SM Isolation by blocking SM destined packets. (2) -- Enable SM Isolation by forwarding SM packets upstream.')
ipAccessFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAccessFilterEnable.setStatus('current')
if mibBuilder.loadTexts: ipAccessFilterEnable.setDescription('To enable or disable IP access filtering to Management functions. (0) - IP access will be allowed from all addresses. (1) - IP access will be controlled using allowedIPAccess1-3 entries.')
allowedIPAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 46), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess1.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccess1.setDescription('Allow access to AP Management from this IP. 0 is default setting to allow from all IPs.')
allowedIPAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 47), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess2.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccess2.setDescription('Allow access to AP Management from this IP. 0 is default setting to allow from all IPs.')
allowedIPAccess3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 48), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccess3.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccess3.setDescription('Allow access to AP Management from this IP. 0 is default setting to allow from all IPs.')
tslBridging = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tslBridging.setStatus('current')
if mibBuilder.loadTexts: tslBridging.setDescription('1 = We are performing Translation Bridging 0 = We are not.')
untranslatedArp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: untranslatedArp.setStatus('current')
if mibBuilder.loadTexts: untranslatedArp.setDescription('1 = We are sending untranslated ARP response. 0 = We are not.')
limitFreqBand900 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitFreqBand900.setStatus('current')
if mibBuilder.loadTexts: limitFreqBand900.setDescription('1 = We are limiting the freq band of 900 radios. 0 = We are not.')
txPwrLevel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPwrLevel.setStatus('obsolete')
if mibBuilder.loadTexts: txPwrLevel.setDescription("Deprecated, use 'transmitterOP' instead.")
rfFreqCaralt1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreqCaralt1.setStatus('current')
if mibBuilder.loadTexts: rfFreqCaralt1.setDescription('First DFS Alternate RF Frequency. (Only available for DFS radios) Used as a backup frequency when Radar is detected on DFS enabled Radios. The frequencies are: 5.4 radios:(5475,5485,5490 OFDM only),5495,5500,5505,5510,5515,5520,5525, 5530,5535,5540,5545,5550,5555,5560,5565,5570,5575,5580,5585,5590,5595, 5600,5605,5610,5615,5620,5625,5630,5635,5640,5645,5650,5655,5660,5665, 5670,5675,5680,5685,5690,5695,5700,5705,(5710,5715 OFDM Only). (5.7 Platform 10 (SAL) radios with non-connectorized antennas do not support DFS) 5.7 radios:5745,5750,5755,5760,5765,5770,5775,5780,5785,5790,5795,5800,5805. 5.7 radios with ISM enabled :5735,5740,5745,5750,5755,5760,5765,5770,5775, 5780,5785,5790,5795,5800,5805,5810,5815,5820,5825,5830,5835,5840. 0: None.')
rfFreqCaralt2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreqCaralt2.setStatus('current')
if mibBuilder.loadTexts: rfFreqCaralt2.setDescription('Second DFS Alternate RF Frequency. (Only available for DFS radios) Used as a backup frequency when Radar is detected on DFS enabled Radios. The frequencies are: 5.4 radios:(5475,5485,5490 OFDM only),5495,5500,5505,5510,5515,5520,5525, 5530,5535,5540,5545,5550,5555,5560,5565,5570,5575,5580,5585,5590,5595, 5600,5605,5610,5615,5620,5625,5630,5635,5640,5645,5650,5655,5660,5665, 5670,5675,5680,5685,5690,5695,5700,5705,(5710,5715 OFDM Only). (5.7 Platform 10 (SAL) radios with non-connectorized antennas do not support DFS) 5.7 radios:5745,5750,5755,5760,5765,5770,5775,5780,5785,5790,5795,5800,5805. 5.7 radios with ISM enabled :5735,5740,5745,5750,5755,5760,5765,5770,5775, 5780,5785,5790,5795,5800,5805,5810,5815,5820,5825,5830,5835,5840. 0: None.')
scheduleWhitening = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleWhitening.setStatus('current')
if mibBuilder.loadTexts: scheduleWhitening.setDescription('1 = Schedule Whitening allowed. 0 = Schedule Whitening not allowed. This option is for FSK only')
remoteSpectrumAnalysisDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteSpectrumAnalysisDuration.setStatus('current')
if mibBuilder.loadTexts: remoteSpectrumAnalysisDuration.setDescription('Value in seconds for a remote spectrum analysis on an SM. Range is 10-1000 seconds.')
remoteSpectrumAnalyzerLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteSpectrumAnalyzerLUID.setStatus('current')
if mibBuilder.loadTexts: remoteSpectrumAnalyzerLUID.setDescription('Get will return always return 0. Set will start Remote Spectrum Analyzer on specified LUID. *Warning* This will cause the SM to disconnect from the AP! You will lose the session for the specified duration! If general error was returned then the LUID does not have an active session, or the SM does not support Remote Spectrum Analysis.')
bhReReg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bhReReg.setStatus('current')
if mibBuilder.loadTexts: bhReReg.setDescription('Allows BHS re-registration every 24 hours. Enable allows re-registration and Disable does not. 24 Hour Encryption Refresh.')
dlnkBcastCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlnkBcastCIR.setStatus('current')
if mibBuilder.loadTexts: dlnkBcastCIR.setDescription('Downlink Broadcast CIR (kbps)')
verifyGPSChecksum = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("doNotVerifyGPSMessageChecksum", 0), ("verifyGPSMessageChecksum", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verifyGPSChecksum.setStatus('current')
if mibBuilder.loadTexts: verifyGPSChecksum.setDescription('Enable/Disable verification of GPS message checksums.')
apVlanOverride = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanOverride.setStatus('current')
if mibBuilder.loadTexts: apVlanOverride.setDescription("Setting this option will cause an AP to retain its VLAN settings when turning it into an SM. It will be mostly helpful for running spectrum analysis on the AP. Since doing that requires the AP to be turned into an SM, enabling this option will allow you to keep the AP's VLAN configuration in place while the AP is running as an SM.")
dhcpRelayAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("fullRelay", 1), ("option82Only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayAgentEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayAgentEnable.setDescription("Enable or Disable MultiPoint AP acting as DHCP Relay Agent for all SMs and Clients underneath it. (0) - Relay Agent disabled - SM/CPE devices will perform DHCP normally (1) - Relay Agent enabled - AP will intercept DHCP DISCOVER message from SM and CPE, insert Option 82 containing SM's MAC address, and forward request to specified DHCP server.")
dhcpRelayAgentSrvrIP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayAgentSrvrIP.setStatus('obsolete')
if mibBuilder.loadTexts: dhcpRelayAgentSrvrIP.setDescription('Obsoleted. Configure with whispApsDNS.dhcprServer.')
colorCodeRescanTimer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodeRescanTimer.setStatus('current')
if mibBuilder.loadTexts: colorCodeRescanTimer.setDescription('Time in minutes for the subscriber to begin the idle timer. This timer will begin as soon as a session is started. This only fires if the device is in session with a non-primary color code. A value of zero (0) disables this timer (MultiPoint system Only)')
colorCodeRescanIdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colorCodeRescanIdleTimer.setStatus('current')
if mibBuilder.loadTexts: colorCodeRescanIdleTimer.setDescription('Time in minutes for the subscriber to check for an idle state. If an period has pass where no unicast RF traffic has occured (idle), then the subscriber will begin to rescan. This timer will wait until the timer set in colorCodeRescanTimer has expired before beginning. This timer only fires if the device is in session with a non-primary color code. A value of zero (0) mean to rescan without waiting for idle. (MultiPoint system Only)')
authKeyOptionAP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useDefault", 0), ("useKeySet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authKeyOptionAP.setStatus('current')
if mibBuilder.loadTexts: authKeyOptionAP.setDescription('This option is for Multipoint APs only. This option will only be used if Authentication Mode is set to AP Pre-Shared Key. 0 - Use default key. 1 - Use set key.')
asIP4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 67), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP4.setStatus('obsolete')
if mibBuilder.loadTexts: asIP4.setDescription('Obsoleted. Configure with whispApsDNS.authServer4.')
asIP5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 68), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIP5.setStatus('obsolete')
if mibBuilder.loadTexts: asIP5.setDescription('Obsoleted. Configure with whispApsDNS.authServer5.')
onlyAllowVer95OrAbove = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("onlyAllowVer95OrAboveDisabled", 0), ("onlyAllowVer95OrAboveEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onlyAllowVer95OrAbove.setStatus('current')
if mibBuilder.loadTexts: onlyAllowVer95OrAbove.setDescription('Only allow subscribers that are running version 9.5 or above. Any radio that has a version below 9.5 will not be allowed to register.')
apRxDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRxDelay.setStatus('current')
if mibBuilder.loadTexts: apRxDelay.setDescription('This is used for engineering debug and needs to be removed or moved to eng MIB before releasing the MIB.')
qinqEthType = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("x88a8", 0), ("x8100", 1), ("x9100", 2), ("x9200", 3), ("x9300", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqEthType.setStatus('current')
if mibBuilder.loadTexts: qinqEthType.setDescription('EtherType for QinQ (802.1ad) outer tag (S-Tag). 0x88a8 by default.')
fskSMTxPwrCntl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fskSMTxPwrCntl.setStatus('current')
if mibBuilder.loadTexts: fskSMTxPwrCntl.setDescription('Enable/Disable AP control of SM TX power. For FSK AP radios capable of Transmit Power Control.')
fskSMRcvTargetLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -40))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fskSMRcvTargetLvl.setStatus('current')
if mibBuilder.loadTexts: fskSMRcvTargetLvl.setDescription('Desired SM Receive Level at AP (dBm, Range -40dBm to -80 dBm).')
authSharedSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 74), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSharedSecret1.setStatus('current')
if mibBuilder.loadTexts: authSharedSecret1.setDescription('Authentication Server 1 Shared Secret.')
authSharedSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 75), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSharedSecret2.setStatus('current')
if mibBuilder.loadTexts: authSharedSecret2.setDescription('Authentication Server 2 Shared Secret.')
authSharedSecret3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 76), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authSharedSecret3.setStatus('current')
if mibBuilder.loadTexts: authSharedSecret3.setDescription('Authentication Server 3 Shared Secret.')
whispUsrAuthSharedSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 79), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthSharedSecret1.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAuthSharedSecret1.setDescription('Obsoleted. Use whispApsConfig.authSharedSecret1.')
whispUsrAuthSharedSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 80), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthSharedSecret2.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAuthSharedSecret2.setDescription('Obsoleted. Use whispApsConfig.authSharedSecret2.')
whispUsrAuthSharedSecret3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 81), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthSharedSecret3.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAuthSharedSecret3.setDescription('Obsoleted. Use whispApsConfig.authSharedSecret3.')
whispUsrAcctSvr1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 82), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAcctSvr1.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAcctSvr1.setDescription('Obsoleted. Use whispApsDNS.authServer1.')
whispUsrAcctSvr2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 83), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAcctSvr2.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAcctSvr2.setDescription('Obsoleted. Use whispApsDNS.authServer2.')
whispUsrAcctSvr3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 84), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAcctSvr3.setStatus('obsolete')
if mibBuilder.loadTexts: whispUsrAcctSvr3.setDescription('Obsoleted. Use whispApsDNS.authServer3.')
whispUsrAuthPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("md5", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispUsrAuthPhase1.setStatus('current')
if mibBuilder.loadTexts: whispUsrAuthPhase1.setDescription('Select method for User Authentication')
whispWebUseAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useRADIUSAccountingSvr", 0), ("useRADIUSAuthenticationSvr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: whispWebUseAuthServer.setStatus('obsolete')
if mibBuilder.loadTexts: whispWebUseAuthServer.setDescription('Obsoleted. Use whispApsDNS.authServer[1-3].')
dropSession = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 87), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dropSession.setStatus('current')
if mibBuilder.loadTexts: dropSession.setDescription('SM/BHS MAC Address to drop session from the AP/BHM.')
uGPSPower = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uGPSPower.setStatus('current')
if mibBuilder.loadTexts: uGPSPower.setDescription('Enable or Disable power supply to Universal GPS module (UGPS capable APs only, when GPS_output_enable is NOT set).')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 124))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
if mibBuilder.loadTexts: timeZone.setDescription('Set the timezone offset for the radio. This change takes affect dynamically. The available timezones are: 0 : (UTC) UTC - Coordinated Universal Time 1 : (UTC) GMT - Greenwich Mean Time 2 : (UTC) WET - Western European Time 3 : (UTC-12) BIT - Baker Island Time 4 : (UTC-11) SST - Samoa Standard Time 5 : (UTC-10) CKT - Cook Island Time 6 : (UTC-10) HAST - Hawaii-Aleutian Standard Time 7 : (UTC-10) HST - Hawaii Standard Time 8 : (UTC-10) TAHT - Tahiti Time 9 : (UTC-09:30) MIT - Marquesas Islands Time 10 : (UTC-09) AKST - Alaska Standard Time 11 : (UTC-09) GIT - Gambier Island Time 12 : (UTC-09) HADT - Hawaii-Aleutian Daylight Time 13 : (UTC-08) AKDT - Alaska Daylight Time 14 : (UTC-08) CIST - Clipperton Island Standard Time 15 : (UTC-08) PST - Pacific Standard Time (North America) 16 : (UTC-07) MST - Mountain Standard Time (North America) 17 : (UTC-07) PDT - Pacific Daylight Time (North America) 18 : (UTC-06) CST - Central Standard Time (North America) 19 : (UTC-06) EAST - Easter Island Standard Time 20 : (UTC-06) GALT - Galapagos Time 21 : (UTC-06) MDT - Mountain Daylight Time (North America) 22 : (UTC-05) CDT - Central Daylight Time (North America) 23 : (UTC-05) COT - Colombia Time 24 : (UTC-05) ECT - Ecuador Time 25 : (UTC-05) EST - Eastern Standard Time (North America) 26 : (UTC-04:30) VET - Venezuelan Standard Time 27 : (UTC-04) AST - Atlantic Standard Time 28 : (UTC-04) BOT - Bolivia Time 29 : (UTC-04) CLT - Chile Standard Time 30 : (UTC-04) COST - Colombia Summer Time 31 : (UTC-04) ECT - Eastern Caribbean Time (does not recognise DST) 32 : (UTC-04) EDT - Eastern Daylight Time (North America) 33 : (UTC-04) FKT - Falkland Islands Time 34 : (UTC-04) GYT - Guyana Time 35 : (UTC-03:30) NST - Newfoundland Standard Time 36 : (UTC-03:30) NT - Newfoundland Time 37 : (UTC-03) ADT - Atlantic Daylight Time 38 : (UTC-03) ART - Argentina Time 39 : (UTC-03) BRT - Brasilia Time 40 : (UTC-03) CLST - Chile Summer Time 41 : (UTC-03) FKST - Falkland Islands Summer Time 42 : (UTC-03) GFT - French Guiana Time 43 : (UTC-03) UYT - Uruguay Standard Time 44 : (UTC-02:30) NDT - Newfoundland Daylight Time 45 : (UTC-02) GST - South Georgia and the South Sandwich Islands 46 : (UTC-02) UYST - Uruguay Summer Time 47 : (UTC-01) AZOST - Azores Standard Time 48 : (UTC-01) CVT - Cape Verde Time 49 : (UTC+01) BST - British Summer Time (British Standard Time from Feb 1968 to Oct 1971) 50 : (UTC+01) CET - Central European Time 51 : (UTC+01) DFT - AIX specific equivalent of Central European Time 52 : (UTC+01) IST - Irish Summer Time 53 : (UTC+01) WAT - West Africa Time 54 : (UTC+01) WEDT - Western European Daylight Time 55 : (UTC+01) WEST - Western European Summer Time 56 : (UTC+02) CAT - Central Africa Time 57 : (UTC+02) CEDT - Central European Daylight Time 58 : (UTC+02) CEST - Central European Summer Time 59 : (UTC+02) EET - Eastern European Time 60 : (UTC+02) IST - Israel Standard Time 61 : (UTC+02) SAST - South African Standard Time 62 : (UTC+03) AST - Arab Standard Time (Kuwait, Riyadh) 63 : (UTC+03) AST - Arabic Standard Time (Baghdad) 64 : (UTC+03) EAT - East Africa Time 65 : (UTC+03) EEDT - Eastern European Daylight Time 66 : (UTC+03) EEST - Eastern European Summer Time 67 : (UTC+03) MSK - Moscow Standard Time 68 : (UTC+03:30) IRST - Iran Standard Time 69 : (UTC+04) AMT - Armenia Time 70 : (UTC+04) AST - Arabian Standard Time (Abu Dhabi, Muscat) 71 : (UTC+04) AZT - Azerbaijan Time 72 : (UTC+04) GET - Georgia Standard Time 73 : (UTC+04) MSD - Moscow Summer Time 74 : (UTC+04) MUT - Mauritius Time 75 : (UTC+04) RET - Reunion Time 76 : (UTC+04) SAMT - Samara Time 77 : (UTC+04) SCT - Seychelles Time 78 : (UTC+04:30) AFT - Afghanistan Time 79 : (UTC+05) AMST - Armenia Summer Time 80 : (UTC+05) HMT - Heard and McDonald Islands Time 81 : (UTC+05) PKT - Pakistan Standard Time 82 : (UTC+05) YEKT - Yekaterinburg Time 83 : (UTC+05:30) IST - Indian Standard Time 84 : (UTC+05:30) SLT - Sri Lanka Time 85 : (UTC+05:45) NPT - Nepal Time 86 : (UTC+06) BIOT - British Indian Ocean Time 87 : (UTC+06) BST - Bangladesh Standard Time 88 : (UTC+06) BTT - Bhutan Time 89 : (UTC+06) OMST - Omsk Time 90 : (UTC+06:30) CCT - Cocos Islands Time 91 : (UTC+06:30) MST - Myanmar Standard Time 92 : (UTC+07) CXT - Christmas Island Time 93 : (UTC+07) ICT - Indochina Time 94 : (UTC+07) KRAT - Krasnoyarsk Time 95 : (UTC+07) THA - Thailand Standard Time 96 : (UTC+08) ACT - ASEAN Common Time 97 : (UTC+08) AWST - Australian Western Standard Time 98 : (UTC+08) BDT - Brunei Time 99 : (UTC+08) CST - China Standard Time 100 : (UTC+08) HKT - Hong Kong Time 101 : (UTC+08) IRKT - Irkutsk Time 102 : (UTC+08) MST - Malaysian Standard Time 103 : (UTC+08) PST - Philippine Standard Time 104 : (UTC+08) SST - Singapore Standard Time 105 : (UTC+09) AWDT - Australian Western Daylight Time 106 : (UTC+09) JST - Japan Standard Time 107 : (UTC+09) KST - Korea Standard Time 108 : (UTC+09) YAKT - Yakutsk Time 109 : (UTC+09:30) ACST - Australian Central Standard Time 110 : (UTC+10) AEST - Australian Eastern Standard Time 111 : (UTC+10) ChST - Chamorro Standard Time 112 : (UTC+10) VLAT - Vladivostok Time 113 : (UTC+10:30) ACDT - Australian Central Daylight Time 114 : (UTC+10:30) LHST - Lord Howe Standard Time 115 : (UTC+11) AEDT - Australian Eastern Daylight Time 116 : (UTC+11) MAGT - Magadan Time 117 : (UTC+11) SBT - Solomon Islands Time 118 : (UTC+11:30) NFT - Norfolk Time[1] 119 : (UTC+12) FJT - Fiji Time 120 : (UTC+12) GILT - Gilbert Island Time 121 : (UTC+12) PETT - Kamchatka Time 122 : (UTC+12:45) CHAST - Chatham Standard Time 123 : (UTC+13) PHOT - Phoenix Island Time 124 : (UTC+14) LINT - Line Islands Time')
ofdmSMRcvTargetLvl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -40))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ofdmSMRcvTargetLvl.setStatus('current')
if mibBuilder.loadTexts: ofdmSMRcvTargetLvl.setDescription('Desired SM Receive Level at AP (dBm, Range -40dBm to -80 dBm). As of release 12.1, on MIMO systems this is a combined power level value.')
radiusPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 91), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPort.setStatus('current')
if mibBuilder.loadTexts: radiusPort.setDescription('Port used to connect to the RADIUS server. Default is 1812.')
radiusAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 92), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctPort.setStatus('current')
if mibBuilder.loadTexts: radiusAcctPort.setDescription('Port used to for RADIUS Accounting. Default is 1813.')
lastSesStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSesStatsReset.setStatus('current')
if mibBuilder.loadTexts: lastSesStatsReset.setDescription('Displays the timestamp of last reset of session stats or None otherwise.')
resetSesStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noReset", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetSesStats.setStatus('current')
if mibBuilder.loadTexts: resetSesStats.setDescription('Resets the session stats if true.')
rfOLTrap = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOLTrap.setStatus('current')
if mibBuilder.loadTexts: rfOLTrap.setDescription('Enable/Disable SNMP Trap for when RF Overload exceeds configured Threshold level.')
rfOLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOLThreshold.setStatus('current')
if mibBuilder.loadTexts: rfOLThreshold.setDescription('Percent of packet overload in the RF Downlink where SNMP is generated and sent to Network Manager.')
rfOLEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOLEnable.setStatus('current')
if mibBuilder.loadTexts: rfOLEnable.setDescription('Enable/Disable Throughput RF Overload Monitoring monitoring.')
actionListFilename = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 98), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionListFilename.setStatus('current')
if mibBuilder.loadTexts: actionListFilename.setDescription('Name of the file that contains the Action List for Auto update commands from CNUT')
enableAutoupdate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAutoupdate.setStatus('current')
if mibBuilder.loadTexts: enableAutoupdate.setDescription("Enables/Disables auto-update of the SM's under an AP")
accountingSmReAuthInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 100), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accountingSmReAuthInterval.setStatus('current')
if mibBuilder.loadTexts: accountingSmReAuthInterval.setDescription('Select Interval for Reauthentication of SM')
syslogDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDomainNameAppend.setStatus('deprecated')
if mibBuilder.loadTexts: syslogDomainNameAppend.setDescription('This attribute is deprecated. Use syslogDomainNameAppend in whispBoxAttributesGroup')
syslogServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 102), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerAddr.setStatus('deprecated')
if mibBuilder.loadTexts: syslogServerAddr.setDescription('This attribute is deprecated. Use syslogServerAddr in whispBoxAttributesGroup')
syslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 103), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
if mibBuilder.loadTexts: syslogServerPort.setDescription('This attribute is deprecated. Use syslogServerPort in whispBoxAttributesGroup')
syslogXmitAP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogXmitAP.setStatus('current')
if mibBuilder.loadTexts: syslogXmitAP.setDescription('Enables/Disables transmission of Syslogs from AP/BHM')
syslogXmitSMs = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogXmitSMs.setStatus('current')
if mibBuilder.loadTexts: syslogXmitSMs.setDescription('Enables/Disables transmission of Syslogs from connected SMs/BHS. This can be over-ridden by the setting on individual SMs/ the BHS.')
accountingInterimUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 106), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accountingInterimUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: accountingInterimUpdateInterval.setDescription('Select Interval for Interim Updates')
gpsOutputEn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsOutputEn.setStatus('current')
if mibBuilder.loadTexts: gpsOutputEn.setDescription('Enable or Disable GPS sync output enable.')
radioMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("combo", 0), ("comboDualChan", 1), ("mimoOnly", 2), ("fskOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioMode.setStatus('obsolete')
if mibBuilder.loadTexts: radioMode.setDescription('This OID is obsolete.')
rfTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTelnetAccess.setStatus('current')
if mibBuilder.loadTexts: rfTelnetAccess.setDescription('Allows/prohibits uplink Telnet access (SM->AP).')
upLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 208), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: upLnkMaxBurstDataRate.setStatus('current')
if mibBuilder.loadTexts: upLnkMaxBurstDataRate.setDescription('Maximum burst uplink rate.')
dwnLnkMaxBurstDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 209), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwnLnkMaxBurstDataRate.setStatus('current')
if mibBuilder.loadTexts: dwnLnkMaxBurstDataRate.setDescription('Maximum burst downlink rate.')
rfPPPoEPADIForwarding = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfPPPoEPADIForwarding.setStatus('current')
if mibBuilder.loadTexts: rfPPPoEPADIForwarding.setDescription('Enables/disables forwarding of PPPoE PADI packets from AP to SM.')
allowedIPAccessNMLength1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 211), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength1.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccessNMLength1.setDescription('Length of the network mask to apply to the AllowedIPAddress when assessing if access is allowed')
allowedIPAccessNMLength2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 212), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength2.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccessNMLength2.setDescription('Length of the network mask to apply to the AllowedIPAddress when assessing if access is allowed')
allowedIPAccessNMLength3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 213), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedIPAccessNMLength3.setStatus('current')
if mibBuilder.loadTexts: allowedIPAccessNMLength3.setDescription('Length of the network mask to apply to the AllowedIPAddress when assessing if access is allowed')
bridgeFloodUnknownsEnable = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeFloodUnknownsEnable.setStatus('current')
if mibBuilder.loadTexts: bridgeFloodUnknownsEnable.setDescription('To enable or disable bridge flooding unknown unicast packets. (0) - Bridge will not forward unknown unicast packets. (1) - Bridge will flood unknown unicast packets.')
berModSelect = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("qpsk", 0), ("qam-16", 1), ("qam-64", 2), ("qam-256", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: berModSelect.setStatus('current')
if mibBuilder.loadTexts: berModSelect.setDescription('The modulation the AP generates BER at. 0 for QPSK, 1 for 16-QAM, 2 for 64-QAM, and 3 for 256-QAM.')
remoteSpectrumAnalyzerScanBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 216), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bandwidth5MHz", 0), ("bandwidth10MHz", 1), ("bandwidth20MHz", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteSpectrumAnalyzerScanBandwidth.setStatus('current')
if mibBuilder.loadTexts: remoteSpectrumAnalyzerScanBandwidth.setDescription('Scanning Bandwidth used for the Remote Spectrum Analyzer. Only available on PMP 450.')
multicastVCDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 7, 8, 9))).clone(namedValues=NamedValues(("disable", 0), ("rate1X", 4), ("rate2X", 5), ("rate4X", 7), ("rate6X", 8), ("rate8X", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVCDataRate.setStatus('current')
if mibBuilder.loadTexts: multicastVCDataRate.setDescription('The data rate that is used for the Multicast VC. 8X is for engineering only.')
dlnkMcastCIR = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 218), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlnkMcastCIR.setStatus('current')
if mibBuilder.loadTexts: dlnkMcastCIR.setDescription('Downlink Multicast CIR (kbps)')
multicastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 219), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastRetryCount.setStatus('current')
if mibBuilder.loadTexts: multicastRetryCount.setDescription('Multicast Repeat Count : Range 0 - 2. For APs.')
apConfigAdjacentChanSupport = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 1, 220), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apConfigAdjacentChanSupport.setStatus('current')
if mibBuilder.loadTexts: apConfigAdjacentChanSupport.setDescription('Used to enable or disable adjacent channel support.')
whispRegStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispRegStatus.setStatus('obsolete')
if mibBuilder.loadTexts: whispRegStatus.setDescription('This shows the registration status of a link.')
linkTestLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestLUID.setStatus('current')
if mibBuilder.loadTexts: linkTestLUID.setDescription('LUID selection for Link Test. Valid range: 2-255')
linkTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestDuration.setStatus('current')
if mibBuilder.loadTexts: linkTestDuration.setDescription('Duration for the Link Test. Valid range: 2-10 seconds')
linkTestAction = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stopped", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestAction.setStatus('current')
if mibBuilder.loadTexts: linkTestAction.setDescription("Setting value 1 will initiate link test. Note that trying to set 0 will not stop the test. In fact it will return an error message. The value of 0 just indicates the idle state meaning no test is running or the current test is done. That's why the word stopped is used and not the action verb stop.")
linkTestPktLength = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestPktLength.setStatus('current')
if mibBuilder.loadTexts: linkTestPktLength.setDescription('Packet length for Link Test. Valid range: 64-1714 bytes')
linkTestMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("rflinktest", 0), ("linktestwithbridging", 1), ("linktestwithbridgingandmir", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestMode.setStatus('current')
if mibBuilder.loadTexts: linkTestMode.setDescription("Link Test Mode 0 = RF Link Test (traffic doesn't go through bridge, highest throughput) 1 = Link Test with Bridging 2 = Link Test with Bridging and MIR")
linkTestSNRCalculation = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestSNRCalculation.setStatus('current')
if mibBuilder.loadTexts: linkTestSNRCalculation.setDescription('Enable or disable Signal to Noise Ratio (SNR) calculations during a Link Test. Enabling(1) will calulate SNR on all receiving packets. Due to load on CPU, will slightly degrade packet per second capabilities. Only applicable to GenII OFDM products and up.')
linkTestWithDualPath = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lowpriorityvconly", 0), ("highandlowpriorityvcs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestWithDualPath.setStatus('current')
if mibBuilder.loadTexts: linkTestWithDualPath.setDescription('Link Test with: 0 = Low Priority VC only 1 = High and Low Priority VCs')
linkTestNumPkt = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestNumPkt.setStatus('current')
if mibBuilder.loadTexts: linkTestNumPkt.setDescription('Number of packets to send. Valid range: 0-64 where 0 will flood the link for the duration of the test.')
testLUID = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testLUID.setStatus('current')
if mibBuilder.loadTexts: testLUID.setDescription('LUID number of selected unit.')
linkTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestStatus.setStatus('current')
if mibBuilder.loadTexts: linkTestStatus.setDescription('Status for Link Test.')
linkTestError = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestError.setStatus('current')
if mibBuilder.loadTexts: linkTestError.setDescription('Error status of Link Test: (1) Failed to recieve handshake from remote device (2) No session is currently active. Please try again after session established. (3) Received a bad transaction ID. Please try again. (4) We werent able to send the test request to the remote device. (5) We didnt receive any results from the remote device.')
testDuration = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testDuration.setStatus('current')
if mibBuilder.loadTexts: testDuration.setDescription('Duration of link test.')
downLinkRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 5), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkRate.setStatus('current')
if mibBuilder.loadTexts: downLinkRate.setDescription('Down Link Rate.')
upLinkRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 6), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkRate.setStatus('current')
if mibBuilder.loadTexts: upLinkRate.setDescription('Up Link Rate.')
downLinkEff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 7), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: downLinkEff.setStatus('current')
if mibBuilder.loadTexts: downLinkEff.setDescription('Down Link Efficiency.')
maxDwnLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxDwnLinkIndex.setStatus('current')
if mibBuilder.loadTexts: maxDwnLinkIndex.setDescription('For link test results, the maximum possible downlink efficiency percentage (always 100%).')
actDwnLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnLinkIndex.setStatus('current')
if mibBuilder.loadTexts: actDwnLinkIndex.setDescription('Actual down link index.')
expDwnFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expDwnFragCount.setStatus('current')
if mibBuilder.loadTexts: expDwnFragCount.setDescription('Expected Fragment Count.')
actDwnFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDwnFragCount.setStatus('current')
if mibBuilder.loadTexts: actDwnFragCount.setDescription('Actual Fragment Count')
upLinkEff = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 12), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: upLinkEff.setStatus('current')
if mibBuilder.loadTexts: upLinkEff.setDescription('Up link efficiency.')
expUpFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expUpFragCount.setStatus('current')
if mibBuilder.loadTexts: expUpFragCount.setDescription('Uplink expected Fragment Count.')
actUpFragCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpFragCount.setStatus('current')
if mibBuilder.loadTexts: actUpFragCount.setDescription('Actual uplink Fragment Count.')
maxUpLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxUpLinkIndex.setStatus('current')
if mibBuilder.loadTexts: maxUpLinkIndex.setDescription('For link test results, the maximum possible uplink efficiency percentage (always 100%).')
actUpLinkIndex = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actUpLinkIndex.setStatus('current')
if mibBuilder.loadTexts: actUpLinkIndex.setDescription('Actual Up link index.')
fragments1xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkVertical.setStatus('current')
if mibBuilder.loadTexts: fragments1xDwnLinkVertical.setDescription('Number of fragments received on down link at 1X (QPSK). For Gen II OFDM and forward. For MIMO this is the vertical path.')
fragments2xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkVertical.setStatus('current')
if mibBuilder.loadTexts: fragments2xDwnLinkVertical.setDescription('Number of fragments received on down link at 2X (16-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
fragments3xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkVertical.setStatus('current')
if mibBuilder.loadTexts: fragments3xDwnLinkVertical.setDescription('Number of fragments received on down link at 3X (64-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
fragments4xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkVertical.setStatus('current')
if mibBuilder.loadTexts: fragments4xDwnLinkVertical.setDescription('Number of fragments received on down link at 4X (256-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
fragments1xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkVertical.setStatus('current')
if mibBuilder.loadTexts: fragments1xUpLinkVertical.setDescription('Number of fragments received on up link at 1X (QPSK). For Gen II OFDM and forward. For MIMO this is the vertical path.')
fragments2xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkVertical.setStatus('current')
if mibBuilder.loadTexts: fragments2xUpLinkVertical.setDescription('Number of fragments received on up link at 2X (16-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
fragments3xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkVertical.setStatus('current')
if mibBuilder.loadTexts: fragments3xUpLinkVertical.setDescription('Number of fragments received on up link at 3X (64-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
fragments4xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkVertical.setStatus('current')
if mibBuilder.loadTexts: fragments4xUpLinkVertical.setDescription('Number of fragments received on up link at 4X (256-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
bitErrorsCorrected1xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkVertical.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkVertical.setDescription('Number of bit errors corrected on average per fragment on down link at 1X (QPSK). For Gen II OFDM and forward. For MIMO this is the vertical path.')
bitErrorsCorrected2xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkVertical.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkVertical.setDescription('Number of bit errors corrected on average per fragment on down link at 2X (16-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
bitErrorsCorrected3xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkVertical.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkVertical.setDescription('Number of bit errors corrected on average per fragment on down link at 3X (64-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
bitErrorsCorrected4xDwnLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkVertical.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkVertical.setDescription('Number of bit errors corrected on average per fragment on down link at 4X (256-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
bitErrorsCorrected1xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkVertical.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkVertical.setDescription('Number of bit errors corrected on average per fragment on up link at 1X (QPSK). For Gen II OFDM and forward. For MIMO this is the vertical path.')
bitErrorsCorrected2xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkVertical.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkVertical.setDescription('Number of bit errors corrected on average per fragment on up link at 2X (16-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
bitErrorsCorrected3xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkVertical.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkVertical.setDescription('Number of bit errors corrected on average per fragment on up link at 3X (64-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
bitErrorsCorrected4xUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkVertical.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkVertical.setDescription('Number of bit errors corrected on average per fragment on up link at 4X (256-QAM). For Gen II OFDM and forward. For MIMO this is the vertical path.')
signalToNoiseRatioDownLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkVertical.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkVertical.setDescription('Estimated Signal to Noise Ratio in dB for the down link. For Gen II OFDM and forward. For MIMO this is the vertical path.')
signalToNoiseRatioUpLinkVertical = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkVertical.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkVertical.setDescription('Estimated Signal to Noise Ratio in dB for the up link. For Gen II OFDM and forward. For MIMO this is the vertical path.')
fragments1xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xDwnLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: fragments1xDwnLinkHorizontal.setDescription('Number of fragments received on down link at 1X (QPSK). For MIMO only. For MIMO this is the horizontal path.')
fragments2xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xDwnLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: fragments2xDwnLinkHorizontal.setDescription('Number of fragments received on down link at 2X (16-QAM). For MIMO only. For MIMO this is the horizontal path.')
fragments3xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xDwnLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: fragments3xDwnLinkHorizontal.setDescription('Number of fragments received on down link at 3X (64-QAM). For MIMO only. For MIMO this is the horizontal path.')
fragments4xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xDwnLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: fragments4xDwnLinkHorizontal.setDescription('Number of fragments received on down link at 4X (256-QAM). For MIMO only. For MIMO this is the horizontal path.')
fragments1xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments1xUpLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: fragments1xUpLinkHorizontal.setDescription('Number of fragments received on up link at 1X (QPSK). For MIMO only. For MIMO this is the horizontal path.')
fragments2xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments2xUpLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: fragments2xUpLinkHorizontal.setDescription('Number of fragments received on up link at 2X (16-QAM). For MIMO only. For MIMO this is the horizontal path.')
fragments3xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments3xUpLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: fragments3xUpLinkHorizontal.setDescription('Number of fragments received on up link at 3X (64-QAM). For MIMO only. For MIMO this is the horizontal path.')
fragments4xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fragments4xUpLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: fragments4xUpLinkHorizontal.setDescription('Number of fragments received on up link at 4X (256-QAM). For MIMO only. For MIMO this is the horizontal path.')
bitErrorsCorrected1xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected1xDwnLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on down link at 1X (QPSK). For MIMO and forward. For MIMO this is the horizontal path.')
bitErrorsCorrected2xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected2xDwnLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on down link at 2X (16-QAM). For MIMO and forward. For MIMO this is the horizontal path.')
bitErrorsCorrected3xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected3xDwnLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on down link at 3X (64-QAM). For MIMO and forward. For MIMO this is the horizontal path.')
bitErrorsCorrected4xDwnLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected4xDwnLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on down link at 4X (256-QAM). For MIMO and forward. For MIMO this is the horizontal path.')
bitErrorsCorrected1xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected1xUpLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on up link at 1X (QPSK). For MIMO and forward. For MIMO this is the horizontal path.')
bitErrorsCorrected2xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected2xUpLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on up link at 2X (16-QAM). For MIMO and forward. For MIMO this is the horizontal path.')
bitErrorsCorrected3xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected3xUpLinkHorizontal.setDescription('Engineering use only. Number of bit errors corrected on average per fragment on up link at 3X (64-QAM). For MIMO and forward. For MIMO this is the horizontal path.')
bitErrorsCorrected4xUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: bitErrorsCorrected4xUpLinkHorizontal.setDescription('Number of bit errors corrected on average per fragment on up link at 4X (256-QAM). For MIMO and forward. For MIMO this is the horizontal path.')
signalToNoiseRatioDownLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioDownLinkHorizontal.setDescription('Estimated Signal to Noise Ratio in dB for the down link. For MIMO and forward. For MIMO this is the horizontal path.')
signalToNoiseRatioUpLinkHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 2, 2, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkHorizontal.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioUpLinkHorizontal.setDescription('Estimated Signal to Noise Ratio in dB for the up link. For Gen II OFDM and forward. For MIMO this is the horizontal path.')
whispGPSStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gpsSynchronized", 1), ("gpsLostSync", 2), ("generatingSync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: whispGPSStats.setStatus('current')
if mibBuilder.loadTexts: whispGPSStats.setDescription('This shows whether the AP is synchrinized to the GPS timer.')
gpsSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSyncSource.setStatus('current')
if mibBuilder.loadTexts: gpsSyncSource.setDescription('Source of GPS Sync Pulse.')
gpsSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSyncStatus.setStatus('current')
if mibBuilder.loadTexts: gpsSyncStatus.setDescription('Current Live value of Sync Status.')
gpsTrackingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsTrackingMode.setStatus('current')
if mibBuilder.loadTexts: gpsTrackingMode.setDescription('GPS tracking mode.')
gpsTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsTime.setStatus('current')
if mibBuilder.loadTexts: gpsTime.setDescription('GPS time.')
gpsDate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsDate.setStatus('current')
if mibBuilder.loadTexts: gpsDate.setDescription('GPS date.')
gpsSatellitesTracked = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesTracked.setStatus('current')
if mibBuilder.loadTexts: gpsSatellitesTracked.setDescription('Current number of satellites GPS is tracking.')
gpsSatellitesVisible = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatellitesVisible.setStatus('current')
if mibBuilder.loadTexts: gpsSatellitesVisible.setDescription('Number of satellites the GPS sees')
gpsHeight = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsHeight.setStatus('current')
if mibBuilder.loadTexts: gpsHeight.setDescription('GPS height.')
gpsAntennaConnection = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsAntennaConnection.setStatus('current')
if mibBuilder.loadTexts: gpsAntennaConnection.setDescription('Antenna Connection status.')
gpsLatitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLatitude.setStatus('current')
if mibBuilder.loadTexts: gpsLatitude.setDescription('GPS Latitude.')
gpsLongitude = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsLongitude.setStatus('current')
if mibBuilder.loadTexts: gpsLongitude.setDescription('GPS Longitude.')
gpsInvalidMsg = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsInvalidMsg.setStatus('current')
if mibBuilder.loadTexts: gpsInvalidMsg.setDescription('Number of invalid messages.')
gpsRestartCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsRestartCount.setStatus('current')
if mibBuilder.loadTexts: gpsRestartCount.setDescription('Number of GPS unit restarts.')
gpsReInitCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsReInitCount.setStatus('current')
if mibBuilder.loadTexts: gpsReInitCount.setDescription('GPS ReInit counts. The number of times we have done a complete re-initialization of the GPS device.')
gpsReceiverInfo = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsReceiverInfo.setStatus('current')
if mibBuilder.loadTexts: gpsReceiverInfo.setDescription('A textual string contains information on GPS receiver.')
gpsFreeRun = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gpsFreeRun.setStatus('current')
if mibBuilder.loadTexts: gpsFreeRun.setDescription('This variable is deprecated. Setting this value to false will set AutoSync. Setting this value to true will set AutoSync plus Free Run.')
autoSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noSync", 0), ("onBoardGPSSync", 1), ("timingPortUGPSSync", 2), ("onBoardGPSAndTimingPortUGPSSync", 3), ("powrPortSync", 4), ("onBoardGPSAndPowrPortSync", 5), ("timingPortUGPSAndPowrPortSync", 6), ("onBoardGPSAndTimingPortUGPSAndPowrPortSync", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSyncStatus.setStatus('current')
if mibBuilder.loadTexts: autoSyncStatus.setDescription('Current Live value of Sync Status. Following values represent what sources have sync. (0) No Sync (1) On-board GPS Sync (2) Timing Port/UGPS Sync (3) On-board GPS and Timing Port/UGPS Sync (4) Power Port Sync (5) On-board GPS and Power Port Sync (6) Timing Port/UGPS and Power Port Sync (7) On-board GPS, Timing Port/UGPS and Power Port Sync')
whispRegComplete = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 1)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"))
if mibBuilder.loadTexts: whispRegComplete.setStatus('current')
if mibBuilder.loadTexts: whispRegComplete.setDescription('Signals registration complete.')
whispRegLost = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 2)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"))
if mibBuilder.loadTexts: whispRegLost.setStatus('current')
if mibBuilder.loadTexts: whispRegLost.setDescription('Signals registration lost.')
whispRegFailure = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 3)).setObjects(("WHISP-APS-MIB", "regFailESN"), ("WHISP-APS-MIB", "regGrantReason"))
if mibBuilder.loadTexts: whispRegFailure.setStatus('current')
if mibBuilder.loadTexts: whispRegFailure.setDescription('Signals a registration failure has occured.')
whispDefKeyUsed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 1, 4)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkPhysAddress"))
if mibBuilder.loadTexts: whispDefKeyUsed.setStatus('current')
if mibBuilder.loadTexts: whispDefKeyUsed.setDescription('Signals Default Key used for encryptiont.')
whispGPSInSync = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2, 1)).setObjects(("WHISP-APS-MIB", "whispGPSStats"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispGPSInSync.setStatus('current')
if mibBuilder.loadTexts: whispGPSInSync.setDescription('Signals a transition from not-synchronized to synchronized.')
whispGPSOutSync = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 2, 2)).setObjects(("WHISP-APS-MIB", "gpsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispGPSOutSync.setStatus('current')
if mibBuilder.loadTexts: whispGPSOutSync.setDescription('Signals a transition from synchronized to not-synchronized.')
whispRadarDetected = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3, 1)).setObjects(("WHISP-APS-MIB", "dfsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispRadarDetected.setStatus('current')
if mibBuilder.loadTexts: whispRadarDetected.setDescription('Radar detected transmit stopped.')
whispRadarEnd = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 3, 2)).setObjects(("WHISP-APS-MIB", "dfsStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: whispRadarEnd.setStatus('current')
if mibBuilder.loadTexts: whispRadarEnd.setDescription('Radar ended back to normal transmit.')
regulatoryApCheckInvalidChanFailed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 1)).setObjects(("WHISP-APS-MIB", "regulatoryStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: regulatoryApCheckInvalidChanFailed.setStatus('current')
if mibBuilder.loadTexts: regulatoryApCheckInvalidChanFailed.setDescription('Regulatory Check failed for the unit due to a invalid channel for the configured region. regulatoryStatus - Text description for the failure. physAddress - the MAC address of the unit.')
regulatoryCheckFailedNoRegionAp = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 2)).setObjects(("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: regulatoryCheckFailedNoRegionAp.setStatus('current')
if mibBuilder.loadTexts: regulatoryCheckFailedNoRegionAp.setDescription('Regulatory Check failed because a valid region has not be configured. physAddress - the MAC address of the unit.')
regulatoryApCheckInvalidChBwFailed = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 4, 3)).setObjects(("WHISP-APS-MIB", "regulatoryStatus"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: regulatoryApCheckInvalidChBwFailed.setStatus('current')
if mibBuilder.loadTexts: regulatoryApCheckInvalidChBwFailed.setDescription('Regulatory Check failed due to an invalid channel bandwidth for the configured region. regulatoryStatus - Text description for the failure. physAddress - the MAC address of the unit.')
rfLinkOverloadCondition = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 5, 5, 1)).setObjects(("WHISP-APS-MIB", "rfOutDiscardRate"), ("WHISP-BOX-MIBV2-MIB", "whispBoxEsn"))
if mibBuilder.loadTexts: rfLinkOverloadCondition.setStatus('current')
if mibBuilder.loadTexts: rfLinkOverloadCondition.setDescription('AP has exceeded the preset discard percentage in the RF Downlink Direction. rfOutDiscardRate - Current discard Rate. physAddress - the MAC address of the unit.')
whispLinkTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 1)).setObjects(("WHISP-APS-MIB", "linkTestLUID"), ("WHISP-APS-MIB", "linkTestDuration"), ("WHISP-APS-MIB", "linkTestAction"), ("WHISP-APS-MIB", "linkTestPktLength"), ("WHISP-APS-MIB", "testLUID"), ("WHISP-APS-MIB", "linkTestStatus"), ("WHISP-APS-MIB", "linkTestError"), ("WHISP-APS-MIB", "testDuration"), ("WHISP-APS-MIB", "downLinkRate"), ("WHISP-APS-MIB", "upLinkRate"), ("WHISP-APS-MIB", "downLinkEff"), ("WHISP-APS-MIB", "maxDwnLinkIndex"), ("WHISP-APS-MIB", "actDwnLinkIndex"), ("WHISP-APS-MIB", "expDwnFragCount"), ("WHISP-APS-MIB", "actDwnFragCount"), ("WHISP-APS-MIB", "upLinkEff"), ("WHISP-APS-MIB", "expUpFragCount"), ("WHISP-APS-MIB", "actUpFragCount"), ("WHISP-APS-MIB", "maxUpLinkIndex"), ("WHISP-APS-MIB", "actUpLinkIndex"), ("WHISP-APS-MIB", "fragments1xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments2xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments3xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments4xDwnLinkVertical"), ("WHISP-APS-MIB", "fragments1xUpLinkVertical"), ("WHISP-APS-MIB", "fragments2xUpLinkVertical"), ("WHISP-APS-MIB", "fragments3xUpLinkVertical"), ("WHISP-APS-MIB", "fragments4xUpLinkVertical"), ("WHISP-APS-MIB", "fragments1xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments2xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments3xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments4xDwnLinkHorizontal"), ("WHISP-APS-MIB", "fragments1xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments2xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments3xUpLinkHorizontal"), ("WHISP-APS-MIB", "fragments4xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected1xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected2xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected3xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected4xDwnLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected1xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected2xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected3xUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected4xUpLinkVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioDownLinkVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioUpLinkVertical"), ("WHISP-APS-MIB", "bitErrorsCorrected1xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected2xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected3xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected4xDwnLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected1xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected2xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected3xUpLinkHorizontal"), ("WHISP-APS-MIB", "bitErrorsCorrected4xUpLinkHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioDownLinkHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioUpLinkHorizontal"), ("WHISP-APS-MIB", "linkTestSNRCalculation"), ("WHISP-APS-MIB", "linkTestWithDualPath"), ("WHISP-APS-MIB", "linkTestMode"), ("WHISP-APS-MIB", "linkTestNumPkt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispLinkTestGroup = whispLinkTestGroup.setStatus('current')
if mibBuilder.loadTexts: whispLinkTestGroup.setDescription('WHiSP APs link test group.')
whispApsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 2)).setObjects(("WHISP-APS-MIB", "gpsInput"), ("WHISP-APS-MIB", "rfFreqCarrier"), ("WHISP-APS-MIB", "dwnLnkData"), ("WHISP-APS-MIB", "highPriorityUpLnkPct"), ("WHISP-APS-MIB", "numUAckSlots"), ("WHISP-APS-MIB", "uAcksReservHigh"), ("WHISP-APS-MIB", "numDAckSlots"), ("WHISP-APS-MIB", "dAcksReservHigh"), ("WHISP-APS-MIB", "numCtlSlots"), ("WHISP-APS-MIB", "numCtlSlotsReserveHigh"), ("WHISP-APS-MIB", "upLnkMaxBurstDataRate"), ("WHISP-APS-MIB", "upLnkDataRate"), ("WHISP-APS-MIB", "upLnkLimit"), ("WHISP-APS-MIB", "dwnLnkMaxBurstDataRate"), ("WHISP-APS-MIB", "dwnLnkDataRate"), ("WHISP-APS-MIB", "dwnLnkLimit"), ("WHISP-APS-MIB", "sectorID"), ("WHISP-APS-MIB", "maxRange"), ("WHISP-APS-MIB", "asIP1"), ("WHISP-APS-MIB", "asIP2"), ("WHISP-APS-MIB", "asIP3"), ("WHISP-APS-MIB", "asIP4"), ("WHISP-APS-MIB", "asIP5"), ("WHISP-APS-MIB", "lanIpAp"), ("WHISP-APS-MIB", "lanMaskAp"), ("WHISP-APS-MIB", "defaultGwAp"), ("WHISP-APS-MIB", "privateIp"), ("WHISP-APS-MIB", "gpsTrap"), ("WHISP-APS-MIB", "regTrap"), ("WHISP-APS-MIB", "txSpreading"), ("WHISP-APS-MIB", "apBeaconInfo"), ("WHISP-APS-MIB", "authMode"), ("WHISP-APS-MIB", "authKeyAp"), ("WHISP-APS-MIB", "authKeyOptionAP"), ("WHISP-APS-MIB", "encryptionMode"), ("WHISP-APS-MIB", "ntpServerIp"), ("WHISP-APS-MIB", "multicastRetryCount"), ("WHISP-APS-MIB", "encryptDwBroadcast"), ("WHISP-APS-MIB", "updateAppAddress"), ("WHISP-APS-MIB", "dfsConfig"), ("WHISP-APS-MIB", "vlanEnable"), ("WHISP-APS-MIB", "configSource"), ("WHISP-APS-MIB", "apRateAdapt"), ("WHISP-APS-MIB", "numCtlSlotsHW"), ("WHISP-APS-MIB", "displayAPEval"), ("WHISP-APS-MIB", "smIsolation"), ("WHISP-APS-MIB", "bridgeFloodUnknownsEnable"), ("WHISP-APS-MIB", "ipAccessFilterEnable"), ("WHISP-APS-MIB", "allowedIPAccess1"), ("WHISP-APS-MIB", "allowedIPAccess2"), ("WHISP-APS-MIB", "allowedIPAccess3"), ("WHISP-APS-MIB", "allowedIPAccessNMLength1"), ("WHISP-APS-MIB", "allowedIPAccessNMLength2"), ("WHISP-APS-MIB", "allowedIPAccessNMLength3"), ("WHISP-APS-MIB", "rfTelnetAccess"), ("WHISP-APS-MIB", "rfPPPoEPADIForwarding"), ("WHISP-APS-MIB", "tslBridging"), ("WHISP-APS-MIB", "untranslatedArp"), ("WHISP-APS-MIB", "limitFreqBand900"), ("WHISP-APS-MIB", "txPwrLevel"), ("WHISP-APS-MIB", "rfFreqCaralt1"), ("WHISP-APS-MIB", "rfFreqCaralt2"), ("WHISP-APS-MIB", "scheduleWhitening"), ("WHISP-APS-MIB", "remoteSpectrumAnalysisDuration"), ("WHISP-APS-MIB", "remoteSpectrumAnalyzerLUID"), ("WHISP-APS-MIB", "bhReReg"), ("WHISP-APS-MIB", "dlnkBcastCIR"), ("WHISP-APS-MIB", "dlnkMcastCIR"), ("WHISP-APS-MIB", "verifyGPSChecksum"), ("WHISP-APS-MIB", "qinqEthType"), ("WHISP-APS-MIB", "multicastVCDataRate"), ("WHISP-APS-MIB", "colorCodeRescanTimer"), ("WHISP-APS-MIB", "colorCodeRescanIdleTimer"), ("WHISP-APS-MIB", "fskSMTxPwrCntl"), ("WHISP-APS-MIB", "fskSMRcvTargetLvl"), ("WHISP-APS-MIB", "berModSelect"), ("WHISP-APS-MIB", "lastSesStatsReset"), ("WHISP-APS-MIB", "resetSesStats"), ("WHISP-APS-MIB", "syslogDomainNameAppend"), ("WHISP-APS-MIB", "syslogServerAddr"), ("WHISP-APS-MIB", "syslogServerPort"), ("WHISP-APS-MIB", "syslogXmitAP"), ("WHISP-APS-MIB", "syslogXmitSMs"), ("WHISP-APS-MIB", "uGPSPower"), ("WHISP-APS-MIB", "gpsOutputEn"), ("WHISP-APS-MIB", "radioMode"), ("WHISP-APS-MIB", "authSharedSecret1"), ("WHISP-APS-MIB", "authSharedSecret2"), ("WHISP-APS-MIB", "authSharedSecret3"), ("WHISP-APS-MIB", "radiusPort"), ("WHISP-APS-MIB", "radiusAcctPort"), ("WHISP-APS-MIB", "rfOLEnable"), ("WHISP-APS-MIB", "rfOLTrap"), ("WHISP-APS-MIB", "rfOLThreshold"), ("WHISP-APS-MIB", "remoteSpectrumAnalyzerScanBandwidth"), ("WHISP-APS-MIB", "apConfigAdjacentChanSupport"), ("WHISP-APS-MIB", "ofdmSMRcvTargetLvl"), ("WHISP-APS-MIB", "apRxDelay"), ("WHISP-APS-MIB", "apVlanOverride"), ("WHISP-APS-MIB", "dhcpRelayAgentEnable"), ("WHISP-APS-MIB", "dhcpRelayAgentSrvrIP"), ("WHISP-APS-MIB", "onlyAllowVer95OrAbove"), ("WHISP-APS-MIB", "whispWebUseAuthServer"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret1"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret2"), ("WHISP-APS-MIB", "whispUsrAuthSharedSecret3"), ("WHISP-APS-MIB", "whispUsrAcctSvr1"), ("WHISP-APS-MIB", "whispUsrAcctSvr2"), ("WHISP-APS-MIB", "whispUsrAcctSvr3"), ("WHISP-APS-MIB", "whispUsrAuthPhase1"), ("WHISP-APS-MIB", "accountingInterimUpdateInterval"), ("WHISP-APS-MIB", "accountingSmReAuthInterval"), ("WHISP-APS-MIB", "dropSession"), ("WHISP-APS-MIB", "timeZone"), ("WHISP-APS-MIB", "actionListFilename"), ("WHISP-APS-MIB", "enableAutoupdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsConfigGroup = whispApsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsConfigGroup.setDescription('WHiSP APs configuration group.')
whispApsLinkTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 3)).setObjects(("WHISP-APS-MIB", "linkLUID"), ("WHISP-APS-MIB", "linkDescr"), ("WHISP-APS-MIB", "linkPhysAddress"), ("WHISP-APS-MIB", "linkManagementIP"), ("WHISP-APS-MIB", "linkFragmentsReceived1XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived2XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived3XVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived4XVertical"), ("WHISP-APS-MIB", "signalToNoiseRatioVertical"), ("WHISP-APS-MIB", "linkFragmentsReceived1XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived2XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived3XHorizontal"), ("WHISP-APS-MIB", "linkFragmentsReceived4XHorizontal"), ("WHISP-APS-MIB", "signalToNoiseRatioHorizontal"), ("WHISP-APS-MIB", "linkSignalStrengthRatio"), ("WHISP-APS-MIB", "linkRadioDbmHorizontal"), ("WHISP-APS-MIB", "linkRadioDbmVertical"), ("WHISP-APS-MIB", "maxSMTxPwr"), ("WHISP-APS-MIB", "productType"), ("WHISP-APS-MIB", "linkAdaptRateLowPri"), ("WHISP-APS-MIB", "linkAdaptRateHighPri"), ("WHISP-APS-MIB", "autoUpdateStatus"), ("WHISP-APS-MIB", "linkMtu"), ("WHISP-APS-MIB", "linkSpeed"), ("WHISP-APS-MIB", "linkOperStatus"), ("WHISP-APS-MIB", "linkInOctets"), ("WHISP-APS-MIB", "linkInUcastPkts"), ("WHISP-APS-MIB", "linkInNUcastPkts"), ("WHISP-APS-MIB", "linkInDiscards"), ("WHISP-APS-MIB", "linkInError"), ("WHISP-APS-MIB", "linkInUnknownProtos"), ("WHISP-APS-MIB", "linkOutOctets"), ("WHISP-APS-MIB", "linkOutUcastPkts"), ("WHISP-APS-MIB", "linkOutNUcastPkts"), ("WHISP-APS-MIB", "linkOutDiscards"), ("WHISP-APS-MIB", "linkOutError"), ("WHISP-APS-MIB", "linkOutQLen"), ("WHISP-APS-MIB", "linkSessState"), ("WHISP-APS-MIB", "linkESN"), ("WHISP-APS-MIB", "linkRSSI"), ("WHISP-APS-MIB", "linkAveJitter"), ("WHISP-APS-MIB", "linkLastJitter"), ("WHISP-APS-MIB", "linkAirDelay"), ("WHISP-APS-MIB", "linkRegCount"), ("WHISP-APS-MIB", "linkReRegCount"), ("WHISP-APS-MIB", "linkTimeOut"), ("WHISP-APS-MIB", "linkLastRSSI"), ("WHISP-APS-MIB", "sessionCount"), ("WHISP-APS-MIB", "softwareVersion"), ("WHISP-APS-MIB", "softwareBootVersion"), ("WHISP-APS-MIB", "fpgaVersion"), ("WHISP-APS-MIB", "linkSiteName"), ("WHISP-APS-MIB", "avgPowerLevel"), ("WHISP-APS-MIB", "lastPowerLevel"), ("WHISP-APS-MIB", "sesDownLinkRate"), ("WHISP-APS-MIB", "sesDownLinkLimit"), ("WHISP-APS-MIB", "sesUpLinkRate"), ("WHISP-APS-MIB", "sesUpLinkLimit"), ("WHISP-APS-MIB", "adaptRate"), ("WHISP-APS-MIB", "sesLoUpCIR"), ("WHISP-APS-MIB", "sesLoDownCIR"), ("WHISP-APS-MIB", "sesHiUpCIR"), ("WHISP-APS-MIB", "sesHiDownCIR"), ("WHISP-APS-MIB", "platformVer"), ("WHISP-APS-MIB", "smSessionTmr"), ("WHISP-APS-MIB", "smSessionSeqNumMismatch"), ("WHISP-APS-MIB", "dataVCNum"), ("WHISP-APS-MIB", "hiPriQEn"), ("WHISP-APS-MIB", "dataVCNumHiQ"), ("WHISP-APS-MIB", "linkInOctetsHiQ"), ("WHISP-APS-MIB", "linkInUcastPktsHiQ"), ("WHISP-APS-MIB", "linkInNUcastPktsHiQ"), ("WHISP-APS-MIB", "linkInDiscardsHiQ"), ("WHISP-APS-MIB", "linkInErrorHiQ"), ("WHISP-APS-MIB", "linkInUnknownProtosHiQ"), ("WHISP-APS-MIB", "linkOutOctetsHiQ"), ("WHISP-APS-MIB", "linkOutUcastPktsHiQ"), ("WHISP-APS-MIB", "linkOutNUcastPktsHiQ"), ("WHISP-APS-MIB", "linkOutDiscardsHiQ"), ("WHISP-APS-MIB", "linkOutErrorHiQ"), ("WHISP-APS-MIB", "vcQOverflow"), ("WHISP-APS-MIB", "vcQOverflowHiQ"), ("WHISP-APS-MIB", "p7p8HiPriQEn"), ("WHISP-APS-MIB", "p7p8HiPriQ"), ("WHISP-APS-MIB", "linkAirDelayns"), ("WHISP-APS-MIB", "linkQualityAPData"), ("WHISP-APS-MIB", "radiusReplyMsg"), ("WHISP-APS-MIB", "radiusFramedIPAddress"), ("WHISP-APS-MIB", "radiusFramedIPNetmask"), ("WHISP-APS-MIB", "radiusDefaultGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsLinkTableGroup = whispApsLinkTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsLinkTableGroup.setDescription('WHiSP APs Link Table group.')
whispApsNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 4)).setObjects(("WHISP-APS-MIB", "whispRegComplete"), ("WHISP-APS-MIB", "whispRegLost"), ("WHISP-APS-MIB", "whispRegFailure"), ("WHISP-APS-MIB", "whispDefKeyUsed"), ("WHISP-APS-MIB", "whispGPSInSync"), ("WHISP-APS-MIB", "whispGPSOutSync"), ("WHISP-APS-MIB", "whispRadarDetected"), ("WHISP-APS-MIB", "whispRadarEnd"), ("WHISP-APS-MIB", "regulatoryApCheckInvalidChanFailed"), ("WHISP-APS-MIB", "regulatoryCheckFailedNoRegionAp"), ("WHISP-APS-MIB", "regulatoryApCheckInvalidChBwFailed"), ("WHISP-APS-MIB", "rfLinkOverloadCondition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsNotifGroup = whispApsNotifGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsNotifGroup.setDescription('WHiSP APs notification group.')
whispApsFailedRegTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 6, 5)).setObjects(("WHISP-APS-MIB", "regGrantReason"), ("WHISP-APS-MIB", "regFailESN"), ("WHISP-APS-MIB", "regFailTime"), ("WHISP-APS-MIB", "regFailSeqNum"), ("WHISP-APS-MIB", "regFailReasonText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispApsFailedRegTableGroup = whispApsFailedRegTableGroup.setStatus('current')
if mibBuilder.loadTexts: whispApsFailedRegTableGroup.setDescription('WHiSP APs Failed Registration Table group.')
regCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regCount.setStatus('current')
if mibBuilder.loadTexts: regCount.setDescription('Number of registered SMs.')
gpsStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsStatus.setStatus('current')
if mibBuilder.loadTexts: gpsStatus.setDescription('GPS status.')
radioSlicingAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioSlicingAp.setStatus('obsolete')
if mibBuilder.loadTexts: radioSlicingAp.setDescription('The variable is deprecated.')
radioTxGainAp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioTxGainAp.setStatus('current')
if mibBuilder.loadTexts: radioTxGainAp.setDescription('Radio transmit gain setting.')
dataSlotDwn = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSlotDwn.setStatus('current')
if mibBuilder.loadTexts: dataSlotDwn.setDescription('Number of data slot down.')
dataSlotUp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSlotUp.setStatus('current')
if mibBuilder.loadTexts: dataSlotUp.setDescription('Number of data slot up.')
dataSlotUpHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSlotUpHi.setStatus('current')
if mibBuilder.loadTexts: dataSlotUpHi.setDescription('Number of high priority data slot up.')
upLnkAckSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upLnkAckSlot.setStatus('current')
if mibBuilder.loadTexts: upLnkAckSlot.setDescription('Uplink ack slots.')
upLnkAckSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upLnkAckSlotHi.setStatus('current')
if mibBuilder.loadTexts: upLnkAckSlotHi.setDescription('Hige priority uplink ack slots.')
dwnLnkAckSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dwnLnkAckSlot.setStatus('current')
if mibBuilder.loadTexts: dwnLnkAckSlot.setDescription('Downlink ack slots.')
dwnLnkAckSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dwnLnkAckSlotHi.setStatus('current')
if mibBuilder.loadTexts: dwnLnkAckSlotHi.setDescription('Hige priority downlink ack slots.')
numCtrSlot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCtrSlot.setStatus('current')
if mibBuilder.loadTexts: numCtrSlot.setDescription('Number of control slots.')
numCtrSlotHi = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCtrSlotHi.setStatus('current')
if mibBuilder.loadTexts: numCtrSlotHi.setDescription('High priority control slot.')
dfsStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatus.setStatus('current')
if mibBuilder.loadTexts: dfsStatus.setDescription('Dynamic frequency shifting status.')
dfsStatusPrimary = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatusPrimary.setStatus('current')
if mibBuilder.loadTexts: dfsStatusPrimary.setDescription('Dynamic frequency shifting status for Primary Channel.')
dfsStatusAlt1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatusAlt1.setStatus('current')
if mibBuilder.loadTexts: dfsStatusAlt1.setDescription('Dynamic frequency shifting status for Alternate Channel 1')
dfsStatusAlt2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsStatusAlt2.setStatus('current')
if mibBuilder.loadTexts: dfsStatusAlt2.setDescription('Dynamic frequency shifting status for Alternate Channel 2')
maxRegSMCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRegSMCount.setStatus('current')
if mibBuilder.loadTexts: maxRegSMCount.setDescription('Maximum number of unique Subscriber Modules registered with this AP at once')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTime.setStatus('current')
if mibBuilder.loadTexts: systemTime.setDescription('Displays the system time of the unit')
lastNTPTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastNTPTime.setStatus('current')
if mibBuilder.loadTexts: lastNTPTime.setDescription('Displays the last NTP time acquired by the AP')
regulatoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regulatoryStatus.setStatus('current')
if mibBuilder.loadTexts: regulatoryStatus.setDescription('The current status of the regulatory check on the AP.')
dhcpRlyAgntStat_reqRecvd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 22), Counter32()).setLabel("dhcpRlyAgntStat-reqRecvd").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRecvd.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRecvd.setDescription('Number of DHCP Requests received by the DHCP Relay.')
dhcpRlyAgntStat_reqRelayed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 23), Counter32()).setLabel("dhcpRlyAgntStat-reqRelayed").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRelayed.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqRelayed.setDescription('Number of DHCP Requests relayed by the DHCP Relay.')
dhcpRlyAgntStat_reqDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 24), Counter32()).setLabel("dhcpRlyAgntStat-reqDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_reqDiscards.setDescription('Number of DHCP Requests discarded by the DHCP Relay.')
dhcpRlyAgntStat_respRecvd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 25), Counter32()).setLabel("dhcpRlyAgntStat-respRecvd").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRecvd.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRecvd.setDescription('Number of DHCP Replies received by the DHCP Relay.')
dhcpRlyAgntStat_respRelayed = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 26), Counter32()).setLabel("dhcpRlyAgntStat-respRelayed").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRelayed.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_respRelayed.setDescription('Number of DHCP Replies relayed by the DHCP Relay.')
dhcpRlyAgntStat_respDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 27), Counter32()).setLabel("dhcpRlyAgntStat-respDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_respDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_respDiscards.setDescription('Number of DHCP Replies discarded by the DHCP Relay.')
dhcpRlyAgntStat_untrustedDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 28), Counter32()).setLabel("dhcpRlyAgntStat-untrustedDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_untrustedDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_untrustedDiscards.setDescription('Number of untrusted messages discarded by the DHCP Relay.')
dhcpRlyAgntStat_maxHopDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 29), Counter32()).setLabel("dhcpRlyAgntStat-maxHopDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_maxHopDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_maxHopDiscards.setDescription('Number of messages discarded by the DHCP Relay due to exceeded max hop.')
dhcpRlyAgntStat_pktTooBig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 30), Counter32()).setLabel("dhcpRlyAgntStat-pktTooBig").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_pktTooBig.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_pktTooBig.setDescription('Number of messages forwarded without relay information by the DHCP Relay due to relay information exceeding max message size.')
dhcpRlyAgntStat_invalidGiaddrDiscards = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 31), Counter32()).setLabel("dhcpRlyAgntStat-invalidGiaddrDiscards").setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRlyAgntStat_invalidGiaddrDiscards.setStatus('current')
if mibBuilder.loadTexts: dhcpRlyAgntStat_invalidGiaddrDiscards.setDescription('Number of messages discarded by the DHCP Relay due to invalid giaddr in packet.')
regFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailureCount.setStatus('current')
if mibBuilder.loadTexts: regFailureCount.setDescription('The Total number or Registration Grant Failures.')
ntpLogSNMP = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 33), EventString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLogSNMP.setStatus('current')
if mibBuilder.loadTexts: ntpLogSNMP.setDescription('NTP Log')
uGPSPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uGPSPowerStatus.setStatus('current')
if mibBuilder.loadTexts: uGPSPowerStatus.setDescription('Current UGPS Power Status (UGPS capable APs only).')
rfOutDiscardRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutDiscardRate.setStatus('current')
if mibBuilder.loadTexts: rfOutDiscardRate.setDescription('Percentage of OutDiscards on the RF link (RF Overload %) in the last minute.')
autoUpdateGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoUpdateGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: autoUpdateGlobalStatus.setDescription('Status of the Auto-Update Command')
currentRadioFreqCarrier = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 7, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentRadioFreqCarrier.setStatus('current')
if mibBuilder.loadTexts: currentRadioFreqCarrier.setDescription('Current Radio Frequency Carrier')
ntpDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: ntpDomainNameAppend.setDescription("Select whether to append the configured management domain name to the configured trap names. For example, if dnsMgmtDomainName is set to 'example.com', ntpServer is set to 'ntp', and ntpDomainNameAppend is set to appendDomain, the ntpServer name used would be 'ntp.example.com'.")
ntpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer1.setStatus('current')
if mibBuilder.loadTexts: ntpServer1.setDescription('NTP Server 1 Address. Format is either an IP address or DNS name.')
ntpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer2.setStatus('current')
if mibBuilder.loadTexts: ntpServer2.setDescription('NTP Server 2 Address. Format is either an IP address or DNS name.')
ntpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer3.setStatus('current')
if mibBuilder.loadTexts: ntpServer3.setDescription('NTP Server 3 Address. Format is either an IP address or DNS name.')
dhcprDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcprDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: dhcprDomainNameAppend.setDescription("Select whether to append the configured management domain name to the configured trap names. For example, if dnsMgmtDomainName is set to 'example.com', dhcprServer is set to 'dhcpr', and dhcprDomainNameAppend is set to appendDomain, the dhcprServer name used would be 'dhcpr.example.com'.")
dhcprServer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcprServer.setStatus('current')
if mibBuilder.loadTexts: dhcprServer.setDescription('DHCP Server IP which will be used for forwarding DHCP messages by the DHCP Relay Agent in the MultiPoint AP. - Format is either an IP address or DNS name. - Default is 255.255.255.255 (broadcast).')
authDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDNSDomain", 0), ("enableDNSDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authDomainNameAppend.setStatus('current')
if mibBuilder.loadTexts: authDomainNameAppend.setDescription("Select whether to append the configured management domain name to the configured trap names. For example, if dnsMgmtDomainName is set to 'example.com', authServer1 is set to 'auth1', and authDomainNameAppend is set to appendDomain, the authServer1 name used would be 'auth1.example.com'.")
authServer1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer1.setStatus('current')
if mibBuilder.loadTexts: authServer1.setDescription('Authentication Server 1. Format is either an IP address or DNS name.')
authServer2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer2.setStatus('current')
if mibBuilder.loadTexts: authServer2.setDescription('Authentication Server 2. Format is either an IP address or DNS name.')
authServer3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer3.setStatus('current')
if mibBuilder.loadTexts: authServer3.setDescription('Authentication Server 3. Format is either an IP address or DNS name.')
authServer4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer4.setStatus('current')
if mibBuilder.loadTexts: authServer4.setDescription('Authentication Server 4. Format is either an IP address or DNS name.')
authServer5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authServer5.setStatus('current')
if mibBuilder.loadTexts: authServer5.setDescription('Authentication Server 5. Format is either an IP address or DNS name.')
acctDomainNameAppend = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableDomain", 0), ("appendDomain", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acctDomainNameAppend.setStatus('obsolete')
if mibBuilder.loadTexts: acctDomainNameAppend.setDescription('Obsoleted. Use whispApsDNS.authDomainNameAppend.')
clearLinkTableStats = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearLinkTableStats.setStatus('current')
if mibBuilder.loadTexts: clearLinkTableStats.setDescription('Setting this to a nonzero value will clear the link table stats.')
whispApsRFConfigRadios = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1), )
if mibBuilder.loadTexts: whispApsRFConfigRadios.setStatus('current')
if mibBuilder.loadTexts: whispApsRFConfigRadios.setDescription('Radio configuration table.')
whispApsRFConfigRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1), )
whispBoxRFPhysicalRadioEntry.registerAugmentions(("WHISP-APS-MIB", "whispApsRFConfigRadioEntry"))
whispApsRFConfigRadioEntry.setIndexNames(*whispBoxRFPhysicalRadioEntry.getIndexNames())
if mibBuilder.loadTexts: whispApsRFConfigRadioEntry.setStatus('current')
if mibBuilder.loadTexts: whispApsRFConfigRadioEntry.setDescription('Radio configuration entry.')
radioFreqCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("wired", 0)))).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioFreqCarrier.setStatus('current')
if mibBuilder.loadTexts: radioFreqCarrier.setDescription('RF Frequency. Please see the whispBoxRFPhysicalRadioFrequencies SNMP table for a list of available frequencies. 0: wired.')
radioDownlinkPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioDownlinkPercent.setStatus('current')
if mibBuilder.loadTexts: radioDownlinkPercent.setDescription('This is the percentage of frame data space allocated for downlink.')
radioMaxRange = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 3), Integer32()).setUnits('miles').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioMaxRange.setStatus('current')
if mibBuilder.loadTexts: radioMaxRange.setDescription('Access point max range.')
radioControlSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioControlSlots.setStatus('current')
if mibBuilder.loadTexts: radioControlSlots.setDescription('Total number of control slots for HW Scheduling Point-to-Mulitpoint mode (Not applicable for PtoP radios). For PMP450 the minimum is 1 control slot, others minimum is zero. Maximum control slots is 15.')
radioTransmitOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 5), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTransmitOutputPower.setStatus('current')
if mibBuilder.loadTexts: radioTransmitOutputPower.setDescription('Transmitter output power.')
radioColorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioColorCode.setStatus('current')
if mibBuilder.loadTexts: radioColorCode.setDescription('Color code.')
whispLinkTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4), )
if mibBuilder.loadTexts: whispLinkTable.setStatus('current')
if mibBuilder.loadTexts: whispLinkTable.setDescription('List of link test results')
whispLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1), ).setIndexNames((0, "WHISP-APS-MIB", "linkLUID"))
if mibBuilder.loadTexts: whispLinkEntry.setStatus('current')
if mibBuilder.loadTexts: whispLinkEntry.setDescription('List of link test results')
linkLUID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLUID.setStatus('current')
if mibBuilder.loadTexts: linkLUID.setDescription('LUID number.')
linkDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDescr.setStatus('current')
if mibBuilder.loadTexts: linkDescr.setDescription('A textual string containing information about the unit. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
linkPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPhysAddress.setStatus('current')
if mibBuilder.loadTexts: linkPhysAddress.setDescription('Physical Address of the unit.')
linkMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkMtu.setStatus('current')
if mibBuilder.loadTexts: linkMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
linkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSpeed.setStatus('current')
if mibBuilder.loadTexts: linkSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth.")
linkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: linkOperStatus.setDescription('This variable is not used.')
linkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInOctets.setStatus('current')
if mibBuilder.loadTexts: linkInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
linkInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: linkInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
linkInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: linkInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
linkInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInDiscards.setStatus('current')
if mibBuilder.loadTexts: linkInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
linkInError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInError.setStatus('current')
if mibBuilder.loadTexts: linkInError.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
linkInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: linkInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
linkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutOctets.setStatus('current')
if mibBuilder.loadTexts: linkOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
linkOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: linkOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
linkOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: linkOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
linkOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutDiscards.setStatus('current')
if mibBuilder.loadTexts: linkOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
linkOutError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutError.setStatus('current')
if mibBuilder.loadTexts: linkOutError.setDescription('The number of outbound packets that could not be transmitted because of errors.')
linkOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutQLen.setStatus('current')
if mibBuilder.loadTexts: linkOutQLen.setDescription('Number of packets in output packet queue.')
linkSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 0), ("inSession", 1), ("clearing", 2), ("reRegDnRst", 3), ("authChal", 4), ("registering", 5), ("notInUse", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSessState.setStatus('current')
if mibBuilder.loadTexts: linkSessState.setDescription('Current operational state of an interface. 0 = Idle 1 = In Session 2 = Clearing 3 = Re-registration downlink reset 4 = Authentication Challenge 5 = Registering 6 = Not in use')
linkESN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 20), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkESN.setStatus('current')
if mibBuilder.loadTexts: linkESN.setDescription('Link Electronic serial number. It is MAC address.')
linkRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRSSI.setStatus('current')
if mibBuilder.loadTexts: linkRSSI.setDescription('The average RSSI reading of all packets received from an SM. Applicable to FSK radios only.')
linkAveJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 22), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAveJitter.setStatus('current')
if mibBuilder.loadTexts: linkAveJitter.setDescription('The average Jitter reading of all packets received from an SM. Applicable to FSK radios only.')
linkLastJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 23), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLastJitter.setStatus('current')
if mibBuilder.loadTexts: linkLastJitter.setDescription('Last jitter value. Applicable to FSK radios only.')
linkAirDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAirDelay.setStatus('current')
if mibBuilder.loadTexts: linkAirDelay.setDescription('The current round trip air delay in bits measured between the AP and SM.')
linkRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRegCount.setStatus('current')
if mibBuilder.loadTexts: linkRegCount.setDescription('The number of times an SM has registered to an AP.')
linkReRegCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReRegCount.setStatus('current')
if mibBuilder.loadTexts: linkReRegCount.setDescription('The number of times an SM has tried to register with the AP while it still has an active session with the AP.')
linkTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTimeOut.setStatus('current')
if mibBuilder.loadTexts: linkTimeOut.setDescription('Link time out.')
linkLastRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLastRSSI.setStatus('current')
if mibBuilder.loadTexts: linkLastRSSI.setDescription('The last RSSI reading of all packets received from an SM. Applicable to FSK radios only.')
sessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionCount.setStatus('current')
if mibBuilder.loadTexts: sessionCount.setDescription('How many times has this mac been in/out of session.')
softwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('The software version of registered SM.')
softwareBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareBootVersion.setStatus('current')
if mibBuilder.loadTexts: softwareBootVersion.setDescription('The software boot version of registered SM.')
fpgaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaVersion.setStatus('current')
if mibBuilder.loadTexts: fpgaVersion.setDescription('The FPGA version of registered SM.')
linkSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSiteName.setStatus('current')
if mibBuilder.loadTexts: linkSiteName.setDescription('The site name of the registered SM.')
avgPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPowerLevel.setStatus('current')
if mibBuilder.loadTexts: avgPowerLevel.setDescription("The average power level of registered SM. For systems that support power control, this value can read 'NA' when the AP adjusts the transmit power of a SM until new packets are received from the SM with it transmitting at its new power level. For MIMO this is the combined receive power.")
lastPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastPowerLevel.setStatus('current')
if mibBuilder.loadTexts: lastPowerLevel.setDescription('The last power level of registered SM. For MIMO radios this is the combined receive power.')
sesDownLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesDownLinkRate.setStatus('current')
if mibBuilder.loadTexts: sesDownLinkRate.setDescription('Down link rate.')
sesDownLinkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesDownLinkLimit.setStatus('current')
if mibBuilder.loadTexts: sesDownLinkLimit.setDescription('Down link limit.')
sesUpLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesUpLinkRate.setStatus('current')
if mibBuilder.loadTexts: sesUpLinkRate.setDescription('Uplink rate.')
sesUpLinkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesUpLinkLimit.setStatus('current')
if mibBuilder.loadTexts: sesUpLinkLimit.setDescription('Uplink limit.')
adaptRate = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptRate.setStatus('current')
if mibBuilder.loadTexts: adaptRate.setDescription('Adapt rate of registered SM.')
sesLoUpCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesLoUpCIR.setStatus('current')
if mibBuilder.loadTexts: sesLoUpCIR.setDescription('Low priority up link CIR.')
sesLoDownCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesLoDownCIR.setStatus('current')
if mibBuilder.loadTexts: sesLoDownCIR.setDescription('Low priority down link CIR.')
sesHiUpCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesHiUpCIR.setStatus('current')
if mibBuilder.loadTexts: sesHiUpCIR.setDescription('High priority up link CIR.')
sesHiDownCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sesHiDownCIR.setStatus('current')
if mibBuilder.loadTexts: sesHiDownCIR.setDescription('High priority down link CIR.')
platformVer = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVer.setStatus('current')
if mibBuilder.loadTexts: platformVer.setDescription('Platform Version.')
smSessionTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 46), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSessionTmr.setStatus('current')
if mibBuilder.loadTexts: smSessionTmr.setDescription('SM session uptime')
smSessionSeqNumMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSessionSeqNumMismatch.setStatus('current')
if mibBuilder.loadTexts: smSessionSeqNumMismatch.setDescription('The count of how many sequence number mismatch between the AP/BHM and the SM/BHS during the authentication challenge and authentication response messages. This status is only valid in a system where encryption is enabled and no authentication server is configured.')
dataVCNum = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataVCNum.setStatus('current')
if mibBuilder.loadTexts: dataVCNum.setDescription('The normal priority Data VC number in use for this link.')
hiPriQEn = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiPriQEn.setStatus('current')
if mibBuilder.loadTexts: hiPriQEn.setDescription('Returns whether High Priority channel is enabled. On P7/P8 devices will return 0 always. Use p7p8HiPriQEn OID for P7/P8 radios.')
dataVCNumHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataVCNumHiQ.setStatus('current')
if mibBuilder.loadTexts: dataVCNumHiQ.setDescription('The high priority Data VC number in use for this link, if any. If 0, no High Priority channel is in place.')
linkInOctetsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInOctetsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInOctetsHiQ.setDescription('The total number of octets received on High Priority Queue, including framing characters.')
linkInUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUcastPktsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInUcastPktsHiQ.setDescription('The number of subnetwork-unicast packets on High Priority Queue delivered to a higher-layer protocol.')
linkInNUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInNUcastPktsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInNUcastPktsHiQ.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets on High Priority Queue delivered to a higher-layer protocol.')
linkInDiscardsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInDiscardsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInDiscardsHiQ.setDescription('The number of inbound packets on High Priority Queue which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
linkInErrorHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInErrorHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInErrorHiQ.setDescription('The number of inbound packets on High Priority Queue that contained errors preventing them from being deliverable to a higher-layer protocol.')
linkInUnknownProtosHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkInUnknownProtosHiQ.setStatus('current')
if mibBuilder.loadTexts: linkInUnknownProtosHiQ.setDescription('The number of packets received on High Priority Queue via the interface which were discarded because of an unknown or unsupported protocol.')
linkOutOctetsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutOctetsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutOctetsHiQ.setDescription('The total number of octets on High Priority Queue transmitted out of the interface, including framing characters.')
linkOutUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutUcastPktsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutUcastPktsHiQ.setDescription('The total number of packets on High Priority Queue that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
linkOutNUcastPktsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutNUcastPktsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutNUcastPktsHiQ.setDescription('The total number of packets on High Priority Queue that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
linkOutDiscardsHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutDiscardsHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutDiscardsHiQ.setDescription('The number of outbound packets on High Priority Queue which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
linkOutErrorHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutErrorHiQ.setStatus('current')
if mibBuilder.loadTexts: linkOutErrorHiQ.setDescription('The number of outbound packets on High Priority Queue that could not be transmitted because of errors.')
vcQOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcQOverflow.setStatus('current')
if mibBuilder.loadTexts: vcQOverflow.setDescription('The number of packets dropped due to Queue overflow on VC.')
vcQOverflowHiQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcQOverflowHiQ.setStatus('current')
if mibBuilder.loadTexts: vcQOverflowHiQ.setDescription('The number of packets dropped due to Queue overflow on High Priority VC, if enabled.')
p7p8HiPriQEn = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled-or-NA", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p7p8HiPriQEn.setStatus('current')
if mibBuilder.loadTexts: p7p8HiPriQEn.setDescription('Returns whether P7/P8 hi priority channel is enabled. On non-P7/P8 devices will return 0 always.')
p7p8HiPriQ = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p7p8HiPriQ.setStatus('current')
if mibBuilder.loadTexts: p7p8HiPriQ.setDescription('Hi Priority Queue statistics for P7 or P8 radios, if enabled. If not enabled, or not a P7 or P8, will return 0.')
linkAirDelayns = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAirDelayns.setStatus('current')
if mibBuilder.loadTexts: linkAirDelayns.setDescription('The current round trip air delay in nanoseconds measured between the AP and SM.')
linkQualityAPData = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkQualityAPData.setStatus('current')
if mibBuilder.loadTexts: linkQualityAPData.setDescription("The current link quality of the SM's data from the AP. This is relative to the current modulation rate (1X, 2X, 3X, etc).")
linkManagementIP = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 69), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkManagementIP.setStatus('current')
if mibBuilder.loadTexts: linkManagementIP.setDescription('Management IP Address of the unit. 0 indicates SM is not publically addressable.')
linkFragmentsReceived1XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived1XVertical.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived1XVertical.setDescription('Engineering use only. Number of fragments received in 1x (QPSK) modulation. For GenII OFDM and forward. For MIMO this is the vertical path.')
linkFragmentsReceived2XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived2XVertical.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived2XVertical.setDescription('Engineering use only. Number of fragments received in 2x (16-QAM) modulation. For GenII OFDM and forward. For MIMO this is the vertical path.')
linkFragmentsReceived3XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived3XVertical.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived3XVertical.setDescription('Engineering use only. Number of fragments received in 3x (64-QAM) modulation. For GenII OFDM and forward. For MIMO this is the vertical path.')
linkFragmentsReceived4XVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived4XVertical.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived4XVertical.setDescription('Engineering use only. Number of fragments received in 4x (256-QAM) modulation. For GenII OFDM and forward. For MIMO this is the vertical path.')
signalToNoiseRatioVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioVertical.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioVertical.setDescription('Estimate of the receive signal to noise ratio in dB. For GenII OFDM and forward. For MIMO this is the vertical path.')
radiusReplyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 75), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusReplyMsg.setStatus('current')
if mibBuilder.loadTexts: radiusReplyMsg.setDescription('The RADIUS Reply-Msg populated for the SM. This is only valid when using a backen AAA server.')
autoUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: autoUpdateStatus.setDescription('status of the auto update process')
radiusFramedIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 77), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusFramedIPAddress.setStatus('current')
if mibBuilder.loadTexts: radiusFramedIPAddress.setDescription('This Attribute indicates the IP address to be configured for the SM management interface.')
radiusFramedIPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 78), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusFramedIPNetmask.setStatus('current')
if mibBuilder.loadTexts: radiusFramedIPNetmask.setDescription('This Attribute indicates the netmask to be configured for the SM management interface.')
radiusDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 79), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: radiusDefaultGateway.setDescription('This Attribute indicates the default gateway to be configured for the SM management interface.')
linkFragmentsReceived1XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived1XHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived1XHorizontal.setDescription('Engineering use only. Number of fragments received in 1x (QPSK) modulation. For MIMO only. For MIMO this is the horizontal path.')
linkFragmentsReceived2XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived2XHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived2XHorizontal.setDescription('Engineering use only. Number of fragments received in 2x (16-QAM) modulation. For MIMO only. For MIMO this is the horizontal path.')
linkFragmentsReceived3XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived3XHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived3XHorizontal.setDescription('Engineering use only. Number of fragments received in 3x (64-QAM) modulation. For MIMO only. For MIMO this is the horizontal path.')
linkFragmentsReceived4XHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFragmentsReceived4XHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkFragmentsReceived4XHorizontal.setDescription('Engineering use only. Number of fragments received in 4x (256-QAM) modulation. For MIMO only. For MIMO this is the horizontal path.')
signalToNoiseRatioHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalToNoiseRatioHorizontal.setStatus('current')
if mibBuilder.loadTexts: signalToNoiseRatioHorizontal.setDescription('Estimate of the receive signal to noise ratio in dB. MIMO radios only. For MIMO this is the horizontal path.')
linkSignalStrengthRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSignalStrengthRatio.setStatus('current')
if mibBuilder.loadTexts: linkSignalStrengthRatio.setDescription('Signal Strength Ratio in dB is the power received by the vertical antenna input (dB) - power received by the horizontal antenna input (dB). MIMO radios only.')
linkRadioDbmHorizontal = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 87), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRadioDbmHorizontal.setStatus('current')
if mibBuilder.loadTexts: linkRadioDbmHorizontal.setDescription('Receive power level of the horizontal antenna in dBm. MIMO radios only.')
linkRadioDbmVertical = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRadioDbmVertical.setStatus('current')
if mibBuilder.loadTexts: linkRadioDbmVertical.setDescription('Receive power level of the vertical antenna in dBm. MIMO radios only.')
maxSMTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxSMTxPwr.setStatus('current')
if mibBuilder.loadTexts: maxSMTxPwr.setDescription('Returns whether SM is transmitting at its configured max power level.')
productType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("pmp450MIMOOFDM", 1), ("pmp430SISOOFDM", 2), ("pmp450SISOOFDM", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
if mibBuilder.loadTexts: productType.setDescription('Returns which type of product the SM is. PMP450 APs only.')
linkAdaptRateLowPri = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdaptRateLowPri.setStatus('current')
if mibBuilder.loadTexts: linkAdaptRateLowPri.setDescription('The current transmitting rate of the low priority VC. 0 : SM is not in session 1 : 1X QPSK SISO 2 : 2X 16-QAM SISO or QPSK MIMO 3 : 3X 64-QAM SISO 4 : 4X 256-QAM SISO or 16-QAM MIMO 6 : 6X 64-QAM MIMO 8 : 8X 256-QAM MIMO')
linkAdaptRateHighPri = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 4, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 6, 8))).clone(namedValues=NamedValues(("noHighPriorityChannel", -1), ("noSession", 0), ("rate1X", 1), ("rate2X", 2), ("rete3X", 3), ("rate4X", 4), ("rate6X", 6), ("rate8X", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdaptRateHighPri.setStatus('current')
if mibBuilder.loadTexts: linkAdaptRateHighPri.setDescription('The current transmitting rate of the high priority VC. -1 : High Priority Channel not configured 0 : SM is not in session 1 : 1X QPSK SISO 2 : 2X 16-QAM SISO or QPSK MIMO 3 : 3X 64-QAM SISO 4 : 4X 256-QAM SISO or 16-QAM MIMO 6 : 6X 64-QAM MIMO 8 : 8X 256-QAM MIMO')
whispFailedRegTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8), )
if mibBuilder.loadTexts: whispFailedRegTable.setStatus('current')
if mibBuilder.loadTexts: whispFailedRegTable.setDescription('List of link test results')
whispFailedRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1), ).setIndexNames((0, "WHISP-APS-MIB", "regFailSeqNum"))
if mibBuilder.loadTexts: whispFailedRegEntry.setStatus('current')
if mibBuilder.loadTexts: whispFailedRegEntry.setDescription('List of Failed ESNs')
regGrantReason = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("reggnt-valid", 0), ("reggnt-outofrange", 1), ("reggnt-nolUIDS", 2), ("reggnt-rerange", 3), ("reggnt-authfail", 4), ("reggnt-encryptfail", 5), ("reggnt-poweradjust", 6), ("reggnt-novcs", 7), ("reggnt-failvcreserve", 8), ("reggnt-failvcactive", 9), ("reggnt-failhivcdata", 10), ("reggnt-failsmlimit", 11), ("reggnt-fail95orabove", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: regGrantReason.setStatus('current')
if mibBuilder.loadTexts: regGrantReason.setDescription('The registration failure reason')
regFailESN = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailESN.setStatus('current')
if mibBuilder.loadTexts: regFailESN.setDescription('The ESN that failed to register')
regFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailTime.setStatus('current')
if mibBuilder.loadTexts: regFailTime.setDescription('The number of ticks that occurred when the ESN failed to register')
regFailSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailSeqNum.setStatus('current')
if mibBuilder.loadTexts: regFailSeqNum.setDescription('The sequence when the register failure was given.')
regFailReasonText = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regFailReasonText.setStatus('current')
if mibBuilder.loadTexts: regFailReasonText.setDescription('The text description of the failure.')
mibBuilder.exportSymbols("WHISP-APS-MIB", whispApsConfigGroup=whispApsConfigGroup, radioMaxRange=radioMaxRange, linkOutNUcastPktsHiQ=linkOutNUcastPktsHiQ, regFailESN=regFailESN, dataSlotUp=dataSlotUp, linkOutQLen=linkOutQLen, linkInDiscards=linkInDiscards, authMode=authMode, sesLoUpCIR=sesLoUpCIR, gpsSatellitesTracked=gpsSatellitesTracked, regFailReasonText=regFailReasonText, fragments2xDwnLinkVertical=fragments2xDwnLinkVertical, sesHiDownCIR=sesHiDownCIR, bitErrorsCorrected2xUpLinkVertical=bitErrorsCorrected2xUpLinkVertical, apLinkSpeed=apLinkSpeed, smIsolation=smIsolation, linkInNUcastPkts=linkInNUcastPkts, upLinkEff=upLinkEff, allowedIPAccessNMLength1=allowedIPAccessNMLength1, rfFreqCaralt2=rfFreqCaralt2, whispUsrAuthSharedSecret2=whispUsrAuthSharedSecret2, linkFragmentsReceived3XVertical=linkFragmentsReceived3XVertical, dataVCNum=dataVCNum, whispApsEvent=whispApsEvent, dhcpRelayAgentEnable=dhcpRelayAgentEnable, radiusReplyMsg=radiusReplyMsg, testLUID=testLUID, allowedIPAccess2=allowedIPAccess2, whispUsrAuthSharedSecret1=whispUsrAuthSharedSecret1, signalToNoiseRatioDownLinkHorizontal=signalToNoiseRatioDownLinkHorizontal, upLnkLimit=upLnkLimit, whispUsrAuthPhase1=whispUsrAuthPhase1, linkTestNumPkt=linkTestNumPkt, linkInUcastPktsHiQ=linkInUcastPktsHiQ, fragments2xDwnLinkHorizontal=fragments2xDwnLinkHorizontal, ntpServerIp=ntpServerIp, fskSMTxPwrCntl=fskSMTxPwrCntl, dhcpRlyAgntStat_untrustedDiscards=dhcpRlyAgntStat_untrustedDiscards, radioControlSlots=radioControlSlots, bitErrorsCorrected3xDwnLinkVertical=bitErrorsCorrected3xDwnLinkVertical, actionListFilename=actionListFilename, syslogServerPort=syslogServerPort, dlnkMcastCIR=dlnkMcastCIR, linkLastRSSI=linkLastRSSI, signalToNoiseRatioDownLinkVertical=signalToNoiseRatioDownLinkVertical, syslogDomainNameAppend=syslogDomainNameAppend, autoSyncStatus=autoSyncStatus, whispApsConfig=whispApsConfig, linkInUnknownProtosHiQ=linkInUnknownProtosHiQ, linkFragmentsReceived2XVertical=linkFragmentsReceived2XVertical, linkQualityAPData=linkQualityAPData, asIP1=asIP1, linkAirDelayns=linkAirDelayns, resetSesStats=resetSesStats, linkOutOctetsHiQ=linkOutOctetsHiQ, remoteSpectrumAnalyzerLUID=remoteSpectrumAnalyzerLUID, radioDownlinkPercent=radioDownlinkPercent, gpsInvalidMsg=gpsInvalidMsg, dlnkBcastCIR=dlnkBcastCIR, linkInOctetsHiQ=linkInOctetsHiQ, avgPowerLevel=avgPowerLevel, linkOutDiscardsHiQ=linkOutDiscardsHiQ, dhcpRlyAgntStat_pktTooBig=dhcpRlyAgntStat_pktTooBig, uGPSPower=uGPSPower, rfOLEnable=rfOLEnable, linkESN=linkESN, broadcastRetryCount=broadcastRetryCount, whispApsDNS=whispApsDNS, authServer3=authServer3, rfOLTrap=rfOLTrap, regFailTime=regFailTime, currentRadioFreqCarrier=currentRadioFreqCarrier, softwareVersion=softwareVersion, ntpServer2=ntpServer2, authKeyAp=authKeyAp, linkOutErrorHiQ=linkOutErrorHiQ, vcQOverflowHiQ=vcQOverflowHiQ, bitErrorsCorrected4xUpLinkVertical=bitErrorsCorrected4xUpLinkVertical, ntpServer3=ntpServer3, dfsStatusPrimary=dfsStatusPrimary, scheduleWhitening=scheduleWhitening, dhcpRlyAgntStat_respRelayed=dhcpRlyAgntStat_respRelayed, dhcpRlyAgntStat_respDiscards=dhcpRlyAgntStat_respDiscards, bitErrorsCorrected1xDwnLinkVertical=bitErrorsCorrected1xDwnLinkVertical, dhcpRlyAgntStat_reqRecvd=dhcpRlyAgntStat_reqRecvd, regFailSeqNum=regFailSeqNum, whispApsLinkTestConfig=whispApsLinkTestConfig, txPwrLevel=txPwrLevel, radiusPort=radiusPort, regGrantReason=regGrantReason, bitErrorsCorrected4xUpLinkHorizontal=bitErrorsCorrected4xUpLinkHorizontal, linkOutError=linkOutError, bitErrorsCorrected4xDwnLinkVertical=bitErrorsCorrected4xDwnLinkVertical, displayAPEval=displayAPEval, softwareBootVersion=softwareBootVersion, systemTime=systemTime, authSharedSecret3=authSharedSecret3, gpsRestartCount=gpsRestartCount, regulatoryStatus=regulatoryStatus, linkPhysAddress=linkPhysAddress, fragments4xDwnLinkHorizontal=fragments4xDwnLinkHorizontal, allowedIPAccess3=allowedIPAccess3, fragments3xUpLinkVertical=fragments3xUpLinkVertical, whispApsRFConfig=whispApsRFConfig, authDomainNameAppend=authDomainNameAppend, untranslatedArp=untranslatedArp, dhcpRlyAgntStat_reqDiscards=dhcpRlyAgntStat_reqDiscards, whispApsControls=whispApsControls, whispUsrAuthSharedSecret3=whispUsrAuthSharedSecret3, regulatoryCheckFailedNoRegionAp=regulatoryCheckFailedNoRegionAp, dwnLnkDataRate=dwnLnkDataRate, linkAveJitter=linkAveJitter, clearLinkTableStats=clearLinkTableStats, expDwnFragCount=expDwnFragCount, radioTransmitOutputPower=radioTransmitOutputPower, whispUsrAcctSvr1=whispUsrAcctSvr1, whispRegStatus=whispRegStatus, downLinkEff=downLinkEff, syslogServerAddr=syslogServerAddr, whispRegLost=whispRegLost, remoteSpectrumAnalysisDuration=remoteSpectrumAnalysisDuration, linkTestWithDualPath=linkTestWithDualPath, dfsStatusAlt2=dfsStatusAlt2, rfTelnetAccess=rfTelnetAccess, dataSlotDwn=dataSlotDwn, dhcpRlyAgntStat_respRecvd=dhcpRlyAgntStat_respRecvd, numCtrSlotHi=numCtrSlotHi, regCount=regCount, ntpLogSNMP=ntpLogSNMP, whispApsFailedRegTableGroup=whispApsFailedRegTableGroup, regulatoryApCheckInvalidChanFailed=regulatoryApCheckInvalidChanFailed, ntpDomainNameAppend=ntpDomainNameAppend, p7p8HiPriQ=p7p8HiPriQ, radiusFramedIPNetmask=radiusFramedIPNetmask, sesLoDownCIR=sesLoDownCIR, numCtlSlotsHW=numCtlSlotsHW, authServer5=authServer5, linkLUID=linkLUID, p7p8HiPriQEn=p7p8HiPriQEn, whispRadarDetected=whispRadarDetected, dhcpRlyAgntStat_reqRelayed=dhcpRlyAgntStat_reqRelayed, ofdmSMRcvTargetLvl=ofdmSMRcvTargetLvl, signalToNoiseRatioUpLinkVertical=signalToNoiseRatioUpLinkVertical, linkInErrorHiQ=linkInErrorHiQ, bitErrorsCorrected2xDwnLinkVertical=bitErrorsCorrected2xDwnLinkVertical, linkTestAction=linkTestAction, fragments4xUpLinkVertical=fragments4xUpLinkVertical, whispApRegulatoryEvent=whispApRegulatoryEvent, linkLastJitter=linkLastJitter, apVlanOverride=apVlanOverride, dataVCNumHiQ=dataVCNumHiQ, dfsStatus=dfsStatus, lastPowerLevel=lastPowerLevel, berModSelect=berModSelect, platformVer=platformVer, whispApRFOverloadEvent=whispApRFOverloadEvent, linkManagementIP=linkManagementIP, fragments2xUpLinkHorizontal=fragments2xUpLinkHorizontal, asIP5=asIP5, qinqEthType=qinqEthType, whispApsLinkTestResult=whispApsLinkTestResult, lanMaskAp=lanMaskAp, whispDefKeyUsed=whispDefKeyUsed, rfPPPoEPADIForwarding=rfPPPoEPADIForwarding, whispRegFailure=whispRegFailure, hiPriQEn=hiPriQEn, bitErrorsCorrected2xDwnLinkHorizontal=bitErrorsCorrected2xDwnLinkHorizontal, whispApsNotifGroup=whispApsNotifGroup, radioSlicingAp=radioSlicingAp, apBeaconInfo=apBeaconInfo, linkTestDuration=linkTestDuration, ipAccessFilterEnable=ipAccessFilterEnable, numCtlSlotsReserveHigh=numCtlSlotsReserveHigh, rfOutDiscardRate=rfOutDiscardRate, uAcksReservHigh=uAcksReservHigh, lanIpAp=lanIpAp, gpsSyncStatus=gpsSyncStatus, apRateAdapt=apRateAdapt, sesHiUpCIR=sesHiUpCIR, whispGPSInSync=whispGPSInSync, linkAirDelay=linkAirDelay, apRxDelay=apRxDelay, gpsLongitude=gpsLongitude, linkSpeed=linkSpeed, maxDwnLinkIndex=maxDwnLinkIndex, linkAdaptRateHighPri=linkAdaptRateHighPri, onlyAllowVer95OrAbove=onlyAllowVer95OrAbove, colorCodeRescanIdleTimer=colorCodeRescanIdleTimer, upLnkAckSlot=upLnkAckSlot, numUAckSlots=numUAckSlots, berMode=berMode, maxRange=maxRange, sectorID=sectorID, gpsSyncSource=gpsSyncSource, fragments3xDwnLinkVertical=fragments3xDwnLinkVertical, upLnkAckSlotHi=upLnkAckSlotHi, gpsReInitCount=gpsReInitCount, maxSMTxPwr=maxSMTxPwr, dwnLnkData=dwnLnkData, linkMtu=linkMtu, linkInDiscardsHiQ=linkInDiscardsHiQ, radiusFramedIPAddress=radiusFramedIPAddress, regFailureCount=regFailureCount, linkAdaptRateLowPri=linkAdaptRateLowPri, sesDownLinkRate=sesDownLinkRate, bitErrorsCorrected3xUpLinkHorizontal=bitErrorsCorrected3xUpLinkHorizontal, fskSMRcvTargetLvl=fskSMRcvTargetLvl, testDuration=testDuration, whispFailedRegEntry=whispFailedRegEntry, fpgaVersion=fpgaVersion, multicastVCDataRate=multicastVCDataRate, allowedIPAccess1=allowedIPAccess1, updateAppAddress=updateAppAddress, asIP2=asIP2, encryptDwBroadcast=encryptDwBroadcast, remoteSpectrumAnalyzerScanBandwidth=remoteSpectrumAnalyzerScanBandwidth, linkTestMode=linkTestMode, radiusAcctPort=radiusAcctPort, numCtrSlot=numCtrSlot, maxUpLinkIndex=maxUpLinkIndex, actUpLinkIndex=actUpLinkIndex, whispLinkTestGroup=whispLinkTestGroup, whispGPSOutSync=whispGPSOutSync, vcQOverflow=vcQOverflow, whispApsGroups=whispApsGroups, rfFreqCarrier=rfFreqCarrier, PYSNMP_MODULE_ID=whispApsMibModule, accountingInterimUpdateInterval=accountingInterimUpdateInterval, linkInError=linkInError, tslBridging=tslBridging, authKeyOptionAP=authKeyOptionAP, timeZone=timeZone, rfFreqCaralt1=rfFreqCaralt1, linkReRegCount=linkReRegCount, upLinkRate=upLinkRate, dhcprServer=dhcprServer, linkRadioDbmHorizontal=linkRadioDbmHorizontal, dwnLnkLimit=dwnLnkLimit, linkTimeOut=linkTimeOut, linkFragmentsReceived1XHorizontal=linkFragmentsReceived1XHorizontal, syslogXmitAP=syslogXmitAP, fragments1xDwnLinkHorizontal=fragments1xDwnLinkHorizontal, autoUpdateStatus=autoUpdateStatus, defaultGwAp=defaultGwAp, linkOutDiscards=linkOutDiscards, signalToNoiseRatioUpLinkHorizontal=signalToNoiseRatioUpLinkHorizontal, whispGPSStats=whispGPSStats, radioColorCode=radioColorCode, regTrap=regTrap, bridgeFloodUnknownsEnable=bridgeFloodUnknownsEnable, multicastRetryCount=multicastRetryCount, radioFreqCarrier=radioFreqCarrier, whispLinkEntry=whispLinkEntry, lastSesStatsReset=lastSesStatsReset)
mibBuilder.exportSymbols("WHISP-APS-MIB", gpsTrackingMode=gpsTrackingMode, linkTestPktLength=linkTestPktLength, enableAutoupdate=enableAutoupdate, gpsTrap=gpsTrap, upLnkMaxBurstDataRate=upLnkMaxBurstDataRate, linkOperStatus=linkOperStatus, whispUsrAcctSvr3=whispUsrAcctSvr3, dhcpRlyAgntStat_maxHopDiscards=dhcpRlyAgntStat_maxHopDiscards, linkTestSNRCalculation=linkTestSNRCalculation, privateIp=privateIp, whispFailedRegTable=whispFailedRegTable, acctDomainNameAppend=acctDomainNameAppend, fragments1xUpLinkHorizontal=fragments1xUpLinkHorizontal, linkRegCount=linkRegCount, dwnLnkMaxBurstDataRate=dwnLnkMaxBurstDataRate, whispApsStatus=whispApsStatus, adaptRate=adaptRate, linkOutNUcastPkts=linkOutNUcastPkts, fragments1xUpLinkVertical=fragments1xUpLinkVertical, linkSessState=linkSessState, maxRegSMCount=maxRegSMCount, highPriorityUpLnkPct=highPriorityUpLnkPct, whispApsRegEvent=whispApsRegEvent, dataSlotUpHi=dataSlotUpHi, whispWebUseAuthServer=whispWebUseAuthServer, bitErrorsCorrected3xUpLinkVertical=bitErrorsCorrected3xUpLinkVertical, radiusDefaultGateway=radiusDefaultGateway, linkFragmentsReceived1XVertical=linkFragmentsReceived1XVertical, whispApsMibModule=whispApsMibModule, whispApsDfsEvent=whispApsDfsEvent, actDwnFragCount=actDwnFragCount, apConfigAdjacentChanSupport=apConfigAdjacentChanSupport, dwnLnkAckSlot=dwnLnkAckSlot, linkOutUcastPktsHiQ=linkOutUcastPktsHiQ, linkRSSI=linkRSSI, dAcksReservHigh=dAcksReservHigh, linkSiteName=linkSiteName, linkSignalStrengthRatio=linkSignalStrengthRatio, linkOutOctets=linkOutOctets, smSessionTmr=smSessionTmr, gpsFreeRun=gpsFreeRun, fragments4xUpLinkHorizontal=fragments4xUpLinkHorizontal, linkInUcastPkts=linkInUcastPkts, actDwnLinkIndex=actDwnLinkIndex, linkTestStatus=linkTestStatus, gpsReceiverInfo=gpsReceiverInfo, limitFreqBand900=limitFreqBand900, whispUsrAcctSvr2=whispUsrAcctSvr2, fragments3xDwnLinkHorizontal=fragments3xDwnLinkHorizontal, authServer1=authServer1, numCtlSlots=numCtlSlots, sessionCount=sessionCount, fragments1xDwnLinkVertical=fragments1xDwnLinkVertical, smSessionSeqNumMismatch=smSessionSeqNumMismatch, whispApsGPS=whispApsGPS, actUpFragCount=actUpFragCount, productType=productType, upLnkDataRate=upLnkDataRate, verifyGPSChecksum=verifyGPSChecksum, fragments2xUpLinkVertical=fragments2xUpLinkVertical, syslogXmitSMs=syslogXmitSMs, authServer2=authServer2, sesUpLinkRate=sesUpLinkRate, fragments4xDwnLinkVertical=fragments4xDwnLinkVertical, gpsSatellitesVisible=gpsSatellitesVisible, dfsStatusAlt1=dfsStatusAlt1, authServer4=authServer4, linkDescr=linkDescr, linkFragmentsReceived3XHorizontal=linkFragmentsReceived3XHorizontal, allowedIPAccessNMLength3=allowedIPAccessNMLength3, radioTxGainAp=radioTxGainAp, txSpreading=txSpreading, gpsStatus=gpsStatus, linkFragmentsReceived4XHorizontal=linkFragmentsReceived4XHorizontal, bitErrorsCorrected1xUpLinkVertical=bitErrorsCorrected1xUpLinkVertical, uGPSPowerStatus=uGPSPowerStatus, whispApsRFConfigRadioEntry=whispApsRFConfigRadioEntry, expUpFragCount=expUpFragCount, colorCodeRescanTimer=colorCodeRescanTimer, bitErrorsCorrected1xDwnLinkHorizontal=bitErrorsCorrected1xDwnLinkHorizontal, dfsConfig=dfsConfig, gpsTime=gpsTime, linkInOctets=linkInOctets, asIP4=asIP4, gpsHeight=gpsHeight, radioMode=radioMode, airLinkSecurity=airLinkSecurity, whispApsLinkTableGroup=whispApsLinkTableGroup, whispRadarEnd=whispRadarEnd, lastNTPTime=lastNTPTime, gpsOutputEn=gpsOutputEn, accountingSmReAuthInterval=accountingSmReAuthInterval, linkFragmentsReceived4XVertical=linkFragmentsReceived4XVertical, fragments3xUpLinkHorizontal=fragments3xUpLinkHorizontal, configSource=configSource, bitErrorsCorrected2xUpLinkHorizontal=bitErrorsCorrected2xUpLinkHorizontal, rfOLThreshold=rfOLThreshold, authSharedSecret1=authSharedSecret1, dhcprDomainNameAppend=dhcprDomainNameAppend, downLinkRate=downLinkRate, dropSession=dropSession, gpsDate=gpsDate, authSharedSecret2=authSharedSecret2, linkFragmentsReceived2XHorizontal=linkFragmentsReceived2XHorizontal, whispRegComplete=whispRegComplete, bitErrorsCorrected1xUpLinkHorizontal=bitErrorsCorrected1xUpLinkHorizontal, allowedIPAccessNMLength2=allowedIPAccessNMLength2, linkTestError=linkTestError, gpsAntennaConnection=gpsAntennaConnection, encryptionMode=encryptionMode, linkRadioDbmVertical=linkRadioDbmVertical, numDAckSlots=numDAckSlots, asIP3=asIP3, linkInNUcastPktsHiQ=linkInNUcastPktsHiQ, sesDownLinkLimit=sesDownLinkLimit, signalToNoiseRatioVertical=signalToNoiseRatioVertical, dwnLnkAckSlotHi=dwnLnkAckSlotHi, linkInUnknownProtos=linkInUnknownProtos, bitErrorsCorrected4xDwnLinkHorizontal=bitErrorsCorrected4xDwnLinkHorizontal, bhReReg=bhReReg, whispApsLink=whispApsLink, linkTestLUID=linkTestLUID, bitErrorsCorrected3xDwnLinkHorizontal=bitErrorsCorrected3xDwnLinkHorizontal, regulatoryApCheckInvalidChBwFailed=regulatoryApCheckInvalidChBwFailed, sesUpLinkLimit=sesUpLinkLimit, vlanEnable=vlanEnable, autoUpdateGlobalStatus=autoUpdateGlobalStatus, whispGPSEvent=whispGPSEvent, signalToNoiseRatioHorizontal=signalToNoiseRatioHorizontal, whispLinkTable=whispLinkTable, whispApsRFConfigRadios=whispApsRFConfigRadios, ntpServer1=ntpServer1, gpsInput=gpsInput, dhcpRelayAgentSrvrIP=dhcpRelayAgentSrvrIP, dhcpRlyAgntStat_invalidGiaddrDiscards=dhcpRlyAgntStat_invalidGiaddrDiscards, gpsLatitude=gpsLatitude, linkOutUcastPkts=linkOutUcastPkts, rfLinkOverloadCondition=rfLinkOverloadCondition)
