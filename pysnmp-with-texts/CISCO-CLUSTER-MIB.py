#
# PySNMP MIB module CISCO-CLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CLUSTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Unsigned32, Counter32, Counter64, IpAddress, Integer32, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Bits, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "Counter32", "Counter64", "IpAddress", "Integer32", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Bits", "ObjectIdentity", "MibIdentifier")
DisplayString, TAddress, TextualConvention, RowStatus, TDomain, TimeStamp, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TAddress", "TextualConvention", "RowStatus", "TDomain", "TimeStamp", "MacAddress")
ciscoClusterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 134))
ciscoClusterMIB.setRevisions(('2005-11-18 00:00', '1999-07-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoClusterMIB.setRevisionsDescriptions(('Updated the imports such that Unsigned32 is imported from SNMPv2-SMI instead of CISCO-TC. Re-ordered the imports such that the SNMPv2 imports are imported first. Added a new NOTIFICATION GROUP ciscoClusterNotificationGroup to include the notification ccStatusMemberStatusChange. Also deprecated the old MODULE-COMPLIANCE ciscoClusterCompliance, and added a new MODULE-COMPLIANCE ciscoClusterComplianceRev1 such that its MANDATORY-GROUPS include this new NOTIFICATION GROUP and all the MANDATORY-GROUPS of ciscoClusterCompliance.', 'Initial version of this mib.',))
if mibBuilder.loadTexts: ciscoClusterMIB.setLastUpdated('200511180000Z')
if mibBuilder.loadTexts: ciscoClusterMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoClusterMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive, San Jose CA 95134-1706. USA Tel: +1 800 553-NETS E-mail: cs-sibu@cisco.com')
if mibBuilder.loadTexts: ciscoClusterMIB.setDescription("The MIB module for the management of a group of devices called a 'cluster'. A cluster comprises: 1. A command switch, which is a device that can provide a single point of management (including SNMP, Web Console and CLI/Telnet Console) for the devices in the cluster; 2. Zero or more expansion switches, or called the cluster members throughout the context of this MIB, which are devices that can be managed via a command switch. The command switch is also considered as a cluster member. Thus it has an entry in the MIB tables defined below for cluster members. Only the command switch IP address, passwords, and SNMP community strings need to be configured in order to provide management access to members of the cluster. The Entity MIB is cross-referenced from this MIB for some of its table entries, which contain useful information about a cluster. For example, in the Entity MIB, there is the logical table which contains the community string. This information is used to access detailed management information for some logical entity (the cluster, in this case). To determine if a particular device can be a command switch or a member switch please refer to the device's user's guide.")
ciscoClusterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 134, 1))
ccStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1))
ccMember = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 2))
ccCandidate = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 3))
ccStatusClusterName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccStatusClusterName.setStatus('current')
if mibBuilder.loadTexts: ccStatusClusterName.setDescription('The name of the cluster. Cluster command switch functionality is only enabled if this object is a non-NULL string. Strings containing all blanks or a NULL string will disable the cluster. This object and ccStatusClusterMode in this MIB are the only objects that will be instantiated if the command switch functionality is not enabled.')
ccStatusClusterMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commandDevice", 1), ("memberDevice", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccStatusClusterMode.setStatus('current')
if mibBuilder.loadTexts: ccStatusClusterMode.setDescription("The mode of the device. A device can become a member switch only when it is added to the cluster at the command switch. For devices that do not belong to any cluster, the ccStatusClusterMode is set to 'none'.")
ccStatusCommanderTDomain = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 3), TDomain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccStatusCommanderTDomain.setStatus('current')
if mibBuilder.loadTexts: ccStatusCommanderTDomain.setDescription('Indicates the kind of transport service used by the command switch of the cluster. Possible values for this object, such as snmpUDPDomain, are defined in the Transport Mappings for SNMPv2 document (RFC 1906).')
ccStatusCommanderTAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 4), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccStatusCommanderTAddress.setStatus('current')
if mibBuilder.loadTexts: ccStatusCommanderTAddress.setDescription("The transport service address of the command switch of the cluster. The address is formatted according to the corresponding value of ccStatusCommanderTDomain. For snmpUDPDomain, a TAddress is 6 octets long, the initial 4 octets containing the IP-address in network-byte order and the last 2 containing the UDP port in network-byte order. Consult 'Transport Mappings for Version 2 of the Simple Network Management Protocol' (RFC 1906) for further information on snmpUDPDomain.")
ccStatusCommanderMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccStatusCommanderMacAddress.setStatus('current')
if mibBuilder.loadTexts: ccStatusCommanderMacAddress.setDescription('The management MAC address of the command switch of the cluster.')
ccStatusTimeOfLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccStatusTimeOfLastChange.setStatus('current')
if mibBuilder.loadTexts: ccStatusTimeOfLastChange.setDescription("The value of sysUpTime on the command switch when the last time the value of an instance of ccMemberOperStatus changed. The value 0 indicates that no member's status has ever changed since commander system initialization.")
ccStatusLastNMSAddMemberTDomain = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 7), TDomain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccStatusLastNMSAddMemberTDomain.setStatus('current')
if mibBuilder.loadTexts: ccStatusLastNMSAddMemberTDomain.setDescription('Indicates the kind of transport service used by the the last NMS tried to add a member to the cluster.')
ccStatusLastNMSAddMemberTAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 8), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccStatusLastNMSAddMemberTAddress.setStatus('current')
if mibBuilder.loadTexts: ccStatusLastNMSAddMemberTAddress.setDescription('The transport service address of the last NMS which tried to add a member to the cluster. The address is formatted according to the corresponding value of ccStatusLastNMSAddMemberTDomain.')
ccStatusLastFailureAddMember = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("overmax", 3), ("noncandidate", 4), ("memberNumberInUse", 5), ("unreachable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccStatusLastFailureAddMember.setStatus('current')
if mibBuilder.loadTexts: ccStatusLastFailureAddMember.setDescription('The reason why the last NMS was unable to add a switch to be a member of the cluster. password: The member has an enable password configured. overmax: Adding the member exceeds the maximum number of cluster members supported by the command switch. See ccStatusMaxNumberOfMembers. noncandidate: The member is not a candidate switch, or it does not show up in the candidate table. memberNumberInUse: The member number is used by an existing member in the cluster. unreachable: The member is a candidate but is unreachable or has no connectivity.')
ccStatusMaxNumberOfMembers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccStatusMaxNumberOfMembers.setStatus('current')
if mibBuilder.loadTexts: ccStatusMaxNumberOfMembers.setDescription('The maximum number of cluster members allowed in the cluster. The command switch is considered as a cluster member also.')
ccStatusMemberOrder = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccStatusMemberOrder.setStatus('current')
if mibBuilder.loadTexts: ccStatusMemberOrder.setDescription("The suggested order in which the cluster members are displayed in network management applications. The format of the string is n1,n2,n3,n4, ..., where is any valid member number in the cluster. The member numbers are separated by commas with no spaces in between. An example of the object's value is '3,8,14,0,2' for a cluster containing member numbers 0, 2, 3, 8, and 14.")
ccMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 2, 1), )
if mibBuilder.loadTexts: ccMemberTable.setStatus('current')
if mibBuilder.loadTexts: ccMemberTable.setDescription('This table contains one row per cluster member, including the command switch.')
ccMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-CLUSTER-MIB", "ccMemberMacAddress"))
if mibBuilder.loadTexts: ccMemberEntry.setStatus('current')
if mibBuilder.loadTexts: ccMemberEntry.setDescription('An entry containing cluster management information applicable to a particular cluster member.')
ccMemberMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 2, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: ccMemberMacAddress.setStatus('current')
if mibBuilder.loadTexts: ccMemberMacAddress.setDescription('The management MAC address of the member device.')
ccMemberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccMemberNumber.setStatus('current')
if mibBuilder.loadTexts: ccMemberNumber.setDescription('An arbitrary value which uniquely identifies the cluster member switch number. It ranges from 1 to ccStatusMaxNumberOfMembers.')
ccMemberOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMemberOperStatus.setStatus('current')
if mibBuilder.loadTexts: ccMemberOperStatus.setDescription('The status of cluster management connectivity between the command switch and a cluster member. Cluster management connectivity is determined by the exchange of cluster management messages between the command switch and a cluster member. A member that has failed to exchange cluster management messages with the command switch is deemed to be inactive. Otherwise, it is deemed to be active.')
ccMemberEntityLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMemberEntityLogicalIndex.setStatus('current')
if mibBuilder.loadTexts: ccMemberEntityLogicalIndex.setDescription('The value of entLogicalIndex in the ENTITY-MIB corresponding to this cluster member. Creating an entry in this table creates a corresponding entry in the entLogicalTable in the ENTITY-MIB.')
ccMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: ccMemberRowStatus.setDescription('The status of this conceptual row. A device is added to the cluster of a command switch by creating an entry in this table for the device. The devices currently eligible to be added into the cluster are listed in the ccCandidateTable. An attempt to add a new member may fail. See ccStatusLastFailureAddMember for possible reasons for that failure.')
ccCandidateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 3, 1), )
if mibBuilder.loadTexts: ccCandidateTable.setStatus('current')
if mibBuilder.loadTexts: ccCandidateTable.setDescription('This table contains one row per cluster candidate, A cluster candidate is a device that is currently eligible to be added to the cluster of a command switch. A device is eligible if it satisfies the following conditions: 1. It supports the cluster management protocol. 2. It is directly connected to an existing cluster member. The entries in this table and the entries in ccMemberTable are mutually exclusive at all times. That is, any device that is a cluster member never shows up in the ccCandidateTable or is never a candidate at the same time . Also, any candidate that shows up in ccCandidateTable should not appear in ccMemberTable.')
ccCandidateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-CLUSTER-MIB", "ccCandidateMacAddress"))
if mibBuilder.loadTexts: ccCandidateEntry.setStatus('current')
if mibBuilder.loadTexts: ccCandidateEntry.setDescription('An entry pertaining to a single candidate device.')
ccCandidateMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 134, 1, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCandidateMacAddress.setStatus('current')
if mibBuilder.loadTexts: ccCandidateMacAddress.setDescription('The MAC address of a device qualified to to be a cluster member of the command switch cluster.')
ciscoClusterMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 134, 2))
ciscoClusterMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 134, 2, 0))
ccStatusMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 134, 2, 0, 1)).setObjects(("CISCO-CLUSTER-MIB", "ccMemberOperStatus"))
if mibBuilder.loadTexts: ccStatusMemberStatusChange.setStatus('current')
if mibBuilder.loadTexts: ccStatusMemberStatusChange.setDescription(' A cluster member status change notification is generated whenever the value of any instance of ccClusterMemberOperStatus changes after the member is completely added to the cluster.')
ciscoClusterMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 134, 3))
ciscoClusterMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 134, 3, 1))
ciscoClusterMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 134, 3, 2))
ciscoClusterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 134, 3, 1, 1)).setObjects(("CISCO-CLUSTER-MIB", "ciscoClusterStatusGroup"), ("CISCO-CLUSTER-MIB", "ciscoClusterMemberStatusGroup"), ("CISCO-CLUSTER-MIB", "ciscoClusterMemberGroup"), ("CISCO-CLUSTER-MIB", "ciscoClusterCandidateGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoClusterCompliance = ciscoClusterCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoClusterCompliance.setDescription('The compliance statement for the CLUSTER MIB.')
ciscoClusterComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 134, 3, 1, 2)).setObjects(("CISCO-CLUSTER-MIB", "ciscoClusterStatusGroup"), ("CISCO-CLUSTER-MIB", "ciscoClusterMemberStatusGroup"), ("CISCO-CLUSTER-MIB", "ciscoClusterMemberGroup"), ("CISCO-CLUSTER-MIB", "ciscoClusterCandidateGroup"), ("CISCO-CLUSTER-MIB", "ciscoClusterNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoClusterComplianceRev1 = ciscoClusterComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoClusterComplianceRev1.setDescription('The compliance statement for the CLUSTER MIB.')
ciscoClusterStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 134, 3, 2, 1)).setObjects(("CISCO-CLUSTER-MIB", "ccStatusTimeOfLastChange"), ("CISCO-CLUSTER-MIB", "ccStatusLastNMSAddMemberTAddress"), ("CISCO-CLUSTER-MIB", "ccStatusLastNMSAddMemberTDomain"), ("CISCO-CLUSTER-MIB", "ccStatusLastFailureAddMember"), ("CISCO-CLUSTER-MIB", "ccStatusMaxNumberOfMembers"), ("CISCO-CLUSTER-MIB", "ccStatusMemberOrder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoClusterStatusGroup = ciscoClusterStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoClusterStatusGroup.setDescription('The collection of objects which are used to represent the status of the cluster. These objects are accessible on the command switch.')
ciscoClusterMemberStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 134, 3, 2, 2)).setObjects(("CISCO-CLUSTER-MIB", "ccStatusClusterName"), ("CISCO-CLUSTER-MIB", "ccStatusClusterMode"), ("CISCO-CLUSTER-MIB", "ccStatusCommanderTDomain"), ("CISCO-CLUSTER-MIB", "ccStatusCommanderTAddress"), ("CISCO-CLUSTER-MIB", "ccStatusCommanderMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoClusterMemberStatusGroup = ciscoClusterMemberStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoClusterMemberStatusGroup.setDescription('The collection of objects which are used to represent the status of the cluster. These objects are accessible on the cluster members and the command switch.')
ciscoClusterMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 134, 3, 2, 3)).setObjects(("CISCO-CLUSTER-MIB", "ccMemberOperStatus"), ("CISCO-CLUSTER-MIB", "ccMemberNumber"), ("CISCO-CLUSTER-MIB", "ccMemberEntityLogicalIndex"), ("CISCO-CLUSTER-MIB", "ccMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoClusterMemberGroup = ciscoClusterMemberGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoClusterMemberGroup.setDescription('The collection of objects which are used to represent the members of a cluster. These objects are accessible on the command switch only.')
ciscoClusterCandidateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 134, 3, 2, 4)).setObjects(("CISCO-CLUSTER-MIB", "ccCandidateMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoClusterCandidateGroup = ciscoClusterCandidateGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoClusterCandidateGroup.setDescription('The collection of objects which are used to represent cluster candidates. These objects are accessible on the command switch only.')
ciscoClusterNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 134, 3, 2, 5)).setObjects(("CISCO-CLUSTER-MIB", "ccStatusMemberStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoClusterNotificationGroup = ciscoClusterNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoClusterNotificationGroup.setDescription('The collection of notifications defined for the cluster candidates.')
mibBuilder.exportSymbols("CISCO-CLUSTER-MIB", ciscoClusterMIB=ciscoClusterMIB, ccStatusCommanderTDomain=ccStatusCommanderTDomain, ciscoClusterCandidateGroup=ciscoClusterCandidateGroup, ciscoClusterMIBConformance=ciscoClusterMIBConformance, ccStatusLastFailureAddMember=ccStatusLastFailureAddMember, ccStatusLastNMSAddMemberTDomain=ccStatusLastNMSAddMemberTDomain, ciscoClusterStatusGroup=ciscoClusterStatusGroup, ccMemberTable=ccMemberTable, ccCandidateMacAddress=ccCandidateMacAddress, ccStatusMemberStatusChange=ccStatusMemberStatusChange, ccMemberEntityLogicalIndex=ccMemberEntityLogicalIndex, ccStatusMaxNumberOfMembers=ccStatusMaxNumberOfMembers, ccStatusTimeOfLastChange=ccStatusTimeOfLastChange, ciscoClusterMIBCompliances=ciscoClusterMIBCompliances, ccStatusClusterMode=ccStatusClusterMode, ciscoClusterNotificationGroup=ciscoClusterNotificationGroup, ccMemberEntry=ccMemberEntry, ciscoClusterCompliance=ciscoClusterCompliance, ccCandidate=ccCandidate, ccStatusLastNMSAddMemberTAddress=ccStatusLastNMSAddMemberTAddress, ciscoClusterMIBNotificationsPrefix=ciscoClusterMIBNotificationsPrefix, ccStatus=ccStatus, ccMemberOperStatus=ccMemberOperStatus, ccMember=ccMember, ciscoClusterMemberGroup=ciscoClusterMemberGroup, ciscoClusterMIBNotifications=ciscoClusterMIBNotifications, ciscoClusterComplianceRev1=ciscoClusterComplianceRev1, ccMemberRowStatus=ccMemberRowStatus, ciscoClusterMIBObjects=ciscoClusterMIBObjects, ccCandidateEntry=ccCandidateEntry, PYSNMP_MODULE_ID=ciscoClusterMIB, ciscoClusterMemberStatusGroup=ciscoClusterMemberStatusGroup, ciscoClusterMIBGroups=ciscoClusterMIBGroups, ccStatusMemberOrder=ccStatusMemberOrder, ccMemberNumber=ccMemberNumber, ccCandidateTable=ccCandidateTable, ccStatusClusterName=ccStatusClusterName, ccMemberMacAddress=ccMemberMacAddress, ccStatusCommanderMacAddress=ccStatusCommanderMacAddress, ccStatusCommanderTAddress=ccStatusCommanderTAddress)
