#
# PySNMP MIB module XYLAN-VAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-VAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, IpAddress, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, ObjectIdentity, ModuleIdentity, Counter64, Integer32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Counter64", "Integer32", "Unsigned32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanVapArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanVapArch")
xVapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 10, 1))
class XylanVapAdminStatCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disable", 1), ("enable", 2), ("partial", 3))

xVapAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 10, 1, 1), XylanVapAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xVapAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xVapAdmStatus.setDescription('The administrative state which can be set by configuration. Disable(1) will disable VAP from running on this device. Enable(2) will enable VAP to run on this device. Partial will enable the adjacency portion of VAP only.')
xVapTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 10, 1, 2), )
if mibBuilder.loadTexts: xVapTable.setStatus('mandatory')
if mibBuilder.loadTexts: xVapTable.setDescription('A list of VAP entries for this physical OmniSwitch.')
xVapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 10, 1, 2, 1), ).setIndexNames((0, "XYLAN-VAP-MIB", "xVapMACAddress"), (0, "XYLAN-VAP-MIB", "xVapSlot"), (0, "XYLAN-VAP-MIB", "xVapPort"))
if mibBuilder.loadTexts: xVapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xVapEntry.setDescription('A VAP entry.')
xVapPrimaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 10, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xVapPrimaryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xVapPrimaryAddress.setDescription('The Primary IP address of adjacent neighbor OmniSwitch.')
xVapSecondaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 10, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xVapSecondaryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xVapSecondaryAddress.setDescription('The Secondary IP address of adjacent neighbor OmniSwitch.')
xVapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 10, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xVapSlot.setStatus('mandatory')
if mibBuilder.loadTexts: xVapSlot.setDescription('The Slot the VAP frame was received on.')
xVapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 10, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xVapPort.setStatus('mandatory')
if mibBuilder.loadTexts: xVapPort.setDescription('The Port the VAP frame was received on.')
xVapMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 10, 1, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xVapMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xVapMACAddress.setDescription('The MAC address of the host unit that is being mapped to a VLAN.')
xVapGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 10, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xVapGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: xVapGroupId.setDescription('The port Group Identification.')
mibBuilder.exportSymbols("XYLAN-VAP-MIB", xVapPrimaryAddress=xVapPrimaryAddress, xVapEntry=xVapEntry, xVapGroupId=xVapGroupId, xVapPort=xVapPort, xVapAdmStatus=xVapAdmStatus, xVapSlot=xVapSlot, xVapMACAddress=xVapMACAddress, xVapInfo=xVapInfo, XylanVapAdminStatCodes=XylanVapAdminStatCodes, xVapSecondaryAddress=xVapSecondaryAddress, xVapTable=xVapTable)
