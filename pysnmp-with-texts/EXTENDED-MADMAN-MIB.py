#
# PySNMP MIB module EXTENDED-MADMAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTENDED-MADMAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
mtaGroupInboundRejectionReason, mtaGroupName, mtaGroupOutboundConnectFailureReason, mtaGroupIndex = mibBuilder.importSymbols("MTA-MIB", "mtaGroupInboundRejectionReason", "mtaGroupName", "mtaGroupOutboundConnectFailureReason", "mtaGroupIndex")
applName, applOperStatus, applIndex, applLastChange = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "applName", "applOperStatus", "applIndex", "applLastChange")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, TimeTicks, Unsigned32, Integer32, ModuleIdentity, MibIdentifier, Bits, ObjectIdentity, NotificationType, IpAddress, Counter32, Gauge32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "Unsigned32", "Integer32", "ModuleIdentity", "MibIdentifier", "Bits", "ObjectIdentity", "NotificationType", "IpAddress", "Counter32", "Gauge32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lotus = MibIdentifier((1, 3, 6, 1, 4, 1, 334))
notes = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 1))
lcs = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 2))
softswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3))
common_mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 1)).setLabel("common-mibs")
lms = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2))
extendedMADMAN = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 1, 1))
class TimeInterval(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

extendedApplTable = MibTable((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 1), )
if mibBuilder.loadTexts: extendedApplTable.setStatus('mandatory')
if mibBuilder.loadTexts: extendedApplTable.setDescription('The table holding information specific to an Application for which extended information is available.')
extendedApplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: extendedApplEntry.setStatus('mandatory')
if mibBuilder.loadTexts: extendedApplEntry.setDescription('The entry associated with each application for which extended information is available.')
applDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applDescr.setStatus('mandatory')
if mibBuilder.loadTexts: applDescr.setDescription('A textual description for the application. This should identify the type of application as well as any other pertinent details regarding its implementation.')
applContact = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applContact.setStatus('mandatory')
if mibBuilder.loadTexts: applContact.setDescription('The textual identification of the contact person for this application, together with information on how to contact that person..')
applDesiredOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("halted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applDesiredOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applDesiredOperStatus.setDescription('Indicates the intended operational state of the application up - application is operational and available down - application is not operational halted - application is operational, but not available.')
extendedMtaTable = MibTable((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2), )
if mibBuilder.loadTexts: extendedMtaTable.setStatus('mandatory')
if mibBuilder.loadTexts: extendedMtaTable.setDescription('The table holding information specific to an MTA for which extended information is available.')
extendedMtaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: extendedMtaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: extendedMtaEntry.setDescription('The entry associated with each MTA for which extended information is available.')
mtaFailedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaFailedMessages.setStatus('mandatory')
if mibBuilder.loadTexts: mtaFailedMessages.setDescription("(EMA compliant) The total number of messages that have 'failed' MTA processing since the MTA was initialized. Possible 'failures' include encode/decode errors, translate errors, unable to route, etc. Protocol/association errors are specifically excluded as they are accounted for in other MADMAN MIB variables.")
mtaFailedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaFailedVolume.setStatus('mandatory')
if mibBuilder.loadTexts: mtaFailedVolume.setDescription("(EMA compliant) The total volume of messages that have 'failed' MTA processing, measured in kilo-octets. This volume should include all data that is logically above the mail transport level.")
mtaFailedRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaFailedRecipients.setStatus('mandatory')
if mibBuilder.loadTexts: mtaFailedRecipients.setDescription("The total number of recipients included in messages that have 'failed' MTA processing since the MTA was initialized.")
mtaLastMessageFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaLastMessageFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: mtaLastMessageFailureReason.setDescription("The failure reason, if any, for the last message to fail in the MTA. An empty string indicates that the last attempt was successful. If no message has failed since the MTA has been initialized, the value should be 'never'.")
mtaLargestMessageStored = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaLargestMessageStored.setStatus('mandatory')
if mibBuilder.loadTexts: mtaLargestMessageStored.setDescription('(EMA compliant) The size, in kilo-octets of the largest message currently stored in the MTA.')
mtaOldestMessageStored = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaOldestMessageStored.setStatus('mandatory')
if mibBuilder.loadTexts: mtaOldestMessageStored.setDescription('The time since the oldest message currently stored in the MTA was first safe-stored.')
mtaInputInhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtaInputInhibited.setStatus('mandatory')
if mibBuilder.loadTexts: mtaInputInhibited.setDescription("Indiciates whether or not this MTA is in the 'input inhibited' state, meaning that the MTA will process stored messages, but will not accept new inbound associations.")
mtaType = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21))).clone(namedValues=NamedValues(("x400-92", 1), ("x400-88", 2), ("x400-84", 3), ("smtp-mime", 4), ("smtp", 5), ("ccMail", 6), ("notes", 7), ("cmc", 8), ("mapi", 9), ("snapi", 10), ("snads", 11), ("profs", 12), ("fax", 13), ("other", 20), ("unknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaType.setStatus('mandatory')
if mibBuilder.loadTexts: mtaType.setDescription('Indiciates the type or primary/native protocol used by this MTA.')
extendedMtaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3), )
if mibBuilder.loadTexts: extendedMtaGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: extendedMtaGroupTable.setDescription('The table holding information specific to each MTA group for which extended information is available.')
extendedMtaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "MTA-MIB", "mtaGroupIndex"))
if mibBuilder.loadTexts: extendedMtaGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: extendedMtaGroupEntry.setDescription('The entry associated with each MTA group for which extended information is available.')
mtaGroupIdOfOldestMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupIdOfOldestMessage.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupIdOfOldestMessage.setDescription('(EMA compliant) A string representation for the ID of the oldest message stored by this mtaGroup.')
mtaGroupLastOutboundAssociationAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupLastOutboundAssociationAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupLastOutboundAssociationAttempt.setDescription('(EMA compliant) The value of sysUpTime when this group last attempted an outbound association.')
mtaGroupMaxInboundAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupMaxInboundAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupMaxInboundAssociations.setDescription('The configured or resource-determined maximum number of possible inbound associations available to this group.')
mtaGroupMaxOutboundAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupMaxOutboundAssociations.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupMaxOutboundAssociations.setDescription('The configured or resource-determined maximum number of possible outbound associations available to this group.')
mtaGroupCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stopped", 1), ("initializing", 2), ("configurable", 3), ("input-disabled", 4), ("output-disabled", 5), ("running", 6), ("stopping", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupCurrentState.setDescription('Indicates the internal operational state of the MTA Group. stopped - group is not currently active initializing - group is in the process of starting configurable - group may be configured,but is not processing mail input_disabled - group is running, but not accepting input output_disabled - group is running, but not initiating outbound associations running - group is active and processing mail stopping - group is in the process of shutting down unknown - state does not apply or cannot be determined')
mtaGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupLastChange.setDescription('The value of sysUpTime at the time this group entered its current operational state.')
mtaGroupLargestMessageStored = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupLargestMessageStored.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupLargestMessageStored.setDescription("The size, in kilo-octets of the largest message currently stored in this group's queue.")
mtaGroupInboundRejectSecurityViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupInboundRejectSecurityViolations.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupInboundRejectSecurityViolations.setDescription('(Potential addition to MADMAN) The total number of inbound associations to this group that were rejected due to a security violation (incorrect MTA password, etc).')
mtaGroupOutboundFailSecurityViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupOutboundFailSecurityViolations.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupOutboundFailSecurityViolations.setDescription('(Potential addition to MADMAN) The total number of outbound associations from this group that failed due to a security violation (incorrect MTA password, etc).')
mtaGroupInboundRejectResourceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupInboundRejectResourceFailures.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupInboundRejectResourceFailures.setDescription('(Potential addition to MADMAN) The total number of inbound associations to this group that were rejected due to a lack of resources.')
mtaGroupOutboundFailResourceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupOutboundFailResourceFailures.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupOutboundFailResourceFailures.setDescription('(Potential addition to MADMAN) The total number of outbound associations from this group that failed due to a lack of resources.')
mtaGroupFailedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupFailedVolume.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupFailedVolume.setDescription("The total volume of messages that have 'failed' group processing, measured in kilo-octets. This volume should include all data that is logically above the mail transport level.")
mtaGroupFailedRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 334, 3, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupFailedRecipients.setStatus('mandatory')
if mibBuilder.loadTexts: mtaGroupFailedRecipients.setDescription("The total number of recipients included in messages that have 'failed' group processing since this group was initialized.")
mibBuilder.exportSymbols("EXTENDED-MADMAN-MIB", extendedApplEntry=extendedApplEntry, TimeInterval=TimeInterval, mtaFailedMessages=mtaFailedMessages, mtaGroupOutboundFailResourceFailures=mtaGroupOutboundFailResourceFailures, applContact=applContact, lotus=lotus, extendedApplTable=extendedApplTable, mtaGroupLastOutboundAssociationAttempt=mtaGroupLastOutboundAssociationAttempt, softswitch=softswitch, extendedMtaTable=extendedMtaTable, mtaGroupMaxOutboundAssociations=mtaGroupMaxOutboundAssociations, extendedMADMAN=extendedMADMAN, mtaFailedVolume=mtaFailedVolume, mtaType=mtaType, mtaGroupLastChange=mtaGroupLastChange, mtaGroupLargestMessageStored=mtaGroupLargestMessageStored, mtaGroupFailedRecipients=mtaGroupFailedRecipients, common_mibs=common_mibs, notes=notes, mtaGroupIdOfOldestMessage=mtaGroupIdOfOldestMessage, mtaGroupInboundRejectSecurityViolations=mtaGroupInboundRejectSecurityViolations, mtaFailedRecipients=mtaFailedRecipients, mtaOldestMessageStored=mtaOldestMessageStored, applDescr=applDescr, mtaLargestMessageStored=mtaLargestMessageStored, extendedMtaEntry=extendedMtaEntry, lms=lms, mtaInputInhibited=mtaInputInhibited, lcs=lcs, extendedMtaGroupEntry=extendedMtaGroupEntry, mtaGroupOutboundFailSecurityViolations=mtaGroupOutboundFailSecurityViolations, mtaGroupFailedVolume=mtaGroupFailedVolume, applDesiredOperStatus=applDesiredOperStatus, mtaGroupInboundRejectResourceFailures=mtaGroupInboundRejectResourceFailures, mtaGroupCurrentState=mtaGroupCurrentState, mtaLastMessageFailureReason=mtaLastMessageFailureReason, extendedMtaGroupTable=extendedMtaGroupTable, mtaGroupMaxInboundAssociations=mtaGroupMaxInboundAssociations)
