#
# PySNMP MIB module ALCATEL-IND1-IGMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-IGMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:17:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Igmp, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Igmp")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressIPv4, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, Bits, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, IpAddress, Counter32, iso, NotificationType, Integer32, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "IpAddress", "Counter32", "iso", "NotificationType", "Integer32", "ModuleIdentity", "ObjectIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1IgmpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1))
alcatelIND1IgmpMIB.setRevisions(('2011-02-23 00:00', '2009-03-31 00:00', '2008-09-10 00:00', '2008-08-08 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IgmpMIB.setRevisionsDescriptions(('Add zero-based query object', 'IGMP helper address changes', 'Add flood unknown object', 'The latest version of this MIB Module. Added maximum group limit objects.', 'The revised version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IgmpMIB.setLastUpdated('201102230000Z')
if mibBuilder.loadTexts: alcatelIND1IgmpMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1IgmpMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IgmpMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): Proprietary IPv4 Multicast MIB definitions The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1IgmpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1))
alaIgmp = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1))
alaIgmpStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStatus.setDescription('Administratively enable IPv4 multicast switching and routing on the system.')
alaIgmpQuerying = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpQuerying.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerying.setDescription('Administratively enable IGMP Querying on the system.')
alaIgmpSpoofing = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpSpoofing.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSpoofing.setDescription('Administratively enable IGMP Spoofing on the system.')
alaIgmpZapping = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpZapping.setStatus('current')
if mibBuilder.loadTexts: alaIgmpZapping.setDescription('Administratively enable IGMP Zapping on the system.')
alaIgmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 5), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVersion.setDescription('Set the default IGMP protocol Version running on the system.')
alaIgmpRobustness = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 6), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpRobustness.setStatus('current')
if mibBuilder.loadTexts: alaIgmpRobustness.setDescription('Set the IGMP Robustness variable used on the system.')
alaIgmpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 7), Unsigned32().clone(125)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQueryInterval.setDescription('Set the IGMP Query Interval used on the system.')
alaIgmpQueryResponseInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 8), Unsigned32().clone(100)).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpQueryResponseInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQueryResponseInterval.setDescription('Set the IGMP Query Response Interval on the system.')
alaIgmpLastMemberQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 9), Unsigned32().clone(10)).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpLastMemberQueryInterval.setDescription('Set the IGMP Last Member Query Interval on the system.')
alaIgmpRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 10), Unsigned32().clone(90)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpRouterTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpRouterTimeout.setDescription('The IGMP Router Timeout on the system.')
alaIgmpSourceTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 11), Unsigned32().clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpSourceTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceTimeout.setDescription('The IGMP Source Timeout on the system.')
alaIgmpProxying = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpProxying.setStatus('current')
if mibBuilder.loadTexts: alaIgmpProxying.setDescription('Administratively enable IGMP Proxying on the system.')
alaIgmpUnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 13), Unsigned32().clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpUnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpUnsolicitedReportInterval.setDescription('The IGMP Unsolicited Report Interval on the system.')
alaIgmpQuerierForwarding = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpQuerierForwarding.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierForwarding.setDescription('Administratively enable IGMP Querier Forwarding on the system.')
alaIgmpMaxGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMaxGroupLimit.setDescription('The global limit on maximum number of IGMP Group memberships that can be learnt on each port/vlan instance.')
alaIgmpMaxGroupExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMaxGroupExceedAction.setDescription('The global configuration of action to be taken when IGMP group membership limit is exceeded on a port/vlan instance.')
alaIgmpFloodUnknown = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpFloodUnknown.setStatus('current')
if mibBuilder.loadTexts: alaIgmpFloodUnknown.setDescription('Administratively enable flooding of multicast data packets during flow learning and setup.')
alaIgmpHelperAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 18), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpHelperAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpHelperAddressType.setDescription('Set the address type of the helper address. Must be ipv4(1) and set at the same time as alaIgmpHelperAddress.')
alaIgmpHelperAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 19), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpHelperAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpHelperAddress.setDescription('The configured IPv4 helper address. When an IGMP report or leave is received by the device it will remove the IP header and regenerate a new IP header with a destination IP address specified. Use 0.0.0.0 to no longer help an IGMP report to an remote address. Must be set at the same time as alaIgmpHelperAddressType')
alaIgmpZeroBasedQuery = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpZeroBasedQuery.setStatus('current')
if mibBuilder.loadTexts: alaIgmpZeroBasedQuery.setDescription('Administratively enable the use of an all-zero source IPv4 address for query packets when a non-querier is querying the membership of a port')
alaIgmpVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2))
alaIgmpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaIgmpVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanTable.setDescription('The VLAN table contains the information on which IPv4 multicast switching and routing is configured.')
alaIgmpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanIndex"))
if mibBuilder.loadTexts: alaIgmpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanEntry.setDescription('An entry corresponds to a VLAN on which IPv4 multicast switching and routing is configured.')
alaIgmpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanIndex.setDescription('The VLAN on which IPv4 multicast switching and routing is configured.')
alaIgmpVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanStatus.setDescription('Administratively enable IPv4 multicast switching and routing on the VLAN.')
alaIgmpVlanQuerying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanQuerying.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanQuerying.setDescription('Administratively enable IGMP Querying on the VLAN.')
alaIgmpVlanSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanSpoofing.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanSpoofing.setDescription('Administratively enable IGMP Spoofing on the VLAN.')
alaIgmpVlanZapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanZapping.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanZapping.setDescription('Administratively enable IGMP Zapping on the VLAN.')
alaIgmpVlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanVersion.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanVersion.setDescription('Set the default IGMP protocol Version running on the VLAN.')
alaIgmpVlanRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanRobustness.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanRobustness.setDescription('Set the IGMP Robustness variable used on the VLAN.')
alaIgmpVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanQueryInterval.setDescription('Set the IGMP Query Interval used on the VLAN.')
alaIgmpVlanQueryResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 9), Unsigned32()).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanQueryResponseInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanQueryResponseInterval.setDescription('Set the IGMP Query Response Interval on the VLAN.')
alaIgmpVlanLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 10), Unsigned32()).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanLastMemberQueryInterval.setDescription('Set the IGMP Last Member Query Interval on the VLAN.')
alaIgmpVlanRouterTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanRouterTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanRouterTimeout.setDescription('Set the IGMP Router Timeout on the VLAN.')
alaIgmpVlanSourceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanSourceTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanSourceTimeout.setDescription('Set the IGMP Source Timeout on the VLAN.')
alaIgmpVlanProxying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanProxying.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanProxying.setDescription('Administratively enable IGMP Proxying on the VLAN.')
alaIgmpVlanUnsolicitedReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanUnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanUnsolicitedReportInterval.setDescription('Set the IGMP Unsolicited Report Interval on the VLAN.')
alaIgmpVlanQuerierForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanQuerierForwarding.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanQuerierForwarding.setDescription('Administratively enable IGMP Querier Forwarding on the VLAN.')
alaIgmpVlanMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanMaxGroupLimit.setDescription('The maximum number of IGMP Group memberships that can be learnt on the VLAN.')
alaIgmpVlanMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanMaxGroupExceedAction.setDescription('The action to be taken when the IGMP group membership limit is exceeded on the VLAN.')
alaIgmpVlanZeroBasedQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpVlanZeroBasedQuery.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanZeroBasedQuery.setDescription('Administratively enable the use of an all-zero source IPv4 address for query packets when a non-querier is querying the membership of a port on the VLAN')
alaIgmpMember = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3))
alaIgmpMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaIgmpMemberTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberTable.setDescription('The table listing the IGMP group membership information.')
alaIgmpMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpMemberVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpMemberIfIndex"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpMemberGroupAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpMemberSourceAddress"))
if mibBuilder.loadTexts: alaIgmpMemberEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberEntry.setDescription('An entry corresponding to an IGMP group membership request.')
alaIgmpMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpMemberVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberVlan.setDescription("The group membership request's VLAN.")
alaIgmpMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaIgmpMemberIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberIfIndex.setDescription("The group membership request's ifIndex.")
alaIgmpMemberGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3, 1, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpMemberGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberGroupAddress.setDescription("The group membership request's IPv4 group address.")
alaIgmpMemberSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3, 1, 1, 4), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpMemberSourceAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberSourceAddress.setDescription("The group membership request's IPv4 source address.")
alaIgmpMemberMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpMemberMode.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberMode.setDescription("The group membership request's IGMP source filter mode.")
alaIgmpMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpMemberCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberCount.setDescription("The group membership request's counter.")
alaIgmpMemberTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpMemberTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberTimeout.setDescription("The group membership request's timeout.")
alaIgmpStaticMember = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 4))
alaIgmpStaticMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaIgmpStaticMemberTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberTable.setDescription('The table listing the static IGMP group membership information.')
alaIgmpStaticMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticMemberVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticMemberIfIndex"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticMemberGroupAddress"))
if mibBuilder.loadTexts: alaIgmpStaticMemberEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberEntry.setDescription('An entry corresponding to a static IGMP group membership request.')
alaIgmpStaticMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpStaticMemberVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberVlan.setDescription("The static group membership request's VLAN.")
alaIgmpStaticMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 4, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaIgmpStaticMemberIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberIfIndex.setDescription("The static group membership request's ifIndex.")
alaIgmpStaticMemberGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 4, 1, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpStaticMemberGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberGroupAddress.setDescription("The static group membership request's IPv4 group address.")
alaIgmpStaticMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIgmpStaticMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberRowStatus.setDescription('Used in accordance with installation and removal conventions for conceptual rows.')
alaIgmpNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 5))
alaIgmpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaIgmpNeighborTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborTable.setDescription('The table listing the neighboring IP multicast routers.')
alaIgmpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpNeighborVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpNeighborIfIndex"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpNeighborHostAddress"))
if mibBuilder.loadTexts: alaIgmpNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborEntry.setDescription('An entry corresponding to an IP multicast router.')
alaIgmpNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpNeighborVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborVlan.setDescription("The IP multicast router's VLAN.")
alaIgmpNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 5, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaIgmpNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborIfIndex.setDescription("The IP multicast router's ifIndex.")
alaIgmpNeighborHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 5, 1, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpNeighborHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborHostAddress.setDescription("The IP multicast router's IPv4 host address.")
alaIgmpNeighborCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpNeighborCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborCount.setDescription("The IP multicast router's counter.")
alaIgmpNeighborTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpNeighborTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborTimeout.setDescription("The IP multicast router's timeout.")
alaIgmpStaticNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 6))
alaIgmpStaticNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alaIgmpStaticNeighborTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborTable.setDescription('The table listing the static IP multicast routers.')
alaIgmpStaticNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticNeighborVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticNeighborIfIndex"))
if mibBuilder.loadTexts: alaIgmpStaticNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborEntry.setDescription('An entry corresponding to a static IP multicast router.')
alaIgmpStaticNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpStaticNeighborVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborVlan.setDescription("The static IP multicast router's VLAN.")
alaIgmpStaticNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 6, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaIgmpStaticNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborIfIndex.setDescription("The static IP multicast router's ifIndex.")
alaIgmpStaticNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIgmpStaticNeighborRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborRowStatus.setDescription('Used in accordance with installation and removal conventions for conceptual rows.')
alaIgmpQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 7))
alaIgmpQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaIgmpQuerierTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierTable.setDescription('The table listing the neighboring IGMP queriers.')
alaIgmpQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpQuerierVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpQuerierIfIndex"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpQuerierHostAddress"))
if mibBuilder.loadTexts: alaIgmpQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierEntry.setDescription('An entry corresponding to an IGMP querier.')
alaIgmpQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpQuerierVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierVlan.setDescription("The IGMP querier's VLAN.")
alaIgmpQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 7, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaIgmpQuerierIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierIfIndex.setDescription("The IGMP querier's ifIndex.")
alaIgmpQuerierHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 7, 1, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpQuerierHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierHostAddress.setDescription("The IGMP querier's IPv4 host address.")
alaIgmpQuerierCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpQuerierCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierCount.setDescription("The IGMP querier's counter.")
alaIgmpQuerierTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 7, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpQuerierTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierTimeout.setDescription("The IGMP querier's timeout.")
alaIgmpStaticQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 8))
alaIgmpStaticQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaIgmpStaticQuerierTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierTable.setDescription('The table listing the static IGMP queriers.')
alaIgmpStaticQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticQuerierVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticQuerierIfIndex"))
if mibBuilder.loadTexts: alaIgmpStaticQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierEntry.setDescription('An entry corresponding to a static IGMP querier.')
alaIgmpStaticQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpStaticQuerierVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierVlan.setDescription("The static IGMP querier's VLAN.")
alaIgmpStaticQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 8, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaIgmpStaticQuerierIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierIfIndex.setDescription("The static IGMP querier's ifIndex.")
alaIgmpStaticQuerierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIgmpStaticQuerierRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierRowStatus.setDescription('Used in accordance with installation and removal conventions for conceptual rows.')
alaIgmpSource = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9))
alaIgmpSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alaIgmpSourceTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceTable.setDescription('The table listing the IP multicast source information.')
alaIgmpSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpSourceVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpSourceGroupAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpSourceHostAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpSourceDestAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpSourceOrigAddress"))
if mibBuilder.loadTexts: alaIgmpSourceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceEntry.setDescription('An entry corresponding to an IP multicast source flow.')
alaIgmpSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpSourceVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceVlan.setDescription("The IP multicast source flow's VLAN.")
alaIgmpSourceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpSourceIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceIfIndex.setDescription("The IP multicast source flow's ifIndex.")
alaIgmpSourceGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9, 1, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpSourceGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceGroupAddress.setDescription("The IP multicast source flow's IPv4 group address.")
alaIgmpSourceHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9, 1, 1, 4), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpSourceHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceHostAddress.setDescription("The IP multicast source flow's IPv4 host address.")
alaIgmpSourceDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9, 1, 1, 5), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpSourceDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceDestAddress.setDescription("The IP multicast source flow's IPv4 tunnel destination address.")
alaIgmpSourceOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9, 1, 1, 6), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpSourceOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceOrigAddress.setDescription("The IP multicast source flow's IPv4 tunnel source address.")
alaIgmpSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpSourceType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceType.setDescription("The IP multicast source flow's encapsulation type.")
alaIgmpForward = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10))
alaIgmpForwardTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1), )
if mibBuilder.loadTexts: alaIgmpForwardTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardTable.setDescription('The table listing the IP multicast forward information.')
alaIgmpForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardGroupAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardHostAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardDestAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardOrigAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardNextVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardNextIfIndex"))
if mibBuilder.loadTexts: alaIgmpForwardEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardEntry.setDescription('An entry corresponding to an IP multicast forwarded flow.')
alaIgmpForwardVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpForwardVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardVlan.setDescription("The IP multicast forwarded flow's VLAN.")
alaIgmpForwardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpForwardIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardIfIndex.setDescription("The IP multicast forwarded flow's ifIndex.")
alaIgmpForwardGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpForwardGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardGroupAddress.setDescription("The IP multicast forwarded flow's IPv4 group address.")
alaIgmpForwardHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 4), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpForwardHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardHostAddress.setDescription("The IP multicast forwarded flow's IPv4 host address.")
alaIgmpForwardDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 5), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpForwardDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardDestAddress.setDescription("The IP multicast forwarded flow's IPv4 tunnel destination address.")
alaIgmpForwardOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 6), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpForwardOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardOrigAddress.setDescription("The IP multicast forwarded flow's IPv4 tunnel source address.")
alaIgmpForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpForwardType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardType.setDescription("The IP multicast forwarded flow's encapsulation type.")
alaIgmpForwardNextVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 8), Unsigned32())
if mibBuilder.loadTexts: alaIgmpForwardNextVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardNextVlan.setDescription("The IP multicast forwarded flow's next VLAN.")
alaIgmpForwardNextIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 9), InterfaceIndex())
if mibBuilder.loadTexts: alaIgmpForwardNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardNextIfIndex.setDescription("The IP multicast forwarded flow's next ifIndex.")
alaIgmpForwardNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpForwardNextType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardNextType.setDescription("The IP multicast forwarded flow's next encapsulation type.")
alaIgmpTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11))
alaIgmpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1), )
if mibBuilder.loadTexts: alaIgmpTunnelTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelTable.setDescription('The table listing the IP multicast tunnel information.')
alaIgmpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelVlan"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelGroupAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelHostAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelDestAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelOrigAddress"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelNextDestAddress"))
if mibBuilder.loadTexts: alaIgmpTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelEntry.setDescription('An entry corresponding to an IP multicast tunneled flow.')
alaIgmpTunnelVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpTunnelVlan.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelVlan.setDescription("The IP multicast tunneled flow's VLAN.")
alaIgmpTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelIfIndex.setDescription("The IP multicast tunneled flow's ifIndex.")
alaIgmpTunnelGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpTunnelGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelGroupAddress.setDescription("The IP multicast tunneled flow's IPv4 group address.")
alaIgmpTunnelHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1, 4), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpTunnelHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelHostAddress.setDescription("The IP multicast tunneled flow's IPv4 host address.")
alaIgmpTunnelDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1, 5), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpTunnelDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelDestAddress.setDescription("The IP multicast tunneled flow's IPv4 tunnel destination address.")
alaIgmpTunnelOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1, 6), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpTunnelOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelOrigAddress.setDescription("The IP multicast tunneled flow's IPv4 tunnel source address.")
alaIgmpTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpTunnelType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelType.setDescription("The IP multicast tunneled flow's encapsulation type.")
alaIgmpTunnelNextDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1, 8), InetAddressIPv4())
if mibBuilder.loadTexts: alaIgmpTunnelNextDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelNextDestAddress.setDescription("The IP multicast tunneled flow's next IPv4 tunnel destination address.")
alaIgmpTunnelNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpTunnelNextType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelNextType.setDescription("The IP multicast tunneled flow's next encapsulation type.")
alaIgmpPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 12))
alaIgmpPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 12, 1), )
if mibBuilder.loadTexts: alaIgmpPortTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortTable.setDescription('The table listing the IP multicast port information.')
alaIgmpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 12, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpPortIfIndex"))
if mibBuilder.loadTexts: alaIgmpPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortEntry.setDescription('An entry corresponding to IP multicast port information.')
alaIgmpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 12, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaIgmpPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortIfIndex.setDescription("The IP multicast port's ifIndex.")
alaIgmpPortMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 12, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpPortMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortMaxGroupLimit.setDescription('The maximum number of IGMP Group memberships that can be learnt on the port.')
alaIgmpPortMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpPortMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortMaxGroupExceedAction.setDescription('The action to be taken when IGMP group membership limit is exceeded for the port.')
alaIgmpPortVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 13))
alaIgmpPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 13, 1), )
if mibBuilder.loadTexts: alaIgmpPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortVlanTable.setDescription('The table listing the IGMP group membership limit information for a port/vlan instance.')
alaIgmpPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 13, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpPortIfIndex"), (0, "ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanId"))
if mibBuilder.loadTexts: alaIgmpPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortVlanEntry.setDescription('An entry corresponding to IGMP group membership limit on a port/vlan.')
alaIgmpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 13, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIgmpVlanId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanId.setDescription('The IP multicast group membership VLAN.')
alaIgmpPortVlanCurrentGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 13, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpPortVlanCurrentGroupCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortVlanCurrentGroupCount.setDescription('The current IP multicast group memberships on a port/vlan instance.')
alaIgmpPortVlanMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 13, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpPortVlanMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortVlanMaxGroupLimit.setDescription('Maximum IGMP Group memberships on the port/vlan instance.')
alaIgmpPortVlanMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpPortVlanMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortVlanMaxGroupExceedAction.setDescription('The action to be taken when IGMP group membership limit is exceeded for the port/vlan instance.')
alcatelIND1IgmpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2))
alcatelIND1IgmpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 1))
alaIgmpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpMemberGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticMemberGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpNeighborGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticNeighborGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpQuerierGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticQuerierGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpSourceGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpPortGroup"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpPortVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpCompliance = alaIgmpCompliance.setStatus('current')
if mibBuilder.loadTexts: alaIgmpCompliance.setDescription('The compliance statement for systems running IPv4 multicast switch and routing and implementing ALCATEL-IND1-IGMP-MIB.')
alcatelIND1IgmpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2))
alaIgmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpStatus"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpQuerying"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpSpoofing"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpZapping"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVersion"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpRobustness"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpQueryInterval"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpQueryResponseInterval"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpLastMemberQueryInterval"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpRouterTimeout"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpSourceTimeout"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpProxying"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpUnsolicitedReportInterval"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpQuerierForwarding"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpMaxGroupLimit"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpMaxGroupExceedAction"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpFloodUnknown"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpHelperAddressType"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpHelperAddress"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpZeroBasedQuery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpGroup = alaIgmpGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpGroup.setDescription('A collection of objects to support management of IPv4 multicast switching and routing system configuration.')
alaIgmpVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanStatus"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanQuerying"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanSpoofing"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanZapping"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanVersion"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanRobustness"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanQueryInterval"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanQueryResponseInterval"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanLastMemberQueryInterval"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanRouterTimeout"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanSourceTimeout"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanProxying"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanUnsolicitedReportInterval"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanQuerierForwarding"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanMaxGroupLimit"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanMaxGroupExceedAction"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpVlanZeroBasedQuery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpVlanGroup = alaIgmpVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpVlanGroup.setDescription('A collection of objects to support management of IPv4 multicast switching and routing vlan configuration.')
alaIgmpMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpMemberMode"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpMemberCount"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpMemberTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpMemberGroup = alaIgmpMemberGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberGroup.setDescription('A collection of objects to support IPv4 multicast switching and routing group membership information.')
alaIgmpStaticMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpStaticMemberGroup = alaIgmpStaticMemberGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberGroup.setDescription('A collection of objects to support IPv4 multicast switching and routing static group membership information tables.')
alaIgmpNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpNeighborCount"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpNeighborTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpNeighborGroup = alaIgmpNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborGroup.setDescription('A collection of objects to support IPv4 multicast switching and routing IP multicast router information.')
alaIgmpStaticNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticNeighborRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpStaticNeighborGroup = alaIgmpStaticNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborGroup.setDescription('A collection of objects to support IPv4 multicast switching and routing static IP multicast router information.')
alaIgmpQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpQuerierCount"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpQuerierTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpQuerierGroup = alaIgmpQuerierGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierGroup.setDescription('A collection of objects to support IPv4 multicast switching and routing IGMP querier information.')
alaIgmpStaticQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpStaticQuerierRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpStaticQuerierGroup = alaIgmpStaticQuerierGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierGroup.setDescription('A collection of objects to support IPv4 multicast switching and routing static IGMP querier information.')
alaIgmpSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpSourceIfIndex"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpSourceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpSourceGroup = alaIgmpSourceGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpSourceGroup.setDescription('A collection of objects to support IPv4 multicast switching and routing IP multicast source information.')
alaIgmpForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardIfIndex"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardType"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpForwardNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpForwardGroup = alaIgmpForwardGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpForwardGroup.setDescription('A collection of objects to support IPv4 multicast switching and routing IP multicast forward information.')
alaIgmpTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 11)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelIfIndex"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelType"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpTunnelNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpTunnelGroup = alaIgmpTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpTunnelGroup.setDescription('A collection of objects to support IPv4 multicast switching and routing IP multicast tunnel information.')
alaIgmpPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 12)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpPortMaxGroupLimit"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpPortMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpPortGroup = alaIgmpPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortGroup.setDescription('A collection of objects to support IPv4 multicast switching configuration.')
alaIgmpPortVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 34, 1, 2, 2, 13)).setObjects(("ALCATEL-IND1-IGMP-MIB", "alaIgmpPortVlanCurrentGroupCount"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpPortVlanMaxGroupLimit"), ("ALCATEL-IND1-IGMP-MIB", "alaIgmpPortVlanMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpPortVlanGroup = alaIgmpPortVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpPortVlanGroup.setDescription('An object to support IPv4 multicast switching group limit information for a port/vlan instance.')
mibBuilder.exportSymbols("ALCATEL-IND1-IGMP-MIB", alaIgmpMember=alaIgmpMember, alaIgmpPortVlanMaxGroupLimit=alaIgmpPortVlanMaxGroupLimit, alaIgmpPortTable=alaIgmpPortTable, alaIgmpForward=alaIgmpForward, alaIgmpGroup=alaIgmpGroup, alaIgmpSourceOrigAddress=alaIgmpSourceOrigAddress, alaIgmpSourceIfIndex=alaIgmpSourceIfIndex, alaIgmpQuerierVlan=alaIgmpQuerierVlan, alaIgmpHelperAddressType=alaIgmpHelperAddressType, alaIgmpZeroBasedQuery=alaIgmpZeroBasedQuery, alaIgmpSourceTable=alaIgmpSourceTable, alaIgmpPortVlanCurrentGroupCount=alaIgmpPortVlanCurrentGroupCount, alaIgmp=alaIgmp, alaIgmpStaticMember=alaIgmpStaticMember, alaIgmpMemberGroupAddress=alaIgmpMemberGroupAddress, alaIgmpStaticMemberIfIndex=alaIgmpStaticMemberIfIndex, alaIgmpTunnelIfIndex=alaIgmpTunnelIfIndex, alaIgmpNeighborCount=alaIgmpNeighborCount, alaIgmpMemberMode=alaIgmpMemberMode, alaIgmpSourceHostAddress=alaIgmpSourceHostAddress, alaIgmpSourceGroup=alaIgmpSourceGroup, alaIgmpPortVlanEntry=alaIgmpPortVlanEntry, alaIgmpMemberVlan=alaIgmpMemberVlan, alaIgmpForwardNextType=alaIgmpForwardNextType, alaIgmpSourceEntry=alaIgmpSourceEntry, alaIgmpHelperAddress=alaIgmpHelperAddress, alaIgmpStaticMemberVlan=alaIgmpStaticMemberVlan, alcatelIND1IgmpMIBObjects=alcatelIND1IgmpMIBObjects, alaIgmpVlanLastMemberQueryInterval=alaIgmpVlanLastMemberQueryInterval, alaIgmpFloodUnknown=alaIgmpFloodUnknown, alcatelIND1IgmpMIBConformance=alcatelIND1IgmpMIBConformance, alaIgmpVlanVersion=alaIgmpVlanVersion, alaIgmpPortEntry=alaIgmpPortEntry, alaIgmpVlanZeroBasedQuery=alaIgmpVlanZeroBasedQuery, alaIgmpPortGroup=alaIgmpPortGroup, alaIgmpVlanMaxGroupExceedAction=alaIgmpVlanMaxGroupExceedAction, alaIgmpVlanZapping=alaIgmpVlanZapping, alaIgmpForwardDestAddress=alaIgmpForwardDestAddress, alaIgmpSource=alaIgmpSource, alaIgmpNeighborVlan=alaIgmpNeighborVlan, alaIgmpForwardGroupAddress=alaIgmpForwardGroupAddress, alaIgmpStaticQuerierEntry=alaIgmpStaticQuerierEntry, alaIgmpForwardHostAddress=alaIgmpForwardHostAddress, alaIgmpVersion=alaIgmpVersion, alaIgmpVlanStatus=alaIgmpVlanStatus, alaIgmpPort=alaIgmpPort, alaIgmpStaticQuerierGroup=alaIgmpStaticQuerierGroup, alaIgmpNeighborHostAddress=alaIgmpNeighborHostAddress, alaIgmpVlanGroup=alaIgmpVlanGroup, alaIgmpVlanUnsolicitedReportInterval=alaIgmpVlanUnsolicitedReportInterval, alaIgmpTunnelDestAddress=alaIgmpTunnelDestAddress, alaIgmpQueryInterval=alaIgmpQueryInterval, alaIgmpMaxGroupExceedAction=alaIgmpMaxGroupExceedAction, alaIgmpNeighborTimeout=alaIgmpNeighborTimeout, alaIgmpSourceDestAddress=alaIgmpSourceDestAddress, alaIgmpQuerierIfIndex=alaIgmpQuerierIfIndex, alaIgmpZapping=alaIgmpZapping, alaIgmpMemberTable=alaIgmpMemberTable, alaIgmpTunnelVlan=alaIgmpTunnelVlan, alaIgmpTunnelTable=alaIgmpTunnelTable, alaIgmpStaticNeighborGroup=alaIgmpStaticNeighborGroup, alaIgmpPortMaxGroupLimit=alaIgmpPortMaxGroupLimit, alaIgmpPortVlan=alaIgmpPortVlan, alaIgmpQuerierCount=alaIgmpQuerierCount, alaIgmpNeighborEntry=alaIgmpNeighborEntry, alaIgmpSourceTimeout=alaIgmpSourceTimeout, alcatelIND1IgmpMIBGroups=alcatelIND1IgmpMIBGroups, alaIgmpMemberIfIndex=alaIgmpMemberIfIndex, alaIgmpTunnelGroupAddress=alaIgmpTunnelGroupAddress, alaIgmpMemberEntry=alaIgmpMemberEntry, alaIgmpVlanIndex=alaIgmpVlanIndex, alaIgmpStaticMemberRowStatus=alaIgmpStaticMemberRowStatus, alaIgmpPortMaxGroupExceedAction=alaIgmpPortMaxGroupExceedAction, alaIgmpStaticNeighborVlan=alaIgmpStaticNeighborVlan, alaIgmpStaticQuerierRowStatus=alaIgmpStaticQuerierRowStatus, alaIgmpForwardNextIfIndex=alaIgmpForwardNextIfIndex, alaIgmpStaticNeighbor=alaIgmpStaticNeighbor, alaIgmpTunnelEntry=alaIgmpTunnelEntry, alaIgmpForwardIfIndex=alaIgmpForwardIfIndex, alaIgmpMaxGroupLimit=alaIgmpMaxGroupLimit, alaIgmpVlanId=alaIgmpVlanId, alaIgmpMemberGroup=alaIgmpMemberGroup, alaIgmpQuerierTimeout=alaIgmpQuerierTimeout, alaIgmpVlanRobustness=alaIgmpVlanRobustness, alaIgmpVlan=alaIgmpVlan, alaIgmpTunnelType=alaIgmpTunnelType, alaIgmpForwardEntry=alaIgmpForwardEntry, alaIgmpVlanSpoofing=alaIgmpVlanSpoofing, alaIgmpQuerierHostAddress=alaIgmpQuerierHostAddress, alaIgmpRouterTimeout=alaIgmpRouterTimeout, alaIgmpStaticMemberGroupAddress=alaIgmpStaticMemberGroupAddress, alaIgmpStaticQuerierVlan=alaIgmpStaticQuerierVlan, alaIgmpLastMemberQueryInterval=alaIgmpLastMemberQueryInterval, alaIgmpMemberSourceAddress=alaIgmpMemberSourceAddress, alaIgmpQuerierTable=alaIgmpQuerierTable, alaIgmpStaticMemberTable=alaIgmpStaticMemberTable, alaIgmpQuerierForwarding=alaIgmpQuerierForwarding, alaIgmpStaticNeighborEntry=alaIgmpStaticNeighborEntry, alaIgmpCompliance=alaIgmpCompliance, alaIgmpVlanQueryInterval=alaIgmpVlanQueryInterval, alaIgmpQuerying=alaIgmpQuerying, alaIgmpNeighbor=alaIgmpNeighbor, alaIgmpVlanProxying=alaIgmpVlanProxying, alaIgmpSourceVlan=alaIgmpSourceVlan, alaIgmpUnsolicitedReportInterval=alaIgmpUnsolicitedReportInterval, alaIgmpTunnel=alaIgmpTunnel, alaIgmpVlanSourceTimeout=alaIgmpVlanSourceTimeout, alaIgmpForwardNextVlan=alaIgmpForwardNextVlan, alaIgmpQuerier=alaIgmpQuerier, alaIgmpProxying=alaIgmpProxying, alaIgmpVlanQuerierForwarding=alaIgmpVlanQuerierForwarding, alaIgmpSpoofing=alaIgmpSpoofing, alaIgmpStaticQuerierTable=alaIgmpStaticQuerierTable, alcatelIND1IgmpMIB=alcatelIND1IgmpMIB, alaIgmpStaticNeighborRowStatus=alaIgmpStaticNeighborRowStatus, alaIgmpStatus=alaIgmpStatus, alaIgmpForwardType=alaIgmpForwardType, alaIgmpVlanTable=alaIgmpVlanTable, alaIgmpQueryResponseInterval=alaIgmpQueryResponseInterval, alaIgmpStaticNeighborIfIndex=alaIgmpStaticNeighborIfIndex, alaIgmpForwardGroup=alaIgmpForwardGroup, alaIgmpTunnelHostAddress=alaIgmpTunnelHostAddress, alaIgmpPortVlanTable=alaIgmpPortVlanTable, alaIgmpStaticMemberGroup=alaIgmpStaticMemberGroup, alaIgmpTunnelNextDestAddress=alaIgmpTunnelNextDestAddress, alcatelIND1IgmpMIBCompliances=alcatelIND1IgmpMIBCompliances, alaIgmpNeighborIfIndex=alaIgmpNeighborIfIndex, alaIgmpVlanQueryResponseInterval=alaIgmpVlanQueryResponseInterval, alaIgmpForwardTable=alaIgmpForwardTable, alaIgmpStaticQuerierIfIndex=alaIgmpStaticQuerierIfIndex, alaIgmpVlanMaxGroupLimit=alaIgmpVlanMaxGroupLimit, alaIgmpRobustness=alaIgmpRobustness, alaIgmpTunnelNextType=alaIgmpTunnelNextType, alaIgmpQuerierEntry=alaIgmpQuerierEntry, PYSNMP_MODULE_ID=alcatelIND1IgmpMIB, alaIgmpMemberTimeout=alaIgmpMemberTimeout, alaIgmpStaticQuerier=alaIgmpStaticQuerier, alaIgmpPortVlanMaxGroupExceedAction=alaIgmpPortVlanMaxGroupExceedAction, alaIgmpVlanQuerying=alaIgmpVlanQuerying, alaIgmpVlanRouterTimeout=alaIgmpVlanRouterTimeout, alaIgmpForwardOrigAddress=alaIgmpForwardOrigAddress, alaIgmpQuerierGroup=alaIgmpQuerierGroup, alaIgmpPortVlanGroup=alaIgmpPortVlanGroup, alaIgmpForwardVlan=alaIgmpForwardVlan, alaIgmpNeighborGroup=alaIgmpNeighborGroup, alaIgmpSourceType=alaIgmpSourceType, alaIgmpSourceGroupAddress=alaIgmpSourceGroupAddress, alaIgmpPortIfIndex=alaIgmpPortIfIndex, alaIgmpVlanEntry=alaIgmpVlanEntry, alaIgmpMemberCount=alaIgmpMemberCount, alaIgmpTunnelGroup=alaIgmpTunnelGroup, alaIgmpStaticMemberEntry=alaIgmpStaticMemberEntry, alaIgmpTunnelOrigAddress=alaIgmpTunnelOrigAddress, alaIgmpStaticNeighborTable=alaIgmpStaticNeighborTable, alaIgmpNeighborTable=alaIgmpNeighborTable)
