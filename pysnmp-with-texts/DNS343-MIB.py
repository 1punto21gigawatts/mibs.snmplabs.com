#
# PySNMP MIB module DNS343-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNS343-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:52:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, Integer32, TimeTicks, Gauge32, ObjectIdentity, Counter32, MibIdentifier, iso, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Integer32", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter32", "MibIdentifier", "iso", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter64", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50))
projectID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1))
modelID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 4))
submodelID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1))
nasAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1))
dns343AgentVer = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343AgentVer.setStatus('current')
if mibBuilder.loadTexts: dns343AgentVer.setDescription('version information for the agent of SNMP of DNS343.')
dns343SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343SoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: dns343SoftwareVersion.setDescription('The device software version.')
dns343HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343HostName.setStatus('current')
if mibBuilder.loadTexts: dns343HostName.setDescription('The device host name.')
dns343DHCPServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343DHCPServer.setStatus('current')
if mibBuilder.loadTexts: dns343DHCPServer.setDescription('DHCP Server status. 1 : enable 0 : disable ')
dns343FTPServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343FTPServer.setStatus('current')
if mibBuilder.loadTexts: dns343FTPServer.setDescription('Ftp Server status. 1 : enable 0 : disable ')
dns343NetType = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343NetType.setStatus('current')
if mibBuilder.loadTexts: dns343NetType.setDescription('The Network type. ( 0 : Workgroup 1 : Active Directory)')
dns343Temperature = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343Temperature.setStatus('current')
if mibBuilder.loadTexts: dns343Temperature.setDescription('The temperature of the system.')
dns343FanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343FanStatus.setStatus('current')
if mibBuilder.loadTexts: dns343FanStatus.setDescription('The status of the fan0 & fan1.')
dns343VolumeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 9), )
if mibBuilder.loadTexts: dns343VolumeTable.setStatus('current')
if mibBuilder.loadTexts: dns343VolumeTable.setDescription('A table of active volumes on the NAS device.')
dns343VolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 9, 1), ).setIndexNames((0, "DNS343-MIB", "dns343VolumeNum"))
if mibBuilder.loadTexts: dns343VolumeEntry.setStatus('current')
if mibBuilder.loadTexts: dns343VolumeEntry.setDescription('An entry in the volume table.')
dns343VolumeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343VolumeNum.setStatus('current')
if mibBuilder.loadTexts: dns343VolumeNum.setDescription('Instance number of the volume entry.')
dns343VolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343VolumeName.setStatus('current')
if mibBuilder.loadTexts: dns343VolumeName.setDescription('The name of the volume.')
dns343VolumeFsType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343VolumeFsType.setStatus('current')
if mibBuilder.loadTexts: dns343VolumeFsType.setDescription('The type of file systme of the volume. Example : ext2 or ext3')
dns343VolumeRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343VolumeRaidLevel.setStatus('current')
if mibBuilder.loadTexts: dns343VolumeRaidLevel.setDescription('The RAID level of the volume. (RAID0 RAID1 RAID5 LINEAR NORMAL)')
dns343VolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343VolumeSize.setStatus('current')
if mibBuilder.loadTexts: dns343VolumeSize.setDescription('The size of the volume in bytes.')
dns343VolumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343VolumeFreeSpace.setStatus('current')
if mibBuilder.loadTexts: dns343VolumeFreeSpace.setDescription('Free space on the volume in bytes.')
dns343DiskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 10), )
if mibBuilder.loadTexts: dns343DiskTable.setStatus('current')
if mibBuilder.loadTexts: dns343DiskTable.setDescription('A table of physical disks attached to the NAS device.')
dns343DiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 10, 1), ).setIndexNames((0, "DNS343-MIB", "dns343DiskNum"))
if mibBuilder.loadTexts: dns343DiskEntry.setStatus('current')
if mibBuilder.loadTexts: dns343DiskEntry.setDescription('An entry in the physical disk table.')
dns343DiskNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343DiskNum.setStatus('current')
if mibBuilder.loadTexts: dns343DiskNum.setDescription('Instance number of the disk entry.')
dns343DiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343DiskVendor.setStatus('current')
if mibBuilder.loadTexts: dns343DiskVendor.setDescription('The vendor of the disk drive.')
dns343DiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343DiskModel.setStatus('current')
if mibBuilder.loadTexts: dns343DiskModel.setDescription("The disk drive's model name.")
dns343DiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343DiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: dns343DiskSerialNumber.setDescription("The disk drive's serial number.")
dns343DiskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343DiskTemperature.setStatus('current')
if mibBuilder.loadTexts: dns343DiskTemperature.setDescription('The centigrade temperature of this disk.')
dns343DiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns343DiskCapacity.setStatus('current')
if mibBuilder.loadTexts: dns343DiskCapacity.setDescription('The capacity of the disk in GB.')
notifyEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 200))
notifyPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 200, 1))
if mibBuilder.loadTexts: notifyPasswdChanged.setStatus('current')
if mibBuilder.loadTexts: notifyPasswdChanged.setDescription("An indication that the Administrator's password has been changed.")
notifyFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 200, 2))
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setStatus('current')
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setDescription('An indication that firmware has been upgraded.')
notifyNetworkChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 200, 3))
if mibBuilder.loadTexts: notifyNetworkChanged.setStatus('current')
if mibBuilder.loadTexts: notifyNetworkChanged.setDescription('An indication that the network settings has been changed.')
notifyTemperatureExceeded = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 4, 1, 1, 200, 4))
if mibBuilder.loadTexts: notifyTemperatureExceeded.setStatus('current')
if mibBuilder.loadTexts: notifyTemperatureExceeded.setDescription('An indication that system temperature has exceeded.')
mibBuilder.exportSymbols("DNS343-MIB", dns343DiskEntry=dns343DiskEntry, dns343VolumeNum=dns343VolumeNum, dns343VolumeSize=dns343VolumeSize, d_link=d_link, dns343DiskTemperature=dns343DiskTemperature, dns343DiskNum=dns343DiskNum, dns343DiskTable=dns343DiskTable, dns343FTPServer=dns343FTPServer, dns343DiskVendor=dns343DiskVendor, notifyFirmwareUpgraded=notifyFirmwareUpgraded, dns343VolumeFreeSpace=dns343VolumeFreeSpace, notifyTemperatureExceeded=notifyTemperatureExceeded, dns343VolumeRaidLevel=dns343VolumeRaidLevel, dns343VolumeFsType=dns343VolumeFsType, dns343FanStatus=dns343FanStatus, projectID=projectID, dns343VolumeTable=dns343VolumeTable, dns343SoftwareVersion=dns343SoftwareVersion, dns343DiskSerialNumber=dns343DiskSerialNumber, nasAgent=nasAgent, dns343DiskCapacity=dns343DiskCapacity, notifyPasswdChanged=notifyPasswdChanged, dns343VolumeName=dns343VolumeName, dns343Temperature=dns343Temperature, notifyNetworkChanged=notifyNetworkChanged, notifyEvts=notifyEvts, dns343AgentVer=dns343AgentVer, dns343DiskModel=dns343DiskModel, dns343DHCPServer=dns343DHCPServer, productID=productID, dns343NetType=dns343NetType, dns343VolumeEntry=dns343VolumeEntry, modelID=modelID, dns343HostName=dns343HostName, submodelID=submodelID)
