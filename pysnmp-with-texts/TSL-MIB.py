#
# PySNMP MIB module TSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TSL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, iso, IpAddress, NotificationType, Bits, Counter64, Counter32, TimeTicks, Unsigned32, enterprises, NotificationType, Opaque, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "IpAddress", "NotificationType", "Bits", "Counter64", "Counter32", "TimeTicks", "Unsigned32", "enterprises", "NotificationType", "Opaque", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

tslMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6853))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 6853, 2))
alarmIdent = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIdent.setStatus('mandatory')
if mibBuilder.loadTexts: alarmIdent.setDescription('Equipment alarms description and version')
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 6853, 2, 2), )
if mibBuilder.loadTexts: alarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: alarmTable.setDescription('The table of alarm entries')
alarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1), ).setIndexNames((0, "TSL-MIB", "alarmTableIndex"))
if mibBuilder.loadTexts: alarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alarmEntry.setDescription(' An alarm entry in the table')
alarmTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: alarmTableIndex.setDescription('The index into the table')
alarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 1), ("gpi", 2), ("outputFail", 3), ("psuFail", 4), ("currentAlarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmType.setStatus('mandatory')
if mibBuilder.loadTexts: alarmType.setDescription('Alarm type')
alarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: alarmIndex.setDescription('Alarm type number')
alarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmText.setStatus('mandatory')
if mibBuilder.loadTexts: alarmText.setDescription('Alarm description')
alarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState.setStatus('mandatory')
if mibBuilder.loadTexts: alarmState.setDescription('Alarm state')
alarmPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normallyOpen", 2), ("normallyClosed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmPolarity.setStatus('mandatory')
if mibBuilder.loadTexts: alarmPolarity.setDescription('Alarm active polarity (notApplicable for non-gpi alarms)')
alarmData = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 2, 2, 1, 7), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmData.setStatus('optional')
if mibBuilder.loadTexts: alarmData.setDescription('Additional alarm data of variable length, according to alarm type.')
alarmTotal = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTotal.setStatus('mandatory')
if mibBuilder.loadTexts: alarmTotal.setDescription('The total number of alarms in the table')
alarmLocation = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmLocation.setStatus('mandatory')
if mibBuilder.loadTexts: alarmLocation.setDescription('The physical location of the equipment generating the alarm')
alarmEqptTemp = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEqptTemp.setStatus('optional')
if mibBuilder.loadTexts: alarmEqptTemp.setDescription('Equipment temperature (in degrees Centigrade)')
alarmEqptTempHi = MibScalar((1, 3, 6, 1, 4, 1, 6853, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmEqptTempHi.setStatus('optional')
if mibBuilder.loadTexts: alarmEqptTempHi.setDescription('Equipment temperature alarm point (degrees Centigrade)')
alarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,4)).setObjects(("TSL-MIB", "alarmTableIndex"), ("TSL-MIB", "alarmType"), ("TSL-MIB", "alarmIndex"), ("TSL-MIB", "alarmText"), ("TSL-MIB", "alarmState"), ("TSL-MIB", "alarmPolarity"), ("TSL-MIB", "alarmData"))
if mibBuilder.loadTexts: alarmTrap.setDescription('An entry in the alarm table has changed state')
alarmEqptTempHiTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,5)).setObjects(("TSL-MIB", "alarmEqptTemp"))
if mibBuilder.loadTexts: alarmEqptTempHiTrap.setDescription('The equipment temperature has exceeded the maximum allowed')
alarmEqptTempOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,6)).setObjects(("TSL-MIB", "alarmEqptTemp"))
if mibBuilder.loadTexts: alarmEqptTempOkTrap.setDescription('The equipment temperature is now within limits')
mdu12 = MibIdentifier((1, 3, 6, 1, 4, 1, 6853, 3))
mdu12Ident = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdu12Ident.setStatus('mandatory')
if mibBuilder.loadTexts: mdu12Ident.setDescription('Equipment description and version')
mduPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("simultaneous", 1), ("sequential", 2), ("delayed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduPowerOn.setStatus('mandatory')
if mibBuilder.loadTexts: mduPowerOn.setDescription('MDU power-on output sequence')
mduSeqDelay = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduSeqDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mduSeqDelay.setDescription('Sequential mode delay between outputs')
mduOutputTable = MibTable((1, 3, 6, 1, 4, 1, 6853, 3, 4), )
if mibBuilder.loadTexts: mduOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputTable.setDescription('Table of output controls')
mduOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1), ).setIndexNames((0, "TSL-MIB", "mduOutputIndex"))
if mibBuilder.loadTexts: mduOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputEntry.setDescription(' An entry in the output table')
mduOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputIndex.setDescription('Output number')
mduOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("locked-Off", 3), ("locked-On", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputState.setDescription('MDU Output status')
mduOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputDelay.setDescription('Output on delay from power on (Delay mode only)')
mduOutputlowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputlowerCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputlowerCurrent.setDescription('Lower current limit for output')
mduOutputupperCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputupperCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputupperCurrent.setDescription('Upper current limit for output')
mduOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputCurrent.setDescription('Output current')
mduOutputpowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputpowerFactor.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputpowerFactor.setDescription('Output power factor')
mduOutputVA = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputVA.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputVA.setDescription('Output apparent power')
mduOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduOutputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputWatts.setDescription('Output real power')
mduOutputCal = MibTableColumn((1, 3, 6, 1, 4, 1, 6853, 3, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduOutputCal.setStatus('mandatory')
if mibBuilder.loadTexts: mduOutputCal.setDescription('Output current measure calibration data')
mduPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("totalLoss", 1), ("input1OK", 2), ("input2OK", 3), ("allOk", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mduPowerStatus.setDescription('Status of MDU power inlets')
mduVoltageCal = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduVoltageCal.setStatus('mandatory')
if mibBuilder.loadTexts: mduVoltageCal.setDescription('Voltage measure calibration data')
mduVoltage = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mduVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: mduVoltage.setDescription('Voltage measurement')
mduVoltageFloor = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduVoltageFloor.setStatus('mandatory')
if mibBuilder.loadTexts: mduVoltageFloor.setDescription('Voltage lower limit')
mduVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduVoltageLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mduVoltageLimit.setDescription('Voltage upper limit')
mduTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduTotalCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: mduTotalCurrent.setDescription('Total current measurement')
mduCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduCurrentLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mduCurrentLimit.setDescription('Current total limit')
mduAuxRly1 = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduAuxRly1.setStatus('mandatory')
if mibBuilder.loadTexts: mduAuxRly1.setDescription('Auxiliary Relay 1 state')
mduAuxRly2 = MibScalar((1, 3, 6, 1, 4, 1, 6853, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mduAuxRly2.setStatus('mandatory')
if mibBuilder.loadTexts: mduAuxRly2.setDescription('Auxiliary Relay 2 state')
mduPowerStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,7)).setObjects(("TSL-MIB", "mduPowerStatus"))
if mibBuilder.loadTexts: mduPowerStatusTrap.setDescription('The power input to the MDU has changed state')
mduVoltageStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,8)).setObjects(("TSL-MIB", "mduVoltage"))
if mibBuilder.loadTexts: mduVoltageStatusTrap.setDescription('The voltage to the MDU has traversed a limit')
mduTotalCurrentStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6853) + (0,9)).setObjects(("TSL-MIB", "mduTotalCurrent"))
if mibBuilder.loadTexts: mduTotalCurrentStatusTrap.setDescription('The total current through the MDU has traversed a limit')
mibBuilder.exportSymbols("TSL-MIB", alarmIdent=alarmIdent, mdu12=mdu12, alarmTableIndex=alarmTableIndex, alarmEqptTempHiTrap=alarmEqptTempHiTrap, alarmData=alarmData, mduCurrentLimit=mduCurrentLimit, mduTotalCurrent=mduTotalCurrent, mduOutputupperCurrent=mduOutputupperCurrent, mduVoltage=mduVoltage, alarmText=alarmText, mduOutputpowerFactor=mduOutputpowerFactor, mduTotalCurrentStatusTrap=mduTotalCurrentStatusTrap, mduVoltageLimit=mduVoltageLimit, mduVoltageFloor=mduVoltageFloor, alarmLocation=alarmLocation, tslMIB=tslMIB, mduPowerOn=mduPowerOn, mduOutputIndex=mduOutputIndex, mduOutputlowerCurrent=mduOutputlowerCurrent, mduPowerStatusTrap=mduPowerStatusTrap, alarmType=alarmType, alarm=alarm, alarmEqptTemp=alarmEqptTemp, mduOutputTable=mduOutputTable, mduOutputCurrent=mduOutputCurrent, mduOutputCal=mduOutputCal, alarmEntry=alarmEntry, alarmTotal=alarmTotal, alarmState=alarmState, mduSeqDelay=mduSeqDelay, alarmTable=alarmTable, alarmEqptTempOkTrap=alarmEqptTempOkTrap, mduOutputVA=mduOutputVA, mduAuxRly1=mduAuxRly1, mduPowerStatus=mduPowerStatus, alarmTrap=alarmTrap, alarmPolarity=alarmPolarity, DisplayString=DisplayString, mdu12Ident=mdu12Ident, alarmIndex=alarmIndex, mduOutputState=mduOutputState, alarmEqptTempHi=alarmEqptTempHi, mduAuxRly2=mduAuxRly2, mduOutputDelay=mduOutputDelay, mduOutputEntry=mduOutputEntry, mduVoltageStatusTrap=mduVoltageStatusTrap, mduVoltageCal=mduVoltageCal, mduOutputWatts=mduOutputWatts)
