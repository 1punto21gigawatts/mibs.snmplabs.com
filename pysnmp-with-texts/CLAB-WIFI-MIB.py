#
# PySNMP MIB module CLAB-WIFI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CLAB-WIFI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:25:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
clabProjWireless, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjWireless")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Gauge32, Counter64, Integer32, iso, ObjectIdentity, MibIdentifier, IpAddress, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Counter64", "Integer32", "iso", "ObjectIdentity", "MibIdentifier", "IpAddress", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "TimeTicks")
DateAndTime, RowStatus, MacAddress, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "MacAddress", "TextualConvention", "TruthValue", "DisplayString")
clabWIFIMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1))
clabWIFIMib.setRevisions(('2017-04-13 00:00', '2016-08-03 00:00', '2016-03-30 00:00', '2015-12-02 00:00', '2014-03-11 00:00', '2012-01-06 00:00', '2010-09-27 00:00', '2010-07-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: clabWIFIMib.setRevisionsDescriptions(('Updated per ECN CLAB-WIFI-MIB-N-17.0159-1.', 'Updated per ECN WiFi-MGMT-N-16.0035-3.', 'Updated per ECN WiFi-MGMT-N-16.0034-1. Changes: 1. Deprecated clabWIFIAccessPointPasspointVenueNamesTable, clabWIFIAccessPointPasspointNAIRealmsTable and clabWIFIAccessPointPasspointOSUTable. 2. Created clabWIFIAccessPointPasspoint2VenueNamesTable, clabWIFIAccessPointPasspoint2NAIRealmsTable, clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsTable, clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthTable, clabWIFIAccessPointPasspoint2OSUTable, clabWIFIAccessPointPasspoint2OSUProviderNamesTable, clabWIFIAccessPointPasspoint2OSUProviderIconsTable and clabWIFIAccessPointPasspoint2OSUProviderServiceDescTable.', 'Revised Version includes ECN WiFi-MGMT-N-15.0030-1 ', 'Revised Version includes ECN WiFi-MGMT-N-14.0017-2 and published as part of WR-SP-WiFi-MGMT-I04-140311', 'Revised Version includes ECN WiFi-MGMT-N-11.0006-5 and published as part of WR-SP-WiFi-MGMT-I03-120216', 'Revised Version includes ECN WiFi-MGMT-N-11.0002-4 and published as part of WR-SP-WiFi-MGMT-I02-101006', 'Initial version, published as part of the CableLabs Wi-Fi Provisioning Framework Specification WR-SP-WiFi-MGMT-I01-100729 Copyright 2010 Cable Television Laboratories, Inc. All rights reserved.',))
if mibBuilder.loadTexts: clabWIFIMib.setLastUpdated('201704130000Z')
if mibBuilder.loadTexts: clabWIFIMib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: clabWIFIMib.setContactInfo('Broadband Network Services Cable Television Laboratories, Inc. 858 Coal Creek Circle, Louisville, CO 80027, USA Phone: +1 303-661-9100 Email: mibs@cablelabs.com')
if mibBuilder.loadTexts: clabWIFIMib.setDescription("Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. This MIB module contains the management objects for the Wi-Fi interface. Copyright 1999-2017 Cable Television Laboratories, Inc. All rights reserved.")
class PktErrorRateType(TextualConvention, Integer32):
    description = 'This data type represents a packet error rate in units of 10^-5 or a resolution of 0.000000001 precision.'
    status = 'current'
    displayHint = 'd-9'

clabWIFINotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 0))
clabWIFIObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1))
clabWIFIWiFi = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 1))
clabWIFIWiFiRadioNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIWiFiRadioNumberOfEntries.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIWiFiRadioNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIWiFiRadioNumberOfEntries.setDescription('This object is defined in TR-181 Device.WiFi.RadioNumberOfEntries.')
clabWIFIWiFiSSIDNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIWiFiSSIDNumberOfEntries.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIWiFiSSIDNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIWiFiSSIDNumberOfEntries.setDescription('This object is defined in TR-181 Device.WiFi.SSIDNumberOfEntries.')
clabWIFIWiFiAccessPointNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIWiFiAccessPointNumberOfEntries.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIWiFiAccessPointNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIWiFiAccessPointNumberOfEntries.setDescription('This object is defined in TR-181 Device.WiFi.AccessPointNumberOfEntries.')
clabWIFIWiFiEndPointNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIWiFiEndPointNumberOfEntries.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIWiFiEndPointNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIWiFiEndPointNumberOfEntries.setDescription('This object is defined in TR-181 Device.WiFi.EndPointNumberOfEntries.')
clabWIFISSIDSteeringEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFISSIDSteeringEnabled.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDSteeringEnabled.setDescription('This object is defined as a CableLabs TR-181 extension to Device.WiFi. It enables support to steer a user device to a Private SSID when available.')
clabWIFICommitSettings = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFICommitSettings.setStatus('current')
if mibBuilder.loadTexts: clabWIFICommitSettings.setDescription("This attribute when set to 'true' flushes the WiFi settings in non-volatile memory and reinitialize the WiFi system with the new set of values without reboot. This attribute reports a value 'false' when WiFi attributes have been changed but the changes are not active (i.e. not flushed in non-volatile and not part of the active configuration). Systems that support immediate commit upon any attribute change will report this attribute as 'true' always, and silently accepts sets to 'true'.")
clabWIFIRadioTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2), )
if mibBuilder.loadTexts: clabWIFIRadioTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioTable.setDescription('This object is defined in TR-181 Device.WiFi.Radio')
clabWIFIRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIRadioId"))
if mibBuilder.loadTexts: clabWIFIRadioEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioEntry.setDescription('The Conceptual row of clabWIFIRadioTable.')
clabWIFIRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: clabWIFIRadioId.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioId.setDescription('The key for a unique instance of this object. This value corresponds to the Interface Index (i.e., ifIndex in SMIv2). ')
clabWIFIRadioEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioEnable.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Enable')
clabWIFIRadioStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7), ("error", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatus.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatus.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Status.')
clabWIFIRadioAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioAlias.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioAlias.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioAlias.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Alias.')
clabWIFIRadioName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioName.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioName.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioName.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Name.')
clabWIFIRadioLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioLastChange.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioLastChange.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioLastChange.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.LastChange.')
clabWIFIRadioLowerLayers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioLowerLayers.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioLowerLayers.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioLowerLayers.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.LowerLayers.')
clabWIFIRadioUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioUpstream.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioUpstream.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioUpstream.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Upstream')
clabWIFIRadioMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 9), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioMaxBitRate.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioMaxBitRate.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioMaxBitRate.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.MaxBitRate.')
clabWIFIRadioSupportedFrequencyBands = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioSupportedFrequencyBands.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioSupportedFrequencyBands.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioSupportedFrequencyBands.setDescription('This object is defined in TR-181 Device.WiFi.RadioSupportedFrequencyBands.')
clabWIFIRadioOperatingFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("n2dot4Ghz", 1), ("n5Ghz", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioOperatingFrequencyBand.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioOperatingFrequencyBand.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioOperatingFrequencyBand.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.OperatingFrequencyBand')
clabWIFIRadioSupportedStandards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioSupportedStandards.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioSupportedStandards.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioSupportedStandards.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.SupportedStandards')
clabWIFIRadioOperatingStandards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("g", 3), ("n", 5), ("ac", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioOperatingStandards.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioOperatingStandards.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioOperatingStandards.setDescription('This object is modified from TR-181 Device.WiFi.Radio.{i}.OperatingStandards')
clabWIFIRadioPossibleChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioPossibleChannels.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioPossibleChannels.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioPossibleChannels.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.PossibleChannels')
clabWIFIRadioChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioChannelsInUse.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioChannelsInUse.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelsInUse.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.ChannelsInUse')
clabWIFIRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioChannel.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioChannel.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannel.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Channel. For 80MHz, 160MHz and 80+80MHz RF channels of 802.11ac, this object indicates the Primary Channel of the RF channel.')
clabWIFIRadioAutoChannelSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioAutoChannelSupported.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioAutoChannelSupported.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioAutoChannelSupported.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.AutoChannelSupported')
clabWIFIRadioAutoChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioAutoChannelEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioAutoChannelEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioAutoChannelEnable.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.AutoChannelEnable')
clabWIFIRadioAutoChannelRefreshPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 19), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioAutoChannelRefreshPeriod.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioAutoChannelRefreshPeriod.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioAutoChannelRefreshPeriod.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.AutoChannelRefreshPeriod')
clabWIFIRadioOperatingChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("n20MHz", 1), ("n40MHz", 2), ("ac80MHz", 3), ("ac160MHz", 4), ("ac80plus80MHz", 5), ("auto", 6))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioOperatingChannelBandwidth.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioOperatingChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioOperatingChannelBandwidth.setDescription('This object is modified from TR-181 Device.WiFi.Radio.{i}.OperatingChannelBandwidth')
clabWIFIRadioExtensionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aboveControlChannel", 1), ("belowControlChannel", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioExtensionChannel.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioExtensionChannel.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioExtensionChannel.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.ExtensionChannel')
clabWIFIRadioGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("n400nsec", 1), ("n800nsec", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioGuardInterval.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioGuardInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioGuardInterval.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.RadioGuardInterval')
clabWIFIRadioMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioMCS.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioMCS.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioMCS.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.RadioMCS ')
clabWIFIRadioTransmitPowerSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioTransmitPowerSupported.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioTransmitPowerSupported.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioTransmitPowerSupported.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.TransmitPowerSupported')
clabWIFIRadioTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioTransmitPower.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioTransmitPower.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioTransmitPower.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.TransmitPower')
clabWIFIRadioIEEE80211hSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioIEEE80211hSupported.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioIEEE80211hSupported.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioIEEE80211hSupported.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.IEEE80211hSupported')
clabWIFIRadioIEEE80211hEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioIEEE80211hEnabled.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioIEEE80211hEnabled.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioIEEE80211hEnabled.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.IEEE80211hEnabled')
clabWIFIRadioRegulatoryDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 28), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioRegulatoryDomain.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioRegulatoryDomain.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioRegulatoryDomain.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.RegulatoryDomain')
clabWIFIRadioNonContiguousChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioNonContiguousChannel.setReference('IEEE 802.11ac standard.')
if mibBuilder.loadTexts: clabWIFIRadioNonContiguousChannel.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioNonContiguousChannel.setDescription('This object is defined for the Noncontiguous 80+80Mhz channels only. It indicates the center of the second 80Mhz subchannel.')
clabWIFIRadioCarrierSenseThresholdInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 30), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioCarrierSenseThresholdInUse.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioCarrierSenseThresholdInUse.setDescription('This object is the RSSI signal level at which CS/CCA detects a busy condition. This attribute enables APs to increase minimum sensitivity to avoid detecting busy condition from multiple/weak Wi-Fi sources in dense Wi-Fi environments.')
clabWIFIRadioCarrierSenseThresholdRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 31), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioCarrierSenseThresholdRange.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIRadioCarrierSenseThresholdRange.setDescription('This object indicates the Carrier Sense ranges supported by the radio.')
clabWIFIRadioStatsChanUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsChanUtilization.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIRadioStatsChanUtilization.setDescription('This object indicates the fraction of the time AP senses a busy channel or transmits frames. This object provides visibility into channel capacity.')
clabWIFIRadioRtsCtsExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 33), Integer32()).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioRtsCtsExchange.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioRtsCtsExchange.setDescription('This object allows configuring the RTS/CTS parameters.')
clabWIFIRadioFrameAggregationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 34), Unsigned32()).setUnits('frames').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIRadioFrameAggregationLevel.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIRadioFrameAggregationLevel.setDescription('This object allows configuring the frame aggregation level depending on how dense the network is. For example, if the network is not congested, then a large number of frames can be aggregated and sent.')
clabWIFIRadioThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 35), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioThroughput.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIRadioThroughput.setDescription('This object indicates the throughput expressed in Mbps.')
clabWIFIRadioPktErrorRateSTA = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 36), PktErrorRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioPktErrorRateSTA.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIRadioPktErrorRateSTA.setDescription('This object indicates the traffic quality (e.g., HTTP, TCP) of an STA.')
clabWIFIRadioRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioRetryLimit.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioRetryLimit.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.RetryLimit.')
clabWIFIRadioCCARequest = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioCCARequest.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioCCARequest.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.CCARequest.')
clabWIFIRadioRPIHistogramRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 39), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioRPIHistogramRequest.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioRPIHistogramRequest.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.RPIHistogramRequest.')
clabWIFIRadioFragmentationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioFragmentationThreshold.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioFragmentationThreshold.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.FragmentationThreshold.')
clabWIFIRadioRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioRTSThreshold.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.RTSThreshold.')
clabWIFIRadioLongRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioLongRetryLimit.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioLongRetryLimit.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.RetryLimit.')
clabWIFIRadioBeaconPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioBeaconPeriod.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioBeaconPeriod.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.BeaconPeriod.')
clabWIFIRadioDTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioDTIMPeriod.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioDTIMPeriod.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.DTIMPeriod.')
clabWIFIRadioPacketAggregationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioPacketAggregationEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioPacketAggregationEnable.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}. PacketAggregationEnable.')
clabWIFIRadioBasicDataTransmitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 46), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioBasicDataTransmitRates.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioBasicDataTransmitRates.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.BasicDataTransmitRates.')
clabWIFIRadioOperationalDataTransmitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 47), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioOperationalDataTransmitRates.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioOperationalDataTransmitRates.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.OperationalDataTransmitRates.')
clabWIFIRadioSupportedDataTransmitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 48), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioSupportedDataTransmitRates.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioSupportedDataTransmitRates.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}. SupportedDataTransmitRates.')
clabWIFIRadioCarrierSenseThresholdRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 49), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioCarrierSenseThresholdRangeMin.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioCarrierSenseThresholdRangeMin.setDescription('Indicates the minimum Carrier Sense threshold level supported by the radio.')
clabWIFIRadioCarrierSenseThresholdRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 50), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioCarrierSenseThresholdRangeMax.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioCarrierSenseThresholdRangeMax.setDescription('Indicates the maximum Carrier Sense threshold level supported by the radio.')
clabWIFIRadioCCAReport = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioCCAReport.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioCCAReport.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.CCAReport.')
clabWIFIRadioRPIHistogramReport = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 52), OctetString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioRPIHistogramReport.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioRPIHistogramReport.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.RPIHistogramReport.')
clabWIFIRadioPreambleType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("short", 1), ("long", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioPreambleType.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioPreambleType.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}. PreambleType.')
clabWIFIRadioStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3), )
if mibBuilder.loadTexts: clabWIFIRadioStatsTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsTable.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Stats.')
clabWIFIRadioStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIRadioId"))
if mibBuilder.loadTexts: clabWIFIRadioStatsEntry.setReference('TR-181 Issue 2')
if mibBuilder.loadTexts: clabWIFIRadioStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsEntry.setDescription('The Conceptual row of clabWIFIRadioStatsTable.')
clabWIFIRadioStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsBytesSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsBytesSent.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Stats.BytesSent.')
clabWIFIRadioStatsBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsBytesReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsBytesReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsBytesReceived.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Stats.BytesReceived.')
clabWIFIRadioStatsPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Stats.PacketsSent.')
clabWIFIRadioStatsPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Stats.PacketsReceived.')
clabWIFIRadioStatsErrorsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsErrorsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsErrorsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsErrorsSent.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Stats.ErrorsSent.')
clabWIFIRadioStatsErrorsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsErrorsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsErrorsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsErrorsReceived.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Stats.ErrorsReceived.')
clabWIFIRadioStatsDiscardPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsDiscardPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsDiscardPacketsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsDiscardPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Stats.DiscardPacketsSent.')
clabWIFIRadioStatsDiscardPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsDiscardPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsDiscardPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsDiscardPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}.Stats.DiscardPacketsReceived.')
clabWIFIRadioStatsPLCPErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsPLCPErrorCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsPLCPErrorCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsPLCPErrorCount.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}. Stats.PLCPErrorCount.')
clabWIFIRadioStatsFCSErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsFCSErrorCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsFCSErrorCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsFCSErrorCount.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}. Stats.FCSErrorCount.')
clabWIFIRadioStatsInvalidMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsInvalidMACCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsInvalidMACCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsInvalidMACCount.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}. Stats.InvalidMACCount.')
clabWIFIRadioStatsPacketsOtherReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsPacketsOtherReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIRadioStatsPacketsOtherReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsPacketsOtherReceived.setDescription('This object is defined in TR-181 Device.WiFi.Radio.{i}. Stats.PacketsOtherReceived.')
clabWIFIRadioStatsNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 13), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsNoise.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsNoise.setDescription(' An indicator of average noise strength received at this radio, measured in dBm. This measurement of non-IEEE 802.11 noise power is made by sampling the channel when virtual carrier sense indicates idle and this radio is neither transmitting nor receiving a frame.')
clabWIFIRadioStatsFramesRetransmissionsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 14), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsFramesRetransmissionsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsFramesRetransmissionsSent.setDescription(' The FramesRetransmissionsSent parameter indicates the total number of frames retransmitted out of the interface (marked as duplicated). The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIRadioStatsFramesDuplicatedReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 15), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsFramesDuplicatedReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsFramesDuplicatedReceived.setDescription(' The FramesDuplicatedReceived indicated the total number of duplicated frames received on this interface. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIRadioStatsChannelUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioStatsChannelUtilization.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioStatsChannelUtilization.setDescription(' Report WIFI Radio Stats Channel Utilization. The fraction of the time AP senses a busy channel or transmits frames. Provides visibility into channel capacity.')
clabWIFIRadioChannelWiFiDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22))
clabWIFIRadioChannelWiFiDiagnosticsState = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("requested", 2), ("completed", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsState.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsState.setDescription('Indicates availability of WiFi SSID data.')
clabWIFIRadioChannelWiFiDiagnosticsLastRunTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsLastRunTimestamp.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsLastRunTimestamp.setDescription('Timestamp when the last diagnostic was completed.')
clabWIFIRadioChannelWiFiDiagnosticsResultNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultNumberOfEntries.setDescription('The number of entries in the clabWIFIRadioChannelWiFiDiagnosticsResultsTable.')
clabWIFIRadioChannelWiFiDiagnosticsResultsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 4), )
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsTable.setDescription('This table contains the results of a RadioChannelWiFiDiagnostics execution.')
clabWIFIRadioChannelWiFiDiagnosticsResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 4, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIRadioChannelWiFiDiagnosticsResultsChannel"))
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsEntry.setDescription('The Conceptual row of ClabWIFIRadioChannelWiFiDiagnosticsResultsEntry.')
clabWIFIRadioChannelWiFiDiagnosticsResultsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsChannel.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsChannel.setDescription("Channel number for which the current row's statistics refers.")
clabWIFIRadioChannelWiFiDiagnosticsResultsBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mhz20", 1), ("mhz40", 2), ("mhz80", 3), ("mhz160", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsBandwidth.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsBandwidth.setDescription('Indicates the bandwidth at which the channel is operating.')
clabWIFIRadioChannelWiFiDiagnosticsResultsAvailableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsAvailableCapacity.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsAvailableCapacity.setDescription('Percentage of total channel bandwidth available for use.')
clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFi = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFi.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFi.setDescription('Percentage of total channel bandwidth occupied by non-WiFi interface.')
clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFiClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 4, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFiClasses.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFiClasses.setDescription('Comma-separated list of strings. Each list item is an enumeration of: (Microwave, Bluetooth, Radar, Zigbee, etc).')
clabWIFIRadioChannelWiFiDiagnosticsResultsFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 22, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ghz24", 1), ("ghz5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsFrequencyBand.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadioChannelWiFiDiagnosticsResultsFrequencyBand.setDescription(' Indicates the frequency band at which the radio of this SSID instance is operating.')
clabWIFINeighboringWiFiDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21))
clabWIFINeighboringWiFiDiagnosticsMode = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("interval", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsMode.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsMode.setDescription('This object allows the operator to initiate a single diagnostic Execution (manual), set periodic diagnostic executions at specified interval (interval), or stop a scheduled periodic diagnostic (stop).')
clabWIFINeighboringWiFiDiagnosticsInterval = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsInterval.setDescription(" The interval, in seconds, between channel scans when DiagnosticMode is set to 'Interval.")
clabWIFINeighboringWiFiDiagnosticsState = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("requested", 2), ("completed", 3), ("error", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsState.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsState.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsState.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.DiagnosticsState ')
clabWIFINeighboringWiFiDiagnosticsTableClear = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsTableClear.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsTableClear.setDescription(' Clears all entries in the clabWIFINeighborWiFiDiagnosticsResultsTable. The agent will always return a value of false(2) when queried. ')
clabWIFINeighboringWiFiDiagnosticsTableMaxNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsTableMaxNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsTableMaxNumberOfEntries.setDescription(' Sets a maximum number of rows in this table. If a new row is to be written that would exceed the this maximum, the device must first delete the oldest row in the table. ')
clabWIFINeighboringWiFiDiagnosticsResultTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6), )
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsResultTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsResultTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsResultTable.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.')
clabWIFINeighboringWiFiDiagnosticsResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIRadioId"), (0, "CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsResultIndex"))
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsResultEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsResultEntry.setDescription('The Conceptual row of clabWIFINeighboringWiFiDiagnosticsResultTable.')
clabWIFINeighboringWiFiDiagnosticsResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsResultIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsResultIndex.setDescription('Secondary index used to allow multiple Diagnostics to Be stored.')
clabWIFINeighboringWiFiSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSSID.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSSID.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSSID.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.SSID')
clabWIFINeighboringWiFiBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiBSSID.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiBSSID.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiBSSID.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.BSSID')
clabWIFINeighboringWiFiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adhoc", 1), ("infrastructure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiMode.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiMode.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiMode.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.Mode')
clabWIFINeighboringWiFiChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiChannel.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiChannel.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiChannel.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.Channel')
clabWIFINeighboringWiFiSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSignalStrength.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSignalStrength.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSignalStrength.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.SignalStrength')
clabWIFINeighboringWiFiSecurityModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("wpa", 3), ("wpa2", 4), ("wpawpa2", 5), ("wpaenterprise", 6), ("wpa2enterprise", 7), ("wpawpa2enterprise", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSecurityModeEnabled.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSecurityModeEnabled.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSecurityModeEnabled.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.SecurityModeEnabled')
clabWIFINeighboringWiFiEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tkip", 1), ("aes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiEncryptionMode.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiEncryptionMode.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiEncryptionMode.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.EncryptionMode')
clabWIFINeighboringWiFiOperatingFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ghz24", 1), ("ghz5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiOperatingFrequencyBand.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiOperatingFrequencyBand.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiOperatingFrequencyBand.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.OperatingFrequencyBand')
clabWIFINeighboringWiFiSupportedStandards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("g", 3), ("n", 4), ("ac", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSupportedStandards.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSupportedStandards.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSupportedStandards.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.SupportedStandards')
clabWIFINeighboringWiFiOperatingStandards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiOperatingStandards.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiOperatingStandards.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiOperatingStandards.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.OperatingStandards')
clabWIFINeighboringWiFiOperatingChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8))).clone(namedValues=NamedValues(("mHz20", 1), ("mHz40", 2), ("mHz80", 3), ("mHz160", 4), ("mHz80plus80", 5), ("auto", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiOperatingChannelBandwidth.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiOperatingChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiOperatingChannelBandwidth.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.OperatingChannelBandwidth')
clabWIFINeighboringWiFiBeaconPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiBeaconPeriod.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiBeaconPeriod.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiBeaconPeriod.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.BeaconPeriod')
clabWIFINeighboringWiFiNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiNoise.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiNoise.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiNoise.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.Noise')
clabWIFINeighboringWiFiBasicDataTransferRates = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiBasicDataTransferRates.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiBasicDataTransferRates.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiBasicDataTransferRates.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.BasicDataTransferRates')
clabWIFINeighboringWiFiSupportedDataTransferRates = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSupportedDataTransferRates.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSupportedDataTransferRates.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSupportedDataTransferRates.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.SupportedDataTransferRates')
clabWIFINeighboringWiFiDTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDTIMPeriod.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDTIMPeriod.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDTIMPeriod.setDescription('This object is defined in TR-181 Device.WiFi.NeighboringWiFiDiagnostic.Result.{i}.DTIMPeriod')
clabWIFINeighboringWiFiSidebandPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upper", 1), ("lower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSidebandPosition.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSidebandPosition.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiSidebandPosition.setDescription(' The position of the sideband in case the bandwidth of the measured service set is 40 MHz.')
clabWIFINeighboringWiFiDiagnosticsLastRunTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsLastRunTimestamp.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsLastRunTimestamp.setDescription(' Timestamp when the channel Diagnostic was executed.')
clabWIFINeighboringWiFiDiagnosticsNonContiguousChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 6, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsNonContiguousChannel.setReference('IEEE 802.11ac standard.')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsNonContiguousChannel.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsNonContiguousChannel.setDescription('This object is defined for the Noncontiguous 80+80Mhz channels only. It indicates the center of the second 80Mhz subchannel.')
clabWIFINeighboringWiFiDiagnosticsResultNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 21, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsResultNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFINeighboringWiFiDiagnosticsResultNumberOfEntries.setDescription('The number of entries in the clabWIFINeighboringWiFiDiagnosticsResultTable.')
clabWIFISSIDTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4), )
if mibBuilder.loadTexts: clabWIFISSIDTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDTable.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.')
clabWIFISSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFISSIDId"))
if mibBuilder.loadTexts: clabWIFISSIDEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDEntry.setDescription('The Conceptual row of clabWIFISSIDTable.')
clabWIFISSIDId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: clabWIFISSIDId.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDId.setDescription('The key for a unique instance of this object. This value corresponds to the Interface Index (i.e., ifIndex in SMIv2). ')
clabWIFISSIDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDEnable.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Enable.')
clabWIFISSIDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7), ("error", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatus.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatus.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Status.')
clabWIFISSIDAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDAlias.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDAlias.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDAlias.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Alias.')
clabWIFISSIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDName.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDName.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDName.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Name.')
clabWIFISSIDLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDLastChange.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDLastChange.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDLastChange.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.LastChange.')
clabWIFISSIDLowerLayers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDLowerLayers.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDLowerLayers.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDLowerLayers.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.LowerLayers.')
clabWIFISSIDBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDBSSID.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDBSSID.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDBSSID.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.BSSID.')
clabWIFISSIDMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDMACAddress.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDMACAddress.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDMACAddress.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.MACAddress.')
clabWIFISSIDSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDSSID.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDSSID.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDSSID.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.SSID.')
clabWIFISSIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDRowStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDRowStatus.setDescription('The status of this instance')
clabWIFISSIDFragmentationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFISSIDFragmentationEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDFragmentationEnable.setDescription("This attribute when set to 'true' will indicate that fragmentation is enabled for this SSID. When set to false, indicates fragmentation is disabled for this SSID.")
clabWIFISSIDPeriodicStatsNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDPeriodicStatsNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPeriodicStatsNumberOfEntries.setDescription('Number of entries in the SSID Periodic stats table.')
clabWIFISSIDStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5), )
if mibBuilder.loadTexts: clabWIFISSIDStatsTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsTable.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.')
clabWIFISSIDStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFISSIDId"))
if mibBuilder.loadTexts: clabWIFISSIDStatsEntry.setReference('TR-181 Issue2')
if mibBuilder.loadTexts: clabWIFISSIDStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsEntry.setDescription('The Conceptual row of clabWIFISSIDStatsTable.')
clabWIFISSIDStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsBytesSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsBytesSent.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.BytesSent.')
clabWIFISSIDStatsBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsBytesReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsBytesReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsBytesReceived.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.BytesReceived.')
clabWIFISSIDStatsPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.PacketsSent.')
clabWIFISSIDStatsPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.PacketsReceived.')
clabWIFISSIDStatsErrorsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsErrorsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsErrorsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsErrorsSent.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.ErrorsSent.')
clabWIFISSIDStatsErrorsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsErrorsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsErrorsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsErrorsReceived.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.ErrorsReceived.')
clabWIFISSIDStatsUnicastPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsUnicastPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsUnicastPacketsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsUnicastPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.UnicastPacketsSent.')
clabWIFISSIDStatsUnicastPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsUnicastPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsUnicastPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsUnicastPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.UnicastPacketsReceived.')
clabWIFISSIDStatsDiscardPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsDiscardPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsDiscardPacketsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsDiscardPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.DiscardPacketsSent.')
clabWIFISSIDStatsDiscardPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsDiscardPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsDiscardPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsDiscardPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.DiscardPacketsReceived.')
clabWIFISSIDStatsMulticastPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsMulticastPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsMulticastPacketsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsMulticastPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.MulticastPacketsSent.')
clabWIFISSIDStatsMulticastPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsMulticastPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsMulticastPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsMulticastPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.MulticastPacketsReceived.')
clabWIFISSIDStatsBroadcastPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsBroadcastPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsBroadcastPacketsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsBroadcastPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.BroadcastPacketsSent.')
clabWIFISSIDStatsBroadcastPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsBroadcastPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsBroadcastPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsBroadcastPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.BroadcastPacketsReceived.')
clabWIFISSIDStatsUnknownProtoPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsUnknownProtoPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsUnknownProtoPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsUnknownProtoPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.SSID{i}.Stats.UnknownProtoPacketsReceived.')
clabWIFISSIDStatsRetransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsRetransCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsRetransCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsRetransCount.setDescription('This object is defined in TR-181 Device.WiFi.SSID.{i}.Stats.RetransCount.')
clabWIFISSIDStatsRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsRetryCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsRetryCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsRetryCount.setDescription('This object is defined in TR-181 Device.WiFi.SSID.{i}.Stats.RetryCount.')
clabWIFISSIDStatsMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsMultipleRetryCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsMultipleRetryCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsMultipleRetryCount.setDescription('This object is defined in TR-181 Device.WiFi.SSID.{i}.Stats.MutipleRetryCount.')
clabWIFISSIDStatsACKFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsACKFailureCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsACKFailureCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsACKFailureCount.setDescription('This object is defined in TR-181 Device.WiFi.SSID.{i}.Stats.ACKFailureCount.')
clabWIFISSIDStatsAggregatedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDStatsAggregatedPacketCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFISSIDStatsAggregatedPacketCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDStatsAggregatedPacketCount.setDescription('This object is defined in TR-181 Device.WiFi.SSID.{i}.Stats.AggregatedPacketCount.')
clabWIFIAccessPointTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6), )
if mibBuilder.loadTexts: clabWIFIAccessPointTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointTable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.')
clabWIFIAccessPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIAccessPointEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointEntry.setDescription('The Conceptual row of clabWIFIAccessPointTable.')
clabWIFIAccessPointId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: clabWIFIAccessPointId.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointId.setDescription('The key for a unique instance of this object.')
clabWIFIAccessPointEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointEnable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Enable.')
clabWIFIAccessPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("errorMisconfigured", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointStatus.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointStatus.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Status.')
clabWIFIAccessPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAlias.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAlias.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAlias.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Alias.')
clabWIFIAccessPointSSIDReference = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSSIDReference.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSSIDReference.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSSIDReference.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Reference.')
clabWIFIAccessPointSSIDAdvertisementEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSSIDAdvertisementEnabled.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSSIDAdvertisementEnabled.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSSIDAdvertisementEnabled.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AdvertisementEnabled.')
clabWIFIAccessPointRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointRetryLimit.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointRetryLimit.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointRetryLimit.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.RetryLimit.')
clabWIFIAccessPointWMMCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointWMMCapability.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWMMCapability.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWMMCapability.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.WMMCapability.')
clabWIFIAccessPointUAPSDCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointUAPSDCapability.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointUAPSDCapability.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointUAPSDCapability.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.UAPSDCapability.')
clabWIFIAccessPointWMMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointWMMEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWMMEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWMMEnable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.WMMEnable.')
clabWIFIAccessPointUAPSDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointUAPSDEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointUAPSDEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointUAPSDEnable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.UAPSDEnable.')
clabWIFIAccessPointAssociatedDeviceNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAssociatedDeviceNumberOfEntries.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAssociatedDeviceNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAssociatedDeviceNumberOfEntries.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AssociatedDeviceNumberOfEntries.')
clabWIFIAccessPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRowStatus.setDescription('The status of this instance.')
clabWIFIAccessPointPublicAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointPublicAccessMode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPublicAccessMode.setDescription('Establishes SSID as Public if True(1). The default is False(2) (i.e., Private). ')
clabWIFIAccessPointIsolationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointIsolationEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointIsolationEnable.setDescription(' Enables or disables device isolation. A value of true means that the devices connected to the Access Point are isolated from all other devices within the home network (as is typically the case for a Wireless Passpoint). This object is defined in TR-181 Device.WiFi.AccessPoint{i}.IsolationEnable.')
clabWIFIAccessPointMaxAssociatedDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointMaxAssociatedDevices.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointMaxAssociatedDevices.setDescription(' The maximum number of devices that can simultaneously be connected to the access point. A value of 0 means that there is no specific limit. This object is defined in TR-181 Device.WiFi.AccessPoint{i}. MaxAssociatedDevices.')
clabWIFIAccessPointPasspointSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointSupported.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointSupported.setDescription(' Passpoint2.0 is supported or not supported. This object is Defined as a CableLabs extension to TR-181 Device.WiFi.AccessPoint{i}.PasspointSupported.')
clabWIFIAccessPointPasspointEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 18), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointEnabled.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointEnabled.setDescription(' Passpoint2.0 is enabled/disabled. This object is Defined as a CableLabs extension to TR-181 Device.WiFi.AccessPoint{i}.PasspointEnabled.')
clabWIFIAccessPointInterworkingCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingCapability.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingCapability.setDescription(' Interworking Service is supported or not supported. If true, then indicates the access point supports interworking with external networks. This object is Defined as a CableLabs extension to TR-181 Device.WiFi.AccessPoint{i}.InterWorkingServiceSupported.')
clabWIFIAccessPointInterworkingServiceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceEnabled.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceEnabled.setDescription(' Interworking Service is enabled/disabled. This object is Defined as a CableLabs extension to TR-181 Device.WiFi.AccessPoint{i}.InterworkingServiceEnabled.')
clabWIFIAccessPointAccessControlFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterEnable.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterEnable.setDescription(' This attribute enables MAC filtering as a condition of AP access (i.e., allow/disallow). This object is Defined as a CableLabs extension to TR-181 Device.WiFi.AccessPoint{i}.AccessControlFilterEnabled.')
clabWIFIAccessPointMACAddressControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointMACAddressControlEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointMACAddressControlEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointMACAddressControlEnable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.MACAddressControlEnable.')
clabWIFIAccessPointAllowedMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAllowedMACAddress.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAllowedMACAddress.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAllowedMACAddress.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AllowedMACAddress.')
clabWIFIAccessPointClientSessionNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointClientSessionNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointClientSessionNumberOfEntries.setDescription(' Number of entries in the Client Session Table.')
clabWIFIAccessPointAssociatedDeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 6, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAssociatedDeviceCount.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointAssociatedDeviceCount.setDescription('Deprecated, as this object duplicates the previous defined object clabWIFIAccessPointAssociatedDeviceNumberOfEntries. Total number of active devices associated at any point in time.')
clabWIFIAccessPointSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7), )
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityTable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.')
clabWIFIAccessPointSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityEntry.setReference('802.11-2007')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityEntry.setDescription('The Conceptual row of clabWIFIAccessPointSecurityTable.')
clabWIFIAccessPointSecurityModesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityModesSupported.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityModesSupported.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityModesSupported.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.ModesSupported.')
clabWIFIAccessPointSecurityModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("wep64", 2), ("wep128", 3), ("wpaPersonal", 4), ("wpa2Personal", 5), ("wpawpa2Personal", 6), ("wpaEnterprise", 7), ("wpa2Enterprise", 8), ("wpawpa2Enterprise", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityModeEnabled.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityModeEnabled.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityModeEnabled.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.ModeEnabled.')
clabWIFIAccessPointSecurityWEPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPKey.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPKey.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPKey.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.WEPKey.')
clabWIFIAccessPointSecurityPreSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(32, 32), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityPreSharedKey.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityPreSharedKey.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityPreSharedKey.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.PreSharedKey.')
clabWIFIAccessPointSecurityKeyPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityKeyPassphrase.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityKeyPassphrase.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityKeyPassphrase.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.KeyPassphrase.')
clabWIFIAccessPointSecurityRekeyingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 6), Unsigned32().clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRekeyingInterval.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRekeyingInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRekeyingInterval.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.RekeyingInterval.')
clabWIFIAccessPointSecurityRadiusServerIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusServerIPAddrType.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusServerIPAddrType.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusServerIPAddrType.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.RadiusServerIPAddrType.')
clabWIFIAccessPointSecurityRadiusServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusServerIPAddr.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusServerIPAddr.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.RadiusServerIPAddr.')
clabWIFIAccessPointSecurityRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 9), InetPortNumber().clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusServerPort.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusServerPort.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.RadiusServerPort.')
clabWIFIAccessPointSecurityRadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusSecret.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusSecret.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRadiusSecret.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.RadiusSecret.')
clabWIFIAccessPointSecurityRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRowstatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityRowstatus.setDescription('The status of this instance.')
clabWIFIAccessPointSecurityWEPKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 12), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPKey2.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPKey2.setDescription('The WEP key 2 expressed as a hexadecimal string.')
clabWIFIAccessPointSecurityWEPKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 13), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPKey3.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPKey3.setDescription('The WEP key 3 expressed as a hexadecimal string.')
clabWIFIAccessPointSecurityWEPKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 14), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPKey4.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPKey4.setDescription('The WEP key 4 expressed as a hexadecimal string.')
clabWIFIAccessPointSecurityWEPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPIndex.setDescription('This attribute defines the selected WEP key.')
clabWIFIAccessPointSecurityWEPPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 16), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPPassPhrase.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWEPPassPhrase.setDescription('This attribute defines a human readable password to derive the WEP keys, following well-known key generation algorithm for this purpose. When this attribute is a zero-length string, WEP keys are used directly. Otherwise, the values of the WEP keys cannot be changed directly and an error on write is returned.')
clabWIFIAccessPointSecurityWPAEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aes", 1), ("tkipaes", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWPAEncryption.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityWPAEncryption.setDescription('This attribute defines the encryption algorithm used for WPA.')
clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 18), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddrType.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddrType.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddrType.setDescription('This object is the address type of TR-181 Device.WiFi.AccessPoint{i}.Security. SecondaryRadiusServerIPAddr.')
clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 19), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddr.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddr.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.SecondaryRadiusServerIPAddr.')
clabWIFIAccessPointSecuritySecondaryRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 20), InetPortNumber().clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusServerPort.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusServerPort.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.SecondaryRadiusServerPort.')
clabWIFIAccessPointSecuritySecondaryRadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 21), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusSecret.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusSecret.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecuritySecondaryRadiusSecret.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.SecondaryRadiusSecret.')
clabWIFIAccessPointSecurityEnableManagementFrameProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityEnableManagementFrameProtection.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityEnableManagementFrameProtection.setDescription('This object enables Management Frame Protection.')
clabWIFIAccessPointSecurityReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityReset.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityReset.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityReset.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Security.Reset.')
clabWIFIAccessPointRadiusRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusRetries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusRetries.setDescription('This attribute indicates the failover Radius retry count.')
clabWIFIAccessPointSecurityLanRoutingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 7, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityLanRoutingEnabled.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointSecurityLanRoutingEnabled.setDescription("This attribute indicates LAN routing is enabled. 'true' indicates LAN Routing is enabled, 'false' otherwise.")
clabWIFIAccessPointWPSTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8), )
if mibBuilder.loadTexts: clabWIFIAccessPointWPSTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSTable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.WPS.')
clabWIFIAccessPointWPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIAccessPointWPSEntry.setReference('WPSv1.0')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSEntry.setDescription('The Conceptual row of clabWIFIAccessPointWPSTable.')
clabWIFIAccessPointWPSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointWPSEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSEnable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.WPS.Enable.')
clabWIFIAccessPointWPSConfigMethodsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointWPSConfigMethodsSupported.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSConfigMethodsSupported.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSConfigMethodsSupported.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.WPS.ConfigMethodsSupported.')
clabWIFIAccessPointWPSConfigMethodsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))).clone(namedValues=NamedValues(("usbFlashDrive", 1), ("ethernet", 2), ("externalNFCToken", 3), ("integratedNFCToken", 4), ("nfcInterface", 5), ("pin", 7), ("pushButton", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointWPSConfigMethodsEnabled.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSConfigMethodsEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSConfigMethodsEnabled.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.WPS.ConfigMethodsEnabled.')
clabWIFIAccessPointWPSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointWPSRowStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSRowStatus.setDescription('The status of this instance.')
clabWIFIAccessPointWPSSetWPSMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("usbFlashDrive", 1), ("ethernet", 2), ("externalNFCToken", 3), ("integratedNFCToken", 4), ("nfcInterface", 5), ("display", 6), ("pin", 7), ("pushButton", 8), ("keypad", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointWPSSetWPSMethod.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSSetWPSMethod.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSSetWPSMethod.setDescription('This object is defined as an CableLabs Extension to TR-181 Device.WiFi.AccessPoint{i}.WPS. The value must be selected from the clabWIFIAccessPointWPSConfigMethodsSupported list above.')
clabWIFIAccessPointWPSAPPin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointWPSAPPin.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSAPPin.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSAPPin.setDescription(' This object is defined as an CableLabs Extension to TR-181 Device.WiFi.AccessPoint{i}.WPS. The value returned is the factory default PIN.')
clabWIFIAccessPointWPSSetWPSClientPin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointWPSSetWPSClientPin.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSSetWPSClientPin.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSSetWPSClientPin.setDescription(' This object is defined as an CableLabs Extension to TR-181 Device.WiFi.AccessPoint{i}.WPS. The value returned is the factory default PIN.')
clabWIFIAccessPointWPSConfigMethodsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointWPSConfigMethodsEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSConfigMethodsEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSConfigMethodsEnable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.WPS.ConfigMethodsEnabled.')
clabWIFIAccessPointWPSSetWPSMethods = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 8, 1, 9), Bits().clone(namedValues=NamedValues(("usbFlashDrive", 0), ("ethernet", 1), ("externalNFCToken", 2), ("integratedNFCToken", 3), ("nfcInterface", 4), ("display", 5), ("pin", 6), ("pushButton", 7), ("keypad", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointWPSSetWPSMethods.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSSetWPSMethods.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointWPSSetWPSMethods.setDescription('This object is defined as an CableLabs Extension to TR-181 Device.WiFi.AccessPoint{i}.WPS. The value must be selected from the clabWIFIAccessPointWPSConfigMethodsSupported list above.')
clabWIFIAssociatedDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9), )
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceTable.setDescription('This object is defined in TR-181 Device.WiFi.AssociatedDevice{i}.')
clabWIFIAssociatedDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceId"))
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceEntry.setDescription('The Conceptual row of clabWIFIAssociatedDeviceTable.')
clabWIFIAssociatedDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceId.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceId.setDescription('The key for a unique instance of this object. There is one instance for each unique Associated device MAC Address.')
clabWIFIAssociatedDeviceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceMACAddress.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceMACAddress.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceMACAddress.setDescription('This object is defined in TR-181 Device.WiFi.AssociatedDevice{i}.MACAddress.')
clabWIFIAssociatedDeviceAuthenticationState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceAuthenticationState.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceAuthenticationState.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceAuthenticationState.setDescription('This object is defined in TR-181 Device.WiFi.AssociatedDevice{i}.AuthenticationState.')
clabWIFIAssociatedDeviceLastDataDownlinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 600000))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceLastDataDownlinkRate.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceLastDataDownlinkRate.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceLastDataDownlinkRate.setDescription('This object is defined in TR-181 Device.WiFi.AssociatedDevice{i}.LastDataDownlinkRate.')
clabWIFIAssociatedDeviceLastDataUplinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 600000))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceLastDataUplinkRate.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceLastDataUplinkRate.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceLastDataUplinkRate.setDescription('This object is defined in TR-181 Device.WiFi.AssociatedDevice{i}.DeviceLastDataUplinkRate.')
clabWIFIAssociatedDeviceSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 0))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceSignalStrength.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceSignalStrength.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceSignalStrength.setDescription('This object is defined in TR-181 Device.WiFi.AssociatedDevice{i}.SignalStrength.')
clabWIFIAssociatedDeviceRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceRetransmissions.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceRetransmissions.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceRetransmissions.setDescription('This object is defined in TR-181 Device.WiFi.AssociatedDevice{i}.Retransmissions.')
clabWIFIAssociatedDeviceActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceActive.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceActive.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceActive.setDescription('This object is defined in TR-181 Device.WiFi.AssociatedDevice{i}.Active.')
clabWIFIAssociatedDeviceMaxPacketRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 9), Unsigned32()).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceMaxPacketRetryCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceMaxPacketRetryCount.setDescription('This object indicates the number of packets to be retransmitted to have an upper limit.')
clabWIFIAssociatedDeviceStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 10), Counter32()).setUnits('stations').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceStationCount.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceStationCount.setDescription('This object indicates the total number of stations associated at any point in time.')
clabWIFIAssociatedDeviceMaxNumOfStations = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 11), Unsigned32()).setUnits('stations').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceMaxNumOfStations.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceMaxNumOfStations.setDescription('This object specifies the maximum number of STAs associated at any point in time.')
clabWIFIAssociatedDeviceSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("wep64", 2), ("wep128", 3), ("wpaPersonal", 4), ("wpa2Personal", 5), ("wpaWPA2Personal", 6), ("wpaEnterprise", 7), ("wpa2Enterprise", 8), ("wpaWpa2Enterprise", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceSecurityMode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceSecurityMode.setDescription('Reports the security mode for the associated device.')
clabWIFIAssociatedDeviceEncryptionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("tkip", 2), ("aes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceEncryptionAlgorithm.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceEncryptionAlgorithm.setDescription('This object reports encryption method used during authentication.')
clabWIFIAssociatedDeviceAssociationState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("connected", 1), ("clientDisassociated", 2), ("forcedDisassociationAuth", 3), ("forcedDisassociationTimeout", 4), ("forcedDisassociationNetMode", 5), ("forcedDisassociationSnr", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceAssociationState.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAssociatedDeviceAssociationState.setDescription('This object reports the status of any known devices that are or have been associated if the CPE tracks device history after disassociation.')
clabWIFIDataRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 10), )
if mibBuilder.loadTexts: clabWIFIDataRateStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIDataRateStatsTable.setDescription('This object contains statistics for each speed rate of an 802.11 LAN interface.')
clabWIFIDataRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 10, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIRadioId"), (0, "CLAB-WIFI-MIB", "clabWIFIDataRateStatsRate"))
if mibBuilder.loadTexts: clabWIFIDataRateStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIDataRateStatsEntry.setDescription('The Conceptual row of clabWIFIDataRateStatsTable.')
clabWIFIDataRateStatsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 10, 1, 1), Unsigned32()).setUnits('Mbps')
if mibBuilder.loadTexts: clabWIFIDataRateStatsRate.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIDataRateStatsRate.setDescription('This key represents the data speed for the statistics collected. the value is reported in integer units of Mbps.')
clabWIFIDataRateStatsFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 10, 1, 2), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIDataRateStatsFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIDataRateStatsFramesSent.setDescription('The FramesSent Parameter indicates the total number of frames transmitted out of the interface (not marked as duplicated). The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIDataRateStatsFramesRetransmissionsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 10, 1, 3), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIDataRateStatsFramesRetransmissionsSent.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIDataRateStatsFramesRetransmissionsSent.setDescription('The FramesRetransmissionsSent parameter indicates the total number of frames retransmitted out of the interface (marked as duplicated). The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIDataRateStatsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 10, 1, 4), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIDataRateStatsFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIDataRateStatsFramesReceived.setDescription('The FramesReceived parameter indicates the total number of frames received on this interface (not marked as duplicated). The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIDataRateStatsFramesDuplicatedReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 10, 1, 5), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIDataRateStatsFramesDuplicatedReceived.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIDataRateStatsFramesDuplicatedReceived.setDescription('The FramesDuplicatedReceived indicates the total number of duplicated frames received on this interface. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIPeriodicStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11), )
if mibBuilder.loadTexts: clabWIFIPeriodicStatsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsTable.setDescription('This object contains periodic statistics for an 802.11 SSID on a CPE device. Note that these statistics refer to the link layer, not to the physical layer. This object does not include the total byte and packet statistics, which are, for historical reasons, in the parent object.')
clabWIFIPeriodicStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFISSIDId"), (0, "CLAB-WIFI-MIB", "clabWIFIPeriodicStatsInterval"), (0, "CLAB-WIFI-MIB", "clabWIFIPeriodicStatsId"))
if mibBuilder.loadTexts: clabWIFIPeriodicStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsEntry.setDescription('The Conceptual row of clabWIFIPeriodicStatsTable.')
clabWIFIPeriodicStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(24, 24), ValueRangeConstraint(48, 48), ValueRangeConstraint(96, 96), )))
if mibBuilder.loadTexts: clabWIFIPeriodicStatsInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsInterval.setDescription('This key indicates the Interval where the measurements were Accumulated. The interval of measurements is synchronized with the wall clock. The total number of intervals is based on a 24 hour period. At an interval of 15 minutes 96 intervals (1..96) are defined, at 30 minutes, 48 intervals (1..48) and 24 intervals (1..24) for 1 hour measurement interval. Devices with no capabilities to report measurements per interval will report the value 0 for the interval attribute of the unique statistics instance.')
clabWIFIPeriodicStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: clabWIFIPeriodicStatsId.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsId.setDescription('The Id key represents a unique identifier for a client Mac address in a given statistics measurement interval.')
clabWIFIPeriodicStatsDeviceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDeviceMACAddress.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDeviceMACAddress.setDescription('The DeviceMACAddress represents the MAC address of an associated client device.')
clabWIFIPeriodicStatsFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 4), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsFramesSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsFramesSent.setDescription('FrameSent is the total number of frames transmitted out of the interface. For conventional 802.11 MAC (a,b,g) this counter corresponds to the total of MSDUs (MAC Service Data Unit) being transmitted. For High Throughput transmissions this corresponds to the A-MSDU (Aggregation MSDU) The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIPeriodicStatsDataFramesSentAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 5), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesSentAck.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesSentAck.setDescription('DataFramesSentAck is the total number of MSDU frames marked as duplicates and non duplicates acknowledged. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIPeriodicStatsDataFramesSentNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 6), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesSentNoAck.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesSentNoAck.setDescription('DataFramesSentNoAck is the total number of MSDU frames retransmitted out of the interface (i.e., marked as duplicate and non-duplicate) and not acknowledged but not including those defined in dataFramesLost. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIPeriodicStatsDataFramesLost = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 7), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesLost.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesLost.setDescription('DataFramesLost is the total number of MSDU frames retransmitted out of the interface that where not acknowledged and discarded for reaching max number of retransmissions. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIPeriodicStatsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 8), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsFramesReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsFramesReceived.setDescription('FramesReceived is the total number of frames received by the interface. For conventional 802.11 MAC (a,b,g) this counter corresponds to the total of MSDUs (MAC Service Data Unit) being transmitted. For High Throughput transmissions (n) this corresponds to A-MSDUs (Aggregation MSDU) and MSDUs. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIPeriodicStatsDataFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 9), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesReceived.setDescription('DataFramesReceived is the total number of MSDU frames received and marked as non-duplicates. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIPeriodicStatsDataFramesDuplicateReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 10), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesDuplicateReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDataFramesDuplicateReceived.setDescription('DataFramesDuplicateReceived is the total number of duplicated frames received on this interface. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIPeriodicStatsProbesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 11), Counter32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsProbesReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsProbesReceived.setDescription('ProbesReceived is the total number of probes received.')
clabWIFIPeriodicStatsProbesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 12), Counter32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsProbesRejected.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsProbesRejected.setDescription('ProbesRejected is the total number of probes rejected.')
clabWIFIPeriodicStatsRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 13), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsRSSI.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsRSSI.setDescription('The Received Signal Strength indicator is the energy observed at the antenna receiver for a current transmission.')
clabWIFIPeriodicStatsSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 14), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsSNR.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsSNR.setDescription('The signal to Noise Ratio (SNR) parameter represents the strength of the signal compared to received noise.')
clabWIFIPeriodicStatsDisassociations = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 15), Counter32()).setUnits('disassociations').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDisassociations.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsDisassociations.setDescription('Disassociations represents the total number of client disassociations.')
clabWIFIPeriodicStatsAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 16), Counter32()).setUnits('authenticationfailures').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsAuthenticationFailures.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsAuthenticationFailures.setDescription('AuthenticationFailures indicates the total number of authentication failures.')
clabWIFIPeriodicStatsLastTimeAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsLastTimeAssociation.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsLastTimeAssociation.setDescription('The LastTimeAssociation parameter represents the last time the client was associated.')
clabWIFIPeriodicStatsLastTimeDisassociation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 11, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIPeriodicStatsLastTimeDisassociation.setStatus('current')
if mibBuilder.loadTexts: clabWIFIPeriodicStatsLastTimeDisassociation.setDescription('LastTimeDisassociation parameter represents the last time the client disassociate from the interface. The all zeros value indicates the client is currently associated. ')
clabWIFISSIDPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12), )
if mibBuilder.loadTexts: clabWIFISSIDPolicyTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyTable.setDescription('The SSIDPolicy object defines the configuration of policies, behaviors and event thresholds controlled per SSID.')
clabWIFISSIDPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFISSIDId"))
if mibBuilder.loadTexts: clabWIFISSIDPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyEntry.setDescription('The Conceptual row of clabWIFISSIDPolicyTable.')
clabWIFISSIDPolicyBlockAfterAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyBlockAfterAttempts.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyBlockAfterAttempts.setDescription('The BlockAfterAttempts parameter indicates the maximum number of attempts a client is allowed to attempt registration before being denied access. Exceeding this value generates one event. Events from same client should not reoccur more than once an hour. The value zero indicates no connection attempts restrictions.')
clabWIFISSIDPolicyAllocatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 2), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyAllocatedBandwidth.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyAllocatedBandwidth.setDescription('The AllocatedBandwidth parameter indicates the maximum bandwidth reserved for a particular interface. The value zero indicates no limit.')
clabWIFISSIDPolicyAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyAuthenticationFailures.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyAuthenticationFailures.setDescription('The AuthenticationFailures parameter indicates the number of Authenticationfailures a station simultaneously produces to generate the event. Events from same client should not reoccur more than once an hour. The value 0 indicates no threshold and events of this type are not generated.')
clabWIFISSIDPolicyNonAuthenticatedTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyNonAuthenticatedTraffic.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyNonAuthenticatedTraffic.setDescription('The NonAuthenticatedTraffic parameter represents the number of non-authenticated messages received from a station to generate an event. Events from same client should not reoccur more than once an hour. The value 0 indicates no threshold and events of this type are not generated.')
clabWIFISSIDPolicyAssociationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyAssociationFailures.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyAssociationFailures.setDescription('The AssociationFailures indicates the number of simultaneous association failures from a station to generate an event. Events from same client should not reoccur more than once an hour. The value 0 indicates no threshold and events of this type are not generated.')
clabWIFISSIDPolicyStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 6), Unsigned32()).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyStatsInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyStatsInterval.setDescription('The StatsInterval parameter indicates the interval value to collect per-interval statistics. The value 0 indicates no interval and values reported are snapshots at the time of the request. ')
clabWIFISSIDPolicySNRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 7), Integer32().clone(-100)).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicySNRThreshold.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicySNRThreshold.setDescription('The SNR parameter indicates the threshold to report SNR. The value -100 indicates no threshold, and events of this type are not generated.')
clabWIFISSIDPolicyANPIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 8), Integer32().clone(-100)).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyANPIThreshold.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyANPIThreshold.setDescription('The ANPI parameter indicates the threshold to report the Average Noise plus Interference. The value -100 indicates no threshold, and events of this type are not generated.')
clabWIFISSIDPolicyLowReceivedPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 9), Integer32().clone(-100)).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyLowReceivedPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyLowReceivedPowerThreshold.setDescription('The LowReceivedPowerThreshold parameter indicates the power level threshold to generate an event whenever the station received power is below the threshold. The value -100 indicates no threshold is set, and events of this type are not generated.')
clabWIFISSIDPolicyLowPowerDeniedAccessThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 10), Integer32().clone(-100)).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyLowPowerDeniedAccessThreshold.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyLowPowerDeniedAccessThreshold.setDescription('The LowPowerDeniedAccessThreshold parameter indicates the power level threshold to deny client association whenever the station received power is below the threshold. The value -100 indicates no threshold, and events of this type are not generated.')
clabWIFISSIDPolicyLowPowerDisassociationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 11), Integer32().clone(-100)).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyLowPowerDisassociationThreshold.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyLowPowerDisassociationThreshold.setDescription('The LowerPowerDissasociationThreshold parameter indicates the threshold to report Disassociation due to low power. The Wi-Fi GW should refuse associations when the power level is below this RSSI level. The value -100 indicates no threshold, and events of this type are not generated.')
clabWIFISSIDPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyRowStatus.setDescription('The status of this instance.')
clabWIFISSIDPolicyBeaconMcsLevelInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFISSIDPolicyBeaconMcsLevelInUse.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyBeaconMcsLevelInUse.setDescription('The BeaconMcsLevelInUse parameter specifies the beacon MCS to be used.')
clabWIFISSIDPolicyBeaconMcsLevelsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 12, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFISSIDPolicyBeaconMcsLevelsSupported.setStatus('current')
if mibBuilder.loadTexts: clabWIFISSIDPolicyBeaconMcsLevelsSupported.setDescription('The BeaconMcsLevelsSupported parameter specifies all the beacon MCSs supported.')
clabWIFIClientSessionsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 13), )
if mibBuilder.loadTexts: clabWIFIClientSessionsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientSessionsTable.setDescription('The ClientSessions object represents the current and closed sessions (association connections). When the maximum number of instances is reached, the oldest closed session instance is replaced by a newly created client association.')
clabWIFIClientSessionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 13, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIClientSessionsId"))
if mibBuilder.loadTexts: clabWIFIClientSessionsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientSessionsEntry.setDescription('The Conceptual row of clabWIFIClientSessionsTable.')
clabWIFIClientSessionsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIClientSessionsId.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientSessionsId.setDescription('The Id key identifies a single client MAC Address.')
clabWIFIClientSessionsDeviceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 13, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientSessionsDeviceMACAddress.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientSessionsDeviceMACAddress.setDescription('The DeviceMACAddress parameter indicates the MAC address of an associated client device.')
clabWIFIClientSessionsStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 13, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientSessionsStart.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientSessionsStart.setDescription('The Start parameter indicates the time when the session started.')
clabWIFIClientSessionsStop = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 13, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientSessionsStop.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientSessionsStop.setDescription('The Stop parameter indicates the time when the session ended. If the session us current the value reported is all zeros.')
clabWIFIClientSessionsTerminationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 13, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientSessionsTerminationCode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientSessionsTerminationCode.setDescription('The TerminationCode parameter indicates the Reason Code or the Status Code that lead to ending the association of the station. Reason code and Status code overlaps. The context of the type of termination is provided by the TerminationMeaning attribute. The value zero indicates the session is active.')
clabWIFIClientSessionsTerminationMeaning = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 13, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientSessionsTerminationMeaning.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientSessionsTerminationMeaning.setDescription('The TerminationMeaning parameter indicates the meaning of the Reason Code or Status Code for the ended session. The zero-length string is used when the instance corresponds to an active session.')
clabWIFIClientStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14), )
if mibBuilder.loadTexts: clabWIFIClientStatsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsTable.setDescription('The ClientStats object contains accumulative statistics for each client station. A station is reported only after is associated for the first time. ')
clabWIFIClientStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIClientStatsInterval"), (0, "CLAB-WIFI-MIB", "clabWIFIClientStatsId"))
if mibBuilder.loadTexts: clabWIFIClientStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsEntry.setDescription('The Conceptual row of clabWIFIClientStatsTable.')
clabWIFIClientStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(24, 24), ValueRangeConstraint(48, 48), ValueRangeConstraint(96, 96), )))
if mibBuilder.loadTexts: clabWIFIClientStatsInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsInterval.setDescription('The Interval parameter indicate the measurements were accumulated. The interval of measurements is synchronized with the wall clock The total number of intervals is based on a 24 hour period. At an interval of 15 minutes 96 intervals (1..96) are defined, at 30 minutes, 48 intervals (1..48) and 24 intervals (1..24) for 1 hour measurement interval. Devices with no capable to report measurements per interval will report the value 0 for the interval attribute.')
clabWIFIClientStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: clabWIFIClientStatsId.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsId.setDescription('The Id key identifies a single client MAC Address.')
clabWIFIClientStatsDeviceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsDeviceMACAddress.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsDeviceMACAddress.setDescription('The DeviceMACAddress parameter indicates the MAC address of an associated client device.')
clabWIFIClientStatsFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 4), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsFramesSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsFramesSent.setDescription('The FramesSent parameter indicates the total number of frames transmitted out of the interface. For conventional 802.11 MAC (a,b,g) this counter corresponds to the total of MSDUs (MAC Service Data Unit) being transmitted. For High Throughput transmissions this corresponds to the A-MSDU (Aggregation MSDU) The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIClientStatsDataFramesSentAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 5), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesSentAck.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesSentAck.setDescription('The DataFramesSentAck parameter indicates the total number of MSDU frames marked as duplicates and non duplicates acknowledged. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIClientStatsDataFramesSentNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 6), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesSentNoAck.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesSentNoAck.setDescription('The DataFramesSentNoAck parameter indicates the total number of MSDU frames retransmitted out of the interface (i.e., marked as duplicate and non-duplicate) and not acknowledged but not including those defined in dataFramesLost. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIClientStatsDataFramesLost = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 7), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesLost.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesLost.setDescription('The DataFramesLost parameter indicates the total number of MSDU frames retransmitted out of the interface that where not acknowledged and discarded for reaching max number of retransmissions. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIClientStatsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 8), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsFramesReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsFramesReceived.setDescription('The FramesReceived parameter indicates the total number of frames received by the interface. For conventional 802.11 MAC (a,b,g) this counter corresponds to the total of MSDUs (MAC Service Data Unit) being transmitted. For High Throughput transmissions (n) this corresponds to A-MSDUs (Aggregation MSDU) and MSDUs. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIClientStatsDataFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 9), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesReceived.setDescription('The DataFramesReceived parameter indicates the total number of MSDU frames received and marked as non-duplicates. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIClientStatsDataFramesDuplicateReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 10), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesDuplicateReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsDataFramesDuplicateReceived.setDescription('The DataFramesDuplicateReceived parameter indicates the total number of duplicated frames received on this interface. The value of this counter MAY be reset to zero when the CPE is rebooted.')
clabWIFIClientStatsProbesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 11), Counter32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsProbesReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsProbesReceived.setDescription('The ProbesReceived parameter indicates the Total number of probes received.')
clabWIFIClientStatsProbesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 12), Counter32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsProbesRejected.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsProbesRejected.setDescription('The ProbesRejected parameter indicates the total number of probes rejected.')
clabWIFIClientStatsRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 13), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsRSSI.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsRSSI.setDescription('The Received Signal Strength Indicator, RSSI, parameter is the energy observed at the antenna receiver for a current transmission.')
clabWIFIClientStatsSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 14), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsSNR.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsSNR.setDescription('The signal to Noise Ratio (SNR) parameter indicates the signal strength received from a client compared to the noise received.')
clabWIFIClientStatsDisassociations = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 15), Counter32()).setUnits('disassociations').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsDisassociations.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsDisassociations.setDescription('The Disassociations parameter indicates the total number of client disassociations.')
clabWIFIClientStatsAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 16), Counter32()).setUnits('authenticationfailures').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsAuthenticationFailures.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsAuthenticationFailures.setDescription('The AuthenticationFailures parameter indicates the total number of authentication failures.')
clabWIFIClientStatsLastTimeAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsLastTimeAssociation.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsLastTimeAssociation.setDescription('The LastTimeAssociation parameter indicates the Last time the client was associated.')
clabWIFIClientStatsLastTimeDisassociation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsLastTimeDisassociation.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsLastTimeDisassociation.setDescription('The LastTimeDisassociation parameter indicates the last time the client disassociate from the interface. The all zeros value indicates the client is currently associated. ')
clabWIFIClientStatsThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsThroughput.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsThroughput.setDescription(' This object indicates the throughput expressed in Kbps.')
clabWIFIClientStatsPktErrorRatePerSTA = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 14, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIClientStatsPktErrorRatePerSTA.setStatus('current')
if mibBuilder.loadTexts: clabWIFIClientStatsPktErrorRatePerSTA.setDescription(' This object indicates the traffic quality (e.g., HTTP, TCP) of a STA.')
clabWIFIRadiusClientTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15), )
if mibBuilder.loadTexts: clabWIFIRadiusClientTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientTable.setDescription("This object is the extension of Radius Client operation for the Access Point 802.1x Authenticator for WPA Enterprise. An instance is relevant when the attribute AccessPointSecurity.ModeEnabled is 'WPA-Enterprise' or 'WPA2-Enterprise' or 'WPA-WPA2-Enterprise'.")
clabWIFIRadiusClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIRadiusClientEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientEntry.setDescription('The Conceptual row of clabWIFIRadiusClientTable.')
clabWIFIRadiusClientNASIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientNASIdentifier.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientNASIdentifier.setDescription('The NAS-Identifier parameter corresponds to the Radius attribute NAS-Identifier used in Access request messages. The device always sends the Radius parameter NAS-IP-Address and will send the NAS-Identifier parameter when this attribute is set to other than the zero-length string. The NAS-Identifier attribute can be used as a hint to indicate the authentication server the SSID domain where the WiFi endpoint tries to authenticate, i.e., when more than one SSID domains are using the same Radius server instance.')
clabWIFIRadiusClientLocationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientLocationPolicy.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientLocationPolicy.setDescription('The LocationPolicy corresponds to the string value of the Radius Basic-Location-Policy-Rules attribute per RFC 5580')
clabWIFIRadiusClientOperatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientOperatorName.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientOperatorName.setDescription('The OperatorName parameter corresponds to the string value of the Radius Operator-Name attribute per RFC 5580.')
clabWIFIRadiusClientLocationInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientLocationInformation.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientLocationInformation.setDescription('The LocationInformation parameter corresponds to the string value of the Radius Location-Information attribute per RFC 5580.')
clabWIFIRadiusClientLocationData = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientLocationData.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientLocationData.setDescription('The Location Data parameter corresponds to the string value of the Radius LocationData attribute per RFC 5580.')
clabWIFIRadiusClientUsageReports = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientUsageReports.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientUsageReports.setDescription("The UsageReports parameter indicates whether the client send usage data 'true' or not 'false'.")
clabWIFIRadiusClientIntervalInterimReport = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientIntervalInterimReport.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientIntervalInterimReport.setDescription("The IntervalInterimReport parameter indicates whether the client send Interim reports at time intervals 'true' or not 'false'.")
clabWIFIRadiusClientAPTransitionReport = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientAPTransitionReport.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientAPTransitionReport.setDescription("A 'true' value for the APTransitionReport parameter indicates the client sends Interim reports when the stations transitions to a different Access point.")
clabWIFIRadiusClientGigawordReport = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientGigawordReport.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientGigawordReport.setDescription("A 'true' value for Gigaword Report indicates the client sends Interim reports when the 32-bit counters rollover")
clabWIFIRadiusClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 15, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIRadiusClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFIRadiusClientRowStatus.setDescription('The status of this instance.')
clabWIFIWIFICommitSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 16))
clabWIFIWIFICommitSettingsValue = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 16, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIWIFICommitSettingsValue.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIWIFICommitSettingsValue.setDescription("This attribute when set to 'true' flushes the WiFi settings in non-volatile memory and reinitialize the WiFi system with the new set of values without reboot. This attribute reports a value 'false' when WiFi attributes have been changed but the changes are not active (i.e.,. not flushed in non-volatile and not part of the active configuration). Systems that support immediate commit upon any attribute change will report this attribute as 'true' always, and silently accepts sets to 'true'.")
clabWIFIApNeighborStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 17), )
if mibBuilder.loadTexts: clabWIFIApNeighborStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIApNeighborStatsTable.setDescription('This table defines neighbor information known through channel scans.')
clabWIFIApNeighborStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 17, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIApNeighborStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIApNeighborStatsEntry.setDescription('The conceptual row of clabWIFIApNeighborStatsTable.')
clabWIFIApNeighborStatsSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 17, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIApNeighborStatsSSID.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIApNeighborStatsSSID.setDescription('The attribute indicates the current SSID of the neighbor.')
clabWIFIApNeighborStatsCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIApNeighborStatsCurrentChannel.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIApNeighborStatsCurrentChannel.setDescription('The attribute indicates the current channel being used by the neighboring AP.')
clabWIFIApNeighborStatsCurrentBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 17, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(20, 20), ValueRangeConstraint(40, 40), ValueRangeConstraint(80, 80), ValueRangeConstraint(160, 160), ))).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIApNeighborStatsCurrentBandwidth.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIApNeighborStatsCurrentBandwidth.setDescription('The attribute indicates the current bandwidth in which the neighboring AP is operating.')
clabWIFIApNeighborStatsRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 17, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIApNeighborStatsRSSI.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIApNeighborStatsRSSI.setDescription('The attribute indicates the signal strength at which packets from the neighboring AP are received at the measuring AP, in terms of dBm.')
clabWIFIAccessPointAccessControlFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 18))
clabWIFIAccessPointClearAccessControlFilterTable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 18, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointClearAccessControlFilterTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointClearAccessControlFilterTable.setDescription('Writing true to this object clears the clabWIFIAccessPointAccessControlFilterTable of all entries. Reading this object always return false')
clabWIFIAccessPointAccessControlFilterAccessAllow = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 18, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterAccessAllow.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterAccessAllow.setDescription('True allows access to AP, False denies Access to AP.')
clabWIFIAccessPointAccessControlFilterTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 18, 3), )
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterTable.setDescription('This table provides a list of MAC address with filter decisions (allow/deny access).')
clabWIFIAccessPointAccessControlFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 18, 3, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointAccessControlFilterIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterEntry.setDescription('The conceptual row of clabWIFIAccessPointAccessControlFilterTable.')
clabWIFIAccessPointAccessControlFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 18, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterIndex.setDescription('Secondary index to allow multiple MACs associated with same AP.')
clabWIFIAccessPointAccessControlFilterMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 18, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterMACAddress.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterMACAddress.setDescription('STA MAC to be filtered. The value of clabWIFIAccessPointAccessControlFilterAccessAllow indicates whether the MAC is allowed or not allowed.')
clabWIFIAccessPointAccessControlFilterNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 18, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccessControlFilterNumberOfEntries.setDescription('The number of entries in the clabWIFIAccessPointAccessControlFilterTable.')
clabWIFIAccessPointPasspoint = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19))
clabWIFIAccessPointInterworkingServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 1), )
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceTable.setDescription('This table This object is used to configure the Passpoint parameters for each Access Point.')
clabWIFIAccessPointInterworkingServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 1, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceEntry.setDescription('The conceptual row of clabWIFIAccessPointInterworkingServiceTable.')
clabWIFIAccessPointInterworkingServiceInternet = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceInternet.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceInternet.setDescription(' Set to true if the network provides connectivity to the Internet; otherwise it is set to false indicating that it is unspecified whether the network provides connectivity to the Internet.')
clabWIFIAccessPointInterworkingServiceHESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceHESSID.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceHESSID.setDescription(' MACAddress] Homogeneous Extended Service Set Identifier (HESSID) The HESSID is a globally unique identifier that in conjunction with the WLAN-SSID, may be used to provide network identification for a subscription service provider network AP.')
clabWIFIAccessPointInterworkingServiceAccessNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceAccessNetworkType.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceAccessNetworkType.setDescription(' Access Network Type value to be included in the Interworking IE in the beacons. (refer 8.4.2.94 of IEEE Std 802.11-2012). Possible values are: 0 - Private network 1 - Private network with guest access 2 - Chargeable public network 3 - Free public network 4 - Personal device network 5 - Emergency services only network 6-13 - Reserved 14 - Test or experimental 15 - Wildcard Note enumeration was not possible (i.e., cannot enumerate with 0)')
clabWIFIAccessPointInterworkingServiceVenueGroupCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceVenueGroupCode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceVenueGroupCode.setDescription(' Indicates the Venue Group of the Venue Info Field (refer 8.4.1.34 of IEEE Std 802.11-2012) where the access point is installed: 0 - Unspecified 1 - Assembly 2 - Business 3 - Educational 4 - Factory and Industrial 5 - Institutional 7 - Residential 8 - Storage 9 - Utility and Maintenance 10 - Vehicular 11 - Outdoor 12-255 Reserved Note enumeration was not possible (i.e., cannot enumerate with 0)')
clabWIFIAccessPointInterworkingServiceVenueTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceVenueTypeCode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointInterworkingServiceVenueTypeCode.setDescription(' Indicates the Venue Type of the Venue Info Field (refer 8.4.1.34 of IEEE Std 802.11-2012) where the access point is installed. The possible values are listed in the referanced standard.')
clabWIFIAccessPointPasspointTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointTable.setDescription('This table This object is used to configure the Passpoint parameters for each Access Point.')
clabWIFIAccessPointPasspointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspointTable.')
clabWIFIAccessPointPasspointCapabilityList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointCapabilityList.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointCapabilityList.setDescription('HS Capability List drawn from the following table in exact order. HS Query list (1) HS Capability list (2) Operator Friendly Name (3) WAN Metrics (4) Connection Capability (5) NAI Home Realm Query (6) Operating Class Indication (7) OSU Providers list (8) Reserved (9) Icon Request (10) Icon Binary File (11) Each Octet corresponds to a capability by realitve position as follows. 0-not supported 1-supported')
clabWIFIAccessPointPasspointOnlineSignupSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOnlineSignupSupported.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOnlineSignupSupported.setDescription('True OSU supported, False = No OSU support.')
clabWIFIAccessPointPasspointDGAFEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDGAFEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDGAFEnable.setDescription("'True' Indicates Downstream Forwarding of Group-Addressed Frames (DGAF) is supported. 'False' indicates no support For DGAF")
clabWIFIAccessPointPasspointP2PEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointP2PEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointP2PEnable.setDescription("'True' indicates P2P cross connect is supported. 'False' indicates P2P is not supported.")
clabWIFIAccessPointPasspointQoSMappingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointQoSMappingEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointQoSMappingEnable.setDescription("'True' enables Qos Mapping, 'False' disables'. The mapping Is vendor implementation specific.")
clabWIFIAccessPointPasspointASRAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointASRAEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointASRAEnable.setDescription("'True' enables Additional Step Required for Access. 'False' disables'. ")
clabWIFIAccessPointPasspointANQPDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointANQPDomainID.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointANQPDomainID.setDescription(' ANQP Domain ID is a 16-bit field included in Beacon and Probe response frames transmitted by the AP. All APs in the same ESS sharing a common, nonzero value of ANQP Domain ID shall have identical ANQP information for the ANQP elements and Hotspot 2.0 vendor-specific ANQP elements. APs having their ANQP Domain ID field set to a value of zero have unique ANQP information in one or more of their ANQP elements or Hotspot 2.0 vendor-specific ANQP elements, or have not been implemented with means of knowing whether their ANQP information is unique. APs having their ANQP Domain ID field set to -1 should not include ANQP Domain ID field in the HS2.0 indication element.')
clabWIFIAccessPointPasspointEAPMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointEAPMethod.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointEAPMethod.setDescription(' EAP Method used by the AP. Refer to Device.IEEE8021x.')
clabWIFIAccessPointPasspointManagementFrameProtectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointManagementFrameProtectionEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointManagementFrameProtectionEnable.setDescription("'True' enables Management Frame Protection, 'False' disables.")
clabWIFIAccessPointPasspointCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 2, 1, 10), Bits().clone(namedValues=NamedValues(("hsQueryList", 0), ("hsCapabilityList", 1), ("operatorFriendlyName", 2), ("wanMetrics", 3), ("connectionCapability", 4), ("naiHomeRealmQuery", 5), ("operatingClassIndication", 6), ("osuProvidersList", 7), ("reserved", 8), ("iconRequest", 9), ("iconBinaryFile", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointCapabilities.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointCapabilities.setDescription('HS Capability List drawn from the following table. HS Query list HS Capability list Operator Friendly Name WAN Metrics Connection Capability NAI Home Realm Query Operating Class Indication OSU Providers list Reserved Icon Request Icon Binary File Each bit corresponds to a capability follows. 0-not supported 1-supported')
clabWIFIAccessPointPasspointVenueNamesTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 3), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueNamesTable.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueNamesTable.setDescription('This table is used to configure the Passpoint venue names with country code for each.')
clabWIFIAccessPointPasspointVenueNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 3, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueNamesEntry.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueNamesEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspointVenueNamesTable.')
clabWIFIAccessPointPasspointVenueNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueNameIndex.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueNameIndex.setDescription('Venue name country code.')
clabWIFIAccessPointPasspointVenueNameCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 3, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueNameCountryCode.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueNameCountryCode.setDescription('Venue name country code.')
clabWIFIAccessPointPasspointVenueName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueName.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointVenueName.setDescription('Indicates the Venue Name where the access point is installed. This additional meta data about the venue is included in the Venue Name ANQP-element. This parameter accepts UTF-8 encoded string represented as hexBinary string. ')
clabWIFIAccessPointPasspointOperatorNamesTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 4), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorNamesTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorNamesTable.setDescription('This table is used to configure the Passpoint operator names with country code for each.')
clabWIFIAccessPointPasspointOperatorNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 4, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOperatorNameIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorNamesEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorNamesEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspointOperatorNamesTable.')
clabWIFIAccessPointPasspointOperatorNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorNameIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorNameIndex.setDescription('Venue name country code.')
clabWIFIAccessPointPasspointOperatorNameCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 4, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorNameCountryCode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorNameCountryCode.setDescription('Venue name country code.')
clabWIFIAccessPointPasspointOperatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorName.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOperatorName.setDescription(' Indicates the Operator Friendly Name of the entity operating the IEEE 802.11 AN i.e. the Passpoint Operator. This parameter accepts UTF-8 encoded string represented as hexBinary string. ')
clabWIFIAccessPointPasspointConsortiumTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 5), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointConsortiumTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointConsortiumTable.setDescription(' A table of Consortium OIs (Organization Identifiers)which are to be transmitted in an ANQP Roaming Consortium ANQP-element. Each entry of this table corresponds to a roaming consortium or single SSP. The first three entries of this table are transmitted in Beacon and Probe response frames.')
clabWIFIAccessPointPasspointConsortiumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 5, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointConsortiumIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointConsortiumEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointConsortiumEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspointConsortium Table.')
clabWIFIAccessPointPasspointConsortiumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointConsortiumIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointConsortiumIndex.setDescription('OI Table Index.')
clabWIFIAccessPointPasspointConsortiumOI = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 5, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointConsortiumOI.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointConsortiumOI.setDescription(' The Organization Identifier field is 3 octets in length if the organizationally unique identifier is an OUI, or 5 octets in length if the organizationally unique identifier is 36 bits in length. See 802.11-2012 for more information. ')
clabWIFIAccessPointPasspointDomainNamesTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 6), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDomainNamesTable.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDomainNamesTable.setDescription('This table A table of Domain Names of the entity operating the IEEE 802.11 access network.')
clabWIFIAccessPointPasspointDomainNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 6, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointDomainNamesIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDomainNamesEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDomainNamesEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspointDomainNamesTable.')
clabWIFIAccessPointPasspointDomainNamesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDomainNamesIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDomainNamesIndex.setDescription('OI Table Index.')
clabWIFIAccessPointPasspointDomainNamesDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 6, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDomainNamesDomainName.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointDomainNamesDomainName.setDescription(' The Organization Identifier field is 3 octets in length if the organizationally unique identifier is an OUI, or 5 octets in length if the organizationally unique identifier is 36 bits in length. See 802.11-2012 for more information. ')
clabWIFIAccessPointPasspointThreeGPPNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 7), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkTable.setDescription(' A table of 3GPP Cellular Networks. The table contains Mobile Country Code (MCC) and Mobile Network Code (MNC) of the cellular networks that the access point supports.')
clabWIFIAccessPointPasspointThreeGPPNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 7, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointThreeGPPNetworkIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspointThreeGPPNetworks Table.')
clabWIFIAccessPointPasspointThreeGPPNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkIndex.setDescription('Venue name country code.')
clabWIFIAccessPointPasspointThreeGPPNetworkMNC = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 7, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(2, 2), ValueSizeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkMNC.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkMNC.setDescription('3GPP Network Code')
clabWIFIAccessPointPasspointThreeGPPNetworkMCC = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkMCC.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointThreeGPPNetworkMCC.setDescription(' 3GPP Country Code ')
clabWIFIAccessPointPasspointNAIRealmsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsTable.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsTable.setDescription('NAI Realms corresponding to SSPs for other entities accessible via this AP. This object is defined in TR-181 Device.WiFi.AP.{i}.X_CableLabs_Passpoint_NAIRealm.{i} and its children.')
clabWIFIAccessPointPasspointNAIRealmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointNAIRealmsIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointNAIRealmsEapMethodsIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointNAIRealmsEapMethodsAuthParmIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspointNAIRealms Table.')
clabWIFIAccessPointPasspointNAIRealmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsIndex.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsIndex.setDescription('A unique index number for each NAI Realm.')
clabWIFIAccessPointPasspointNAIRealmsEapMethodsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8, 1, 2), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapMethodsIndex.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapMethodsIndex.setDescription('A unique index number for each EAP Method associated with an NAI Realm.')
clabWIFIAccessPointPasspointNAIRealmsEapMethodsAuthParmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8, 1, 3), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapMethodsAuthParmIndex.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapMethodsAuthParmIndex.setDescription('A unique index number for each set of authentication parameters associated with each EAP Method.')
clabWIFIAccessPointPasspointNAIRealmsEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfc", 1), ("utf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEncodingType.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEncodingType.setDescription(' Indicates NAI Realm Encoding Type used to encode NAI Realm ANQP Element. A value of 1 indicates that the NAI Realm in the NAI Realm subfield is formatted in accordance with IETF RFC4282. A value of 2 indicates that it is a UTF-8 formatted character string.')
clabWIFIAccessPointPasspointNAIRealms = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealms.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealms.setDescription(' NAI Realm Name.')
clabWIFIAccessPointPasspointNAIRealmsEapMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("eaptls", 2), ("eapttls", 3), ("peap", 4), ("eapmschapv2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapMethod.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapMethod.setDescription('EAP Method type that the NAI Realm supports.')
clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersID.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersID.setDescription('EAP Method Authentication Parameters.')
clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 8, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersValue.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersValue.setDescription('EAP Method Authentication Parameters.')
clabWIFIAccessPointPasspointOSUTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUTable.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUTable.setDescription('This table contains information regarding the Online Sign Up (OSU) Service that is advertised via OSU Provider List element in beacon and probe frames. Refer section 4.8 of WFA HS2.0. This object is defined in TR-181 Device.WiFi.AP.{i}.X_CableLabs_Passpoint_OS and its children.')
clabWIFIAccessPointPasspointOSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderNamesIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderIconsIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUEntry.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspointOSUTable.')
clabWIFIAccessPointPasspointOSUProviderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIndex.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIndex.setDescription('A unique index number for each OSU Provider.')
clabWIFIAccessPointPasspointOSUProviderNamesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderNamesIndex.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderNamesIndex.setDescription('A unique index number for OSU provider friendly name.')
clabWIFIAccessPointPasspointOSUProviderIconsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 3), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconsIndex.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconsIndex.setDescription('A unique index number for each icon associated with an OSU provider.')
clabWIFIAccessPointPasspointOSUProviderServiceDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 4), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderServiceDescIndex.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderServiceDescIndex.setDescription('A unique index number for each icon associated with an Service Description.')
clabWIFIAccessPointPasspointOSUProviderServerURI = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderServerURI.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderServerURI.setDescription(' The URI of the OSU Server that is used for OSU with the Service Provider indicated in the Names table. It is formatted in accordance with the IETF RFC 3986.')
clabWIFIAccessPointPasspointOSUProviderNAI = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderNAI.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderNAI.setDescription(' Contains the NAI that is used for OSU with the Service Provider Name. OSUNAI is formatted in accordance with IETF RFC 4282.')
clabWIFIAccessPointPasspointOSUProviderNamesLanguageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderNamesLanguageCode.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderNamesLanguageCode.setDescription('A 2 or 3 octet ISO-14962-1997 encoded string field that defines the language used in the OSU Provider Friendly Name field. The code value is selected from ISO-639.')
clabWIFIAccessPointPasspointOSUProviderNamesFriendlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 504))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderNamesFriendlyName.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderNamesFriendlyName.setDescription('Indicates the UTF-8 encoded (represented as hexBinary) OSU Provider Friendly Name in the human language identified by the language code. This parameter accepts UTF-8 encoded string represented as hexBinary string.')
clabWIFIAccessPointPasspointOSUProviderIconFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconFileName.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconFileName.setDescription('The IconFilename is a UTF-8 encoded field whose value contains the filename of the Icon having the metadata provided in this icon instance.')
clabWIFIAccessPointPasspointOSUProviderIconType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconType.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconType.setDescription(' The IconType is the MIME media type of the binary icon file named by the IconFilename. The IconType field is formatted in accordance with RFC 6838 and its value is selected from the IANA MIME Media Types registered at http://www.iana.org/assignments/media-types/index.html.')
clabWIFIAccessPointPasspointOSUProviderIconWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconWidth.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconWidth.setDescription(' Width in pixel of the OSU Provider icon named by the IconFilename.')
clabWIFIAccessPointPasspointOSUProviderIconHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconHeight.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconHeight.setDescription(' Height in pixel of the OSU Provider icon named by the IconFilename.')
clabWIFIAccessPointPasspointOSUProviderIconLanguageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconLanguageCode.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderIconLanguageCode.setDescription(" A 2 or 3 octet ISO-14962-1997 encoded string field that defines the language used in the Icon file if any. The code value is selected from ISO-639. If there is no linguistic content to the icon/logo, the LanguageCode is set to 'zxx'.")
clabWIFIAccessPointPasspointOSUProviderServiceDescLanguageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderServiceDescLanguageCode.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderServiceDescLanguageCode.setDescription(' A 2 or 3 octet ISO-14962-1997 encoded string field that defines the language used in the OSU Provider Friendly Name field. The code value is selected from ISO-639.')
clabWIFIAccessPointPasspointOSUProviderServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(504, 504)).setFixedLength(504)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderServiceDescription.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderServiceDescription.setDescription(' Indicates the UTF-8 encoded (represented as hexBinary) string containing the ServiceProviders description of the service offering.')
clabWIFIAccessPointPasspointOSUProviderMethodsList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 9, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderMethodsList.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointOSUProviderMethodsList.setDescription(" A comma separated list of OSU Method values represented as integers. The methods are listed in the ServiceProvider's preferred order with the most-preferred method first. Possible values (integers) are selected from Table 10 of WFA HS2.0. 0 - OMA-DM 1 - SOAP-XML SPP All other values (2 - 255) are reserved. Example value '0,1' without quotes.")
clabWIFIAccessPointPasspoint2VenueNamesTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 10), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueNamesTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueNamesTable.setDescription('This table is used to configure the Passpoint venue names with country code for each.')
clabWIFIAccessPointPasspoint2VenueNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 10, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2VenueNameIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueNamesEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueNamesEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspoint2VenueNamesTable.')
clabWIFIAccessPointPasspoint2VenueNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueNameIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueNameIndex.setDescription('Venue name country code.')
clabWIFIAccessPointPasspoint2VenueNameCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 10, 1, 2), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(3, 3), ValueSizeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueNameCountryCode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueNameCountryCode.setDescription('Venue name country code.')
clabWIFIAccessPointPasspoint2VenueName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 10, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueName.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2VenueName.setDescription('Indicates the Venue Name where the access point is installed. This additional meta data about the venue is included in the Venue Name ANQP-element. This parameter accepts UTF-8 encoded string represented as hexBinary string. ')
clabWIFIAccessPointPasspoint2NAIRealmsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 11), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsTable.setDescription('NAI Realms corresponding to SSPs for other entities accessible via this AP. This object is defined in TR-181 Device.WiFi.AP.{i}.X_CableLabs_Passpoint_NAIRealm.{i} and its children.')
clabWIFIAccessPointPasspoint2NAIRealmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 11, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspoint2NAIRealms Table.')
clabWIFIAccessPointPasspoint2NAIRealmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsIndex.setDescription('A unique index number for each NAI Realm.')
clabWIFIAccessPointPasspoint2NAIRealmsEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfc", 1), ("utf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEncodingType.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEncodingType.setDescription(' Indicates NAI Realm Encoding Type used to encode NAI Realm ANQP Element. A value of 1 indicates that the NAI Realm in the NAI Realm subfield is formatted in accordance with IETF RFC4282. A value of 2 indicates that it is a UTF-8 formatted character string.')
clabWIFIAccessPointPasspoint2NAIRealms = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 11, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealms.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealms.setDescription(' NAI Realm Name.')
clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 12), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsTable.setReference('clabWIFIAccessPointPasspoint')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsTable.setDescription('This table is used to get the EAP method for each Realm.')
clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 12, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspoint2NAIRealmsEapMethods Table.')
clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsIndex.setDescription('A unique index number for each EAP Method associated with an NAI Realm.')
clabWIFIAccessPointPasspoint2NAIRealmsEapMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("eaptls", 2), ("eapttls", 3), ("peap", 4), ("eapmschapv2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethod.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethod.setDescription('EAP Method type that the NAI Realm supports.')
clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 13), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthTable.setReference('clabWIFIAccessPointPasspoint')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthTable.setDescription('This table is used to get the Authentication ID and paramemters for each EAP method.')
clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 13, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthParmIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuth Table.')
clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthParmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthParmIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthParmIndex.setDescription('A unique index number for each set of authentication parameters associated with each EAP Method.')
clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 13, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersID.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersID.setDescription('EAP Method Authentication Parameters.')
clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 13, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersValue.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersValue.setDescription('EAP Method Authentication Parameters.')
clabWIFIAccessPointPasspoint2OSUTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 14), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUTable.setDescription('This table contains information regarding the Online Sign Up (OSU) Service that is advertised via OSU Provider List element in beacon and probe frames. Refer section 4.8 of WFA HS2.0. This object is defined in TR-181 Device.WiFi.AP.{i}.X_CableLabs_Passpoint_OS and its children.')
clabWIFIAccessPointPasspoint2OSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 14, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspoint2OSUTable.')
clabWIFIAccessPointPasspoint2OSUProviderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIndex.setDescription('A unique index number for each OSU Provider.')
clabWIFIAccessPointPasspoint2OSUProviderServerURI = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 14, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServerURI.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServerURI.setDescription(' The URI of the OSU Server that is used for OSU with the Service Provider indicated in the Names table. It is formatted in accordance with the IETF RFC 3986.')
clabWIFIAccessPointPasspoint2OSUProviderNAI = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 14, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNAI.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNAI.setDescription(' Contains the NAI that is used for OSU with the Service Provider Name. OSUNAI is formatted in accordance with IETF RFC 4282.')
clabWIFIAccessPointPasspoint2OSUProviderMethodsList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderMethodsList.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderMethodsList.setDescription(" A comma separated list of OSU Method values represented as integers. The methods are listed in the ServiceProvider's preferred order with the most-preferred method first. Possible values (integers) are selected from Table 10 of WFA HS2.0. 0 - OMA-DM 1 - SOAP-XML SPP All other values (2 - 255) are reserved. Example value '0,1' without quotes.")
clabWIFIAccessPointPasspoint2OSUProviderNamesTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 15), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesTable.setReference('clabWIFIAccessPointPasspoint')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesTable.setDescription('This table is used to get the provider names for each OSU provider.')
clabWIFIAccessPointPasspoint2OSUProviderNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 15, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderNamesIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspoint2OSUProviderNames Table.')
clabWIFIAccessPointPasspoint2OSUProviderNamesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesIndex.setDescription('A unique index number for OSU provider friendly name.')
clabWIFIAccessPointPasspoint2OSUProviderNamesLanguageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesLanguageCode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesLanguageCode.setDescription('A 2 or 3 octet ISO-14962-1997 encoded string field that defines the language used in the OSU Provider Friendly Name field. The code value is selected from ISO-639.')
clabWIFIAccessPointPasspoint2OSUProviderNamesFriendlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 15, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 504))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesFriendlyName.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderNamesFriendlyName.setDescription('Indicates the UTF-8 encoded (represented as hexBinary) OSU Provider Friendly Name in the human language identified by the language code. This parameter accepts UTF-8 encoded string represented as hexBinary string.')
clabWIFIAccessPointPasspoint2OSUProviderIconsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 16), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconsTable.setReference('clabWIFIAccessPointPasspoint')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconsTable.setDescription('This table is used to get the icon information for each OSU provider.')
clabWIFIAccessPointPasspoint2OSUProviderIconsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 16, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIconsIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconsEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspoint2OSUProviderIcons Table.')
clabWIFIAccessPointPasspoint2OSUProviderIconsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconsIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconsIndex.setDescription('A unique index number for each icon associated with an OSU provider.')
clabWIFIAccessPointPasspoint2OSUProviderIconFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 16, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconFileName.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconFileName.setDescription('The IconFilename is a UTF-8 encoded field whose value contains the filename of the Icon having the metadata provided in this icon instance.')
clabWIFIAccessPointPasspoint2OSUProviderIconType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconType.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconType.setDescription(' The IconType is the MIME media type of the binary icon file named by the IconFilename. The IconType field is formatted in accordance with RFC 6838 and its value is selected from the IANA MIME Media Types registered at http://www.iana.org/assignments/media-types/index.html.')
clabWIFIAccessPointPasspoint2OSUProviderIconWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 16, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconWidth.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconWidth.setDescription(' Width in pixel of the OSU Provider icon named by the IconFilename.')
clabWIFIAccessPointPasspoint2OSUProviderIconHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 16, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconHeight.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconHeight.setDescription(' Height in pixel of the OSU Provider icon named by the IconFilename.')
clabWIFIAccessPointPasspoint2OSUProviderIconLanguageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 16, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconLanguageCode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderIconLanguageCode.setDescription(" A 2 or 3 octet ISO-14962-1997 encoded string field that defines the language used in the Icon file if any. The code value is selected from ISO-639. If there is no linguistic content to the icon/logo, the LanguageCode is set to 'zxx'.")
clabWIFIAccessPointPasspoint2OSUProviderServiceDescTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 17), )
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescTable.setReference('clabWIFIAccessPointPasspoint')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescTable.setDescription('This table is used to get the service descriptions for each OSU provider.')
clabWIFIAccessPointPasspoint2OSUProviderServiceDescEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 17, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIndex"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderServiceDescIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescEntry.setDescription('The conceptual row of clabWIFIAccessPointPasspoint2OSUProviderServiceDesc Table.')
clabWIFIAccessPointPasspoint2OSUProviderServiceDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescIndex.setDescription('A unique index number for each icon associated with an Service Description.')
clabWIFIAccessPointPasspoint2OSUProviderServiceDescLanguageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescLanguageCode.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescLanguageCode.setDescription(' A 2 or 3 octet ISO-14962-1997 encoded string field that defines the language used in the OSU Provider Friendly Name field. The code value is selected from ISO-639.')
clabWIFIAccessPointPasspoint2OSUProviderServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 19, 17, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(504, 504)).setFixedLength(504)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescription.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspoint2OSUProviderServiceDescription.setDescription(' Indicates the UTF-8 encoded (represented as hexBinary) string containing the ServiceProviders description of the service offering.')
clabWIFIAccessPointPasspointWANMetrics = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 20))
clabWIFIAccessPointPasspointWANMetricsLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reserved", 1), ("linkUp", 2), ("linkDown", 3), ("linkTest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsLinkStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsLinkStatus.setDescription('Status of WAN link.')
clabWIFIAccessPointPasspointWANMetricsAtCapacity = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 20, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsAtCapacity.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsAtCapacity.setDescription('Set to true if the WAN link is at capacity and no additional mobile devices will be permitted to associate to the AP. Otherwise false.')
clabWIFIAccessPointPasspointWANMetricsDownlinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 20, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsDownlinkSpeed.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsDownlinkSpeed.setDescription("An estimate of the WAN backhaul link's current downlink speed in kilobits per second (kbps). The maximum value of this field is 4,294,967,296 kbps (approx. 4.2Tbps).")
clabWIFIAccessPointPasspointWANMetricsUplinkSpeed = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 20, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsUplinkSpeed.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsUplinkSpeed.setDescription("An estimate of the WAN backhaul link's current uplink speed in kilobits per second (kbps). The maximum value of this field is 4,294,967,296 kbps (approx. 4.2Tbps).")
clabWIFIAccessPointPasspointWANMetricsDownlinkLoad = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 20, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsDownlinkLoad.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsDownlinkLoad.setDescription('Current percentage loading of the downlink WAN connection.')
clabWIFIAccessPointPasspointWANMetricsUplinkLoad = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 20, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsUplinkLoad.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointPasspointWANMetricsUplinkLoad.setDescription('Current percentage loading of the uplink WAN connection.')
clabWIFIAccessPointAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23), )
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingTable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Accounting.')
clabWIFIAccessPointAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingEntry.setDescription('The conceptual row of clabWIFIAccessPointAccounting Table.')
clabWIFIAccessPointAccountingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingEnable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingEnable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Accounting.Enable.')
clabWIFIAccessPointAccountingServerIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingServerIPAddrType.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingServerIPAddrType.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingServerIPAddrType.setDescription('This object is type of the address in TR-181 Device.WiFi.AccessPoint{i}.Accounting.ServerIPAddr.')
clabWIFIAccessPointAccountingServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingServerIPAddr.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingServerIPAddr.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Accounting.ServerIPAddr.')
clabWIFIAccessPointAccountingSecondaryServerIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondaryServerIPAddrType.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondaryServerIPAddrType.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondaryServerIPAddrType.setDescription('This object is type of the address in TR-181 Device.WiFi.AccessPoint{i}.Accounting.SecondaryServerIPAddr.')
clabWIFIAccessPointAccountingSecondaryServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondaryServerIPAddr.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondaryServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondaryServerIPAddr.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Accounting.SecondaryServerIPAddr.')
clabWIFIAccessPointAccountingServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 6), InetPortNumber().clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingServerPort.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingServerPort.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingServerPort.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Accounting.ServerPort.')
clabWIFIAccessPointAccountingSecondaryServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 7), InetPortNumber().clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondaryServerPort.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondaryServerPort.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondaryServerPort.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Accounting.SecondaryServerPort.')
clabWIFIAccessPointAccountingSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecret.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecret.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecret.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Accounting.Secret.')
clabWIFIAccessPointAccountingSecondarySecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 9), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondarySecret.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondarySecret.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingSecondarySecret.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Accounting.SecondarySecret.')
clabWIFIAccessPointAccountingInterimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingInterimInterval.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingInterimInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingInterimInterval.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.Accounting.InterimInterval.')
clabWIFIAccessPointAccountingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 23, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingRowStatus.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAccountingRowStatus.setDescription('The status of this instance.')
clabWIFIAccessPointACTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24), )
if mibBuilder.loadTexts: clabWIFIAccessPointACTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACTable.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACTable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.')
clabWIFIAccessPointACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIAccessPointACEntry.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACEntry.setDescription('The conceptual row of clabWIFIAccessPointAC Table.')
clabWIFIAccessPointACAccessCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("be", 1), ("bk", 2), ("vi", 3), ("vo", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACAccessCategory.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACAccessCategory.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACAccessCategory.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.AccessCategory.')
clabWIFIAccessPointACAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointACAlias.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACAlias.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACAlias.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Alias.')
clabWIFIAccessPointACAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointACAIFSN.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACAIFSN.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACAIFSN.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.AIFSN.')
clabWIFIAccessPointACECWMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointACECWMin.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACECWMin.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACECWMin.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.ECWMin.')
clabWIFIAccessPointACECWMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointACECWMax.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACECWMax.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACECWMax.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.ECWMax.')
clabWIFIAccessPointACTxOpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointACTxOpMax.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACTxOpMax.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACTxOpMax.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.TxOpMax.')
clabWIFIAccessPointACAckPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointACAckPolicy.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACAckPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACAckPolicy.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.AckPolicy.')
clabWIFIAccessPointACOutQLenHistogramIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointACOutQLenHistogramIntervals.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACOutQLenHistogramIntervals.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACOutQLenHistogramIntervals.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.OutQlenHistogramIntervals.')
clabWIFIAccessPointACOutQLenHistogramSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 24, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointACOutQLenHistogramSampleInterval.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACOutQLenHistogramSampleInterval.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACOutQLenHistogramSampleInterval.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.OutQlenHistograSampleInterval.')
clabWIFIAccessPointACStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25), )
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsTable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.')
clabWIFIAccessPointACStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"))
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsEntry.setDescription('The conceptual row of clabWIFIAccessPointACStats Table.')
clabWIFIAccessPointACStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsBytesSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsBytesSent.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsBytesSent.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.BytesSent.')
clabWIFIAccessPointACStatsBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsBytesReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsBytesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsBytesReceived.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.BytesReceived.')
clabWIFIAccessPointACStatsPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsPacketsSent.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.PacketsSent.')
clabWIFIAccessPointACStatsPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsPacketsReceived.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.PacketsReceived.')
clabWIFIAccessPointACStatsErrorsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsErrorsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsErrorsSent.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsErrorsSent.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.ErrorsSent.')
clabWIFIAccessPointACStatsErrorsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsErrorsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsErrorsReceived.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsErrorsReceived.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.ErrorsReceieved.')
clabWIFIAccessPointACStatsDiscardPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsDiscardPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsDiscardPacketsSent.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsDiscardPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.DiscardPacketsSent.')
clabWIFIAccessPointACStatsDiscardPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsDiscardPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsDiscardPacketsReceived.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsDiscardPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.DiscardPacketsReceived.')
clabWIFIAccessPointACStatsRetransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsRetransCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsRetransCount.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsRetransCount.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.RetransCount.')
clabWIFIAccessPointACStatsOutQLenHistogram = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 25, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsOutQLenHistogram.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsOutQLenHistogram.setStatus('deprecated')
if mibBuilder.loadTexts: clabWIFIAccessPointACStatsOutQLenHistogram.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.OutQLenHistogram.')
clabWIFIAccessPointAC2Table = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27), )
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Table.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Table.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Table.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.')
clabWIFIAccessPointAC2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointAC2Index"))
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Entry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Entry.setDescription('The conceptual row of clabWIFIAccessPointAC2Table.')
clabWIFIAccessPointAC2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Index.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Index.setDescription('The key for a unique entry in clabWIFIAccessPointAC2Table. ')
clabWIFIAccessPointAC2AccessCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("be", 1), ("bk", 2), ("vi", 3), ("vo", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2AccessCategory.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2AccessCategory.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2AccessCategory.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.AccessCategory.')
clabWIFIAccessPointAC2Alias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Alias.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Alias.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2Alias.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Alias.')
clabWIFIAccessPointAC2AIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2AIFSN.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2AIFSN.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2AIFSN.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.AIFSN.')
clabWIFIAccessPointAC2ECWMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2ECWMin.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2ECWMin.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2ECWMin.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.ECWMin.')
clabWIFIAccessPointAC2ECWMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2ECWMax.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2ECWMax.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2ECWMax.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.ECWMax.')
clabWIFIAccessPointAC2TxOpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2TxOpMax.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2TxOpMax.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2TxOpMax.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.TxOpMax.')
clabWIFIAccessPointAC2AckPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2AckPolicy.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2AckPolicy.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2AckPolicy.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.AckPolicy.')
clabWIFIAccessPointAC2OutQLenHistogramIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2OutQLenHistogramIntervals.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2OutQLenHistogramIntervals.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2OutQLenHistogramIntervals.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.OutQlenHistogramIntervals.')
clabWIFIAccessPointAC2OutQLenHistogramSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 27, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2OutQLenHistogramSampleInterval.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2OutQLenHistogramSampleInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2OutQLenHistogramSampleInterval.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.OutQlenHistograSampleInterval.')
clabWIFIAccessPointAC2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28), )
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsTable.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsTable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsTable.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.')
clabWIFIAccessPointAC2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1), ).setIndexNames((0, "CLAB-WIFI-MIB", "clabWIFIAccessPointId"), (0, "CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsIndex"))
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsEntry.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsEntry.setDescription('The conceptual row of clabWIFIAccessPointAC2Stats Table.')
clabWIFIAccessPointAC2StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsIndex.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsIndex.setDescription('The key for a unique entry in clabWIFIAccessPointAC2StatsTable. ')
clabWIFIAccessPointAC2StatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsBytesSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsBytesSent.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.BytesSent.')
clabWIFIAccessPointAC2StatsBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsBytesReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsBytesReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsBytesReceived.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.BytesReceived.')
clabWIFIAccessPointAC2StatsPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.PacketsSent.')
clabWIFIAccessPointAC2StatsPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.PacketsReceived.')
clabWIFIAccessPointAC2StatsErrorsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsErrorsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsErrorsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsErrorsSent.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.ErrorsSent.')
clabWIFIAccessPointAC2StatsErrorsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsErrorsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsErrorsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsErrorsReceived.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.ErrorsReceieved.')
clabWIFIAccessPointAC2StatsDiscardPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsDiscardPacketsSent.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsDiscardPacketsSent.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsDiscardPacketsSent.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.DiscardPacketsSent.')
clabWIFIAccessPointAC2StatsDiscardPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsDiscardPacketsReceived.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsDiscardPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsDiscardPacketsReceived.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.DiscardPacketsReceived.')
clabWIFIAccessPointAC2StatsRetransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsRetransCount.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsRetransCount.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsRetransCount.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.RetransCount.')
clabWIFIAccessPointAC2StatsOutQLenHistogram = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 28, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsOutQLenHistogram.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsOutQLenHistogram.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointAC2StatsOutQLenHistogram.setDescription('This object is defined in TR-181 Device.WiFi.AccessPoint{i}.AC.Stats.OutQLenHistogram.')
clabWIFIAccessPointRadiusSettingsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26))
clabWIFIAccessPointRadiusSettingsRadiusServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsRadiusServerRetries.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsRadiusServerRetries.setDescription('Number of retries for Radius requests.')
clabWIFIAccessPointRadiusSettingsRadiusServerRequestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsRadiusServerRequestTimeout.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsRadiusServerRequestTimeout.setDescription('Radius request timeout in seconds after which the request must be retransmitted for the number of retries available.')
clabWIFIAccessPointRadiusSettingsPMKLifetime = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsPMKLifetime.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsPMKLifetime.setDescription('Default time after which a Wi-Fi client is forced to re-authenticate.')
clabWIFIAccessPointRadiusSettingsPMKCachingEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsPMKCachingEnable.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsPMKCachingEnable.setDescription('Enable or disable caching of PMK.')
clabWIFIAccessPointRadiusSettingsPMKCachingInterval = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsPMKCachingInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsPMKCachingInterval.setDescription('Time interval after which the PMKSA (Pairwise Master Key Security Association) cache is purged.')
clabWIFIAccessPointRadiusSettingsMaxAuthenticationAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsMaxAuthenticationAttempts.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsMaxAuthenticationAttempts.setDescription('Indicates the number of times a client can unsuccessfully attempt to login within incorrect credentials. When this limit is reached, the client is blacklisted and not allowed to attempt to login to the network. Setting this parameter to 0 (zero) disables the blacklisting feature..')
clabWIFIAccessPointRadiusSettingsBlacklistTableTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsBlacklistTableTimeout.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsBlacklistTableTimeout.setDescription('Time interval for which a client will continue to be blacklisted one it is marked so.')
clabWIFIAccessPointRadiusSettingsIdentityRequestRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsIdentityRequestRetryInterval.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsIdentityRequestRetryInterval.setDescription('Time interval between identity request retries. A value of o (zero) disables retry interval.')
clabWIFIAccessPointRadiusSettingsQuietPeriodAfterFailedAuth = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 1, 26, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsQuietPeriodAfterFailedAuth.setStatus('current')
if mibBuilder.loadTexts: clabWIFIAccessPointRadiusSettingsQuietPeriodAfterFailedAuth.setDescription('The enforced quiet period (time interval) following a failed authentication attempt. A value of 0 (zero) disables quiet period.')
clabWIFIWIFIEventNotif = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 0, 1)).setObjects(("CLAB-WIFI-MIB", "clabWIFIWIFIEventNotifText"), ("CLAB-WIFI-MIB", "clabWIFIWIFIEventNotifEventId"), ("CLAB-WIFI-MIB", "clabWIFIWIFIEventNotifTimeStamp"))
if mibBuilder.loadTexts: clabWIFIWIFIEventNotif.setStatus('current')
if mibBuilder.loadTexts: clabWIFIWIFIEventNotif.setDescription('This object represents the Wi-Fi GW notification.')
clabWIFIWIFIEventNotifgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 0, 2))
clabWIFIWIFIEventNotifText = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 0, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clabWIFIWIFIEventNotifText.setStatus('current')
if mibBuilder.loadTexts: clabWIFIWIFIEventNotifText.setDescription('This attribute represents the Event Message of the event.')
clabWIFIWIFIEventNotifEventId = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 0, 2, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clabWIFIWIFIEventNotifEventId.setStatus('current')
if mibBuilder.loadTexts: clabWIFIWIFIEventNotifEventId.setDescription('The identifier of the event')
clabWIFIWIFIEventNotifTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 0, 2, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clabWIFIWIFIEventNotifTimeStamp.setStatus('current')
if mibBuilder.loadTexts: clabWIFIWIFIEventNotifTimeStamp.setDescription('Date and Time when the event was generated. (not the time when the event was dispatched).')
clabWIFIMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 2))
clabWIFIMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 2, 1))
clabWIFIMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 2, 2))
clabWIFICompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 2, 1, 1)).setObjects(("CLAB-WIFI-MIB", "clabWIFIGroup"), ("CLAB-WIFI-MIB", "clabWIFINotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabWIFICompliance = clabWIFICompliance.setStatus('current')
if mibBuilder.loadTexts: clabWIFICompliance.setDescription('The compliance statement for the WiFi Interface.')
clabWIFIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 2, 2, 1))
for _clabWIFIGroup_obj in [[("CLAB-WIFI-MIB", "clabWIFIWiFiRadioNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFIWiFiSSIDNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFIWiFiAccessPointNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFIWiFiEndPointNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFISSIDSteeringEnabled"), ("CLAB-WIFI-MIB", "clabWIFICommitSettings"), ("CLAB-WIFI-MIB", "clabWIFIRadioEnable"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatus"), ("CLAB-WIFI-MIB", "clabWIFIRadioAlias"), ("CLAB-WIFI-MIB", "clabWIFIRadioName"), ("CLAB-WIFI-MIB", "clabWIFIRadioLastChange"), ("CLAB-WIFI-MIB", "clabWIFIRadioLowerLayers"), ("CLAB-WIFI-MIB", "clabWIFIRadioUpstream"), ("CLAB-WIFI-MIB", "clabWIFIRadioMaxBitRate"), ("CLAB-WIFI-MIB", "clabWIFIRadioSupportedFrequencyBands"), ("CLAB-WIFI-MIB", "clabWIFIRadioOperatingFrequencyBand"), ("CLAB-WIFI-MIB", "clabWIFIRadioSupportedStandards"), ("CLAB-WIFI-MIB", "clabWIFIRadioOperatingStandards"), ("CLAB-WIFI-MIB", "clabWIFIRadioPossibleChannels"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannelsInUse"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannel"), ("CLAB-WIFI-MIB", "clabWIFIRadioAutoChannelSupported"), ("CLAB-WIFI-MIB", "clabWIFIRadioAutoChannelEnable"), ("CLAB-WIFI-MIB", "clabWIFIRadioAutoChannelRefreshPeriod"), ("CLAB-WIFI-MIB", "clabWIFIRadioOperatingChannelBandwidth"), ("CLAB-WIFI-MIB", "clabWIFIRadioExtensionChannel"), ("CLAB-WIFI-MIB", "clabWIFIRadioGuardInterval"), ("CLAB-WIFI-MIB", "clabWIFIRadioMCS"), ("CLAB-WIFI-MIB", "clabWIFIRadioTransmitPowerSupported"), ("CLAB-WIFI-MIB", "clabWIFIRadioTransmitPower"), ("CLAB-WIFI-MIB", "clabWIFIRadioIEEE80211hSupported"), ("CLAB-WIFI-MIB", "clabWIFIRadioIEEE80211hEnabled"), ("CLAB-WIFI-MIB", "clabWIFIRadioRegulatoryDomain"), ("CLAB-WIFI-MIB", "clabWIFIRadioNonContiguousChannel"), ("CLAB-WIFI-MIB", "clabWIFIRadioCarrierSenseThresholdInUse"), ("CLAB-WIFI-MIB", "clabWIFIRadioRtsCtsExchange"), ("CLAB-WIFI-MIB", "clabWIFIRadioRetryLimit"), ("CLAB-WIFI-MIB", "clabWIFIRadioCCARequest"), ("CLAB-WIFI-MIB", "clabWIFIRadioRPIHistogramRequest"), ("CLAB-WIFI-MIB", "clabWIFIRadioFragmentationThreshold"), ("CLAB-WIFI-MIB", "clabWIFIRadioRTSThreshold"), ("CLAB-WIFI-MIB", "clabWIFIRadioLongRetryLimit"), ("CLAB-WIFI-MIB", "clabWIFIRadioBeaconPeriod"), ("CLAB-WIFI-MIB", "clabWIFIRadioDTIMPeriod"), ("CLAB-WIFI-MIB", "clabWIFIRadioPacketAggregationEnable"), ("CLAB-WIFI-MIB", "clabWIFIRadioBasicDataTransmitRates"), ("CLAB-WIFI-MIB", "clabWIFIRadioOperationalDataTransmitRates"), ("CLAB-WIFI-MIB", "clabWIFIRadioSupportedDataTransmitRates"), ("CLAB-WIFI-MIB", "clabWIFIRadioCarrierSenseThresholdRangeMin"), ("CLAB-WIFI-MIB", "clabWIFIRadioCarrierSenseThresholdRangeMax"), ("CLAB-WIFI-MIB", "clabWIFIRadioCCAReport"), ("CLAB-WIFI-MIB", "clabWIFIRadioRPIHistogramReport"), ("CLAB-WIFI-MIB", "clabWIFIRadioPreambleType"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsBytesSent"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsBytesReceived"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsErrorsSent"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsErrorsReceived"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsDiscardPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsDiscardPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsPLCPErrorCount"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsFCSErrorCount"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsInvalidMACCount"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsPacketsOtherReceived"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsNoise"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsFramesRetransmissionsSent"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsFramesDuplicatedReceived"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsChannelUtilization"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannelWiFiDiagnosticsState"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannelWiFiDiagnosticsLastRunTimestamp"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannelWiFiDiagnosticsResultNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannelWiFiDiagnosticsResultsBandwidth"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannelWiFiDiagnosticsResultsAvailableCapacity"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFi"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFiClasses"), ("CLAB-WIFI-MIB", "clabWIFIRadioChannelWiFiDiagnosticsResultsFrequencyBand"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsMode"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsInterval"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsState"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsTableClear"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsTableMaxNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiSSID"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiBSSID"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiMode"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiChannel"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiSignalStrength"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiSecurityModeEnabled"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiEncryptionMode"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiOperatingFrequencyBand"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiSupportedStandards"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiOperatingStandards"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiOperatingChannelBandwidth"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiBeaconPeriod"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiNoise"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiBasicDataTransferRates"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiSupportedDataTransferRates"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDTIMPeriod"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiSidebandPosition"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsLastRunTimestamp"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsNonContiguousChannel"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsResultNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFINeighboringWiFiDiagnosticsLastRunTimestamp"), ("CLAB-WIFI-MIB", "clabWIFISSIDEnable"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatus"), ("CLAB-WIFI-MIB", "clabWIFISSIDAlias"), ("CLAB-WIFI-MIB", "clabWIFISSIDName"), ("CLAB-WIFI-MIB", "clabWIFISSIDLastChange"), ("CLAB-WIFI-MIB", "clabWIFISSIDLowerLayers"), ("CLAB-WIFI-MIB", "clabWIFISSIDBSSID"), ("CLAB-WIFI-MIB", "clabWIFISSIDMACAddress"), ("CLAB-WIFI-MIB", "clabWIFISSIDSSID"), ("CLAB-WIFI-MIB", "clabWIFISSIDRowStatus"), ("CLAB-WIFI-MIB", "clabWIFISSIDFragmentationEnable"), ("CLAB-WIFI-MIB", "clabWIFISSIDPeriodicStatsNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsBytesSent"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsBytesReceived"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsErrorsSent"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsErrorsReceived"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsUnicastPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsUnicastPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsDiscardPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsDiscardPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsMulticastPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsMulticastPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsBroadcastPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsBroadcastPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsUnknownProtoPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsRetransCount"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsRetryCount"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsMultipleRetryCount"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsACKFailureCount"), ("CLAB-WIFI-MIB", "clabWIFISSIDStatsAggregatedPacketCount"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointStatus"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAlias"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSSIDReference"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSSIDAdvertisementEnabled"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWMMCapability"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointUAPSDCapability"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWMMEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointUAPSDEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAssociatedDeviceNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRowStatus"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPublicAccessMode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointIsolationEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointMaxAssociatedDevices"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointSupported"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointEnabled"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointInterworkingCapability"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointInterworkingServiceEnabled"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointMACAddressControlEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAllowedMACAddress"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointClientSessionNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityModesSupported"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityModeEnabled"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityWEPKey"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityPreSharedKey"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityKeyPassphrase"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityRekeyingInterval"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityRadiusServerIPAddrType"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityRadiusServerIPAddr"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityRadiusServerPort"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityRadiusSecret"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityRowstatus"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityWEPKey2"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityWEPKey3"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityWEPKey4"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityWEPIndex"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityWEPPassPhrase"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityWPAEncryption"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddrType"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddr"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecuritySecondaryRadiusServerPort"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecuritySecondaryRadiusSecret"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityEnableManagementFrameProtection"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityReset"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusRetries"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointSecurityLanRoutingEnabled"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWPSEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWPSConfigMethodsSupported"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWPSRowStatus"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWPSSetWPSMethods"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWPSAPPin"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWPSSetWPSClientPin"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWPSConfigMethodsEnable"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceMACAddress"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceAuthenticationState"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceLastDataDownlinkRate"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceLastDataUplinkRate"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceSignalStrength"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceRetransmissions"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceActive"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceMaxPacketRetryCount"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceSecurityMode"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceAssociationState"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsDeviceMACAddress"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsFramesSent"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsDataFramesSentAck"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsDataFramesSentNoAck"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsDataFramesLost"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsFramesReceived"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsDataFramesReceived"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsDataFramesDuplicateReceived"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsProbesReceived"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsProbesRejected"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsRSSI"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsSNR"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsDisassociations"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsAuthenticationFailures"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsLastTimeAssociation"), ("CLAB-WIFI-MIB", "clabWIFIPeriodicStatsLastTimeDisassociation"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyBlockAfterAttempts"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyAllocatedBandwidth"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyAuthenticationFailures"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyNonAuthenticatedTraffic"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyAssociationFailures"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyStatsInterval"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicySNRThreshold"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyANPIThreshold"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyLowReceivedPowerThreshold"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyLowPowerDeniedAccessThreshold"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyLowPowerDisassociationThreshold"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyRowStatus"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyBeaconMcsLevelInUse"), ("CLAB-WIFI-MIB", "clabWIFISSIDPolicyBeaconMcsLevelsSupported"), ("CLAB-WIFI-MIB", "clabWIFIClientSessionsDeviceMACAddress"), ("CLAB-WIFI-MIB", "clabWIFIClientSessionsStart"), ("CLAB-WIFI-MIB", "clabWIFIClientSessionsStop"), ("CLAB-WIFI-MIB", "clabWIFIClientSessionsTerminationCode"), ("CLAB-WIFI-MIB", "clabWIFIClientSessionsTerminationMeaning"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsDeviceMACAddress"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsFramesSent"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsDataFramesSentAck"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsDataFramesSentNoAck"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsDataFramesLost"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsFramesReceived"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsDataFramesReceived"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsDataFramesDuplicateReceived"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsProbesReceived"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsProbesRejected"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsRSSI"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsSNR"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsDisassociations"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsAuthenticationFailures"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsLastTimeAssociation"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsLastTimeDisassociation"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsThroughput"), ("CLAB-WIFI-MIB", "clabWIFIClientStatsPktErrorRatePerSTA"), ("CLAB-WIFI-MIB", "clabWIFIRadiusClientNASIdentifier"), ("CLAB-WIFI-MIB", "clabWIFIRadiusClientLocationPolicy"), ("CLAB-WIFI-MIB", "clabWIFIRadiusClientOperatorName"), ("CLAB-WIFI-MIB", "clabWIFIRadiusClientLocationInformation")], [("CLAB-WIFI-MIB", "clabWIFIRadiusClientLocationData"), ("CLAB-WIFI-MIB", "clabWIFIRadiusClientUsageReports"), ("CLAB-WIFI-MIB", "clabWIFIRadiusClientIntervalInterimReport"), ("CLAB-WIFI-MIB", "clabWIFIRadiusClientAPTransitionReport"), ("CLAB-WIFI-MIB", "clabWIFIRadiusClientGigawordReport"), ("CLAB-WIFI-MIB", "clabWIFIRadiusClientRowStatus"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointClearAccessControlFilterTable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccessControlFilterAccessAllow"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccessControlFilterMACAddress"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccessControlFilterNumberOfEntries"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointInterworkingServiceInternet"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointInterworkingServiceHESSID"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointInterworkingServiceAccessNetworkType"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointInterworkingServiceVenueGroupCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointInterworkingServiceVenueTypeCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointCapabilities"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOnlineSignupSupported"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointDGAFEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointP2PEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointQoSMappingEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointASRAEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointANQPDomainID"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointEAPMethod"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointManagementFrameProtectionEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOperatorNameCountryCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOperatorName"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointConsortiumOI"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointDomainNamesDomainName"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointThreeGPPNetworkMNC"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointThreeGPPNetworkMCC"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2VenueNameCountryCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2VenueName"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsEncodingType"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealms"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsEapMethod"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersID"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersValue"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderServerURI"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderNAI"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderNamesLanguageCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderNamesFriendlyName"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIconFileName"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIconType"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIconWidth"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIconHeight"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderIconLanguageCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderServiceDescLanguageCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderServiceDescription"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspoint2OSUProviderMethodsList"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointWANMetricsLinkStatus"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointWANMetricsAtCapacity"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointWANMetricsDownlinkSpeed"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointWANMetricsUplinkSpeed"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointWANMetricsDownlinkLoad"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointWANMetricsUplinkLoad"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingServerIPAddrType"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingServerIPAddr"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingSecondaryServerIPAddrType"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingSecondaryServerIPAddr"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingServerPort"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingSecondaryServerPort"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingSecret"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingSecondarySecret"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingInterimInterval"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccountingRowStatus"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2AccessCategory"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2Alias"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2AIFSN"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2ECWMin"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2ECWMax"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2TxOpMax"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2AckPolicy"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2OutQLenHistogramIntervals"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2OutQLenHistogramSampleInterval"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsBytesSent"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsBytesReceived"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsErrorsSent"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsErrorsReceived"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsDiscardPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsDiscardPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsRetransCount"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAC2StatsOutQLenHistogram"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusSettingsRadiusServerRetries"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusSettingsRadiusServerRequestTimeout"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusSettingsPMKLifetime"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusSettingsPMKCachingEnable"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusSettingsPMKCachingInterval"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusSettingsMaxAuthenticationAttempts"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusSettingsBlacklistTableTimeout"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusSettingsIdentityRequestRetryInterval"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRadiusSettingsQuietPeriodAfterFailedAuth"), ("CLAB-WIFI-MIB", "clabWIFIWIFIEventNotifText"), ("CLAB-WIFI-MIB", "clabWIFIWIFIEventNotifEventId"), ("CLAB-WIFI-MIB", "clabWIFIWIFIEventNotifTimeStamp")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        clabWIFIGroup = clabWIFIGroup.setObjects(*_clabWIFIGroup_obj)
    else:
        clabWIFIGroup = clabWIFIGroup.setObjects(*_clabWIFIGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabWIFIGroup = clabWIFIGroup.setStatus('current')
if mibBuilder.loadTexts: clabWIFIGroup.setDescription('Objects implemented in the clabWIFIGroup.')
clabWIFINotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 2, 2, 2)).setObjects(("CLAB-WIFI-MIB", "clabWIFIWIFIEventNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabWIFINotificationsGroup = clabWIFINotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: clabWIFINotificationsGroup.setDescription('Notifications implemented in the clabWIFINotificationsGroup.')
clabDeprecatedObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 5, 1, 2, 2, 99)).setObjects(("CLAB-WIFI-MIB", "clabWIFIRadioCarrierSenseThresholdRange"), ("CLAB-WIFI-MIB", "clabWIFIRadioStatsChanUtilization"), ("CLAB-WIFI-MIB", "clabWIFIRadioFrameAggregationLevel"), ("CLAB-WIFI-MIB", "clabWIFIRadioThroughput"), ("CLAB-WIFI-MIB", "clabWIFIRadioPktErrorRateSTA"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointRetryLimit"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWPSConfigMethodsEnabled"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointWPSSetWPSMethod"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAssociatedDeviceCount"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceStationCount"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceMaxNumOfStations"), ("CLAB-WIFI-MIB", "clabWIFIAssociatedDeviceEncryptionAlgorithm"), ("CLAB-WIFI-MIB", "clabWIFIDataRateStatsFramesSent"), ("CLAB-WIFI-MIB", "clabWIFIDataRateStatsFramesRetransmissionsSent"), ("CLAB-WIFI-MIB", "clabWIFIDataRateStatsFramesReceived"), ("CLAB-WIFI-MIB", "clabWIFIDataRateStatsFramesDuplicatedReceived"), ("CLAB-WIFI-MIB", "clabWIFIWIFICommitSettingsValue"), ("CLAB-WIFI-MIB", "clabWIFIApNeighborStatsSSID"), ("CLAB-WIFI-MIB", "clabWIFIApNeighborStatsCurrentChannel"), ("CLAB-WIFI-MIB", "clabWIFIApNeighborStatsCurrentBandwidth"), ("CLAB-WIFI-MIB", "clabWIFIApNeighborStatsRSSI"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointCapabilityList"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointVenueNameCountryCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointVenueName"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointNAIRealmsEncodingType"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointNAIRealms"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointNAIRealmsEapMethod"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersID"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersValue"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderServerURI"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderNAI"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderNamesLanguageCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderNamesFriendlyName"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderIconFileName"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderIconType"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderIconWidth"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderIconHeight"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderIconLanguageCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderServiceDescLanguageCode"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderServiceDescription"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointPasspointOSUProviderMethodsList"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACAccessCategory"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACAlias"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACAIFSN"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACECWMin"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACECWMax"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACTxOpMax"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACAckPolicy"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACOutQLenHistogramIntervals"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACOutQLenHistogramSampleInterval"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsBytesSent"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsBytesReceived"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsErrorsSent"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsErrorsReceived"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsDiscardPacketsSent"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsDiscardPacketsReceived"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsRetransCount"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointACStatsOutQLenHistogram"), ("CLAB-WIFI-MIB", "clabWIFIAccessPointAccessControlFilterEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabDeprecatedObjectsGroup = clabDeprecatedObjectsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: clabDeprecatedObjectsGroup.setDescription('A place for deprecated objects so they have a home for smilint.')
mibBuilder.exportSymbols("CLAB-WIFI-MIB", clabWIFIMibGroups=clabWIFIMibGroups, clabWIFIAccessPointInterworkingCapability=clabWIFIAccessPointInterworkingCapability, clabWIFIAccessPointSecurityRowstatus=clabWIFIAccessPointSecurityRowstatus, clabWIFISSIDStatsUnicastPacketsSent=clabWIFISSIDStatsUnicastPacketsSent, clabWIFIRadioCCARequest=clabWIFIRadioCCARequest, clabWIFIAccessPointAC2Alias=clabWIFIAccessPointAC2Alias, clabWIFIAccessPointPasspointThreeGPPNetworkTable=clabWIFIAccessPointPasspointThreeGPPNetworkTable, clabWIFIAccessPointPasspoint2OSUProviderIndex=clabWIFIAccessPointPasspoint2OSUProviderIndex, clabWIFIAccessPointPasspointCapabilityList=clabWIFIAccessPointPasspointCapabilityList, clabWIFIPeriodicStatsDeviceMACAddress=clabWIFIPeriodicStatsDeviceMACAddress, clabWIFIAccessPointSecurityRadiusServerIPAddr=clabWIFIAccessPointSecurityRadiusServerIPAddr, clabWIFINeighboringWiFiDTIMPeriod=clabWIFINeighboringWiFiDTIMPeriod, clabWIFISSIDFragmentationEnable=clabWIFISSIDFragmentationEnable, clabWIFIAssociatedDeviceStationCount=clabWIFIAssociatedDeviceStationCount, clabWIFISSIDPolicyEntry=clabWIFISSIDPolicyEntry, clabWIFIAccessPointACStatsPacketsReceived=clabWIFIAccessPointACStatsPacketsReceived, clabWIFIAccessPointPasspoint2NAIRealmsTable=clabWIFIAccessPointPasspoint2NAIRealmsTable, clabWIFIAccessPointAccessControlFilterNumberOfEntries=clabWIFIAccessPointAccessControlFilterNumberOfEntries, clabWIFIDataRateStatsFramesRetransmissionsSent=clabWIFIDataRateStatsFramesRetransmissionsSent, clabWIFIClientSessionsEntry=clabWIFIClientSessionsEntry, clabWIFIAccessPointPasspointNAIRealmsEntry=clabWIFIAccessPointPasspointNAIRealmsEntry, clabWIFIAccessPointACStatsPacketsSent=clabWIFIAccessPointACStatsPacketsSent, clabWIFIRadiusClientLocationData=clabWIFIRadiusClientLocationData, clabWIFIAccessPointPasspointOSUProviderServerURI=clabWIFIAccessPointPasspointOSUProviderServerURI, clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersID=clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersID, clabWIFIAccessPointAC2StatsEntry=clabWIFIAccessPointAC2StatsEntry, clabWIFISSIDBSSID=clabWIFISSIDBSSID, clabWIFIAccessPointInterworkingServiceVenueGroupCode=clabWIFIAccessPointInterworkingServiceVenueGroupCode, clabWIFIApNeighborStatsCurrentBandwidth=clabWIFIApNeighborStatsCurrentBandwidth, clabWIFIAccessPointPasspointWANMetrics=clabWIFIAccessPointPasspointWANMetrics, clabWIFIAccessPointIsolationEnable=clabWIFIAccessPointIsolationEnable, clabWIFIAccessPointACAIFSN=clabWIFIAccessPointACAIFSN, clabWIFIAccessPointPasspointWANMetricsDownlinkSpeed=clabWIFIAccessPointPasspointWANMetricsDownlinkSpeed, clabWIFIRadioThroughput=clabWIFIRadioThroughput, clabWIFINeighboringWiFiSidebandPosition=clabWIFINeighboringWiFiSidebandPosition, clabWIFIAccessPointPasspointNAIRealms=clabWIFIAccessPointPasspointNAIRealms, clabWIFIAssociatedDeviceSignalStrength=clabWIFIAssociatedDeviceSignalStrength, clabWIFISSIDPolicyTable=clabWIFISSIDPolicyTable, clabWIFIAccessPointPasspoint2OSUProviderIconHeight=clabWIFIAccessPointPasspoint2OSUProviderIconHeight, clabWIFIRadioCarrierSenseThresholdRangeMax=clabWIFIRadioCarrierSenseThresholdRangeMax, clabWIFIPeriodicStatsDataFramesLost=clabWIFIPeriodicStatsDataFramesLost, clabWIFIClientStatsLastTimeAssociation=clabWIFIClientStatsLastTimeAssociation, clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsIndex=clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsIndex, clabWIFISSIDStatsMultipleRetryCount=clabWIFISSIDStatsMultipleRetryCount, clabWIFIRadioOperatingFrequencyBand=clabWIFIRadioOperatingFrequencyBand, clabWIFINeighboringWiFiSecurityModeEnabled=clabWIFINeighboringWiFiSecurityModeEnabled, clabWIFIClientSessionsStop=clabWIFIClientSessionsStop, clabWIFIAccessPointPasspointOperatorNameCountryCode=clabWIFIAccessPointPasspointOperatorNameCountryCode, clabWIFISSIDSteeringEnabled=clabWIFISSIDSteeringEnabled, clabWIFIAccessPointPasspointTable=clabWIFIAccessPointPasspointTable, clabWIFIAccessPointSecurityKeyPassphrase=clabWIFIAccessPointSecurityKeyPassphrase, clabWIFIWiFiRadioNumberOfEntries=clabWIFIWiFiRadioNumberOfEntries, clabWIFIDataRateStatsTable=clabWIFIDataRateStatsTable, clabWIFINeighboringWiFiDiagnosticsState=clabWIFINeighboringWiFiDiagnosticsState, clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersValue=clabWIFIAccessPointPasspoint2NAIRealmsEapAuthParametersValue, clabWIFIRadioEnable=clabWIFIRadioEnable, clabWIFIWIFICommitSettings=clabWIFIWIFICommitSettings, clabWIFIAccessPointAccountingSecondaryServerPort=clabWIFIAccessPointAccountingSecondaryServerPort, clabWIFINeighboringWiFiDiagnosticsResultEntry=clabWIFINeighboringWiFiDiagnosticsResultEntry, clabWIFINeighboringWiFiDiagnosticsLastRunTimestamp=clabWIFINeighboringWiFiDiagnosticsLastRunTimestamp, clabWIFIAccessPointAccessControlFilterEntry=clabWIFIAccessPointAccessControlFilterEntry, clabWIFINeighboringWiFiDiagnosticsResultTable=clabWIFINeighboringWiFiDiagnosticsResultTable, clabWIFINeighboringWiFiSSID=clabWIFINeighboringWiFiSSID, clabWIFIAccessPointPasspoint2OSUProviderNamesIndex=clabWIFIAccessPointPasspoint2OSUProviderNamesIndex, clabWIFIAssociatedDeviceEntry=clabWIFIAssociatedDeviceEntry, clabWIFIRadiusClientLocationPolicy=clabWIFIRadiusClientLocationPolicy, clabWIFIAccessPointPasspointCapabilities=clabWIFIAccessPointPasspointCapabilities, clabWIFIAccessPointAC2Table=clabWIFIAccessPointAC2Table, clabWIFIAccessPointSecuritySecondaryRadiusServerPort=clabWIFIAccessPointSecuritySecondaryRadiusServerPort, clabWIFIWiFi=clabWIFIWiFi, clabWIFIAccessPointPasspointDomainNamesTable=clabWIFIAccessPointPasspointDomainNamesTable, clabWIFIAccessPointACStatsOutQLenHistogram=clabWIFIAccessPointACStatsOutQLenHistogram, clabWIFIAccessPointACStatsDiscardPacketsSent=clabWIFIAccessPointACStatsDiscardPacketsSent, clabWIFIRadioRPIHistogramRequest=clabWIFIRadioRPIHistogramRequest, clabWIFIClientStatsSNR=clabWIFIClientStatsSNR, clabWIFIRadioLongRetryLimit=clabWIFIRadioLongRetryLimit, clabWIFIAccessPointPasspointManagementFrameProtectionEnable=clabWIFIAccessPointPasspointManagementFrameProtectionEnable, clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddrType=clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddrType, clabWIFIAccessPointPasspointWANMetricsDownlinkLoad=clabWIFIAccessPointPasspointWANMetricsDownlinkLoad, clabWIFIAccessPointAC2TxOpMax=clabWIFIAccessPointAC2TxOpMax, clabWIFIAccessPointAC2AckPolicy=clabWIFIAccessPointAC2AckPolicy, clabWIFISSIDStatsPacketsSent=clabWIFISSIDStatsPacketsSent, clabWIFIRadioTransmitPowerSupported=clabWIFIRadioTransmitPowerSupported, clabWIFIAccessPointAC2StatsOutQLenHistogram=clabWIFIAccessPointAC2StatsOutQLenHistogram, clabWIFINeighboringWiFiSignalStrength=clabWIFINeighboringWiFiSignalStrength, clabWIFIAccessPointSecurityWEPKey3=clabWIFIAccessPointSecurityWEPKey3, clabWIFIPeriodicStatsDataFramesDuplicateReceived=clabWIFIPeriodicStatsDataFramesDuplicateReceived, clabWIFIRadiusClientUsageReports=clabWIFIRadiusClientUsageReports, clabWIFIAccessPointPasspointOperatorNamesEntry=clabWIFIAccessPointPasspointOperatorNamesEntry, clabWIFIRadioFrameAggregationLevel=clabWIFIRadioFrameAggregationLevel, clabWIFISSIDStatsBytesSent=clabWIFISSIDStatsBytesSent, clabWIFIAccessPointAccountingServerIPAddr=clabWIFIAccessPointAccountingServerIPAddr, clabWIFIAccessPointPasspointDGAFEnable=clabWIFIAccessPointPasspointDGAFEnable, clabWIFIRadioStatsChanUtilization=clabWIFIRadioStatsChanUtilization, clabWIFIAccessPointPasspoint2OSUTable=clabWIFIAccessPointPasspoint2OSUTable, clabWIFIAssociatedDeviceMACAddress=clabWIFIAssociatedDeviceMACAddress, clabWIFIRadioRTSThreshold=clabWIFIRadioRTSThreshold, clabWIFIRadioSupportedStandards=clabWIFIRadioSupportedStandards, clabWIFIRadioLastChange=clabWIFIRadioLastChange, clabWIFIAccessPointSecurityRekeyingInterval=clabWIFIAccessPointSecurityRekeyingInterval, clabWIFIRadiusClientGigawordReport=clabWIFIRadiusClientGigawordReport, clabWIFIAccessPointAccountingSecondarySecret=clabWIFIAccessPointAccountingSecondarySecret, clabWIFIAccessPointPasspointEntry=clabWIFIAccessPointPasspointEntry, clabWIFIAccessPointACStatsDiscardPacketsReceived=clabWIFIAccessPointACStatsDiscardPacketsReceived, clabWIFIAssociatedDeviceSecurityMode=clabWIFIAssociatedDeviceSecurityMode, clabWIFIRadiusClientAPTransitionReport=clabWIFIRadiusClientAPTransitionReport, clabWIFIRadiusClientEntry=clabWIFIRadiusClientEntry, clabWIFIDataRateStatsFramesDuplicatedReceived=clabWIFIDataRateStatsFramesDuplicatedReceived, clabWIFIRadioCarrierSenseThresholdRange=clabWIFIRadioCarrierSenseThresholdRange, clabWIFIAccessPointPasspoint2OSUProviderIconFileName=clabWIFIAccessPointPasspoint2OSUProviderIconFileName, clabWIFIRadioOperatingStandards=clabWIFIRadioOperatingStandards, clabWIFIAccessPointSecurityModeEnabled=clabWIFIAccessPointSecurityModeEnabled, clabWIFIAccessPointWPSTable=clabWIFIAccessPointWPSTable, clabWIFIAssociatedDeviceId=clabWIFIAssociatedDeviceId, clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthParmIndex=clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthParmIndex, clabWIFIRadioUpstream=clabWIFIRadioUpstream, clabWIFIRadioPreambleType=clabWIFIRadioPreambleType, clabWIFIPeriodicStatsSNR=clabWIFIPeriodicStatsSNR, PktErrorRateType=PktErrorRateType, clabWIFISSIDStatsDiscardPacketsSent=clabWIFISSIDStatsDiscardPacketsSent, clabWIFIAccessPointPasspoint2VenueName=clabWIFIAccessPointPasspoint2VenueName, clabWIFISSIDPolicyAssociationFailures=clabWIFISSIDPolicyAssociationFailures, clabWIFIAccessPointSecurityWPAEncryption=clabWIFIAccessPointSecurityWPAEncryption, clabWIFIPeriodicStatsFramesReceived=clabWIFIPeriodicStatsFramesReceived, clabWIFIRadioAutoChannelSupported=clabWIFIRadioAutoChannelSupported, clabWIFIRadioChannel=clabWIFIRadioChannel, clabWIFIClientStatsDataFramesReceived=clabWIFIClientStatsDataFramesReceived, clabWIFISSIDPolicyStatsInterval=clabWIFISSIDPolicyStatsInterval, clabWIFIClientStatsEntry=clabWIFIClientStatsEntry, clabWIFIAccessPointAC2ECWMin=clabWIFIAccessPointAC2ECWMin, clabWIFIAccessPointPasspointOSUProviderIconFileName=clabWIFIAccessPointPasspointOSUProviderIconFileName, clabWIFIAccessPointInterworkingServiceHESSID=clabWIFIAccessPointInterworkingServiceHESSID, clabWIFISSIDAlias=clabWIFISSIDAlias, clabWIFIRadioChannelWiFiDiagnosticsResultsBandwidth=clabWIFIRadioChannelWiFiDiagnosticsResultsBandwidth, clabWIFIRadioRetryLimit=clabWIFIRadioRetryLimit, clabWIFIAccessPointACStatsTable=clabWIFIAccessPointACStatsTable, clabWIFIClientStatsProbesReceived=clabWIFIClientStatsProbesReceived, clabWIFINeighboringWiFiDiagnostics=clabWIFINeighboringWiFiDiagnostics, clabWIFIAccessPointAC2StatsBytesReceived=clabWIFIAccessPointAC2StatsBytesReceived, clabWIFIRadioStatsTable=clabWIFIRadioStatsTable, clabWIFIPeriodicStatsDataFramesSentNoAck=clabWIFIPeriodicStatsDataFramesSentNoAck, clabWIFIAccessPointPasspoint2NAIRealmsEntry=clabWIFIAccessPointPasspoint2NAIRealmsEntry, clabWIFISSIDStatsAggregatedPacketCount=clabWIFISSIDStatsAggregatedPacketCount, clabWIFIAccessPointACStatsErrorsSent=clabWIFIAccessPointACStatsErrorsSent, clabWIFIAccessPointWPSSetWPSMethod=clabWIFIAccessPointWPSSetWPSMethod, clabWIFIAccessPointPasspoint2OSUProviderServiceDescEntry=clabWIFIAccessPointPasspoint2OSUProviderServiceDescEntry, clabWIFINeighboringWiFiBasicDataTransferRates=clabWIFINeighboringWiFiBasicDataTransferRates, clabWIFIClientStatsInterval=clabWIFIClientStatsInterval, clabWIFIAccessPointPasspointVenueNamesEntry=clabWIFIAccessPointPasspointVenueNamesEntry, clabWIFIAccessPointPasspoint2OSUProviderNamesLanguageCode=clabWIFIAccessPointPasspoint2OSUProviderNamesLanguageCode, clabWIFIAccessPointAccessControlFilterAccessAllow=clabWIFIAccessPointAccessControlFilterAccessAllow, clabWIFIAccessPointWPSSetWPSMethods=clabWIFIAccessPointWPSSetWPSMethods, clabWIFIRadioStatsErrorsSent=clabWIFIRadioStatsErrorsSent, clabWIFIAccessPointRadiusSettingsRadiusServerRetries=clabWIFIAccessPointRadiusSettingsRadiusServerRetries, clabWIFICommitSettings=clabWIFICommitSettings, clabWIFIAccessPointInterworkingServiceVenueTypeCode=clabWIFIAccessPointInterworkingServiceVenueTypeCode, clabWIFIRadioPktErrorRateSTA=clabWIFIRadioPktErrorRateSTA, clabWIFIAccessPointPasspointNAIRealmsEapMethodsAuthParmIndex=clabWIFIAccessPointPasspointNAIRealmsEapMethodsAuthParmIndex, clabWIFIRadioSupportedDataTransmitRates=clabWIFIRadioSupportedDataTransmitRates, clabWIFIAccessPointPasspointDomainNamesDomainName=clabWIFIAccessPointPasspointDomainNamesDomainName, clabWIFINotifications=clabWIFINotifications, clabWIFIAccessPointPasspointOperatorNameIndex=clabWIFIAccessPointPasspointOperatorNameIndex, clabWIFIRadioLowerLayers=clabWIFIRadioLowerLayers, clabWIFIAccessPointPasspointSupported=clabWIFIAccessPointPasspointSupported, clabWIFISSIDPolicyAuthenticationFailures=clabWIFISSIDPolicyAuthenticationFailures, clabWIFIAccessPointPasspointOSUProviderServiceDescIndex=clabWIFIAccessPointPasspointOSUProviderServiceDescIndex, clabWIFIAccessPointSecurityModesSupported=clabWIFIAccessPointSecurityModesSupported, clabWIFISSIDPolicySNRThreshold=clabWIFISSIDPolicySNRThreshold, clabWIFIAssociatedDeviceMaxPacketRetryCount=clabWIFIAssociatedDeviceMaxPacketRetryCount, clabWIFIAccessPointAC2StatsRetransCount=clabWIFIAccessPointAC2StatsRetransCount, clabWIFISSIDPolicyBlockAfterAttempts=clabWIFISSIDPolicyBlockAfterAttempts, clabWIFIAccessPointACECWMin=clabWIFIAccessPointACECWMin, clabWIFIAssociatedDeviceEncryptionAlgorithm=clabWIFIAssociatedDeviceEncryptionAlgorithm, clabWIFISSIDPolicyLowPowerDisassociationThreshold=clabWIFISSIDPolicyLowPowerDisassociationThreshold, clabWIFIAccessPointEnable=clabWIFIAccessPointEnable, clabWIFIRadioAlias=clabWIFIRadioAlias, clabWIFIAccessPointRetryLimit=clabWIFIAccessPointRetryLimit, clabWIFIRadioStatsDiscardPacketsReceived=clabWIFIRadioStatsDiscardPacketsReceived, clabWIFIAccessPointRadiusSettingsObjects=clabWIFIAccessPointRadiusSettingsObjects, clabWIFIRadioGuardInterval=clabWIFIRadioGuardInterval, clabWIFIMibCompliances=clabWIFIMibCompliances, clabWIFIAccessPointPasspointDomainNamesEntry=clabWIFIAccessPointPasspointDomainNamesEntry, clabWIFIAccessPointAlias=clabWIFIAccessPointAlias, clabWIFIRadioStatsPacketsOtherReceived=clabWIFIRadioStatsPacketsOtherReceived, clabWIFIAccessPointWPSRowStatus=clabWIFIAccessPointWPSRowStatus, clabWIFIClientStatsRSSI=clabWIFIClientStatsRSSI, clabWIFISSIDStatsBroadcastPacketsReceived=clabWIFISSIDStatsBroadcastPacketsReceived, clabWIFIRadioStatsErrorsReceived=clabWIFIRadioStatsErrorsReceived, clabWIFIAccessPointRadiusSettingsIdentityRequestRetryInterval=clabWIFIAccessPointRadiusSettingsIdentityRequestRetryInterval, clabWIFIClientSessionsTable=clabWIFIClientSessionsTable, clabWIFIAccessPointPasspointConsortiumEntry=clabWIFIAccessPointPasspointConsortiumEntry, clabWIFINeighboringWiFiDiagnosticsResultNumberOfEntries=clabWIFINeighboringWiFiDiagnosticsResultNumberOfEntries, clabWIFIRadioChannelWiFiDiagnosticsResultsTable=clabWIFIRadioChannelWiFiDiagnosticsResultsTable, clabWIFIAccessPointRadiusSettingsPMKCachingInterval=clabWIFIAccessPointRadiusSettingsPMKCachingInterval, clabWIFIRadioChannelsInUse=clabWIFIRadioChannelsInUse, clabWIFIAccessPointPasspointASRAEnable=clabWIFIAccessPointPasspointASRAEnable, clabWIFIAccessPointPasspointNAIRealmsEncodingType=clabWIFIAccessPointPasspointNAIRealmsEncodingType, clabWIFIDataRateStatsFramesSent=clabWIFIDataRateStatsFramesSent, clabWIFIWiFiAccessPointNumberOfEntries=clabWIFIWiFiAccessPointNumberOfEntries, clabWIFINeighboringWiFiDiagnosticsMode=clabWIFINeighboringWiFiDiagnosticsMode, clabWIFISSIDLowerLayers=clabWIFISSIDLowerLayers, clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthTable=clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthTable, clabWIFIPeriodicStatsLastTimeAssociation=clabWIFIPeriodicStatsLastTimeAssociation, clabWIFIAccessPointPasspointOnlineSignupSupported=clabWIFIAccessPointPasspointOnlineSignupSupported, clabWIFIAccessPointACAccessCategory=clabWIFIAccessPointACAccessCategory, clabWIFIAccessPointPasspointThreeGPPNetworkMNC=clabWIFIAccessPointPasspointThreeGPPNetworkMNC, clabWIFIRadioCCAReport=clabWIFIRadioCCAReport, clabWIFIClientStatsProbesRejected=clabWIFIClientStatsProbesRejected, clabWIFIRadiusClientTable=clabWIFIRadiusClientTable, clabWIFIAccessPointPasspoint=clabWIFIAccessPointPasspoint, clabWIFIAccessPointAC2AccessCategory=clabWIFIAccessPointAC2AccessCategory, clabWIFIAccessPointAssociatedDeviceNumberOfEntries=clabWIFIAccessPointAssociatedDeviceNumberOfEntries, clabWIFIPeriodicStatsInterval=clabWIFIPeriodicStatsInterval, clabWIFISSIDPolicyBeaconMcsLevelInUse=clabWIFISSIDPolicyBeaconMcsLevelInUse, clabWIFISSIDStatsACKFailureCount=clabWIFISSIDStatsACKFailureCount, clabWIFIAssociatedDeviceRetransmissions=clabWIFIAssociatedDeviceRetransmissions, clabWIFINeighboringWiFiDiagnosticsTableMaxNumberOfEntries=clabWIFINeighboringWiFiDiagnosticsTableMaxNumberOfEntries, clabWIFIAccessPointSecurityWEPKey4=clabWIFIAccessPointSecurityWEPKey4, clabWIFIAccessPointPasspointOSUProviderIconType=clabWIFIAccessPointPasspointOSUProviderIconType, clabWIFIWIFIEventNotif=clabWIFIWIFIEventNotif, clabWIFIAccessPointAccountingServerPort=clabWIFIAccessPointAccountingServerPort, clabWIFIAccessPointPasspoint2OSUProviderIconsEntry=clabWIFIAccessPointPasspoint2OSUProviderIconsEntry, clabWIFIAccessPointAccountingInterimInterval=clabWIFIAccessPointAccountingInterimInterval, clabWIFIRadioBeaconPeriod=clabWIFIRadioBeaconPeriod, clabWIFIDataRateStatsEntry=clabWIFIDataRateStatsEntry, clabWIFIAccessPointPasspoint2VenueNamesEntry=clabWIFIAccessPointPasspoint2VenueNamesEntry, clabWIFIAccessPointRadiusSettingsPMKLifetime=clabWIFIAccessPointRadiusSettingsPMKLifetime, clabWIFIAccessPointPasspointConsortiumTable=clabWIFIAccessPointPasspointConsortiumTable, clabWIFISSIDStatsRetransCount=clabWIFISSIDStatsRetransCount, clabWIFIRadioStatsPLCPErrorCount=clabWIFIRadioStatsPLCPErrorCount, clabWIFIDataRateStatsFramesReceived=clabWIFIDataRateStatsFramesReceived, clabWIFIClientStatsDataFramesDuplicateReceived=clabWIFIClientStatsDataFramesDuplicateReceived, clabWIFIAccessPointPasspointVenueName=clabWIFIAccessPointPasspointVenueName, clabWIFIAccessPointRadiusSettingsMaxAuthenticationAttempts=clabWIFIAccessPointRadiusSettingsMaxAuthenticationAttempts, clabWIFIAccessPointPasspoint2OSUProviderNamesFriendlyName=clabWIFIAccessPointPasspoint2OSUProviderNamesFriendlyName, clabWIFIClientStatsId=clabWIFIClientStatsId, clabWIFIAccessPointPasspoint2VenueNameIndex=clabWIFIAccessPointPasspoint2VenueNameIndex, clabWIFINeighboringWiFiDiagnosticsResultIndex=clabWIFINeighboringWiFiDiagnosticsResultIndex, clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsTable=clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsTable, clabWIFIAccessPointACAckPolicy=clabWIFIAccessPointACAckPolicy, clabWIFIAccessPointWPSConfigMethodsSupported=clabWIFIAccessPointWPSConfigMethodsSupported, clabWIFIAccessPointWMMCapability=clabWIFIAccessPointWMMCapability, clabWIFISSIDPeriodicStatsNumberOfEntries=clabWIFISSIDPeriodicStatsNumberOfEntries, clabWIFIAssociatedDeviceTable=clabWIFIAssociatedDeviceTable, clabWIFIAccessPointACOutQLenHistogramSampleInterval=clabWIFIAccessPointACOutQLenHistogramSampleInterval, clabWIFIAccessPointSecurityLanRoutingEnabled=clabWIFIAccessPointSecurityLanRoutingEnabled, clabWIFINeighboringWiFiDiagnosticsTableClear=clabWIFINeighboringWiFiDiagnosticsTableClear, clabWIFIAccessPointAC2StatsIndex=clabWIFIAccessPointAC2StatsIndex, clabWIFISSIDStatsBroadcastPacketsSent=clabWIFISSIDStatsBroadcastPacketsSent, clabWIFIAssociatedDeviceMaxNumOfStations=clabWIFIAssociatedDeviceMaxNumOfStations, clabWIFIAccessPointPasspoint2OSUProviderServiceDescTable=clabWIFIAccessPointPasspoint2OSUProviderServiceDescTable, clabWIFIAccessPointUAPSDCapability=clabWIFIAccessPointUAPSDCapability, clabWIFIAssociatedDeviceActive=clabWIFIAssociatedDeviceActive, clabWIFISSIDStatsPacketsReceived=clabWIFISSIDStatsPacketsReceived)
mibBuilder.exportSymbols("CLAB-WIFI-MIB", clabWIFIAccessPointSecurityWEPKey=clabWIFIAccessPointSecurityWEPKey, clabWIFIAssociatedDeviceLastDataUplinkRate=clabWIFIAssociatedDeviceLastDataUplinkRate, clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddr=clabWIFIAccessPointSecuritySecondaryRadiusServerIPAddr, clabWIFIRadioStatus=clabWIFIRadioStatus, clabWIFIAccessPointUAPSDEnable=clabWIFIAccessPointUAPSDEnable, clabWIFIRadioPossibleChannels=clabWIFIRadioPossibleChannels, clabWIFIRadioSupportedFrequencyBands=clabWIFIRadioSupportedFrequencyBands, clabWIFIRadioStatsBytesReceived=clabWIFIRadioStatsBytesReceived, clabWIFIAccessPointACStatsBytesReceived=clabWIFIAccessPointACStatsBytesReceived, clabWIFINeighboringWiFiBeaconPeriod=clabWIFINeighboringWiFiBeaconPeriod, clabWIFIWIFICommitSettingsValue=clabWIFIWIFICommitSettingsValue, clabWIFIRadioStatsFramesDuplicatedReceived=clabWIFIRadioStatsFramesDuplicatedReceived, clabWIFIGroup=clabWIFIGroup, clabWIFIAccessPointWPSSetWPSClientPin=clabWIFIAccessPointWPSSetWPSClientPin, clabWIFISSIDId=clabWIFISSIDId, clabWIFIAccessPointSecurityWEPKey2=clabWIFIAccessPointSecurityWEPKey2, clabWIFIAccessPointClearAccessControlFilterTable=clabWIFIAccessPointClearAccessControlFilterTable, clabWIFIAccessPointAccountingEntry=clabWIFIAccessPointAccountingEntry, clabWIFINeighboringWiFiBSSID=clabWIFINeighboringWiFiBSSID, clabWIFIAccessPointPasspoint2OSUProviderNamesEntry=clabWIFIAccessPointPasspoint2OSUProviderNamesEntry, clabWIFIAccessPointSecurityReset=clabWIFIAccessPointSecurityReset, clabWIFIRadioAutoChannelRefreshPeriod=clabWIFIRadioAutoChannelRefreshPeriod, clabWIFIAccessPointPasspoint2NAIRealmsEapMethod=clabWIFIAccessPointPasspoint2NAIRealmsEapMethod, clabWIFIAccessPointPasspointOSUProviderIconWidth=clabWIFIAccessPointPasspointOSUProviderIconWidth, clabWIFIAccessPointRadiusSettingsQuietPeriodAfterFailedAuth=clabWIFIAccessPointRadiusSettingsQuietPeriodAfterFailedAuth, clabWIFIAccessPointAC2StatsBytesSent=clabWIFIAccessPointAC2StatsBytesSent, clabWIFIRadioCarrierSenseThresholdInUse=clabWIFIRadioCarrierSenseThresholdInUse, clabWIFINeighboringWiFiMode=clabWIFINeighboringWiFiMode, clabWIFISSIDStatsMulticastPacketsSent=clabWIFISSIDStatsMulticastPacketsSent, clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthEntry=clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsAuthEntry, clabWIFIRadioCarrierSenseThresholdRangeMin=clabWIFIRadioCarrierSenseThresholdRangeMin, clabWIFINeighboringWiFiNoise=clabWIFINeighboringWiFiNoise, clabWIFIAccessPointPasspointANQPDomainID=clabWIFIAccessPointPasspointANQPDomainID, clabWIFIAccessPointACStatsEntry=clabWIFIAccessPointACStatsEntry, clabWIFIAccessPointPublicAccessMode=clabWIFIAccessPointPublicAccessMode, clabWIFIRadiusClientLocationInformation=clabWIFIRadiusClientLocationInformation, clabWIFIRadioExtensionChannel=clabWIFIRadioExtensionChannel, clabWIFIRadioChannelWiFiDiagnostics=clabWIFIRadioChannelWiFiDiagnostics, clabWIFIAccessPointPasspoint2NAIRealms=clabWIFIAccessPointPasspoint2NAIRealms, clabWIFIClientStatsLastTimeDisassociation=clabWIFIClientStatsLastTimeDisassociation, clabWIFIClientSessionsId=clabWIFIClientSessionsId, clabWIFIAccessPointPasspointConsortiumIndex=clabWIFIAccessPointPasspointConsortiumIndex, clabWIFIRadioStatsChannelUtilization=clabWIFIRadioStatsChannelUtilization, clabWIFIRadioStatsInvalidMACCount=clabWIFIRadioStatsInvalidMACCount, clabWIFIAccessPointSecurityWEPIndex=clabWIFIAccessPointSecurityWEPIndex, clabWIFIClientStatsThroughput=clabWIFIClientStatsThroughput, clabWIFIAccessPointPasspoint2OSUProviderMethodsList=clabWIFIAccessPointPasspoint2OSUProviderMethodsList, clabWIFIRadioStatsBytesSent=clabWIFIRadioStatsBytesSent, clabWIFISSIDMACAddress=clabWIFISSIDMACAddress, clabWIFIRadioChannelWiFiDiagnosticsResultsEntry=clabWIFIRadioChannelWiFiDiagnosticsResultsEntry, clabWIFIPeriodicStatsDataFramesSentAck=clabWIFIPeriodicStatsDataFramesSentAck, clabWIFIRadioStatsEntry=clabWIFIRadioStatsEntry, clabWIFIAccessPointAC2ECWMax=clabWIFIAccessPointAC2ECWMax, clabWIFISSIDPolicyNonAuthenticatedTraffic=clabWIFISSIDPolicyNonAuthenticatedTraffic, clabWIFISSIDLastChange=clabWIFISSIDLastChange, clabWIFIPeriodicStatsFramesSent=clabWIFIPeriodicStatsFramesSent, clabWIFIAccessPointStatus=clabWIFIAccessPointStatus, clabWIFIRadioOperationalDataTransmitRates=clabWIFIRadioOperationalDataTransmitRates, clabWIFIMibConformance=clabWIFIMibConformance, clabWIFIPeriodicStatsId=clabWIFIPeriodicStatsId, clabWIFIAccessPointACECWMax=clabWIFIAccessPointACECWMax, clabWIFINotificationsGroup=clabWIFINotificationsGroup, clabWIFIRadioNonContiguousChannel=clabWIFIRadioNonContiguousChannel, clabWIFISSIDTable=clabWIFISSIDTable, clabWIFIAccessPointPasspointOperatorNamesTable=clabWIFIAccessPointPasspointOperatorNamesTable, clabWIFIAccessPointSecurityRadiusSecret=clabWIFIAccessPointSecurityRadiusSecret, clabWIFIAccessPointAllowedMACAddress=clabWIFIAccessPointAllowedMACAddress, clabWIFIAccessPointPasspointOSUProviderIndex=clabWIFIAccessPointPasspointOSUProviderIndex, clabWIFIWIFIEventNotifText=clabWIFIWIFIEventNotifText, clabWIFIAccessPointPasspointOperatorName=clabWIFIAccessPointPasspointOperatorName, clabWIFISSIDStatsUnknownProtoPacketsReceived=clabWIFISSIDStatsUnknownProtoPacketsReceived, clabWIFIAccessPointPasspointP2PEnable=clabWIFIAccessPointPasspointP2PEnable, clabWIFIAccessPointTable=clabWIFIAccessPointTable, clabWIFIAssociatedDeviceAssociationState=clabWIFIAssociatedDeviceAssociationState, clabWIFIAccessPointSSIDAdvertisementEnabled=clabWIFIAccessPointSSIDAdvertisementEnabled, clabWIFIRadioChannelWiFiDiagnosticsResultNumberOfEntries=clabWIFIRadioChannelWiFiDiagnosticsResultNumberOfEntries, clabWIFIAccessPointAccountingTable=clabWIFIAccessPointAccountingTable, clabWIFIRadioChannelWiFiDiagnosticsLastRunTimestamp=clabWIFIRadioChannelWiFiDiagnosticsLastRunTimestamp, clabWIFIAccessPointSecurityEnableManagementFrameProtection=clabWIFIAccessPointSecurityEnableManagementFrameProtection, clabWIFIPeriodicStatsAuthenticationFailures=clabWIFIPeriodicStatsAuthenticationFailures, clabWIFISSIDPolicyBeaconMcsLevelsSupported=clabWIFISSIDPolicyBeaconMcsLevelsSupported, clabWIFISSIDStatsErrorsSent=clabWIFISSIDStatsErrorsSent, clabWIFISSIDStatsErrorsReceived=clabWIFISSIDStatsErrorsReceived, clabWIFIDataRateStatsRate=clabWIFIDataRateStatsRate, clabWIFISSIDStatsEntry=clabWIFISSIDStatsEntry, clabWIFIAccessPointAC2StatsTable=clabWIFIAccessPointAC2StatsTable, clabWIFIAccessPointRadiusSettingsRadiusServerRequestTimeout=clabWIFIAccessPointRadiusSettingsRadiusServerRequestTimeout, clabWIFIAccessPointPasspointNAIRealmsIndex=clabWIFIAccessPointPasspointNAIRealmsIndex, clabWIFIClientStatsDataFramesLost=clabWIFIClientStatsDataFramesLost, clabWIFIAccessPointAccessControlFilterMACAddress=clabWIFIAccessPointAccessControlFilterMACAddress, clabWIFIAccessPointPasspointOSUEntry=clabWIFIAccessPointPasspointOSUEntry, clabWIFIAccessPointPasspointEnabled=clabWIFIAccessPointPasspointEnabled, clabWIFIAccessPointPasspointOSUProviderIconHeight=clabWIFIAccessPointPasspointOSUProviderIconHeight, clabWIFIAccessPointAccountingRowStatus=clabWIFIAccessPointAccountingRowStatus, clabWIFIAccessPointPasspoint2VenueNamesTable=clabWIFIAccessPointPasspoint2VenueNamesTable, clabWIFIRadioRegulatoryDomain=clabWIFIRadioRegulatoryDomain, clabWIFIRadioChannelWiFiDiagnosticsResultsAvailableCapacity=clabWIFIRadioChannelWiFiDiagnosticsResultsAvailableCapacity, clabWIFIAccessPointPasspointWANMetricsUplinkLoad=clabWIFIAccessPointPasspointWANMetricsUplinkLoad, clabWIFIClientSessionsDeviceMACAddress=clabWIFIClientSessionsDeviceMACAddress, clabWIFIAccessPointPasspointWANMetricsLinkStatus=clabWIFIAccessPointPasspointWANMetricsLinkStatus, clabWIFIAccessPointAccountingSecondaryServerIPAddr=clabWIFIAccessPointAccountingSecondaryServerIPAddr, clabWIFIPeriodicStatsEntry=clabWIFIPeriodicStatsEntry, clabWIFIAccessPointACStatsErrorsReceived=clabWIFIAccessPointACStatsErrorsReceived, clabWIFIAccessPointPasspoint2OSUProviderIconType=clabWIFIAccessPointPasspoint2OSUProviderIconType, clabWIFIAccessPointPasspointVenueNameIndex=clabWIFIAccessPointPasspointVenueNameIndex, clabWIFISSIDSSID=clabWIFISSIDSSID, clabWIFIApNeighborStatsSSID=clabWIFIApNeighborStatsSSID, clabWIFIAccessPointRowStatus=clabWIFIAccessPointRowStatus, clabWIFIAccessPointAccessControlFilterIndex=clabWIFIAccessPointAccessControlFilterIndex, clabWIFIAccessPointInterworkingServiceInternet=clabWIFIAccessPointInterworkingServiceInternet, clabWIFIAccessPointAC2StatsDiscardPacketsSent=clabWIFIAccessPointAC2StatsDiscardPacketsSent, clabWIFIRadioTable=clabWIFIRadioTable, clabWIFIAccessPointPasspointDomainNamesIndex=clabWIFIAccessPointPasspointDomainNamesIndex, clabWIFIAccessPointPasspointOSUProviderMethodsList=clabWIFIAccessPointPasspointOSUProviderMethodsList, clabWIFINeighboringWiFiOperatingFrequencyBand=clabWIFINeighboringWiFiOperatingFrequencyBand, clabWIFISSIDRowStatus=clabWIFISSIDRowStatus, clabWIFIAccessPointPasspoint2OSUProviderServerURI=clabWIFIAccessPointPasspoint2OSUProviderServerURI, clabWIFIRadioStatsNoise=clabWIFIRadioStatsNoise, clabWIFIAccessPointAccountingSecret=clabWIFIAccessPointAccountingSecret, clabWIFIAccessPointPasspoint2VenueNameCountryCode=clabWIFIAccessPointPasspoint2VenueNameCountryCode, clabWIFIAccessPointSecurityWEPPassPhrase=clabWIFIAccessPointSecurityWEPPassPhrase, clabWIFIAccessPointPasspointNAIRealmsEapMethod=clabWIFIAccessPointPasspointNAIRealmsEapMethod, clabWIFISSIDStatsRetryCount=clabWIFISSIDStatsRetryCount, clabWIFIApNeighborStatsEntry=clabWIFIApNeighborStatsEntry, clabWIFIClientStatsTable=clabWIFIClientStatsTable, clabWIFIRadioFragmentationThreshold=clabWIFIRadioFragmentationThreshold, clabWIFIClientStatsAuthenticationFailures=clabWIFIClientStatsAuthenticationFailures, clabWIFIAccessPointAccessControlFilterTable=clabWIFIAccessPointAccessControlFilterTable, clabWIFIPeriodicStatsTable=clabWIFIPeriodicStatsTable, clabWIFIAccessPointAC2StatsErrorsReceived=clabWIFIAccessPointAC2StatsErrorsReceived, clabWIFIClientStatsDataFramesSentNoAck=clabWIFIClientStatsDataFramesSentNoAck, clabWIFISSIDStatsDiscardPacketsReceived=clabWIFISSIDStatsDiscardPacketsReceived, clabWIFIApNeighborStatsCurrentChannel=clabWIFIApNeighborStatsCurrentChannel, clabWIFIAccessPointPasspointOSUProviderNamesLanguageCode=clabWIFIAccessPointPasspointOSUProviderNamesLanguageCode, clabWIFIAccessPointACOutQLenHistogramIntervals=clabWIFIAccessPointACOutQLenHistogramIntervals, clabWIFIAccessPointAccountingSecondaryServerIPAddrType=clabWIFIAccessPointAccountingSecondaryServerIPAddrType, clabWIFIWIFIEventNotifTimeStamp=clabWIFIWIFIEventNotifTimeStamp, clabWIFIRadioMaxBitRate=clabWIFIRadioMaxBitRate, clabWIFIAccessPointPasspointThreeGPPNetworkMCC=clabWIFIAccessPointPasspointThreeGPPNetworkMCC, clabWIFIAccessPointAC2Index=clabWIFIAccessPointAC2Index, clabWIFIAccessPointPasspointNAIRealmsTable=clabWIFIAccessPointPasspointNAIRealmsTable, clabWIFIRadioTransmitPower=clabWIFIRadioTransmitPower, clabWIFIAccessPointACTxOpMax=clabWIFIAccessPointACTxOpMax, clabWIFIAccessPointACStatsBytesSent=clabWIFIAccessPointACStatsBytesSent, clabWIFIAccessPointInterworkingServiceTable=clabWIFIAccessPointInterworkingServiceTable, clabWIFINeighboringWiFiSupportedStandards=clabWIFINeighboringWiFiSupportedStandards, clabWIFIAccessPointAccessControlFilter=clabWIFIAccessPointAccessControlFilter, clabWIFIRadioMCS=clabWIFIRadioMCS, clabWIFISSIDName=clabWIFISSIDName, clabWIFIAccessPointAC2OutQLenHistogramIntervals=clabWIFIAccessPointAC2OutQLenHistogramIntervals, clabWIFIAccessPointPasspoint2OSUProviderServiceDescription=clabWIFIAccessPointPasspoint2OSUProviderServiceDescription, clabWIFIObjects=clabWIFIObjects, clabWIFIAccessPointWPSConfigMethodsEnabled=clabWIFIAccessPointWPSConfigMethodsEnabled, clabWIFIAccessPointAC2Entry=clabWIFIAccessPointAC2Entry, clabWIFIWiFiEndPointNumberOfEntries=clabWIFIWiFiEndPointNumberOfEntries, clabWIFIRadiusClientNASIdentifier=clabWIFIRadiusClientNASIdentifier, clabWIFISSIDStatsMulticastPacketsReceived=clabWIFISSIDStatsMulticastPacketsReceived, clabWIFIAccessPointPasspointOSUProviderIconsIndex=clabWIFIAccessPointPasspointOSUProviderIconsIndex, clabWIFISSIDPolicyLowReceivedPowerThreshold=clabWIFISSIDPolicyLowReceivedPowerThreshold, clabWIFIAccessPointPasspointOSUProviderNamesIndex=clabWIFIAccessPointPasspointOSUProviderNamesIndex, clabWIFIAccessPointAccountingEnable=clabWIFIAccessPointAccountingEnable, clabWIFIRadioBasicDataTransmitRates=clabWIFIRadioBasicDataTransmitRates, clabWIFIAccessPointEntry=clabWIFIAccessPointEntry, clabWIFIRadioStatsFramesRetransmissionsSent=clabWIFIRadioStatsFramesRetransmissionsSent, clabWIFIAccessPointPasspoint2OSUProviderNamesTable=clabWIFIAccessPointPasspoint2OSUProviderNamesTable, clabWIFIAccessPointAC2AIFSN=clabWIFIAccessPointAC2AIFSN, clabWIFIAssociatedDeviceLastDataDownlinkRate=clabWIFIAssociatedDeviceLastDataDownlinkRate, clabWIFIRadioDTIMPeriod=clabWIFIRadioDTIMPeriod, clabWIFIAccessPointPasspointVenueNamesTable=clabWIFIAccessPointPasspointVenueNamesTable, clabWIFIAccessPointWPSAPPin=clabWIFIAccessPointWPSAPPin, clabWIFIPeriodicStatsProbesReceived=clabWIFIPeriodicStatsProbesReceived, clabWIFIClientSessionsTerminationMeaning=clabWIFIClientSessionsTerminationMeaning, clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersID=clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersID, clabWIFIAccessPointAC2StatsDiscardPacketsReceived=clabWIFIAccessPointAC2StatsDiscardPacketsReceived, clabWIFIAccessPointPasspoint2OSUProviderIconWidth=clabWIFIAccessPointPasspoint2OSUProviderIconWidth, clabWIFIAccessPointPasspoint2OSUProviderServiceDescIndex=clabWIFIAccessPointPasspoint2OSUProviderServiceDescIndex, clabWIFIAccessPointPasspoint2NAIRealmsEncodingType=clabWIFIAccessPointPasspoint2NAIRealmsEncodingType, clabWIFIAccessPointAccountingServerIPAddrType=clabWIFIAccessPointAccountingServerIPAddrType, clabWIFIAccessPointPasspointThreeGPPNetworkIndex=clabWIFIAccessPointPasspointThreeGPPNetworkIndex, clabWIFIAccessPointSecurityEntry=clabWIFIAccessPointSecurityEntry, clabWIFIAccessPointSecuritySecondaryRadiusSecret=clabWIFIAccessPointSecuritySecondaryRadiusSecret, clabWIFINeighboringWiFiDiagnosticsInterval=clabWIFINeighboringWiFiDiagnosticsInterval, clabWIFINeighboringWiFiSupportedDataTransferRates=clabWIFINeighboringWiFiSupportedDataTransferRates, clabWIFIApNeighborStatsTable=clabWIFIApNeighborStatsTable, clabWIFIRadioOperatingChannelBandwidth=clabWIFIRadioOperatingChannelBandwidth, clabWIFIAccessPointMaxAssociatedDevices=clabWIFIAccessPointMaxAssociatedDevices, clabWIFIAccessPointInterworkingServiceEntry=clabWIFIAccessPointInterworkingServiceEntry, clabDeprecatedObjectsGroup=clabDeprecatedObjectsGroup, clabWIFIAccessPointWPSEnable=clabWIFIAccessPointWPSEnable, clabWIFINeighboringWiFiOperatingChannelBandwidth=clabWIFINeighboringWiFiOperatingChannelBandwidth, clabWIFIPeriodicStatsRSSI=clabWIFIPeriodicStatsRSSI, clabWIFIPeriodicStatsLastTimeDisassociation=clabWIFIPeriodicStatsLastTimeDisassociation, clabWIFIAccessPointWPSEntry=clabWIFIAccessPointWPSEntry, clabWIFIAccessPointPasspoint2OSUProviderServiceDescLanguageCode=clabWIFIAccessPointPasspoint2OSUProviderServiceDescLanguageCode, clabWIFIPeriodicStatsProbesRejected=clabWIFIPeriodicStatsProbesRejected, clabWIFIRadioChannelWiFiDiagnosticsResultsFrequencyBand=clabWIFIRadioChannelWiFiDiagnosticsResultsFrequencyBand, clabWIFISSIDStatsBytesReceived=clabWIFISSIDStatsBytesReceived, clabWIFIAccessPointPasspointQoSMappingEnable=clabWIFIAccessPointPasspointQoSMappingEnable, clabWIFIRadiusClientOperatorName=clabWIFIRadiusClientOperatorName, clabWIFIClientStatsFramesSent=clabWIFIClientStatsFramesSent, clabWIFIRadioRPIHistogramReport=clabWIFIRadioRPIHistogramReport, clabWIFIAccessPointPasspoint2OSUProviderNAI=clabWIFIAccessPointPasspoint2OSUProviderNAI, clabWIFIMib=clabWIFIMib, clabWIFIAccessPointPasspointWANMetricsAtCapacity=clabWIFIAccessPointPasspointWANMetricsAtCapacity, clabWIFIRadioId=clabWIFIRadioId, clabWIFIWIFIEventNotifgroup=clabWIFIWIFIEventNotifgroup, clabWIFIAssociatedDeviceAuthenticationState=clabWIFIAssociatedDeviceAuthenticationState, clabWIFIAccessPointSecurityRadiusServerPort=clabWIFIAccessPointSecurityRadiusServerPort, clabWIFIAccessPointACAlias=clabWIFIAccessPointACAlias, clabWIFIAccessPointSecurityPreSharedKey=clabWIFIAccessPointSecurityPreSharedKey, clabWIFIAccessPointRadiusSettingsPMKCachingEnable=clabWIFIAccessPointRadiusSettingsPMKCachingEnable, clabWIFIAccessPointPasspointOSUTable=clabWIFIAccessPointPasspointOSUTable, clabWIFIClientStatsDeviceMACAddress=clabWIFIClientStatsDeviceMACAddress, clabWIFINeighboringWiFiChannel=clabWIFINeighboringWiFiChannel, clabWIFIAccessPointWPSConfigMethodsEnable=clabWIFIAccessPointWPSConfigMethodsEnable, clabWIFIRadioIEEE80211hEnabled=clabWIFIRadioIEEE80211hEnabled, clabWIFISSIDEnable=clabWIFISSIDEnable, clabWIFIAccessPointPasspointEAPMethod=clabWIFIAccessPointPasspointEAPMethod, clabWIFIPeriodicStatsDisassociations=clabWIFIPeriodicStatsDisassociations, clabWIFIAccessPointId=clabWIFIAccessPointId, clabWIFIRadioStatsDiscardPacketsSent=clabWIFIRadioStatsDiscardPacketsSent, clabWIFIAccessPointPasspoint2OSUProviderIconsIndex=clabWIFIAccessPointPasspoint2OSUProviderIconsIndex, clabWIFISSIDStatsTable=clabWIFISSIDStatsTable, clabWIFINeighboringWiFiOperatingStandards=clabWIFINeighboringWiFiOperatingStandards, PYSNMP_MODULE_ID=clabWIFIMib, clabWIFIAccessPointInterworkingServiceEnabled=clabWIFIAccessPointInterworkingServiceEnabled, clabWIFIAccessPointInterworkingServiceAccessNetworkType=clabWIFIAccessPointInterworkingServiceAccessNetworkType, clabWIFIRadiusClientIntervalInterimReport=clabWIFIRadiusClientIntervalInterimReport, clabWIFIWIFIEventNotifEventId=clabWIFIWIFIEventNotifEventId, clabWIFIWiFiSSIDNumberOfEntries=clabWIFIWiFiSSIDNumberOfEntries, clabWIFIAccessPointPasspointThreeGPPNetworkEntry=clabWIFIAccessPointPasspointThreeGPPNetworkEntry, clabWIFIRadioRtsCtsExchange=clabWIFIRadioRtsCtsExchange, clabWIFICompliance=clabWIFICompliance, clabWIFIRadioEntry=clabWIFIRadioEntry, clabWIFIClientSessionsTerminationCode=clabWIFIClientSessionsTerminationCode, clabWIFIAccessPointClientSessionNumberOfEntries=clabWIFIAccessPointClientSessionNumberOfEntries, clabWIFIClientStatsFramesReceived=clabWIFIClientStatsFramesReceived, clabWIFISSIDPolicyLowPowerDeniedAccessThreshold=clabWIFISSIDPolicyLowPowerDeniedAccessThreshold, clabWIFIClientStatsDisassociations=clabWIFIClientStatsDisassociations, clabWIFIApNeighborStatsRSSI=clabWIFIApNeighborStatsRSSI, clabWIFIAccessPointPasspointConsortiumOI=clabWIFIAccessPointPasspointConsortiumOI, clabWIFIAccessPointPasspoint2OSUProviderIconsTable=clabWIFIAccessPointPasspoint2OSUProviderIconsTable, clabWIFIAccessPointPasspoint2OSUProviderIconLanguageCode=clabWIFIAccessPointPasspoint2OSUProviderIconLanguageCode, clabWIFIAccessPointPasspointOSUProviderServiceDescLanguageCode=clabWIFIAccessPointPasspointOSUProviderServiceDescLanguageCode, clabWIFINeighboringWiFiDiagnosticsNonContiguousChannel=clabWIFINeighboringWiFiDiagnosticsNonContiguousChannel, clabWIFIAccessPointPasspointOSUProviderIconLanguageCode=clabWIFIAccessPointPasspointOSUProviderIconLanguageCode, clabWIFIAccessPointPasspoint2NAIRealmsIndex=clabWIFIAccessPointPasspoint2NAIRealmsIndex, clabWIFIClientStatsPktErrorRatePerSTA=clabWIFIClientStatsPktErrorRatePerSTA, clabWIFIAccessPointMACAddressControlEnable=clabWIFIAccessPointMACAddressControlEnable, clabWIFIRadioIEEE80211hSupported=clabWIFIRadioIEEE80211hSupported, clabWIFIAccessPointSecurityRadiusServerIPAddrType=clabWIFIAccessPointSecurityRadiusServerIPAddrType, clabWIFISSIDEntry=clabWIFISSIDEntry, clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersValue=clabWIFIAccessPointPasspointNAIRealmsEapAuthParametersValue, clabWIFIRadioStatsPacketsSent=clabWIFIRadioStatsPacketsSent)
mibBuilder.exportSymbols("CLAB-WIFI-MIB", clabWIFIRadiusClientRowStatus=clabWIFIRadiusClientRowStatus, clabWIFIAccessPointACTable=clabWIFIAccessPointACTable, clabWIFISSIDPolicyRowStatus=clabWIFISSIDPolicyRowStatus, clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsEntry=clabWIFIAccessPointPasspoint2NAIRealmsEapMethodsEntry, clabWIFIAccessPointPasspointWANMetricsUplinkSpeed=clabWIFIAccessPointPasspointWANMetricsUplinkSpeed, clabWIFIClientSessionsStart=clabWIFIClientSessionsStart, clabWIFIClientStatsDataFramesSentAck=clabWIFIClientStatsDataFramesSentAck, clabWIFIRadioName=clabWIFIRadioName, clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFiClasses=clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFiClasses, clabWIFIAccessPointACStatsRetransCount=clabWIFIAccessPointACStatsRetransCount, clabWIFIAccessPointAC2OutQLenHistogramSampleInterval=clabWIFIAccessPointAC2OutQLenHistogramSampleInterval, clabWIFIAccessPointPasspoint2OSUEntry=clabWIFIAccessPointPasspoint2OSUEntry, clabWIFISSIDPolicyAllocatedBandwidth=clabWIFISSIDPolicyAllocatedBandwidth, clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFi=clabWIFIRadioChannelWiFiDiagnosticsResultsNonWiFi, clabWIFIRadioAutoChannelEnable=clabWIFIRadioAutoChannelEnable, clabWIFIAccessPointAssociatedDeviceCount=clabWIFIAccessPointAssociatedDeviceCount, clabWIFIRadioPacketAggregationEnable=clabWIFIRadioPacketAggregationEnable, clabWIFIAccessPointWMMEnable=clabWIFIAccessPointWMMEnable, clabWIFIPeriodicStatsDataFramesReceived=clabWIFIPeriodicStatsDataFramesReceived, clabWIFIAccessPointACEntry=clabWIFIAccessPointACEntry, clabWIFIAccessPointSSIDReference=clabWIFIAccessPointSSIDReference, clabWIFIAccessPointRadiusSettingsBlacklistTableTimeout=clabWIFIAccessPointRadiusSettingsBlacklistTableTimeout, clabWIFIAccessPointSecurityTable=clabWIFIAccessPointSecurityTable, clabWIFIRadioStatsPacketsReceived=clabWIFIRadioStatsPacketsReceived, clabWIFIAccessPointPasspointOSUProviderNamesFriendlyName=clabWIFIAccessPointPasspointOSUProviderNamesFriendlyName, clabWIFISSIDPolicyANPIThreshold=clabWIFISSIDPolicyANPIThreshold, clabWIFIAccessPointAC2StatsPacketsSent=clabWIFIAccessPointAC2StatsPacketsSent, clabWIFIAccessPointPasspointVenueNameCountryCode=clabWIFIAccessPointPasspointVenueNameCountryCode, clabWIFIRadioStatsFCSErrorCount=clabWIFIRadioStatsFCSErrorCount, clabWIFIAccessPointPasspointOSUProviderNAI=clabWIFIAccessPointPasspointOSUProviderNAI, clabWIFISSIDStatus=clabWIFISSIDStatus, clabWIFIAccessPointAC2StatsErrorsSent=clabWIFIAccessPointAC2StatsErrorsSent, clabWIFIRadioChannelWiFiDiagnosticsState=clabWIFIRadioChannelWiFiDiagnosticsState, clabWIFIRadioChannelWiFiDiagnosticsResultsChannel=clabWIFIRadioChannelWiFiDiagnosticsResultsChannel, clabWIFIAccessPointAC2StatsPacketsReceived=clabWIFIAccessPointAC2StatsPacketsReceived, clabWIFIAccessPointPasspointOSUProviderServiceDescription=clabWIFIAccessPointPasspointOSUProviderServiceDescription, clabWIFIAccessPointRadiusRetries=clabWIFIAccessPointRadiusRetries, clabWIFISSIDStatsUnicastPacketsReceived=clabWIFISSIDStatsUnicastPacketsReceived, clabWIFIAccessPointPasspointNAIRealmsEapMethodsIndex=clabWIFIAccessPointPasspointNAIRealmsEapMethodsIndex, clabWIFIAccessPointAccessControlFilterEnable=clabWIFIAccessPointAccessControlFilterEnable, clabWIFINeighboringWiFiEncryptionMode=clabWIFINeighboringWiFiEncryptionMode)
