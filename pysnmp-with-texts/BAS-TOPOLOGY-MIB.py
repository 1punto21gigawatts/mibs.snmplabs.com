#
# PySNMP MIB module BAS-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-TOPOLOGY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
BasLogicalPortId, BasInterfaceId, basTopology, BasSlotId, BasIfClass, BasChassisType, BasChassisId, BasCardClass = mibBuilder.importSymbols("BAS-MIB", "BasLogicalPortId", "BasInterfaceId", "basTopology", "BasSlotId", "BasIfClass", "BasChassisType", "BasChassisId", "BasCardClass")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifEntry, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifEntry", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, Counter64, iso, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ModuleIdentity, NotificationType, Integer32, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Counter64", "iso", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ModuleIdentity", "NotificationType", "Integer32", "Unsigned32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
basTopologyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1))
if mibBuilder.loadTexts: basTopologyMIB.setLastUpdated('9812010000Z')
if mibBuilder.loadTexts: basTopologyMIB.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basTopologyMIB.setContactInfo(' Tech Support Broadband Access Systems 201 Forest Street Marlboro, MA 01752 U.S.A. 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basTopologyMIB.setDescription('The MIB module for defining Broadband Access System Cluster topology.')
basChassisTopTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1), )
if mibBuilder.loadTexts: basChassisTopTable.setStatus('current')
if mibBuilder.loadTexts: basChassisTopTable.setDescription('A table of chassis contained in a BAS cluster.')
basChassisTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1), ).setIndexNames((0, "BAS-TOPOLOGY-MIB", "basChassisTopChassis"), (0, "BAS-TOPOLOGY-MIB", "basChassisTopSlot"), (0, "BAS-TOPOLOGY-MIB", "basChassisTopIf"), (0, "BAS-TOPOLOGY-MIB", "basChassisTopLPort"))
if mibBuilder.loadTexts: basChassisTopEntry.setStatus('current')
if mibBuilder.loadTexts: basChassisTopEntry.setDescription('')
basChassisTopChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basChassisTopChassis.setStatus('current')
if mibBuilder.loadTexts: basChassisTopChassis.setDescription('The chassis identifier of this chassis.')
basChassisTopSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basChassisTopSlot.setStatus('current')
if mibBuilder.loadTexts: basChassisTopSlot.setDescription('The BAS slot ID of this card.')
basChassisTopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basChassisTopIf.setStatus('current')
if mibBuilder.loadTexts: basChassisTopIf.setDescription('The BAS interface ID of this card.')
basChassisTopLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basChassisTopLPort.setStatus('current')
if mibBuilder.loadTexts: basChassisTopLPort.setDescription('The BAS logical port ID of this card.')
basChassisTopChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basChassisTopChassisNumber.setStatus('current')
if mibBuilder.loadTexts: basChassisTopChassisNumber.setDescription('The chassis number of this chassis.')
basChassisTopChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 6), BasChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basChassisTopChassisType.setStatus('current')
if mibBuilder.loadTexts: basChassisTopChassisType.setDescription('The chassis type of this chassis.')
basChassisTopSlotInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basChassisTopSlotInfo.setStatus('current')
if mibBuilder.loadTexts: basChassisTopSlotInfo.setDescription('This object is used to identify the number of slots contained in a chassis, the type of card contained in populated slots, and if a populated slot contains at least one ICL link. The length of this OCTET STRING indicates the number of slots in the chassis. The encoding of each OCTET is defined below: bits 0-5 Card Type. bit 6 If 1, slot contains at least one ICL link. If 0, slot contains no ICL links. bit 7 Unused.')
basChassisTopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basChassisTopStatus.setStatus('current')
if mibBuilder.loadTexts: basChassisTopStatus.setDescription('The current operational state of this chassis.')
basSlotTopTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2), )
if mibBuilder.loadTexts: basSlotTopTable.setStatus('current')
if mibBuilder.loadTexts: basSlotTopTable.setDescription('A table of slots contained in each chassis that make up a BAS cluster.')
basSlotTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1), ).setIndexNames((0, "BAS-TOPOLOGY-MIB", "basSlotTopChassis"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopSlot"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopIf"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopLPort"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopACChassis"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopACSlot"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopACIf"), (0, "BAS-TOPOLOGY-MIB", "basSlotTopACLPort"))
if mibBuilder.loadTexts: basSlotTopEntry.setStatus('current')
if mibBuilder.loadTexts: basSlotTopEntry.setDescription('')
basSlotTopChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basSlotTopChassis.setStatus('current')
if mibBuilder.loadTexts: basSlotTopChassis.setDescription('The BAS chassis ID of this card')
basSlotTopSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basSlotTopSlot.setStatus('current')
if mibBuilder.loadTexts: basSlotTopSlot.setDescription('The BAS slot ID of this card.')
basSlotTopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basSlotTopIf.setStatus('current')
if mibBuilder.loadTexts: basSlotTopIf.setDescription('The BAS interface ID of this card.')
basSlotTopLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basSlotTopLPort.setStatus('current')
if mibBuilder.loadTexts: basSlotTopLPort.setDescription('The BAS logical port ID of this card.')
basSlotTopACChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 5), BasChassisId())
if mibBuilder.loadTexts: basSlotTopACChassis.setStatus('current')
if mibBuilder.loadTexts: basSlotTopACChassis.setDescription('The BAS chassis ID of the application card')
basSlotTopACSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 6), BasSlotId())
if mibBuilder.loadTexts: basSlotTopACSlot.setStatus('current')
if mibBuilder.loadTexts: basSlotTopACSlot.setDescription('The BAS slot ID of the application card.')
basSlotTopACIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 7), BasInterfaceId())
if mibBuilder.loadTexts: basSlotTopACIf.setStatus('current')
if mibBuilder.loadTexts: basSlotTopACIf.setDescription('The BAS interface ID of the application card.')
basSlotTopACLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 8), BasLogicalPortId())
if mibBuilder.loadTexts: basSlotTopACLPort.setStatus('current')
if mibBuilder.loadTexts: basSlotTopACLPort.setDescription('The BAS logical port ID of the application card.')
basSlotTopNumberOfIfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopNumberOfIfs.setStatus('current')
if mibBuilder.loadTexts: basSlotTopNumberOfIfs.setDescription('The total number of physical interface on this slot.')
basSlotTopIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopIfInfo.setStatus('current')
if mibBuilder.loadTexts: basSlotTopIfInfo.setDescription("This object is used to identify which interfaces in the slot are an ICL interface as well as the type of ICL the interface represents. This object also identifies each end of the ICL. The encoding of this object is defined below. Each interface is encoded as a 3-tuple. The 3-tuple is defined as follows, <Type of ICL, Local ifIndex, Remote ifIndex>, where 'Type of ICL' in one byte, 'Local ifIndex' is four bytes, and 'Remote ifIndex' is four bytes. There will be 'Number of Interfaces' 3-tuples contained in this OCTET STRING. The values for each element which make up the 3-tuple can be as follows: 'Type of ICL' 0 indicates this is not an ICL 1 indicates active ICL 2 indicates redundant ICL 'Local ifIndex' 0 if 'Type of ICL' is 0 > 0 if 'Type of ICL' is not 0 'Remote ifIndex' 0 if 'Type of ICL' is 0 > 0 if 'Type of ICL' is not 0")
basSlotTopCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 11), BasCardClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopCardType.setStatus('current')
if mibBuilder.loadTexts: basSlotTopCardType.setDescription('The BAS card class of this slot.')
basSlotTopInterChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopInterChassisIP.setStatus('current')
if mibBuilder.loadTexts: basSlotTopInterChassisIP.setDescription('The IP address of the .')
basSlotTopIntraChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopIntraChassisIP.setStatus('current')
if mibBuilder.loadTexts: basSlotTopIntraChassisIP.setDescription('The IP address of the .')
basSlotTopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSlotTopStatus.setStatus('current')
if mibBuilder.loadTexts: basSlotTopStatus.setDescription('The current operational state of this slot.')
basIfTopTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3), )
if mibBuilder.loadTexts: basIfTopTable.setStatus('current')
if mibBuilder.loadTexts: basIfTopTable.setDescription('A table of interfaces on each slot contained in each chassis that make up a BAS cluster.')
basIfTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1), )
ifEntry.registerAugmentions(("BAS-TOPOLOGY-MIB", "basIfTopEntry"))
basIfTopEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: basIfTopEntry.setStatus('current')
if mibBuilder.loadTexts: basIfTopEntry.setDescription('')
basIfTopIfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 1), BasIfClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopIfClass.setStatus('current')
if mibBuilder.loadTexts: basIfTopIfClass.setDescription('The BAS defined class of this interface.')
basIfTopIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopIfType.setStatus('current')
if mibBuilder.loadTexts: basIfTopIfType.setDescription('This is a mirror of ifType defined in the IF-MIB.')
basIfTopICLNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopICLNeighbor.setStatus('current')
if mibBuilder.loadTexts: basIfTopICLNeighbor.setDescription('If the value of basIfTopIfClass is icl(1), then this object will identify the ifIndex of the interface at the far side of the link. Otherwise, the value of this object is zero(0).')
basIfTopICLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("redundant", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopICLMode.setStatus('current')
if mibBuilder.loadTexts: basIfTopICLMode.setDescription('If the value of basIfTopIfClass is icl(1), then this object indicates whether this ICL is acting in an active(1) or redundant(2) mode.')
basIfTopIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfTopIfStatus.setStatus('current')
if mibBuilder.loadTexts: basIfTopIfStatus.setDescription('The operational state of this interface.')
basRSTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4), )
if mibBuilder.loadTexts: basRSTable.setStatus('current')
if mibBuilder.loadTexts: basRSTable.setDescription('A table specifying a list of Route Servers in a BAS cluster.')
basRSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1), ).setIndexNames((0, "BAS-TOPOLOGY-MIB", "basRSMgrChassis"), (0, "BAS-TOPOLOGY-MIB", "basRSMgrSlot"), (0, "BAS-TOPOLOGY-MIB", "basRSMgrIf"), (0, "BAS-TOPOLOGY-MIB", "basRSMgrLPort"), (0, "BAS-TOPOLOGY-MIB", "basRSChassis"), (0, "BAS-TOPOLOGY-MIB", "basRSSlot"), (0, "BAS-TOPOLOGY-MIB", "basRSIf"), (0, "BAS-TOPOLOGY-MIB", "basRSLPort"))
if mibBuilder.loadTexts: basRSEntry.setStatus('current')
if mibBuilder.loadTexts: basRSEntry.setDescription('Card specific Route Server information entry.')
basRSMgrChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basRSMgrChassis.setStatus('current')
if mibBuilder.loadTexts: basRSMgrChassis.setDescription('The BAS Chassis ID of this card.')
basRSMgrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basRSMgrSlot.setStatus('current')
if mibBuilder.loadTexts: basRSMgrSlot.setDescription('The BAS Slot ID of this card.')
basRSMgrIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basRSMgrIf.setStatus('current')
if mibBuilder.loadTexts: basRSMgrIf.setDescription('The BAS interface ID of this card.')
basRSMgrLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basRSMgrLPort.setStatus('current')
if mibBuilder.loadTexts: basRSMgrLPort.setDescription('The BAS logical port ID of this card.')
basRSChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 5), BasChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSChassis.setStatus('current')
if mibBuilder.loadTexts: basRSChassis.setDescription('The BAS Chassis ID of a Route Server known by this card.')
basRSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 6), BasSlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSSlot.setStatus('current')
if mibBuilder.loadTexts: basRSSlot.setDescription('The BAS Slot ID of a Route Server known by this card.')
basRSIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 7), BasInterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSIf.setStatus('current')
if mibBuilder.loadTexts: basRSIf.setDescription('The BAS interface ID of a Route Server known by this card.')
basRSLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 8), BasLogicalPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSLPort.setStatus('current')
if mibBuilder.loadTexts: basRSLPort.setDescription('The BAS logical port ID of a Route Server known by this card.')
basRSRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 9, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRSRole.setStatus('current')
if mibBuilder.loadTexts: basRSRole.setDescription('This object is used to indicate the role the Route Server plays within a BAS cluster.')
mibBuilder.exportSymbols("BAS-TOPOLOGY-MIB", basSlotTopCardType=basSlotTopCardType, basChassisTopStatus=basChassisTopStatus, basSlotTopACSlot=basSlotTopACSlot, basRSIf=basRSIf, basRSTable=basRSTable, basSlotTopIntraChassisIP=basSlotTopIntraChassisIP, basTopologyMIB=basTopologyMIB, basSlotTopIfInfo=basSlotTopIfInfo, basChassisTopChassisNumber=basChassisTopChassisNumber, basRSLPort=basRSLPort, basSlotTopIf=basSlotTopIf, basChassisTopSlotInfo=basChassisTopSlotInfo, basIfTopICLNeighbor=basIfTopICLNeighbor, basSlotTopNumberOfIfs=basSlotTopNumberOfIfs, basSlotTopACLPort=basSlotTopACLPort, basRSMgrSlot=basRSMgrSlot, basIfTopEntry=basIfTopEntry, basRSMgrIf=basRSMgrIf, basRSSlot=basRSSlot, basChassisTopLPort=basChassisTopLPort, basIfTopTable=basIfTopTable, basSlotTopTable=basSlotTopTable, basSlotTopSlot=basSlotTopSlot, basSlotTopStatus=basSlotTopStatus, basRSMgrChassis=basRSMgrChassis, basChassisTopEntry=basChassisTopEntry, basIfTopIfType=basIfTopIfType, basIfTopIfClass=basIfTopIfClass, basSlotTopLPort=basSlotTopLPort, basRSMgrLPort=basRSMgrLPort, basChassisTopSlot=basChassisTopSlot, basSlotTopEntry=basSlotTopEntry, basRSChassis=basRSChassis, basChassisTopChassisType=basChassisTopChassisType, PYSNMP_MODULE_ID=basTopologyMIB, basChassisTopChassis=basChassisTopChassis, basIfTopIfStatus=basIfTopIfStatus, basRSEntry=basRSEntry, basChassisTopIf=basChassisTopIf, basSlotTopACChassis=basSlotTopACChassis, basRSRole=basRSRole, basIfTopICLMode=basIfTopICLMode, basSlotTopInterChassisIP=basSlotTopInterChassisIP, basSlotTopACIf=basSlotTopACIf, basChassisTopTable=basChassisTopTable, basSlotTopChassis=basSlotTopChassis)
