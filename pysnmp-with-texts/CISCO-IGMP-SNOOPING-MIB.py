#
# PySNMP MIB module CISCO-IGMP-SNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IGMP-SNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
VlanIndexOrZero, = mibBuilder.importSymbols("CISCO-PRIVATE-VLAN-MIB", "VlanIndexOrZero")
Percent, = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "Percent")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPortList, CiscoPortListRange = mibBuilder.importSymbols("CISCO-TC", "CiscoPortList", "CiscoPortListRange")
VlanIndex, = mibBuilder.importSymbols("CISCO-VTP-MIB", "VlanIndex")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, Unsigned32, Bits, iso, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "Unsigned32", "Bits", "iso", "TimeTicks", "Counter32")
RowStatus, DisplayString, TruthValue, TextualConvention, TimeStamp, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention", "TimeStamp", "StorageType")
ciscoIgmpSnoopingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 263))
ciscoIgmpSnoopingMIB.setRevisions(('2010-06-08 00:00', '2007-11-08 00:00', '2004-04-02 00:00', '2003-03-24 00:00', '2002-05-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIgmpSnoopingMIB.setRevisionsDescriptions(('Added support for the following: - cisLeaveQueryConfigGroup - cisQuerierGlobalConfigGroup - cisIgmpQuerierConfigExtGroup - cisRobustnessConfigGroup - cisTimeToLiveConfigGroup - cisRouterAlertConfigGroup - cisVlanExplicitTrackingCfgGroup - cisIfLimitGroup - cisIfLimitTotalGroup - cisIfAccessGroupGroup - cisVlanFilterConfigGroup - cisFilterStatisticsGroup - cisMulticastGroupPortInfoGroup - cisMulticastGroupConfigGroup - cisQuerierGlobalTcnQueryCountGroup - cisQuerierTcnQueryPendingGroup Deprecated cisMcastRouterConfigGroup and replaced it with cisMulticastRouterConfigGroup. Deprecated cisMcastGroupInfoGroup and replaced it with cisMulticastGroupInfoGroup. Updated DESCRIPTION of cisL2EntryLimit, cisEntryTrackingLimit, cisSourceOnlyPercentageScanLimit and cisSourceOnlyLearningLimit to include the meaning of value zero. Revised the DESCRIPTION of cisVlanConfigEntry and cisIgmpQuerierEntry.', "Added value 'unknown(4)' to CisIgmpVersion. Added support for the following: - cisL2EntryLimitGroup - cisTrackingLimitGroup - cisSourceOnlyLimitGroup - cisRateLimitGroup2 - cisVlanConfigGroup2 - cisSourceOnlyAgeTimerInSecGroup. Deprecated cisRateLimitGroup, cisGlobalSourceOnlyLearnGroup.", 'Replaced the import of PortList from Q-BRIDGE-MIB with CiscoPortList from CISCO-TC.', 'Add support for the following: - per VLAN IGMP Snooping configuration and group membership information - per port IGMP Snooping configuration - per VLAN IGMP Querier configuration - global rate-limit control objects - extend the cisSystemInfo to include more IGMP Snooping configuration related objects.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIgmpSnoopingMIB.setLastUpdated('201006080000Z')
if mibBuilder.loadTexts: ciscoIgmpSnoopingMIB.setOrganization('Cisco System, Inc.')
if mibBuilder.loadTexts: ciscoIgmpSnoopingMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com, cs-ipmulticast@cisco.com')
if mibBuilder.loadTexts: ciscoIgmpSnoopingMIB.setDescription('The MIB module for IGMP Snooping feature. Internet Group Management Protocol (IGMP) is the protocol used by IPv4 end hosts to indicate their interest in receiving multicast traffic for certain multicast groups to neighboring multicast routers. Version 3 of IGMP adds support for source based filtering; which means the end hosts can specifically indicate to receive or not-receive multicast packets from specific source addresses. This information is used by the multicast routers to restrict forwarding of multicast traffic for the host. IGMP Snooping is a switch protocol. A switch that implements IGMP Snooping listens to the IGMP messages exchanged between the hosts and router, then provides selective transmission of multicast traffic based on multicast mac destination address or multicast group address. With IGMPv3 support, IGMP Snooping can potentially provide selective transmission of multicast data based on (source address, group address) onto the ports that are interested. In addition to this, IGMP Snooping can also provide proxy reporting, report suppression and fast leave capabilities.')
class CisIgmpMode(TextualConvention, Integer32):
    description = 'A value that represents a working mode of IGMP protocol in a device. auto(1) : The system decides the working mode by itself. igmpOnly(2): Working on IGMP mode only. igmpCgmp(3): Working on both IGMP and CGMP modes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("auto", 1), ("igmpOnly", 2), ("igmpCgmp", 3))

class CisIgmpVersion(TextualConvention, Integer32):
    description = 'A value that represents the version of IGMP: version1(1) : Version 1 of IGMP version2(2) : Version 2 of IGMP version3(3) : Version 3 of IGMP unknown(4) : Version of IGMP is not determined.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("version1", 1), ("version2", 2), ("version3", 3), ("unknown", 4))

ciscoIgmpSnoopingNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 0))
ciscoIgmpSnoopingMIBObject = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1))
cisSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1))
cisStatisticsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2))
cisRateLimitInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 3))
cisVlanConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4))
cisIfConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 5))
cisMulticastRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6))
cisMulticastGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7))
cisResourceLimitInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 8))
cisQuerierConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9))
cisFilteringInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10))
cisExplicitTrackingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 11))
cisIgmpSnoopingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: cisIgmpSnoopingEnabled.setDescription('This object indicates whether IGMP Snooping has been enabled for the system.')
cisV3ProcessEnabledAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisV3ProcessEnabledAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cisV3ProcessEnabledAdminStatus.setDescription("This object indicates the administrative status of IGMP v3 processing in the system. With the condition that IGMP protocol has been enabled, a system will process IGMPv3 messages if this object is set to 'true', or it will process only IGMPv1/v2 messages if this object is set to 'false'.")
cisV3ProcessEnabledOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisV3ProcessEnabledOperStatus.setStatus('current')
if mibBuilder.loadTexts: cisV3ProcessEnabledOperStatus.setDescription("This object indicates the current operational status of IGMP v3 processing in the system. This object is enabled if the system is operating with IGMPv3 protocol. Value of this object will be set to 'true' if the system is operating in IGMP v3, and 'false' if it is operating in IGMPv1/v2.")
cisFastLeaveEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisFastLeaveEnabled.setStatus('current')
if mibBuilder.loadTexts: cisFastLeaveEnabled.setDescription("This object indicates whether Fast-Leave mechanism has been configured to be enabled in the system. If Fast-Leave is enabled in the switch, IGMP Snooping will prune the port on which an IGMP leave message has been received without waiting for the Group Specific Query to timeout to determine whether there are any more hosts on that port for that group. If the value of cisV3ProcessEnabledOperStatus is 'false', this object will not have any effect.")
cisFastBlockEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisFastBlockEnabled.setStatus('current')
if mibBuilder.loadTexts: cisFastBlockEnabled.setDescription("The object indicates whether Fast-Block mechanism has been enabled for the system. This object only has effect if the value of cisV3ProcessEnabledOperStatus is 'true'.")
cisAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 6), CisIgmpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisAdminMode.setStatus('current')
if mibBuilder.loadTexts: cisAdminMode.setDescription('The object indicates the administrative snooping mode of IGMP Snooping feature, depends on whether only IGMP devices, or also CGMP devices are existing in the network.')
cisOperMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 7), CisIgmpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisOperMode.setStatus('current')
if mibBuilder.loadTexts: cisOperMode.setDescription("The object indicates the operational snooping mode of the device. The object should return igmpOnly(2) or igmpCgmp(3) only. Value of this object is meaningful only if the value of cisIgmpSnoopingEnabled is 'true'.")
cisLeaveQueryType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("generalQuery", 1), ("macGenQuery", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisLeaveQueryType.setStatus('current')
if mibBuilder.loadTexts: cisLeaveQueryType.setDescription('The object indicates the type of IGMP-leave query that the device will send on the interface the IGMP-leave message was received. generalQuery(1) : A General Query will be sent to all hosts connecting to that interface. macGenQuery(2) : A MAC-Based General Query will be sent to all hosts in multicast groups that are associated with the MAC-level address. MAC-Based General Query is not a standard, it is a part of CGMP (Cisco Group Management Protocol). auto(3) : A Group-Specific query will be sent if there are no IGMPv1 hosts detected in the network. Otherwise a MAC-Based General Query will be sent.')
cisAddressAliasingMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fallback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisAddressAliasingMode.setStatus('current')
if mibBuilder.loadTexts: cisAddressAliasingMode.setDescription('The object indicates the current IGMP Address Aliasing Mode of the device. normal(1) : IGMP is working in normal mode without detecting address aliasing. fallback(2): address aliasing is detected. The device stops listening to the multicast control traffic and stays in the fallback mode for an expiry time before getting back to the normal mode.')
cisFallbackTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisFallbackTime.setStatus('current')
if mibBuilder.loadTexts: cisFallbackTime.setDescription('The object indicates the time the IGMP address aliasing mode is fallback(2).')
cisReportSuppressionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisReportSuppressionEnabled.setStatus('current')
if mibBuilder.loadTexts: cisReportSuppressionEnabled.setDescription("When this object is set to 'true', IGMP Snooping will suppress duplicate IGMP Reports. When this object is set to 'false', all IGMP Reports are forwarded to all multicast routers in the VLAN.")
cisTopoChangeFloodQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisTopoChangeFloodQueryCount.setStatus('current')
if mibBuilder.loadTexts: cisTopoChangeFloodQueryCount.setDescription('This object specifies the flooding period for multicast traffic upon receiving Topology Change Notifications (TCN). IGMP Snooping will flood multicast traffic until cisTopoChangeFloodQueryCount number of IGMP General Queries are received by IGMP Snooping.')
cisTopoChangeQuerySolicitEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisTopoChangeQuerySolicitEnabled.setStatus('current')
if mibBuilder.loadTexts: cisTopoChangeQuerySolicitEnabled.setDescription('This object specifies whether the device running IGMP Snooping will solicit IGMP General Queries from the Querier upon receiving a Topology Change Notification (TCN). The root device will always solicit IGMP General Queries on TCN irrespective of the value of cisTopoChangeQuerySolicitEnabled.')
cisSourceOnlyLearningEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisSourceOnlyLearningEnabled.setStatus('current')
if mibBuilder.loadTexts: cisSourceOnlyLearningEnabled.setDescription('This object specifies whether Source Only multicast entries are learned by IGMP Snooping or not.')
cisSourceOnlyEntryAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2880))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisSourceOnlyEntryAgeTime.setStatus('deprecated')
if mibBuilder.loadTexts: cisSourceOnlyEntryAgeTime.setDescription("This object specifies the aging time for Source Only multicast entries when cisSourceOnlyLearningEnabled is set to 'true'. When cisSourceOnlyEntryAgeTime is set to 0, aging is disabled. This object is deprecated and replaced by 'cisSourceOnlyEntryAgingTime'.")
cisV3SnoopingSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisV3SnoopingSupport.setStatus('current')
if mibBuilder.loadTexts: cisV3SnoopingSupport.setDescription("This object indicates IGMP Snooping support for IGMPv3 as described below: basic(1): Basic support for IGMPv3. IGMPv3 packets are processed similar to IGMPv2 packets. In other words Source list information is not used. Although this does not break multicast traffic to IGMPv3 hosts, it does not provide any other benefits such as Fast Leave for IGMPv3 hosts, Explicit Host Tracking and Source based filtering. full(2): Full support for IGMPv3. Provides full IGMPv3 Snooping support. This includes processing of IGMPv3 source list information along with group information. Provides support for features such as Fast Leave, Explicit Host Tracking and Proxy Reporting and a potential to do Source based filtering. The value of this object is valid only when cisV3ProcessEnabledAdminStatus is set to 'true'.")
cisSourceOnlyEntryAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisSourceOnlyEntryAgingTime.setStatus('current')
if mibBuilder.loadTexts: cisSourceOnlyEntryAgingTime.setDescription("This object specifies the aging time in seconds for Source Only multicast entries when cisSourceOnlyLearningEnabled is set to 'true'. When cisSourceOnlyEntryAgingTime is set to 0, aging is disabled.")
cisRobustnessVariable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisRobustnessVariable.setReference('RFC 3376, 8.1')
if mibBuilder.loadTexts: cisRobustnessVariable.setStatus('current')
if mibBuilder.loadTexts: cisRobustnessVariable.setDescription('Specifies the Robustness Variable of this device. This value will be used at each VLAN if the corresponding instance of cisVlanRobustnessVariable is not configured.')
cisLastMemberQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisLastMemberQueryInterval.setReference('RFC 3376, 8.8')
if mibBuilder.loadTexts: cisLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cisLastMemberQueryInterval.setDescription('Specifies the IGMP Last Member Query Interval of this device. This value will be used at each VLAN if the corresponding instance of cisVlanLeaveQueryInterval is not configured.')
cisLastMemberQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisLastMemberQueryCount.setStatus('current')
if mibBuilder.loadTexts: cisLastMemberQueryCount.setDescription('Specifies the Last Member Query Count value of this device. This value will be used at each VLAN if the corresponding instance of cisVlanLastMemberQueryCount is not configured.')
cisTimeToLiveCheckEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisTimeToLiveCheckEnabled.setStatus('current')
if mibBuilder.loadTexts: cisTimeToLiveCheckEnabled.setDescription("Specifies whether Time-To-Live (TTL) check is enabled when processing IGMP packets in the system. Setting this object to 'false' disables TTL check when processing IGMP packets in the system. Setting this object to 'true' enables TTL check, whether TTL check for IGMP packets on each VLAN is done or not is controlled by the corresponding instance of cisVlanTimeToLiveCheckEnabled.")
cisRouterAlertCheckEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisRouterAlertCheckEnabled.setStatus('current')
if mibBuilder.loadTexts: cisRouterAlertCheckEnabled.setDescription("Specifies whether checking of Router-Alert option is enabled for IGMP traffic in the system. Setting this object to 'false' disables Router-Alert check in the system. Setting this object to 'true' enables Router-Alert check, whether Router-Alert check is performed at each VLAN is controlled by the corresponding instance of cisVlanRouterAlertCheckEnabled.")
cisInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1), )
if mibBuilder.loadTexts: cisInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: cisInterfaceStatsTable.setDescription('Table contains statistics information for IGMP Snooping. An entry appears in this table for each IGMP Snooping capable interface in the device.')
cisInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cisInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cisInterfaceStatsEntry.setDescription('An entry contains statistics information for a specific IGMP Snooping capable interface. It provides information about IGMP messages and reports that have been transmitted and received at the interface.')
cisTxGeneralQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisTxGeneralQueries.setStatus('current')
if mibBuilder.loadTexts: cisTxGeneralQueries.setDescription('Total IGMP General Queries that have been transmitted through an interface.')
cisTxGroupSpecificQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisTxGroupSpecificQueries.setStatus('current')
if mibBuilder.loadTexts: cisTxGroupSpecificQueries.setDescription('Total IGMP Group-Specific Queries that have been transmitted through an interface.')
cisTxReports = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisTxReports.setStatus('current')
if mibBuilder.loadTexts: cisTxReports.setDescription('Total IGMP Membership Reports that have been transmitted through an interface.')
cisTxLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisTxLeaves.setStatus('current')
if mibBuilder.loadTexts: cisTxLeaves.setDescription('Total IGMP Leave messages that have been transmitted through an interface.')
cisRxGeneralQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisRxGeneralQueries.setStatus('current')
if mibBuilder.loadTexts: cisRxGeneralQueries.setDescription('Total IGMP General Queries that have been received at an interface.')
cisRxGroupSpecificQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisRxGroupSpecificQueries.setStatus('current')
if mibBuilder.loadTexts: cisRxGroupSpecificQueries.setDescription('Total IGMP Group-Specific Queries that have been received at an interface.')
cisRxReports = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisRxReports.setStatus('current')
if mibBuilder.loadTexts: cisRxReports.setDescription('Total IGMP Membership Reports that have been received at an interface.')
cisRxLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisRxLeaves.setStatus('current')
if mibBuilder.loadTexts: cisRxLeaves.setDescription('Total IGMP Leave messages that have been received at an interface.')
cisRxValidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisRxValidPackets.setStatus('current')
if mibBuilder.loadTexts: cisRxValidPackets.setDescription('Total valid IGMP packets have been received at an interface.')
cisRxInvalidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisRxInvalidPackets.setStatus('current')
if mibBuilder.loadTexts: cisRxInvalidPackets.setDescription('Total packets those are not valid IGMP messages received at an interface.')
cisRxOtherPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisRxOtherPackets.setStatus('current')
if mibBuilder.loadTexts: cisRxOtherPackets.setDescription('Total non IGMP messages messages that have been received at an interface, comprising cgmp join, pim hello, dvmrp and mospf messages.')
cisRxMACGeneralQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisRxMACGeneralQueries.setStatus('current')
if mibBuilder.loadTexts: cisRxMACGeneralQueries.setDescription('Total MAC-based General Queries that have been received at an interface.')
cisRxTopoNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisRxTopoNotifications.setStatus('current')
if mibBuilder.loadTexts: cisRxTopoNotifications.setDescription('Total Topology Change Notifications that have been received at an interface.')
cisV3Allows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisV3Allows.setStatus('current')
if mibBuilder.loadTexts: cisV3Allows.setDescription('Number of Source-List-Change records with the record type ALLOW_NEW_SOURCES that have been sent from hosts connected to an interface. This record type indicates that the Source Address fields in this Group Record contain a list of additional sources that the system wishes to hear from, for packets sent to the specified multicast address.')
cisV3Blocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisV3Blocks.setStatus('current')
if mibBuilder.loadTexts: cisV3Blocks.setDescription('Number of Source-List-Change records with the record type BLOCK_OLD_SOURCE that have been sent from hosts connected to an interface. This record type indicates that the Source Address fields in this Group Record contain a list of the sources that the system no longer wishes to hear from, for packets sent to the specified multicast address.')
cisV3IsIncluded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisV3IsIncluded.setStatus('current')
if mibBuilder.loadTexts: cisV3IsIncluded.setDescription('Number of Current-State records with the state MODE_IS_INCLUDE that have been sent from hosts in response to a Query received at an interface. This state indicates that the interface has a filter mode of INCLUDE for the specified multicast address.')
cisV3IsExcluded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisV3IsExcluded.setStatus('current')
if mibBuilder.loadTexts: cisV3IsExcluded.setDescription('Number of Current-State records with the state MODE_IS_EXCLUDE that have been sent from hosts in response to a Query received at an interfaces. This state indicates that the interface has a filter mode of EXCLUDE for the specified multicast address.')
cisV3ToIncluded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisV3ToIncluded.setStatus('current')
if mibBuilder.loadTexts: cisV3ToIncluded.setDescription('Number of Filter-Mode-Change records with the record type CHANGE_TO_INCLUDE_MODE that have been sent through an interface. This type of record indicates that the filter mode has been changed to INCLUDE mode for the specified multicast address, and the Source Address fields in this Group Record will contain the new source list for the specified multicast address, if it is not empty.')
cisV3ToExcluded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisV3ToExcluded.setStatus('current')
if mibBuilder.loadTexts: cisV3ToExcluded.setDescription('Number of Filter-Mode-Change records with the record type CHANGE_TO_EXCLUDE_MODE that have been sent through an interface. This type of record indicates that the filter mode has been changed to EXCLUDE mode for the specified multicast address, and the Source Address fields in this Group Record will contain the new source list for the specified multicast address, if it is not empty.')
cisGeneralQueryRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 3, 1), Unsigned32()).setUnits('packets per 30 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisGeneralQueryRateLimit.setStatus('deprecated')
if mibBuilder.loadTexts: cisGeneralQueryRateLimit.setDescription('Rate limit for General-Query packets per 30 seconds from a control plane address. If the packets exceed the rate, snooping will be stalled for a period of 30 seconds.')
cisDvmrpRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 3, 2), Unsigned32()).setUnits('packets per 30 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisDvmrpRateLimit.setStatus('deprecated')
if mibBuilder.loadTexts: cisDvmrpRateLimit.setDescription('Rate limit for DVMRP packets per 30 seconds from a control plane address. If the packets exceed the rate, snooping will be stalled for a period of 30 second.')
cisMospf1RateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 3, 3), Unsigned32()).setUnits('packets per 30 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisMospf1RateLimit.setStatus('deprecated')
if mibBuilder.loadTexts: cisMospf1RateLimit.setDescription('Rate limit for MOSPF1 packets per 30 seconds from a control plane address. If the packets exceed the rate, snooping will be stalled for a period of 30 second.')
cisMospf2RateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 3, 4), Unsigned32()).setUnits('packets per 30 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisMospf2RateLimit.setStatus('deprecated')
if mibBuilder.loadTexts: cisMospf2RateLimit.setDescription('Rate limit for MOSPF2 packets per 30 seconds from a control plane address. If the packets exceed the rate, snooping will be stalled for a period of 30 second.')
cisPimV2RateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 3, 5), Unsigned32()).setUnits('packets per 30 seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisPimV2RateLimit.setStatus('deprecated')
if mibBuilder.loadTexts: cisPimV2RateLimit.setDescription('Rate limit for PIMv2 packets per 30 seconds from a control plane address. If the packets exceed the rate, snooping will be stalled for a period of 30 second.')
cisRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 3, 6), Unsigned32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisRateLimit.setStatus('current')
if mibBuilder.loadTexts: cisRateLimit.setDescription('Rate limit for incoming IGMP messages in packets per seconds, applied to each VLAN in the system. IGMP Snooping will be disabled on the corresponding VLAN if IGMP message incoming rate exceeds the limit, then enabled back automatically once IGMP join message rate is below the limit indicated by the corresponding instance value of this object. Setting value zero to this object means no limitation on IGMP incoming message rate.')
cisVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1), )
if mibBuilder.loadTexts: cisVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: cisVlanConfigTable.setDescription('Table contains VLAN based configuration information for IGMP Snooping.')
cisVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-IGMP-SNOOPING-MIB", "cisVlanIndex"))
if mibBuilder.loadTexts: cisVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cisVlanConfigEntry.setDescription('An entry is created for each IGMP Snooping capable VLAN found in the device. An entry is removed if such VLAN becomes IGMP Snooping incapable or has been removed.')
cisVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cisVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cisVlanIndex.setDescription('This object indicates the VLAN in which IGMP Snooping is configured.')
cisVlanIgmpSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanIgmpSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: cisVlanIgmpSnoopingEnabled.setDescription("When this object is set to 'true' IGMP Snooping is enabled on this VLAN else disabled.")
cisVlanFastLeaveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanFastLeaveEnabled.setStatus('current')
if mibBuilder.loadTexts: cisVlanFastLeaveEnabled.setDescription('This object specifies whether Fast-Leave mechanism (also known as Immediate-Leave) is to be performed by IGMP Snooping or not. When enabled, IGMP Snooping will remove the interface from the group mentioned in the IGMP Leave message received on that interface without waiting for the IGMP Group-Specific Query to timeout to determine whether there are any more hosts on that interface for that group.')
cisVlanIgmpSnoopingOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 4), CisIgmpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisVlanIgmpSnoopingOperMode.setStatus('current')
if mibBuilder.loadTexts: cisVlanIgmpSnoopingOperMode.setDescription('The object indicates the operational mode of IGMP Snooping. The object should return igmpOnly(2) or igmpCgmp(3) only.')
cisVlanIgmpSnoopingLearningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pimDvmrp", 1), ("cgmp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanIgmpSnoopingLearningMode.setStatus('current')
if mibBuilder.loadTexts: cisVlanIgmpSnoopingLearningMode.setDescription('This object specifies the multicast router port learning method for IGMP Snooping as described below: pimDvmrp(1) : Protocol Independent Multicast / Distance Vector Multicast Routing Protocol. cgmp(2) : Cisco Group Management Protocol.')
cisVlanReportSuppressionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanReportSuppressionEnabled.setStatus('current')
if mibBuilder.loadTexts: cisVlanReportSuppressionEnabled.setDescription('This object specifies whether Report Suppression is enabled for this VLAN.')
cisVlanLeaveQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanLeaveQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cisVlanLeaveQueryInterval.setDescription('Specifies the IGMP Last Member Query Interval of this VLAN. Value of zero for this object indicates that IGMP leave timer is not configured for this VLAN. In that case, IGMP leave timer used in this VLAN is indicated by the value of cisLastMemberQueryInterval.')
cisVlanLastMemberQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanLastMemberQueryCount.setStatus('current')
if mibBuilder.loadTexts: cisVlanLastMemberQueryCount.setDescription('This object specifies the Last Member Query Count for this VLAN. Value of zero for this object indicates that Last Member Query Count is not configured for the VLAN. In that case, Last Member Query Count used in this VLAN is indicated by the value of cisLastMemberQueryCount.')
cisVlanRobustnessVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanRobustnessVariable.setReference('RFC 3376, 8.1')
if mibBuilder.loadTexts: cisVlanRobustnessVariable.setStatus('current')
if mibBuilder.loadTexts: cisVlanRobustnessVariable.setDescription('This objects specifies the Robustness Variable for this VLAN. Value of zero for this object indicates that Robustness Variable is not configured for the VLAN. In that case, Robustness Variable used in this VLAN is indicated by the value of cisRobustnessVariable.')
cisVlanTimeToLiveCheckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanTimeToLiveCheckEnabled.setStatus('current')
if mibBuilder.loadTexts: cisVlanTimeToLiveCheckEnabled.setDescription("This objects specifies whether TTL check is enabled on this VLAN. Setting this object will only take effect when cisTimeToLiveCheckEnabled is 'true'.")
cisVlanRouterAlertCheckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanRouterAlertCheckEnabled.setStatus('current')
if mibBuilder.loadTexts: cisVlanRouterAlertCheckEnabled.setDescription("This objects specifies whether checking of Router-Alert option is enabled for IGMP traffic in this VLAN. Setting this object will only take effect when cisRouterAlertCheckEnabled is 'true'.")
cisIgmpQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2), )
if mibBuilder.loadTexts: cisIgmpQuerierTable.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierTable.setDescription('Table containing information regarding the IGMP Querier in the VLAN. The device can be configured to be the IGMP Querier for the VLAN. An IGMP Querier for the VLAN is selected by using a Querier Election process.')
cisIgmpQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierVlanIndex"))
if mibBuilder.loadTexts: cisIgmpQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierEntry.setDescription('An entry is created for each IGMP Snooping capable VLAN found in the device. An entry is removed if such VLAN becomes IGMP Snooping incapable or has been removed.')
cisIgmpQuerierVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cisIgmpQuerierVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierVlanIndex.setDescription('The object indicates the VLAN that the Querier will send IGMP queries on.')
cisIgmpQuerierEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpQuerierEnabled.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierEnabled.setDescription("This object specifies whether IGMP Snooping Querier function is enabled on the VLAN. Setting this object to 'enable' will enable IGMP Snooping Querier function on this VLAN; Setting this object to 'false' will disable IGMP Snooping Querier function on this VLAN. Setting this object will only take effect when cisQuerierEnabled is 'true'. If IGMP Snooping Querier election is enabled in the system, this object also controls whether the device will participate in the IGMP Querier election in a VLAN. If the object is set to 'true', the device will participate to an election process to be a Querier. If the object is set to 'false' while the device is acting as the Querier in a VLAN, a new election will be activated to choose a different Querier.")
cisIgmpQuerierState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("electing", 2), ("querier", 3), ("nonQuerier", 4), ("inactive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisIgmpQuerierState.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierState.setDescription('The object indicates the current state of the device as an IGMP Querier in a VLAN. disabled(1) : Querier function is disabled for this device in this VLAN. electing(2) : The device is in the election process of the Querier. querier(3) : The device is the current Querier in this VLAN. nonQuerier(4): The device has lost the election process of the Querier. inactive(5) : VLAN is inactive or not an Ethernet VLAN.')
cisIgmpQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 4), CisIgmpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisIgmpQuerierVersion.setReference('RFC 3376')
if mibBuilder.loadTexts: cisIgmpQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierVersion.setDescription('The object indicates the operational IGMP version of the Querier for the VLAN. IGMP version of the Querier is determined by the type of IGMP General Query received by the device.')
cisIgmpQuerierAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisIgmpQuerierAddressType.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierAddressType.setDescription('The object indicates IP address type of the IGMP Querier for the VLAN.')
cisIgmpQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisIgmpQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierAddress.setDescription('The object indicates the operational IP address of the IGMP Querier for the VLAN.')
cisIgmpQuerierInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 7), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisIgmpQuerierInterface.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierInterface.setDescription('The object indicates the interface on which IGMP Querier is detected for the VLAN. The value of this object is zero if the device itself is acting as IGMP Querier for the VLAN.')
cisIgmpQuerierTcnQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpQuerierTcnQueryCount.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierTcnQueryCount.setDescription('Specifies the number of TCN queries to be executed upon receiving TCN on this VLAN. Value of zero for this object indicates that querier TCN query count is not configured for the VLAN.')
cisIgmpQuerierTcnQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpQuerierTcnQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierTcnQueryInterval.setDescription('Specifies the TCN query interval time for this VLAN. Value of zero for this object indicates that querier TCN query interval is not configured for the VLAN. In that case, querier TCN query interval used in this VLAN is indicated by the value of cisQuerierTcnQueryInterval.')
cisIgmpQuerierTimerExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpQuerierTimerExpiry.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierTimerExpiry.setDescription('Specifies the querier expiration timer on this VLAN. Value of zero for this object indicates that querier expiration timer is not configured for the VLAN. In that case, querier expiration timer used in this VLAN is indicated by the value of cisQuerierTimerExpiry.')
cisIgmpQuerierMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpQuerierMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierMaxResponseTime.setDescription('Specifies the Max Response Time value of queries generated by IGMP Snooping Querier on this VLAN. Value of zero for this object indicates that querier Max Response Time is not configured for the VLAN. In that case, querier Max Response Time used in this VLAN is indicated by the value of cisQuerierMaxResponseTime.')
cisIgmpQuerierQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpQuerierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierQueryInterval.setDescription('Specifies the interval between IGMP Queries to this VLAN. Value of zero for this object indicates that querier query interval is not configured for the VLAN. In that case, querier query interval used in this VLAN is indicated by the value of cisQuerierQueryInterval.')
cisIgmpQuerierAdminAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 13), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpQuerierAdminAddressType.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierAdminAddressType.setDescription('Specifies the administrative IP address type of the IGMP Querier of this VLAN.')
cisIgmpQuerierAdminAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 14), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpQuerierAdminAddress.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierAdminAddress.setDescription('Specifies the administrative Internet address of the IGMP Querier of this VLAN, when IGMP Snooping Querier function is enabled on this VLAN. The type of this address is determined by the value of cisIgmpQuerierAdminAddressType.')
cisIgmpQuerierAdminVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 15), CisIgmpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIgmpQuerierAdminVersion.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierAdminVersion.setDescription("Specifies the administrative version of the IGMP version that the Querier feature uses on this VLAN. Value 'unknown' indicates that the administrative version is not configured for IGMP Querier on this VLAN.")
cisIgmpQuerierTcnQueryPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisIgmpQuerierTcnQueryPending.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierTcnQueryPending.setDescription('Indicates the remaining TCN queries in respond to TCN on this VLAN.')
cisIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 5, 1), )
if mibBuilder.loadTexts: cisIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: cisIfConfigTable.setDescription('Table containing configuration information for IGMP Snooping on capable Layer two interfaces.')
cisIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cisIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cisIfConfigEntry.setDescription('An entry is created for each Layer two interface capable of being flood with multicast traffic by IGMP Snooping.')
cisIfTopoChangeFloodEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 5, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisIfTopoChangeFloodEnabled.setStatus('current')
if mibBuilder.loadTexts: cisIfTopoChangeFloodEnabled.setDescription("When this object is set to 'true' multicast traffic will be flooded on the port for cisTopoChangeFloodQueryCount of Igmp General Queries upon receiving a Topology Change Notification (TCN) for the VLAN to which the port belongs.")
cisMcastRouterCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 1), )
if mibBuilder.loadTexts: cisMcastRouterCfgTable.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastRouterCfgTable.setDescription('Table containing multicast router configuration information for IGMP Snooping. This table is deprecated and replaced by cisMcastRouterConfigTable.')
cisMcastRouterCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMcastRouterVlanIndex"))
if mibBuilder.loadTexts: cisMcastRouterCfgEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastRouterCfgEntry.setDescription('An entry is created for each interface in the VLAN that is either learned or configured as multicast router port. A multicast router port is learned using the method specified by cisVlanIgmpSnoopingLearningMode.')
cisMcastRouterVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cisMcastRouterVlanIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastRouterVlanIndex.setDescription('This object indicates the VLAN to which the multicast router port belongs.')
cisMcastRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMcastRouterType.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastRouterType.setDescription('This object indicates if the multicast router port is a configured (static) or learned (dynamic) port.')
cisMcastRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisMcastRouterRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastRouterRowStatus.setDescription("This object is a conceptual row entry that allows to add or delete entries to or from the cisMcastRouterCfgTable. When creating an entry in this table 'createAndGo' method is used and the value of this object is set to 'active'. Deactivation of an 'active' entry is not allowed. When deleting an entry in this table 'destroy' method is used.")
cisMcastRouterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 2), )
if mibBuilder.loadTexts: cisMcastRouterConfigTable.setStatus('current')
if mibBuilder.loadTexts: cisMcastRouterConfigTable.setDescription('Table containing a list of multicast router used by IGMP snooping. An entry is created for every multicast router learnt by the system. An entry can also be created manually by user. Only entries which are manually created can be deleted from the table.')
cisMcastRouterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-IGMP-SNOOPING-MIB", "cisMcastRouterConfigVlanIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cisMcastRouterConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cisMcastRouterConfigEntry.setDescription('A set of configuration and information regarding a single multicast router.')
cisMcastRouterConfigVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cisMcastRouterConfigVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cisMcastRouterConfigVlanIndex.setDescription('This object indicates the VLAN to which the multicast router port belongs.')
cisMcastRouterConfigRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMcastRouterConfigRouterType.setStatus('current')
if mibBuilder.loadTexts: cisMcastRouterConfigRouterType.setDescription('This object indicates type of the multicast router. static: the multicast router is configured manually. dynamic: the multicast router is learned by the system.')
cisMcastRouterConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 2, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisMcastRouterConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: cisMcastRouterConfigStorageType.setDescription('This object specifies the storage type of this conceptual row.')
cisMcastRouterConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 6, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisMcastRouterConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cisMcastRouterConfigRowStatus.setDescription('This object is used to manage creation, deletion and modification of rows in this table. Once a row becomes active, value in any column within such row can not be modified.')
cisMcastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1), )
if mibBuilder.loadTexts: cisMcastGroupTable.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupTable.setDescription('Table containing multicast group address information for IGMP Snooping.')
cisMcastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupVlanIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupAddressType"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupAddress"))
if mibBuilder.loadTexts: cisMcastGroupEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupEntry.setDescription('An entry is created by IGMP Snooping for each group learned in the VLAN.')
cisMcastGroupVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cisMcastGroupVlanIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupVlanIndex.setDescription('This object indicates the VLAN in which the group is learned.')
cisMcastGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cisMcastGroupAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupAddressType.setDescription('This object indicates IP multicast address type learned by IGMP Snooping.')
cisMcastGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cisMcastGroupAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupAddress.setDescription('This object indicates IP multicast address learned by IGMP Snooping.')
cisMcastGroupFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMcastGroupFilterMode.setReference('RFC 3376')
if mibBuilder.loadTexts: cisMcastGroupFilterMode.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupFilterMode.setDescription("This object indicates the IGMP filter mode for this group. include(1) : reception of multicast packets sent to the group specified by cisMcastGroupAddress is requested only from the specified IPv4 source addresses listed in the IGMPv3 Membership Reports. exclude(2) : reception of multicast packets sent to the group specified by cisMcastGroupAddress is requested from all except from the list of IPv4 source addresses specified in the IGMPv3 Membership Reports. The filter mode is determined by the type of Group Record received in the IGMP Membership Report received by the device. Groups for which IGMPv1/v2 Membership Reports are received are considered to have a cisMcastGroupFilterMode of 'exclude'.")
cisMcastGroupIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1, 1, 5), CisIgmpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMcastGroupIgmpVersion.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupIgmpVersion.setDescription('This object indicates the IGMP version for the group. This is determined by the type of IGMP Membership Report received by the device.')
cisMcastGroupIncludeHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMcastGroupIncludeHostCount.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupIncludeHostCount.setDescription('This object indicates the number of hosts that are in INCLUDE mode for the group.')
cisMcastGroupExcludeHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMcastGroupExcludeHostCount.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupExcludeHostCount.setDescription('This object indicates the number of hosts that are in EXCLUDE mode for the group.')
cisMcastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 1, 1, 8), CiscoPortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMcastGroupPortList.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupPortList.setDescription('This object indicates the set of ports on which IGMP Membership Reports are received for the group indicating interest to receive traffic sent to the group.')
cisMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2), )
if mibBuilder.loadTexts: cisMulticastGroupTable.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupTable.setDescription('Table containing a list of multicast group information for IGMP Snooping.')
cisMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1), ).setIndexNames((0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupVlanIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupCeVlanIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupAddressType"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupAddress"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupSourceAddress"))
if mibBuilder.loadTexts: cisMulticastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupEntry.setDescription('An entry of multicast group in the system. An entry is created for each group learned or configured in the system.')
cisMulticastGroupVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cisMulticastGroupVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupVlanIndex.setDescription('This object indicates the VLAN in which the group is learned or configured.')
cisMulticastGroupCeVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 2), VlanIndex())
if mibBuilder.loadTexts: cisMulticastGroupCeVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupCeVlanIndex.setDescription('This object indicates the Customer Equipment (CE) VLAN in which the group is learned or configured.')
cisMulticastGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 3), InetAddressType())
if mibBuilder.loadTexts: cisMulticastGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupAddressType.setDescription('This object indicates the type of Internet address of the multicast group and source in this entry.')
cisMulticastGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: cisMulticastGroupAddress.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupAddress.setDescription('This object indicates IP multicast address of the group. Type of this address is indicated by cisMulticastGroupAddressType.')
cisMulticastGroupSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: cisMulticastGroupSourceAddress.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupSourceAddress.setDescription('This object indicates IP address of the source of the multicast traffic. Value of zero for this object indicates that the multicast traffic of the group indicated by the corresponding instance of cisMulticastGroupAddress can come from any source. Type of this address is indicated by cisMulticastGroupAddressType.')
cisMulticastGroupGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMulticastGroupGroupType.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupGroupType.setDescription("This object indicates whether this multicast group is learned or manually configured on the device. dynamic(1): this multicast group is learned from multicast traffic on this VLAN. static(2) : this multicast group is manually configured on the device. The group type is set to 'static' unconditionally if a port is joining that group via configuration.")
cisMulticastGroupIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 7), Bits().clone(namedValues=NamedValues(("igmpV1", 0), ("igmpV2", 1), ("igmpV3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMulticastGroupIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupIgmpVersion.setDescription('This object indicates the versions of IGMP packets received from this group.')
cisMulticastGroupSourceUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMulticastGroupSourceUpTime.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupSourceUpTime.setDescription('This object indicates the time (in seconds) since this source started sending multicast data for the multicast group.')
cisMulticastGroupSourceExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMulticastGroupSourceExpires.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupSourceExpires.setDescription("This object indicates the time (in seconds) the association of this source and the multicast group will be expired, if there is no host interests in receiving multicast data from it. This object has the value zero when value of the corresponding object cisMulticastGroupGroupType is 'static'.")
cisMulticastGroupInclHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMulticastGroupInclHostCount.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupInclHostCount.setDescription('This object indicates the number of hosts that are in INCLUDE mode for the group.')
cisMulticastGroupExclHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMulticastGroupExclHostCount.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupExclHostCount.setDescription('This object indicates the number of hosts that are in EXCLUDE mode for the group.')
cisMulticastGroupPortListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 3), )
if mibBuilder.loadTexts: cisMulticastGroupPortListTable.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupPortListTable.setDescription('Table containing a list of ports joining multicast groups.')
cisMulticastGroupPortListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 3, 1), ).setIndexNames((0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupVlanIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupCeVlanIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupAddressType"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupAddress"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupSourceAddress"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupPortRangeIndex"))
if mibBuilder.loadTexts: cisMulticastGroupPortListEntry.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupPortListEntry.setDescription('An entry containing a list of ports joining a multicast group.')
cisMulticastGroupPortRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 3, 1, 1), CiscoPortListRange())
if mibBuilder.loadTexts: cisMulticastGroupPortRangeIndex.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupPortRangeIndex.setDescription('This object indicates the bridge-port range of this row.')
cisMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 3, 1, 2), CiscoPortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisMulticastGroupPortList.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupPortList.setDescription("The set of ports that joining a multicast group. It has the information of up to 2k ports with the port number starting from the information indicated in cisMcastPortRangeIndex object of the same row. For example, if the value of cisMcastPortRangeIndex is 'twoKto4K', the port number indicated in this object starting from 2049 and ending to 4096. A port number is the value of dot1dBasePort for the port in the BRIDGE-MIB (RFC 4188).")
cisMulticastGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4), )
if mibBuilder.loadTexts: cisMulticastGroupConfigTable.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfigTable.setDescription('A list of configured multicast group and associated ports in the system.')
cisMulticastGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1), ).setIndexNames((0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfVlanIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfCeVlanIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfAddressType"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfAddress"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfSourceAddress"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfPortRange"))
if mibBuilder.loadTexts: cisMulticastGroupConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfigEntry.setDescription('An entry of multicast group and its associated ports, which is configured manually.')
cisMulticastGroupConfVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cisMulticastGroupConfVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfVlanIndex.setDescription('This object specifies the VLAN in which the group is configured.')
cisMulticastGroupConfCeVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1, 2), VlanIndex())
if mibBuilder.loadTexts: cisMulticastGroupConfCeVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfCeVlanIndex.setDescription('This object specifies the Customer Equipment (CE) VLAN in which the group is configured.')
cisMulticastGroupConfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1, 3), InetAddressType())
if mibBuilder.loadTexts: cisMulticastGroupConfAddressType.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfAddressType.setDescription('This object specifies the type of Internet address of multicast group and source in this entry.')
cisMulticastGroupConfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: cisMulticastGroupConfAddress.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfAddress.setDescription('This object specifies IP address of the multicast group. Type of this address is indicated by cisMulticastGroupConfAddressType.')
cisMulticastGroupConfSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: cisMulticastGroupConfSourceAddress.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfSourceAddress.setDescription('This object specifies the IP address of the source of the multicast traffic for this group. Value of zero for this object indicates that the multicast traffic of this group can come from any source. Type of this address is indicated by cisMulticastGroupConfAddressType.')
cisMulticastGroupConfPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1, 6), CiscoPortListRange())
if mibBuilder.loadTexts: cisMulticastGroupConfPortRange.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfPortRange.setDescription('This object specifies the bridge-port range of this row..')
cisMulticastGroupConfPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1, 7), CiscoPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisMulticastGroupConfPortList.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfPortList.setDescription("The set of ports that are configured to join a multicast group. It has the information of up to 2k ports with the port number starting from the information indicated in cisMcastPortRangeIndex object of the same row. For example, if the value of cisMulticastGroupConfPortRange is 'twoKto4K', the port number indicated in this object starting from 2049 and ending to 4096. A port number is the value of dot1dBasePort for the port in the BRIDGE-MIB (RFC 4188).")
cisMulticastGroupConfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1, 8), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisMulticastGroupConfStorageType.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfStorageType.setDescription('This object specifies the storage type of this conceptual row.')
cisMulticastGroupConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 7, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisMulticastGroupConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfRowStatus.setDescription('This object is used to manage creation, deletion and modification of rows in this table. Once a row becomes active, value in any column within such row can not be modified.')
cisL2EntryLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 8, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisL2EntryLimit.setStatus('current')
if mibBuilder.loadTexts: cisL2EntryLimit.setDescription('Specifies the maximum number of Layer 2 multicast entries that IGMP Snooping can install in the Layer 2 forwarding table. For multicast groups not being installed in the Layer 2 forwarding table due to exceeding the limitation, their traffic will be flooded within the VLAN. Value of zero for this object indicates that there is no limitation on the number of Layer 2 multicast entries which can be installed in the Layer 2 forwarding table.')
cisEntryTrackingLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 8, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisEntryTrackingLimit.setStatus('current')
if mibBuilder.loadTexts: cisEntryTrackingLimit.setDescription('Specifies the maximum number of entries that can be installed in the tracking database. Value of zero for this object indicates that no entry can be installed to the tracking database.')
cisSourceOnlyPercentageScanLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 8, 3), Percent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisSourceOnlyPercentageScanLimit.setStatus('current')
if mibBuilder.loadTexts: cisSourceOnlyPercentageScanLimit.setDescription('Specifies the percentage of IGMP Snooping Source Only entries to be processed in each Source Only timeout period, in which they will be timed out in batches. Entries not processed due to this limitation will remain in the Layer 2 forwarding table. Value of zero for this object indicates that Source Only entries scan will not be performed.')
cisSourceOnlyLearningLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 8, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisSourceOnlyLearningLimit.setStatus('current')
if mibBuilder.loadTexts: cisSourceOnlyLearningLimit.setDescription('Specifies the maximum number of Layer 2 multicast Source Only entries that IGMP Snooping can install in the Layer 2 forwarding table. If the number of multicast Source Only groups in the system exceeds this limit, snooping entries will not be installed for the over-limit groups and Source Only traffic for these groups will be flooded within the VLAN. Value of zero for this object indicates that there is no limitation on the number of Source Only entries which can be installed in the Layer 2 forwarding table.')
cisQuerierEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisQuerierEnabled.setStatus('current')
if mibBuilder.loadTexts: cisQuerierEnabled.setDescription("Specifies if IGMP Snooping Querier function is globally enabled at the device level. Setting this object to 'false' disabled IGMP Snooping Querier function globally, thus disabling the feature at each VLAN. Setting this object to 'true' enables IGMP Snooping Querier in the system, whether the feature is running at each VLAN or not is controlled by the corresponding entry in cisIgmpQuerierTable.")
cisQuerierTcnQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisQuerierTcnQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cisQuerierTcnQueryInterval.setDescription('Specifies the TCN query interval time when the device is acting as the active querier. This value will be used at each VLAN if value of the corresponding instance of cisIgmpQuerierTcnQueryInterval is not configured.')
cisQuerierTimerExpiry = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisQuerierTimerExpiry.setStatus('current')
if mibBuilder.loadTexts: cisQuerierTimerExpiry.setDescription('Specifies the querier expiration timer. This value will be used at each VLAN if value of the corresponding instance of cisIgmpQuerierTimerExpiry is not configured.')
cisQuerierMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9, 4), Unsigned32()).setUnits('one-tenth of second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisQuerierMaxResponseTime.setReference('RFC 3376')
if mibBuilder.loadTexts: cisQuerierMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: cisQuerierMaxResponseTime.setDescription('Specifies the Max Response Time value of queries generated by IGMP Snooping Querier. This value will be used at each VLAN if value of the corresponding instance of cisIgmpQuerierMaxResponseTime is not configured.')
cisQuerierQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisQuerierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cisQuerierQueryInterval.setDescription('Specifies the interval between IGMP queries. This value will be used at each VLAN if value of the corresponding instance of cisIgmpQuerierQueryInterval is not configured.')
cisQuerierAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisQuerierAddressType.setStatus('current')
if mibBuilder.loadTexts: cisQuerierAddressType.setDescription('This object indicates the type of Internet address of the IGMP Querier associating with this device when it is acting as an IGMP Snooping Querier.')
cisQuerierAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: cisQuerierAddress.setDescription('Specifies the Internet address of the IGMP Querier associating with this device when it is acting as an IGMP Snooping Querier. This address will be used by IGMP Snooping Querier feature at each VLAN if no corresponding IGMP Snooping Querier is configured for that VLAN. The type of this address is determined by value of cisQuerierAddressType object.')
cisQuerierVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9, 8), CisIgmpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: cisQuerierVersion.setDescription("Specifies the IGMP version that the Querier feature uses. This value will be used at each VLAN if value of the corresponding instance of cisIgmpQuerierAdminVersion is 'unknown'.")
cisQuerierTcnQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 9, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisQuerierTcnQueryCount.setStatus('current')
if mibBuilder.loadTexts: cisQuerierTcnQueryCount.setDescription('Specifies the number of TCN queries to be executed upon receiving TCN, when the device is acting as the active querier. This value will be used at each VLAN if value of the corresponding instance of cisVlanQuerierTcnQueryCount is not configured.')
cisIfLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 1), )
if mibBuilder.loadTexts: cisIfLimitTable.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitTable.setDescription('Table containing a list of IGMP Snooping limit filters.')
cisIfLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisIfLimitVlanNumber"))
if mibBuilder.loadTexts: cisIfLimitEntry.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitEntry.setDescription('Entry containing IGMP Snooping limit filters. A limit filter can be applied on a Layer2 interface, and VLAN(s) carried by the interface when it is in trunk mode.')
cisIfLimitVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 1, 1, 1), VlanIndexOrZero())
if mibBuilder.loadTexts: cisIfLimitVlanNumber.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitVlanNumber.setDescription('Specifies the VLAN which IGMP Snooping filters configured in this entry will be applied on when the interface is in trunk mode. Value of zero indicates that the corresponding filters are applicable to every VLAN carried by the trunk when the interface is in trunk mode, or the interface itself if it is in not in trunk mode.')
cisIfLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfLimitMax.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitMax.setDescription('Specifies the maximum number of IGMP group and channels that allowed on the interaface, or VLAN(s) carried by the interface if it is in trunk mode.')
cisIfLimitExcludeAccessGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 1, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfLimitExcludeAccessGrp.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitExcludeAccessGrp.setDescription('Specifies the access group that is excluded from the filter configured via cisIfLimitMax.')
cisIfLimitStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 1, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfLimitStorageType.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitStorageType.setDescription('Specifies the storage type of this conceptual row.')
cisIfLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitRowStatus.setDescription('This object is used to manage creation, deletion and modification of rows in this table. All writable objects in this row may be modified at any time.')
cisIfLimitTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 2), )
if mibBuilder.loadTexts: cisIfLimitTotalTable.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitTotalTable.setDescription('Table containing a list of IGMP Snooping total limit filters.')
cisIfLimitTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cisIfLimitTotalEntry.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitTotalEntry.setDescription('Entry containing IGMP Snooping total limit filters for a Layer 2 interface.')
cisIfLimitTotalLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfLimitTotalLimitMax.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitTotalLimitMax.setDescription('Specifies the maximum total number of IGMP group or channels that allows on all VLANs carried by the interaface when it is in trunk mode.')
cisIfLimitTotalExcludeAccessGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfLimitTotalExcludeAccessGrp.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitTotalExcludeAccessGrp.setDescription('Specifies the access group that is excluded from the limitation specified by cisIfToltalLimitChannelsAllowed.')
cisIfLimitTotalStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 2, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfLimitTotalStorageType.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitTotalStorageType.setDescription('Specifies the storage type of this conceptual row.')
cisIfLimitTotalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfLimitTotalRowStatus.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitTotalRowStatus.setDescription('This object is used to manage creation, deletion and modification of rows in this table. All writable objects in this row may be modified at any time.')
cisIfAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 3), )
if mibBuilder.loadTexts: cisIfAccessGroupTable.setStatus('current')
if mibBuilder.loadTexts: cisIfAccessGroupTable.setDescription('Table containing a list of IGMP Snooping filters based on access-group.')
cisIfAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisIfAccessGroupVlan"))
if mibBuilder.loadTexts: cisIfAccessGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cisIfAccessGroupEntry.setDescription('An IGMP Snooping access-group filter, containing an access control list describing which IGMP groups or channels can be joined on the interface, and/or on which specific VLAN(s) the filter should be applied when the interface is in trunk mode.')
cisIfAccessGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 3, 1, 1), VlanIndexOrZero())
if mibBuilder.loadTexts: cisIfAccessGroupVlan.setStatus('current')
if mibBuilder.loadTexts: cisIfAccessGroupVlan.setDescription('Specifies the VLAN which IGMP Snooping filters configured in this entry will be applied on when the interface is in trunk mode. Value of zero indicates that the corresponding filters are applicable to every VLAN carried by the trunk when the interface is in trunk mode, or the interface itself if it is in not in trunk mode.')
cisIfAccessGroupsChannelsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfAccessGroupsChannelsAllowed.setStatus('current')
if mibBuilder.loadTexts: cisIfAccessGroupsChannelsAllowed.setDescription('Specifies the access group to indicate which IGMP groups or channels can be joined.')
cisIfAccessGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 3, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfAccessGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: cisIfAccessGroupStorageType.setDescription('Specifies the storage type of this conceptual row.')
cisIfAccessGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cisIfAccessGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cisIfAccessGroupRowStatus.setDescription('This object is used to manage creation, deletion and modification of rows in this table. Once a row becomes active, value in any column within such row can not be modified.')
cisVlanFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 4), )
if mibBuilder.loadTexts: cisVlanFilterConfigTable.setStatus('current')
if mibBuilder.loadTexts: cisVlanFilterConfigTable.setDescription('Table containing a list of VLAN. An entry will exist for each VLAN which supports IGMP Snooping feature.')
cisVlanFilterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 4, 1), ).setIndexNames((0, "CISCO-IGMP-SNOOPING-MIB", "cisVlanIndex"))
if mibBuilder.loadTexts: cisVlanFilterConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cisVlanFilterConfigEntry.setDescription('Entry containing IGMP Snooping filters configuration for a particular VLAN.')
cisVlanFilterAccessGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 4, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanFilterAccessGroup.setStatus('current')
if mibBuilder.loadTexts: cisVlanFilterAccessGroup.setDescription('Specifies the access group to control which IGMP group or channels can be joined on this VLAN. A zero length string of this instance indicates that there is no access-group based filter applied to this VLAN.')
cisVlanFilterLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanFilterLimitMax.setStatus('current')
if mibBuilder.loadTexts: cisVlanFilterLimitMax.setDescription('Specifies the maximum number of IGMP groups or channels that allows on each switch port in this VLAN, or trunk ports carrying this VLAN. Value of zero indicates that there is no limit of number of IGMP groups or channels that can be joined on switch ports in this VLAN, or trunk ports carrying this VLAN.')
cisVlanFilterLimitExclAccessGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 4, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanFilterLimitExclAccessGrp.setStatus('current')
if mibBuilder.loadTexts: cisVlanFilterLimitExclAccessGrp.setDescription('Specifies the access group that is excluded from the filter configured via cisVlanFilterLimitMax.')
cisVlanFilterMinVersionAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 4, 1, 4), CisIgmpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanFilterMinVersionAllowed.setStatus('current')
if mibBuilder.loadTexts: cisVlanFilterMinVersionAllowed.setDescription("Specifies the minimum version of IGMP hosts allowed on this VLAN. Value 'unknown' is not configurable for this object.")
cisFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 5), )
if mibBuilder.loadTexts: cisFilterStatsTable.setStatus('current')
if mibBuilder.loadTexts: cisFilterStatsTable.setDescription('A table containing statistics information about IGMP Snooping filters in the system. An entry is created for each IGMP Snooping capable interface in the system, or each VLAN carried by an interface when it is in trunk mode.')
cisFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IGMP-SNOOPING-MIB", "cisFilterStatsVlanNumber"))
if mibBuilder.loadTexts: cisFilterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cisFilterStatsEntry.setDescription('An entry providing statistic information about IGMP Snooping filter on an IGMP Snooping capable interface, or on a VLAN that the interface carries when it is in trunk mode.')
cisFilterStatsVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 5, 1, 1), VlanIndexOrZero())
if mibBuilder.loadTexts: cisFilterStatsVlanNumber.setStatus('current')
if mibBuilder.loadTexts: cisFilterStatsVlanNumber.setDescription('Indicates the VLAN which the entry provides statistics information for, when the interface is in trunk mode. Value of zero indicates that statistics information provided in this entry is for the interface that is in access-mode.')
cisFilterAccessGroupDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisFilterAccessGroupDenied.setStatus('current')
if mibBuilder.loadTexts: cisFilterAccessGroupDenied.setDescription('Indicates the number of join-request denied due to Access-Group filter on the interface, or on the VLAN indicated by the value of cisFilterStatsVlanNumber when the interface is in trunk mode.')
cisFilterLimitDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisFilterLimitDenied.setStatus('current')
if mibBuilder.loadTexts: cisFilterLimitDenied.setDescription('Indicates the number of join-request denied due to exceeding the maximum number of IGMP groups or channels allowed on the interface, or on the VLAN indicated by the value of cisFilterStatsVlanNumber when the interface is in trunk mode.')
cisFilterTotalLimitDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisFilterTotalLimitDenied.setStatus('current')
if mibBuilder.loadTexts: cisFilterTotalLimitDenied.setDescription('Indicates the number of join-request denied due to exceeding the maximum number of IGMP groups or channels across all VLANs on the interface, when it is in trunk mode.')
cisFilterMinVersionDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 10, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cisFilterMinVersionDenied.setStatus('current')
if mibBuilder.loadTexts: cisFilterMinVersionDenied.setDescription('Indicates the number of join-request denied due to originating from hosts with lower than minimum required IGMP version on the interface.')
cisVlanExplicitTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 11, 1), )
if mibBuilder.loadTexts: cisVlanExplicitTrackingTable.setStatus('current')
if mibBuilder.loadTexts: cisVlanExplicitTrackingTable.setDescription('Table containing configuration information of Explicit Tracking for IGMP in the system. Explicit Tracking allows the device to track the IGMP membership status of all hosts in the system that respond to IGMP Membership Queries. Tracking information is used to build the explicit-tracking database to serve for fast-leave processing for IGMPv3 hosts, proxy reporting and statistic collection. An entry is created for each IGMP Snooping capable VLAN found in the device.')
cisVlanExplicitTrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 11, 1, 1), ).setIndexNames((0, "CISCO-IGMP-SNOOPING-MIB", "cisVlanIndex"))
if mibBuilder.loadTexts: cisVlanExplicitTrackingEntry.setStatus('current')
if mibBuilder.loadTexts: cisVlanExplicitTrackingEntry.setDescription('An entry of Explicit Tracking configuration for a corresponding VLAN.')
cisVlanExplicitTrackingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 11, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanExplicitTrackingEnabled.setStatus('current')
if mibBuilder.loadTexts: cisVlanExplicitTrackingEnabled.setDescription('This object specifies whether Explicit Tracking is enabled on this VLAN.')
cisVlanExplicitTrackingLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 263, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cisVlanExplicitTrackingLimit.setStatus('current')
if mibBuilder.loadTexts: cisVlanExplicitTrackingLimit.setDescription('This object specifies the maximum number of entries that can be installed in the explicit-tracking database for this VLAN. Value of zero for this object indicates that tracking information for this VLAN will not be installed to the explicit-tracking database for this VLAN. Value of -1 for this object indicates that there is no limitation on the number of entries that can be installed to the explicit-tracking database for this VLAN.')
cisMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 2))
cisMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 1))
cisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2))
cisV2Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 1, 1)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisSystemGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisSystemV2Group"), ("CISCO-IGMP-SNOOPING-MIB", "cisStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisV2Compliance = cisV2Compliance.setStatus('deprecated')
if mibBuilder.loadTexts: cisV2Compliance.setDescription('The compliance statement for device support IGMPv1/v2 Snooping protocol.')
cisV3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 1, 2)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisSystemGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisSystemV2Group"), ("CISCO-IGMP-SNOOPING-MIB", "cisSystemV3Group"), ("CISCO-IGMP-SNOOPING-MIB", "cisStatsGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3StatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisV3Compliance = cisV3Compliance.setStatus('deprecated')
if mibBuilder.loadTexts: cisV3Compliance.setDescription('The compliance statement for device support IGMPv3 Snooping protocol.')
cisIgmpSnoopingMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 1, 3)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisBaseConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalTcnGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalSourceOnlyLearnGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalIgmpV3ConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalIgmpV3InfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisExtConfig1Group"), ("CISCO-IGMP-SNOOPING-MIB", "cisExtConfig2Group"), ("CISCO-IGMP-SNOOPING-MIB", "cisStatsGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3StatsGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisRateLimitGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierInfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastRouterConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupInfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIgmpSnoopingMIBCompliance = cisIgmpSnoopingMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cisIgmpSnoopingMIBCompliance.setDescription('The compliance statement for device supporting IGMP Snooping.This compliance is deprecated and superceded by cisIgmpSnoopingMIBCompliance2.')
cisIgmpSnoopingMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 1, 4)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisBaseConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalTcnGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalIgmpV3ConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalIgmpV3InfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisExtConfig1Group"), ("CISCO-IGMP-SNOOPING-MIB", "cisExtConfig2Group"), ("CISCO-IGMP-SNOOPING-MIB", "cisStatsGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3StatsGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierInfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastRouterConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupInfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisL2EntryLimitGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisTrackingLimitGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyLimitGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisRateLimitGroup2"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanConfigGroup2"), ("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyAgeTimerInSecGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIgmpSnoopingMIBCompliance2 = cisIgmpSnoopingMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: cisIgmpSnoopingMIBCompliance2.setDescription('The compliance statement for device supporting IGMP Snooping.')
cisIgmpSnoopingMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 1, 5)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisBaseConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalTcnGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalIgmpV3ConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisGlobalIgmpV3InfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisExtConfig1Group"), ("CISCO-IGMP-SNOOPING-MIB", "cisExtConfig2Group"), ("CISCO-IGMP-SNOOPING-MIB", "cisStatsGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3StatsGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierInfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisL2EntryLimitGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisTrackingLimitGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyLimitGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisRateLimitGroup2"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanConfigGroup2"), ("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyAgeTimerInSecGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupInfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupPortInfoGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastRouterConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisLeaveQueryConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierGlobalConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierConfigExtGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanExplicitTrackingCfgGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisRobustnessConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisTimeToLiveConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisRouterAlertConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitTotalGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfAccessGroupGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanFilterConfigGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisFilterStatisticsGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierGlobalTcnQueryCountGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierTcnQueryPendingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIgmpSnoopingMIBCompliance3 = cisIgmpSnoopingMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: cisIgmpSnoopingMIBCompliance3.setDescription('The compliance statement for device supporting IGMP Snooping.')
cisSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 1)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIgmpSnoopingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisSystemGroup = cisSystemGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cisSystemGroup.setDescription('A collection of object(s) providing global system information about, and control over, IGMP Snooping protocol operation on device.')
cisSystemV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 2)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisFastLeaveEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisSystemV2Group = cisSystemV2Group.setStatus('deprecated')
if mibBuilder.loadTexts: cisSystemV2Group.setDescription('A collection of additional objects providing global system information about, and control over, IGMPv2 Snooping protocol operation on the device.')
cisSystemV3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 3)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisV3ProcessEnabledAdminStatus"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3ProcessEnabledOperStatus"), ("CISCO-IGMP-SNOOPING-MIB", "cisFastBlockEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisSystemV3Group = cisSystemV3Group.setStatus('deprecated')
if mibBuilder.loadTexts: cisSystemV3Group.setDescription('A collection of additional objects providing global system information about, and control over, IGMPv3 Snooping protocol operation on the device.')
cisStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 4)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisTxGeneralQueries"), ("CISCO-IGMP-SNOOPING-MIB", "cisTxGroupSpecificQueries"), ("CISCO-IGMP-SNOOPING-MIB", "cisTxReports"), ("CISCO-IGMP-SNOOPING-MIB", "cisTxLeaves"), ("CISCO-IGMP-SNOOPING-MIB", "cisRxGeneralQueries"), ("CISCO-IGMP-SNOOPING-MIB", "cisRxGroupSpecificQueries"), ("CISCO-IGMP-SNOOPING-MIB", "cisRxReports"), ("CISCO-IGMP-SNOOPING-MIB", "cisRxLeaves"), ("CISCO-IGMP-SNOOPING-MIB", "cisRxValidPackets"), ("CISCO-IGMP-SNOOPING-MIB", "cisRxInvalidPackets"), ("CISCO-IGMP-SNOOPING-MIB", "cisRxOtherPackets"), ("CISCO-IGMP-SNOOPING-MIB", "cisRxMACGeneralQueries"), ("CISCO-IGMP-SNOOPING-MIB", "cisRxTopoNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisStatsGroup = cisStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cisStatsGroup.setDescription('A collection of object(s) providing statistics information of IGMP Snooping version 1 and 2.')
cisV3StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 5)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisV3Allows"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3Blocks"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3IsIncluded"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3IsExcluded"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3ToIncluded"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3ToExcluded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisV3StatsGroup = cisV3StatsGroup.setStatus('current')
if mibBuilder.loadTexts: cisV3StatsGroup.setDescription('A collection of object(s) providing additional statistics information of IGMPv3 Snooping.')
cisBaseConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 6)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIgmpSnoopingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisBaseConfigGroup = cisBaseConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisBaseConfigGroup.setDescription('A basic collection of object(s) providing IGMP Snooping global configuration.')
cisGlobalIgmpV3ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 7)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisV3ProcessEnabledAdminStatus"), ("CISCO-IGMP-SNOOPING-MIB", "cisV3ProcessEnabledOperStatus"), ("CISCO-IGMP-SNOOPING-MIB", "cisFastBlockEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisGlobalIgmpV3ConfigGroup = cisGlobalIgmpV3ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisGlobalIgmpV3ConfigGroup.setDescription('A collection of global IGMPv3 Snooping related objects.')
cisGlobalIgmpV3InfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 8)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisV3SnoopingSupport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisGlobalIgmpV3InfoGroup = cisGlobalIgmpV3InfoGroup.setStatus('current')
if mibBuilder.loadTexts: cisGlobalIgmpV3InfoGroup.setDescription('A collection of global IGMPv3 Snooping related objects.')
cisExtConfig1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 9)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisFastLeaveEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisAdminMode"), ("CISCO-IGMP-SNOOPING-MIB", "cisOperMode"), ("CISCO-IGMP-SNOOPING-MIB", "cisLeaveQueryType"), ("CISCO-IGMP-SNOOPING-MIB", "cisAddressAliasingMode"), ("CISCO-IGMP-SNOOPING-MIB", "cisFallbackTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisExtConfig1Group = cisExtConfig1Group.setStatus('current')
if mibBuilder.loadTexts: cisExtConfig1Group.setDescription('A miscellaneous collection of object(s) for the device that supports global IGMP Snooping configuration.')
cisExtConfig2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 10)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisReportSuppressionEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisExtConfig2Group = cisExtConfig2Group.setStatus('current')
if mibBuilder.loadTexts: cisExtConfig2Group.setDescription('An extended collection of miscellaneous global configuration IGMP Snooping objects.')
cisGlobalTcnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 11)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisTopoChangeFloodQueryCount"), ("CISCO-IGMP-SNOOPING-MIB", "cisTopoChangeQuerySolicitEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisGlobalTcnGroup = cisGlobalTcnGroup.setStatus('current')
if mibBuilder.loadTexts: cisGlobalTcnGroup.setDescription('A collection of global Topology Change Notification (TCN) related configuration objects.')
cisGlobalSourceOnlyLearnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 12)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyLearningEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyEntryAgeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisGlobalSourceOnlyLearnGroup = cisGlobalSourceOnlyLearnGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cisGlobalSourceOnlyLearnGroup.setDescription('A collection of global Source Only entry learning objects.')
cisRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 13)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisGeneralQueryRateLimit"), ("CISCO-IGMP-SNOOPING-MIB", "cisDvmrpRateLimit"), ("CISCO-IGMP-SNOOPING-MIB", "cisMospf1RateLimit"), ("CISCO-IGMP-SNOOPING-MIB", "cisMospf2RateLimit"), ("CISCO-IGMP-SNOOPING-MIB", "cisPimV2RateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisRateLimitGroup = cisRateLimitGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cisRateLimitGroup.setDescription('A collection of object(s) providing rate-limit information of protocol packets handling in IGMP Snooping.')
cisVlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 14)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisVlanIgmpSnoopingEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanFastLeaveEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanIgmpSnoopingOperMode"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanIgmpSnoopingLearningMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisVlanConfigGroup = cisVlanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisVlanConfigGroup.setDescription('A collectoin of objects for VLAN configuration of IGMP Snooping.')
cisIgmpQuerierConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 15)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIgmpQuerierConfigGroup = cisIgmpQuerierConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierConfigGroup.setDescription('A collection of object(s) for IGMP Querier configuration of IGMP Snooping.')
cisIgmpQuerierInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 16)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierVersion"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierAddressType"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierAddress"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIgmpQuerierInfoGroup = cisIgmpQuerierInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierInfoGroup.setDescription('A collection of object(s) for IGMP Querier information.')
cisMcastRouterConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 17)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisMcastRouterType"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastRouterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisMcastRouterConfigGroup = cisMcastRouterConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastRouterConfigGroup.setDescription('A collection of object(s) providing multicast router port information.')
cisMcastGroupInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 18)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupFilterMode"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupIgmpVersion"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupIncludeHostCount"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupExcludeHostCount"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastGroupPortList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisMcastGroupInfoGroup = cisMcastGroupInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cisMcastGroupInfoGroup.setDescription('A collection of object(s) providing multicast group information.')
cisIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 19)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIfTopoChangeFloodEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIfConfigGroup = cisIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisIfConfigGroup.setDescription('A collection of object(s) providing IGMP Snoop configuration on an interface.')
cisL2EntryLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 20)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisL2EntryLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisL2EntryLimitGroup = cisL2EntryLimitGroup.setStatus('current')
if mibBuilder.loadTexts: cisL2EntryLimitGroup.setDescription('A collection of object(s) providing Layer 2 multicast entries limit configuration and information in IGMP Snooping.')
cisTrackingLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 21)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisEntryTrackingLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisTrackingLimitGroup = cisTrackingLimitGroup.setStatus('current')
if mibBuilder.loadTexts: cisTrackingLimitGroup.setDescription('A collection of object(s) providing configuration and information of tracking database limitation in IGMP Snooping.')
cisSourceOnlyLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 22)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyPercentageScanLimit"), ("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyLearningLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisSourceOnlyLimitGroup = cisSourceOnlyLimitGroup.setStatus('current')
if mibBuilder.loadTexts: cisSourceOnlyLimitGroup.setDescription('A collection of object(s) providing Source Only learning limit configuration and information in IGMP Snooping.')
cisRateLimitGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 23)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisRateLimitGroup2 = cisRateLimitGroup2.setStatus('current')
if mibBuilder.loadTexts: cisRateLimitGroup2.setDescription('A collection of object(s) providing additional rate-limit information of protocol packets handling in IGMP Snooping.')
cisVlanConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 24)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisVlanReportSuppressionEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanLeaveQueryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisVlanConfigGroup2 = cisVlanConfigGroup2.setStatus('current')
if mibBuilder.loadTexts: cisVlanConfigGroup2.setDescription('A collection of object(s) providing per VLAN configuration of Report Suppression and Leave Query Interval for IGMP Snooping.')
cisSourceOnlyAgeTimerInSecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 25)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyLearningEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisSourceOnlyEntryAgingTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisSourceOnlyAgeTimerInSecGroup = cisSourceOnlyAgeTimerInSecGroup.setStatus('current')
if mibBuilder.loadTexts: cisSourceOnlyAgeTimerInSecGroup.setDescription('A collection of object(s) providing configuration and information of Source Only learning control and age timer in seconds.')
cisMulticastGroupInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 26)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupGroupType"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupIgmpVersion"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupSourceUpTime"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupSourceExpires"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupInclHostCount"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupExclHostCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisMulticastGroupInfoGroup = cisMulticastGroupInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupInfoGroup.setDescription('A collection of object(s) providing information of multicast group.')
cisMulticastGroupPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 27)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupPortList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisMulticastGroupPortInfoGroup = cisMulticastGroupPortInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupPortInfoGroup.setDescription('A collection of object(s) providing information of ports joining multicast groups.')
cisMulticastGroupConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 28)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfPortList"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfStorageType"), ("CISCO-IGMP-SNOOPING-MIB", "cisMulticastGroupConfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisMulticastGroupConfigGroup = cisMulticastGroupConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisMulticastGroupConfigGroup.setDescription('A collection of object(s) providing configuration of multicast groups in the system.')
cisMulticastRouterConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 29)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisMcastRouterConfigRouterType"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastRouterConfigStorageType"), ("CISCO-IGMP-SNOOPING-MIB", "cisMcastRouterConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisMulticastRouterConfigGroup = cisMulticastRouterConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisMulticastRouterConfigGroup.setDescription('A collection of object(s) providing configuration and information of multicast router ports in the system.')
cisLeaveQueryConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 30)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisLastMemberQueryCount"), ("CISCO-IGMP-SNOOPING-MIB", "cisLastMemberQueryInterval"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanLastMemberQueryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisLeaveQueryConfigGroup = cisLeaveQueryConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisLeaveQueryConfigGroup.setDescription('A collection of object(s) providing configuration and information of Leave Query for IGMP Snooping.')
cisQuerierGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 31)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisQuerierEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierTcnQueryInterval"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierTimerExpiry"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierMaxResponseTime"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierQueryInterval"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierAddressType"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierAddress"), ("CISCO-IGMP-SNOOPING-MIB", "cisQuerierVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisQuerierGlobalConfigGroup = cisQuerierGlobalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisQuerierGlobalConfigGroup.setDescription('A collection of object(s) providing global configuration of Querier function in the system.')
cisIgmpQuerierConfigExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 32)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierTcnQueryCount"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierTcnQueryInterval"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierTimerExpiry"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierMaxResponseTime"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierQueryInterval"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierAdminAddressType"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierAdminAddress"), ("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierAdminVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIgmpQuerierConfigExtGroup = cisIgmpQuerierConfigExtGroup.setStatus('current')
if mibBuilder.loadTexts: cisIgmpQuerierConfigExtGroup.setDescription('A collection of object(s) providing configuration of Querier parameters for VLANs in the system.')
cisRobustnessConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 33)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisRobustnessVariable"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanRobustnessVariable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisRobustnessConfigGroup = cisRobustnessConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisRobustnessConfigGroup.setDescription('A collection of object(s) providing configuration of Robustness parameter for IGMP Snooping.')
cisTimeToLiveConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 34)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisTimeToLiveCheckEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanTimeToLiveCheckEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisTimeToLiveConfigGroup = cisTimeToLiveConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisTimeToLiveConfigGroup.setDescription('A collection of object(s) providing configuration of Time-To-Leave for IGMP Snooping.')
cisRouterAlertConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 35)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisRouterAlertCheckEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanRouterAlertCheckEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisRouterAlertConfigGroup = cisRouterAlertConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisRouterAlertConfigGroup.setDescription('A collection of object(s) providing configuration of Router-Alert for IGMP Snooping.')
cisVlanExplicitTrackingCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 36)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisVlanExplicitTrackingEnabled"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanExplicitTrackingLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisVlanExplicitTrackingCfgGroup = cisVlanExplicitTrackingCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cisVlanExplicitTrackingCfgGroup.setDescription('A collection of object(s) providing configuration of Explicit Tracking feature on VLANs for IGMP Snooping.')
cisIfLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 37)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitMax"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitExcludeAccessGrp"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitStorageType"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIfLimitGroup = cisIfLimitGroup.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitGroup.setDescription('A collection of object(s) providing IGMP Snooping Limit filter configuration and information.')
cisIfLimitTotalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 38)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitTotalLimitMax"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitTotalExcludeAccessGrp"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitTotalStorageType"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfLimitTotalRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIfLimitTotalGroup = cisIfLimitTotalGroup.setStatus('current')
if mibBuilder.loadTexts: cisIfLimitTotalGroup.setDescription('A collection of object(s) providing IGMP Snooping Total Limit filter configuration and information.')
cisIfAccessGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 39)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIfAccessGroupsChannelsAllowed"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfAccessGroupStorageType"), ("CISCO-IGMP-SNOOPING-MIB", "cisIfAccessGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisIfAccessGroupGroup = cisIfAccessGroupGroup.setStatus('current')
if mibBuilder.loadTexts: cisIfAccessGroupGroup.setDescription('A collection of object(s) providing IGMP Snooping access-group filter configuration and information.')
cisVlanFilterConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 40)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisVlanFilterAccessGroup"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanFilterLimitMax"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanFilterLimitExclAccessGrp"), ("CISCO-IGMP-SNOOPING-MIB", "cisVlanFilterMinVersionAllowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisVlanFilterConfigGroup = cisVlanFilterConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cisVlanFilterConfigGroup.setDescription('A collection of object(s) providing VLAN-based filter configuration for IGMP Snooping.')
cisFilterStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 41)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisFilterAccessGroupDenied"), ("CISCO-IGMP-SNOOPING-MIB", "cisFilterLimitDenied"), ("CISCO-IGMP-SNOOPING-MIB", "cisFilterTotalLimitDenied"), ("CISCO-IGMP-SNOOPING-MIB", "cisFilterMinVersionDenied"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisFilterStatisticsGroup = cisFilterStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cisFilterStatisticsGroup.setDescription('A collection of object(s) providing statistics information about filters applied to IGMP packets.')
cisQuerierGlobalTcnQueryCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 42)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisQuerierTcnQueryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisQuerierGlobalTcnQueryCountGroup = cisQuerierGlobalTcnQueryCountGroup.setStatus('current')
if mibBuilder.loadTexts: cisQuerierGlobalTcnQueryCountGroup.setDescription('A collection of object(s) providing global querier TCN query count configuration and information for IGMP Snooping.')
cisQuerierTcnQueryPendingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 263, 2, 2, 43)).setObjects(("CISCO-IGMP-SNOOPING-MIB", "cisIgmpQuerierTcnQueryPending"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cisQuerierTcnQueryPendingGroup = cisQuerierTcnQueryPendingGroup.setStatus('current')
if mibBuilder.loadTexts: cisQuerierTcnQueryPendingGroup.setDescription('A collection of object(s) providing information about pending TCN queries for IGMP Snooping.')
mibBuilder.exportSymbols("CISCO-IGMP-SNOOPING-MIB", cisV3Blocks=cisV3Blocks, cisIgmpSnoopingMIBCompliance2=cisIgmpSnoopingMIBCompliance2, cisTopoChangeQuerySolicitEnabled=cisTopoChangeQuerySolicitEnabled, cisSourceOnlyAgeTimerInSecGroup=cisSourceOnlyAgeTimerInSecGroup, cisIgmpQuerierTable=cisIgmpQuerierTable, cisMcastGroupExcludeHostCount=cisMcastGroupExcludeHostCount, cisSystemV3Group=cisSystemV3Group, cisMcastRouterConfigVlanIndex=cisMcastRouterConfigVlanIndex, cisMulticastGroupInfo=cisMulticastGroupInfo, cisSystemInfo=cisSystemInfo, cisTxLeaves=cisTxLeaves, cisMulticastGroupConfAddress=cisMulticastGroupConfAddress, cisResourceLimitInfo=cisResourceLimitInfo, cisExplicitTrackingInfo=cisExplicitTrackingInfo, cisSourceOnlyLearningLimit=cisSourceOnlyLearningLimit, cisMcastRouterConfigRouterType=cisMcastRouterConfigRouterType, cisQuerierTcnQueryInterval=cisQuerierTcnQueryInterval, cisFilterStatsTable=cisFilterStatsTable, cisRxValidPackets=cisRxValidPackets, cisGlobalIgmpV3ConfigGroup=cisGlobalIgmpV3ConfigGroup, cisTopoChangeFloodQueryCount=cisTopoChangeFloodQueryCount, cisTrackingLimitGroup=cisTrackingLimitGroup, cisSourceOnlyLimitGroup=cisSourceOnlyLimitGroup, cisTxGroupSpecificQueries=cisTxGroupSpecificQueries, cisIgmpQuerierConfigGroup=cisIgmpQuerierConfigGroup, cisMcastGroupIncludeHostCount=cisMcastGroupIncludeHostCount, cisIfLimitTotalStorageType=cisIfLimitTotalStorageType, cisIfLimitStorageType=cisIfLimitStorageType, cisIgmpQuerierEnabled=cisIgmpQuerierEnabled, cisMulticastGroupInfoGroup=cisMulticastGroupInfoGroup, cisFallbackTime=cisFallbackTime, cisRxTopoNotifications=cisRxTopoNotifications, cisTxReports=cisTxReports, cisVlanConfigEntry=cisVlanConfigEntry, cisIgmpQuerierInterface=cisIgmpQuerierInterface, ciscoIgmpSnoopingNotification=ciscoIgmpSnoopingNotification, cisRxLeaves=cisRxLeaves, cisMcastGroupFilterMode=cisMcastGroupFilterMode, cisQuerierQueryInterval=cisQuerierQueryInterval, CisIgmpMode=CisIgmpMode, cisStatsGroup=cisStatsGroup, cisMulticastGroupConfigGroup=cisMulticastGroupConfigGroup, cisMulticastGroupConfAddressType=cisMulticastGroupConfAddressType, cisBaseConfigGroup=cisBaseConfigGroup, cisEntryTrackingLimit=cisEntryTrackingLimit, cisFilterAccessGroupDenied=cisFilterAccessGroupDenied, cisPimV2RateLimit=cisPimV2RateLimit, cisMcastRouterType=cisMcastRouterType, cisMulticastGroupAddress=cisMulticastGroupAddress, cisRxOtherPackets=cisRxOtherPackets, cisMcastRouterCfgEntry=cisMcastRouterCfgEntry, cisIfAccessGroupEntry=cisIfAccessGroupEntry, cisFilterStatsEntry=cisFilterStatsEntry, cisInterfaceStatsTable=cisInterfaceStatsTable, cisIgmpQuerierEntry=cisIgmpQuerierEntry, cisSourceOnlyEntryAgeTime=cisSourceOnlyEntryAgeTime, cisIfConfigTable=cisIfConfigTable, cisVlanLastMemberQueryCount=cisVlanLastMemberQueryCount, cisVlanConfigGroup=cisVlanConfigGroup, cisV2Compliance=cisV2Compliance, cisIgmpQuerierAdminAddressType=cisIgmpQuerierAdminAddressType, cisL2EntryLimitGroup=cisL2EntryLimitGroup, cisIgmpQuerierConfigExtGroup=cisIgmpQuerierConfigExtGroup, cisIgmpQuerierTcnQueryCount=cisIgmpQuerierTcnQueryCount, cisMcastGroupAddress=cisMcastGroupAddress, cisMulticastGroupPortRangeIndex=cisMulticastGroupPortRangeIndex, cisMulticastGroupPortListTable=cisMulticastGroupPortListTable, cisQuerierAddressType=cisQuerierAddressType, cisOperMode=cisOperMode, cisStatisticsInfo=cisStatisticsInfo, cisIfLimitExcludeAccessGrp=cisIfLimitExcludeAccessGrp, cisMcastRouterConfigEntry=cisMcastRouterConfigEntry, cisVlanFilterConfigEntry=cisVlanFilterConfigEntry, cisMcastRouterConfigRowStatus=cisMcastRouterConfigRowStatus, cisMcastGroupPortList=cisMcastGroupPortList, cisVlanConfigInfo=cisVlanConfigInfo, cisGlobalSourceOnlyLearnGroup=cisGlobalSourceOnlyLearnGroup, cisQuerierGlobalConfigGroup=cisQuerierGlobalConfigGroup, cisFastBlockEnabled=cisFastBlockEnabled, cisFilterStatsVlanNumber=cisFilterStatsVlanNumber, cisIfAccessGroupStorageType=cisIfAccessGroupStorageType, cisVlanFilterLimitMax=cisVlanFilterLimitMax, cisIgmpQuerierAddress=cisIgmpQuerierAddress, cisQuerierAddress=cisQuerierAddress, cisVlanFilterLimitExclAccessGrp=cisVlanFilterLimitExclAccessGrp, cisRateLimitGroup2=cisRateLimitGroup2, cisMulticastGroupVlanIndex=cisMulticastGroupVlanIndex, cisGlobalIgmpV3InfoGroup=cisGlobalIgmpV3InfoGroup, cisQuerierEnabled=cisQuerierEnabled, cisIfConfigInfo=cisIfConfigInfo, cisMospf1RateLimit=cisMospf1RateLimit, cisIfLimitEntry=cisIfLimitEntry, cisIfAccessGroupsChannelsAllowed=cisIfAccessGroupsChannelsAllowed, cisVlanTimeToLiveCheckEnabled=cisVlanTimeToLiveCheckEnabled, cisIgmpQuerierState=cisIgmpQuerierState, cisRateLimit=cisRateLimit, cisMulticastGroupPortInfoGroup=cisMulticastGroupPortInfoGroup, cisIfLimitGroup=cisIfLimitGroup, cisVlanFilterConfigTable=cisVlanFilterConfigTable, cisVlanConfigGroup2=cisVlanConfigGroup2, cisV3ProcessEnabledOperStatus=cisV3ProcessEnabledOperStatus, cisExtConfig1Group=cisExtConfig1Group, cisQuerierVersion=cisQuerierVersion, cisVlanExplicitTrackingCfgGroup=cisVlanExplicitTrackingCfgGroup, cisVlanFilterConfigGroup=cisVlanFilterConfigGroup, cisIfAccessGroupVlan=cisIfAccessGroupVlan, cisIgmpQuerierQueryInterval=cisIgmpQuerierQueryInterval, cisFilterTotalLimitDenied=cisFilterTotalLimitDenied, cisIfLimitTotalTable=cisIfLimitTotalTable, cisVlanFastLeaveEnabled=cisVlanFastLeaveEnabled, cisMcastRouterConfigStorageType=cisMcastRouterConfigStorageType, cisIgmpQuerierAddressType=cisIgmpQuerierAddressType, cisMulticastGroupInclHostCount=cisMulticastGroupInclHostCount, cisMulticastGroupPortListEntry=cisMulticastGroupPortListEntry, cisVlanIndex=cisVlanIndex, cisIgmpQuerierAdminVersion=cisIgmpQuerierAdminVersion, cisMulticastGroupConfStorageType=cisMulticastGroupConfStorageType, cisQuerierMaxResponseTime=cisQuerierMaxResponseTime, cisSystemGroup=cisSystemGroup, cisRouterAlertConfigGroup=cisRouterAlertConfigGroup, cisVlanRouterAlertCheckEnabled=cisVlanRouterAlertCheckEnabled, cisIfAccessGroupRowStatus=cisIfAccessGroupRowStatus, cisIfLimitTotalGroup=cisIfLimitTotalGroup, cisQuerierTcnQueryCount=cisQuerierTcnQueryCount, cisIgmpQuerierInfoGroup=cisIgmpQuerierInfoGroup, cisV3ToIncluded=cisV3ToIncluded, cisIfLimitTotalRowStatus=cisIfLimitTotalRowStatus, cisMIBCompliances=cisMIBCompliances, cisVlanFilterMinVersionAllowed=cisVlanFilterMinVersionAllowed, cisIfAccessGroupGroup=cisIfAccessGroupGroup, cisMulticastGroupConfigEntry=cisMulticastGroupConfigEntry, cisMulticastGroupIgmpVersion=cisMulticastGroupIgmpVersion, cisVlanIgmpSnoopingLearningMode=cisVlanIgmpSnoopingLearningMode, cisIgmpQuerierMaxResponseTime=cisIgmpQuerierMaxResponseTime, cisMcastGroupIgmpVersion=cisMcastGroupIgmpVersion, cisL2EntryLimit=cisL2EntryLimit, cisMulticastGroupExclHostCount=cisMulticastGroupExclHostCount, cisTxGeneralQueries=cisTxGeneralQueries, cisRateLimitGroup=cisRateLimitGroup, cisMulticastGroupConfCeVlanIndex=cisMulticastGroupConfCeVlanIndex, cisFilterStatisticsGroup=cisFilterStatisticsGroup, cisIfLimitTotalExcludeAccessGrp=cisIfLimitTotalExcludeAccessGrp, cisMcastRouterCfgTable=cisMcastRouterCfgTable, cisVlanIgmpSnoopingOperMode=cisVlanIgmpSnoopingOperMode, cisV3IsIncluded=cisV3IsIncluded, cisRobustnessVariable=cisRobustnessVariable, cisIgmpSnoopingMIBCompliance=cisIgmpSnoopingMIBCompliance, cisFilteringInfo=cisFilteringInfo, cisLeaveQueryConfigGroup=cisLeaveQueryConfigGroup, cisIfAccessGroupTable=cisIfAccessGroupTable, cisFilterMinVersionDenied=cisFilterMinVersionDenied, cisMulticastGroupPortList=cisMulticastGroupPortList, cisMcastGroupTable=cisMcastGroupTable, cisRxInvalidPackets=cisRxInvalidPackets, cisRxReports=cisRxReports, cisMulticastGroupConfPortRange=cisMulticastGroupConfPortRange, cisIgmpQuerierVersion=cisIgmpQuerierVersion, cisMulticastGroupConfSourceAddress=cisMulticastGroupConfSourceAddress, cisTimeToLiveCheckEnabled=cisTimeToLiveCheckEnabled, cisFastLeaveEnabled=cisFastLeaveEnabled, cisDvmrpRateLimit=cisDvmrpRateLimit, cisIfLimitRowStatus=cisIfLimitRowStatus, cisVlanFilterAccessGroup=cisVlanFilterAccessGroup, cisVlanExplicitTrackingLimit=cisVlanExplicitTrackingLimit, cisExtConfig2Group=cisExtConfig2Group, cisIfLimitTotalEntry=cisIfLimitTotalEntry, cisMIBConformance=cisMIBConformance, ciscoIgmpSnoopingMIB=ciscoIgmpSnoopingMIB, cisV3Allows=cisV3Allows, cisV3ProcessEnabledAdminStatus=cisV3ProcessEnabledAdminStatus, cisAddressAliasingMode=cisAddressAliasingMode, cisVlanLeaveQueryInterval=cisVlanLeaveQueryInterval, PYSNMP_MODULE_ID=ciscoIgmpSnoopingMIB, cisTimeToLiveConfigGroup=cisTimeToLiveConfigGroup, cisMulticastGroupConfVlanIndex=cisMulticastGroupConfVlanIndex, cisVlanConfigTable=cisVlanConfigTable, cisMcastRouterRowStatus=cisMcastRouterRowStatus, CisIgmpVersion=CisIgmpVersion, cisIfLimitMax=cisIfLimitMax, cisQuerierConfigInfo=cisQuerierConfigInfo, cisMulticastRouterConfigGroup=cisMulticastRouterConfigGroup, cisRxGroupSpecificQueries=cisRxGroupSpecificQueries, cisLastMemberQueryInterval=cisLastMemberQueryInterval, cisIgmpSnoopingMIBCompliance3=cisIgmpSnoopingMIBCompliance3, cisMulticastRouterInfo=cisMulticastRouterInfo, cisV3IsExcluded=cisV3IsExcluded, cisMcastRouterVlanIndex=cisMcastRouterVlanIndex, cisFilterLimitDenied=cisFilterLimitDenied, cisIfConfigEntry=cisIfConfigEntry, cisMcastGroupVlanIndex=cisMcastGroupVlanIndex, cisMulticastGroupAddressType=cisMulticastGroupAddressType, cisRouterAlertCheckEnabled=cisRouterAlertCheckEnabled, cisIfTopoChangeFloodEnabled=cisIfTopoChangeFloodEnabled, cisQuerierTimerExpiry=cisQuerierTimerExpiry, cisMulticastGroupConfPortList=cisMulticastGroupConfPortList, cisIfLimitTable=cisIfLimitTable, ciscoIgmpSnoopingMIBObject=ciscoIgmpSnoopingMIBObject, cisMcastRouterConfigTable=cisMcastRouterConfigTable, cisMcastGroupAddressType=cisMcastGroupAddressType, cisRateLimitInfo=cisRateLimitInfo, cisMcastRouterConfigGroup=cisMcastRouterConfigGroup, cisMulticastGroupSourceAddress=cisMulticastGroupSourceAddress, cisQuerierTcnQueryPendingGroup=cisQuerierTcnQueryPendingGroup, cisMulticastGroupSourceExpires=cisMulticastGroupSourceExpires, cisMulticastGroupGroupType=cisMulticastGroupGroupType, cisVlanExplicitTrackingTable=cisVlanExplicitTrackingTable, cisIgmpQuerierVlanIndex=cisIgmpQuerierVlanIndex, cisVlanReportSuppressionEnabled=cisVlanReportSuppressionEnabled, cisIgmpSnoopingEnabled=cisIgmpSnoopingEnabled, cisLeaveQueryType=cisLeaveQueryType, cisMcastGroupEntry=cisMcastGroupEntry, cisSourceOnlyEntryAgingTime=cisSourceOnlyEntryAgingTime, cisV3SnoopingSupport=cisV3SnoopingSupport, cisSourceOnlyPercentageScanLimit=cisSourceOnlyPercentageScanLimit, cisIfLimitTotalLimitMax=cisIfLimitTotalLimitMax, cisV3ToExcluded=cisV3ToExcluded, cisIfConfigGroup=cisIfConfigGroup, cisRobustnessConfigGroup=cisRobustnessConfigGroup, cisIgmpQuerierTimerExpiry=cisIgmpQuerierTimerExpiry, cisMcastGroupInfoGroup=cisMcastGroupInfoGroup, cisMIBGroups=cisMIBGroups, cisMulticastGroupTable=cisMulticastGroupTable, cisMulticastGroupCeVlanIndex=cisMulticastGroupCeVlanIndex, cisMulticastGroupConfRowStatus=cisMulticastGroupConfRowStatus, cisMospf2RateLimit=cisMospf2RateLimit, cisIgmpQuerierAdminAddress=cisIgmpQuerierAdminAddress, cisGeneralQueryRateLimit=cisGeneralQueryRateLimit, cisRxMACGeneralQueries=cisRxMACGeneralQueries, cisVlanExplicitTrackingEntry=cisVlanExplicitTrackingEntry, cisV3StatsGroup=cisV3StatsGroup, cisSourceOnlyLearningEnabled=cisSourceOnlyLearningEnabled, cisReportSuppressionEnabled=cisReportSuppressionEnabled, cisAdminMode=cisAdminMode, cisInterfaceStatsEntry=cisInterfaceStatsEntry, cisIgmpQuerierTcnQueryPending=cisIgmpQuerierTcnQueryPending, cisLastMemberQueryCount=cisLastMemberQueryCount, cisIgmpQuerierTcnQueryInterval=cisIgmpQuerierTcnQueryInterval, cisRxGeneralQueries=cisRxGeneralQueries, cisIfLimitVlanNumber=cisIfLimitVlanNumber, cisGlobalTcnGroup=cisGlobalTcnGroup, cisV3Compliance=cisV3Compliance, cisQuerierGlobalTcnQueryCountGroup=cisQuerierGlobalTcnQueryCountGroup, cisSystemV2Group=cisSystemV2Group, cisVlanRobustnessVariable=cisVlanRobustnessVariable, cisMulticastGroupEntry=cisMulticastGroupEntry, cisVlanIgmpSnoopingEnabled=cisVlanIgmpSnoopingEnabled, cisMulticastGroupSourceUpTime=cisMulticastGroupSourceUpTime, cisMulticastGroupConfigTable=cisMulticastGroupConfigTable, cisVlanExplicitTrackingEnabled=cisVlanExplicitTrackingEnabled)
