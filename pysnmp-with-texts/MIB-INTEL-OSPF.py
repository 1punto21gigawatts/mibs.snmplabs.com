#
# PySNMP MIB module MIB-INTEL-OSPF (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MIB-INTEL-OSPF
# Produced by pysmi-0.3.4 at Wed May  1 14:12:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Counter64, Gauge32, MibIdentifier, NotificationType, Unsigned32, Bits, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Counter64", "Gauge32", "MibIdentifier", "NotificationType", "Unsigned32", "Bits", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ospf = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 40))
ospfIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 40, 1), )
if mibBuilder.loadTexts: ospfIpRouteTable.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteTable.setDescription("This entity's IP OSPF Routing table.")
ospfIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1), ).setIndexNames((0, "MIB-INTEL-OSPF", "ospfIpRouteChassis"), (0, "MIB-INTEL-OSPF", "ospfIpRouteModule"), (0, "MIB-INTEL-OSPF", "ospfIpRouteInst"), (0, "MIB-INTEL-OSPF", "ospfIpRouteDest"), (0, "MIB-INTEL-OSPF", "ospfIpRouteMask"), (0, "MIB-INTEL-OSPF", "ospfIpRouteIfIndex"), (0, "MIB-INTEL-OSPF", "ospfIpRouteNextHop"))
if mibBuilder.loadTexts: ospfIpRouteEntry.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteEntry.setDescription('A route to a particular destination.')
ospfIpRouteChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteChassis.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteChassis.setDescription('Chassis number in stack that contains the module.')
ospfIpRouteModule = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteModule.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteModule.setDescription('Module number in the chassis.')
ospfIpRouteInst = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteInst.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteInst.setDescription('OSPF routing table instance number.')
ospfIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteDest.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteDest.setDescription('The destination IP address of this route.')
ospfIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteMask.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the ospfIpRouteDest field.')
ospfIpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteIfIndex.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteIfIndex.setDescription('The interface that the frame is forwarded on.')
ospfIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteNextHop.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteNextHop.setDescription('The IP address of the next hop of this route.')
ospfIpRoutePref = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRoutePref.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRoutePref.setDescription('The preference value for this route.')
ospfIpRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteCost.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteCost.setDescription('The OSPF routing cost for this route.')
ospfIpRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("dead", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfIpRouteState.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteState.setDescription('The current state of the route.')
ospfIpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteAge.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteAge.setDescription('The number of seconds since this route was last updated or otherwise detemined to be correct.')
ospfIpRouteProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("intraArea", 1), ("interArea", 2), ("ext1", 3), ("ext2", 4), ("type3Discard", 5), ("type7Discard", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIpRouteProtoType.setStatus('optional')
if mibBuilder.loadTexts: ospfIpRouteProtoType.setDescription('The OSPF protocol type.')
ospfIfCntTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 40, 2), )
if mibBuilder.loadTexts: ospfIfCntTable.setStatus('optional')
if mibBuilder.loadTexts: ospfIfCntTable.setDescription('OSPF counters table.')
ospfIfCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1), ).setIndexNames((0, "MIB-INTEL-OSPF", "ospfCntChassis"), (0, "MIB-INTEL-OSPF", "ospfCntModule"), (0, "MIB-INTEL-OSPF", "ospfCntIfIpAddress"), (0, "MIB-INTEL-OSPF", "ospfCntAddressLessIf"))
if mibBuilder.loadTexts: ospfIfCntEntry.setStatus('optional')
if mibBuilder.loadTexts: ospfIfCntEntry.setDescription('The OSPF counters for the interface.')
ospfCntChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCntChassis.setStatus('optional')
if mibBuilder.loadTexts: ospfCntChassis.setDescription('Chassis number in stack that contains the module.')
ospfCntModule = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCntModule.setStatus('optional')
if mibBuilder.loadTexts: ospfCntModule.setDescription('Module number in the chassis.')
ospfCntIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCntIfIpAddress.setStatus('optional')
if mibBuilder.loadTexts: ospfCntIfIpAddress.setDescription('The IP address of this OSPF interface.')
ospfCntAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCntAddressLessIf.setStatus('optional')
if mibBuilder.loadTexts: ospfCntAddressLessIf.setDescription('This variable takes the value 0 on interfaces with IP addresses, and the corresponding value of ifIndex for interfaces having no IP address.')
ospfCntBadVer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntBadVer.setStatus('optional')
if mibBuilder.loadTexts: ospfCntBadVer.setDescription('The number of Bad OSPF Version configuration errors.')
ospfCntBadAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntBadAreaId.setStatus('optional')
if mibBuilder.loadTexts: ospfCntBadAreaId.setDescription('The number of Bad Area Id configuration errors.')
ospfCntMaskMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntMaskMismatch.setStatus('optional')
if mibBuilder.loadTexts: ospfCntMaskMismatch.setDescription('The number of Net Mask Mismatch configuration errors.')
ospfCntAuthMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntAuthMismatch.setStatus('optional')
if mibBuilder.loadTexts: ospfCntAuthMismatch.setDescription('The number of Authentication Type Mismatch configuration errors.')
ospfCntAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntAuthFail.setStatus('optional')
if mibBuilder.loadTexts: ospfCntAuthFail.setDescription('The number of Authentication Failure configuration errors.')
ospfCntExtOptMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntExtOptMismatch.setStatus('optional')
if mibBuilder.loadTexts: ospfCntExtOptMismatch.setDescription('The number of External Option Mismatch configuration errors.')
ospfCntNSSAOptMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntNSSAOptMismatch.setStatus('optional')
if mibBuilder.loadTexts: ospfCntNSSAOptMismatch.setDescription('The number of NSSA Option Mismatch configuration errors.')
ospfCntNBMANeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntNBMANeighbor.setStatus('optional')
if mibBuilder.loadTexts: ospfCntNBMANeighbor.setDescription('The number of Unknown NBMA Neighbour configuration errors.')
ospfCntVirtNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntVirtNeighbor.setStatus('optional')
if mibBuilder.loadTexts: ospfCntVirtNeighbor.setDescription('The number of Unknown Virtual Neighbour configuration errors.')
ospfCntHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntHelloMismatch.setStatus('optional')
if mibBuilder.loadTexts: ospfCntHelloMismatch.setDescription('The number of Hello Interval Mismatch configuration errors.')
ospfCntDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntDeadMismatch.setStatus('optional')
if mibBuilder.loadTexts: ospfCntDeadMismatch.setDescription('The number of Dead Interval Mismatch configuration errors.')
ospfCntBadType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntBadType.setStatus('optional')
if mibBuilder.loadTexts: ospfCntBadType.setDescription('The number of Bad Packet Type errors.')
ospfCntBadChksum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntBadChksum.setStatus('optional')
if mibBuilder.loadTexts: ospfCntBadChksum.setDescription('The number of Bad Packet Checksum errors.')
ospfCntBadLen = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntBadLen.setStatus('optional')
if mibBuilder.loadTexts: ospfCntBadLen.setDescription('The number of Bad Packet Length errors.')
ospfCntTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntTooShort.setStatus('optional')
if mibBuilder.loadTexts: ospfCntTooShort.setDescription('The number of Packet Too Short errors.')
ospfCntDRPktMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntDRPktMismatch.setStatus('optional')
if mibBuilder.loadTexts: ospfCntDRPktMismatch.setDescription('The number of DR-destined packets received on non-DR interfaces.')
ospfCntMulticastVL = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntMulticastVL.setStatus('optional')
if mibBuilder.loadTexts: ospfCntMulticastVL.setDescription('The number of OSPF multicast-destined packets received on VL.')
ospfCntDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntDestAddr.setStatus('optional')
if mibBuilder.loadTexts: ospfCntDestAddr.setDescription('The number of unknown destination addresses received on the interface.')
ospfCntOwnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntOwnAddr.setStatus('optional')
if mibBuilder.loadTexts: ospfCntOwnAddr.setDescription('The number of ow ip source addresses received on the interface.')
ospfCntHelloTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntHelloTx.setStatus('optional')
if mibBuilder.loadTexts: ospfCntHelloTx.setDescription('The number of Hello packets send on the interface')
ospfCntHelloRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntHelloRx.setStatus('optional')
if mibBuilder.loadTexts: ospfCntHelloRx.setDescription('The number of Hello packets received on the interface')
ospfCntLSReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntLSReqTx.setStatus('optional')
if mibBuilder.loadTexts: ospfCntLSReqTx.setDescription('The number of Link State requests send on the interface')
ospfCntLSUpdateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntLSUpdateTx.setStatus('optional')
if mibBuilder.loadTexts: ospfCntLSUpdateTx.setDescription('The number of Link State updates send on the interface')
ospfCntLSAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntLSAckTx.setStatus('optional')
if mibBuilder.loadTexts: ospfCntLSAckTx.setDescription('The number of Link State acks send on the interface')
ospfCntLSReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntLSReqRx.setStatus('optional')
if mibBuilder.loadTexts: ospfCntLSReqRx.setDescription('The number of Link State requests received on the interface')
ospfCntLSUpdateRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntLSUpdateRx.setStatus('optional')
if mibBuilder.loadTexts: ospfCntLSUpdateRx.setDescription('The number of Link State updates received on the interface')
ospfCntLSAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 40, 2, 1, 31), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfCntLSAckRx.setStatus('optional')
if mibBuilder.loadTexts: ospfCntLSAckRx.setDescription('The number of Link State acks received on the interface')
mibBuilder.exportSymbols("MIB-INTEL-OSPF", ospfCntVirtNeighbor=ospfCntVirtNeighbor, ospfIpRouteDest=ospfIpRouteDest, ospfCntAuthFail=ospfCntAuthFail, ospf=ospf, ospfCntLSAckTx=ospfCntLSAckTx, ospfIpRouteState=ospfIpRouteState, ospfCntLSReqTx=ospfCntLSReqTx, ospfCntMaskMismatch=ospfCntMaskMismatch, ospfCntHelloRx=ospfCntHelloRx, ospfCntBadChksum=ospfCntBadChksum, ospfCntLSReqRx=ospfCntLSReqRx, ospfCntLSAckRx=ospfCntLSAckRx, ospfIpRouteAge=ospfIpRouteAge, ospfCntBadAreaId=ospfCntBadAreaId, ospfCntDeadMismatch=ospfCntDeadMismatch, ospfCntExtOptMismatch=ospfCntExtOptMismatch, ospfCntNBMANeighbor=ospfCntNBMANeighbor, ospfCntIfIpAddress=ospfCntIfIpAddress, ospfCntModule=ospfCntModule, ospfCntAuthMismatch=ospfCntAuthMismatch, ospfIfCntEntry=ospfIfCntEntry, ospfCntDRPktMismatch=ospfCntDRPktMismatch, ospfCntBadType=ospfCntBadType, ospfIpRouteNextHop=ospfIpRouteNextHop, ospfIpRouteEntry=ospfIpRouteEntry, ospfCntHelloTx=ospfCntHelloTx, ospfCntOwnAddr=ospfCntOwnAddr, ospfIpRouteMask=ospfIpRouteMask, ospfCntBadLen=ospfCntBadLen, ospfIpRoutePref=ospfIpRoutePref, ospfIpRouteChassis=ospfIpRouteChassis, ospfIpRouteProtoType=ospfIpRouteProtoType, ospfIpRouteCost=ospfIpRouteCost, ospfCntNSSAOptMismatch=ospfCntNSSAOptMismatch, ospfCntAddressLessIf=ospfCntAddressLessIf, ospfCntChassis=ospfCntChassis, ospfCntLSUpdateTx=ospfCntLSUpdateTx, ospfIpRouteTable=ospfIpRouteTable, ospfCntHelloMismatch=ospfCntHelloMismatch, ospfIpRouteInst=ospfIpRouteInst, ospfIpRouteModule=ospfIpRouteModule, ospfIfCntTable=ospfIfCntTable, ospfIpRouteIfIndex=ospfIpRouteIfIndex, ospfCntBadVer=ospfCntBadVer, ospfCntMulticastVL=ospfCntMulticastVL, ospfCntLSUpdateRx=ospfCntLSUpdateRx, ospfCntTooShort=ospfCntTooShort, ospfCntDestAddr=ospfCntDestAddr)
