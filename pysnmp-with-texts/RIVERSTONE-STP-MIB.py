#
# PySNMP MIB module RIVERSTONE-STP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIVERSTONE-STP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:57:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
dot1dBasePortEntry, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePortEntry")
riverstoneMibs, = mibBuilder.importSymbols("RSTONE-SMI-MIB", "riverstoneMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, NotificationType, Integer32, Gauge32, Counter32, ModuleIdentity, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "NotificationType", "Integer32", "Gauge32", "Counter32", "ModuleIdentity", "ObjectIdentity", "Unsigned32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
rsStpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 12))
rsStpMib.setRevisions(('2000-07-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsStpMib.setRevisionsDescriptions(('Initial version of of RIVERSTONE-STP-MIB.',))
if mibBuilder.loadTexts: rsStpMib.setLastUpdated('200007160000Z')
if mibBuilder.loadTexts: rsStpMib.setOrganization('Riverstone Networks, Inc')
if mibBuilder.loadTexts: rsStpMib.setContactInfo('Riverstone Networks, Inc 5200 Great America Parkway Santa Clara CA USA 95054 PHONE:+1 408.878.6500 EMAIL: nms-eng@riverstonenet.com WEB: http://www.riverstonenet.com')
if mibBuilder.loadTexts: rsStpMib.setDescription('This mib module defines addtional configuration and statistics for Spanning Tree Protocol Management as defined in RFC 1493 Copyright (C) Riverstone Networks, Inc 2000')
class RSStpProtocolVersion(TextualConvention, Integer32):
    description = 'An identifier exists for each type of protocol supported. command variable. Each addtional enumeration should be a power of two.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("ieee802", 2), ("fastSTP", 4))

rsStpGlobals = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 12, 1))
if mibBuilder.loadTexts: rsStpGlobals.setStatus('current')
if mibBuilder.loadTexts: rsStpGlobals.setDescription('Objects of global scope over one or more instances of Spanning Tree in a given switch.')
rsStpPortsLevel = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 12, 2))
if mibBuilder.loadTexts: rsStpPortsLevel.setStatus('current')
if mibBuilder.loadTexts: rsStpPortsLevel.setDescription('Objects of port level scope providing information about the Spanning tree on that port.')
rsStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 12, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsStpStatus.setStatus('current')
if mibBuilder.loadTexts: rsStpStatus.setDescription('The global state of spanning tree protocol on this system. Individual ports may be enabled or disabled as necessary or this master switch can be used to turn all ports on or off. This object will cause a loss of convergence when set.')
rsStpProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 12, 1, 2), RSStpProtocolVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsStpProtocol.setStatus('current')
if mibBuilder.loadTexts: rsStpProtocol.setDescription('Specify the type of Spanning tree to run for the default instance of Spanning Tree. Changing this object has the effect of causing an existing spanning tree to lose convergence. ')
rsStpProtocolsSupported = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsStpProtocolsSupported.setStatus('current')
if mibBuilder.loadTexts: rsStpProtocolsSupported.setDescription('Represents range of STP protocols supported. For example the value 6 would mean the switch is capable of both fastSTP(4) + ieee802(2) protocols.')
rsStpLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 12, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsStpLastSetErrorReason.setStatus('current')
if mibBuilder.loadTexts: rsStpLastSetErrorReason.setDescription('Reports the agent error code and reason for last failure to set any writable object in this mib. Format of the error code is NNN - reason string where NNN is a numeric identifer.')
rsStpLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 12, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsStpLastChanged.setStatus('current')
if mibBuilder.loadTexts: rsStpLastChanged.setDescription('The last time any object in this table was changed by SNMP or other local management means.')
rsStpBaseTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 12, 2, 2), )
if mibBuilder.loadTexts: rsStpBaseTable.setStatus('current')
if mibBuilder.loadTexts: rsStpBaseTable.setDescription('This table provides per port control of spanning tree protocol.')
rsStpBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 12, 2, 2, 1), )
dot1dBasePortEntry.registerAugmentions(("RIVERSTONE-STP-MIB", "rsStpBaseEntry"))
rsStpBaseEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: rsStpBaseEntry.setStatus('current')
if mibBuilder.loadTexts: rsStpBaseEntry.setDescription('Additional configuration capabilities not found in standard mibs such as configuring STP to run on a given port. All ports shown in dot1dBasePortEntry are capable of bridging, and thus can run STP.')
rsStpBaseEnableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 12, 2, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsStpBaseEnableProtocol.setStatus('current')
if mibBuilder.loadTexts: rsStpBaseEnableProtocol.setDescription('Set or get the state of spanning tree protocol (send/receive) on the port.')
rsStpBaseBlockBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 12, 2, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsStpBaseBlockBpdu.setStatus('current')
if mibBuilder.loadTexts: rsStpBaseBlockBpdu.setDescription('Set or get the state of BPDU filtering on this port.')
rsStpBaseBpduSends = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 12, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsStpBaseBpduSends.setStatus('current')
if mibBuilder.loadTexts: rsStpBaseBpduSends.setDescription('The number of BPDUs sent out on this port.')
rsStpBaseBpduReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 12, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsStpBaseBpduReceives.setStatus('current')
if mibBuilder.loadTexts: rsStpBaseBpduReceives.setDescription('The number of BPDUs received on this port.')
rsStpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 12, 10))
rsStpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 12, 10, 1))
rsStpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 12, 10, 2))
rsStpBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 12, 10, 1, 1)).setObjects(("RIVERSTONE-STP-MIB", "rsStpStatus"), ("RIVERSTONE-STP-MIB", "rsStpLastChanged"), ("RIVERSTONE-STP-MIB", "rsStpBaseEnableProtocol"), ("RIVERSTONE-STP-MIB", "rsStpBaseBlockBpdu"), ("RIVERSTONE-STP-MIB", "rsStpBaseBpduSends"), ("RIVERSTONE-STP-MIB", "rsStpBaseBpduReceives"), ("RIVERSTONE-STP-MIB", "rsStpProtocol"), ("RIVERSTONE-STP-MIB", "rsStpProtocolsSupported"), ("RIVERSTONE-STP-MIB", "rsStpLastSetErrorReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsStpBaseGroup = rsStpBaseGroup.setStatus('current')
if mibBuilder.loadTexts: rsStpBaseGroup.setDescription('A collection of objects providing configuration and monitoring capabilites of Spanning Tree Protocol on a given switch.')
rsStpMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 12, 10, 2, 1)).setObjects(("RIVERSTONE-STP-MIB", "rsStpBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsStpMibCompliance = rsStpMibCompliance.setStatus('current')
if mibBuilder.loadTexts: rsStpMibCompliance.setDescription('The compliance statement for device support of Priority and Multicast Filtering extended bridging services.')
mibBuilder.exportSymbols("RIVERSTONE-STP-MIB", rsStpCompliances=rsStpCompliances, PYSNMP_MODULE_ID=rsStpMib, rsStpBaseBpduReceives=rsStpBaseBpduReceives, rsStpBaseGroup=rsStpBaseGroup, rsStpBaseBpduSends=rsStpBaseBpduSends, rsStpConformance=rsStpConformance, rsStpBaseTable=rsStpBaseTable, rsStpProtocol=rsStpProtocol, rsStpMibCompliance=rsStpMibCompliance, rsStpBaseBlockBpdu=rsStpBaseBlockBpdu, rsStpLastChanged=rsStpLastChanged, rsStpLastSetErrorReason=rsStpLastSetErrorReason, rsStpProtocolsSupported=rsStpProtocolsSupported, rsStpStatus=rsStpStatus, rsStpMib=rsStpMib, RSStpProtocolVersion=RSStpProtocolVersion, rsStpGlobals=rsStpGlobals, rsStpPortsLevel=rsStpPortsLevel, rsStpBaseEntry=rsStpBaseEntry, rsStpBaseEnableProtocol=rsStpBaseEnableProtocol, rsStpGroups=rsStpGroups)
