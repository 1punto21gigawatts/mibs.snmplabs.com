#
# PySNMP MIB module RUCKUS-SZ-EVENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-SZ-EVENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ruckusEvents, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusEvents")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, IpAddress, Counter32, ObjectIdentity, Integer32, TimeTicks, Counter64, ModuleIdentity, NotificationType, MibIdentifier, Gauge32, Unsigned32, iso, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Counter32", "ObjectIdentity", "Integer32", "TimeTicks", "Counter64", "ModuleIdentity", "NotificationType", "MibIdentifier", "Gauge32", "Unsigned32", "iso", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
ruckusSZEventMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 2, 11))
if mibBuilder.loadTexts: ruckusSZEventMIB.setLastUpdated('201508181000Z')
if mibBuilder.loadTexts: ruckusSZEventMIB.setOrganization('Ruckus Wireless, Inc.')
if mibBuilder.loadTexts: ruckusSZEventMIB.setContactInfo('Ruckus Wireless, Inc. 350 West Java Dr. Sunnyvale, CA 94089 USA T: +1 (650) 265-4200 F: +1 (408) 738-2065 EMail: info@ruckuswireless.com Web: www.ruckuswireless.com')
if mibBuilder.loadTexts: ruckusSZEventMIB.setDescription('Ruckus SZ event objects, including trap OID and trap payload.')
ruckusSZEventTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1))
ruckusSZEventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2))
ruckusSZSystemMiscEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 1)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventDescription"))
if mibBuilder.loadTexts: ruckusSZSystemMiscEventTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSystemMiscEventTrap.setDescription('Generic trap triggered by admin specified miscellaneous event. The event severity, event code, event type, event description is enclosed.')
ruckusSZUpgradeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 2)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventFirmwareVersion"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventUpgradedFirmwareVersion"))
if mibBuilder.loadTexts: ruckusSZUpgradeSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZUpgradeSuccessTrap.setDescription('Trigger when there is a SZ upgrade success event. The event severity, event code, event type, node name, MAC address, management IP address, firmware version and upgraded firmware version are enclosed.')
ruckusSZUpgradeFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 3)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventFirmwareVersion"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventUpgradedFirmwareVersion"))
if mibBuilder.loadTexts: ruckusSZUpgradeFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZUpgradeFailedTrap.setDescription('Trigger when there is a SZ upgrade failed event. The event severity, event code, event type, firmware version and upgraded firmware version are enclosed.')
ruckusSZNodeRestartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 4)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"))
if mibBuilder.loadTexts: ruckusSZNodeRestartedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeRestartedTrap.setDescription('Trigger when there is a SZ restarted event. The event severity, event code, event type, node name, MAC address, management IP address and restart reason are enclosed.')
ruckusSZNodeShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 5)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZNodeShutdownTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeShutdownTrap.setDescription('Trigger when there is a SZ shutdown event. The event severity, event code, event type, node name, MAC address and management IP address are enclosed.')
ruckusSZCPUUsageThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 6)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZCPUPerc"))
if mibBuilder.loadTexts: ruckusSZCPUUsageThresholdExceededTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCPUUsageThresholdExceededTrap.setDescription('Trigger when there is a SZ CPU threshold exceeded event. The event severity, event code, event type, node name, MAC address and CPU usage percent are enclosed.')
ruckusSZMemoryUsageThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 7)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZMemoryPerc"))
if mibBuilder.loadTexts: ruckusSZMemoryUsageThresholdExceededTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZMemoryUsageThresholdExceededTrap.setDescription('Trigger when there is a SZ memory threshold exceeded event. The event severity, event code, event type, node name, MAC address and memory usage percent are enclosed.')
ruckusSZDiskUsageThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 8)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDiskPerc"))
if mibBuilder.loadTexts: ruckusSZDiskUsageThresholdExceededTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDiskUsageThresholdExceededTrap.setDescription('Trigger when there is a SZ disk usage threshold exceeded event. The event severity, event code, event type, node name, MAC address and disk usage percent are enclosed.')
ruckusSZLicenseUsageThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 19)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLicenseType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLicenseUsagePerc"))
if mibBuilder.loadTexts: ruckusSZLicenseUsageThresholdExceededTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLicenseUsageThresholdExceededTrap.setDescription('Trigger when there is SZ license usage threshold exceeded event. The event severity, event code, event type, license type and license usage percent are enclosed.')
ruckusSZAPMiscEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 20)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPMiscEventTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPMiscEventTrap.setDescription('Generic trap triggered by AP related miscellaneous event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP GPS coordinates, event description, AP description and AP IPv6 address are enclosed.')
ruckusSZAPConnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 21)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPConnectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPConnectedTrap.setDescription('Trigger when there is an AP connected event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, join reason and AP IPv6 address are enclosed.')
ruckusSZAPDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 22)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPDeletedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPDeletedTrap.setDescription('Trigger when there is an AP deleted event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZAPDisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 23)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPDisconnectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPDisconnectedTrap.setDescription('Trigger when there is an AP connection lost event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZAPLostHeartbeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 24)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPLostHeartbeatTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPLostHeartbeatTrap.setDescription('Trigger when there is a SZ lost AP heart beat event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZAPRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 25)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPRebootTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPRebootTrap.setDescription('Trigger when there is an AP reboot event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, reboot reason and AP IPv6 address are enclosed.')
ruckusSZCriticalAPConnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 26)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZCriticalAPConnectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCriticalAPConnectedTrap.setDescription('Trigger when there is a critical AP connected event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, join reason and AP IPv6 address are enclosed.')
ruckusSZCriticalAPDisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 27)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZCriticalAPDisconnectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCriticalAPDisconnectedTrap.setDescription('Trigger when there is a critical AP connection lost event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZAPRejectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 28)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPRejectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPRejectedTrap.setDescription('Trigger when there is an AP rejected event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, SZ control IP address, reject reason and AP IPv6 address are enclosed.')
ruckusSZAPConfUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 29)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZAPConfigID"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPConfUpdateFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPConfUpdateFailedTrap.setDescription('Trigger when there is an AP configuration update failed event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, configure ID and AP IPv6 address are enclosed.')
ruckusSZAPConfUpdatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 30)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZAPConfigID"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPConfUpdatedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPConfUpdatedTrap.setDescription('Trigger when there is an AP configuration updated event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, configure ID and AP IPv6 address are enclosed.')
ruckusSZAPSwapOutModelDiffTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 31)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZAPModel"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZConfigAPModel"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPSwapOutModelDiffTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPSwapOutModelDiffTrap.setDescription('Trigger when there is an AP model is different from imported swap AP model. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, AP model, configure AP model and AP IPv6 address are enclosed.')
ruckusSZAPPreProvisionModelDiffTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 32)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZAPModel"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZConfigAPModel"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPPreProvisionModelDiffTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPPreProvisionModelDiffTrap.setDescription('Trigger when there is an AP model is different from imported pre-provision AP model. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, AP mode, configure AP model and AP IPv6 address are enclosed.')
ruckusSZAPFirmwareUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 34)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPFirmwareUpdateFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPFirmwareUpdateFailedTrap.setDescription('Trigger when there is an AP firmware update failed event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZAPFirmwareUpdatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 35)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPFirmwareUpdatedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPFirmwareUpdatedTrap.setDescription('Trigger when there is an AP firmware update success event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZAPWlanOversubscribedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 36)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"))
if mibBuilder.loadTexts: ruckusSZAPWlanOversubscribedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPWlanOversubscribedTrap.setDescription('Trigger when there is an AP wlan oversubscribed event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description and AP GPS coordinates are enclosed.')
ruckusSZAPFactoryResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 37)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPFactoryResetTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPFactoryResetTrap.setDescription('Trigger when there is an AP factory reset event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZCableModemDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 38)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZCableModemDownTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCableModemDownTrap.setDescription('Trigger when there is an AP cable modem down event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZCableModemRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 39)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZCableModemRebootTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCableModemRebootTrap.setDescription('Trigger when there is an AP cable modem reboot event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZAPManagedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 41)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"))
if mibBuilder.loadTexts: ruckusSZAPManagedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPManagedTrap.setDescription('Trigger when there is an AP managed event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and SZ control IP address are enclosed.')
ruckusSZCPUUsageThresholdBackToNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 42)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZCPUPerc"))
if mibBuilder.loadTexts: ruckusSZCPUUsageThresholdBackToNormalTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCPUUsageThresholdBackToNormalTrap.setDescription('Trigger when there is a SZ CPU threshold back to normal event. The event severity, event code, event type, node name, MAC address and CPU usage percent are enclosed.')
ruckusSZMemoryUsageThresholdBackToNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 43)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZMemoryPerc"))
if mibBuilder.loadTexts: ruckusSZMemoryUsageThresholdBackToNormalTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZMemoryUsageThresholdBackToNormalTrap.setDescription('Trigger when there is a SZ memory threshold back to normal event. The event severity, event code, event type, node name, MAC address and memory usage percent are enclosed.')
ruckusSZDiskUsageThresholdBackToNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 44)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDiskPerc"))
if mibBuilder.loadTexts: ruckusSZDiskUsageThresholdBackToNormalTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDiskUsageThresholdBackToNormalTrap.setDescription('Trigger when there is a SZ disk threshold back to normal event. The event severity, event code, event type, node name, MAC address, disk usage percent are enclosed.')
ruckusSZCableModemUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 45)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZCableModemUpTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCableModemUpTrap.setDescription('Trigger when there is an AP cable modem up event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZAPDiscoverySuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 46)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPDiscoverySuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPDiscoverySuccessTrap.setDescription('Trigger when there is an AP discovery success event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, SZ control IP address and AP IPv6 address are enclosed.')
ruckusSZCMResetByUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 47)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZCMResetByUserTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCMResetByUserTrap.setDescription('Trigger when there is an AP cable modem soft-rebooted by user event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, event reason and AP IPv6 address are enclosed.')
ruckusSZCMResetFactoryByUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 48)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZCMResetFactoryByUserTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCMResetFactoryByUserTrap.setDescription('Trigger when there is an AP cable modem set to factory default by user event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, event reason and AP IPv6 address are enclosed.')
ruckusSZSSIDSpoofingRogueAPDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 50)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventRogueMac"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSSID"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZSSIDSpoofingRogueAPDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSSIDSpoofingRogueAPDetectedTrap.setDescription('Trigger when there is an AP detects a rogue AP event. The event severity, event code, event type, rogue AP MAC address, ssid, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZMacSpoofingRogueAPDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 51)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventRogueMac"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSSID"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZMacSpoofingRogueAPDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZMacSpoofingRogueAPDetectedTrap.setDescription('Trigger when there is an AP detects a rogue AP event. The event severity, event code, event type, rogue AP MAC address, ssid, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZSameNetworkRogueAPDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 52)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventRogueMac"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSSID"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZSameNetworkRogueAPDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSameNetworkRogueAPDetectedTrap.setDescription('Trigger when there is an AP detects a rogue AP which has the same bssid with detect AP event. The event severity, event code, event type, rogue AP MAC address, ssid, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZADHocNetworkRogueAPDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 53)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventRogueMac"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSSID"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZADHocNetworkRogueAPDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZADHocNetworkRogueAPDetectedTrap.setDescription('Trigger when there is an AP detects a rogue AP which has the same network detecting AP event. The event severity, event code, event type, rogue AP MAC address, ssid, AP name, AP MAC address, AP IP address, AP location, AP description and AP GPS coordinates are enclosed.')
ruckusSZMaliciousRogueAPTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 54)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventRogueMac"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZMaliciousRogueAPTimeoutTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZMaliciousRogueAPTimeoutTrap.setDescription('Trigger when there is a rogue AP disappears event. The event severity, event code, event type, rogue AP MAC address, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and AP IPv6 address are enclosed.')
ruckusSZAPLBSConnectSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 55)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSURL"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSPort"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPLBSConnectSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPLBSConnectSuccessTrap.setDescription('Trigger when there is AP successfully connect to LS event. The event severity,event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, LBS server URL, LBS port and AP IPv6 address are enclosed.')
ruckusSZAPLBSNoResponsesTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 56)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSURL"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSPort"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPLBSNoResponsesTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPLBSNoResponsesTrap.setDescription('Trigger when there is an AP connect to LS no response event. The event severity,event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, LBS server URL, LBS port and AP IPv6 address are enclosed.')
ruckusSZAPLBSAuthFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 57)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSURL"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSPort"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPLBSAuthFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPLBSAuthFailedTrap.setDescription('Trigger when there is an AP connect LS authentication failure event. The event severity, event code, event type,AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, LBS server URL, LBS port and AP IPv6 address are enclosed.')
ruckusSZAPLBSConnectFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 58)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSURL"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSPort"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPLBSConnectFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPLBSConnectFailedTrap.setDescription('Trigger when there is an AP failed connect to LS event. The event severity,event code, event type,AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, LBS server URL, LBS port and AP IPv6 address are enclosed.')
ruckusSZAPTunnelBuildFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 60)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPTunnelBuildFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPTunnelBuildFailedTrap.setDescription('Trigger when there is an AP build tunnel failed event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, SZ DP IP address, failure reason and AP IPv6 address are enclosed.')
ruckusSZAPTunnelBuildSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 61)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPTunnelBuildSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPTunnelBuildSuccessTrap.setDescription('Trigger when there is an AP build tunnel success event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, SZ DP IP address and AP IPv6 address are enclosed.')
ruckusSZAPTunnelDisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 62)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPTunnelDisconnectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPTunnelDisconnectedTrap.setDescription('Trigger when there is an AP tunnel disconnected event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, SZ DP IP address, failure reason and AP IPv6 address are enclosed.')
ruckusSZAPSoftGRETunnelFailoverPtoSTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 65)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusPrimaryGRE"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSecondaryGRE"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPSoftGRETunnelFailoverPtoSTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPSoftGRETunnelFailoverPtoSTrap.setDescription('Trigger when there is an AP softGRE tunnel fails over primary to secondary event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, primary GRE gateway, secondary GRE gateway and AP IPv6 address are enclosed.')
ruckusSZAPSoftGRETunnelFailoverStoPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 66)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusPrimaryGRE"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSecondaryGRE"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPSoftGRETunnelFailoverStoPTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPSoftGRETunnelFailoverStoPTrap.setDescription('Trigger when there is an AP softGRE tunnel fails over secondary to primary event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, primary GRE gateway, secondary GRE gateway and AP IPv6 address are enclosed.')
ruckusSZAPSoftGREGatewayNotReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 67)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSoftGREGatewayList"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPSoftGREGatewayNotReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPSoftGREGatewayNotReachableTrap.setDescription('Trigger when there is an AP softGRE gateway not reachable event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, soft GRE gateway list and AP IPv6 address are enclosed.')
ruckusSZAPSoftGREGatewayReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 68)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSoftGREGWAddress"))
if mibBuilder.loadTexts: ruckusSZAPSoftGREGatewayReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPSoftGREGatewayReachableTrap.setDescription('Trigger when there is an AP softGRE gateway reachable event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates and soft GRE gateway IP address are enclosed.')
ruckusSZDPConfUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 70)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPConfigID"))
if mibBuilder.loadTexts: ruckusSZDPConfUpdateFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPConfUpdateFailedTrap.setDescription("Trigger when there is DP configuration update failed event. The event severity, event code, event type, DP's identifier and configuration UUID are enclosed.")
ruckusSZDPLostHeartbeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 71)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"))
if mibBuilder.loadTexts: ruckusSZDPLostHeartbeatTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPLostHeartbeatTrap.setDescription("Trigger when there is DP lost heart beat event. The event severity, event code, event type and DP's identifier are enclosed.")
ruckusSZDPDisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 72)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"))
if mibBuilder.loadTexts: ruckusSZDPDisconnectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPDisconnectedTrap.setDescription("Trigger when there is DP disconnected event. The event severity, event code, event type, DP's identifier and SZ control IP address are enclosed.")
ruckusSZDPPhyInterfaceDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 73)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZNetworkPortID"))
if mibBuilder.loadTexts: ruckusSZDPPhyInterfaceDownTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPPhyInterfaceDownTrap.setDescription("Trigger when there is DP physical interface down event. The event severity, event code, event type, DP's identifier and network port ID are enclosed.")
ruckusSZDPStatusUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 74)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"))
if mibBuilder.loadTexts: ruckusSZDPStatusUpdateFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPStatusUpdateFailedTrap.setDescription("Trigger when there is DP update status failed event. The event severity, event code, event type and DP's identifier are enclosed.")
ruckusSZDPStatisticUpdateFaliedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 75)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"))
if mibBuilder.loadTexts: ruckusSZDPStatisticUpdateFaliedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPStatisticUpdateFaliedTrap.setDescription("Trigger when there is DP update statistical failed event. The event severity, event code, event type and DP's identifier are enclosed.")
ruckusSZDPConnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 76)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"))
if mibBuilder.loadTexts: ruckusSZDPConnectedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPConnectedTrap.setDescription("Trigger when there is DP connected event. The event severity, event code, event type, DP's identifier and SZ control IP are enclosed.")
ruckusSZDPPhyInterfaceUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 77)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZNetworkPortID"))
if mibBuilder.loadTexts: ruckusSZDPPhyInterfaceUpTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPPhyInterfaceUpTrap.setDescription("Trigger when there is DP physical interface up event. The event severity, event code, event type, DP's identifier and network port ID are enclosed.")
ruckusSZDPConfUpdatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 78)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPConfigID"))
if mibBuilder.loadTexts: ruckusSZDPConfUpdatedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPConfUpdatedTrap.setDescription("Trigger when there is DP configuration updated event. The event severity, event code, event type, DP's identifier and configuration UUID are enclosed.")
ruckusSZDPTunnelTearDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 79)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"))
if mibBuilder.loadTexts: ruckusSZDPTunnelTearDownTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPTunnelTearDownTrap.setDescription("Trigger when there is DP tear down tunnel event. The event severity, event code, event type, DP's identifier, AP MAC address and event reason are enclosed.")
ruckusSZDPAcceptTunnelRequestTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 81)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusSZDPAcceptTunnelRequestTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPAcceptTunnelRequestTrap.setDescription("Trigger when there is data plane accepts a tunnel request from the AP event. The event severity, event code, event type, DP's identifier and AP MAC address are enclosed.")
ruckusSZDPRejectTunnelRequestTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 82)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"))
if mibBuilder.loadTexts: ruckusSZDPRejectTunnelRequestTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPRejectTunnelRequestTrap.setDescription("Trigger occurs where there is data plane rejects a tunnel request from the AP event. The event severity, event code, event type, DP's identifier, AP MAC address and event reason are enclosed.")
ruckusSZDPTunnelSetUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 85)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusSZDPTunnelSetUpTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPTunnelSetUpTrap.setDescription("Trigger when there is DP set up tunnel event. The event severity, event code, event type, DP's identifier and AP MAC address are enclosed.")
ruckusSZDPDiscoverySuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 86)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"))
if mibBuilder.loadTexts: ruckusSZDPDiscoverySuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPDiscoverySuccessTrap.setDescription("Trigger when there is a DP discovery success event. The event severity, event code, event type, DP's identifier and SZ control IP address are enclosed.")
ruckusSZDPDiscoveryFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 87)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"))
if mibBuilder.loadTexts: ruckusSZDPDiscoveryFailTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPDiscoveryFailTrap.setDescription("Trigger when there is a DP discovery failed event. The event severity, event code, event type, DP's identifier and SZ control IP address are enclosed.")
ruckusSZDPDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 94)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"))
if mibBuilder.loadTexts: ruckusSZDPDeletedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPDeletedTrap.setDescription("Trigger when there is a DP is deleted event. The event severity, event code, event type and DP's identifier are enclosed.")
ruckusSZDPUpgradeStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 95)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"))
if mibBuilder.loadTexts: ruckusSZDPUpgradeStartTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPUpgradeStartTrap.setDescription("Trigger when there is DP started the upgrade process event. The event severity, event code, event type and DP's identifier are enclosed.")
ruckusSZDPUpgradingTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 96)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"))
if mibBuilder.loadTexts: ruckusSZDPUpgradingTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPUpgradingTrap.setDescription("Trigger when there is DP has started to upgrade program and configuration event. The event severity, event code, event type and DP's identifier are enclosed.")
ruckusSZDPUpgradeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 97)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"))
if mibBuilder.loadTexts: ruckusSZDPUpgradeSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPUpgradeSuccessTrap.setDescription("Trigger when there is DP has been upgraded successfully event. The event severity, event code, event type and DP's identifier are enclosed.")
ruckusSZDPUpgradeFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 98)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPKey"))
if mibBuilder.loadTexts: ruckusSZDPUpgradeFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPUpgradeFailedTrap.setDescription("Trigger when there is DP failed to upgrade event. The event severity, event code, event type and DP's identifier are enclosed.")
ruckusSZClientMiscEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 100)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventClientMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventDescription"))
if mibBuilder.loadTexts: ruckusSZClientMiscEventTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClientMiscEventTrap.setDescription('Generic trap triggered by specified client related miscellaneous event. The event severity, event code, event type, client MAC address and event description are enclosed.')
ruckusSZNodeJoinFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 200)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZNodeJoinFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeJoinFailedTrap.setDescription('Trigger when there is new node join failed event. The event severity, event code, event type, node name, node MAC address and cluster name are enclosed.')
ruckusSZNodeRemoveFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 201)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZNodeRemoveFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeRemoveFailedTrap.setDescription('Trigger when there is remove node failed event. The event severity, event code, event type, node name,node MAC address and cluster name are enclosed.')
ruckusSZNodeOutOfServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 202)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZNodeOutOfServiceTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeOutOfServiceTrap.setDescription('Trigger when there is node out of service event. The event severity, event code, event type, node name,node MAC address and cluster name are enclosed.')
ruckusSZClusterInMaintenanceStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 203)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterInMaintenanceStateTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterInMaintenanceStateTrap.setDescription('Trigger when there is cluster in maintenance state event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterBackupFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 204)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterBackupFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterBackupFailedTrap.setDescription('Trigger when there is backup cluster failed event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterRestoreFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 205)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterRestoreFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterRestoreFailedTrap.setDescription('Trigger when there is restore cluster failed event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterAppStoppedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 206)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZProcessName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZClusterAppStoppedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterAppStoppedTrap.setDescription('Trigger when there is cluster application stop event. The event severity, event code, event type, application name, SZ node name and node MAC address are enclosed.')
ruckusSZNodeBondInterfaceDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 207)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZNetworkInterface"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZNodeBondInterfaceDownTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeBondInterfaceDownTrap.setDescription('Trigger when there is node bond interface down event. The event severity, event code, event type, network interface, SZ node name and node MAC address are enclosed.')
ruckusSZNodePhyInterfaceDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 208)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZNetworkInterface"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZNodePhyInterfaceDownTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodePhyInterfaceDownTrap.setDescription('Trigger when there is node physical interface down event. The event severity, event code, event type, network interface, SZ node name and node MAC address are enclosed.')
ruckusSZClusterLeaderChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 209)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterLeaderChangedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterLeaderChangedTrap.setDescription('Trigger when there is cluster leader changed event. The event severity, event code, event type, SZ node name, node MAC address and cluster name are enclosed.')
ruckusSZClusterUpgradeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 210)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventFirmwareVersion"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventUpgradedFirmwareVersion"))
if mibBuilder.loadTexts: ruckusSZClusterUpgradeSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterUpgradeSuccessTrap.setDescription('Trigger when there is upgrade entire cluster success event. The event severity, event code, event type, cluster name, firmware version and upgraded firmware version are enclosed.')
ruckusSZNodeBondInterfaceUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 211)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZNetworkInterface"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZNodeBondInterfaceUpTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeBondInterfaceUpTrap.setDescription('Trigger when there is node bond interface up event. The event severity, event code, event type, network interface, SZ node name and SZ MAC address are enclosed.')
ruckusSZNodePhyInterfaceUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 212)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZNetworkInterface"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZNodePhyInterfaceUpTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodePhyInterfaceUpTrap.setDescription('Trigger when there is node physical interface up event. The event severity, event code, event type,network interface, SZ node name and SZ MAC address are enclosed.')
ruckusSZClusterBackToInServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 216)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterBackToInServiceTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterBackToInServiceTrap.setDescription('Trigger when there is cluster back to in service event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZBackupClusterSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 217)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZBackupClusterSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZBackupClusterSuccessTrap.setDescription('Trigger when there is backup cluster success event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZNodeJoinSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 218)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZNodeJoinSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeJoinSuccessTrap.setDescription('Trigger when there is new node join success event. The event severity, event code, event type, SZ node name, node MAC address and cluster name are enclosed.')
ruckusSZClusterAppStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 219)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZProcessName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZClusterAppStartTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterAppStartTrap.setDescription('Trigger when there is cluster application start event. The event severity, event code, event type, application name, SZ node name and node MAC address are enclosed.')
ruckusSZNodeRemoveSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 220)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZNodeRemoveSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeRemoveSuccessTrap.setDescription('Trigger when there is remove node success event. The event severity, event code, event type, SZ node name, node MAC address and cluster name are enclosed.')
ruckusSZClusterRestoreSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 221)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterRestoreSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterRestoreSuccessTrap.setDescription('Trigger when there is restore cluster success event. The event severity, event code, event type, SZ node name, node MAC address and cluster name are enclosed.')
ruckusSZNodeBackToInServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 222)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZNodeBackToInServiceTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNodeBackToInServiceTrap.setDescription('Trigger when there is node back to in service event. The event severity, event code, event type, SZ node name, node MAC address and cluster name are enclosed.')
ruckusSZSshTunnelSwitchedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 223)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSwitchStatus"))
if mibBuilder.loadTexts: ruckusSZSshTunnelSwitchedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSshTunnelSwitchedTrap.setDescription('Trigger when there is SSH tunnel switched event. The event severity, event code, event type, SZ node name, node MAC address, cluster name and switch status are enclosed.')
ruckusSZClusterCfgBackupStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 224)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterCfgBackupStartTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterCfgBackupStartTrap.setDescription('Trigger when there is a configuration backup start event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterCfgBackupSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 225)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterCfgBackupSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterCfgBackupSuccessTrap.setDescription('Trigger when there is a configuration backup success event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterCfgBackupFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 226)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterCfgBackupFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterCfgBackupFailedTrap.setDescription('Trigger when there is a configuration backup failed event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterCfgRestoreSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 227)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterCfgRestoreSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterCfgRestoreSuccessTrap.setDescription('Trigger when there is a configuration restore success event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterCfgRestoreFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 228)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterCfgRestoreFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterCfgRestoreFailedTrap.setDescription('Trigger when there is a configuration restore failed event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterUploadSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 229)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterUploadSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterUploadSuccessTrap.setDescription('Trigger when there is a cluster upload success event. The event severity, event code, event type, cluster name are enclosed.')
ruckusSZClusterUploadFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 230)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"))
if mibBuilder.loadTexts: ruckusSZClusterUploadFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterUploadFailedTrap.setDescription('Trigger when there is a cluster upload failed event. The event severity, event code, event type, cluster name, failure reason are enclosed.')
ruckusSZClusterOutOfServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 231)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterOutOfServiceTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterOutOfServiceTrap.setDescription('Trigger when there is a cluster out of service event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterUploadVDPFirmwareStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 232)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterUploadVDPFirmwareStartTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterUploadVDPFirmwareStartTrap.setDescription('Trigger when there is a cluster upload vDP firmware process starts event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterUploadVDPFirmwareSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 233)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"))
if mibBuilder.loadTexts: ruckusSZClusterUploadVDPFirmwareSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterUploadVDPFirmwareSuccessTrap.setDescription('Trigger when there is a cluster uploaded vDP firmware successfully event. The event severity, event code, event type and cluster name are enclosed.')
ruckusSZClusterUploadVDPFirmwareFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 234)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZClusterName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"))
if mibBuilder.loadTexts: ruckusSZClusterUploadVDPFirmwareFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterUploadVDPFirmwareFailedTrap.setDescription('Trigger when there is a cluster failed to upload vDP firmware event. The event severity, event code, event type, cluster name and failure reason are enclosed.')
ruckusSZIpmiTempBBTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 251)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZTemperatureStatus"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZIpmiTempBBTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIpmiTempBBTrap.setDescription('Trigger when there is baseboard temperature event. The event severity, event code, event type, temperature status and SZ node MAC address are enclosed.')
ruckusSZIpmiTempPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 256)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZProcessorId"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZTemperatureStatus"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZIpmiTempPTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIpmiTempPTrap.setDescription('Trigger when there is processor temperature event. The event severity, event code, event type, processor id, temperature status and SZ node MAC address are enclosed.')
ruckusSZIpmiFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 258)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFanId"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFanStatus"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZIpmiFanTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIpmiFanTrap.setDescription('Trigger when there is system fan event. The event severity, event code, event type, fan id, fan status and SZ node MAC address are enclosed.')
ruckusSZIpmiFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 261)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFanId"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFanStatus"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZIpmiFanStatusTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIpmiFanStatusTrap.setDescription('Trigger when there is fan module event. The event severity, event code, event type, fan id, fan status and SZ node MAC address are enclosed.')
ruckusSZIpmiRETempBBTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 265)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZTemperatureStatus"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZIpmiRETempBBTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIpmiRETempBBTrap.setDescription('Trigger when there is baseboard temperature status recover from abnormal condition event. The event severity, event code, event type, temperature status and SZ node MAC address are enclosed.')
ruckusSZIpmiRETempPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 270)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZProcessorId"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZTemperatureStatus"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZIpmiRETempPTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIpmiRETempPTrap.setDescription('Trigger when there is processor temperature status recover from abnormal condition event. The event severity, event code, event type, processor id, temperature status and SZ node MAC address are enclosed.')
ruckusSZIpmiREFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 272)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFanId"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFanStatus"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZIpmiREFanTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIpmiREFanTrap.setDescription('Trigger when there is system fan module status recover from abnormal condition event. The event severity, event code, event type, fan id, fan status and SZ node MAC address are enclosed.')
ruckusSZIpmiREFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 275)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFanId"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFanStatus"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZIpmiREFanStatusTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIpmiREFanStatusTrap.setDescription('Trigger when there is fan module status recover from abnormal condition event. The event severity, event code, event type, fan id, fan status and SZ node MAC address are enclosed.')
ruckusSZFtpTransferErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 280)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFtpIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFtpPort"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZFileName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZFtpTransferErrorTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZFtpTransferErrorTrap.setDescription('Trigger when there is FTP transfer error event. The event severity, event code, event type, FTP server IP address, FTP server port, file name and SZ node MAC address are enclosed.')
ruckusSZSystemLBSConnectSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 290)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSURL"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSPort"))
if mibBuilder.loadTexts: ruckusSZSystemLBSConnectSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSystemLBSConnectSuccessTrap.setDescription('Trigger when there is SmartZone successfully connect to LS event. The event severity, event code, event type, SZ node MAC address, management IP address, LBS server URL and LBS port are enclosed.')
ruckusSZSystemLBSNoResponseTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 291)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSURL"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSPort"))
if mibBuilder.loadTexts: ruckusSZSystemLBSNoResponseTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSystemLBSNoResponseTrap.setDescription('Trigger when there is SmartZone connect to LS no response event. The event severity,event code, event type, SZ node MAC address, management IP address, LBS server URL and LBS port are enclosed.')
ruckusSZSystemLBSAuthFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 292)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSURL"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSPort"))
if mibBuilder.loadTexts: ruckusSZSystemLBSAuthFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSystemLBSAuthFailedTrap.setDescription('Trigger when there is SmartZone connect LS authentication failure event. The event severity, event code, event type, SZ node MAC address, management IP address, LBS server URL and LBS port are enclosed.')
ruckusSZSystemLBSConnectFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 293)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSURL"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLBSPort"))
if mibBuilder.loadTexts: ruckusSZSystemLBSConnectFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSystemLBSConnectFailedTrap.setDescription('Trigger when there is SmartZone failed connect to LS event. The event severity, event code, event type, SZ node MAC address, management IP address, LBS server URL and LBS port are enclosed.')
ruckusSZProcessRestartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 300)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZProcessName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZProcessRestartTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZProcessRestartTrap.setDescription('Trigger when there is process restart event. The event severity, event code, event type, process name, SZ node MAC address and management IP address are enclosed.')
ruckusSZServiceUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 301)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZProcessName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZServiceUnavailableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZServiceUnavailableTrap.setDescription('Trigger when there is service unavailable event. The event severity, event code, event type, process name, SZ node MAC address and management IP address are enclosed.')
ruckusSZKeepAliveFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 302)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSrcProcess"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZProcessName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZKeepAliveFailureTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZKeepAliveFailureTrap.setDescription('Trigger when there is service keep alive failure event. The event severity, event code, event type, source process name, process name, SZ node MAC address and management IP address are enclosed.')
ruckusSZResourceUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 304)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSrcProcess"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"))
if mibBuilder.loadTexts: ruckusSZResourceUnavailableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZResourceUnavailableTrap.setDescription('Trigger when there is resource unavailable event. The event severity, event code, event type, source process name, SZ node MAC address, management IP address and reason are enclosed.')
ruckusSZSmfRegFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 305)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSrcProcess"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZSmfRegFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSmfRegFailedTrap.setDescription('Trigger when there is SMF registration failed event. The event severity, event code, event type, source process name, SZ node MAC address and management IP address are enclosed.')
ruckusSZHipFailoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 306)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSrcProcess"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZHipFailoverTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZHipFailoverTrap.setDescription('Trigger when there is HIP failover event. The event severity, event code, event type, source process name, SZ node MAC address and management IP address are enclosed.')
ruckusSZConfUpdFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 307)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZProcessName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"))
if mibBuilder.loadTexts: ruckusSZConfUpdFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZConfUpdFailedTrap.setDescription('Trigger when there is configuration update failed event. The event severity, event code, event type, process name, SZ node MAC address, management IP address and failure reason are enclosed.')
ruckusSZConfRcvFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 308)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"))
if mibBuilder.loadTexts: ruckusSZConfRcvFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZConfRcvFailedTrap.setDescription('Trigger when there is SZ configuration receive failed event. The event severity, event code, event type, SZ node MAC address, management IP address and failure reason are enclosed.')
ruckusSZLostCnxnToDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 309)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZLostCnxnToDbladeTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLostCnxnToDbladeTrap.setDescription('Trigger when there is lost connection to DP, The event severity, event code, event type, SZ control IP address, DP IP address, SZ node MAC address and management IP address are enclosed.')
ruckusSZAuthSrvrNotReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 314)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZAuthSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZRadProxyIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZAuthSrvrNotReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAuthSrvrNotReachableTrap.setDescription('Trigger when there is authentication server not reachable event. The event severity, event code, event type, authentication server IP address, radius proxy IP address, SZ node MAC address and management IP address are enclosed.')
ruckusSZAccSrvrNotReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 315)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZAccSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZRadProxyIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZAccSrvrNotReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAccSrvrNotReachableTrap.setDescription('Trigger when there is accounting server not reachable event. The event severity, event code, event type, accounting server IP address, radius proxy IP address, SZ node MAC address and management IP address are enclosed.')
ruckusSZAuthFailedNonPermanentIDTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 317)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEImsi"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEMsisdn"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventReason"))
if mibBuilder.loadTexts: ruckusSZAuthFailedNonPermanentIDTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAuthFailedNonPermanentIDTrap.setDescription('Trigger when there is non-permanent ID authentication failed event. The event severity, event code, event type, UE imsi, UE msisdn, SZ node MAC address, management IP address and failure reason are enclosed.')
ruckusSZAPAcctRespWhileInvalidConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 347)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSrcProcess"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUserName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPAcctRespWhileInvalidConfigTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPAcctRespWhileInvalidConfigTrap.setDescription('Trigger when there is SZ sends response to AP accounting message while configuration is incorrect in SZ to forward received message or to generate CDR event. The event severity, event code, event type, source process name, AP IP address, user Name, SZ node MAC address, management IP address and AP IPv6 address are enclosed.')
ruckusSZAPAcctMsgDropNoAcctStartMsgTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 348)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSrcProcess"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUserName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPAcctMsgDropNoAcctStartMsgTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPAcctMsgDropNoAcctStartMsgTrap.setDescription('Trigger when there is accounting message from AP dropped Acct Interim/Stop message as Account Start no received from AP event. The event severity, event code, event type, source process name, AP IP address, user Name, SZ node MAC address, management IP address and AP IPv6 address are enclosed.')
ruckusSZUnauthorizedCoaDmMessageDroppedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 349)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSrcProcess"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZRadSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZUnauthorizedCoaDmMessageDroppedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZUnauthorizedCoaDmMessageDroppedTrap.setDescription('Trigger when there is received COA/DM from unauthorized AAA server event. The event severity, event code, event type, source process name, AAA server IP address, SZ node MAC address and management IP address are enclosed.')
ruckusSZConnectedToDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 350)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZConnectedToDbladeTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZConnectedToDbladeTrap.setDescription('Trigger when there is successful connection to DP event. The event severity, event code, event type, SZ control IP address, DP IP address, SZ node MAC address and management IP address are enclosed.')
ruckusSZSessUpdatedAtDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 354)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEImsi"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEMsisdn"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZSessUpdatedAtDbladeTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSessUpdatedAtDbladeTrap.setDescription('Trigger when there is session updates the request (C-D-SESS-UPD-REQ) successfully event. The event severity, event code, event type, SZ control IP address, SZ DP IP address, UE IMSI, UE msisdn, SZ node MAC address and management IP address are enclosed.')
ruckusSZSessUpdateErrAtDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 355)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEImsi"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEMsisdn"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZSessUpdateErrAtDbladeTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSessUpdateErrAtDbladeTrap.setDescription('Trigger when there is session updates the request (C-D-SESS-UPD-REQ) failed event. The event severity, event code, event type, SZ control IP address, SZ DP IP address, UE IMSI, UE msisdn, SZ node MAC address, management IP address are enclosed.')
ruckusSZSessDeletedAtDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 356)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEImsi"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEMsisdn"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZSessDeletedAtDbladeTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSessDeletedAtDbladeTrap.setDescription('Trigger when there is session deletes request (C-D-SESS-DEL-REQ) successfully event. The event severity, event code, event type, SZ control IP address, SZ DP IP address, UE IMSI, UE msisdn, SZ node MAC address and management IP address are enclosed.')
ruckusSZSessDeleteErrAtDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 357)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCtrlIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEImsi"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZUEMsisdn"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeMgmtIp"))
if mibBuilder.loadTexts: ruckusSZSessDeleteErrAtDbladeTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSessDeleteErrAtDbladeTrap.setDescription('Trigger when there is session deletes request (C-D-SESS-DEL-REQ) failed event. The event severity, event code, event type, SZ control IP address, SZ DP IP address, UE IMSI, UE msisdn, SZ node MAC address and management IP address are enclosed.')
ruckusSZLicenseSyncSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 358)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLicenseServerName"))
if mibBuilder.loadTexts: ruckusSZLicenseSyncSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLicenseSyncSuccessTrap.setDescription('Trigger when there is license data syncs up with license server successfully event. The event severity, event code, event type, node name, license server name are enclosed.')
ruckusSZLicenseSyncFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 359)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLicenseServerName"))
if mibBuilder.loadTexts: ruckusSZLicenseSyncFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLicenseSyncFailedTrap.setDescription('Trigger when there is license data syncs up with license server failed event. The event severity, event code, event type, node name, license server name are enclosed.')
ruckusSZLicenseImportSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 360)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"))
if mibBuilder.loadTexts: ruckusSZLicenseImportSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLicenseImportSuccessTrap.setDescription('Trigger when there is license data import successfully event. The event severity, event code, event type and node name are enclosed.')
ruckusSZLicenseImportFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 361)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventNodeName"))
if mibBuilder.loadTexts: ruckusSZLicenseImportFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLicenseImportFailedTrap.setDescription('Trigger when there is license data import failed event. The event severity, event code, event type and node name are enclosed.')
ruckusSZSyslogServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 370)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSyslogServerAddress"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZSyslogServerReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSyslogServerReachableTrap.setDescription('Trigger when there is a syslog server reachable event. The event severity, event code, event type, syslog server address and SZ node MAC address are enclosed.')
ruckusSZSyslogServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 371)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSyslogServerAddress"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZSyslogServerUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSyslogServerUnreachableTrap.setDescription('Trigger when there is a syslog server unreachable event. The event severity, event code, event type, syslog server address and SZ node MAC address are enclosed.')
ruckusSZSyslogServerSwitchedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 372)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSrcSyslogServerAddress"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDestSyslogServerAddress"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventMacAddr"))
if mibBuilder.loadTexts: ruckusSZSyslogServerSwitchedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSyslogServerSwitchedTrap.setDescription('Trigger when there is a syslog server switched event. The event severity, event code, event type, source syslog server address, destination syslog server address and SZ node MAC address are enclosed.')
ruckusSZAPRadiusServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 400)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZRadSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPRadiusServerReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPRadiusServerReachableTrap.setDescription('Trigger when there is an AP is able to reach radius server successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, radius server IP address and AP IPv6 address are enclosed.')
ruckusSZAPRadiusServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 401)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZRadSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPRadiusServerUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPRadiusServerUnreachableTrap.setDescription('Trigger when there is an AP is unable to reach radius server event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, radius server IP address and AP IPv6 address are enclosed.')
ruckusSZAPLDAPServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 402)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLDAPSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPLDAPServerReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPLDAPServerReachableTrap.setDescription('Trigger when there is an AP is able to reach LDAP server successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, LDAP server IP address and AP IPv6 address are enclosed.')
ruckusSZAPLDAPServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 403)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZLDAPSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPLDAPServerUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPLDAPServerUnreachableTrap.setDescription('Trigger when there is an AP is unable to reach LDAP server event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, LDAP server IP address and AP IPv6 address are enclosed.')
ruckusSZAPADServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 404)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZADSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPADServerReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPADServerReachableTrap.setDescription('Trigger when there is an AP is able to reach AD server successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, AD server IP address and AP IPv6 address are enclosed.')
ruckusSZAPADServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 405)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZADSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPADServerUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPADServerUnreachableTrap.setDescription('Trigger when there is an AP is unable to reach AD server event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, AD server IP address and AP IPv6 address are enclosed.')
ruckusSZAPUsbSoftwarePackageDownloadedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 406)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSoftwareName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPUsbSoftwarePackageDownloadedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPUsbSoftwarePackageDownloadedTrap.setDescription('Trigger when there is an AP downloaded its USB software package successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, USB software name and AP IPv6 address are enclosed.')
ruckusSZAPUsbSoftwarePackageDownloadFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 407)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZSoftwareName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZAPUsbSoftwarePackageDownloadFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPUsbSoftwarePackageDownloadFailedTrap.setDescription('Trigger when there is an AP failed to download its USB software package event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, USB software name and AP IPv6 address are enclosed.')
ruckusSZEspAuthServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 408)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZAuthSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZEspAuthServerReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEspAuthServerReachableTrap.setDescription('Trigger when there is an AP is able to reach WeChat ESP authentication server successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, authentication server IP address and AP IPv6 address are enclosed.')
ruckusSZEspAuthServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 409)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZAuthSrvrIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZEspAuthServerUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEspAuthServerUnreachableTrap.setDescription('Trigger when there is an AP is unable to reach WeChat ESP authentication server event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, authentication server IP address and AP IPv6 address are enclosed.')
ruckusSZEspAuthServerResolvableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 410)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDomainName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZEspAuthServerResolvableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEspAuthServerResolvableTrap.setDescription('Trigger when there is an AP is able to resolve WeChat ESP authentication server domain name successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, authentication server domain name and AP IPv6 address are enclosed.')
ruckusSZEspAuthServerUnResolvableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 411)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDomainName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZEspAuthServerUnResolvableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEspAuthServerUnResolvableTrap.setDescription('Trigger when there is an AP is unable to resolve WeChat ESP authentication server domain name event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, authentication server domain name and AP IPv6 address are enclosed.')
ruckusSZEspDNATServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 412)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDNATIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZEspDNATServerReachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEspDNATServerReachableTrap.setDescription('Trigger when there is an AP is able to reach WeChat ESP DNAT server successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, DNAT server IP address and AP IPv6 address are enclosed.')
ruckusSZEspDNATServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 413)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDNATIp"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZEspDNATServerUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEspDNATServerUnreachableTrap.setDescription('Trigger when there is an AP is unable to reach WeChat ESP DNAT server event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, DNAT server IP address and AP IPv6 address are enclosed.')
ruckusSZEspDNATServerResolvableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 414)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDomainName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZEspDNATServerResolvableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEspDNATServerResolvableTrap.setDescription('Trigger when there is an AP is able to resolve WeChat ESP DNAT server domain name successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, authentication server domain name and AP IPv6 address are enclosed.')
ruckusSZEspDNATServerUnresolvableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 415)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZDomainName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZEspDNATServerUnresolvableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEspDNATServerUnresolvableTrap.setDescription('Trigger when there is an AP is unable to resolve WeChat ESP DNAT server domain name event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, authentication server domain name and AP IPv6 address are enclosed.')
ruckusRateLimitTORSurpassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 500)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZRadSrvrIp"))
if mibBuilder.loadTexts: ruckusRateLimitTORSurpassedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusRateLimitTORSurpassedTrap.setDescription('Trigger when there is received rate Limit for Total Outstanding Requests(TOR) Surpassed event. The event severity, event code, event type and AAA server IP address are enclosed.')
ruckusSZIPSecTunnelAssociatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 600)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZIPSecGWAddress"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZIPSecTunnelAssociatedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIPSecTunnelAssociatedTrap.setDescription('Trigger when there is an AP is able to reach secure gateway successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, secure gateway address and AP IPv6 address are enclosed.')
ruckusSZIPSecTunnelDisassociatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 601)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZIPSecGWAddress"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZIPSecTunnelDisassociatedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIPSecTunnelDisassociatedTrap.setDescription('Trigger when there is an AP is disconnected from secure gateway event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, secure gateway address and AP IPv6 address are enclosed.')
ruckusSZIPSecTunnelAssociateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 11, 1, 602)).setObjects(("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventSeverity"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventCode"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventType"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPName"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPMacAddr"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIP"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPLocation"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPDescription"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPGPSCoordinates"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZIPSecGWAddress"), ("RUCKUS-SZ-EVENT-MIB", "ruckusSZEventAPIPv6"))
if mibBuilder.loadTexts: ruckusSZIPSecTunnelAssociateFailedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIPSecTunnelAssociateFailedTrap.setDescription('Trigger when there is an AP is not able to reach secure gateway successfully event. The event severity, event code, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, secure gateway address and AP IPv6 address are enclosed.')
ruckusSZEventDescription = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventDescription.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventDescription.setDescription("The event's description.")
ruckusSZClusterName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZClusterName.setStatus('current')
if mibBuilder.loadTexts: ruckusSZClusterName.setDescription("The SZ's cluster name.")
ruckusSZEventCode = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventCode.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventCode.setDescription("The event's code.")
ruckusSZProcessName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 11), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZProcessName.setStatus('current')
if mibBuilder.loadTexts: ruckusSZProcessName.setDescription('The process name.')
ruckusSZEventCtrlIP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 12), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventCtrlIP.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventCtrlIP.setDescription("The SZ's node control IP address.")
ruckusSZEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 13), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventSeverity.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventSeverity.setDescription("The event's severity.")
ruckusSZEventType = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 14), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventType.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventType.setDescription("The event's type.")
ruckusSZEventNodeMgmtIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 15), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventNodeMgmtIp.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventNodeMgmtIp.setDescription("The SZ's management IP address.")
ruckusSZEventNodeName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 16), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventNodeName.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventNodeName.setDescription("The SZ's node name.")
ruckusSZCPUPerc = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 17), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZCPUPerc.setStatus('current')
if mibBuilder.loadTexts: ruckusSZCPUPerc.setDescription("The SZ's CPU usage percent.")
ruckusSZMemoryPerc = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 18), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZMemoryPerc.setStatus('current')
if mibBuilder.loadTexts: ruckusSZMemoryPerc.setDescription("The SZ's memory usage percent.")
ruckusSZDiskPerc = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 19), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZDiskPerc.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDiskPerc.setDescription("The SZ's disk usage percent.")
ruckusSZEventMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 20), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventMacAddr.setDescription("The SZ's MAC address.")
ruckusSZEventFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 21), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventFirmwareVersion.setDescription("The SZ's firmware version.")
ruckusSZEventUpgradedFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 22), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventUpgradedFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventUpgradedFirmwareVersion.setDescription("The SZ's upgrade firmware version.")
ruckusSZEventAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 23), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventAPMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventAPMacAddr.setDescription("The AP's MAC address.")
ruckusSZEventReason = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 24), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventReason.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventReason.setDescription("The event's reason.")
ruckusSZEventAPName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 25), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventAPName.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventAPName.setDescription("The AP's name.")
ruckusSZEventAPIP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 26), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventAPIP.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventAPIP.setDescription("The AP's IP address.")
ruckusSZEventAPLocation = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 27), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventAPLocation.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventAPLocation.setDescription("The AP's location.")
ruckusSZEventAPGPSCoordinates = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 28), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventAPGPSCoordinates.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventAPGPSCoordinates.setDescription("The AP's GPS coordinates.")
ruckusSZEventAPDescription = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 29), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventAPDescription.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventAPDescription.setDescription("The AP's description.")
ruckusSZAPModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 31), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZAPModel.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPModel.setDescription('The AP model')
ruckusSZConfigAPModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 32), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZConfigAPModel.setStatus('current')
if mibBuilder.loadTexts: ruckusSZConfigAPModel.setDescription('The configured AP model')
ruckusSZAPConfigID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 33), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZAPConfigID.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAPConfigID.setDescription("The AP's configuration UUID")
ruckusSZEventAPIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 35), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventAPIPv6.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventAPIPv6.setDescription("The AP's IPv6 address.")
ruckusSZLBSURL = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 38), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZLBSURL.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLBSURL.setDescription("The LBS server's URL")
ruckusSZLBSPort = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 39), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZLBSPort.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLBSPort.setDescription("The LBS server's port")
ruckusSZEventSSID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 40), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventSSID.setDescription('The WLAN ssid')
ruckusSZEventRogueMac = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 45), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventRogueMac.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventRogueMac.setDescription('The rogue MAC Address')
ruckusPrimaryGRE = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 46), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusPrimaryGRE.setStatus('current')
if mibBuilder.loadTexts: ruckusPrimaryGRE.setDescription('The primary GRE gateway.')
ruckusSecondaryGRE = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 47), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSecondaryGRE.setStatus('current')
if mibBuilder.loadTexts: ruckusSecondaryGRE.setDescription('The secondary GRE gateway.')
ruckusSoftGREGatewayList = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 48), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSoftGREGatewayList.setStatus('current')
if mibBuilder.loadTexts: ruckusSoftGREGatewayList.setDescription('The softGRE gateway list. It could be IP address or FQDN and must have only two IPs/DNs separated by semicolon (;).')
ruckusSZSoftGREGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 49), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZSoftGREGWAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSoftGREGWAddress.setDescription('The softGRE gateway IP address.')
ruckusSZEventClientMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 50), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZEventClientMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusSZEventClientMacAddr.setDescription("The client's MAC address.")
ruckusSZDPKey = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 80), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZDPKey.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPKey.setDescription("The DP's identifier.")
ruckusSZDPConfigID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 81), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZDPConfigID.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPConfigID.setDescription("The DP's configuration ID.")
ruckusSZDPIP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 82), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZDPIP.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDPIP.setDescription("The DP's IP address.")
ruckusSZNetworkPortID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 100), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZNetworkPortID.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNetworkPortID.setDescription('The network port ID.')
ruckusSZNetworkInterface = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 101), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZNetworkInterface.setStatus('current')
if mibBuilder.loadTexts: ruckusSZNetworkInterface.setDescription('The network interface.')
ruckusSZSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 102), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZSwitchStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSwitchStatus.setDescription('The switch status.')
ruckusSZTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 120), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusSZTemperatureStatus.setDescription('The temperature status.')
ruckusSZProcessorId = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 121), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZProcessorId.setStatus('current')
if mibBuilder.loadTexts: ruckusSZProcessorId.setDescription('The processor ID.')
ruckusSZFanId = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 122), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZFanId.setStatus('current')
if mibBuilder.loadTexts: ruckusSZFanId.setDescription('The fan module ID.')
ruckusSZFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 123), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZFanStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusSZFanStatus.setDescription('The fan module status.')
ruckusSZLicenseType = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 150), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZLicenseType.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLicenseType.setDescription('The license type')
ruckusSZLicenseUsagePerc = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 151), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZLicenseUsagePerc.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLicenseUsagePerc.setDescription('The license usage percent.')
ruckusSZLicenseServerName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 152), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZLicenseServerName.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLicenseServerName.setDescription('The license server name.')
ruckusSZIPSecGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 153), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZIPSecGWAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusSZIPSecGWAddress.setDescription('The secure gateway address.')
ruckusSZSyslogServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 154), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZSyslogServerAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSyslogServerAddress.setDescription('The syslog server address.')
ruckusSZSrcSyslogServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 155), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZSrcSyslogServerAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSrcSyslogServerAddress.setDescription('The source syslog server address.')
ruckusSZDestSyslogServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 156), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZDestSyslogServerAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDestSyslogServerAddress.setDescription('The destination syslog server address.')
ruckusSZFtpIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 200), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZFtpIp.setStatus('current')
if mibBuilder.loadTexts: ruckusSZFtpIp.setDescription('The FTP server IP address.')
ruckusSZFtpPort = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 201), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZFtpPort.setStatus('current')
if mibBuilder.loadTexts: ruckusSZFtpPort.setDescription('The FTP server port.')
ruckusSZSrcProcess = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 301), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZSrcProcess.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSrcProcess.setDescription('The source process name.')
ruckusSZUEImsi = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 305), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZUEImsi.setStatus('current')
if mibBuilder.loadTexts: ruckusSZUEImsi.setDescription('The UE IMSI.')
ruckusSZUEMsisdn = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 306), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZUEMsisdn.setStatus('current')
if mibBuilder.loadTexts: ruckusSZUEMsisdn.setDescription('The UE MSISDN.')
ruckusSZAuthSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 307), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZAuthSrvrIp.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAuthSrvrIp.setDescription('The authentication server IP address.')
ruckusSZRadProxyIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 308), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZRadProxyIp.setStatus('current')
if mibBuilder.loadTexts: ruckusSZRadProxyIp.setDescription('The radius proxy IP address.')
ruckusSZAccSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 309), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZAccSrvrIp.setStatus('current')
if mibBuilder.loadTexts: ruckusSZAccSrvrIp.setDescription('The accounting server IP address.')
ruckusSZRadSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 312), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZRadSrvrIp.setStatus('current')
if mibBuilder.loadTexts: ruckusSZRadSrvrIp.setDescription('The radius server IP address.')
ruckusSZUserName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 324), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZUserName.setStatus('current')
if mibBuilder.loadTexts: ruckusSZUserName.setDescription('The user name.')
ruckusSZFileName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 326), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZFileName.setStatus('current')
if mibBuilder.loadTexts: ruckusSZFileName.setDescription('The file name.')
ruckusSZLDAPSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 327), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZLDAPSrvrIp.setStatus('current')
if mibBuilder.loadTexts: ruckusSZLDAPSrvrIp.setDescription('The LDAP server IP address.')
ruckusSZADSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 328), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZADSrvrIp.setStatus('current')
if mibBuilder.loadTexts: ruckusSZADSrvrIp.setDescription('The AD server IP address.')
ruckusSZSoftwareName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 329), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZSoftwareName.setStatus('current')
if mibBuilder.loadTexts: ruckusSZSoftwareName.setDescription('The software name.')
ruckusSZDomainName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 330), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZDomainName.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDomainName.setDescription('The domain name.')
ruckusSZDNATIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 11, 2, 331), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusSZDNATIp.setStatus('current')
if mibBuilder.loadTexts: ruckusSZDNATIp.setDescription('The DNAT server IP address.')
mibBuilder.exportSymbols("RUCKUS-SZ-EVENT-MIB", ruckusSZAPWlanOversubscribedTrap=ruckusSZAPWlanOversubscribedTrap, ruckusSZDPRejectTunnelRequestTrap=ruckusSZDPRejectTunnelRequestTrap, ruckusSZIpmiFanTrap=ruckusSZIpmiFanTrap, ruckusSZAPManagedTrap=ruckusSZAPManagedTrap, ruckusSZClusterCfgBackupStartTrap=ruckusSZClusterCfgBackupStartTrap, ruckusSZAPLBSConnectSuccessTrap=ruckusSZAPLBSConnectSuccessTrap, ruckusSZMemoryPerc=ruckusSZMemoryPerc, ruckusSZEventObjects=ruckusSZEventObjects, ruckusSZAPTunnelDisconnectedTrap=ruckusSZAPTunnelDisconnectedTrap, ruckusSZSyslogServerUnreachableTrap=ruckusSZSyslogServerUnreachableTrap, ruckusSZIPSecTunnelDisassociatedTrap=ruckusSZIPSecTunnelDisassociatedTrap, ruckusSZClusterAppStoppedTrap=ruckusSZClusterAppStoppedTrap, ruckusSZEventAPIPv6=ruckusSZEventAPIPv6, ruckusSZClusterRestoreSuccessTrap=ruckusSZClusterRestoreSuccessTrap, ruckusSZEventAPLocation=ruckusSZEventAPLocation, ruckusSZAPSoftGREGatewayNotReachableTrap=ruckusSZAPSoftGREGatewayNotReachableTrap, ruckusSZADSrvrIp=ruckusSZADSrvrIp, ruckusSZDPUpgradeSuccessTrap=ruckusSZDPUpgradeSuccessTrap, ruckusSZNetworkInterface=ruckusSZNetworkInterface, ruckusSZCMResetByUserTrap=ruckusSZCMResetByUserTrap, ruckusSZBackupClusterSuccessTrap=ruckusSZBackupClusterSuccessTrap, ruckusSZCriticalAPDisconnectedTrap=ruckusSZCriticalAPDisconnectedTrap, ruckusSZAPRebootTrap=ruckusSZAPRebootTrap, ruckusSZDPDiscoverySuccessTrap=ruckusSZDPDiscoverySuccessTrap, ruckusSZIpmiFanStatusTrap=ruckusSZIpmiFanStatusTrap, ruckusSZEspDNATServerUnresolvableTrap=ruckusSZEspDNATServerUnresolvableTrap, ruckusSZConfUpdFailedTrap=ruckusSZConfUpdFailedTrap, PYSNMP_MODULE_ID=ruckusSZEventMIB, ruckusSZClusterUploadVDPFirmwareFailedTrap=ruckusSZClusterUploadVDPFirmwareFailedTrap, ruckusSZEventSeverity=ruckusSZEventSeverity, ruckusSZAPFactoryResetTrap=ruckusSZAPFactoryResetTrap, ruckusSZSameNetworkRogueAPDetectedTrap=ruckusSZSameNetworkRogueAPDetectedTrap, ruckusSZSessDeleteErrAtDbladeTrap=ruckusSZSessDeleteErrAtDbladeTrap, ruckusSZSystemLBSConnectFailedTrap=ruckusSZSystemLBSConnectFailedTrap, ruckusSZAPUsbSoftwarePackageDownloadedTrap=ruckusSZAPUsbSoftwarePackageDownloadedTrap, ruckusSZDPDisconnectedTrap=ruckusSZDPDisconnectedTrap, ruckusSZAuthSrvrIp=ruckusSZAuthSrvrIp, ruckusSZFanId=ruckusSZFanId, ruckusSZMacSpoofingRogueAPDetectedTrap=ruckusSZMacSpoofingRogueAPDetectedTrap, ruckusSZClusterAppStartTrap=ruckusSZClusterAppStartTrap, ruckusSZDPPhyInterfaceDownTrap=ruckusSZDPPhyInterfaceDownTrap, ruckusSZDPUpgradeStartTrap=ruckusSZDPUpgradeStartTrap, ruckusSZClusterCfgBackupFailedTrap=ruckusSZClusterCfgBackupFailedTrap, ruckusSZAPDiscoverySuccessTrap=ruckusSZAPDiscoverySuccessTrap, ruckusSZAPFirmwareUpdatedTrap=ruckusSZAPFirmwareUpdatedTrap, ruckusSZDestSyslogServerAddress=ruckusSZDestSyslogServerAddress, ruckusSZAPTunnelBuildFailedTrap=ruckusSZAPTunnelBuildFailedTrap, ruckusSZClusterOutOfServiceTrap=ruckusSZClusterOutOfServiceTrap, ruckusSZAPADServerReachableTrap=ruckusSZAPADServerReachableTrap, ruckusSZAuthSrvrNotReachableTrap=ruckusSZAuthSrvrNotReachableTrap, ruckusSZNodeBondInterfaceUpTrap=ruckusSZNodeBondInterfaceUpTrap, ruckusSZSyslogServerReachableTrap=ruckusSZSyslogServerReachableTrap, ruckusSZSoftwareName=ruckusSZSoftwareName, ruckusSZCPUUsageThresholdBackToNormalTrap=ruckusSZCPUUsageThresholdBackToNormalTrap, ruckusSZDPConfUpdatedTrap=ruckusSZDPConfUpdatedTrap, ruckusSZEventRogueMac=ruckusSZEventRogueMac, ruckusSZFanStatus=ruckusSZFanStatus, ruckusSZEventNodeMgmtIp=ruckusSZEventNodeMgmtIp, ruckusSZUEImsi=ruckusSZUEImsi, ruckusSZAPSoftGRETunnelFailoverPtoSTrap=ruckusSZAPSoftGRETunnelFailoverPtoSTrap, ruckusSZAPLBSConnectFailedTrap=ruckusSZAPLBSConnectFailedTrap, ruckusSZNodePhyInterfaceDownTrap=ruckusSZNodePhyInterfaceDownTrap, ruckusSZSessUpdateErrAtDbladeTrap=ruckusSZSessUpdateErrAtDbladeTrap, ruckusSZEventAPGPSCoordinates=ruckusSZEventAPGPSCoordinates, ruckusSZEventFirmwareVersion=ruckusSZEventFirmwareVersion, ruckusSZClusterUploadVDPFirmwareStartTrap=ruckusSZClusterUploadVDPFirmwareStartTrap, ruckusSZEventMacAddr=ruckusSZEventMacAddr, ruckusSZAPPreProvisionModelDiffTrap=ruckusSZAPPreProvisionModelDiffTrap, ruckusSecondaryGRE=ruckusSecondaryGRE, ruckusSZRadProxyIp=ruckusSZRadProxyIp, ruckusSZEventTraps=ruckusSZEventTraps, ruckusSZSSIDSpoofingRogueAPDetectedTrap=ruckusSZSSIDSpoofingRogueAPDetectedTrap, ruckusSZDPStatisticUpdateFaliedTrap=ruckusSZDPStatisticUpdateFaliedTrap, ruckusRateLimitTORSurpassedTrap=ruckusRateLimitTORSurpassedTrap, ruckusSZClusterName=ruckusSZClusterName, ruckusSZDPKey=ruckusSZDPKey, ruckusSZDPUpgradeFailedTrap=ruckusSZDPUpgradeFailedTrap, ruckusSZDPAcceptTunnelRequestTrap=ruckusSZDPAcceptTunnelRequestTrap, ruckusSZProcessRestartTrap=ruckusSZProcessRestartTrap, ruckusSZSyslogServerSwitchedTrap=ruckusSZSyslogServerSwitchedTrap, ruckusSZDNATIp=ruckusSZDNATIp, ruckusSZLBSURL=ruckusSZLBSURL, ruckusSZClusterRestoreFailedTrap=ruckusSZClusterRestoreFailedTrap, ruckusSZEspDNATServerUnreachableTrap=ruckusSZEspDNATServerUnreachableTrap, ruckusSZAPRadiusServerUnreachableTrap=ruckusSZAPRadiusServerUnreachableTrap, ruckusSZIPSecTunnelAssociateFailedTrap=ruckusSZIPSecTunnelAssociateFailedTrap, ruckusSZLicenseUsageThresholdExceededTrap=ruckusSZLicenseUsageThresholdExceededTrap, ruckusSZDPDiscoveryFailTrap=ruckusSZDPDiscoveryFailTrap, ruckusSZEventDescription=ruckusSZEventDescription, ruckusSZSshTunnelSwitchedTrap=ruckusSZSshTunnelSwitchedTrap, ruckusSZAPSoftGRETunnelFailoverStoPTrap=ruckusSZAPSoftGRETunnelFailoverStoPTrap, ruckusSZIpmiTempPTrap=ruckusSZIpmiTempPTrap, ruckusSZMemoryUsageThresholdExceededTrap=ruckusSZMemoryUsageThresholdExceededTrap, ruckusSZLicenseImportSuccessTrap=ruckusSZLicenseImportSuccessTrap, ruckusSZCableModemDownTrap=ruckusSZCableModemDownTrap, ruckusSZEspDNATServerReachableTrap=ruckusSZEspDNATServerReachableTrap, ruckusSZAPConfUpdatedTrap=ruckusSZAPConfUpdatedTrap, ruckusSZAPADServerUnreachableTrap=ruckusSZAPADServerUnreachableTrap, ruckusSZConfigAPModel=ruckusSZConfigAPModel, ruckusSZEventClientMacAddr=ruckusSZEventClientMacAddr, ruckusSZAccSrvrNotReachableTrap=ruckusSZAccSrvrNotReachableTrap, ruckusSZClusterUpgradeSuccessTrap=ruckusSZClusterUpgradeSuccessTrap, ruckusSZResourceUnavailableTrap=ruckusSZResourceUnavailableTrap, ruckusSZEventMIB=ruckusSZEventMIB, ruckusSZClusterBackupFailedTrap=ruckusSZClusterBackupFailedTrap, ruckusSZEventAPMacAddr=ruckusSZEventAPMacAddr, ruckusSZAPAcctMsgDropNoAcctStartMsgTrap=ruckusSZAPAcctMsgDropNoAcctStartMsgTrap, ruckusSZDiskUsageThresholdBackToNormalTrap=ruckusSZDiskUsageThresholdBackToNormalTrap, ruckusSZDPStatusUpdateFailedTrap=ruckusSZDPStatusUpdateFailedTrap, ruckusSZAPConnectedTrap=ruckusSZAPConnectedTrap, ruckusSZFtpPort=ruckusSZFtpPort, ruckusSZCableModemUpTrap=ruckusSZCableModemUpTrap, ruckusSZEventReason=ruckusSZEventReason, ruckusSZAPFirmwareUpdateFailedTrap=ruckusSZAPFirmwareUpdateFailedTrap, ruckusSZIpmiRETempBBTrap=ruckusSZIpmiRETempBBTrap, ruckusSZDiskPerc=ruckusSZDiskPerc, ruckusSZAPRejectedTrap=ruckusSZAPRejectedTrap, ruckusSZClusterCfgRestoreSuccessTrap=ruckusSZClusterCfgRestoreSuccessTrap, ruckusSZNodeShutdownTrap=ruckusSZNodeShutdownTrap, ruckusSZIpmiREFanStatusTrap=ruckusSZIpmiREFanStatusTrap, ruckusSZUpgradeFailedTrap=ruckusSZUpgradeFailedTrap, ruckusSZDPUpgradingTrap=ruckusSZDPUpgradingTrap, ruckusSZAPDeletedTrap=ruckusSZAPDeletedTrap, ruckusSZAPTunnelBuildSuccessTrap=ruckusSZAPTunnelBuildSuccessTrap, ruckusSZIPSecTunnelAssociatedTrap=ruckusSZIPSecTunnelAssociatedTrap, ruckusSZUnauthorizedCoaDmMessageDroppedTrap=ruckusSZUnauthorizedCoaDmMessageDroppedTrap, ruckusSZEspAuthServerResolvableTrap=ruckusSZEspAuthServerResolvableTrap, ruckusSZNetworkPortID=ruckusSZNetworkPortID, ruckusSZLicenseSyncSuccessTrap=ruckusSZLicenseSyncSuccessTrap, ruckusSZDPLostHeartbeatTrap=ruckusSZDPLostHeartbeatTrap, ruckusPrimaryGRE=ruckusPrimaryGRE, ruckusSZSystemLBSConnectSuccessTrap=ruckusSZSystemLBSConnectSuccessTrap, ruckusSZSmfRegFailedTrap=ruckusSZSmfRegFailedTrap, ruckusSZAPSoftGREGatewayReachableTrap=ruckusSZAPSoftGREGatewayReachableTrap, ruckusSZKeepAliveFailureTrap=ruckusSZKeepAliveFailureTrap, ruckusSZAPLBSNoResponsesTrap=ruckusSZAPLBSNoResponsesTrap, ruckusSZSyslogServerAddress=ruckusSZSyslogServerAddress, ruckusSZIpmiTempBBTrap=ruckusSZIpmiTempBBTrap, ruckusSZAPSwapOutModelDiffTrap=ruckusSZAPSwapOutModelDiffTrap, ruckusSZDiskUsageThresholdExceededTrap=ruckusSZDiskUsageThresholdExceededTrap, ruckusSZClientMiscEventTrap=ruckusSZClientMiscEventTrap, ruckusSZNodeJoinFailedTrap=ruckusSZNodeJoinFailedTrap, ruckusSZNodePhyInterfaceUpTrap=ruckusSZNodePhyInterfaceUpTrap, ruckusSZClusterCfgBackupSuccessTrap=ruckusSZClusterCfgBackupSuccessTrap, ruckusSZEventCtrlIP=ruckusSZEventCtrlIP, ruckusSZSessDeletedAtDbladeTrap=ruckusSZSessDeletedAtDbladeTrap, ruckusSZEventAPName=ruckusSZEventAPName, ruckusSZEventSSID=ruckusSZEventSSID, ruckusSZFtpIp=ruckusSZFtpIp, ruckusSZClusterBackToInServiceTrap=ruckusSZClusterBackToInServiceTrap, ruckusSZEventType=ruckusSZEventType, ruckusSZClusterInMaintenanceStateTrap=ruckusSZClusterInMaintenanceStateTrap, ruckusSZSessUpdatedAtDbladeTrap=ruckusSZSessUpdatedAtDbladeTrap, ruckusSZProcessorId=ruckusSZProcessorId, ruckusSZSystemLBSAuthFailedTrap=ruckusSZSystemLBSAuthFailedTrap, ruckusSZEspAuthServerReachableTrap=ruckusSZEspAuthServerReachableTrap, ruckusSZLicenseSyncFailedTrap=ruckusSZLicenseSyncFailedTrap, ruckusSoftGREGatewayList=ruckusSoftGREGatewayList, ruckusSZNodeRemoveFailedTrap=ruckusSZNodeRemoveFailedTrap, ruckusSZIpmiREFanTrap=ruckusSZIpmiREFanTrap, ruckusSZSystemLBSNoResponseTrap=ruckusSZSystemLBSNoResponseTrap, ruckusSZAuthFailedNonPermanentIDTrap=ruckusSZAuthFailedNonPermanentIDTrap, ruckusSZAPAcctRespWhileInvalidConfigTrap=ruckusSZAPAcctRespWhileInvalidConfigTrap, ruckusSZEspDNATServerResolvableTrap=ruckusSZEspDNATServerResolvableTrap, ruckusSZDPConfigID=ruckusSZDPConfigID, ruckusSZTemperatureStatus=ruckusSZTemperatureStatus, ruckusSZEspAuthServerUnResolvableTrap=ruckusSZEspAuthServerUnResolvableTrap, ruckusSZAPLDAPServerUnreachableTrap=ruckusSZAPLDAPServerUnreachableTrap, ruckusSZFtpTransferErrorTrap=ruckusSZFtpTransferErrorTrap, ruckusSZLBSPort=ruckusSZLBSPort, ruckusSZIpmiRETempPTrap=ruckusSZIpmiRETempPTrap, ruckusSZDPTunnelSetUpTrap=ruckusSZDPTunnelSetUpTrap, ruckusSZCableModemRebootTrap=ruckusSZCableModemRebootTrap, ruckusSZAPConfUpdateFailedTrap=ruckusSZAPConfUpdateFailedTrap, ruckusSZNodeRestartedTrap=ruckusSZNodeRestartedTrap, ruckusSZLicenseType=ruckusSZLicenseType, ruckusSZCPUPerc=ruckusSZCPUPerc, ruckusSZDPDeletedTrap=ruckusSZDPDeletedTrap, ruckusSZNodeBackToInServiceTrap=ruckusSZNodeBackToInServiceTrap, ruckusSZAPModel=ruckusSZAPModel, ruckusSZNodeRemoveSuccessTrap=ruckusSZNodeRemoveSuccessTrap, ruckusSZRadSrvrIp=ruckusSZRadSrvrIp, ruckusSZCMResetFactoryByUserTrap=ruckusSZCMResetFactoryByUserTrap, ruckusSZLostCnxnToDbladeTrap=ruckusSZLostCnxnToDbladeTrap, ruckusSZADHocNetworkRogueAPDetectedTrap=ruckusSZADHocNetworkRogueAPDetectedTrap, ruckusSZLicenseServerName=ruckusSZLicenseServerName, ruckusSZEventCode=ruckusSZEventCode, ruckusSZUserName=ruckusSZUserName, ruckusSZAPRadiusServerReachableTrap=ruckusSZAPRadiusServerReachableTrap, ruckusSZConfRcvFailedTrap=ruckusSZConfRcvFailedTrap, ruckusSZDomainName=ruckusSZDomainName, ruckusSZCPUUsageThresholdExceededTrap=ruckusSZCPUUsageThresholdExceededTrap, ruckusSZAPLostHeartbeatTrap=ruckusSZAPLostHeartbeatTrap, ruckusSZNodeBondInterfaceDownTrap=ruckusSZNodeBondInterfaceDownTrap, ruckusSZProcessName=ruckusSZProcessName, ruckusSZHipFailoverTrap=ruckusSZHipFailoverTrap, ruckusSZClusterUploadVDPFirmwareSuccessTrap=ruckusSZClusterUploadVDPFirmwareSuccessTrap, ruckusSZAPUsbSoftwarePackageDownloadFailedTrap=ruckusSZAPUsbSoftwarePackageDownloadFailedTrap, ruckusSZMemoryUsageThresholdBackToNormalTrap=ruckusSZMemoryUsageThresholdBackToNormalTrap, ruckusSZDPConfUpdateFailedTrap=ruckusSZDPConfUpdateFailedTrap, ruckusSZDPConnectedTrap=ruckusSZDPConnectedTrap, ruckusSZSwitchStatus=ruckusSZSwitchStatus, ruckusSZNodeJoinSuccessTrap=ruckusSZNodeJoinSuccessTrap, ruckusSZMaliciousRogueAPTimeoutTrap=ruckusSZMaliciousRogueAPTimeoutTrap, ruckusSZDPPhyInterfaceUpTrap=ruckusSZDPPhyInterfaceUpTrap, ruckusSZSystemMiscEventTrap=ruckusSZSystemMiscEventTrap, ruckusSZServiceUnavailableTrap=ruckusSZServiceUnavailableTrap, ruckusSZEspAuthServerUnreachableTrap=ruckusSZEspAuthServerUnreachableTrap, ruckusSZIPSecGWAddress=ruckusSZIPSecGWAddress, ruckusSZAccSrvrIp=ruckusSZAccSrvrIp, ruckusSZEventAPIP=ruckusSZEventAPIP, ruckusSZUpgradeSuccessTrap=ruckusSZUpgradeSuccessTrap, ruckusSZLicenseImportFailedTrap=ruckusSZLicenseImportFailedTrap, ruckusSZClusterUploadSuccessTrap=ruckusSZClusterUploadSuccessTrap, ruckusSZSrcProcess=ruckusSZSrcProcess, ruckusSZClusterCfgRestoreFailedTrap=ruckusSZClusterCfgRestoreFailedTrap, ruckusSZEventAPDescription=ruckusSZEventAPDescription, ruckusSZLicenseUsagePerc=ruckusSZLicenseUsagePerc, ruckusSZLDAPSrvrIp=ruckusSZLDAPSrvrIp, ruckusSZFileName=ruckusSZFileName, ruckusSZUEMsisdn=ruckusSZUEMsisdn, ruckusSZSoftGREGWAddress=ruckusSZSoftGREGWAddress, ruckusSZClusterLeaderChangedTrap=ruckusSZClusterLeaderChangedTrap, ruckusSZAPConfigID=ruckusSZAPConfigID, ruckusSZClusterUploadFailedTrap=ruckusSZClusterUploadFailedTrap, ruckusSZNodeOutOfServiceTrap=ruckusSZNodeOutOfServiceTrap, ruckusSZEventUpgradedFirmwareVersion=ruckusSZEventUpgradedFirmwareVersion, ruckusSZSrcSyslogServerAddress=ruckusSZSrcSyslogServerAddress, ruckusSZAPLBSAuthFailedTrap=ruckusSZAPLBSAuthFailedTrap, ruckusSZAPMiscEventTrap=ruckusSZAPMiscEventTrap, ruckusSZDPIP=ruckusSZDPIP, ruckusSZAPLDAPServerReachableTrap=ruckusSZAPLDAPServerReachableTrap, ruckusSZConnectedToDbladeTrap=ruckusSZConnectedToDbladeTrap, ruckusSZAPDisconnectedTrap=ruckusSZAPDisconnectedTrap, ruckusSZDPTunnelTearDownTrap=ruckusSZDPTunnelTearDownTrap, ruckusSZCriticalAPConnectedTrap=ruckusSZCriticalAPConnectedTrap, ruckusSZEventNodeName=ruckusSZEventNodeName)
