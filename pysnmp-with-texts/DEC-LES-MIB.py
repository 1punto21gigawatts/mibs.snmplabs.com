#
# PySNMP MIB module DEC-LES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEC-LES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
decMIBextension, = mibBuilder.importSymbols("DECATM-MIB", "decMIBextension")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, IpAddress, Integer32, iso, Counter32, Unsigned32, ModuleIdentity, Bits, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Integer32", "iso", "Counter32", "Unsigned32", "ModuleIdentity", "Bits", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
decLesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28))
decLesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1))
decLesMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2))
decLesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1))
decLesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 2))
decLesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1), )
if mibBuilder.loadTexts: decLesConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesConfigTable.setDescription('A table describing all the LES components which this managed device supports.')
decLesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesConfigEntry.setDescription('Each row describes one LES component, which might be either a standalone LES or part of a distributed LES.')
decLesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: decLesIndex.setDescription('A unique number greater than zero which identifies this table row.')
decLesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRowStatus.setDescription("This object is used to create and delete LAN Emulation Server components. If this object is writable, it will accept the values 'createAndGo' 'destroy' under suitable conditions. Use decLesAdminStatus to enable and disable service.")
decLesAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decLesAdminStatus.setDescription("The desired state of this LES component. When a LES is distributed, this object controls the 'local' server component, as opposed to the overall state of the LES. If a BUS is connected to the LES, enabling/disabling either server may affect both of them. Otherwise it is up to the network manager to coordinate the state of the servers.")
decLesOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabling", 3), ("deleting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decLesOperStatus.setDescription("The operational state of this LES component. A LES component may not become operational until it has been configured with values for LAN Type Maximum Data Frame Size Control Time-out BUS ATM Address When a LES is in the 'disabling' or 'deleting' state, attempts to set decLesAdminStatus to 'up' will fail.")
decLesLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLastChange.setDescription('The value of sysUpTime at the time that this server last entered its current operational state. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
decLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decLesAtmAddress.setDescription('The ATM address of this LAN Emulation Server, or LAN Emulation Server component. Clients establish Control Direct VCCs to this address to initiate the process of Joining the emulated LAN.')
decLesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesDescription.setStatus('mandatory')
if mibBuilder.loadTexts: decLesDescription.setDescription('A human-readable string which can contain anything the network manager wants.')
decLesLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesLanName.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.1')
if mibBuilder.loadTexts: decLesLanName.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLanName.setDescription('The name of this emulated LAN. This can be any string that the network manager would like this LES component to pass out to new clients. This string is not guaranteed to uniquely identify the emulated LAN.')
decLesLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("aflane8023", 2), ("aflane8025", 3))).clone('aflane8023')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesLanType.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.2')
if mibBuilder.loadTexts: decLesLanType.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLanType.setDescription("The data frame format for this emulated LAN. In an active emulated LAN, this parameter MUST have a consistent value in all of the LES and BUS components serving the emulated LAN. Otherwise various problems may result. The value of this columnar object may only be changed when this LAN Emulation Server has no active clients, and 'decLes[Admin,Oper]Status' are 'down'.")
decLesMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("max1516", 2), ("max4544", 3), ("max9234", 4), ("max18190", 5))).clone('max1516')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesMaxDataFrameSize.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.2')
if mibBuilder.loadTexts: decLesMaxDataFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: decLesMaxDataFrameSize.setDescription("The maximum AAL-5 SDU size for data frames sent over this emulated LAN. This must be one of the standard sizes defined in the LAN Emulation specification. In an active emulated LAN, this parameter MUST have a consistent value in all of the LES and BUS components serving the emulated LAN. Otherwise various problems may result. The value of this columnar object may only be changed when this LAN Emulation Server has no active clients, and 'decLes[Admin,Oper]Status' are 'down'.")
decLesAtmAddressOfBUS = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesAtmAddressOfBUS.setStatus('mandatory')
if mibBuilder.loadTexts: decLesAtmAddressOfBUS.setDescription("The ATM address of the Broadcast and Unknown Server component associated with this LES component. Unless otherwise stated in product documentation, the value of this columnar object may only be changed when this LAN Emulation Server has no active clients, and 'decLes[Admin,Oper]Status' are 'down'.")
decLesControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlTimeout.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.2')
if mibBuilder.loadTexts: decLesControlTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlTimeout.setDescription('S4 Control Time-out. Time out period used for timing out most request/response control frame interactions, as specified elsewhere. Once a LE Client establishes a Control Direct VCC to the LE Server, the Join phase must complete within the Join Time-out time. If not, the LE Service SHOULD release any Control VCCs to that LE Client, terminating the Join phase. If a LES is distributed, each of its servers should have the same value for this parameter.')
decLesArpResponsePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("direct", 2), ("broadcast", 3))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesArpResponsePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpResponsePolicy.setDescription('Lets you fine-tune the performance of an emulated LAN by controlling the distribution of LE_ARP_RESPONSEs. You can choose from one of three policies: unspecified(1) Leave everything up to the implementation. direct(2) The LES sends responses only to the client to which they are directed. This reduces the amount of overhead per response packet, but may result in more LE_ARP traffic. broadcast(3) The LES sends responses to all clients via the Control Direct VCC. This lets clients learn LE_ARP information by eavesdropping, but also increases per-packet overhead.')
decLesNarpRequestPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesNarpRequestPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpRequestPolicy.setDescription('Controls whether this LES forwards LE_NARP_REQUESTs.')
decLesTopologyChangeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyChangeMode.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTopologyChangeMode.setDescription("The Topology Change mode which this LE Server believes the emulated LAN is in, based upon the Topology Change requests it has seen and/or generated. The value 'true' indicates accelerated aging mode - as opposed to normal aging mode.")
decLesLastTcModeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLastTcModeChange.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLastTcModeChange.setDescription("The value of sysUpTime at the time that the object 'decLesTopologyChangeMode' last acquired its current value. If the current value was acquired prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.")
decLesTopologyChangeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesTopologyChangeTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTopologyChangeTimeout.setDescription("Provides a guard against an emulated LAN remaining in accelerated aging mode forever. If an emulated LAN remains in the accelerated aging state for more than 'decLesTopologyChangeTimeout' seconds following the last Topology Request, the LE Server will automatically issue a Topology Request frame to reset all the clients to normal aging mode. This value is measured in seconds, and should be set higher than the normal time between bridge BPDUs.")
decLesClientStatesTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2), )
if mibBuilder.loadTexts: decLesClientStatesTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesClientStatesTable.setDescription('A table describing how many clients are in various membership states.')
decLesClientStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesClientStatesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesClientStatesEntry.setDescription('Each row contains counters for one LES component.')
decLesActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesActiveClients.setStatus('mandatory')
if mibBuilder.loadTexts: decLesActiveClients.setDescription('The number of active clients of this LES component.')
decLesActiveProxyClients = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesActiveProxyClients.setStatus('mandatory')
if mibBuilder.loadTexts: decLesActiveProxyClients.setDescription('The number of active proxy clients of this LES component.')
decLesAwaitingJoinRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesAwaitingJoinRequest.setStatus('mandatory')
if mibBuilder.loadTexts: decLesAwaitingJoinRequest.setDescription('The number of Control Direct VCCs on which this LES component is waiting for a Join request.')
decLesCtlDistributeInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDistributeInProgress.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDistributeInProgress.setDescription('The number of clients to which this LES component is currently establishing Control Distribute VCCs.')
decLesTerminating = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTerminating.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTerminating.setDescription('The number of clients whose memberships this LES component is in the process of terminating.')
decLesClientTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3), )
if mibBuilder.loadTexts: decLesClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesClientTable.setDescription('A table listing clients which belong to the emulated LANs that this node serves. This table reflects the actual state of each emulated LAN, as opposed to the way the network manager would like to see LE clients and servers configured. This table contains only local clients - that is, to say, clients connected directly to one of the server components which this agent manages.')
decLesClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesClientID"))
if mibBuilder.loadTexts: decLesClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesClientEntry.setDescription('Each entry describes an active LAN Emulation Client, from the perspective of the LES.')
decLesClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesClientID.setStatus('mandatory')
if mibBuilder.loadTexts: decLesClientID.setDescription('The LEC-ID which the LES handed to the LAN Emulation Client as part of the Join process.')
decLesClientAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesClientAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decLesClientAtmAddress.setDescription('The primary ATM address of the LAN Emulation Client.')
decLesClientIsProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesClientIsProxy.setStatus('mandatory')
if mibBuilder.loadTexts: decLesClientIsProxy.setDescription('Indicates whether this client is a proxy client.')
decLesClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noLesConnect", 2), ("lesConnect", 3), ("joining", 4), ("operational", 5), ("deleting", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesClientState.setStatus('mandatory')
if mibBuilder.loadTexts: decLesClientState.setDescription("Indicates the status of this LEC from the server's perspective.")
decLesClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesClientRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decLesClientRowStatus.setDescription("Provides a way to disconnect a LEC from the emulated LAN. When read, this object has the value 'active'. When written, it accepts the value 'destroy'. Because the ability to disconnect clients could lead to denial-of-service attacks, support for this feature is strictly optional.")
decLesLecTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4), )
if mibBuilder.loadTexts: decLesLecTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLecTable.setDescription('A table listing clients which belong to the emulated LANs that this node serves.')
decLesLecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesLecAtmAddress"))
if mibBuilder.loadTexts: decLesLecEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLecEntry.setDescription('Each entry describes a LAN Emulation Client from the perspective of the LES.')
decLesLecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLecAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLecAtmAddress.setDescription('The primary ATM address of the LAN Emulation Client.')
decLesLecID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLecID.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLecID.setDescription('For an active client, the LEC-ID that the LES handed to the client as part of the Join process. For an inactive client, the value zero.')
decLesLecIsProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLecIsProxy.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLecIsProxy.setDescription('Indicates whether this client is a proxy client.')
decLesLecState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noLesConnect", 2), ("lesConnect", 3), ("joining", 4), ("operational", 5), ("deleting", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLecState.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLecState.setDescription("Indicates the status of this LEC from the server's perspective.")
decLesLecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesLecRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decLesLecRowStatus.setDescription("Provides a way to disconnect a LEC from the emulated LAN. When read, this object has the value 'active'. When written, it only accepts the value 'destroy'. Because the ability to disconnect clients could lead to denial-of-service attacks, support for this feature is strictly optional.")
decLesCtlDirectTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5), )
if mibBuilder.loadTexts: decLesCtlDirectTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDirectTable.setDescription('This optional table identifies Control Direct VCCs at the place where they attach to the LES. In a SVC implementation, the objects in this table will be read-only. In a PVC implementation, this table can be used to tell the LES about the creation or the deletion of Control Direct VCCs.')
decLesCtlDirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesLecAtmAddress"))
if mibBuilder.loadTexts: decLesCtlDirectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDirectEntry.setDescription('Each entry describes the circuits going to one LAN Emulation Client.')
decLesControlDirectInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDirectInterface.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlDirectInterface.setDescription("If a Control Direct VCC exists, this object contains the 'ifIndex' of the ATM port which terminates that circuit at the LES. Otherwise, its value is 0.")
decLesControlDirectVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDirectVpi.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlDirectVpi.setDescription('If a Control Direct VCC exists, this object contains the VPI of the Control Direct VCC at the point where it connects to the LES. Otherwise, its value is 0.')
decLesControlDirectVci = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDirectVci.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlDirectVci.setDescription('If a Control Direct VCC exists, this object contains the VCI of the Control Direct VCC at the point where it connects to the LES. Otherwise, its value is 0.')
decLesControlDirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDirectRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlDirectRowStatus.setDescription('Used to create and delete rows in the table.')
decLesCtlDistTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6), )
if mibBuilder.loadTexts: decLesCtlDistTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDistTable.setDescription('This optional table identifies Control Distribute VCCs at the place where they attach to the LES. In a SVC implementation, this table will be read- only. In a PVC implementation, this table can be used to tell the LES about the creation or the deletion of Control Distribute VCCs.')
decLesCtlDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesControlDistInterface"), (0, "DEC-LES-MIB", "decLesControlDistVpi"), (0, "DEC-LES-MIB", "decLesControlDistVci"))
if mibBuilder.loadTexts: decLesCtlDistEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDistEntry.setDescription('Each entry describes one Control Distribute VCC.')
decLesControlDistInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesControlDistInterface.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlDistInterface.setDescription("The 'ifIndex' of the ATM port which terminates the Control Distribute VCC at the LES.")
decLesControlDistVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesControlDistVpi.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlDistVpi.setDescription('The VPI of the Control Distribute VCC at the point where this VCC connects to the LES.')
decLesControlDistVci = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesControlDistVci.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlDistVci.setDescription('The VCI of the Control Distribute VCC at the point where this VCC connects to the LES.')
decLesControlDistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDistRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlDistRowStatus.setDescription('An object provided to satisfy the requirement that all tables have at least one accessible object; in the future, it may also be extended to provide PVC support.')
decLesMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7), )
if mibBuilder.loadTexts: decLesMacAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesMacAddressTable.setDescription("A table of unicast MAC addresses registered with this host's LES components by their local clients.")
decLesMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesMacAddress"))
if mibBuilder.loadTexts: decLesMacAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesMacAddressEntry.setDescription('Each entry describes one registered (MAC address, ATM address) pair.')
decLesMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decLesMacAddress.setDescription("One of the MAC addresses registered with the LAN Emulation Server 'decLesIndex'.")
decLesMacAddressOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesMacAddressOwner.setStatus('mandatory')
if mibBuilder.loadTexts: decLesMacAddressOwner.setDescription('The LECID of the client that registered this MAC address.')
decLesMacAddressAtmBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesMacAddressAtmBinding.setStatus('mandatory')
if mibBuilder.loadTexts: decLesMacAddressAtmBinding.setDescription('The ATM address associated with this MAC address.')
decLesRouteDescrTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8), )
if mibBuilder.loadTexts: decLesRouteDescrTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRouteDescrTable.setDescription("A table of IEEE 802.5 Route Descriptors registered with this host's LES components by their local clients.")
decLesRouteDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesRouteDescrSegmentID"), (0, "DEC-LES-MIB", "decLesRouteDescrBridgeNumber"))
if mibBuilder.loadTexts: decLesRouteDescrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRouteDescrEntry.setDescription('Each table row describes a (Route Descriptor, ATM address) pair registered for a particular client.')
decLesRouteDescrSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRouteDescrSegmentID.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRouteDescrSegmentID.setDescription('The LAN ID portion of the IEEE 802.5 route descriptor associated with this conceptual row.')
decLesRouteDescrBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRouteDescrBridgeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRouteDescrBridgeNumber.setDescription('The Bridge Number portion of the IEEE 802.5 route descriptor associated with this conceptual row.')
decLesRouteDescrOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRouteDescrOwner.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRouteDescrOwner.setDescription('The LECID of the client that registered this route descriptor.')
decLesRouteDescrAtmBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRouteDescrAtmBinding.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRouteDescrAtmBinding.setDescription("The ATM address registered for the IEEE 802.5 route descriptor ('decLesRouteDescrSegmentID', 'decLesRouteDescrBridgeNumber').")
decLesTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9), )
if mibBuilder.loadTexts: decLesTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTrafficTable.setDescription('A table of traffic statistics, with one row for each Broadcast and Unknown Server.')
decLesTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesTrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTrafficEntry.setDescription('A set of traffic statistics for one BUS component.')
decLesControlFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesControlFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: decLesControlFramesIn.setDescription('The total number of control frames received by this LES component. This includes invalid frames.')
decLesShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesShortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: decLesShortFrames.setDescription('The number of frames which were discarded because they were too short, and which are not included in any other error count.')
decLesUnjoinedClientFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnjoinedClientFrames.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnjoinedClientFrames.setDescription('The number of frames which were discarded because a client had not completed the Join process, and which are not included in any other error count.')
decLesVersionsNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesVersionsNotSupported.setStatus('mandatory')
if mibBuilder.loadTexts: decLesVersionsNotSupported.setDescription("The number of frames which were discarded because they specified a version of the LAN Emulation protocol which the server does not support. This count does not include Join frames counted by the MIB object 'decLesJoinVersionsNotSupported'.")
decLesInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesInvalidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: decLesInvalidFrames.setDescription('The number of frames which were discarded because of invalid frame formats, and which are not included in any other error count. This counter includes frames with invalid MARKERs and OPCODEs.')
decLesReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesReceiveQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesReceiveQueueDiscards.setDescription('The number of frames discarded due to receive queue overflows, and not included in other discard counts.')
decLesMiscDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesMiscDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesMiscDiscards.setDescription('The number of incoming frames which were discarded due to no fault of their own, and which are not included in any other discard count or error count.')
decLesCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10), )
if mibBuilder.loadTexts: decLesCallStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCallStatsTable.setDescription("This table holds statistics on virtual circuit/leaf establishment attempts. It contains one row for each LAN Emulation Server, and acts as an extension to 'decLesServicesTable'.")
decLesCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesCallStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCallStatsEntry.setDescription('Each row contains connection statistics for one LAN Emulation Server.')
decLesCtlDirectCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDirectCalls.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDirectCalls.setDescription('The total number of Control Direct VCC establishment attempts for this LES component.')
decLesCtlDirectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDirectFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDirectFailures.setDescription('The number of Control Direct establishment attempts for this LES component which were not accepted. This includes failures counted in decLesCtlDirectOutOfResources decLesCtlDirectInvalidInfoElements and any miscellaneous failures.')
decLesCtlDirectOutOfResources = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDirectOutOfResources.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDirectOutOfResources.setDescription('The number of Control Direct establishment attempts for this LES component which failed for lack of resources.')
decLesCtlDirectInvalidInfoElements = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDirectInvalidInfoElements.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDirectInvalidInfoElements.setDescription('The number of Control Direct establishment attempts for this LES component which failed because required information elements were missing or contained invalid information. The optional Event Log group can help you determine which information elements were invalid or missing.')
decLesCtlDistributeCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDistributeCalls.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDistributeCalls.setDescription('The total number of Control Distribute connections which this LES component tried to establish to clients.')
decLesCtlDistributeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDistributeFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDistributeFailures.setDescription('The number of Control Distribute connections which this LES component was unable to establish. This includes failures counted in decLesCtlDistribOutOfResources decLesJoinCtlDistributeRejects and any miscellaneous failures.')
decLesCtlDistribOutOfResources = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDistribOutOfResources.setStatus('mandatory')
if mibBuilder.loadTexts: decLesCtlDistribOutOfResources.setDescription('The number of Control Distribute connections which this LES component could not establish due to lack of resources.')
decLesJoinTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11), )
if mibBuilder.loadTexts: decLesJoinTable.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4')
if mibBuilder.loadTexts: decLesJoinTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinTable.setDescription('This table holds statistics on Join attempts. It contains one row for each managed LES component.')
decLesJoinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesJoinEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinEntry.setDescription('Each row contains Join statistics for one LES.')
decLesJoinRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinRequests.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinRequests.setDescription('The total number of Join requests received by this LES component.')
decLesJoinSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinSuccesses.setDescription('The number of first-time Join requests accepted by this LES component.')
decLesJoinFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinFailures.setDescription('The number of first-time Join requests rejected by this LES component. This includes requests counted in decLesJoinInvalidParameters decLesJoinDuplicateAtmAddresses decLesJoinDuplicateLanDestinations decLesJoinInvalidAtmAddresses decLesJoinInvalidLanDestinations decLesJoinWrongLanTypes decLesJoinMaxFrameSizesTooSmall decLesJoinInvalidLECIDs decLesJoinCtlDistributeRejects decLesJoinOutOfResources This value does not include failures counted in decLesJoinDuplicates decLesJoinNonDuplicates decLesJoinDiscards decLesJoinTimeouts decLesJoinVersionsNotSupported ')
decLesJoinDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinDuplicates.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.14')
if mibBuilder.loadTexts: decLesJoinDuplicates.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinDuplicates.setDescription("The number of duplicate Join requests received by this LES component. Each duplicate Join request is answered with a duplicate Join response. These do not count towards the various 'successful Join' and 'failed Join' statistics.")
decLesJoinNonDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinNonDuplicates.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.14')
if mibBuilder.loadTexts: decLesJoinNonDuplicates.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinNonDuplicates.setDescription('The number of Join requests which were rejected by this LES component because they differed from previous Join requests received over the same Control Direct VCCs. Clients which send such requests are terminated.')
decLesJoinDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinDiscards.setDescription('The number of Join requests which were discarded due to no fault of their own, and for which this LES component sent no Join response.')
decLesJoinTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinTimeouts.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.2')
if mibBuilder.loadTexts: decLesJoinTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinTimeouts.setDescription('The number of Control Direct VCCs which this LES closed because their callers failed to send Join requests within a reasonable time-out period.')
decLesJoinVersionsNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinVersionsNotSupported.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinVersionsNotSupported.setDescription('The number of Join requests which were ignored by this LES component because they specified a version of the LAN Emulation protocol which the server does not support. As per the specification, such requests are not answered with response frames.')
decLesJoinInvalidParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinInvalidParameters.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinInvalidParameters.setDescription('The number of Join requests which were rejected by this LES component due to invalid parameters (such as a non-zero STATUS in the Join request frame).')
decLesJoinDuplicateAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinDuplicateAtmAddresses.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.6')
if mibBuilder.loadTexts: decLesJoinDuplicateAtmAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinDuplicateAtmAddresses.setDescription('The number of Join requests which were rejected by this LES component because they specified a duplicate ATM address.')
decLesJoinDuplicateLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinDuplicateLanDestinations.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.5')
if mibBuilder.loadTexts: decLesJoinDuplicateLanDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinDuplicateLanDestinations.setDescription('The number of Join requests which were rejected by this LES component because they specified a duplicate LAN destination.')
decLesJoinInvalidAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinInvalidAtmAddresses.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Sections 4.2, 5.1.1')
if mibBuilder.loadTexts: decLesJoinInvalidAtmAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinInvalidAtmAddresses.setDescription('The number of Join requests which were rejected by this LES component because they specified an invalid ATM address, or because the would-be clients violated the rules concerning primary ATM addresses.')
decLesJoinInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinInvalidLanDestinations.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.4')
if mibBuilder.loadTexts: decLesJoinInvalidLanDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinInvalidLanDestinations.setDescription('The number of Join requests which were rejected by this LES component because they specified an illegal LAN destination, such as a multicast or broadcast MAC address.')
decLesJoinWrongLanTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinWrongLanTypes.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.4')
if mibBuilder.loadTexts: decLesJoinWrongLanTypes.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinWrongLanTypes.setDescription('The number of Join requests which were rejected by this LES component because they specified the wrong LAN Type.')
decLesJoinMaxFrameSizesTooSmall = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinMaxFrameSizesTooSmall.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.4')
if mibBuilder.loadTexts: decLesJoinMaxFrameSizesTooSmall.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinMaxFrameSizesTooSmall.setDescription('The number of Join requests which were rejected by this LES component because they specified a maximum frame size smaller than the one configured for the emulated LAN.')
decLesJoinInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinInvalidLECIDs.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.6')
if mibBuilder.loadTexts: decLesJoinInvalidLECIDs.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinInvalidLECIDs.setDescription('The number of Join requests which were rejected by this LES component because they specified a REQUESTER-LECID other than zero.')
decLesJoinCtlDistributeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinCtlDistributeRejects.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.4.2.7')
if mibBuilder.loadTexts: decLesJoinCtlDistributeRejects.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinCtlDistributeRejects.setDescription('The number of Join requests which were rejected by this LES component because the client failed to accept a Control Distribute VCC connection.')
decLesJoinOutOfResources = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinOutOfResources.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinOutOfResources.setDescription('The number of Join requests which were rejected by this LES component because the LES ran out of resources.')
decLesJoinRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinRcvQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinRcvQueueDiscards.setDescription('The number of Join request discards which were due to running out of space in Join receive queues.')
decLesJoinLecRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinLecRcvQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinLecRcvQueueDiscards.setDescription('The number of Join request discards which were due to running out of space in per-LEC receive queues.')
decLesJoinResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinResourceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesJoinResourceDiscards.setDescription('The number of Join request discards which were due to the server running out of other resources.')
decLesRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12), )
if mibBuilder.loadTexts: decLesRegisterTable.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Chapter 6')
if mibBuilder.loadTexts: decLesRegisterTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegisterTable.setDescription('This table holds statistics on Registration attempts. It contains one row for each managed LES component.')
decLesRegisterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesRegisterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegisterEntry.setDescription('Each row contains registration statistics for one LES.')
decLesRegisterRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegisterRequests.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegisterRequests.setDescription('The total number of Register requests received by this LAN Emulation Server component.')
decLesRegisterSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegisterSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegisterSuccesses.setDescription('The total number of valid registration requests received by this LAN Emulation Server component.')
decLesRegisterFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegisterFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegisterFailures.setDescription('The total number of invalid registration requests received by this LAN Emulation Server component.')
decLesRegisterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegisterDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegisterDiscards.setDescription('The number of Register requests which were discarded due to no fault of their own, and for which this LES component sent no Register response.')
decLesUnregisterRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnregisterRequests.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnregisterRequests.setDescription('The total number of Unregister requests received by this LAN Emulation Server component.')
decLesUnregisterSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnregisterSuccesses.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnregisterSuccesses.setDescription('The total number of valid unregister requests received by this LAN Emulation Server component.')
decLesUnregisterFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnregisterFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnregisterFailures.setDescription('The total number of invalid unregister requests received by this LAN Emulation Server component.')
decLesUnregisterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnregisterDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnregisterDiscards.setDescription('The number of Unregister requests which were discarded due to no fault of their own, and for which this LES component sent no Unregister response.')
decLesRegDuplicateAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegDuplicateAtmAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegDuplicateAtmAddresses.setDescription('The number of Register requests that failed because they specified an ATM address already registered to another client.')
decLesRegDuplicateLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegDuplicateLanDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegDuplicateLanDestinations.setDescription('The number of Register requests that failed because they specified a LAN Destination already registered to another client.')
decLesRegInvalidAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegInvalidAtmAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegInvalidAtmAddresses.setDescription('The number of Register requests that failed because they contained an invalid ATM address.')
decLesRegInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegInvalidLanDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegInvalidLanDestinations.setDescription('The number of Register requests that failed because they specified an invalid LAN Destination - such as a broadcast or multicast MAC address.')
decLesRegInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegInvalidLECIDs.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegInvalidLECIDs.setDescription('The number of Register requests that failed because they contained an invalid LEC ID.')
decLesRegOutOfResources = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegOutOfResources.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegOutOfResources.setDescription('The number of Register requests that failed because the server ran out of resources.')
decLesRegRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegRcvQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegRcvQueueDiscards.setDescription('The number of Register requests which were discarded by this LES component because one of its receive queues was full.')
decLesRegLecRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegLecRcvQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegLecRcvQueueDiscards.setDescription('The number of Register requests which were discarded by this LES component because one of its per-LEC receive queues was full.')
decLesRegResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegResourceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegResourceDiscards.setDescription('The number of Register requests which were discarded by this LES component because the server ran out of resources.')
decLesUnRegInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegInvalidLanDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnRegInvalidLanDestinations.setDescription('The number of Unregister requests that failed because they specified an invalid LAN Destination - such as a broadcast or multicast MAC address.')
decLesUnRegInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegInvalidLECIDs.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnRegInvalidLECIDs.setDescription('The number of Unregister requests that failed because they contained an invalid LEC ID.')
decLesUnRegRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegRcvQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnRegRcvQueueDiscards.setDescription('The number of Unregister requests which were discarded by this LES component because one of its receive queues was full.')
decLesUnRegLecRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegLecRcvQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnRegLecRcvQueueDiscards.setDescription('The number of Unregister requests which were discarded by this LES component because one of its per-LEC receive queues was full.')
decLesUnRegResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegResourceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnRegResourceDiscards.setDescription('The number of Unregister requests which were discarded by this LES component because the server ran out of resources.')
decLesRegAlreadyRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegAlreadyRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: decLesRegAlreadyRegistered.setDescription('The number of successful Register requests which had no effect, because the address pairs they specified were already registered to the requesting clients.')
decLesUnRegNoSuchLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegNoSuchLanDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnRegNoSuchLanDestinations.setDescription('The number of successful Unregister requests which had no effect, because the LAN Destinations that they specified were already unregistered.')
decLesUnRegNoSuchAddressPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegNoSuchAddressPairs.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnRegNoSuchAddressPairs.setDescription('The number of successful Unregister requests which had no effect, because the ATM addresses that they specified did not match the registered ones.')
decLesUnRegOwnedByOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegOwnedByOthers.setStatus('mandatory')
if mibBuilder.loadTexts: decLesUnRegOwnedByOthers.setDescription('The number of successful Unregister requests which had no effect, because they attempted to unregister LAN Destinations belonging to other clients.')
decLesArpTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13), )
if mibBuilder.loadTexts: decLesArpTable.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Chapter 7')
if mibBuilder.loadTexts: decLesArpTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpTable.setDescription('This table holds statistics on LE_ARP_REQUESTs and related LAN Emulation control frames. It contains one row for each managed LES component.')
decLesArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesArpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpEntry.setDescription('Each row contains LE-ARP statistics for one LES.')
decLesArpRequestsAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRequestsAnswered.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpRequestsAnswered.setDescription('The number of LE_ARP_REQUESTs which this LES component has answered directly with a Success code.')
decLesArpRequestsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRequestsForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpRequestsForwarded.setDescription('The number of LE_ARP_REQUESTs which this LES component has forwarded to clients or other server components.')
decLesArpRequestsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRequestsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpRequestsRejected.setDescription('The number of LE_ARP_REQUESTs which this LES component has rejected. This includes frames counted in decLesArpReqInvalidAtmAddresses decLesArpReqInvalidLanDestinations decLesArpReqInvalidLECIDs ')
decLesArpRequestsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRequestsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpRequestsDiscarded.setDescription('The number of LE_ARP_REQUESTs which this LES component has discarded, due to no fault of their own.')
decLesArpResponsesForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpResponsesForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpResponsesForwarded.setDescription("The number of LE_ARP_RESPONSEs which this LES component has forwarded to one or more clients. This count does not include any LE_ARP_RESPONSE which is counted in 'decLesArpRequestsAnswered'.")
decLesArpResponsesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpResponsesRejected.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpResponsesRejected.setDescription('The number of LE_ARP_RESPONSEs which this LES component has discarded due to errors. This includes frames counted in decLesArpRespInvalidLECIDs ')
decLesArpResponsesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpResponsesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpResponsesDiscarded.setDescription('The number of LE_ARP_RESPONSEs which this LES component has discarded due to no fault of their own.')
decLesNarpRequestsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpRequestsForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpRequestsForwarded.setDescription('The number of LE_NARP_REQUESTs which this LES component has forwarded to clients.')
decLesNarpRequestsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpRequestsFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpRequestsFiltered.setDescription("The number of LE_NARP_REQUESTs which this LES has filtered (discarded) to enforce management policy. See 'decLesNarpRequestPolicy'.")
decLesNarpRequestsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpRequestsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpRequestsRejected.setDescription('The number of LE_NARP_REQUESTs which this LES component has rejected. This includes frames counted in decLesNarpReqInvalidAtmAddresses decLesNarpReqInvalidLanDestinations decLesNarpReqInvalidLECIDs ')
decLesNarpRequestsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpRequestsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpRequestsDiscarded.setDescription('The number of LE_NARP_REQUESTs which this LES has discarded through no fault of their own, and which are not counted in decLesNarpRequestsFiltered.')
decLesTopologyRequestsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestsForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTopologyRequestsForwarded.setDescription('The number of LE_TOPOLOGY_REQUESTs which this LES component has forwarded to clients.')
decLesTopologyRequestsGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestsGenerated.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTopologyRequestsGenerated.setDescription('The number of LE_TOPOLOGY_REQUESTs which this LES component has generated to take the emulated LAN out of accelerated aging mode.')
decLesTopologyRequestsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTopologyRequestsRejected.setDescription('The number of LE_TOPOLOGY_REQUESTs which this LES component has rejected.')
decLesTopologyRequestsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTopologyRequestsDiscarded.setDescription('The number of LE_TOPOLOGY_REQUESTs which this LES component has discarded due to no fault of their own.')
decLesTopologyRequestGenFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestGenFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTopologyRequestGenFailures.setDescription('The number of LE_TOPOLOGY_REQUESTs which this LES component has tried, but failed, to generate.')
decLesArpReqInvalidAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqInvalidAtmAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpReqInvalidAtmAddresses.setDescription('The number of LE_ARP_REQUESTs which were rejected because their ATM addresses were in unrecognizable formats.')
decLesArpReqInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqInvalidLanDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpReqInvalidLanDestinations.setDescription('The number of LE_ARP_REQUESTs which were rejected because they specified invalid LAN Destinations - such as multicast MAC addresses.')
decLesArpReqInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqInvalidLECIDs.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpReqInvalidLECIDs.setDescription('The number of LE_ARP_REQUESTs that were discarded because they contained an invalid LEC ID.')
decLesArpReqReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqReceiveQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpReqReceiveQueueDiscards.setDescription('The number of LE_ARP requests which were discarded by this LES component because one of its receive queues was full.')
decLesArpReqResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqResourceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpReqResourceDiscards.setDescription('The number of LE_ARP requests which were discarded by this LES component because the server ran out of resources.')
decLesArpRespInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRespInvalidLECIDs.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpRespInvalidLECIDs.setDescription('The number of LE_ARP_RESPONSEs which this LES component has discarded because * they specify invalid LECIDs, * their REQUESTER-LECIDs and SOURCE-ATM-ADDRESSes indicate two different clients, or * the clients to which they were directed are no longer part of the emulated LAN.')
decLesArpRespReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRespReceiveQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpRespReceiveQueueDiscards.setDescription('The number of LE_ARP responses which were discarded by this LES component because one of its receive queues was full.')
decLesArpRespResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRespResourceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesArpRespResourceDiscards.setDescription('The number of LE_ARP responses which were discarded by this LES component because the server ran out of resources.')
decLesNarpReqInvalidAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqInvalidAtmAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpReqInvalidAtmAddresses.setDescription('The number of LE_NARP_REQUESTs which were rejected because their ATM addresses were in unrecognizable formats.')
decLesNarpReqInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqInvalidLanDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpReqInvalidLanDestinations.setDescription('The number of LE_NARP_REQUESTs that were rejected because they specified invalid LAN Destinations - such as multicast MAC addresses.')
decLesNarpReqInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqInvalidLECIDs.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpReqInvalidLECIDs.setDescription('The number of LE_NARP_REQUESTs that were rejected because they contained an invalid LEC ID.')
decLesNarpReqReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqReceiveQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpReqReceiveQueueDiscards.setDescription('The number of LE_NARP requests which were discarded by this LES component because one of its receive queues was full.')
decLesNarpReqResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqResourceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesNarpReqResourceDiscards.setDescription('The number of LE_NARP requests which were discarded by this LES component because the server ran out of resources.')
decLesTopoReqReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopoReqReceiveQueueDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTopoReqReceiveQueueDiscards.setDescription('The number of LE_TOPOLOGY requests which were discarded by this LES component because one of its receive queues was full.')
decLesTopoReqResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopoReqResourceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: decLesTopoReqResourceDiscards.setDescription('The number of LE_TOPOLOGY requests which were discarded by this LES component because the server ran out of resources.')
decLesFlushTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14), )
if mibBuilder.loadTexts: decLesFlushTable.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Chapter 9')
if mibBuilder.loadTexts: decLesFlushTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesFlushTable.setDescription('This table holds statistics on LE_FLUSH_RESPONSE frames. It contains one row for each managed LES component.')
decLesFlushEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesFlushEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesFlushEntry.setDescription('Each row contains Flush statistics for one LES.')
decLesFlushResponsesForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesFlushResponsesForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesFlushResponsesForwarded.setDescription('The number of LE_FLUSH_RESPONSES which this LES component has forwarded.')
decLesFlushResponsesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesFlushResponsesRejected.setStatus('mandatory')
if mibBuilder.loadTexts: decLesFlushResponsesRejected.setDescription('The number of LE_FLUSH_RESPONSES which this LES component has rejected.')
decLesFlushResponsesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesFlushResponsesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: decLesFlushResponsesDiscarded.setDescription('The number of LE_FLUSH_RESPONSES which this LES component has discarded due to no fault of their own.')
decLesEventLogMaximumSize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesEventLogMaximumSize.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventLogMaximumSize.setDescription('The minimum number of events which the agent should remember before purging old log entries to make way for new ones.')
decLesEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16), )
if mibBuilder.loadTexts: decLesEventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventLogTable.setDescription('A table of event log entries for the emulated LANs that this node serves.')
decLesEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesEventIndex"))
if mibBuilder.loadTexts: decLesEventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventLogEntry.setDescription('An entry describing a significant event.')
decLesEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventIndex.setDescription('A unique number greater than zero which identifies this table row.')
decLesEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("joinFailed", 1), ("registrationFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventType.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventType.setDescription('The event which triggered this log entry. joinFailed(1) - A client tried to join one of the LANs this host serves, but the attempt failed. registrationFailed(2) - A client was not able to register a new LAN Destination. ')
decLesEventReason = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 100, 101))).clone(namedValues=NamedValues(("versionNotSupported", 1), ("invalidRequestParameters", 2), ("duplicateLanDestination", 4), ("duplicateAtmAddress", 5), ("insufficientResources", 6), ("accessDenied", 7), ("invalidRequestorId", 8), ("invalidLanDestination", 9), ("invalidAtmAddress", 10), ("wrongLanType", 50), ("wrongMaxFrameSize", 51), ("wrongJoinMaxFrameSize", 52), ("nonDuplicateRequest", 53), ("controlDistributeFailure", 54), ("multicastForwardFailure", 55), ("joinNotCompleted", 56), ("joinTimeout", 57), ("busConnectTimeout", 58), ("clientNotConnectedToLes", 59), ("missingInformationElement", 70), ("noAalParameters", 71), ("noAtmTrafficDescriptor", 72), ("noBroadbandBearerCapability", 73), ("noBlli", 74), ("noCallingPartyNumber", 75), ("noCalledPartyNumber", 76), ("noConnectionIdentifier", 77), ("noQosParameter", 78), ("invalidInformationElement", 80), ("invalidAalParameters", 81), ("invalidAtmTrafficDescriptor", 82), ("invalidBroadbandBearerCapability", 83), ("invalidBlli", 84), ("invalidCallingPartyNumber", 85), ("invalidCalledPartyNumber", 86), ("invalidConnectionIdentifier", 87), ("invalidQosParameter", 88), ("invalidAalMode", 90), ("invalidAalSccs", 91), ("insecureAtmAddress", 100), ("unverifiedAtmAddress", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventReason.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventReason.setDescription('The cause of the failure.')
decLesEventServer = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventServer.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventServer.setDescription("The 'decLesIndex' of the LAN Emulation Server that was involved in this incident. If the value of this object is zero, it indicates that the server no longer exists.")
decLesEventServerAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventServerAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventServerAtmAddress.setDescription('The ATM address of the LAN Emulation server that was involved in this incident.')
decLesEventClientAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventClientAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventClientAtmAddress.setDescription('If known, the ATM address of the LAN Emulation Client that was involved in this incident.')
decLesEventClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventClientMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventClientMacAddress.setDescription("If known, one of the MAC addresses of the client that was involved in this incident. If 'decLesEventReason' is 'duplicateLanDestination' or 'invalidLanDestination', the value of this object will be the MAC address in question.")
decLesEventTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: decLesEventTimestamp.setDescription('The value of sysUpTime at the time that the event occurred. If the event occurred prior to the last re-initialization of the local network management subsystem, this object contains a zero value.')
decLesConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 1))
decLesClientStatesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 2))
decLesClientGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 3))
decLesLecGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 4))
decLesCircuitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 5))
decLesMacAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 6))
decLesRouteDescrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 7))
decLesTrafficGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 8))
decLesCallStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 9))
decLesJoinStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 10))
decLesRegisterStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 11))
decLesArpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 12))
decLesFlushStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 13))
decLesEventLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 14))
decLesMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 2, 1))
mibBuilder.exportSymbols("DEC-LES-MIB", decLesFlushResponsesRejected=decLesFlushResponsesRejected, decLesEventLogTable=decLesEventLogTable, decLesRegisterEntry=decLesRegisterEntry, decLesJoinWrongLanTypes=decLesJoinWrongLanTypes, decLesClientStatesEntry=decLesClientStatesEntry, decLesTopologyRequestsForwarded=decLesTopologyRequestsForwarded, decLesFlushEntry=decLesFlushEntry, decLesRouteDescrTable=decLesRouteDescrTable, decLesArpEntry=decLesArpEntry, decLesLecIsProxy=decLesLecIsProxy, decLesActiveProxyClients=decLesActiveProxyClients, decLesAtmAddress=decLesAtmAddress, decLesEventServerAtmAddress=decLesEventServerAtmAddress, decLesJoinMaxFrameSizesTooSmall=decLesJoinMaxFrameSizesTooSmall, decLesControlTimeout=decLesControlTimeout, decLesControlDirectVpi=decLesControlDirectVpi, decLesUnRegResourceDiscards=decLesUnRegResourceDiscards, decLesRegInvalidAtmAddresses=decLesRegInvalidAtmAddresses, decLesJoinLecRcvQueueDiscards=decLesJoinLecRcvQueueDiscards, decLesMacAddressTable=decLesMacAddressTable, decLesEventClientMacAddress=decLesEventClientMacAddress, decLesJoinStatsGroup=decLesJoinStatsGroup, decLesRegRcvQueueDiscards=decLesRegRcvQueueDiscards, decLesFlushStatsGroup=decLesFlushStatsGroup, decLesConfigGroup=decLesConfigGroup, decLesRegisterTable=decLesRegisterTable, decLesNarpRequestsForwarded=decLesNarpRequestsForwarded, decLesNarpReqInvalidLECIDs=decLesNarpReqInvalidLECIDs, decLesJoinTimeouts=decLesJoinTimeouts, decLesJoinEntry=decLesJoinEntry, decLesEventIndex=decLesEventIndex, decLesControlDistVpi=decLesControlDistVpi, decLesRouteDescrBridgeNumber=decLesRouteDescrBridgeNumber, decLesLanType=decLesLanType, decLesRegDuplicateLanDestinations=decLesRegDuplicateLanDestinations, decLesArpRequestsAnswered=decLesArpRequestsAnswered, decLesRegInvalidLECIDs=decLesRegInvalidLECIDs, decLesFlushResponsesForwarded=decLesFlushResponsesForwarded, decLesJoinRcvQueueDiscards=decLesJoinRcvQueueDiscards, decLesNarpReqInvalidAtmAddresses=decLesNarpReqInvalidAtmAddresses, decLesTopoReqReceiveQueueDiscards=decLesTopoReqReceiveQueueDiscards, decLesJoinSuccesses=decLesJoinSuccesses, decLesJoinDiscards=decLesJoinDiscards, decLesRegResourceDiscards=decLesRegResourceDiscards, decLesLecID=decLesLecID, decLesMIBCompliances=decLesMIBCompliances, decLesRegisterRequests=decLesRegisterRequests, decLesAdminStatus=decLesAdminStatus, decLesTopologyChangeTimeout=decLesTopologyChangeTimeout, decLesArpReqInvalidAtmAddresses=decLesArpReqInvalidAtmAddresses, decLesMaxDataFrameSize=decLesMaxDataFrameSize, decLesTopologyChangeMode=decLesTopologyChangeMode, decLesJoinDuplicates=decLesJoinDuplicates, decLesEventClientAtmAddress=decLesEventClientAtmAddress, decLesLecTable=decLesLecTable, decLesAwaitingJoinRequest=decLesAwaitingJoinRequest, decLesConfigEntry=decLesConfigEntry, decLesRowStatus=decLesRowStatus, decLesRouteDescrOwner=decLesRouteDescrOwner, decLesConfigTable=decLesConfigTable, decLesJoinInvalidParameters=decLesJoinInvalidParameters, decLesRegOutOfResources=decLesRegOutOfResources, decLesCtlDistributeFailures=decLesCtlDistributeFailures, decLesClientAtmAddress=decLesClientAtmAddress, decLesClientState=decLesClientState, decLesRouteDescrAtmBinding=decLesRouteDescrAtmBinding, decLesJoinRequests=decLesJoinRequests, decLesControlDistVci=decLesControlDistVci, decLesReceiveQueueDiscards=decLesReceiveQueueDiscards, decLesMIB=decLesMIB, decLesJoinInvalidAtmAddresses=decLesJoinInvalidAtmAddresses, decLesUnRegLecRcvQueueDiscards=decLesUnRegLecRcvQueueDiscards, decLesEventServer=decLesEventServer, decLesMacAddressEntry=decLesMacAddressEntry, decLesArpReqInvalidLECIDs=decLesArpReqInvalidLECIDs, decLesCallStatsGroup=decLesCallStatsGroup, decLesRegisterStatsGroup=decLesRegisterStatsGroup, decLesRouteDescrEntry=decLesRouteDescrEntry, decLesCtlDistribOutOfResources=decLesCtlDistribOutOfResources, decLesUnregisterDiscards=decLesUnregisterDiscards, decLesDescription=decLesDescription, decLesArpTable=decLesArpTable, decLesNarpRequestsFiltered=decLesNarpRequestsFiltered, decLesCtlDistributeInProgress=decLesCtlDistributeInProgress, decLesControlFramesIn=decLesControlFramesIn, decLesTopoReqResourceDiscards=decLesTopoReqResourceDiscards, decLesJoinFailures=decLesJoinFailures, decLesRegInvalidLanDestinations=decLesRegInvalidLanDestinations, decLesArpReqResourceDiscards=decLesArpReqResourceDiscards, decLesVersionsNotSupported=decLesVersionsNotSupported, decLesLanName=decLesLanName, decLesJoinOutOfResources=decLesJoinOutOfResources, decLesArpStatsGroup=decLesArpStatsGroup, decLesJoinDuplicateAtmAddresses=decLesJoinDuplicateAtmAddresses, decLesArpRequestsRejected=decLesArpRequestsRejected, decLesArpResponsePolicy=decLesArpResponsePolicy, decLesClientGroup=decLesClientGroup, decLesCircuitGroup=decLesCircuitGroup, decLesClientStatesTable=decLesClientStatesTable, decLesTrafficTable=decLesTrafficTable, decLesRegAlreadyRegistered=decLesRegAlreadyRegistered, decLesUnRegNoSuchAddressPairs=decLesUnRegNoSuchAddressPairs, decLesEventTimestamp=decLesEventTimestamp, decLesInvalidFrames=decLesInvalidFrames, decLesNarpReqResourceDiscards=decLesNarpReqResourceDiscards, decLesCtlDistEntry=decLesCtlDistEntry, decLesClientIsProxy=decLesClientIsProxy, decLesCtlDistributeCalls=decLesCtlDistributeCalls, decLesIndex=decLesIndex, decLesLecAtmAddress=decLesLecAtmAddress, decLesArpResponsesRejected=decLesArpResponsesRejected, decLesTerminating=decLesTerminating, decLesEventReason=decLesEventReason, decLesMacAddressOwner=decLesMacAddressOwner, decLesArpResponsesForwarded=decLesArpResponsesForwarded, decLesRegisterFailures=decLesRegisterFailures, decLesLastChange=decLesLastChange, decLesControlDistInterface=decLesControlDistInterface, decLesUnregisterSuccesses=decLesUnregisterSuccesses, decLesUnregisterFailures=decLesUnregisterFailures, decLesArpResponsesDiscarded=decLesArpResponsesDiscarded, decLesUnregisterRequests=decLesUnregisterRequests, decLesLecGroup=decLesLecGroup, decLesShortFrames=decLesShortFrames, decLesClientRowStatus=decLesClientRowStatus, decLesUnjoinedClientFrames=decLesUnjoinedClientFrames, decLesUnRegInvalidLanDestinations=decLesUnRegInvalidLanDestinations, decLesLecRowStatus=decLesLecRowStatus, decLesCtlDirectCalls=decLesCtlDirectCalls, decLesUnRegInvalidLECIDs=decLesUnRegInvalidLECIDs, decLesLecEntry=decLesLecEntry, decLesMacAddress=decLesMacAddress, decLesArpRespResourceDiscards=decLesArpRespResourceDiscards, decLesEventLogEntry=decLesEventLogEntry, decLesControlDistRowStatus=decLesControlDistRowStatus, decLesArpRespInvalidLECIDs=decLesArpRespInvalidLECIDs, decLesRouteDescrGroup=decLesRouteDescrGroup, decLesEventLogGroup=decLesEventLogGroup, decLesCtlDistTable=decLesCtlDistTable, decLesCtlDirectTable=decLesCtlDirectTable, decLesJoinResourceDiscards=decLesJoinResourceDiscards, decLesTopologyRequestsGenerated=decLesTopologyRequestsGenerated, decLesTrafficGroup=decLesTrafficGroup, decLesTopologyRequestsDiscarded=decLesTopologyRequestsDiscarded, decLesMIBObjects=decLesMIBObjects, decLesClientEntry=decLesClientEntry, decLesTopologyRequestsRejected=decLesTopologyRequestsRejected, decLesLecState=decLesLecState, decLesMiscDiscards=decLesMiscDiscards, decLesNarpRequestsDiscarded=decLesNarpRequestsDiscarded, decLesMIBCompliance=decLesMIBCompliance, decLesNarpRequestsRejected=decLesNarpRequestsRejected, decLesMIBConformance=decLesMIBConformance, decLesTrafficEntry=decLesTrafficEntry, decLesJoinInvalidLECIDs=decLesJoinInvalidLECIDs, decLesNarpReqInvalidLanDestinations=decLesNarpReqInvalidLanDestinations, decLesUnRegOwnedByOthers=decLesUnRegOwnedByOthers, decLesControlDirectRowStatus=decLesControlDirectRowStatus, decLesUnRegNoSuchLanDestinations=decLesUnRegNoSuchLanDestinations, decLesArpRequestsForwarded=decLesArpRequestsForwarded, decLesJoinInvalidLanDestinations=decLesJoinInvalidLanDestinations, decLesArpReqInvalidLanDestinations=decLesArpReqInvalidLanDestinations, decLesRegDuplicateAtmAddresses=decLesRegDuplicateAtmAddresses, decLesMacAddressGroup=decLesMacAddressGroup, decLesUnRegRcvQueueDiscards=decLesUnRegRcvQueueDiscards, decLesMacAddressAtmBinding=decLesMacAddressAtmBinding, decLesCtlDirectInvalidInfoElements=decLesCtlDirectInvalidInfoElements, decLesJoinVersionsNotSupported=decLesJoinVersionsNotSupported, decLesEventType=decLesEventType, decLesClientStatesGroup=decLesClientStatesGroup, decLesCallStatsTable=decLesCallStatsTable, decLesJoinDuplicateLanDestinations=decLesJoinDuplicateLanDestinations, decLesFlushResponsesDiscarded=decLesFlushResponsesDiscarded, decLesArpRequestsDiscarded=decLesArpRequestsDiscarded, decLesRouteDescrSegmentID=decLesRouteDescrSegmentID, decLesCtlDirectOutOfResources=decLesCtlDirectOutOfResources, decLesRegisterDiscards=decLesRegisterDiscards, decLesJoinCtlDistributeRejects=decLesJoinCtlDistributeRejects, decLesArpReqReceiveQueueDiscards=decLesArpReqReceiveQueueDiscards, decLesCtlDirectFailures=decLesCtlDirectFailures, decLesControlDirectInterface=decLesControlDirectInterface, decLesRegLecRcvQueueDiscards=decLesRegLecRcvQueueDiscards, decLesControlDirectVci=decLesControlDirectVci, decLesEventLogMaximumSize=decLesEventLogMaximumSize, decLesClientTable=decLesClientTable, decLesActiveClients=decLesActiveClients, decLesCallStatsEntry=decLesCallStatsEntry, decLesCtlDirectEntry=decLesCtlDirectEntry, decLesJoinNonDuplicates=decLesJoinNonDuplicates, decLesAtmAddressOfBUS=decLesAtmAddressOfBUS, decLesClientID=decLesClientID, decLesRegisterSuccesses=decLesRegisterSuccesses, decLesMIBGroups=decLesMIBGroups, decLesTopologyRequestGenFailures=decLesTopologyRequestGenFailures, decLesNarpReqReceiveQueueDiscards=decLesNarpReqReceiveQueueDiscards, decLesOperStatus=decLesOperStatus, decLesNarpRequestPolicy=decLesNarpRequestPolicy, decLesLastTcModeChange=decLesLastTcModeChange, decLesArpRespReceiveQueueDiscards=decLesArpRespReceiveQueueDiscards, decLesJoinTable=decLesJoinTable, decLesFlushTable=decLesFlushTable)
