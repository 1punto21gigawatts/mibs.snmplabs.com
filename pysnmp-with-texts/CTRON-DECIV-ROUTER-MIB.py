#
# PySNMP MIB module CTRON-DECIV-ROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-DECIV-ROUTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
nwRtrProtoSuites, = mibBuilder.importSymbols("ROUTER-OIDS", "nwRtrProtoSuites")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter32, Integer32, Counter64, NotificationType, ObjectIdentity, iso, MibIdentifier, ModuleIdentity, Unsigned32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter32", "Integer32", "Counter64", "NotificationType", "ObjectIdentity", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nwDecIVRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3))
nwDecIVMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 1))
nwDecIVComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2))
nwDecIVSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1))
nwDecIVForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2))
nwDecIVTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4))
nwDecIVFib = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 5))
nwDecIVEndSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6))
nwDecIVAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7))
nwDecIVFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 8))
nwDecIVRedirector = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 9))
nwDecIVEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10))
nwDecIVWorkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 11))
nwDecIVSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1))
nwDecIVSysAdministration = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 2))
nwDecIVFwdSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1))
nwDecIVFwdInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2))
nwDecIVFwdCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1))
nwDecIVFwdIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1))
nwDecIVFwdIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2))
nwDecIVDistanceVector = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1))
nwDecIVLinkState = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 2))
nwDecIVProto = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1))
nwDecIVProtoSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1))
nwDecIVProtoInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2))
nwDecIVProtoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1))
nwDecIVProtoCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2))
nwDecIVProtoIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1))
nwDecIVProtoIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2))
nwDecIVHostsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 1))
nwDecIVHostsInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 2))
nwDecIVHostsToMedia = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 3))
nwDecIVEventLogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 1))
nwDecIVEventLogFilterTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 2))
nwDecIVEventLogTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3))
class DecIVAddress(OctetString):
    pass

nwDecIVMibRevText = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVMibRevText.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVMibRevText.setDescription('Indicates the current revision level of the DECnet Phase IV MIB in textual format.')
nwDecIVSysRouterId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 1), DecIVAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVSysRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVSysRouterId.setDescription('The DECnet Address used to uniquely identify the host (device) running DECnet Phase IV Routing Services. Since DECnet Phase IV uses a single address to identify the host and all of its router ports, rather than using an address per router port, nwDecIVSysRouterID is the DECnet node address for all the router ports on the device.')
nwDecIVNodeType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("routing-iv", 2), ("area", 3))).clone('routing-iv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVNodeType.setDescription('Specifies the node type. Setting this value to 2, (routing-iv), establishes the Routing Services-enabled device as a DECnet Level 1, intra-area router. Setting this value to 2, establishes the Routing Services-enabled device as a DECnet Phase IV Level 2, or inter-area router.')
nwDecIVMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 3), Integer32().clone(1023)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVMaxNodes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVMaxNodes.setDescription('Specifies the maximum number of DECnet nodes allowed within an area.')
nwDecIVMaxBRA = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 4), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVMaxBRA.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVMaxBRA.setDescription('Specifies the maximum number of router adjacencies supported by this node.')
nwDecIVMaxBEA = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 5), Integer32().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVMaxBEA.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVMaxBEA.setDescription('Specifies the maximum number of endnode adjacencies supported by this node.')
nwDecIVMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 6), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVMaxHops.setDescription('Specifies the maximum number of hops allowed for a valid route within the area. Any intra-area route consisting of a greater number of hops than specified by nwDecIVMaxHops is considered unreachable.')
nwDecIVMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 7), Integer32().clone(1022)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVMaxCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVMaxCost.setDescription('Specifies the maximum cost allowed for a valid route within the area. Any intra-area route with a cost greater than nwDecIVMaxCost is considered unreachable.')
nwDecIVMaxVisits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 8), Integer32().clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVMaxVisits.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVMaxVisits.setDescription('Specifies the maximum number of intra-area hops a packet can be forwarded. A packet is dropped once it has been forwarded nwDecIVMaxVisits.')
nwDecIVNonBroadcastTimer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 9), TimeTicks().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVNonBroadcastTimer.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVNonBroadcastTimer.setDescription('Specifies the periodic interval (in seconds) at which DECnet Routing Services advertises its route table, on any non-broadcast networks attached to any router port configured and enabled for DECnet Phase IV Routing Services.')
nwDecIVBroadcastTimer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 10), TimeTicks().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVBroadcastTimer.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVBroadcastTimer.setDescription('Specifies the periodic interval (in seconds) at which DECnet Routing Services advertises its route table on any multi-access broadcast networks attached to any router port configured and enabled for DECnet Phase IV Routing Services.')
nwDecIVAreas = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 11), Integer32().clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVAreas.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAreas.setDescription('Specifies the maximum number of areas allowed within a Level 2 (inter-area)routing domain.')
nwDecIVMaxAreaHops = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 12), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVMaxAreaHops.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVMaxAreaHops.setDescription('Specifies the maximum number of areas that can be hopped by a valid inter-area route. Any inter-area route requiring a greater number of areas to be hopped than specified by nwDecIVMaxAreaHops is considered invalid.')
nwDecIVMaxAreaCost = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 1, 13), Integer32().clone(1022)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVMaxAreaCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVMaxAreaCost.setDescription('Specifies the maximum cost allowed for a valid Level 2 (inter-area) route. Any inter-area route with a cost greater than nwDecIVMaxAreaCost is considered unreachable.')
nwDecIVSysAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVSysAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVSysAdminStatus.setDescription('Sets the administrative state of DECnet Phase IV Routing Services, system-wide. Enabled (3) causes DECnet Phase IV system-wide Routing Services to become active on all router ports configured and enabled for DECnet Phase IV Routing Services. Disabled (2) causes DECnet Phase IV Routing Services to become inactive system-wide.')
nwDecIVSysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVSysOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVSysOperStatus.setDescription('Indicates the current operating condition of DECnet Phase IV Routing Services system-wide. The value of nwDecIVSysOperStatus indicates any problem with your DECnet Phase IV Routing Services configuration. A value of 6 indicates that regardless of the value of nwDecIVSysAdminStatus, DECnet Phase IV Routing Services is not operating because of an invalid configuration.')
nwDecIVSysAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVSysAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVSysAdminReset.setDescription('Resets DECnet Phase IV Routing Services, system-wide. Reset (2) forces a restart of DECnet Phase IV Routing Services without a graceful shutdown on any active router ports and without affecting any other routing services.')
nwDecIVSysOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVSysOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVSysOperationalTime.setDescription("Indicates the elapsed time, in hundredths of a second, that nwDecIVSysOperStatus has been in it's current state.")
nwDecIVSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVSysVersion.setDescription('Indicates the current revision level of the DECnet Phase IV Routing Services firmware, in textual format.')
nwDecIVFwdCtrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrAdminStatus.setDescription('Sets the administrative state of the aggregate (system-wide) DECnet packet and byte counters. Enabled (3) causes these counters to become active. Disabled (2) causes these counters to become inactive.')
nwDecIVFwdCtrReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrReset.setDescription('Resets the aggregate (system-wide) DECnet packet and byte counters. Reset (2) resets the DECnet aggregate counters to 0. nwDecIVFwdCtrOperationalTime is also reset to 0.')
nwDecIVFwdCtrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that DecIVFwdCtrOperStatus has been in the current state.')
nwDecIVFwdCtrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrInPkts.setDescription('Indicates the total number of DECnet packets that have been received, system-wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrOutPkts.setDescription('Indicates the total number of DECnet packets that have been transmitted, system-wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrFwdPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrFwdPkts.setDescription('Indicates the total number of DECnet packets that have been forwarded, system-wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrFilteredPkts.setDescription('Indicates the total number of DECnet packets that have been administratively filtered, system-wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrDiscardPkts.setDescription('Indicates the total number of DECnet packets that have been discarded, system-wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrAddrErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrAddrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrAddrErrPkts.setDescription('Indicates the total number of DECnet packets that have been discarded, system-wide, during nwDecIVFwdCtrOperationalTime, because of addressing errors in the DECnet header.')
nwDecIVFwdCtrLenErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrLenErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrLenErrPkts.setDescription('Indicates the total number of DECnet packets that have been discarded, system-wide, during nwDecIVFwdCtrOperationalTime, because an invalid packet length is contained in the DECnet header.')
nwDecIVFwdCtrHdrErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrHdrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrHdrErrPkts.setDescription('Indicates the total number of DECnet packets that have been discarded, system-wide, during nwDecIVFwdCtrOperationalTime, because of an invalid DECnet header.')
nwDecIVFwdCtrInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrInBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been received, system-wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrOutBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been transmitted, system-wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrFwdBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrFwdBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been forwarded, system-wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrFilteredBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrFilteredBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been administratively filtered, system-wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrDiscardBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been discarded, system wide, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrHostInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrHostInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrHostInPkts.setDescription('Indicates the total number of DECnet packets that have been successfully delivered to the local host, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrHostOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrHostOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrHostOutPkts.setDescription('Indicates the total number of DECnet packets that have been transmitted by the local host, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrHostDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrHostDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrHostDiscardPkts.setDescription('Indicates the total number of DECnet packets that have been discarded by the local host, during nwDecIVFwdCtrOperationalTime, due to a lack of host resources.')
nwDecIVFwdCtrHostInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrHostInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrHostInBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been received by the local host, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrHostOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrHostOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrHostOutBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been transmitted by the local host, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdCtrHostDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdCtrHostDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdCtrHostDiscardBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been discarded by the local host, during nwDecIVFwdCtrOperationalTime, due to a lack of host resources.')
nwDecIVFwdIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1), )
if mibBuilder.loadTexts: nwDecIVFwdIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfTable.setDescription('This table contains an entry for each router port. This table is indexed by nwDecIVFwdIfIndex, which indicates the value of MIB 2 ifIndex, which identifies the router port for which each entry exists.')
nwDecIVFwdIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVFwdIfIndex"))
if mibBuilder.loadTexts: nwDecIVFwdIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfEntry.setDescription('Each entry specifies the DECnet Phase IV Routing Services configuration for the router port for which the entry exists.')
nwDecIVFwdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwDecIVFwdIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfAdminStatus.setDescription('Sets the administrative state of DECnet Phase IV Routing Services on the router port for which the entry exists. Enabled (3) causes DECnet Phase IV Routing Services to become active. Disabled (2) causes it to become inactive.')
nwDecIVFwdIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfOperStatus.setDescription('Indicates the current operating condition of DECnet Phase IV Routing Services on the router port for which the entry exists. The value of nwDecIVFwdIfOperStatus indicates any problem with the configuration of DECnet Phase IV Routing Services on the router port. value of 6 indicates that regardless of the value of nwDecIVFwdIfAdminStatus, DECnet Phase IV Routing Services is not operating because of an invalid port-level configuration.')
nwDecIVFwdIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwDecIVFwdIfOperStatus has been in its current state.')
nwDecIVFwdIfControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3))).clone('add')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfControl.setDescription('This object does not apply to this protocol. It is a common object, inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVFwdIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 6), Integer32().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfMtu.setDescription('Specifies the Maximum Transmission Unit (MTU) for DECnet packets on the router port for which the entry exists. This includes the DECnet header and data, but does not include framing.')
nwDecIVFwdIfForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfForwarding.setDescription('Controls the forwarding of DECnet packets on the router port for which the entry exists. Enabled (3) causes DECnet packets to be forwarded. Disabled (2) prevents DECnet packets from being forwarded.')
nwDecIVFwdIfFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 11, 14, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 2), ("snap", 3), ("nativewan", 8), ("encapenet", 9), ("encapenetsnap", 11), ("encaptrsnap", 14), ("encapfddisnap", 16), ("canonical", 17))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfFrameType.setDescription('Specifies the framing type for DECnet packets forwarded on the router port for which the entry exists. Some frame types are only valid for specific media types. The comments reflect those valid media types.')
nwDecIVFwdIfAclIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfAclIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfAclIdentifier.setDescription('Specifies the Access Control ID of the access control list in effect for DECnet packets being routed on the router port for which the entry exists. A value of 0 indicates that no access control list is in effect.')
nwDecIVFwdIfAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfAclStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfAclStatus.setDescription('Controls the operation of any access control list configured for DECnet traffic on the router port for which the entry exists. Enabled (3) applies the access control list indicated by the value of nwDecIVFwdIfAclIdentifier to all DECnet traffic being routed on the port. Disabled (2) prevents the access control list from being applied.')
nwDecIVFwdIfCacheControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfCacheControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCacheControl.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVFwdIfCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCacheEntries.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVFwdIfCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCacheHits.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVFwdIfCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCacheMisses.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCacheMisses.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVFwdIfCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: nwDecIVFwdIfCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrTable.setDescription('This table contains an entry for each router port configured and enabled for DECnet Phase IV Routing Services.')
nwDecIVFwdIfCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVFwdIfCtrIfIndex"))
if mibBuilder.loadTexts: nwDecIVFwdIfCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrEntry.setDescription('Each entry indicates the current packet and byte count of DECnet packets on each router port for which the entry exists.')
nwDecIVFwdIfCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwDecIVFwdIfCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrAdminStatus.setDescription('Sets the administrative state of the per-port DECnet packet and byte counters on the router port for which the entry exists. Enabled (3) causes these counters to become active. Disabled (2) causes these counters to become inactive.')
nwDecIVFwdIfCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrReset.setDescription('Resets the per-port DECnet packet and byte counters on the router port for which the entry exists. Reset (2) resets the counters to 0. nwDecIVFwdIfCtrOperationalTime is also reset to 0.')
nwDecIVFwdIfCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that the per-port DECnet packet and byte counters have been active on the router port for which the entry exists.')
nwDecIVFwdIfCtrInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrInPkts.setDescription('Indicates the total number of DECnet packets that have been received, during nwDecIVFwdIfCtrOperationaltime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrOutPkts.setDescription('Indicates the total number of DECnet packets that have been transmitted, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrFwdPkts.setDescription('Indicates the total number of DECnet packets that have been forwarded on the router port for which the entry exists, during nwDecIVFwdCtrOperationalTime.')
nwDecIVFwdIfCtrFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrFilteredPkts.setDescription('Indicates the total number of DECnet packets that have been administratively filtered, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrDiscardPkts.setDescription('Indicates the total number of DECnet packets that have been discarded (dropped), during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrAddrErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrAddrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrAddrErrPkts.setDescription('Indicates the total number of DECnet packets that have been discarded because of addressing errors in the DECnet header, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrLenErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrLenErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrLenErrPkts.setDescription('Indicates the total number of DECnet packets that have been discarded because an invalid packet length was contained in the DECnet header, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrHdrErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHdrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHdrErrPkts.setDescription('Indicates the total number of DECnet packets that have been discarded because of an invalid DECnet header, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrInBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been received, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrOutBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been transmitted, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrFwdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrFwdBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been forwarded, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrFilteredBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been administratively filtered, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrDiscardBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been discarded, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrHostInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostInPkts.setDescription('Indicates the total number of DECnet packets that have been delivered to the local host, during nwDecIVFwdIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwDecIVFwdIfCtrHostOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostOutPkts.setDescription('Indicates the total number of DECnet packets that have been transmitted by the local host, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrHostDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostDiscardPkts.setDescription('Indicates the total number of DECnet packets that have been discarded by the local host, during nwDecIVFwdIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwDecIVFwdIfCtrHostInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostInBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been delivered to the local host, during nwDecIVFwdIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwDecIVFwdIfCtrHostOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostOutBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been transmitted by the local host, during nwDecIVFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVFwdIfCtrHostDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFwdIfCtrHostDiscardBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been discarded by the local host, due to a lack of host resources, that were received on the router port for which the entry exists, during nwDecIVFwdIfCtrOperationalTime.')
nwDecIVProtoAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoAdminStatus.setDescription('Sets the administrative state of the DECnet Phase IV distance-vector-based routing protocol system-wide. Enabled (3) causes the routing protocol to become active on all router ports configured and enabled for DECnet Routing Services. Disabled (2) causes the routing protocol to become inactive.')
nwDecIVProtoOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoOperStatus.setDescription('Indicates the current operating condition of the DECnet Phase IV distance-vector-based routing protocol system-wide. The value of nwDecIVProtoOperStatus indicates any problem with the DECnet Phase IV distance-vector-based routing protocol configuration. A value of 6 indicates that regardless of the value of nwDecIVProtoAdminStatus, the DECnet Phase IV distance-vector-based routing protocol is not operating because of an invalid configuration.')
nwDecIVProtoAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoAdminReset.setDescription('Resets the DECnet Phase IV distance-vector-based routing protocol. Reset (2) forces a system-wide restart of the protocol without a graceful shut-down on any active router ports.')
nwDecIVProtoOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwDecIVProtoOperStatus has been in current state.')
nwDecIVProtoVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoVersion.setDescription('Indicates the current revision level of the DECnet Phase IV distance-vector-based routing protocol firmware, in textual format.')
nwDecIVProtoStackSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 6), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoStackSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoStackSize.setDescription('Specifies the stack size of the DECnet Phase IV distance-vector- based routing protocol thread. In order for a change of this value to take effect, the protocol (nwDecIVProtoAdminReset), DECnet Phase IV Routing Services (nwDecIVSysAdminReset), or the device running Routing Services must be reset.')
nwDecIVProtoThreadPriority = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 7), Integer32().clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoThreadPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoThreadPriority.setDescription('Specifies the run-time execution priority of the DECnet Phase IV distance-vector-based routing protocol thread. In order for a change of this value to take effect, the protocol (nwDecIVProtoAdminReset), DECnet Phase IV Routing Services (nwDecIVSysAdminReset), or the device running Routing Services must be reset.')
nwDecIVProtoDatabaseThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 8), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoDatabaseThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoDatabaseThreshold.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVProtoAgeOut = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 9), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoAgeOut.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoAgeOut.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVProtoHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 1, 10), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoHoldDown.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect. ')
nwDecIVProtoCtrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrAdminStatus.setDescription('Sets the administrative state of the aggregate (system-wide) DECnet Phase IV distance-vector-based routing protocol packet and byte counters. Enabled (3) causes these counters to become active. Disabled (2) causes these counters to become inactive.')
nwDecIVProtoCtrReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrReset.setDescription('Resets the aggregate (system-wide) DECnet Phase IV distance-vector-based routing protocol packet and byte counters. Reset (2) resets the DECnet aggregate counters to 0. nwDecIVProtoCtrOperationalTime is also reset to 0.')
nwDecIVProtoCtrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrOperationalTime.setDescription("Indicates the elapsed time, in hundredths of a second, that nwDecIVProtoCtrAdminStatus has been in it's current state.")
nwDecIVProtoCtrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrInPkts.setDescription('Indicates the total number of DECnet Phase IV distance-vector-based routing protocol packets that have been received, system-wide, during nwDecIVProtoCtrOperationalTime.')
nwDecIVProtoCtrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrOutPkts.setDescription('Indicates the total number of DECnet Phase IV distance-vector-based routing protocol packets that have been transmitted, system-wide, during nwDecIVProtoCtrOperationalTime.')
nwDecIVProtoCtrFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrFilteredPkts.setDescription('Indicates the total number of DECnet Phase IV distance-vector-based routing protocol packets that have been administratively filtered, system-wide, during nwDecIVProtoCtrOperationalTime.')
nwDecIVProtoCtrDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrDiscardPkts.setDescription('Indicates the total number of the DECnet Phase IV distance-vector -based routing protocol packets that have been discarded, system-wide, during nwDecIVProtoCtrOperationalTime.')
nwDecIVProtoCtrInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrInBytes.setDescription('Indicates the total number of bytes in the DECnet Phase IV distance-vector based routing protocol packets that have been received, system-wide, during nwDecIVProtoCtrOperationalTime.')
nwDecIVProtoCtrOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrOutBytes.setDescription('Indicates the total number of bytes in the DECnet Phase IV distance-vectorbased routing protocol packets that have been transmitted, system-wide, during nwDecIVProtoCtrOperationalTime.')
nwDecIVProtoCtrFilteredBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrFilteredBytes.setDescription('Indicates the total number of bytes in the DECnet Phase IV distance-vectorbased routing protocol packets that have been administratively filtered, system-wide, during nwDecIVProtoCtrOperationalTime.')
nwDecIVProtoCtrDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoCtrDiscardBytes.setDescription('Indicates the total number of bytes in the DECnet Phase IV distance-vectorbased routing protocol packets that have been discarded system-wide, during nwDecIVProtoCtrOperationalTime.')
nwDecIVProtoIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: nwDecIVProtoIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfTable.setDescription('This table contains an entry for each router port. Each entry can contain different values, allowing the routing protocol configuration to vary from router port to router port. This table is indexed by nwDecIVProtoIfIndex, which indicates the value of MIB 2 ifIndex, which identifies the router port for which each entry exists.')
nwDecIVProtoIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVProtoIfIndex"))
if mibBuilder.loadTexts: nwDecIVProtoIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfEntry.setDescription('Each entry contains the DECnet Phase IV distance-vector-based routing protocol configuration for the router port for which the entry exists.')
nwDecIVProtoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwDecIVProtoIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfAdminStatus.setDescription('Sets the administrative state of the DECnet Phase IV distance-vector-based routing protocol on the router port for which the entry exists. Enabled (3) causes the routing protocol to become active on the router port. Disabled (2) causes it to become inactive.')
nwDecIVProtoIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfOperStatus.setDescription('Indicates the current operating condition of the DECnet Phase IV distance-vector-based routing protocol on the router port for which the entry exists. The value of nwDecIVProtoIfOperStatus indicates any problem with your routing protocol configuration on the router port. A value of 6 indicates that regardless of the value of nwDecIVProtoIfAdminStatus, the routing protocol is not operating because of an invalid configuration.')
nwDecIVProtoIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwDecIVProtoIfOperStatus has been in it`s current state.')
nwDecIVProtoIfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 5), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfVersion.setDescription('Indicates the revision level of the DECnet Phase IV distance-vector-based routing protocol firmware on the router port for which the entry exists, in textual format.')
nwDecIVProtoIfAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 6), Integer32().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfAdvertisement.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfAdvertisement.setDescription('Sets the interval, in seconds, at which the DECnet Phase IV distance-vectorbased routing protocol advertises its route table on the router port for which the entry exists. Change this value to cause the DECnet Phase IV distance-vector-based routing protocol to advertise its route table more or less frequently on the router port.')
nwDecIVProtoIfFloodDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 7), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfFloodDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfFloodDelay.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVProtoIfRequestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfRequestDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfRequestDelay.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVProtoIfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 9), Integer32().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfPriority.setDescription('Sets the priority of the DECnet Phase IV distance-vector-based routing protocol on the router port for which the entry exists. Within an area, the router with the highest value for nwDecIVProtoIfPriority becomes the priority or designated router. The highest possible value for nwDecIVProtocolIfPriority is 127. Set this value high to cause your DECnet Phase IV Routing Services-enabled device to become the designated router. Set this value low to guarantee that it does not become the designated router.')
nwDecIVProtoIfHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 10), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfHelloTimer.setDescription('Sets the interval, in seconds, at which DECnet Phase IV distance-vector-based routing protocol sends Hello packets on the router port for which the entry exists.')
nwDecIVProtoIfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfSplitHorizon.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfSplitHorizon.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVProtoIfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfPoisonReverse.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfPoisonReverse.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwDecIVProtoIfSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfSnooping.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfSnooping.setDescription('Controls the operation of DECnet Phase IV distance-vector-based routing protocol snooping on the router port. When snooping is enabled the DECnet Phase IV distance-vector-based routing protocol operates in passive mode, so that it receives route information, builds and maintains a route table, but does not advertise the route table or send updates on the router port for which the entry exists.')
nwDecIVProtoIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bma", 2), ("nbma", 3))).clone('bma')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfType.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfType.setDescription('Indicates whether the directly connected network segment does or does not support broadcast media access.')
nwDecIVProtoIfXmitCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 15), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfXmitCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfXmitCost.setDescription('Sets the cost of transmitting a packet on the network segment connected to the router port for which the entry exists. The DECnet Phase IV distance-vector-based routing protocol picks the route with the least total nwDecIVProtoIfXmitCost as the best route. If nwDecIVProtocolIfXmitCost, also known as path cost, is the same for all possible routes , the best route chosen is the route with the least number of hops is chosen as the best route.')
nwDecIVProtoIfAclIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfAclIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfAclIdentifier.setDescription('Specifies the Access Control ID of the access control list in effect for DECnet Phase IV distance-vector-based routing protocol packets on the router port for which the entry exists. A value of 0 indicates that there is no access control list in effect for DECnet Phase IV distance-vector-based routing protocol packets on the router port.')
nwDecIVProtoIfAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfAclStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfAclStatus.setDescription('Controls the operation of the access control list identified by nwDecIVProtoIfAclIdentifier. Enabled (3) applies the access control list to all DECnet Phase IV distance-vector-based routing protocol packet traffic on the router port for which the entry exists. Disabled (2) prevents the access control list from being applied.')
nwDecIVProtoIfCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: nwDecIVProtoIfCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrTable.setDescription('This table contains an entry for each router port. This table is indexed by nwDecIVProtoIfCtrIfIndex which indicates the value of MIB2 ifindex, which identifies the router port for which the entry exists.')
nwDecIVProtoIfCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVProtoIfCtrIfIndex"))
if mibBuilder.loadTexts: nwDecIVProtoIfCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrEntry.setDescription('Each entry indicates the current packet and byte count of DECnet Phase IV distance-vector-based routing protocol packets on the router port for which the entry exists.')
nwDecIVProtoIfCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwDecIVProtoIfCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrAdminStatus.setDescription('Sets the administrative state of the per-port DECnet Phase IV distance-vectorbased routing protocol packet and byte counters on the router port for which the entry exists. Enabled (3) causes these counters to become active. Disabled (2) causes these counters to become inactive.')
nwDecIVProtoIfCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrReset.setDescription('Resets the per-port DECnet Phase IV distance-vector-based routing protocol packet and byte counters on the router port for which the entry exists. Reset (2) resets the counters to 0. nwDecIVProtoIfCtrOperationalTime is also reset to 0.')
nwDecIVProtoIfCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwDecIVProtoIfCtrAdminStatus has been in the current state.')
nwDecIVProtoIfCtrInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrInPkts.setDescription('Indicates the total number of DECnet Phase IV distance-vector-based routing protocol packets that have been received, during nwDecIVProtoIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVProtoIfCtrOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrOutPkts.setDescription('Indicates the total number of DECnet Phase IV distance-vector-based routing protocol packets that have been transmitted, during nwDecIVProtoIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVProtoIfCtrFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrFilteredPkts.setDescription('Indicates the total number of DECnet Phase IV distance-vector-based routing protocol packets that have been administratively filtered, during nwDecIVProtoIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVProtoIfCtrDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrDiscardPkts.setDescription('Indicates the total number of DECnet Phase IV distance-vector-based routing protocol packets that have been discarded, during nwDecIVProtoIfCtrOperationalTime, that were received on the router port for which the entry exist.')
nwDecIVProtoIfCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrInBytes.setDescription('Indicates the total number of bytes in the DECnet Phase IV distance-vector-based routing protocol packets that have been received, during nwDecIVProtoIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVProtoIfCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrOutBytes.setDescription('Indicates the total number of bytes in the DECnet Phase IV distance-vector-based routing protocol packets that have been transmitted, during nwDecIVProtoIfCtrOperationalTime, on the router port for which the entry exists.')
nwDecIVProtoIfCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrFilteredBytes.setDescription('Indicates the total number of bytes in the DECnet Phase IV distance-vector-based routing protocol packets that have been administratively filtered, during nwDecIVProtoIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwDecIVProtoIfCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 4, 1, 1, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVProtoIfCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVProtoIfCtrDiscardBytes.setDescription('Indicates the total number of bytes in the DECnet packets that have been discarded, during nwDecIVProtoIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwDecIVFibTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 5, 1), )
if mibBuilder.loadTexts: nwDecIVFibTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFibTable.setDescription('This table contains an entry for each route being used to forward DECnet data packets..')
nwDecIVFibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 5, 1, 1), ).setIndexNames((0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVFibNodeId"))
if mibBuilder.loadTexts: nwDecIVFibEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFibEntry.setDescription('Each entry in the table describes a route to a particular DECnet destination network and node.')
nwDecIVFibNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 5, 1, 1, 1), DecIVAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVFibNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFibNodeId.setDescription('Contains the DECnet Address of the destination node of the route for which the entry exists.')
nwDecIVFibNextHopNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 5, 1, 1, 2), DecIVAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFibNextHopNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFibNextHopNodeId.setDescription('Contains the DECnet Address of the next hop router for the route for which the entry exists.')
nwDecIVFibNextHopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFibNextHopIf.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFibNextHopIf.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port through which the route exists.')
nwDecIVFibRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("remote", 4))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVFibRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVFibRouteType.setDescription('Indicates the status of the route. A value of 3 indicates that the destination is on the network segment that is directly connected to the router port identified by nwDecIVFibNextHopIf. A value of 4 indicates that the destination is on an indirectly connected network segment, which is reachable through the next hop router indicated by the value of nwDecIVFibNextHopNodeId. A value of 2 indicates that the route is invalid.')
nwDecIVAclValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVAclValidEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAclValidEntries.setDescription('Indicates the number of valid entries that exist in the access control list table, nwDecIVAclTable.')
nwDecIVAclTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7, 2), )
if mibBuilder.loadTexts: nwDecIVAclTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAclTable.setDescription('This table contains the access control list information for DECnet traffic. This table contains entries each of which specifies whether packet forwarding between a particular source destination pair is permitted or denied. Each entry is part of a particular access control list. Each list is identified by a unique Access Control ID. Each list may contain multiple entries ordered by sequence number. When an Access Control List is searched, it is searched in sequence number order and the first match found ends the search. If no match is found, access defaults to permitted.')
nwDecIVAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7, 2, 1), ).setIndexNames((0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVAclIdentifier"), (0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVAclSequence"))
if mibBuilder.loadTexts: nwDecIVAclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAclEntry.setDescription('Each entry contains DECnet source/destination access information.')
nwDecIVAclIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVAclIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAclIdentifier.setDescription('This is the primary (major) index into the DECnet access control list table. This value identifies each access control list by a unique identifier, a number arbitrarily assigned by the user. All entries that have the same value for nwDecIVAclIdentifier belong to the same access control list.')
nwDecIVAclSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVAclSequence.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAclSequence.setDescription('This is the secondary (minor) index into the DECnet access control list table. This number corresponds to a sequence number used to order multiple entries within the same access control list.')
nwDecIVAclPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permit", 3), ("deny", 4), ("permit-bidirectional", 5), ("deny-bidirectional", 6))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVAclPermission.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAclPermission.setDescription('Specifies whether access is allowed or denied between the source and destination address pair. Note that source and destination are interchangeable when bi-directional control is selected. To remove an existing entry set nwDecIVAclPermission to invalid (2). Invalid entries disappear after reboot.')
nwDecIVAclMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVAclMatches.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAclMatches.setDescription('Indicates the number of matches on this entry that have resulted in the permit/deny access restriction being applied as part of the forwarding process.')
nwDecIVAclDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7, 2, 1, 5), DecIVAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVAclDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAclDestAddress.setDescription('Specifies the destination DECnet Address used to compare for matches on the access control list. Either the Area ID or Node ID of this address may be set to 0, a wildcard value which matches all areas or all nodes.')
nwDecIVAclSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 7, 2, 1, 6), DecIVAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVAclSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVAclSrcAddress.setDescription('Specifies the source DECnet Address used to compare for matches on the access control list. Either the Area ID or Node ID of this address may be set to a wildcard value which matches all areas or all nodes.')
nwDecIVHostMapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 3, 1), )
if mibBuilder.loadTexts: nwDecIVHostMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVHostMapTable.setDescription('The DecIV Address translation table used for mapping a DecIV address to a circuit identifier (if applicable), corresponding port number, and framing type.')
nwDecIVHostMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 3, 1, 1), ).setIndexNames((0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVHostMapIfIndex"), (0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVHostMapDecIVAddr"))
if mibBuilder.loadTexts: nwDecIVHostMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVHostMapEntry.setDescription('Each entry contains one DecIVAddress to circuit equivalence. Also provided is the framing required to converse with this host, and the corresponding logical port number.')
nwDecIVHostMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVHostMapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVHostMapIfIndex.setDescription('This is the primary (major) index into the DecIV HostMap table. This number corresponds to the index into the MIB-2 Interfaces Group which describes the DecIV router port for which the entry exists.')
nwDecIVHostMapDecIVAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 3, 1, 1, 2), DecIVAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVHostMapDecIVAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVHostMapDecIVAddr.setDescription('The DecIVAddress of the host on the corresponding interface and circuit (if applicable).')
nwDecIVHostMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4), ("inactive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVHostMapType.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVHostMapType.setDescription('Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the nwDecIVHostMapTable. That is, it effectively dissasociates the circuitand/or interface identified with said entry from the mapping identified with said entry. It is an implementation- specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper inter- pretation of such entries requires examination of the relevant wDecIVHostMapType object.')
nwDecIVHostMapCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVHostMapCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVHostMapCircuitID.setDescription('The identifier for the virtual circuit present on the interface. On an interface configured for Frame Relay, this number is the DLCI for the DecIV Address at the end of the circuit. For non-WAN interfaces, the value of this object is zero.')
nwDecIVHostMapFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 11, 14, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 2), ("snap", 3), ("nativewan", 8), ("encapenet", 9), ("encapenetsnap", 11), ("encaptrsnap", 14), ("encapfddisnap", 16), ("canonical", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVHostMapFraming.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVHostMapFraming.setDescription('Specifies the framing type required to converse with the host for which this entry exists.')
nwDecIVHostMapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 6, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVHostMapPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVHostMapPortNumber.setDescription("The unique value for the logical port number. It's value ranges between 1 and a maximum value which is dependent on both the number of configured interfaces in the system and the number of circuits present on those interfaces which are of WAN type.")
nwDecIVEventAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVEventAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventAdminStatus.setDescription('Sets the administrative state of DECnet event logging. Enabled (3) causes the event log to become active. Disabled (2) causes the event log to become inactive.')
nwDecIVEventMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 1, 2), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVEventMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventMaxEntries.setDescription('Sets the maximum number of entries allowed in the event log table. When the number of entries reaches the value of nwDecIVEventMaxEntries, the first (oldest) entry is deleted to allow a new entry to be added.')
nwDecIVEventTraceAll = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVEventTraceAll.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventTraceAll.setDescription('Enabled (3) allows logging of all event types on all router ports for all protocols and components. Disabled (2) causes the filter table to specify which events to log.')
nwDecIVEventFilterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 2, 1), )
if mibBuilder.loadTexts: nwDecIVEventFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventFilterTable.setDescription('This table contains and entry for each event filter configured for DECnet Phase IV Routing Services events.')
nwDecIVEventFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 2, 1, 1), ).setIndexNames((0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVEventFltrProtocol"), (0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVEventFltrIfNum"))
if mibBuilder.loadTexts: nwDecIVEventFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventFilterEntry.setDescription('Each entry describes an event filter which defines a particular type of event to be logged to the event log. The value of nwDecIVEventFltrProtocol indicates the value used either in the nwRtgProtocolTable or the nwComponentTable in the Cabletron Routing Services MIB, which identifies the protocol or component to which the entry applies.')
nwDecIVEventFltrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVEventFltrProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventFltrProtocol.setDescription('Indicates the value of the Cabletron Routing Services MIB nwRtgProtocolInstance or nwComponentRtgInstance which identifies the protocol involved in the event for which the event filter exists.')
nwDecIVEventFltrIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVEventFltrIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventFltrIfNum.setDescription('Specifies the router port involved in the event for which the event filter exists.')
nwDecIVEventFltrControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("delete", 2), ("add", 3))).clone('add')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVEventFltrControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventFltrControl.setDescription('Set this value to 3 to add the entry to the event filter table. Set this value to 2 to remove the entry from the event filter table.')
nwDecIVEventFltrType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("misc", 1), ("timer", 2), ("rcv", 4), ("xmit", 8), ("event", 16), ("diags", 32), ("error", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVEventFltrType.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventFltrType.setDescription('This 6 bit mask specifies the types of events to be logged. By default all 6 bits are set to 1, indicating that all types of events are to be logged. Setting any bit to 0 removes an event type from this field and prevents that type of event from being logged. Setting any bit to 1 adds an event type to this field and enables that type of event to be logged.')
nwDecIVEventFltrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highest", 1), ("highmed", 2), ("highlow", 3))).clone('highest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVEventFltrSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventFltrSeverity.setDescription("Specifies the level of severity an event must meet in order to be logged. Controls the amount of event logging by ignoring events of a lower priority than specified by this filter value. `Highmed' ignores only events of the lowest severity. `Highlow' logs all events highest priority through lowest. `Highest' severity causes all events except those of the highest severity to be ignored. `Highmed' severity is the default setting which causes only events of the lowest severity to be ignored. `Highlow' severity logs all events, regardless of severity.")
nwDecIVEventFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("log", 1), ("trap", 2), ("log-trap", 3))).clone('log')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDecIVEventFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventFltrAction.setDescription("Specifies how the events are to be logged. Logging to the `log' stores the events in the event log table (nwDecIVEventLogTable). Logging to'trap' sends events out through the trap mechanism.")
nwDecIVEventTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3, 1), )
if mibBuilder.loadTexts: nwDecIVEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventTable.setDescription('This table contains an entry for each event that has been logged.')
nwDecIVEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3, 1, 1), ).setIndexNames((0, "CTRON-DECIV-ROUTER-MIB", "nwDecIVEventNumber"))
if mibBuilder.loadTexts: nwDecIVEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventEntry.setDescription('Each entry contains the information about an event that has been logged to the event table.')
nwDecIVEventNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVEventNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventNumber.setDescription('An ordinal value assigned to the event for which the log entry exists. nwDecIVEventNumber is assigned so that each event in the event log can be uniquely identified by the value of nwDecIVEventNumber.')
nwDecIVEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVEventTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventTime.setDescription('Indicates the time at which the event was logged to the event log.')
nwDecIVEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("misc", 1), ("timer", 2), ("rcv", 4), ("xmit", 8), ("event", 16), ("error", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVEventType.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventType.setDescription('Indicates the type of event that was logged.')
nwDecIVEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highest", 1), ("highmed", 2), ("highlow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVEventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventSeverity.setDescription('Indicates the severity that was assigned to the event.')
nwDecIVEventProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVEventProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventProtocol.setDescription('Indicates the value of the Cabletron Routing Services MIB nwRtgProtocolInstance or nwComponentInstance which identifies the protocol or component that was involved in the event.')
nwDecIVEventIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVEventIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventIfNum.setDescription('Indicates the router port that was involved in the event.')
nwDecIVEventTextString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 3, 2, 10, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDecIVEventTextString.setStatus('mandatory')
if mibBuilder.loadTexts: nwDecIVEventTextString.setDescription('Contains the actual text string that was logged.')
mibBuilder.exportSymbols("CTRON-DECIV-ROUTER-MIB", nwDecIVProtoIfAclStatus=nwDecIVProtoIfAclStatus, nwDecIVFwdIfCacheEntries=nwDecIVFwdIfCacheEntries, nwDecIVProtoDatabaseThreshold=nwDecIVProtoDatabaseThreshold, nwDecIVFwdIfCtrOutPkts=nwDecIVFwdIfCtrOutPkts, nwDecIVProtoIfCtrAdminStatus=nwDecIVProtoIfCtrAdminStatus, nwDecIVFwdIfCtrFwdBytes=nwDecIVFwdIfCtrFwdBytes, nwDecIVAclPermission=nwDecIVAclPermission, nwDecIVEventType=nwDecIVEventType, nwDecIVEventFltrControl=nwDecIVEventFltrControl, nwDecIVAclMatches=nwDecIVAclMatches, nwDecIVSysAdminReset=nwDecIVSysAdminReset, nwDecIVProtoCtrAdminStatus=nwDecIVProtoCtrAdminStatus, nwDecIVFwdIfCtrOutBytes=nwDecIVFwdIfCtrOutBytes, nwDecIVProtoStackSize=nwDecIVProtoStackSize, nwDecIVProtoIfOperationalTime=nwDecIVProtoIfOperationalTime, nwDecIVFwdIfMtu=nwDecIVFwdIfMtu, nwDecIVSysAdministration=nwDecIVSysAdministration, nwDecIVEventAdminStatus=nwDecIVEventAdminStatus, nwDecIVProtoAgeOut=nwDecIVProtoAgeOut, nwDecIVFwdCtrHostOutPkts=nwDecIVFwdCtrHostOutPkts, nwDecIVAreas=nwDecIVAreas, nwDecIVFwdIfOperStatus=nwDecIVFwdIfOperStatus, nwDecIVFwdIfEntry=nwDecIVFwdIfEntry, nwDecIVProtoIfXmitCost=nwDecIVProtoIfXmitCost, nwDecIVProtoIfOperStatus=nwDecIVProtoIfOperStatus, nwDecIVEventIfNum=nwDecIVEventIfNum, nwDecIVSysVersion=nwDecIVSysVersion, nwDecIVBroadcastTimer=nwDecIVBroadcastTimer, nwDecIVProtoIfCtrOperationalTime=nwDecIVProtoIfCtrOperationalTime, nwDecIVEventFltrIfNum=nwDecIVEventFltrIfNum, nwDecIVSystem=nwDecIVSystem, nwDecIVNodeType=nwDecIVNodeType, nwDecIVEventFltrSeverity=nwDecIVEventFltrSeverity, nwDecIVSysAdminStatus=nwDecIVSysAdminStatus, nwDecIVFwdCtrHostDiscardPkts=nwDecIVFwdCtrHostDiscardPkts, nwDecIVProtoIfCtrDiscardBytes=nwDecIVProtoIfCtrDiscardBytes, nwDecIVSysOperStatus=nwDecIVSysOperStatus, nwDecIVProtoIfIndex=nwDecIVProtoIfIndex, nwDecIVProtoInterface=nwDecIVProtoInterface, nwDecIVProtoIfCtrOutPkts=nwDecIVProtoIfCtrOutPkts, nwDecIVFwdIfTable=nwDecIVFwdIfTable, nwDecIVEventLogConfig=nwDecIVEventLogConfig, nwDecIVProtoIfVersion=nwDecIVProtoIfVersion, nwDecIVMaxVisits=nwDecIVMaxVisits, nwDecIVProtoCtrFilteredPkts=nwDecIVProtoCtrFilteredPkts, nwDecIVProtoIfCtrInPkts=nwDecIVProtoIfCtrInPkts, nwDecIVFwdIfFrameType=nwDecIVFwdIfFrameType, nwDecIVHostMapIfIndex=nwDecIVHostMapIfIndex, nwDecIVProtoIfSnooping=nwDecIVProtoIfSnooping, nwDecIVProtoThreadPriority=nwDecIVProtoThreadPriority, nwDecIVDistanceVector=nwDecIVDistanceVector, nwDecIVFwdIfCtrLenErrPkts=nwDecIVFwdIfCtrLenErrPkts, nwDecIVFwdIfConfig=nwDecIVFwdIfConfig, nwDecIVProtoIfAclIdentifier=nwDecIVProtoIfAclIdentifier, nwDecIVSysOperationalTime=nwDecIVSysOperationalTime, nwDecIVFwdCtrInPkts=nwDecIVFwdCtrInPkts, nwDecIVProtoHoldDown=nwDecIVProtoHoldDown, nwDecIVFwdIfCtrHostOutPkts=nwDecIVFwdIfCtrHostOutPkts, nwDecIVFwdIfControl=nwDecIVFwdIfControl, nwDecIVProtoIfTable=nwDecIVProtoIfTable, nwDecIVHostMapPortNumber=nwDecIVHostMapPortNumber, nwDecIVProtoCtrInPkts=nwDecIVProtoCtrInPkts, nwDecIVFwdCtrOutPkts=nwDecIVFwdCtrOutPkts, nwDecIVFwdCtrFwdPkts=nwDecIVFwdCtrFwdPkts, nwDecIVProto=nwDecIVProto, nwDecIVProtoIfCtrEntry=nwDecIVProtoIfCtrEntry, nwDecIVFibNextHopNodeId=nwDecIVFibNextHopNodeId, nwDecIVFwdCtrDiscardBytes=nwDecIVFwdCtrDiscardBytes, nwDecIVFwdIfCtrAdminStatus=nwDecIVFwdIfCtrAdminStatus, nwDecIVFibEntry=nwDecIVFibEntry, nwDecIVFwdCtrHostDiscardBytes=nwDecIVFwdCtrHostDiscardBytes, nwDecIVProtoIfCtrOutBytes=nwDecIVProtoIfCtrOutBytes, nwDecIVProtoCounters=nwDecIVProtoCounters, nwDecIVAclDestAddress=nwDecIVAclDestAddress, nwDecIVProtoVersion=nwDecIVProtoVersion, nwDecIVProtoCtrOutBytes=nwDecIVProtoCtrOutBytes, nwDecIVProtoIfConfig=nwDecIVProtoIfConfig, DecIVAddress=DecIVAddress, nwDecIVProtoOperStatus=nwDecIVProtoOperStatus, nwDecIVEventProtocol=nwDecIVEventProtocol, nwDecIVAclValidEntries=nwDecIVAclValidEntries, nwDecIVFwdIfCtrIfIndex=nwDecIVFwdIfCtrIfIndex, nwDecIVFwdIfCtrDiscardBytes=nwDecIVFwdIfCtrDiscardBytes, nwDecIVProtoIfHelloTimer=nwDecIVProtoIfHelloTimer, nwDecIVFib=nwDecIVFib, nwDecIVWorkGroup=nwDecIVWorkGroup, nwDecIVMaxBEA=nwDecIVMaxBEA, nwDecIVFwdIfForwarding=nwDecIVFwdIfForwarding, nwDecIVFwdCtrOutBytes=nwDecIVFwdCtrOutBytes, nwDecIVFwdIfCtrFilteredBytes=nwDecIVFwdIfCtrFilteredBytes, nwDecIVEventFilterTable=nwDecIVEventFilterTable, nwDecIVProtoConfig=nwDecIVProtoConfig, nwDecIVComponents=nwDecIVComponents, nwDecIVFwdIfCtrOperationalTime=nwDecIVFwdIfCtrOperationalTime, nwDecIVProtoIfFloodDelay=nwDecIVProtoIfFloodDelay, nwDecIVFwdIfCtrHostDiscardPkts=nwDecIVFwdIfCtrHostDiscardPkts, nwDecIVProtoOperationalTime=nwDecIVProtoOperationalTime, nwDecIVProtoCtrOperationalTime=nwDecIVProtoCtrOperationalTime, nwDecIVProtoIfSplitHorizon=nwDecIVProtoIfSplitHorizon, nwDecIVProtoIfCtrFilteredBytes=nwDecIVProtoIfCtrFilteredBytes, nwDecIVFwdIfCacheMisses=nwDecIVFwdIfCacheMisses, nwDecIVFwdIfAclIdentifier=nwDecIVFwdIfAclIdentifier, nwDecIVHostMapEntry=nwDecIVHostMapEntry, nwDecIVProtoIfPriority=nwDecIVProtoIfPriority, nwDecIVFwdCounters=nwDecIVFwdCounters, nwDecIVProtoAdminReset=nwDecIVProtoAdminReset, nwDecIVFwdCtrOperationalTime=nwDecIVFwdCtrOperationalTime, nwDecIVProtoCtrFilteredBytes=nwDecIVProtoCtrFilteredBytes, nwDecIVProtoCtrReset=nwDecIVProtoCtrReset, nwDecIVFwdCtrHdrErrPkts=nwDecIVFwdCtrHdrErrPkts, nwDecIVFwdCtrFilteredPkts=nwDecIVFwdCtrFilteredPkts, nwDecIVProtoIfCtrFilteredPkts=nwDecIVProtoIfCtrFilteredPkts, nwDecIVFwdIfAdminStatus=nwDecIVFwdIfAdminStatus, nwDecIVMaxBRA=nwDecIVMaxBRA, nwDecIVProtoCtrDiscardBytes=nwDecIVProtoCtrDiscardBytes, nwDecIVEvent=nwDecIVEvent, nwDecIVFibNextHopIf=nwDecIVFibNextHopIf, nwDecIVFwdCtrAdminStatus=nwDecIVFwdCtrAdminStatus, nwDecIVFwdIfIndex=nwDecIVFwdIfIndex, nwDecIVAclSequence=nwDecIVAclSequence, nwDecIVFwdIfCtrInPkts=nwDecIVFwdIfCtrInPkts, nwDecIVFwdIfCtrTable=nwDecIVFwdIfCtrTable, nwDecIVFilters=nwDecIVFilters, nwDecIVSysConfig=nwDecIVSysConfig, nwDecIVFwdCtrLenErrPkts=nwDecIVFwdCtrLenErrPkts, nwDecIVFwdIfCacheHits=nwDecIVFwdIfCacheHits, nwDecIVEndSystems=nwDecIVEndSystems, nwDecIVFwdIfCtrHostInBytes=nwDecIVFwdIfCtrHostInBytes, nwDecIVForwarding=nwDecIVForwarding, nwDecIVFwdIfCtrReset=nwDecIVFwdIfCtrReset, nwDecIVEventLogFilterTable=nwDecIVEventLogFilterTable, nwDecIVEventFltrType=nwDecIVEventFltrType, nwDecIVProtoIfCounters=nwDecIVProtoIfCounters, nwDecIVHostsInterfaces=nwDecIVHostsInterfaces, nwDecIVFwdIfCtrFwdPkts=nwDecIVFwdIfCtrFwdPkts, nwDecIVProtoIfAdvertisement=nwDecIVProtoIfAdvertisement, nwDecIVHostMapType=nwDecIVHostMapType, nwDecIVFwdIfCtrHostDiscardBytes=nwDecIVFwdIfCtrHostDiscardBytes, nwDecIVMaxCost=nwDecIVMaxCost, nwDecIVEventTable=nwDecIVEventTable, nwDecIVFwdInterfaces=nwDecIVFwdInterfaces, nwDecIVEventMaxEntries=nwDecIVEventMaxEntries, nwDecIVProtoIfRequestDelay=nwDecIVProtoIfRequestDelay, nwDecIVFibNodeId=nwDecIVFibNodeId, nwDecIVFwdCtrHostInPkts=nwDecIVFwdCtrHostInPkts, nwDecIVAccessControl=nwDecIVAccessControl, nwDecIVProtoIfCtrReset=nwDecIVProtoIfCtrReset, nwDecIVLinkState=nwDecIVLinkState, nwDecIVEventFltrAction=nwDecIVEventFltrAction, nwDecIVHostMapFraming=nwDecIVHostMapFraming, nwDecIVProtoIfType=nwDecIVProtoIfType, nwDecIVFwdCtrDiscardPkts=nwDecIVFwdCtrDiscardPkts, nwDecIVProtoIfEntry=nwDecIVProtoIfEntry, nwDecIVProtoIfCtrDiscardPkts=nwDecIVProtoIfCtrDiscardPkts, nwDecIVFibRouteType=nwDecIVFibRouteType, nwDecIVFwdCtrHostOutBytes=nwDecIVFwdCtrHostOutBytes, nwDecIVEventLogTable=nwDecIVEventLogTable, nwDecIVFwdIfCtrAddrErrPkts=nwDecIVFwdIfCtrAddrErrPkts, nwDecIVAclIdentifier=nwDecIVAclIdentifier, nwDecIVEventTextString=nwDecIVEventTextString, nwDecIVFwdIfCtrEntry=nwDecIVFwdIfCtrEntry, nwDecIVFwdCtrInBytes=nwDecIVFwdCtrInBytes, nwDecIVFibTable=nwDecIVFibTable, nwDecIVFwdIfCtrDiscardPkts=nwDecIVFwdIfCtrDiscardPkts, nwDecIVAclEntry=nwDecIVAclEntry, nwDecIVProtoCtrOutPkts=nwDecIVProtoCtrOutPkts, nwDecIVMaxHops=nwDecIVMaxHops, nwDecIVHostMapTable=nwDecIVHostMapTable, nwDecIVAclTable=nwDecIVAclTable, nwDecIVSysRouterId=nwDecIVSysRouterId, nwDecIVTopology=nwDecIVTopology, nwDecIVProtoSystem=nwDecIVProtoSystem, nwDecIVFwdIfCtrHostOutBytes=nwDecIVFwdIfCtrHostOutBytes, nwDecIVProtoCtrInBytes=nwDecIVProtoCtrInBytes, nwDecIVHostMapCircuitID=nwDecIVHostMapCircuitID, nwDecIVEventEntry=nwDecIVEventEntry, nwDecIVHostMapDecIVAddr=nwDecIVHostMapDecIVAddr, nwDecIVFwdIfCtrInBytes=nwDecIVFwdIfCtrInBytes, nwDecIVMaxAreaCost=nwDecIVMaxAreaCost, nwDecIVEventFilterEntry=nwDecIVEventFilterEntry, nwDecIVFwdIfOperationalTime=nwDecIVFwdIfOperationalTime, nwDecIVProtoIfCtrInBytes=nwDecIVProtoIfCtrInBytes, nwDecIVFwdCtrFwdBytes=nwDecIVFwdCtrFwdBytes, nwDecIVMaxNodes=nwDecIVMaxNodes, nwDecIVMibs=nwDecIVMibs, nwDecIVProtoIfPoisonReverse=nwDecIVProtoIfPoisonReverse, nwDecIVProtoIfCtrTable=nwDecIVProtoIfCtrTable, nwDecIVFwdCtrHostInBytes=nwDecIVFwdCtrHostInBytes, nwDecIVFwdSystem=nwDecIVFwdSystem, nwDecIVFwdIfCounters=nwDecIVFwdIfCounters, nwDecIVFwdIfCtrHdrErrPkts=nwDecIVFwdIfCtrHdrErrPkts, nwDecIVEventFltrProtocol=nwDecIVEventFltrProtocol, nwDecIVEventTime=nwDecIVEventTime, nwDecIVFwdIfCacheControl=nwDecIVFwdIfCacheControl, nwDecIVRedirector=nwDecIVRedirector, nwDecIVProtoIfCtrIfIndex=nwDecIVProtoIfCtrIfIndex, nwDecIVAclSrcAddress=nwDecIVAclSrcAddress, nwDecIVMibRevText=nwDecIVMibRevText, nwDecIVProtoAdminStatus=nwDecIVProtoAdminStatus, nwDecIVFwdCtrAddrErrPkts=nwDecIVFwdCtrAddrErrPkts, nwDecIVHostsToMedia=nwDecIVHostsToMedia, nwDecIVMaxAreaHops=nwDecIVMaxAreaHops, nwDecIVNonBroadcastTimer=nwDecIVNonBroadcastTimer, nwDecIVEventNumber=nwDecIVEventNumber, nwDecIVProtoIfAdminStatus=nwDecIVProtoIfAdminStatus, nwDecIVHostsSystem=nwDecIVHostsSystem, nwDecIVEventSeverity=nwDecIVEventSeverity, nwDecIVFwdCtrReset=nwDecIVFwdCtrReset, nwDecIVEventTraceAll=nwDecIVEventTraceAll, nwDecIVFwdIfAclStatus=nwDecIVFwdIfAclStatus, nwDecIVRouter=nwDecIVRouter, nwDecIVFwdIfCtrHostInPkts=nwDecIVFwdIfCtrHostInPkts, nwDecIVProtoCtrDiscardPkts=nwDecIVProtoCtrDiscardPkts, nwDecIVFwdIfCtrFilteredPkts=nwDecIVFwdIfCtrFilteredPkts, nwDecIVFwdCtrFilteredBytes=nwDecIVFwdCtrFilteredBytes)
