#
# PySNMP MIB module TR-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TR-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, enterprises, NotificationType, Unsigned32, iso, Counter32, ObjectIdentity, IpAddress, MibIdentifier, Counter64, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "enterprises", "NotificationType", "Unsigned32", "iso", "Counter32", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter64", "ModuleIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

cdx6500PPCTdot5PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 9), )
if mibBuilder.loadTexts: cdx6500PPCTdot5PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTdot5PortTable.setDescription('This table contains Token Ring interface parameters and state variables, one entry per 802.5 interface.')
cdx6500PPCTdot5PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 9, 1), ).setIndexNames((0, "TR-OPT-MIB", "cdx6500dot5IfIndex"))
if mibBuilder.loadTexts: cdx6500PPCTdot5PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTdot5PortEntry.setDescription('A list of Token Ring status and parameter values for an 802.5 interface.')
cdx6500dot5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5IfIndex.setDescription('This object is the port number for the LAN Interface.')
cdx6500dot5LanCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 50))).clone(namedValues=NamedValues(("utp", 0), ("stp", 1), ("unknown", 3), ("newvalUtp", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5LanCableType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5LanCableType.setDescription("Specifies the type of cable and therefore which connector is used for LAN interface. utp : Unshielded twisted pair stp : Shielded twisted pair. newvalUtp : same functionality as 'utp', new enumeration added for RFC1155 compatibility.")
cdx6500dot5PortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 9, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5PortMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5PortMacAddress.setDescription('Specifies the MAC address of the LAN port. The entered value of 00-00-00-00-00-00 will be replaced by the Burned In Address (BIA) if the LAN hardware is present.')
cdx6500dot5LocalRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5LocalRingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5LocalRingNumber.setDescription('This parameter specifies the local ring number to which this port is attached. It is used as default if a value is not obtained from Ring Parameter Server.')
cdx6500dot5EarlyTokenRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("newvalDisable", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5EarlyTokenRelease.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5EarlyTokenRelease.setDescription("This parameter controls whether this station operating on a 16 Mbps ring will perform early token release. This parameter has no effect for 4 Mbps rings where early token release is not used. newvalDisable : same functionality as 'disable', new enumeration added for RFC1155 compatibility.")
cdx6500dot5TransmitQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5TransmitQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5TransmitQueueLimit.setDescription('Number of frames that can be queued on the transmitter before any frame is dropped.')
cdx6500PPSTdot5PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9), )
if mibBuilder.loadTexts: cdx6500PPSTdot5PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTdot5PortTable.setDescription("A table containing Token Ring statistics, one entry per 802.5 interface. All the statistics are defined using the syntax Counter as 32-bit wrap around counters. Thus, if an interface's hardware maintains these statistics in 16-bit counters, then the agent must read the hardware's counters frequently enough to prevent loss of significance, in order to maintain 32-bit counters in software.")
cdx6500PPSTdot5PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1), ).setIndexNames((0, "TR-OPT-MIB", "cdx6500dot5StatsIfIndex"))
if mibBuilder.loadTexts: cdx6500PPSTdot5PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTdot5PortEntry.setDescription('An entry contains the 802.5 statistics for a particular interface.')
cdx6500dot5StatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5StatsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsIfIndex.setDescription('The value of this object identifies the 802.5 interface for which this entry contains management information.')
cdx6500dot5StatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(28))).clone(namedValues=NamedValues(("tr", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5StatsPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsPortType.setDescription('The currently running value of the Port type.')
cdx6500dot5StatsDataBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5StatsDataBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsDataBytesRx.setDescription('This counter is incremented for each data byte received by the LAN port.')
cdx6500dot5StatsDataBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5StatsDataBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsDataBytesTx.setDescription('This counter is incremented for each data byte transmitted by the LAN port.')
cdx6500dot5StatsFrameSizeExc = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5StatsFrameSizeExc.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsFrameSizeExc.setDescription('This counter is incremented when the LAN port observes a frame that can not be forwarded because of excessive length.')
cdx6500dot5StatsShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5StatsShortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsShortFrames.setDescription('This counter is incremented when the LAN port observes a receive or transmitted frame which is less than 18 bytes.')
cdx6500dot5StatsTransmitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5StatsTransmitDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsTransmitDiscards.setDescription('This counter is incremented when the LAN port discards the frame because the transmit queue exceeds the maximum queue length.')
cdx6500dot5StatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5StatsPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsPortStatus.setDescription("Indicates the status of the LAN port. newvalDisabled : same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500dot5StatsLastStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot5StatsLastStatReset.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsLastStatReset.setDescription('Time stamp when the statistics were last reset.')
cdx6500dot5StatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500dot5StatsClearStats.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500dot5StatsClearStats.setDescription('This is the command to reset the LAN port statistics.')
mibBuilder.exportSymbols("TR-OPT-MIB", cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500Controls=cdx6500Controls, cdx6500dot5StatsShortFrames=cdx6500dot5StatsShortFrames, cdx6500dot5StatsDataBytesTx=cdx6500dot5StatsDataBytesTx, cdx6500dot5IfIndex=cdx6500dot5IfIndex, cdx6500dot5PortMacAddress=cdx6500dot5PortMacAddress, DisplayString=DisplayString, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500Statistics=cdx6500Statistics, cdx6500dot5StatsFrameSizeExc=cdx6500dot5StatsFrameSizeExc, cdx6500PPSTdot5PortEntry=cdx6500PPSTdot5PortEntry, cdx6500dot5TransmitQueueLimit=cdx6500dot5TransmitQueueLimit, cdx6500dot5StatsTransmitDiscards=cdx6500dot5StatsTransmitDiscards, cdx6500dot5StatsClearStats=cdx6500dot5StatsClearStats, cdx6500dot5LocalRingNumber=cdx6500dot5LocalRingNumber, cdx6500PPSTdot5PortTable=cdx6500PPSTdot5PortTable, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500dot5StatsIfIndex=cdx6500dot5StatsIfIndex, cdx6500dot5StatsDataBytesRx=cdx6500dot5StatsDataBytesRx, cdx6500dot5StatsPortType=cdx6500dot5StatsPortType, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, codex=codex, cdx6500dot5StatsLastStatReset=cdx6500dot5StatsLastStatReset, cdx6500dot5LanCableType=cdx6500dot5LanCableType, cdx6500PPCTdot5PortTable=cdx6500PPCTdot5PortTable, cdx6500dot5EarlyTokenRelease=cdx6500dot5EarlyTokenRelease, cdx6500dot5StatsPortStatus=cdx6500dot5StatsPortStatus, cdx6500=cdx6500, cdxProductSpecific=cdxProductSpecific, MacAddress=MacAddress, cdx6500PPCTdot5PortEntry=cdx6500PPCTdot5PortEntry, cdx6500Configuration=cdx6500Configuration)
