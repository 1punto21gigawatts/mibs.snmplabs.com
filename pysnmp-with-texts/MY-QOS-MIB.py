#
# PySNMP MIB module MY-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
IfIndex, ConfigStatus = mibBuilder.importSymbols("MY-TC", "IfIndex", "ConfigStatus")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, NotificationType, Gauge32, MibIdentifier, Integer32, TimeTicks, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, ModuleIdentity, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Gauge32", "MibIdentifier", "Integer32", "TimeTicks", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "ModuleIdentity", "ObjectIdentity", "Unsigned32")
TextualConvention, MacAddress, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "RowStatus", "TruthValue")
myQoSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18))
myQoSMIB.setRevisions(('2002-03-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: myQoSMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: myQoSMIB.setLastUpdated('200203200000Z')
if mibBuilder.loadTexts: myQoSMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: myQoSMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: myQoSMIB.setDescription('This module defines my QoS(Policy-Based Quality of Service) mibs.')
myQoSPriorityMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1))
myQoSGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myQoSGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: myQoSGlobalStatus.setDescription('QoS function status')
myPriorityTrafficClassNum = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPriorityTrafficClassNum.setStatus('current')
if mibBuilder.loadTexts: myPriorityTrafficClassNum.setDescription('Number of the traffic class the priority can mapping to. Traffic class is a number in the range (1..myPriorityTrafficClassNum)')
myPriorityClassNum = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPriorityClassNum.setStatus('current')
if mibBuilder.loadTexts: myPriorityClassNum.setDescription('Number of the priority class. The range of Priority class is (0..(myPriorityClassNum-1))')
myPriorityDscpMaxValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPriorityDscpMaxValue.setStatus('current')
if mibBuilder.loadTexts: myPriorityDscpMaxValue.setDescription('max value of the dscp in system.')
myTrafficClassTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 5), )
if mibBuilder.loadTexts: myTrafficClassTable.setStatus('current')
if mibBuilder.loadTexts: myTrafficClassTable.setDescription('A table mapping evaluated User Priority to Traffic Class, for forwarding by the bridge. Traffic class is a number in the range (1..myPriorityTrafficClassNum).')
myTrafficClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 5, 1), ).setIndexNames((0, "MY-QOS-MIB", "myTrafficClassPriority"))
if mibBuilder.loadTexts: myTrafficClassEntry.setStatus('current')
if mibBuilder.loadTexts: myTrafficClassEntry.setDescription('User Priority to Traffic Class mapping.')
myTrafficClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myTrafficClassPriority.setStatus('current')
if mibBuilder.loadTexts: myTrafficClassPriority.setDescription('The Priority value determined for the received frame. This value is equivalent to the priority indicated in the tagged frame received, or one of the evaluated priorities, determined according to the media-type. For untagged frames received from Ethernet media, this value is equal to the myPortDefaultUserPriority value for the ingress port. For untagged frames received from non-Ethernet media, this value is equal to the myRegenUserPriority value for the ingress port and media-specific user priority. This value is in the range(0..(myPriorityClassNum-1))')
myTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myTrafficClass.setStatus('current')
if mibBuilder.loadTexts: myTrafficClass.setDescription('The Traffic Class the received frame is mapped to, Its value ranges between 0 and the value of the object myPriorityTrafficClass - 1. The priority is higher if this value is bigger.')
myPriorityToDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myPriorityToDscp.setStatus('current')
if mibBuilder.loadTexts: myPriorityToDscp.setDescription('Dscp value of priority mapping to.')
myDscpClassTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 6), )
if mibBuilder.loadTexts: myDscpClassTable.setStatus('current')
if mibBuilder.loadTexts: myDscpClassTable.setDescription('A table mapping evaluated dscp to priority.')
myDscpClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 6, 1), ).setIndexNames((0, "MY-QOS-MIB", "myDscpClass"))
if mibBuilder.loadTexts: myDscpClassEntry.setStatus('current')
if mibBuilder.loadTexts: myDscpClassEntry.setDescription('A entry mapping evaluated dscp to priority.')
myDscpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDscpClass.setStatus('current')
if mibBuilder.loadTexts: myDscpClass.setDescription('Dscp value.This value is even number in 0 between62')
myDscpTrafficClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDscpTrafficClassPriority.setStatus('current')
if mibBuilder.loadTexts: myDscpTrafficClassPriority.setDescription('The priority which dscp value mapped to. This value is in the range(0..(myPriorityClassNum-1))')
myPriorityTrafficClassOperMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qos-sp", 1), ("qos-wrr", 2), ("qos-drr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myPriorityTrafficClassOperMode.setStatus('current')
if mibBuilder.loadTexts: myPriorityTrafficClassOperMode.setDescription('The global arithmetic type which the priority traffic class use.')
myPriorityBandWidth = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myPriorityBandWidth.setStatus('current')
if mibBuilder.loadTexts: myPriorityBandWidth.setDescription('The global weight setting for every queue Each octet indicate a traffic class queue in the range(1..255) ,first octet indicate first queue. The string length equal to myPriorityTrafficClassNum.')
myIfPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 9), )
if mibBuilder.loadTexts: myIfPriorityTable.setStatus('current')
if mibBuilder.loadTexts: myIfPriorityTable.setDescription('A table that contains information about every interface')
myIfPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 9, 1), ).setIndexNames((0, "MY-QOS-MIB", "myIfPriorityIfIndex"))
if mibBuilder.loadTexts: myIfPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: myIfPriorityEntry.setDescription('A list of Default User Priorities for each interface.')
myIfPriorityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 9, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfPriorityIfIndex.setStatus('current')
if mibBuilder.loadTexts: myIfPriorityIfIndex.setDescription('')
myIfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfPriority.setStatus('current')
if mibBuilder.loadTexts: myIfPriority.setDescription('The default ingress User Priority for this interface. This value is in the range (0..(myPriorityClassNum-1))')
myIfPriTrafficClassOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qos-sp", 1), ("qos-wrr", 2), ("qos-drr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfPriTrafficClassOperMode.setStatus('current')
if mibBuilder.loadTexts: myIfPriTrafficClassOperMode.setDescription('The arithmetic type which the priority traffic class use in this interface.')
myIfPriorityBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 9, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfPriorityBandwidth.setStatus('current')
if mibBuilder.loadTexts: myIfPriorityBandwidth.setDescription('The weight of every queue on a interface. Each octet indicate a traffic class queue in the range(1..255) ,first octet indicate first queue. The string length equal to myPriorityTrafficClassNum.')
myIfPriorityQosTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-trust", 1), ("trust-cos", 2), ("trust-dscp", 3), ("trust-ip-precedence", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfPriorityQosTrustMode.setStatus('current')
if mibBuilder.loadTexts: myIfPriorityQosTrustMode.setDescription('QoS trust mode for this interface.')
myIpPreClassTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 10), )
if mibBuilder.loadTexts: myIpPreClassTable.setStatus('current')
if mibBuilder.loadTexts: myIpPreClassTable.setDescription('A table mapping ip precedence to dscp value.')
myIpPreClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 10, 1), ).setIndexNames((0, "MY-QOS-MIB", "myIpPreClassPriority"))
if mibBuilder.loadTexts: myIpPreClassEntry.setStatus('current')
if mibBuilder.loadTexts: myIpPreClassEntry.setDescription('Ip precedence to dscp mapping.')
myIpPreClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIpPreClassPriority.setStatus('current')
if mibBuilder.loadTexts: myIpPreClassPriority.setDescription('The Ip precedence value determined for the received frame.')
myIpPreToDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIpPreToDscp.setStatus('current')
if mibBuilder.loadTexts: myIpPreToDscp.setDescription('Dscp value of priority mapping to.')
myIfRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 11), )
if mibBuilder.loadTexts: myIfRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: myIfRateLimitTable.setDescription('list of rate limit interface objects.')
myIfRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 11, 1), ).setIndexNames((0, "MY-QOS-MIB", "myIfRateLimitIndex"))
if mibBuilder.loadTexts: myIfRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: myIfRateLimitEntry.setDescription('Entry ACL interface information.')
myIfRateLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 11, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfRateLimitIndex.setStatus('current')
if mibBuilder.loadTexts: myIfRateLimitIndex.setDescription(' ')
myIfRateLimitInMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 11, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfRateLimitInMaxBandWidth.setStatus('current')
if mibBuilder.loadTexts: myIfRateLimitInMaxBandWidth.setDescription('Input maximum bandwidth of in units of kbps. 0 indicate that bandwidth will be not limitted.')
myIfRateLimitInBurstFlowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfRateLimitInBurstFlowLimit.setStatus('current')
if mibBuilder.loadTexts: myIfRateLimitInBurstFlowLimit.setDescription('Input limit of burst traffic in units of byte. 0 indicate that burst traffic will be not limitted.')
myIfRateLimitOutMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 11, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfRateLimitOutMaxBandWidth.setStatus('current')
if mibBuilder.loadTexts: myIfRateLimitOutMaxBandWidth.setDescription('Ouput maximum bandwidth of in units of kbps. 0 indicate that bandwidth will be not limitted.')
myIfRateLimitOutBurstFlowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 1, 11, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfRateLimitOutBurstFlowLimit.setStatus('current')
if mibBuilder.loadTexts: myIfRateLimitOutBurstFlowLimit.setDescription('Ouput limit of burst traffic in units of byte. 0 indicate that burst traffic will be not limitted.')
myQoSTrafficClassMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2))
myQoSTrafficClassTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 1), )
if mibBuilder.loadTexts: myQoSTrafficClassTable.setStatus('current')
if mibBuilder.loadTexts: myQoSTrafficClassTable.setDescription('A table of Qos traffic classification entries.')
myQoSTrafficClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 1, 1), ).setIndexNames((0, "MY-QOS-MIB", "myQosClassMapName"))
if mibBuilder.loadTexts: myQoSTrafficClassEntry.setStatus('current')
if mibBuilder.loadTexts: myQoSTrafficClassEntry.setDescription("QoS traffic classification entry.Every valid QoS traffic classification entry need make use of a MyAclEntry which myAclFlowAction is 'permit'.")
myQosClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myQosClassMapName.setStatus('current')
if mibBuilder.loadTexts: myQosClassMapName.setDescription('Name of this QoS class map.This value is unique for every entry. When this string be used as an index,Value of a sub-identifier equal ASCII value of corresponding character(first sub-identifier corresponds first character of string). The number of sub-identifiers of this string must be 32,If length of string is less than 32 the sub-identifier(0x0) will be filled in tail.')
myQosClassAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myQosClassAclName.setStatus('current')
if mibBuilder.loadTexts: myQosClassAclName.setDescription("Access list name of this class map match.Null indicate that this class map doesn't match any acl")
myQosClassMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 1, 1, 3), ConfigStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myQosClassMapEntryStatus.setStatus('current')
if mibBuilder.loadTexts: myQosClassMapEntryStatus.setDescription('Status of this entry, set this object to valid will creat a class map entry, and set its value to invalid will delete this entry.')
myQoSPoliceMapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 2), )
if mibBuilder.loadTexts: myQoSPoliceMapTable.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapTable.setDescription('A table of Qos police map entries.')
myQoSPoliceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 2, 1), ).setIndexNames((0, "MY-QOS-MIB", "myQosPoliceMapName"))
if mibBuilder.loadTexts: myQoSPoliceMapEntry.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapEntry.setDescription('QoS police map entry.')
myQosPoliceMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myQosPoliceMapName.setStatus('current')
if mibBuilder.loadTexts: myQosPoliceMapName.setDescription('Name of this QoS police map. When this string be used as an index,Value of a sub-identifier equal ASCII value of corresponding character(first sub-identifier corresponds first character of string). The number of sub-identifiers of this string must be 32,If length of string is less than 32 the sub-identifier(0x0) will be filled in tail.')
myQosPoliceMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 2, 1, 2), ConfigStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myQosPoliceMapEntryStatus.setStatus('current')
if mibBuilder.loadTexts: myQosPoliceMapEntryStatus.setDescription('Status of this entry, set this object to valid will creat a entry, and set its value to invalid will delete this entry.')
myQoSPoliceMapConfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3), )
if mibBuilder.loadTexts: myQoSPoliceMapConfTable.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapConfTable.setDescription('A table of Qos police map config entries.')
myQoSPoliceMapConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1), ).setIndexNames((0, "MY-QOS-MIB", "myQoSPoliceCfgPoliceMapName"), (0, "MY-QOS-MIB", "myQoSPoliceCfgClassMapName"))
if mibBuilder.loadTexts: myQoSPoliceMapConfEntry.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapConfEntry.setDescription('QoS police map config entry.')
myQoSPoliceCfgPoliceMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myQoSPoliceCfgPoliceMapName.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceCfgPoliceMapName.setDescription('Name of this QoS police map. When this string be used as an index,Value of a sub-identifier equal ASCII value of corresponding character(first sub-identifier corresponds first character of string). The number of sub-identifiers of this string must be 32,If length of string is less than 32 the sub-identifier(0x0) will be filled in tail.')
myQoSPoliceCfgClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myQoSPoliceCfgClassMapName.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceCfgClassMapName.setDescription('A QoS class map name of this police map match. When this string be used as an index,Value of a sub-identifier equal ASCII value of corresponding character(first sub-identifier corresponds first character of string). The number of sub-identifiers of this string must be 32,If length of string is less than 32 the sub-identifier(0x0) will be filled in tail.')
myQoSPoliceMapConfMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myQoSPoliceMapConfMaxBandWidth.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapConfMaxBandWidth.setDescription('Maximum bandwidth of this traffic classification in units of bps. If the Maximum bandwidth is greater than the maximum value reportable by this object then this object should report its maximum value (4,294,967,295) and myQoSPoliceMapConfMaxBandWidth must be used to set or report the Maximum bandwidth. 0 indicate that bandwidth will be not limitted.')
myQoSPoliceMapConfBurstFlowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myQoSPoliceMapConfBurstFlowLimit.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapConfBurstFlowLimit.setDescription('Limit of burst traffic of this traffic classification in units of byte. 0 indicate that burst traffic will be not limitted.')
myQoSPoliceMapConfExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("modify-dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myQoSPoliceMapConfExceedAction.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapConfExceedAction.setDescription('The action deal with the traffic exceeded bandwidth.')
myQoSPoliceMapConfExceedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myQoSPoliceMapConfExceedDscp.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapConfExceedDscp.setDescription("The new dscp value will replaces the old dscp value of packet when traffic of packet has exceeded bandwidth. This value has meaning only when value of myQoSPoliceMapConfExceedAction is 'modify-dscp' .")
myQoSPoliceMapConfNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myQoSPoliceMapConfNewDscp.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapConfNewDscp.setDescription('The new dscp value will replaces the old dscp value of packet regardless whether the traffic has exceeded bandwidth. Setting this value to -1 indicate that the dscp value of packet will not be modifed')
myQoSPoliceMapCfgEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1, 8), ConfigStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myQoSPoliceMapCfgEntryStatus.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapCfgEntryStatus.setDescription('Status of this entry, set this object to valid will creat a entry, and set its value to invalid will delete this entry.')
myQoSPoliceMapConfMaxHighBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myQoSPoliceMapConfMaxHighBandWidth.setStatus('current')
if mibBuilder.loadTexts: myQoSPoliceMapConfMaxHighBandWidth.setDescription('Maximum bandwidth of this traffic classification in units of kbps. 0 indicate that bandwidth will be not limitted. when myQoSPoliceMapConfMaxBandWidth is equal to ,this object display the real Maximum bandwidth of this traffic classification')
myQosPoliceIfExtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 5), )
if mibBuilder.loadTexts: myQosPoliceIfExtTable.setStatus('current')
if mibBuilder.loadTexts: myQosPoliceIfExtTable.setDescription('list of QoS Police Map interface objects.')
myQosPoliceIfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 5, 1), ).setIndexNames((0, "MY-QOS-MIB", "myQosPoliceIfIndex"))
if mibBuilder.loadTexts: myQosPoliceIfExtEntry.setStatus('current')
if mibBuilder.loadTexts: myQosPoliceIfExtEntry.setDescription('Entry ACL interface information.')
myQosPoliceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 5, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myQosPoliceIfIndex.setStatus('current')
if mibBuilder.loadTexts: myQosPoliceIfIndex.setDescription(' ')
myIfInPoliceMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfInPoliceMapName.setStatus('current')
if mibBuilder.loadTexts: myIfInPoliceMapName.setDescription("Police map name of this interface ingress match. It indicate that this interface doesn't match any ACL which this string is null")
myIfOutPoliceMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfOutPoliceMapName.setStatus('current')
if mibBuilder.loadTexts: myIfOutPoliceMapName.setDescription("Police map name of this interface egress match. It indicate that this interface doesn't match any ACL which this string is null")
myQoSMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 3))
myQoSMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 3, 1))
myQoSMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 3, 2))
myQoSMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 3, 1, 1)).setObjects(("MY-QOS-MIB", "myQoSPriorityMIBGroup"), ("MY-QOS-MIB", "myQoSTrafficClassMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myQoSMIBCompliance = myQoSMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: myQoSMIBCompliance.setDescription('The compliance statement for entities which implement the My QoS MIB')
myQoSPriorityMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 3, 2, 1)).setObjects(("MY-QOS-MIB", "myQoSGlobalStatus"), ("MY-QOS-MIB", "myPriorityTrafficClassNum"), ("MY-QOS-MIB", "myPriorityClassNum"), ("MY-QOS-MIB", "myPriorityDscpMaxValue"), ("MY-QOS-MIB", "myTrafficClassPriority"), ("MY-QOS-MIB", "myTrafficClass"), ("MY-QOS-MIB", "myPriorityToDscp"), ("MY-QOS-MIB", "myDscpClass"), ("MY-QOS-MIB", "myDscpTrafficClassPriority"), ("MY-QOS-MIB", "myPriorityTrafficClassOperMode"), ("MY-QOS-MIB", "myPriorityBandWidth"), ("MY-QOS-MIB", "myIfPriorityIfIndex"), ("MY-QOS-MIB", "myIfPriority"), ("MY-QOS-MIB", "myIfPriTrafficClassOperMode"), ("MY-QOS-MIB", "myIfPriorityBandwidth"), ("MY-QOS-MIB", "myIfPriorityQosTrustMode"), ("MY-QOS-MIB", "myIpPreClassPriority"), ("MY-QOS-MIB", "myIpPreToDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myQoSPriorityMIBGroup = myQoSPriorityMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myQoSPriorityMIBGroup.setDescription('A collection of objects providing qos priority ability to a My agent.')
myQoSTrafficClassMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 18, 3, 2, 2)).setObjects(("MY-QOS-MIB", "myQosClassMapName"), ("MY-QOS-MIB", "myQosClassAclName"), ("MY-QOS-MIB", "myQosClassMapEntryStatus"), ("MY-QOS-MIB", "myQosPoliceMapName"), ("MY-QOS-MIB", "myQosPoliceMapEntryStatus"), ("MY-QOS-MIB", "myQoSPoliceCfgPoliceMapName"), ("MY-QOS-MIB", "myQoSPoliceCfgClassMapName"), ("MY-QOS-MIB", "myQoSPoliceMapConfMaxBandWidth"), ("MY-QOS-MIB", "myQoSPoliceMapConfExceedAction"), ("MY-QOS-MIB", "myQoSPoliceMapConfExceedDscp"), ("MY-QOS-MIB", "myQoSPoliceMapConfNewDscp"), ("MY-QOS-MIB", "myQoSPoliceMapCfgEntryStatus"), ("MY-QOS-MIB", "myQoSPoliceMapConfMaxHighBandWidth"), ("MY-QOS-MIB", "myQosPoliceIfIndex"), ("MY-QOS-MIB", "myIfInPoliceMapName"), ("MY-QOS-MIB", "myIfOutPoliceMapName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myQoSTrafficClassMIBGroup = myQoSTrafficClassMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myQoSTrafficClassMIBGroup.setDescription('A collection of objects providing qos traffic classification ability to a My agent.')
mibBuilder.exportSymbols("MY-QOS-MIB", myQoSPriorityMIBGroup=myQoSPriorityMIBGroup, myIpPreToDscp=myIpPreToDscp, myQosClassMapEntryStatus=myQosClassMapEntryStatus, myIfInPoliceMapName=myIfInPoliceMapName, myDscpClassTable=myDscpClassTable, myQoSMIBGroups=myQoSMIBGroups, myIfRateLimitEntry=myIfRateLimitEntry, myQoSTrafficClassMIBObjects=myQoSTrafficClassMIBObjects, myQoSPoliceMapConfExceedDscp=myQoSPoliceMapConfExceedDscp, myPriorityClassNum=myPriorityClassNum, myQoSPoliceMapConfNewDscp=myQoSPoliceMapConfNewDscp, myTrafficClassPriority=myTrafficClassPriority, myTrafficClass=myTrafficClass, myIfPriorityIfIndex=myIfPriorityIfIndex, myIfRateLimitInMaxBandWidth=myIfRateLimitInMaxBandWidth, myQoSPoliceMapEntry=myQoSPoliceMapEntry, myIpPreClassTable=myIpPreClassTable, myIfPriorityEntry=myIfPriorityEntry, myQoSPoliceCfgPoliceMapName=myQoSPoliceCfgPoliceMapName, myPriorityDscpMaxValue=myPriorityDscpMaxValue, myIfPriorityBandwidth=myIfPriorityBandwidth, myIpPreClassPriority=myIpPreClassPriority, myQoSTrafficClassMIBGroup=myQoSTrafficClassMIBGroup, myPriorityBandWidth=myPriorityBandWidth, PYSNMP_MODULE_ID=myQoSMIB, myIfRateLimitInBurstFlowLimit=myIfRateLimitInBurstFlowLimit, myIfPriTrafficClassOperMode=myIfPriTrafficClassOperMode, myIfPriorityTable=myIfPriorityTable, myDscpClass=myDscpClass, myTrafficClassEntry=myTrafficClassEntry, myPriorityTrafficClassNum=myPriorityTrafficClassNum, myIfRateLimitTable=myIfRateLimitTable, myQoSPoliceMapTable=myQoSPoliceMapTable, myIfPriorityQosTrustMode=myIfPriorityQosTrustMode, myTrafficClassTable=myTrafficClassTable, myIfPriority=myIfPriority, myIfRateLimitOutBurstFlowLimit=myIfRateLimitOutBurstFlowLimit, myIfOutPoliceMapName=myIfOutPoliceMapName, myQoSPoliceMapConfEntry=myQoSPoliceMapConfEntry, myQosPoliceIfExtTable=myQosPoliceIfExtTable, myQoSPoliceMapConfTable=myQoSPoliceMapConfTable, myQoSTrafficClassEntry=myQoSTrafficClassEntry, myQoSTrafficClassTable=myQoSTrafficClassTable, myQoSPriorityMIBObjects=myQoSPriorityMIBObjects, myQoSGlobalStatus=myQoSGlobalStatus, myQoSPoliceMapConfBurstFlowLimit=myQoSPoliceMapConfBurstFlowLimit, myQosPoliceIfExtEntry=myQosPoliceIfExtEntry, myQoSPoliceMapConfMaxHighBandWidth=myQoSPoliceMapConfMaxHighBandWidth, myQoSMIBCompliances=myQoSMIBCompliances, myPriorityTrafficClassOperMode=myPriorityTrafficClassOperMode, myQosPoliceIfIndex=myQosPoliceIfIndex, myQoSPoliceMapConfMaxBandWidth=myQoSPoliceMapConfMaxBandWidth, myQosPoliceMapName=myQosPoliceMapName, myQoSPoliceMapCfgEntryStatus=myQoSPoliceMapCfgEntryStatus, myQoSMIB=myQoSMIB, myQosClassAclName=myQosClassAclName, myQoSMIBCompliance=myQoSMIBCompliance, myQosClassMapName=myQosClassMapName, myIfRateLimitIndex=myIfRateLimitIndex, myIpPreClassEntry=myIpPreClassEntry, myQoSMIBConformance=myQoSMIBConformance, myDscpClassEntry=myDscpClassEntry, myDscpTrafficClassPriority=myDscpTrafficClassPriority, myPriorityToDscp=myPriorityToDscp, myQosPoliceMapEntryStatus=myQosPoliceMapEntryStatus, myIfRateLimitOutMaxBandWidth=myIfRateLimitOutMaxBandWidth, myQoSPoliceMapConfExceedAction=myQoSPoliceMapConfExceedAction, myQoSPoliceCfgClassMapName=myQoSPoliceCfgClassMapName)
