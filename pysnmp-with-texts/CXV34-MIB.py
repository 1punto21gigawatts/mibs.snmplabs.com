#
# PySNMP MIB module CXV34-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXV34-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
SapIndex, cxV34, Alias = mibBuilder.importSymbols("CXProduct-SMI", "SapIndex", "cxV34", "Alias")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Gauge32, IpAddress, NotificationType, Integer32, ObjectIdentity, iso, Counter64, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "IpAddress", "NotificationType", "Integer32", "ObjectIdentity", "iso", "Counter64", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
v34SlotTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1), )
if mibBuilder.loadTexts: v34SlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotTable.setDescription('Describes a table that contains configuration information about each V34 modem and its associated hardware port.')
v34SlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1), ).setIndexNames((0, "CXV34-MIB", "v34SlotNumber"))
if mibBuilder.loadTexts: v34SlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotEntry.setDescription('Describes the configuration information applied to a specific V34 modem and its associated hardware port.')
v34SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotNumber.setDescription('Identifies a numerical value applied to the modem. Each device has a unique number.')
v34SlotAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v34SlotAlias.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotAlias.setDescription('Assigns a name used for the alias. Each modem requires a unique name. You may not assign the same name twice. Default Value: none Range of Values: Up to twelve alphanumeric characters, the first character must be alphabetic. Configuration Changed: operative')
v34SlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v34SlotRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotRowStatus.setDescription('Determines the status of the objects in in a table row. Default Value: none Options: invalid (1): row is flagged, after next reset the values will be disabled and the row will be deleted from the table. valid (2): values are enabled Configuration Changed: administrative')
v34SlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v34-not-present", 1), ("v34-present", 2), ("v34-present-failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotStatus.setDescription('Identifies the presence or absence of a V.34 modem in the slot and if present, whether it has failed initialization. Default Value: none Options: v34-not-present (1) v34-present (2) v34-present-failed (3)')
v34SlotModemString = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v34SlotModemString.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotModemString.setDescription('Determines a string to be sent to the modem upon initialization. Default Value: none Range of Values: 0-32 alphanumberic characters Configuration Changed: administrative')
v34SlotDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v34SlotDialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotDialNumber.setDescription('Specifies the number used to dial the remote modem. Default Value: none Range of Values: An octet string of 12 numeric characters Configuration Changed: administrative')
v34SlotAnswerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("answer-disabled", 1), ("answer-enabled", 2), ("test-mode", 3))).clone('answer-enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v34SlotAnswerMode.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotAnswerMode.setDescription('Determines whether the device will answer an incoming call. Default Value: answer-enabled (2) Options: answer-disabled (1) answer-enabled (2) test-mode (3) Configuration Changed: operative')
v34SlotSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("speed-0-300", 1), ("speed-600", 2), ("speed-1200", 3), ("speed-2400", 4), ("speed-4800", 5), ("speed-7200", 6), ("speed-9600", 7), ("speed-12000", 8), ("speed-14400", 9), ("speed-16800", 10), ("speed-19200", 11), ("speed-21600", 12), ("speed-24000", 13), ("speed-26400", 14), ("speed-28800", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotSpeedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotSpeedStatus.setDescription('Identifies the connection rate operative during the current dial call only. Default Value: none Options: speed-0-300 (1) speed-600 (2) speed-1200 (3) speed-2400 (4) speed-4800 (5) speed-7200 (6) speed-9600 (7) speed-12000 (8) speed-14400 (9) speed-16800 (10) speed-19200 (11) speed-21600 (12) speed-24000 (13) speed-26400 (14) speed-28800 (15) ')
v34SlotRetrainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-retraining", 1), ("retraining", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotRetrainStatus.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotRetrainStatus.setDescription('Identifies whether the modem is retraining or not. It is only applicable while the modem is on-line. Default Value: none Options: no-retraining (1) retraining (2)')
v34SlotHookStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on-hook", 1), ("off-hook", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotHookStatus.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotHookStatus.setDescription("Identifies whether the modem is 'off-hook' (connected to the telephone line), or 'on-hook' (disconnected). Default Value: none Options: on-hook (1) off-hook (2)")
v34SlotRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-ring", 1), ("ring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotRingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotRingStatus.setDescription('Identifies when the modem detects a ring signal from the telephone line. Default Value: none Options: no-ring (1) ring (2)')
v34SlotDsrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsr-deasserted", 1), ("dsr-asserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotDsrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotDsrStatus.setDescription('Identifies the data transfer state of the modem by the status of the Data Set Ready (DSR) signal . Default Value: none Options dsr-deasserted (1): data transfer inactive dsr-asserted (2): data transfer active')
v34SlotDtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtr-deasserted", 1), ("dtr-asserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotDtrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotDtrStatus.setDescription('Identifies the status of the Data Terminal Ready (DTR) signal that the motherboard uses to dial the pre-stored phone number (if in originate mode) or to enable auto answer (if in answer mode). Default Value: none Options: dtr-deasserted (1) dtr-asserted (2)')
v34SlotModel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotModel.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotModel.setDescription('Identifies the model number of the Printed Circuit Board (PCB) as an integer value from 0 to 7. Default Value: none Range of Values: 0-7')
v34SlotRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotRevision.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotRevision.setDescription('Identifies the revision number of the PCB as an integer value from 0 to 15. Default Value: none Range of Values: 0-15')
v34SlotEco = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 42, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v34SlotEco.setStatus('mandatory')
if mibBuilder.loadTexts: v34SlotEco.setDescription('Identifies the Engineering Change Order (ECO) level of the PCB as an integer value from 0 to 15. Default Value: none Range of Values: 0-15')
mibBuilder.exportSymbols("CXV34-MIB", v34SlotModel=v34SlotModel, v34SlotModemString=v34SlotModemString, v34SlotRetrainStatus=v34SlotRetrainStatus, v34SlotHookStatus=v34SlotHookStatus, v34SlotRingStatus=v34SlotRingStatus, v34SlotStatus=v34SlotStatus, v34SlotEntry=v34SlotEntry, v34SlotRevision=v34SlotRevision, v34SlotSpeedStatus=v34SlotSpeedStatus, v34SlotAnswerMode=v34SlotAnswerMode, v34SlotEco=v34SlotEco, v34SlotDtrStatus=v34SlotDtrStatus, v34SlotAlias=v34SlotAlias, v34SlotDialNumber=v34SlotDialNumber, v34SlotDsrStatus=v34SlotDsrStatus, v34SlotTable=v34SlotTable, v34SlotNumber=v34SlotNumber, v34SlotRowStatus=v34SlotRowStatus)
