#
# PySNMP MIB module PDN-SPECTRUMMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-SPECTRUMMGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifType, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifType", "ifIndex")
pdn_interfaces, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-interfaces")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Bits, Integer32, Gauge32, IpAddress, MibIdentifier, iso, NotificationType, ObjectIdentity, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Bits", "Integer32", "Gauge32", "IpAddress", "MibIdentifier", "iso", "NotificationType", "ObjectIdentity", "Unsigned32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pdnSpectrumMgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19))
pdnSpectrumMgmt.setRevisions(('2003-01-15 13:00', '2003-01-09 15:00', '1901-05-16 15:30', '1901-05-08 05:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnSpectrumMgmt.setRevisionsDescriptions(('Jesus Pinto 1. Changed indexes on GeneralConfigTable. 2. Removed DSL Line Table. 3. Renamed newSpectrumMgmtAturMaxTxRate 4. Renamed newSpectrumMgmtAturMinTxRate 5. Renamed newSpectrumMgmtAturTxPower 6. Renamed newSpectrumMgmtAtucMinTxRate 7. Renamed newSpectrumMgmtAtucMaxTxRate 8. Renamed newSpectrumMgmtAtucTxPower 9. Added newSpectrumMgmtXturMax2TxRate 10.Added newSpectrumMgmtXturMin2TxRate 11.Added newSpectrumMgmtXtucMax2TxRate 12.Added newSpectrumMgmtXtucMax2TxRate', 'Jesus Pinto 1. Deprecated spectrumMgmtTable and all its objects. 2. Added newSpectrumMgmtTable. 3. Added newSpectrumMgmtMode. 4. Added newSpectrumMgmtEWLUnits. 5. Added newSpectrumMgmtLoopMeasurementMethod. 6. Added newSpectrumMgmtLineInfoTable. 7. Added newSpectrumMgmtGeneralConfigTable.', 'R.A.Bowhall Added DEFVAL caluse, Added the pdnSpecMgmtTraps, and pdnSpecMgmtMIBConformance info. Added an Informational Note at the Beginning of this MIB.', 'R.A.Bowhall Added the EWL Deployment Guidelines Table and Changed spectrumMgmtAllowedSpeeds to spectrumMgmtAllowedSpeedsMin1, spectrumMgmtAllowedSpeedsMax1, spectrumMgmtAllowedSpeedsMin2, spectrumMgmtAllowedSpeedsMax2',))
if mibBuilder.loadTexts: pdnSpectrumMgmt.setLastUpdated('200212091500Z')
if mibBuilder.loadTexts: pdnSpectrumMgmt.setOrganization('Paradyne Corp MIB Working Group')
if mibBuilder.loadTexts: pdnSpectrumMgmt.setContactInfo('Paradyne Networks, Inc. 8545 126th Ave North Largo, FL 33733 www.paradyne.com General Comments to: mibwg_team@eng.paradyne.com Editors: R.A.Bowhall, Jesus Pinto')
if mibBuilder.loadTexts: pdnSpectrumMgmt.setDescription('R.A.Bowhall The Paradyne enterprise SPECTRUM MIB. This MIB is written to facilitate spectrum management of any xDSL interfaces. This mib replaces older versions of the spectrum management including the reachDSL.mib.')
pdnSpecMgmtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1))
pdnNewSpecMgmtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2))
newSpectrumMgmtGeneralConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 1), )
if mibBuilder.loadTexts: newSpectrumMgmtGeneralConfigTable.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtGeneralConfigTable.setDescription('General Configuration of the spectrum management. This table contains an entry for each technology managed by this device.')
newSpectrumMgmtGeneralConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "IF-MIB", "ifType"))
if mibBuilder.loadTexts: newSpectrumMgmtGeneralConfigEntry.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtGeneralConfigEntry.setDescription('An entry with the general spectrum mgmt configuration parameters for a specific DSL technology.')
newSpectrumMgmtSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSpectrumMgmtSelection.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtSelection.setDescription('This object is used to Enable or Disable Spectrum Management on DSL interfaces managed by this device. Enabling this object limits the DSL speeds on each port based on line length in order to meet ANSI T1.417 Spectrum Management requirements or BT Access Network Spectrum requirements. The values that this object can accept are controlled by the -Mode- object.')
newSpectrumMgmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableOnly", 1), ("disableOnly", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtMode.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtMode.setDescription("This object restricts the MAX-ACCESS of the 'Selection' object. Following are the details of each of the values: enableOnly(1) - Indicates that the 'Selection' object IS always 'enabled' and cannot be set to 'disabled'. disableOnly(2) - Indicates that the 'Selection' object IS always 'disabled' and cannot be set to 'enabled'. both(3) - Indicates that the 'Selection' object will accept both the 'enabled' and 'disabled' values.")
newSpectrumMgmtLoopMeasurementMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loopLength", 2), ("ewl", 3), ("quadMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtLoopMeasurementMethod.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtLoopMeasurementMethod.setDescription("This object indicates the measurement method used in describing the Loop Length of a circuit. Following are the details of each of the options: none(1) - Indicates that the Spectral Compliance is NOT dependant on any Loop Length measurements or configurations. loopLength(2) - The 'ConfLoopLength' object is used to determine spectral compliance. The 'ConfEWL' &amp; 'ConfQuadMode' objects are not used in this mode. ewl(3) - The 'ConfEWL' object is used to configure the estimated loop length, which is used to determine spectral compliance. In this mode the 'ConfLoopLength' &amp; 'ConfQuadMode' objects are not used. quadMode(4) - The 'ConfQuadMode' object is used to determine spectral compliance. The 'ConfEWL' &amp; 'ConfLoopLength' objects are not used in this mode. This object determines which of the three objects : 'ConfEWL', 'ConfLoopLength' or 'ConfQuadMode' is used (if any) to enforce spectrally compliant maximum 'Tx Rates' and the maximum allowed 'Tx Power' on a given circuit.")
newSpectrumMgmtEWLUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("feet", 2), ("meters", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtEWLUnits.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtEWLUnits.setDescription("This object indicates the units of measurement used in describing the Estimated Working Length of a circuit. Following are the details of each of the units: none(1) - Indicates that the Spectral Compliance is NOT dependant on the 'ConfEWL' object. feet(2) - The 'ConfEWL' is measured and configured in feet. meters(3) - The 'ConfEWL' is measured and configured in meters.")
newSpectrumMgmtConfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 2), )
if mibBuilder.loadTexts: newSpectrumMgmtConfTable.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtConfTable.setDescription('The new Spectrum Management Configuration Table This table is used for configuring spectrum management objects on any DSL interface.')
newSpectrumMgmtConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: newSpectrumMgmtConfEntry.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtConfEntry.setDescription("An entry in the xDSL Spectrum Management Configuration table. Note: This entry can be accessed only for ifIndex values that belong to a physical interface. e.g. for ifType = 'shdsl' (IANAifType=169).")
newSpectrumMgmtConfEWL = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSpectrumMgmtConfEWL.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtConfEWL.setDescription("The Equivalent Working Length (EWL). The value selected corresponds to the estimated length of the line in feet - if 'EWLUnits' object is 'feet'. meters - if 'EWLUnits' object is 'meters'. This value is usually specified by the carrier and MUST be in integral multiples of 500 feet, if 'EWLUnits' is 'feet'. 200 meters, if 'EWLUnits' is 'meters'. The range of values that this object can take is determined by the 'MinEWL' and 'MaxEWL' objects. Changing this object may limit the maximum transmit power and the effective DSL speeds at which the ports train up. Note: This object will be used only if Spectrum Management is enabled and 'LoopMeasurementMethod' is 'ewl'. This object shares a mutual exclusion relationship with the 'ConfLoopLength' &amp; 'ConfQuadMode' objects, as only one of the two will be used for configuration at any time.")
newSpectrumMgmtConfLoopLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("short", 1), ("medium", 2), ("long", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSpectrumMgmtConfLoopLength.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtConfLoopLength.setDescription("This entry specifies the loop length for the line. The configurable values are short(1), medium(2) and long(3). The 'Loop Length' feature can be used only if the 'shdslSpectrumMgmtSelection' object is Enabled and the 'LoopMeasurementMethod' is 'loopLength'. Changing this object may limit the maximum transmit power and the effective DSL speeds at which ports train up. Note: This object shares a mutual exclusion relationship with the 'ConfEWL' objects. i.e. only one of the three can be used for configuration at one time.")
newSpectrumMgmtConfQuadMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sameQuad", 1), ("segregatedQuadUpto3km", 2), ("segregatedQuadAbove3km", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSpectrumMgmtConfQuadMode.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtConfQuadMode.setDescription("This entry specifies the quad cable configuration &amp; length for the line. The configurable values are sameQuad(1), segregatedQuadUpto3km(2) and segregatedQuadAbove3km(3). The 'Quad Mode' feature can be used only if the 'reachDSLSpectrumMgmtSelection' object is Enabled and the 'LoopMeasurementMethod' is 'quadMode'. Changing this object may limit the maximum transmit power and the effective DSL speeds at which ports train up. Note: This object shares a mutual exclusion relationship with the 'ConfEWL' &amp; 'ConfLoopLength' objects. i.e. only one of the three can be used for configuration at one time.")
newSpectrumMgmtLineInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3), )
if mibBuilder.loadTexts: newSpectrumMgmtLineInfoTable.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtLineInfoTable.setDescription('The Spectrum Management Line Info Table. This table gives information about the spectrum management ranges that are applicable for each port, based on the spectral requirements for the device.')
newSpectrumMgmtLineInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: newSpectrumMgmtLineInfoEntry.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtLineInfoEntry.setDescription("An entry in the newSpectrumMgmtLineInfoTable table. Note: This entry can be accessed only for ifIndex values that belong to a physical interface. e.g. for ifType = 'adsl'.")
newSpectrumMgmtXtucMax1TxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 1), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXtucMax1TxRate.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXtucMax1TxRate.setDescription('This rate will be the max allowed Tx Rate(in bps) for the port based on the Spectrum Management requirements for XTUC in a particular spectral compliance configuration. Some measurement methods may have more than one range for the TxRate. Min1TxRate and Max1TxRate will always have the first range of values and the Min2TxRate and Max2TxRate will have the second range if the method demands it.')
newSpectrumMgmtXtucMin1TxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 2), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXtucMin1TxRate.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXtucMin1TxRate.setDescription("This rate will be the min allowed Tx Rate based on the spectrum management requirements for the XTUC. The MinTxRate will be upper bounded by 'newSpectrumMgmtXtucMax1TxRate' object. Some measurement methods may have more than one range for the TxRate. Min1TxRate and Max1TxRate will always have the first range of values and the Min2TxRate and Max2TxRate will have the second range if the method demands it.")
newSpectrumMgmtXtucMax2TxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 3), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXtucMax2TxRate.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXtucMax2TxRate.setDescription('This rate will be the max allowed Tx Rate(in bps) for the port based on the Spectrum Management requirements for XTUC in a particular spectral compliance configuration. This object is the Some measurement methods may have more than one range for the TxRate. Min1TxRate and Max1TxRate will always have the first range of values and the Min2TxRate and Max2TxRate will have the second range if the method demands it.')
newSpectrumMgmtXtucMin2TxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 4), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXtucMin2TxRate.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXtucMin2TxRate.setDescription("This rate will be the min allowed Tx Rate based on the spectrum management requirements for the XTUC. The MinTxRate will be upper bounded by 'newSpectrumMgmtXtucMax1TxRate' object. Some measurement methods may have more than one range for the TxRate. Min1TxRate and Max1TxRate will always have the first range of values and the Min2TxRate and Max2TxRate will have the second range if the method demands it.")
newSpectrumMgmtXtucMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, 120))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXtucMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXtucMaxTxPower.setDescription('The maximum transmit power at the ATUC (in tenth dB). This value will be based on the spectrum management selection.')
newSpectrumMgmtXturMax1TxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 6), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXturMax1TxRate.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXturMax1TxRate.setDescription('This rate will be the max allowed Tx Rate(in bps) for the port based on the Spectrum Management requirements for XTUR in a particular spectral compliance configuration. This object is the Some measurement methods may have more than one range for the TxRate. Min1TxRate and Max1TxRate will always have the first range of values and the Min2TxRate and Max2TxRate will have the second range if the method demands it.')
newSpectrumMgmtXturMin1TxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 7), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXturMin1TxRate.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXturMin1TxRate.setDescription("This rate will be the min allowed Tx Rate based on the spectrum management requirements for the XTUR. The MinTxRate will be upper bounded by 'newSpectrumMgmtXturMax1TxRate' object. Some measurement methods may have more than one range for the TxRate. Min1TxRate and Max1TxRate will always have the first range of values and the Min2TxRate and Max2TxRate will have the second range if the method demands it.")
newSpectrumMgmtXturMax2TxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 8), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXturMax2TxRate.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXturMax2TxRate.setDescription('This rate will be the max allowed Tx Rate(in bps) for the port based on the Spectrum Management requirements for XTUR in a particular spectral compliance configuration. Some measurement methods may have more than one range for the TxRate. Min1TxRate and Max1TxRate will always have the first range of values and the Min2TxRate and Max2TxRate will have the second range if the method demands it.')
newSpectrumMgmtXturMin2TxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 9), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXturMin2TxRate.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXturMin2TxRate.setDescription("This rate will be the min allowed Tx Rate based on the spectrum management requirements for the XTUR. The MinTxRate will be upper bounded by 'newSpectrumMgmtXtucMax1TxRate' object. Some measurement methods may have more than one range for the TxRate. Min1TxRate and Max1TxRate will always have the first range of values and the Min2TxRate and Max2TxRate will have the second range if the method demands it.")
newSpectrumMgmtXturMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, 120))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtXturMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtXturMaxTxPower.setDescription('The maximum transmit power at the ATUR (in tenth dB). This value will be based on the spectrum management selection.')
newSpectrumMgmtMinEWL = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtMinEWL.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtMinEWL.setDescription("The minimum value (in feet, if 'EWLUnits' is 'feet, or in meters, if 'EWLUnits' is 'meters') that the 'ConfEWL' object can accept. Together with the 'MaxEWL' object, this object indicates the range of EWL when 'EWLUnits' is either 'feet' or 'meters'. Note : This object is valid only if the 'LoopMeasurementMethod' object is 'ewl'.")
newSpectrumMgmtMaxEWL = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 2, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newSpectrumMgmtMaxEWL.setStatus('current')
if mibBuilder.loadTexts: newSpectrumMgmtMaxEWL.setDescription("The maximum value (in feet, if 'EWLUnits' is 'feet, or in meters, if 'EWLUnits' is 'meters') that the 'ConfEWL' object can accept. Together with the 'MinEWL' object, this object indicates the range of EWL when 'EWLUnits' is either 'feet' or 'meters'. Note : This object is valid only if the 'LoopMeasurementMethod' object is 'ewl'.")
spectrumMgmtCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usa", 1), ("uk", 2))).clone('usa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumMgmtCountryCode.setStatus('deprecated')
if mibBuilder.loadTexts: spectrumMgmtCountryCode.setDescription("This object selects which Spectrum Management standard will be used on this device to calculate the 'allowed speeds' to comply with Spectrum Management. Note:Spectrum Management must be Enabled for 'Country Code' to take effect. 'USA' is the only valid selection for Region Setting 'Annex A', 'UK' will not be selectable. 'UK' for is the only valid selecton for Region Setting 'Annex B', 'USA' will not be selectable.")
spectrumMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1, 3), )
if mibBuilder.loadTexts: spectrumMgmtTable.setStatus('deprecated')
if mibBuilder.loadTexts: spectrumMgmtTable.setDescription('The Spectrum Management Table.')
spectrumMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: spectrumMgmtEntry.setStatus('deprecated')
if mibBuilder.loadTexts: spectrumMgmtEntry.setDescription('An entry in the Spectrum Management table.')
spectrumMgmtEWL = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumMgmtEWL.setStatus('deprecated')
if mibBuilder.loadTexts: spectrumMgmtEWL.setDescription("The Estimated Working Length [EWL(ft)]. The value selected is the estimated length of the line in ft. See the Deployment guideline Table below. This value is usually specified by the carrier. This value is only required if spectrumMgmt is Enabled and the spectrumMgmtCountryCode selected is 'USA'.")
spectrumMgmtAllowedSpeedsMin1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumMgmtAllowedSpeedsMin1.setStatus('deprecated')
if mibBuilder.loadTexts: spectrumMgmtAllowedSpeedsMin1.setDescription('This rate will be the Minimum Line Bit Rate based on the Line Length selected. See the Deployment guideline Table above. Example: EWL=12.5 this value may be 808kbps')
spectrumMgmtAllowedSpeedsMax1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumMgmtAllowedSpeedsMax1.setStatus('deprecated')
if mibBuilder.loadTexts: spectrumMgmtAllowedSpeedsMax1.setDescription('This rate will be the Maximum Line Bit Rate based on the Line Length selected See the Deployment guideline Table above. Example: EWL=12.5 this value may be 832kbps')
spectrumMgmtAllowedSpeedsMin2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumMgmtAllowedSpeedsMin2.setStatus('deprecated')
if mibBuilder.loadTexts: spectrumMgmtAllowedSpeedsMin2.setDescription('This rate will be the Minimum Line Bit Rate based on the Line Length selected. See the Deployment guideline Table above. Example: EWL=12.5 this value may be 960kbps')
spectrumMgmtAllowedSpeedsMax2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumMgmtAllowedSpeedsMax2.setStatus('deprecated')
if mibBuilder.loadTexts: spectrumMgmtAllowedSpeedsMax2.setDescription('This rate will be the Maximum Line Bit Rate based on the Line Length selected. See the Deployment guideline Table above. Example: EWL=12.5 this value may be 1000kbps')
spectrumMgmtLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("short", 1), ("medium", 2), ("long", 3))).clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spectrumMgmtLineLength.setStatus('deprecated')
if mibBuilder.loadTexts: spectrumMgmtLineLength.setDescription("This 'Line Length' feature is only required if the SpectrumMgmt is Enabled and the spectrumMgmtCountryCode selected is 'UK'. 'Short' Line Length from the exchange can support speeds up to 2056 Kbps. 'Medium' Line Length can support speeds up to 1496 Kbps. 'Long' Line Length can suppport speeds up to 872 Kbps.")
pdnSpecMgmtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3))
pdnSpecMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3, 1))
pdnSpecMgmtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3, 2))
pdnSpecMgmtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3, 2, 1)).setObjects(("PDN-SPECTRUMMGMT-MIB", "pdnGeneralConfigGroup"), ("PDN-SPECTRUMMGMT-MIB", "pdnLineInfoGroup"), ("PDN-SPECTRUMMGMT-MIB", "pdnEWLModeGroup"), ("PDN-SPECTRUMMGMT-MIB", "pdnLoopLengthModeGroup"), ("PDN-SPECTRUMMGMT-MIB", "pdnQuadModeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnSpecMgmtCompliance = pdnSpecMgmtCompliance.setStatus('current')
if mibBuilder.loadTexts: pdnSpecMgmtCompliance.setDescription('The compliance statement for SNMP entities that control spectrum management on interfaces.')
pdnGeneralConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3, 1, 1)).setObjects(("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtSelection"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtMode"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtLoopMeasurementMethod"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtEWLUnits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnGeneralConfigGroup = pdnGeneralConfigGroup.setStatus('current')
if mibBuilder.loadTexts: pdnGeneralConfigGroup.setDescription('A collection of general configuration objects required for the spectrum management of interfaces.')
pdnLineInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3, 1, 2)).setObjects(("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXtucMax1TxRate"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXtucMin1TxRate"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXtucMax2TxRate"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXtucMin2TxRate"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXtucMaxTxPower"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXturMax1TxRate"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXturMin1TxRate"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXturMax2TxRate"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXturMin2TxRate"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtXturMaxTxPower"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtMinEWL"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtMaxEWL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnLineInfoGroup = pdnLineInfoGroup.setStatus('current')
if mibBuilder.loadTexts: pdnLineInfoGroup.setDescription('A collection of objects providing information regarding spectrum management of interfaces.')
pdnEWLModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3, 1, 3)).setObjects(("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtConfEWL"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtMinEWL"), ("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtMaxEWL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnEWLModeGroup = pdnEWLModeGroup.setStatus('current')
if mibBuilder.loadTexts: pdnEWLModeGroup.setDescription(" A collection of configuration objects used to control spectrum management of DSL intfs when the measurement method is 'EWL'.")
pdnLoopLengthModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3, 1, 4)).setObjects(("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtConfLoopLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnLoopLengthModeGroup = pdnLoopLengthModeGroup.setStatus('current')
if mibBuilder.loadTexts: pdnLoopLengthModeGroup.setDescription(" A collection of configuration objects used to control spectrum management of DSL intfs when the measurement method is 'LoopLength' ")
pdnQuadModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3, 1, 5)).setObjects(("PDN-SPECTRUMMGMT-MIB", "newSpectrumMgmtConfQuadMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnQuadModeGroup = pdnQuadModeGroup.setStatus('current')
if mibBuilder.loadTexts: pdnQuadModeGroup.setDescription("A collection of object(s) providing configuration access and information specific to DSL interfaces whose loop/line length measurement method is based on the Quad configuration. i.e.the newSpectrumMgmtLoopMeasurementMethod object is 'quadMode'.")
pdnSpectrumMgmtDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 19, 3, 1, 7)).setObjects(("PDN-SPECTRUMMGMT-MIB", "spectrumMgmtCountryCode"), ("PDN-SPECTRUMMGMT-MIB", "spectrumMgmtEWL"), ("PDN-SPECTRUMMGMT-MIB", "spectrumMgmtLineLength"), ("PDN-SPECTRUMMGMT-MIB", "spectrumMgmtAllowedSpeedsMin1"), ("PDN-SPECTRUMMGMT-MIB", "spectrumMgmtAllowedSpeedsMax1"), ("PDN-SPECTRUMMGMT-MIB", "spectrumMgmtAllowedSpeedsMin2"), ("PDN-SPECTRUMMGMT-MIB", "spectrumMgmtAllowedSpeedsMax2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnSpectrumMgmtDeprecatedGroup = pdnSpectrumMgmtDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: pdnSpectrumMgmtDeprecatedGroup.setDescription(' Deprecated objects ')
mibBuilder.exportSymbols("PDN-SPECTRUMMGMT-MIB", newSpectrumMgmtXtucMin1TxRate=newSpectrumMgmtXtucMin1TxRate, pdnSpecMgmtGroups=pdnSpecMgmtGroups, pdnSpecMgmtConformance=pdnSpecMgmtConformance, newSpectrumMgmtXtucMin2TxRate=newSpectrumMgmtXtucMin2TxRate, pdnSpectrumMgmtDeprecatedGroup=pdnSpectrumMgmtDeprecatedGroup, newSpectrumMgmtXturMaxTxPower=newSpectrumMgmtXturMaxTxPower, pdnGeneralConfigGroup=pdnGeneralConfigGroup, spectrumMgmtAllowedSpeedsMax1=spectrumMgmtAllowedSpeedsMax1, newSpectrumMgmtXtucMax1TxRate=newSpectrumMgmtXtucMax1TxRate, spectrumMgmtEntry=spectrumMgmtEntry, newSpectrumMgmtLineInfoTable=newSpectrumMgmtLineInfoTable, spectrumMgmtLineLength=spectrumMgmtLineLength, pdnSpecMgmtObjects=pdnSpecMgmtObjects, pdnSpecMgmtCompliances=pdnSpecMgmtCompliances, pdnSpecMgmtCompliance=pdnSpecMgmtCompliance, newSpectrumMgmtEWLUnits=newSpectrumMgmtEWLUnits, newSpectrumMgmtLineInfoEntry=newSpectrumMgmtLineInfoEntry, newSpectrumMgmtLoopMeasurementMethod=newSpectrumMgmtLoopMeasurementMethod, newSpectrumMgmtMaxEWL=newSpectrumMgmtMaxEWL, spectrumMgmtAllowedSpeedsMax2=spectrumMgmtAllowedSpeedsMax2, newSpectrumMgmtConfQuadMode=newSpectrumMgmtConfQuadMode, spectrumMgmtAllowedSpeedsMin2=spectrumMgmtAllowedSpeedsMin2, pdnLineInfoGroup=pdnLineInfoGroup, newSpectrumMgmtXturMax1TxRate=newSpectrumMgmtXturMax1TxRate, newSpectrumMgmtMinEWL=newSpectrumMgmtMinEWL, newSpectrumMgmtXtucMax2TxRate=newSpectrumMgmtXtucMax2TxRate, spectrumMgmtCountryCode=spectrumMgmtCountryCode, pdnSpectrumMgmt=pdnSpectrumMgmt, newSpectrumMgmtGeneralConfigEntry=newSpectrumMgmtGeneralConfigEntry, spectrumMgmtAllowedSpeedsMin1=spectrumMgmtAllowedSpeedsMin1, newSpectrumMgmtXturMin1TxRate=newSpectrumMgmtXturMin1TxRate, spectrumMgmtTable=spectrumMgmtTable, newSpectrumMgmtMode=newSpectrumMgmtMode, pdnQuadModeGroup=pdnQuadModeGroup, spectrumMgmtEWL=spectrumMgmtEWL, PYSNMP_MODULE_ID=pdnSpectrumMgmt, newSpectrumMgmtXturMin2TxRate=newSpectrumMgmtXturMin2TxRate, newSpectrumMgmtXturMax2TxRate=newSpectrumMgmtXturMax2TxRate, newSpectrumMgmtSelection=newSpectrumMgmtSelection, newSpectrumMgmtConfEWL=newSpectrumMgmtConfEWL, newSpectrumMgmtGeneralConfigTable=newSpectrumMgmtGeneralConfigTable, pdnLoopLengthModeGroup=pdnLoopLengthModeGroup, newSpectrumMgmtConfTable=newSpectrumMgmtConfTable, newSpectrumMgmtConfEntry=newSpectrumMgmtConfEntry, pdnNewSpecMgmtObjects=pdnNewSpecMgmtObjects, newSpectrumMgmtConfLoopLength=newSpectrumMgmtConfLoopLength, newSpectrumMgmtXtucMaxTxPower=newSpectrumMgmtXtucMaxTxPower, pdnEWLModeGroup=pdnEWLModeGroup)
