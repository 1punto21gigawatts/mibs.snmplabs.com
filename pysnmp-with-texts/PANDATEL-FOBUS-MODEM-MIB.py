#
# PySNMP MIB module PANDATEL-FOBUS-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-FOBUS-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
device_id, mdmSpecifics = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "device-id", "mdmSpecifics")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, IpAddress, enterprises, Unsigned32, Counter32, ModuleIdentity, iso, MibIdentifier, Gauge32, Counter64, Integer32, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "IpAddress", "enterprises", "Unsigned32", "Counter32", "ModuleIdentity", "iso", "MibIdentifier", "Gauge32", "Counter64", "Integer32", "Bits", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fobus_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 501)).setLabel("fobus-modem")
fobus = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501))
fobusModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1), )
if mibBuilder.loadTexts: fobusModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: fobusModemTable.setDescription('This table contains information about all FOBUS units in all racks.')
fobusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1), ).setIndexNames((0, "PANDATEL-FOBUS-MODEM-MIB", "mdmRack"), (0, "PANDATEL-FOBUS-MODEM-MIB", "mdmModem"), (0, "PANDATEL-FOBUS-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: fobusTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fobusTableEntry.setDescription('The index of the table.')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRack.setDescription('The index of the rack where the unit is installed.')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModem.setDescription('This entry displays the slot number where the corresponding unit is installed in the rack.')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPosition.setDescription("This entry displays the location of the corresponding unit: 'local' or 'remote'. The unit which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemName.setDescription('The verbal name of this unit.')
mdmBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("active", 3), ("not-available", 4), ("available", 5), ("disable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmBackupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmBackupStatus.setDescription('The backup status of the unit. The available values depend on the generation of the unit.')
mdmActiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 90))).clone(namedValues=NamedValues(("line-port-2", 2), ("line-port-3", 3), ("disable", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmActiveLink.setStatus('mandatory')
if mibBuilder.loadTexts: mdmActiveLink.setDescription('This entry displays the line port used for data transmission.')
mdmOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("forced-port2", 3), ("forced-port3", 4), ("automatic", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmOperationMode.setDescription("This entry defines if data is transmitted via port 2 or port 3: 'forced-port2', 'forced-port3', 'automatic'.")
mdmAlarmConditionPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("link-signal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAlarmConditionPort1.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAlarmConditionPort1.setDescription("The alarm trigger mode at port 1: 'disable', i.e. no alarm is triggered, or 'link-signal', i.e. an alarm is triggered if the link is down.")
mdmAlarmConditionPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("no-link-signal", 3), ("laser-fail", 4), ("no-link-signal-or-laser-fail", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAlarmConditionPort2.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAlarmConditionPort2.setDescription("The alarm trigger mode at port 2: 'disable', i.e. no alarm is triggered, 'no-link-signal', i.e. an alarm is triggered if the link is down, 'laser-fail', i.e. an alarm is triggered if the laser diode is defective, or 'no-link-signal-or-laser-fail', i.e. the link is down or the laser diode is defective.")
mdmAlarmConditionPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("no-link-signal", 3), ("laser-fail", 4), ("no-link-signal-or-laser-fail", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAlarmConditionPort3.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAlarmConditionPort3.setDescription("The alarm trigger mode at port 3: 'disable', i.e. no alarm is triggered, 'no-link-signal', i.e. an alarm is triggered if the link is down, 'laser-fail', i.e. an alarm is triggered if the laser diode is defective, or 'no-link-signal-or-laser-fail', i.e. the link is down or the laser diode is defective.")
mdmTXLaserStatusPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTXLaserStatusPort2.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTXLaserStatusPort2.setDescription("This entry indicates if the laser diode at port 2 is transmitting data ('enable') or not ('disable').")
mdmTXLaserStatusPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 501, 1, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTXLaserStatusPort3.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTXLaserStatusPort3.setDescription("This entry indicates if the laser diode at port 3 is transmitting data ('enable') or not ('disable').")
mibBuilder.exportSymbols("PANDATEL-FOBUS-MODEM-MIB", fobus_modem=fobus_modem, mdmPosition=mdmPosition, mdmActiveLink=mdmActiveLink, mdmAlarmConditionPort2=mdmAlarmConditionPort2, mdmTXLaserStatusPort2=mdmTXLaserStatusPort2, mdmTXLaserStatusPort3=mdmTXLaserStatusPort3, fobus=fobus, mdmAlarmConditionPort3=mdmAlarmConditionPort3, mdmRack=mdmRack, mdmModemName=mdmModemName, mdmBackupStatus=mdmBackupStatus, fobusTableEntry=fobusTableEntry, mdmOperationMode=mdmOperationMode, fobusModemTable=fobusModemTable, mdmModem=mdmModem, mdmAlarmConditionPort1=mdmAlarmConditionPort1)
