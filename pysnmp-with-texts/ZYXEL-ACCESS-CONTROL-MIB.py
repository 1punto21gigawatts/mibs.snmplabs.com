#
# PySNMP MIB module ZYXEL-ACCESS-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-ACCESS-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, ModuleIdentity, ObjectIdentity, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Gauge32, Integer32, iso, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Gauge32", "Integer32", "iso", "Unsigned32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelAccessControl = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9))
if mibBuilder.loadTexts: zyxelAccessControl.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelAccessControl.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelAccessControl.setContactInfo('')
if mibBuilder.loadTexts: zyxelAccessControl.setDescription('The subtree for access control')
zyxelAccessControlSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1))
zyxelAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 1), )
if mibBuilder.loadTexts: zyxelAccessControlTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAccessControlTable.setDescription('The table contains access control configuration.')
zyxelAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 1, 1), ).setIndexNames((0, "ZYXEL-ACCESS-CONTROL-MIB", "zyAccessControlService"))
if mibBuilder.loadTexts: zyxelAccessControlEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAccessControlEntry.setDescription('An entry contains access control configuration.')
zyAccessControlService = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("telnet", 1), ("ssh", 2), ("ftp", 3), ("http", 4), ("https", 5), ("icmp", 6), ("snmp", 7), ("console", 8))))
if mibBuilder.loadTexts: zyAccessControlService.setStatus('current')
if mibBuilder.loadTexts: zyAccessControlService.setDescription('Services you may use to access the switch.')
zyAccessControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAccessControlState.setStatus('current')
if mibBuilder.loadTexts: zyAccessControlState.setDescription('Enable/Disable a specified service that you want to allow to access the switch.')
zyAccessControlServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAccessControlServicePort.setStatus('current')
if mibBuilder.loadTexts: zyAccessControlServicePort.setDescription('Port number for the specified service.')
zyAccessControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAccessControlTimeout.setStatus('current')
if mibBuilder.loadTexts: zyAccessControlTimeout.setDescription('The timeout period in minutes for aging out the session.')
zyxelSecuredClientTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 2), )
if mibBuilder.loadTexts: zyxelSecuredClientTable.setStatus('current')
if mibBuilder.loadTexts: zyxelSecuredClientTable.setDescription('The table contains secured client configuration.')
zyxelSecuredClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 2, 1), ).setIndexNames((0, "ZYXEL-ACCESS-CONTROL-MIB", "zySecuredClientIndex"))
if mibBuilder.loadTexts: zyxelSecuredClientEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelSecuredClientEntry.setDescription('An entry contains secured client configuration.')
zySecuredClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zySecuredClientIndex.setStatus('current')
if mibBuilder.loadTexts: zySecuredClientIndex.setDescription('Index number of secured client set.')
zySecuredClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySecuredClientState.setStatus('current')
if mibBuilder.loadTexts: zySecuredClientState.setDescription('Enable/Disable this secured client set.')
zySecuredClientStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySecuredClientStartIpAddress.setStatus('current')
if mibBuilder.loadTexts: zySecuredClientStartIpAddress.setDescription('Configure the start IP address of trusted computers from which you can manage this switch.')
zySecuredClientEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySecuredClientEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: zySecuredClientEndIpAddress.setDescription('Configure the end IP address of trusted computers from which you can manage this switch.')
zySecuredClientService = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 9, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("telnet", 0), ("ftp", 1), ("http", 2), ("icmp", 3), ("snmp", 4), ("ssh", 5), ("https", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySecuredClientService.setStatus('current')
if mibBuilder.loadTexts: zySecuredClientService.setDescription('Select services that may be used for managing the switch from the specified trusted computers.')
mibBuilder.exportSymbols("ZYXEL-ACCESS-CONTROL-MIB", zyxelAccessControlTable=zyxelAccessControlTable, zyAccessControlServicePort=zyAccessControlServicePort, zySecuredClientIndex=zySecuredClientIndex, zySecuredClientService=zySecuredClientService, zyxelAccessControl=zyxelAccessControl, zyxelAccessControlSetup=zyxelAccessControlSetup, zyAccessControlState=zyAccessControlState, zyAccessControlTimeout=zyAccessControlTimeout, zyxelSecuredClientEntry=zyxelSecuredClientEntry, zySecuredClientState=zySecuredClientState, zyxelAccessControlEntry=zyxelAccessControlEntry, zySecuredClientStartIpAddress=zySecuredClientStartIpAddress, zySecuredClientEndIpAddress=zySecuredClientEndIpAddress, zyxelSecuredClientTable=zyxelSecuredClientTable, zyAccessControlService=zyAccessControlService, PYSNMP_MODULE_ID=zyxelAccessControl)
