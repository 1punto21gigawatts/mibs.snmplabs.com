#
# PySNMP MIB module BIANCA-BRICK-PPPOE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-PPPOE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, ModuleIdentity, MibIdentifier, Integer32, Counter32, TimeTicks, NotificationType, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "ModuleIdentity", "MibIdentifier", "Integer32", "Counter32", "TimeTicks", "NotificationType", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Bits")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
pppoe = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 24))
pppoeCallTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 24, 1), )
if mibBuilder.loadTexts: pppoeCallTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallTable.setDescription('The pppoeCallTable displays all currently active PPPoE calls (incoming and outgoing). Only the system can add or remove entries to this table. Creating entries: Entries are added when an outgoing call is made or when an incoming call is connected. Deleting entries: Entries are removed once the respective call is disconnected.')
pppoeCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-PPPOE-MIB", "pppoeCallId"))
if mibBuilder.loadTexts: pppoeCallEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallEntry.setDescription('')
pppoeCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallId.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallId.setDescription('Direction of the PPPoE call, incoming(1) or outgoing(2).')
pppoeCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallDirection.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallDirection.setDescription('Direction of the PPPoE call, incoming(1) or outgoing(2).')
pppoeCallAge = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallAge.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallAge.setDescription('The age of the call. For outgoing calls, the time since the call began, or for incoming calls, the time since the call was received. The format is in hh:mm:ss.00.')
pppoeCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("wait-pado", 2), ("wait-padr", 3), ("wait-pads", 4), ("established", 5), ("terminated", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCallState.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallState.setDescription('The state of the PPPoE discovery stage according RFC 2516.')
pppoeCallRemotePhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallRemotePhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallRemotePhysAddress.setDescription("Peer's Ethernet address.")
pppoeCallLocalPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallLocalPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallLocalPhysAddress.setDescription('Local Ethernet Address.')
pppoeCallAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallAcName.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallAcName.setDescription("The PPPoE access concentrator's name.")
pppoeCallService = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallService.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallService.setDescription('The PPPoE service name, indicating the service the Host is requesting.')
pppoeCallReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallReceivedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallReceivedPackets.setDescription('Count of received valid GRE-encapsulated packets.')
pppoeCallReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallReceivedOctets.setDescription('Count of received valid Octets.')
pppoeCallReceivedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallReceivedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallReceivedErrors.setDescription('Count of received invalid GRE-encapsulated packets.')
pppoeCallTransmitPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallTransmitPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallTransmitPackets.setDescription('Count of transmitted GRE-encapsulated packets.')
pppoeCallTransmitOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallTransmitOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallTransmitOctets.setDescription('Count of transmitted Octets.')
pppoeCallTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallTransmitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallTransmitErrors.setDescription('Count of transmit errors.')
pppoeCallInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCallInfo.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCallInfo.setDescription('Additional information to identify the PPPoE call')
pppoeCreditsTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 24, 2), )
if mibBuilder.loadTexts: pppoeCreditsTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsTable.setDescription("The pppoeCreditsTable contains informations about current used resources and maximum allowed 'PPPoE-Service'-dependent resources. during a specified interval subsystem. Creating entries: Entries are added by the user. Deleting entries: Entries are removed by setting an entry's pppoeCreditsSurveillance object to 'delete'.")
pppoeCreditsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-PPPOE-MIB", "pppoeCreditsService"))
if mibBuilder.loadTexts: pppoeCreditsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsEntry.setDescription('')
pppoeCreditsService = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCreditsService.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsService.setDescription('The PPPoE service name, indicating the service the Host is requesting.')
pppoeCreditsSurveillance = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCreditsSurveillance.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsSurveillance.setDescription('Surveillance on or off.')
pppoeCreditsMeasuretime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCreditsMeasuretime.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsMeasuretime.setDescription('Time of one observation interval in seconds.')
pppoeCreditsMaxInCon = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCreditsMaxInCon.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsMaxInCon.setDescription('Maximum number of allowed incoming connections during the observation interval. -1 disables this limit.')
pppoeCreditsMaxOutCon = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCreditsMaxOutCon.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsMaxOutCon.setDescription('Maximum number of allowed outgoing connections during the observation interval. -1 disables this limit.')
pppoeCreditsMaxInDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCreditsMaxInDuration.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsMaxInDuration.setDescription('Maximum connect time for incoming connections in seconds during the observation interval. -1 disables this limit.')
pppoeCreditsMaxOutDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCreditsMaxOutDuration.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsMaxOutDuration.setDescription('Maximum connect time for outgoing connections in seconds during the observation interval. -1 disables this limit')
pppoeCreditsTimeleft = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeCreditsTimeleft.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsTimeleft.setDescription('Time in seconds left in current interval. Writing to Timeleft will restart the observation interval.')
pppoeCreditsCurrentInCon = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCreditsCurrentInCon.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsCurrentInCon.setDescription('Current number of incoming connections.')
pppoeCreditsCurrentOutCon = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCreditsCurrentOutCon.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsCurrentOutCon.setDescription('Current number of outgoing connections.')
pppoeCreditsTotalInCon = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCreditsTotalInCon.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsTotalInCon.setDescription('Total count of incoming connections during the observation interval.')
pppoeCreditsTotalOutCon = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCreditsTotalOutCon.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsTotalOutCon.setDescription('Total count of outgoing connections during the observation interval.')
pppoeCreditsTotalInDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCreditsTotalInDuration.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsTotalInDuration.setDescription('Total connect time of incoming connections during the observation interval.')
pppoeCreditsTotalOutDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCreditsTotalOutDuration.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsTotalOutDuration.setDescription('Total connect time of outgoing connections during the observation interval.')
pppoeCreditsCurrentAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 24, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeCreditsCurrentAccount.setStatus('mandatory')
if mibBuilder.loadTexts: pppoeCreditsCurrentAccount.setDescription("Total connect time of all outgoing connections during the observation interval calculated in percent of 'pppoeCreditsMaxOutDuration'.")
mibBuilder.exportSymbols("BIANCA-BRICK-PPPOE-MIB", pppoeCallService=pppoeCallService, pppoeCreditsTotalInCon=pppoeCreditsTotalInCon, pppoeCallState=pppoeCallState, pppoeCreditsMaxInDuration=pppoeCreditsMaxInDuration, pppoeCallTransmitPackets=pppoeCallTransmitPackets, pppoeCreditsService=pppoeCreditsService, pppoeCreditsTotalOutCon=pppoeCreditsTotalOutCon, pppoeCallAcName=pppoeCallAcName, pppoeCallLocalPhysAddress=pppoeCallLocalPhysAddress, pppoeCallInfo=pppoeCallInfo, pppoe=pppoe, pppoeCreditsTable=pppoeCreditsTable, bintec=bintec, pppoeCreditsCurrentOutCon=pppoeCreditsCurrentOutCon, pppoeCreditsCurrentInCon=pppoeCreditsCurrentInCon, enterprises=enterprises, pppoeCallReceivedOctets=pppoeCallReceivedOctets, pppoeCallAge=pppoeCallAge, pppoeCallEntry=pppoeCallEntry, internet=internet, bibo=bibo, pppoeCreditsEntry=pppoeCreditsEntry, pppoeCreditsMaxInCon=pppoeCreditsMaxInCon, pppoeCreditsTotalOutDuration=pppoeCreditsTotalOutDuration, pppoeCreditsCurrentAccount=pppoeCreditsCurrentAccount, pppoeCallId=pppoeCallId, pppoeCreditsSurveillance=pppoeCreditsSurveillance, pppoeCallTransmitErrors=pppoeCallTransmitErrors, pppoeCreditsTotalInDuration=pppoeCreditsTotalInDuration, pppoeCallDirection=pppoeCallDirection, org=org, pppoeCallTransmitOctets=pppoeCallTransmitOctets, pppoeCallReceivedErrors=pppoeCallReceivedErrors, pppoeCallRemotePhysAddress=pppoeCallRemotePhysAddress, pppoeCreditsMeasuretime=pppoeCreditsMeasuretime, pppoeCreditsTimeleft=pppoeCreditsTimeleft, pppoeCallReceivedPackets=pppoeCallReceivedPackets, dod=dod, private=private, pppoeCallTable=pppoeCallTable, pppoeCreditsMaxOutDuration=pppoeCreditsMaxOutDuration, pppoeCreditsMaxOutCon=pppoeCreditsMaxOutCon)
