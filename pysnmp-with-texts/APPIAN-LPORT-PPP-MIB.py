#
# PySNMP MIB module APPIAN-LPORT-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-LPORT-PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acLport, AcNodeId = mibBuilder.importSymbols("APPIAN-SMI-MIB", "acLport", "AcNodeId")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, MibIdentifier, NotificationType, Gauge32, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, iso, Counter32, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "MibIdentifier", "NotificationType", "Gauge32", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "iso", "Counter32", "ObjectIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
acPppLinks = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5))
if mibBuilder.loadTexts: acPppLinks.setLastUpdated('0002230000Z')
if mibBuilder.loadTexts: acPppLinks.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acPppLinks.setContactInfo('Gerry Pednault')
if mibBuilder.loadTexts: acPppLinks.setDescription('Appian Communications PPP/MLPPP Services MIB.')
class AcPppEndDiscriminator(TextualConvention, Integer32):
    description = 'The EndPoint descriminator class provided to the remote PPP peer. For further information, refer to RFC-1990 for details.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("null", 1), ("localAddress", 2), ("networkAddress", 3), ("macAddress", 4), ("magicNumber", 5), ("psndn", 6))

acPppLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1), )
if mibBuilder.loadTexts: acPppLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusTable.setDescription('A table containing PPP-link specific variables for this PPP implementation. This is an OSAP created Read Only record')
acPppLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1), ).setIndexNames((0, "APPIAN-LPORT-PPP-MIB", "acPppLinkStatusNodeId"), (0, "APPIAN-LPORT-PPP-MIB", "acPppLinkStatusTimeSlotIndex"))
if mibBuilder.loadTexts: acPppLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusEntry.setDescription('This record contains operational start up information about a particular PPP Link.')
acPppLinkStatusNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acPppLinkStatusNodeId.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acPppLinkStatusTimeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acPppLinkStatusTimeSlotIndex.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusTimeSlotIndex.setDescription('The value of acPppLinkStatusTimeSlotIndex is the same as acTimeSlotIndex in acTimeslotTable that this interface PPP link corresponds to.')
acPppLinkStatusLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusLocalMRU.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusLocalMRU.setDescription('The current value of the MRU for the local PPP Entity. This value is the MRU that the remote entity is using when sending packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusRemoteMRU.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusRemoteMRU.setDescription('The current value of the MRU for the remote PPP Entity. This value is the MRU that the local entity is using when sending packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusLocalToPeerACCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusLocalToPeerACCMap.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusLocalToPeerACCMap.setDescription('The current value of the ACC Map used for sending packets from the local PPP entity to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusPeerToLocalACCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusPeerToLocalACCMap.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusPeerToLocalACCMap.setDescription('The ACC Map used by the remote PPP entity when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusLocalToRemoteProtocolCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusLocalToRemoteProtocolCompression.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusLocalToRemoteProtocolCompression.setDescription('Indicates whether the local PPP entity will use Protocol Compression when transmitting packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusRemoteToLocalProtocolCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusRemoteToLocalProtocolCompression.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusRemoteToLocalProtocolCompression.setDescription('Indicates whether the remote PPP entity will use Protocol Compression when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusLocalToRemoteACCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusLocalToRemoteACCompression.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusLocalToRemoteACCompression.setDescription('Indicates whether the local PPP entity will use Address and Control Compression when transmitting packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusRemoteToLocalACCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusRemoteToLocalACCompression.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusRemoteToLocalACCompression.setDescription('Indicates whether the remote PPP entity will use Address and Control Compression when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusTransmitFcsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusTransmitFcsSize.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusTransmitFcsSize.setDescription('The size of the Frame Check Sequence (FCS) in bits that the local node will generate when sending packets to the remote node. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusReceiveFcsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusReceiveFcsSize.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusReceiveFcsSize.setDescription('The size of the Frame Check Sequence (FCS) in bits that the remote node will generate when sending packets to the local node. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusLocalMRRU.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusLocalMRRU.setDescription('The current value of the MRRU for the local PPP Entity. This value is the MRRU that the remote entity is using when sending packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusRemoteMRRU.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusRemoteMRRU.setDescription('The current value of the MRRU for the remote PPP link Entity. This value is the MRRU that the local entity is using when sending packets to the remote PPP link entity. The value of this object is meaningful only when the link has reached the open state.')
acPppLinkStatusLocalEPDClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 15), AcPppEndDiscriminator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusLocalEPDClass.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusLocalEPDClass.setDescription('The Endpoint Discriminator class provided to the remote PPP peer (See RFC-1990 for details).')
acPppLinkStatusLocalEPDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusLocalEPDLength.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusLocalEPDLength.setDescription('The length of the Local Endpoint Discriminator, in bytes.')
acPppLinkStatusLocalEPDArray = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 55))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusLocalEPDArray.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusLocalEPDArray.setDescription('An ASCII representation of the contents of the Local Endpoint Discriminator.')
acPppLinkStatusRemoteEPDClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 18), AcPppEndDiscriminator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusRemoteEPDClass.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusRemoteEPDClass.setDescription('The Endpoint Discriminator class provided to the local PPP peer (See RFC-1990 for details).')
acPppLinkStatusRemoteEPDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusRemoteEPDLength.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusRemoteEPDLength.setDescription('The length of the Remote Endpoint Discriminator, in bytes.')
acPppLinkStatusRemoteEPDArray = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 5, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 55))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPppLinkStatusRemoteEPDArray.setStatus('current')
if mibBuilder.loadTexts: acPppLinkStatusRemoteEPDArray.setDescription('An Ascii representation of the contents of the Remote Endpoint Discriminator.')
mibBuilder.exportSymbols("APPIAN-LPORT-PPP-MIB", acPppLinkStatusLocalEPDArray=acPppLinkStatusLocalEPDArray, acPppLinkStatusLocalEPDLength=acPppLinkStatusLocalEPDLength, PYSNMP_MODULE_ID=acPppLinks, acPppLinkStatusLocalEPDClass=acPppLinkStatusLocalEPDClass, acPppLinkStatusEntry=acPppLinkStatusEntry, acPppLinkStatusReceiveFcsSize=acPppLinkStatusReceiveFcsSize, acPppLinkStatusNodeId=acPppLinkStatusNodeId, AcPppEndDiscriminator=AcPppEndDiscriminator, acPppLinkStatusLocalToRemoteProtocolCompression=acPppLinkStatusLocalToRemoteProtocolCompression, acPppLinkStatusRemoteEPDArray=acPppLinkStatusRemoteEPDArray, acPppLinkStatusRemoteEPDClass=acPppLinkStatusRemoteEPDClass, acPppLinkStatusPeerToLocalACCMap=acPppLinkStatusPeerToLocalACCMap, acPppLinkStatusRemoteEPDLength=acPppLinkStatusRemoteEPDLength, acPppLinkStatusLocalMRRU=acPppLinkStatusLocalMRRU, acPppLinkStatusLocalMRU=acPppLinkStatusLocalMRU, acPppLinkStatusLocalToRemoteACCompression=acPppLinkStatusLocalToRemoteACCompression, acPppLinkStatusLocalToPeerACCMap=acPppLinkStatusLocalToPeerACCMap, acPppLinkStatusRemoteToLocalProtocolCompression=acPppLinkStatusRemoteToLocalProtocolCompression, acPppLinkStatusRemoteMRU=acPppLinkStatusRemoteMRU, acPppLinkStatusTimeSlotIndex=acPppLinkStatusTimeSlotIndex, acPppLinkStatusRemoteToLocalACCompression=acPppLinkStatusRemoteToLocalACCompression, acPppLinks=acPppLinks, acPppLinkStatusTransmitFcsSize=acPppLinkStatusTransmitFcsSize, acPppLinkStatusRemoteMRRU=acPppLinkStatusRemoteMRRU, acPppLinkStatusTable=acPppLinkStatusTable)
