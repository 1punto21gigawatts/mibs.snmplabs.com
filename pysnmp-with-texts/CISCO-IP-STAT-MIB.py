#
# PySNMP MIB module CISCO-IP-STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IP-STAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, iso, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, Bits, Unsigned32, Counter32, NotificationType, ModuleIdentity, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "Bits", "Unsigned32", "Counter32", "NotificationType", "ModuleIdentity", "Integer32", "TimeTicks")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
ciscoIpStatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 84))
ciscoIpStatMIB.setRevisions(('2001-12-20 23:00', '1997-07-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIpStatMIB.setRevisionsDescriptions(('Added the following table and objects for 64 bit packet/byte counters: cipPrecedenceXTable -> cipPrecedenceHCSwitchedPkts, cipPrecedenceHCSwitchedBytes cipMacXTable -> cipMacHCSwitchedPkts, cipMacHCSwitchedBytes ', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIpStatMIB.setLastUpdated('200112202300Z')
if mibBuilder.loadTexts: ciscoIpStatMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIpStatMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: ipqos-dev@cisco.com')
if mibBuilder.loadTexts: ciscoIpStatMIB.setDescription(' Cisco IP Statistics MIB - Overview This MIB incorporates objects to provide support for the Cisco IP statistics as implemented in command interfaces ip accounting [ mac-address {input | ouput } | precedence { input | ouput } ] The above CLI provides additional IP statistics categorized by precedence of IP packets, as well as the MAC address associated with IP packets. This is a supplement to those defined in OLD-CISCO-IP-MIB.my. ')
ciscoIpStatMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 84, 1))
class PacketSource(TextualConvention, Integer32):
    description = 'The source of the packet the statistics is for. input statistics of the input packets. output statistics of the output packets. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("input", 1), ("output", 2))

cipPrecedence = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1))
cipMacIf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2))
cipPrecedenceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1), )
if mibBuilder.loadTexts: cipPrecedenceTable.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceTable.setDescription('A table of entries sorted by the precedence of IP packets. The table is created and deleted via ip accounting command line interface.')
cipPrecedenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-STAT-MIB", "cipPrecedenceDirection"), (0, "CISCO-IP-STAT-MIB", "cipPrecedenceIpPrecedence"))
if mibBuilder.loadTexts: cipPrecedenceEntry.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceEntry.setDescription('An entry in the cipPrecedenceTable is created for each IP precedence value. There are 8 precedences total.')
cipPrecedenceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1, 1), PacketSource())
if mibBuilder.loadTexts: cipPrecedenceDirection.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceDirection.setDescription('The data source for the object.')
cipPrecedenceIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: cipPrecedenceIpPrecedence.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceIpPrecedence.setDescription('The ip precedence value this object is collected upon.')
cipPrecedenceSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipPrecedenceSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceSwitchedPkts.setDescription('Traffic, in packets, at the cipPrecedenceIpPrecedence precedence.')
cipPrecedenceSwitchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipPrecedenceSwitchedBytes.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceSwitchedBytes.setDescription('Traffic, in bytes, at the cipPrecedenceIpPrecedence precedence.')
cipMacTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1), )
if mibBuilder.loadTexts: cipMacTable.setStatus('current')
if mibBuilder.loadTexts: cipMacTable.setDescription('A table is created and deleted via ip accounting command line interface.')
cipMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-STAT-MIB", "cipMacDirection"), (0, "CISCO-IP-STAT-MIB", "cipMacAddress"))
if mibBuilder.loadTexts: cipMacEntry.setStatus('current')
if mibBuilder.loadTexts: cipMacEntry.setDescription('An entry in the cipMacTable is created for each unique MAC address which receives/sends IP packets. Entries are deleted via the command line interface.')
cipMacDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1, 1), PacketSource())
if mibBuilder.loadTexts: cipMacDirection.setStatus('current')
if mibBuilder.loadTexts: cipMacDirection.setDescription('The data source for the object.')
cipMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: cipMacAddress.setStatus('current')
if mibBuilder.loadTexts: cipMacAddress.setDescription('The MAC address.')
cipMacSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipMacSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: cipMacSwitchedPkts.setDescription('The counter in packets with respect to cipMacAddress.')
cipMacSwitchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipMacSwitchedBytes.setStatus('current')
if mibBuilder.loadTexts: cipMacSwitchedBytes.setDescription('The counter in bytes with respect to cipMacAddress.')
cipMacFreeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 2), )
if mibBuilder.loadTexts: cipMacFreeTable.setStatus('current')
if mibBuilder.loadTexts: cipMacFreeTable.setDescription('A table of free space available to store new MAC address information.')
cipMacFreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-STAT-MIB", "cipMacFreeDirection"))
if mibBuilder.loadTexts: cipMacFreeEntry.setStatus('current')
if mibBuilder.loadTexts: cipMacFreeEntry.setDescription('The MAC free space table entry. Entry is created when Entries are created and deleted via ip accounting command line interface.')
cipMacFreeDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 2, 1, 1), PacketSource())
if mibBuilder.loadTexts: cipMacFreeDirection.setStatus('current')
if mibBuilder.loadTexts: cipMacFreeDirection.setDescription('The data source for the object.')
cipMacFreeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipMacFreeCount.setStatus('current')
if mibBuilder.loadTexts: cipMacFreeCount.setDescription('Number of items in the MAC free space.')
cipPrecedenceXTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 2), )
if mibBuilder.loadTexts: cipPrecedenceXTable.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceXTable.setDescription('This table contains additional objects for the cipPrecedenceTable.')
cipPrecedenceXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 2, 1), )
cipPrecedenceEntry.registerAugmentions(("CISCO-IP-STAT-MIB", "cipPrecedenceXEntry"))
cipPrecedenceXEntry.setIndexNames(*cipPrecedenceEntry.getIndexNames())
if mibBuilder.loadTexts: cipPrecedenceXEntry.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceXEntry.setDescription('An entry containing additional management information applicable to a particular precedence value.')
cipPrecedenceHCSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 2, 1, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipPrecedenceHCSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceHCSwitchedPkts.setDescription('Traffic, in packets, at the cipPrecedenceIpPrecedence precedence. This object is the 64-bit version of cipPrecedenceSwitchedPkts.')
cipPrecedenceHCSwitchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 2, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipPrecedenceHCSwitchedBytes.setStatus('current')
if mibBuilder.loadTexts: cipPrecedenceHCSwitchedBytes.setDescription('Traffic, in bytes, at the cipPrecedenceIpPrecedence precedence. This object is the 64-bit version of cipPrecedenceSwitchedBytes.')
cipMacXTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 3), )
if mibBuilder.loadTexts: cipMacXTable.setStatus('current')
if mibBuilder.loadTexts: cipMacXTable.setDescription('This table contains additional objects for the cipMacTable.')
cipMacXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 3, 1), )
cipMacEntry.registerAugmentions(("CISCO-IP-STAT-MIB", "cipMacXEntry"))
cipMacXEntry.setIndexNames(*cipMacEntry.getIndexNames())
if mibBuilder.loadTexts: cipMacXEntry.setStatus('current')
if mibBuilder.loadTexts: cipMacXEntry.setDescription('An entry containing additional management information applicable to a particular MAC address.')
cipMacHCSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 3, 1, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipMacHCSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: cipMacHCSwitchedPkts.setDescription('The high capacity counter in packets with respect to cipMacAddress. This object is the 64-bit version of cipMacSwitchedPkts.')
cipMacHCSwitchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 3, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipMacHCSwitchedBytes.setStatus('current')
if mibBuilder.loadTexts: cipMacHCSwitchedBytes.setDescription('The counter in bytes with respect to cipMacAddress. This object is the 64-bit version of cipMacSwitchedBytes.')
ciscoIpStatMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 84, 3))
ciscoIpStatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 84, 3, 1))
ciscoIpStatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 84, 3, 2))
ciscoIpStatMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 84, 3, 1, 1)).setObjects(("CISCO-IP-STAT-MIB", "ciscoIpStatMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpStatMIBCompliance = ciscoIpStatMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIpStatMIBCompliance.setDescription('The compliance statement for entities which implement the IP Statistics on a Cisco router.')
ciscoIpStatMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 84, 3, 1, 2)).setObjects(("CISCO-IP-STAT-MIB", "ciscoIpStatMIBGroup"), ("CISCO-IP-STAT-MIB", "ciscoIpStatHCMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpStatMIBComplianceRev2 = ciscoIpStatMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoIpStatMIBComplianceRev2.setDescription('The compliance statement for entities which implement the IP Statistics on a Cisco router. This deprecates ciscoIpStatMIBCompliance to provide 64-bit versions of packet and byte counter objects.')
ciscoIpStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 84, 3, 2, 1)).setObjects(("CISCO-IP-STAT-MIB", "cipPrecedenceSwitchedPkts"), ("CISCO-IP-STAT-MIB", "cipPrecedenceSwitchedBytes"), ("CISCO-IP-STAT-MIB", "cipMacSwitchedPkts"), ("CISCO-IP-STAT-MIB", "cipMacSwitchedBytes"), ("CISCO-IP-STAT-MIB", "cipMacFreeCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpStatMIBGroup = ciscoIpStatMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpStatMIBGroup.setDescription('A collection of objects providing IP Statistics monitoring. For interfaces that operate at speeds greater than 20,000,000 bits/second, it is recommended that the HC counters in the optional compliance section be supported and used.')
ciscoIpStatHCMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 84, 3, 2, 2)).setObjects(("CISCO-IP-STAT-MIB", "cipPrecedenceHCSwitchedPkts"), ("CISCO-IP-STAT-MIB", "cipPrecedenceHCSwitchedBytes"), ("CISCO-IP-STAT-MIB", "cipMacHCSwitchedPkts"), ("CISCO-IP-STAT-MIB", "cipMacHCSwitchedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpStatHCMIBGroup = ciscoIpStatHCMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpStatHCMIBGroup.setDescription('A collection of objects providing IP Statistics monitoring. This is recommended for high speed (high speed interfaces transmit and receive at speeds over 20,000,000 bits/second) network interfaces.')
mibBuilder.exportSymbols("CISCO-IP-STAT-MIB", ciscoIpStatMIBGroup=ciscoIpStatMIBGroup, cipMacFreeTable=cipMacFreeTable, cipMacXTable=cipMacXTable, cipMacXEntry=cipMacXEntry, cipMacHCSwitchedBytes=cipMacHCSwitchedBytes, ciscoIpStatMIBObjects=ciscoIpStatMIBObjects, cipPrecedenceSwitchedBytes=cipPrecedenceSwitchedBytes, cipMacFreeEntry=cipMacFreeEntry, ciscoIpStatHCMIBGroup=ciscoIpStatHCMIBGroup, cipPrecedence=cipPrecedence, cipMacTable=cipMacTable, cipMacSwitchedPkts=cipMacSwitchedPkts, cipMacFreeDirection=cipMacFreeDirection, ciscoIpStatMIBCompliances=ciscoIpStatMIBCompliances, cipMacAddress=cipMacAddress, PYSNMP_MODULE_ID=ciscoIpStatMIB, cipMacIf=cipMacIf, ciscoIpStatMIBComplianceRev2=ciscoIpStatMIBComplianceRev2, ciscoIpStatMIBGroups=ciscoIpStatMIBGroups, cipMacDirection=cipMacDirection, cipPrecedenceXEntry=cipPrecedenceXEntry, cipMacFreeCount=cipMacFreeCount, PacketSource=PacketSource, cipMacHCSwitchedPkts=cipMacHCSwitchedPkts, cipMacEntry=cipMacEntry, cipPrecedenceSwitchedPkts=cipPrecedenceSwitchedPkts, cipPrecedenceDirection=cipPrecedenceDirection, ciscoIpStatMIBConformance=ciscoIpStatMIBConformance, ciscoIpStatMIB=ciscoIpStatMIB, cipPrecedenceEntry=cipPrecedenceEntry, cipPrecedenceHCSwitchedPkts=cipPrecedenceHCSwitchedPkts, cipPrecedenceXTable=cipPrecedenceXTable, cipPrecedenceTable=cipPrecedenceTable, ciscoIpStatMIBCompliance=ciscoIpStatMIBCompliance, cipPrecedenceHCSwitchedBytes=cipPrecedenceHCSwitchedBytes, cipMacSwitchedBytes=cipMacSwitchedBytes, cipPrecedenceIpPrecedence=cipPrecedenceIpPrecedence)
