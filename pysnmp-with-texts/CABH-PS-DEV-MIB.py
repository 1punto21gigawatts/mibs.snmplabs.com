#
# PySNMP MIB module CABH-PS-DEV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CABH-PS-DEV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
cabhCdpLanTransThreshold, cabhCdpWanDataAddrClientId, cabhCdpServerDhcpAddress, cabhCdpLanTransCurCount = mibBuilder.importSymbols("CABH-CDP-MIB", "cabhCdpLanTransThreshold", "cabhCdpWanDataAddrClientId", "cabhCdpServerDhcpAddress", "cabhCdpLanTransCurCount")
cabhQos2PolicyAdmissionControl, cabhQos2PolicyHolderEnabled, cabhQos2NumActivePolicyHolder = mibBuilder.importSymbols("CABH-QOS2-MIB", "cabhQos2PolicyAdmissionControl", "cabhQos2PolicyHolderEnabled", "cabhQos2NumActivePolicyHolder")
clabProjCableHome, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjCableHome")
docsDevSwCurrentVers, docsDevEvLevel, docsDevEvId, docsDevSwServer, docsDevEvText, docsDevSwFilename = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevSwCurrentVers", "docsDevEvLevel", "docsDevEvId", "docsDevSwServer", "docsDevEvText", "docsDevSwFilename")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, TimeTicks, Gauge32, Counter32, ModuleIdentity, ObjectIdentity, NotificationType, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "TimeTicks", "Gauge32", "Counter32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Counter64", "Bits")
PhysAddress, TruthValue, DisplayString, TimeStamp, TextualConvention, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TruthValue", "DisplayString", "TimeStamp", "TextualConvention", "DateAndTime", "RowStatus")
cabhPsDevMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1))
cabhPsDevMib.setRevisions(('2005-04-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cabhPsDevMib.setRevisionsDescriptions(('Initial revision, published as part of CableHome Specification.',))
if mibBuilder.loadTexts: cabhPsDevMib.setLastUpdated('200504080000Z')
if mibBuilder.loadTexts: cabhPsDevMib.setOrganization('CableLabs Broadband Access Department')
if mibBuilder.loadTexts: cabhPsDevMib.setContactInfo('Kevin Luehrs Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, Colorado 80027 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: k.luehrs@cablelabs.com; mibs@cablelabs.com')
if mibBuilder.loadTexts: cabhPsDevMib.setDescription('This MIB module supplies the basic management objects for the Portal Services logical element of a CableHome compliant Residential Gateway device. The PS device parameters describe general PS Device attributes and behavior characteristics. Most the PS Device MIB is needed for configuration download.')
cabhPsDevMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1))
cabhPsDevBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1))
cabhPsDevProv = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2))
cabhPsDevAttrib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3))
cabhPsDevPsAttrib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 1))
cabhPsDevBpAttrib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2))
cabhPsDevStats = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4))
cabhPsDevAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 5))
cabhPsDevMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6))
cabhPsDevUI = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 1))
cabhPsDev802dot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2))
cabhPsDevUpnp = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3))
cabhPsDevUpnpBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 1))
cabhPsDevUpnpCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2))
cabhPsDevDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevDateTime.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevDateTime.setDescription('The date and time, with optional timezone information.')
cabhPsDevResetNow = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevResetNow.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevResetNow.setDescription('Setting this object to true(1) causes the stand-alone or embedded PS device to reboot. Device code initializes as if starting from a power-on reset. The CMP ensures that MIB object values persist as specified in Appendix I of the CableHome specification. Reading this object always returns false(2).')
cabhPsDevSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevSerialNumber.setDescription("The manufacturer's serial number for this PS. This parameter is manufacturer provided and is stored in non-volatile memory.")
cabhPsDevHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevHardwareVersion.setDescription("The manufacturer's hardware version for this PS. This parameter is manufacturer provided and is stored in non-volatile memory.")
cabhPsDevWanManMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 5), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevWanManMacAddress.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevWanManMacAddress.setDescription('The PS WAN-Man MAC address. This is the PS hardware address to be used by the CDC to uniquely identify the PS to the cable data network DHCP server for the acquisition of an IP address to be used for management messaging between the cable network NMS and the CMP.')
cabhPsDevWanDataMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 6), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevWanDataMacAddress.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevWanDataMacAddress.setDescription('The PS WAN-Data MAC address. The PS could have multiple WAN-Data Interfaces, which share the same hardware address. The client identifiers will be unique so that each may be assigned a different, unique IP address.')
cabhPsDevTypeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevTypeIdentifier.setReference('CableHome Specification, CDC Function System Description section.')
if mibBuilder.loadTexts: cabhPsDevTypeIdentifier.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevTypeIdentifier.setDescription('This is a copy of the device type identifier used in the DHCP option 60 exchanged between the PS and the DHCP server.')
cabhPsDevSetToFactory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevSetToFactory.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevSetToFactory.setDescription('Setting this object to true(1) sets all PsDev MIB objects to the factory default values. Reading this object always returns false(2).')
cabhPsDevWanManClientId = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevWanManClientId.setStatus('deprecated')
if mibBuilder.loadTexts: cabhPsDevWanManClientId.setDescription('This is the client ID used for WAN-MAN DHCP requests. The default value is the 6 byte MAC address.')
cabhPsDevTodSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevTodSyncStatus.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevTodSyncStatus.setDescription('This object indicates whether the PS was able to successfully synchronize with the Time of Day (ToD) Server in the cable network. The PS sets this object to true(1) if the PS successfully synchronizes its time with the ToD server. The PS sets this object to false(2) if the PS does not successfully synchronize with the ToD server.')
cabhPsDevProvMode = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dhcpmode", 1), ("snmpmode", 2), ("dormantCHmode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevProvMode.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvMode.setDescription('This object indicates the provisioning mode in which the PS is operating. If the PS is operating in DHCP Provisioning Mode as described in the CableHome specification, the PS sets this object to dhcpmode(1). If the PS is operating in SNMP Provisioning Mode, the PS sets this object to snmpmode(2). If the PS is not configured to operate in either dhcpmode or snmpmode it will fall back to Dormant CableHome Mode and set the value of cabhPsDevProvMode to dormantCHmode(3).')
cabhPsDevLastSetToFactory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevLastSetToFactory.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLastSetToFactory.setDescription('The value of sysUpTime when cabhPsDevSetToFactory was last set to true. Zero if never reset.')
cabhPsDevTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 1, 13), Bits().clone(namedValues=NamedValues(("cabhPsDevInitTLVUnknownTrap", 0), ("cabhPsDevInitTrap", 1), ("cabhPsDevInitRetryTrap", 2), ("cabhPsDevDHCPFailTrap", 3), ("cabhPsDevSwUpgradeInitTrap", 4), ("cabhPsDevSwUpgradeFailTrap", 5), ("cabhPsDevSwUpgradeSuccessTrap", 6), ("cabhPsDevSwUpgradeCVCFailTrap", 7), ("cabhPsDevTODFailTrap", 8), ("cabhPsDevCdpWanDataIpTrap", 9), ("cabhPsDevCdpThresholdTrap", 10), ("cabhPsDevCspTrap", 11), ("cabhPsDevCapTrap", 12), ("cabhPsDevCtpTrap", 13), ("cabhPsDevProvEnrollTrap", 14), ("cabhPsDevCdpLanIpPoolTrap", 15), ("cabhPsDevUpnpMultiplePHTrap", 16))).clone(hexValue="0000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevTrapControl.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevTrapControl.setDescription('The object is used to enable PS notifications. From left to right, the set bit indicates the corresponding PS notification is enabled. For example, if the first bit is set, then cabhPsDevInitTLVUnknownTrap is enabled. If the bit is zero, the trap is disabled.')
cabhPsDevProvisioningTimer = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(5)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevProvisioningTimer.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvisioningTimer.setDescription('This object enables the user to set the duration of the provisioning timeout timer. The value is in minutes. Setting the timer to 0 disables it. The default value for the timer is 5.')
cabhPsDevProvConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevProvConfigFile.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvConfigFile.setDescription('The URL of the TFTP host for downloading provisioning and configuration parameters to this device. Returns NULL if the server address is unknown.')
cabhPsDevProvConfigHash = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevProvConfigHash.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvConfigHash.setDescription('Hash of the contents of the PS config file, which is calculated by the NMS and sent to the PS. For the SHA-1 authentication algorithm the hash length is 160 bits. This hash value is encoded in binary format.')
cabhPsDevProvConfigFileSize = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 4), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevProvConfigFileSize.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvConfigFileSize.setDescription('Size of the configuration file.')
cabhPsDevProvConfigFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("busy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevProvConfigFileStatus.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvConfigFileStatus.setDescription('This object indicates the current status of the configuration file download process. It is provided to indicate to the management entity that the PS will reject PS Configuration File triggers (set request to cabhPsDevProvConfigFile) when busy.')
cabhPsDevProvConfigTLVProcessed = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevProvConfigTLVProcessed.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvConfigTLVProcessed.setDescription('Number of TLVs processed in config file.')
cabhPsDevProvConfigTLVRejected = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevProvConfigTLVRejected.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvConfigTLVRejected.setDescription('Number of TLVs rejected in config file.')
cabhPsDevProvSolicitedKeyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 600)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevProvSolicitedKeyTimeout.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvSolicitedKeyTimeout.setDescription('This timeout applies only when the Provisioning Server initiated key management (with a Wake Up message) for SNMPv3. It is the period during which the PS will save a number (inside the sequence number field) from the sent out AP Request and wait for the matching AP Reply from the Provisioning Server.')
cabhPsDevProvState = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("inProgress", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevProvState.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvState.setDescription('This object indicates the completion state of the initialization process. Pass or Fail states occur after completion of the initialization flow. InProgress occurs from PS initialization start to PS initialization end.')
cabhPsDevProvAuthState = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accepted", 1), ("rejected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevProvAuthState.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvAuthState.setDescription('This object indicates the authentication state of the configuration file.')
cabhPsDevProvCorrelationId = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevProvCorrelationId.setStatus('deprecated')
if mibBuilder.loadTexts: cabhPsDevProvCorrelationId.setDescription('Random value generated by the PS for use in registration authorization. It is for use only in the PS initialization messages and for PS configuration file download. This value appears in both cabhPsDevProvisioningStatus and cabhPsDevProvisioningEnrollmentReport informs to verify the instance of loading the configuration file.')
cabhPsDevTimeServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevTimeServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevTimeServerAddrType.setDescription('The IP address type of the Time server (RFC-868). IP version 4 is typically used.')
cabhPsDevTimeServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 2, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevTimeServerAddr.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevTimeServerAddr.setDescription('The IP address of the Time server (RFC-868). Returns 0.0.0.0 if the time server IP address is unknown.')
cabhPsDevPsDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('CableHome Residential Gateway')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevPsDeviceType.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevPsDeviceType.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevPsDeviceType.setDescription('The type of device, as defined in the CableHome specifications (Residential Gateway Device or CableHome Host Device), that implements this OID.')
cabhPsDevPsManufacturerUrl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevPsManufacturerUrl.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description')
if mibBuilder.loadTexts: cabhPsDevPsManufacturerUrl.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevPsManufacturerUrl.setDescription("Universal Resource Locator to the Residential Gateway device manufacturer's web site.")
cabhPsDevPsModelUrl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevPsModelUrl.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevPsModelUrl.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevPsModelUrl.setDescription('Universal Resource Locator to the web site describing this CableHome compliant residential gateway device.')
cabhPsDevPsModelUpc = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevPsModelUpc.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description. See also: Uniform Code Council www.uc-council.org')
if mibBuilder.loadTexts: cabhPsDevPsModelUpc.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevPsModelUpc.setDescription('Universal Product Code of the CableHome compliant residential gateway device.')
cabhPsDevBpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: cabhPsDevBpProfileTable.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpProfileTable.setDescription('This table contains the information for the CableHome Host Device Profiles. Attributes of a device make up a Device Profile.')
cabhPsDevBpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "CABH-PS-DEV-MIB", "cabhPsDevBpIndex"))
if mibBuilder.loadTexts: cabhPsDevBpProfileEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpProfileEntry.setDescription('The table that describes the CableHome Host Device Profile.')
cabhPsDevBpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cabhPsDevBpIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpIndex.setDescription('Integer index into the CableHome Host Device Profile Table.')
cabhPsDevBpDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('CableHome Host')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpDeviceType.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpDeviceType.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpDeviceType.setDescription('The type of device, as defined by the CableHome specifications (CableHome Residential Gateway or CableHome Host Device), that passed the Device Profile whose information is made available through this table row.')
cabhPsDevBpManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpManufacturer.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpManufacturer.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpManufacturer.setDescription("The name of the CableHome Host Device's manufacturer.")
cabhPsDevBpManufacturerUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpManufacturerUrl.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpManufacturerUrl.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpManufacturerUrl.setDescription("Universal Resource Locator to the CableHome Host device manufacturer's web site.")
cabhPsDevBpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpSerialNumber.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpSerialNumber.setDescription('The serial number assigned by the manufacturer for this CableHome Host Device.')
cabhPsDevBpHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpHardwareVersion.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpHardwareVersion.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpHardwareVersion.setDescription('The hardware version number assigned by the manufacturer for this CableHome Host Device.')
cabhPsDevBpHardwareOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpHardwareOptions.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpHardwareOptions.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpHardwareOptions.setDescription('The hardware options implemented on this CableHome Host Device.')
cabhPsDevBpModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpModelName.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpModelName.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpModelName.setDescription('The model name assigned by the manufacturer for this CableHome Host Device.')
cabhPsDevBpModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpModelNumber.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpModelNumber.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpModelNumber.setDescription('The model number assigned by the manufacturer for this CableHome Host Device.')
cabhPsDevBpModelUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpModelUrl.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpModelUrl.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpModelUrl.setDescription('The Universal Resource Locator to the web site describing this CableHome Host Device model.')
cabhPsDevBpModelUpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpModelUpc.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpModelUpc.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpModelUpc.setDescription('Universal Product Code of the CableHome Host Device.')
cabhPsDevBpModelSoftwareOs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpModelSoftwareOs.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpModelSoftwareOs.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpModelSoftwareOs.setDescription('Software operating system implemented on the CableHome Host Device.')
cabhPsDevBpModelSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpModelSoftwareVersion.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpModelSoftwareVersion.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpModelSoftwareVersion.setDescription('Version of the operating system implemented on the CableHome Host Device.')
cabhPsDevBpLanInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 14), IANAifType().clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpLanInterfaceType.setReference('http://www.iana.org/assignments/ianaiftype-mib. See also: CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpLanInterfaceType.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpLanInterfaceType.setDescription('The ifType for the LAN Interface implemented on the CableHome Host Device.')
cabhPsDevBpNumberInterfacePriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpNumberInterfacePriorities.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpNumberInterfacePriorities.setDescription('Number of QoS priorities supported by the LAN technology (Data Link Layer) implemented in the CableHome Host Device.')
cabhPsDevBpPhysicalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpPhysicalLocation.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpPhysicalLocation.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpPhysicalLocation.setDescription('Physical location of the CableHome Host Device.')
cabhPsDevBpPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 3, 2, 1, 1, 17), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevBpPhysicalAddress.setReference('CableHome 1.1 Specification, 6.5.3.1.3 Device Profile Description.')
if mibBuilder.loadTexts: cabhPsDevBpPhysicalAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevBpPhysicalAddress.setDescription("The CableHome Host Device's hardware address.")
cabhPsDevLanIpTrafficCountersReset = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearCounters", 1), ("clearTable", 2))).clone('clearCounters')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficCountersReset.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficCountersReset.setDescription('Setting this object to clearCounters(1) resets all the traffic statistic counter entries to zero in the cabhPsDevLanIpTrafficTable. Setting this object to clearTable(2) removes all entries in the cabhPsDevLanIpTrafficTable. Reading this object always returns clearCounters(1).')
cabhPsDevLanIpTrafficCountersLastReset = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficCountersLastReset.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficCountersLastReset.setDescription('The value of sysUpTime when cabhPsDevLanIpTrafficCountersReset was last written to. Zero if never written to.')
cabhPsDevLanIpTrafficEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficEnabled.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficEnabled.setDescription('Setting this object to true(1) turns on the IP traffic counters. Setting this object false(2) turns off the IP traffic counters.')
cabhPsDevLanIpTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 4), )
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficTable.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficTable.setDescription('This table contains IP-layer Traffic Statistics for all LAN IP Devices connected to the PS.')
cabhPsDevLanIpTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 4, 1), ).setIndexNames((0, "CABH-PS-DEV-MIB", "cabhPsDevLanIpTrafficIndex"))
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficEntry.setDescription('List of Traffic Statistics for LAN IP Devices.')
cabhPsDevLanIpTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficIndex.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficIndex.setDescription('The Index into the LAN IP Traffic Statistics Table.')
cabhPsDevLanIpTrafficInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 4, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficInetAddressType.setDescription('The type of IP address assigned to the LAN IP device to which the statistics in this table row apply. IP version 4 is typically used.')
cabhPsDevLanIpTrafficInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficInetAddress.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficInetAddress.setDescription('The IP address of the LAN IP device to which the statistics in this table row apply. An IPv4 IP address is typically used.')
cabhPsDevLanIpTrafficInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 4, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficInOctets.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficInOctets.setDescription('The total number of octets the PS forwarded from the WAN interfaces to the LAN IP device associated with the value of cabhPsDevLanIpTrafficInetAddress. This counter object does not include LAN-to-LAN traffic.')
cabhPsDevLanIpTrafficOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 4, 4, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficOutOctets.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevLanIpTrafficOutOctets.setDescription('The total number of octets the PS forwarded from the LAN IP device associated with the value of cabhPsDevLanIpTrafficInetAddress, to the WAN interfaces. This counter object does not include LAN-to-LAN traffic.')
cabhPsDevAccessControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 5, 1), Bits().clone(namedValues=NamedValues(("hpna", 0), ("ieee80211", 1), ("ieee8023", 2), ("homeplug", 3), ("usb", 4), ("ieee1394", 5), ("scsi", 6), ("other", 7))).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevAccessControlEnable.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevAccessControlEnable.setDescription("This object specifies the interface type(s) for which the PSDev Access Control Table access rules are enabled. If a bit field is set to 1, the PS MUST only forward traffic received through that interface type if the source physical address is an entry in the cabhPsDevAccessControlTable. If a bit field is set to 1, the PS MUST only forward traffic destined to a device on that interface type if the destination physical address is an entry in the cabhPsDevAccessControlTable. If the bit field for an interface type is not set, i.e., if it is equal to 0, the PS MUST NOT apply forwarding restrictions for that interface type based on the Access Control Table. The PS MUST implement cabhPsDevAccessControlEnable for bit 1 (wireless LAN) and for bit 3 (HomePlug). If the PS does not implement cabhPsDevAccessControlEnable for any of the other defined bits, the PS MUST return inconsistent value error, and not allow the bit to be set, if an attempt is made to set a bit that is not implemented. If the PS implements a HomePNA interface and implements the PSDev Access Control Table enable functionality for the HomePNA interface, then if bit 0 is set, the PS MUST apply PSDev Access Control Table access rules to any PS interface of IANAifType 220 (Home Phoneline Networking Alliance). If the PS does not implement PSDev Access Control Table enable functionality for the HomePNA interface, and an attempt is made to set bit 0 to value '1', the PS MUST return 'Inconsistent Value' error and MUST NOT set bit 0 to value '1'. If bit 1 (ieee80211) is set, the PS MUST apply PSDev Access Control Table access rules to any PS interface of IANAifType 71 (radio spread spectrum). If the PS implements an IEEE 802.3/CSMA-CD interface and implements the PSDev Access Control Table enable functionality for the IEEE 802.3/CSMA-CD interface, then if bit 2 is set, the PS MUST apply PSDev Access Control Table access rules to any PS interface of IANAifType 6 (ethernetCsmacd). If the PS does not implement PSDev Access Control Table enable functionality for a IEEE 802.3/CSMA-CD interface, and an attempt is made to set bit 2 to value '1', the PS MUST return 'Inconsistent Value' error and MUST NOT set bit 2 to value '1'. If bit 3 (homeplug) is set, the PS MUST apply PSDev Access Control Table access rules to any PS HomePlug Powerline Alliance (HomePlug) interface as defined by HomePlug Powerline Alliance (www.homeplug.org). If the PS implements a USB interface and implements the PSDev Access Control Table enable functionality for the USB interface, then if bit 4 is set, the PS MUST apply PSDev Access Control Table access rules to any PS interface of IANAifType 160 (USB). If the PS does not implement PSDev Access Control Table enable functionality for the USB interface, and an attempt is made to set bit 4 to value '1', the PS MUST return 'Inconsistent Value' error and MUST NOT set bit 4 to value '1'. If the PS implements an IEEE 1394 interface and implements the PSDev Access Control Table enable functionality for the IEEE 1394 interface, then if bit 5 is set, the PS MUST apply PSDev Access Control Table access rules to any PS interface of IANAifType 144 (IEEE1394 High Performance Serial Bus). If the PS does not implement PSDev Access Control Table enable functionality for the IEEE 1394 interface, and an attempt is made to set bit 5 to value '1', the PS MUST return 'Inconsistent Value' error and MUST NOT set bit 5 to value '1'. If the PS implements a SCSI interface and implements the PSDev Access Control Table enable functionality for the SCSI interface, then if bit 6 is set, the PS MUST apply PSDev Access Control Table access rules to any PS SCSI-2 or SCSI-3 interface. If the PS does not implement PSDev Access Control Table enable functionality for the SCSI interface, and an attempt is made to set bit 6 to value '1', the PS MUST return 'Inconsistent Value' error and MUST NOT set bit 6 to value '1'. If bit 7 (other) is set, the PS MAY apply PSDev Access Control Table filter access to any PS interface of a type other than the types defined by bits 0 6.")
cabhPsDevAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 5, 2), )
if mibBuilder.loadTexts: cabhPsDevAccessControlTable.setReference('CableHome specification, Packet Handling & Address Translation section.')
if mibBuilder.loadTexts: cabhPsDevAccessControlTable.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevAccessControlTable.setDescription('This table contains a list of the physical addresses of LAN IP Devices to and from which the PS will forward traffic through a LAN interface if cabhPsDevAccessControlEnable is enabled(1) for that interface type.')
cabhPsDevAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 5, 2, 1), ).setIndexNames((0, "CABH-PS-DEV-MIB", "cabhPsDevAccessControlIndex"))
if mibBuilder.loadTexts: cabhPsDevAccessControlEntry.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevAccessControlEntry.setDescription('List of the physical addresses for LAN IP Devices to and from which the PS will forward traffic when the PSDev Access Control Table is enabled.')
cabhPsDevAccessControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cabhPsDevAccessControlIndex.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevAccessControlIndex.setDescription('Integer index into the CableHome PSDev Access Control Table.')
cabhPsDevAccessControlPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 5, 2, 1, 2), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhPsDevAccessControlPhysAddr.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevAccessControlPhysAddr.setDescription('The physical address of the LAN IP Device for which the PS will forward traffic when the PSDev Access Control Table is enabled. The PS will not forward traffic from any LAN IP Device whose physical address is not an entry of the PSDev Access Control Table when the PSDev Access Control Table is enabled for the corresponding interface.')
cabhPsDevAccessControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 5, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhPsDevAccessControlRowStatus.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevAccessControlRowStatus.setDescription('The RowStatus interlock for the creation and deletion of a cabhPsDevAccessControlTable entry. Any writable object in each row of the cabhPsDevAccessControlTable can be modified at any time while the row is active(1).')
cabhPsDevUILogin = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUILogin.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUILogin.setDescription("This parameter specifies the value of the user login name required for access to the CableHome compliant residential gateway device's user interface.")
cabhPsDevUIPassword = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUIPassword.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUIPassword.setDescription("This parameter specifies the value of the user password required for access to the CableHome compliant residential gateway device's user interface.")
cabhPsDevUISelection = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manufacturerLocal", 1), ("cableOperatorLocal", 2), ("cableOperatorServer", 3), ("disabledUI", 4))).clone('manufacturerLocal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUISelection.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUISelection.setDescription("Indicates the type of Web user interface (UI) to present to the user if Web interface is supported: manufacturerLocal: PS uses the vendor UI shipped with the device. cableOperatorLocal: PS uses a cable operator defined UI interface. To operate properly, It should require a special code image downloaded into the PS. By default, if no cable operator UI is being defined, selecting this option points to 'manufacturerLocal' selection. cableOperatorServer: PS redirects HTTP requests to its UI to the URL specified in cabhPsDevUIServerUrl. disabledUI: PS responds to HTTP requests to its UI with an HTTP page containing the value of cabhPsDevUISelectionDisabledBodyText as the body tag; or with a vendor specific message or HTTP error if that value is null.")
cabhPsDevUIServerUrl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUIServerUrl.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUIServerUrl.setDescription('URL used by the Indicate the UI to present to the user. The well formed URL is resolved by the PS by querying the DNS servers listed in cabhCdpWanDnsServerTable.')
cabhPsDevUISelectionDisabledBodyText = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUISelectionDisabledBodyText.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUISelectionDisabledBodyText.setDescription("Default text for the HTTP body tag to include in the response to UI requests when the object cabhPsDevUISelection is set to 'disabledUI' An example of a body tag is below: <body>Feature currently disabled by Cable Operator</body>.")
cabhPsDev802dot11BaseTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 1), )
if mibBuilder.loadTexts: cabhPsDev802dot11BaseTable.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11BaseTable.setDescription('CableHome specifics controls for 80211 wireless interfaces.')
cabhPsDev802dot11BaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cabhPsDev802dot11BaseEntry.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11BaseEntry.setDescription('An entry in cabhPsDev802dot11BaseTable associated to a wireless interface of IANAifType ieee80211.(71)')
cabhPsDev802dot11BaseSetToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11BaseSetToDefault.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11BaseSetToDefault.setDescription('When set to true(1) the PS MUST reset to default values the Mib objects of IEEE802dot11-MIB module and others under cabhPsDev802dot11 for this entry related IfIndex. Reading this object always return false(2).')
cabhPsDev802dot11BaseLastSetToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDev802dot11BaseLastSetToDefault.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11BaseLastSetToDefault.setDescription('The value of sysUpTime when cabhPsDev802dot11MIBSetToDefault was last set to true. Zero if never reset.')
cabhPsDev802dot11BaseAdvertiseSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11BaseAdvertiseSSID.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11BaseAdvertiseSSID.setDescription("When set to false(2) the PS does not advertise the BSS SSID in a proprietary manner. To avoid interoperability problems and service disruption it is RECOMMENDED to set this object always to true. This feature does not provide any security, and does not prevent Wireless Stations to obtain the SSID by sniffing frames from other stations in the ESS. If the device does not support the feature of turning on/off the SSID advertisement, this object always reports 'true(1)' and reports the error 'wrongValue' when set to 'false(2).")
cabhPsDev802dot11BasePhyCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 1, 1, 4), Bits().clone(namedValues=NamedValues(("ieee80211a", 0), ("ieee80211b", 1), ("ieee80211g", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDev802dot11BasePhyCapabilities.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11BasePhyCapabilities.setDescription('Indicates the PHY capabilities of the wireless interface.')
cabhPsDev802dot11BasePhyOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 24))).clone(namedValues=NamedValues(("ieee80211a", 1), ("ieee80211b", 2), ("ieee80211g", 4), ("ieee80211bg", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11BasePhyOperMode.setReference('IEEE Std 802.11, 1999 Edition, IEEE Std 802.11a-1999, IEEE Std 802.11b-1999/Cor 1-2001, IEEE Std 802.11g-2003.')
if mibBuilder.loadTexts: cabhPsDev802dot11BasePhyOperMode.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11BasePhyOperMode.setDescription("Indicates the PHY mode of operation being set for the wireless interface. Setting this object will update the value of dot11PhyType. Accordingly (if implemented), as well as the object dot11OperationalRateSet to the 80211 mandatory rates for dot11PhyType. It is left to vendors the option to update the values of PS optional dot11SupportedDataRatesTxEntry and dot11SupportedDataRatesRxEntry tables based on the operational mode. In the case of selecting ieee80211bg(14), dot11PhyType reports erp(6) and dot11OperationalRateSet should report HRDSSS and ERP mandatory rates and in addition 54 Mbps rate if supported by PS. e.g. : (this example assumes 54 Mbps OFDM is supported. HR-DSSS : Mandatory: 1 Mbps '80'H + '01'H 2 Mbps '80'H + '02'H 5.5 Mbps '80'H + '0B'H 11 Mbps '80'H + '16'H ERP : Mandatory: 6 Mbps '80'H + '0C'H 12 Mbps '80'H + '18'H 24 Mbps '80'H + '30'H (if supported) 54 Mbps '80'H + '6C' Optional: 22 Mbps '00'H + '2C'H 33 Mbps '00'H + '42'H 18 Mbps '00'H + '24'H 36 Mbps '00'H + '48'H 48 Mbps '00'H + '60'H Combined operational rates in : dot11OperationalRateSet value in rate order regardless of '80'H flag and using dots for clarity : + means flagged '80'H, - not flagged. Rates Mbps: +1,+2,+5.5,+6,+11,+12,-18,-22,+24,-33,-36,-48,+54 Hex: '81.82.8B.8C.96.98. 24.2C.B0.48.42. 60.EC'H The default value of this object is left to the vendor to accommodate the factory defaults for the device.")
cabhPsDev802dot11SecTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2), )
if mibBuilder.loadTexts: cabhPsDev802dot11SecTable.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecTable.setDescription('CableHome specifics controls for configuring the security mechanisms of 80211 wireless interfaces.')
cabhPsDev802dot11SecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cabhPsDev802dot11SecEntry.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecEntry.setDescription('An entry in cabhPsDev802dot11SecTable associated to a wireless interface of IANAifType ieee80211(71).')
cabhPsDev802dot11SecCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1, 1), Bits().clone(namedValues=NamedValues(("wep64", 0), ("wep128", 1), ("wpaPSK", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDev802dot11SecCapabilities.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecCapabilities.setDescription('The PS capabilities for Authentication and encryption used to authenticate 802.11 clients.')
cabhPsDev802dot11SecOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1, 2), Bits().clone(namedValues=NamedValues(("wep64", 0), ("wep128", 1), ("wpaPSK", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11SecOperMode.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecOperMode.setDescription("Indicates the Authentication and encryption mechanism to be enabled for the users and advertised in Beacon messages. Bits set to this object and not supported by the PS in cabhPsDev802dot11SecCapabilities are set to '0' without failing the SNMP set. Setting two bit that the PS does not support in combination returns an error 'wrongValue'. In particular: Setting to '1' both wep64(0)and wep128(1) bits returns an error'wrongValue'. Setting a combination of WEP bits (wep64(0) or wep128(1)) and wpaPSK bit returns is not a mandatory requirement, therefore an error 'wrongValue' may be reported. Setting any bit to '1' must not affect the value of object dot11PrivacyInvoked. If dot11PrivacyInvoked is set to 'false', the 80211 WEP security mechanism is disabled (see dot11PrivacyInvoked description) and the value of this object is not used. Setting the wpaPSK(2) bit to '1' indicates the usage of WPA-PSK TKIP. Note that to enable the PSK security mechanism, the value of cabhPsDev802dot11SecWPAPreSharedKey must be a non-zero length string.")
cabhPsDev802dot11SecPassPhraseToWEPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11SecPassPhraseToWEPKey.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecPassPhraseToWEPKey.setDescription("The Password used for PS to derive WEP encryption keys. After a successful set, the values of dot11WEPDefaultKeyValue are populated as described below: For wep64: If cabhPsDev802dot11SecOperMode wep64 bit is set to '1' This object value (x) is used as a generator of a 4 octet seed. seed[i%4] = XOR(seed[i%4],x[i]); i from 1 to len(x) -1 The values of the four dot11WEPDefaultKeyValue are calculated as indicated below : loop j 1..4 loop k 0..4 seed = seed * (((26*8+1)*256-1)*4+1) + 2531011 The value is always truncated at 32 bits. OCTETk = (seed >> 16 )& 0xFF -lowest octet- end loop dot11WEPDefaultKeyValue(j) = OCTET0,OCTET1, ... OCTET4 end loop Note that seed value is constantly re-computed when calculating each octet of each default WEP key. For wep128: If cabhPsDev802dot11SecOperMode wep128 bit is set to '1' This object value (x) fills a 64 octet buffer y : y = x,x,x...up to 64 octets. Calculate the 128-bit MD5 digest of y the values of all dot11WEPDefaultKeyValue (1..4) are calculated by truncating the first first 13 octets of MD5y. dot11WEPDefaultKeyValue = MD5y0,MD5y1, .. MD5y12 This object value is normally read by issuing SNMP request PDUs. This object can be cleared with an SNMP SET to an empty string Value and the PS MUST not update the type of keys being set to '1' in cabhPsDev802dot11SecOperMode. If cabhPsDev802dot11SecUsePassPhraseToKeyAlg is set to false(2), the behavior of a SET to this object depends on the bits set for cabhPsDev802dot11SecOperMode as follows: If cabhPsDev802dot11SecOperMode bit wep64 is set to '1' and this object value length is 5 octets, the MIB object dot11WEPDefaultKeyValue.1 (WEP key 0) is populated with this object value, otherwise an error 'inconsistentValue' is reported. If cabhPsDev802dot11SecOperMode bit wep128 is set to '1' and this object value length is 13 octets, the MIB object dot11WEPDefaultKeyValue.1 (WEP key 0) is populated with this object value, otherwise an error 'inconsistentValue' is reported. Vector examples for wep64 and wep128 key derivation: Note: % refers to the module operation (reminder of the quotient of i and 4); XOR is the OR exclusive boolean operation. For wep64: passphrase: 'ABCD4321' ( hex code 0x41.42.43.44.34.33.32.31 ) First loop: (octets 0..3) XOR (0x00,A) -> XOR(0x00,0x41) -> 0x41 XOR (0x00,B) -> XOR(0x00,0x42) -> 0x42 XOR (0x00,C) -> XOR(0x00,0x43) -> 0x43 XOR (0x00,D) -> XOR(0x00,0x44) -> 0x44 Second loop: (octets 4..7) XOR (A,4) -> XOR(0x41,0x34) -> 0x75 XOR (B,3) -> XOR(0x42,0x33) -> 0x71 XOR (C,2) -> XOR(0x43,0x32) -> 0x71 XOR (D,1) -> XOR(0x44,0x31) -> 0x75 initial seed 0x75717175 -> 1970368885 DefaultKeys calculation key1 seed : 0x16545E64 -> 2nd MSB byte : 0x54 seed : 0x41681397 -> 2nd MSB byte : 0x68 seed : 0x1BE77FFE -> 2nd MSB byte : 0xE7 seed : 0xAA6996C9 -> 2nd MSB byte : 0x69 seed : 0xD1523E68 -> 2nd MSB byte : 0x52 dot11WEPDefaultKeyValue.1 = 0x5468E76952 key2 seed : 0x1FFB838B -> 2nd MSB byte : 0xFb seed : 0xF9C60022 -> 2nd MSB byte : 0xC6 seed : 0xAB43A65D -> 2nd MSB byte : 0x43 seed : 0xE9A35FAC -> 2nd MSB byte : 0xA3 seed : 0xE7AA2FBF -> 2nd MSB byte : 0xAA dot11WEPDefaultKeyValue.2 = 0xFBC643A3AA key3 seed : 0x6D13CB86 -> 2nd MSB byte : 0x13 seed : 0x5D8CD431 -> 2nd MSB byte : 0x8C seed : 0xCC702630 -> 2nd MSB byte : 0x70 seed : 0xD78AEC33 -> 2nd MSB byte : 0x8A seed : 0x24DC662A -> 2nd MSB byte : 0xDC dot11WEPDefaultKeyValue.3 = 0x138C708ADC key4 seed : 0x4F329445 -> 2nd MSB byte : 0x32 seed : 0x3EC035F4 -> 2nd MSB byte : 0xC0 seed : 0xF416CCE7 -> 2nd MSB byte : 0x16 seed : 0x9904940E -> 2nd MSB byte : 0x04 seed : 0x28969A99 -> 2nd MSB byte : 0x96 dot11WEPDefaultKeyValue.4 = 0x32C0160496 For wep128: passphrase: 'ABCD4321' ( hex code 0x41.42.43.44.34.33.32.31 ) 128-bit MD-5 digest 0xFECBACF05B42F7A138A5F3928E dot11WEPDefaultKeyValue.1..4 = 0xFECBACF05B42F7A138A5")
cabhPsDev802dot11SecUsePassPhraseToWEPKeyAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11SecUsePassPhraseToWEPKeyAlg.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecUsePassPhraseToWEPKeyAlg.setDescription('When this object value is true(1) the WEP Pass Phrase to key mechanism described in cabhPsDev802dot11SecPassPhraseToWEPKey applies. When this object is set to false(2) the Pass Phrase to WEP Key mechanism is ignored and the password is used as WEP key to populate the MIB object keydot11WEPDefaultKeyValue object as indicated in cabhPsDev802dot11SecPassPhraseToWEPKey description.')
cabhPsDev802dot11SecPSKPassPhraseToKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11SecPSKPassPhraseToKey.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecPSKPassPhraseToKey.setDescription("The Password used for PS to derive WPA PSK encryption key. After a successful set, the values of cabhPsDev802dot11SecWPAPreSharedKey is updated as described below: For wpaPSK: If cabhPsDev802dot11SecOperMode wpaPSK bit is set to '1' the value of cabhPsDev802dot11SecWPAPreSharedKey is updated with the Password Base Key Derivation Function from the Password-based Cryptographic Specification PKCS #5 v2.0 RFC 2898 (PBKDF2) with the following specific parameters: PSK = PBKDF2(PassPhrase, ssid, ssidLength, 4096, 256) PassPhrase is the value of this object ssid is the PS SSID value used as the function salt ssidLength is the number of octets of ssid the iterations count is 4096 and the key generation length is 256 bits (32 octets). This object value is normally read by issuing SNMP request PDUs. This object can be cleared with an SNMP SET to an empty string Value and the PS MUST not update the type of keys being set to '1' in cabhPsDev802dot11SecOperMode. Vector examples for wpaPSK: for wpaPSK: passphrase: 'ABCD4321' ( hex code 0x41.42.43.44.34.33.32.31 ) SSID: 'ABCD4321' ( hex code 0x41.42.43.44.34.33.32.31 ) 256 bit PBKDF2('ABCD4321', 'ABCD4321', 8, 4096, 32) cabhPsDev802dot11SecWPAPreSharedKey = 0x7C199CF2FEF9AF206C8EE0E9703920C2 3517068B3F96B011E0F975C9131BDB58")
cabhPsDev802dot11SecWPAPreSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(32, 32), )).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11SecWPAPreSharedKey.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecWPAPreSharedKey.setDescription("The Pre-shared key used for the PS when the bit 'wpaPSK' is set to '1'. This object can be set directly or derived from the password phrase set in cabhPsDev802dot11SecPSKPassPhraseToKey. This object is meaningful when the bit wpaPSK is set to '1'. If the value of this object is the zero-length string, the PS must not activate the PSK security mechanism.")
cabhPsDev802dot11SecWPARekeyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11SecWPARekeyTime.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecWPARekeyTime.setDescription('Time interval to initiate WPA Group Keys (GTK) updates.')
cabhPsDev802dot11SecControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restoreConfig", 1), ("commitConfig", 2))).clone('restoreConfig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDev802dot11SecControl.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecControl.setDescription('The control for the indexed 80211 device configuration. All changes to the cabhPsDev802dot11SecEntry MIB objects are reflected when reading the value of the MIB objects; however, those changes are NOT applied to the running configuration of the indexed 80211 device until they are successfully committed via use of the cabhPsDev802dot11SecControl object. If changes are made to the cabhPsDev802dot11SecEntry MIB objects which are not yet successfully committed to the indexed 80211 device, the cabhPsDev802dot11SecControl object can be used to rollback all changes to the last valid 80211 device configuration and discard all intermediate changes. restoreConfig - Setting cabhPsDev802dot11SecControl to this value will cause any changes to the cabhPsDev802dot11SecEntry objects not yet committed be reset to the values from the current running configuration of the indexed 80211 device. commitConfig - Setting cabhPsDev802dot11SecControl to this value will cause the indexed 80211 device to validate and apply the valid cabhPsDev802dot11SecEntry MIB settings to its running configuration. The cabhPsDev802dot11SecCommitStatus object will detail the status of this operation.')
cabhPsDev802dot11SecCommitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commitSucceeded", 1), ("commitNeeded", 2), ("commitFailed", 3))).clone('commitSucceeded')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDev802dot11SecCommitStatus.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11SecCommitStatus.setDescription('Indicates the status of committing the current cabhPsDev802dot11SecEntry MIB object values to the running configuration of the indexed 80211 device. commitSucceeded - indicates the current cabhPsDev802dot11SecEntry MIB object values are valid and have been successfully committed to the running configuration of the indexed 80211 device. commitNeeded - indicates that the value of one or more objects in cabhPsDev802dot11SecEntry MIB group have been changed but not yet committed to the running configuration of the indexed 80211 device. commitFailed - indicates the PS was unable to commit the cabhPsDev802dot11SecEntry MIB object values to the running configuration of the indexed 80211 device due to conflicts in those values.')
cabhPsDevUpnpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUpnpEnabled.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpEnabled.setDescription("Setting this object to false(1) disable PS UPnP services and UPnP MIB objects related functionality. When this object reports 'false' any set to UPnP read-write or read-create objects returns error 'InconsistentValue'. Transitions of this object from 'true' to 'false' and viceversa does not alter the content of persistent MIB objects and may clear dynamically UPnP created entries. This object value persists upon system reinitialization.")
cabhPsDevUpnpCommandIpType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 1), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUpnpCommandIpType.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpCommandIpType.setDescription('The type of InetAddress for cabhPsDevUpnpCommandIp.')
cabhPsDevUpnpCommandIp = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 2), InetAddress().clone(hexValue="C0A80001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUpnpCommandIp.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpCommandIp.setDescription('The IP address Of the device for which the UPnP information is being requested. This may be a an IPv4 or IPv6 prefix. When quering specific information about the PS itself the PS router IP address 192.168.0.1 should be specified .')
cabhPsDevUpnpCommand = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discoveryInfo", 1), ("qosDeviceCapabilities", 2), ("qosDeviceState", 3))).clone('discoveryInfo')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUpnpCommand.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpCommand.setDescription('The type of information to be retrieved from the Upnp Devices in the LAN side and stored in cabhPsDevUpnpInfoTable. The following selections are supported: - discoveryInfo : PS retrieve the Discovery information of UPnP devices. If the Ip address specified in cabhPsDevUpnpCommandIp is 255.255.255.255 the PS executes an M-search command and then retrieve the discovery information of the responding devices. The data stored in cabhPsDevUpnpInfoTable also contain UPnP discovery data of the PS itself. - qosDeviceCapabilities: This command is executed for unicast address only and will trigger the PS to retrieve the QOS device information pertain QOS capabilities. - qosDeviceState: This command is executed for unicast address only and will trigger the PS to retrieve the QOS device information pertain QOS Device state.')
cabhPsDevUpnpCommandUpdate = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhPsDevUpnpCommandUpdate.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpCommandUpdate.setDescription("If set to 'true' triggers the execution of the command indicated in cabhPsDevUpnpCommand for the host(s) in cabhPsDevUpnpCommandIp. Setting to true this object will return error 'wrongValie if host IP corresponds to 255.255.255.255 and cabhPsDevUpnpCommand value is not 'discoveryInfo'. Reading this value always return 'false'.")
cabhPsDevUpnpLastCommandUpdate = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevUpnpLastCommandUpdate.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpLastCommandUpdate.setDescription("The sysUpTime value of the last time the object cabhPsDevUpnpLastCommandUpdate was set to 'true'.")
cabhPsDevUpnpCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("complete", 3), ("failed", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevUpnpCommandStatus.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpCommandStatus.setDescription("The status of cabhPsDevUpnpCommandUpdate trigger none(1) initial state. inProgress(2) the information is being acquired by the device, PS does not change from'inProgess to the final state (complete, failed) until the execution has finished. complete(3) The overall execution is finished with no error conditions.. failed(4). The UPnP Device has experienced a timeout. In the case of multiple devices query (cabhPsDevUpnpCommand set to 'discoveryInfo') The failed devices are stored with content information empty. At system initialization this object returns 'none'.")
cabhPsDevUpnpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 7), )
if mibBuilder.loadTexts: cabhPsDevUpnpInfoTable.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpInfoTable.setDescription('This table contains QOS related information of LAN UPnP devices or thePS itself.')
cabhPsDevUpnpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 7, 1), ).setIndexNames((0, "CABH-PS-DEV-MIB", "cabhPsDevUpnpInfoIpType"), (0, "CABH-PS-DEV-MIB", "cabhPsDevUpnpInfoIp"), (0, "CABH-PS-DEV-MIB", "cabhPsDevUpnpInfoXmlFragmentIndex"))
if mibBuilder.loadTexts: cabhPsDevUpnpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpInfoEntry.setDescription("The Indexes for this entries Entries are created after setting to 'true' the value of cabhPsDevUpnpCommand.")
cabhPsDevUpnpInfoIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cabhPsDevUpnpInfoIpType.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpInfoIpType.setDescription('The type of InetAddress for cabhPsDevUpnpInfoIp.')
cabhPsDevUpnpInfoIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 7, 1, 2), InetAddress())
if mibBuilder.loadTexts: cabhPsDevUpnpInfoIp.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpInfoIp.setDescription('The IP address Of the device for which the UPnP information is being stored. This may be a DNS name (LAN Host name), an IPv4 or IPv6 prefix. Information pertaining to the PS itself is indicated by the PS well-known LAN IP address interface 192.168.0.1.')
cabhPsDevUpnpInfoXmlFragmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cabhPsDevUpnpInfoXmlFragmentIndex.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpInfoXmlFragmentIndex.setDescription("The index of the sequence of entries of cabhPsDevUpnpInfoXmlFragment for an specific cabhPsDevUpnpInfoIp IP address starting with '1'.")
cabhPsDevUpnpInfoXmlFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 1, 6, 3, 2, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhPsDevUpnpInfoXmlFragment.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpInfoXmlFragment.setDescription('The UPnP Device information being requested by cabhPsDevUpnpCommand for the IP addresses specified in cabhPsDevUpnpInfoIp for LAN host(s). If the information is greater than 400 bytes cabhPsDevUpnpInfoXmlFragmentIndex indicates the sequence of the consecutive portions per host identified in the table.')
cabhPsNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2))
cabhPsDevNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0))
cabhPsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3))
cabhPsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 1))
cabhPsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2))
cabhPsDevInitTLVUnknownTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 1)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"))
if mibBuilder.loadTexts: cabhPsDevInitTLVUnknownTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevInitTLVUnknownTrap.setDescription('Event due to detection of unknown TLV during the TLV parsing process. The values of docsDevEvLevel, docsDevId, and docsDevEvText are from the entry which logs this event in the docsDevEventTable. The value of cabhPsDevWanManMacAddress indicates the WAN-Man MAC address of the PS. This part of the information is uniform across all PS Traps.')
cabhPsDevInitTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 2)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"), ("CABH-PS-DEV-MIB", "cabhPsDevProvConfigFile"), ("CABH-PS-DEV-MIB", "cabhPsDevProvConfigTLVProcessed"), ("CABH-PS-DEV-MIB", "cabhPsDevProvConfigTLVRejected"))
if mibBuilder.loadTexts: cabhPsDevInitTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevInitTrap.setDescription('This inform is issued to confirm the successful completion of the CableHome provisioning process.')
cabhPsDevInitRetryTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 3)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"))
if mibBuilder.loadTexts: cabhPsDevInitRetryTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevInitRetryTrap.setDescription('An event to report a failure happened during the initialization process and was detected in the PS.')
cabhPsDevDHCPFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 4)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"), ("CABH-CDP-MIB", "cabhCdpServerDhcpAddress"))
if mibBuilder.loadTexts: cabhPsDevDHCPFailTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevDHCPFailTrap.setDescription('An event to report the failure of a DHCP server. The value of cabhCdpServerDhcpAddressis the IP address of the DHCP server.')
cabhPsDevSwUpgradeInitTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 5)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"))
if mibBuilder.loadTexts: cabhPsDevSwUpgradeInitTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevSwUpgradeInitTrap.setDescription('An event to report a software upgrade initiated event. The values of docsDevSwFilename, and docsDevSwServer indicate the software image name and the IP address of the server from which the image was downloaded.')
cabhPsDevSwUpgradeFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 6)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"))
if mibBuilder.loadTexts: cabhPsDevSwUpgradeFailTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevSwUpgradeFailTrap.setDescription('An event to report the failure of a software upgrade attempt. The values of docsDevSwFilename, and docsDevSwServer indicate the software image name and the IP address of the server from which the image was downloaded.')
cabhPsDevSwUpgradeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 7)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"))
if mibBuilder.loadTexts: cabhPsDevSwUpgradeSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevSwUpgradeSuccessTrap.setDescription('An event to report the Software upgrade success event. The values of docsDevSwFilename, and docsDevSwServer indicate the software image name and the IP address of the server from which the image was downloaded.')
cabhPsDevSwUpgradeCVCFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 8)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"))
if mibBuilder.loadTexts: cabhPsDevSwUpgradeCVCFailTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevSwUpgradeCVCFailTrap.setDescription('An event to report the failure of the verification of code file happened during a secure software upgrade attempt.')
cabhPsDevTODFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 9)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevTimeServerAddr"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"))
if mibBuilder.loadTexts: cabhPsDevTODFailTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevTODFailTrap.setDescription('An event to report the failure of a time of day server. The value of cabhPsDevTimeServerAddr indicates the server IP address.')
cabhPsDevCdpWanDataIpTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 10)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-CDP-MIB", "cabhCdpWanDataAddrClientId"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"))
if mibBuilder.loadTexts: cabhPsDevCdpWanDataIpTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevCdpWanDataIpTrap.setDescription('An event to report the failure of PS to obtain all needed WAN-Data Ip Addresses. cabhCdpWanDataAddrClientId indicates the ClientId for which the failure occurred.')
cabhPsDevCdpThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 11)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"), ("CABH-CDP-MIB", "cabhCdpLanTransThreshold"))
if mibBuilder.loadTexts: cabhPsDevCdpThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevCdpThresholdTrap.setDescription('An event to report that the LAN-Trans address assignment threshold has been exceeded.')
cabhPsDevCspTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 12)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"))
if mibBuilder.loadTexts: cabhPsDevCspTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevCspTrap.setDescription('To report an event with the CableHome Security Portal.')
cabhPsDevCapTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 13)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"))
if mibBuilder.loadTexts: cabhPsDevCapTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevCapTrap.setDescription('To report an event with the CableHome Address Portal.')
cabhPsDevCtpTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 14)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"))
if mibBuilder.loadTexts: cabhPsDevCtpTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevCtpTrap.setDescription('To report an event with the CableHome Test Portal.')
cabhPsDevProvEnrollTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 15)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevHardwareVersion"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwCurrentVers"), ("CABH-PS-DEV-MIB", "cabhPsDevTypeIdentifier"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"))
if mibBuilder.loadTexts: cabhPsDevProvEnrollTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvEnrollTrap.setDescription('This notification is issued to initiate the CableHome provisioning process for SNMP Provisioning Mode.')
if mibBuilder.loadTexts: cabhPsDevProvEnrollTrap.setReference('CableHome 1.1 Specification, 13.4 Provisioning the PS for Management: SNMP Provisioning Mode.')
cabhPsDevCdpLanIpPoolTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 16)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"), ("CABH-CDP-MIB", "cabhCdpLanTransCurCount"))
if mibBuilder.loadTexts: cabhPsDevCdpLanIpPoolTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevCdpLanIpPoolTrap.setDescription('An event to report that the pool of IP addresses for LAN clients, as defined by cabh CdpLanPoolStart and cabhCdpLanPoolEnd, is exhausted.')
cabhPsDevUpnpMultiplePHTrap = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 2, 0, 17)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("CABH-QOS2-MIB", "cabhQos2NumActivePolicyHolder"), ("CABH-QOS2-MIB", "cabhQos2PolicyHolderEnabled"), ("CABH-QOS2-MIB", "cabhQos2PolicyAdmissionControl"))
if mibBuilder.loadTexts: cabhPsDevUpnpMultiplePHTrap.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpMultiplePHTrap.setDescription('To report that more than one active UPnP Policy Holders have been detected. This notification is triggered in the case the PS has cabhPsDevUpnpEnabled true.')
cabhPsBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 1, 1)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevBaseGroup"), ("CABH-PS-DEV-MIB", "cabhPsDevProvGroup"), ("CABH-PS-DEV-MIB", "cabhPsNotificationGroup"), ("CABH-PS-DEV-MIB", "cabhPsDevAttribGroup"), ("CABH-PS-DEV-MIB", "cabhPsDevStatsGroup"), ("CABH-PS-DEV-MIB", "cabhPsDevAccessControlGroup"), ("CABH-PS-DEV-MIB", "cabhPsDevUpnpGroup"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11Group"), ("CABH-PS-DEV-MIB", "cabhPsDevUIGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsBasicCompliance = cabhPsBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: cabhPsBasicCompliance.setDescription('The compliance statement for devices that implement the CableHome Portal Services logical element.')
cabhPsDeprecatedCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 1, 2)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevDeprecatedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDeprecatedCompliance = cabhPsDeprecatedCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cabhPsDeprecatedCompliance.setDescription('The compliance statement for deprecated MIB objects.')
cabhPsObsoleteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 1, 3)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevObsoleteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsObsoleteCompliance = cabhPsObsoleteCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsObsoleteCompliance.setDescription('The compliance statement for obsolete MIB objects.')
cabhPsDevBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 1)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevDateTime"), ("CABH-PS-DEV-MIB", "cabhPsDevResetNow"), ("CABH-PS-DEV-MIB", "cabhPsDevSerialNumber"), ("CABH-PS-DEV-MIB", "cabhPsDevHardwareVersion"), ("CABH-PS-DEV-MIB", "cabhPsDevWanManMacAddress"), ("CABH-PS-DEV-MIB", "cabhPsDevWanDataMacAddress"), ("CABH-PS-DEV-MIB", "cabhPsDevTypeIdentifier"), ("CABH-PS-DEV-MIB", "cabhPsDevSetToFactory"), ("CABH-PS-DEV-MIB", "cabhPsDevTodSyncStatus"), ("CABH-PS-DEV-MIB", "cabhPsDevProvMode"), ("CABH-PS-DEV-MIB", "cabhPsDevLastSetToFactory"), ("CABH-PS-DEV-MIB", "cabhPsDevTrapControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDevBaseGroup = cabhPsDevBaseGroup.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevBaseGroup.setDescription('A collection of objects for providing device status and control.')
cabhPsDevProvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 2)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevProvisioningTimer"), ("CABH-PS-DEV-MIB", "cabhPsDevProvConfigFile"), ("CABH-PS-DEV-MIB", "cabhPsDevProvConfigHash"), ("CABH-PS-DEV-MIB", "cabhPsDevProvConfigFileSize"), ("CABH-PS-DEV-MIB", "cabhPsDevProvConfigFileStatus"), ("CABH-PS-DEV-MIB", "cabhPsDevProvConfigTLVProcessed"), ("CABH-PS-DEV-MIB", "cabhPsDevProvConfigTLVRejected"), ("CABH-PS-DEV-MIB", "cabhPsDevProvSolicitedKeyTimeout"), ("CABH-PS-DEV-MIB", "cabhPsDevProvState"), ("CABH-PS-DEV-MIB", "cabhPsDevProvAuthState"), ("CABH-PS-DEV-MIB", "cabhPsDevTimeServerAddrType"), ("CABH-PS-DEV-MIB", "cabhPsDevTimeServerAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDevProvGroup = cabhPsDevProvGroup.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevProvGroup.setDescription('A collection of objects for controlling and providing status on provisioning.')
cabhPsDevAttribGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 3)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevPsDeviceType"), ("CABH-PS-DEV-MIB", "cabhPsDevPsManufacturerUrl"), ("CABH-PS-DEV-MIB", "cabhPsDevPsModelUrl"), ("CABH-PS-DEV-MIB", "cabhPsDevPsModelUpc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDevAttribGroup = cabhPsDevAttribGroup.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevAttribGroup.setDescription('A collection of objects for providing information on LAN IP devices known to the PS.')
cabhPsDevStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 4)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevLanIpTrafficCountersReset"), ("CABH-PS-DEV-MIB", "cabhPsDevLanIpTrafficCountersLastReset"), ("CABH-PS-DEV-MIB", "cabhPsDevLanIpTrafficEnabled"), ("CABH-PS-DEV-MIB", "cabhPsDevLanIpTrafficInetAddressType"), ("CABH-PS-DEV-MIB", "cabhPsDevLanIpTrafficInetAddress"), ("CABH-PS-DEV-MIB", "cabhPsDevLanIpTrafficInOctets"), ("CABH-PS-DEV-MIB", "cabhPsDevLanIpTrafficOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDevStatsGroup = cabhPsDevStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevStatsGroup.setDescription('A collection of objects for providing information on LAN IP traffic.')
cabhPsDevDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 5)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevWanManClientId"), ("CABH-PS-DEV-MIB", "cabhPsDevProvCorrelationId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDevDeprecatedGroup = cabhPsDevDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cabhPsDevDeprecatedGroup.setDescription('Group of deprecated PSDev MIB objects.')
cabhPsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 6)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevInitTLVUnknownTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevInitTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevInitRetryTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevDHCPFailTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevSwUpgradeInitTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevSwUpgradeFailTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevSwUpgradeSuccessTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevSwUpgradeCVCFailTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevTODFailTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevCdpWanDataIpTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevCdpThresholdTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevCspTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevCapTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevCtpTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevProvEnrollTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevCdpLanIpPoolTrap"), ("CABH-PS-DEV-MIB", "cabhPsDevUpnpMultiplePHTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsNotificationGroup = cabhPsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cabhPsNotificationGroup.setDescription('These notifications indicate change in status of the Portal Services set of functions in a device complying with CableLabs CableHome(tm) specifications.')
cabhPsDevAccessControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 7)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevAccessControlEnable"), ("CABH-PS-DEV-MIB", "cabhPsDevAccessControlPhysAddr"), ("CABH-PS-DEV-MIB", "cabhPsDevAccessControlRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDevAccessControlGroup = cabhPsDevAccessControlGroup.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevAccessControlGroup.setDescription('Group of Access Control objects for the CableHome PSDev MIB.')
cabhPsDevUIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 8)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevUILogin"), ("CABH-PS-DEV-MIB", "cabhPsDevUIPassword"), ("CABH-PS-DEV-MIB", "cabhPsDevUISelection"), ("CABH-PS-DEV-MIB", "cabhPsDevUIServerUrl"), ("CABH-PS-DEV-MIB", "cabhPsDevUISelectionDisabledBodyText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDevUIGroup = cabhPsDevUIGroup.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUIGroup.setDescription('A collection of objects for configuring the selection and operation of the User Interface displayed to an HTTP client, if a UI is implemented.')
cabhPsDev802dot11Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 9)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDev802dot11BaseSetToDefault"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11BaseLastSetToDefault"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11BaseAdvertiseSSID"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11BasePhyCapabilities"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11BasePhyOperMode"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11SecCapabilities"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11SecOperMode"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11SecPassPhraseToWEPKey"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11SecUsePassPhraseToWEPKeyAlg"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11SecPSKPassPhraseToKey"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11SecWPAPreSharedKey"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11SecWPARekeyTime"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11SecControl"), ("CABH-PS-DEV-MIB", "cabhPsDev802dot11SecCommitStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDev802dot11Group = cabhPsDev802dot11Group.setStatus('current')
if mibBuilder.loadTexts: cabhPsDev802dot11Group.setDescription('Group of CableHome proprietary objects for the management of IEEE 80211 interfaces.')
cabhPsDevUpnpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 10)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevUpnpEnabled"), ("CABH-PS-DEV-MIB", "cabhPsDevUpnpCommandIpType"), ("CABH-PS-DEV-MIB", "cabhPsDevUpnpCommandIp"), ("CABH-PS-DEV-MIB", "cabhPsDevUpnpCommand"), ("CABH-PS-DEV-MIB", "cabhPsDevUpnpCommandUpdate"), ("CABH-PS-DEV-MIB", "cabhPsDevUpnpLastCommandUpdate"), ("CABH-PS-DEV-MIB", "cabhPsDevUpnpCommandStatus"), ("CABH-PS-DEV-MIB", "cabhPsDevUpnpInfoXmlFragment"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDevUpnpGroup = cabhPsDevUpnpGroup.setStatus('current')
if mibBuilder.loadTexts: cabhPsDevUpnpGroup.setDescription('Group of MIB objects for the management interface of UPnP Services.')
cabhPsDevObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 1, 3, 2, 11)).setObjects(("CABH-PS-DEV-MIB", "cabhPsDevBpDeviceType"), ("CABH-PS-DEV-MIB", "cabhPsDevBpManufacturer"), ("CABH-PS-DEV-MIB", "cabhPsDevBpManufacturerUrl"), ("CABH-PS-DEV-MIB", "cabhPsDevBpSerialNumber"), ("CABH-PS-DEV-MIB", "cabhPsDevBpHardwareVersion"), ("CABH-PS-DEV-MIB", "cabhPsDevBpHardwareOptions"), ("CABH-PS-DEV-MIB", "cabhPsDevBpModelName"), ("CABH-PS-DEV-MIB", "cabhPsDevBpModelNumber"), ("CABH-PS-DEV-MIB", "cabhPsDevBpModelUrl"), ("CABH-PS-DEV-MIB", "cabhPsDevBpModelUpc"), ("CABH-PS-DEV-MIB", "cabhPsDevBpModelSoftwareOs"), ("CABH-PS-DEV-MIB", "cabhPsDevBpModelSoftwareVersion"), ("CABH-PS-DEV-MIB", "cabhPsDevBpLanInterfaceType"), ("CABH-PS-DEV-MIB", "cabhPsDevBpNumberInterfacePriorities"), ("CABH-PS-DEV-MIB", "cabhPsDevBpPhysicalLocation"), ("CABH-PS-DEV-MIB", "cabhPsDevBpPhysicalAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhPsDevObsoleteGroup = cabhPsDevObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cabhPsDevObsoleteGroup.setDescription('Group of BP related objects with obsoleted status.')
mibBuilder.exportSymbols("CABH-PS-DEV-MIB", cabhPsDevCdpLanIpPoolTrap=cabhPsDevCdpLanIpPoolTrap, cabhPsDevSwUpgradeSuccessTrap=cabhPsDevSwUpgradeSuccessTrap, cabhPsDevBpPhysicalAddress=cabhPsDevBpPhysicalAddress, cabhPsDevBaseGroup=cabhPsDevBaseGroup, cabhPsDevLanIpTrafficTable=cabhPsDevLanIpTrafficTable, cabhPsDevBpDeviceType=cabhPsDevBpDeviceType, cabhPsDevTimeServerAddrType=cabhPsDevTimeServerAddrType, cabhPsDevUpnpEnabled=cabhPsDevUpnpEnabled, cabhPsDevUpnpInfoXmlFragment=cabhPsDevUpnpInfoXmlFragment, cabhPsDevProvState=cabhPsDevProvState, cabhPsDevUILogin=cabhPsDevUILogin, cabhPsDevProvEnrollTrap=cabhPsDevProvEnrollTrap, cabhPsDevHardwareVersion=cabhPsDevHardwareVersion, cabhPsDevSetToFactory=cabhPsDevSetToFactory, cabhPsDevInitRetryTrap=cabhPsDevInitRetryTrap, cabhPsDevPsModelUrl=cabhPsDevPsModelUrl, cabhPsDevAccessControlTable=cabhPsDevAccessControlTable, cabhPsDevProvConfigFile=cabhPsDevProvConfigFile, cabhPsDev802dot11SecControl=cabhPsDev802dot11SecControl, cabhPsDevInitTrap=cabhPsDevInitTrap, cabhPsObsoleteCompliance=cabhPsObsoleteCompliance, cabhPsDev802dot11SecPSKPassPhraseToKey=cabhPsDev802dot11SecPSKPassPhraseToKey, cabhPsDevUpnpCommand=cabhPsDevUpnpCommand, cabhPsDevBpProfileEntry=cabhPsDevBpProfileEntry, cabhPsDevMib=cabhPsDevMib, cabhPsDevSwUpgradeFailTrap=cabhPsDevSwUpgradeFailTrap, cabhPsDevCdpWanDataIpTrap=cabhPsDevCdpWanDataIpTrap, cabhPsDevPsModelUpc=cabhPsDevPsModelUpc, cabhPsBasicCompliance=cabhPsBasicCompliance, cabhPsDev802dot11SecOperMode=cabhPsDev802dot11SecOperMode, cabhPsDevProvGroup=cabhPsDevProvGroup, cabhPsCompliances=cabhPsCompliances, cabhPsDevBpAttrib=cabhPsDevBpAttrib, cabhPsDevBase=cabhPsDevBase, cabhPsDevMisc=cabhPsDevMisc, cabhPsDevUpnpCommandIp=cabhPsDevUpnpCommandIp, cabhPsDevBpHardwareVersion=cabhPsDevBpHardwareVersion, cabhPsDevUpnpCommandUpdate=cabhPsDevUpnpCommandUpdate, cabhPsDevBpPhysicalLocation=cabhPsDevBpPhysicalLocation, cabhPsDevBpProfileTable=cabhPsDevBpProfileTable, cabhPsDevUpnpInfoIpType=cabhPsDevUpnpInfoIpType, cabhPsDevTrapControl=cabhPsDevTrapControl, cabhPsDev802dot11SecTable=cabhPsDev802dot11SecTable, cabhPsDevProvSolicitedKeyTimeout=cabhPsDevProvSolicitedKeyTimeout, cabhPsDevUpnpCommands=cabhPsDevUpnpCommands, cabhPsDevBpModelUpc=cabhPsDevBpModelUpc, cabhPsDevDeprecatedGroup=cabhPsDevDeprecatedGroup, cabhPsDev802dot11SecPassPhraseToWEPKey=cabhPsDev802dot11SecPassPhraseToWEPKey, cabhPsDevWanManMacAddress=cabhPsDevWanManMacAddress, cabhPsDevPsDeviceType=cabhPsDevPsDeviceType, PYSNMP_MODULE_ID=cabhPsDevMib, cabhPsDevLanIpTrafficInOctets=cabhPsDevLanIpTrafficInOctets, cabhPsDevBpHardwareOptions=cabhPsDevBpHardwareOptions, cabhPsDevUISelectionDisabledBodyText=cabhPsDevUISelectionDisabledBodyText, cabhPsDevUIPassword=cabhPsDevUIPassword, cabhPsDevBpModelNumber=cabhPsDevBpModelNumber, cabhPsDev802dot11BaseLastSetToDefault=cabhPsDev802dot11BaseLastSetToDefault, cabhPsDevPsAttrib=cabhPsDevPsAttrib, cabhPsDev802dot11BaseTable=cabhPsDev802dot11BaseTable, cabhPsDevSwUpgradeInitTrap=cabhPsDevSwUpgradeInitTrap, cabhPsDevBpIndex=cabhPsDevBpIndex, cabhPsDevInitTLVUnknownTrap=cabhPsDevInitTLVUnknownTrap, cabhPsDevStatsGroup=cabhPsDevStatsGroup, cabhPsDevUpnpInfoIp=cabhPsDevUpnpInfoIp, cabhPsDevAccessControlIndex=cabhPsDevAccessControlIndex, cabhPsDevNotifications=cabhPsDevNotifications, cabhPsDevAccessControl=cabhPsDevAccessControl, cabhPsDevUI=cabhPsDevUI, cabhPsDevBpModelUrl=cabhPsDevBpModelUrl, cabhPsDev802dot11SecWPARekeyTime=cabhPsDev802dot11SecWPARekeyTime, cabhPsDevUpnpInfoXmlFragmentIndex=cabhPsDevUpnpInfoXmlFragmentIndex, cabhPsDevBpModelName=cabhPsDevBpModelName, cabhPsDevLanIpTrafficEnabled=cabhPsDevLanIpTrafficEnabled, cabhPsDevTypeIdentifier=cabhPsDevTypeIdentifier, cabhPsDevAccessControlGroup=cabhPsDevAccessControlGroup, cabhPsDevUpnpGroup=cabhPsDevUpnpGroup, cabhPsDevBpNumberInterfacePriorities=cabhPsDevBpNumberInterfacePriorities, cabhPsDevUpnpInfoEntry=cabhPsDevUpnpInfoEntry, cabhPsDevBpManufacturer=cabhPsDevBpManufacturer, cabhPsDevAttrib=cabhPsDevAttrib, cabhPsDev802dot11Group=cabhPsDev802dot11Group, cabhPsDevProvConfigTLVProcessed=cabhPsDevProvConfigTLVProcessed, cabhPsDevLastSetToFactory=cabhPsDevLastSetToFactory, cabhPsDevBpSerialNumber=cabhPsDevBpSerialNumber, cabhPsDevLanIpTrafficCountersLastReset=cabhPsDevLanIpTrafficCountersLastReset, cabhPsDevProvMode=cabhPsDevProvMode, cabhPsDev802dot11SecCapabilities=cabhPsDev802dot11SecCapabilities, cabhPsDevStats=cabhPsDevStats, cabhPsDev802dot11SecUsePassPhraseToWEPKeyAlg=cabhPsDev802dot11SecUsePassPhraseToWEPKeyAlg, cabhPsDeprecatedCompliance=cabhPsDeprecatedCompliance, cabhPsDevProvConfigFileStatus=cabhPsDevProvConfigFileStatus, cabhPsDevUpnpBase=cabhPsDevUpnpBase, cabhPsDev802dot11BaseSetToDefault=cabhPsDev802dot11BaseSetToDefault, cabhPsDev802dot11BaseAdvertiseSSID=cabhPsDev802dot11BaseAdvertiseSSID, cabhPsDevProv=cabhPsDevProv, cabhPsDevDHCPFailTrap=cabhPsDevDHCPFailTrap, cabhPsDevUpnp=cabhPsDevUpnp, cabhPsDevProvisioningTimer=cabhPsDevProvisioningTimer, cabhPsDevProvAuthState=cabhPsDevProvAuthState, cabhPsDev802dot11SecEntry=cabhPsDev802dot11SecEntry, cabhPsDev802dot11=cabhPsDev802dot11, cabhPsDev802dot11SecCommitStatus=cabhPsDev802dot11SecCommitStatus, cabhPsGroups=cabhPsGroups, cabhPsDevSerialNumber=cabhPsDevSerialNumber, cabhPsDevDateTime=cabhPsDevDateTime, cabhPsNotificationGroup=cabhPsNotificationGroup, cabhPsDevUIServerUrl=cabhPsDevUIServerUrl, cabhPsDevUIGroup=cabhPsDevUIGroup, cabhPsDevAttribGroup=cabhPsDevAttribGroup, cabhPsDevBpModelSoftwareOs=cabhPsDevBpModelSoftwareOs, cabhPsDevLanIpTrafficInetAddress=cabhPsDevLanIpTrafficInetAddress, cabhPsDevSwUpgradeCVCFailTrap=cabhPsDevSwUpgradeCVCFailTrap, cabhPsDevTodSyncStatus=cabhPsDevTodSyncStatus, cabhPsDevAccessControlRowStatus=cabhPsDevAccessControlRowStatus, cabhPsDev802dot11SecWPAPreSharedKey=cabhPsDev802dot11SecWPAPreSharedKey, cabhPsDevResetNow=cabhPsDevResetNow, cabhPsDevUpnpCommandStatus=cabhPsDevUpnpCommandStatus, cabhPsDevTODFailTrap=cabhPsDevTODFailTrap, cabhPsDevPsManufacturerUrl=cabhPsDevPsManufacturerUrl, cabhPsDevCapTrap=cabhPsDevCapTrap, cabhPsDevUISelection=cabhPsDevUISelection, cabhPsDevCspTrap=cabhPsDevCspTrap, cabhPsDevProvConfigTLVRejected=cabhPsDevProvConfigTLVRejected, cabhPsDevLanIpTrafficInetAddressType=cabhPsDevLanIpTrafficInetAddressType, cabhPsDevObsoleteGroup=cabhPsDevObsoleteGroup, cabhPsNotification=cabhPsNotification, cabhPsDev802dot11BasePhyOperMode=cabhPsDev802dot11BasePhyOperMode, cabhPsDevMibObjects=cabhPsDevMibObjects, cabhPsDevBpModelSoftwareVersion=cabhPsDevBpModelSoftwareVersion, cabhPsConformance=cabhPsConformance, cabhPsDevCdpThresholdTrap=cabhPsDevCdpThresholdTrap, cabhPsDevLanIpTrafficIndex=cabhPsDevLanIpTrafficIndex, cabhPsDevUpnpInfoTable=cabhPsDevUpnpInfoTable, cabhPsDevAccessControlEntry=cabhPsDevAccessControlEntry, cabhPsDevLanIpTrafficEntry=cabhPsDevLanIpTrafficEntry, cabhPsDev802dot11BasePhyCapabilities=cabhPsDev802dot11BasePhyCapabilities, cabhPsDevCtpTrap=cabhPsDevCtpTrap, cabhPsDevProvCorrelationId=cabhPsDevProvCorrelationId, cabhPsDevWanManClientId=cabhPsDevWanManClientId, cabhPsDevAccessControlEnable=cabhPsDevAccessControlEnable, cabhPsDevWanDataMacAddress=cabhPsDevWanDataMacAddress, cabhPsDevAccessControlPhysAddr=cabhPsDevAccessControlPhysAddr, cabhPsDevTimeServerAddr=cabhPsDevTimeServerAddr, cabhPsDevLanIpTrafficCountersReset=cabhPsDevLanIpTrafficCountersReset, cabhPsDevBpManufacturerUrl=cabhPsDevBpManufacturerUrl, cabhPsDevUpnpMultiplePHTrap=cabhPsDevUpnpMultiplePHTrap, cabhPsDevProvConfigFileSize=cabhPsDevProvConfigFileSize, cabhPsDevProvConfigHash=cabhPsDevProvConfigHash, cabhPsDevUpnpLastCommandUpdate=cabhPsDevUpnpLastCommandUpdate, cabhPsDev802dot11BaseEntry=cabhPsDev802dot11BaseEntry, cabhPsDevLanIpTrafficOutOctets=cabhPsDevLanIpTrafficOutOctets, cabhPsDevUpnpCommandIpType=cabhPsDevUpnpCommandIpType, cabhPsDevBpLanInterfaceType=cabhPsDevBpLanInterfaceType)
