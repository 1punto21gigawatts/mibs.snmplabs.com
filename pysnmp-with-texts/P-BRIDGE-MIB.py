#
# PySNMP MIB module P-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/P-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:05:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
dot1dTp, dot1dBasePortEntry, dot1dBridge, dot1dTpPort, dot1dBasePort = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dTp", "dot1dBasePortEntry", "dot1dBridge", "dot1dTpPort", "dot1dBasePort")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Counter64, Counter32, ModuleIdentity, iso, Unsigned32, MibIdentifier, Gauge32, Bits, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Counter64", "Counter32", "ModuleIdentity", "iso", "Unsigned32", "MibIdentifier", "Gauge32", "Bits", "IpAddress", "TimeTicks")
TruthValue, DisplayString, MacAddress, TimeInterval, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "TimeInterval", "TextualConvention")
pBridgeMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 17, 6))
pBridgeMIB.setRevisions(('2006-01-09 00:00', '1999-08-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pBridgeMIB.setRevisionsDescriptions(('Added dot1dPortRestrictedGroupRegistration. Deprecated pBridgePortGmrpGroup and pBridgeCompliance and added pBridgePortGmrpGroup2 and pBridgeCompliance2.', 'The Bridge MIB Extension module for managing Priority and Multicast Filtering, defined by IEEE 802.1D-1998. Initial version, published as RFC 2674.',))
if mibBuilder.loadTexts: pBridgeMIB.setLastUpdated('200601090000Z')
if mibBuilder.loadTexts: pBridgeMIB.setOrganization('IETF Bridge MIB Working Group')
if mibBuilder.loadTexts: pBridgeMIB.setContactInfo('Email: bridge-mib@ietf.org ietfmibs@ops.ietf.org David Levi Postal: Nortel Networks 4655 Great America Parkway Santa Clara, CA 95054 USA Phone: +1 865 686 0432 Email: dlevi@nortel.com David Harrington Postal: Effective Software 50 Harding Rd. Portsmouth, NH 03801 USA Phone: +1 603 436 8634 Email: ietfdbh@comcast.net Les Bell Postal: Hemel Hempstead, Herts. HP2 7YU UK Email: elbell@ntlworld.com Vivian Ngai Email: vivian_ngai@acm.org Andrew Smith Postal: Beijing Harbour Networks Jiuling Building 21 North Xisanhuan Ave. Beijing, 100089 PRC Fax: +1 415 345 1827 Email: ah_smith@acm.org Paul Langille Postal: Newbridge Networks 5 Corporate Drive Andover, MA 01810 USA Phone: +1 978 691 4665 Email: langille@newbridge.com Anil Rijhsinghani Postal: Accton Technology Corporation 5 Mount Royal Ave Marlboro, MA 01752 USA Phone: Email: anil@accton.com Keith McCloghrie Postal: Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA Phone: +1 408 526 5260 Email: kzm@cisco.com')
if mibBuilder.loadTexts: pBridgeMIB.setDescription('The Bridge MIB Extension module for managing Priority and Multicast Filtering, defined by IEEE 802.1D-1998, including Restricted Group Registration defined by IEEE 802.1t-2001. Copyright (C) The Internet Society (2006). This version of this MIB module is part of RFC 4363; See the RFC itself for full legal notices.')
pBridgeMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1))
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

dot1dExtBase = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1, 1))
dot1dPriority = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1, 2))
dot1dGarp = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1, 3))
dot1dGmrp = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1, 4))
dot1dDeviceCapabilities = MibScalar((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 1), Bits().clone(namedValues=NamedValues(("dot1dExtendedFilteringServices", 0), ("dot1dTrafficClasses", 1), ("dot1qStaticEntryIndividualPort", 2), ("dot1qIVLCapable", 3), ("dot1qSVLCapable", 4), ("dot1qHybridCapable", 5), ("dot1qConfigurablePvidTagging", 6), ("dot1dLocalVlanCapable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dDeviceCapabilities.setReference('ISO/IEC 15802-3 Section 5.2, IEEE 802.1Q/D11 Section 5.2, 12.10.1.1.3/b/2')
if mibBuilder.loadTexts: dot1dDeviceCapabilities.setStatus('current')
if mibBuilder.loadTexts: dot1dDeviceCapabilities.setDescription('Indicates the optional parts of IEEE 802.1D and 802.1Q that are implemented by this device and are manageable through this MIB. Capabilities that are allowed on a per-port basis are indicated in dot1dPortCapabilities. dot1dExtendedFilteringServices(0), -- can perform filtering of -- individual multicast addresses -- controlled by GMRP. dot1dTrafficClasses(1), -- can map user priority to -- multiple traffic classes. dot1qStaticEntryIndividualPort(2), -- dot1qStaticUnicastReceivePort & -- dot1qStaticMulticastReceivePort -- can represent non-zero entries. dot1qIVLCapable(3), -- Independent VLAN Learning (IVL). dot1qSVLCapable(4), -- Shared VLAN Learning (SVL). dot1qHybridCapable(5), -- both IVL & SVL simultaneously. dot1qConfigurablePvidTagging(6), -- whether the implementation -- supports the ability to -- override the default PVID -- setting and its egress status -- (VLAN-Tagged or Untagged) on -- each port. dot1dLocalVlanCapable(7) -- can support multiple local -- bridges, outside of the scope -- of 802.1Q defined VLANs.')
dot1dTrafficClassesEnabled = MibScalar((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dTrafficClassesEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1dTrafficClassesEnabled.setDescription('The value true(1) indicates that Traffic Classes are enabled on this bridge. When false(2), the bridge operates with a single priority level for all traffic. The value of this object MUST be retained across reinitializations of the management system.')
dot1dGmrpStatus = MibScalar((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 3), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dGmrpStatus.setStatus('current')
if mibBuilder.loadTexts: dot1dGmrpStatus.setDescription('The administrative status requested by management for GMRP. The value enabled(1) indicates that GMRP should be enabled on this device, in all VLANs, on all ports for which it has not been specifically disabled. When disabled(2), GMRP is disabled, in all VLANs and on all ports, and all GMRP packets will be forwarded transparently. This object affects both Applicant and Registrar state machines. A transition from disabled(2) to enabled(1) will cause a reset of all GMRP state machines on all ports. The value of this object MUST be retained across reinitializations of the management system.')
dot1dPortCapabilitiesTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 4), )
if mibBuilder.loadTexts: dot1dPortCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: dot1dPortCapabilitiesTable.setDescription('A table that contains capabilities information about every port that is associated with this bridge.')
dot1dPortCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 4, 1), )
dot1dBasePortEntry.registerAugmentions(("P-BRIDGE-MIB", "dot1dPortCapabilitiesEntry"))
dot1dPortCapabilitiesEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1dPortCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dPortCapabilitiesEntry.setDescription('A set of capabilities information about this port indexed by dot1dBasePort.')
dot1dPortCapabilities = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 4, 1, 1), Bits().clone(namedValues=NamedValues(("dot1qDot1qTagging", 0), ("dot1qConfigurableAcceptableFrameTypes", 1), ("dot1qIngressFiltering", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortCapabilities.setReference('ISO/IEC 15802-3 Section 5.2, IEEE 802.1Q/D11 Section 5.2')
if mibBuilder.loadTexts: dot1dPortCapabilities.setStatus('current')
if mibBuilder.loadTexts: dot1dPortCapabilities.setDescription('Indicates the parts of IEEE 802.1D and 802.1Q that are optional on a per-port basis, that are implemented by this device, and that are manageable through this MIB. dot1qDot1qTagging(0), -- supports 802.1Q VLAN tagging of -- frames and GVRP. dot1qConfigurableAcceptableFrameTypes(1), -- allows modified values of -- dot1qPortAcceptableFrameTypes. dot1qIngressFiltering(2) -- supports the discarding of any -- frame received on a Port whose -- VLAN classification does not -- include that Port in its Member -- set.')
dot1dPortPriorityTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 1), )
if mibBuilder.loadTexts: dot1dPortPriorityTable.setStatus('current')
if mibBuilder.loadTexts: dot1dPortPriorityTable.setDescription('A table that contains information about every port that is associated with this transparent bridge.')
dot1dPortPriorityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 1, 1), )
dot1dBasePortEntry.registerAugmentions(("P-BRIDGE-MIB", "dot1dPortPriorityEntry"))
dot1dPortPriorityEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1dPortPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dPortPriorityEntry.setDescription('A list of Default User Priorities for each port of a transparent bridge. This is indexed by dot1dBasePort.')
dot1dPortDefaultUserPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortDefaultUserPriority.setStatus('current')
if mibBuilder.loadTexts: dot1dPortDefaultUserPriority.setDescription('The default ingress User Priority for this port. This only has effect on media, such as Ethernet, that do not support native User Priority. The value of this object MUST be retained across reinitializations of the management system.')
dot1dPortNumTrafficClasses = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortNumTrafficClasses.setStatus('current')
if mibBuilder.loadTexts: dot1dPortNumTrafficClasses.setDescription('The number of egress traffic classes supported on this port. This object may optionally be read-only. The value of this object MUST be retained across reinitializations of the management system.')
dot1dUserPriorityRegenTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 2), )
if mibBuilder.loadTexts: dot1dUserPriorityRegenTable.setReference('ISO/IEC 15802-3 Section 6.4')
if mibBuilder.loadTexts: dot1dUserPriorityRegenTable.setStatus('current')
if mibBuilder.loadTexts: dot1dUserPriorityRegenTable.setDescription('A list of Regenerated User Priorities for each received User Priority on each port of a bridge. The Regenerated User Priority value may be used to index the Traffic Class Table for each input port. This only has effect on media that support native User Priority. The default values for Regenerated User Priorities are the same as the User Priorities.')
dot1dUserPriorityRegenEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "P-BRIDGE-MIB", "dot1dUserPriority"))
if mibBuilder.loadTexts: dot1dUserPriorityRegenEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dUserPriorityRegenEntry.setDescription('A mapping of incoming User Priority to a Regenerated User Priority.')
dot1dUserPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: dot1dUserPriority.setStatus('current')
if mibBuilder.loadTexts: dot1dUserPriority.setDescription('The User Priority for a frame received on this port.')
dot1dRegenUserPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dRegenUserPriority.setStatus('current')
if mibBuilder.loadTexts: dot1dRegenUserPriority.setDescription('The Regenerated User Priority that the incoming User Priority is mapped to for this port. The value of this object MUST be retained across reinitializations of the management system.')
dot1dTrafficClassTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 3), )
if mibBuilder.loadTexts: dot1dTrafficClassTable.setReference('ISO/IEC 15802-3 Table 7-2')
if mibBuilder.loadTexts: dot1dTrafficClassTable.setStatus('current')
if mibBuilder.loadTexts: dot1dTrafficClassTable.setDescription('A table mapping evaluated User Priority to Traffic Class, for forwarding by the bridge. Traffic class is a number in the range (0..(dot1dPortNumTrafficClasses-1)).')
dot1dTrafficClassEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "P-BRIDGE-MIB", "dot1dTrafficClassPriority"))
if mibBuilder.loadTexts: dot1dTrafficClassEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dTrafficClassEntry.setDescription('User Priority to Traffic Class mapping.')
dot1dTrafficClassPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: dot1dTrafficClassPriority.setStatus('current')
if mibBuilder.loadTexts: dot1dTrafficClassPriority.setDescription('The Priority value determined for the received frame. This value is equivalent to the priority indicated in the tagged frame received, or one of the evaluated priorities, determined according to the media-type. For untagged frames received from Ethernet media, this value is equal to the dot1dPortDefaultUserPriority value for the ingress port. For untagged frames received from non-Ethernet media, this value is equal to the dot1dRegenUserPriority value for the ingress port and media-specific user priority.')
dot1dTrafficClass = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dTrafficClass.setStatus('current')
if mibBuilder.loadTexts: dot1dTrafficClass.setDescription('The Traffic Class the received frame is mapped to. The value of this object MUST be retained across reinitializations of the management system.')
dot1dPortOutboundAccessPriorityTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 4), )
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriorityTable.setReference('ISO/IEC 15802-3 Table 7-3')
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriorityTable.setStatus('current')
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriorityTable.setDescription('A table mapping Regenerated User Priority to Outbound Access Priority. This is a fixed mapping for all port types, with two options for 802.5 Token Ring.')
dot1dPortOutboundAccessPriorityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "P-BRIDGE-MIB", "dot1dRegenUserPriority"))
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriorityEntry.setDescription('Regenerated User Priority to Outbound Access Priority mapping.')
dot1dPortOutboundAccessPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriority.setStatus('current')
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriority.setDescription('The Outbound Access Priority the received frame is mapped to.')
dot1dPortGarpTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1), )
if mibBuilder.loadTexts: dot1dPortGarpTable.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGarpTable.setDescription('A table of GARP control information about every bridge port. This is indexed by dot1dBasePort.')
dot1dPortGarpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1, 1), )
dot1dBasePortEntry.registerAugmentions(("P-BRIDGE-MIB", "dot1dPortGarpEntry"))
dot1dPortGarpEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1dPortGarpEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGarpEntry.setDescription('GARP control information for a bridge port.')
dot1dPortGarpJoinTime = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1, 1, 1), TimeInterval().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpJoinTime.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGarpJoinTime.setDescription('The GARP Join time, in centiseconds. The value of this object MUST be retained across reinitializations of the management system.')
dot1dPortGarpLeaveTime = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1, 1, 2), TimeInterval().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpLeaveTime.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGarpLeaveTime.setDescription('The GARP Leave time, in centiseconds. The value of this object MUST be retained across reinitializations of the management system.')
dot1dPortGarpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1, 1, 3), TimeInterval().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGarpLeaveAllTime.setDescription('The GARP LeaveAll time, in centiseconds. The value of this object MUST be retained across reinitializations of the management system.')
dot1dPortGmrpTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1), )
if mibBuilder.loadTexts: dot1dPortGmrpTable.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGmrpTable.setDescription('A table of GMRP control and status information about every bridge port. Augments the dot1dBasePortTable.')
dot1dPortGmrpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1), )
dot1dBasePortEntry.registerAugmentions(("P-BRIDGE-MIB", "dot1dPortGmrpEntry"))
dot1dPortGmrpEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1dPortGmrpEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGmrpEntry.setDescription('GMRP control and status information for a bridge port.')
dot1dPortGmrpStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGmrpStatus.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGmrpStatus.setDescription('The administrative state of GMRP operation on this port. The value enabled(1) indicates that GMRP is enabled on this port in all VLANs as long as dot1dGmrpStatus is also enabled(1). A value of disabled(2) indicates that GMRP is disabled on this port in all VLANs: any GMRP packets received will be silently discarded, and no GMRP registrations will be propagated from other ports. Setting this to a value of enabled(1) will be stored by the agent but will only take effect on the GMRP protocol operation if dot1dGmrpStatus also indicates the value enabled(1). This object affects all GMRP Applicant and Registrar state machines on this port. A transition from disabled(2) to enabled(1) will cause a reset of all GMRP state machines on this port. The value of this object MUST be retained across reinitializations of the management system.')
dot1dPortGmrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortGmrpFailedRegistrations.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGmrpFailedRegistrations.setDescription('The total number of failed GMRP registrations, for any reason, in all VLANs, on this port.')
dot1dPortGmrpLastPduOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortGmrpLastPduOrigin.setStatus('current')
if mibBuilder.loadTexts: dot1dPortGmrpLastPduOrigin.setDescription('The Source MAC Address of the last GMRP message received on this port.')
dot1dPortRestrictedGroupRegistration = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortRestrictedGroupRegistration.setReference('IEEE 802.1t clause 10.3.2.3, 14.10.1.3.')
if mibBuilder.loadTexts: dot1dPortRestrictedGroupRegistration.setStatus('current')
if mibBuilder.loadTexts: dot1dPortRestrictedGroupRegistration.setDescription('The state of Restricted Group Registration on this port. If the value of this control is true(1), then creation of a new dynamic entry is permitted only if there is a Static Filtering Entry for the VLAN concerned, in which the Registrar Administrative Control value is Normal Registration. The value of this object MUST be retained across reinitializations of the management system.')
dot1dTpHCPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 4, 5), )
if mibBuilder.loadTexts: dot1dTpHCPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1dTpHCPortTable.setDescription('A table that contains information about every high- capacity port that is associated with this transparent bridge.')
dot1dTpHCPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 4, 5, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dTpPort"))
if mibBuilder.loadTexts: dot1dTpHCPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dTpHCPortEntry.setDescription('Statistics information for each high-capacity port of a transparent bridge.')
dot1dTpHCPortInFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpHCPortInFrames.setReference('ISO/IEC 15802-3 Section 14.6.1.1.3')
if mibBuilder.loadTexts: dot1dTpHCPortInFrames.setStatus('current')
if mibBuilder.loadTexts: dot1dTpHCPortInFrames.setDescription('The number of frames that have been received by this port from its segment. Note that a frame received on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
dot1dTpHCPortOutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpHCPortOutFrames.setReference('ISO/IEC 15802-3 Section 14.6.1.1.3')
if mibBuilder.loadTexts: dot1dTpHCPortOutFrames.setStatus('current')
if mibBuilder.loadTexts: dot1dTpHCPortOutFrames.setDescription('The number of frames that have been transmitted by this port to its segment. Note that a frame transmitted on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
dot1dTpHCPortInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpHCPortInDiscards.setReference('ISO/IEC 15802-3 Section 14.6.1.1.3')
if mibBuilder.loadTexts: dot1dTpHCPortInDiscards.setStatus('current')
if mibBuilder.loadTexts: dot1dTpHCPortInDiscards.setDescription('Count of valid frames that have been received by this port from its segment that were discarded (i.e., filtered) by the Forwarding Process.')
dot1dTpPortOverflowTable = MibTable((1, 3, 6, 1, 2, 1, 17, 4, 6), )
if mibBuilder.loadTexts: dot1dTpPortOverflowTable.setStatus('current')
if mibBuilder.loadTexts: dot1dTpPortOverflowTable.setDescription('A table that contains the most-significant bits of statistics counters for ports that are associated with this transparent bridge that are on high-capacity interfaces, as defined in the conformance clauses for this table. This table is provided as a way to read 64-bit counters for agents that support only SNMPv1. Note that the reporting of most-significant and least-significant counter bits separately runs the risk of missing an overflow of the lower bits in the interval between sampling. The manager must be aware of this possibility, even within the same varbindlist, when interpreting the results of a request or asynchronous notification.')
dot1dTpPortOverflowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 4, 6, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dTpPort"))
if mibBuilder.loadTexts: dot1dTpPortOverflowEntry.setStatus('current')
if mibBuilder.loadTexts: dot1dTpPortOverflowEntry.setDescription('The most significant bits of statistics counters for a high- capacity interface of a transparent bridge. Each object is associated with a corresponding object in dot1dTpPortTable that indicates the least significant bits of the counter.')
dot1dTpPortInOverflowFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInOverflowFrames.setReference('ISO/IEC 15802-3 Section 14.6.1.1.3')
if mibBuilder.loadTexts: dot1dTpPortInOverflowFrames.setStatus('current')
if mibBuilder.loadTexts: dot1dTpPortInOverflowFrames.setDescription('The number of times the associated dot1dTpPortInFrames counter has overflowed.')
dot1dTpPortOutOverflowFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortOutOverflowFrames.setReference('ISO/IEC 15802-3 Section 14.6.1.1.3')
if mibBuilder.loadTexts: dot1dTpPortOutOverflowFrames.setStatus('current')
if mibBuilder.loadTexts: dot1dTpPortOutOverflowFrames.setDescription('The number of times the associated dot1dTpPortOutFrames counter has overflowed.')
dot1dTpPortInOverflowDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInOverflowDiscards.setReference('ISO/IEC 15802-3 Section 14.6.1.1.3')
if mibBuilder.loadTexts: dot1dTpPortInOverflowDiscards.setStatus('current')
if mibBuilder.loadTexts: dot1dTpPortInOverflowDiscards.setDescription('The number of times the associated dot1dTpPortInDiscards counter has overflowed.')
pBridgeConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 2))
pBridgeGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 2, 1))
pBridgeCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 2, 2))
pBridgeExtCapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 1)).setObjects(("P-BRIDGE-MIB", "dot1dDeviceCapabilities"), ("P-BRIDGE-MIB", "dot1dPortCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgeExtCapGroup = pBridgeExtCapGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgeExtCapGroup.setDescription('A collection of objects indicating the optional capabilities of the device.')
pBridgeDeviceGmrpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 2)).setObjects(("P-BRIDGE-MIB", "dot1dGmrpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgeDeviceGmrpGroup = pBridgeDeviceGmrpGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgeDeviceGmrpGroup.setDescription('A collection of objects providing device-level control for the Multicast Filtering extended bridge services.')
pBridgeDevicePriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 3)).setObjects(("P-BRIDGE-MIB", "dot1dTrafficClassesEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgeDevicePriorityGroup = pBridgeDevicePriorityGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgeDevicePriorityGroup.setDescription('A collection of objects providing device-level control for the Priority services.')
pBridgeDefaultPriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 4)).setObjects(("P-BRIDGE-MIB", "dot1dPortDefaultUserPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgeDefaultPriorityGroup = pBridgeDefaultPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgeDefaultPriorityGroup.setDescription('A collection of objects defining the User Priority applicable to each port for media that do not support native User Priority.')
pBridgeRegenPriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 5)).setObjects(("P-BRIDGE-MIB", "dot1dRegenUserPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgeRegenPriorityGroup = pBridgeRegenPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgeRegenPriorityGroup.setDescription('A collection of objects defining the User Priorities applicable to each port for media that support native User Priority.')
pBridgePriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 6)).setObjects(("P-BRIDGE-MIB", "dot1dPortNumTrafficClasses"), ("P-BRIDGE-MIB", "dot1dTrafficClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgePriorityGroup = pBridgePriorityGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgePriorityGroup.setDescription('A collection of objects defining the traffic classes within a bridge for each evaluated User Priority.')
pBridgeAccessPriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 7)).setObjects(("P-BRIDGE-MIB", "dot1dPortOutboundAccessPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgeAccessPriorityGroup = pBridgeAccessPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgeAccessPriorityGroup.setDescription('A collection of objects defining the media-dependent outbound access level for each priority.')
pBridgePortGarpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 8)).setObjects(("P-BRIDGE-MIB", "dot1dPortGarpJoinTime"), ("P-BRIDGE-MIB", "dot1dPortGarpLeaveTime"), ("P-BRIDGE-MIB", "dot1dPortGarpLeaveAllTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgePortGarpGroup = pBridgePortGarpGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgePortGarpGroup.setDescription('A collection of objects providing port level control and status information for GARP operation.')
pBridgePortGmrpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 9)).setObjects(("P-BRIDGE-MIB", "dot1dPortGmrpStatus"), ("P-BRIDGE-MIB", "dot1dPortGmrpFailedRegistrations"), ("P-BRIDGE-MIB", "dot1dPortGmrpLastPduOrigin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgePortGmrpGroup = pBridgePortGmrpGroup.setStatus('deprecated')
if mibBuilder.loadTexts: pBridgePortGmrpGroup.setDescription('A collection of objects providing port level control and status information for GMRP operation.')
pBridgeHCPortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 10)).setObjects(("P-BRIDGE-MIB", "dot1dTpHCPortInFrames"), ("P-BRIDGE-MIB", "dot1dTpHCPortOutFrames"), ("P-BRIDGE-MIB", "dot1dTpHCPortInDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgeHCPortGroup = pBridgeHCPortGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgeHCPortGroup.setDescription('A collection of objects providing 64-bit statistics counters for high-capacity bridge ports.')
pBridgePortOverflowGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 11)).setObjects(("P-BRIDGE-MIB", "dot1dTpPortInOverflowFrames"), ("P-BRIDGE-MIB", "dot1dTpPortOutOverflowFrames"), ("P-BRIDGE-MIB", "dot1dTpPortInOverflowDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgePortOverflowGroup = pBridgePortOverflowGroup.setStatus('current')
if mibBuilder.loadTexts: pBridgePortOverflowGroup.setDescription('A collection of objects providing overflow statistics counters for high-capacity bridge ports.')
pBridgePortGmrpGroup2 = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 12)).setObjects(("P-BRIDGE-MIB", "dot1dPortGmrpStatus"), ("P-BRIDGE-MIB", "dot1dPortGmrpFailedRegistrations"), ("P-BRIDGE-MIB", "dot1dPortGmrpLastPduOrigin"), ("P-BRIDGE-MIB", "dot1dPortRestrictedGroupRegistration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgePortGmrpGroup2 = pBridgePortGmrpGroup2.setStatus('current')
if mibBuilder.loadTexts: pBridgePortGmrpGroup2.setDescription('A collection of objects providing port level control and status information for GMRP operation.')
pBridgeCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 17, 6, 2, 2, 1)).setObjects(("P-BRIDGE-MIB", "pBridgeExtCapGroup"), ("P-BRIDGE-MIB", "pBridgeDeviceGmrpGroup"), ("P-BRIDGE-MIB", "pBridgeDevicePriorityGroup"), ("P-BRIDGE-MIB", "pBridgeDefaultPriorityGroup"), ("P-BRIDGE-MIB", "pBridgeRegenPriorityGroup"), ("P-BRIDGE-MIB", "pBridgePriorityGroup"), ("P-BRIDGE-MIB", "pBridgeAccessPriorityGroup"), ("P-BRIDGE-MIB", "pBridgePortGarpGroup"), ("P-BRIDGE-MIB", "pBridgePortGmrpGroup"), ("P-BRIDGE-MIB", "pBridgeHCPortGroup"), ("P-BRIDGE-MIB", "pBridgePortOverflowGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgeCompliance = pBridgeCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: pBridgeCompliance.setDescription('The compliance statement for device support of Priority and Multicast Filtering extended bridging services.')
pBridgeCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 17, 6, 2, 2, 2)).setObjects(("P-BRIDGE-MIB", "pBridgeExtCapGroup"), ("P-BRIDGE-MIB", "pBridgeDeviceGmrpGroup"), ("P-BRIDGE-MIB", "pBridgeDevicePriorityGroup"), ("P-BRIDGE-MIB", "pBridgeDefaultPriorityGroup"), ("P-BRIDGE-MIB", "pBridgeRegenPriorityGroup"), ("P-BRIDGE-MIB", "pBridgePriorityGroup"), ("P-BRIDGE-MIB", "pBridgeAccessPriorityGroup"), ("P-BRIDGE-MIB", "pBridgePortGarpGroup"), ("P-BRIDGE-MIB", "pBridgePortGmrpGroup2"), ("P-BRIDGE-MIB", "pBridgeHCPortGroup"), ("P-BRIDGE-MIB", "pBridgePortOverflowGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pBridgeCompliance2 = pBridgeCompliance2.setStatus('current')
if mibBuilder.loadTexts: pBridgeCompliance2.setDescription('The compliance statement for device support of Priority and Multicast Filtering extended bridging services.')
mibBuilder.exportSymbols("P-BRIDGE-MIB", dot1dTrafficClass=dot1dTrafficClass, dot1dPortOutboundAccessPriority=dot1dPortOutboundAccessPriority, dot1dPortGarpLeaveTime=dot1dPortGarpLeaveTime, dot1dPortGmrpEntry=dot1dPortGmrpEntry, dot1dDeviceCapabilities=dot1dDeviceCapabilities, dot1dGarp=dot1dGarp, pBridgeCompliance2=pBridgeCompliance2, dot1dPortGmrpStatus=dot1dPortGmrpStatus, dot1dPortGmrpLastPduOrigin=dot1dPortGmrpLastPduOrigin, dot1dUserPriorityRegenEntry=dot1dUserPriorityRegenEntry, dot1dTpHCPortOutFrames=dot1dTpHCPortOutFrames, dot1dTpPortInOverflowDiscards=dot1dTpPortInOverflowDiscards, dot1dPortCapabilities=dot1dPortCapabilities, pBridgeDevicePriorityGroup=pBridgeDevicePriorityGroup, pBridgePortGarpGroup=pBridgePortGarpGroup, dot1dTrafficClassEntry=dot1dTrafficClassEntry, pBridgeDeviceGmrpGroup=pBridgeDeviceGmrpGroup, dot1dGmrp=dot1dGmrp, dot1dPortRestrictedGroupRegistration=dot1dPortRestrictedGroupRegistration, pBridgeConformance=pBridgeConformance, pBridgeCompliances=pBridgeCompliances, pBridgePortGmrpGroup2=pBridgePortGmrpGroup2, dot1dPortDefaultUserPriority=dot1dPortDefaultUserPriority, dot1dPortCapabilitiesTable=dot1dPortCapabilitiesTable, dot1dPortGarpJoinTime=dot1dPortGarpJoinTime, dot1dPortGmrpTable=dot1dPortGmrpTable, pBridgeDefaultPriorityGroup=pBridgeDefaultPriorityGroup, pBridgeCompliance=pBridgeCompliance, dot1dExtBase=dot1dExtBase, pBridgeHCPortGroup=pBridgeHCPortGroup, dot1dPortCapabilitiesEntry=dot1dPortCapabilitiesEntry, dot1dGmrpStatus=dot1dGmrpStatus, pBridgePortOverflowGroup=pBridgePortOverflowGroup, dot1dTpHCPortEntry=dot1dTpHCPortEntry, dot1dUserPriorityRegenTable=dot1dUserPriorityRegenTable, dot1dTpHCPortInFrames=dot1dTpHCPortInFrames, dot1dPortOutboundAccessPriorityEntry=dot1dPortOutboundAccessPriorityEntry, dot1dPortGarpTable=dot1dPortGarpTable, pBridgeGroups=pBridgeGroups, dot1dTrafficClassesEnabled=dot1dTrafficClassesEnabled, dot1dTrafficClassTable=dot1dTrafficClassTable, dot1dTpPortOverflowEntry=dot1dTpPortOverflowEntry, pBridgeMIB=pBridgeMIB, dot1dPortPriorityEntry=dot1dPortPriorityEntry, dot1dPortGmrpFailedRegistrations=dot1dPortGmrpFailedRegistrations, dot1dTpPortOverflowTable=dot1dTpPortOverflowTable, pBridgePriorityGroup=pBridgePriorityGroup, dot1dTpPortOutOverflowFrames=dot1dTpPortOutOverflowFrames, pBridgeRegenPriorityGroup=pBridgeRegenPriorityGroup, EnabledStatus=EnabledStatus, PYSNMP_MODULE_ID=pBridgeMIB, dot1dPortGarpLeaveAllTime=dot1dPortGarpLeaveAllTime, dot1dTpPortInOverflowFrames=dot1dTpPortInOverflowFrames, pBridgeMIBObjects=pBridgeMIBObjects, pBridgeAccessPriorityGroup=pBridgeAccessPriorityGroup, pBridgePortGmrpGroup=pBridgePortGmrpGroup, dot1dPortPriorityTable=dot1dPortPriorityTable, dot1dUserPriority=dot1dUserPriority, dot1dPortGarpEntry=dot1dPortGarpEntry, dot1dPortOutboundAccessPriorityTable=dot1dPortOutboundAccessPriorityTable, dot1dTrafficClassPriority=dot1dTrafficClassPriority, dot1dTpHCPortInDiscards=dot1dTpHCPortInDiscards, dot1dRegenUserPriority=dot1dRegenUserPriority, dot1dTpHCPortTable=dot1dTpHCPortTable, pBridgeExtCapGroup=pBridgeExtCapGroup, dot1dPortNumTrafficClasses=dot1dPortNumTrafficClasses, dot1dPriority=dot1dPriority)
