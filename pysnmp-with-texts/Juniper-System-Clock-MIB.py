#
# PySNMP MIB module Juniper-System-Clock-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-System-Clock-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:04:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniEnable, = mibBuilder.importSymbols("Juniper-TC", "JuniEnable")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, iso, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, Counter64, TimeTicks, NotificationType, Integer32, Unsigned32, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "Counter64", "TimeTicks", "NotificationType", "Integer32", "Unsigned32", "MibIdentifier", "ModuleIdentity")
DisplayString, RowStatus, TruthValue, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "DateAndTime", "TextualConvention")
juniSysClockMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56))
juniSysClockMIB.setRevisions(('2007-03-22 14:00', '2005-12-14 14:01', '2003-09-15 14:01', '2003-09-12 13:37', '2002-04-04 14:56',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniSysClockMIB.setRevisionsDescriptions(('Incorporate 2007 U.S.A. Daylight Saving Time changes.', 'Added juniNtpPeerLastUpdateTime to Peer Table.', 'Replaced Unisphere names with Juniper names.', 'Added an indicator to stratum number that no stratum is set. Added traps for significant NTP state changes. Added replacement clock offset and frequency error objects with DisplaySting syntax.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniSysClockMIB.setLastUpdated('200512141401Z')
if mibBuilder.loadTexts: juniSysClockMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniSysClockMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniSysClockMIB.setDescription("The System Clock and Network Time Protocol (NTP) MIB for the Juniper Networks enterprise. The System Clock section of the MIB allows setting the system clock time, date and timezone. All definitions are based on the Gregorian calendar. The NTP portion of the MIB provides management for the local NTP client/server, which adheres to RFC 1305, the 'Network Time Protocol (Version 3) Specification, Implementation and Analysis'.")
class JuniSysClockMonth(TextualConvention, Integer32):
    description = 'The month of the year.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12))

class JuniSysClockWeekOfTheMonth(TextualConvention, Integer32):
    description = 'The week of the month.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("weekFirst", 0), ("weekOne", 1), ("weekTwo", 2), ("weekThree", 3), ("weekFour", 4), ("weekFive", 5), ("weekLast", 6))

class JuniSysClockDayOfTheWeek(TextualConvention, Integer32):
    description = 'The day of the week.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6))

class JuniSysClockHour(TextualConvention, Integer32):
    description = 'The hour of the day. Uses 24-hour clock format.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 23)

class JuniSysClockMinute(TextualConvention, Integer32):
    description = 'The minute of the hour.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 59)

class JuniNtpTimeStamp(TextualConvention, OctetString):
    reference = "D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992. J. Postel & J. Reynolds, 'NVT ASCII character set', RFC-854, May 1983."
    description = 'The ASCII character representation of time in 64-bit unsigned long format, where the integer part is the first 32 bits and the fraction part is the last 32 bits. This represents the time stamp as defined in the NTP packet header format, which is the number of seconds since 1 January 1900. The textual form of an unsigned decimal number is taken from the NVT ASCII graphics character set (codes 46 and 48 through 57).'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 21)

class JuniNtpClockSignedTime(TextualConvention, OctetString):
    reference = "D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992. J. Postel & J. Reynolds, 'NVT ASCII character set', RFC-854, May 1983."
    description = 'The ASCII character representation of NTP clock error time in seconds as a signed value. The first 16 bits represents integer part of the signed value and the last 16 bits represents the fraction part of the signed value. The textual form of a signed decimal number is taken from the NVT ASCII graphics character set (codes 43, 45, 46 and 48 through 57).'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 11)

class JuniNtpClockUnsignedTime(TextualConvention, OctetString):
    reference = "D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992. J. Postel & J. Reynolds, 'NVT ASCII character set', RFC-854, May 1983"
    description = 'The ASCII character representation of NTP clock error time in seconds as an unsigned value. The first 8 bits represents the integer part of the unsigned value and the last 48 bits represents the fraction part of the unsigned value. The textual form of an unsigned decimal number is taken from the NVT ASCII graphics character set (codes 46 and 48 through 57).'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 11)

juniSysClockObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1))
juniNtpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2))
juniSysClockTime = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 1))
juniSysClockDst = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2))
juniSysClockDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 1, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDateAndTime.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDateAndTime.setDescription("This object is used to manage the system clock time, date and timezone. If the Network Time Protocol (NTP) is enabled, attempts to set this object will result in an inconsistantValue error. For sets, the implementation may check the value of the year and if it is outside of a 'reasonable' range (e.g., 1999..2035) it may return an inconsistantValue error. Only system clock time and date will be set if the timezone offset is not set along with the timezone name.")
juniSysClockTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: juniSysClockTimeZoneName.setDescription('Name of the timezone. Timezone name take effects only with its offset set along with it.')
juniSysClockDstName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstName.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstName.setDescription('The name of the daylight savings time (DST) zone. Setting any standard US DST timezone name with recurrent mode will result in turning on corresponding DST recurrent mode values for the timezone.')
juniSysClockDstOffset = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(60)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstOffset.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstOffset.setDescription('The offset, in minutes, from the base timezone for the DST.')
juniSysClockDstStatus = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("recurrent", 1), ("absolute", 2), ("recognizedUS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstStatus.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstStatus.setDescription('The state of DST. With each state, only corresponding objects can be set. When the state is off(0), set values will be ignored.')
juniSysClockDstAbsoluteStartTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstAbsoluteStartTime.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstAbsoluteStartTime.setDescription('This object represents the start time for absolute DST. Only the year, month, day, hour and minutes fields of the object are used. The other fields will be ignored for a Set operation and will return zeroes for a Get operation.')
juniSysClockDstAbsoluteStopTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 5), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstAbsoluteStopTime.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstAbsoluteStopTime.setDescription('This object represents the stop time for absolute DST. Only the year, month, day, hour and minutes fields of the object are used. The other fields will be ignored for a Set operation and will return zeroes when read.')
juniSysClockDstRecurStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 6), JuniSysClockMonth().clone('march')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStartMonth.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStartMonth.setDescription('The start month for DST recurrence. The default value is based on the 2007 law for the USA.')
juniSysClockDstRecurStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 7), JuniSysClockWeekOfTheMonth().clone('weekTwo')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStartWeek.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStartWeek.setDescription('The start week of the month for DST recurrence. The default value is based on the 2007 law for the USA.')
juniSysClockDstRecurStartDay = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 8), JuniSysClockDayOfTheWeek().clone('sunday')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStartDay.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStartDay.setDescription('The start day of the week for DST recurrence. The default value is based on the 2007 law for the USA.')
juniSysClockDstRecurStartHour = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 9), JuniSysClockHour().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStartHour.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStartHour.setDescription('The start hour for DST recurrence. The default value is based on the 2007 law for the USA.')
juniSysClockDstRecurStartMinute = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 10), JuniSysClockMinute()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStartMinute.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStartMinute.setDescription('The start minute for DST recurrence. The default value is based on the 2007 law for the USA.')
juniSysClockDstRecurStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 11), JuniSysClockMonth().clone('november')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStopMonth.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStopMonth.setDescription('The stop month for DST recurrence. The default value is based on the 2007 law for the USA.')
juniSysClockDstRecurStopWeek = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 12), JuniSysClockWeekOfTheMonth().clone('weekFirst')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStopWeek.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStopWeek.setDescription('The stop week of the month for DST recurrence. The default value is based on the 2007 law for the USA.')
juniSysClockDstRecurStopDay = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 13), JuniSysClockDayOfTheWeek().clone('sunday')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStopDay.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStopDay.setDescription('The stop day of the week for DST recurrence. The default value is based on the 2007 law for the USA.')
juniSysClockDstRecurStopHour = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 14), JuniSysClockHour().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStopHour.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStopHour.setDescription('The stop hour for DST recurrence. The default value is based on the 2007 law for the USA.')
juniSysClockDstRecurStopMinute = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 1, 2, 15), JuniSysClockMinute()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniSysClockDstRecurStopMinute.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstRecurStopMinute.setDescription('The stop minutes for DST recurrence. The default value is based on the 2007 law for the USA.')
juniNtpSysClock = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1))
juniNtpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2))
juniNtpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 3))
juniNtpPeers = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4))
juniNtpAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 5))
juniNtpSysClockState = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("neverFrequencyCalibrated", 0), ("frequencyCalibrated", 1), ("setToServerTime", 2), ("frequencyCalibrationIsGoingOn", 3), ("synchronized", 4), ("spikeDetected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockState.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpSysClockState.setStatus('current')
if mibBuilder.loadTexts: juniNtpSysClockState.setDescription('Displays the state of the NTP on the system clock. Clock states are: 0 - Clock has never been calibrated for frequency errors 1 - Clock frequency errors calibration has done 2 - Clock time has set to server time 3 - Clock frequency errors calibration is going on 4 - Clock has synchronized its time 5 - Clock has detected spike ')
juniNtpSysClockOffsetError = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 2), JuniNtpClockSignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockOffsetError.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpSysClockOffsetError.setStatus('deprecated')
if mibBuilder.loadTexts: juniNtpSysClockOffsetError.setDescription('Displays the estimated offset error of the system clock relative to the master clock in seconds. This variable can take on both positive and negative values; the value will be positive if the system clock is ahead of the master clock; the value will be negative if the system clock is behind the master clock. This offset value will be used by the internal NTP filter algorithm to adjust the system clock to correct any error it may have. This object has been deprecated in favor of the juniNtpSysClockOffsetErrorNew object, which uses DisplayString for its SYNTAX.')
juniNtpSysClockFrequencyError = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 3), Integer32()).setUnits('ppm').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockFrequencyError.setStatus('deprecated')
if mibBuilder.loadTexts: juniNtpSysClockFrequencyError.setDescription('Displays the system clock frequency error in parts per million (ppm). It will always be a positive value. This error adjustment happens when the system reboots or the NTP is enabled for the first time and it may take up to fifteen minutes to complete. Each system clock oscillator interrupts to update its clock. If, for example, it interrupts one million time per second then it has a resolution of microseconds. This is also the frequency of the clock update. Frequency error means that this system clock failed to update by parts per millionth of a second. For example, if the frequency error is 1ppm, it means the clock is ahead by 0.864 second in a day, and therefore the clock will need to be corrected by that amount in the next 24 hours for the clock to be accurate. The frequency error varies with temperature. Therefore the system clock will usually need to be corrected when the system boots, based on the temperature at which it is operating. This object has been deprecated in favor of the juniNtpSysClockFrequencyErrorNew object, which uses DisplayString for its SYNTAX.')
juniNtpSysClockRootDelay = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 4), JuniNtpClockSignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockRootDelay.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpSysClockRootDelay.setStatus('current')
if mibBuilder.loadTexts: juniNtpSysClockRootDelay.setDescription('This indicates the NTP time message total Network roundtrip delay to the primary reference source at the root of the synchronization subnet, in seconds. Note that this variable can take on both positive and negative values, depending on clock precision and skew.')
juniNtpSysClockRootDispersion = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 5), JuniNtpClockUnsignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockRootDispersion.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpSysClockRootDispersion.setStatus('current')
if mibBuilder.loadTexts: juniNtpSysClockRootDispersion.setDescription('This indicates the maximum error relative to the primary reference source at the root of the synchronization subnet, in seconds. Only positive values greater than zero are possible.')
juniNtpSysClockStratumNumber = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockStratumNumber.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpSysClockStratumNumber.setStatus('current')
if mibBuilder.loadTexts: juniNtpSysClockStratumNumber.setDescription('Displays the stratum number of the system clock. -1 - shows stratum is not set 1 - primary reference (e.g. calibrated atomic clock, radio clock) 2-255 - secondary reference (via NTP) ')
juniNtpSysClockLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 7), JuniNtpTimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: juniNtpSysClockLastUpdateTime.setDescription('Displays the time of the system clock at the time when it was last updated by any associated NTP server(peer).')
juniNtpSysClockLastUpdateServer = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockLastUpdateServer.setStatus('current')
if mibBuilder.loadTexts: juniNtpSysClockLastUpdateServer.setDescription('Displays the IP address of the NTP server (peer) which done last update to the system clock.')
juniNtpSysClockOffsetErrorNew = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockOffsetErrorNew.setStatus('current')
if mibBuilder.loadTexts: juniNtpSysClockOffsetErrorNew.setDescription('Displays the estimated offset error of the system clock relative to the master clock in seconds. This variable can take on both positive and negative values; the value will be positive if the system clock is ahead of the master clock; the value will be negative if the system clock is behind the master clock. This offset value will be used by the internal NTP filter algorithm to adjust the system clock to correct any error it may have.')
juniNtpSysClockFrequencyErrorNew = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setUnits('ppm').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpSysClockFrequencyErrorNew.setStatus('current')
if mibBuilder.loadTexts: juniNtpSysClockFrequencyErrorNew.setDescription('Displays the system clock frequency error in parts per million (ppm). It will always be a positive value. This error adjustment happens when the system reboots or the NTP is enabled for the first time and it may take up to fifteen minutes to complete. Each system clock oscillator interrupts to update its clock. If, for example, it interrupts one million time per second then it has a resolution of microseconds. This is also the frequency of the clock update. Frequency error means that this system clock failed to update by parts per millionth of a second. For example, if the frequency error is 1ppm, it means the clock is ahead by 0.864 second in a day, and therefore the clock will need to be corrected by that amount in the next 24 hours for the clock to be accurate. The frequency error varies with temperature. Therefore the system clock will usually need to be corrected when the system boots, based on the temperature at which it is operating.')
juniNtpClientAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 1), JuniEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpClientAdminStatus.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientAdminStatus.setDescription('By enabling/disabling the NTP admin status, the router is enabled/ disabled to run as NTP client for the correction and synchronization of the system clock time with the reliable time sources (stratum time servers). At any given time, only one NTP client can run on any router on the system. Sets the NTP admin status along with the routerIndex where NTP client has be enabled in that router context.')
juniNtpClientSystemRouterIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpClientSystemRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientSystemRouterIndex.setDescription('The index of the router to be enabled or disabled as the system-wide NTP client. Always set along with juniNtpClientAdminStatus. This is also the router context when NTP is enabled.')
juniNtpClientPacketSourceIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpClientPacketSourceIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientPacketSourceIfIndex.setDescription("When the NTP client sends an NTP packet, the source IP address is normally set to the address of the interface through which the NTP packet is sent. Sets all the outgoing NTP packets' source ifIndex to one specific ifIndex on the NTP client from which the source ifIndex is taken. This ifIndex will be the index of the IP interface as NTP is IP/UDP based. If the value is zero, it means no interface has configured.")
juniNtpClientBroadcastDelay = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999)).clone(3000)).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpClientBroadcastDelay.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientBroadcastDelay.setDescription('Allows to set the estimated round-trip broadcast delay between the system client and broadcast servers (peers).')
juniNtpClientIfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 5), )
if mibBuilder.loadTexts: juniNtpClientIfTable.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientIfTable.setDescription("Lists all the NTP client's interfaces enabled for NTP. All the IP interfaces on the NTP client are by default enabled for NTP communications and can be disabled individually on each IP interface. If desired, any IP interface can be blocked from participating in NTP communication.")
juniNtpClientIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 5, 1), ).setIndexNames((0, "Juniper-System-Clock-MIB", "juniNtpClientIfRouterIndex"), (0, "Juniper-System-Clock-MIB", "juniNtpClientIfIfIndex"))
if mibBuilder.loadTexts: juniNtpClientIfEntry.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientIfEntry.setDescription('Each entry is per interface config for NTP.')
juniNtpClientIfRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniNtpClientIfRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientIfRouterIndex.setDescription('The index of the router to be enabled or disabled as an NTP client.')
juniNtpClientIfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: juniNtpClientIfIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientIfIfIndex.setDescription('The ifIndex of the interface on the NTP client.')
juniNtpClientIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniNtpClientIfDisable.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientIfDisable.setDescription('Enable/disable NTP on the interface.')
juniNtpClientIfIsBroadcastClient = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 5, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniNtpClientIfIsBroadcastClient.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientIfIsBroadcastClient.setDescription("Enable/disable NTP client's interface as broadcast client. As NTP client's broadcast interface, it receives the broadcast NTP messages from the associated servers (peers).")
juniNtpClientIfIsBroadcastServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 5, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniNtpClientIfIsBroadcastServer.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientIfIsBroadcastServer.setDescription("Enable/disable NTP interface as broadcast server. As NTP server's broadcast interface, it broadcast NTP messages on the interfac.")
juniNtpClientIfIsBroadcastServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpClientIfIsBroadcastServerVersion.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientIfIsBroadcastServerVersion.setDescription('NTP Server Version on the NTP broadcast server interface. Default version is 3')
juniNtpClientIfIsBroadcastServerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 17)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpClientIfIsBroadcastServerDelay.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientIfIsBroadcastServerDelay.setDescription('Poll Interval for broadcasting NTP messages in seconds as a power of two. Default value is 6(64s). Minimal value is 4(16s) and maximum value is 17 (36.4h).')
juniNtpServerStratumNumber = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpServerStratumNumber.setStatus('current')
if mibBuilder.loadTexts: juniNtpServerStratumNumber.setDescription("Configure the stratum number (level) of the NTP server. Due to one system clock, setting the stratum number have a effect of setting all the NTP servers' stratum to one stratum number(level) on the system.")
juniNtpServerAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 3, 2), JuniEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpServerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: juniNtpServerAdminStatus.setDescription('Enable/disable the NTP server on the router.')
juniNtpPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 1), )
if mibBuilder.loadTexts: juniNtpPeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerCfgTable.setDescription('This table provides information on the peers with which the NTP client has associations. The associated peers(servers) to client will be running different hosts.')
juniNtpPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 1, 1), ).setIndexNames((0, "Juniper-System-Clock-MIB", "juniNtpClientIfRouterIndex"), (0, "Juniper-System-Clock-MIB", "juniNtpPeerCfgIpAddress"))
if mibBuilder.loadTexts: juniNtpPeerCfgEntry.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpPeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerCfgEntry.setDescription("Each entry provides one NTP server's configuration information. Each peer is uniquely identified by the routerIndex of the client to which it has to be associated and the Ip address of the remote server(peer) itself. Entries are automatically created when the user configures the remote peer NTP server info on the system which has to be associated with the NTP client and deleted when the user removes the peer association from the NTP server.")
juniNtpPeerCfgIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: juniNtpPeerCfgIpAddress.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerCfgIpAddress.setDescription("Peer's IP address.")
juniNtpPeerCfgNtpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniNtpPeerCfgNtpVersion.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerCfgNtpVersion.setDescription('Displays the peer server NTP software version.')
juniNtpPeerCfgPacketSourceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniNtpPeerCfgPacketSourceIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerCfgPacketSourceIfIndex.setDescription("All the outgoing NTP packets' source address can be configured to one specific interface address on the NTP peer server. This object allows to configure all the outgoing NTP packets' source IP ifIndex to one specific IP ifIndex on the NTP server.")
juniNtpPeerCfgIsPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniNtpPeerCfgIsPreferred.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerCfgIsPreferred.setDescription('Select whether this NTP server is a preferred time source to the NTP client to which it has association.')
juniNtpPeerCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniNtpPeerCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerCfgRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniNtpPeerCfgRowStatus ')
juniNtpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2), )
if mibBuilder.loadTexts: juniNtpPeerTable.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerTable.setDescription('This table provides information on the peers with which the NTP client has associations. The associated peers (servers) to client will be running different hosts.')
juniNtpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1), ).setIndexNames((0, "Juniper-System-Clock-MIB", "juniNtpClientIfRouterIndex"), (0, "Juniper-System-Clock-MIB", "juniNtpPeerCfgIpAddress"))
if mibBuilder.loadTexts: juniNtpPeerEntry.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerEntry.setDescription('Each entry provides one NTP server (peer) information. Each peer is uniquely identified by the routerIndex of the client to which it has to be associated and the Ip address of the remote server (peer) itself. Entries are automatically created when the user configures the remote peer NTP server info on the system which has to be associated with the NTP client and deleted when the user removes the peer association from the NTP server.')
juniNtpPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerState.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerState.setDescription("Displays the peer server association state to NTP client on the system. Bit Peer State Description --- ---------- ------------------------------------------------ 0 master Means NTP client on the system has chosen this peer server as the master. 1 configured Confirms peer server configured for the NTP client. 2 selected NTP client will consider this peer server when it chooses the master. 3 unusable Indication that the server does not meet the initial criteria for the master 4 preferred Indicates as preferred time source. 5 correct NTP client considers the peer server's clock is reasonably correct. 6 incorrect NTP client considers the peer server's clock is not reasonably correct 7 reserved Each bit position value of 0 and 1 disables and enables that peer state respectively. ")
juniNtpPeerStratumNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerStratumNumber.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerStratumNumber.setDescription('Displays the peer server system clock stratum number.')
juniNtpPeerAssociationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("broacastServer", 0), ("multicastServer", 1), ("unicastServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerAssociationMode.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerAssociationMode.setDescription('Displays the peer server association mode to the NTP client on the router. broadcastServer - Broadcast only NTP messages. multicastServer - Broadcast only NTP messages for IGMP multicast Network. unicastServer - Only sends NTP poll messages to the peer servers.')
juniNtpPeerBroadcastInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 4), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerBroadcastInterval.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerBroadcastInterval.setDescription('Displays the broadcast time interval of the NTP time messages from the peer when the peer is enabled either as broadcast server or multicast server.')
juniNtpPeerPolledInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerPolledInterval.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerPolledInterval.setDescription('Displays the time interval at which peer will be polled by NTP client with which peer has associations when it is enabled as unicast server.')
juniNtpPeerPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerPollingInterval.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerPollingInterval.setDescription('Displays the time interval at which peer will poll the servers with which peer has associations when it is enabled as unicast server.')
juniNtpPeerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 7), JuniNtpClockSignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerDelay.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerDelay.setDescription('Displays the peer server broadcast delay.')
juniNtpPeerDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 8), JuniNtpClockUnsignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerDispersion.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerDispersion.setDescription('Displays the peer server dispersion.')
juniNtpPeerOffsetError = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 9), JuniNtpClockSignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerOffsetError.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerOffsetError.setDescription('Displays the peer server offset error.')
juniNtpPeerReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerReachability.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerReachability.setDescription('Displays the peer reachability status. An 8-bit number that shows whether or not the peer server responded to the last eight requests to the server to which it has association; one indicates a response, zero indicates no response. Count from rightmost to leftmost as latest to later requests as reachability states. For example, 0b11111111 indicates that the peer server responded to the last eight requests. If the system client reaches one peer server less often than it does other peer servers, that server is not a good choice for the master')
juniNtpPeerRootDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 11), JuniNtpClockSignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerRootDelay.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerRootDelay.setDescription('Displays the peer server root delay.')
juniNtpPeerRootDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 12), JuniNtpClockUnsignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerRootDispersion.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerRootDispersion.setDescription('Displays the peer server root dispersion.')
juniNtpPeerRootSyncDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 13), JuniNtpClockSignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerRootSyncDistance.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerRootSyncDistance.setDescription('Displays the peer server synchronization distance. Measure of the total time error since the update in the path to the stratum 1 server.')
juniNtpPeerRootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 14), JuniNtpTimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerRootTime.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerRootTime.setDescription('Last time at which the stratum 1 server sent clock update reply to the this peer server.')
juniNtpPeerRootTimeUpdateServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerRootTimeUpdateServer.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerRootTimeUpdateServer.setDescription('IP address of the stratum 1 server last updated the peer server.')
juniNtpPeerReceiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 16), JuniNtpTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerReceiveTime.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerReceiveTime.setDescription('If the peer server is either broadcast or multicast server, this will represent time stamp at which NTP client received the broadcast message. If it is unicast server, it represents the time stamp at which the peer has sent the response to the NTP client poll message.')
juniNtpPeerTransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 17), JuniNtpTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerTransmitTime.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerTransmitTime.setDescription('If the peer server is either broadcast or multicast server, this will represent time stamp at which peer sent the broadcast message. If it is unicast server, it represents the time stamp at which the NTP client has received response from the peer.')
juniNtpPeerRequestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 18), JuniNtpTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerRequestTime.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerRequestTime.setDescription('For unicast server, it represents the time stamp at which the system client sent NTP request to the peer.')
juniNtpPeerPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 19), JuniNtpClockSignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerPrecision.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerPrecision.setDescription("Length of the clock tick (interrupt interval) of the server's clock.")
juniNtpPeerLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 2, 1, 20), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerLastUpdateTime.setDescription('Displays the seconds since the last update from the NTP server')
juniNtpPeerFilterRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 3), )
if mibBuilder.loadTexts: juniNtpPeerFilterRegisterTable.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpPeerFilterRegisterTable.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerFilterRegisterTable.setDescription('The following table contains NTP state variables used by the NTP clock filter and selection algorithms. This table depicts a shift register. Each stage in the shift register is a 3-tuple consisting of the measured clock offset, measured clock delay and measured clock dispersion associated with a single observation. The NTP clock-filter and selection algorithms are designed to minimize the error in the calculated time by using the objects values in the filter table.')
juniNtpPeerFilterRegisterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 3, 1), ).setIndexNames((0, "Juniper-System-Clock-MIB", "juniNtpPeerCfgIpAddress"), (0, "Juniper-System-Clock-MIB", "juniNtpPeerFilterIndex"))
if mibBuilder.loadTexts: juniNtpPeerFilterRegisterEntry.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpPeerFilterRegisterEntry.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerFilterRegisterEntry.setDescription('Each entry corresponds to one stage of the shift register and reading one set of values clock delay, clock offset and clock dispersion. Entries are automatically created whenever a peer is configured and deleted when the peer is removed.')
juniNtpPeerFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniNtpPeerFilterIndex.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpPeerFilterIndex.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerFilterIndex.setDescription('An integer value in the specified range that is used to index into the table. The size of the table is fixed at 8. Each entry identifies a particular reading of the clock filter variables in the shift register. Entries are added starting at index 1. The index wraps back to 1 when it reaches 8. When the index wraps back, the new entries will overwrite the old entries effectively deleting the old entry.')
juniNtpPeerFilterOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 3, 1, 2), JuniNtpClockSignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerFilterOffset.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpPeerFilterOffset.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerFilterOffset.setDescription('The offset of the peer clock relative to the system clock in seconds.')
juniNtpPeerFilterDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 3, 1, 3), JuniNtpClockSignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerFilterDelay.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpPeerFilterDelay.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerFilterDelay.setDescription('Roundtrip delay of the peer clock relative to the system clock over the network path between them, in seconds. This variable can take on both positive and negative values, depending on clock precision and skew-error accumulation.')
juniNtpPeerFilterDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 4, 3, 1, 4), JuniNtpClockUnsignedTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniNtpPeerFilterDispersion.setReference("D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992")
if mibBuilder.loadTexts: juniNtpPeerFilterDispersion.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeerFilterDispersion.setDescription('The maximum error of the peer clock relative to the system clock over the network path between them, in seconds. Only positive values greater than zero are possible.')
juniNtpRouterAccessGroupPeer = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpRouterAccessGroupPeer.setStatus('current')
if mibBuilder.loadTexts: juniNtpRouterAccessGroupPeer.setDescription('Configure the name of the peer access list for the NTP enabled router.')
juniNtpRouterAccessGroupServe = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpRouterAccessGroupServe.setStatus('current')
if mibBuilder.loadTexts: juniNtpRouterAccessGroupServe.setDescription('Configure the name of the serve access list for the NTP enabled router.')
juniNtpRouterAccessGroupServeOnly = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpRouterAccessGroupServeOnly.setStatus('current')
if mibBuilder.loadTexts: juniNtpRouterAccessGroupServeOnly.setDescription('Configure the name of the serve-only access list for the NTP enabled router.')
juniNtpRouterAccessGroupQueryOnly = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniNtpRouterAccessGroupQueryOnly.setStatus('current')
if mibBuilder.loadTexts: juniNtpRouterAccessGroupQueryOnly.setDescription('Configure the name of the peer query-only list for the NTP enabled router.')
juniNtpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 0))
juniNtpFrequencyCalibrationStart = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 0, 1)).setObjects(("Juniper-System-Clock-MIB", "juniNtpSysClockFrequencyError"))
if mibBuilder.loadTexts: juniNtpFrequencyCalibrationStart.setStatus('current')
if mibBuilder.loadTexts: juniNtpFrequencyCalibrationStart.setDescription('This trap will be generated at the start of frequency synchronization.')
juniNtpFrequencyCalibrationEnd = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 0, 2)).setObjects(("Juniper-System-Clock-MIB", "juniNtpSysClockFrequencyError"))
if mibBuilder.loadTexts: juniNtpFrequencyCalibrationEnd.setStatus('current')
if mibBuilder.loadTexts: juniNtpFrequencyCalibrationEnd.setDescription('This trap will be generated when frequency synchronization completes successfully.')
juniNtpTimeSynUp = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 0, 3))
if mibBuilder.loadTexts: juniNtpTimeSynUp.setStatus('current')
if mibBuilder.loadTexts: juniNtpTimeSynUp.setDescription('This trap indicates that some kind of time synchronization has started. This trap will be generated at the start of time synchronization with the configured time servers irrespective of whether time synchronization is done with all the configured time servers or any one of them (there may be reachability or other problems) when NTP is enabled on the router.')
juniNtpTimeSynDown = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 0, 4))
if mibBuilder.loadTexts: juniNtpTimeSynDown.setStatus('current')
if mibBuilder.loadTexts: juniNtpTimeSynDown.setDescription('This trap will be generated when the NTP client is not able to time synchronize with any of the configured time servers for any reasons when NTP is enabled on the router.')
juniNtpTimeServerSynUp = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 0, 5)).setObjects(("Juniper-System-Clock-MIB", "juniNtpPeerCfgIsPreferred"))
if mibBuilder.loadTexts: juniNtpTimeServerSynUp.setStatus('current')
if mibBuilder.loadTexts: juniNtpTimeServerSynUp.setDescription('This trap will be generated to report the time synchronization status of each configured time server on the router when it starts time synchronization with the NTP client.')
juniNtpTimeServerSynDown = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 0, 6)).setObjects(("Juniper-System-Clock-MIB", "juniNtpPeerCfgIsPreferred"))
if mibBuilder.loadTexts: juniNtpTimeServerSynDown.setStatus('current')
if mibBuilder.loadTexts: juniNtpTimeServerSynDown.setDescription('This trap will be generated to report the time synchronization status of each configured time server on the router when it stops time synchronization with the NTP client for any reasons.')
juniNtpFirstSystemClockSet = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 0, 7)).setObjects(("Juniper-System-Clock-MIB", "juniNtpSysClockOffsetError"), ("Juniper-System-Clock-MIB", "juniNtpSysClockState"))
if mibBuilder.loadTexts: juniNtpFirstSystemClockSet.setStatus('current')
if mibBuilder.loadTexts: juniNtpFirstSystemClockSet.setDescription('This trap will be generated to report when the system clock offset error is set for the first time from the good time sample taken, enabling the time synchronization. This is usually the case after a system reboot.')
juniNtpClockOffSetLimitCrossed = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 2, 0, 8)).setObjects(("Juniper-System-Clock-MIB", "juniNtpSysClockOffsetError"), ("Juniper-System-Clock-MIB", "juniNtpSysClockState"))
if mibBuilder.loadTexts: juniNtpClockOffSetLimitCrossed.setStatus('current')
if mibBuilder.loadTexts: juniNtpClockOffSetLimitCrossed.setDescription("This trap will be generated whenever the system clock's offset error is more than 15 minutes. This is an indication that something is not set properly, since an offset of 15 minutes is not considered to be a normal offset error compared to the accuracy of the time servers and system clock. For example, it may indicate an improper setting of the timezone.")
juniSysClockConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3))
juniSysClockCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 1))
juniSysClockGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2))
juniSysClockCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 1, 1)).setObjects(("Juniper-System-Clock-MIB", "juniSysClockTimeGroup"), ("Juniper-System-Clock-MIB", "juniSysClockDstGroup"), ("Juniper-System-Clock-MIB", "juniNtpSysClockGroup"), ("Juniper-System-Clock-MIB", "juniNtpClientGroup"), ("Juniper-System-Clock-MIB", "juniNtpServerGroup"), ("Juniper-System-Clock-MIB", "juniNtpPeersGroup"), ("Juniper-System-Clock-MIB", "juniNtpAccessGroupGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSysClockCompliance = juniSysClockCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniSysClockCompliance.setDescription('Obsolete compliance statement for entities that implement the Juniper System Clock MIB. This statement became obsolete when NTP traps were added.')
juniSysClockCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 1, 2)).setObjects(("Juniper-System-Clock-MIB", "juniSysClockTimeGroup"), ("Juniper-System-Clock-MIB", "juniSysClockDstGroup"), ("Juniper-System-Clock-MIB", "juniNtpSysClockGroup"), ("Juniper-System-Clock-MIB", "juniNtpClientGroup"), ("Juniper-System-Clock-MIB", "juniNtpServerGroup"), ("Juniper-System-Clock-MIB", "juniNtpPeersGroup"), ("Juniper-System-Clock-MIB", "juniNtpAccessGroupGroup"), ("Juniper-System-Clock-MIB", "juniNtpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSysClockCompliance2 = juniSysClockCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniSysClockCompliance2.setDescription('Obsolete compliance statement for entities that implement the Juniper System Clock MIB. This statement became obsolete when new offset and frequency error objects were added.')
juniSysClockCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 1, 3)).setObjects(("Juniper-System-Clock-MIB", "juniSysClockTimeGroup"), ("Juniper-System-Clock-MIB", "juniSysClockDstGroup"), ("Juniper-System-Clock-MIB", "juniNtpSysClockGroup2"), ("Juniper-System-Clock-MIB", "juniNtpClientGroup"), ("Juniper-System-Clock-MIB", "juniNtpServerGroup"), ("Juniper-System-Clock-MIB", "juniNtpPeersGroup"), ("Juniper-System-Clock-MIB", "juniNtpAccessGroupGroup"), ("Juniper-System-Clock-MIB", "juniNtpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSysClockCompliance3 = juniSysClockCompliance3.setStatus('current')
if mibBuilder.loadTexts: juniSysClockCompliance3.setDescription('The compliance statement for entities that implement the Juniper System Clock MIB.')
juniSysClockTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 1)).setObjects(("Juniper-System-Clock-MIB", "juniSysClockDateAndTime"), ("Juniper-System-Clock-MIB", "juniSysClockTimeZoneName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSysClockTimeGroup = juniSysClockTimeGroup.setStatus('current')
if mibBuilder.loadTexts: juniSysClockTimeGroup.setDescription('The management objects pertaining to the System Clock current date and time.')
juniSysClockDstGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 2)).setObjects(("Juniper-System-Clock-MIB", "juniSysClockDstName"), ("Juniper-System-Clock-MIB", "juniSysClockDstOffset"), ("Juniper-System-Clock-MIB", "juniSysClockDstStatus"), ("Juniper-System-Clock-MIB", "juniSysClockDstAbsoluteStartTime"), ("Juniper-System-Clock-MIB", "juniSysClockDstAbsoluteStopTime"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStartMonth"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStartWeek"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStartDay"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStartHour"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStartMinute"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStopMonth"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStopWeek"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStopDay"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStopHour"), ("Juniper-System-Clock-MIB", "juniSysClockDstRecurStopMinute"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniSysClockDstGroup = juniSysClockDstGroup.setStatus('current')
if mibBuilder.loadTexts: juniSysClockDstGroup.setDescription('The management objects pertaining to the System Clock daylight savings time information.')
juniNtpSysClockGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 3)).setObjects(("Juniper-System-Clock-MIB", "juniNtpSysClockState"), ("Juniper-System-Clock-MIB", "juniNtpSysClockOffsetError"), ("Juniper-System-Clock-MIB", "juniNtpSysClockFrequencyError"), ("Juniper-System-Clock-MIB", "juniNtpSysClockRootDelay"), ("Juniper-System-Clock-MIB", "juniNtpSysClockRootDispersion"), ("Juniper-System-Clock-MIB", "juniNtpSysClockStratumNumber"), ("Juniper-System-Clock-MIB", "juniNtpSysClockLastUpdateTime"), ("Juniper-System-Clock-MIB", "juniNtpSysClockLastUpdateServer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniNtpSysClockGroup = juniNtpSysClockGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniNtpSysClockGroup.setDescription('Obsolete management objects pertaining to the system clock when NTP is configured on the system. This group became obsolete when replacement clock offset and frequency error objects with DisplaySting syntax were added.')
juniNtpClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 4)).setObjects(("Juniper-System-Clock-MIB", "juniNtpClientAdminStatus"), ("Juniper-System-Clock-MIB", "juniNtpClientSystemRouterIndex"), ("Juniper-System-Clock-MIB", "juniNtpClientPacketSourceIfIndex"), ("Juniper-System-Clock-MIB", "juniNtpClientBroadcastDelay"), ("Juniper-System-Clock-MIB", "juniNtpClientIfDisable"), ("Juniper-System-Clock-MIB", "juniNtpClientIfIsBroadcastClient"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniNtpClientGroup = juniNtpClientGroup.setStatus('current')
if mibBuilder.loadTexts: juniNtpClientGroup.setDescription('The management objects pertaining to the NTP client group.')
juniNtpServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 5)).setObjects(("Juniper-System-Clock-MIB", "juniNtpServerAdminStatus"), ("Juniper-System-Clock-MIB", "juniNtpServerStratumNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniNtpServerGroup = juniNtpServerGroup.setStatus('current')
if mibBuilder.loadTexts: juniNtpServerGroup.setDescription('The management objects pertaining to the NTP server group.')
juniNtpPeersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 6)).setObjects(("Juniper-System-Clock-MIB", "juniNtpPeerState"), ("Juniper-System-Clock-MIB", "juniNtpPeerStratumNumber"), ("Juniper-System-Clock-MIB", "juniNtpPeerAssociationMode"), ("Juniper-System-Clock-MIB", "juniNtpPeerBroadcastInterval"), ("Juniper-System-Clock-MIB", "juniNtpPeerPolledInterval"), ("Juniper-System-Clock-MIB", "juniNtpPeerPollingInterval"), ("Juniper-System-Clock-MIB", "juniNtpPeerDelay"), ("Juniper-System-Clock-MIB", "juniNtpPeerDispersion"), ("Juniper-System-Clock-MIB", "juniNtpPeerOffsetError"), ("Juniper-System-Clock-MIB", "juniNtpPeerReachability"), ("Juniper-System-Clock-MIB", "juniNtpPeerPrecision"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootDelay"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootDispersion"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootSyncDistance"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootTime"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootTimeUpdateServer"), ("Juniper-System-Clock-MIB", "juniNtpPeerReceiveTime"), ("Juniper-System-Clock-MIB", "juniNtpPeerTransmitTime"), ("Juniper-System-Clock-MIB", "juniNtpPeerRequestTime"), ("Juniper-System-Clock-MIB", "juniNtpPeerFilterOffset"), ("Juniper-System-Clock-MIB", "juniNtpPeerFilterDelay"), ("Juniper-System-Clock-MIB", "juniNtpPeerFilterDispersion"), ("Juniper-System-Clock-MIB", "juniNtpPeerCfgNtpVersion"), ("Juniper-System-Clock-MIB", "juniNtpPeerCfgPacketSourceIfIndex"), ("Juniper-System-Clock-MIB", "juniNtpPeerCfgIsPreferred"), ("Juniper-System-Clock-MIB", "juniNtpPeerCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniNtpPeersGroup = juniNtpPeersGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniNtpPeersGroup.setDescription('The management objects pertaining to the NTP peers group.')
juniNtpAccessGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 7)).setObjects(("Juniper-System-Clock-MIB", "juniNtpRouterAccessGroupPeer"), ("Juniper-System-Clock-MIB", "juniNtpRouterAccessGroupServe"), ("Juniper-System-Clock-MIB", "juniNtpRouterAccessGroupServeOnly"), ("Juniper-System-Clock-MIB", "juniNtpRouterAccessGroupQueryOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniNtpAccessGroupGroup = juniNtpAccessGroupGroup.setStatus('current')
if mibBuilder.loadTexts: juniNtpAccessGroupGroup.setDescription('The management objects pertaining to the NTP per router access group.')
juniNtpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 8)).setObjects(("Juniper-System-Clock-MIB", "juniNtpFrequencyCalibrationStart"), ("Juniper-System-Clock-MIB", "juniNtpFrequencyCalibrationEnd"), ("Juniper-System-Clock-MIB", "juniNtpTimeSynUp"), ("Juniper-System-Clock-MIB", "juniNtpTimeSynDown"), ("Juniper-System-Clock-MIB", "juniNtpTimeServerSynUp"), ("Juniper-System-Clock-MIB", "juniNtpTimeServerSynDown"), ("Juniper-System-Clock-MIB", "juniNtpFirstSystemClockSet"), ("Juniper-System-Clock-MIB", "juniNtpClockOffSetLimitCrossed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniNtpNotificationGroup = juniNtpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: juniNtpNotificationGroup.setDescription('The management notifications pertaining to NTP state changes.')
juniNtpSysClockGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 9)).setObjects(("Juniper-System-Clock-MIB", "juniNtpSysClockState"), ("Juniper-System-Clock-MIB", "juniNtpSysClockRootDelay"), ("Juniper-System-Clock-MIB", "juniNtpSysClockRootDispersion"), ("Juniper-System-Clock-MIB", "juniNtpSysClockStratumNumber"), ("Juniper-System-Clock-MIB", "juniNtpSysClockLastUpdateTime"), ("Juniper-System-Clock-MIB", "juniNtpSysClockLastUpdateServer"), ("Juniper-System-Clock-MIB", "juniNtpSysClockOffsetErrorNew"), ("Juniper-System-Clock-MIB", "juniNtpSysClockFrequencyErrorNew"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniNtpSysClockGroup2 = juniNtpSysClockGroup2.setStatus('current')
if mibBuilder.loadTexts: juniNtpSysClockGroup2.setDescription('The management objects pertaining to the system clock when NTP is configured on the system.')
juniNtpSysClockDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 10)).setObjects(("Juniper-System-Clock-MIB", "juniNtpSysClockOffsetError"), ("Juniper-System-Clock-MIB", "juniNtpSysClockFrequencyError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniNtpSysClockDeprecatedGroup = juniNtpSysClockDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: juniNtpSysClockDeprecatedGroup.setDescription('Deprecated management objects pertaining to the system clock when NTP is configured on the system.')
juniNtpPeersGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 56, 3, 2, 11)).setObjects(("Juniper-System-Clock-MIB", "juniNtpPeerState"), ("Juniper-System-Clock-MIB", "juniNtpPeerStratumNumber"), ("Juniper-System-Clock-MIB", "juniNtpPeerAssociationMode"), ("Juniper-System-Clock-MIB", "juniNtpPeerBroadcastInterval"), ("Juniper-System-Clock-MIB", "juniNtpPeerPolledInterval"), ("Juniper-System-Clock-MIB", "juniNtpPeerPollingInterval"), ("Juniper-System-Clock-MIB", "juniNtpPeerDelay"), ("Juniper-System-Clock-MIB", "juniNtpPeerDispersion"), ("Juniper-System-Clock-MIB", "juniNtpPeerOffsetError"), ("Juniper-System-Clock-MIB", "juniNtpPeerReachability"), ("Juniper-System-Clock-MIB", "juniNtpPeerPrecision"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootDelay"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootDispersion"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootSyncDistance"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootTime"), ("Juniper-System-Clock-MIB", "juniNtpPeerRootTimeUpdateServer"), ("Juniper-System-Clock-MIB", "juniNtpPeerReceiveTime"), ("Juniper-System-Clock-MIB", "juniNtpPeerTransmitTime"), ("Juniper-System-Clock-MIB", "juniNtpPeerRequestTime"), ("Juniper-System-Clock-MIB", "juniNtpPeerFilterOffset"), ("Juniper-System-Clock-MIB", "juniNtpPeerFilterDelay"), ("Juniper-System-Clock-MIB", "juniNtpPeerFilterDispersion"), ("Juniper-System-Clock-MIB", "juniNtpPeerCfgNtpVersion"), ("Juniper-System-Clock-MIB", "juniNtpPeerCfgPacketSourceIfIndex"), ("Juniper-System-Clock-MIB", "juniNtpPeerCfgIsPreferred"), ("Juniper-System-Clock-MIB", "juniNtpPeerCfgRowStatus"), ("Juniper-System-Clock-MIB", "juniNtpPeerLastUpdateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniNtpPeersGroup1 = juniNtpPeersGroup1.setStatus('current')
if mibBuilder.loadTexts: juniNtpPeersGroup1.setDescription('The management objects pertaining to the NTP peers group.')
mibBuilder.exportSymbols("Juniper-System-Clock-MIB", juniSysClockCompliance3=juniSysClockCompliance3, juniNtpPeerRootDelay=juniNtpPeerRootDelay, juniNtpPeerFilterDispersion=juniNtpPeerFilterDispersion, JuniNtpClockUnsignedTime=JuniNtpClockUnsignedTime, juniNtpPeerRootSyncDistance=juniNtpPeerRootSyncDistance, juniSysClockDstRecurStopWeek=juniSysClockDstRecurStopWeek, juniNtpClientIfIsBroadcastClient=juniNtpClientIfIsBroadcastClient, juniNtpPeerEntry=juniNtpPeerEntry, juniSysClockCompliance=juniSysClockCompliance, juniNtpClientGroup=juniNtpClientGroup, juniNtpServerAdminStatus=juniNtpServerAdminStatus, juniNtpServerGroup=juniNtpServerGroup, juniNtpClient=juniNtpClient, juniNtpSysClockOffsetError=juniNtpSysClockOffsetError, juniNtpPeerPolledInterval=juniNtpPeerPolledInterval, juniNtpAccessGroup=juniNtpAccessGroup, juniNtpPeerAssociationMode=juniNtpPeerAssociationMode, juniNtpClientIfEntry=juniNtpClientIfEntry, juniNtpClientIfIsBroadcastServerVersion=juniNtpClientIfIsBroadcastServerVersion, juniNtpPeerLastUpdateTime=juniNtpPeerLastUpdateTime, juniNtpRouterAccessGroupQueryOnly=juniNtpRouterAccessGroupQueryOnly, juniNtpAccessGroupGroup=juniNtpAccessGroupGroup, juniNtpPeerOffsetError=juniNtpPeerOffsetError, juniNtpServerStratumNumber=juniNtpServerStratumNumber, JuniSysClockDayOfTheWeek=JuniSysClockDayOfTheWeek, juniNtpSysClockRootDelay=juniNtpSysClockRootDelay, juniSysClockMIB=juniSysClockMIB, juniSysClockGroups=juniSysClockGroups, juniSysClockDst=juniSysClockDst, juniNtpClientIfIfIndex=juniNtpClientIfIfIndex, JuniSysClockHour=JuniSysClockHour, juniNtpPeerState=juniNtpPeerState, juniNtpSysClockGroup2=juniNtpSysClockGroup2, juniNtpClientIfTable=juniNtpClientIfTable, juniNtpClientBroadcastDelay=juniNtpClientBroadcastDelay, juniSysClockDstGroup=juniSysClockDstGroup, juniNtpPeerCfgPacketSourceIfIndex=juniNtpPeerCfgPacketSourceIfIndex, juniSysClockDateAndTime=juniSysClockDateAndTime, juniNtpClockOffSetLimitCrossed=juniNtpClockOffSetLimitCrossed, juniNtpPeerCfgIsPreferred=juniNtpPeerCfgIsPreferred, juniSysClockObjects=juniSysClockObjects, juniNtpServer=juniNtpServer, juniNtpClientIfRouterIndex=juniNtpClientIfRouterIndex, juniNtpSysClockGroup=juniNtpSysClockGroup, juniNtpPeers=juniNtpPeers, juniNtpPeerDelay=juniNtpPeerDelay, juniNtpClientIfIsBroadcastServerDelay=juniNtpClientIfIsBroadcastServerDelay, juniSysClockDstAbsoluteStopTime=juniSysClockDstAbsoluteStopTime, juniNtpPeerPollingInterval=juniNtpPeerPollingInterval, juniNtpPeerFilterOffset=juniNtpPeerFilterOffset, juniSysClockDstRecurStartMonth=juniSysClockDstRecurStartMonth, juniNtpFrequencyCalibrationStart=juniNtpFrequencyCalibrationStart, juniNtpNotificationGroup=juniNtpNotificationGroup, juniNtpPeerPrecision=juniNtpPeerPrecision, juniNtpObjects=juniNtpObjects, juniNtpSysClockState=juniNtpSysClockState, juniSysClockDstRecurStopMinute=juniSysClockDstRecurStopMinute, juniNtpSysClockRootDispersion=juniNtpSysClockRootDispersion, juniNtpPeerFilterDelay=juniNtpPeerFilterDelay, juniNtpPeerCfgNtpVersion=juniNtpPeerCfgNtpVersion, juniNtpSysClockDeprecatedGroup=juniNtpSysClockDeprecatedGroup, juniNtpFrequencyCalibrationEnd=juniNtpFrequencyCalibrationEnd, juniSysClockCompliance2=juniSysClockCompliance2, juniSysClockDstStatus=juniSysClockDstStatus, juniSysClockTimeZoneName=juniSysClockTimeZoneName, juniNtpTimeServerSynUp=juniNtpTimeServerSynUp, juniNtpPeerCfgTable=juniNtpPeerCfgTable, PYSNMP_MODULE_ID=juniSysClockMIB, juniSysClockTimeGroup=juniSysClockTimeGroup, juniNtpPeerRequestTime=juniNtpPeerRequestTime, juniNtpClientAdminStatus=juniNtpClientAdminStatus, juniNtpRouterAccessGroupServeOnly=juniNtpRouterAccessGroupServeOnly, juniNtpPeerFilterRegisterTable=juniNtpPeerFilterRegisterTable, juniNtpTimeSynDown=juniNtpTimeSynDown, juniNtpPeerCfgIpAddress=juniNtpPeerCfgIpAddress, juniNtpFirstSystemClockSet=juniNtpFirstSystemClockSet, juniNtpTimeServerSynDown=juniNtpTimeServerSynDown, juniNtpClientSystemRouterIndex=juniNtpClientSystemRouterIndex, juniNtpPeerRootTimeUpdateServer=juniNtpPeerRootTimeUpdateServer, juniNtpSysClockOffsetErrorNew=juniNtpSysClockOffsetErrorNew, juniNtpSysClockFrequencyErrorNew=juniNtpSysClockFrequencyErrorNew, juniNtpRouterAccessGroupServe=juniNtpRouterAccessGroupServe, juniSysClockDstRecurStartMinute=juniSysClockDstRecurStartMinute, juniSysClockDstRecurStopDay=juniSysClockDstRecurStopDay, juniNtpSysClockLastUpdateServer=juniNtpSysClockLastUpdateServer, juniNtpPeerTable=juniNtpPeerTable, juniNtpPeerTransmitTime=juniNtpPeerTransmitTime, juniNtpClientIfDisable=juniNtpClientIfDisable, juniNtpTimeSynUp=juniNtpTimeSynUp, juniNtpTraps=juniNtpTraps, juniNtpPeerFilterRegisterEntry=juniNtpPeerFilterRegisterEntry, juniNtpPeerRootDispersion=juniNtpPeerRootDispersion, juniNtpClientPacketSourceIfIndex=juniNtpClientPacketSourceIfIndex, JuniNtpTimeStamp=JuniNtpTimeStamp, juniSysClockDstName=juniSysClockDstName, juniSysClockTime=juniSysClockTime, juniNtpPeersGroup=juniNtpPeersGroup, juniNtpClientIfIsBroadcastServer=juniNtpClientIfIsBroadcastServer, juniSysClockDstRecurStopMonth=juniSysClockDstRecurStopMonth, juniSysClockConformance=juniSysClockConformance, juniNtpSysClock=juniNtpSysClock, juniSysClockDstRecurStartDay=juniSysClockDstRecurStartDay, juniNtpSysClockStratumNumber=juniNtpSysClockStratumNumber, juniNtpPeerRootTime=juniNtpPeerRootTime, JuniSysClockMinute=JuniSysClockMinute, juniNtpRouterAccessGroupPeer=juniNtpRouterAccessGroupPeer, juniSysClockCompliances=juniSysClockCompliances, juniNtpSysClockFrequencyError=juniNtpSysClockFrequencyError, juniNtpPeerStratumNumber=juniNtpPeerStratumNumber, juniSysClockDstOffset=juniSysClockDstOffset, JuniSysClockMonth=JuniSysClockMonth, juniNtpPeerCfgEntry=juniNtpPeerCfgEntry, juniNtpPeerFilterIndex=juniNtpPeerFilterIndex, juniNtpPeerDispersion=juniNtpPeerDispersion, juniSysClockDstAbsoluteStartTime=juniSysClockDstAbsoluteStartTime, juniSysClockDstRecurStartWeek=juniSysClockDstRecurStartWeek, JuniSysClockWeekOfTheMonth=JuniSysClockWeekOfTheMonth, juniNtpSysClockLastUpdateTime=juniNtpSysClockLastUpdateTime, juniNtpPeerBroadcastInterval=juniNtpPeerBroadcastInterval, juniNtpPeerCfgRowStatus=juniNtpPeerCfgRowStatus, juniNtpPeersGroup1=juniNtpPeersGroup1, JuniNtpClockSignedTime=JuniNtpClockSignedTime, juniNtpPeerReachability=juniNtpPeerReachability, juniSysClockDstRecurStopHour=juniSysClockDstRecurStopHour, juniNtpPeerReceiveTime=juniNtpPeerReceiveTime, juniSysClockDstRecurStartHour=juniSysClockDstRecurStartHour)
