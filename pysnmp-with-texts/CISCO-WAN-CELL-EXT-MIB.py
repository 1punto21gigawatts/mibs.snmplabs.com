#
# PySNMP MIB module CISCO-WAN-CELL-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-CELL-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
C3gServiceCapability, = mibBuilder.importSymbols("CISCO-WAN-3G-MIB", "C3gServiceCapability")
entPhysicalName, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, NotificationType, Counter32, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, MibIdentifier, Counter64, TimeTicks, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "NotificationType", "Counter32", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Counter64", "TimeTicks", "Integer32", "Bits")
RowStatus, TextualConvention, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "StorageType")
ciscoWanCellExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 817))
ciscoWanCellExtMIB.setRevisions(('2014-03-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanCellExtMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoWanCellExtMIB.setLastUpdated('201403050000Z')
if mibBuilder.loadTexts: ciscoWanCellExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanCellExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-3g@cisco.com cs-4g@cisco.com')
if mibBuilder.loadTexts: ciscoWanCellExtMIB.setDescription('This MIB module is an extension of CISCO-WAN-3G-MIB.my, and it provides network management support for Cisco cellular WAN 4G/LTE products. *** ABBREVIATIONS, ACRONYMS, AND SYMBOLS *** AMBR - Aggregate Maximum Bit Rate APN - Access Point Name ARP - Allocation and Retention Priority CQI - Channel Quality Indicator eNodeB - Evolved Node B EPS - Evolved Packet System E-UTRAN - Evolved Universal Terrestrial Radio Access GBR - Guaranteed Bit Rate LTE - Long Term Evolution MBR - Maximum Bit Rate PCRF - Policy and Charging Rules Function PDN - Packet Data Network QCI - QoS Class Identifier QOS - Quality of Service RF - Radio Frequency RSRP - Reference Signal Receive Power RSRQ - Reference Signal Receive Quality SINR - Signal-to-Interference plus Noise Ratio SNR - Signal-to-Noise Ratio UE - User Equipment')
ciscoWanCellExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 0))
ciscoWanCellExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1))
ciscoWanCellExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 2))
ciscoWanCellExtLte = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1))
cwceLteRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1))
cwceLteProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2))
class CiscoWanCellExtProtocolType(TextualConvention, Integer32):
    description = 'Generic PDN type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("ipv4", 2), ("ppp", 3), ("ipv6", 4), ("ipv4V6", 5))

class CiscoWanCellExtRsrp(TextualConvention, Integer32):
    description = 'Reference signal received power (RSRP) is defined as the linear average over the power contributions and measured in dBm. The reporting range of RSRP is defined per LTE standard with 1 dBm resolution.'
    status = 'current'
    displayHint = 'd'

class CiscoWanCellExtRsrq(TextualConvention, Integer32):
    description = 'Reference Signal Received Quality (RSRQ) is defined as the ratio NxRSRP over (E-UTRAN carrier RSSI) and measured in dB. The reporting range of RSRQ is defined per LTE standard with 0.5 dB resolution.'
    status = 'current'
    displayHint = 'd-1'

class CiscoWanCellExtCqiIndex(TextualConvention, Unsigned32):
    description = 'Channel Quality indicator reported to eNodeB which directly translates to Modulation Coding Scheme selected.'
    status = 'current'
    displayHint = 'd'

class CiscoWanCellExtSNR(TextualConvention, Integer32):
    description = 'Signal-to-Noise power Ratio (SNR) is defined as the ratio of signal power to the noise power, measured in dB. It determines the downlink throughput for the UE.'
    status = 'current'
    displayHint = 'd-1'

class CiscoWanCellExtSINR(TextualConvention, Integer32):
    description = 'Signal to Interference plus Noise Ratio is the power at the receiver due to the required signal, divided by the power due to noise and interference measured in dB. It is used as a measure of signal quality.'
    status = 'current'
    displayHint = 'd-1'

cwceLteRadioTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cwceLteRadioTable.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioTable.setDescription('This table contains entPhysicalTable entries which are capable of providing operational Cellular 4G/LTE Radio signal parameters and administrative notification information.')
cwceLteRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cwceLteRadioEntry.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioEntry.setDescription('An entry contains management information of Cellular 4G/LTE Radio signal parameters and notification information. An entry of this table is created if an entity capable of providing operational Cellular 4G/LTE Radio signal parameters and administrative notification information is detected by the agent. An entry of this table is deleted by the agent if the corresponding entry in entPhysicalTable is removed.')
cwceLteCurrRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 1), CiscoWanCellExtRsrp()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrRsrp.setStatus('current')
if mibBuilder.loadTexts: cwceLteCurrRsrp.setDescription('This object indicates the LTE RSRP value reported by the modem.')
cwceLteCurrRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 2), CiscoWanCellExtRsrq()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrRsrq.setStatus('current')
if mibBuilder.loadTexts: cwceLteCurrRsrq.setDescription('This object indicates the LTE RSRQ value reported by the modem.')
cwceLteCurrSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 3), CiscoWanCellExtSNR()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrSnr.setStatus('current')
if mibBuilder.loadTexts: cwceLteCurrSnr.setDescription('This object indicates the LTE SNR value reported by the modem.')
cwceLteCurrSinr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 4), CiscoWanCellExtSINR()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrSinr.setStatus('current')
if mibBuilder.loadTexts: cwceLteCurrSinr.setDescription('This object indicates the LTE SINR value measured in decibels (dB) reported by the modem.')
cwceLteCurrCqiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 5), CiscoWanCellExtCqiIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrCqiIndex.setStatus('current')
if mibBuilder.loadTexts: cwceLteCurrCqiIndex.setDescription('This object indicates he LTE CQI Index reported by the modem.')
cwceLteCurrOperatingBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrOperatingBand.setStatus('current')
if mibBuilder.loadTexts: cwceLteCurrOperatingBand.setDescription('This object indicates the E-UTRAN Operating Band reported by the modem.')
cwceLteNotifRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 7), CiscoWanCellExtRsrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteNotifRsrp.setStatus('current')
if mibBuilder.loadTexts: cwceLteNotifRsrp.setDescription('This object indicates the LTE RSRP value reported by the modem which triggered the most recent cwceLteRsrpOnsetNotif or cwceLteRsrpAbateNotif notification.')
cwceLteNotifRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 8), CiscoWanCellExtRsrq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteNotifRsrq.setStatus('current')
if mibBuilder.loadTexts: cwceLteNotifRsrq.setDescription('This object indicates the LTE RSRP value reported by the modem which triggered the most recent cwceLteRsrqOnsetNotif or cwceLteRsrqAbateNotif notification.')
cwceLteRsrpOnsetNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 9), CiscoWanCellExtRsrp()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrpOnsetNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrpOnsetNotifThreshold.setDescription('This object specifies the RSRP onset threshold value. If the value of cwceLteCurrRsrp goes below the threshold and the service bit in cwceLteRsrpOnsetNotifFlag is set, the cwceLteRsrqOnsetNotif notification for that service will be sent. The absolute value of cwceLteRsrpAbateNotifThreshold should be less than or equal to the absolute value of cwceLteRsrpOnsetNotifThreshold (|cwceLteRsrpAbateNotifThreshold| <= |cwceLteRsrpOnsetNotifThreshold|).')
cwceLteRsrpAbateNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 10), CiscoWanCellExtRsrp()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrpAbateNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrpAbateNotifThreshold.setDescription('This object specifies the RSRP abate threshold value. If the value of cwceLteCurrRsrp goes above the threshold and the service bit in cwceLteRsrpOnsetNotifFlag is set, the cwceLteRsrpAbateNotif notification for that service will be sent. The absolute value of cwceLteRsrpAbateNotifThreshold should be less than or equal to the absolute value of cwceLteRsrpOnsetNotifThreshold (|cwceLteRsrpAbateNotifThreshold| <= |cwceLteRsrpOnsetNotifThreshold|).')
cwceLteRsrqOnsetNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 11), CiscoWanCellExtRsrq()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrqOnsetNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrqOnsetNotifThreshold.setDescription('This object specifies the RSRQ onset threshold value. If the value of cwceLteCurrRsrq goes below the threshold and the service bit in cwceLteRsrqOnsetNotifFlag is set, the cwceLteRsrqOnsetNotif notification for that service will be sent. The absolute value of cwceLteRsrqAbateNotifThreshold should be less than or equal to the absolute value of cwceLteRsrqOnsetNotifThreshold (|cwceLteRsrqAbateNotifThreshold| <= |cwceLteRsrqOnsetNotifThreshold|).')
cwceLteRsrqAbateNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 12), CiscoWanCellExtRsrq()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrqAbateNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrqAbateNotifThreshold.setDescription('This object specifies the RSRQ abate threshold value. If the value of cwceLteCurrRsrq goes above the threshold and the service bit in cwceLteRsrqOnsetNotifFlag is set, the cwceLteRsrqAbateNotif notification for that service will be sent. The absolute value of cwceLteRsrqAbateNotifThreshold should be less than or equal to the absolute value of cwceLteRsrqOnsetNotifThreshold (|cwceLteRsrqAbateNotifThreshold| <= |cwceLteRsrqOnsetNotifThreshold|).')
cwceLteRsrpOnsetNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 13), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrpOnsetNotifFlag.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrpOnsetNotifFlag.setDescription('This object specifies the flag bitmap to control the generation of notification cwceLteRsrpOnsetNotif. Each bit represents a service as defined in C3gServiceCapability, set the bit value to 1 to enable (and 0 to disable) the generation of notification cwceLteRsrpOnsetNotif for that service. The default value of this object is all bits are 0. Notifications are not generated in technology modes where RSRP is not relevant.')
cwceLteRsrpAbateNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 14), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrpAbateNotifFlag.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrpAbateNotifFlag.setDescription('This object specifies the flag bitmap to control the generation of notification cwceLteRsrpAbateNotif. Each bit represents a service as defined in C3gServiceCapability, set the bit value to 1 to enable (and 0 to disable) the generation of notification cwceLteRsrpAbateNotif for that service. The default value of this object is all bits are 0. Notifications are not generated in technology modes where RSRP is not relevant.')
cwceLteRsrqOnsetNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 15), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrqOnsetNotifFlag.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrqOnsetNotifFlag.setDescription('This object specifies the flag bitmap to control the generation of notification cwceLteRsrqOnsetNotif. Each bit represents a service as defined in C3gServiceCapability, set the bit value to 1 to enable (and 0 to disable) the generation of notification cwceLteRsrqOnsetNotif for that service. The default value of this object is all bits are 0. Notifications are not generated in technology modes where RSRQ is not relevant.')
cwceLteRsrqAbateNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 16), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrqAbateNotifFlag.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrqAbateNotifFlag.setDescription('This object specifies the flag bitmap to control the generation of notification cwceLteRsrqAbateNotif. Each bit represents a service as defined in C3gServiceCapability, set the bit value to 1 to enable (and 0 to disable) the generation of notification cwceLteRsrqAbateNotif for that service. The default value of this object is all bits are 0. Notifications are not generated in technology modes where RSRQ is not relevant.')
cwceLteRadioHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2))
cwceLteRadioHistoryRsrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpTable.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpTable.setDescription('This table contains Cellular 4G/LTE RSRP history. The history of RSRP are carried in an octet of string. Each octet in the octet string has a value from 40 to 140 and the 150 value is reserved to indicate an uninitialized (Invalid) value. The format of the octet string with n octets is as following: [ octet 0 is latest, octet 1 is latest-1, . . octet n-2 is oldest-1, octet n-1 is oldest ] To convert the provided value into dBm the following formula should be used: dBm = (-1)*value')
cwceLteRadioHistoryRsrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpEntry.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpEntry.setDescription('An entry contains management information of Cellular 4G/LTE RSRP Radio history parameters. An entry of this table is created if an entity capable of providing operational Cellular 4G/LTE RSRP Radio history is detected by the agent. An entry of this table is deleted by the agent if the corresponding entry in entPhysicalTable is removed.')
cwceLteRadioHistoryRsrpPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpPerSecond.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpPerSecond.setDescription('This object indicates per-second RSRP history. It contains a per-second history of RSRP values for the last 60 seconds.')
cwceLteRadioHistoryRsrpPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpPerMinute.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpPerMinute.setDescription('This object indicates per-minute weakest RSRP value history. It contains a per-minute history of weakest RSRP values for the last 60 minutes. The octet in the string is the weakest RSRP value measured in a minute interval.')
cwceLteRadioHistoryRsrpPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(72, 72)).setFixedLength(72)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpPerHour.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpPerHour.setDescription('This object indicates per-hour weakest RSRP value history. It contains a per-hour history of weakest RSRP values for the last 72 hours. The octet in the string is the weakest RSRP value measured in an hour interval.')
cwceLteRadioHistoryRsrqTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqTable.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqTable.setDescription('This table contains Cellular 4G/LTE RSRQ history. The history of RSRQ are carried in an octet of string. Each octet in the octet string has a value from 3 to 20 and the 25 value is reserved to indicate an uninitialized (Invalid) value. The format of the octet string with n octets is as following: [ octet 0 is latest, octet 1 is latest-1, . . octet n-2 is oldest-1, octet n-1 is oldest ] To convert the provided value into dB the following formula should be used: dB = (-1)*value')
cwceLteRadioHistoryRsrqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqEntry.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqEntry.setDescription('An entry contains management information of Cellular 4G/LTE RSRQ Radio history parameters. An entry of this table is created if an entity capable of providing operational Cellular 4G/LTE RSRQ Radio history is detected by the agent. An entry of this table is deleted by the agent if the corresponding entry in entPhysicalTable is removed.')
cwceLteRadioHistoryRsrqPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqPerSecond.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqPerSecond.setDescription('This object indicates per-second RSRQ history. It contains a per-second history of RSRQ values for the last 60 seconds.')
cwceLteRadioHistoryRsrqPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqPerMinute.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqPerMinute.setDescription('This object indicates per-minute weakest RSRQ value history. It contains a per-minute history of weakest RSRQ values for the last 60 minutes. The octet in the string is the weakest RSRQ value measured in a minute interval.')
cwceLteRadioHistoryRsrqPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(72, 72)).setFixedLength(72)).setUnits('-dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqPerHour.setStatus('current')
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqPerHour.setDescription('This object indicates per-hour weakest RSRQ value history. It contains a per-hour history of weakest RSRQ values for the last 72 hours. The octet in the string is the weakest RSRQ value measured in an hour interval.')
cwceLteIpv4AddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteIpv4AddrType.setStatus('current')
if mibBuilder.loadTexts: cwceLteIpv4AddrType.setDescription('The object indicates the type of Internet address for IPv4 addresses used by profiles and PDNs. The valid value for this object is ipv4(1).')
cwceLteIpv6AddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteIpv6AddrType.setStatus('current')
if mibBuilder.loadTexts: cwceLteIpv6AddrType.setDescription('The object indicates the type of Internet address for IPv6 addresses used by profiles and PDNs. The valid value for this object is ipv6(2).')
cwceLteProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3), )
if mibBuilder.loadTexts: cwceLteProfileTable.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileTable.setDescription('This table contains Cellular LTE PDN profiles. Cellular device contains multiple profile entries which can be used to establish cellular data connections (PDN contexts). Users can choose any of available PDN profiles to establish data connections. Data connections are described in cwcePacketLteSessionTable. This table is valid only in 4G/LTE Technology mode.')
cwceLteProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileIndex"))
if mibBuilder.loadTexts: cwceLteProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileEntry.setDescription('An entry contains management information of Cellular 4G/LTE profile parameters. Entries in this table can be created or deleted using cwceLteProfileRowStatus object. An entry of this table is deleted by the agent if the corresponding entry in entPhysicalTable is removed.')
cwceLteProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cwceLteProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileIndex.setDescription('This object specifies profile index, combined with entPhysicalIndex to access profile table.')
cwceLteProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 2), CiscoWanCellExtProtocolType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileType.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileType.setDescription('This object specifies the configured EPS Bearer type.')
cwceLteProfileIPv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileIPv4Addr.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileIPv4Addr.setDescription("This object specifies the configured EPS Bearer IPv4 address. The type of this address is determined by the value of the cwceLteIpv4AddrType object. This object is valid only if the corresponding instance value of cwceLteProfileType is either 'ipv4' or 'ipv4V6'.")
cwceLteProfileIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileIPv6Addr.setDescription("This object specifies the configured EPS Bearer IPv6 address. The type of this address is determined by the value of the cwceLteIpv6AddrType object. This object is valid only if the corresponding instance value of cwceLteProfileType is either 'ipv6' or 'ipv4V6'.")
cwceLteProfileApn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileApn.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileApn.setDescription('This object specifies configured profile of Access Point Name (APN). The value of this object should be provided by the APN service provider.')
cwceLteProfileApnAmbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileApnAmbr.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileApnAmbr.setDescription("This object specifies the profile APN-AMBR. APN-AMBR is aggregate bit rate across all Non-GBR bearers and across all PDN connections of the same APN. The value APN-AMBR is a parameter which is defined as part of a user's subscription, but may be overridden by the PCRF.")
cwceLteProfileStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileStorage.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileStorage.setDescription('This object specifies the storage type for this conceptual row.')
cwceLteProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwceLteProfileRowStatus.setDescription("This object specifies the status of the conceptual row. It's used to manage creation, modification and deletion of rows in this table. When a row is active, user cannot modify the value of the objects in that row. All objects in this row need to have valid value before the row can be active.")
cwceLtePdnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4), )
if mibBuilder.loadTexts: cwceLtePdnTable.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnTable.setDescription('This table contains Cellular 4G/LTE Packet Data Network(PDN) information of all the PDN capable interfaces in the system.')
cwceLtePdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwceLtePdnEntry.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnEntry.setDescription('An entry contains management information of Cellular 4G/LTE PDN parameters. An entry of this table is created if an interface capable of providing operational Cellular 4G/LTE PDN parameters is detected by the agent. An entry of this table is deleted by the agent if the corresponding entry in ifTable is removed.')
cwceLtePdnProfileUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnProfileUsed.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnProfileUsed.setDescription('This object indicates the cwceLteProfileIndex of the profile used by current EPS bearer to establish data connection.')
cwceLtePdnConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnConnStatus.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnConnStatus.setDescription('This object indicates PDN session status of the profile. This is active when the call is established and PDN context has become active.')
cwceLtePdnType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 4), CiscoWanCellExtProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnType.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnType.setDescription('This object indicates current session PDN type.')
cwceLtePdnIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnIpv4Addr.setDescription('This object indicates current session EPS Bearer IPv4 address. The type of this address is determined by the value of the cwceLteIpv4AddrType object.')
cwceLtePdnIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnIpv6Addr.setDescription('This object indicates current session EPS Bearer IPv6 address. The type of this address is determined by the value of the cwceLteIpv6AddrType object.')
cwceLtePdnPriDnsIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnPriDnsIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnPriDnsIpv4Addr.setDescription('This object indicates current session EPS Bearer Primary DNS IPv4 address. The type of this address is determined by the value of the cwceLteIpv4AddrType object.')
cwceLtePdnSecDnsIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnSecDnsIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnSecDnsIpv4Addr.setDescription('This object indicates current session EPS Bearer Secondary DNS IPv4 address. The type of this address is determined by the value of the cwceLteIpv4AddrType object.')
cwceLtePdnPriDnsIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnPriDnsIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnPriDnsIpv6Addr.setDescription('This object indicates current session EPS Bearer Primary DNS IPv6 address. The type of this address is determined by the value of the cwceLteIpv6AddrType object.')
cwceLtePdnSecDnsIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnSecDnsIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: cwceLtePdnSecDnsIpv6Addr.setDescription('This object indicates current session EPS Bearer Secondary DNS IPv6 address. The type of this address is determined by the value of the cwceLteIpv6AddrType object.')
cwceLteEpsBearerQosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5), )
if mibBuilder.loadTexts: cwceLteEpsBearerQosTable.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsBearerQosTable.setDescription('This table contains 4G/LTE QoS parameters requested by modem to the cellular network via PDN Context Activation Request message.')
cwceLteEpsBearerQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsBearerId"))
if mibBuilder.loadTexts: cwceLteEpsBearerQosEntry.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsBearerQosEntry.setDescription('An entry contains management information of Cellular 4G/LTE QoS parameters. An entry of this table is created if an interface capable of providing operational Cellular 4G/LTE QoS parameters is detected by the agent. An entry of this table is deleted by the agent if the corresponding entry in ifTable is removed.')
cwceLteEpsBearerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cwceLteEpsBearerId.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsBearerId.setDescription('This object indicates the EPS Bearer Identity which is allocated by the Mobility Management Entity (MME).')
cwceLteEpsBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gbr", 1), ("nonGbr", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsBearerType.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsBearerType.setDescription('This object indicates the type of bearers. gbr - Guaranteed Bit Rate(GBR). GBR bearer has a minimum amount of bandwidth that is reserved by the network, and these resources are always consumed in a radio base station regardless of whether it is used or not. nonGbr - non-Guaranteed Bit Rate(Non-GBR). Non-GBR bearers are for best-effort services and do not consume any network resources. unknown - the type of bearers is unknown.')
cwceLteEpsQCI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsQCI.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsQCI.setDescription('This object indicates the QoS Class Identifier(QCI). The QCI along with the ARP characterizes the QoS of the bearer.')
cwceLteEpsArp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsArp.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsArp.setDescription('This object indicates the Allocation and Retention Priority(ARP). ARP is a QoS parameter designed to facilitate decisions as to whether a bearer establishment/modification request can be accepted.')
cwceLteEpsBearerResType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("defaultBearer", 1), ("dedicatedBearer", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsBearerResType.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsBearerResType.setDescription('This object indicates the Bearer resource type.')
cwceLteEpsGbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsGbr.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsGbr.setDescription('This object indicates the Guaranteed Bit Rate(GBR) which determines the resource reservation to guarantee a given data rate.')
cwceLteEpsMbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsMbr.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsMbr.setDescription('This object indicates the Maximum Bit Rate(MBR) which is used for policing the user traffic.')
cwceLteEpsAmbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsAmbr.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsAmbr.setDescription("This object indicates the Aggregated Maximum Bit Rate. This object is valid only if the value of the corresponding cwceLteEpsBearerResType is 'defaultBearer'.")
cwceLteEpsTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 9), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsTotalBytesTx.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsTotalBytesTx.setDescription('This object indicates the total data bytes transmitted by this bearer.')
cwceLteEpsTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 10), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsTotalBytesRx.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsTotalBytesRx.setDescription('This object indicates the total data bytes received by this bearer.')
cwceLteEpsPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsPacketsTx.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsPacketsTx.setDescription('This object indicates the number of packets transmitted by this bearer.')
cwceLteEpsPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsPacketsRx.setStatus('current')
if mibBuilder.loadTexts: cwceLteEpsPacketsRx.setDescription('This object indicates the number of packets received by this bearer.')
cwceLteRsrqOnsetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 817, 0, 1)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrq"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotifThreshold"))
if mibBuilder.loadTexts: cwceLteRsrqOnsetNotif.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrqOnsetNotif.setDescription('If RSRQ goes below cwceLteRsrqOnsetNotifThreshold and the service bit in cwceLteRsrqOnsetNotifFlag is set, this notification will be generated. Object cwceLteRsrqOnsetNotifFlag will indicate which service generates this notification and the associated RSRQ will be reported in cwceLteNotifRsrq. Please note that cwceLteNotifRsrq is used to indicate the RSRQ value that triggers the notification, user should go to the corresponding radio table to get the current RSRQ value.')
cwceLteRsrqAbateNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 817, 0, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrq"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotifThreshold"))
if mibBuilder.loadTexts: cwceLteRsrqAbateNotif.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrqAbateNotif.setDescription('If RSRQ goes above cwceLteRsrqAbateNotifThreshold and the service bit in cwceLteRsrqOnsetNotifFlag is set, this notification will be generated. Object cwceLteRsrqAbateNotifFlag will indicate which service generates this notification and the associated RSRQ will be reported in cwceLteNotifRsrq. Please note that cwceLteNotifRsrq is used to indicate the RSRQ value that triggers the notification, user should go to the corresponding radio table to get the current RSRQ value.')
cwceLteRsrpOnsetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 817, 0, 3)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotifThreshold"))
if mibBuilder.loadTexts: cwceLteRsrpOnsetNotif.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrpOnsetNotif.setDescription('If RSRP goes below cwceLteRsrpOnsetNotifThreshold and the service bit in cwceLteRsrpOnsetNotifFlag is set, this notification will be generated. Object cwceLteRsrpOnsetNotifFlag will indicate which service generates this notification and the associated RSRP will be reported in cwceLteNotifRsrp. Please note that cwceLteNotifRsrp is used to indicate the RSRP value that triggers the notification, user should go to the corresponding radio table to get the current RSRP value.')
cwceLteRsrpAbateNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 817, 0, 4)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotifThreshold"))
if mibBuilder.loadTexts: cwceLteRsrpAbateNotif.setStatus('current')
if mibBuilder.loadTexts: cwceLteRsrpAbateNotif.setDescription('If RSRP goes above cwceLteRsrqAbateNotifThreshold and the service bit in cwceLteRsrpOnsetNotifFlag is set, this notification will be generated. Object cwceLteRsrpAbateNotifFlag will indicate which service generates this notification and the associated RSRP will be reported in cwceLteNotifRsrp. Please note that cwceLteNotifRsrp is used to indicate the RSRP value that triggers the notification, user should go to the corresponding radio table to get the current RSRP value.')
ciscoWanCellExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 1))
ciscoWanCellExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 2))
ciscoWanCellExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 1, 1)).setObjects(("CISCO-WAN-CELL-EXT-MIB", "ciscoWanCellExtMIBNotificationGroup"), ("CISCO-WAN-CELL-EXT-MIB", "ciscoWanCellExtMIBLteObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCellExtMIBCompliance = ciscoWanCellExtMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoWanCellExtMIBCompliance.setDescription('The compliance statement for the CISCO-WAN-CELL-EXT-MIB.')
ciscoWanCellExtMIBLteObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 2, 1)).setObjects(("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrRsrp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrRsrq"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrSnr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrSinr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrCqiIndex"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrq"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotifThreshold"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotifThreshold"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotifThreshold"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotifThreshold"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrOperatingBand"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrpPerSecond"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrpPerMinute"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrpPerHour"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrqPerSecond"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrqPerMinute"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrqPerHour"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteIpv4AddrType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteIpv6AddrType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileIPv4Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileIPv6Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileApn"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileApnAmbr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileStorage"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileRowStatus"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnProfileUsed"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnConnStatus"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnIpv4Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnIpv6Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnPriDnsIpv4Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnSecDnsIpv4Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnPriDnsIpv6Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnSecDnsIpv6Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsBearerType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsArp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsQCI"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsBearerResType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsGbr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsMbr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsAmbr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsTotalBytesTx"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsTotalBytesRx"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsPacketsTx"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsPacketsRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCellExtMIBLteObjectGroup = ciscoWanCellExtMIBLteObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanCellExtMIBLteObjectGroup.setDescription('A collection of objects for Cellular 4G/LTE.')
ciscoWanCellExtMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 2, 2)).setObjects(("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotif"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotif"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotif"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCellExtMIBNotificationGroup = ciscoWanCellExtMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanCellExtMIBNotificationGroup.setDescription('A collection of objects for Cellular WAN notifications.')
mibBuilder.exportSymbols("CISCO-WAN-CELL-EXT-MIB", cwceLtePdnSecDnsIpv6Addr=cwceLtePdnSecDnsIpv6Addr, cwceLteRsrpOnsetNotifThreshold=cwceLteRsrpOnsetNotifThreshold, cwceLteRsrpAbateNotifThreshold=cwceLteRsrpAbateNotifThreshold, cwceLteRadioHistoryRsrqPerSecond=cwceLteRadioHistoryRsrqPerSecond, cwceLteRsrqOnsetNotifThreshold=cwceLteRsrqOnsetNotifThreshold, cwceLteRadioHistoryRsrpPerHour=cwceLteRadioHistoryRsrpPerHour, cwceLteCurrRsrp=cwceLteCurrRsrp, cwceLtePdnIpv4Addr=cwceLtePdnIpv4Addr, CiscoWanCellExtSINR=CiscoWanCellExtSINR, ciscoWanCellExtMIBNotificationGroup=ciscoWanCellExtMIBNotificationGroup, cwceLtePdnPriDnsIpv4Addr=cwceLtePdnPriDnsIpv4Addr, cwceLteEpsBearerType=cwceLteEpsBearerType, cwceLtePdnSecDnsIpv4Addr=cwceLtePdnSecDnsIpv4Addr, ciscoWanCellExtMIB=ciscoWanCellExtMIB, cwceLteRadioHistoryRsrqTable=cwceLteRadioHistoryRsrqTable, cwceLteEpsBearerId=cwceLteEpsBearerId, cwceLteRsrpOnsetNotif=cwceLteRsrpOnsetNotif, cwceLteProfileTable=cwceLteProfileTable, cwceLteRsrpAbateNotif=cwceLteRsrpAbateNotif, cwceLteEpsMbr=cwceLteEpsMbr, cwceLteIpv4AddrType=cwceLteIpv4AddrType, cwceLtePdnPriDnsIpv6Addr=cwceLtePdnPriDnsIpv6Addr, cwceLteRadioEntry=cwceLteRadioEntry, cwceLteIpv6AddrType=cwceLteIpv6AddrType, cwceLteRsrqAbateNotif=cwceLteRsrqAbateNotif, cwceLteNotifRsrp=cwceLteNotifRsrp, cwceLteProfileEntry=cwceLteProfileEntry, cwceLteRsrqOnsetNotif=cwceLteRsrqOnsetNotif, cwceLteProfileStorage=cwceLteProfileStorage, cwceLteRadioTable=cwceLteRadioTable, cwceLteRadioHistoryRsrqPerHour=cwceLteRadioHistoryRsrqPerHour, cwceLteCurrSinr=cwceLteCurrSinr, ciscoWanCellExtMIBCompliances=ciscoWanCellExtMIBCompliances, cwceLteEpsQCI=cwceLteEpsQCI, PYSNMP_MODULE_ID=ciscoWanCellExtMIB, cwceLteProfileIPv4Addr=cwceLteProfileIPv4Addr, cwceLteCurrRsrq=cwceLteCurrRsrq, cwceLteEpsPacketsRx=cwceLteEpsPacketsRx, cwceLteRadioHistoryRsrqPerMinute=cwceLteRadioHistoryRsrqPerMinute, cwceLteEpsTotalBytesRx=cwceLteEpsTotalBytesRx, cwceLtePdnEntry=cwceLtePdnEntry, cwceLteProfileIPv6Addr=cwceLteProfileIPv6Addr, cwceLteRadioHistoryRsrpEntry=cwceLteRadioHistoryRsrpEntry, CiscoWanCellExtProtocolType=CiscoWanCellExtProtocolType, ciscoWanCellExtMIBNotifs=ciscoWanCellExtMIBNotifs, cwceLteCurrOperatingBand=cwceLteCurrOperatingBand, cwceLtePdnIpv6Addr=cwceLtePdnIpv6Addr, cwceLteRadioHistoryRsrpPerSecond=cwceLteRadioHistoryRsrpPerSecond, cwceLtePdnType=cwceLtePdnType, cwceLteCurrCqiIndex=cwceLteCurrCqiIndex, cwceLteRadioHistoryRsrpTable=cwceLteRadioHistoryRsrpTable, ciscoWanCellExtLte=ciscoWanCellExtLte, cwceLteEpsBearerQosEntry=cwceLteEpsBearerQosEntry, cwceLteRadioHistoryRsrqEntry=cwceLteRadioHistoryRsrqEntry, cwceLteProfile=cwceLteProfile, cwceLteEpsAmbr=cwceLteEpsAmbr, ciscoWanCellExtMIBGroups=ciscoWanCellExtMIBGroups, cwceLteEpsTotalBytesTx=cwceLteEpsTotalBytesTx, cwceLteRadioHistoryRsrpPerMinute=cwceLteRadioHistoryRsrpPerMinute, cwceLteEpsBearerResType=cwceLteEpsBearerResType, ciscoWanCellExtMIBObjects=ciscoWanCellExtMIBObjects, cwceLtePdnTable=cwceLtePdnTable, cwceLteEpsPacketsTx=cwceLteEpsPacketsTx, ciscoWanCellExtMIBConform=ciscoWanCellExtMIBConform, cwceLteRsrpAbateNotifFlag=cwceLteRsrpAbateNotifFlag, cwceLteCurrSnr=cwceLteCurrSnr, CiscoWanCellExtRsrp=CiscoWanCellExtRsrp, ciscoWanCellExtMIBCompliance=ciscoWanCellExtMIBCompliance, cwceLteEpsGbr=cwceLteEpsGbr, cwceLteRadioHistory=cwceLteRadioHistory, cwceLteNotifRsrq=cwceLteNotifRsrq, cwceLteEpsBearerQosTable=cwceLteEpsBearerQosTable, CiscoWanCellExtRsrq=CiscoWanCellExtRsrq, cwceLteRsrpOnsetNotifFlag=cwceLteRsrpOnsetNotifFlag, cwceLteRsrqOnsetNotifFlag=cwceLteRsrqOnsetNotifFlag, cwceLteProfileApnAmbr=cwceLteProfileApnAmbr, CiscoWanCellExtCqiIndex=CiscoWanCellExtCqiIndex, cwceLteEpsArp=cwceLteEpsArp, cwceLtePdnProfileUsed=cwceLtePdnProfileUsed, cwceLteRadio=cwceLteRadio, ciscoWanCellExtMIBLteObjectGroup=ciscoWanCellExtMIBLteObjectGroup, cwceLteRsrqAbateNotifFlag=cwceLteRsrqAbateNotifFlag, cwceLteProfileApn=cwceLteProfileApn, cwceLteProfileRowStatus=cwceLteProfileRowStatus, cwceLtePdnConnStatus=cwceLtePdnConnStatus, cwceLteProfileType=cwceLteProfileType, CiscoWanCellExtSNR=CiscoWanCellExtSNR, cwceLteRsrqAbateNotifThreshold=cwceLteRsrqAbateNotifThreshold, cwceLteProfileIndex=cwceLteProfileIndex)
