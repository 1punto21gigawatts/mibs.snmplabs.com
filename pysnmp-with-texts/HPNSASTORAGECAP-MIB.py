#
# PySNMP MIB module HPNSASTORAGECAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSASTORAGECAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter64, ModuleIdentity, Bits, IpAddress, MibIdentifier, Gauge32, Counter32, NotificationType, TimeTicks, Unsigned32, Integer32, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter64", "ModuleIdentity", "Bits", "IpAddress", "MibIdentifier", "Gauge32", "Counter32", "NotificationType", "TimeTicks", "Unsigned32", "Integer32", "iso", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaStorageCap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 15))
hpnsaSCMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 1))
hpnsaSCAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 2))
hpnsaSCDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3))
hpnsaSCHist = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 4))
hpnsaSCMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCMibRevMajor.setDescription('The major revision level of the MIB.')
hpnsaSCMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCMibRevMinor.setDescription('The minor revision level of the MIB.')
hpnsaSCAgentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 2, 1), )
if mibBuilder.loadTexts: hpnsaSCAgentTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCAgentTable.setDescription('A table of SNMP Agents that satisfy requests for this MIB.')
hpnsaSCAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 2, 1, 1), ).setIndexNames((0, "HPNSASTORAGECAP-MIB", "hpnsaSCAgentIndex"))
if mibBuilder.loadTexts: hpnsaSCAgentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCAgentEntry.setDescription('A description of the agents that access Storage Capacity related information.')
hpnsaSCAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCAgentIndex.setDescription('A unique index for this module description.')
hpnsaSCAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCAgentName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCAgentName.setDescription('Name of the Agent/Agents satisfying SNMP requests for this MIB.')
hpnsaSCAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCAgentVersion.setDescription('Version number of the Agent/Agents satisfying SNMP requests for this MIB.')
hpnsaSCAgentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCAgentDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCAgentDate.setDescription('The date on which this Agent was created. field octets contents range _________________________________________________ 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaSCDrvNumOfDrives = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCDrvNumOfDrives.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvNumOfDrives.setDescription('This specifies the number of logical drives or volumes in this system.')
hpnsaSCDrvTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2), )
if mibBuilder.loadTexts: hpnsaSCDrvTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvTable.setDescription(' A table of storage capacity logical drive information entries.')
hpnsaSCDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1), ).setIndexNames((0, "HPNSASTORAGECAP-MIB", "hpnsaSCDrvIndex"))
if mibBuilder.loadTexts: hpnsaSCDrvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvEntry.setDescription(' Storage Capacity logical drive information.')
hpnsaSCDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCDrvIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvIndex.setDescription('A unique index for the logical drive.')
hpnsaSCDrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCDrvName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvName.setDescription('A string indicating the name of the logical drive')
hpnsaSCDrvTrapsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaSCDrvTrapsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvTrapsEnabled.setDescription('This parameter specifies whether storage capacity traps are generated (enabled 1) or not (disabled 0).')
hpnsaSCDrvTrapsPollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaSCDrvTrapsPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvTrapsPollTime.setDescription('This specifies the time in minutes in which a logical drive is polled to check if thresholds have been exceeded.')
hpnsaSCDrvHistSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaSCDrvHistSampleTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvHistSampleTime.setDescription('This specifies the time in minutes in which a logical drive is sampled to maintain historical data.')
hpnsaSCDrvLoThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaSCDrvLoThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvLoThreshold.setDescription('This specifies the lower threshold (a percentage of the total capacity of the logical drive) which has to be exceeded to trigger off an informational trap')
hpnsaSCDrvWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaSCDrvWarnThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvWarnThreshold.setDescription('This specifies the threshold (a percentage of the total capacity of the logical drive) which has to be exceeded to trigger off a warning trap')
hpnsaSCDrvCritThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaSCDrvCritThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvCritThreshold.setDescription('This specifies the threshold (a percentage of the total capacity of the logical drive) which has to be exceeded to trigger off a critical trap')
hpnsaSCDrvTotalNumDirEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCDrvTotalNumDirEntries.setStatus('optional')
if mibBuilder.loadTexts: hpnsaSCDrvTotalNumDirEntries.setDescription('Total number of directory entries per logical drive. Only applicable to netware')
hpnsaSCDrvTotalNumDirEntriesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCDrvTotalNumDirEntriesUsed.setStatus('optional')
if mibBuilder.loadTexts: hpnsaSCDrvTotalNumDirEntriesUsed.setDescription('Number of directory entries used per logical drive. Only applicable to netware')
hpnsaSCDrvCurrentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCDrvCurrentTotal.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvCurrentTotal.setDescription('The current total capacity of the logical drive in KB')
hpnsaSCDrvCurrentAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCDrvCurrentAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvCurrentAvailable.setDescription('The current capacity available on the logical drive in KB')
hpnsaSCDrvNumOfSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCDrvNumOfSamples.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvNumOfSamples.setDescription('Total number historical samples for the logical drive.')
hpnsaSCDrvClearHist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 3, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaSCDrvClearHist.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCDrvClearHist.setDescription('Setting this variable to the decimal value 1234 will trigger the agent to immediately delete the samples for the logical drive. Getting the value will always return a 0. ')
hpnsaSCHistTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 4, 1), )
if mibBuilder.loadTexts: hpnsaSCHistTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCHistTable.setDescription(' A table of storage capacity logical drive information entries.')
hpnsaSCHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 4, 1, 1), ).setIndexNames((0, "HPNSASTORAGECAP-MIB", "hpnsaSCHistDriveIndex"), (0, "HPNSASTORAGECAP-MIB", "hpnsaSCHistIndex"))
if mibBuilder.loadTexts: hpnsaSCHistEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCHistEntry.setDescription('Storage Capacity logical drive historical information.')
hpnsaSCHistDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCHistDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCHistDriveIndex.setDescription('A unique index for the logical drive.')
hpnsaSCHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCHistIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCHistIndex.setDescription('A unique index for each historical drive sample.')
hpnsaSCHistSample = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 15, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSCHistSample.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSCHistSample.setDescription('A block of data containing one historical drive sample. The structure of the bytes are: octets contents range __________________________________________ Local date and time on which sample was taken. 1 years since 1900 0..255 2 month 1..12 3 day 1..31 4 hour 0..23 5 minute 0..59 6 second 0..59 7-10 Total capacity in Kbytes. The 32-bit integer format is: Octet 7 (LSB) Octet 10 (MSB) 11-14 Available space in Kbytes. The 32-bit integer format is: Octet 11 (LSB) Octet 14 (MSB) ')
mibBuilder.exportSymbols("HPNSASTORAGECAP-MIB", hpnsaStorageCap=hpnsaStorageCap, hpnsaSCMibRev=hpnsaSCMibRev, hpnsaSCHistEntry=hpnsaSCHistEntry, hpnsaSCHistTable=hpnsaSCHistTable, hpnsaSCHist=hpnsaSCHist, hpnsaSCHistDriveIndex=hpnsaSCHistDriveIndex, hpnsaSCMibRevMinor=hpnsaSCMibRevMinor, hpnsaSCDrvClearHist=hpnsaSCDrvClearHist, hpnsaSCMibRevMajor=hpnsaSCMibRevMajor, hpnsaSCDrvTrapsEnabled=hpnsaSCDrvTrapsEnabled, hpnsaSCAgentTable=hpnsaSCAgentTable, hpnsaSCDrvLoThreshold=hpnsaSCDrvLoThreshold, hpnsaSCAgentDate=hpnsaSCAgentDate, hpnsaSCDrvTotalNumDirEntries=hpnsaSCDrvTotalNumDirEntries, hpnsaSCAgentVersion=hpnsaSCAgentVersion, hpnsaSCDrvCritThreshold=hpnsaSCDrvCritThreshold, hpnsaSCDrvTable=hpnsaSCDrvTable, hpnsaSCHistIndex=hpnsaSCHistIndex, hpnsaSCDrvTotalNumDirEntriesUsed=hpnsaSCDrvTotalNumDirEntriesUsed, hpnsaSCAgent=hpnsaSCAgent, hpnsaSCDrvWarnThreshold=hpnsaSCDrvWarnThreshold, nm=nm, hpnsaSCAgentEntry=hpnsaSCAgentEntry, hpnsaSCDrvNumOfDrives=hpnsaSCDrvNumOfDrives, hpnsaSCDrvName=hpnsaSCDrvName, hpnsaSCDrvNumOfSamples=hpnsaSCDrvNumOfSamples, hpnsaSCDrvHistSampleTime=hpnsaSCDrvHistSampleTime, hpnsaSCHistSample=hpnsaSCHistSample, hp=hp, hpnsaSCAgentIndex=hpnsaSCAgentIndex, hpnsaSCDrvCurrentTotal=hpnsaSCDrvCurrentTotal, hpnsaSCAgentName=hpnsaSCAgentName, hpnsaSCDrvIndex=hpnsaSCDrvIndex, hpnsaSCDrvTrapsPollTime=hpnsaSCDrvTrapsPollTime, hpnsaSCDrvCurrentAvailable=hpnsaSCDrvCurrentAvailable, hpnsaSCDrv=hpnsaSCDrv, hpnsaSCDrvEntry=hpnsaSCDrvEntry, hpnsa=hpnsa)
