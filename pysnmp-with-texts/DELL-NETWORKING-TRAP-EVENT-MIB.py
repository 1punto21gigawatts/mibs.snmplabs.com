#
# PySNMP MIB module DELL-NETWORKING-TRAP-EVENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DELL-NETWORKING-TRAP-EVENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:38:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
dellNetMgmt, = mibBuilder.importSymbols("DELL-NETWORKING-SMI", "dellNetMgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, ModuleIdentity, TimeTicks, Gauge32, MibIdentifier, Unsigned32, ObjectIdentity, Bits, Counter64, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "ModuleIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "Unsigned32", "ObjectIdentity", "Bits", "Counter64", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DateAndTime, TextualConvention, DisplayString, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString", "RowPointer")
dellNetTrapEventMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 6))
dellNetTrapEventMib.setRevisions(('2012-02-21 00:00', '2005-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dellNetTrapEventMib.setRevisionsDescriptions(('Add historyTrapEventPort to dellNetHistoryTrapEventTable and activeTrapEventPort to dellNetActiveTrapEventTable. ', 'The initial reversion. ',))
if mibBuilder.loadTexts: dellNetTrapEventMib.setLastUpdated('201202210000Z')
if mibBuilder.loadTexts: dellNetTrapEventMib.setOrganization('Dell Inc')
if mibBuilder.loadTexts: dellNetTrapEventMib.setContactInfo('http://www.dell.com/support')
if mibBuilder.loadTexts: dellNetTrapEventMib.setDescription("Dell Networking OS Trap Alarm MIB. Dell Networking OS Trap Event MIB allows users to track or to view the trap events logged by the system. There are two types of trap event tables, hostory trap event table and active trap event table. All the traps sent by the system are logged to history trap event table. The trap that need action will logged to active trap event table; 'Card down' trap event will go to the active trap event table, and the trap will be cleared as soon as 'Card Up' event is issued. ")
dellNetTrapEventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1))
dellNetHistoryTrapEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1))
dellNetActiveTrapEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2))
dellNetTrapVarbindEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 3))
dellNetChassisBootupTime = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellNetChassisBootupTime.setStatus('current')
if mibBuilder.loadTexts: dellNetChassisBootupTime.setDescription('The dellNetChassisBootupTime used the timestamp to uniquely identify the system between system reboots. Each time an NMS connects to a chassis, it should verify its dellNetChassisBootupTime. If the time is different, it should refresh its history and active tables. But, if the dellNetChassisBootupTime is the same, then it should query the dellNetLastTrapEventSeqId and update its history and active tables from its own dellNetLastTrapEventSeqId to the chassis dellNetLastTrapEventSeqId. ')
dellNetLastTrapEventSeqId = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellNetLastTrapEventSeqId.setStatus('current')
if mibBuilder.loadTexts: dellNetLastTrapEventSeqId.setDescription(' dellNetLastTrapEventSeqId is a sequential ID indicated the number of traps sent by the syatem since chassis is loaded. The same id can also be used as the index to the history and active tables. Anytime, if an NMS dropped its connection with a chassis, it should sync up its history tables from its own dellNetLastTrapEventSeqId to the chassis dellNetLastTrapEventSeqId. ')
dellNetMaxHistoryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellNetMaxHistoryTableSize.setStatus('current')
if mibBuilder.loadTexts: dellNetMaxHistoryTableSize.setDescription(' dellNetMaxHistoryTableSize is the maximum rows in history table. This also limits the active/varbind tables. Whenever there is a chance of overflow, the oldest entry will be deleted form the history table. Respective entry from active table also will be deleted and the corresponding varbind entries will be deleted from varbind table. ')
dellNetHistoryTrapEventTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4), )
if mibBuilder.loadTexts: dellNetHistoryTrapEventTable.setStatus('current')
if mibBuilder.loadTexts: dellNetHistoryTrapEventTable.setDescription('A table of history trap event table.')
dellNetHistoryTrapEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4, 1), ).setIndexNames((0, "DELL-NETWORKING-TRAP-EVENT-MIB", "historyTrapEventSeqId"))
if mibBuilder.loadTexts: dellNetHistoryTrapEventEntry.setStatus('current')
if mibBuilder.loadTexts: dellNetHistoryTrapEventEntry.setDescription('A table of history trap event table. ')
historyTrapEventSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: historyTrapEventSeqId.setStatus('current')
if mibBuilder.loadTexts: historyTrapEventSeqId.setDescription(' historyTrapEventSeqId is a sequential ID and the index to history trap table. ')
historyTrapEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTrapEventSeverity.setStatus('current')
if mibBuilder.loadTexts: historyTrapEventSeverity.setDescription(' The trap severity level. ')
historyTrapEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTrapEventType.setStatus('current')
if mibBuilder.loadTexts: historyTrapEventType.setDescription(' The trap category type. ')
historyTrapEventMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTrapEventMsg.setStatus('current')
if mibBuilder.loadTexts: historyTrapEventMsg.setDescription(' The message or the description of the trap. ')
historyTrapEventOid = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTrapEventOid.setStatus('current')
if mibBuilder.loadTexts: historyTrapEventOid.setDescription(' The OID of this trap. ')
historyTrapEventSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTrapEventSlot.setStatus('current')
if mibBuilder.loadTexts: historyTrapEventSlot.setDescription(' Corresponsding to chAlarmVarSlot in trap definition. For example if card is down, this field will have the card slot number. The value of -1 is used for non-applicable case. ')
historyTrapEventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTrapEventTimeStamp.setStatus('current')
if mibBuilder.loadTexts: historyTrapEventTimeStamp.setDescription(' The timestamp when the trap is sent. ')
historyTrapEventPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTrapEventPort.setStatus('current')
if mibBuilder.loadTexts: historyTrapEventPort.setDescription(' Corresponsding to chAlarmVarPort in trap definition. This field may be used for other instance depending on the trap type, for example, tray number in case of fan or power supply trap. The value of -1 is used for non-applicable case. ')
dellNetActiveTrapEventTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1), )
if mibBuilder.loadTexts: dellNetActiveTrapEventTable.setStatus('current')
if mibBuilder.loadTexts: dellNetActiveTrapEventTable.setDescription('A table of active trap event table.')
dellNetActiveTrapEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1, 1), ).setIndexNames((0, "DELL-NETWORKING-TRAP-EVENT-MIB", "activeTrapEventSeqId"))
if mibBuilder.loadTexts: dellNetActiveTrapEventEntry.setStatus('current')
if mibBuilder.loadTexts: dellNetActiveTrapEventEntry.setDescription('A table of active trap event table. ')
activeTrapEventSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: activeTrapEventSeqId.setStatus('current')
if mibBuilder.loadTexts: activeTrapEventSeqId.setDescription(' activeTrapEventSeqId is a sequential ID and the index to active trap table. ')
activeTrapEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTrapEventSeverity.setStatus('current')
if mibBuilder.loadTexts: activeTrapEventSeverity.setDescription(' The trap severity level. ')
activeTrapEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTrapEventType.setStatus('current')
if mibBuilder.loadTexts: activeTrapEventType.setDescription(' The trap category type. ')
activeTrapEventMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTrapEventMsg.setStatus('current')
if mibBuilder.loadTexts: activeTrapEventMsg.setDescription(' The message or the description of the trap. ')
activeTrapEventOid = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTrapEventOid.setStatus('current')
if mibBuilder.loadTexts: activeTrapEventOid.setDescription(' The OID of this trap. ')
activeTrapEventSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTrapEventSlot.setStatus('current')
if mibBuilder.loadTexts: activeTrapEventSlot.setDescription(' Corresponsding to chAlarmVarSlot in trap definition. For example if card is down, this field will have the card slot number. The value of -1 is used for non-applicable case. ')
activeTrapEventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTrapEventTimeStamp.setStatus('current')
if mibBuilder.loadTexts: activeTrapEventTimeStamp.setDescription(' The timestamp when the trap is sent. ')
activeTrapEventPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTrapEventPort.setStatus('current')
if mibBuilder.loadTexts: activeTrapEventPort.setDescription(' Corresponsding to chAlarmVarPort in trap definition. This field may be used for other instance depending on the trap type, for example, tray number in case of fan or power supply trap. The value of -1 is used for non-applicable case. ')
dellNetTrapEventVarbindTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 3, 1), )
if mibBuilder.loadTexts: dellNetTrapEventVarbindTable.setStatus('current')
if mibBuilder.loadTexts: dellNetTrapEventVarbindTable.setDescription('A table of trap event varbind table.')
dellNetTrapEventVarbindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 3, 1, 1), ).setIndexNames((0, "DELL-NETWORKING-TRAP-EVENT-MIB", "trapEventVarbindSeqId"), (0, "DELL-NETWORKING-TRAP-EVENT-MIB", "trapEventVarbindId"))
if mibBuilder.loadTexts: dellNetTrapEventVarbindEntry.setStatus('current')
if mibBuilder.loadTexts: dellNetTrapEventVarbindEntry.setDescription('A table of trap event varbind table. ')
trapEventVarbindSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: trapEventVarbindSeqId.setStatus('current')
if mibBuilder.loadTexts: trapEventVarbindSeqId.setDescription(' trapEventVarbindSeqId is a sequential ID and the index to varbind trap table. ')
trapEventVarbindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: trapEventVarbindId.setStatus('current')
if mibBuilder.loadTexts: trapEventVarbindId.setDescription(' trapEventVarbindId is the ID and the index to history trap table. ')
trapEventVarbindOid = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 3, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventVarbindOid.setStatus('current')
if mibBuilder.loadTexts: trapEventVarbindOid.setDescription(' The OID of this trap. ')
trapEventVarbindType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventVarbindType.setStatus('current')
if mibBuilder.loadTexts: trapEventVarbindType.setDescription(' The trap category type. ')
trapEventVarbindValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 6, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapEventVarbindValue.setStatus('current')
if mibBuilder.loadTexts: trapEventVarbindValue.setDescription(' This is the result or data in this trap. ')
mibBuilder.exportSymbols("DELL-NETWORKING-TRAP-EVENT-MIB", dellNetTrapEventVarbindEntry=dellNetTrapEventVarbindEntry, dellNetTrapEventObjects=dellNetTrapEventObjects, historyTrapEventSlot=historyTrapEventSlot, historyTrapEventPort=historyTrapEventPort, trapEventVarbindType=trapEventVarbindType, dellNetActiveTrapEventEntry=dellNetActiveTrapEventEntry, historyTrapEventOid=historyTrapEventOid, dellNetHistoryTrapEventTable=dellNetHistoryTrapEventTable, historyTrapEventType=historyTrapEventType, activeTrapEventSlot=activeTrapEventSlot, dellNetLastTrapEventSeqId=dellNetLastTrapEventSeqId, activeTrapEventTimeStamp=activeTrapEventTimeStamp, trapEventVarbindId=trapEventVarbindId, dellNetTrapVarbindEvent=dellNetTrapVarbindEvent, dellNetHistoryTrapEventEntry=dellNetHistoryTrapEventEntry, trapEventVarbindOid=trapEventVarbindOid, historyTrapEventMsg=historyTrapEventMsg, dellNetTrapEventMib=dellNetTrapEventMib, historyTrapEventSeverity=historyTrapEventSeverity, PYSNMP_MODULE_ID=dellNetTrapEventMib, dellNetActiveTrapEvent=dellNetActiveTrapEvent, historyTrapEventTimeStamp=historyTrapEventTimeStamp, historyTrapEventSeqId=historyTrapEventSeqId, activeTrapEventSeverity=activeTrapEventSeverity, activeTrapEventOid=activeTrapEventOid, dellNetChassisBootupTime=dellNetChassisBootupTime, dellNetTrapEventVarbindTable=dellNetTrapEventVarbindTable, dellNetHistoryTrapEvent=dellNetHistoryTrapEvent, dellNetActiveTrapEventTable=dellNetActiveTrapEventTable, activeTrapEventPort=activeTrapEventPort, trapEventVarbindSeqId=trapEventVarbindSeqId, activeTrapEventSeqId=activeTrapEventSeqId, activeTrapEventType=activeTrapEventType, dellNetMaxHistoryTableSize=dellNetMaxHistoryTableSize, trapEventVarbindValue=trapEventVarbindValue, activeTrapEventMsg=activeTrapEventMsg)
