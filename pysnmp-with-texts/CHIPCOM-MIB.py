#
# PySNMP MIB module CHIPCOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPCOM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, enterprises, iso, ModuleIdentity, NotificationType, Bits, Integer32, TimeTicks, Unsigned32, ObjectIdentity, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "enterprises", "iso", "ModuleIdentity", "NotificationType", "Bits", "Integer32", "TimeTicks", "Unsigned32", "ObjectIdentity", "IpAddress", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
chipGenProduct = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("product-5100M-MGT", 1), ("product-5102B-EE", 2), ("product-8383B", 3), ("product-5112H-UTP", 4), ("product-5300M-MGT", 5), ("product-5200M-MGT", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenProduct.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenProduct.setDescription('The product type represented by this agent.')
chipGenServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenServiceDate.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenServiceDate.setDescription("The date that the product was last serviced in the format yymmdd. If this date is unknown, the value of this object is '000000'.")
chipGenNetman = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenNetman.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenNetman.setDescription('The IP (source) Address of the last authenticated SNMP PDU received by this entity before this request. An IP Address of 00.00.00.00 represents the default value.')
chipGenDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenDiagnostics.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenDiagnostics.setDescription("The result of this product's diagnostic test(s). If any test fails, this will have the failed(2) value. Note, many products do not operate after a diagnostic failure. In this case, no SNMP communication would be available.")
chipGenSerial = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenSerial.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenSerial.setDescription('The serial number of this product.')
chipGenID = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipGenID.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenID.setDescription('A unique ID used for grouping disparate agents together. For example, a concentrator may contain multiple agents. This ID is could be assigned by the management station to identify all of these agents as being contained in the same concentrator.')
chipGenVers = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenVers.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenVers.setDescription('The version identifier(s) for this agent.')
chipGenAuthFailureAddr = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenAuthFailureAddr.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenAuthFailureAddr.setDescription('The source IP Address of the last SNMP request that caused an authentication failure trap to be generated. This object is also included in the SNMP authenticationFailure trap.')
chipGenTimeLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenTimeLastChanged.setStatus('mandatory')
if mibBuilder.loadTexts: chipGenTimeLastChanged.setDescription('A snapshot of sysUpTime when the last trap was generated. This attribute can be used to save polling by a management station. If there have been no traps generated since the last poll, there is no need for the station to poll again.')
chipEchoStart = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEcho", 1), ("startEcho", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoStart.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoStart.setDescription('Setting chipEchoStart to startEcho(2) causes the device to begin an ICMP echo sequence using the parameters indicated by the rest of the chipEcho group.')
chipEchoAddr = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoAddr.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoAddr.setDescription('The IP Address to which the device will ping. The default value is the loopback address 127.0.0.1 .')
chipEchoPattern = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroes", 1), ("ones", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoPattern.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoPattern.setDescription('The actual pattern to be contained in the ICMP echo packet.')
chipEchoNumber = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoNumber.setDescription('The number of ICMP echo packets (pings) to send.')
chipEchoSize = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoSize.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoSize.setDescription('The size of the ICMP echo packet (ping) to send when chipEchoStart is set. The valid range is between 64 and 1500 octets.')
chipEchoResponseCounts = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipEchoResponseCounts.setStatus('mandatory')
if mibBuilder.loadTexts: chipEchoResponseCounts.setDescription('The count of ICMP echo response packets received since the last PING was initiated. ')
olAgentsMySlot = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsMySlot.setStatus('mandatory')
if mibBuilder.loadTexts: olAgentsMySlot.setDescription('The slot id of this agent.')
olAgentsMasterReset = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olAgentsMasterReset.setStatus('mandatory')
if mibBuilder.loadTexts: olAgentsMasterReset.setDescription('Resetting mastership causes a new mastership election to occur. The agent with the highest mastership priority will become the new master. If there is more than one agent with the highest priority, the selection between those agents will be arbritrary.')
olAgentsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: olAgentsTable.setStatus('mandatory')
if mibBuilder.loadTexts: olAgentsTable.setDescription('A table of agents in the concentrator as seen by this agent. A master will see all the agents; a slave will only see itself.')
olAgentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olAgentsSlotIndex"))
if mibBuilder.loadTexts: olAgentsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olAgentsEntry.setDescription('A profile of an agent within the concentrator.')
olAgentsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olAgentsSlotIndex.setDescription('The slot number that identifies the referenced agent.')
olAgentsStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: olAgentsStationAddr.setDescription('The unique identifier for this agent. Often this is the value of ifPhysAddress for the first interface.')
olAgentsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olAgentsIpAddress.setDescription("An IP Address that can be used to communicate to this agent. Note, this object's value may change as the agent switches to different sub-networks.")
olAgentsMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olAgentsMasterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olAgentsMasterStatus.setDescription('The mastership status of this agent.')
olAgentsMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10), ("never", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olAgentsMasterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: olAgentsMasterPriority.setDescription('The mastership priority of this agent. Ten is the highest and one is the lowest. Never means will not be able become master. Some agents do not have the capability to become master (the etherent to ethernet bridge, e.g.) and setting those agents to a value other than never(11) will generate an invalid value error. Priority is only used when an election occurs. Mastership is not pre-emptive; use the reset mastership command (olAgentsMasterReset).')
olConcType = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("online-seventeen-slot", 1), ("online-six-slot", 2), ("online-six-slot-ft", 3), ("online-six-slot-hc", 4), ("online-six-slot-ft-hc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olConcType.setStatus('mandatory')
if mibBuilder.loadTexts: olConcType.setDescription('This object identifies the type of concentrator represented by this agent.')
olConcReset = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olConcReset.setStatus('mandatory')
if mibBuilder.loadTexts: olConcReset.setDescription('Setting this value to reset(2) causes this concentrator to reset. ')
olConcNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olConcNumSlots.setStatus('mandatory')
if mibBuilder.loadTexts: olConcNumSlots.setDescription('The number of slots in this concentrator. Note, that if a hidden controller is present, the number of slots is one more than the number of payload slots (six-slot-hc will report 7 slots, for example). The hidden controller does not actually occupy a main slot in the 6-slot concentrator, but it will report itself as slot 7.')
olConcProfile = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olConcProfile.setStatus('mandatory')
if mibBuilder.loadTexts: olConcProfile.setDescription("A bit string where the least significant bit corresponds to slot 1. A '1' in the bit indicates that a module is present in that slot. The number of octets provided is based on the olConcNumSlots value divided by 8. Any extra bits (for example, bits 18-24 for 17 slots) are meaningless. For example, the string 0x01 0xFF 0xFF would represent a full 17 slot concentrator.")
olEnvTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olEnvTempStatus.setDescription("The overall temperature status for this concentrator. This object's value is an aggregate of all the temperature probes in the concentrator, such that, when at least one probe reports extreme temperature, this object will have the value extremeTemp(2).")
olEnvPSCapacity = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvPSCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: olEnvPSCapacity.setDescription('The total capacity of power supplies for this concentrator.')
olEnvPSTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3), )
if mibBuilder.loadTexts: olEnvPSTable.setStatus('mandatory')
if mibBuilder.loadTexts: olEnvPSTable.setDescription('A table that contains information about each potential power supply in the concentrator.')
olEnvPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olEnvPSIndex"))
if mibBuilder.loadTexts: olEnvPSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olEnvPSEntry.setDescription('A list of of information for each power supply in the concentrator.')
olEnvPSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvPSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olEnvPSIndex.setDescription('Identifies the power supply for which this entry contains power supply information. For systems with the primary and backup power supply (as opposed to the N+1 design), index 1 refers to the primary, and index 2 refers to the backup. ')
olEnvPSAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("standby", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olEnvPSAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: olEnvPSAdminState.setDescription('The current desired state of the power supply. A power supply in standby does not provide power to the concentrator.')
olEnvPSOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("faulty", 3), ("not-installed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvPSOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olEnvPSOperStatus.setDescription('The current operational state of the power supply. A power supply in standby does not provide power to the concentrator.')
olEnvFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 3), ("not-installed", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnvFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olEnvFanStatus.setDescription('The overall status of the fan(s).')
olModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1), )
if mibBuilder.loadTexts: olModTable.setStatus('mandatory')
if mibBuilder.loadTexts: olModTable.setDescription('A table that contains generic information about every module that is present within the concentrator. ')
olModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olModSlotIndex"))
if mibBuilder.loadTexts: olModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olModEntry.setDescription('A list of information for each module in the concentrator. ')
olModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olModSlotIndex.setDescription("The unique slot number of this module. Its value ranges between 1 and olConcNumSlots and remains constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
olModType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("module-unmanageable", 1), ("module-unknown", 2), ("module-50nnM-CTL", 3), ("module-51nnM-MGT", 4), ("module-51nnM-FIB", 5), ("module-51nnM-UTP", 6), ("module-51nnM-TP", 7), ("module-51nnM-BNC", 8), ("module-51nnB-EE", 9), ("module-51nnR-ES", 10), ("module-51nnR-EE", 11), ("module-51nnM-AUIF", 12), ("module-51nnM-AUIM", 13), ("module-5208M-TP", 14), ("module-51nnM-FP", 15), ("module-51nnM-FBP", 16), ("module-51nnM-TPL", 17), ("module-51nnM-TPPL", 18), ("module-52nnM-TP", 19), ("module-52nnM-FR", 20), ("module-51nnM-TS", 21), ("module-51nnM-FL", 22), ("module-50nnM-RCTL", 23), ("module-51nnM-FB", 24), ("module-53nnM-MGT", 25), ("module-53nnM-FBMIC", 26), ("module-53nnM-FIBST", 27), ("module-53nnM-STP", 28), ("module-51nnM-TPCL", 29), ("module-52nnB-TT", 30), ("module-51nnI-x", 31), ("module-52nnM-MGT", 32), ("module-50nnM-HCTL", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModType.setStatus('mandatory')
if mibBuilder.loadTexts: olModType.setDescription('The unique type identifier for this module. This type is used to identify the branch in olSpecMods (see below). module-unmanageable(1) means that only the following objects are valid for this module: olModSlotIndex olModClass olModVersion olModVendor olModReset olModConfigToDips olModConfigured module-unknown(2) means that all the generic attributes are manageable, but there is no olSpecMods branch for this module as viewed by this agent.')
olModClass = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("controller", 1), ("ethernet-mgmt", 2), ("ethernet-media", 3), ("ethernet-interconnect", 4), ("ethernet-portswitching-media", 5), ("token-ring-media", 6), ("terminal-server", 7), ("fddi-media", 8), ("token-ring-mgmt", 9), ("ethernet-connswitching-media", 10), ("token-ring-interconnect", 11), ("fddi-mgmt", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModClass.setStatus('mandatory')
if mibBuilder.loadTexts: olModClass.setDescription("The class of this module. Generally speaking, this object indicates the kind of module. Specifically, the class identifier specifies the internal representation of the module's managed information base.")
olModDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModDescr.setStatus('mandatory')
if mibBuilder.loadTexts: olModDescr.setDescription('A textual string containing information about the module.')
olModVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModVersion.setStatus('mandatory')
if mibBuilder.loadTexts: olModVersion.setDescription('The software version number of this module. ')
olModVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("chipcom", 1), ("cisco", 2), ("pilkington", 3), ("datability", 5), ("ibm", 6), ("raycom", 7), ("retix", 8), ("intellicom", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModVendor.setStatus('mandatory')
if mibBuilder.loadTexts: olModVendor.setDescription('The actual manufacturer of this board.')
olModResetModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olModResetModule.setStatus('mandatory')
if mibBuilder.loadTexts: olModResetModule.setDescription('Setting this object to reset(2) causes this module to reset.')
olModConfigToDips = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noConfigure", 1), ("configure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olModConfigToDips.setStatus('mandatory')
if mibBuilder.loadTexts: olModConfigToDips.setDescription('Setting this object to configure(2) causes this module to configure based on the dip switch settings.')
olModConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConfigured", 1), ("configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: olModConfigured.setDescription('This object indicates whether this module has already been configured. An unconfigured module is configured to a safe state where the network is isolated and the ports are disabled.')
olModNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("other", 1), ("isolated", 2), ("port-switching", 3), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19), ("per-connector", 20), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olModNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: olModNetwork.setDescription('The network that this module is attached to. If the value is other(1) or port-switching(3), setting this object to a different value will generate the invalidData error. If the value is port-switching(3), manage the networks via the olPortNetwork object. The value per-connector(20) is returned if the managed module is a per-connector switchable and the connectors are on different networks. The connector networks are managed by the objects defined in the olSpecMods branch specified for this module. Modules and ports on the same network intercommunicate. Setting the module to isolated(2) (or other isolated values), removes this module from the backplane. Setting this module to a value that is not the same protocol type will return an invalidData error. Setting this module to a value that it does not support will return an invalidData error.')
olModNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("port-switching", 3), ("ethernet", 5), ("token-ring", 6), ("fddi", 7), ("serial", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModNetworkType.setStatus('mandatory')
if mibBuilder.loadTexts: olModNetworkType.setDescription('The network type of this module. port-switching(3) means that the network type differs depending on the port (like the router module). The network type reflects the valid values for olModNetwork.')
olModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 20, 21))).clone(namedValues=NamedValues(("okay", 1), ("fatalError", 10), ("booting", 20), ("partial-failure", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olModStatus.setDescription("The module's status.")
olModNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: olModNumPorts.setDescription('The number of ports on this module. Note, ports may be physical ports like 10BASE-T ports, or logical, like the bridge module ports.')
olModNumTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModNumTrunks.setStatus('mandatory')
if mibBuilder.loadTexts: olModNumTrunks.setDescription('The number of trunks on this module. Note, trunks are links that are, by definition, backbone connections. Examples of trunks are ring in and ring out ports for token ring, and the connections for rings to the backplane.')
olPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2), )
if mibBuilder.loadTexts: olPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: olPortTable.setDescription('A table that contains generic information about each port on each module present within the concentrator.')
olPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olPortSlotIndex"), (0, "CHIPCOM-MIB", "olPortIndex"))
if mibBuilder.loadTexts: olPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olPortEntry.setDescription('A list of information about each port in the concentrator.')
olPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olPortSlotIndex.setDescription("The slot number of this port's module.")
olPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olPortIndex.setDescription('The port number of this port within this module.')
olPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("logical", 1), ("media", 2), ("virtual", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortType.setStatus('mandatory')
if mibBuilder.loadTexts: olPortType.setDescription('The type of port. logical(1) is used to manage port resources that may not map directly to physical connections. The OEBM, for example, has two logical ports, although those two ports can be assigned to different combinations of four physical connections. media(2) refers to ports such as those on the 10BASE-T module. ')
olPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("backPlane", 1), ("bnc", 2), ("faui", 3), ("maui", 4), ("fiber", 5), ("db-50", 6), ("telco", 7), ("rj45", 8), ("rj45S", 9), ("db-9", 10), ("virtual", 11), ("fddi-lc", 12), ("fddi-st", 13), ("fddi-mic", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortConnector.setStatus('mandatory')
if mibBuilder.loadTexts: olPortConnector.setDescription('The connector type of this port.')
olPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("okay", 1), ("linkFailure", 2), ("jabber", 3), ("remoteLinkFailure", 4), ("remoteJabber", 5), ("invalidData", 6), ("lowLight", 7), ("fifoOverrun", 8), ("fifoUnderrun", 9), ("fatalError", 10), ("partition", 11), ("mjlp", 12), ("noCable", 13), ("noSquelch", 14), ("noPhantom", 15), ("okay-standby", 19), ("off", 22), ("connecting", 23), ("backup-link", 24), ("security-breach", 25), ("unknownStatus", 26), ("beacon", 27), ("wireFault", 28), ("macRemoved", 29), ("notInserted", 30), ("speedMismatch", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olPortStatus.setDescription('The status of this port.')
olPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5), ("local", 6), ("remote", 7), ("remote-diagnostics", 8), ("unknown", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: olPortAdminState.setDescription('The desired state of this port. Setting a port to be redundant-primary(3) or redundant-backup requires that the buddy slot and buddy port also be set to valid values (see appropriate olSpecMods objects). If the values associated with the redundant buddys are not valid, a genError will be returned. If the port is already redundant, an invalid set may result in both ports being disabled.')
olPortNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("other", 1), ("isolated", 2), ("per-module", 4), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19), ("per-connector", 20), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olPortNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: olPortNetwork.setDescription('The network that this port is attached to. If the value of olPortNetwork is per-module(4), then use the olModNetwork to manage this port. Setting olPortNetwork to a different value in this case will generate the invalidData error. Setting this port to a value that is not the same protocol type will return invalidData error. front-panel(5) is used for modules that have a logical port and a physical front connection. An example of this is the Eth2Eth Bridge module. Setting this port to a value that it does not support will generate an invalidData error.')
olPortNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 5), ("token-ring", 6), ("fddi", 7), ("serial", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortNetworkType.setStatus('mandatory')
if mibBuilder.loadTexts: olPortNetworkType.setDescription('The network type of this port. The type reflects the valid values for olPortNetwork. ')
olTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3), )
if mibBuilder.loadTexts: olTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkTable.setDescription('A table that contains generic information about each trunk on each module present within the concentrator.')
olTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTrunkSlotIndex"), (0, "CHIPCOM-MIB", "olTrunkIndex"))
if mibBuilder.loadTexts: olTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkEntry.setDescription('A list of information about each trunk in the concentrator.')
olTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkSlotIndex.setDescription("The slot number of this trunk's module.")
olTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkIndex.setDescription('The trunk number of this trunk.')
olTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("ringIn", 3), ("ringOut", 4), ("backplaneIn", 6), ("backplaneOut", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkType.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkType.setDescription('The type of trunk. ringIn(3) and ringOut(4) refer to special trunks on the token ring protocol type modules.')
olTrunkConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9))).clone(namedValues=NamedValues(("backplane", 1), ("fiber", 5), ("rj45S", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkConnector.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkConnector.setDescription('The connector type of this trunk.')
olTrunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 13, 14, 16, 17, 18, 27, 28))).clone(namedValues=NamedValues(("okay", 1), ("linkFailure", 2), ("fatalError", 10), ("noCable", 13), ("noSquelch", 14), ("lostLock", 16), ("upstreamNeighborLost", 17), ("invalidConfig", 18), ("beacon", 27), ("wireFault", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkStatus.setDescription('The status of this trunk.')
olTrunkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTrunkAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkAdminState.setDescription('The desired state of this trunk. Enabling a trunk allows the trunk to pass network traffic.')
olTrunkWrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wrapped", 1), ("unwrapped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkWrapState.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkWrapState.setDescription('The wrap state of this trunk. A trunk can wrap in response to a network event such as a break in the cable.')
olTrunkNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTrunkNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: olTrunkNeighbor.setDescription('The upstream or downstream neighbor of the trunk.')
ol50nnMCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1), )
if mibBuilder.loadTexts: ol50nnMCTLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMCTLModTable.setDescription('A table that contains information about each 50nnM-CTL in the concentrator. Note, current architecture will limit the number of instances to one per concentrator.')
ol50nnMCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol50nnMCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMCTLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMCTLModEntry.setDescription('A list of information for each 50nnM-CTL module in the concentrator.')
ol50nnMCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMCTLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMCTLModSlotIndex.setDescription('The slot number for this module.')
ol50nnMCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMCTLModTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMCTLModTempStatus.setDescription('The temperature as detected by the probes on this module.')
ol51nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1), )
if mibBuilder.loadTexts: ol51nnMMGTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModTable.setDescription('A table that contains module information about each 51nnM-MGT module in the concentrator.')
ol51nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMMGTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModEntry.setDescription('A list of module information for each 51nnM-MGT module in the concentrator.')
ol51nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModSlotIndex.setDescription('The slot number of this module.')
ol51nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMMGTModMasterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModMasterPriority.setDescription('The mastership priority of this agent. Ten is the highest and one is the lowest. Priority is only used when an election occurs. Mastership is not preemptive unless the reset mastership command is used.')
ol51nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModMasterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModMasterStatus.setDescription('The mastership status of this agent.')
ol51nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1. Note that EMMs before v3.0 will have 00-00-00-00-00-00 as their station address.')
ol51nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2), )
if mibBuilder.loadTexts: ol51nnMMGTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTPortTable.setDescription('A table of information that contains port-specific information for each port on each 51nnM-MGT module.')
ol51nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMMGTPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol51nnMMGTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTPortEntry.setDescription('A list of information about a specific port on a 51nnM-MGT module.')
ol51nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTPortIndex.setDescription('The port number of this port.')
ol51nnMMGTIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMMGTIpAddress.setDescription('The IP Address associated with this port.')
ol51nnMFIBModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1), )
if mibBuilder.loadTexts: ol51nnMFIBModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModTable.setDescription('A table of module-specific information for each 51nnM-FIB module in the concentrator.')
ol51nnMFIBModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFIBModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFIBModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModEntry.setDescription('A list of module-specific information associated with a particular 51nnM-FIB module in the concentrator.')
ol51nnMFIBModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFIBModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMFIBModLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBModLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModLLW.setDescription("The current state of this module's low light warning configuration. Enabling this feature causes the module to check for low light and to issue a warning if low light is present. Disabling low light has the advantage of faster redundancy switchover in the event of a port error.")
ol51nnMFIBModDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModDipLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBModDipLLW.setDescription("The low light warning configuration indicated by this module's dip switches.")
ol51nnMFIBPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2), )
if mibBuilder.loadTexts: ol51nnMFIBPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortTable.setDescription('A table of port-specific information for each port of each 51nnM-FIB module.')
ol51nnMFIBPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFIBPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMFIBPortIndex"))
if mibBuilder.loadTexts: ol51nnMFIBPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortEntry.setDescription('A list of information about a specific port on a 51nnM-FIB module.')
ol51nnMFIBPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMFIBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortIndex.setDescription('The port number of this port.')
ol51nnMFIBPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMFIBPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFIBPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFIBPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFIBPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMUTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1), )
if mibBuilder.loadTexts: ol51nnMUTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModTable.setDescription('A list of module-specific information associated with a particular 51nnM-UTP module in the concentrator.')
ol51nnMUTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMUTPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMUTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModEntry.setDescription('A module entry containing objects that describe the module level for that particular module.')
ol51nnMUTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModSlotIndex.setDescription('The slot number of this module.')
ol51nnMUTPModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMUTPModCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModCrossover.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModCrossover.setDescription("The current state of this module's crossover configuration. Setting this object to uncrossed(2) allows the last port to be used to connect to another repeater. Often this feature is used to connect one 10BASE-T module to another.")
ol51nnMUTPModDipCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModDipCrossover.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModDipCrossover.setDescription("The crossover configuration indicated by this module's dip switches.")
ol51nnMUTPModFFL = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eight-bits", 1), ("seven-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModFFL.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModFFL.setDescription("The number of bits to store in the repeater's fifo buffer. See the module user's guide for more information.")
ol51nnMUTPModDipFFL = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eight-bits", 1), ("seven-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModDipFFL.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPModDipFFL.setDescription("The fifo fill level as indicated by this module's dip switches.")
ol51nnMUTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2), )
if mibBuilder.loadTexts: ol51nnMUTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMUTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMUTPPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMUTPPortIndex"))
if mibBuilder.loadTexts: ol51nnMUTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortEntry.setDescription('A port entry containing objects that describe this port.')
ol51nnMUTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMUTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortIndex.setDescription('The port number of this port.')
ol51nnMUTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMUTPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMUTPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMUTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMUTPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortLinkInteg.setDescription("The port's link integrity configuration. Enabling link integrity configures the port to conform to the link integrity feature as specified by 10BASE-T.")
ol51nnMUTPPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortDipLinkInteg.setDescription("The link integrity configuration as indicated by this port's dip switches.")
ol51nnMUTPPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortSquelch.setDescription("The port's squelch configuration. See the module's user's guide for more information.")
ol51nnMUTPPortDipSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMUTPPortDipSquelch.setDescription("The port's squelch configuration as indicated by this port's dip switches.")
ol51nnMTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1), )
if mibBuilder.loadTexts: ol51nnMTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModTable.setDescription('A table of module-specific information for each 51nnM-TP module in the concentrator.')
ol51nnMTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModEntry.setDescription('A list of module-specific information about a specific 51nnM-TP module in the concentrator.')
ol51nnMTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTPModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMTPModCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPModCrossover.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModCrossover.setDescription("The current state of this module's crossover configuration. Setting this object to uncrossed(2) allows the last port to be used to connect to another repeater. Often this feature is used to connect one 10BASE-T module to another.")
ol51nnMTPModDipCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModDipCrossover.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPModDipCrossover.setDescription("The crossover configuration indicated by this module's dip switches.")
ol51nnMTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2), )
if mibBuilder.loadTexts: ol51nnMTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTPPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMTPPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortEntry.setDescription('A port entry containing objects that describe this port.')
ol51nnMTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortIndex.setDescription('The port number of this port.')
ol51nnMTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMTPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMTPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMTPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortLinkInteg.setDescription("The port's link integrity configuration. Enabling link integrity configures the port to conform to the link integrity feature as specified by 10BASE-T.")
ol51nnMTPPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortDipLinkInteg.setDescription("The link integrity configuration as indicated by this port's dip switches.")
ol51nnMTPPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortSquelch.setDescription("The port's squelch configuration. See the module's user's guide for more information.")
ol51nnMTPPortDipSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPortDipSquelch.setDescription("The port's squelch configuration as indicated by this port's dip switches.")
ol51nnMBNCModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1), )
if mibBuilder.loadTexts: ol51nnMBNCModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCModTable.setDescription('A list of module-specific information associated with a particular 51nnM-BNC module in the concentrator.')
ol51nnMBNCModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMBNCModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMBNCModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCModEntry.setDescription('A module entry containing objects that describe the module level for that particular module.')
ol51nnMBNCModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCModSlotIndex.setDescription('The slot number of this module.')
ol51nnMBNCModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMBNCPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2), )
if mibBuilder.loadTexts: ol51nnMBNCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMBNCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMBNCPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMBNCPortIndex"))
if mibBuilder.loadTexts: ol51nnMBNCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortEntry.setDescription('A port entry containing objects that describe this port.')
ol51nnMBNCPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMBNCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortIndex.setDescription('The port number of this port.')
ol51nnMBNCPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMBNCPortDipTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminated", 1), ("not-terminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipTermination.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortDipTermination.setDescription("The state of this port's termination as indicated by the port's dip switches.")
ol51nnMBNCPortDipGround = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("grounded", 1), ("not-grounded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipGround.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMBNCPortDipGround.setDescription("The state of this port's ground as indicated by the port's dip switches.")
ol51nnBEEModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1), )
if mibBuilder.loadTexts: ol51nnBEEModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModTable.setDescription('A table of module-specific information for each 51nnB-EE module in the concentrator.')
ol51nnBEEModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnBEEModSlotIndex"))
if mibBuilder.loadTexts: ol51nnBEEModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModEntry.setDescription('A list of module-specific information about a specific 51nnB-EE module in the concentrator.')
ol51nnBEEModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModSlotIndex.setDescription('The slot number of this module.')
ol51nnBEEModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1.')
ol51nnBEEModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnBEEPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2), )
if mibBuilder.loadTexts: ol51nnBEEPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortTable.setDescription('A table of port-specific for each port of each 51nnBEE module in the concentrator.')
ol51nnBEEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnBEEPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnBEEPortIndex"))
if mibBuilder.loadTexts: ol51nnBEEPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortEntry.setDescription('A list of port-specific informatoin about a specific 51nnB-EE port in the concentrator.')
ol51nnBEEPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortSlotIndex.setDescription("The slot number for this port's module.")
ol51nnBEEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortIndex.setDescription('The port number for this port within this slot.')
ol51nnBEEPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortIpAddress.setDescription('The IP Address associated with this port.')
ol51nnBEEPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortDipNetwork.setDescription("The network for this port as specified by this port's dip switches.")
ol51nnBEEPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortDefNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnBEEPortDefNetwork.setDescription("The network for this port as specified by the OEBM's non-volatile storage.")
ol51nnRESModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1), )
if mibBuilder.loadTexts: ol51nnRESModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModTable.setDescription('A table of module-specific information for each 51nnR-ES module in the concentrator.')
ol51nnRESModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnRESModSlotIndex"))
if mibBuilder.loadTexts: ol51nnRESModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModEntry.setDescription('A list of module-specific information about a specific 51nnR-ES module in the concentrator.')
ol51nnRESModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModSlotIndex.setDescription('The slot number of this module.')
ol51nnRESModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1.')
ol51nnRESModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnRESPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2), )
if mibBuilder.loadTexts: ol51nnRESPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortTable.setDescription('A table of port-specific for each port of each 51nnR-ES module in the concentrator.')
ol51nnRESPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnRESPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnRESPortIndex"))
if mibBuilder.loadTexts: ol51nnRESPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortEntry.setDescription('A list of port-specific informatoin about a specific 51nnR-ES port in the concentrator.')
ol51nnRESPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortSlotIndex.setDescription("The slot number for this port's module.")
ol51nnRESPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortIndex.setDescription('The port number for this port.')
ol51nnRESPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortIpAddress.setDescription('The IP Address associated with this port.')
ol51nnRESPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortDipNetwork.setDescription("The network for this port as specified by this port's dip switches.")
ol51nnRESPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortDefNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnRESPortDefNetwork.setDescription("The network for this port as specified by the OERM's non-volatile storage.")
ol51nnREEModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1), )
if mibBuilder.loadTexts: ol51nnREEModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModTable.setDescription('A table of module-specific information for each 51nnR-EE module in the concentrator.')
ol51nnREEModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnREEModSlotIndex"))
if mibBuilder.loadTexts: ol51nnREEModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModEntry.setDescription('A list of module-specific information about a specific 51nnR-EE module in the concentrator.')
ol51nnREEModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModSlotIndex.setDescription('The slot number of this module.')
ol51nnREEModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1.')
ol51nnREEModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnREEPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2), )
if mibBuilder.loadTexts: ol51nnREEPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortTable.setDescription('A table of port-specific for each port of each 51nnR-EE module in the concentrator.')
ol51nnREEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnREEPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnREEPortIndex"))
if mibBuilder.loadTexts: ol51nnREEPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortEntry.setDescription('A list of port-specific informatoin about a specific 51nnR-EE port in the concentrator.')
ol51nnREEPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortSlotIndex.setDescription("The slot number for this port's module.")
ol51nnREEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortIndex.setDescription('The port number of this port.')
ol51nnREEPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortIpAddress.setDescription('The IP Address associated with this port.')
ol51nnREEPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortDipNetwork.setDescription("The network for this port as specified by this port's dip switches.")
ol51nnREEPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortDefNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnREEPortDefNetwork.setDescription("The network for this port as specified by the OERM's non-volatile storage.")
ol51nnMAUIFModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1), )
if mibBuilder.loadTexts: ol51nnMAUIFModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFModTable.setDescription('A list of module-specific information associated with a particular 51nnMAUIF module in the concentrator.')
ol51nnMAUIFModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMAUIFModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMAUIFModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFModEntry.setDescription('A list of module-specific information about a specific 51nnMAUIF module in the concentrator.')
ol51nnMAUIFModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFModSlotIndex.setDescription('The slot number of this module.')
ol51nnMAUIFPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2), )
if mibBuilder.loadTexts: ol51nnMAUIFPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMAUIFPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMAUIFPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMAUIFPortIndex"))
if mibBuilder.loadTexts: ol51nnMAUIFPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortEntry.setDescription('A list of module-specific information about a specific 51nnM-AUIF port in the concentrator.')
ol51nnMAUIFPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMAUIFPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortIndex.setDescription('The port number of this port.')
ol51nnMAUIFPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMAUIFPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMAUIFPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMAUIFPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMAUIFPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIFPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMAUIMModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1), )
if mibBuilder.loadTexts: ol51nnMAUIMModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMModTable.setDescription('A list of module-specific information associated with a particular 51nnM-AUIM module in the concentrator.')
ol51nnMAUIMModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMAUIMModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMAUIMModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMModEntry.setDescription('A list of module-specific information about a specific 51nnM-AUIM module in the concentrator.')
ol51nnMAUIMModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMModSlotIndex.setDescription('The slot number of this module.')
ol51nnMAUIMPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2), )
if mibBuilder.loadTexts: ol51nnMAUIMPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMAUIMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMAUIMPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMAUIMPortIndex"))
if mibBuilder.loadTexts: ol51nnMAUIMPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortEntry.setDescription('A list of module-specific information about a specific 51nnM-AUIM port in the concentrator.')
ol51nnMAUIMPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMAUIMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortIndex.setDescription('The port number of this port.')
ol51nnMAUIMPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMAUIMPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMAUIMPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMAUIMPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMAUIMPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMAUIMPortSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortSQETest.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortSQETest.setDescription('The current SQE test configuration for this port.')
ol51nnMAUIMPortDipSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipSQETest.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipSQETest.setDescription("The SQE test configuration for this port as indicated by the port's dip switches.")
ol51nnMAUIMPortCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alternate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortCollision.setDescription('The current collision configuration for this port.')
ol51nnMAUIMPortDipCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipCollision.setDescription("The collision configuration for this port as indicated by the port's dip switches.")
ol51nnMAUIMPortHalfStep = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortHalfStep.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortHalfStep.setDescription('The current step configuration for this port.')
ol51nnMAUIMPortDipHalfStep = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipHalfStep.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMAUIMPortDipHalfStep.setDescription("The step configuration for this port as indicated by the port's dip switches.")
ol5208MTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1), )
if mibBuilder.loadTexts: ol5208MTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModTable.setDescription('A list of module-specific information associated with a particular 5208M-TP module in the concentrator.')
ol5208MTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol5208MTPModSlotIndex"))
if mibBuilder.loadTexts: ol5208MTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModEntry.setDescription('A description of the 5208M-TP module attributes.')
ol5208MTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModSlotIndex.setDescription('The slot number of this module.')
ol5208MTPModBypsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insert", 1), ("bypass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPModBypsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModBypsAdminState.setDescription("The desired state of this module with respect to the ring. Setting this attribute to bypass(2) will cause this module to be removed from the ring that passes through the module's ring in and ring out ports.")
ol5208MTPModBypsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insert", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModBypsOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModBypsOperState.setDescription("The operational state of this module with respect to the ring. If this attribute is equal to bypass(2), then the module has been removed from the ring that passes through the module's ring in and ring out ports.")
ol5208MTPModDipCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModDipCableImp.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPModDipCableImp.setDescription("The setting of this module's port impedance matching, with 100 ohm corresponding to unshielded twisted pair cabling and 150 ohm corresponding to shielded twisted pair cabling. This setting is valid for all ports on this module.")
ol5208MTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2), )
if mibBuilder.loadTexts: ol5208MTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol5208MTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol5208MTPPortSlotIndex"), (0, "CHIPCOM-MIB", "ol5208MTPPortIndex"))
if mibBuilder.loadTexts: ol5208MTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortEntry.setDescription('A description of 5208M-TP port attributes.')
ol5208MTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortSlotIndex.setDescription("The slot number of this port's module.")
ol5208MTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortIndex.setDescription('The port number of this port.')
ol5208MTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol5208MTPPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPPortStationType.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPPortStationType.setDescription('Determines whether the station connected to this port has a MAC address.')
ol5208MTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3), )
if mibBuilder.loadTexts: ol5208MTPTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkTable.setDescription('A list of trunk-specific information about each trunk for this module type.')
ol5208MTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol5208MTPTrunkSlotIndex"), (0, "CHIPCOM-MIB", "ol5208MTPTrunkIndex"))
if mibBuilder.loadTexts: ol5208MTPTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkEntry.setDescription('A description of 5208M-TP trunk attributes.')
ol5208MTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol5208MTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkIndex.setDescription('The trunk number for this trunk.')
ol5208MTPTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkDipAdminState.setDescription("The state of this trunk as indicated by the trunk's dip switches.")
ol5208MTPTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkCableMon.setDescription('The cable monitor configuration for this trunk.')
ol5208MTPTrunkDipCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkDipCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkDipCableMon.setDescription("The cable monitor configuration as indicated by this trunk's dip switches.")
ol5208MTPTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkNetMapState.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkNetMapState.setDescription('The map state of the copper ring-in trunk. This should be set to external for ring-in trunks which connect to external hubs. The mapping logic will not operate on trunks which are set to external. This prevents incorrect mapping which can occur when a module in one hub detects the mapping signal from another hub. This attribute only applies to copper ring-in trunks.')
ol5208MTPTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkExtBcnRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: ol5208MTPTrunkExtBcnRecovery.setDescription('Indicates whether the trunk is connected to a segment that will perform beacon recovery. This should be set to exists(1) for trunks which connect to hubs which perform beacon recovery. This attribute is used to determine the fault domain when resolving a beaconing condition. The beacon recovery process will resolve beaconing on trunks with this attribute set to nonExists(2) before trunks with the attribute set to exists(1) are resolved. For backplane trunks, setting to a value other than notApplicable will return invalidData error. The default value is nonExists(2).')
ol51nnMFPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1), )
if mibBuilder.loadTexts: ol51nnMFPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPModTable.setDescription('A list of module-specific information associated with a particular 51nnM-FP module in the concentrator.')
ol51nnMFPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPModEntry.setDescription('A list of module-specific information about a specific 51nnM-FP module in the concentrator.')
ol51nnMFPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2), )
if mibBuilder.loadTexts: ol51nnMFPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMFPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFPPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMFPPortIndex"))
if mibBuilder.loadTexts: ol51nnMFPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortEntry.setDescription('A list of module-specific information about a specific 51nnM-FP port in the concentrator.')
ol51nnMFPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMFPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortIndex.setDescription('The port number of this port.')
ol51nnMFPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMFPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMFPPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMFPPortLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortLLW.setDescription('The current low light warning configuration for this port.')
ol51nnMFPPortDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortDipLLW.setDescription("The low light warning configuration indicated by this module's dip switches.")
ol51nnMFPPortHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortHipwr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortHipwr.setDescription('The current high power optic configuration for this port.')
ol51nnMFPPortDipHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipHipwr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFPPortDipHipwr.setDescription("The high power optic configuration for this port as indicated by the port's dip switches.")
ol51nnMFBPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1), )
if mibBuilder.loadTexts: ol51nnMFBPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPModTable.setDescription('A list of module-specific information associated with a particular 51nnM-FBP module in the concentrator.')
ol51nnMFBPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFBPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFBPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPModEntry.setDescription('A list of module-specific information about a specific 51nnM-FBP module in the concentrator.')
ol51nnMFBPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFBPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2), )
if mibBuilder.loadTexts: ol51nnMFBPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMFBPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFBPPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMFBPPortIndex"))
if mibBuilder.loadTexts: ol51nnMFBPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortEntry.setDescription('A list of module-specific information about a specific 51nnM-FBP port in the concentrator.')
ol51nnMFBPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMFBPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortIndex.setDescription('The port number of this port.')
ol51nnMFBPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMFBPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFBPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFBPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMFBPPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMFBPPortLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortLLW.setDescription('The current low light warning configuration for this port.')
ol51nnMFBPPortDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortDipLLW.setDescription("The low light warning configuration indicated by this module's dip switches.")
ol51nnMFBPPortHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortHipwr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortHipwr.setDescription('The current high power optic configuration for this port.')
ol51nnMFBPPortDipHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipHipwr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPPortDipHipwr.setDescription("The high power optic configuration for this port as indicated by the port's dip switches.")
ol51nnMTPLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1), )
if mibBuilder.loadTexts: ol51nnMTPLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLModTable.setDescription('A list of module-specific information associated with a particular 51nnM-TPL module in the concentrator.')
ol51nnMTPLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTPLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLModEntry.setDescription('A list of module-specific information about a specific 51nnM-TPL module in the concentrator.')
ol51nnMTPLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTPLModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMTPLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2), )
if mibBuilder.loadTexts: ol51nnMTPLPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMTPLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTPLPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMTPLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPLPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortEntry.setDescription('A list of module-specific information about a specific 51nnM-TPL port in the concentrator.')
ol51nnMTPLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMTPLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortIndex.setDescription('The port number of this port.')
ol51nnMTPLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant or for remote diagnostics with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMTPLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the slot index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the port index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMTPLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortLinkInteg.setDescription('The current link integrity configuration for this port.')
ol51nnMTPLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortDipLinkInteg.setDescription("The link integrity configuration as indicated by this module's dip switches.")
ol51nnMTPLPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortSquelch.setDescription("The current squelch configuration for this port. See the module's user's guide for more information.")
ol51nnMTPLPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortJabber.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortJabber.setDescription('The current receive jabber configuration for this port.')
ol51nnMTPLPortDipJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipJabber.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPLPortDipJabber.setDescription("The receive jabber configuration as indicated by this module's dip switches.")
ol51nnMTPPLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1), )
if mibBuilder.loadTexts: ol51nnMTPPLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLModTable.setDescription('A list of module-specific information about a specific 51nnM-TPPL module in the concentrator.')
ol51nnMTPPLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTPPLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPPLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLModEntry.setDescription('A list of module-specific information about a specific 51nnM-TPPL module in the concentrator.')
ol51nnMTPPLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTPPLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2), )
if mibBuilder.loadTexts: ol51nnMTPPLPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMTPPLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTPPLPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMTPPLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPPLPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortEntry.setDescription('A list of module-specific information about a specific 51nnM-TPPL port in the concentrator.')
ol51nnMTPPLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMTPPLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortIndex.setDescription('The port number of this port.')
ol51nnMTPPLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant or for remote diagnostics with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMTPPLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the slot index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPPLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the port index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPPLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMTPPLPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortDipNetwork.setDescription("The network indicated by the port's dip switches.")
ol51nnMTPPLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortLinkInteg.setDescription('The current link integrity configuration for this port.')
ol51nnMTPPLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortDipLinkInteg.setDescription("The link integrity configuration as indicated by this module's dip switches.")
ol51nnMTPPLPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortSquelch.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortSquelch.setDescription("The current squelch configuration for this port. See the module's user's guide for more information.")
ol51nnMTPPLPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortJabber.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortJabber.setDescription('The current receive jabber configuration for this port.')
ol51nnMTPPLPortDipJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipJabber.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPPLPortDipJabber.setDescription("The receive jabber configuration as indicated by this module's dip switches.")
ol52nnMTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1), )
if mibBuilder.loadTexts: ol52nnMTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModTable.setDescription('A list of module-specific information about a specific 52nnM-TP module in the concentrator.')
ol52nnMTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnMTPModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModEntry.setDescription('A description of the 52nnM-TP module attributes.')
ol52nnMTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol52nnMTPModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPModRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModRingSpeed.setDescription("The ring's bandwidth.")
ol52nnMTPModDipRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModDipRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModDipRingSpeed.setDescription("The dip switch setting for the ring's bandwidth.")
ol52nnMTPModCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPModCableImp.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModCableImp.setDescription("The setting of this module's port impedance matching, with 100 ohm corresponding to unshielded twisted pair cabling and 150 ohm corresponding to shielded twisted pair cabling. This setting is valid for all ports on this module.")
ol52nnMTPModDipCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModDipCableImp.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPModDipCableImp.setDescription("The dip switch setting for the module's port impedance matching.")
ol52nnMTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2), )
if mibBuilder.loadTexts: ol52nnMTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol52nnMTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnMTPPortSlotIndex"), (0, "CHIPCOM-MIB", "ol52nnMTPPortIndex"))
if mibBuilder.loadTexts: ol52nnMTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortEntry.setDescription('A description of 52nnM-TP port attributes.')
ol52nnMTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortSlotIndex.setDescription("The slot number of this port's module.")
ol52nnMTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortIndex.setDescription('The port number of this port.')
ol52nnMTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol52nnMTPPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPPortStationType.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPPortStationType.setDescription('Determines whether the station connected to this port has a MAC address.')
ol52nnMTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3), )
if mibBuilder.loadTexts: ol52nnMTPTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkTable.setDescription('A list of trunk-specific information about each trunk for this module type.')
ol52nnMTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnMTPTrunkSlotIndex"), (0, "CHIPCOM-MIB", "ol52nnMTPTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMTPTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkEntry.setDescription('A description of 52nnM-TP trunk attributes.')
ol52nnMTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol52nnMTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkIndex.setDescription('The trunk number for this trunk.')
ol52nnMTPTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMTPTrunkDipAdminState.setDescription("The state of this trunk as indicated by the trunk's dip switches.")
ol52nnMFRModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1), )
if mibBuilder.loadTexts: ol52nnMFRModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModTable.setDescription('A list of module-specific information about a specific 52nnM-FR module in the concentrator.')
ol52nnMFRModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnMFRModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMFRModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModEntry.setDescription('A description of the 52nnMFR module attributes.')
ol52nnMFRModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModSlotIndex.setDescription('The slot number of this module.')
ol52nnMFRModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRModRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModRingSpeed.setDescription("The ring's bandwidth.")
ol52nnMFRModDipRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRModDipRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRModDipRingSpeed.setDescription("The dip switch setting for the ring's bandwidth.")
ol52nnMFRPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2), )
if mibBuilder.loadTexts: ol52nnMFRPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol52nnMFRPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnMFRPortSlotIndex"), (0, "CHIPCOM-MIB", "ol52nnMFRPortIndex"))
if mibBuilder.loadTexts: ol52nnMFRPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortEntry.setDescription('A description of 52nnMFR port attributes.')
ol52nnMFRPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortSlotIndex.setDescription("The slot number of this port's module.")
ol52nnMFRPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortIndex.setDescription('The port number of this port.')
ol52nnMFRPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol52nnMFRPortCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortCableImp.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortCableImp.setDescription("The setting of this port's impedance matching, with 100 ohm corresponding to unshielded twisted pair cabling and 150 ohm corresponding to shielded twisted pair cabling.")
ol52nnMFRPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRPortStationType.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRPortStationType.setDescription('Determines whether the station connected to this port has a MAC address.')
ol52nnMFRTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3), )
if mibBuilder.loadTexts: ol52nnMFRTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkTable.setDescription('A list of trunk-specific information about each trunk for this module type.')
ol52nnMFRTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnMFRTrunkSlotIndex"), (0, "CHIPCOM-MIB", "ol52nnMFRTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMFRTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkEntry.setDescription('A description of 52nnMFR trunk attributes.')
ol52nnMFRTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol52nnMFRTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkIndex.setDescription('The trunk number of this trunk.')
ol52nnMFRTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkDipAdminState.setDescription("The state of this trunk as indicated by the trunk's dip switches.")
ol52nnMFRTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkCableMon.setDescription('The cable monitor configuration for this trunk. This does not apply to fiber trunks.')
ol52nnMFRTrunkDipCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCableMon.setDescription("The cable monitor configuration as indicated by this trunk's dip switches. This does not apply to fiber trunks.")
ol52nnMFRTrunkCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkCompMode.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkCompMode.setDescription('The compatibility mode for this trunk. This only applies to fiber trunks.')
ol52nnMFRTrunkDipCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCompMode.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCompMode.setDescription("The compatibility mode as indicated by this trunk's dip switches. This only applies to fiber trunks.")
ol52nnMFRTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkNetMapState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkNetMapState.setDescription('The map state of the copper ring-in trunk. This should be set to external for ring-in trunks which connect to external hubs. The mapping logic will not operate on trunks which are set to external. This prevents incorrect mapping which can occur when a module in one hub detects the mapping signal from another hub. This attribute only applies to copper ring-in trunks.')
ol52nnMFRTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkExtBcnRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMFRTrunkExtBcnRecovery.setDescription('Indicates whether the trunk is connected to a segment that will perform beacon recovery. This should be set to exists(1) for trunks which connect to hubs which perform beacon recovery. This attribute is used to determine the fault domain when resolving a beaconing condition. The beacon recovery process will resolve beaconing on trunks with this attribute set to nonExists(2) before trunks with the attribute set to exists(1) are resolved. For backplane trunks, setting to a value other than notApplicable will return invalidData error. The default value is nonExists(2).')
ol51nnMTSModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1), )
if mibBuilder.loadTexts: ol51nnMTSModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModTable.setDescription('A table of module-specific information for each 51nnM-TS module in the concentrator.')
ol51nnMTSModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTSModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTSModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModEntry.setDescription('A list of module information for each 51nnMTS module in the concentrator.')
ol51nnMTSModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTSModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnMTSModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModIpAddress.setDescription('The IP Address of the terminal terver.')
ol51nnMTSModTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModTCPPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModTCPPort.setDescription("The TCP port number of the the terminal server's remote console port.")
ol51nnMTSModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of the terminal server.')
ol51nnMTSModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMTSModCPURev = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModCPURev.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSModCPURev.setDescription("The terminal server's CPU revision.")
ol51nnMTSPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2), )
if mibBuilder.loadTexts: ol51nnMTSPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortTable.setDescription('A table of information that contains port-specific information for each port on each 51nnMTS module.')
ol51nnMTSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTSPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMTSPortIndex"))
if mibBuilder.loadTexts: ol51nnMTSPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortEntry.setDescription('A list of information about a specific port on a 51nnMTS module.')
ol51nnMTSPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortSlotIndex.setDescription('The slot number for this port.')
ol51nnMTSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortIndex.setDescription('The port number of this port.')
ol51nnMTSPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("local", 6), ("remote", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTSPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortAdminState.setDescription('The administrative state of this port.')
ol51nnMTSPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("local", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTSPortOperState.setDescription('The operational mode of this port.')
ol51nnMFLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1), )
if mibBuilder.loadTexts: ol51nnMFLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLModTable.setDescription('A table of module-specific information for each 51nnM-FL module in the concentrator.')
ol51nnMFLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLModEntry.setDescription('A list of module-specific information associated with a particular 51nnM-FL module in the concentrator.')
ol51nnMFLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFLModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMFLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2), )
if mibBuilder.loadTexts: ol51nnMFLPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortTable.setDescription('A table of port-specific information for each port of each 51nnMFL module.')
ol51nnMFLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFLPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMFLPortIndex"))
if mibBuilder.loadTexts: ol51nnMFLPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortEntry.setDescription('A list of information about a specific port on a 51nnMFL module.')
ol51nnMFLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol51nnMFLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortIndex.setDescription('The port number of this port.')
ol51nnMFLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return invalidData error. Remote Failure Signaling (RFS), is set on connected module port to permit transmit error detection on local port. Port must be set to be RFS when connected port is set to be redundant')
ol51nnMFLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortBuddySlot.setDescription("The slot index of the redundant port's buddy. ")
ol51nnMFLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortBuddyPort.setDescription("The port index of the redundant port's buddy.")
ol51nnMFLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFLPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol50nnMRCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1), )
if mibBuilder.loadTexts: ol50nnMRCTLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModTable.setDescription('A table that contains information about each 50nnMRCTL in the concentrator. ')
ol50nnMRCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol50nnMRCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMRCTLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModEntry.setDescription('A list of information for each 50nnMRCTL module in the concentrator.')
ol50nnMRCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModSlotIndex.setDescription('The slot number for this module.')
ol50nnMRCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModOperState.setDescription('The operational state of the 50nnMRCTL module. Specifically, this is an indicator of whether the 50nnMRCTL module is providing clock signals to the backplane. An active 50nnMRCTL module provides clock signals to the backplane while a standby 50nnMRCTL module does not. Note that only one 50nnMRCTL module will be active at any given time; all other 50nnMRCTL modules in the concentrator will be in standby mode.')
ol50nnMRCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModClockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModClockStatus.setDescription('The current status of the on-board clocks on this module.')
ol50nnMRCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMRCTLModTempStatus.setDescription('The temperature as detected by the probe on this module.')
ol51nnMFBModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1), )
if mibBuilder.loadTexts: ol51nnMFBModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModTable.setDescription('A list of module-specific information associated with a particular 51nnM-FB module in the concentrator.')
ol51nnMFBModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFBModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFBModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModEntry.setDescription('A list of module-specific information about a specific 51nnM-FB module in the concentrator.')
ol51nnMFBModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModSlotIndex.setDescription('The slot number of this module.')
ol51nnMFBModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModDipNetwork.setDescription("The network indicated by the module's dip switches.")
ol51nnMFBModLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBModLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModLLW.setDescription("The current state of this module's low light warning configuration. Enabling this feature causes the module to check for low light and to issue a warning if low light is present. Disabling low light has the advantage of faster redundancy switchover in the event of a port error.")
ol51nnMFBModDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModDipLLW.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBModDipLLW.setDescription("The low light warning configuration indicated by this module's dip switches.")
ol51nnMFBPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2), )
if mibBuilder.loadTexts: ol51nnMFBPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMFBPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMFBPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMFBPortIndex"))
if mibBuilder.loadTexts: ol51nnMFBPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortEntry.setDescription('A list of module-specific information about a specific 51nnM-FB port in the concentrator.')
ol51nnMFBPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMFBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortIndex.setDescription('The port number of this port.')
ol51nnMFBPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMFBPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFBPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port.")
ol51nnMFBPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMFBPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol53nnMFBMICModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1), )
if mibBuilder.loadTexts: ol53nnMFBMICModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModTable.setDescription('A list of module attributes that apply to this model. To access an ol53nnMFBMICModTable entry, the ol53nnMFBMICModSlotIndex attribute is used.')
ol53nnMFBMICModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMFBMICModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModEntry.setDescription('A list of module-specific information about a specific 53nnM-FBMIC module in the concentrator.')
ol53nnMFBMICModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol53nnMFBMICModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamModule.setDescription('Down stream slot (transmit to)')
ol53nnMFBMICModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamModule.setDescription('Up stream slot (receve from)')
ol53nnMFBMICModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamOperPath.setDescription('Transmit DBA (debug only)')
ol53nnMFBMICModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamOperPath.setDescription('Receive DBA (debug only)')
ol53nnMFBMICModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModRingInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICModRingInfo.setDescription('An array which is indexed by DBA number. Each element contains the slot number (1..16) which is assigned to transmit on this DBA. (debug only)')
ol53nnMFBMICPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2), )
if mibBuilder.loadTexts: ol53nnMFBMICPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol53nnMFBMICPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMFBMICPortSlotIndex"), (0, "CHIPCOM-MIB", "ol53nnMFBMICPortIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortEntry.setDescription('A list of module-specific information about a specific 53nnM-FBMIC port in the concentrator.')
ol53nnMFBMICPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol53nnMFBMICPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortIndex.setDescription('A unique value that identifies a particular port within this module. Its value ranges between 1 and olModPortNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortIndex.')
ol53nnMFBMICPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMFBMICPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortConfig.setDescription('Specifies the FDDI port type. If the port is on an FPM, the only allowed values are slave(3), and master(4). In addition, there can only be one active slave port on any concentrator FDDI network.')
ol53nnMFBMICPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortPcmState.setDescription('(refer to ANSI SMT 9.6.2).')
ol53nnMFBMICPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortConnectState.setDescription('An indication of the connect state of this PORT. Basically, this gives a higher level view of the state of the connection by grouping PCM states and the PC-Withhold flag state. The supported values and their corresponding PCM states and PC-Withhold condition, when relevant, are: disabled: (PC0:Off, PC9:Maint) connecting: (PC1(Break) || PC3 (Connect) || PC4(next) || PC5 (Signal) || PC6(Join) || PC7 (Verify)) && (PC_Withhold = None) standby: (PC_Withhold != None) active: (PC2:Trace || PC8:Active)')
ol53nnMFBMICPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortNeighbor.setDescription('The type (PC_Neighbor) of the remote PORT that is determined in PC_Signaling in R_Val (1,2) (refer to ANSI SMT 9.6.3.2).')
ol53nnMFBMICPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortRemoteMACIndicated.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortRemoteMACIndicated.setDescription('The indication, in PC-Signaling that the remote partner intends to place a MAC in the output token PATH of this PORT. Signaled as R_Val (9) (refer to ANSI SMT 9.6.3.2).')
ol53nnMFBMICPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortBSFlag.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortBSFlag.setDescription('The Break State, BS_Flag (refer to ANSI SMT 9.4.3.4).')
ol53nnMFBMICPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortPCWithhold.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortPCWithhold.setDescription('PC_Withhold, (refer to ANSI SMT 9.4.1).')
ol53nnMFBMICPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortLerCondition.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICPortLerCondition.setDescription('This variable is set to true whenever LerEstimate is less than or equal to LerAlarm (the larger the number the smaller the value).')
ol53nnMFBMICTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3), )
if mibBuilder.loadTexts: ol53nnMFBMICTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICTrunkTable.setDescription('FDDI module specific trunk table variables. At present there are none.')
ol53nnMFBMICTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMFBMICTrunkSlotIndex"), (0, "CHIPCOM-MIB", "ol53nnMFBMICTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICTrunkEntry.setDescription('A description of 53nnM-FBMIC trunk attributes.')
ol53nnMFBMICTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol53nnMFBMICTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFBMICTrunkIndex.setDescription('A unique value that identifies a particular trunk within this module. Its value ranges between 1 and olModTrunkNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkIndex.')
ol53nnMFIBSTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1), )
if mibBuilder.loadTexts: ol53nnMFIBSTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModTable.setDescription('A list of module attributes that apply to this model. To access an ol53nnMFIBSTModTable entry, the ol53nnMFIBSTModSlotIndex attribute is used.')
ol53nnMFIBSTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMFIBSTModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModEntry.setDescription('A list of module-specific information about a specific 53nnM-FIBST module in the concentrator.')
ol53nnMFIBSTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol53nnMFIBSTModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamModule.setDescription('Down stream slot (transmit to)')
ol53nnMFIBSTModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamModule.setDescription('Up stream slot (receve from)')
ol53nnMFIBSTModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamOperPath.setDescription('Transmit DBA (debug only)')
ol53nnMFIBSTModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamOperPath.setDescription('Receive DBA (debug only)')
ol53nnMFIBSTModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModRingInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTModRingInfo.setDescription('An array which is indexed by DBA number. Each element contains the slot number (1..16) which is assigned to transmit on this DBA. (debug only)')
ol53nnMFIBSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2), )
if mibBuilder.loadTexts: ol53nnMFIBSTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol53nnMFIBSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMFIBSTPortSlotIndex"), (0, "CHIPCOM-MIB", "ol53nnMFIBSTPortIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortEntry.setDescription('A list of module-specific information about a specific 53nnM-FIBST port in the concentrator.')
ol53nnMFIBSTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol53nnMFIBSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortIndex.setDescription('A unique value that identifies a particular port within this module. Its value ranges between 1 and olModPortNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortIndex.')
ol53nnMFIBSTPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMFIBSTPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortConfig.setDescription('Specifies the FDDI port type. If the port is on an FPM, the only allowed values are slave(3) and master(4). In addition, there can only be one active slave port on any concentrator FDDI network.')
ol53nnMFIBSTPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortPcmState.setDescription('(refer to ANSI SMT 9.6.2).')
ol53nnMFIBSTPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortConnectState.setDescription('An indication of the connect state of this PORT. Basically, this gives a higher level view of the state of the connection by grouping PCM states and the PC-Withhold flag state. The supported values and their corresponding PCM states and PC-Withhold condition, when relevant, are: disabled: (PC0:Off, PC9:Maint) connecting: (PC1(Break) || PC3 (Connect) || PC4(next) || PC5 (Signal) || PC6(Join) || PC7 (Verify)) && (PC_Withhold = None) standby: (PC_Withhold != None) active: (PC2:Trace || PC8:Active)')
ol53nnMFIBSTPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortNeighbor.setDescription('The type (PC_Neighbor) of the remote PORT that is determined in PC_Signaling in R_Val (1,2) (refer to ANSI SMT 9.6.3.2).')
ol53nnMFIBSTPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortRemoteMACIndicated.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortRemoteMACIndicated.setDescription('The indication, in PC-Signaling that the remote partner intends to place a MAC in the output token PATH of this PORT. Signaled as R_Val (9) (refer to ANSI SMT 9.6.3.2).')
ol53nnMFIBSTPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortBSFlag.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortBSFlag.setDescription('The Break State, BS_Flag (refer to ANSI SMT 9.4.3.4).')
ol53nnMFIBSTPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortPCWithhold.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortPCWithhold.setDescription('PC_Withhold, (refer to ANSI SMT 9.4.1).')
ol53nnMFIBSTPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortLerCondition.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTPortLerCondition.setDescription('This variable is set to true whenever LerEstimate is less than or equal to LerAlarm (the larger the number the smaller the value).')
ol53nnMFIBSTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3), )
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkTable.setDescription('FDDI module specific trunk table variables. At present there are none.')
ol53nnMFIBSTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMFIBSTTrunkSlotIndex"), (0, "CHIPCOM-MIB", "ol53nnMFIBSTTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkEntry.setDescription('A description of 53nnM-FIBST trunk attributes.')
ol53nnMFIBSTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol53nnMFIBSTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkIndex.setDescription('A unique value that identifies a particular trunk within this module. Its value ranges between 1 and olModTrunkNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkIndex.')
ol53nnMSTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1), )
if mibBuilder.loadTexts: ol53nnMSTPModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModTable.setDescription('A list of module attributes that apply to this model. To access an ol53nnMSTPModTable entry, the ol53nnMSTPModSlotIndex attribute is used.')
ol53nnMSTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMSTPModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMSTPModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModEntry.setDescription('A list of module-specific information about a specific 53nnM-FIBSTP module in the concentrator.')
ol53nnMSTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol53nnMSTPModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamModule.setDescription('Down stream slot (transmit to)')
ol53nnMSTPModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamModule.setDescription('Down stream slot (receve from)')
ol53nnMSTPModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamOperPath.setDescription('transmit DBA (debug only)')
ol53nnMSTPModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamOperPath.setDescription('receive DBA (debug only)')
ol53nnMSTPModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModRingInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPModRingInfo.setDescription('An array which is indexed by DBA number. Each element contains the slot number (1..16) which is assigned to transmit on this DBA. (debug only)')
ol53nnMSTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2), )
if mibBuilder.loadTexts: ol53nnMSTPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol53nnMSTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMSTPPortSlotIndex"), (0, "CHIPCOM-MIB", "ol53nnMSTPPortIndex"))
if mibBuilder.loadTexts: ol53nnMSTPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortEntry.setDescription('A list of module-specific information about a specific 53nnM-STP port in the concentrator.')
ol53nnMSTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol53nnMSTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortIndex.setDescription('A unique value that identifies a particular port within this module. Its value ranges between 1 and olModPortNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortIndex.')
ol53nnMSTPPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMSTPPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortConfig.setDescription('Specifies the FDDI port type. If the port is on an FPM, the only allowed values are slave(3) and master(4). In addition, there can only be one active slave port on any concentrator FDDI network.')
ol53nnMSTPPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortPcmState.setDescription('(refer to ANSI SMT 9.6.2).')
ol53nnMSTPPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortConnectState.setDescription('An indication of the connect state of this PORT. Basically, this gives a higher level view of the state of the connection by grouping PCM states and the PC-Withhold flag state. The supported values and their corresponding PCM states and PC-Withhold condition, when relevant, are: disabled: (PC0:Off, PC9:Maint) connecting: (PC1(Break) || PC3 (Connect) || PC4(next) || PC5 (Signal) || PC6(Join) || PC7 (Verify)) && (PC_Withhold = None) standby: (PC_Withhold != None) active: (PC2:Trace || PC8:Active)')
ol53nnMSTPPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortNeighbor.setDescription('The type (PC_Neighbor) of the remote PORT that is determined in PC_Signaling in R_Val (1,2) (refer to ANSI SMT 9.6.3.2).')
ol53nnMSTPPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortRemoteMACIndicated.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortRemoteMACIndicated.setDescription('The indication, in PC-Signaling that the remote partner intends to place a MAC in the output token PATH of this PORT. Signaled as R_Val (9) (refer to ANSI SMT 9.6.3.2).')
ol53nnMSTPPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortBSFlag.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortBSFlag.setDescription('The Break State, BS_Flag (refer to ANSI SMT 9.4.3.4).')
ol53nnMSTPPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortPCWithhold.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortPCWithhold.setDescription('PC_Withhold, (refer to ANSI SMT 9.4.1).')
ol53nnMSTPPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortLerCondition.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortLerCondition.setDescription('This variable is set to true whenever LerEstimate is less than or equal to LerAlarm (the larger the number the smaller the value).')
ol53nnMSTPPortPersonality = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sddi", 1), ("tpddi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMSTPPortPersonality.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPPortPersonality.setDescription('Specifies the physical signaling used by the port, the only valid values are sddi(3) and tpddi(4).')
ol53nnMSTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3), )
if mibBuilder.loadTexts: ol53nnMSTPTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPTrunkTable.setDescription('FDDI module specific trunk table variables. At present there are none.')
ol53nnMSTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMSTPTrunkSlotIndex"), (0, "CHIPCOM-MIB", "ol53nnMSTPTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMSTPTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPTrunkEntry.setDescription('A description of 53nnM-STP trunk attributes.')
ol53nnMSTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol53nnMSTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMSTPTrunkIndex.setDescription('A unique value that identifies a particular trunk within this module. Its value ranges between 1 and olModTrunkNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkIndex.')
ol51nnMTPCLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1), )
if mibBuilder.loadTexts: ol51nnMTPCLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModTable.setDescription('A list of module-specific information about a specific 51nnM-TPCL module in the concentrator.')
ol51nnMTPCLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTPCLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPCLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModEntry.setDescription('A list of module-specific information about a specific 51nnM-TPCL module in the concentrator.')
ol51nnMTPCLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModSlotIndex.setDescription('The slot number of this module.')
ol51nnMTPCLModMonitorConn = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connector-1", 1), ("connector-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModMonitorConn.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModMonitorConn.setDescription('When both connectors are on the same network: Setting this object to connector-1 allows the EMM to monitor the port statistics of port 1-12 on a per-port basis, and the port statistics of port 13-24 are summed and are reported through port 13. Setting this object to connector-2 allows the EMM to monitor the port statistics of port 12-24 on a per-port basis, and the port statistics of port 1-12 are summed and are reported through port 13. Note: when the 2 connectors are on different networks, setting this object to the value connector-1 or connector-2 will not have any effect. The port counters will be cleared whenever the value of this object is changed.')
ol51nnMTPCLModConn1Network = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModConn1Network.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModConn1Network.setDescription('The network that this connector is attached to.')
ol51nnMTPCLModConn2Network = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModConn2Network.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModConn2Network.setDescription('The network that this connector is attached to.')
ol51nnMTPCLModConn1DipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModConn1DipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModConn1DipNetwork.setDescription('The network indicated by the connector dip switch.')
ol51nnMTPCLModConn2DipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModConn2DipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModConn2DipNetwork.setDescription('The network indicated by the connector dip switch.')
ol51nnMTPCLModAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("collisions-31", 1), ("collisions-63", 2), ("collisions-127", 3), ("collisions-255", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModAutoPartition.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLModAutoPartition.setDescription('This object holds the consecutive collision count limit value. The module goes into the auto-partition mode whenever the consecutive collision count exceeds the consecutive collision limit count.')
ol51nnMTPCLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2), )
if mibBuilder.loadTexts: ol51nnMTPCLPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol51nnMTPCLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnMTPCLPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnMTPCLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPCLPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortEntry.setDescription('A list of module-specific information about a specific 51nnM-TPCL port in the concentrator.')
ol51nnMTPCLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortSlotIndex.setDescription("The slot number of this port's module.")
ol51nnMTPCLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortIndex.setDescription('The port number of this port.')
ol51nnMTPCLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortAdminState.setDescription('The desired state of this port. Setting this port to be redundant or for remote diagnostics with invalid settings of buddy slot and buddy port will return the genError error.')
ol51nnMTPCLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddySlot.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddySlot.setDescription("The slot index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the slot index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPCLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddyPort.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddyPort.setDescription("The port index of the redundant port's buddy. To set a port to be redundant, the buddy's slot and port must be set to valid values. The buddy is automatically set to be redundant to this port. If the port is configured for remote diagnostics, then this contains the port index of the backup buddy port. To configure a port for remote diagnostics, the buddy's slot and port must be set to valid values.")
ol51nnMTPCLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnMTPCLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortLinkInteg.setDescription('The current link integrity configuration for this port.')
ol51nnMTPCLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortDipLinkInteg.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnMTPCLPortDipLinkInteg.setDescription('The link integrity configuration as indicated by this dip switch.')
ol52nnBTTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1), )
if mibBuilder.loadTexts: ol52nnBTTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModTable.setDescription('A table of module-specific information for each 52nnB-TT module in the concentrator.')
ol52nnBTTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnBTTModSlotIndex"))
if mibBuilder.loadTexts: ol52nnBTTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModEntry.setDescription('A list of module-specific information about a specific 52nnB-TT module in the concentrator.')
ol52nnBTTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModSlotIndex.setDescription('The slot number of this module.')
ol52nnBTTModBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge-type-sr", 1), ("bridge-type-srt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModBridgeType.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModBridgeType.setDescription('Whether the bridge is a source-routing bridge or a source-routing-transparent bridge.')
ol52nnBTTModSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModSoftwareVersion.setDescription("The version number of the software loaded into the module's flash chips.")
ol52nnBTTModSRBridgeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSRBridgeNo.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModSRBridgeNo.setDescription("The module's source routing bridge number.")
ol52nnBTTModNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("closed", 2), ("beaconing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModNetworkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTModNetworkStatus.setDescription('The status of the ring containing this module.')
ol52nnBTTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2), )
if mibBuilder.loadTexts: ol52nnBTTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortTable.setDescription('A table of port-specific for each port of each 52nnB-TT module i the concentrator.')
ol52nnBTTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnBTTPortSlotIndex"), (0, "CHIPCOM-MIB", "ol52nnBTTPortIndex"))
if mibBuilder.loadTexts: ol52nnBTTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortEntry.setDescription('A list of port-specific information about a specific 52nnB-TT port in the concentrator.')
ol52nnBTTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortSlotIndex.setDescription("The slot number for this port's module.")
ol52nnBTTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortIndex.setDescription('The port number for this port within this slot.')
ol52nnBTTPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10))).clone(namedValues=NamedValues(("backPlane", 1), ("rj45", 8), ("db-9", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnBTTPortConnector.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortConnector.setDescription('The port connector. Notice that setting port connector available only for the front pannel port.')
ol52nnBTTPortSTAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("off", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSTAPState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortSTAPState.setDescription('The port connector. Notice that setting port connector available only for the front pannel port.')
ol52nnBTTPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortIpAddress.setDescription('The IP address associated with this port.')
ol52nnBTTPortMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortMACAddress.setDescription('A 6 octet address that uniquely identifies this port.')
ol52nnBTTPortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortThroughput.setDescription('Port throughput measured in Kbytes per second.')
ol52nnBTTPortForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortForwarding.setDescription('Port forwarding rate measured in frames per second.')
ol52nnBTTPortSRRingNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSRRingNo.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortSRRingNo.setDescription("The port's source routing ring number.")
ol52nnBTTPortRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnBTTPortRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTPortRingSpeed.setDescription("The ring's bandwidth.")
ol52nnBTTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3), )
if mibBuilder.loadTexts: ol52nnBTTTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTTrunkTable.setDescription('A table that contains trunk-specific information for each trunk on each 52nnB-TT in the concentrator.')
ol52nnBTTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnBTTTrunkSlotIndex"), (0, "CHIPCOM-MIB", "ol52nnBTTTrunkIndex"))
if mibBuilder.loadTexts: ol52nnBTTTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTTrunkEntry.setDescription('A list of information about a specific Trunk on a 52nnB-TT module in the concentrator.')
ol52nnBTTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTTrunkSlotIndex.setDescription('The slot number of this module. Its value ranges between 1 and olConcNumSlots.')
ol52nnBTTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnBTTTrunkIndex.setDescription('The trunk number of this module. Its value ranges between 1 and olModNumTrunks.')
ol52nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1), )
if mibBuilder.loadTexts: ol52nnMMGTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModTable.setDescription('A table that contains module information about each 52nnM-MGT in the concentrator.')
ol52nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMMGTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModEntry.setDescription('A list of module information for each 52nnM-MGT in the concentrator.')
ol52nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModSlotIndex.setDescription('The slot number of this module. Its value ranges between 1 and olConcNumSlots.')
ol52nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModMasterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModMasterPriority.setDescription('The mastership priority of this agent. Ten is the highest and one is the lowest. Priority is only used when an election occurs. Mastership is not preemptive unless the reset mastership command is used.')
ol52nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModMasterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModMasterStatus.setDescription('The mastership status of this agent.')
ol52nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the MAC address of port 1.')
ol52nnMMGTModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModRingSpeed.setDescription("The ring's bandwidth.")
ol52nnMMGTModNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("closed", 2), ("beaconing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModNetworkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTModNetworkStatus.setDescription('The status of the ring containing this module.')
ol52nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2), )
if mibBuilder.loadTexts: ol52nnMMGTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortTable.setDescription('A table that contains port-specific information for each port on each 52nnM-MGT in the concentrator.')
ol52nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnMMGTPortSlotIndex"), (0, "CHIPCOM-MIB", "ol52nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol52nnMMGTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortEntry.setDescription('A list of information about a specific port on a 52nnM-MGT module in the concentrator.')
ol52nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortSlotIndex.setDescription("The slot number of this port's module.")
ol52nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortIndex.setDescription('The port number of this port.')
ol52nnMMGTPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTPortIpAddress.setDescription('The IP address associated with this port.')
ol52nnMMGTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3), )
if mibBuilder.loadTexts: ol52nnMMGTTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkTable.setDescription('A table that contains trunk-specific information for each trunk on each 52nnM-MGT in the concentrator.')
ol52nnMMGTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol52nnMMGTTrunkSlotIndex"), (0, "CHIPCOM-MIB", "ol52nnMMGTTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMMGTTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkEntry.setDescription('A list of information about a specific Trunk on a 52nnM-MGT module in the concentrator.')
ol52nnMMGTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkSlotIndex.setDescription('The slot number of this module. Its value ranges between 1 and olConcNumSlots.')
ol52nnMMGTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkIndex.setDescription('The slot number of this module. Its value ranges between 1 and olModNumTrunks.')
ol52nnMMGTTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkCableMon.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkCableMon.setDescription('The cable monitor configuration for this trunk.')
ol52nnMMGTTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkNetMapState.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkNetMapState.setDescription('The map state of the copper ring-in trunk. This should be set to external for ring-in trunks which connect to external hubs. The mapping logic will not operate on trunks which are set to external. This prevents incorrect mapping which can occur when a module in one hub detects the mapping signal from another hub. This attribute only applies to copper ring-in trunks.')
ol52nnMMGTTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkExtBcnRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: ol52nnMMGTTrunkExtBcnRecovery.setDescription('Indicates whether the trunk is connected to a segment that will perform beacon recovery. This should be set to exists(1) for trunks which connect to hubs which perform beacon recovery. This attribute is used to determine the fault domain when resolving a beaconing condition. The beacon recovery process will resolve beaconing on trunks with this attribute set to nonExists(2) before trunks with the attribute set to exists(1) are resolved. For backplane trunks, setting to a value other than notApplicable will return invalidData error. The default value is nonExists(2).')
ol51nnIxModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1), )
if mibBuilder.loadTexts: ol51nnIxModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModTable.setDescription('A table of module-specific information for each 51nnI-x module in the concentrator.')
ol51nnIxModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnIxModSlotIndex"))
if mibBuilder.loadTexts: ol51nnIxModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModEntry.setDescription('A list of module-specific information about a specific 51nnI-x module in the concentrator.')
ol51nnIxModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModSlotIndex.setDescription('The slot number of this module.')
ol51nnIxModSwType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bridge", 1), ("switch", 2), ("router", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModSwType.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModSwType.setDescription('The software currently loaded and executing has the module operating as a Bridge, Switch or Router.')
ol51nnIxModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the mac address of port 1.')
ol51nnIxModDipPromDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModDipPromDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModDipPromDefaults.setDescription('The current module configuration with respect to default PROM values as specified by dip switches.')
ol51nnIxModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxModProtocols.setDescription('A textual description of the protocols supported by this module')
ol51nnIxPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2), )
if mibBuilder.loadTexts: ol51nnIxPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortTable.setDescription('A table of port-specific information for each port of each 51nnI-x module in the concentrator.')
ol51nnIxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol51nnIxPortSlotIndex"), (0, "CHIPCOM-MIB", "ol51nnIxPortIndex"))
if mibBuilder.loadTexts: ol51nnIxPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortEntry.setDescription('A list of port-specific information about a specific 51nnI-x port in the concentrator.')
ol51nnIxPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortSlotIndex.setDescription("The slot number for this port's module.")
ol51nnIxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortIndex.setDescription('The port number for this port within this slot.')
ol51nnIxPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortDipAdminState.setDescription("The state of this port as indicated by the port's dip switches.")
ol51nnIxPortSTAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("off", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortSTAPState.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortSTAPState.setDescription('The current IEEE 802.1d Spanning Tree Algorithm and Protocol state (STAP) of this port.')
ol51nnIxPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortIpAddress.setDescription('The IP Address associated with this port.')
ol51nnIxPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortDipNetwork.setDescription("The network for this port as specified by this port's dip switches.")
ol51nnIxPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDefNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ol51nnIxPortDefNetwork.setDescription("The network for this port as specified by the OEIM's non-volatile storage.")
ol53nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1), )
if mibBuilder.loadTexts: ol53nnMMGTModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModTable.setDescription('A list of module attributes that apply to this model. To access an ol53nnMMGTModTable entry, the ol53nnMMGTModSlotIndex attribute is used.')
ol53nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMMGTModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModEntry.setDescription('A list of module-specific information about a specific 53nnM-MGT module in the concentrator.')
ol53nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olModSlotIndex.')
ol53nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModMasterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModMasterPriority.setDescription('The mastership priority of this agent. Ten is the highest and one is the lowest. Priority is only used when an election occurs. Mastership is not preemptive unless the reset mastership command is used.')
ol53nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModMasterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModMasterStatus.setDescription('The mastership status of this agent.')
ol53nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModStationAddr.setDescription('A 6 octet address that uniquely identifies this module. The station address is the MAC address of port 1.')
ol53nnMMGTModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModIpAddress.setDescription('The IP address associated with this module.')
ol53nnMMGTModDownStreamMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamMAC.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamMAC.setDescription('Down stream MAC')
ol53nnMMGTModUpStreamMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamMAC.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamMAC.setDescription('Up stream MAC')
ol53nnMMGTModfddiMACPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModfddiMACPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModfddiMACPath.setDescription('The FDDI path which should be inserted into the MAC')
ol53nnMMGTModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamModule.setDescription('Down stream slot (transmit to)')
ol53nnMMGTModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamModule.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamModule.setDescription('Up stream slot (receve from)')
ol53nnMMGTModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamOperPath.setDescription('Transmit DBA (debug only)')
ol53nnMMGTModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamOperPath.setDescription('Receive DBA (debug only)')
ol53nnMMGTModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModRingInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTModRingInfo.setDescription('An array which is indexed by DBA number. Each element contains the slot number (1..16) which is assigned to transmit on this DBA. (debug only)')
ol53nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2), )
if mibBuilder.loadTexts: ol53nnMMGTPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortTable.setDescription('A table of port-specific information for each port of this module type.')
ol53nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMMGTPortSlotIndex"), (0, "CHIPCOM-MIB", "ol53nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol53nnMMGTPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortEntry.setDescription('A list of module-specific information about a specific 53nnM-MGT port in the concentrator.')
ol53nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortSlotIndex.')
ol53nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortIndex.setDescription('A unique value that identifies a particular port within this module. Its value ranges between 1 and olModPortNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olPortIndex.')
ol53nnMMGTPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a", 1), ("b", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortConfig.setDescription('Specifies the FDDI port type (a or b).')
ol53nnMMGTPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortPcmState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortPcmState.setDescription('(refer to ANSI SMT 9.6.2).')
ol53nnMMGTPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortConnectState.setDescription('An indication of the connect state of this PORT. Basically, this gives a higher level view of the state of the connection by grouping PCM states and the PC-Withhold flag state. The supported values and their corresponding PCM states and PC-Withhold condition, when relevant, are: disabled: (PC0:Off, PC9:Maint) connecting: (PC1(Break) || PC3 (Connect) || PC4(next) || PC5 (Signal) || PC6(Join) || PC7 (Verify)) && (PC_Withhold = None) standby: (PC_Withhold != None) active: (PC2:Trace || PC8:Active)')
ol53nnMMGTPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortNeighbor.setDescription('The type (PC_Neighbor) of the remote PORT that is determined in PC_Signaling in R_Val (1,2) (refer to ANSI SMT 9.6.3.2).')
ol53nnMMGTPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortRemoteMACIndicated.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortRemoteMACIndicated.setDescription('The indication, in PC-Signaling that the remote partner intends to place a MAC in the output token PATH of this PORT. Signaled as R_Val (9) (refer to ANSI SMT 9.6.3.2).')
ol53nnMMGTPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortBSFlag.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortBSFlag.setDescription('The Break State, BS_Flag (refer to ANSI SMT 9.4.3.4).')
ol53nnMMGTPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortPCWithhold.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortPCWithhold.setDescription('PC_Withhold, (refer to ANSI SMT 9.4.1).')
ol53nnMMGTPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortLerCondition.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTPortLerCondition.setDescription('This variable is set to true whenever LerEstimate is less than or equal to LerAlarm (the larger the number the smaller the value).')
ol53nnMMGTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3), )
if mibBuilder.loadTexts: ol53nnMMGTTrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTTrunkTable.setDescription('FDDI module specific trunk table variables. At present there are none.')
ol53nnMMGTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol53nnMMGTTrunkSlotIndex"), (0, "CHIPCOM-MIB", "ol53nnMMGTTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMMGTTrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTTrunkEntry.setDescription('A description of 53nnM-MGT trunk attributes.')
ol53nnMMGTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTTrunkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTTrunkSlotIndex.setDescription('A unique value that identifies a particular module. Its value ranges between 1 and olModSlotNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkSlotIndex.')
ol53nnMMGTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTTrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol53nnMMGTTrunkIndex.setDescription('A unique value that identifies a particular trunk within this module. Its value ranges between 1 and olModTrunkNumber. The module identified by a particular value of this index is the same module as indentified by the same value of olTrunkIndex.')
ol50nnMHCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1), )
if mibBuilder.loadTexts: ol50nnMHCTLModTable.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModTable.setDescription('A table that contains information about each 50nnM-HCTL in the concentrator. ')
ol50nnMHCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "ol50nnMHCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMHCTLModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModEntry.setDescription('A list of information for each 50nnM-HCTL module in the concentrator.')
ol50nnMHCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModSlotIndex.setDescription('The slot number for this module. The value should be 7.')
ol50nnMHCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModOperState.setDescription('The operational state of the 50nnM-HCTL module. Specifically, this is an indicator of whether the 50nnM-HCTL module is providing clock signals to the backplane. An active 50nnM-HCTL module provides clock signals to the backplane while a standby 50nnM-HCTL module does not. Note that only one 50nnM-HCTL module will be active at any given time; all other 50nnM-HCTL/ 50nnMRCTL modules in the concentrator will be in standby mode.')
ol50nnMHCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModClockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModClockStatus.setDescription('The current status of the on-board clocks on this module.')
ol50nnMHCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModTempStatus.setDescription('The temperature as detected by the probe on this module.')
ol50nnMHCTLModPDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModPDBStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModPDBStatus.setDescription('Indicates whether this 6-slot concentrator contains a power distribution board that supports powersupply redundancy.')
ol50nnMHCTLModDipCh1ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh1ActCol.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh1ActCol.setDescription("The Ethernet channel 1 activity/collision LED configuration as indicated by this module's dip switches.")
ol50nnMHCTLModDipCh2ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh2ActCol.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh2ActCol.setDescription("The Ethernet channel 2 activity/collision LED configuration as indicated by this module's dip switches.")
ol50nnMHCTLModDipCh3ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh3ActCol.setStatus('mandatory')
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh3ActCol.setDescription("The Ethernet channel 3 activity/collision LED configuration as indicated by this module's dip switches.")
olModSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 5), )
if mibBuilder.loadTexts: olModSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: olModSummaryTable.setDescription('A table of condensed module information.')
olModSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 5, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olModSummarySlotIndex"))
if mibBuilder.loadTexts: olModSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olModSummaryEntry.setDescription('A summary of all the generic and value added information associated with this module.')
olModSummarySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModSummarySlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olModSummarySlotIndex.setDescription('The slot number of this module that this summary pertains to.')
olModSummaryInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olModSummaryInfo.setStatus('mandatory')
if mibBuilder.loadTexts: olModSummaryInfo.setDescription("A summary of all information relating to this module in condensed format. The condensed format is only as large as needed to hence the largest value which usually is one octet. The TCP port for the terminal server, however, uses 4 octets. The summary consists of a header, a module portion, a port portion, and a trunk portion. Each portion consists of generic information and module specific information. For example, the module information consists of the olModTable entry for this slot and the olSpecMods module table information for this module type for this slot. --------------------------------------------------- The header consists of the following octets: Version of structure : 1 Number of octets in generic module Number of octets in specific module Number of octets in generic port Number of octets in specific port Number of octets in generic trunk Number of octets in specific trunk The format of the data portion is as follows: Some of the olModTable: olModType olModClass olModDescr olModVersion olModNetwork olModNetworkType olModStatus olModNumPorts olModNumTrunks olSpecMods module table (for this module) Not including slot number. For each port: Some of the olPortTable: olPortType olPortConnector olPortStatus olPortAdminState olPortNetwork olPortNetworkType olSpecMods port table (for this port's module) Not including slot and port number. For each trunk: Some of the olTrunkTable: olTrunkType olTrunkConnector olTrunkStatus olTrunkAdminState olTrunkWrapState olTrunkNeighbor olSpecMods trunk table (for this trunk's module) Not including slot and trunk number. In all of the above, the index for all of these tables is condensed out of the summary. ")
olNetDPTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1), )
if mibBuilder.loadTexts: olNetDPTable.setStatus('mandatory')
if mibBuilder.loadTexts: olNetDPTable.setDescription('A table that contains information linking physical backplane allocation to logical networks. This information is useful: (1) to determine the physical allocation of networks on the backplane, and (2) to determine the remaining capacity of the backplane for future network growth. Since unknown modules are managed via dip switches, this is useful in order to set the dips to the appropriate settings. Ethernet is a bus architecture. Once a path is allocated, all modules and ports can access that path. Token Ring and FDDI are ring architectures. Each module on a ring requires a path. Therefore, 4 paths could be used to link 4 modules together on one ring, or 2 modules on 2 separate rings. It is possible to have a module allocated to a ring (and thus a data path) without linking to another module. These rules can be used to determine the remaining capacity for network growth.')
olNetDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olNetDPDataPath"))
if mibBuilder.loadTexts: olNetDPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olNetDPEntry.setDescription('A list of information about each data path in the concentrator.')
olNetDPDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("ethernet-path-1", 6), ("ethernet-path-2", 7), ("ethernet-path-3", 8), ("token-ring-path-1", 9), ("token-ring-path-2", 10), ("token-ring-path-3", 11), ("token-ring-path-4", 12), ("token-ring-path-5", 13), ("token-ring-path-6", 14), ("token-ring-path-7", 15), ("token-ring-path-8", 16), ("token-ring-path-9", 17), ("token-ring-path-10", 18), ("token-ring-path-11", 19), ("token-ring-path-12", 20), ("token-ring-path-13", 21), ("token-ring-path-14", 22), ("token-ring-path-15", 23), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetDPDataPath.setStatus('mandatory')
if mibBuilder.loadTexts: olNetDPDataPath.setDescription('The data path on the backplane. Data paths between different protocols overlap. That is, an ethernet data path will overlap with multiple token ring and fddi data paths. ')
olNetDPNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("notUsed", 1), ("otherProto", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetDPNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olNetDPNetID.setDescription('The network that this data path corresponds to. If the data path is not being used at all, notUsed(1) is the return value. If the data path is being used by another protocol, then otherProto(2) is the return value.')
olNetSecurityMACTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2), )
if mibBuilder.loadTexts: olNetSecurityMACTable.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACTable.setDescription('A table of security configuration parameters and MAC addresses associated with every port with security configured in the concentrator.')
olNetSecurityMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olNetSecurityMACSlotIndex"), (0, "CHIPCOM-MIB", "olNetSecurityMACPortIndex"), (0, "CHIPCOM-MIB", "olNetSecurityMACAddress"))
if mibBuilder.loadTexts: olNetSecurityMACEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACEntry.setDescription('A list of security configuration parameters and MAC addresses associated with each port with security configured in the concentrator.')
olNetSecurityMACSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetSecurityMACSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACSlotIndex.setDescription('The slot number that contains this port.')
olNetSecurityMACPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olNetSecurityMACPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACPortIndex.setDescription('The port number within this slot.')
olNetSecurityMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetSecurityMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACAddress.setDescription('The security MAC address assigned to this port.')
olNetSecurityMACMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetSecurityMACMode.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACMode.setDescription('The desired security mode for this port/address.')
olNetSecurityMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olNetSecurityMACStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olNetSecurityMACStatus.setDescription('Each instance of the olNetSecurityMACTable associated with this olNetSecurityMACEntry (slot, port, and address) will be deleted by the agent if this olNetSecurityMACEntry is not equal to valid(1). Initial creation of instances occurs via a set operation on a specific slot/port/address.')
olEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1), )
if mibBuilder.loadTexts: olEnetStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsTable.setDescription('A table that contains statistical information about Ethernet (IEEE 802.3) networks.')
olEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olEnetStatsNetID"))
if mibBuilder.loadTexts: olEnetStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsEntry.setDescription('A list of statistical information about each Ethernet (IEEE 802.3) network in the concentrator.')
olEnetStatsNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsNetID.setDescription('The network index that uniquely identifies this network. One of ethernet-1, ethernet-2, or ethernet-3.')
olEnetStatsFramesRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsFramesRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsFramesRcvdOks.setDescription('The count of frames that were successfully received by this network. This counter does not include frames received in error.')
olEnetStatsOctetsRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsOctetsRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsOctetsRcvdOks.setDescription('The count of the number of octets that were successfully received by this network. This counter does not include octets that were part of frames that were received in error.')
olEnetStatsMcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsMcastRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsMcastRcvdOks.setDescription('The count of the number of multicast frames successfully received by this network.')
olEnetStatsBcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsBcastRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsBcastRcvdOks.setDescription('The count of the number of broadcast frames successfully received by this network.')
olEnetStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsFrameTooLongs.setDescription('The count of the number of frames received by this network that exceeds the maximum permitted Ethernet (802.3) frame size.')
olEnetStatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsAlignmentErrors.setDescription('The count of the number of frames received by this network that did not pass the frame check sequence (FCS) check and that are not an integral number of octets. These frames are not counted in olEnetStatsFCSErrors.')
olEnetStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsFCSErrors.setDescription('The count of the number of frames received by this network that did not pass the frame check sequence (FCS) check and are an integral number of octets.')
olEnetStatsRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsRunts.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsRunts.setDescription('The count of the number of frames received by this network that are less than 512 bits long. ')
olEnetStatsLocalColls = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsLocalColls.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsLocalColls.setDescription('The count of the number of times that two or more ports within this concentrator have received traffic simultaneously.')
olEnetStatsModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2), )
if mibBuilder.loadTexts: olEnetStatsModTable.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModTable.setDescription('A table of statistical information counted for each module in each Ethernet (IEEE 802.3) network.')
olEnetStatsModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olEnetStatsModNetID"), (0, "CHIPCOM-MIB", "olEnetStatsModSlotIndex"))
if mibBuilder.loadTexts: olEnetStatsModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModEntry.setDescription('A list of statistical information for each port on each Ethernet (IEEE 802.3) network in the concentrator.')
olEnetStatsModNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModNetID.setDescription('The unique identifier for this network. One of ethernet-1, ethernet-2, or ethernet-3.')
olEnetStatsModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModSlotIndex.setDescription('The slot number that contains this module.')
olEnetStatsModFramesRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModFramesRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModFramesRcvdOks.setDescription('The count of frames that were successfully received by this module. This counter does not include frames received in error.')
olEnetStatsModOctetsRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModOctetsRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModOctetsRcvdOks.setDescription('The count of the number of octets that were successfully received by this module. This counter does not include octets that were part of frames that were received in error.')
olEnetStatsModMcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModMcastRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModMcastRcvdOks.setDescription('The count of the number of multicast frames successfully received by this module.')
olEnetStatsModBcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModBcastRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModBcastRcvdOks.setDescription('The count of the number of broadcast frames successfully received by this module.')
olEnetStatsModFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModFrameTooLongs.setDescription('The count of the number of frames received by this module that exceeds the maximum permitted Ethernet (802.3) frame size.')
olEnetStatsModAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModAlignmentErrors.setDescription('The count of the number of frames received by this module that did not pass the frame check sequence (FCS) check and that are not an integral number of octets. These frames are not counted in olEnetStatsModFCSErrors.')
olEnetStatsModFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModFCSErrors.setDescription('The count of the number of frames received by this module that did not pass the frame check sequence (FCS) check and are an integral number of octets.')
olEnetStatsModRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsModRunts.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsModRunts.setDescription('The count of the number of frames received by this module that are less than 512 bits long. ')
olEnetStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3), )
if mibBuilder.loadTexts: olEnetStatsPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortTable.setDescription('A table of statistical information counted for each port in each Ethernet (IEEE 802.3) network.')
olEnetStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olEnetStatsPortSlotIndex"), (0, "CHIPCOM-MIB", "olEnetStatsPortIndex"))
if mibBuilder.loadTexts: olEnetStatsPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortEntry.setDescription('A list of statistical information for each port on each Ethernet (IEEE 802.3) network in the concentrator.')
olEnetStatsPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortNetID.setDescription('The unique identifier for this network. One of ethernet-1, ethernet-2, or ethernet-3.')
olEnetStatsPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortSlotIndex.setDescription('The slot number that contains this port.')
olEnetStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortIndex.setDescription('The port number within this slot.')
olEnetStatsPortFramesRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortFramesRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortFramesRcvdOks.setDescription('The count of frames that were successfully received by this port. This counter does not include frames received in error.')
olEnetStatsPortOctetsRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortOctetsRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortOctetsRcvdOks.setDescription('The count of the number of octets that were successfully received by this port. This counter does not include octets that were part of frames that were received in error.')
olEnetStatsPortMcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortMcastRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortMcastRcvdOks.setDescription('The count of the number of multicast frames successfully received by this port.')
olEnetStatsPortBcastRcvdOks = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortBcastRcvdOks.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortBcastRcvdOks.setDescription('The count of the number of broadcast frames successfully received by this port.')
olEnetStatsPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortFrameTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortFrameTooLongs.setDescription('The count of the number of frames received by this port that exceeds the maximum permitted Ethernet (802.3) frame size.')
olEnetStatsPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortAlignmentErrors.setDescription('The count of the number of frames received by this port that did not pass the frame check sequence (FCS) check and that are not an integral number of octets. These frames are not counted in olEnetStatsPortFCSErrors.')
olEnetStatsPortFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortFCSErrors.setDescription('The count of the number of frames received by this port that did not pass the frame check sequence (FCS) check and are an integral number of octets.')
olEnetStatsPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortRunts.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortRunts.setDescription('The count of the number of frames received by this port that are less than 512 bits long. ')
olEnetStatsPortSrcAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortSrcAddrChanges.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortSrcAddrChanges.setDescription('The count of the number of times that olEnetStatsPortLastSourceAddr { olEnetStatsPortEntry 11 } has changed.')
olEnetStatsPortLastSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortLastSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortLastSrcAddr.setDescription('The last source address seen on this port for this network for the last successfully received frame.')
olEnetStatsPortLastErrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetStatsPortLastErrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetStatsPortLastErrAddr.setDescription('The value stored in the source address portion of a frame received in error (alignment, FCS, or too long). Since the frame was received in error, there is no guarantee that this is an actual valid address.')
olEnetMapTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4), )
if mibBuilder.loadTexts: olEnetMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetMapTable.setDescription("A table that contains a cache of information relating an Ethernet source address with a specific port for a given network. An indication of this source's utilization of the network is also provided.")
olEnetMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olEnetMapNetID"), (0, "CHIPCOM-MIB", "olEnetMapAddress"))
if mibBuilder.loadTexts: olEnetMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetMapEntry.setDescription('A list of information that tracks a source address to a specific port for each network.')
olEnetMapNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetMapNetID.setDescription('The network index that uniquely identifies this network. One of ethernet-1, ethernet-2, ethernet-3.')
olEnetMapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetMapAddress.setDescription('An Ethernet source address received by this port on this network.')
olEnetMapSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetMapSlotIndex.setDescription('The slot number of the port that received this address.')
olEnetMapPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetMapPortIndex.setDescription("The port number within olEnetMapSlotIndex's slot that received this address.")
olEnetMapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetMapFrames.setDescription('An estimated count of the number of frames generated by this address. This count should be interpreted as an indicator, not a true frame count.')
olEnetMapOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetMapOctets.setDescription('An estimated count of the number of octets generated by this address. This count should be interpreted as an indicator, not a true octet count.')
olEnetMapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olEnetMapTime.setStatus('mandatory')
if mibBuilder.loadTexts: olEnetMapTime.setDescription('The time in in hundredths of a second since this address was last seen. For example, if olEnetMapTime is 500 ticks, then this adddress was seen 5 seconds ago.')
olTRnetMapState = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changing", 1), ("notChanging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapState.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapState.setDescription('The state of the inter-module token ring map. If the map is being updated, then the state of the map is changing.')
olTRnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2), )
if mibBuilder.loadTexts: olTRnetStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsTable.setDescription('A list of Token Ring statistics entries counted for each network.')
olTRnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRnetStatsNetID"))
if mibBuilder.loadTexts: olTRnetStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsEntry.setDescription('A collection of statistics kept for a particular Token Ring interface.')
olTRnetStatsNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRnetStatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLineErrors.setDescription('The total number of line errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsBurstErrors.setDescription('The total number of burst errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsACErrors.setDescription('The total number of AC (Address Copied) errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLostFrameErrors.setDescription('The total number of lost frame errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsCongestionErrors.setDescription('The total number of receive congestion errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsFrameCopiedErrors.setDescription('The total number of frame copied errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsTokenErrors.setDescription('The total number of token errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsDuplicateAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsDuplicateAddresses.setDescription('The total number of token errors reported in error reporting packets detected by the TRMM.')
olTRnetStatsBeaconEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsBeaconEvents.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsBeaconEvents.setDescription('The total number of times that the ring enters the beaconing state.')
olTRnetStatsLastBeaconSender = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconSender.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLastBeaconSender.setDescription('The address of the sender of the last beacon frame received on this ring. If no beacon frames have been received, this object will be six zero octets.')
olTRnetStatsLastBeaconNAUN = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconNAUN.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLastBeaconNAUN.setDescription('The address of the NAUN in the last beacon frame received on this ring. If no beacon frames have been received, this object will be six zero octets.')
olTRnetStatsLastBeaconTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLastBeaconTime.setDescription('The time in in hundredths of a second since the last beacon event occurred. For example, if the time is 500 ticks, then this event was seen 5 seconds ago. If no beacon events have occurred, then this will be equal to the sysUpTime.')
olTRnetStatsLastBeaconAction = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("portDisable", 2), ("trunkDisable", 3), ("moduleIsolate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsLastBeaconAction.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsLastBeaconAction.setDescription('The action (if any) taken to correct the last beacon event on the ring.')
olTRnetStatsTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsTotalStations.setDescription('The number of stations currently participating in the 802.5 MAC protocol on the ring.')
olTRnetStatsConcStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsConcStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsConcStations.setDescription('The number of stations currently participating in the 802.5 MAC protocol on the ring which are connected to ports in this concentrator.')
olTRnetStatsTotalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsTotalPorts.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsTotalPorts.setDescription('The total number of ports within this concentrator and on this ring regardless of their admin state or status.')
olTRnetStatsEnabledPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsEnabledPorts.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsEnabledPorts.setDescription('The number of ports within this concentrator and on this ring which have olPortAdminState set to enabled.')
olTRnetStatsActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsActivePorts.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsActivePorts.setDescription('The number of ports within this concentrator and on this ring which have olPortAdminState set to enabled and whose olPortStatus has a status of okay.')
olTRnetStatsStationTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3), )
if mibBuilder.loadTexts: olTRnetStatsStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationTable.setDescription('A list of ring statistics entries.')
olTRnetStatsStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRnetStatsStationNetID"), (0, "CHIPCOM-MIB", "olTRnetStatsStationAddr"))
if mibBuilder.loadTexts: olTRnetStatsStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationEntry.setDescription('A collection of statistics for a particular station that has been discovered on a a ring monitored by this device.')
olTRnetStatsStationNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRnetStatsStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationAddr.setDescription('The physical address of this station.')
olTRnetStatsStationSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationSlotIndex.setDescription('The slot number of the station with this address. Addresses with a slot value of external(255) are not in this concentrator.')
olTRnetStatsStationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationPortIndex.setDescription("The port number within olTRnetStatsStationSlotIndex's slot that received this address. If olTRnetStatsStationSlotIndex has a value of external(255), then the port address will be 255.")
olTRnetStatsStationNAUNAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationNAUNAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationNAUNAddress.setDescription('The physical address of the nearest active upstream neighbor of this station.')
olTRnetStatsStationLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationLineErrors.setDescription('The total number of Line Errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationBurstErrors.setDescription('The total number of burst errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationACErrors.setDescription('The total number of AC (Address Copied) errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationLostFrameErrors.setDescription('The total number of lost frame errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationCongestionErrors.setDescription('The total number of congestion errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationFrameCopiedErrors.setDescription('The total number of frame copied errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationTokenErrors.setDescription('The total number of token errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsStationDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsStationDuplicateAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsStationDuplicateAddresses.setDescription('The number of times this station experienced a duplicate address error.')
olTRnetStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4), )
if mibBuilder.loadTexts: olTRnetStatsPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortTable.setDescription('A list of statistic entries, for ports within the concentrator.')
olTRnetStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRnetStatsPortSlotIndex"), (0, "CHIPCOM-MIB", "olTRnetStatsPortIndex"))
if mibBuilder.loadTexts: olTRnetStatsPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortEntry.setDescription('A collection of statistics for a particular station that has been discovered on a a ring monitored by this device.')
olTRnetStatsPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortSlotIndex.setDescription('The port slot number.')
olTRnetStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortIndex.setDescription("The port number within olTRnetStatsPortSlotIndex's slot.")
olTRnetStatsPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRnetStatsPortTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortTotalStations.setDescription('The total number of stations attached to this port.')
olTRnetStatsPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortAddress.setDescription('The mac address of the station connected to this If there are multiple mac addresses for this port, then this object will contain the last mac address.')
olTRnetStatsPortLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortLineErrors.setDescription('The total number of Line Errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortBurstErrors.setDescription('The total number of burst errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortACErrors.setDescription('The total number of AC (Address Copied) errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortLostFrameErrors.setDescription('The total number of lost frame errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortCongestionErrors.setDescription('The total number of congestion errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortFrameCopiedErrors.setDescription('The total number of frame copied errors pertaining to this port reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortTokenErrors.setDescription('The total number of token errors pertaining to this station reported in error reporting packets detected by the TRMM.')
olTRnetStatsPortDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetStatsPortDuplicateAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetStatsPortDuplicateAddresses.setDescription('The number of times this port experienced a duplicate address error.')
olTRnetMapSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5))
olTRnetMapSummaryLogicalState = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changing", 1), ("notChanging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalState.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalState.setDescription('The state of the token ring summary table. If the summary is being updated, then the state of the summary is changing.')
olTRnetMapSummaryLogicalLock = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalLock.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryLogicalLock.setDescription('A semaphore for locking the token ring summary table. When locked, updates to the summary will pend until the semaphore is unlocked, so that a valid summary can be read. This cannot be set to unlock if olTRnetSummaryLogicalState is changing. For complete accuracy, this should be read after being set to ensure that the map was not changing when the lock was attempted. After the summary information has been recorded, the semaphore should be set to unlock to allow changes to occur.')
olTRnetMapSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3), )
if mibBuilder.loadTexts: olTRnetMapSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryTable.setDescription("A logical map of the token ring network, starting from the agent's specified token ring interface. Each station on the map is represented by it's MAC address, slot number and port number (8 octets per station). If the port is external to the concentrator, the slot number will be 255 and the port number will be 0. The map is ordered in the same direction as the token flow. The MAC addresses are concatonated into groups of up to 32 addresses per entry. The last entry has all-zero MAC addresses padded on the end of the entry. All entries before the last one have 32 valid addresses. This table supports up to 256 stations.")
olTRnetMapSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRnetMapSummaryNetID"), (0, "CHIPCOM-MIB", "olTRnetMapSummaryIndex"))
if mibBuilder.loadTexts: olTRnetMapSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryEntry.setDescription('A group of MAC addresses associated with a Token Ring map.')
olTRnetMapSummaryNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummaryNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryNetID.setDescription('The network index that uniquely identifies this network. It can be isolated from the backplane, or on one of seven possible backplane token ring networks.')
olTRnetMapSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummaryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummaryIndex.setDescription('The index into the map array. Possible values are 1 through 8. The MAC address of this agent is the first MAC address in olTRnetMapSummary32Stations indexed by a 1 in this entry.')
olTRnetMapSummary32Stations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRnetMapSummary32Stations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRnetMapSummary32Stations.setDescription('A concatonated group of MAC addresses and their associated slot and port of stations on the ring. Each entry has the eight octets. The first six octets are the MAC address. The seventh octet is the slot ID (or 255 if it is external to the concentrator). The eighth is the port ID (or 255 if it is external to the concentrator). The MAC addresses are in the same order as the token flow.')
olTRTrafTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6), )
if mibBuilder.loadTexts: olTRTrafTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTable.setDescription('A list of Token Ring network traffic (non-error) statistics entries. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRTrafNetID"))
if mibBuilder.loadTexts: olTRTrafEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafEntry.setDescription('A collection of statistics kept for a particular Token Ring interface. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafTokenRotationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTokenRotationTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTokenRotationTime.setDescription('An estimate of the time (in microseconds) that it takes for the token to complete a single rotation around the ring.')
olTRTrafDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafDropEvents.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafDropEvents.setDescription('The total number of events in which frames were dropped by the TRMM due to lack of resources. Note that this number is not necessarily the number of frames dropped; it is just the number of times this condition has been detected.')
olTRTrafOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafOctets.setDescription('The total number of octets of data received on the network.')
olTRTrafFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames.setDescription('The total number of frames received.')
olTRTrafMacOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafMacOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafMacOctets.setDescription('The total number of octets of data in MAC frames received on the network.')
olTRTrafMacFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafMacFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafMacFrames.setDescription('The total number of MAC frames received.')
olTRTrafBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafBroadcastFrames.setDescription('The total number of non-MAC frames received that were directed to a broadcast address (0xFFFFFFFFFFFF or 0xC000FFFFFFFF).')
olTRTrafMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafMulticastFrames.setDescription('The total number of non-MAC frames received that were directed to a local or global multicast or functional address. Note that this number does not include frames directed to a broadcast address.')
olTRTrafFrames18to63Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames18to63Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames18to63Octets.setDescription('The total number of non-MAC frames received that were between 18 and 63 octets in length inclusive.')
olTRTrafFrames64to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames64to127Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames64to127Octets.setDescription('The total number of non-MAC frames received that were between 64 and 127 octets in length inclusive.')
olTRTrafFrames128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames128to255Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames128to255Octets.setDescription('The total number of non-MAC frames received that were between 128 and 255 octets in length inclusive.')
olTRTrafFrames256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames256to511Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames256to511Octets.setDescription('The total number of non-MAC frames received that were between 256 and 511 octets in length inclusive.')
olTRTrafFrames512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames512to1023Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames512to1023Octets.setDescription('The total number of non-MAC frames received that were between 512 and 1023 octets in length inclusive.')
olTRTrafFrames1024to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames1024to2047Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames1024to2047Octets.setDescription('The total number of non-MAC frames received that were between 1024 and 2047 octets in length inclusive.')
olTRTrafFrames2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames2048to4095Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames2048to4095Octets.setDescription('The total number of non-MAC frames received that were between 2048 and 4095 octets in length inclusive.')
olTRTrafFrames4096to8191Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames4096to8191Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames4096to8191Octets.setDescription('The total number of non-MAC frames received that were between 4096 and 8191 octets in length inclusive.')
olTRTrafFrames8192to18000Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFrames8192to18000Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFrames8192to18000Octets.setDescription('The total number of non-MAC frames received that were between 8192 and 18000 octets in length inclusive.')
olTRTrafFramesGreaterThan18000Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafFramesGreaterThan18000Octets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafFramesGreaterThan18000Octets.setDescription('The total number of non-MAC frames received that were greater than or equal to 18000 octets in length.')
olTRTrafControlTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7), )
if mibBuilder.loadTexts: olTRTrafControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTable.setDescription('A list entries containing information about olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable, and olTRTrafTopNSummaryTable')
olTRTrafControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRTrafControlNetID"))
if mibBuilder.loadTexts: olTRTrafControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlEntry.setDescription('A collection of information about olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable, and olTRTrafTopNSummaryTable')
olTRTrafControlNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafControlLogicalState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changing", 1), ("notChanging", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlLogicalState.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlLogicalState.setDescription('The state of the token ring station traffic tables: olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable and olTRTrafTopNSummaryTable. If any of the tables associated with this olTRTrafControlEntry are being updated, then the state is changing(1).')
olTRTrafControlLogicalLock = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlLogicalLock.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlLogicalLock.setDescription('A semaphore for locking the token ring station traffic tables: olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable, and olTRTrafTopNSummaryTable. When the semaphore is locked, adds, deletes, and re-sorting the traffic tables associated with this olTRTrafControlEntry will pend until the semaphore is unlocked, so that a valid set of entries can be read. Note that the normal incrementing of the traffic counters are not affected by the setting of this semaphore. This cannot be set to unlock if olTRTrafControlLogicalState is changing. For complete accuracy, this semaphore should be read after being set to ensure that the tables were not changing when the lock was attempted. After the table information has been recorded, the semaphore should be set to unlock to allow changes to occur.')
olTRTrafControlClear = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlClear.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlClear.setDescription('When the value of this object is set to clear, all entries in the token ring station traffic tables (olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable, and olTRTrafTopNSummaryTable) are cleared.')
olTRTrafControlLastClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlLastClearTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlLastClearTime.setDescription('The value of sysUpTime when the token ring station traffic tables (olTRTrafStationTable, olTRTrafPortTable, olTRTrafTopNTable and olTRTrafTopNSummaryTable) were cleared. If never cleared, this value shall be zero (and the token ring station traffic tables will contain information collected since the XMM was started up).')
olTRTrafControlTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTotalStations.setDescription('The number of stations in the portion of the olTRTrafStationTable associated with this olTRTrafControlEntry.')
olTRTrafControlStationLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlStationLastChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlStationLastChangeTime.setDescription('The value of sysUpTime when the last entry was added to or deleted (or re-sorted) from the portion of the olTRTrafStationTable associated with this olTRTrafControlEntry. If no additions or deletions have occurred, this value shall be zero.')
olTRTrafControlPortTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlPortTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlPortTotalStations.setDescription('The number of stations in the portion of the olTRTrafPortTable associated with this olTRTrafControlEntry.')
olTRTrafControlPortLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlPortLastChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlPortLastChangeTime.setDescription('The value of sysUpTime when the last entry was added to or deleted (or re-sorted) from the portion of the olTRTrafPortTable associated with this olTRTrafControlEntry. If no additions or deletions have occurred, this value shall be zero.')
olTRTrafControlTopNMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlTopNMaxStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTopNMaxStations.setDescription('Specifies a maximum value for olTRTrafControlTopNTotalStations in this olTRTrafControlEntry. If this value is zero then no maximum value for olTRTrafControlTopNTotalStations is specified.')
olTRTrafControlTopNTotalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlTopNTotalStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTopNTotalStations.setDescription('The number of stations (for each statistic) in the portion of the olTRTrafTopNTable and olTRTrafTopNSummaryTable associated with this olTRTrafControlEntry. If olTRTrafControlTopNMaxStations is zero or is not less than olTRTrafControlTotalStations then olTRTrafControlTopNTotalStations will have the same value as olTRTrafControlTotalStations. Otherwise olTRTrafControlTopNTotalStations will have the same value as olTRTrafControlTopNMaxStations.')
olTRTrafControlTopNLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafControlTopNLastChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTopNLastChangeTime.setDescription('The value of sysUpTime when the last entry was added to or deleted (or re-sorted) from the portion of the olTRTrafTopNTable and olTRTrafTopNSummaryTable associated with this olTRTrafControlEntry. This is equivalent to the time when the last TopN data collection period ended. If no additions or deletions have occurred, this value shall be zero.')
olTRTrafControlTopNInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafControlTopNInterval.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafControlTopNInterval.setDescription('Specifies the length of the TopN data collection period in seconds. Minimum length is 5 seconds; maximum is 86400 seconds (24 hours). When this value is modified, all associated entries in olTRTrafTopNTable and olTRTrafTopNSummaryTable are deleted and a new TopN data collection period is started.')
olTRTrafStationTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8), )
if mibBuilder.loadTexts: olTRTrafStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationTable.setDescription('A list of Token Ring station traffic statistics entries indexed by Network ID and MAC address. The table has olTRTrafTotalStations entries. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRTrafStationNetID"), (0, "CHIPCOM-MIB", "olTRTrafStationAddress"))
if mibBuilder.loadTexts: olTRTrafStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationEntry.setDescription('A collection of station statistics for a particular station that has been discovered on an interface of this device. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafStationNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationAddress.setDescription('The physical address of this station.')
olTRTrafStationSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 254, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("remote-ring", 254), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationSlotIndex.setDescription('The slot number of the station with this address. Addresses with a slot value of remote-ring(254) are not in this ring. Addresses with a slot value of external(255) are not in this concentrator.')
olTRTrafStationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationPortIndex.setDescription("The port number within olTRTrafSlotIndex's slot that received this address. If olTRTrafSlotIndex has a value of remote-ring(254), then the port address will be 254. If olTRTrafSlotIndex has a value of external(255), then the port address will be 255.")
olTRTrafStationInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationInFrames.setDescription('The number of frames transmitted to this address since it was added to this table.')
olTRTrafStationOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutFrames.setDescription('The number of frames transmitted by this address since it was added to this table.')
olTRTrafStationInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationInOctets.setDescription('The number of octets transmitted to this address since it was added to this table.')
olTRTrafStationOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutOctets.setDescription('The number of octets transmitted by this address since it was added to this table.')
olTRTrafStationOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutErrors.setDescription('The number of error frames transmitted by this address since it was added to this table. Only isolating errors (LineErrors, BurstErrors, ACErrors, InternalErrors, and AbortErrors) and CongestionErrors are counted.')
olTRTrafStationOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutBroadcastFrames.setDescription('The number of frames transmitted by this address that were directed to the broadcast address since it was added to this table.')
olTRTrafStationOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafStationOutMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafStationOutMulticastFrames.setDescription('The number of frames transmitted by this address that were directed to a multicast address since it was added to this table. Note that this number does not include frames directed to the broadcast address.')
olTRTrafPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9), )
if mibBuilder.loadTexts: olTRTrafPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortTable.setDescription('A list of Token Ring station traffic statistics entries indexed by slot number, and port number. Note that stations external to this concentrator or on another ring are excluded from this table. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRTrafPortSlotIndex"), (0, "CHIPCOM-MIB", "olTRTrafPortPortIndex"))
if mibBuilder.loadTexts: olTRTrafPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortEntry.setDescription('A collection of station statistics for a particular station that has been discovered on an interface of this device. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets. include error frames; all octet counters exclude framing bits but include FCS octets.')
olTRTrafPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortSlotIndex.setDescription('The slot number of the station with this address.')
olTRTrafPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortPortIndex.setDescription("The port number within olTRTrafPortSlotIndex's slot that received this address.")
olTRTrafPortNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortAddress.setDescription('The physical address of this station.')
olTRTrafPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortInFrames.setDescription('The number of frames transmitted to this address since it was added to this table.')
olTRTrafPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutFrames.setDescription('The number of frames transmitted by this address since it was added to this table.')
olTRTrafPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortInOctets.setDescription('The number of octets transmitted to this address since it was added to this table.')
olTRTrafPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutOctets.setDescription('The number of octets transmitted by this address since it was added to this table.')
olTRTrafPortOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutErrors.setDescription('The number of error frames transmitted by this address since it was added to this table. Only isolating errors (LineErrors, BurstErrors, ACErrors, InternalErrors, and AbortErrors) and CongestionErrors are counted.')
olTRTrafPortOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutBroadcastFrames.setDescription('The number of frames transmitted by this address that were directed to the broadcast address since it was added to this table.')
olTRTrafPortOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafPortOutMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafPortOutMulticastFrames.setDescription('The number of frames transmitted by this address that were directed to a multicast address since it was added to this table. Note that this number does not include frames directed to the broadcast address.')
olTRTrafTopNTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10), )
if mibBuilder.loadTexts: olTRTrafTopNTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNTable.setDescription('A list of Token Ring station traffic statistics entries indexed by olTRTrafTopNNetID, olTRTrafTopNStatistic, and olTRTrafTopNIndex. For each Network, the list contains 7 logical sublists - one for each statistic. Each of the sublists has olTRTrafControlTopNTotalStations entries. For eack Network, the table has 7 times olTRTrafTopNControlTotalStations entries. All of the counters in this table reflect activity during the last completed TopN data collection period (olTRTrafControlTopNInterval seconds). Note that this table will contain no entries if a TopN data collection period has not yet completed since olTRTrafControlTopNInterval was modified or since startup. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafTopNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRTrafTopNNetID"), (0, "CHIPCOM-MIB", "olTRTrafTopNStatistic"), (0, "CHIPCOM-MIB", "olTRTrafTopNIndex"))
if mibBuilder.loadTexts: olTRTrafTopNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNEntry.setDescription('A collection of station statistics for a particular station that has been discovered on an interface of this device. Note that all of the frame and octet counters in this table include error frames that have valid length; all octet counters exclude framing bits but include FCS octets.')
olTRTrafTopNNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafTopNStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("olTRTrafTopNInFrames", 1), ("olTRTrafTopNOutFrames", 2), ("olTRTrafTopNInOctets", 3), ("olTRTrafTopNOutOctets", 4), ("olTRTrafTopNOutErrors", 5), ("olTRTrafTopNOutBroadcastFrames", 6), ("olTRTrafTopNOutMulticastFrames", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafTopNStatistic.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNStatistic.setDescription('The object representing the statistic for each station that this portion of the olTRTrafTopNTable is sorted on.')
olTRTrafTopNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNIndex.setDescription('An index that uniquely identifies an entry in the olTRTrafTopN table among those in the same network and for the same olTRTrafTopNStatistic. This index is between 1 and N, where N is the value of olTRTrafControlTopNTotalStations. Increasing values of olTRTrafTopNIndex shall be assigned to entries with decreasing values of the object referenced by olTRTrafTopNStatistic.')
olTRTrafTopNAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNAddress.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNAddress.setDescription('The physical address of this station.')
olTRTrafTopNSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 254, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("remote-ring", 254), ("external", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSlotIndex.setDescription('The slot number of the station with this address. Addresses with a slot value of remote-ring(254) are not in this ring. Addresses with a slot value of external(255) are not in this concentrator.')
olTRTrafTopNPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNPortIndex.setDescription("The port number within olTRTrafTopNSlotIndex's slot that received this address. If olTRTrafTopNSlotIndex has a value of remote-ring(254), then the port address will be 254. If olTRTrafTopNSlotIndex has a value of external(255), then the port address will be 255.")
olTRTrafTopNInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNInFrames.setDescription('The number of frames transmitted to this address during the last TopN data collection period.')
olTRTrafTopNOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutFrames.setDescription('The number of frames transmitted by this address during the last TopN data collection period.')
olTRTrafTopNInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNInOctets.setDescription('The number of octets transmitted to this address during the last TopN data collection period.')
olTRTrafTopNOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutOctets.setDescription('The number of octets transmitted by this address during the last TopN data collection period.')
olTRTrafTopNOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutErrors.setDescription('The number of error frames transmitted by this address during the last TopN data collection period. Only isolating errors (LineErrors, BurstErrors, ACErrors, InternalErrors, and AbortErrors) and CongestionErrors are counted.')
olTRTrafTopNOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutBroadcastFrames.setDescription('The number of frames transmitted by this address that were directed to the broadcast address during the last TopN data collection period.')
olTRTrafTopNOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNOutMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNOutMulticastFrames.setDescription('The number of frames transmitted by this address that were directed to a multicast address during the last TopN data collection period. Note that this number does not include frames directed to the broadcast address.')
olTRTrafTopNSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11), )
if mibBuilder.loadTexts: olTRTrafTopNSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryTable.setDescription('A list containing information from olTRTrafTopNTable provided for the convenience of network management stations that wish to obtain this information in condensed form.')
olTRTrafTopNSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olTRTrafTopNSummaryNetID"), (0, "CHIPCOM-MIB", "olTRTrafTopNSummaryStatistic"), (0, "CHIPCOM-MIB", "olTRTrafTopNSummaryIndex"))
if mibBuilder.loadTexts: olTRTrafTopNSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryEntry.setDescription('A segment of the Top N list for a particular statistic.')
olTRTrafTopNSummaryNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryNetID.setDescription('The network index that uniquely identifies this network. One of token-ring-1 through token-ring-7 or isolated.')
olTRTrafTopNSummaryStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("olTRTrafTopNSummaryInFrames", 1), ("olTRTrafTopNSummaryOutFrames", 2), ("olTRTrafTopNSummaryInOctets", 3), ("olTRTrafTopNSummaryOutOctets", 4), ("olTRTrafTopNSummaryOutErrors", 5), ("olTRTrafTopNSummaryOutBroadcastFrames", 6), ("olTRTrafTopNSummaryOutMulticastFrames", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olTRTrafTopNSummaryStatistic.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryStatistic.setDescription('The object representing the statistic for each station that this portion of the olTRTrafTopNSummaryTable is sorted on.')
olTRTrafTopNSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryIndex.setDescription('An index that uniquely identifies an entry in the olTRTrafTopNSummary table among those in the same network and for the same olTRTrafTopNSummaryStatistic. The number of entries for this portion of olTRTrafTopNSummaryTable is number of entries for the corresponding portion of olTRTrafTopNTable divided by 12 (rounded up to the next integer).')
olTRTrafTopNSummaryStations = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3, 11, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olTRTrafTopNSummaryStations.setStatus('mandatory')
if mibBuilder.loadTexts: olTRTrafTopNSummaryStations.setDescription('A concatonated list of (up to 12) MAC addresses, their associated slot and port, and a statistic value for traffic associated with stations on the ring. Each entry has 36 octets. The first 6 octets are the MAC address. The 7th octet is the slot ID (or 255 if it is external to the concentrator or 254 if it is on a remote ring). The 8th is the port ID (or 255 if it is external to the concentrator or 254 if it is on a remote ring). The 9th through 36th octets contain the values of the statistics olTRTrafTopNInFrames, olTRTrafTopNOutFrames, olTRTrafTopNInOctets, olTRTrafTopNOutOctets, olTRTrafTopNOutErrors, olTRTrafTopNOutBroadcastFrames, and olTRTrafTopNOutMulticastFrames. Each statistic is represented in 4 octets, most significant octet first. The stations are in order of decreasing values of the statistic referenced by olTRTrafTopNStatistic.')
olFDDIStatsModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2), )
if mibBuilder.loadTexts: olFDDIStatsModTable.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModTable.setDescription('A table of statistical information counted for each module in each FDDI network.')
olFDDIStatsModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olFDDIStatsModSlotIndex"))
if mibBuilder.loadTexts: olFDDIStatsModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModEntry.setDescription('A list of statistical information for each module on each FDDI network in the concentrator.')
olFDDIStatsModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModSlotIndex.setDescription('The slot number that contains this module.')
olFDDIStatsModMgtRcvErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModMgtRcvErrs.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModMgtRcvErrs.setDescription('The number of errors encountered while receiving data on the Management Channel.')
olFDDIStatsModMgtXmitErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModMgtXmitErrs.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModMgtXmitErrs.setDescription('The number of errors encountered while transmitting data on the Management Channel.')
olFDDIStatsModBackplaneErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModBackplaneErrs.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModBackplaneErrs.setDescription('The number of errors while receiving and transmitting network data on the backplane.')
olFDDIStatsModPllUnlockErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModPllUnlockErrs.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModPllUnlockErrs.setDescription('The number of times the phased lock loop on the backplane network data channel was lost.')
olFDDIStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3), )
if mibBuilder.loadTexts: olFDDIStatsPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortTable.setDescription('A table of statistical information counted for each Port in each FDDI network.')
olFDDIStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olFDDIStatsPortSlotIndex"), (0, "CHIPCOM-MIB", "olFDDIStatsPortIndex"))
if mibBuilder.loadTexts: olFDDIStatsPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortEntry.setDescription('A list of statistical information for each Port on each FDDI network in the concentrator.')
olFDDIStatsPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortSlotIndex.setDescription('The slot number that contains this Port.')
olFDDIStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortIndex.setDescription('The Port number of this port')
olFDDIStatsPortLCTFailCts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLCTFailCts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortLCTFailCts.setDescription('The count of the consecutive times the link confidence test (LCT) has failed during connection management. Once the connection has been established, the count is zeroed. (refer to ANSI 9.4.1).')
olFDDIStatsPortLerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLerEstimate.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortLerEstimate.setDescription('A long term average link error rate. It ranges from 10**-4 to 10**-15 and is reported as the absolute value of the exponent of the estimate (the larger the number, the smaller the value).')
olFDDIStatsPortLemRejectCts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLemRejectCts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortLemRejectCts.setDescription('A link error monitoring count of the times that a link has been removed from the ring due to the LerCutOff threshold being exceeded.')
olFDDIStatsPortLemCts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLemCts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortLemCts.setDescription("The aggregate link error monitor error count, set to zero only on station power up. This variable's long term rate average is lerEstimate.")
olFDDInetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4), )
if mibBuilder.loadTexts: olFDDInetStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsTable.setDescription('A table of statistical information counted for each FDDI network in the concentrator')
olFDDInetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olFDDInetStatsNetID"))
if mibBuilder.loadTexts: olFDDInetStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsEntry.setDescription('A list of statistical information for each FDDI network in the concentrator.')
olFDDInetStatsNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 16, 17, 18, 19))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsNetID.setDescription('The network index that uniquely identifies this network. One of isolated, fddi-1, fddi-2, fddi-3, or fddi-4.')
olFDDInetStatsRingOpCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsRingOpCounts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsRingOpCounts.setDescription('The number times the ring transitioned to operational.')
olFDDInetStatsFrameCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsFrameCounts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsFrameCounts.setDescription('Frame_Ct (refer to ANSI MAC 2.2.1).')
olFDDInetStatsErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsErrorCounts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsErrorCounts.setDescription('Error_Ct (refer to ANSI MAC 2.2.1).')
olFDDInetStatsLostCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsLostCounts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsLostCounts.setDescription('Lost_Ct (refer to ANSI MAC 2.2.1).')
olFDDInetStatsFrameErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsFrameErrorRatio.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsFrameErrorRatio.setDescription('This attribute is the actual ratio, ((delta snmpFddiMACLostCt + delta snmpFddiMACErrorCt) / (delta snmpFddiMACFrameCt + delta snmpFddiMACLostCt)) x 2**16.')
olGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1), )
if mibBuilder.loadTexts: olGroupPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupPortTable.setDescription('A list of groups that each port is in. Each port can can be in 0, 1, or many groups.')
olGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olGroupPortSlotIndex"), (0, "CHIPCOM-MIB", "olGroupPortIndex"))
if mibBuilder.loadTexts: olGroupPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupPortEntry.setDescription('The groups corresponding to a particular port.')
olGroupPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupPortSlotIndex.setDescription('The slot number that contains this port.')
olGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupPortIndex.setDescription('The port number within this slot. Logical ports can not be put into groups.')
olGroupPortGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupPortGroupID.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupPortGroupID.setDescription('The group(s) to which the port has been assigned.')
olGroupSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2), )
if mibBuilder.loadTexts: olGroupSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSummaryTable.setDescription('A table of condensed group information listing all the ports in each group.')
olGroupSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olGroupSummaryGroupID"), (0, "CHIPCOM-MIB", "olGroupSummaryIndex"))
if mibBuilder.loadTexts: olGroupSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSummaryEntry.setDescription('The summary of all the ports in a particular group.')
olGroupSummaryGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("group-1", 1), ("group-2", 2), ("group-3", 3), ("group-4", 4), ("group-5", 5), ("group-6", 6), ("group-7", 7), ("group-8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupSummaryGroupID.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSummaryGroupID.setDescription('The group to which the ports have been assigned. A port can be in one or more groups.')
olGroupSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupSummaryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSummaryIndex.setDescription('The index into the summary array. Up to 256 ports will be shown in olGroupSummaryPorts for each value in this entry.')
olGroupSummaryPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olGroupSummaryPorts.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSummaryPorts.setDescription('A condensed list of all the ports in this group. The summary is in the format: Slotx PortX SlotY PortY ...')
olGroupSet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3))
olGroupSetAction = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add-ports", 1), ("clear-ports", 2), ("set-admin-state", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetAction.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSetAction.setDescription('This object specifies the action that we apply on a group. add-ports(1) adds port(s) to a group, clear-ports(2) clears (delete) port(s) from a group, and set-admin-state sets the Admin State of the group.')
olGroupSetGroupID = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("group-1", 1), ("group-2", 2), ("group-3", 3), ("group-4", 4), ("group-5", 5), ("group-6", 6), ("group-7", 7), ("group-8", 8), ("all-groups", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetGroupID.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSetGroupID.setDescription('A group index that uniquely identifies this group. A port can be in zero, one, or more groups.')
olGroupSetSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSetSlotIndex.setDescription('This object specifies the slot number of the port(s) that are to be added/cleared to/from the group. This object should be set whenever add-ports(1) or clear-ports(2) are selected for olGroupSetAction. Value 254 refers to all non-existing ports, and value 255 refers to all slots which are only valid when olGroupSetAction is clear-ports(2).')
olGroupSetPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSetPortIndex.setDescription('This object specifies the port number of the port(s) that are to be added/cleared to/from the group. This object should be set whenever add-ports(1) or clear-ports(2) are selected for olGroupSetAction. Value 255 refers to all ports.')
olGroupSetAdminState = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupSetAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: olGroupSetAdminState.setDescription('This object specifies the Admin State that all the ports in the group defined by olGroupSetGroupID should be set to. This object should be set whenever set-admin-state(3) is selected for olGroupSetAction.')
olThreshTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshTotalEntries.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshTotalEntries.setDescription('The number of entries currently in olThreshTable.')
olThreshMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshMaxEntries.setDescription('The maximum number of entries in olThreshTable supported by this agent.')
olThreshLastCreatedIndex = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshLastCreatedIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshLastCreatedIndex.setDescription('The index of the last entry in olThreshTable created via index 255 (see olThreshMode). If none, this value will be zero.')
olThreshAllMode = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshAllMode.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshAllMode.setDescription('Provides the management station with a convenient way to set olThreshMode for all of the entries in ThreshTable. Setting olThreshAllMode to enable(1) or disable(2) will not cause new entries to be created; this will only affect entries that have presiously been created. Getting olThreshAllMode will always yield clear(3).')
olThreshTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2), )
if mibBuilder.loadTexts: olThreshTable.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshTable.setDescription('A list of thresholding entries.')
olThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "olThreshIndex"))
if mibBuilder.loadTexts: olThreshEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshEntry.setDescription('A collection of variables for controlling and monitoring a specific threshold.')
olThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshIndex.setDescription("An index that uniquely identifies an entry in the olThresh table. The number of entries in olTRThreshTable is olThreshTotalEntries. A new entry is created when a value is written to any object within the entry. An entry is removed when olThreshMode is set to clear(3). Index 255 references a 'pseudo entry' that allows the management station to create a new entry without having to search for a clear entry. When olThreshMode for entry 255 is set to disable or enable, if there is no available (clear) entry, then the SNMP set-response will indicate a bad value error, otherwise the agent does the following: - set the value of olThreshLastCreatedIndex to the index of the available entry - copy the values currently in entry 255 to the available entry - clear out entry 255.")
olThreshMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshMode.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshMode.setDescription('The mode for this threshold. enable(1) indicates that this entry is in use and thresholding will be done. disable(2) indicates that this entry is in use but will no thresholding will be done. Setting olThreshMode to clear(3) will cause this entry to be removed from the table.')
olThreshDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshDescription.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshDescription.setDescription('Description of the threshold to be sent with the chipAboveThreshold trap.')
olThreshObjectIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshObjectIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshObjectIdentifier.setDescription('The object identifier that specifies the statistic to be thresholded. The statistic to be thresholded can be specified either by setting olThreshObjectIdentifier or by setting values of the olThreshStat group of variables. When olThreshObjectIdentifier is set, the agent changes the values of the olThreshStat group of variables to refer to the new statistic to be thresholded. Similarly, when a olThreshStat variable is set, the agent changes olThreshObjectIdentifier to refer to the new statistic to be thresholded. A null object identifier (0.0) is used when no statistic is specified.')
olThreshStatCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("network", 2), ("port", 3), ("station", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatCategory.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshStatCategory.setDescription('Specifies the category of statistic to be thresholded. When olThreshStatCategory is network(2) or station(4), olThreshStatNetID may also be specified. When olThreshStatCategory is station(4), olThreshStatStation must be specified. When olThreshStatCategory is port(3), olThreshStatSlotIndex and olThreshStatPortIndex must be specified.')
olThreshStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("frames", 2), ("octets", 3), ("broadcast-frames", 4), ("multicast-frames", 5), ("error-frames", 6), ("tr-net-soft-errors", 7), ("tr-net-hard-errors", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatType.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshStatType.setDescription('Specifies the type of statistic to be thresholded. error-frames(6) is valid only when olThreshStatCategory is port(3) or station(4). tr-net-soft-errors(7) or tr-net-hard-errors(8) is valid only when olThreshStatCategory is network(2). Note that tr-net-soft-errors(7) and tr-net-hard-errors(8) refer to dot5StatsSoftErrors and dot5StatsHardErrors, respectively. The other choices refer for items in the olTRTraf tables.')
olThreshStatNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10, 11, 12, 13, 14, 15, 255))).clone(namedValues=NamedValues(("other", 1), ("isolated", 2), ("token-ring-1", 9), ("token-ring-2", 10), ("token-ring-3", 11), ("token-ring-4", 12), ("token-ring-5", 13), ("token-ring-6", 14), ("token-ring-7", 15), ("agent-network", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshStatNetID.setDescription('When olThreshStatCategory is network(2) or station(4), specifies the network of statistic to be thresholded. If the agent is capable of collecting statistics only for the network that it is attached to, olThreshStatNetID can be set to agent-network(255); the agent will change olThreshStatNetID to reflect the network that the agent is currently attached to. If olThreshStatType is tr-net-soft-errors(7) or tr-net-hard-errors(8) the agent will change olThreshStatNetID to other(1).')
olThreshStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshStatSlotIndex.setDescription('When olThreshStatCategory is port(3), specifies the slot index of the port of statistic to be thresholded.')
olThreshStatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshStatPortIndex.setDescription('When olThreshStatCategory is port(3), specifies the port index of the port of statistic to be thresholded.')
olThreshStatStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshStatStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshStatStationAddr.setDescription('When olThreshStatCategory is station(4), specifies the MAC address of the station of statistic to be thresholded.')
olThreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshInterval.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshInterval.setDescription('Specifies the length of the thresholding period in seconds. Minimum length is 5 seconds; maximum is 86400 seconds (24 hours).')
olThreshCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delta-above", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshCondition.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshCondition.setDescription('Specifies the type of conditional comparison for the threshold.')
olThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshValue.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshValue.setDescription('At the end of each thresholding interval (olThreshInterval seconds), olThreshCurrentValue is compared against olThreshValue (unsigned). When olThreshType is delta-above(1): If olThreshStatus is valid(4), and olThreshCurrentValue is above olThreshValue, and olThreshMode is enabled, then a chipAboveThreshold trap will be sent. Another chipAboveThreshold trap will not be sent until olThreshCurrentValue drops to less than or equal to olThreshValue and then again exceeds it.')
olThreshCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshCurrentValue.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshCurrentValue.setDescription('When olThreshType is delta-exceed(1): The most recent delta value of olThreshStatObjectIdentifier (i.e. value of olThreshStatObjectIdentifier at the end of the interval minus the value of olThreshStatObjectIdentifier at the beginning of the interval). If olThreshStatus is not valid(4), olThreshCurrentValue will be 0.')
olThreshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-statistic-specified", 1), ("statistic-not-accessible", 2), ("not-yet-available", 3), ("valid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshStatus.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshStatus.setDescription('When olThreshType is delta-exceed(1): If olThreshStatObjectIdentifier has not yet been specified, olThreshStatus will be no-statistic-specified(1). If the first interval has not yet completed, olThreshStatus will be not-yet-available(2). If object referenced by olThreshStatObjectIdentifier is not accessible, olThreshStatus will be not-accessible(3). Otherwise olThreshStatus will be valid(4).')
olThreshTimeSinceLastTriggered = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olThreshTimeSinceLastTriggered.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshTimeSinceLastTriggered.setDescription('Time in TimeTicks that has elapsed since a chipAboveThreshold trap associated with this ThreshEntry was last sent. If never sent, this value shall be zero.')
olThreshActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("trap-only", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshActionType.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshActionType.setDescription('The action to be performed when the threshold is triggered.')
olThreshActionData = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshActionData.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshActionData.setDescription('Additional information to be sent with the chipAboveThreshold trap. Provided for use by the network management station (NMS) - not interpreted by the agent. A network management station (NMS) could use olThreshActionData to specify an action to be performed by the NMS when the chipAboveThreshold trap is received.')
olThreshActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olThreshActionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: olThreshActionPriority.setDescription('The priority for this entry. Provided for use by the network management station (NMS) - not interpreted by the agent.')
chipTTYNumber = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTTYNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYNumber.setDescription('The number of terminal ports on this agent product.')
chipTTYTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 5, 2), )
if mibBuilder.loadTexts: chipTTYTable.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYTable.setDescription('A table of TTY specific information associated with this agent.')
chipTTYEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1), ).setIndexNames((0, "CHIPCOM-MIB", "chipTTYIndex"))
if mibBuilder.loadTexts: chipTTYEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYEntry.setDescription('A profile of a specific TTY interface associated with this agent.')
chipTTYIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTTYIndex.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYIndex.setDescription('The TTY to which this entry refers.')
chipTTYBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(110, 300, 1200, 2400, 4800, 9600, 19200, 38400))).clone(namedValues=NamedValues(("one-hundred-ten", 110), ("three-hundred", 300), ("twelve-hundred", 1200), ("twenty-four-hundred", 2400), ("forty-eight-hundred", 4800), ("ninety-six-hundred", 9600), ("nineteen-two-hundred", 19200), ("thirty-eight-thousand-four-hundred", 38400)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYBaud.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYBaud.setDescription('The baud rate for this TTY. It should be noted that all serial ports do not support all of the above baud rates.')
chipTTYParity = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("odd", 1), ("even", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYParity.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYParity.setDescription('The parity setting for this TTY.')
chipTTYStop = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYStop.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYStop.setDescription('The number of stop bits for this TTY.')
chipTTYData = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("seven", 7), ("eight", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYData.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYData.setDescription('The number of data bits for this TTY.')
chipTTYTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYTimeout.setDescription('The number of minutes to wait before this agent logs out an inactive login session on this TTY. NOTE: In some implementations, this is a single variable that is used by all of the terminal and telnet sessions.')
chipTTYPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYPrompt.setDescription('The terminal prompt to display on this TTY. NOTE: In some implementations, this is a single variable that is used by all of the terminal and telnet sessions.')
chipTTYDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asserted", 1), ("deasserted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYDTR.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYDTR.setDescription('This value dictates the behavior of the RS-232 Data Terminal Ready (DTR) signal at the time a session ends due to a logout, timeout, or shutdown. This is used by some modems as an indication that they should hangup. This variable is only support if the RS-232 port has a DTR signal.')
chipTTYTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYTerminalType.setStatus('mandatory')
if mibBuilder.loadTexts: chipTTYTerminalType.setDescription('A string which indicates the type of terminal that is attached to the serial port. It should be noted that the string is passed to a telnet server whenever the server issues the IAC DO TERMINAL-TYPE command (see rfc884).')
chipTFTPStart = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftpNoTransfer", 1), ("tftpGet", 2), ("tftpPut", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPStart.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPStart.setDescription('Setting chipTFTPStart to tftpGet(2) initiates a file transfer to the agent (download); tftpPut(3) initiates a file transfer to the server (upload).')
chipTFTPSlot = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("agent-slot", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPSlot.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPSlot.setDescription('The slot number of the module that is to be involved in the TFTP transfer with the TFTP server (chipTFTPIpAddress).')
chipTFTPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPIpAddress.setDescription('The IP Address of the TFTP server.')
chipTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPFileName.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPFileName.setDescription('The file name of the file to retrieve (tftpGet), or the name of the file to create (tftpPut). ')
chipTFTPFileType = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flashCode", 1), ("bootCode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPFileType.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPFileType.setDescription('The type of file image to upload/download. The file type indicates to the agent what kind of file it is receiving. flashCode(1) indicates a code upgrade of the operational proms. bootCode(2) indicates a code upgrade of the boot proms.')
chipTFTPResult = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("clear", 1), ("xferInProgress", 2), ("okay", 3), ("otherTFTPError", 4), ("fileNotFound", 5), ("accessError", 6), ("diskFull", 7), ("illegalTFTPOperation", 8), ("invalidTFTPTransactionID", 9), ("noResponse", 10), ("invalidDownloadKey", 11), ("invalidSlot", 12), ("invalidNetwork", 13), ("fepromErase", 14), ("fepromProg", 15), ("xferError", 16), ("decodeError", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTFTPResult.setStatus('mandatory')
if mibBuilder.loadTexts: chipTFTPResult.setDescription('The result of the last TFTP operation.')
chipDownloadUDKSerial = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipDownloadUDKSerial.setStatus('mandatory')
if mibBuilder.loadTexts: chipDownloadUDKSerial.setDescription('A string representing the serial number of the Upgrade Distribution Kit.')
chipDownloadKey = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipDownloadKey.setStatus('mandatory')
if mibBuilder.loadTexts: chipDownloadKey.setDescription('The key code provided by your VAR. Available by calling technical support at +1 508 460 6195.')
chipDownloadDateTime = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipDownloadDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: chipDownloadDateTime.setDescription('The date of the last successful download in the format hh:mm day DD Mon YY')
chipHello = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,1))
if mibBuilder.loadTexts: chipHello.setDescription('A chipHello trap is sent every minute by an agent with the hello trap enabled. The hello trap will discontinue being sent when either the agent receives an authenticate SNMP request, or after 255 minutes.')
chipSlotDown = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,2)).setObjects(("CHIPCOM-MIB", "olModSlotIndex"))
if mibBuilder.loadTexts: chipSlotDown.setDescription('This trap indicates that the module in the indicated slot is down. Usually, this trap is sent when the module has been removed. Sometimes, this trap is sent when management communications with this module have been broken. In this case, it may not be possible to distinguish between a removed and a failed module. The module type (olModType) and the module description (olModDescr) are also provided in this case.')
chipSlotUp = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,3)).setObjects(("CHIPCOM-MIB", "olModSlotIndex"))
if mibBuilder.loadTexts: chipSlotUp.setDescription('This trap indicates that a blade in the indicated slot is up. Usually, this trap is sent when the module is inserted into the hub. Sometimes, this trap is sent when management communications have been restored to a module where they had previously been broken. In this case, it may not be possible to distinguish between a module that has just be inserted and a module that has just the. The module type (olModType) and the module description (olModDescr) are also provided in this case.')
chipEnvironment = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,4))
if mibBuilder.loadTexts: chipEnvironment.setDescription("A chipEnvironment trap indicates a change in the concentrator's environment has occurred. The variables supplied indicate what exactly changed.")
chipHardware = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,5))
if mibBuilder.loadTexts: chipHardware.setDescription('A chipHardware trap indicates that a soft hardware failure has been detected. An example of a soft hardware failure is too many writes to non-vatile storage. This is an indication to get the unit serviced.')
chipSoftware = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,6))
if mibBuilder.loadTexts: chipSoftware.setDescription('A chipSoftware trap indicates that a soft software failure has been detected. This is an indication to get the unit serviced.')
chipChange = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,7))
if mibBuilder.loadTexts: chipChange.setDescription('A chipChange trap is used to indicate that a configuration change has occurred. The actual variables that changed are included in the variables section of the PDU.')
chipFatal = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,8))
if mibBuilder.loadTexts: chipFatal.setDescription('A chipFatal trap is used to indicate that a fatal error has occurred. This is an indication to get the unit serviced.')
chipTrunkDown = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,9)).setObjects(("CHIPCOM-MIB", "olTrunkSlotIndex"), ("CHIPCOM-MIB", "olTrunkIndex"), ("CHIPCOM-MIB", "olTrunkAdminState"), ("CHIPCOM-MIB", "olTrunkStatus"))
if mibBuilder.loadTexts: chipTrunkDown.setDescription("A chipTrunkDown trap indicates that trunk's status has changed to an error condition. Multiple chipTrunkDown traps may be sent if the trunk's status changes from one error to another.")
chipTrunkUp = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,10)).setObjects(("CHIPCOM-MIB", "olTrunkSlotIndex"), ("CHIPCOM-MIB", "olTrunkIndex"), ("CHIPCOM-MIB", "olTrunkAdminState"), ("CHIPCOM-MIB", "olTrunkStatus"))
if mibBuilder.loadTexts: chipTrunkUp.setDescription("A chipTrunkUp trap indicates that a trunk's status has changed to a non-error (okay or warning) condition.")
chipPortDown = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,11)).setObjects(("CHIPCOM-MIB", "olPortSlotIndex"), ("CHIPCOM-MIB", "olPortIndex"), ("CHIPCOM-MIB", "olPortAdminState"), ("CHIPCOM-MIB", "olPortStatus"))
if mibBuilder.loadTexts: chipPortDown.setDescription("A chipPortDown trap indicates that a port's status has changed to an error condition. Multiple chipPortDown traps may be sent if the port's status changes from one error to another.")
chipPortUp = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,12)).setObjects(("CHIPCOM-MIB", "olPortSlotIndex"), ("CHIPCOM-MIB", "olPortIndex"), ("CHIPCOM-MIB", "olPortAdminState"), ("CHIPCOM-MIB", "olPortStatus"))
if mibBuilder.loadTexts: chipPortUp.setDescription("A chipPortUp trap indicates that a port's status has changed to a non-error (okay or warning) condition.")
chipPing = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,13)).setObjects(("CHIPCOM-MIB", "chipEchoAddr"), ("CHIPCOM-MIB", "chipEchoNumber"), ("CHIPCOM-MIB", "chipEchoResponseCounts"))
if mibBuilder.loadTexts: chipPing.setDescription('A chipPing trap is sent after the SNMP initiated PING command is completed. After the last echo request packet is sent, this trap is sent indicating the ping address, the number of requests sent, and the number of responses received at the time the trap was generated.')
chipAboveThreshd = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,14))
if mibBuilder.loadTexts: chipAboveThreshd.setDescription('A chipAboveThreshd trap indicates that a Counter or Gauge variable has exceeded its threshd. The variable which is above its threshd is the only variable in the varBind list. Its value is taken at the time the threshd calculation is performed and therefore may be greater than the actual threshd value. Another above threshd trap will not be sent until a below threshd trap is sent.')
chipBelowThreshd = NotificationType((1, 3, 6, 1, 4, 1, 49) + (0,15))
if mibBuilder.loadTexts: chipBelowThreshd.setDescription('A chipBelowThreshd trap indicates that a Counter or Gauge variable had exceeded its threshd but is now below its threshd. The variable which is below its threshd is the only variable in the varBind list. Its value is taken at the time the threshd calculation is performed and therefore may be less than the actual threshd value. Another below threshd trap will not be sent until an above threshd trap is sent.')
mibBuilder.exportSymbols("CHIPCOM-MIB", ol51nnMMGTModTable=ol51nnMMGTModTable, ol51nnMTPPLPortAdminState=ol51nnMTPPLPortAdminState, chipTTYIndex=chipTTYIndex, olTRnetMapSummary32Stations=olTRnetMapSummary32Stations, olThreshStatus=olThreshStatus, ol53nnMFIBSTModSlotIndex=ol53nnMFIBSTModSlotIndex, ol51nnMAUIMPortDipSQETest=ol51nnMAUIMPortDipSQETest, ol52nnMMGTTrunkIndex=ol52nnMMGTTrunkIndex, ol52nnMFRModEntry=ol52nnMFRModEntry, ol51nnMTPPortDipSquelch=ol51nnMTPPortDipSquelch, olEnetStatsTable=olEnetStatsTable, ol52nnMFR=ol52nnMFR, ol51nnMAUIMPortDipHalfStep=ol51nnMAUIMPortDipHalfStep, olEnetStatsModFCSErrors=olEnetStatsModFCSErrors, ol51nnMTSModTCPPort=ol51nnMTSModTCPPort, chipTrunkDown=chipTrunkDown, olTRTrafFrames512to1023Octets=olTRTrafFrames512to1023Octets, ol5208MTPTrunkDipCableMon=ol5208MTPTrunkDipCableMon, ol52nnMFRPortSlotIndex=ol52nnMFRPortSlotIndex, olTRTrafControlTopNInterval=olTRTrafControlTopNInterval, ol51nnMAUIFPortIndex=ol51nnMAUIFPortIndex, olTRnetStatsStationCongestionErrors=olTRnetStatsStationCongestionErrors, olModNetwork=olModNetwork, ol51nnBEEPortTable=ol51nnBEEPortTable, ol52nnMFRPortStationType=ol52nnMFRPortStationType, ol53nnMSTPPortEntry=ol53nnMSTPPortEntry, olTRnetStatsFrameCopiedErrors=olTRnetStatsFrameCopiedErrors, ol51nnMFIBPortAdminState=ol51nnMFIBPortAdminState, olTRTrafFrames128to255Octets=olTRTrafFrames128to255Octets, ol51nnMBNCPortDipTermination=ol51nnMBNCPortDipTermination, ol51nnRESModSlotIndex=ol51nnRESModSlotIndex, ol51nnMFBModSlotIndex=ol51nnMFBModSlotIndex, ol53nnMFIBSTPortPCWithhold=ol53nnMFIBSTPortPCWithhold, ol52nnBTTTrunkTable=ol52nnBTTTrunkTable, olTRTrafFrames18to63Octets=olTRTrafFrames18to63Octets, olTRTrafStationOutBroadcastFrames=olTRTrafStationOutBroadcastFrames, olTRTrafFramesGreaterThan18000Octets=olTRTrafFramesGreaterThan18000Octets, ol53nnMMGTModDownStreamModule=ol53nnMMGTModDownStreamModule, olModSummaryEntry=olModSummaryEntry, ol51nnIxPortEntry=ol51nnIxPortEntry, ol51nnMTPLModSlotIndex=ol51nnMTPLModSlotIndex, chipGenSerial=chipGenSerial, ol51nnMTPPortLinkInteg=ol51nnMTPPortLinkInteg, ol51nnMTSModEntry=ol51nnMTSModEntry, olTRnetStatsStationFrameCopiedErrors=olTRnetStatsStationFrameCopiedErrors, olFDDIStatsModMgtXmitErrs=olFDDIStatsModMgtXmitErrs, ol51nnRESModProtocols=ol51nnRESModProtocols, ol51nnMFBPPortDipLLW=ol51nnMFBPPortDipLLW, olEnetStatsPortIndex=olEnetStatsPortIndex, olTRTrafMulticastFrames=olTRTrafMulticastFrames, ol52nnMTPTrunkIndex=ol52nnMTPTrunkIndex, ol51nnMUTPModDipNetwork=ol51nnMUTPModDipNetwork, chipDownloadDateTime=chipDownloadDateTime, olTRTrafTopNOutFrames=olTRTrafTopNOutFrames, ol52nnMMGTModSlotIndex=ol52nnMMGTModSlotIndex, chipTTYBaud=chipTTYBaud, olEnetMapOctets=olEnetMapOctets, ol51nnMAUIMModTable=ol51nnMAUIMModTable, olEnetStatsModAlignmentErrors=olEnetStatsModAlignmentErrors, olTRnetStatsLastBeaconNAUN=olTRnetStatsLastBeaconNAUN, olEnet=olEnet, olTrunkNeighbor=olTrunkNeighbor, ol51nnRESModTable=ol51nnRESModTable, ol51nnMFBPModTable=ol51nnMFBPModTable, ol53nnMFBMICModUpStreamModule=ol53nnMFBMICModUpStreamModule, olModNetworkType=olModNetworkType, olEnetStatsPortNetID=olEnetStatsPortNetID, chipEchoStart=chipEchoStart, olTRTrafTopNEntry=olTRTrafTopNEntry, olThreshIndex=olThreshIndex, ol51nnMFLPortEntry=ol51nnMFLPortEntry, olAgentsMySlot=olAgentsMySlot, olTRTrafStationOutOctets=olTRTrafStationOutOctets, ol53nnMMGTModRingInfo=ol53nnMMGTModRingInfo, ol52nnMMGT=ol52nnMMGT, ol51nnMFBPPortIndex=ol51nnMFBPPortIndex, ol53nnMFBMICPortRemoteMACIndicated=ol53nnMFBMICPortRemoteMACIndicated, ol53nnMFIBSTModTable=ol53nnMFIBSTModTable, ol50nnMHCTLModSlotIndex=ol50nnMHCTLModSlotIndex, olTRnetStatsLineErrors=olTRnetStatsLineErrors, chipTTYData=chipTTYData, ol52nnMMGTModEntry=ol52nnMMGTModEntry, ol51nnMTPPLPortJabber=ol51nnMTPPLPortJabber, olFDDInetStatsEntry=olFDDInetStatsEntry, chipHello=chipHello, ol52nnMFRModTable=ol52nnMFRModTable, olThreshControl=olThreshControl, olFDDIStatsPortTable=olFDDIStatsPortTable, ol52nnMTPModDipCableImp=ol52nnMTPModDipCableImp, ol50nnMRCTLModClockStatus=ol50nnMRCTLModClockStatus, ol52nnMFRPortIndex=ol52nnMFRPortIndex, ol51nnMTPPortBuddyPort=ol51nnMTPPortBuddyPort, ol51nnIxPortDipNetwork=ol51nnIxPortDipNetwork, olTRnetStatsStationPortIndex=olTRnetStatsStationPortIndex, olTRTrafStationOutFrames=olTRTrafStationOutFrames, ol52nnBTTPortThroughput=ol52nnBTTPortThroughput, ol53nnMFBMICModDownStreamOperPath=ol53nnMFBMICModDownStreamOperPath, chipmib02=chipmib02, olNetSecurityMACSlotIndex=olNetSecurityMACSlotIndex, olTRnetStatsStationNAUNAddress=olTRnetStatsStationNAUNAddress, olTRTrafTopNIndex=olTRTrafTopNIndex, softwareGroup=softwareGroup, olEnetStatsPortRunts=olEnetStatsPortRunts, olFDDInetStatsFrameCounts=olFDDInetStatsFrameCounts, ol51nnMTPCLModSlotIndex=ol51nnMTPCLModSlotIndex, olGroupSet=olGroupSet, ol51nnMMGTModSlotIndex=ol51nnMMGTModSlotIndex, olEnetStatsFrameTooLongs=olEnetStatsFrameTooLongs, chipPortDown=chipPortDown, ol51nnRESPortDipNetwork=ol51nnRESPortDipNetwork, ol51nnMFPPortDipNetwork=ol51nnMFPPortDipNetwork, ol51nnMFPPortDipHipwr=ol51nnMFPPortDipHipwr, ol53nnMSTPTrunkTable=ol53nnMSTPTrunkTable, olTRTrafTopNOutErrors=olTRTrafTopNOutErrors, ol52nnMTPTrunkEntry=ol52nnMTPTrunkEntry, ol52nnMMGTPortEntry=ol52nnMMGTPortEntry, chipPing=chipPing, ol51nnMFIBPortIndex=ol51nnMFIBPortIndex, olTRTrafTopNSummaryStatistic=olTRTrafTopNSummaryStatistic, ol51nnMFIBPortTable=ol51nnMFIBPortTable, chipTTYTimeout=chipTTYTimeout, olGroupSummaryEntry=olGroupSummaryEntry, olTrunkStatus=olTrunkStatus, chipGenDiagnostics=chipGenDiagnostics, ol5208MTPTrunkDipAdminState=ol5208MTPTrunkDipAdminState, ol5208MTP=ol5208MTP, hardwareGroup=hardwareGroup, olModSummaryInfo=olModSummaryInfo, olTRnetStatsPortCongestionErrors=olTRnetStatsPortCongestionErrors, olFDDInetStatsFrameErrorRatio=olFDDInetStatsFrameErrorRatio, ol51nnMTSModIpAddress=ol51nnMTSModIpAddress, olModVendor=olModVendor, ol51nnMTPPortAdminState=ol51nnMTPPortAdminState, ol52nnBTTTrunkSlotIndex=ol52nnBTTTrunkSlotIndex, ol51nnMFPModTable=ol51nnMFPModTable, olEnetStatsFCSErrors=olEnetStatsFCSErrors, ol51nnMTPCLModAutoPartition=ol51nnMTPCLModAutoPartition, ol53nnMFBMICPortPCWithhold=ol53nnMFBMICPortPCWithhold, ol50nnMCTL=ol50nnMCTL, ol51nnMMGTModEntry=ol51nnMMGTModEntry, ol53nnMFIBSTModUpStreamModule=ol53nnMFIBSTModUpStreamModule, ol53nnMMGTModEntry=ol53nnMMGTModEntry, olTRnetStatsPortTotalStations=olTRnetStatsPortTotalStations, chipTTYStop=chipTTYStop, chipTTYNumber=chipTTYNumber, ol51nnMTPLPortDipAdminState=ol51nnMTPLPortDipAdminState, chipTFTPFileType=chipTFTPFileType, olEnetStatsModEntry=olEnetStatsModEntry, ol53nnMFIBST=ol53nnMFIBST, ol51nnMTPCLPortIndex=ol51nnMTPCLPortIndex, olTRnetMapSummaryLogicalState=olTRnetMapSummaryLogicalState, ol51nnMTPCLPortAdminState=ol51nnMTPCLPortAdminState, olTRTrafMacOctets=olTRTrafMacOctets, ol53nnMSTPPortPCWithhold=ol53nnMSTPPortPCWithhold, ol51nnMUTPPortDipLinkInteg=ol51nnMUTPPortDipLinkInteg, ol51nnMTPPortEntry=ol51nnMTPPortEntry, olTRTrafControlClear=olTRTrafControlClear, ol51nnMTSModProtocols=ol51nnMTSModProtocols, ol51nnMAUIMPortSQETest=ol51nnMAUIMPortSQETest, ol51nnMTPCLModConn1Network=ol51nnMTPCLModConn1Network, ol51nnMTPPLModSlotIndex=ol51nnMTPPLModSlotIndex, ol51nnMBNCPortDipGround=ol51nnMBNCPortDipGround, olThreshActionPriority=olThreshActionPriority, ol53nnMFIBSTPortIndex=ol53nnMFIBSTPortIndex, olNetSecurityMACMode=olNetSecurityMACMode, ol52nnMTPModRingSpeed=ol52nnMTPModRingSpeed, ol51nnMAUIMModEntry=ol51nnMAUIMModEntry, ol51nnMAUIF=ol51nnMAUIF, ol52nnMMGTTrunkEntry=ol52nnMMGTTrunkEntry, ol51nnMTSModStationAddr=ol51nnMTSModStationAddr, olNetDPDataPath=olNetDPDataPath, olTRTrafStationInFrames=olTRTrafStationInFrames, ol51nnMTPModSlotIndex=ol51nnMTPModSlotIndex, ol51nnMFBP=ol51nnMFBP, ol51nnIxPortSTAPState=ol51nnIxPortSTAPState, chipTFTP=chipTFTP, ol51nnMMGTPortTable=ol51nnMMGTPortTable, chipGenVers=chipGenVers, olTRTrafFrames4096to8191Octets=olTRTrafFrames4096to8191Octets, olTRTrafFrames8192to18000Octets=olTRTrafFrames8192to18000Octets, ol53nnMMGTPortBSFlag=ol53nnMMGTPortBSFlag, olTRnetStatsTable=olTRnetStatsTable, chipSoftware=chipSoftware, ol52nnMFRTrunkCableMon=ol52nnMFRTrunkCableMon, ol53nnMSTPModUpStreamOperPath=ol53nnMSTPModUpStreamOperPath, ol51nnMMGTModStationAddr=ol51nnMMGTModStationAddr, ol53nnMFIBSTModUpStreamOperPath=ol53nnMFIBSTModUpStreamOperPath, ol52nnBTTModBridgeType=ol52nnBTTModBridgeType, ol51nnMUTPPortAdminState=ol51nnMUTPPortAdminState, ol52nnMFRTrunkIndex=ol52nnMFRTrunkIndex, olTRTrafTable=olTRTrafTable, olTRTrafTokenRotationTime=olTRTrafTokenRotationTime, olTrunkConnector=olTrunkConnector, ol51nnREE=ol51nnREE, ol53nnMFBMICModUpStreamOperPath=ol53nnMFBMICModUpStreamOperPath, ol52nnMMGTModMasterPriority=ol52nnMMGTModMasterPriority, olTRTrafTopNSummaryEntry=olTRTrafTopNSummaryEntry, ol53nnMFBMICPortIndex=ol53nnMFBMICPortIndex, ol52nnMTPModTable=ol52nnMTPModTable, ol51nnMTPPortDipAdminState=ol51nnMTPPortDipAdminState, olThreshStatPortIndex=olThreshStatPortIndex, ol5208MTPPortTable=ol5208MTPPortTable, ol53nnMMGTPortNeighbor=ol53nnMMGTPortNeighbor, olFDDIStatsModMgtRcvErrs=olFDDIStatsModMgtRcvErrs, olEnetMapEntry=olEnetMapEntry, olFDDInetStatsLostCounts=olFDDInetStatsLostCounts, ol5208MTPModEntry=ol5208MTPModEntry, ol53nnMFIBSTModRingInfo=ol53nnMFIBSTModRingInfo, ol52nnMFRPortEntry=ol52nnMFRPortEntry, olEnetStatsModMcastRcvdOks=olEnetStatsModMcastRcvdOks, olTRTrafControlLogicalLock=olTRTrafControlLogicalLock, ol52nnBTTPortSTAPState=ol52nnBTTPortSTAPState, olGroupSetPortIndex=olGroupSetPortIndex, olTRnetStatsPortLineErrors=olTRnetStatsPortLineErrors, ol51nnIxPortTable=ol51nnIxPortTable, ol51nnMTPCLModConn2Network=ol51nnMTPCLModConn2Network, chipGenTimeLastChanged=chipGenTimeLastChanged, olTRTrafFrames1024to2047Octets=olTRTrafFrames1024to2047Octets, ol51nnMAUIMPortBuddySlot=ol51nnMAUIMPortBuddySlot, ol52nnBTTPortMACAddress=ol52nnBTTPortMACAddress, ol52nnMMGTPortIpAddress=ol52nnMMGTPortIpAddress, ol51nnMFBModDipNetwork=ol51nnMFBModDipNetwork, ol5208MTPTrunkExtBcnRecovery=ol5208MTPTrunkExtBcnRecovery, olEnetStatsModOctetsRcvdOks=olEnetStatsModOctetsRcvdOks, ol50nnMRCTLModOperState=ol50nnMRCTLModOperState, chipTFTPStart=chipTFTPStart, ol53nnMFIBSTPortSlotIndex=ol53nnMFIBSTPortSlotIndex, olTRnetStatsACErrors=olTRnetStatsACErrors, ol53nnMMGTTrunkSlotIndex=ol53nnMMGTTrunkSlotIndex, olThreshAllMode=olThreshAllMode, olTRTrafPortNetID=olTRTrafPortNetID, midnight=midnight, ol51nnMFBModTable=ol51nnMFBModTable, ol51nnIxModDipPromDefaults=ol51nnIxModDipPromDefaults, ol51nnMTPLModTable=ol51nnMTPLModTable, ol51nnMTPCLPortDipLinkInteg=ol51nnMTPCLPortDipLinkInteg, olPortNetwork=olPortNetwork, olTRnetStatsStationTokenErrors=olTRnetStatsStationTokenErrors, olModDescr=olModDescr, ol51nnMUTPPortBuddySlot=ol51nnMUTPPortBuddySlot, ol51nnMTPModTable=ol51nnMTPModTable, ol51nnMTSModTable=ol51nnMTSModTable, ol52nnBTTModTable=ol52nnBTTModTable, ol51nnMAUIFModSlotIndex=ol51nnMAUIFModSlotIndex, ol51nnMTP=ol51nnMTP, olTRnetMapSummaryNetID=olTRnetMapSummaryNetID, ol51nnMAUIFPortBuddyPort=ol51nnMAUIFPortBuddyPort, ol51nnMAUIFPortSlotIndex=ol51nnMAUIFPortSlotIndex, chipSlotUp=chipSlotUp, ol51nnMFLPortDipAdminState=ol51nnMFLPortDipAdminState, ol53nnMFIBSTPortNeighbor=ol53nnMFIBSTPortNeighbor, ol52nnBTTModEntry=ol52nnBTTModEntry, ol51nnMAUIMPortCollision=ol51nnMAUIMPortCollision, ol5208MTPTrunkTable=ol5208MTPTrunkTable)
mibBuilder.exportSymbols("CHIPCOM-MIB", olGroupSetAdminState=olGroupSetAdminState, olFDDIStatsPortIndex=olFDDIStatsPortIndex, olTrunkIndex=olTrunkIndex, ol51nnMUTPPortSquelch=ol51nnMUTPPortSquelch, ol51nnMFIBPortBuddySlot=ol51nnMFIBPortBuddySlot, ol51nnMFPPortSlotIndex=ol51nnMFPPortSlotIndex, ol50nnMRCTLModTempStatus=ol50nnMRCTLModTempStatus, olTRTrafPortInOctets=olTRTrafPortInOctets, ol50nnMRCTLModSlotIndex=ol50nnMRCTLModSlotIndex, olTRTrafPortOutOctets=olTRTrafPortOutOctets, ol51nnMFIBPortBuddyPort=ol51nnMFIBPortBuddyPort, olTRnetStatsTotalPorts=olTRnetStatsTotalPorts, olEnetMapTime=olEnetMapTime, olTRnetStatsActivePorts=olTRnetStatsActivePorts, fmm=fmm, olTRTrafControlLastClearTime=olTRTrafControlLastClearTime, olAgentsMasterPriority=olAgentsMasterPriority, ol51nnRESPortIpAddress=ol51nnRESPortIpAddress, ol53nnMSTPPortBSFlag=ol53nnMSTPPortBSFlag, olModules=olModules, ol53nnMFBMICModSlotIndex=ol53nnMFBMICModSlotIndex, ol51nnMFLPortBuddySlot=ol51nnMFLPortBuddySlot, ol52nnMTPTrunkTable=ol52nnMTPTrunkTable, olTRTrafControlLogicalState=olTRTrafControlLogicalState, ol52nnMFRModRingSpeed=ol52nnMFRModRingSpeed, ol51nnMUTPModTable=ol51nnMUTPModTable, olTRnetStatsStationSlotIndex=olTRnetStatsStationSlotIndex, chipEnvironment=chipEnvironment, olGroupSetAction=olGroupSetAction, ol51nnMFIBModLLW=ol51nnMFIBModLLW, olThreshTotalEntries=olThreshTotalEntries, ol53nnMMGT=ol53nnMMGT, ol52nnMMGTTrunkSlotIndex=ol52nnMMGTTrunkSlotIndex, ol51nnMBNCModTable=ol51nnMBNCModTable, olModSummarySlotIndex=olModSummarySlotIndex, olTRnetStatsPortSlotIndex=olTRnetStatsPortSlotIndex, chipEchoSize=chipEchoSize, ol51nnMBNCPortEntry=ol51nnMBNCPortEntry, ol51nnREEModSlotIndex=ol51nnREEModSlotIndex, ol51nnMFBPModSlotIndex=ol51nnMFBPModSlotIndex, ol51nnBEEPortIndex=ol51nnBEEPortIndex, ol51nnMFPPortDipAdminState=ol51nnMFPPortDipAdminState, ol52nnMMGTModMasterStatus=ol52nnMMGTModMasterStatus, olPortConnector=olPortConnector, ol51nnREEPortIpAddress=ol51nnREEPortIpAddress, ol51nnMTPPLPortDipNetwork=ol51nnMTPPLPortDipNetwork, boardGroup=boardGroup, olEnetStatsPortFCSErrors=olEnetStatsPortFCSErrors, olEnetMapPortIndex=olEnetMapPortIndex, ol53nnMMGTPortConfig=ol53nnMMGTPortConfig, olFDDInetStatsRingOpCounts=olFDDInetStatsRingOpCounts, olAgentsSlotIndex=olAgentsSlotIndex, ol53nnMSTPPortSlotIndex=ol53nnMSTPPortSlotIndex, ol50nnMRCTL=ol50nnMRCTL, ol51nnMFPPortBuddySlot=ol51nnMFPPortBuddySlot, ol52nnMFRTrunkSlotIndex=ol52nnMFRTrunkSlotIndex, olTRnetStatsStationBurstErrors=olTRnetStatsStationBurstErrors, olTRTrafPortSlotIndex=olTRTrafPortSlotIndex, ol51nnMTSModSlotIndex=ol51nnMTSModSlotIndex, ol51nnMTPPortIndex=ol51nnMTPPortIndex, chipAboveThreshd=chipAboveThreshd, ol51nnMFIBModSlotIndex=ol51nnMFIBModSlotIndex, ol51nnRESPortSlotIndex=ol51nnRESPortSlotIndex, ol53nnMSTPModRingInfo=ol53nnMSTPModRingInfo, ol50nnMHCTLModDipCh3ActCol=ol50nnMHCTLModDipCh3ActCol, olEnvPSIndex=olEnvPSIndex, ol51nnMUTPModDipCrossover=ol51nnMUTPModDipCrossover, hubSysGroup=hubSysGroup, olTRnetStatsEntry=olTRnetStatsEntry, ol53nnMMGTPortRemoteMACIndicated=ol53nnMMGTPortRemoteMACIndicated, olTrunkAdminState=olTrunkAdminState, ol51nnMAUIMPortTable=ol51nnMAUIMPortTable, ol52nnBTTPortSlotIndex=ol52nnBTTPortSlotIndex, ol51nnMFBPortBuddySlot=ol51nnMFBPortBuddySlot, ol52nnMTPModCableImp=ol52nnMTPModCableImp, ol51nnMFBPortAdminState=ol51nnMFBPortAdminState, ol51nnMUTPPortDipAdminState=ol51nnMUTPPortDipAdminState, ol5208MTPModSlotIndex=ol5208MTPModSlotIndex, ol51nnMTPPLPortTable=ol51nnMTPPLPortTable, ol51nnMFIBPortDipAdminState=ol51nnMFIBPortDipAdminState, ol53nnMSTPPortIndex=ol53nnMSTPPortIndex, olTRTrafPortOutMulticastFrames=olTRTrafPortOutMulticastFrames, olTRTrafTopNOutOctets=olTRTrafTopNOutOctets, ol51nnBEEModProtocols=ol51nnBEEModProtocols, olGroupPortTable=olGroupPortTable, ol51nnREEPortEntry=ol51nnREEPortEntry, ol51nnMAUIMPortIndex=ol51nnMAUIMPortIndex, ol51nnMTPLPortSquelch=ol51nnMTPLPortSquelch, ol51nnMFBPortEntry=ol51nnMFBPortEntry, ol51nnBEEPortDipNetwork=ol51nnBEEPortDipNetwork, chipEchoAddr=chipEchoAddr, ol53nnMFBMICPortSlotIndex=ol53nnMFBMICPortSlotIndex, ol53nnMMGTModDownStreamOperPath=ol53nnMMGTModDownStreamOperPath, ol53nnMMGTPortIndex=ol53nnMMGTPortIndex, olTRnetStatsNetID=olTRnetStatsNetID, ol51nnMAUIFPortTable=ol51nnMAUIFPortTable, ol53nnMSTPModSlotIndex=ol53nnMSTPModSlotIndex, ol51nnMTPCLPortLinkInteg=ol51nnMTPCLPortLinkInteg, ol51nnMFLPortSlotIndex=ol51nnMFLPortSlotIndex, ol51nnMUTPModCrossover=ol51nnMUTPModCrossover, olSpecMods=olSpecMods, ol53nnMMGTModfddiMACPath=ol53nnMMGTModfddiMACPath, olTrunkEntry=olTrunkEntry, olTRnetStatsPortNetID=olTRnetStatsPortNetID, olTRTrafStationInOctets=olTRTrafStationInOctets, olGroupSummaryGroupID=olGroupSummaryGroupID, ol51nnMBNCModEntry=ol51nnMBNCModEntry, emm=emm, ol51nnREEModEntry=ol51nnREEModEntry, ol5208MTPModTable=ol5208MTPModTable, ol51nnMBNCPortDipAdminState=ol51nnMBNCPortDipAdminState, ol53nnMFIBSTPortEntry=ol53nnMFIBSTPortEntry, olEnetStatsRunts=olEnetStatsRunts, ol52nnMTPModSlotIndex=ol52nnMTPModSlotIndex, chipBridge=chipBridge, ol53nnMFBMICPortConnectState=ol53nnMFBMICPortConnectState, olTRTrafControlStationLastChangeTime=olTRTrafControlStationLastChangeTime, ol51nnMFPPortBuddyPort=ol51nnMFPPortBuddyPort, ol53nnMFBMICTrunkSlotIndex=ol53nnMFBMICTrunkSlotIndex, ol53nnMSTPModEntry=ol53nnMSTPModEntry, olThreshStatStationAddr=olThreshStatStationAddr, olTRTrafControlTable=olTRTrafControlTable, olTRnetStatsPortFrameCopiedErrors=olTRnetStatsPortFrameCopiedErrors, ol51nnBEEPortEntry=ol51nnBEEPortEntry, ol5208MTPModDipCableImp=ol5208MTPModDipCableImp, ol5208MTPTrunkEntry=ol5208MTPTrunkEntry, ol51nnIxModProtocols=ol51nnIxModProtocols, ol53nnMMGTModDownStreamMAC=ol53nnMMGTModDownStreamMAC, ol51nnMTPCLModTable=ol51nnMTPCLModTable, olTRnetStatsStationLostFrameErrors=olTRnetStatsStationLostFrameErrors, olTRnetMapSummaryEntry=olTRnetMapSummaryEntry, ol50nnMHCTLModClockStatus=ol50nnMHCTLModClockStatus, ol51nnMFLModEntry=ol51nnMFLModEntry, ol51nnMTS=ol51nnMTS, ol5208MTPPortSlotIndex=ol5208MTPPortSlotIndex, ol51nnMFPPortDipLLW=ol51nnMFPPortDipLLW, olTRTrafTopNOutMulticastFrames=olTRTrafTopNOutMulticastFrames, ol52nnMFRPortTable=ol52nnMFRPortTable, olTRTrafPortOutBroadcastFrames=olTRTrafPortOutBroadcastFrames, olFDDIStatsModBackplaneErrs=olFDDIStatsModBackplaneErrs, ol51nnMFBPortBuddyPort=ol51nnMFBPortBuddyPort, ol51nnMFPPortEntry=ol51nnMFPPortEntry, olFDDInet=olFDDInet, ol51nnMTPCLPortBuddySlot=ol51nnMTPCLPortBuddySlot, ol51nnMBNCModDipNetwork=ol51nnMBNCModDipNetwork, olTRnetStatsPortDuplicateAddresses=olTRnetStatsPortDuplicateAddresses, ol52nnMTPPortEntry=ol52nnMTPPortEntry, chipEchoPattern=chipEchoPattern, ol51nnMMGTModMasterPriority=ol51nnMMGTModMasterPriority, olTRnetMapSummaryLogicalLock=olTRnetMapSummaryLogicalLock, ol51nnMTPCLPortEntry=ol51nnMTPCLPortEntry, olTRTrafStationOutMulticastFrames=olTRTrafStationOutMulticastFrames, ol50nnMRCTLModEntry=ol50nnMRCTLModEntry, ol51nnMAUIFPortEntry=ol51nnMAUIFPortEntry, olTRnetStatsStationACErrors=olTRnetStatsStationACErrors, ol52nnMTPTrunkSlotIndex=ol52nnMTPTrunkSlotIndex, ol51nnMTPLPortSlotIndex=ol51nnMTPLPortSlotIndex, ol53nnMFBMICModRingInfo=ol53nnMFBMICModRingInfo, ol51nnMTPLPortTable=ol51nnMTPLPortTable, olPortNetworkType=olPortNetworkType, ol51nnRES=ol51nnRES, ol5208MTPPortDipAdminState=ol5208MTPPortDipAdminState, olEnetStatsPortMcastRcvdOks=olEnetStatsPortMcastRcvdOks, olNetSecurityMACEntry=olNetSecurityMACEntry, chipTFTPFileName=chipTFTPFileName, ol51nnMMGTPortSlotIndex=ol51nnMMGTPortSlotIndex, ol51nnRESModStationAddr=ol51nnRESModStationAddr, ol51nnMAUIFModEntry=ol51nnMAUIFModEntry, ol52nnMMGTModStationAddr=ol52nnMMGTModStationAddr, ol53nnMMGTModStationAddr=ol53nnMMGTModStationAddr, ol51nnMFL=ol51nnMFL, chipGenNetman=chipGenNetman, ol51nnMBNCPortTable=ol51nnMBNCPortTable, chipcom=chipcom, olModEntry=olModEntry, ol53nnMFBMICModDownStreamModule=ol53nnMFBMICModDownStreamModule, olTRnetStatsLostFrameErrors=olTRnetStatsLostFrameErrors, olModSlotIndex=olModSlotIndex, ol53nnMFBMICPortPcmState=ol53nnMFBMICPortPcmState, olConcReset=olConcReset, olAgentsIpAddress=olAgentsIpAddress, chipTrunkUp=chipTrunkUp, olEnetMapTable=olEnetMapTable, olThresh=olThresh, olEnvPSEntry=olEnvPSEntry, olTRTrafEntry=olTRTrafEntry, ol51nnMFIBPortEntry=ol51nnMFIBPortEntry, olPortType=olPortType, ol53nnMMGTModSlotIndex=ol53nnMMGTModSlotIndex, oebm=oebm, olTRnet=olTRnet, ol53nnMFBMICTrunkTable=ol53nnMFBMICTrunkTable, olFDDInetStatsErrorCounts=olFDDInetStatsErrorCounts, olPortAdminState=olPortAdminState, ol53nnMFIBSTModEntry=ol53nnMFIBSTModEntry, ol51nnMTPCLModConn1DipNetwork=ol51nnMTPCLModConn1DipNetwork, olTRTrafControlPortTotalStations=olTRTrafControlPortTotalStations, ol51nnBEE=ol51nnBEE, ol53nnMFBMICPortBSFlag=ol53nnMFBMICPortBSFlag, chipHardware=chipHardware, ol5208MTPTrunkIndex=ol5208MTPTrunkIndex, olTRTrafStationOutErrors=olTRTrafStationOutErrors, ol51nnMTPLPortBuddySlot=ol51nnMTPLPortBuddySlot, olTRTrafTopNPortIndex=olTRTrafTopNPortIndex, olThreshDescription=olThreshDescription, ol51nnMFLPortBuddyPort=ol51nnMFLPortBuddyPort, olTRnetStatsConcStations=olTRnetStatsConcStations, olThreshInterval=olThreshInterval, ol52nnMTPPortSlotIndex=ol52nnMTPPortSlotIndex, ol51nnMTPCLModMonitorConn=ol51nnMTPCLModMonitorConn, olEnvTempStatus=olEnvTempStatus, olEnetMapAddress=olEnetMapAddress, ol51nnMAUIFPortDipAdminState=ol51nnMAUIFPortDipAdminState, ol51nnMTPPLPortDipJabber=ol51nnMTPPLPortDipJabber, ol51nnMMGT=ol51nnMMGT, olEnetStatsPortEntry=olEnetStatsPortEntry, olTRnetStatsCongestionErrors=olTRnetStatsCongestionErrors, olEnetStatsEntry=olEnetStatsEntry, olTrunkTable=olTrunkTable, ol51nnMFBPPortEntry=ol51nnMFBPPortEntry, olEnetStatsModRunts=olEnetStatsModRunts, chipGenID=chipGenID, olTRTrafTopNSummaryNetID=olTRTrafTopNSummaryNetID, ol51nnMTPModCrossover=ol51nnMTPModCrossover, chipFatal=chipFatal, ol52nnBTTPortIpAddress=ol52nnBTTPortIpAddress, ol51nnMMGTPortIndex=ol51nnMMGTPortIndex, olEnetStatsPortOctetsRcvdOks=olEnetStatsPortOctetsRcvdOks, olEnvPSOperStatus=olEnvPSOperStatus, ol53nnMFBMICTrunkIndex=ol53nnMFBMICTrunkIndex, olEnvFanStatus=olEnvFanStatus, ol53nnMFIBSTPortTable=ol53nnMFIBSTPortTable, olTRnetStatsPortEntry=olTRnetStatsPortEntry, olGroupPortEntry=olGroupPortEntry, ol52nnMMGTPortIndex=ol52nnMMGTPortIndex, ol51nnBEEPortIpAddress=ol51nnBEEPortIpAddress, ol51nnMFIBModDipNetwork=ol51nnMFIBModDipNetwork, ol51nnREEModStationAddr=ol51nnREEModStationAddr, olTRTrafTopNSummaryIndex=olTRTrafTopNSummaryIndex, chipGenServiceDate=chipGenServiceDate, ol50nnMHCTLModDipCh2ActCol=ol50nnMHCTLModDipCh2ActCol, olEnetStatsPortLastSrcAddr=olEnetStatsPortLastSrcAddr, ol53nnMFIBSTModDownStreamModule=ol53nnMFIBSTModDownStreamModule, olTRTrafFrames=olTRTrafFrames, olEnetStatsFramesRcvdOks=olEnetStatsFramesRcvdOks, ol51nnMMGTModMasterStatus=ol51nnMMGTModMasterStatus, ol51nnMFLPortIndex=ol51nnMFLPortIndex, ol53nnMMGTModTable=ol53nnMMGTModTable, ol51nnMBNC=ol51nnMBNC, ol51nnMTPPLPortIndex=ol51nnMTPPLPortIndex, ol53nnMMGTTrunkTable=ol53nnMMGTTrunkTable, olTrunkWrapState=olTrunkWrapState, ol51nnMTSPortAdminState=ol51nnMTSPortAdminState, olTRTrafOctets=olTRTrafOctets)
mibBuilder.exportSymbols("CHIPCOM-MIB", olEnetMapSlotIndex=olEnetMapSlotIndex, olThreshEntry=olThreshEntry, olTRTrafStationEntry=olTRTrafStationEntry, ol53nnMFIBSTTrunkIndex=ol53nnMFIBSTTrunkIndex, ol50nnMCTLModEntry=ol50nnMCTLModEntry, ol5208MTPTrunkSlotIndex=ol5208MTPTrunkSlotIndex, ol51nnMFBPPortDipHipwr=ol51nnMFBPPortDipHipwr, ol52nnMFRTrunkDipCompMode=ol52nnMFRTrunkDipCompMode, ol52nnMMGTModRingSpeed=ol52nnMMGTModRingSpeed, olEnvPSTable=olEnvPSTable, ol52nnMMGTPortTable=ol52nnMMGTPortTable, olFDDIStatsModTable=olFDDIStatsModTable, ol51nnMTPPLPortSlotIndex=ol51nnMTPPLPortSlotIndex, olTRTrafTopNStatistic=olTRTrafTopNStatistic, ol51nnMFBPortTable=ol51nnMFBPortTable, olEnetMapFrames=olEnetMapFrames, ol53nnMFIBSTModDownStreamOperPath=ol53nnMFIBSTModDownStreamOperPath, olEnetStatsPortAlignmentErrors=olEnetStatsPortAlignmentErrors, olTRTrafTopNAddress=olTRTrafTopNAddress, ol51nnMFBPPortHipwr=ol51nnMFBPPortHipwr, chipTFTPSlot=chipTFTPSlot, ol51nnMTPPortSlotIndex=ol51nnMTPPortSlotIndex, ol53nnMMGTModUpStreamOperPath=ol53nnMMGTModUpStreamOperPath, ol52nnBTTPortEntry=ol52nnBTTPortEntry, olGroupSummaryIndex=olGroupSummaryIndex, olTRTrafPortPortIndex=olTRTrafPortPortIndex, ol51nnMTPCLPortDipAdminState=ol51nnMTPCLPortDipAdminState, chipTTY=chipTTY, ol51nnMMGTIpAddress=ol51nnMMGTIpAddress, ol52nnMMGTTrunkTable=ol52nnMMGTTrunkTable, olTRnetStatsBurstErrors=olTRnetStatsBurstErrors, ol51nnMFPModEntry=ol51nnMFPModEntry, ol51nnIxPortSlotIndex=ol51nnIxPortSlotIndex, ol53nnMMGTTrunkIndex=ol53nnMMGTTrunkIndex, ol50nnMHCTLModDipCh1ActCol=ol50nnMHCTLModDipCh1ActCol, chipEchoNumber=chipEchoNumber, ol51nnMTPModEntry=ol51nnMTPModEntry, ol51nnMAUIMPortSlotIndex=ol51nnMAUIMPortSlotIndex, ol52nnMFRPortCableImp=ol52nnMFRPortCableImp, ol53nnMMGTPortEntry=ol53nnMMGTPortEntry, olThreshMode=olThreshMode, alarmGroup=alarmGroup, ol52nnMFRTrunkTable=ol52nnMFRTrunkTable, ol53nnMFBMICPortEntry=ol53nnMFBMICPortEntry, chipGenProduct=chipGenProduct, ol52nnBTTTrunkIndex=ol52nnBTTTrunkIndex, olEnvPSAdminState=olEnvPSAdminState, olGroups=olGroups, ol51nnMFBPPortSlotIndex=ol51nnMFBPPortSlotIndex, ol51nnMAUIMPortBuddyPort=ol51nnMAUIMPortBuddyPort, olTRnetMapSummaryTable=olTRnetMapSummaryTable, ol51nnMFPPortTable=ol51nnMFPPortTable, chipDownload=chipDownload, ol52nnBTTTrunkEntry=ol52nnBTTTrunkEntry, olTRTrafTopNNetID=olTRTrafTopNNetID, ol51nnREEModTable=ol51nnREEModTable, olTRTrafDropEvents=olTRTrafDropEvents, olConcProfile=olConcProfile, ol51nnMUTPPortDipSquelch=ol51nnMUTPPortDipSquelch, dot5=dot5, olGroupPortIndex=olGroupPortIndex, ol51nnMTPPLPortSquelch=ol51nnMTPPLPortSquelch, ol53nnMSTPModDownStreamModule=ol53nnMSTPModDownStreamModule, ol51nnMTPLPortAdminState=ol51nnMTPLPortAdminState, ol5208MTPTrunkNetMapState=ol5208MTPTrunkNetMapState, ol51nnMFBModDipLLW=ol51nnMFBModDipLLW, olAgentsMasterReset=olAgentsMasterReset, olModVersion=olModVersion, ol51nnIxModSwType=ol51nnIxModSwType, ol5208MTPPortIndex=ol5208MTPPortIndex, ol5208MTPPortEntry=ol5208MTPPortEntry, ol51nnMAUIM=ol51nnMAUIM, ol51nnMAUIMPortDipAdminState=ol51nnMAUIMPortDipAdminState, olTRnetStatsEnabledPorts=olTRnetStatsEnabledPorts, chipTTYTable=chipTTYTable, ol52nnMFRTrunkDipAdminState=ol52nnMFRTrunkDipAdminState, olModConfigured=olModConfigured, ol51nnMTPCLModConn2DipNetwork=ol51nnMTPCLModConn2DipNetwork, olGroupSummaryPorts=olGroupSummaryPorts, ol51nnMAUIMModSlotIndex=ol51nnMAUIMModSlotIndex, chipSlotDown=chipSlotDown, ol51nnMTPLModEntry=ol51nnMTPLModEntry, ol53nnMMGTPortTable=ol53nnMMGTPortTable, ol5208MTPPortStationType=ol5208MTPPortStationType, ol51nnMFBPPortDipAdminState=ol51nnMFBPPortDipAdminState, ol50nnMHCTL=ol50nnMHCTL, ol51nnMTSPortEntry=ol51nnMTSPortEntry, ol53nnMMGTTrunkEntry=ol53nnMMGTTrunkEntry, olTRnetStatsStationAddr=olTRnetStatsStationAddr, ol51nnREEPortIndex=ol51nnREEPortIndex, chipEchoResponseCounts=chipEchoResponseCounts, ol51nnREEPortSlotIndex=ol51nnREEPortSlotIndex, ol51nnMUTPPortIndex=ol51nnMUTPPortIndex, ol5208MTPModBypsOperState=ol5208MTPModBypsOperState, ol51nnMFBPPortDipNetwork=ol51nnMFBPPortDipNetwork, ol51nnBEEPortDefNetwork=ol51nnBEEPortDefNetwork, olThreshStatNetID=olThreshStatNetID, chipTTYDTR=chipTTYDTR, olThreshCurrentValue=olThreshCurrentValue, ol51nnMUTPModSlotIndex=ol51nnMUTPModSlotIndex, ol51nnMFBModLLW=ol51nnMFBModLLW, ol52nnMFRTrunkEntry=ol52nnMFRTrunkEntry, ol51nnMTSModCPURev=ol51nnMTSModCPURev, ol53nnMSTPPortConfig=ol53nnMSTPPortConfig, ol50nnMHCTLModTable=ol50nnMHCTLModTable, online=online, olEnetStatsPortFrameTooLongs=olEnetStatsPortFrameTooLongs, ol51nnMBNCModSlotIndex=ol51nnMBNCModSlotIndex, olModSummaryTable=olModSummaryTable, ol51nnRESPortEntry=ol51nnRESPortEntry, ol51nnRESPortTable=ol51nnRESPortTable, ol51nnMFBModEntry=ol51nnMFBModEntry, olTRTrafControlPortLastChangeTime=olTRTrafControlPortLastChangeTime, ol50nnMHCTLModOperState=ol50nnMHCTLModOperState, olPortSlotIndex=olPortSlotIndex, ol51nnMTPLPortEntry=ol51nnMTPLPortEntry, ol51nnMFBPModEntry=ol51nnMFBPModEntry, olEnetStatsModFrameTooLongs=olEnetStatsModFrameTooLongs, ol53nnMMGTPortSlotIndex=ol53nnMMGTPortSlotIndex, olFDDIStatsPortLerEstimate=olFDDIStatsPortLerEstimate, olTRTrafControlTopNMaxStations=olTRTrafControlTopNMaxStations, ol51nnMAUIMPortDipNetwork=ol51nnMAUIMPortDipNetwork, ol52nnBTTModSRBridgeNo=ol52nnBTTModSRBridgeNo, ol53nnMFIBSTPortConfig=ol53nnMFIBSTPortConfig, olEnetStatsModBcastRcvdOks=olEnetStatsModBcastRcvdOks, olConcType=olConcType, ol52nnMTPPortIndex=ol52nnMTPPortIndex, ol53nnMMGTPortPCWithhold=ol53nnMMGTPortPCWithhold, olTRnetStatsLastBeaconSender=olTRnetStatsLastBeaconSender, olConcNumSlots=olConcNumSlots, olTRTrafTopNInFrames=olTRTrafTopNInFrames, ol53nnMFBMICPortNeighbor=ol53nnMFBMICPortNeighbor, ol53nnMMGTModIpAddress=ol53nnMMGTModIpAddress, ol52nnMFRTrunkDipCableMon=ol52nnMFRTrunkDipCableMon, ol51nnRESPortDefNetwork=ol51nnRESPortDefNetwork, ol51nnMTSPortSlotIndex=ol51nnMTSPortSlotIndex, ol53nnMSTPPortLerCondition=ol53nnMSTPPortLerCondition, ol51nnMTSPortOperState=ol51nnMTSPortOperState, ol51nnMFBPPortBuddyPort=ol51nnMFBPPortBuddyPort, olEnetStatsNetID=olEnetStatsNetID, olConc=olConc, olTRnetStatsStationEntry=olTRnetStatsStationEntry, olTRTrafStationNetID=olTRTrafStationNetID, olAgentsMasterStatus=olAgentsMasterStatus, ol53nnMSTPModTable=ol53nnMSTPModTable, ol53nnMFIBSTTrunkSlotIndex=ol53nnMFIBSTTrunkSlotIndex, olModTable=olModTable, olTRTrafControlNetID=olTRTrafControlNetID, ol51nnMTPPortSquelch=ol51nnMTPPortSquelch, ol50nnMRCTLModTable=ol50nnMRCTLModTable, ol51nnMUTPModDipFFL=ol51nnMUTPModDipFFL, olGroupPortSlotIndex=olGroupPortSlotIndex, olEnetStatsPortBcastRcvdOks=olEnetStatsPortBcastRcvdOks, olNetDPEntry=olNetDPEntry, ol53nnMSTPModUpStreamModule=ol53nnMSTPModUpStreamModule, olTRTrafPortTable=olTRTrafPortTable, olTRTrafControlTopNLastChangeTime=olTRTrafControlTopNLastChangeTime, olTRnetStatsPortTable=olTRnetStatsPortTable, chipBelowThreshd=chipBelowThreshd, ol52nnMTPTrunkDipAdminState=ol52nnMTPTrunkDipAdminState, ol52nnBTT=ol52nnBTT, MacAddress=MacAddress, ol53nnMMGTPortPcmState=ol53nnMMGTPortPcmState, olFDDIStatsModSlotIndex=olFDDIStatsModSlotIndex, ol50nnMCTLModTempStatus=ol50nnMCTLModTempStatus, ol51nnMAUIMPortEntry=ol51nnMAUIMPortEntry, ol51nnMTPLPortLinkInteg=ol51nnMTPLPortLinkInteg, olGroupSummaryTable=olGroupSummaryTable, olThreshTimeSinceLastTriggered=olThreshTimeSinceLastTriggered, olTrunkType=olTrunkType, olModNumPorts=olModNumPorts, olThreshLastCreatedIndex=olThreshLastCreatedIndex, ol51nnMFIBModEntry=ol51nnMFIBModEntry, ol51nnMTPPLPortLinkInteg=ol51nnMTPPLPortLinkInteg, olNetSecurityMACStatus=olNetSecurityMACStatus, ol53nnMFIBSTPortRemoteMACIndicated=ol53nnMFIBSTPortRemoteMACIndicated, ol53nnMFBMICPortTable=ol53nnMFBMICPortTable, chipPortUp=chipPortUp, ol53nnMSTPTrunkSlotIndex=ol53nnMSTPTrunkSlotIndex, olTRTrafTopNSummaryTable=olTRTrafTopNSummaryTable, ol51nnMBNCPortSlotIndex=ol51nnMBNCPortSlotIndex, olTRnetStatsBeaconEvents=olTRnetStatsBeaconEvents, chipTTYPrompt=chipTTYPrompt, ol52nnBTTModSlotIndex=ol52nnBTTModSlotIndex, olTRnetStatsDuplicateAddresses=olTRnetStatsDuplicateAddresses, olTRTrafFrames2048to4095Octets=olTRTrafFrames2048to4095Octets, ol52nnBTTPortForwarding=ol52nnBTTPortForwarding, olTRTrafStationSlotIndex=olTRTrafStationSlotIndex, ol51nnMTPPLPortEntry=ol51nnMTPPLPortEntry, ol50nnMHCTLModEntry=ol50nnMHCTLModEntry, ol53nnMFBMICModTable=ol53nnMFBMICModTable, ol51nnIxModEntry=ol51nnIxModEntry, ol51nnREEPortTable=ol51nnREEPortTable, olFDDInetStatsNetID=olFDDInetStatsNetID, olAlarm=olAlarm, olThreshValue=olThreshValue, chipTFTPResult=chipTFTPResult, ol53nnMSTPPortNeighbor=ol53nnMSTPPortNeighbor, olFDDIStatsModEntry=olFDDIStatsModEntry, ol53nnMSTPPortPcmState=ol53nnMSTPPortPcmState, olThreshActionData=olThreshActionData, olTRnetStatsTotalStations=olTRnetStatsTotalStations, ol52nnMFRModDipRingSpeed=ol52nnMFRModDipRingSpeed, olTRTrafStationPortIndex=olTRTrafStationPortIndex, olEnvPSCapacity=olEnvPSCapacity, olTRTrafTopNOutBroadcastFrames=olTRTrafTopNOutBroadcastFrames, olFDDInetStatsTable=olFDDInetStatsTable, ol52nnMTP=ol52nnMTP, ol51nnMTSPortIndex=ol51nnMTSPortIndex, olTRTrafBroadcastFrames=olTRTrafBroadcastFrames, olTRnetStatsStationTable=olTRnetStatsStationTable, ol51nnMUTPModEntry=ol51nnMUTPModEntry, olEnetStatsMcastRcvdOks=olEnetStatsMcastRcvdOks, olFDDIStatsPortLemCts=olFDDIStatsPortLemCts, olModConfigToDips=olModConfigToDips, ol51nnMFPPortIndex=ol51nnMFPPortIndex, olTRnetStatsTokenErrors=olTRnetStatsTokenErrors, ol51nnMTSPortTable=ol51nnMTSPortTable, ol51nnMTPLPortBuddyPort=ol51nnMTPLPortBuddyPort, olThreshActionType=olThreshActionType, chipChange=chipChange, ol51nnMFBPPortTable=ol51nnMFBPPortTable, ol52nnBTTModSoftwareVersion=ol52nnBTTModSoftwareVersion, olEnetStatsPortSlotIndex=olEnetStatsPortSlotIndex, ol53nnMMGTModUpStreamModule=ol53nnMMGTModUpStreamModule, ol51nnIxModStationAddr=ol51nnIxModStationAddr, ol52nnBTTModNetworkStatus=ol52nnBTTModNetworkStatus, olModClass=olModClass, olAgentsTable=olAgentsTable, ol51nnMUTPPortLinkInteg=ol51nnMUTPPortLinkInteg, olEnetStatsPortFramesRcvdOks=olEnetStatsPortFramesRcvdOks, ol51nnMFBPortDipAdminState=ol51nnMFBPortDipAdminState, olTRnetStatsStationLineErrors=olTRnetStatsStationLineErrors, ol51nnMAUIMPortDipCollision=ol51nnMAUIMPortDipCollision, olTRnetStatsPortBurstErrors=olTRnetStatsPortBurstErrors, ol51nnREEPortDefNetwork=ol51nnREEPortDefNetwork, ol51nnMTPCLPortBuddyPort=ol51nnMTPCLPortBuddyPort, chipGen=chipGen, ol51nnMTPCL=ol51nnMTPCL, olEnetStatsModFramesRcvdOks=olEnetStatsModFramesRcvdOks, olTRnetMapSummaryIndex=olTRnetMapSummaryIndex, ol51nnMTPPortDipLinkInteg=ol51nnMTPPortDipLinkInteg, ol53nnMFIBSTPortPcmState=ol53nnMFIBSTPortPcmState, olThreshStatSlotIndex=olThreshStatSlotIndex, ol51nnMUTPPortBuddyPort=ol51nnMUTPPortBuddyPort, olTRnetStatsLastBeaconTime=olTRnetStatsLastBeaconTime, ol51nnBEEPortSlotIndex=ol51nnBEEPortSlotIndex, ol52nnMTPPortStationType=ol52nnMTPPortStationType, ol50nnMHCTLModPDBStatus=ol50nnMHCTLModPDBStatus, olTRTrafFrames256to511Octets=olTRTrafFrames256to511Octets, olTRTrafTopNSlotIndex=olTRTrafTopNSlotIndex, ol53nnMFBMICPortLerCondition=ol53nnMFBMICPortLerCondition, oeim=oeim, ol51nnMUTPPortEntry=ol51nnMUTPPortEntry)
mibBuilder.exportSymbols("CHIPCOM-MIB", ol51nnMFBPortIndex=ol51nnMFBPortIndex, olNetSecurityMACAddress=olNetSecurityMACAddress, olPortIndex=olPortIndex, ol53nnMFBMICTrunkEntry=ol53nnMFBMICTrunkEntry, ol52nnMFRModSlotIndex=ol52nnMFRModSlotIndex, olGroupSetGroupID=olGroupSetGroupID, chipTTYEntry=chipTTYEntry, ol51nnREEModProtocols=ol51nnREEModProtocols, ol51nnMAUIFPortBuddySlot=ol51nnMAUIFPortBuddySlot, ol51nnMFBPPortBuddySlot=ol51nnMFBPPortBuddySlot, ol51nnMFBPortSlotIndex=ol51nnMFBPortSlotIndex, olThreshTable=olThreshTable, olTRnetMapSummary=olTRnetMapSummary, olTRTrafNetID=olTRTrafNetID, ol51nnMUTPPortTable=ol51nnMUTPPortTable, ol51nnMFPModSlotIndex=ol51nnMFPModSlotIndex, olEnetStatsModSlotIndex=olEnetStatsModSlotIndex, ol52nnMFRTrunkExtBcnRecovery=ol52nnMFRTrunkExtBcnRecovery, ol51nnBEEModSlotIndex=ol51nnBEEModSlotIndex, olTRTrafControlEntry=olTRTrafControlEntry, ol51nnMTPPortTable=ol51nnMTPPortTable, olTRTrafStationTable=olTRTrafStationTable, trmm=trmm, ol51nnMTPPLPortBuddySlot=ol51nnMTPPLPortBuddySlot, ol53nnMSTPModDownStreamOperPath=ol53nnMSTPModDownStreamOperPath, ol5208MTPModBypsAdminState=ol5208MTPModBypsAdminState, olEnetStatsBcastRcvdOks=olEnetStatsBcastRcvdOks, olTRTrafPortOutErrors=olTRTrafPortOutErrors, olTRnetStatsPortTokenErrors=olTRnetStatsPortTokenErrors, ol51nnMAUIFPortDipNetwork=ol51nnMAUIFPortDipNetwork, ol51nnMTPLPortJabber=ol51nnMTPLPortJabber, olEnetStatsModNetID=olEnetStatsModNetID, ol53nnMFIBSTPortLerCondition=ol53nnMFIBSTPortLerCondition, olTRnetStatsStationNetID=olTRnetStatsStationNetID, ol52nnMMGTPortSlotIndex=ol52nnMMGTPortSlotIndex, ol51nnMUTPModFFL=ol51nnMUTPModFFL, olFDDIStatsModPllUnlockErrs=olFDDIStatsModPllUnlockErrs, olNetSecurityMACTable=olNetSecurityMACTable, ol53nnMFIBSTPortConnectState=ol53nnMFIBSTPortConnectState, olEnetStatsModTable=olEnetStatsModTable, ol51nnMFIBPortSlotIndex=ol51nnMFIBPortSlotIndex, ol51nnIxModTable=ol51nnIxModTable, ol53nnMSTPPortTable=ol53nnMSTPPortTable, ol53nnMFIBSTTrunkEntry=ol53nnMFIBSTTrunkEntry, ol53nnMSTPTrunkIndex=ol53nnMSTPTrunkIndex, olTRnetStatsPortACErrors=olTRnetStatsPortACErrors, ol51nnBEEModTable=ol51nnBEEModTable, ol51nnMFBPPortLLW=ol51nnMFBPPortLLW, ol51nnMUTP=ol51nnMUTP, ol53nnMFBMICModEntry=ol53nnMFBMICModEntry, ol52nnMFRPortDipAdminState=ol52nnMFRPortDipAdminState, chipExperiment=chipExperiment, ol51nnMTPPLPortBuddyPort=ol51nnMTPPLPortBuddyPort, olEnv=olEnv, ol53nnMSTP=ol53nnMSTP, ol53nnMFIBSTPortBSFlag=ol53nnMFIBSTPortBSFlag, ol51nnMAUIFModTable=ol51nnMAUIFModTable, olFDDIStatsPortSlotIndex=olFDDIStatsPortSlotIndex, olTRTrafTopNTable=olTRTrafTopNTable, ol51nnMTPPLPortDipLinkInteg=ol51nnMTPPLPortDipLinkInteg, ol51nnBEEModStationAddr=ol51nnBEEModStationAddr, olEnetStatsPortTable=olEnetStatsPortTable, ol51nnIx=ol51nnIx, olTRTrafTopNInOctets=olTRTrafTopNInOctets, olTRnetStatsPortLostFrameErrors=olTRnetStatsPortLostFrameErrors, olTRTrafPortAddress=olTRTrafPortAddress, ol51nnMTPLPortDipJabber=ol51nnMTPLPortDipJabber, olTRnetMapState=olTRnetMapState, ol51nnMFIBModTable=ol51nnMFIBModTable, olTRnetStatsPortIndex=olTRnetStatsPortIndex, ol51nnMTPModDipCrossover=ol51nnMTPModDipCrossover, ol51nnMTPPL=ol51nnMTPPL, ol51nnBEEModEntry=ol51nnBEEModEntry, olNets=olNets, ol51nnIxPortDipAdminState=ol51nnIxPortDipAdminState, olTRnetStatsLastBeaconAction=olTRnetStatsLastBeaconAction, olTRnetStatsPortAddress=olTRnetStatsPortAddress, olFDDIStatsPortLCTFailCts=olFDDIStatsPortLCTFailCts, ol53nnMMGTModUpStreamMAC=ol53nnMMGTModUpStreamMAC, chipProducts=chipProducts, ol51nnMMGTPortEntry=ol51nnMMGTPortEntry, ol51nnMFPPortLLW=ol51nnMFPPortLLW, ol52nnMTPModEntry=ol52nnMTPModEntry, ol53nnMMGTPortConnectState=ol53nnMMGTPortConnectState, ol52nnMMGTModNetworkStatus=ol52nnMMGTModNetworkStatus, chipDownloadKey=chipDownloadKey, olThreshStatCategory=olThreshStatCategory, ol51nnIxModSlotIndex=ol51nnIxModSlotIndex, dot1dBridge=dot1dBridge, olTRTrafControlTopNTotalStations=olTRTrafControlTopNTotalStations, ol51nnMFLModDipNetwork=ol51nnMFLModDipNetwork, olModNumTrunks=olModNumTrunks, ol52nnMMGTTrunkExtBcnRecovery=ol52nnMMGTTrunkExtBcnRecovery, ol53nnMFBMICPortConfig=ol53nnMFBMICPortConfig, olThreshObjectIdentifier=olThreshObjectIdentifier, olTRnetStatsStationDuplicateAddresses=olTRnetStatsStationDuplicateAddresses, olPortEntry=olPortEntry, ol53nnMFIBSTTrunkTable=ol53nnMFIBSTTrunkTable, olEnetMapNetID=olEnetMapNetID, ol51nnMFIB=ol51nnMFIB, ol51nnMTPLPortDipLinkInteg=ol51nnMTPLPortDipLinkInteg, ol51nnMFLModSlotIndex=ol51nnMFLModSlotIndex, ol51nnRESPortIndex=ol51nnRESPortIndex, ol51nnMTPCLModEntry=ol51nnMTPCLModEntry, chipTFTPIpAddress=chipTFTPIpAddress, ol51nnMFB=ol51nnMFB, ol53nnMFBMIC=ol53nnMFBMIC, ol52nnBTTPortTable=ol52nnBTTPortTable, olNetSecurityMACPortIndex=olNetSecurityMACPortIndex, focus1=focus1, ol51nnMFIBModDipLLW=ol51nnMFIBModDipLLW, ol52nnMTPPortTable=ol52nnMTPPortTable, ol53nnMSTPPortConnectState=ol53nnMSTPPortConnectState, ol5208MTPTrunkCableMon=ol5208MTPTrunkCableMon, ol52nnBTTPortIndex=ol52nnBTTPortIndex, ol51nnIxPortDefNetwork=ol51nnIxPortDefNetwork, ol51nnMTPPLModEntry=ol51nnMTPPLModEntry, olNet=olNet, ol52nnMMGTModTable=ol52nnMMGTModTable, workGroupHub=workGroupHub, ol51nnMFLModTable=ol51nnMFLModTable, ol51nnMFLPortTable=ol51nnMFLPortTable, ol52nnBTTPortSRRingNo=ol52nnBTTPortSRRingNo, olTRTrafStationAddress=olTRTrafStationAddress, ol51nnMTPCLPortSlotIndex=ol51nnMTPCLPortSlotIndex, chipDownloadUDKSerial=chipDownloadUDKSerial, ol52nnMFRTrunkNetMapState=ol52nnMFRTrunkNetMapState, olThreshCondition=olThreshCondition, ol51nnREEPortDipNetwork=ol51nnREEPortDipNetwork, olNetDPTable=olNetDPTable, olTrunkSlotIndex=olTrunkSlotIndex, olAgentsEntry=olAgentsEntry, ol51nnMAUIMPortAdminState=ol51nnMAUIMPortAdminState, chipTTYParity=chipTTYParity, ol51nnRESModEntry=ol51nnRESModEntry, olEnetStatsPortLastErrAddr=olEnetStatsPortLastErrAddr, ol51nnIxPortIpAddress=ol51nnIxPortIpAddress, ol51nnMAUIMPortHalfStep=ol51nnMAUIMPortHalfStep, olEnetStatsLocalColls=olEnetStatsLocalColls, olTRTrafFrames64to127Octets=olTRTrafFrames64to127Octets, olTRTrafMacFrames=olTRTrafMacFrames, olEnetStatsOctetsRcvdOks=olEnetStatsOctetsRcvdOks, hubGroup=hubGroup, ol53nnMSTPTrunkEntry=ol53nnMSTPTrunkEntry, ol51nnMTPPLModTable=ol51nnMTPPLModTable, ol52nnMMGTTrunkNetMapState=ol52nnMMGTTrunkNetMapState, ol51nnMFBPPortAdminState=ol51nnMFBPPortAdminState, ol51nnMAUIFPortAdminState=ol51nnMAUIFPortAdminState, olGroupSetSlotIndex=olGroupSetSlotIndex, ol51nnMFPPortHipwr=ol51nnMFPPortHipwr, olTRTrafPortOutFrames=olTRTrafPortOutFrames, olGroupPortGroupID=olGroupPortGroupID, ol51nnMTPLModDipNetwork=ol51nnMTPLModDipNetwork, olFDDIStatsPortEntry=olFDDIStatsPortEntry, ol52nnMMGTTrunkCableMon=ol52nnMMGTTrunkCableMon, ol50nnMCTLModSlotIndex=ol50nnMCTLModSlotIndex, ol51nnIxPortIndex=ol51nnIxPortIndex, olTRTrafControlTotalStations=olTRTrafControlTotalStations, olTRTrafPortInFrames=olTRTrafPortInFrames, olPortTable=olPortTable, olTRTrafPortEntry=olTRTrafPortEntry, olPortStatus=olPortStatus, ol51nnMFLPortAdminState=ol51nnMFLPortAdminState, chipEcho=chipEcho, ol51nnMTPCLPortTable=ol51nnMTPCLPortTable, olEnetStatsAlignmentErrors=olEnetStatsAlignmentErrors, ol52nnMTPPortDipAdminState=ol52nnMTPPortDipAdminState, olThreshStatType=olThreshStatType, ol50nnMCTLModTable=ol50nnMCTLModTable, olAgentsStationAddr=olAgentsStationAddr, ol51nnMTPPLPortDipAdminState=ol51nnMTPPLPortDipAdminState, chipGenAuthFailureAddr=chipGenAuthFailureAddr, ol51nnMTSModDipNetwork=ol51nnMTSModDipNetwork, ol52nnBTTPortConnector=ol52nnBTTPortConnector, ol51nnMFPPortAdminState=ol51nnMFPPortAdminState, ol51nnMBNCPortIndex=ol51nnMBNCPortIndex, ol52nnMFRTrunkCompMode=ol52nnMFRTrunkCompMode, olModResetModule=olModResetModule, ol51nnMTPPortBuddySlot=ol51nnMTPPortBuddySlot, olTRTrafTopNSummaryStations=olTRTrafTopNSummaryStations, ol53nnMMGTModMasterStatus=ol53nnMMGTModMasterStatus, olModType=olModType, ol52nnMTPModDipRingSpeed=ol52nnMTPModDipRingSpeed, ol53nnMMGTPortLerCondition=ol53nnMMGTPortLerCondition, ol51nnMFP=ol51nnMFP, olEnetStatsPortSrcAddrChanges=olEnetStatsPortSrcAddrChanges, olThreshMaxEntries=olThreshMaxEntries, ol52nnBTTPortRingSpeed=ol52nnBTTPortRingSpeed, ol53nnMSTPPortRemoteMACIndicated=ol53nnMSTPPortRemoteMACIndicated, ol53nnMSTPPortPersonality=ol53nnMSTPPortPersonality, ol50nnMHCTLModTempStatus=ol50nnMHCTLModTempStatus, chipExpTokenRing=chipExpTokenRing, olModStatus=olModStatus, ol51nnMTPModDipNetwork=ol51nnMTPModDipNetwork, olAgents=olAgents, ol51nnMTPL=ol51nnMTPL, olFDDIStatsPortLemRejectCts=olFDDIStatsPortLemRejectCts, chipTTYTerminalType=chipTTYTerminalType, ol53nnMMGTModMasterPriority=ol53nnMMGTModMasterPriority, portGroup=portGroup, olNetDPNetID=olNetDPNetID, ol51nnMTPLPortIndex=ol51nnMTPLPortIndex, ol51nnMUTPPortSlotIndex=ol51nnMUTPPortSlotIndex)
