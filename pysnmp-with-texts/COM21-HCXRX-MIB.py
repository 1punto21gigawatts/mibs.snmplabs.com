#
# PySNMP MIB module COM21-HCXRX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXRX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
com21, com21Traps, com21Hcx = mibBuilder.importSymbols("COM21-HCX-MIB", "com21", "com21Traps", "com21Hcx")
hcxAlmSeverity, hcxEventLogTime = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxAlmSeverity", "hcxEventLogTime")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, IpAddress, iso, Gauge32, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Bits, Unsigned32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "IpAddress", "iso", "Gauge32", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Bits", "Unsigned32", "ModuleIdentity", "MibIdentifier")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
com21HcxRx = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 30))
if mibBuilder.loadTexts: com21HcxRx.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxRx.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21HcxRx.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21HcxRx.setDescription('This is the Com21 ComController RX card MIB. COM21 Part# 005-0025-00')
com21HcxUpstrmPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 31))
com21HcxUpstrmStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 32))
com21HcxUpstrmUnitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 33))
com21HcxVciStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 34))
com21HcxRpmIPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 35))
com21HcxRpmStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 36))
com21HcxRfAnalysisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 37))
class UpstrmFreqKhz(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(5000, 40000)

class PrimServiceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

class RfAnalysisdBmv(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-58, -5)

com21HcxUpstrmUnitTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1), )
if mibBuilder.loadTexts: com21HcxUpstrmUnitTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxUpstrmUnitTable.setDescription('.')
com21HcxUpstrmUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1), ).setIndexNames((0, "COM21-HCXRX-MIB", "hcxUpstreamShelfId"), (0, "COM21-HCXRX-MIB", "hcxUpstreamSlotId"))
if mibBuilder.loadTexts: com21HcxUpstrmUnitEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxUpstrmUnitEntry.setDescription('.')
hcxUpstreamShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstreamShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamShelfId.setDescription(' contains upstream shelf id.')
hcxUpstreamSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstreamSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamSlotId.setDescription(' contains upstream unit id. This is the slot number.')
hcxUpstreamHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstreamHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamHardwareVersion.setDescription(' contains the hardware version of the RX card. Will be empty if card not present.')
hcxUpstreamBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstreamBootVersion.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamBootVersion.setDescription(' contains the version of the RX card boot ROM. This will be an empty string if card is missing.')
hcxUpstreamUnitPrimServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 5), PrimServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstreamUnitPrimServState.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamUnitPrimServState.setDescription(' contains primary service state of the Upstream Unit.')
hcxUpstreamUnitPrimStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 30)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstreamShelfId"), ("COM21-HCXRX-MIB", "hcxUpstreamSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamUnitPrimServState"))
if mibBuilder.loadTexts: hcxUpstreamUnitPrimStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamUnitPrimStateChange.setDescription(' Generated whenever a the hcxUpstreamUnitPrimServState changes in value. This an event with no clear condition. Only severity is WARNING.')
hcxUpstreamUnitSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstreamUnitSecServState.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamUnitSecServState.setDescription(' contains a string defining the secondary service states of the Upstream Unit. The substrings supported by the Upstream Unit shall be: TEST - in test, as set by hcxUpstreamUnitConfigState, MT - offline, again set by hcxUpstreamUnitConfigState, FAULT - hardware failure, UNEQ - unequipped.')
hcxUpstreamUnitSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 31)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstreamShelfId"), ("COM21-HCXRX-MIB", "hcxUpstreamSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamUnitSecServState"))
if mibBuilder.loadTexts: hcxUpstreamUnitSecStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamUnitSecStateChange.setDescription(' Generated whenever a the hcxUpstreamUnitSecServState changes in value. This an event with no clear condition. Only severity is WARNING.')
hcxUpstreamUnitConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2000, 2001, 2002))).clone(namedValues=NamedValues(("offline", 2000), ("online", 2001), ("test", 2002)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpstreamUnitConfigState.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamUnitConfigState.setDescription(' The Upstream Unit State is an active-value. Offline will disable the RF and all other cell forwarding. Online enables RF and performs all traffic and scheduling functions. Test will also place the card offline but shall allow a diagnostic test. Maintenance keeps RF alive but RX performs no scheduling. Note that RX card will not enter the maintenance state if there are any authorized ComPorts. It is the responsibility of the CC to hop any ComPorts prior to entering this state. Offline is default.')
hcxUpstreamUnitRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpstreamUnitRestartAction.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamUnitRestartAction.setDescription(' The RX Unit Restart Action is an active-value. The setting of this attribute to restart(2) causes the RX card to reset and download a new image.')
hcxUpstreamGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpstreamGroupId.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamGroupId.setDescription(' The Upstream group id defines the receiver group to which this RF Receiver belongs. The shall ensure that the group contains a single RF Receiver card operating as an ComPort acquirer. Default is group 1.')
hcxAcquisitionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxAcquisitionEnable.setStatus('current')
if mibBuilder.loadTexts: hcxAcquisitionEnable.setDescription(' Used to select an RF Receiver for acquisition. The ComController shall ensure that only one RX card in a receiver group is selected for acquisition.')
hcxUpDiagTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpDiagTestAction.setStatus('current')
if mibBuilder.loadTexts: hcxUpDiagTestAction.setDescription(' This attribute is used to invoke the internal RX diagnostic test. In order to activate this test, the card must be placed in the test state.')
hcxUpDiagTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 32)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstreamShelfId"), ("COM21-HCXRX-MIB", "hcxUpstreamSlotId"), ("COM21-HCXRX-MIB", "hcxUpDiagTestResult"))
if mibBuilder.loadTexts: hcxUpDiagTestComplete.setStatus('current')
if mibBuilder.loadTexts: hcxUpDiagTestComplete.setDescription(' This notification is generated whenever the RX internal diagnostic tests are completed. This an event with no clear condition. Only severity is WARNING.')
hcxUpDiagTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("failure", 3), ("invalidState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpDiagTestResult.setStatus('current')
if mibBuilder.loadTexts: hcxUpDiagTestResult.setDescription(' This attribute contains the result of the last RX diagnostic test.')
hcxUpTestStatusLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpTestStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxUpTestStatusLed.setDescription(' The RX Test Status LED is a read-only attribute which describes the condition of the RX Test Status light emitting diode located on the RX board. A value of on(1) indicates that a service effecting test is in progress and that the LED is illuminated. off if no card present.')
hcxUpTestStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 33)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstreamShelfId"), ("COM21-HCXRX-MIB", "hcxUpstreamSlotId"), ("COM21-HCXRX-MIB", "hcxUpTestStatusLed"))
if mibBuilder.loadTexts: hcxUpTestStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxUpTestStatusLedChange.setDescription(' generated whenever there is a change in test LED status. This an event with no clear condition. Only severity is WARNING.')
hcxUpFaultStatusLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpFaultStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxUpFaultStatusLed.setDescription(' The RX Fault Status LED is a read-only attribute which describes the condition of the RX Fault Status light emitting diode located on the RX board. A value of on(1) indicates that an fault condition has been detected (for which a trap will have been issued) and the LED is illuminated. off if no card present.')
hcxUpFaultStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 34)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstreamShelfId"), ("COM21-HCXRX-MIB", "hcxUpstreamSlotId"), ("COM21-HCXRX-MIB", "hcxUpFaultStatusLed"))
if mibBuilder.loadTexts: hcxUpFaultStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxUpFaultStatusLedChange.setDescription(' generated whenever there is a change in the Fault LED status. This an event with no clear condition. Only severity is WARNING.')
hcxUpOperationFailure = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 35)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstreamShelfId"), ("COM21-HCXRX-MIB", "hcxUpstreamSlotId"))
if mibBuilder.loadTexts: hcxUpOperationFailure.setStatus('current')
if mibBuilder.loadTexts: hcxUpOperationFailure.setDescription(' This notification is generated by the CC whenever an RX card fails to respond correctly to a request. This failure could indicate either a resource problem or software failure. Note that if an RX card failures to respond completely to a CC request, then a hcxInsertChange trap shall be generated. This an event with no clear condition. Only severity is WARNING.')
hcxUpstreamSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 33, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstreamSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamSerialNumber.setDescription(' contains the serial number of the RX card. This will be an empty string if card is missing.')
com21HcxUpstrmPortTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1), )
if mibBuilder.loadTexts: com21HcxUpstrmPortTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxUpstrmPortTable.setDescription('.')
com21HcxUpstrmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1), ).setIndexNames((0, "COM21-HCXRX-MIB", "hcxUpstrmPortShelfId"), (0, "COM21-HCXRX-MIB", "hcxUpstrmPortSlotId"), (0, "COM21-HCXRX-MIB", "hcxUpstreamPortId"))
if mibBuilder.loadTexts: com21HcxUpstrmPortEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxUpstrmPortEntry.setDescription('.')
hcxUpstrmPortShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmPortShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmPortShelfId.setDescription(' contains upstream shelf id containing the RX card.')
hcxUpstrmPortSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmPortSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmPortSlotId.setDescription(' contains upstream slot id containing the port. Presently there is one port per card.')
hcxUpstreamPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstreamPortId.setStatus('current')
if mibBuilder.loadTexts: hcxUpstreamPortId.setDescription(' Contains the id for the upstream port. Presently should be one only.')
hcxRecvFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 4), UpstrmFreqKhz()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRecvFrequency.setStatus('current')
if mibBuilder.loadTexts: hcxRecvFrequency.setDescription(' Contains the receive frequency of the RF board in KHz. Note that any change to this frequency shall result in temporary loss of service for the ComPorts as the RX needs to issue a frquency change message to each ComPort in turn. Also note that the CC shall check for frequency overlap with other RX cards within the group - the RX channels can be no closer than 1.8Mhz. With the advent of frequency hopping this attribute defines the primary frequency. Minimum step size is 50. i.e. 50000hz. Default is 0.')
hcxRecvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRecvPower.setStatus('current')
if mibBuilder.loadTexts: hcxRecvPower.setDescription(' Contains the receiver power level in dBmv. Default is 0.')
hcxUpstrmAggrStuCbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmAggrStuCbrRate.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmAggrStuCbrRate.setDescription(' This attribute defines the aggregate of all ComPort upstream CBR rates on the RX port. Defined in Kbps.')
hcxUpstrmAggrStuMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmAggrStuMinRate.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmAggrStuMinRate.setDescription(' This attribute defines the aggregate of all ComPort upstream Minimum rates on the RX port. Defined in Kbps.')
hcxUpstrmAggrStuMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmAggrStuMaxRate.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmAggrStuMaxRate.setDescription(' This attribute defines the aggregate of all ComPort upstream Maximum rates on the RX port. Defined in Kbps.')
hcxRxFreqHop = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 82)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstrmPortShelfId"), ("COM21-HCXRX-MIB", "hcxUpstrmPortSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamPortId"), ("COM21-HCXRX-MIB", "hcxUpstrmActiveFreq"))
if mibBuilder.loadTexts: hcxRxFreqHop.setStatus('current')
if mibBuilder.loadTexts: hcxRxFreqHop.setDescription(' This trap is generated when an RX port frequency is hopped due to errors. The hcxUpstrmActiveFreq varbind indicates the new frequency. Severity is WARNING.')
hcxUpstrmFreqHopping = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpstrmFreqHopping.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmFreqHopping.setDescription(' This attribute controls whether an RX port is protected by automatic frequency hopping. If this attribute is transitioned from on -> off then the RX port shall return to the primary frequency. This method can be used to force an RX port to a specific frequency if a hop away from the primary freq had previously occurred. Default will be on.')
hcxUpstrmAltFreqA = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpstrmAltFreqA.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmAltFreqA.setDescription(' Contains the first alternate frequency for this RX port. This need NOT be unique. i.e. other RX ports within the receiver group can also share the same alternate frequencies. Valid values are 0 or 5000-40000KHz. 0 indicates no alternate frequency. If this frequency was being used by the receiver port and is set to 0 then the port shall revert back to the primary frequency. Minimum step size is 50. i.e. 50000hz. Default is 0.')
hcxUpstrmAltFreqB = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpstrmAltFreqB.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmAltFreqB.setDescription(' Contains the second alternate frequency for this RX port. Same restrictions and defaults as for hcxUpstrmAltFreqA.')
hcxUpstrmActiveFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 12), UpstrmFreqKhz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmActiveFreq.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmActiveFreq.setDescription(' Contains the presently active frequency. i.e. primary, alternate A or alternate B. Upon initial deployment of the system this frequency will always match the primary frequency. Upon reboot, the RX port shall always return to this frequency.')
hcxUpstrmRpmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("enable4Port", 2), ("enable8Port", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxUpstrmRpmControl.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmRpmControl.setDescription(' Defines RPM control. This attribute is only applicable in the case of an RXM card. For the RX card this attribute will be read-only with a value of notSupported. If the RPM is present then the control shall be validated against the physical configuration. If an attempt is made to place the RPM in 8 port mode but it is physically configured for 4 port, then an error response shall be return. Default for RxM is enable8Port. Option notSupported is unavailable for RxM.')
hcxRpmInvalidPhyConfig = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 87)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstrmPortShelfId"), ("COM21-HCXRX-MIB", "hcxUpstrmPortSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamPortId"))
if mibBuilder.loadTexts: hcxRpmInvalidPhyConfig.setStatus('current')
if mibBuilder.loadTexts: hcxRpmInvalidPhyConfig.setDescription(' this trap is generated whenever the actual RPM configuration does not match that defined by the hcxUpstrmRpmControl attribute above. Default severity is MINOR.')
hcxRpmInvalidConfClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 88)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstrmPortShelfId"), ("COM21-HCXRX-MIB", "hcxUpstrmPortSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamPortId"))
if mibBuilder.loadTexts: hcxRpmInvalidConfClear.setStatus('current')
if mibBuilder.loadTexts: hcxRpmInvalidConfClear.setDescription(' this trap is generated once the actual and configured RPM configuration match. Severity is CLEARED.')
hcxRpmTimingFault = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 89)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstrmPortShelfId"), ("COM21-HCXRX-MIB", "hcxUpstrmPortSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamPortId"))
if mibBuilder.loadTexts: hcxRpmTimingFault.setStatus('current')
if mibBuilder.loadTexts: hcxRpmTimingFault.setDescription(' this trap is generated whenever an RPM timing problem is detected. Default severity is MINOR.')
hcxRpmTimingFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 130)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstrmPortShelfId"), ("COM21-HCXRX-MIB", "hcxUpstrmPortSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamPortId"))
if mibBuilder.loadTexts: hcxRpmTimingFaultClear.setStatus('current')
if mibBuilder.loadTexts: hcxRpmTimingFaultClear.setDescription(' this trap is generated once a previously detected RPM timing problem is cleared. Severity is CLEARED.')
hcxRpmLinkError = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 131)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstrmPortShelfId"), ("COM21-HCXRX-MIB", "hcxUpstrmPortSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamPortId"))
if mibBuilder.loadTexts: hcxRpmLinkError.setStatus('current')
if mibBuilder.loadTexts: hcxRpmLinkError.setDescription(' this trap is generated whenever the link between the RPM and RxM is detected as down or in error. Default severity is MINOR.')
hcxRpmLinkErrClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 132)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstrmPortShelfId"), ("COM21-HCXRX-MIB", "hcxUpstrmPortSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamPortId"))
if mibBuilder.loadTexts: hcxRpmLinkErrClear.setStatus('current')
if mibBuilder.loadTexts: hcxRpmLinkErrClear.setDescription(' this trap is generated once a previously reported RPM link error is cleared. Severity is CLEARED.')
hcxUpstrmRpmPrimServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 14), PrimServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmRpmPrimServState.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmRpmPrimServState.setDescription(' contains primary service state of the RPM.')
hcxUpstrmRpmPrimStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 133)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxUpstrmPortShelfId"), ("COM21-HCXRX-MIB", "hcxUpstrmPortSlotId"), ("COM21-HCXRX-MIB", "hcxUpstreamPortId"), ("COM21-HCXRX-MIB", "hcxUpstrmRpmPrimServState"))
if mibBuilder.loadTexts: hcxUpstrmRpmPrimStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmRpmPrimStateChange.setDescription(' Generated whenever a the hcxUpstrmRpmPrimServState changes in value. This an event with no clear condition. Only severity is WARNING.')
hcxUpstrmRpmSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmRpmSecServState.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmRpmSecServState.setDescription(' contains a string defining the secondary service states of the RPM. The substrings supported by the RPM shall be: UNEQ - not present, CONF - invalid configuration, LINK - link fault, TIME - timing fault.')
hcxUpstrmRpmConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unconnected", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmRpmConnType.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmRpmConnType.setDescription(' contains management connection type to the RPM device. Note that if the RxM is in slave mode, then the state information defined by the attributes above shall not be applicable.')
hcxUpstrmAggrStuVoiceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 31, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxUpstrmAggrStuVoiceRate.setStatus('current')
if mibBuilder.loadTexts: hcxUpstrmAggrStuVoiceRate.setDescription(' This attribute defines the aggregate of all ComPort upstream voice rates on the RX port. Defined in Kbps.')
com21HcxUpstrmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1), )
if mibBuilder.loadTexts: com21HcxUpstrmStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxUpstrmStatsTable.setDescription('.')
com21HcxUpstrmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1), ).setIndexNames((0, "COM21-HCXRX-MIB", "hcxStatsUpstreamShelfId"), (0, "COM21-HCXRX-MIB", "hcxStatsUpstreamSlotId"), (0, "COM21-HCXRX-MIB", "hcxStatsUpstreamPortId"))
if mibBuilder.loadTexts: com21HcxUpstrmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxUpstrmStatsEntry.setDescription('.')
hcxStatsUpstreamShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsUpstreamShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxStatsUpstreamShelfId.setDescription(' Contains the id for the shelf in which the associated RX card is located.')
hcxStatsUpstreamSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsUpstreamSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxStatsUpstreamSlotId.setDescription(' Contains the id for the upstream slot.')
hcxStatsUpstreamPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsUpstreamPortId.setStatus('current')
if mibBuilder.loadTexts: hcxStatsUpstreamPortId.setDescription(' Contains the id for the upstream port. Between 1 and 12')
hcxPortCurrMinRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortCurrMinRxCells.setStatus('current')
if mibBuilder.loadTexts: hcxPortCurrMinRxCells.setDescription(' Represents the number of cells received in the current 15 minute period.')
hcxPortCurrMinRxNullCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortCurrMinRxNullCells.setStatus('current')
if mibBuilder.loadTexts: hcxPortCurrMinRxNullCells.setDescription(' Represents the number of null cells received in the current 15 minute period.')
hcxPortCurrMinUncorrFecHecCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortCurrMinUncorrFecHecCells.setStatus('current')
if mibBuilder.loadTexts: hcxPortCurrMinUncorrFecHecCells.setDescription(' Represents the number of received cells with either uncorrectable FEC or HEC errors in current 15 minute period.')
hcxPortCurrMinCorrectedFec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortCurrMinCorrectedFec.setStatus('current')
if mibBuilder.loadTexts: hcxPortCurrMinCorrectedFec.setDescription(' Represents the number of corrected FEC errors in the current 15 minute period.')
hcxPortCurrMinOverSubPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortCurrMinOverSubPeriods.setStatus('current')
if mibBuilder.loadTexts: hcxPortCurrMinOverSubPeriods.setDescription(' Represents the number of 512 cell slot scheduling periods that were actively oversubscribed in the current 15 minute period.')
hcxPortPrevMinRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortPrevMinRxCells.setStatus('current')
if mibBuilder.loadTexts: hcxPortPrevMinRxCells.setDescription(' Represents the number of cells received in the previous 15 minute period.')
hcxPortPrevMinRxNullCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortPrevMinRxNullCells.setStatus('current')
if mibBuilder.loadTexts: hcxPortPrevMinRxNullCells.setDescription(' Represents the number of cells received in the previous 15 minute period.')
hcxPortPrevMinUncorrFecHecCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortPrevMinUncorrFecHecCells.setStatus('current')
if mibBuilder.loadTexts: hcxPortPrevMinUncorrFecHecCells.setDescription(' Represents the number of received cells with either uncorrectable FEC or HEC errors in the previous 15 minute period.')
hcxPortPrevMinCorrectedFec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortPrevMinCorrectedFec.setStatus('current')
if mibBuilder.loadTexts: hcxPortPrevMinCorrectedFec.setDescription(' Represents the number of corrected FEC errors in the previous 15 minute period.')
hcxPortPrevMinOverSubPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortPrevMinOverSubPeriods.setStatus('current')
if mibBuilder.loadTexts: hcxPortPrevMinOverSubPeriods.setDescription(' Represents the number of 512 cell slot scheduling periods that were actively oversubscribed in the previous 15 minute period.')
hcxPortUpstreamUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortUpstreamUtil.setStatus('current')
if mibBuilder.loadTexts: hcxPortUpstreamUtil.setDescription(' Represents the percentage of utilization on all slots of the upstream channel.')
hcxPortCurrMeanNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortCurrMeanNoise.setStatus('current')
if mibBuilder.loadTexts: hcxPortCurrMeanNoise.setDescription(' This attribute defines the mean noise level in dBmv sampled by the RX card in the current 15 minute period.')
hcxPortPrevMeanNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortPrevMeanNoise.setStatus('current')
if mibBuilder.loadTexts: hcxPortPrevMeanNoise.setDescription(' This attribute defines the mean noise level in dBmv sampled by the RX card in the previous 15 minute period.')
hcxPortCorrFecRatioThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxPortCorrFecRatioThres.setStatus('current')
if mibBuilder.loadTexts: hcxPortCorrFecRatioThres.setDescription(' This attribute defines a threshold point at which a hop of the receive channel frequency shall take place. The threshold is defined as the percentage of corrected FEC errored cells to good cells. The RX card shall calculate this percentage over a one second period, and the threshold must be crossed for the period defined by the hcxPortRatioThresPeriod attribute before a trap is generated. In addition the cells received within the second must be greater than that defined by hcxPortMinErrRatioCells. A value of 0 disables the threshold. Default is 20. If this RX port is connected to an RPM then this threshold is not valid.')
hcxCorrFecRatioThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 80)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxStatsUpstreamShelfId"), ("COM21-HCXRX-MIB", "hcxStatsUpstreamSlotId"), ("COM21-HCXRX-MIB", "hcxStatsUpstreamPortId"), ("COM21-HCXRX-MIB", "hcxPortCorrFecRatioThres"))
if mibBuilder.loadTexts: hcxCorrFecRatioThres.setStatus('current')
if mibBuilder.loadTexts: hcxCorrFecRatioThres.setDescription(' Severity is WARNING.')
hcxPortCellErrRatioThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxPortCellErrRatioThres.setStatus('current')
if mibBuilder.loadTexts: hcxPortCellErrRatioThres.setDescription(' This attribute defines a threshold point at which a hop of the receive channel frequency shall take place. The threshold is defined as the percentage of FEC/HEC errored cells to good cells. The RX card shall calculate this percentage over a one second period, and the threshold must be crossed for the period defined by the hcxPortRatioThresPeriod attribute before a trap is generated. In addition the cells received within one second must be greater than that defined by hcxPortMinErrRatioCells. A value of 0 disables the threshold. Default is 10. If this RX port is connected to an RPM then this threshold is not valid.')
hcxCellErrRatioThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 81)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxStatsUpstreamShelfId"), ("COM21-HCXRX-MIB", "hcxStatsUpstreamSlotId"), ("COM21-HCXRX-MIB", "hcxStatsUpstreamPortId"), ("COM21-HCXRX-MIB", "hcxPortCellErrRatioThres"))
if mibBuilder.loadTexts: hcxCellErrRatioThres.setStatus('current')
if mibBuilder.loadTexts: hcxCellErrRatioThres.setDescription(' Severity is WARNING.')
hcxPortRatioThresPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxPortRatioThresPeriod.setStatus('current')
if mibBuilder.loadTexts: hcxPortRatioThresPeriod.setDescription(' This attribute defines the integration period for the error ratio thresholds. This attribute defines the number of seconds over which the threshold is contiguously exceeded before a trap is generated. 0 disables the thresholds. Default is 5.')
hcxPortMinErrRatioCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxPortMinErrRatioCells.setStatus('current')
if mibBuilder.loadTexts: hcxPortMinErrRatioCells.setDescription(' This attribute defines the minimum number of cells that should be received per second in order to allow the Error and Corrected Cell Thresholds to cause a frequency hop. Default is 50.')
hcxPortCnrThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxPortCnrThres.setStatus('current')
if mibBuilder.loadTexts: hcxPortCnrThres.setDescription(' Defines the average carrier to noise level, in dB, at which a frequency hop should occur. Note that the data error thresholds define above take precedence - this CNR threshold applies only if the data rate is less than the hcxPortMinErrRatioCells. Default 11dB. If this RX port is connected to an RPM then this threshold is not valid.')
hcxCnrThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 83)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxStatsUpstreamShelfId"), ("COM21-HCXRX-MIB", "hcxStatsUpstreamSlotId"), ("COM21-HCXRX-MIB", "hcxStatsUpstreamPortId"), ("COM21-HCXRX-MIB", "hcxPortCnrThres"))
if mibBuilder.loadTexts: hcxCnrThres.setStatus('current')
if mibBuilder.loadTexts: hcxCnrThres.setDescription(' Tbd. Severity is WARNING.')
hcxPortCurrMinNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortCurrMinNoise.setStatus('current')
if mibBuilder.loadTexts: hcxPortCurrMinNoise.setDescription(' defines the minimum noise level in dBmv sampled by the RX card in the current 15 minute period.')
hcxPortCurrMaxNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortCurrMaxNoise.setStatus('current')
if mibBuilder.loadTexts: hcxPortCurrMaxNoise.setDescription(' defines the maximum noise level in dBmv sampled by the RX card in the current 15 minute period.')
hcxPortPrevMinNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortPrevMinNoise.setStatus('current')
if mibBuilder.loadTexts: hcxPortPrevMinNoise.setDescription(' defines the minimum noise level in dBmv sampled by the RX card in the previous 15 minute period.')
hcxPortPrevMaxNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortPrevMaxNoise.setStatus('current')
if mibBuilder.loadTexts: hcxPortPrevMaxNoise.setDescription(' defines the maximum noise level in dBmv sampled by the RX card in the previous 15 minute period.')
hcxPortRealTimeMeanNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortRealTimeMeanNoise.setStatus('current')
if mibBuilder.loadTexts: hcxPortRealTimeMeanNoise.setDescription(' This attribute provides a realtime mean noise level in dBmv. It is updated every approx 5 seconds and provides a snap shot of the noise conditions on this receiver port.')
hcxPortRealTimeMinNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortRealTimeMinNoise.setStatus('current')
if mibBuilder.loadTexts: hcxPortRealTimeMinNoise.setDescription(' ::= { com21HcxUpstrmStatsEntry 29 } This attribute provides a realtime min noise level in dBmv. The attribute is updated every approx 5 seconds and provides the minimum noise level during that period.')
hcxPortRealTimeMaxNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxPortRealTimeMaxNoise.setStatus('current')
if mibBuilder.loadTexts: hcxPortRealTimeMaxNoise.setDescription(' This attribute provides a realtime max noise level in dBmv. The attribute is updated every approx 5 seconds and provides the maximum noise level during that period.')
hcxPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 32, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxPortClearStats.setStatus('current')
if mibBuilder.loadTexts: hcxPortClearStats.setDescription(' This attribute is used to clear all RX statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
com21HcxVciStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1), )
if mibBuilder.loadTexts: com21HcxVciStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxVciStatsTable.setDescription('.')
com21HcxVciStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1), ).setIndexNames((0, "COM21-HCXRX-MIB", "hcxStuStatsMacAddr"))
if mibBuilder.loadTexts: com21HcxVciStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxVciStatsEntry.setDescription('.')
hcxStuStatsMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuStatsMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuStatsMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
hcxStatsCurrMinRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsCurrMinRxCells.setStatus('current')
if mibBuilder.loadTexts: hcxStatsCurrMinRxCells.setDescription(' Represents the number of cells successfully received in the current 15 minute period.')
hcxStatsCurrMinRxNullCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsCurrMinRxNullCells.setStatus('current')
if mibBuilder.loadTexts: hcxStatsCurrMinRxNullCells.setDescription(' Represents the number of null cells received in the current 15 minute period.')
hcxStatsCurrMinUncorFecHec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsCurrMinUncorFecHec.setStatus('current')
if mibBuilder.loadTexts: hcxStatsCurrMinUncorFecHec.setDescription(' Represents the number of bad cells - HEC/Uncorrectable FEC/ Collisions - reported in cell slots allocated to this ComPort/VCI in the current 15 minute period.')
hcxStatsCurrMinUncorFecThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStatsCurrMinUncorFecThres.setStatus('current')
if mibBuilder.loadTexts: hcxStatsCurrMinUncorFecThres.setDescription(' Represents the number of HEC/Uncorrectable FEC error cells received in the present 15minute period that shall cause a threshold trap to be generated. Default is 0 - threshold disabled.')
hcxUncorFecHecMinThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 37)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxStuStatsMacAddr"), ("COM21-HCXRX-MIB", "hcxStatsCurrMinUncorFecThres"), ("COM21-HCXRX-MIB", "hcxStatsCurrMinUncorFecHec"))
if mibBuilder.loadTexts: hcxUncorFecHecMinThres.setStatus('current')
if mibBuilder.loadTexts: hcxUncorFecHecMinThres.setDescription(' Severity is WARNING.')
hcxStatsCurrMinCorrectedFec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsCurrMinCorrectedFec.setStatus('current')
if mibBuilder.loadTexts: hcxStatsCurrMinCorrectedFec.setDescription(' Represents the number of corrected FEC errors for this ComPort/VCI in the current 15 minute period.')
hcxStatsCurrMinCorFecThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStatsCurrMinCorFecThres.setStatus('current')
if mibBuilder.loadTexts: hcxStatsCurrMinCorFecThres.setDescription(' Represents the number of corrected FEC errors in the present 15minute period that shall cause a threshold trap to be generated. Default is 0 - threshold disabled.')
hcxCorrectedFecMinThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 38)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxStuStatsMacAddr"), ("COM21-HCXRX-MIB", "hcxStatsCurrMinCorFecThres"), ("COM21-HCXRX-MIB", "hcxStatsCurrMinCorrectedFec"))
if mibBuilder.loadTexts: hcxCorrectedFecMinThres.setStatus('current')
if mibBuilder.loadTexts: hcxCorrectedFecMinThres.setDescription(' Severity is WARNING.')
hcxStatsPrevMinRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsPrevMinRxCells.setStatus('current')
if mibBuilder.loadTexts: hcxStatsPrevMinRxCells.setDescription(' Represents the number of cells successfully received in the previous 15 minute period.')
hcxStatsPrevMinRxNullCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsPrevMinRxNullCells.setStatus('current')
if mibBuilder.loadTexts: hcxStatsPrevMinRxNullCells.setDescription(' Represents the number of null cells received in the previous 15 minute period.')
hcxStatsPrevMinUncorFecHec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsPrevMinUncorFecHec.setStatus('current')
if mibBuilder.loadTexts: hcxStatsPrevMinUncorFecHec.setDescription(' Represents the number of bad cells - HEC/Uncorrectable FEC/Collisions - reported in cell slots allocated to this ComPort/VCI in the previous 15 minute period.')
hcxStatsPrevMinCorrectedFec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsPrevMinCorrectedFec.setStatus('current')
if mibBuilder.loadTexts: hcxStatsPrevMinCorrectedFec.setDescription(' Represents the number of corrected FEC errors for this ComPort/VCI in the previous 15 minute period.')
hcxStatsCurrMinMeanSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsCurrMinMeanSignal.setStatus('current')
if mibBuilder.loadTexts: hcxStatsCurrMinMeanSignal.setDescription(' This attribute contains the mean signal strength value in dBmv sampled for this ComPort in the current 15 minute period.')
hcxStatsPrevMinMeanSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsPrevMinMeanSignal.setStatus('current')
if mibBuilder.loadTexts: hcxStatsPrevMinMeanSignal.setDescription(' This attribute contains the mean signal strength value in dBmv sampled for this ComPort in the previous 15 minute period.')
hcxStatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 34, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStatsClearStats.setStatus('current')
if mibBuilder.loadTexts: hcxStatsClearStats.setDescription(' This attribute is used to clear all RX ComPort statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
com21HcxRpmIPortTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 35, 1), )
if mibBuilder.loadTexts: com21HcxRpmIPortTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxRpmIPortTable.setDescription('.')
com21HcxRpmIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 35, 1, 1), ).setIndexNames((0, "COM21-HCXRX-MIB", "hcxRpmIPortShelfId"), (0, "COM21-HCXRX-MIB", "hcxRpmIPortSlotId"), (0, "COM21-HCXRX-MIB", "hcxRpmRxPortId"), (0, "COM21-HCXRX-MIB", "hcxRpmIPortId"))
if mibBuilder.loadTexts: com21HcxRpmIPortEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxRpmIPortEntry.setDescription('.')
hcxRpmIPortShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 35, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmIPortShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxRpmIPortShelfId.setDescription(' contains upstream shelf id containing the RX card.')
hcxRpmIPortSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 35, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmIPortSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxRpmIPortSlotId.setDescription(' contains upstream slot id containing the port. Presently there is one port per card.')
hcxRpmRxPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 35, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmRxPortId.setStatus('current')
if mibBuilder.loadTexts: hcxRpmRxPortId.setDescription(' Contains the id for the upstream port. Presently should be one only.')
hcxRpmIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 35, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmIPortId.setStatus('current')
if mibBuilder.loadTexts: hcxRpmIPortId.setDescription(' Contains the id for the RPM I-port.')
hcxRpmIPortRecvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 35, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRpmIPortRecvPower.setStatus('current')
if mibBuilder.loadTexts: hcxRpmIPortRecvPower.setDescription(' Contains the receiver power level in dBmv. Default is 0.')
hcxRpmIPortConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 35, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRpmIPortConfigState.setStatus('current')
if mibBuilder.loadTexts: hcxRpmIPortConfigState.setDescription(' Used to activate or deactivate the I-Port. For test purposes, one port can be enabled and all others disabled. This will cause the I-Port to be permanently closed. i.e. traffic passing. Default disable. Note that setting an I-Port to the disabled state will have the effect of clearing the statistics for the I-Port.')
hcxRpmIPortContSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 35, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("roundRobinOperation", 1), ("simultaneousOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRpmIPortContSchedType.setStatus('current')
if mibBuilder.loadTexts: hcxRpmIPortContSchedType.setDescription(' Used to control the type of contention slot scheduling utilized by this I-Port. The roundRobinOperation indicates that this I-Port shall have a individual contention opportunity - i.e. no other I-Ports active - allocated on a round-robin basis. The simultaneousOperation indicates that this I-Port shall be included with a group of I-Ports given the same, simultaneous contention opportunities. Default is roundRobinOperation.')
com21HcxRpmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1), )
if mibBuilder.loadTexts: com21HcxRpmStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxRpmStatsTable.setDescription('.')
com21HcxRpmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1), ).setIndexNames((0, "COM21-HCXRX-MIB", "hcxStatsRpmShelfId"), (0, "COM21-HCXRX-MIB", "hcxStatsRpmSlotId"), (0, "COM21-HCXRX-MIB", "hcxStatsRxPortId"), (0, "COM21-HCXRX-MIB", "hcxStatsRpmIPortId"))
if mibBuilder.loadTexts: com21HcxRpmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxRpmStatsEntry.setDescription('.')
hcxStatsRpmShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsRpmShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxStatsRpmShelfId.setDescription(' Contains the id for the shelf in which the associated RX card is located.')
hcxStatsRpmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsRpmSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxStatsRpmSlotId.setDescription(' Contains the id for the upstream slot.')
hcxStatsRxPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsRxPortId.setStatus('current')
if mibBuilder.loadTexts: hcxStatsRxPortId.setDescription(' Contains the id for the upstream port.')
hcxStatsRpmIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStatsRpmIPortId.setStatus('current')
if mibBuilder.loadTexts: hcxStatsRpmIPortId.setDescription(' Contains the id for the RPM I-Port.')
hcxRpmCurrMinRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmCurrMinRxCells.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCurrMinRxCells.setDescription(' Represents the number of cells received via the I-Port in the current 15 minute period.')
hcxRpmCurrMinRxNullCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmCurrMinRxNullCells.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCurrMinRxNullCells.setDescription(' Represents the number of null cells received via the RPM I-Port in the current 15 minute period.')
hcxRpmCurrMinUncorFecHecCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmCurrMinUncorFecHecCells.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCurrMinUncorFecHecCells.setDescription(' Represents the number of received cells with either uncorrectable FEC or HEC errors received via the I-Port in the current 15 minute period.')
hcxRpmCurrMinCorrectedFec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmCurrMinCorrectedFec.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCurrMinCorrectedFec.setDescription(' Represents the number of corrected FEC errors received via the I-Port in the current 15 minute period.')
hcxRpmCurrMeanNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmCurrMeanNoise.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCurrMeanNoise.setDescription(' This attribute defines the mean noise value, in dBmv, sampled on the I-Port in the current 15 minute period.')
hcxRpmCurrMinNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmCurrMinNoise.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCurrMinNoise.setDescription(' Defines the minimum noise level, in dBmv, sampled on the I-Port in the current 15 minute period.')
hcxRpmCurrMaxNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmCurrMaxNoise.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCurrMaxNoise.setDescription(' Defines the maximum noise level, in dBmv, sampled on the I-Port in the current 15 minute period.')
hcxRpmRealTimeMeanNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmRealTimeMeanNoise.setStatus('current')
if mibBuilder.loadTexts: hcxRpmRealTimeMeanNoise.setDescription(' This attribute provides a realtime mean noise level in dBmv sampled on the I-Port. It is updated every approx 5 seconds and provides a snap shot of the noise conditions on this I-Port.')
hcxRpmRealTimeMinNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmRealTimeMinNoise.setStatus('current')
if mibBuilder.loadTexts: hcxRpmRealTimeMinNoise.setDescription(' This attribute provides a realtime min noise level in dBmv sampled on the I-Port. The attribute is updated every approx 5 seconds and provides the minimum noise level during that period.')
hcxRpmRealTimeMaxNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmRealTimeMaxNoise.setStatus('current')
if mibBuilder.loadTexts: hcxRpmRealTimeMaxNoise.setDescription(' This attribute provides a realtime max noise level in dBmv sampled on the I-Port. The attribute is updated every approx 5 seconds and provides the maximum noise level during that period.')
hcxRpmPrevMinRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmPrevMinRxCells.setStatus('current')
if mibBuilder.loadTexts: hcxRpmPrevMinRxCells.setDescription(' Represents the number of cells received via the RPM I-Port in the previous 15 minute period.')
hcxRpmPrevMinRxNullCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmPrevMinRxNullCells.setStatus('current')
if mibBuilder.loadTexts: hcxRpmPrevMinRxNullCells.setDescription(' Represents the number of null cells received via the I-Port in the previous 15 minute period.')
hcxRpmPrevMinUncorFecHecCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmPrevMinUncorFecHecCells.setStatus('current')
if mibBuilder.loadTexts: hcxRpmPrevMinUncorFecHecCells.setDescription(' Represents the number of cells with uncorrectable FEC or HEC errors received via the I-Port in the previous 15 minute period.')
hcxRpmPrevMinCorrectedFec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmPrevMinCorrectedFec.setStatus('current')
if mibBuilder.loadTexts: hcxRpmPrevMinCorrectedFec.setDescription(' Represents the number of corrected FEC errors in the previous 15 minute period.')
hcxRpmPrevMeanNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmPrevMeanNoise.setStatus('current')
if mibBuilder.loadTexts: hcxRpmPrevMeanNoise.setDescription(' This attribute defines the mean noise value, in dBmv, sampled on the I-Port in the previous 15 minute period.')
hcxRpmPrevMinNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmPrevMinNoise.setStatus('current')
if mibBuilder.loadTexts: hcxRpmPrevMinNoise.setDescription(' Defines the minimum noise level, in dBmv, sampled on the I-Port in the previous 15 minute period.')
hcxRpmPrevMaxNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRpmPrevMaxNoise.setStatus('current')
if mibBuilder.loadTexts: hcxRpmPrevMaxNoise.setDescription(' Defines the maximum noise level, in dBmv, sampled on the I-Port in the previous 15 minute period.')
hcxRpmCorrFecRatioThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRpmCorrFecRatioThres.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCorrFecRatioThres.setDescription(' This attribute defines a threshold point at which a hop of the receive channel frequency shall take place. The threshold is defined as the percentage of corrected FEC errored cells to good cells. The RX card shall calculate this percentage over a one second period, and the threshold must be crossed for the period defined by the hcxRpmRatioThresPeriod attribute before a trap is generated. In addition the cells received within the second must be greater than that defined by hcxRpmMinErrRatioCells. A value of 0 disables the threshold. Default is 20.')
hcxRpmFecRatioThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 84)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxStatsRpmShelfId"), ("COM21-HCXRX-MIB", "hcxStatsRpmSlotId"), ("COM21-HCXRX-MIB", "hcxStatsRxPortId"), ("COM21-HCXRX-MIB", "hcxStatsRpmIPortId"), ("COM21-HCXRX-MIB", "hcxRpmCorrFecRatioThres"))
if mibBuilder.loadTexts: hcxRpmFecRatioThres.setStatus('current')
if mibBuilder.loadTexts: hcxRpmFecRatioThres.setDescription(' Severity is WARNING.')
hcxRpmCellErrRatioThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRpmCellErrRatioThres.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCellErrRatioThres.setDescription(' This attribute defines a threshold point at which a hop of the receive channel frequency shall take place. The threshold is defined as the percentage of FEC/HEC errored cells to good cells. The RX card shall calculate this percentage over a one second period, and the threshold must be crossed for the period defined by the hcxRpmRatioThresPeriod attribute before a trap is generated. In addition the cells received within one second must be greater than that defined by hcxRpmMinErrRatioCells. A value of 0 disables the threshold. Default is 10.')
hcxRpmCellErrRatioThresTrap = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 85)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxStatsRpmShelfId"), ("COM21-HCXRX-MIB", "hcxStatsRpmSlotId"), ("COM21-HCXRX-MIB", "hcxStatsRxPortId"), ("COM21-HCXRX-MIB", "hcxStatsRpmIPortId"), ("COM21-HCXRX-MIB", "hcxRpmCellErrRatioThres"))
if mibBuilder.loadTexts: hcxRpmCellErrRatioThresTrap.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCellErrRatioThresTrap.setDescription(' Severity is WARNING.')
hcxRpmRatioThresPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRpmRatioThresPeriod.setStatus('current')
if mibBuilder.loadTexts: hcxRpmRatioThresPeriod.setDescription(' This attribute defines the integration period for the error ratio thresholds. This attribute defines the number of seconds over which the threshold is contiguously exceeded before a trap is generated. 0 disables the thresholds. Default is 5.')
hcxRpmMinErrRatioCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRpmMinErrRatioCells.setStatus('current')
if mibBuilder.loadTexts: hcxRpmMinErrRatioCells.setDescription(' This attribute defines the minimum number of cells that should be received per second in order to allow the Error and Corrected Cell Thresholds to cause a frequency hop. Default is 50.')
hcxRpmCnrThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRpmCnrThres.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCnrThres.setDescription(' Defines the average noise level, in dBmv, at which a frequency hop should occur. Note that the data error thresholds define above take precedence - this CNR threshold applies only if the data rate is less than the hcxRpmMinErrRatioCells. Default 11dBmv.')
hcxRpmCnrThresTrap = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 86)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXRX-MIB", "hcxStatsRpmShelfId"), ("COM21-HCXRX-MIB", "hcxStatsRpmSlotId"), ("COM21-HCXRX-MIB", "hcxStatsRxPortId"), ("COM21-HCXRX-MIB", "hcxStatsRpmIPortId"), ("COM21-HCXRX-MIB", "hcxRpmCnrThres"))
if mibBuilder.loadTexts: hcxRpmCnrThresTrap.setStatus('current')
if mibBuilder.loadTexts: hcxRpmCnrThresTrap.setDescription(' Tbd. Severity is WARNING.')
hcxRpmClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 36, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRpmClearStats.setStatus('current')
if mibBuilder.loadTexts: hcxRpmClearStats.setDescription(' This attribute is used to clear all RPM statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
com21HcxRfAnalysisTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1), )
if mibBuilder.loadTexts: com21HcxRfAnalysisTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxRfAnalysisTable.setDescription('.')
com21HcxRfAnalysisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1), ).setIndexNames((0, "COM21-HCXRX-MIB", "hcxRfAnalysisShelfId"), (0, "COM21-HCXRX-MIB", "hcxRfAnalysisSlotId"), (0, "COM21-HCXRX-MIB", "hcxRfAnalysisPortId"), (0, "COM21-HCXRX-MIB", "hcxRfAnalysisRpmPortId"))
if mibBuilder.loadTexts: com21HcxRfAnalysisEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxRfAnalysisEntry.setDescription('.')
hcxRfAnalysisShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRfAnalysisShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisShelfId.setDescription(' contains upstream shelf id.')
hcxRfAnalysisSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRfAnalysisSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisSlotId.setDescription(' contains upstream slot id.')
hcxRfAnalysisPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRfAnalysisPortId.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisPortId.setDescription(' contains upstream port id. Presently only one port is supported.')
hcxRfAnalysisRpmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRfAnalysisRpmPortId.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisRpmPortId.setDescription(' contains any RPM I-Port id. Note an RX card or RXM card operating without an RPM expects 1 for this attribute.')
hcxRfAnalysisControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRfAnalysisControl.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisControl.setDescription(' Used to activate or deactivate the RF analysis for a port or I-Port. Default disable.')
hcxRfAnalysisPoint1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 6), RfAnalysisdBmv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRfAnalysisPoint1.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisPoint1.setDescription(' This attribute is used to define the first, and lowest, noise level point. Default is -58dBmv.')
hcxRfAnalysisPoint2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 7), RfAnalysisdBmv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRfAnalysisPoint2.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisPoint2.setDescription(' This attribute is used to define the second noise level point. This value must be greater than hcxRfAnalysisPoint1. Default is -15dBmv.')
hcxRfAnalysisPoint3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 8), RfAnalysisdBmv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRfAnalysisPoint3.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisPoint3.setDescription(' This attribute is used to define the third noise level point. This value must be greater than hcxRfAnalysisPoint2. Default is -10dBmv.')
hcxRfAnalysisPoint4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 9), RfAnalysisdBmv()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRfAnalysisPoint4.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisPoint4.setDescription(' This attribute is used to define the final noise level point. This value must be greater than hcxRfAnalysisPoint3. Default is -5dBmv.')
hcxRfAnalysisBin1Count = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRfAnalysisBin1Count.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisBin1Count.setDescription(' This attribute respresents the number of noise samples with levels between hcxRfAnalysisPoint1 and hcxRfAnalysisPoint2.')
hcxRfAnalysisBin2Count = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRfAnalysisBin2Count.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisBin2Count.setDescription(' This attribute respresents the number of noise samples with levels between hcxRfAnalysisPoint2 and hcxRfAnalysisPoint3.')
hcxRfAnalysisBin3Count = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxRfAnalysisBin3Count.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisBin3Count.setDescription(' This attribute respresents the number of noise samples with levels between hcxRfAnalysisPoint3 and hcxRfAnalysisPoint4.')
hcxRfAnalysisClearCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 37, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxRfAnalysisClearCount.setStatus('current')
if mibBuilder.loadTexts: hcxRfAnalysisClearCount.setDescription(' This attribute is used to clear the three RF analysis counts.')
mibBuilder.exportSymbols("COM21-HCXRX-MIB", hcxRpmCurrMinRxCells=hcxRpmCurrMinRxCells, hcxRpmLinkErrClear=hcxRpmLinkErrClear, hcxRpmPrevMeanNoise=hcxRpmPrevMeanNoise, hcxRpmIPortShelfId=hcxRpmIPortShelfId, hcxRfAnalysisPoint4=hcxRfAnalysisPoint4, hcxPortCurrMinUncorrFecHecCells=hcxPortCurrMinUncorrFecHecCells, hcxRpmIPortConfigState=hcxRpmIPortConfigState, hcxPortCurrMeanNoise=hcxPortCurrMeanNoise, hcxStatsClearStats=hcxStatsClearStats, hcxRfAnalysisBin2Count=hcxRfAnalysisBin2Count, hcxRpmIPortSlotId=hcxRpmIPortSlotId, com21HcxRfAnalysisTable=com21HcxRfAnalysisTable, hcxRpmRatioThresPeriod=hcxRpmRatioThresPeriod, hcxRfAnalysisRpmPortId=hcxRfAnalysisRpmPortId, hcxRfAnalysisBin1Count=hcxRfAnalysisBin1Count, hcxUpFaultStatusLed=hcxUpFaultStatusLed, hcxAcquisitionEnable=hcxAcquisitionEnable, hcxPortPrevMeanNoise=hcxPortPrevMeanNoise, hcxUpstreamSerialNumber=hcxUpstreamSerialNumber, hcxCorrectedFecMinThres=hcxCorrectedFecMinThres, hcxPortPrevMinRxNullCells=hcxPortPrevMinRxNullCells, PrimServiceState=PrimServiceState, hcxPortCellErrRatioThres=hcxPortCellErrRatioThres, com21HcxUpstrmStatsTable=com21HcxUpstrmStatsTable, hcxPortCurrMinRxCells=hcxPortCurrMinRxCells, hcxStatsRpmIPortId=hcxStatsRpmIPortId, hcxUpstrmAltFreqA=hcxUpstrmAltFreqA, hcxRpmPrevMinRxCells=hcxRpmPrevMinRxCells, hcxRpmCellErrRatioThresTrap=hcxRpmCellErrRatioThresTrap, hcxRpmCurrMeanNoise=hcxRpmCurrMeanNoise, hcxStatsPrevMinCorrectedFec=hcxStatsPrevMinCorrectedFec, hcxPortCurrMinOverSubPeriods=hcxPortCurrMinOverSubPeriods, hcxUpstreamSlotId=hcxUpstreamSlotId, hcxRpmCurrMinCorrectedFec=hcxRpmCurrMinCorrectedFec, hcxRfAnalysisPoint2=hcxRfAnalysisPoint2, hcxUpDiagTestComplete=hcxUpDiagTestComplete, hcxUpstrmRpmSecServState=hcxUpstrmRpmSecServState, hcxRpmPrevMinUncorFecHecCells=hcxRpmPrevMinUncorFecHecCells, hcxRpmClearStats=hcxRpmClearStats, hcxRpmInvalidPhyConfig=hcxRpmInvalidPhyConfig, hcxRpmFecRatioThres=hcxRpmFecRatioThres, hcxStatsCurrMinCorFecThres=hcxStatsCurrMinCorFecThres, PYSNMP_MODULE_ID=com21HcxRx, hcxRpmCurrMinNoise=hcxRpmCurrMinNoise, hcxRxFreqHop=hcxRxFreqHop, hcxPortRatioThresPeriod=hcxPortRatioThresPeriod, com21HcxRfAnalysisEntry=com21HcxRfAnalysisEntry, hcxStatsUpstreamPortId=hcxStatsUpstreamPortId, hcxPortCorrFecRatioThres=hcxPortCorrFecRatioThres, com21HcxUpstrmPortGroup=com21HcxUpstrmPortGroup, hcxStatsCurrMinUncorFecHec=hcxStatsCurrMinUncorFecHec, com21HcxRpmStatsEntry=com21HcxRpmStatsEntry, hcxRpmPrevMaxNoise=hcxRpmPrevMaxNoise, hcxPortPrevMaxNoise=hcxPortPrevMaxNoise, hcxPortPrevMinNoise=hcxPortPrevMinNoise, com21HcxUpstrmStatsGroup=com21HcxUpstrmStatsGroup, hcxPortRealTimeMinNoise=hcxPortRealTimeMinNoise, com21HcxVciStatsGroup=com21HcxVciStatsGroup, hcxRfAnalysisPoint1=hcxRfAnalysisPoint1, hcxRpmInvalidConfClear=hcxRpmInvalidConfClear, hcxPortRealTimeMaxNoise=hcxPortRealTimeMaxNoise, hcxRpmPrevMinRxNullCells=hcxRpmPrevMinRxNullCells, hcxUpstreamBootVersion=hcxUpstreamBootVersion, hcxUpstrmAggrStuCbrRate=hcxUpstrmAggrStuCbrRate, hcxStatsUpstreamShelfId=hcxStatsUpstreamShelfId, hcxStatsCurrMinCorrectedFec=hcxStatsCurrMinCorrectedFec, hcxRpmIPortRecvPower=hcxRpmIPortRecvPower, hcxUpstrmPortShelfId=hcxUpstrmPortShelfId, hcxUpFaultStatusLedChange=hcxUpFaultStatusLedChange, hcxStatsRpmShelfId=hcxStatsRpmShelfId, hcxUpstrmActiveFreq=hcxUpstrmActiveFreq, com21HcxRpmIPortGroup=com21HcxRpmIPortGroup, com21HcxVciStatsTable=com21HcxVciStatsTable, hcxUncorFecHecMinThres=hcxUncorFecHecMinThres, hcxPortMinErrRatioCells=hcxPortMinErrRatioCells, hcxRpmPrevMinNoise=hcxRpmPrevMinNoise, hcxPortRealTimeMeanNoise=hcxPortRealTimeMeanNoise, hcxRpmCurrMinRxNullCells=hcxRpmCurrMinRxNullCells, hcxUpDiagTestAction=hcxUpDiagTestAction, hcxStatsCurrMinRxCells=hcxStatsCurrMinRxCells, hcxRpmIPortId=hcxRpmIPortId, hcxUpOperationFailure=hcxUpOperationFailure, hcxUpstrmAggrStuVoiceRate=hcxUpstrmAggrStuVoiceRate, hcxUpstrmFreqHopping=hcxUpstrmFreqHopping, hcxPortCurrMinRxNullCells=hcxPortCurrMinRxNullCells, hcxStatsRpmSlotId=hcxStatsRpmSlotId, hcxRecvPower=hcxRecvPower, hcxUpDiagTestResult=hcxUpDiagTestResult, hcxPortCurrMinNoise=hcxPortCurrMinNoise, hcxRpmCnrThres=hcxRpmCnrThres, hcxPortPrevMinRxCells=hcxPortPrevMinRxCells, hcxRpmCnrThresTrap=hcxRpmCnrThresTrap, hcxRpmRealTimeMaxNoise=hcxRpmRealTimeMaxNoise, hcxRpmTimingFault=hcxRpmTimingFault, hcxUpstrmAggrStuMaxRate=hcxUpstrmAggrStuMaxRate, hcxPortPrevMinCorrectedFec=hcxPortPrevMinCorrectedFec, hcxStatsPrevMinRxNullCells=hcxStatsPrevMinRxNullCells, hcxCorrFecRatioThres=hcxCorrFecRatioThres, hcxRfAnalysisSlotId=hcxRfAnalysisSlotId, hcxUpstreamHardwareVersion=hcxUpstreamHardwareVersion, hcxUpstreamUnitSecStateChange=hcxUpstreamUnitSecStateChange, com21HcxUpstrmStatsEntry=com21HcxUpstrmStatsEntry, hcxUpstrmPortSlotId=hcxUpstrmPortSlotId, com21HcxRpmStatsTable=com21HcxRpmStatsTable, hcxStuStatsMacAddr=hcxStuStatsMacAddr, hcxRpmCellErrRatioThres=hcxRpmCellErrRatioThres, hcxPortCurrMinCorrectedFec=hcxPortCurrMinCorrectedFec, hcxCellErrRatioThres=hcxCellErrRatioThres, hcxUpstreamUnitPrimServState=hcxUpstreamUnitPrimServState, hcxStatsPrevMinUncorFecHec=hcxStatsPrevMinUncorFecHec, hcxRpmRxPortId=hcxRpmRxPortId, hcxUpstrmRpmPrimServState=hcxUpstrmRpmPrimServState, hcxRfAnalysisClearCount=hcxRfAnalysisClearCount, hcxPortPrevMinUncorrFecHecCells=hcxPortPrevMinUncorrFecHecCells, com21HcxRpmStatsGroup=com21HcxRpmStatsGroup, hcxStatsCurrMinRxNullCells=hcxStatsCurrMinRxNullCells, hcxUpstreamPortId=hcxUpstreamPortId, hcxRfAnalysisPoint3=hcxRfAnalysisPoint3, com21HcxRpmIPortTable=com21HcxRpmIPortTable, hcxUpstreamUnitPrimStateChange=hcxUpstreamUnitPrimStateChange, hcxUpstrmAltFreqB=hcxUpstrmAltFreqB, hcxRpmCurrMinUncorFecHecCells=hcxRpmCurrMinUncorFecHecCells, hcxStatsUpstreamSlotId=hcxStatsUpstreamSlotId, hcxUpTestStatusLed=hcxUpTestStatusLed, hcxPortCnrThres=hcxPortCnrThres, hcxRpmRealTimeMinNoise=hcxRpmRealTimeMinNoise, com21HcxRfAnalysisGroup=com21HcxRfAnalysisGroup, hcxRfAnalysisShelfId=hcxRfAnalysisShelfId, hcxRpmCorrFecRatioThres=hcxRpmCorrFecRatioThres, hcxPortCurrMaxNoise=hcxPortCurrMaxNoise, hcxUpstreamUnitRestartAction=hcxUpstreamUnitRestartAction, com21HcxUpstrmPortTable=com21HcxUpstrmPortTable, hcxRpmPrevMinCorrectedFec=hcxRpmPrevMinCorrectedFec, hcxRfAnalysisControl=hcxRfAnalysisControl, hcxUpstreamGroupId=hcxUpstreamGroupId, hcxPortUpstreamUtil=hcxPortUpstreamUtil, hcxRpmRealTimeMeanNoise=hcxRpmRealTimeMeanNoise, hcxRpmMinErrRatioCells=hcxRpmMinErrRatioCells, com21HcxUpstrmPortEntry=com21HcxUpstrmPortEntry, hcxUpstreamShelfId=hcxUpstreamShelfId, hcxUpstrmRpmPrimStateChange=hcxUpstrmRpmPrimStateChange, hcxPortClearStats=hcxPortClearStats, hcxRpmCurrMaxNoise=hcxRpmCurrMaxNoise, hcxRfAnalysisBin3Count=hcxRfAnalysisBin3Count, RfAnalysisdBmv=RfAnalysisdBmv, hcxRecvFrequency=hcxRecvFrequency, hcxRfAnalysisPortId=hcxRfAnalysisPortId, com21HcxUpstrmUnitEntry=com21HcxUpstrmUnitEntry, hcxPortPrevMinOverSubPeriods=hcxPortPrevMinOverSubPeriods, hcxUpstrmRpmConnType=hcxUpstrmRpmConnType, hcxStatsPrevMinMeanSignal=hcxStatsPrevMinMeanSignal, hcxRpmIPortContSchedType=hcxRpmIPortContSchedType, com21HcxRpmIPortEntry=com21HcxRpmIPortEntry, hcxStatsRxPortId=hcxStatsRxPortId, com21HcxVciStatsEntry=com21HcxVciStatsEntry, hcxUpstreamUnitSecServState=hcxUpstreamUnitSecServState, hcxUpstrmRpmControl=hcxUpstrmRpmControl, hcxUpTestStatusLedChange=hcxUpTestStatusLedChange, hcxCnrThres=hcxCnrThres, hcxStatsCurrMinMeanSignal=hcxStatsCurrMinMeanSignal, com21HcxRx=com21HcxRx, UpstrmFreqKhz=UpstrmFreqKhz, hcxRpmTimingFaultClear=hcxRpmTimingFaultClear, hcxStatsCurrMinUncorFecThres=hcxStatsCurrMinUncorFecThres, hcxStatsPrevMinRxCells=hcxStatsPrevMinRxCells, com21HcxUpstrmUnitGroup=com21HcxUpstrmUnitGroup, hcxUpstreamUnitConfigState=hcxUpstreamUnitConfigState, hcxUpstrmAggrStuMinRate=hcxUpstrmAggrStuMinRate, hcxRpmLinkError=hcxRpmLinkError, com21HcxUpstrmUnitTable=com21HcxUpstrmUnitTable)
