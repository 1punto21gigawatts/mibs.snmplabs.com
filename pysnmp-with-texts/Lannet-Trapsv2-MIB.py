#
# PySNMP MIB module Lannet-Trapsv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Lannet-Trapsv2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:09:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
vnsPacketIPNetMask, vnsPacketMACAddress, vnsPacketDetectedIfName, lseIntPortCAMLastChange, vnsPacketExpectedIfName, vnsPacketExpectedVLAN, vnsPacketBoxAgentIP, vnsPacketIPAddress, vnsPacketDetectedVLAN = mibBuilder.importSymbols("APPLIC-MIB", "vnsPacketIPNetMask", "vnsPacketMACAddress", "vnsPacketDetectedIfName", "lseIntPortCAMLastChange", "vnsPacketExpectedIfName", "vnsPacketExpectedVLAN", "vnsPacketBoxAgentIP", "vnsPacketIPAddress", "vnsPacketDetectedVLAN")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
genGroupCascadDownStatus, genGroupId, genPortId, genPortFaultMask, chHWIntTempThresh, chHWIntTempWarning, genGroupBUPSActivityStatus, genGroupFaultMask, softRedundancyPortId1, chLntAgIntTemp, softRedundancyGroupId1, softRedundancyPortId2, softRedundancyGroupId2, softRedundancyName, genGroupCascadUpStatus, genPortFunctionalStatus, softRedundancyStatus, genPortGroupId, genGroupMPSActivityStatus = mibBuilder.importSymbols("CONFIG-MIB", "genGroupCascadDownStatus", "genGroupId", "genPortId", "genPortFaultMask", "chHWIntTempThresh", "chHWIntTempWarning", "genGroupBUPSActivityStatus", "genGroupFaultMask", "softRedundancyPortId1", "chLntAgIntTemp", "softRedundancyGroupId1", "softRedundancyPortId2", "softRedundancyGroupId2", "softRedundancyName", "genGroupCascadUpStatus", "genPortFunctionalStatus", "softRedundancyStatus", "genPortGroupId", "genGroupMPSActivityStatus")
dsx1LineStatus, = mibBuilder.importSymbols("DS1-MIB", "dsx1LineStatus")
lannet, = mibBuilder.importSymbols("GEN-MIB", "lannet")
ifAdminStatus, ifName, ifAlias, ifIndex, ifOperStatus = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus", "ifName", "ifAlias", "ifIndex", "ifOperStatus")
ipNetToMediaNetAddress, ipNetToMediaPhysAddress = mibBuilder.importSymbols("IP-MIB", "ipNetToMediaNetAddress", "ipNetToMediaPhysAddress")
ipPolicyRuleID, ipPolicyActivationEntID, ipPolicyActivationSubContext, ipPolicyAccessControlViolationTime, ipPolicyAccessControlViolationEstablished, ipPolicyAccessControlViolationSubCtxt, ipPolicyRuleDescription, ipPolicyActivationifIndex, ipPolicyListID, ipPolicyRuleListID, ipPolicyAccessControlViolationDstAddr, ipPolicyActivationList, ipPolicyAccessControlViolationL4DstPort, ipPolicyAccessControlViolationProtocol, ipPolicyAccessControlViolationEntID, ipPolicyAccessControlViolationSrcAddr, ipPolicyAccessControlViolationRuleType, ipPolicyControlSlot, ipPolicyAccessControlViolationL4SrcPort, ipPolicyAccessControlViolationIfIndex = mibBuilder.importSymbols("POLICY-MIB", "ipPolicyRuleID", "ipPolicyActivationEntID", "ipPolicyActivationSubContext", "ipPolicyAccessControlViolationTime", "ipPolicyAccessControlViolationEstablished", "ipPolicyAccessControlViolationSubCtxt", "ipPolicyRuleDescription", "ipPolicyActivationifIndex", "ipPolicyListID", "ipPolicyRuleListID", "ipPolicyAccessControlViolationDstAddr", "ipPolicyActivationList", "ipPolicyAccessControlViolationL4DstPort", "ipPolicyAccessControlViolationProtocol", "ipPolicyAccessControlViolationEntID", "ipPolicyAccessControlViolationSrcAddr", "ipPolicyAccessControlViolationRuleType", "ipPolicyControlSlot", "ipPolicyAccessControlViolationL4SrcPort", "ipPolicyAccessControlViolationIfIndex")
rmonNotificationGroup, = mibBuilder.importSymbols("RMON-MIB", "rmonNotificationGroup")
ModuleCompliance, NotificationGroup, AgentCapabilities, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "AgentCapabilities", "ObjectGroup")
warmStart, authenticationFailure, coldStart = mibBuilder.importSymbols("SNMPv2-MIB", "warmStart", "authenticationFailure", "coldStart")
Bits, ModuleIdentity, Counter32, MibIdentifier, Integer32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Gauge32, IpAddress, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Counter32", "MibIdentifier", "Integer32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Gauge32", "IpAddress", "TimeTicks", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
scGenSwitchDot1xPortMaxSuppNum, scGenLinkAggregationAutoNegResults, scGenGroupFansStatus, scGenLinkAggregationFunctionalStatus, scGenGroupDot1xSystemMaxNumSupplicant, scEthPortId, scGenPortGroupId, scGenLinkAggregationStatus, scGenGroupBUPSFansStatus, scGenPortLastIntruderSourceAddr, scGenLinkAggregationName, scGenLinkAggregationId, scGenPortDot1xMAC, scGenLinkAggregationFaultMask, scEthPortFunctionalStatus, scGenPortId, scEthPortGroupId = mibBuilder.importSymbols("XSWITCH-MIB", "scGenSwitchDot1xPortMaxSuppNum", "scGenLinkAggregationAutoNegResults", "scGenGroupFansStatus", "scGenLinkAggregationFunctionalStatus", "scGenGroupDot1xSystemMaxNumSupplicant", "scEthPortId", "scGenPortGroupId", "scGenLinkAggregationStatus", "scGenGroupBUPSFansStatus", "scGenPortLastIntruderSourceAddr", "scGenLinkAggregationName", "scGenLinkAggregationId", "scGenPortDot1xMAC", "scGenLinkAggregationFaultMask", "scEthPortFunctionalStatus", "scGenPortId", "scEthPortGroupId")
lntTraps = ModuleIdentity((1, 3, 6, 1, 4, 1, 81, 38))
if mibBuilder.loadTexts: lntTraps.setLastUpdated('200903180953Z')
if mibBuilder.loadTexts: lntTraps.setOrganization('Avaya')
if mibBuilder.loadTexts: lntTraps.setContactInfo('Pesah Spector Avaya E-Mail: pspector@avaya.com ')
if mibBuilder.loadTexts: lntTraps.setDescription('SMIv2 definition of p330/P130 traps')
lntConfigChangeEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 1))
if mibBuilder.loadTexts: lntConfigChangeEvents.setStatus('current')
if mibBuilder.loadTexts: lntConfigChangeEvents.setDescription('Groups together all configuration change related events')
lntConfigChangePrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 1, 0))
if mibBuilder.loadTexts: lntConfigChangePrefix.setStatus('current')
if mibBuilder.loadTexts: lntConfigChangePrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntConfigChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 1, 0, 1)).setObjects(("Lannet-Trapsv2-MIB", "lntConfigChangeOID"), ("Lannet-Trapsv2-MIB", "lntConfigChangeValue"))
if mibBuilder.loadTexts: lntConfigChangeEvent.setStatus('current')
if mibBuilder.loadTexts: lntConfigChangeEvent.setDescription('Notification generated in case of configuration change. List of events triggering notitication is TBD')
lntStackMasterReelection = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 1, 0, 82)).setObjects(("CONFIG-MIB", "genGroupId"))
if mibBuilder.loadTexts: lntStackMasterReelection.setStatus('current')
if mibBuilder.loadTexts: lntStackMasterReelection.setDescription('The trap should be triggered in an event that an election process leads to selection of a different module as a Stack Master')
lntSWRedundancyEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 2))
if mibBuilder.loadTexts: lntSWRedundancyEvents.setStatus('current')
if mibBuilder.loadTexts: lntSWRedundancyEvents.setDescription('Groups together all software redundancy related events')
lntSWRedundancyPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 2, 0))
if mibBuilder.loadTexts: lntSWRedundancyPrefix.setStatus('current')
if mibBuilder.loadTexts: lntSWRedundancyPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntSoftRedDelEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 2, 0, 12)).setObjects(("CONFIG-MIB", "softRedundancyStatus"))
if mibBuilder.loadTexts: lntSoftRedDelEvent.setStatus('current')
if mibBuilder.loadTexts: lntSoftRedDelEvent.setDescription('The trap notifies the manager of the deletion of the specified redundant link, which is identified by the softRedundancyId. ')
lntSoftRedNewEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 2, 0, 13)).setObjects(("CONFIG-MIB", "softRedundancyName"), ("CONFIG-MIB", "softRedundancyGroupId1"), ("CONFIG-MIB", "softRedundancyPortId1"), ("CONFIG-MIB", "softRedundancyGroupId2"), ("CONFIG-MIB", "softRedundancyPortId2"), ("CONFIG-MIB", "softRedundancyStatus"))
if mibBuilder.loadTexts: lntSoftRedNewEvent.setStatus('current')
if mibBuilder.loadTexts: lntSoftRedNewEvent.setDescription('The trap is generated on the creation of the redundant links for the specified ports. It gives the logical name of the redundant link the identification of the main and secondary ports and the status of the link. The softRedundancyId defines the instances of the above- mentioned variables. ')
lntTempratureEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 3))
if mibBuilder.loadTexts: lntTempratureEvents.setStatus('current')
if mibBuilder.loadTexts: lntTempratureEvents.setDescription('Groups together all temprature related events')
lntTempratureWarningPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 3, 0))
if mibBuilder.loadTexts: lntTempratureWarningPrefix.setStatus('current')
if mibBuilder.loadTexts: lntTempratureWarningPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntTempratureWarning = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 3, 0, 14)).setObjects(("CONFIG-MIB", "chHWIntTempWarning"), ("CONFIG-MIB", "chHWIntTempThresh"), ("CONFIG-MIB", "chLntAgIntTemp"))
if mibBuilder.loadTexts: lntTempratureWarning.setStatus('current')
if mibBuilder.loadTexts: lntTempratureWarning.setDescription('This trap notifies the management station of the internal board/enclosure temperature fluctuations. It is generated when the temperature exceeds the threshold chHWIntTempThresh. ')
lntTempratureOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 3, 0, 23)).setObjects(("CONFIG-MIB", "chHWIntTempWarning"), ("CONFIG-MIB", "chHWIntTempThresh"), ("CONFIG-MIB", "chLntAgIntTemp"))
if mibBuilder.loadTexts: lntTempratureOk.setStatus('current')
if mibBuilder.loadTexts: lntTempratureOk.setDescription('This trap notifies the management station that the internal board/enclosure temperature fluctuations situation is back to normal. ')
lntCAMChangeEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 4))
if mibBuilder.loadTexts: lntCAMChangeEvents.setStatus('current')
if mibBuilder.loadTexts: lntCAMChangeEvents.setDescription('Groups together all CAM related events')
lntCAMChangePrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 4, 0))
if mibBuilder.loadTexts: lntCAMChangePrefix.setStatus('current')
if mibBuilder.loadTexts: lntCAMChangePrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntPortCAMLastChange = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 4, 0, 22)).setObjects(("APPLIC-MIB", "lseIntPortCAMLastChange"))
if mibBuilder.loadTexts: lntPortCAMLastChange.setStatus('obsolete')
if mibBuilder.loadTexts: lntPortCAMLastChange.setDescription('This trap reports of the occurred CAM changes')
lntPSUEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 5))
if mibBuilder.loadTexts: lntPSUEvents.setStatus('current')
if mibBuilder.loadTexts: lntPSUEvents.setDescription('Groups together all Power supply related events')
lntPSUPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 5, 0))
if mibBuilder.loadTexts: lntPSUPrefix.setStatus('current')
if mibBuilder.loadTexts: lntPSUPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntMainPSUFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 5, 0, 2303)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("CONFIG-MIB", "genGroupMPSActivityStatus"))
if mibBuilder.loadTexts: lntMainPSUFlt.setStatus('current')
if mibBuilder.loadTexts: lntMainPSUFlt.setDescription('An error was reported concerning the Main Power Supply. Urgent intervention is required by the network administrator in order to replace the faulty module, or take any other necessary measures in order to ensure the uninterrupted operation of the network')
lntMainPSUOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 5, 0, 2304)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("CONFIG-MIB", "genGroupMPSActivityStatus"))
if mibBuilder.loadTexts: lntMainPSUOk.setStatus('current')
if mibBuilder.loadTexts: lntMainPSUOk.setDescription('The network device recovered after a previously reported problem in the operation of the box Main Power Supply')
lntBackupPSUFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 5, 0, 2305)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("CONFIG-MIB", "genGroupBUPSActivityStatus"))
if mibBuilder.loadTexts: lntBackupPSUFlt.setStatus('current')
if mibBuilder.loadTexts: lntBackupPSUFlt.setDescription('An error was reported concerning the Backup Power Supply. Urgent intervention is required by the network administrator in order to replace the faulty module, or take any other necessary measures in order to ensure the uninterrupted operation of the network.')
lntBackupPSUOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 5, 0, 2306)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("CONFIG-MIB", "genGroupMPSActivityStatus"))
if mibBuilder.loadTexts: lntBackupPSUOk.setStatus('current')
if mibBuilder.loadTexts: lntBackupPSUOk.setDescription('The network device recovered after a previously reported problem in the operation of the box Backup Power Supply.')
lntL3Events = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 6))
if mibBuilder.loadTexts: lntL3Events.setStatus('current')
if mibBuilder.loadTexts: lntL3Events.setDescription('Groups together routing( L3) related events.')
lntL3FaultsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 6, 0))
if mibBuilder.loadTexts: lntL3FaultsPrefix.setStatus('current')
if mibBuilder.loadTexts: lntL3FaultsPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntDuplicateIPFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 6, 0, 27)).setObjects(("IP-MIB", "ipNetToMediaPhysAddress"), ("IP-MIB", "ipNetToMediaNetAddress"))
if mibBuilder.loadTexts: lntDuplicateIPFlt.setStatus('current')
if mibBuilder.loadTexts: lntDuplicateIPFlt.setDescription('This trap reports to the Management station on Duplicate IP identification. CRP identify the new IP on the network. If it similar to one of its IP interfaces, the CRP will issue a SNMP trap, containing the MAC of the intruder.')
lntVLANViolationEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 6, 0, 28)).setObjects(("APPLIC-MIB", "vnsPacketMACAddress"), ("APPLIC-MIB", "vnsPacketIPAddress"), ("APPLIC-MIB", "vnsPacketIPNetMask"), ("APPLIC-MIB", "vnsPacketExpectedVLAN"), ("APPLIC-MIB", "vnsPacketDetectedVLAN"), ("APPLIC-MIB", "vnsPacketBoxAgentIP"))
if mibBuilder.loadTexts: lntVLANViolationEvent.setStatus('current')
if mibBuilder.loadTexts: lntVLANViolationEvent.setDescription('This trap reports to the Management station on IP VLAN violation. CRP verify the VLAN of the incoming packets. If there is any inconsistency between the configured VLAN and the VLAN number found in the IP packet, the CRP will issue a SNMP trap.')
lntARPViolationEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 6, 0, 70)).setObjects(("APPLIC-MIB", "vnsPacketMACAddress"), ("APPLIC-MIB", "vnsPacketIPAddress"), ("APPLIC-MIB", "vnsPacketIPNetMask"), ("APPLIC-MIB", "vnsPacketExpectedVLAN"), ("APPLIC-MIB", "vnsPacketDetectedVLAN"), ("APPLIC-MIB", "vnsPacketBoxAgentIP"), ("APPLIC-MIB", "vnsPacketExpectedIfName"), ("APPLIC-MIB", "vnsPacketDetectedIfName"))
if mibBuilder.loadTexts: lntARPViolationEvent.setStatus('current')
if mibBuilder.loadTexts: lntARPViolationEvent.setDescription('This trap reports to the Management station when a Sourec IP in an ARP response does not match the subnets configured on the router interface through which it has been received. The trap returns details of the offending packet, as welll as the expected vs. detected VLAN IDs and interface Names')
lntLinkEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 7))
if mibBuilder.loadTexts: lntLinkEvents.setStatus('current')
if mibBuilder.loadTexts: lntLinkEvents.setDescription('Groups together port link up/down related events.')
lntLinkEventsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 7, 0))
if mibBuilder.loadTexts: lntLinkEventsPrefix.setStatus('current')
if mibBuilder.loadTexts: lntLinkEventsPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntPortLinkDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 7, 0, 3039)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntPortLinkDownEvent.setStatus('current')
if mibBuilder.loadTexts: lntPortLinkDownEvent.setDescription('The port hardware detects loss of connectivity to an end station or to another hub or switch. This is not necessarily a fault condition, as the same signaling is reported by the port hardware in usual operational cases, for example, of a non-critical station being disconnected or turned off at the end of the work day. (Bit 7 in the genPortFaultMask set to on, genPortFunctionalStatus = rld(2) )')
lntPortLinkUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 7, 0, 3040)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntPortLinkUpEvent.setStatus('current')
if mibBuilder.loadTexts: lntPortLinkUpEvent.setDescription('The port recovered from a previously reported connectivity problem. (Bit 7 in the genPortFaultMask set to off, genPortFunctionalStatus = ok)')
lntVPortLinkDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 7, 0, 3041)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntVPortLinkDownEvent.setStatus('current')
if mibBuilder.loadTexts: lntVPortLinkDownEvent.setDescription("The port hardware detects the lack of a connection to an end station or to another hub or switch. While this may not be necessarily a fault condition, the network administrator's attention is recommended, because the port was defined as a valuable port. (Bit 7 in the genPortFaultMask set to on, genPortFunctionalStatus = rld(2))")
lntVPortLinkUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 7, 0, 3042)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntVPortLinkUpEvent.setStatus('current')
if mibBuilder.loadTexts: lntVPortLinkUpEvent.setDescription('Acknowledegs link up condition on a valuable port. (Bit 7 in the genPortFaultMask set to off, genPortFunctionalStatus = ok)')
lntLAGEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 8))
if mibBuilder.loadTexts: lntLAGEvents.setStatus('current')
if mibBuilder.loadTexts: lntLAGEvents.setDescription('Groups together LAG related events.')
lntLAGPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 8, 0))
if mibBuilder.loadTexts: lntLAGPrefix.setStatus('current')
if mibBuilder.loadTexts: lntLAGPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntLAGConnLostFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 8, 0, 44)).setObjects(("XSWITCH-MIB", "scGenLinkAggregationFaultMask"), ("XSWITCH-MIB", "scGenLinkAggregationId"), ("XSWITCH-MIB", "scGenLinkAggregationName"), ("XSWITCH-MIB", "scGenLinkAggregationFunctionalStatus"))
if mibBuilder.loadTexts: lntLAGConnLostFlt.setStatus('current')
if mibBuilder.loadTexts: lntLAGConnLostFlt.setDescription('The trap reports on a LAG connection lost. It is sent when scGenLinkAggregationFunctionalStatus changed to fail (2). ')
lntLAGConnLostOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 8, 0, 46)).setObjects(("XSWITCH-MIB", "scGenLinkAggregationFaultMask"), ("XSWITCH-MIB", "scGenLinkAggregationId"), ("XSWITCH-MIB", "scGenLinkAggregationName"), ("XSWITCH-MIB", "scGenLinkAggregationFunctionalStatus"))
if mibBuilder.loadTexts: lntLAGConnLostOk.setStatus('current')
if mibBuilder.loadTexts: lntLAGConnLostOk.setDescription('The trap reports that the LAG connection lost was cleared. It is sent when scGenLinkAggregationFunctionalStatus changed from fail(2) to to ok(1). ')
lntLAGPartialConnLostFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 8, 0, 48)).setObjects(("XSWITCH-MIB", "scGenLinkAggregationFaultMask"), ("XSWITCH-MIB", "scGenLinkAggregationId"), ("XSWITCH-MIB", "scGenLinkAggregationName"), ("XSWITCH-MIB", "scGenLinkAggregationFunctionalStatus"))
if mibBuilder.loadTexts: lntLAGPartialConnLostFlt.setStatus('current')
if mibBuilder.loadTexts: lntLAGPartialConnLostFlt.setDescription('The trap reports on a LAG partial connection, where some of the ports are in fault but some are ok. It is sent when scGenLinkAggregationFunctionalStatus changed to partialFail (3).')
lntLAGPartialConnLostOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 8, 0, 50)).setObjects(("XSWITCH-MIB", "scGenLinkAggregationFaultMask"), ("XSWITCH-MIB", "scGenLinkAggregationId"), ("XSWITCH-MIB", "scGenLinkAggregationName"), ("XSWITCH-MIB", "scGenLinkAggregationFunctionalStatus"))
if mibBuilder.loadTexts: lntLAGPartialConnLostOk.setStatus('current')
if mibBuilder.loadTexts: lntLAGPartialConnLostOk.setDescription('The trap reports that the LAG partial connection was cleared. It is sent when scGenLinkAggregationFunctionalStatus changed from partialFail (3)to to ok(1). ')
lntLAGAutoNegFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 8, 0, 52)).setObjects(("XSWITCH-MIB", "scGenLinkAggregationFaultMask"), ("XSWITCH-MIB", "scGenLinkAggregationId"), ("XSWITCH-MIB", "scGenLinkAggregationName"), ("XSWITCH-MIB", "scGenLinkAggregationAutoNegResults"))
if mibBuilder.loadTexts: lntLAGAutoNegFlt.setStatus('current')
if mibBuilder.loadTexts: lntLAGAutoNegFlt.setDescription('The trap reports on a auto-negotiation results on the LAG ports. It is sent when scGenLinkAggregationAutoNegResults changed to autoNegInconsistantResults (2).')
lntLAGAutoNegOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 8, 0, 54)).setObjects(("XSWITCH-MIB", "scGenLinkAggregationFaultMask"), ("XSWITCH-MIB", "scGenLinkAggregationId"), ("XSWITCH-MIB", "scGenLinkAggregationName"), ("XSWITCH-MIB", "scGenLinkAggregationAutoNegResults"))
if mibBuilder.loadTexts: lntLAGAutoNegOk.setStatus('current')
if mibBuilder.loadTexts: lntLAGAutoNegOk.setDescription('The trap reports that the auto-negotiation results on the LAG ports was cleared. It is sent when this trap is enabled and when scGenLinkAggregationAutoNegResults changed to ok(1).')
lntLAGDeleteEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 8, 0, 56)).setObjects(("XSWITCH-MIB", "scGenLinkAggregationId"), ("XSWITCH-MIB", "scGenLinkAggregationName"), ("XSWITCH-MIB", "scGenLinkAggregationStatus"))
if mibBuilder.loadTexts: lntLAGDeleteEvent.setStatus('current')
if mibBuilder.loadTexts: lntLAGDeleteEvent.setDescription('The trap notifies the manager of the deletion of the specified LAG, which is identified by the scGenLinkAggregationId.')
lntLAGCreateEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 8, 0, 58)).setObjects(("XSWITCH-MIB", "scGenLinkAggregationId"), ("XSWITCH-MIB", "scGenLinkAggregationName"), ("XSWITCH-MIB", "scGenLinkAggregationStatus"))
if mibBuilder.loadTexts: lntLAGCreateEvent.setStatus('current')
if mibBuilder.loadTexts: lntLAGCreateEvent.setDescription('The trap is generated on the creation of a new LAG, which is identified by the scGenLinkAggregationId.')
lntFansEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 9))
if mibBuilder.loadTexts: lntFansEvents.setStatus('current')
if mibBuilder.loadTexts: lntFansEvents.setDescription('Groups together fans related events.')
lntFansPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 9, 0))
if mibBuilder.loadTexts: lntFansPrefix.setStatus('current')
if mibBuilder.loadTexts: lntFansPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntMainFansFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 9, 0, 2307)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("XSWITCH-MIB", "scGenGroupFansStatus"))
if mibBuilder.loadTexts: lntMainFansFlt.setStatus('current')
if mibBuilder.loadTexts: lntMainFansFlt.setDescription("The trap reports the failure of one (or more) module's Fan. It is sent when scGenGroupFansStatus changed to oneFanFailed(2)")
lntMainFansOK = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 9, 0, 2308)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("XSWITCH-MIB", "scGenGroupFansStatus"))
if mibBuilder.loadTexts: lntMainFansOK.setStatus('current')
if mibBuilder.loadTexts: lntMainFansOK.setDescription("The trap reports that the module's Fan failure was cleared. It is sent when this trap is enabled and when scGenGroupFansStatus changed from oneFanFailed(2) to allFansOK(1). ")
lntBackupFansFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 9, 0, 2309)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("XSWITCH-MIB", "scGenGroupBUPSFansStatus"))
if mibBuilder.loadTexts: lntBackupFansFlt.setStatus('current')
if mibBuilder.loadTexts: lntBackupFansFlt.setDescription("The trap reports the failure of one (or more) BUPS module's Fan. It is sent when scGenGroupBUPSFansStatus changed to oneFanFailed(2). ")
lntBackupFansOK = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 9, 0, 2310)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("XSWITCH-MIB", "scGenGroupBUPSFansStatus"))
if mibBuilder.loadTexts: lntBackupFansOK.setStatus('current')
if mibBuilder.loadTexts: lntBackupFansOK.setDescription("The trap reports that the BUPS module's Fan failure was cleared. It is sent when this trap is enabled and when scGenGroupBUPSFansStatus changed from oneFanFailed(2) to allFansOK(1). ")
lntCascadeEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 10))
if mibBuilder.loadTexts: lntCascadeEvents.setStatus('current')
if mibBuilder.loadTexts: lntCascadeEvents.setDescription('Groups together stakc module cascading related events.')
lntCascadeFaultsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 10, 0))
if mibBuilder.loadTexts: lntCascadeFaultsPrefix.setStatus('current')
if mibBuilder.loadTexts: lntCascadeFaultsPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntCascadUpConnFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 10, 0, 2315)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("CONFIG-MIB", "genGroupCascadUpStatus"))
if mibBuilder.loadTexts: lntCascadUpConnFlt.setStatus('current')
if mibBuilder.loadTexts: lntCascadUpConnFlt.setDescription('The trap reports on a cascading up connection lost. It is sent when genGroupCascadUpStatus changed to rld(2). ')
lntCascadUpConnOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 10, 0, 2316)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("CONFIG-MIB", "genGroupCascadUpStatus"))
if mibBuilder.loadTexts: lntCascadUpConnOk.setStatus('current')
if mibBuilder.loadTexts: lntCascadUpConnOk.setDescription('The trap reports that the cascading up connection lost was cleared. It is sent when genGroupCascadUpStatus changed from rld(2) to ok(1). ')
lntCascadDownConnFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 10, 0, 2317)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("CONFIG-MIB", "genGroupCascadDownStatus"))
if mibBuilder.loadTexts: lntCascadDownConnFlt.setStatus('current')
if mibBuilder.loadTexts: lntCascadDownConnFlt.setDescription('The trap reports on a cascading down connection lost. It is sent when genGroupCascadDownStatus changed to rld(2).')
lntCascadDownConnOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 10, 0, 2318)).setObjects(("CONFIG-MIB", "genGroupFaultMask"), ("CONFIG-MIB", "genGroupId"), ("CONFIG-MIB", "genGroupCascadDownStatus"))
if mibBuilder.loadTexts: lntCascadDownConnOk.setStatus('current')
if mibBuilder.loadTexts: lntCascadDownConnOk.setDescription('The trap reports that the cascading down connection lost was cleared. It is sent when genGroupCascadDownStatus changed from rld(2) to ok(1).')
lntPolicyEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 11))
if mibBuilder.loadTexts: lntPolicyEvents.setStatus('current')
if mibBuilder.loadTexts: lntPolicyEvents.setDescription('Groups together policy related events.')
lntPolicyPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 11, 0))
if mibBuilder.loadTexts: lntPolicyPrefix.setStatus('current')
if mibBuilder.loadTexts: lntPolicyPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntPolicyChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 11, 0, 60)).setObjects(("POLICY-MIB", "ipPolicyActivationEntID"), ("POLICY-MIB", "ipPolicyActivationList"), ("POLICY-MIB", "ipPolicyActivationifIndex"), ("POLICY-MIB", "ipPolicyActivationSubContext"))
if mibBuilder.loadTexts: lntPolicyChangeEvent.setStatus('current')
if mibBuilder.loadTexts: lntPolicyChangeEvent.setDescription('The trap reports a change in the active list specific for a policy-enabled box or module')
lntPolicyAccessControlListLvlRuleTrap = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 11, 0, 62)).setObjects(("POLICY-MIB", "ipPolicyAccessControlViolationEntID"), ("POLICY-MIB", "ipPolicyAccessControlViolationSrcAddr"), ("POLICY-MIB", "ipPolicyAccessControlViolationDstAddr"), ("POLICY-MIB", "ipPolicyAccessControlViolationProtocol"), ("POLICY-MIB", "ipPolicyAccessControlViolationL4SrcPort"), ("POLICY-MIB", "ipPolicyAccessControlViolationL4DstPort"), ("POLICY-MIB", "ipPolicyAccessControlViolationEstablished"), ("POLICY-MIB", "ipPolicyAccessControlViolationRuleType"), ("POLICY-MIB", "ipPolicyListID"), ("POLICY-MIB", "ipPolicyAccessControlViolationIfIndex"), ("POLICY-MIB", "ipPolicyAccessControlViolationSubCtxt"), ("POLICY-MIB", "ipPolicyAccessControlViolationTime"))
if mibBuilder.loadTexts: lntPolicyAccessControlListLvlRuleTrap.setStatus('current')
if mibBuilder.loadTexts: lntPolicyAccessControlListLvlRuleTrap.setDescription("This trap reports to the Management station when a list-level Policy rule (e.g., ipPolicyListIpOptionOperation) specifies an operation that includes a 'notify' action. The trap includes in its varbind information about: - The entity (slot) where the event occurred, - The type of the list-level rule that was matched, - The quintuplet that identifies the matching packet. - The policy interface on which the event occurred. - The policy interface sub-context (e.g., the direction) - sysUpTime at the time the event occured. A management application would display this trap and the relevant information in a log entry. This trap will not be sent at intervals smaller than one minute for identical information in the varbinds list variables. ")
lntPolicyAccessControlViolationFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 11, 0, 64)).setObjects(("POLICY-MIB", "ipPolicyAccessControlViolationEntID"), ("POLICY-MIB", "ipPolicyAccessControlViolationSrcAddr"), ("POLICY-MIB", "ipPolicyAccessControlViolationDstAddr"), ("POLICY-MIB", "ipPolicyAccessControlViolationProtocol"), ("POLICY-MIB", "ipPolicyAccessControlViolationL4SrcPort"), ("POLICY-MIB", "ipPolicyAccessControlViolationL4DstPort"), ("POLICY-MIB", "ipPolicyAccessControlViolationEstablished"), ("POLICY-MIB", "ipPolicyRuleID"), ("POLICY-MIB", "ipPolicyRuleListID"), ("POLICY-MIB", "ipPolicyAccessControlViolationIfIndex"), ("POLICY-MIB", "ipPolicyAccessControlViolationSubCtxt"), ("POLICY-MIB", "ipPolicyAccessControlViolationTime"), ("POLICY-MIB", "ipPolicyRuleDescription"))
if mibBuilder.loadTexts: lntPolicyAccessControlViolationFlt.setStatus('current')
if mibBuilder.loadTexts: lntPolicyAccessControlViolationFlt.setDescription('This trap reports to the Management station on IP PolicyAccess Control violation. The trap includes in its varbind information about the slot where the event occurred, The id of the rule that was violated in the current rules table, and the quintuplet that identifies the faulty packet. A management application would display this trap and the relevant information in a log entry. This trap will not be sent at intervals smaller than one minute for identical information in the varbinds list variables ')
lntEthPortFaultEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 12))
if mibBuilder.loadTexts: lntEthPortFaultEvents.setStatus('current')
if mibBuilder.loadTexts: lntEthPortFaultEvents.setDescription('Groups together Etherent port related events.')
lntEthPortFaultPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 12, 0))
if mibBuilder.loadTexts: lntEthPortFaultPrefix.setStatus('current')
if mibBuilder.loadTexts: lntEthPortFaultPrefix.setDescription('The next to last sub- identifier in the name of any newly-defined notification must have the value zero')
lntEthPortAutoNegotiationFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3001)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntEthPortAutoNegotiationFlt.setStatus('current')
if mibBuilder.loadTexts: lntEthPortAutoNegotiationFlt.setDescription('The port recovered from a previously reported connectivity problem. (Bit 4 in the genPortFaultMask set to off, scEthPortAutoNegotiationStatus = ok)')
lntEthPortAutoNegotiationOK = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3002)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntEthPortAutoNegotiationOK.setStatus('current')
if mibBuilder.loadTexts: lntEthPortAutoNegotiationOK.setDescription('The port recovered from a previously reported connectivity problem. (Bit 4 in the genPortFaultMask set to off, scEthPortAutoNegotiationStatus = ok)')
lntPortFEFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3005)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntPortFEFlt.setStatus('current')
if mibBuilder.loadTexts: lntPortFEFlt.setDescription('The port hardware detects a loss of connectivity reported by the remote extremity of the link connected to the port. This indication shows that though the cabling is at least partially operative, the information transmitted through the port may not arrive in all its integrity at the other side of the link. It is recommended that the network administrator check the link in order to detect the origin of the problem and prevent its aggravation. (Bit 10 in the genPortFaultMask set to on) ')
lntPortFEOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3006)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntPortFEOk.setStatus('current')
if mibBuilder.loadTexts: lntPortFEOk.setDescription('A previously detected problem in the integrity of the link, reported by the remote link circuitry was solved. (Bit 10 in the genPortFaultMask set to off, scEthPortFunctionalStatus = ok(1)) ')
lntVPortFEFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3015)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntVPortFEFlt.setStatus('current')
if mibBuilder.loadTexts: lntVPortFEFlt.setDescription('The valuable port hardware detects a loss of connectivity reported by the remote extremity of the link connected to the port. This indication shows that though the cabling is at least partially operative, the information transmitted through the port may not arrive in all its integrity at the other side of the link. It is recommended that the network administrator check the link in order to detect the origin of the problem and prevent its aggravation. (Bit 10 in the genPortFaultMask set to on, scEthPortFunctionalStatus = fail(2))')
lntVPortFEOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3016)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntVPortFEOk.setStatus('current')
if mibBuilder.loadTexts: lntVPortFEOk.setDescription('A previously detected problem in the integrity of the link to a valuable port, reported by the remote link circuitry was solved. (Bit 10 in the genPortFaultMask set to off, scEthPortFunctionalStatus = ok(1))')
lntPortAutoPartFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3023)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntPortAutoPartFlt.setStatus('current')
if mibBuilder.loadTexts: lntPortAutoPartFlt.setDescription('The port on the module reports the activation of the auto partition mechanism. This event means that an excessive number of errors occurred on the port, and the port is disconnected from the repeater or switch unit. The network administrator should check the segment and/or end stations connected to the port for hardware or misconfiguration problems. (Bit 1 in the genPortFaultMask set to on, genPortFunctionalStatus = partition(8)) ')
lntPortAutoPartOk = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3024)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntPortAutoPartOk.setStatus('current')
if mibBuilder.loadTexts: lntPortAutoPartOk.setDescription('The port recovered from a previously reported auto partition fault. (Bit 1 in the genPortFaultMask set to off, genPortFunctionalStatus = ok)')
lntVPortAutoPartFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3025)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntVPortAutoPartFlt.setStatus('current')
if mibBuilder.loadTexts: lntVPortAutoPartFlt.setDescription('The valuable port on the module reports the activation of the autopartition mechanism. This event means that an excessive number of errors occurred on the port, and the port is disconnected from the repeater or switch unit. The network administrator should check the segment and/or end stations connected to the port for hardware or misconfiguration problems. (Bit 1 in the genPortFaultMask set to on, genPortFunctionalStatus = partition(8))')
lntVPortAutoPartOK = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3026)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntVPortAutoPartOK.setStatus('current')
if mibBuilder.loadTexts: lntVPortAutoPartOK.setDescription('The valuable port recovered from a previously reported auto partition fault. (Bit 1 in the genPortFaultMask set to off, genPortFunctionalStatus = ok)')
lntEthVPortAutoNegotiationFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3031)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntEthVPortAutoNegotiationFlt.setStatus('current')
if mibBuilder.loadTexts: lntEthVPortAutoNegotiationFlt.setDescription("The valuable port hardware detects the lack of a connection to an end station or to another hub or switch. While this is may not be necessarily a fault condition, the network administrator's attention is recommended, because the port was defined as a port. (Bit 4 in the genPortFaultMask set to on, scEthPortAutoNegotiationStatus = fail(2)) ")
lntEthVPortAutoNegotiationOK = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3032)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntEthVPortAutoNegotiationOK.setStatus('current')
if mibBuilder.loadTexts: lntEthVPortAutoNegotiationOK.setDescription("The port hardware detects the lack of a connection to an end station or to another hub or switch. While this is may not be necessarily a fault condition, the network administrator's attention is recommended, because the port was defined as a valuable port. (Bit 4 in the genPortFaultMask set to on, scEthPortAutoNegotiationStatus = fail(2))")
lntPortInlinePowerFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3933)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntPortInlinePowerFlt.setStatus('current')
if mibBuilder.loadTexts: lntPortInlinePowerFlt.setDescription('The Inline Power (Power-over-Ethernet) port hardware reports that the PD (Powered device) connected to that port is not receiving Inline Power due to a fault condition. (Bit 37 in the genPortFaultMask set to on, pethPsePortDetectionStatus = fault(4) or otherfault(6))')
lntPortInlinePowerOK = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 12, 0, 3934)).setObjects(("CONFIG-MIB", "genPortFaultMask"), ("CONFIG-MIB", "genPortGroupId"), ("CONFIG-MIB", "genPortId"))
if mibBuilder.loadTexts: lntPortInlinePowerOK.setStatus('current')
if mibBuilder.loadTexts: lntPortInlinePowerOK.setDescription('The Inline Power (Power-over-Ethernet) port hardware reports that the PD (Powered device) connected to that port is not in a fault condition. It may or not be delievering Inline Power to the PD. (Bit 37 in the genPortFaultMask set to on, pethPsePortDetectionStatus = fault(4) or otherfault(6))')
lntSecurityEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 13))
if mibBuilder.loadTexts: lntSecurityEvents.setStatus('current')
if mibBuilder.loadTexts: lntSecurityEvents.setDescription('Description.')
lntSecurityPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 13, 0))
if mibBuilder.loadTexts: lntSecurityPrefix.setStatus('current')
if mibBuilder.loadTexts: lntSecurityPrefix.setDescription('Description.')
lntUnAuthAccessEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 68)).setObjects(("Lannet-Trapsv2-MIB", "lntUnauthUserName"), ("Lannet-Trapsv2-MIB", "lntUnauthIpAddress"), ("Lannet-Trapsv2-MIB", "lntUnauthProtocol"))
if mibBuilder.loadTexts: lntUnAuthAccessEvent.setStatus('current')
if mibBuilder.loadTexts: lntUnAuthAccessEvent.setDescription('Notification on unauthorized login attempts. o For CLI and SNMP login failures: Both SNMP SSH and WEB management interfaces shall identify situation and alert. The reported information should include wrong user name, host name and IP address of remote host. Passwords is not reported because of the possibility to reveal password. o For pre-shared-key (PSK) authentication failure in IKE: * lntUnauthUserName - - In IKE AM: the ID sent by the remote peer in the ID payload. - In IKE MM: the ID associated with the remote peer IP in the running configuration. * lntUnauthIpAddress - the source IP of the packet sent by the remote peer. * lntUnauthProtocol - lntIKEAccess(500)')
lntMACSecurityEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 104)).setObjects(("XSWITCH-MIB", "scGenPortLastIntruderSourceAddr"), ("XSWITCH-MIB", "scGenPortGroupId"), ("XSWITCH-MIB", "scGenPortId"))
if mibBuilder.loadTexts: lntMACSecurityEvent.setStatus('current')
if mibBuilder.loadTexts: lntMACSecurityEvent.setDescription("This trap notifies the management station of the security violation. It gives the slot number of the board, the port on the board and the source MAC address extracted from the frame that has violated the security policy. The slot and the port numbers, genPortGroupId and genPortId respectively, define an instance of the appropriate source address.For the ring security violation the trap contains the ring ID and the intruder's MAC address. The trap was previously assigned the specific number 11. ")
lntUnknownHostCopyEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 1002)).setObjects(("Lannet-Trapsv2-MIB", "lntUnauthUserName"), ("Lannet-Trapsv2-MIB", "lntUnauthIpAddress"), ("Lannet-Trapsv2-MIB", "lntSCPStrictCheckingMode"))
if mibBuilder.loadTexts: lntUnknownHostCopyEvent.setStatus('current')
if mibBuilder.loadTexts: lntUnknownHostCopyEvent.setDescription('Event generated on attempt to accomplish download/upload file transfer using SCP/SFTP protocol to unknown host. ')
lntAccountLockoutEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 1003)).setObjects(("Lannet-Trapsv2-MIB", "lntUnauthUserName"), ("Lannet-Trapsv2-MIB", "lntUnauthIpAddress"), ("Lannet-Trapsv2-MIB", "lntUnauthProtocol"))
if mibBuilder.loadTexts: lntAccountLockoutEvent.setStatus('current')
if mibBuilder.loadTexts: lntAccountLockoutEvent.setDescription('After configurable number of failed attempts to authenticate a user, device penalized by locking them out for a pre-specified amount of time.')
lntLicenseStartupValidationFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 1004)).setObjects(("Lannet-Trapsv2-MIB", "lntLicenseErrorCodes"))
if mibBuilder.loadTexts: lntLicenseStartupValidationFlt.setStatus('current')
if mibBuilder.loadTexts: lntLicenseStartupValidationFlt.setDescription('At start-up, the product validates the license file scheme and the license signature. On inconsistency the product issues this tarp and then returns to the factory-default feature activation settings.')
lntLicenseDownloadValidationFlt = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 1005)).setObjects(("Lannet-Trapsv2-MIB", "lntLicenseErrorCodes"))
if mibBuilder.loadTexts: lntLicenseDownloadValidationFlt.setStatus('current')
if mibBuilder.loadTexts: lntLicenseDownloadValidationFlt.setDescription('During the license file download, the product validates the license file scheme and the license signature. On inconsistency the product aborts download process, sends this notification and stay with the existing feature activation settings')
lntDot1xMaxAuthRateReachedEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 1006)).setObjects(("XSWITCH-MIB", "scGenPortGroupId"))
if mibBuilder.loadTexts: lntDot1xMaxAuthRateReachedEvent.setStatus('current')
if mibBuilder.loadTexts: lntDot1xMaxAuthRateReachedEvent.setDescription('This trap notifies the management station that maximum rate of 802.1x authentications has been reached in module $1 . ')
lntDot1xAuthFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 1007)).setObjects(("XSWITCH-MIB", "scGenPortDot1xMAC"), ("XSWITCH-MIB", "scGenPortGroupId"), ("XSWITCH-MIB", "scGenPortId"), ("Lannet-Trapsv2-MIB", "scGenPortDot1xFailureString"))
if mibBuilder.loadTexts: lntDot1xAuthFailureEvent.setStatus('current')
if mibBuilder.loadTexts: lntDot1xAuthFailureEvent.setDescription('This trap notifies the management station that device with MAC address $1 failed to authenticate module/port $2/$3 due to $4 ')
lntDot1xMaxAuthModuleNumReachedEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 1008)).setObjects(("XSWITCH-MIB", "scGenGroupDot1xSystemMaxNumSupplicant"), ("XSWITCH-MIB", "scGenPortGroupId"))
if mibBuilder.loadTexts: lntDot1xMaxAuthModuleNumReachedEvent.setStatus('current')
if mibBuilder.loadTexts: lntDot1xMaxAuthModuleNumReachedEvent.setDescription('This trap notifies the management station that Authentication denied due to maximum number of authentication of 802.1x $1 per module $2 has been reached. ')
lntDot1xMaxAuthPortNumReachedEvent = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 13, 0, 1009)).setObjects(("XSWITCH-MIB", "scGenSwitchDot1xPortMaxSuppNum"), ("XSWITCH-MIB", "scGenPortGroupId"), ("XSWITCH-MIB", "scGenPortId"))
if mibBuilder.loadTexts: lntDot1xMaxAuthPortNumReachedEvent.setStatus('current')
if mibBuilder.loadTexts: lntDot1xMaxAuthPortNumReachedEvent.setDescription('This trap notifies the management station that Authentication denied due to maximum number of authentication of 802.1x $1 per module/port $2/$3 has been reached. ')
lntNotificationVarbinds = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 14))
if mibBuilder.loadTexts: lntNotificationVarbinds.setStatus('current')
if mibBuilder.loadTexts: lntNotificationVarbinds.setDescription('Description.')
lntConfigChangeValue = MibScalar((1, 3, 6, 1, 4, 1, 81, 38, 14, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lntConfigChangeValue.setStatus('current')
if mibBuilder.loadTexts: lntConfigChangeValue.setDescription('The text formatted value of MIB object at the time change configuration has occured')
lntConfigChangeOID = MibScalar((1, 3, 6, 1, 4, 1, 81, 38, 14, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lntConfigChangeOID.setStatus('current')
if mibBuilder.loadTexts: lntConfigChangeOID.setDescription('This variable used to signal the OID of MIB object that had changed its status and triggered the Change Configuration event ')
lntUnauthUserName = MibScalar((1, 3, 6, 1, 4, 1, 81, 38, 14, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lntUnauthUserName.setStatus('current')
if mibBuilder.loadTexts: lntUnauthUserName.setDescription("The name of the user who's attempt to access device was identified as unauthorized. ")
lntUnauthIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 81, 38, 14, 4), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lntUnauthIpAddress.setStatus('current')
if mibBuilder.loadTexts: lntUnauthIpAddress.setDescription('The IP address of access violating station')
lntUnauthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 81, 38, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(22, 23, 80, 161, 443, 500, 6889, 6890, 6891))).clone(namedValues=NamedValues(("lntSSHAccess", 22), ("lntTELNETAccess", 23), ("lntHTTPAccess", 80), ("lntSNMPAccess", 161), ("lntHTTPSAccess", 443), ("lntIKEAccess", 500), ("lntRASAccess", 6889), ("lntConsoleAccess", 6890), ("lntPPPAccess", 6891)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lntUnauthProtocol.setStatus('current')
if mibBuilder.loadTexts: lntUnauthProtocol.setDescription('The management protocol employed for the unauthorized access - lntSSHAccess(22) -- SSH protocol lntTELNETAccess(23), --Telnet protocol lntHTTPAccess(80), -- HTTP protocol lntSNMPAccess(161), -- SNMP protocol lntHTTPSAccess(443), -- HTTPS protocol over TLS sockets lntIKEAccess(500), -- IKE protocol - PSK authentication failure lntRASAccess(6889), -- RAS access over dial-up connection lntConsoleAccess(6890), -- Access from the Console port lntPPPAccess(6891) -- Access to PPP over modem ')
lntSCPStrictCheckingMode = MibScalar((1, 3, 6, 1, 4, 1, 81, 38, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("ask", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lntSCPStrictCheckingMode.setStatus('current')
if mibBuilder.loadTexts: lntSCPStrictCheckingMode.setDescription('The SCP setting on validity of the public key reported by the SCP server. If strict setting is yes - then new keys not registered already in hosts file will be discard and copy operation is aborted. No - device registers new hosts and proceded with copy operation, ask - requires interactive sessions with the operator ( must fail the SNMP non interactive request)')
lntLicenseErrorCodes = MibScalar((1, 3, 6, 1, 4, 1, 81, 38, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lntSerialNumMismatch", 1), ("lntInvalidSignature", 2), ("lntPlatformTypeMismatch", 3), ("lntInvalidLicFeture", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lntLicenseErrorCodes.setStatus('current')
if mibBuilder.loadTexts: lntLicenseErrorCodes.setDescription('Product reports following errors if license validations fails lntSerialNumMismatch(1), - Serial number mismatch between license file and gateway hardware lntInvalidSignature(2), - Invalid digital signature on the license file lntPlatformTypeMismatch(3), - Mismatch between product platform type defined in license file (for example G250) and the gateway type (e.g. G350). lntInvalidLicFeture(4) - Invalid feature setting.')
scGenPortDot1xFailureString = MibScalar((1, 3, 6, 1, 4, 1, 81, 38, 14, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scGenPortDot1xFailureString.setStatus('current')
if mibBuilder.loadTexts: scGenPortDot1xFailureString.setDescription('The text formatted value of MIB object at the time when 802.1x authentication is failed.')
lntWanEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 15))
if mibBuilder.loadTexts: lntWanEvents.setStatus('current')
if mibBuilder.loadTexts: lntWanEvents.setDescription('Description.')
lntWanPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 81, 38, 15, 0))
if mibBuilder.loadTexts: lntWanPrefix.setStatus('current')
if mibBuilder.loadTexts: lntWanPrefix.setDescription('Description.')
lntWanPhysicalAlarmOn = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 15, 0, 30)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("DS1-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: lntWanPhysicalAlarmOn.setStatus('current')
if mibBuilder.loadTexts: lntWanPhysicalAlarmOn.setDescription('Description.')
lntWanPhysicalAlarmOff = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 15, 0, 31)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("DS1-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: lntWanPhysicalAlarmOff.setStatus('current')
if mibBuilder.loadTexts: lntWanPhysicalAlarmOff.setDescription('Description.')
lntWanLocalAlarmOn = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 15, 0, 32)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("DS1-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: lntWanLocalAlarmOn.setStatus('current')
if mibBuilder.loadTexts: lntWanLocalAlarmOn.setDescription('Description.')
lntWanLocalAlarmOff = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 15, 0, 33)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("DS1-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: lntWanLocalAlarmOff.setStatus('current')
if mibBuilder.loadTexts: lntWanLocalAlarmOff.setDescription('Description.')
lntWanRemoteAlarmOn = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 15, 0, 34)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("DS1-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: lntWanRemoteAlarmOn.setStatus('current')
if mibBuilder.loadTexts: lntWanRemoteAlarmOn.setDescription('Description.')
lntWanRemoteAlarmOff = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 15, 0, 35)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("DS1-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: lntWanRemoteAlarmOff.setStatus('current')
if mibBuilder.loadTexts: lntWanRemoteAlarmOff.setDescription('Description.')
lntWanMinorAlarmOn = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 15, 0, 36)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("DS1-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: lntWanMinorAlarmOn.setStatus('current')
if mibBuilder.loadTexts: lntWanMinorAlarmOn.setDescription('Description.')
lntWanMinorAlarmOff = NotificationType((1, 3, 6, 1, 4, 1, 81, 38, 15, 0, 37)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifName"), ("IF-MIB", "ifAlias"), ("DS1-MIB", "dsx1LineStatus"))
if mibBuilder.loadTexts: lntWanMinorAlarmOff.setStatus('current')
if mibBuilder.loadTexts: lntWanMinorAlarmOff.setDescription('Description.')
lntNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 38, 10007))
lntConfigChangeVarbinds = ObjectGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 1)).setObjects(("Lannet-Trapsv2-MIB", "lntConfigChangeValue"), ("Lannet-Trapsv2-MIB", "lntConfigChangeOID"), ("Lannet-Trapsv2-MIB", "lntUnauthIpAddress"), ("Lannet-Trapsv2-MIB", "lntUnauthUserName"), ("Lannet-Trapsv2-MIB", "lntLicenseErrorCodes"), ("Lannet-Trapsv2-MIB", "lntSCPStrictCheckingMode"), ("Lannet-Trapsv2-MIB", "lntUnauthProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntConfigChangeVarbinds = lntConfigChangeVarbinds.setStatus('current')
if mibBuilder.loadTexts: lntConfigChangeVarbinds.setDescription('varbinds related with config change trap')
lntLagNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 5)).setObjects(("Lannet-Trapsv2-MIB", "lntLAGConnLostFlt"), ("Lannet-Trapsv2-MIB", "lntLAGConnLostOk"), ("Lannet-Trapsv2-MIB", "lntLAGPartialConnLostFlt"), ("Lannet-Trapsv2-MIB", "lntLAGPartialConnLostOk"), ("Lannet-Trapsv2-MIB", "lntLAGAutoNegFlt"), ("Lannet-Trapsv2-MIB", "lntLAGAutoNegOk"), ("Lannet-Trapsv2-MIB", "lntLAGDeleteEvent"), ("Lannet-Trapsv2-MIB", "lntLAGCreateEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntLagNotificationGroup = lntLagNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntLagNotificationGroup.setDescription('Group of Link aggregation traps')
lntSWRedundancyNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 6)).setObjects(("Lannet-Trapsv2-MIB", "lntSoftRedDelEvent"), ("Lannet-Trapsv2-MIB", "lntSoftRedNewEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntSWRedundancyNotificationGroup = lntSWRedundancyNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntSWRedundancyNotificationGroup.setDescription('Group of Software Redundancy traps')
lntPSUFaultNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 7)).setObjects(("Lannet-Trapsv2-MIB", "lntMainPSUFlt"), ("Lannet-Trapsv2-MIB", "lntMainPSUOk"), ("Lannet-Trapsv2-MIB", "lntBackupPSUFlt"), ("Lannet-Trapsv2-MIB", "lntBackupPSUOk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntPSUFaultNotificationGroup = lntPSUFaultNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntPSUFaultNotificationGroup.setDescription('PSU related fault traps (main and backup)')
lntTempratureNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 8)).setObjects(("Lannet-Trapsv2-MIB", "lntTempratureOk"), ("Lannet-Trapsv2-MIB", "lntTempratureWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntTempratureNotificationGroup = lntTempratureNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntTempratureNotificationGroup.setDescription('Temperature warning related traps')
lntL3FaultNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 9)).setObjects(("Lannet-Trapsv2-MIB", "lntDuplicateIPFlt"), ("Lannet-Trapsv2-MIB", "lntVLANViolationEvent"), ("Lannet-Trapsv2-MIB", "lntARPViolationEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntL3FaultNotificationGroup = lntL3FaultNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntL3FaultNotificationGroup.setDescription('Group of L3 fault traps')
lntLinkDownNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 10)).setObjects(("Lannet-Trapsv2-MIB", "lntPortLinkDownEvent"), ("Lannet-Trapsv2-MIB", "lntPortLinkUpEvent"), ("Lannet-Trapsv2-MIB", "lntVPortLinkDownEvent"), ("Lannet-Trapsv2-MIB", "lntVPortLinkUpEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntLinkDownNotificationGroup = lntLinkDownNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntLinkDownNotificationGroup.setDescription('Link Down/Up traps')
lntCascadeNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 11)).setObjects(("Lannet-Trapsv2-MIB", "lntCascadUpConnFlt"), ("Lannet-Trapsv2-MIB", "lntCascadUpConnOk"), ("Lannet-Trapsv2-MIB", "lntCascadDownConnOk"), ("Lannet-Trapsv2-MIB", "lntCascadDownConnFlt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntCascadeNotificationGroup = lntCascadeNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntCascadeNotificationGroup.setDescription('Cascade fault traps')
lntEthPortNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 12)).setObjects(("Lannet-Trapsv2-MIB", "lntPortFEFlt"), ("Lannet-Trapsv2-MIB", "lntPortFEOk"), ("Lannet-Trapsv2-MIB", "lntVPortFEFlt"), ("Lannet-Trapsv2-MIB", "lntVPortFEOk"), ("Lannet-Trapsv2-MIB", "lntPortAutoPartFlt"), ("Lannet-Trapsv2-MIB", "lntPortAutoPartOk"), ("Lannet-Trapsv2-MIB", "lntVPortAutoPartFlt"), ("Lannet-Trapsv2-MIB", "lntVPortAutoPartOK"), ("Lannet-Trapsv2-MIB", "lntEthVPortAutoNegotiationOK"), ("Lannet-Trapsv2-MIB", "lntEthPortAutoNegotiationOK"), ("Lannet-Trapsv2-MIB", "lntEthPortAutoNegotiationFlt"), ("Lannet-Trapsv2-MIB", "lntEthVPortAutoNegotiationFlt"), ("Lannet-Trapsv2-MIB", "lntPortInlinePowerFlt"), ("Lannet-Trapsv2-MIB", "lntPortInlinePowerOK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntEthPortNotificationGroup = lntEthPortNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntEthPortNotificationGroup.setDescription('Eth port fault traps')
lntCAMNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 13)).setObjects(("Lannet-Trapsv2-MIB", "lntPortCAMLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntCAMNotificationGroup = lntCAMNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: lntCAMNotificationGroup.setDescription('CAM change related traps')
lntConfigChangeNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 14)).setObjects(("Lannet-Trapsv2-MIB", "lntConfigChangeEvent"), ("Lannet-Trapsv2-MIB", "lntStackMasterReelection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntConfigChangeNotificationGroup = lntConfigChangeNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntConfigChangeNotificationGroup.setDescription('Configuration change related traps')
lntPolicyNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 15)).setObjects(("Lannet-Trapsv2-MIB", "lntPolicyAccessControlListLvlRuleTrap"), ("Lannet-Trapsv2-MIB", "lntPolicyAccessControlViolationFlt"), ("Lannet-Trapsv2-MIB", "lntPolicyChangeEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntPolicyNotificationGroup = lntPolicyNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntPolicyNotificationGroup.setDescription('policy related traps')
lntFansNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 16)).setObjects(("Lannet-Trapsv2-MIB", "lntBackupFansFlt"), ("Lannet-Trapsv2-MIB", "lntBackupFansOK"), ("Lannet-Trapsv2-MIB", "lntMainFansFlt"), ("Lannet-Trapsv2-MIB", "lntMainFansOK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntFansNotificationGroup = lntFansNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntFansNotificationGroup.setDescription('Notifications related with FAN problems')
lntSecurityNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 17)).setObjects(("Lannet-Trapsv2-MIB", "lntAccountLockoutEvent"), ("Lannet-Trapsv2-MIB", "lntMACSecurityEvent"), ("Lannet-Trapsv2-MIB", "lntUnAuthAccessEvent"), ("Lannet-Trapsv2-MIB", "lntUnknownHostCopyEvent"), ("Lannet-Trapsv2-MIB", "lntLicenseStartupValidationFlt"), ("Lannet-Trapsv2-MIB", "lntLicenseDownloadValidationFlt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntSecurityNotificationGroup = lntSecurityNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntSecurityNotificationGroup.setDescription('Description.')
lntWanNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 81, 38, 10007, 18)).setObjects(("Lannet-Trapsv2-MIB", "lntWanPhysicalAlarmOn"), ("Lannet-Trapsv2-MIB", "lntWanPhysicalAlarmOff"), ("Lannet-Trapsv2-MIB", "lntWanLocalAlarmOn"), ("Lannet-Trapsv2-MIB", "lntWanLocalAlarmOff"), ("Lannet-Trapsv2-MIB", "lntWanRemoteAlarmOn"), ("Lannet-Trapsv2-MIB", "lntWanRemoteAlarmOff"), ("Lannet-Trapsv2-MIB", "lntWanMinorAlarmOn"), ("Lannet-Trapsv2-MIB", "lntWanMinorAlarmOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntWanNotificationGroup = lntWanNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: lntWanNotificationGroup.setDescription('Description.')
lntNotificationAgentCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 38, 10008))
lntP330L3NotificationAgentCapabilities = AgentCapabilities((1, 3, 6, 1, 4, 1, 81, 38, 10008, 1))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntP330L3NotificationAgentCapabilities = lntP330L3NotificationAgentCapabilities.setProductRelease('')
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntP330L3NotificationAgentCapabilities = lntP330L3NotificationAgentCapabilities.setStatus('current')
if mibBuilder.loadTexts: lntP330L3NotificationAgentCapabilities.setDescription('Trap Capabilities of P330 L3 Device.')
lntP330L2NotificationAgentCapabilities = AgentCapabilities((1, 3, 6, 1, 4, 1, 81, 38, 10008, 2))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntP330L2NotificationAgentCapabilities = lntP330L2NotificationAgentCapabilities.setProductRelease('')
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntP330L2NotificationAgentCapabilities = lntP330L2NotificationAgentCapabilities.setStatus('current')
if mibBuilder.loadTexts: lntP330L2NotificationAgentCapabilities.setDescription('Trap capabilities of P330 L2 device.')
lntP130TrapAgentCapabilities = AgentCapabilities((1, 3, 6, 1, 4, 1, 81, 38, 10008, 3))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntP130TrapAgentCapabilities = lntP130TrapAgentCapabilities.setProductRelease('')
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntP130TrapAgentCapabilities = lntP130TrapAgentCapabilities.setStatus('current')
if mibBuilder.loadTexts: lntP130TrapAgentCapabilities.setDescription('Trap capabilities of P130 device.')
lntP330MLNotificationAgentCapabilities = AgentCapabilities((1, 3, 6, 1, 4, 1, 81, 38, 10008, 4))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntP330MLNotificationAgentCapabilities = lntP330MLNotificationAgentCapabilities.setProductRelease('')
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntP330MLNotificationAgentCapabilities = lntP330MLNotificationAgentCapabilities.setStatus('current')
if mibBuilder.loadTexts: lntP330MLNotificationAgentCapabilities.setDescription('Traps supported by P330ML device.')
lntG350NotificationAgentCapability = AgentCapabilities((1, 3, 6, 1, 4, 1, 81, 38, 10008, 5))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntG350NotificationAgentCapability = lntG350NotificationAgentCapability.setProductRelease('')
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lntG350NotificationAgentCapability = lntG350NotificationAgentCapability.setStatus('current')
if mibBuilder.loadTexts: lntG350NotificationAgentCapability.setDescription('Description.')
mibBuilder.exportSymbols("Lannet-Trapsv2-MIB", lntLAGAutoNegOk=lntLAGAutoNegOk, lntL3Events=lntL3Events, lntUnauthUserName=lntUnauthUserName, scGenPortDot1xFailureString=scGenPortDot1xFailureString, lntEthPortFaultEvents=lntEthPortFaultEvents, lntLAGPartialConnLostFlt=lntLAGPartialConnLostFlt, lntVLANViolationEvent=lntVLANViolationEvent, lntMainPSUFlt=lntMainPSUFlt, lntP330MLNotificationAgentCapabilities=lntP330MLNotificationAgentCapabilities, lntARPViolationEvent=lntARPViolationEvent, lntP330L3NotificationAgentCapabilities=lntP330L3NotificationAgentCapabilities, lntFansPrefix=lntFansPrefix, lntMainPSUOk=lntMainPSUOk, lntEthPortAutoNegotiationFlt=lntEthPortAutoNegotiationFlt, lntWanLocalAlarmOff=lntWanLocalAlarmOff, lntCascadeNotificationGroup=lntCascadeNotificationGroup, lntVPortLinkUpEvent=lntVPortLinkUpEvent, lntCascadDownConnFlt=lntCascadDownConnFlt, lntCAMChangeEvents=lntCAMChangeEvents, lntWanPhysicalAlarmOff=lntWanPhysicalAlarmOff, lntVPortLinkDownEvent=lntVPortLinkDownEvent, lntPortCAMLastChange=lntPortCAMLastChange, lntSWRedundancyNotificationGroup=lntSWRedundancyNotificationGroup, lntCascadUpConnFlt=lntCascadUpConnFlt, lntSecurityEvents=lntSecurityEvents, lntLAGPrefix=lntLAGPrefix, lntFansEvents=lntFansEvents, lntLAGPartialConnLostOk=lntLAGPartialConnLostOk, lntWanPrefix=lntWanPrefix, lntLinkDownNotificationGroup=lntLinkDownNotificationGroup, lntEthPortAutoNegotiationOK=lntEthPortAutoNegotiationOK, lntLicenseErrorCodes=lntLicenseErrorCodes, lntWanEvents=lntWanEvents, lntPSUPrefix=lntPSUPrefix, lntLAGConnLostFlt=lntLAGConnLostFlt, lntUnAuthAccessEvent=lntUnAuthAccessEvent, lntNotificationGroups=lntNotificationGroups, lntPolicyEvents=lntPolicyEvents, lntSecurityNotificationGroup=lntSecurityNotificationGroup, lntCascadeFaultsPrefix=lntCascadeFaultsPrefix, lntSoftRedDelEvent=lntSoftRedDelEvent, lntEthPortFaultPrefix=lntEthPortFaultPrefix, lntP330L2NotificationAgentCapabilities=lntP330L2NotificationAgentCapabilities, lntFansNotificationGroup=lntFansNotificationGroup, lntTempratureEvents=lntTempratureEvents, lntG350NotificationAgentCapability=lntG350NotificationAgentCapability, lntTempratureWarningPrefix=lntTempratureWarningPrefix, lntConfigChangeValue=lntConfigChangeValue, lntConfigChangeVarbinds=lntConfigChangeVarbinds, lntWanMinorAlarmOn=lntWanMinorAlarmOn, lntSoftRedNewEvent=lntSoftRedNewEvent, lntWanRemoteAlarmOn=lntWanRemoteAlarmOn, lntLicenseDownloadValidationFlt=lntLicenseDownloadValidationFlt, lntTempratureOk=lntTempratureOk, lntPolicyAccessControlListLvlRuleTrap=lntPolicyAccessControlListLvlRuleTrap, lntConfigChangeOID=lntConfigChangeOID, lntPSUFaultNotificationGroup=lntPSUFaultNotificationGroup, lntVPortAutoPartFlt=lntVPortAutoPartFlt, lntLAGDeleteEvent=lntLAGDeleteEvent, lntSWRedundancyPrefix=lntSWRedundancyPrefix, lntLAGCreateEvent=lntLAGCreateEvent, lntMainFansOK=lntMainFansOK, lntP130TrapAgentCapabilities=lntP130TrapAgentCapabilities, lntDot1xMaxAuthRateReachedEvent=lntDot1xMaxAuthRateReachedEvent, PYSNMP_MODULE_ID=lntTraps, lntVPortAutoPartOK=lntVPortAutoPartOK, lntWanRemoteAlarmOff=lntWanRemoteAlarmOff, lntDuplicateIPFlt=lntDuplicateIPFlt, lntNotificationAgentCapabilities=lntNotificationAgentCapabilities, lntDot1xAuthFailureEvent=lntDot1xAuthFailureEvent, lntBackupPSUOk=lntBackupPSUOk, lntConfigChangeEvents=lntConfigChangeEvents, lntPortLinkUpEvent=lntPortLinkUpEvent, lntCascadeEvents=lntCascadeEvents, lntVPortFEFlt=lntVPortFEFlt, lntSecurityPrefix=lntSecurityPrefix, lntUnauthProtocol=lntUnauthProtocol, lntConfigChangeNotificationGroup=lntConfigChangeNotificationGroup, lntTempratureNotificationGroup=lntTempratureNotificationGroup, lntPolicyPrefix=lntPolicyPrefix, lntPortAutoPartFlt=lntPortAutoPartFlt, lntPortFEOk=lntPortFEOk, lntLicenseStartupValidationFlt=lntLicenseStartupValidationFlt, lntL3FaultNotificationGroup=lntL3FaultNotificationGroup, lntConfigChangeEvent=lntConfigChangeEvent, lntPolicyChangeEvent=lntPolicyChangeEvent, lntCascadUpConnOk=lntCascadUpConnOk, lntStackMasterReelection=lntStackMasterReelection, lntLAGEvents=lntLAGEvents, lntLinkEventsPrefix=lntLinkEventsPrefix, lntMainFansFlt=lntMainFansFlt, lntPortAutoPartOk=lntPortAutoPartOk, lntWanMinorAlarmOff=lntWanMinorAlarmOff, lntLAGConnLostOk=lntLAGConnLostOk, lntWanLocalAlarmOn=lntWanLocalAlarmOn, lntSCPStrictCheckingMode=lntSCPStrictCheckingMode, lntDot1xMaxAuthModuleNumReachedEvent=lntDot1xMaxAuthModuleNumReachedEvent, lntPSUEvents=lntPSUEvents, lntCAMChangePrefix=lntCAMChangePrefix, lntEthVPortAutoNegotiationOK=lntEthVPortAutoNegotiationOK, lntUnknownHostCopyEvent=lntUnknownHostCopyEvent, lntBackupFansOK=lntBackupFansOK, lntMACSecurityEvent=lntMACSecurityEvent, lntDot1xMaxAuthPortNumReachedEvent=lntDot1xMaxAuthPortNumReachedEvent, lntUnauthIpAddress=lntUnauthIpAddress, lntSWRedundancyEvents=lntSWRedundancyEvents, lntL3FaultsPrefix=lntL3FaultsPrefix, lntLAGAutoNegFlt=lntLAGAutoNegFlt, lntBackupFansFlt=lntBackupFansFlt, lntCAMNotificationGroup=lntCAMNotificationGroup, lntPortLinkDownEvent=lntPortLinkDownEvent, lntEthVPortAutoNegotiationFlt=lntEthVPortAutoNegotiationFlt, lntLagNotificationGroup=lntLagNotificationGroup, lntPortFEFlt=lntPortFEFlt, lntEthPortNotificationGroup=lntEthPortNotificationGroup, lntPolicyNotificationGroup=lntPolicyNotificationGroup, lntBackupPSUFlt=lntBackupPSUFlt, lntLinkEvents=lntLinkEvents, lntWanPhysicalAlarmOn=lntWanPhysicalAlarmOn, lntPolicyAccessControlViolationFlt=lntPolicyAccessControlViolationFlt, lntNotificationVarbinds=lntNotificationVarbinds, lntAccountLockoutEvent=lntAccountLockoutEvent, lntConfigChangePrefix=lntConfigChangePrefix, lntVPortFEOk=lntVPortFEOk, lntTempratureWarning=lntTempratureWarning, lntPortInlinePowerOK=lntPortInlinePowerOK, lntCascadDownConnOk=lntCascadDownConnOk, lntTraps=lntTraps, lntPortInlinePowerFlt=lntPortInlinePowerFlt, lntWanNotificationGroup=lntWanNotificationGroup)
