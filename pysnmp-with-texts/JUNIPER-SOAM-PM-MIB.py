#
# PySNMP MIB module JUNIPER-SOAM-PM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-SOAM-PM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
dot1agCfmMdIndex, Dot1agCfmMepIdOrZero, dot1agCfmMepEntry, dot1agCfmMaIndex, Dot1afCfmIndexIntegerNextFree, dot1agCfmMepIdentifier = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMdIndex", "Dot1agCfmMepIdOrZero", "dot1agCfmMepEntry", "dot1agCfmMaIndex", "Dot1afCfmIndexIntegerNextFree", "dot1agCfmMepIdentifier")
ieee802dot1mibs, IEEE8021VlanIndex = mibBuilder.importSymbols("IEEE8021-TC-MIB", "ieee802dot1mibs", "IEEE8021VlanIndex")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
LldpChassisId, LldpPortId, LldpChassisIdSubtype, LldpPortIdSubtype = mibBuilder.importSymbols("LLDP-MIB", "LldpChassisId", "LldpPortId", "LldpChassisIdSubtype", "LldpPortIdSubtype")
VlanId, VlanIdOrNone = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "VlanIdOrNone")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, ModuleIdentity, MibIdentifier, iso, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Integer32, Unsigned32, ObjectIdentity, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "MibIdentifier", "iso", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Integer32", "Unsigned32", "ObjectIdentity", "NotificationType", "Counter32")
DateAndTime, TimeStamp, TDomain, TimeInterval, TextualConvention, TruthValue, RowStatus, DisplayString, MacAddress, TAddress = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TimeStamp", "TDomain", "TimeInterval", "TextualConvention", "TruthValue", "RowStatus", "DisplayString", "MacAddress", "TAddress")
jnxSoamPmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 78))
jnxSoamPmMib.setRevisions(('2012-01-13 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxSoamPmMib.setRevisionsDescriptions(('Initial Version.',))
if mibBuilder.loadTexts: jnxSoamPmMib.setLastUpdated('201201131200Z')
if mibBuilder.loadTexts: jnxSoamPmMib.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxSoamPmMib.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxSoamPmMib.setDescription('This MIB module contains the management objects for the management of Ethernet Services Operations, Administration and Maintenance for Performance Monitoring. ')
jnxSoamPmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 78, 0))
jnxSoamPmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1))
jnxSoamPmMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 78, 2))
jnxSoamPmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 1))
jnxSoamPmLmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2))
jnxSoamPmDmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3))
jnxSoamPmNotificationCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 4))
jnxSoamPmNotificationObj = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 5))
class IEEE8021PriorityValue(TextualConvention, Unsigned32):
    reference = '12.13.3.3'
    description = 'An 802.1Q user priority value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class JnxSoamTcTestPatternType(TextualConvention, Integer32):
    reference = '[MEF7.1], Appendix III.2 Enumeration, [Y.1731] 7.7'
    description = 'This enumeration data type indicates the type of test pattern to be sent in an OAM PDU Test TLV. The valid enumerated values associated with this type are: null(1) Null signal without CRC-32 nullCrc32(2) Null signal with CRC-32 prbs(3) PRBS 2^31-1 without CRC-32 prbsCrc32(4) PRBS 2^31-1 with CRC-32 '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("null", 1), ("nullCrc32", 2), ("prbs", 3), ("prbsCrc32", 4))

class JnxSoamTcDataPatternType(TextualConvention, Integer32):
    description = 'This enumeration data type indicates the type of data pattern to be sent in an OAM PDU Data TLV. The valid enumerated values associated with this type are: zeroPattern(1) indicates the Data TLV contains all zeros onesPattern(2) indicates the Data TLV contains all ones '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("zeroPattern", 1), ("onesPattern", 2))

class JnxSoamTcOperationTimeType(TextualConvention, Integer32):
    reference = '[SOAM-PM] R2, [SOAM-FM] 8.7'
    description = 'This enumeration data type indicates the operation type start or end time to indicate when an OAM operation is initiated or stopped. The valid enumerated values associated with this type are: none(1) The operation is never started or is stopped immediately if used to indicate a start time, or the operation never ends if it is used to indicate an end time immediate(2) The operation is to begin immediately relative(3) The operation is to begin at a relative time from the current time or stop a relative time after it has started fixed(4) The operation is to begin/stop at the given UTC time/date '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("immediate", 2), ("relative", 3), ("fixed", 4))

jnxSoamPmMepTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 1, 1), )
if mibBuilder.loadTexts: jnxSoamPmMepTable.setReference('[Y.1731], [MEF SOAM-PM]')
if mibBuilder.loadTexts: jnxSoamPmMepTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmMepTable.setDescription('This table is an extension of the dot1agCfmMepTable and rows are automatically added or deleted from this table based upon row creation and destruction of the dot1agCfmMepTable. This table represents the local MEP PM configuration table. The primary purpose of this table is provide local parameters for the SOAM PM function found in [Y.1731] and [MEF SOAM-PM] and instantiated at a MEP. ')
jnxSoamPmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 1, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("JUNIPER-SOAM-PM-MIB", "jnxSoamPmMepEntry"))
jnxSoamPmMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: jnxSoamPmMepEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmMepEntry.setDescription('The conceptual row of jnxSoamPmMepTable.')
jnxSoamPmMepOperNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 1, 1, 1, 1), Dot1afCfmIndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamPmMepOperNextIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmMepOperNextIndex.setDescription('This object contains an unused value for a PM session number on a MEP that can be used for either LM or DM sessions, or a zero to indicate that none exist. This value needs to be read in order to find an available index for row-creation of a PM session on a MEP and then used when a row is created. This value is automatically updated by the SNMP Agent after the row is created. Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never to be reused for other PM sessions on the same MEP while this session is active, or until it wraps to zero. The index value keeps increasing up to that time. This is to facilitate access control based on a fixed index for an EMS, since the index is not reused. This object is an extension of the dot1agCfmMepTable and the object is automatically added or deleted based upon row creation and destruction of the dot1agCfmMepTable. ')
jnxSoamPmMepLmSingleEndedResponder = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 1, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamPmMepLmSingleEndedResponder.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmMepLmSingleEndedResponder.setDescription("This object specifies whether the Loss Measurement (LMM) single-ended Responder is enabled. The value 'true' indicates the single-ended Loss Measurement Responder is enabled and if a LMM message is received a LMR will be sent in reply. The value 'false' indicates the single-ended Loss Measurement Responder is disabled. If a LMM message is received no response will be sent and the message will be discarded. This object needs to be persistent upon reboot or restart of a device. A MEP can be both a single-ended Responder and Controller simultaneously. ")
jnxSoamPmMepSlmSingleEndedResponder = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamPmMepSlmSingleEndedResponder.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmMepSlmSingleEndedResponder.setDescription("This object specifies whether the Synthetic Loss Measurement (SLM) single-ended Responder is enabled. The value 'true' indicates the single-ended SLM Responder is enabled and if a SLM message is received a SLR will be sent in reply. The value 'false' indicates the single-ended SLM Responder is disabled. If a SLM message is received no response will be sent and the message will be discarded. This object needs to be persistent upon reboot or restart of a device. A MEP can be both a single-ended Responder and Controller simultaneously. ")
jnxSoamPmMepDmSingleEndedResponder = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamPmMepDmSingleEndedResponder.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmMepDmSingleEndedResponder.setDescription("This object specifies whether the Delay Measurement (DMM) single ended Responder is enabled. The value 'true' indicates the single-ended Delay Measurement Responder is enabled and if a DMM message is received a DMR will be sent in reply. The value 'false' indicates the single-ended Delay Measurement Responder is disabled. If a DMM message is received no response will be sent and the message will be discarded. This object needs to be persistent upon reboot or restart of a device. A MEP can be both a single-ended Responder and Controller simultaneously. ")
jnxSoamLmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1), )
if mibBuilder.loadTexts: jnxSoamLmCfgTable.setReference('[MEF SOAM-PM] R68; [Y.1731]')
if mibBuilder.loadTexts: jnxSoamLmCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgTable.setDescription('This table includes configuration objects and operations for the Frame Loss Measurement function defined in [Y.1731] and [MEF SOAM-PM]. Each row in the table represents a Loss Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. A Loss Measurement session is created on an existing MEP by first accessing the jnxSoamPmMepOperNextIndex object and using this value as the jnxSoamLmCfgIndex in the row creation. Some writable objects in this table are only applicable in certain cases (as described under each object), and attempts to write values for them in other cases will be ignored. The writable objects in this table need to be persistent upon reboot or restart of a device. ')
jnxSoamLmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamLmCfgIndex"))
if mibBuilder.loadTexts: jnxSoamLmCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgEntry.setDescription('The conceptual row of jnxSoamLmCfgTable.')
jnxSoamLmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgIndex.setDescription('An index to the Loss Measurement Configuration table which indicates the specific measurement session for the MEP. jnxSoamPmMepOperNextIndex needs to be inspected to find an available index for row-creation. Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never reused for other PM sessions on the same MEP while this session is active. The index value keeps increasing until it wraps to 0. This is to facilitate access control based on a fixed index for an EMS, since the index is not reused. ')
jnxSoamLmCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lmLmm", 1), ("lmSlm", 2), ("lmCcm", 3))).clone('lmSlm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgType.setReference('[Y.1731] [MEF SOAM-PM] R51, R68, O7, R102')
if mibBuilder.loadTexts: jnxSoamLmCfgType.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgType.setDescription('This object specifies what type of Loss Measurement will be performed. lmLmm(1) LMM SOAM PDU generated and received LMR responses tracked lmSlm(2) SLM SOAM PDU generated and received SLR responses tracked lmCcm(3) CCM SOAM PDU generated and received CCM PDUs tracked The lmSlm value is required. The lmLmm and lmCcm values are optional. The lmCcm loss measurement values are only valid for a point-to-point MEG. Multipoint MEGs may give unreliable loss measurements. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamLmCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgVersion.setReference('[Y.1731]')
if mibBuilder.loadTexts: jnxSoamLmCfgVersion.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgVersion.setDescription('This object indicates the version of the PDUs used to perform Loss Measurement. The value is placed in the Version field of the PDU and indicates that the PDU format used is the format defined in Y.1731 with that version. The exact PDUs to use are specified by this object in combination with jnxSoamLmCfgType. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamLmCfgEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgEnabled.setReference('[MEF SOAM-PM] R4, R5, R6, O1, R12, R14')
if mibBuilder.loadTexts: jnxSoamLmCfgEnabled.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgEnabled.setDescription("This object specifies whether the Loss Measurement session is enabled. The value 'true' indicates the Loss Measurement session is enabled and SOAM PDUs are sent and/or measurements are collected when the session is running according to the scheduling objects (start time, stop time, etc.). The value 'false' indicates the Loss Measurement session is disabled and SOAM PDUs are not sent and/or measurements collected. For a Loss Measurement session to be removed the row is deleted in order to release internal resources. This object can written/modified after row creation time. If the LM session is enabled it resumes after shutdown/restart. If the LM session is disabled the current Measurement Interval is stopped, if it in process at the time, and all the in process calculations for the partially completed Measurement Interval are finalized. This object does not affect whether the single-ended Responder is enabled or not, which is enabled or disabled by the jnxSoamPmMepLmSingleEndedResponder and jnxSoamPmMepSlmSingleEndedResponder objects. ")
jnxSoamLmCfgMeasurementEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 5), Bits().clone(namedValues=NamedValues(("bForwardTransmitedFrames", 0), ("bForwardReceivedFrames", 1), ("bForwardMinFlr", 2), ("bForwardMaxFlr", 3), ("bForwardAvgFlr", 4), ("bBackwardTransmitedFrames", 5), ("bBackwardReceivedFrames", 6), ("bBackwardMinFlr", 7), ("bBackwardMaxFlr", 8), ("bBackwardAvgFlr", 9), ("bSoamPdusSent", 10), ("bSoamPdusReceived", 11), ("bMeasuredStatsForwardMeasuredFlr", 26), ("bMeasuredStatsBackwardMeasuredFlr", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgMeasurementEnable.setReference('[Y.1731]')
if mibBuilder.loadTexts: jnxSoamLmCfgMeasurementEnable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgMeasurementEnable.setDescription("A vector of bits that indicates the type of SOAM LM counters found in the jnxSoamLmMeasuredStatsTable, jnxSoamLmCurrentStatsTable, jnxSoamLmHistoryStatsTable that are enabled. that are enabled. A bit set to '1' enables the specific SOAM LM counter. A bit set to '0' disables the SOAM LM counter. If a particular SOAM LM counter is not supported the BIT value is set to '0'. Not all SOAM LM counters are supported for all SOAM LM types. This object can only be written at row creation time and cannot be modified once it has been created. bForwardTransmitedFrames (0) Enables/disables the jnxSoamLmCurrentStatsForwardTransmittedFrames and jnxSoamLmHistoryStatsForwardTransmittedFrames counters. bForwardReceivedFrames(1) Enables/disables the jnxSoamLmCurrentStatsForwardReceivedFrames and jnxSoamLmHistoryStatsForwardReceivedFrames counters. bForwardMinFlr(2) Enables/disables the jnxSoamLmCurrentStatsForwardMinFlr and jnxSoamLmHistoryStatsForwardMinFlr counters. bForwardMaxFlr(3) Enables/disables the jnxSoamLmCurrentStatsForwardMaxFlr and jnxSoamLmHistoryStatsForwardMaxFlr counters. bForwardAvgFlr(4) Enables/disables the jnxSoamLmCurrentStatsForwardAvgFlr and jnxSoamLmHistoryStatsForwardAvgFlr counters. bBackwardTransmitedFrames(5) Enables/disables the jnxSoamLmCurrentStatsBackwardTransmittedFrames and jnxSoamLmHistoryStatsBackwardTransmittedFrames counters. bBackwardReceivedFrames(6) Enables/disables the jnxSoamLmCurrentStatsBackwardReceivedFrames and jnxSoamLmHistoryStatsBackwardReceivedFrames counters. bBackwardMinFlr(7) Enables/disables the jnxSoamLmCurrentStatsBackwardMinFlr and jnxSoamLmHistoryStatsBackwardMinFlr counters. bBackwardMaxFlr(8) Enables/disables the jnxSoamLmCurrentStatsBackwardMaxFlr and jnxSoamLmHistoryStatsBackwardMaxFlr counters. bBackwardAvgFlr(9) Enables/disables the jnxSoamLmCurrentStatsBackwardAvgFlr and jnxSoamLmHistoryStatsBackwardAvgFlr counters. bSoamPdusSent (10) Enables/disables the jnxSoamLmCurrentStatsSoamPdusSent and jnxSoamLmHistoryStatsSoamPdusSent counters. bSoamPdusReceivedbReceivedMeasurements (11) Enables/disables the jnxSoamLmCurrentStatsSoamPdusReceived and jnxSoamLmHistoryStatsSoamPdusReceived counters. bMeasuredStatsForwardMeasuredFlr(26) Enables/disables the jnxSoamLmMeasuredStatsForwardFlr counter. bMeasuredStatsBackwardMeasuredFlr(27) Enables/disables the jnxSoamLmMeasuredStatsBackwardFlr counter. ")
jnxSoamLmCfgMessagePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 6), Integer32().clone(1000)).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgMessagePeriod.setReference('[MEF SOAM-PM] R76, R77, D29, D30')
if mibBuilder.loadTexts: jnxSoamLmCfgMessagePeriod.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgMessagePeriod.setDescription('This object specifies the interval between Loss Measurement OAM message transmission. For Loss Measurement monitoring applications the default value is 1 sec. This object is not applicable if jnxSoamLmCfgType is set to lmCcm and is ignored for that Loss Measurement Type. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamLmCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 7), IEEE8021PriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgPriority.setReference('[MEF SOAM-PM] R1, R2, R71, D28, R72, R73, R105-R109, D45; [MEF 10.2.1] Section 6.8')
if mibBuilder.loadTexts: jnxSoamLmCfgPriority.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgPriority.setDescription('This object specifies the Loss Measurement OAM message priority as well as the priority of the service/OAM traffic to be monitored. Only frames of the same Class of Service are counted. The default value is to be the value which yields the lowest frame loss. This object is not applicable if jnxSoamLmCfgType is set to lmCcm. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamLmCfgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 9600)).clone(64)).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgFrameSize.setReference('[MEF SOAM-PM] R78, R79, D31, D32 [Y.1731]')
if mibBuilder.loadTexts: jnxSoamLmCfgFrameSize.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgFrameSize.setDescription("This object specifies the Loss Measurement frame size between 64 bytes and the maximum transmission unit of the EVC. The range of frame sizes from 64 through 2000 octets need to be supported, and the range of frame sizes from 2001 through 9600 octets is suggested be supported. The adjustment to the frame size of the standard frame size is accomplished by the addition of a Data or Test TLV. A Data or Test TLV is only added to the frame if the frame size is greater than 64 bytes. This object is only valid for the entity transmitting the Loss Measurement frames, type 'lmSlm', and is ignored by the entity receiving frames. It is not applicable for the 'lmCcm' or 'lmLmm' types. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgDataPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 9), JnxSoamTcDataPatternType().clone('zeroPattern')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgDataPattern.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgDataPattern.setDescription("This object specifies the LM data pattern included in a Data TLV when the size of the LM frame is determined by the jnxSoamLmFrameSize object and jnxoamLmTestTlvIncluded is 'false'. If the frame size object does not define the LM frame size or jnxSoamLmTestTlvIncluded is 'true' the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgTestTlvIncluded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgTestTlvIncluded.setReference('[Y.1731] 9.3')
if mibBuilder.loadTexts: jnxSoamLmCfgTestTlvIncluded.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgTestTlvIncluded.setDescription("Indicates whether a Test TLV or Data TLV is included when the size of the LM frame is determined by the jnxSoamLmFrameSize object. A value of 'true' indicates that the Test TLV is to be included. A value of 'false' indicates that the Data TLV is to be included. If the frame size object does not define the LM frame size the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgTestTlvPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 11), JnxSoamTcTestPatternType().clone('null')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgTestTlvPattern.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgTestTlvPattern.setDescription("This object specifies the type of test pattern to be sent in the LM frame Test TLV when the size of LM PDU is determined by the jnxSoamLmFrameSize object and jnxSoamLmTestTlvIncluded is 'true'. If the frame size object does not define the LM frame size or jnxSoamLmTestTlvIncluded is 'false' the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgNumIntervalsStored = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgNumIntervalsStored.setReference('[MEF SOAM-PM] R21, D8, D9')
if mibBuilder.loadTexts: jnxSoamLmCfgNumIntervalsStored.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgNumIntervalsStored.setDescription('This object specifies the number of completed Measurement Intervals to store in the history statistic table (jnxSoamLmHistoryStatsTable) At least 32 completed Measurement Intervals need to be stored. 96 Measurement Intervals are recommended to be stored. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamLmCfgDestMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 13), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgDestMepId.setReference('[MEF SOAM-PM] R70, R104')
if mibBuilder.loadTexts: jnxSoamLmCfgDestMepId.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgDestMepId.setDescription("The Maintenance Association End Point Identifier of another MEP in the same Maintenance Association to which the SOAM LM frame is to be sent. This address will be used if the value of the column jnxSoamLmDestIsMepId is 'true'. A value of zero means that the destination MEP ID has not been configured. This object is only valid for the entity transmitting the Loss Measurement frames, types 'lmLmm' and 'lmSlm'. It is not applicable for the 'lmCcm' type. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgDestIsMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgDestIsMepId.setReference('[MEF SOAM-PM] R70, R104')
if mibBuilder.loadTexts: jnxSoamLmCfgDestIsMepId.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgDestIsMepId.setDescription("A value of 'true' indicates that MEPID of the target MEP is used for SOAM LM frame transmission. A value of 'false' indicates that the MAC address of the target MEP is used for SOAM LM frame transmission. This object is only valid for the entity transmitting the Loss Measurement frames, types 'lmLmm' and 'lmSlm'. It is not applicable for the 'lmCcm' type. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgStartTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 15), JnxSoamTcOperationTimeType().clone('immediate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgStartTimeType.setReference('[MEF SOAM-PM] R3, R7, R8, D1')
if mibBuilder.loadTexts: jnxSoamLmCfgStartTimeType.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgStartTimeType.setDescription("This object specifies the type of start time of the SOAM LM session. The start time can be disabled (none), immediate, relative, or fixed. The value of 'none' is illegal and a write error will be returned if this value is used. The value of 'immediate' starts the SOAM LM session when the jnxSoamLmCfgEnabled is true. The value of 'fixed' starts the SOAM LM session when the jnxSoamLmFixedStartDateAndTime is less than or equal to the current system date and time and jnxSoamLmCfgEnabled is true. This value is used to implement an On-Demand fixed time PM session. The value of 'relative' starts the SOAM LM session when the current system date and time minus the jnxSoamLmRelativeStartTime is greater than or equal to the system date and time when the jnxSoamLmStartTimeType object was written and jnxSoamLmCfgEnabled is true. This value is used to implement an On-Demand relative time PM session. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgFixedStartDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 16), DateAndTime().clone(hexValue="0000010100000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgFixedStartDateAndTime.setReference('[MEF SOAM-PM] R9')
if mibBuilder.loadTexts: jnxSoamLmCfgFixedStartDateAndTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgFixedStartDateAndTime.setDescription("This object specifies the fixed start date/time for the SOAM Loss Measurement session. This object is used only used if jnxSoamLmStartTimeType is 'fixed' and is ignored otherwise. The default value is year 0000, month 01, day 01, time 00:00:00.00. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgRelativeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 17), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgRelativeStartTime.setReference('[MEF SOAM-PM] R9')
if mibBuilder.loadTexts: jnxSoamLmCfgRelativeStartTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgRelativeStartTime.setDescription("This object specifies the relative start time, from the current system time, for the SOAM LM session. This object is used only if jnxSoamLmStartTimeType is 'relative' and is ignored otherwise. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgRepetitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31536000))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgRepetitionTime.setReference('[MEF SOAM-PM] R18, D3, R19, R20')
if mibBuilder.loadTexts: jnxSoamLmCfgRepetitionTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgRepetitionTime.setDescription('This object specifies a configurable repetition time between Measurement Intervals in a Loss Measurement session, in seconds. If the value is 0 (none), there is no time gap between the end of one Measurement Interval and the start of a new Measurement Interval. This is the normal usage case. If the value is greater than 0 but less than or equal to the measurement interval, an error is returned. If the value is greater than one Measurement Interval there is time gap between the end of one Measurement Interval and the start of the next Measurement Interval. The repetition time specifies the time between the start of consecutive Measurement Intervals; hence the gap between the end of one Measurement Interval and the start of the next is equal to the difference between the repetition time and the measurement interval. During this gap, no SOAM PDUs are sent for this session and no measurements are made. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamLmCfgAlignMeasurementIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 19), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgAlignMeasurementIntervals.setReference('[MEF SOAM-PM] D4, D5, D6')
if mibBuilder.loadTexts: jnxSoamLmCfgAlignMeasurementIntervals.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgAlignMeasurementIntervals.setDescription("This object specifies whether the Measurement Intervals for the Loss Measurement session are aligned with a zero offset to real time. The value 'true' indicates that each Measurement Interval starts at a time which is aligned to NE time source hour, if the repetition time (or the Measurement Interval, if the repetition time is 0) is a factor of an hour, i.e. 60min/15min = 4. For instance, a Measurement Interval/repetition time of 15 minutes would stop/start the Measurement Interval at 0, 15, 30, and 45 minutes of an hour. A Measurement Interval/Repetition Time of 7 minutes would not align to the hour since 7 minutes is NOT a factor of an hour, i.e. 60min/7min = 8.6. In this case the behavior is the same as if the object is set to 'false'. The value 'false' indicates that the first Measurement Interval starts at an arbitrary time and each subsequent Measurement Interval starts at a time which is determined by jnxSoamLmCfgRepetitionTime. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgAlignMeasurementOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 525600))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgAlignMeasurementOffset.setReference('[MEF SOAM-PM] D7')
if mibBuilder.loadTexts: jnxSoamLmCfgAlignMeasurementOffset.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgAlignMeasurementOffset.setDescription("This object specifies the offset in minutes from the time of day value if jnxSoamLmCfgAlignMeasurementIntervals is 'true' and the repetition time is a factor of 60 minutes. If not, the value of this object is ignored. If the Measurement Interval is 15 minutes and jnxSoamLmCfgAlignMeasurementIntervals is true and if this object was set to 5 minutes, the Measurement Intervals would start at 5, 20, 35, 50 minutes past each hour. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 42)).clone('proactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgSessionType.setReference('[MEF SOAM-PM] R3')
if mibBuilder.loadTexts: jnxSoamLmCfgSessionType.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgSessionType.setDescription("This object indicates whether the current session is defined to be 'Proactive' or 'On-Demand'. A value of 'proactive' indicates the current session is 'Proactive'. A value of 'onDemand' indicates the current session is 'On-Demand'. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamLmCfgSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgSessionStatus.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgSessionStatus.setDescription("This object indicates the current status of the LM session. A value of 'active' indicates the current LM session is active, i.e. the current time lies between the start time and the stop time, and jnxSoamLmCfgEnabled is true. A value of 'notActive' indicates the current LM session is not active, i.e. it has not started yet, has stopped upon reaching the stop time, or is disabled. ")
jnxSoamLmCfgHistoryClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgHistoryClear.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgHistoryClear.setDescription("This object when written clears the Loss Measurement history Table (jnxSoamLmHistoryStatsTable) - all rows are deleted. When read the value always returns 'false'. Writing this value does not change the current stat table, nor any of the items in the configuration table. Writing this value during row creation has no effect. ")
jnxSoamLmCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 1, 1, 24), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCfgRowStatus.setDescription('The status of the row. The writable columns in a row cannot be changed if the row is active, except for jnxSoamLmCfgHistoryClear and jnxSoamLmCfgEnabled objects. All columns must have a valid value before a row can be activated. ')
jnxSoamLmMeasuredStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 2), )
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsTable.setReference('[MEF SOAM-PM] R7, R15, 8D18')
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsTable.setDescription('This object contains the last measured results for a SOAM Loss Measurement session. Each row in the table represents a Loss Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. Instances of this managed object are created automatically by the SNMP Agent when the Loss Measurement session is running. Each object in this table applies only if the corresponding bit is set in jnxSoamLmCfgMeasurementEnable. The objects in this table do not need to be persistent upon reboot or restart of a device. ')
jnxSoamLmMeasuredStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamLmCfgIndex"))
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsEntry.setDescription('The conceptual row of jnxSoamLmMeasuredStatsTable')
jnxSoamLmMeasuredStatsForwardFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsForwardFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsForwardFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsForwardFlr.setDescription('This object contains the last frame loss ratio in the forward direction calculated by this MEP. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmMeasuredStatsBackwardFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsBackwardFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsBackwardFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmMeasuredStatsBackwardFlr.setDescription('This object contains the last frame loss ratio in the backward direction calculated by this MEP. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3), )
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsTable.setReference('[MEF SOAM-PM] R7, R15, D9, D18')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsTable.setDescription('This table contains the results for the current Measurement Interval in a SOAM Loss Measurement session gathered during the interval indicated by iterator counts. A row in this table is created automatically by the SNMP Agent when the Loss Measurement session is configured. Each row in the table represents the current statistics for a Loss Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. There may be more than one LM session per MEP. The main use case for this is to allow multiple CoS instances to be operating simultaneously for a MEP. The objects in this table apply regardless of the value of jnxSoamLmCfgType unless otherwise specified in the object description. Except for jnxSoamLmCurrentStatsIndex, jnxSoamLmCurrentStatsStartTime, jnxSoamLmCurrentStatsElapsedTime and jnxSoamLmCurrentStatsSuspect, each object in this table applies only if the corresponding bit is set in jnxSoamLmCfgMeasurementEnable. The objects in this table do not need to be persistent upon reboot or restart of a device. ')
jnxSoamLmCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamLmCfgIndex"))
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsEntry.setDescription('The conceptual row of jnxSoamLmCurrentStatsTable')
jnxSoamLmCurrentStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsIndex.setDescription('The index for the current Measurement Interval for this PM session. This value will become the value for jnxSoamLmHistoryStatsIndex once the Measurement Interval is completed. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. ')
jnxSoamLmCurrentStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsStartTime.setReference('[MEF SOAM-PM] R22, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsStartTime.setDescription('The time that the current Measurement Interval started. ')
jnxSoamLmCurrentStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsElapsedTime.setReference('[MEF SOAM-PM] R24, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsElapsedTime.setDescription('The time that the current Measurement Interval has been running, in 0.01 seconds. ')
jnxSoamLmCurrentStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is set to false at the start of a measurement interval. It is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
jnxSoamLmCurrentStatsForwardTransmittedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardTransmittedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardTransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardTransmittedFrames.setDescription('This object contains the number of frames transmitted in the forward direction by this MEP. For a PM Session of types lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of SOAM ETH-SLM frames only. ')
jnxSoamLmCurrentStatsForwardReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardReceivedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardReceivedFrames.setDescription('This object contains the number of frames received in the forward direction by this MEP. For a PM Session of types lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of types lmSlm this includes the count of SOAM ETH-SLM frames only. ')
jnxSoamLmCurrentStatsForwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardMinFlr.setDescription('This object contains the minimum one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmCurrentStatsForwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardMaxFlr.setDescription('This object contains the maximum one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmCurrentStatsForwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsForwardAvgFlr.setDescription('This object contains the average one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmCurrentStatsBackwardTransmittedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardTransmittedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardTransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardTransmittedFrames.setDescription('This object contains the number of frames transmitted in the backward direction by this MEP. For a PM Session of type lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of SOAM ETH-SLM frames only. ')
jnxSoamLmCurrentStatsBackwardReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardReceivedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardReceivedFrames.setDescription('This object contains the number of frames received in the backward direction by this MEP. For a PM Session of type lmLmm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of SOAM ETH-SLM frames only. ')
jnxSoamLmCurrentStatsBackwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardMinFlr.setDescription('This object contains the minimum one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmCurrentStatsBackwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardMaxFlr.setDescription('This object contains the maximum one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmCurrentStatsBackwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsBackwardAvgFlr.setDescription('This object contains the average one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmCurrentStatsSoamPdusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsSoamPdusSent.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsSoamPdusSent.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsSoamPdusSent.setDescription('This object contains the count of the number of SOAM PDUs sent during this Measurement Interval. This object applies when jnxSoamLmCfgType is lmLmm, lmSlm, or lmCcm. It indicates the number of LMM, CCM, or SLM SOAM frames transmitted. ')
jnxSoamLmCurrentStatsSoamPdusReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsSoamPdusReceived.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsSoamPdusReceived.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmCurrentStatsSoamPdusReceived.setDescription('This object contains the count of the number of SOAM PDUs PDUs received in this Measurement Interval. This object applies when jnxSoamLmCfgType is lmLmm, lmSlm, or lmCcm. This object indicates the number of LMR, CCM, or SLR SOAM frames received. ')
jnxSoamLmHistoryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4), )
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsTable.setReference('[MEF SOAM-PM] R7, R15, R21, D8, R25')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsTable.setDescription('This table contains the results for history Measurement Intervals in a SOAM Loss Measurement session. Rows of this table object are created automatically by the SNMP Agent when the Loss Measurement session is running and a Measurement Interval is completed. Each row in the table represents the history statistics for a Loss Measurement session Measurement Interval for the defined MEP. This table uses five indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. The fifth index index the specific Measurement Interval. At least 32 completed Measurement Intervals are to be supported. 96 completed Measurement Intervals are recommended to be supported. If there are at least 32 rows in the table and a new Measurement Interval completes and a new row is to be added to the table, the oldest completed Measurement Interval may be deleted (row deletion). If the measurement interval is other than 15 minutes then a minimum of 8 hours of completed Measurement Intervals are to be supported and 24 hours are recommended to be supported. Except for jnxSoamLmHistoryStatsIndex, jnxSoamLmHistoryStatsEndTime, jnxSoamLmHistoryStatsElapsedTime and jnxSoamLmHistoryStatsSuspect, each object in this table applies only if the corresponding bit is set in jnxSoamLmCfgMeasurementEnable. The rows and objects in this table are to be persistent upon reboot or restart of a device. ')
jnxSoamLmHistoryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamLmCfgIndex"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamLmHistoryStatsIndex"))
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsEntry.setDescription('The conceptual row of jnxSoamLmHistoryStatsTable')
jnxSoamLmHistoryStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsIndex.setDescription('The index for the Measurement Interval within this PM session. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. Measurement Intervals for FLR (stored in this table) are based on iterator count and are indexed independently of Measurement Intervals for availability Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never reused while this session is active until it wraps to zero. The index value keeps increasing up to that time. ')
jnxSoamLmHistoryStatsEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsEndTime.setReference('[MEF SOAM-PM] R23, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsEndTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsEndTime.setDescription('The time that the Measurement Interval ended. ')
jnxSoamLmHistoryStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsElapsedTime.setReference('[MEF SOAM-PM] R24, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsElapsedTime.setDescription('The length of time that the Measurement Interval ran for, in 0.01 seconds. ')
jnxSoamLmHistoryStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41, R42')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
jnxSoamLmHistoryStatsForwardTransmittedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardTransmittedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardTransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardTransmittedFrames.setDescription('This object contains the number of frames transmitted in the forward direction by this MEP. For a PM Session of types lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of OAM ETH-SLM frames only. ')
jnxSoamLmHistoryStatsForwardReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardReceivedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardReceivedFrames.setDescription('This object contains the number of frames received in the forward direction by this MEP. For a PM Session of types lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of type lmSlm this includes the count of OAM ETH-SLM frames only. ')
jnxSoamLmHistoryStatsForwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardMinFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardMinFlr.setDescription('This object contains the minimum one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmHistoryStatsForwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardMaxFlr.setDescription('This object contains the maximum one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmHistoryStatsForwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsForwardAvgFlr.setDescription('This object contains the average one-way frame loss ratio in the forward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmHistoryStatsBackwardTransmittedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardTransmittedFrames.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardTransmittedFrames.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardTransmittedFrames.setDescription('This object contains the number of frames transmitted in the backward direction by this MEP. For a PM Session of type lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of types lmSlm this includes the count of SOAM ETH-SLM frames only. ')
jnxSoamLmHistoryStatsBackwardReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardReceivedFrames.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardReceivedFrames.setDescription('This object contains the number of frames received in the backward direction by this MEP. For a PM Session of type lmLmm and lmCcm this includes Ethernet Service Frames and SOAM PDUs that are in a higher MEG level only. For a PM Session of types lmSlm this includes the count of SOAM ETH-SLM frames only. ')
jnxSoamLmHistoryStatsBackwardMinFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardMinFlr.setReference('[MEF SOAM-PM] R69, R87, R112')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardMinFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardMinFlr.setDescription('This object contains the minimum one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmHistoryStatsBackwardMaxFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardMaxFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardMaxFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardMaxFlr.setDescription('This object contains the maximum one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmHistoryStatsBackwardAvgFlr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardAvgFlr.setReference('[MEF SOAM-PM] D37')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardAvgFlr.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsBackwardAvgFlr.setDescription('This object contains the average one-way frame loss ratio in the backward direction calculated by this MEP for this Measurement Interval. The FLR value is a ratio that is expressed as a percent with a value of 0 (ratio 0.00) through 100000 (ratio 1.00). Units are in milli-percent, where 1 indicates 0.001 percent. ')
jnxSoamLmHistoryStatsSoamPdusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsSoamPdusSent.setReference('[MEF SOAM-PM] R69, R87')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsSoamPdusSent.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsSoamPdusSent.setDescription('This object contains the count of the number of SOAM PDUs sent during this Measurement Interval. This object applies when jnxSoamLmCfgType is lmLmm, lmSlm, or lmCcm. It indicates the number of LMM, CCM, or SLM SOAM frames transmitted. ')
jnxSoamLmHistoryStatsSoamPdusReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsSoamPdusReceived.setReference('[MEF SOAM-PM] R69, R87')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsSoamPdusReceived.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmHistoryStatsSoamPdusReceived.setDescription('This object contains the count of the number of SOAM PDUs received in this Measurement Interval. This object applies when jnxSoamLmCfgType is lmLmm, lmSlm, or lmCcm. This object indicates the number of LMR, CCM, or SLR SOAM frames received. ')
jnxSoamDmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1), )
if mibBuilder.loadTexts: jnxSoamDmCfgTable.setReference('[MEF SOAM-PM] R50; [Y.1731]')
if mibBuilder.loadTexts: jnxSoamDmCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgTable.setDescription('This table includes configuration objects and operations for the Delay Measurement function. Each row in the table represents a Delay Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. A Delay Measurement session is created on an existing MEP by first accessing the jnxSoamDmOperNextIndex object and using this value as the jnxSoamDmCfgIndex in the row creation. Some writable objects in this table are only applicable in certain cases (as described under each object), and attempts to write values for them in other cases will be ignored. The writable objects in this table need to be persistent upon reboot or restart of a device. ')
jnxSoamDmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamDmCfgIndex"))
if mibBuilder.loadTexts: jnxSoamDmCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgEntry.setDescription('The conceptual row of jnxSoamDmCfgTable.')
jnxSoamDmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgIndex.setDescription('An index to the Delay Measurement Configuration table which indicates the specific measurement session for the MEP. jnxSoamPmMepOperNextIndex needs to be inspected to find an available index for row-creation. Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never reused for other PM sessions on the same MEP while this session is active. The index value keeps increasing until it wraps to zero. This is to facilitate access control based on a fixed index for an EMS, since the index is not reused. ')
jnxSoamDmCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dmDmm", 1), ("dm1DmTx", 2), ("dm1DmRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgType.setReference('[MEF SOAM-PM] R52, R53, R54, O5, R88')
if mibBuilder.loadTexts: jnxSoamDmCfgType.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgType.setDescription('This object indicates what type of Delay Measurement is to be performed. dmDmm(1) DMM SOAM PDU generated, DMR responses received (one-way or two-way measurements) dm1DmTx(2) 1DM SOAM PDU generated (one-way measurements are made by the receiver) dm1DmRx(3) 1DM SOAM PDU received and tracked (one-way measurements) The exact PDUs to use are specified by this object in combination with jnxSoamDmCfgVersion. The value dmDMM is required. The values dm1DmTx and dm1DmRx are optional. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamDmCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgVersion.setReference('[Y.1731]')
if mibBuilder.loadTexts: jnxSoamDmCfgVersion.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgVersion.setDescription('This object indicates the version of the PDUs used to perform Delay Measurement. Version 0 indicates the PDU formats defined in Y.1731-2008. Version 1 indicates the PDU formats defined in Y.1731-2011. The exact PDUs to use are specified by this object in combination with jnxSoamDmCfgType. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamDmCfgEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgEnabled.setReference('[MEF SOAM-PM] R4, R5, R6, O1, R12, R14')
if mibBuilder.loadTexts: jnxSoamDmCfgEnabled.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgEnabled.setDescription("This object specifies whether the Delay Measurement session is enabled. The value 'true' indicates the Delay Measurement session is enabled AND SOAM PDUs are sent and/or measurements are collected when the session is running according to the scheduling objects (start time, stop time, etc.). The value 'false' indicates the Delay Measurement session is disabled AND SOAM PDUs are not sent and/or measurements collected. For a Delay Measurement session to be removed the row is deleted in order to release internal resources. This object can written/modified after row creation time. If the DM session is enabled it resumes after shutdown/restart. If the DM session is disabled the current Measurement Interval is stopped, if it in process at the time, and all the in process calculations for the partially completed Measurement Interval are finalized. This object does not affect whether the single-ended Responder is enabled or not, which is enabled or disabled by the jnxSoamPmMepDmSingleEndedResponder object. ")
jnxSoamDmCfgMeasurementEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 5), Bits().clone(namedValues=NamedValues(("bSoamPdusSent", 0), ("bSoamPdusReceived", 1), ("bFrameDelayTwoWayBins", 2), ("bFrameDelayTwoWayMin", 3), ("bFrameDelayTwoWayMax", 4), ("bFrameDelayTwoWayAvg", 5), ("bFrameDelayForwardBins", 6), ("bFrameDelayForwardMin", 7), ("bFrameDelayForwardMax", 8), ("bFrameDelayForwardAvg", 9), ("bFrameDelayBackwardBins", 10), ("bFrameDelayBackwardMin", 11), ("bFrameDelayBackwardMax", 12), ("bFrameDelayBackwardAvg", 13), ("bIfdvForwardBins", 14), ("bIfdvForwardMin", 15), ("bIfdvForwardMax", 16), ("bIfdvForwardAvg", 17), ("bIfdvBackwardBins", 18), ("bIfdvBackwardMin", 19), ("bIfdvBackwardMax", 20), ("bIfdvBackwardAvg", 21), ("bIfdvTwoWayBins", 22), ("bIfdvTwoWayMin", 23), ("bIfdvTwoWayMax", 24), ("bIfdvTwoWayAvg", 25), ("bFrameDelayRangeForwardBins", 26), ("bFrameDelayRangeForwardMax", 27), ("bFrameDelayRangeForwardAvg", 28), ("bFrameDelayRangeBackwardBins", 29), ("bFrameDelayRangeBackwardMax", 30), ("bFrameDelayRangeBackwardAvg", 31), ("bFrameDelayRangeTwoWayBins", 32), ("bFrameDelayRangeTwoWayMax", 33), ("bFrameDelayRangeTwoWayAvg", 34), ("bMeasuredStatsFrameDelayTwoWay", 35), ("bMeasuredStatsFrameDelayForward", 36), ("bMeasuredStatsFrameDelayBackward", 37), ("bMeasuredStatsIfdvTwoWay", 38), ("bMeasuredStatsIfdvForward", 39), ("bMeasuredStatsIfdvBackward", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgMeasurementEnable.setReference('[MEF SOAM-PM]')
if mibBuilder.loadTexts: jnxSoamDmCfgMeasurementEnable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgMeasurementEnable.setDescription("A vector of bits that indicates the type of SOAM DM counters that are enabled. A bit set to '1' enables the specific SOAM DM counter. A bit set to '0' disables the SOAM DM counter. If a particular SOAM DM counter is not supported the BIT value is set to '0'. Not all SOAM DM counters are supported for all SOAM DM types. This object can only be written at row creation time and cannot be modified once it has been created. bSoamPdusSent(0) Enables/disables the jnxSoamDmCurrentStatsSoamPdusSent and jnxSoamDmHistoryStatsSoamPdusSent counters. bSoamPdusReceived(1) Enables/disables the jnxSoamDmCurrentStatsSoamPdusReceived and jnxSoamDmHistoryStatsSoamPdusReceived counters. bFrameDelayTwoWayBins(2) Enables/disables the jnxSoamDmCurrentStatsBinsEntry counter and the jnxSoamDmHistoryStatsBinsEntry counter when the jnxSoamDmCfgMeasBinType is 'twoWayFrameDelay'. bFrameDelayTwoWayMin(3) Enables/disables the jnxSoamDmCurrentStatsFrameDelayTwoWayMin and jnxSoamDmHistoryStatsFrameDelayTwoWayMin counters. bFrameDelayTwoWayMax(4) Enables/disables the jnxSoamDmCurrentStatsFrameDelayTwoWayMax and jnxSoamDmHistoryStatsFrameDelayTwoWayMax counters. bFrameDelayTwoWayAvg(5) Enables/disables the jnxSoamDmCurrentStatsFrameDelayTwoWayAvg and jnxSoamDmHistoryStatsFrameDelayTwoWayAvg counters. bFrameDelayForwardBins(6) Enables/disables the jnxSoamDmCurrentStatsBinsEntry counter and the jnxSoamDmHistoryStatsBinsEntry counter when the jnxSoamDmCfgMeasBinType is 'forwardFrameDelay'. bFrameDelayForwardMin(7) Enables/disables the jnxSoamDmCurrentStatsFrameDelayForwardMin and jnxSoamDmHistoryStatsFrameDelayForwardMin counters. bFrameDelayForwardMax(8) Enables/disables the jnxSoamDmCurrentStatsFrameDelayForwardMax and jnxSoamDmHistoryStatsFrameDelayForwardMax counters. bFrameDelayForwardAvg(9) Enables/disables the jnxSoamDmCurrentStatsFrameDelayForwardAvg and jnxSoamDmHistoryStatsFrameDelayForwardAvg counters. bFrameDelayBackwardBins(10) Enables/disables the jnxSoamDmCurrentStatsBinsEntry counter and the jnxSoamDmHistoryStatsBinsEntry counter when the jnxSoamDmCfgMeasBinType is 'backwardFrameDelay'. bFrameDelayBackwardMin(11) Enables/disables the jnxSoamDmCurrentStatsFrameDelayBackwardMin and jnxSoamDmHistoryStatsFrameDelayBackwardMin counters. bFrameDelayBackwardMax(12) Enables/disables the jnxSoamDmCurrentStatsFrameDelayBackwardMax and jnxSoamDmHistoryStatsFrameDelayBackwardMax counters. bFrameDelayBackwardAvg(13) Enables/disables the jnxSoamDmCurrentStatsFrameDelayBackwardAvg and jnxSoamDmHistoryStatsFrameDelayBackwardAvg counters. bIfdvForwardBins(14) Enables/disables the jnxSoamDmCurrentStatsBinsEntry counter and the jnxSoamDmHistoryStatsBinsEntry counter when the jnxSoamDmCfgMeasBinType is 'forwardIfdv'. bIfdvForwardMin(15) Enables/disables the jnxSoamDmCurrentStatsIfdvForwardMin and jnxSoamDmHistoryStatsIfdvForwardMin counters. bIfdvForwardMax(16) Enables/disables the jnxSoamDmCurrentStatsIfdvForwardMax and jnxSoamDmHistoryStatsIfdvForwardMax counters. bIfdvForwardAvg(17) Enables/disables the jnxSoamDmCurrentStatsIfdvForwardAvg and jnxSoamDmHistoryStatsIfdvForwardAvg counters. bIfdvBackwardBins(18) Enables/disables the jnxSoamDmCurrentStatsBinsEntry counter and the jnxSoamDmHistoryStatsBinsEntry counter when the jnxSoamDmCfgMeasBinType is 'backwardIfdv'. bIfdvBackwardMin(19) Enables/disables the jnxSoamDmCurrentStatsIfdvBackwardMin and jnxSoamDmHistoryStatsIfdvBackwardMin counters. bIfdvBackwardMax(20) Enables/disables the jnxSoamDmCurrentStatsIfdvBackwardMax and jnxSoamDmHistoryStatsIfdvBackwardMax counters. bIfdvBackwardAvg(21) Enables/disables the jnxSoamDmCurrentStatsIfdvBackwardAvg and jnxSoamDmHistoryStatsIfdvBackwardAvg counters. bIfdvTwoWayBins(22) Enables/disables the jnxSoamDmCurrentStatsBinsEntry counter and the jnxSoamDmHistoryStatsBinsEntry counter when the jnxSoamDmCfgMeasBinType is 'twoWayIfdv'. bIfdvTwoWayMin(23) Enables/disables the jnxSoamDmCurrentStatsIfdvTwoWayMin and jnxSoamDmHistoryStatsIfdvTwoWayMin counters. bIfdvTwoWayMax(24) Enables/disables the jnxSoamDmCurrentStatsIfdvTwoWayMax and jnxSoamDmHistoryStatsIfdvTwoWayMax counters. bIfdvTwoWayAvg(25) Enables/disables the jnxSoamDmCurrentStatsIfdvTwoWayAvg and jnxSoamDmHistoryStatsIfdvTwoWayAvg counters. bFrameDelayRangeForwardBins(26) Enables/disables the jnxSoamDmCurrentStatsBinsEntry counter and the jnxSoamDmHistoryStatsBinsEntry counter when the jnxSoamDmCfgMeasBinType is 'forwardFrameDelayRange'. bFrameDelayRangeForwardMax(27) Enables/disables the jnxSoamDmCurrentStatsFrameDelayRangeForwardMax and jnxSoamDmHistoryStatsFrameDelayRangeForwardMax counters. bFrameDelayRangeForwardAvg(28) Enables/disables the jnxSoamDmCurrentStatsFrameDelayRangeForwardAvg and jnxSoamDmHistoryStatsFrameDelayRangeForwardAvg counters. bFrameDelayRangeBackwardBins(29) Enables/disables the jnxSoamDmCurrentStatsBinsEntry counter and the jnxSoamDmHistoryStatsBinsEntry counter when the jnxSoamDmCfgMeasBinType is 'backwardFrameDelayRange'. bFrameDelayRangeBackwardMax(30) Enables/disables the jnxSoamDmCurrentStatsFrameDelayRangeBackwardMax and jnxSoamDmHistoryStatsFrameDelayRangeBackwardMax counters. bFrameDelayRangeBackwardAvg(31) Enables/disables the jnxSoamDmCurrentStatsFrameDelayRangeBackwardAvg and jnxSoamDmHistoryStatsFrameDelayRangeBackwardAvg counters. bFrameDelayRangeTwoWayBins(32) Enables/disables the jnxSoamDmCurrentStatsBinsEntry counter and the jnxSoamDmHistoryStatsBinsEntry counter when the jnxSoamDmCfgMeasBinType is 'twoWayFrameDelayRange'. bFrameDelayRangeTwoWayMax(33) Enables/disables the jnxSoamDmCurrentStatsFrameDelayRangeTwoWayMax and jnxSoamDmHistoryStatsFrameDelayRangeTwoWayMax counters. bFrameDelayRangeTwoWayAvg(34) Enables/disables the jnxSoamDmCurrentStatsFrameDelayRangeTwoWayAvg and jnxSoamDmHistoryStatsFrameDelayRangeTwoWayAvg counters. bMeasuredStatsFrameDelayTwoWay(35) Enables/disables the jnxSoamDmMeasuredStatsFrameDelayTwoWay counter. bMeasuredStatsFrameDelayForward(36) Enables/disables the jnxSoamDmMeasuredStatsFrameDelayForward counter. bMeasuredStatsFrameDelayBackward(37) Enables/disables the jnxSoamDmMeasuredStatsFrameDelayBackward counter. bMeasuredStatsIfdvTwoWay(38) Enables/disables the jnxSoamDmMeasuredStatsIfdvTwoWay counter. bMeasuredStatsIfdvForward(39) Enables/disables the jnxSoamDmMeasuredStatsIfdvForward counter. bMeasuredStatsIfdvBackward(40) Enables/disables the jnxSoamDmMeasuredStatsIfdvBackward counter. ")
jnxSoamDmCfgMessagePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 6), Integer32().clone(100)).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgMessagePeriod.setReference('[MEF SOAM-PM] R61, R62, D22, R95, R96, D39')
if mibBuilder.loadTexts: jnxSoamDmCfgMessagePeriod.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgMessagePeriod.setDescription('This object specifies the interval between Delay Measurement OAM message transmission. For Delay Measurement monitoring applications, the default value is 100ms. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamDmCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 7), IEEE8021PriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgPriority.setReference('[MEF SOAM-PM] R1, R2, R56, D21, R57, R58, R90-R94, D28; [MEF 10.2.1] Section 6.8')
if mibBuilder.loadTexts: jnxSoamDmCfgPriority.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgPriority.setDescription('This object specifies the priority of frames with Delay Measurement OAM message information. The default value is to be the value which yields the lowest frame loss. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamDmCfgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 8), Unsigned32().clone(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgFrameSize.setReference('[MEF SOAM-PM] R63, R64, D23, D24, R97, R98, D40, D41')
if mibBuilder.loadTexts: jnxSoamDmCfgFrameSize.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgFrameSize.setDescription('This object specifies the Delay Measurement frame size between 64 bytes and the maximum transmission unit of the EVC. The range of frame sizes from 64 through 2000 octets need to be supported, and the range of frame sizes from 2001 through 9600 octets is suggested to be supported. The adjustment to the frame size of the standard frame size is accomplished by the addition of a Data or Test TLV. A Data or Test TLV is only added to the frame if the frame size is greater than 64 bytes. This object is only valid for the entity transmitting the Delay Measurement frames (dmDmm, dm1DmTx) and is ignored by the entity receiving frames. In addition, this object is not valid when jnxSoamDmCfgVersion is 0. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamDmCfgDataPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 9), JnxSoamTcDataPatternType().clone('zeroPattern')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgDataPattern.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgDataPattern.setDescription("This object specifies the DM data pattern included in a Data TLV when the size of the DM frame is determined by the jnxSoamDmFrameSize object and jnxSoamDmTestTlvIncluded is 'false'. If the frame size object does not define the DM frame size or jnxSoamDmTestTlvIncluded is 'true' the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamDmCfgTestTlvIncluded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgTestTlvIncluded.setReference('[Y.1731] 9.3')
if mibBuilder.loadTexts: jnxSoamDmCfgTestTlvIncluded.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgTestTlvIncluded.setDescription("Indicates whether a Test TLV or Data TLV is included when the size of the DM frame is determined by the jnxSoamDmFrameSize object. A value of 'true' indicates that the Test TLV is to be included. A value of 'false' indicates that the Data TLV is to be included. If the frame size object does not define the DM frame size the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamDmCfgTestTlvPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 11), JnxSoamTcTestPatternType().clone('null')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgTestTlvPattern.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgTestTlvPattern.setDescription("This object specifies the type of test pattern to be sent in the DM frame Test TLV when the size of DM PDU is determined by the jnxSoamDmFrameSize object and jnxSoamDmTestTlvIncluded is 'true'. If the frame size object does not define the DM frame size or jnxSoamDmTestTlvIncluded is 'false' the value of this object is ignored. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamDmCfgNumIntervalsStored = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgNumIntervalsStored.setReference('[MEF SOAM-PM] R21, D8, D9')
if mibBuilder.loadTexts: jnxSoamDmCfgNumIntervalsStored.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgNumIntervalsStored.setDescription('This object specifies the number of completed Measurement Intervals to store in the history statistic table. At least 32 completed Measurement Intervals are to be stored. 96 Measurement Intervals are recommended to be stored. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamDmCfgDestMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 13), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgDestMepId.setReference('[MEF SOAM-PM] R55, R89')
if mibBuilder.loadTexts: jnxSoamDmCfgDestMepId.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgDestMepId.setDescription("The Maintenance Association End Point Identifier of another MEP in the same Maintenance Association to which the SOAM DM frame is to be sent. This address will be used if the value of the column jnxSoamDmDestIsMepId is 'true'. A value of zero means that the destination MEP ID has not been configured. This object is only valid for the entity transmitting the Delay Measurement frames, types 'dmDmm' and 'dm1DmTx'. It is not applicable for the 'dm1DmRx' type. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamDmCfgDestIsMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgDestIsMepId.setReference('[MEF SOAM-PM] R55, R89')
if mibBuilder.loadTexts: jnxSoamDmCfgDestIsMepId.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgDestIsMepId.setDescription("A value of 'true' indicates that MEPID of the target MEP is used for SOAM DM frame transmission. A value of 'false' indicates that the destination MAC address of the target MEP is used for SOAM DM frame transmission. This object is only valid for the entity transmitting the Delay Measurement frames, types 'dmDmm' and 'dm1DmTx'. It is not applicable for the 'dm1DmRx type. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamDmCfgStartTimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 15), JnxSoamTcOperationTimeType().clone('immediate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgStartTimeType.setReference('[MEF SOAM-PM] R3, R7, R8, D1')
if mibBuilder.loadTexts: jnxSoamDmCfgStartTimeType.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgStartTimeType.setDescription("This object specifies the type of start time of the SOAM DM session. The start time can be disabled (none), immediate, relative, or fixed. The value of 'none' is illegal and a write error will be returned if this value is used. The value of 'immediate' starts the SOAM DM session when the jnxSoamDmCfgEnabled is true. The value of 'fixed' starts the SOAM DM session when the jnxSoamDmFixedStartDateAndTime is less than or equal to the current system date and time and jnxSoamDmCfgEnabled is true. This value is used to implement an On-Demand fixed time PM session. The value of 'relative' starts the SOAM DM session when the current system date and time minus the jnxSoamDmRelativeStartTime is greater than or equal to the system date and time when the jnxSoamDmStartTimeType object was written and jnxSoamDmCfgEnabled is true. This value is used to implement an On-Demand relative time PM session. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamDmCfgRepetitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31536000))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgRepetitionTime.setReference('[MEF SOAM-PM] R18, D3, R19, R20')
if mibBuilder.loadTexts: jnxSoamDmCfgRepetitionTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgRepetitionTime.setDescription('This object specifies a configurable repetition time between Measurement Intervals in a Delay Measurement session in seconds. If the value is 0 (none), there is no time gap between the end of one Measurement Interval and the start of a new Measurement Interval. This is the normal usage case. If the value is greater than one Measurement Interval there is time gap between the end of one Measurement Interval and the start of the next Measurement Interval. The repetition time specifies the time between the start of consecutive Measurement Intervals; hence the gap between the end of one Measurement Interval and the start of the next is equal to the difference between the repetition time and the measurement interval. During this gap, no SOAM PDUs are sent for this session and no measurements are made. If the value is greater 0 but less than or equal to the measurement interval, an error is returned. This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamDmCfgAlignMeasurementIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 17), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgAlignMeasurementIntervals.setReference('[MEF SOAM-PM] D4, D5, D6')
if mibBuilder.loadTexts: jnxSoamDmCfgAlignMeasurementIntervals.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgAlignMeasurementIntervals.setDescription("This object specifies whether the Measurement Intervals for the Delay Measurement session are aligned with a zero offset to real time. The value 'true' indicates that each Measurement Interval starts at a time which is aligned to NE time source hour, if the repetition time (or the Measurement Interval, if the repetition time is 0) is a factor of an hour, i.e. 60min/15min = 4. For instance, a Measurement Interval/Repetition Time of 15 minutes would stop/start the Measurement Interval at 0, 15, 30, and 45 minutes of an hour. A Measurement Interval/Repetition Time of 7 minutes would not align to the hour since 7 minutes is NOT a factor of an hour, i.e. 60min/7min = 8.6. In this case the behavior is the same as if the object is set to 'false'. The value 'false' indicates that the first Measurement Interval starts at an arbitrary time and each subsequent Measurement Interval starts at a time which is determined by jnxSoamLmCfgRepetitionTime. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamDmCfgInterFrameDelayVariationSelectionOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgInterFrameDelayVariationSelectionOffset.setReference('[MEF SOAM-PM] O4, D25, O6, D42')
if mibBuilder.loadTexts: jnxSoamDmCfgInterFrameDelayVariationSelectionOffset.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgInterFrameDelayVariationSelectionOffset.setDescription('This object specifies the selection offset for Inter-Frame Delay Variation measurements. If this value is set to n, then the IFDV is calculated by taking the difference in frame delay between frame F and frame (F+n). This object can only be written at row creation time and cannot be modified once it has been created. ')
jnxSoamDmCfgSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 42)).clone('proactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgSessionType.setReference('[MEF SOAM-PM] R3')
if mibBuilder.loadTexts: jnxSoamDmCfgSessionType.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgSessionType.setDescription("This object indicates whether the current session is defined to be 'Proactive' or 'On-Demand'. A value of 'proactive' indicates the current session is 'Proactive'. A value of 'onDemand' indicates the current session is 'On-Demand'. This object can only be written at row creation time and cannot be modified once it has been created. ")
jnxSoamDmCfgSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgSessionStatus.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgSessionStatus.setDescription("This object indicates the current status of the DM session. A value of 'active' indicates the current DM session is active, i.e. the current time lies between the start time and the stop time, and jnxSoamDmCfgEnabled is true. A value of 'notActive' indicates the current DM session is not active, i.e. it has not started yet, has stopped upon reaching the stop time, or is disabled. ")
jnxSoamDmCfgHistoryClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgHistoryClear.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgHistoryClear.setDescription("This object when written clears the Delay Measurement history tables (jnxSoamDmHistoryStatsTable) - all rows are deleted. When read the value always returns 'false'. Writing this value does not change the current stat table, nor any of the items in the configuration table. Writing this object at row creation has no effect. ")
jnxSoamDmCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 1, 1, 22), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCfgRowStatus.setDescription('The status of the row. The writable columns in a row cannot be changed if the row is active, except for jnxSoamDmCfgEnabled and jnxSoamDmCfgHistoryClear objects. All columns are to have a valid value before a row can be activated. ')
jnxSoamDmMeasuredStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 2), )
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsTable.setReference('[MEF SOAM-PM] R7, R15, D18')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsTable.setDescription('This object contains the last measured results for a SOAM Delay Measurement session. Each row in the table represents a Delay Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. Instances of this managed object are created automatically by the SNMP Agent when the Delay Measurement session is running. Each object in this table applies only if the corresponding bit is set in jnxSoamDmCfgMeasurementEnable. The objects in this table do not need to be persistent upon reboot or restart of a device. ')
jnxSoamDmMeasuredStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamDmCfgIndex"))
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsEntry.setDescription('The conceptual row of jnxSoamDmMeasuredStatsTable')
jnxSoamDmMeasuredStatsFrameDelayTwoWay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 2, 1, 1), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsFrameDelayTwoWay.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsFrameDelayTwoWay.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsFrameDelayTwoWay.setDescription('This object contains the two-way frame delay calculated by this MEP from the last received SOAM PDU. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmMeasuredStatsFrameDelayForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 2, 1, 2), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsFrameDelayForward.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsFrameDelayForward.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsFrameDelayForward.setDescription('This object contains the frame delay in the forward direction calculated by this MEP from the last received SOAM PDU. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmMeasuredStatsFrameDelayBackward = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 2, 1, 3), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsFrameDelayBackward.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsFrameDelayBackward.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsFrameDelayBackward.setDescription('This object contains the frame delay in the backward direction calculated by this MEP from the last received SOAM PDU. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmMeasuredStatsIfdvTwoWay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 2, 1, 4), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsIfdvTwoWay.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsIfdvTwoWay.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsIfdvTwoWay.setDescription('This object contains the last two-way inter-frame delay interval calculated by this MEP. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmMeasuredStatsIfdvForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 2, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsIfdvForward.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsIfdvForward.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsIfdvForward.setDescription('This object contains the last one-way inter-frame delay interval in the forward direction calculated by this MEP. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmMeasuredStatsIfdvBackward = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 2, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsIfdvBackward.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsIfdvBackward.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmMeasuredStatsIfdvBackward.setDescription('This object contains the last one-way inter-frame delay interval in the backward direction calculated by this MEP. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3), )
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsTable.setReference('[MEF SOAM-PM] R7, R15, D9, D18')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsTable.setDescription('This table contains the results for the current Measurement Interval in a SOAM Delay Measurement session gathered during the interval indicated by iterator count. A row in this table is created automatically by the SNMP Agent when the Delay Measurement session is configured. Each row in the table represents the current statistics for a Delay Measurement session for the defined MEP. This table uses four indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. There can be more than one DM session per MEP. The objects in this table apply regardless of the value of jnxSoamDmCfgType unless otherwise specified in the object description. Backward and two-way statistic objects are undefined if jnxSoamDmCfgType is dm1DmRx. Except for jnxSoamDmCurrentStatsIndex, jnxSoamDmCurrentStatsStartTime jnxSoamDmCurrentStatsElapsedTime and jnxSoamDmCurrentStatsSuspect, each object in this table applies only if the corresponding bit is set in jnxSoamDmCfgMeasurementEnable. The objects in this table do not need to be persistent upon reboot or restart of a device. ')
jnxSoamDmCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamDmCfgIndex"))
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsEntry.setDescription('The conceptual row of jnxSoamDmCurrentStatsTable')
jnxSoamDmCurrentStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIndex.setDescription('The index for the current Measurement Interval for this PM session. This value will become the value for jnxSoamDmHistoryStatsIndex once the Measurement Interval is completed. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. ')
jnxSoamDmCurrentStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsStartTime.setReference('[MEF SOAM-PM] R22, R66, R100')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsStartTime.setDescription('The time that the current Measurement Interval started. ')
jnxSoamDmCurrentStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsElapsedTime.setReference('[MEF SOAM-PM] R24, R66, R100')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsElapsedTime.setDescription('The time that the current Measurement Interval has been running, in 0.01 seconds. ')
jnxSoamDmCurrentStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is to be set to false at the start of a measurement interval. It is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
jnxSoamDmCurrentStatsFrameDelayTwoWayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayTwoWayMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayTwoWayMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayTwoWayMin.setDescription('This object contains the minimum two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsFrameDelayTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayTwoWayMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayTwoWayMax.setDescription('This object contains the maximum two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsFrameDelayTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 7), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayTwoWayAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayTwoWayAvg.setDescription('This object contains the average two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsFrameDelayForwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 8), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayForwardMin.setReference('[MEF SOAM-PM] R67, R101')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayForwardMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayForwardMin.setDescription('This object contains the minimum one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmCurrentStatsFrameDelayForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 9), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayForwardMax.setReference('[MEF SOAM-PM] R67, R101')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayForwardMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayForwardMax.setDescription('This object contains the maximum one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmCurrentStatsFrameDelayForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayForwardAvg.setReference('[MEF SOAM-PM] R67, R101')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayForwardAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayForwardAvg.setDescription('This object contains the average one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmCurrentStatsFrameDelayBackwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayBackwardMin.setReference('[MEF SOAM-PM] R67')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayBackwardMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayBackwardMin.setDescription('This object contains the minimum one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsFrameDelayBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 12), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayBackwardMax.setReference('[MEF SOAM-PM] R67')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayBackwardMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayBackwardMax.setDescription('This object contains the maximum one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsFrameDelayBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayBackwardAvg.setReference('[MEF SOAM-PM] R67')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsFrameDelayBackwardAvg.setDescription('This object contains the average one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsIfdvForwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvForwardMin.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvForwardMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvForwardMin.setDescription('This object contains the minimum one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmCurrentStatsIfdvForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvForwardMax.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvForwardMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvForwardMax.setDescription('This object contains the maximum one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmCurrentStatsIfdvForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvForwardAvg.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvForwardAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvForwardAvg.setDescription('This object contains the average one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmCurrentStatsIfdvBackwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 17), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvBackwardMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvBackwardMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvBackwardMin.setDescription('This object contains the minimum one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsIfdvBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvBackwardMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvBackwardMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvBackwardMax.setDescription('This object contains the maximum one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsIfdvBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 19), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvBackwardAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvBackwardAvg.setDescription('This object contains the average one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsIfdvTwoWayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 20), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvTwoWayMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvTwoWayMin.setDescription('This object contains the minimum two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsIfdvTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 21), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvTwoWayMax.setDescription('This object contains the maximum two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsIfdvTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 22), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsIfdvTwoWayAvg.setDescription('This object contains the average two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmCurrentStatsSoamPdusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsSoamPdusSent.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsSoamPdusSent.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsSoamPdusSent.setDescription('This object contains the count of the number of SOAM PDUs sent during this Measurement Interval. This object applies when jnxSoamDmCfgType is dmDmm or dm1DmTx and is undefined if jnxSoamDmCfgType is dm1DmRx. It indicates the number of DMM or 1DM SOAM frames transmitted. ')
jnxSoamDmCurrentStatsSoamPdusReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsSoamPdusReceived.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsSoamPdusReceived.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmCurrentStatsSoamPdusReceived.setDescription('This object contains the count of the number of SOAM PDUs received in this Measurement Interval. This object indicates the number of DMR and 1DM SOAM frames received. This object applies when jnxSoamDmCfgTypeis dmDmm or dm1DmRx and is undefined if jnxSoamDmCfgTypeis dm1DmTx. ')
jnxSoamDmHistoryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4), )
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsTable.setReference('[MEF SOAM-PM] R7, R15, R21, D8, R25')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsTable.setDescription('This table contains the results for history Measurement Intervals in a SOAM Delay Measurement session. Rows of this table are created automatically by the SNMP Agent when the Delay Measurement session is running and a Measurement Interval is completed. Each row in the table represents the Measurement Interval history statistics for a Delay Measurement session for the defined MEP. This table uses five indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. The fifth index is the Measurement Interval. At least 32 completed Measurement Intervals are to be supported. 96 completed Measurement Intervals are recommended to be supported. If there are at least 32 rows in the table and a new Measurement Interval completes and a new row is to be added to the table, the oldest completed Measurement Interval can be deleted (row deletion). If the measurement interval is other than 15 minutes then a minimum of 8 hours of completed Measurement Intervals are to be supported and 24 hours are recommended to be supported. The objects in this table apply regardless of the value of jnxSoamDmCfgType unless otherwise specified in the object description. Backward and two-way statistic objects are undefined if jnxSoamDmCfgType is dm1DmRx. Except for jnxSoamDmHistoryStatsIndex, jnxSoamDmHistoryStatsEndTime, jnxSoamDmHistoryStatsElapsedTime and jnxSoamDmHistoryStatsSuspect, each object in this table applies only if the corresponding bit is set in jnxSoamDmCfgMeasurementEnable. The rows and objects in this table are to be persistent upon reboot or restart of a device. ')
jnxSoamDmHistoryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamDmCfgIndex"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamDmHistoryStatsIndex"))
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsEntry.setDescription('The conceptual row of jnxSoamDmHistoryStatsTable')
jnxSoamDmHistoryStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIndex.setDescription('The index for the Measurement Interval within this PM session. Measurement Interval indexes are assigned sequentially by the SNMP Agent. The first Measurement Interval that occurs after the session is started is assigned index 1. Referential integrity is necessary, i.e., the index needs to be persistent upon a reboot or restart of a device. The index is never reused while this session is active until it wraps to zero. The index value keeps increasing up to that time. ')
jnxSoamDmHistoryStatsEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsEndTime.setReference('[MEF SOAM-PM] R23, R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsEndTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsEndTime.setDescription('The time that the Measurement Interval ended. ')
jnxSoamDmHistoryStatsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsElapsedTime.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsElapsedTime.setDescription('The length of time that the Measurement Interval ran for, in 0.01 seconds. ')
jnxSoamDmHistoryStatsSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsSuspect.setReference('[MEF SOAM-PM] R39, R40, R41, R42')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsSuspect.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsSuspect.setDescription('Whether the Measurement Interval has been marked as suspect. The object is set to true when there is a discontinuity in the performance measurements during the Measurement Interval. Conditions for a discontinuity include, but are not limited to the following: 1 - The local time-of-day clock is adjusted by at least 10 seconds 2 - The conducting of a performance measurement is halted before the current Measurement Interval is completed 3 - A local test, failure, or reconfiguration that disrupts service ')
jnxSoamDmHistoryStatsFrameDelayTwoWayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayTwoWayMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayTwoWayMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayTwoWayMin.setDescription('This object contains the minimum two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsFrameDelayTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayTwoWayMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayTwoWayMax.setDescription('This object contains the maximum two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsFrameDelayTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 7), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayTwoWayAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayTwoWayAvg.setDescription('This object contains the average two-way frame delay calculated by this MEP for this Measurement Interval. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsFrameDelayForwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 8), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayForwardMin.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayForwardMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayForwardMin.setDescription('This object contains the minimum one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmHistoryStatsFrameDelayForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 9), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayForwardMax.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayForwardMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayForwardMax.setDescription('This object contains the maximum one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmHistoryStatsFrameDelayForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayForwardAvg.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayForwardAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayForwardAvg.setDescription('This object contains the average one-way frame delay in the forward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmHistoryStatsFrameDelayBackwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayBackwardMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayBackwardMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayBackwardMin.setDescription('This object contains the minimum one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsFrameDelayBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 12), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayBackwardMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayBackwardMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayBackwardMax.setDescription('This object contains the maximum one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsFrameDelayBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayBackwardAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsFrameDelayBackwardAvg.setDescription('This object contains the average one-way frame delay in the backward direction calculated by this MEP for this Measurement Interval. The value of this object may not be accurate in the absence of sufficiently precise clock synchronization. This object is undefined is jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsIfdvForwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvForwardMin.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvForwardMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvForwardMin.setDescription('This object contains the minimum one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmHistoryStatsIfdvForwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvForwardMax.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvForwardMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvForwardMax.setDescription('This object contains the maximum one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmHistoryStatsIfdvForwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvForwardAvg.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvForwardAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvForwardAvg.setDescription('This object contains the average one-way inter-frame delay interval in the forward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamDmHistoryStatsIfdvBackwardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 17), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvBackwardMin.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvBackwardMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvBackwardMin.setDescription('This object contains the minimum one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsIfdvBackwardMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvBackwardMax.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvBackwardMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvBackwardMax.setDescription('This object contains the maximum one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsIfdvBackwardAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 19), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvBackwardAvg.setReference('[MEF SOAM-PM] R66')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvBackwardAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvBackwardAvg.setDescription('This object contains the average one-way inter-frame delay interval in the backward direction calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsIfdvTwoWayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 20), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvTwoWayMin.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvTwoWayMin.setDescription('This object contains the minimum two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsIfdvTwoWayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 21), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvTwoWayMax.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvTwoWayMax.setDescription('This object contains the maximum two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsIfdvTwoWayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 22), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvTwoWayAvg.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsIfdvTwoWayAvg.setDescription('This object contains the average two-way inter-frame delay interval calculated by this MEP for this Measurement Interval. The value of this object is undefined when jnxSoamDmCfgType is dm1DmTx or dm1DmRx. ')
jnxSoamDmHistoryStatsSoamPdusSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsSoamPdusSent.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsSoamPdusSent.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsSoamPdusSent.setDescription('This object contains the count of the number of SOAM PDUs sent during this Measurement Interval. This object applies when jnxSoamDmCfgType is dmDmm or dm1DmTx and is undefined if jnxSoamDmCfgType is dm1DmRx. It indicates the number of DMM or 1DM SOAM frames transmitted. ')
jnxSoamDmHistoryStatsSoamPdusReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 4, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsSoamPdusReceived.setReference('[MEF SOAM-PM] R66, R100')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsSoamPdusReceived.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmHistoryStatsSoamPdusReceived.setDescription('This object contains the count of the number of SOAM PDUs received in this Measurement Interval. This object indicates the number of DMR and 1DM SOAM frames received. This object applies when jnxSoamDmCfgType is dmDmm or dm1DmRx and is undefined if jnxSoamDmCfgType is dm1DmTx. ')
jnxSoamLmThresholdCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 5), )
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgTable.setDescription("This table contains the list of Loss Measurement configuration threshold values for LM Performance Monitoring. The main purpose of the threshold configuration table is to configure threshold alarm notifications indicating that a specific performance metric is not being met. Each row in the table represents a Loss Measurement session threshold set for the defined MEP. This table uses five indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific LM session on the selected MEP. The fifth index is the specific threshold set number. Rows in this table are not created automatically. A row is created in this table to set up a threshold set on a configured MEP that has a configured LM session. If two managers try to 'create' the same row at the same time, the first creation would succeed, the second creation attempt would result in an error. The second creation attempt would then need to select a new index value to successfully create a new row. An NE needs to support at least one threshold set for NE SOAM PM compliance. A second threshold set on the NE is desirable. More than two threshold sets can be configured on the NE if supported on the NE. All the objects in the row have a default value that disables the particular threshold measurement. In order to enable a threshold measurement the particular bit in the jnxSoamLmThresholdCfgEnable object is to be set to '1' and the selected threshold measurement is to have a threshold value configured. Non-configured threshold measurements are disabled by default. The writable objects in this table need to be persistent upon reboot or restart of a device. ")
jnxSoamLmThresholdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 5, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamLmCfgIndex"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamLmThresholdCfgIndex"))
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgEntry.setDescription('The conceptual row of jnxSoamLmThresholdCfgTable.')
jnxSoamLmThresholdCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgIndex.setDescription("The index of the threshold number for the specific LM threshold entry. An index value of '1' needs to be supported. Other index values can also be supported. ")
jnxSoamLmThresholdCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 5, 1, 2), Bits().clone(namedValues=NamedValues(("bJnxSoamLmMeasuredFlrForwardThreshold", 0), ("bJnxSoamLmMaxFlrForwardThreshold", 1), ("bJnxSoamLmAvgFlrForwardThreshold", 2), ("bJnxSoamLmMeasuredFlrBackwardThreshold", 3), ("bJnxSoamLmMaxFlrBackwardThreshold", 4), ("bJnxSoamLmAvgFlrBackwardThreshold", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgEnable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgEnable.setDescription("A vector of bits that indicates the type of SOAM LM thresholds notifications that are enabled. A bit set to '1' enables the specific SOAM LM threshold notification and when the specific counter is enabled and the threshold is crossed a notification is generated. A bit set to '0' disables the specific SOAM LM threshold notification. If a particular SOAM LM threshold is not supported the BIT value is set to '0'. bJnxSoamLmMeasuredFlrForwardThreshold(0) Enables/disables measured frame loss forward ratio threshold notification. The notification is sent immediately when the jnxSoamLmMeasuredStatsForwardFlr value is greater than or equal to the threshold value. bJnxSoamLmMaxFlrForwardThreshold(1) Enables/disables maximum frame loss forward ratio threshold notification. The notification is sent immediately when the jnxSoamLmCurrentStatsForwardMaxFlr value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamLmAvgFlrForwardThreshold(2) Enables/disables average frame loss forward ratio threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamLmCurrentStatsForwardAvgFlr value is greater than or equal to the threshold value. bJnxSoamLmMeasuredFlrBackwardThreshold(3) Enables/disables measured frame loss backward ratio threshold notification. The notification is sent immediately when the jnxSoamLmMeasuredStatsBackwardFlr value is greater than or equal to the threshold value. bJnxSoamLmMaxFlrBackwardThreshold(4) Enables/disables maximum frame loss backward ratio threshold notification. The notification is sent immediately when the jnxSoamLmCurrentStatsBackwardMaxFlr value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamLmAvgFlrBackwardThreshold(5) Enables/disables average frame loss backward ratio threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamLmCurrentStatsBackwardAvgFlr value is greater than or equal to the threshold value. ")
jnxSoamLmThresholdCfgAvgFlrForwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgAvgFlrForwardThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgAvgFlrForwardThreshold.setDescription('This object is used to set the average forward frame loss ratio threshold value that will be used to determine if a threshold notification is generated. ')
jnxSoamLmThresholdCfgAvgFlrBackwardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setUnits('milli-percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgAvgFlrBackwardThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgAvgFlrBackwardThreshold.setDescription('This object is used to set the average backward frame loss ratio threshold value that will be used to determine if a threshold notification is generated. ')
jnxSoamLmThresholdCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 2, 5, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmThresholdCfgRowStatus.setDescription('The status of the row. The writable columns in a row cannot be changed if the row is active. All columns are to have a valid value before a row can be activated. ')
jnxSoamDmThresholdCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 5), )
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgTable.setDescription("This table contains the list of Delay Measurement threshold configuration values for DM Performance Monitoring. The main purpose of the threshold configuration table is to configure threshold alarm notifications indicating that a specific performance metric is not being met. Each row in the table represents a Delay Measurement session threshold set for the defined MEP. This table uses five indices. The first three indices are the indices of the Maintenance Domain, MaNet, and MEP tables. The fourth index is the specific DM session on the selected MEP. The fifth index is the specific threshold set number. Rows in this table are not created automatically. A row is created in this table to set up a threshold set on a configured MEP that has a configured DM session. An NE needs to support at least one threshold set for NE SOAM PM compliance. A second threshold set on the NE is desirable. More than two threshold sets on the NE can be configured if supported on the NE. All the objects in the row have a default value that disables the particular threshold measurement. In order to enable a threshold measurement the particular bit in the jnxSoamDmThresholdCfgEnable object is to be set to '1' and the selected threshold measurement is to have a threshold value configured. Non-configured threshold measurements are disabled by default. The writable objects in this table need to be persistent upon reboot or restart of a device. ")
jnxSoamDmThresholdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 5, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamDmCfgIndex"), (0, "JUNIPER-SOAM-PM-MIB", "jnxSoamDmThresholdCfgIndex"))
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgEntry.setDescription('The conceptual row of jnxSoamDmThresholdCfgTable.')
jnxSoamDmThresholdCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgIndex.setDescription("The index of the threshold number for the specific DM threshold entry. An index value of '1' is to be supported. Other index values can be supported. ")
jnxSoamDmThresholdCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 5, 1, 2), Bits().clone(namedValues=NamedValues(("bJnxSoamDmMeasuredFrameDelayTwoWayThreshold", 0), ("bJnxSoamDmMaxFrameDelayTwoWayThreshold", 1), ("bJnxSoamDmAvgFrameDelayTwoWayThreshold", 2), ("bJnxSoamDmMeasuredIfdvTwoWayThreshold", 3), ("bJnxSoamDmMaxIfdvTwoWayThreshold", 4), ("bJnxSoamDmAvgIfdvTwoWayThreshold", 5), ("bJnxSoamDmMaxFrameDelayRangeTwoWayThreshold", 6), ("bJnxSoamDmAvgFrameDelayRangeTwoWayThreshold", 7), ("bJnxSoamDmMeasuredFrameDelayForwardThreshold", 8), ("bJnxSoamDmMaxFrameDelayForwardThreshold", 9), ("bJnxSoamDmAvgFrameDelayForwardThreshold", 10), ("bJnxSoamDmMeasuredIfdvForwardThreshold", 11), ("bJnxSoamDmMaxIfdvForwardThreshold", 12), ("bJnxSoamDmAvgIfdvForwardThreshold", 13), ("bJnxSoamDmMaxFrameDelayRangeForwardThreshold", 14), ("bJnxSoamDmAvgFrameDelayRangeForwardThreshold", 15), ("bJnxSoamDmMeasuredFrameDelayBackwardThreshold", 16), ("bJnxSoamDmMaxFrameDelayBackwardThreshold", 17), ("bJnxSoamDmAvgFrameDelayBackwardThreshold", 18), ("bJnxSoamDmMeasuredIfdvBackwardThreshold", 19), ("bJnxSoamDmMaxIfdvBackwardThreshold", 20), ("bJnxSoamDmAvgIfdvBackwardThreshold", 21), ("bJnxSoamDmMaxFrameDelayRangeBackwardThreshold", 22), ("bJnxSoamDmAvgFrameDelayRangeBackwardThreshold", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgEnable.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgEnable.setDescription("A vector of bits that indicates the type of SOAM DM threshold notifications that are enabled. A bit set to '1' enables the specific SOAM DM threshold notification and when the specific counter is enabled and the threshold is crossed a notification is generated. A bit set to '0' disables the specific SOAM DM threshold notification. If a particular SOAM DM threshold is not supported the BIT value is set to '0'. bJnxSoamDmMeasuredFrameDelayTwoWayThreshold(0) Enables/disables measured frame two-way delay threshold notification. The notification is sent immediately when the jnxSoamDmMeasuredStatsFrameDelayTwoWay value is greater than or equal to threshold value. bJnxSoamDmMaxFrameDelayTwoWayThreshold(1) Enables/disables maximum frame two-way delay threshold notification. The notification is sent immediately when the jnxSoamDmCurrentStatsFrameDelayTwoWayMax value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamDmAvgFrameDelayTwoWayThreshold(2) Enables/disables average frame two-way delay threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamDmCurrentStatsFrameDelayTwoWayAvg value is greater than or equal to the threshold value. bJnxSoamDmMeasuredIfdvTwoWayThreshold(3) Enables/disables measured frame IFDV two-way threshold notification. The notification is sent immediately when the jnxSoamDmMeasuredStatsIfdvTwoWay value is greater than or equal to threshold value. bJnxSoamDmMaxIfdvTwoWayThreshold(4) Enables/disables maximum frame IFDV two-way threshold notification. The notification is sent immediately when the jnxSoamDmCurrentStatsIfdvTwoWayMax value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamDmAvgIfdvTwoWayThreshold(5) Enables/disables average frame IFDV two-way threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamDmCurrentStatsIfdvTwoWayAvg value is greater than or equal to the threshold value. bJnxSoamDmMaxFrameDelayRangeTwoWayThreshold(6) Enables/disables maximum Frame Delay Range two-way threshold notification. The notification is sent immediately when the jnxSoamDmCurrentStatsFrameDelayRangeTwoWayMax value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamDmAvgFrameDelayRangeTwoWayThreshold(7) Enables/disables average Frame Delay Range two-way threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamDmCurrentStatsFrameDelayRangeTwoWayAvg value is greater than or equal to the threshold value. bJnxSoamDmMeasuredFrameDelayForwardThreshold(8) Enables/disables measured forward frame delay threshold notification. The notification is sent immediately when the jnxSoamDmMeasuredStatsFrameDelayForward value is greater than or equal to threshold value. bJnxSoamDmMaxFrameDelayForwardThreshold(9) Enables/disables maximum forward frame delay threshold notification. The notification is sent immediately when the jnxSoamDmCurrentStatsFrameDelayForwardMax value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamDmAvgFrameDelayForwardThreshold(10) Enables/disables average forward frame delay threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamDmCurrentStatsFrameDelayForwardAvg value is greater than or equal to the threshold value. bJnxSoamDmMeasuredIfdvForwardThreshold(11) Enables/disables measured frame IFDV forward threshold notification. The notification is sent immediately when the jnxSoamDmMeasuredStatsIfdvForward value is greater than or equal to threshold value. bJnxSoamDmMaxIfdvForwardThreshold(12) Enables/disables maximum frame IFDV forward threshold notification. The notification is sent immediately when the jnxSoamDmCurrentStatsIfdvForwardMax value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamDmAvgIfdvForwardThreshold(13) Enables/disables average frame IFDV forward threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamDmCurrentStatsIfdvForwardAvg value is greater than or equal to the threshold value. bJnxSoamDmMaxFrameDelayRangeForwardThreshold(14) Enables/disables maximum Frame Delay Range forward threshold notification. The notification is sent immediately when the jnxSoamDmCurrentStatsFrameDelayRangeForwardMax value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamDmAvgFrameDelayRangeForwardThreshold(15) Enables/disables average Frame Delay Range forward threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamDmCurrentStatsFrameDelayRangeForwardAvg value is greater than or equal to the threshold value. bJnxSoamDmMeasuredFrameDelayBackwardThreshold(16) Enables/disables measured backward frame delay threshold notification. The notification is sent immediately when the jnxSoamDmMeasuredStatsFrameDelayBackward value is greater than or equal to threshold value. bJnxSoamDmMaxFrameDelayBackwardThreshold(17) Enables/disables maximum backward frame delay threshold notification. The notification is sent immediately when the jnxSoamDmCurrentStatsFrameDelayBackwardMax value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamDmAvgFrameDelayBackwardThreshold(18) Enables/disables average backward frame delay threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamDmCurrentStatsFrameDelayBackwardAvg value is greater than or equal to the threshold value. bJnxSoamDmMeasuredIfdvBackwardThreshold(19) Enables/disables measured frame IFDV backward threshold notification. The notification is sent immediately when the jnxSoamDmMeasuredStatsIfdvBackward value is greater than or equal to threshold value. bJnxSoamDmMaxIfdvBackwardThreshold(20) Enables/disables maximum frame IFDV backward threshold notification. The notification is sent immediately when the jnxSoamDmCurrentStatsIfdvBackwardMax value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamDmAvgIfdvBackwardThreshold(21) Enables/disables average frame IFDV backward threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamDmCurrentStatsIfdvBackwardAvg value is greater than or equal to the threshold value. bJnxSoamDmMaxFrameDelayRangeBackwardThreshold(22) Enables/disables maximum Frame Delay Range backward threshold notification. The notification is sent immediately when the jnxSoamDmCurrentStatsFrameDelayRangeBackwardMax value is greater than or equal to threshold value in a Measurement Interval. bJnxSoamDmAvgFrameDelayRangeBackwardThreshold(23) Enables/disables average Frame Delay Range backward threshold notification. The notification is sent when at the end of a Measurement Interval if the jnxSoamDmCurrentStatsFrameDelayRangeBackwardAvg value is greater than or equal to the threshold value. ")
jnxSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 5, 1, 3), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold.setDescription('This object is used to set the average two-way delay threshold value that will be used to determine if a threshold notification is generated. ')
jnxSoamDmThresholdCfgAvgIfdvTwoWayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 5, 1, 4), Unsigned32().clone(4294967295)).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgAvgIfdvTwoWayThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgAvgIfdvTwoWayThreshold.setDescription('This object is used to set the average two-way IFDV threshold value that will be used to determine if a threshold notification is generated. ')
jnxSoamDmThresholdCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 3, 5, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmThresholdCfgRowStatus.setDescription('The status of the row. The writable columns in a row cannot be changed if the row is active. All columns are to have a valid value before a row can be activated. ')
jnxSoamPmNotificationObjDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 5, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxSoamPmNotificationObjDateAndTime.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmNotificationObjDateAndTime.setDescription('This object contains the time and date at the time that the notification event is detected, not the time of the notification generation. This object is used only for notifications. The mechanism to set and keep current the date and time is not specified. ')
jnxSoamPmNotificationObjThresholdId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 5, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxSoamPmNotificationObjThresholdId.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmNotificationObjThresholdId.setDescription('The Object Identifier of the object that caused the generation of the notification from the jnxSoamLmThresholdEntry or jnxSoamDmThresholdEntry. This object is only used for the notification. ')
jnxSoamPmNotificationObjThresholdConfig = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 5, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxSoamPmNotificationObjThresholdConfig.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmNotificationObjThresholdConfig.setDescription('The configured threshold value of the object that caused the generation of the notification. This object is only used for the notification. ')
jnxSoamPmNotificationObjThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 5, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxSoamPmNotificationObjThresholdValue.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmNotificationObjThresholdValue.setDescription('The measured value of the object at the time of the generation of the Notification, from the jnxSoamLmMeasuredStatsTable, jnxSoamLmCurrentStatsTable, jnxSoamDmMeasuredStatsTable or jnxSoamDmCurrentStatsTable. This object is only used for the notification. ')
jnxSoamPmNotificationObjSuspect = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 5, 5), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxSoamPmNotificationObjSuspect.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmNotificationObjSuspect.setDescription('The suspect flag for the current Measurement Interval in which the notification was generated from the jnxSoamLmCurrentStatsTable, or jnxSoamDmCurrentStatsTable. This object is only used for the notification. ')
jnxSoamPmNotificationObjCrossingType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aboveAlarm", 1), ("setAlarm", 2), ("clearAlarm", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxSoamPmNotificationObjCrossingType.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmNotificationObjCrossingType.setDescription('The Notification Crossing Type of the object that caused the generation of the notification from the jnxSoamLmThresholdEntry or jnxSoamDmThresholdEntry. aboveAlarm(1) indicates that the crossing type alarm was an above threshold setAlarm(2) indicates that the crossing type alarm was a set threshold clearAlarm(3) indicates that the crossing type alarm was a clear threshold This object is only used for the notification. ')
jnxSoamPmNotificationObjDestinationMep = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 5, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxSoamPmNotificationObjDestinationMep.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmNotificationObjDestinationMep.setDescription('The MAC address of the Destination MEP associated the notification found in either the jnxSoamDmCfgTable or jnxSoamLmCfgTable. This object is only used for the notification. ')
jnxSoamPmNotificationObjPriority = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 78, 1, 5, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxSoamPmNotificationObjPriority.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmNotificationObjPriority.setDescription('The CoS priority of the associated notification found in either the jnxSoamDmCfgTable or jnxSoamLmCfgTable. This object is only used for the notification. ')
jnxSoamLmSessionStartStopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 78, 0, 1)).setObjects(("JUNIPER-SOAM-PM-MIB", "jnxSoamLmCfgSessionStatus"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjDateAndTime"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjDestinationMep"))
if mibBuilder.loadTexts: jnxSoamLmSessionStartStopAlarm.setStatus('current')
if mibBuilder.loadTexts: jnxSoamLmSessionStartStopAlarm.setDescription("An jnxSoamLmSessionStartStopAlarm notification is sent when the state of jnxSoamLmCfgSessionStatus changes. The management entity that receives the notification can identify the system from the network source address of the notification, and can identify the individual PM session reporting the start/stop by the indices in the OID jnxSoamLmCfgSessionStatus, including dot1agCfmMdIndex, dot1agCfmMaIndex, dot1agCfmMepIdentifier, and jnxSoamLmCfgIndex. An agent is not to generate more than one jnxSoamLmSessionStartStopAlarm 'notification-event' in a given time interval per LM session as specified by the jnxSoamPmNotificationCfgAlarmInterval. A 'notification-event' is the transmission of a single notification to a list of notification destinations. If additional operational state changes occur within the jnxSoamPmNotificationCfgAlarmInterval period, then notification generation for these changes are be suppressed by the agent until the current alarm interval expires. At the end of an alarm interval period, one notification-event is generated if any operational state changes occurred since the start of the alarm interval period. In such a case, another alarm interval period is started right away. ")
jnxSoamDmSessionStartStopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 78, 0, 2)).setObjects(("JUNIPER-SOAM-PM-MIB", "jnxSoamDmCfgSessionStatus"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjDateAndTime"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjDestinationMep"))
if mibBuilder.loadTexts: jnxSoamDmSessionStartStopAlarm.setStatus('current')
if mibBuilder.loadTexts: jnxSoamDmSessionStartStopAlarm.setDescription("An jnxSoamDmSessionStartStopAlarm notification is sent when the state of jnxSoamDmCfgSessionStatus changes. The management entity that receives the notification can identify the system from the network source address of the notification, and can identify the individual PM session reporting the start/stop by the indices in the OID jnxSoamDmCfgSessionStatus, including dot1agCfmMdIndex, dot1agCfmMaIndex, dot1agCfmMepIdentifier, and jnxSoamDmCfgIndex. An agent is not to generate more than one jnxSoamDmSessionStartStopAlarm 'notification-event' in a given time interval per DM session as specified by jnxSoamPmNotificationCfgAlarmInterval. A 'notification-event' is the transmission of a single notification to a list of notification destinations. If additional operational state changes occur within the jnxSoamPmNotificationCfgAlarmInterval period, then notification generation for these changes are suppressed by the agent until the current alarm interval expires. At the end of an alarm interval period, one notification-event is generated if any operational state changes occurred since the start of the alarm interval period. In such a case, another alarm interval period is started right away. ")
jnxSoamPmThresholdCrossingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 78, 0, 3)).setObjects(("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjCrossingType"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjThresholdId"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjThresholdConfig"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjThresholdValue"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjSuspect"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjDateAndTime"), ("JUNIPER-SOAM-PM-MIB", "jnxSoamPmNotificationObjDestinationMep"))
if mibBuilder.loadTexts: jnxSoamPmThresholdCrossingAlarm.setStatus('current')
if mibBuilder.loadTexts: jnxSoamPmThresholdCrossingAlarm.setDescription("An jnxSoamPmThresholdCrossingAlarm notification is sent if the following conditions are met for a particular type. For an aboveAlarm five conditions need to be met: a) measurement of the parameter is enabled via jnxSoamLmCfgMeasurementEnable for a LM crossing or jnxSoamDmCfgMeasurementEnable for a DM crossing; and b) the parameter threshold is configured in the jnxSoamLmThresholdCfgTable or jnxSoamDmThresholdCfgTable; and c) the threshold crossing type of bPmThresholdAboveAlarm is enabled; and d) the measured value of the parameter exceeds the value configured in the jnxSoamLmThresholdCfgTable for a LM crossing entry or jnxSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdAboveAlarm; and e) no previous jnxSoamPmThresholdCrossingAlarm notifications with type aboveAlarm have been sent relating to the same threshold in the jnxSoamLmThresholdCfgTable or jnxSoamDmThresholdCfgTable and the same parameter, during this Measurement Interval. For a setAlarm five conditions need to be met: a) measurement of the parameter is enabled via jnxSoamLmCfgMeasurementEnable for a LM crossing or jnxSoamDmCfgMeasurementEnable for a DM crossing; and b) the parameter threshold is configured in the jnxSoamLmThresholdCfgTable or jnxSoamDmThresholdCfgTable; and c) the threshold crossing type of bPmThresholdSetClearAlarm is enabled; and d) the measured value of the parameter exceeds the value configured in the jnxSoamLmThresholdCfgTable for a LM crossing entry or jnxSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdSetClearAlarm for the Measurement Interval; and e) the previous measured value did not exceed the value configured in the jnxSoamLmThresholdCfgTable for a LM crossing entry or jnxSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdSetClearAlarm. For a clearAlarm five conditions need to be met: a) measurement of the parameter is enabled via jnxSoamLmCfgMeasurementEnable for a LM crossing or jnxSoamDmCfgMeasurementEnable for a DM crossing; and b) the parameter threshold is configured in the jnxSoamLmThresholdCfgTable or jnxSoamDmThresholdCfgTable; and c) the threshold crossing type of bPmThresholdSetClearAlarm is enabled; and d) the measured value of the parameter did not exceed the value configured in the jnxSoamLmThresholdCfgTable for a LM crossing entry or jnxSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdSetClearAlarm for the Measurement Interval; and e) the previous measured value did exceed the value configured in the jnxSoamLmThresholdCfgTable for a LM crossing entry or jnxSoamDmThresholdCfgTable for a DM crossing entry for a type of bPmThresholdSetClearAlarm. In the case of thresholds applied to a maximum or average measurement counter, the previous measured value is the value of the counter at the end of the preceding Measurement Interval. In the case of thresholds applied to the last measured value, it is the previous measured value. The management entity that receives the notification can identify the system from the network source address of the notification, and can identify the LM or DM session reporting the threshold crossing by the indices in the jnxSoamPmNotificationCfgThresholdId object, including dot1agCfmMdIndex, dot1agCfmMaIndex, dot1agCfmMepIdentifier, and the jnxSoamLmCfgIndex or jnxSoamDmCfgIndex. An agent is not to generate more than one jnxSoamLmThresholdCrossingAlarm 'notification-event' of a given type per LM or DM session as specified by jnxSoamPmNotificationCfgAlarmInterval. A 'notification-event' is the transmission of a single notification to a list of notification destinations. If additional threshold crossing events occur within the jnxSoamPmNotificationCfgAlarmInterval period, then notification generation for these changes are suppressed by the agent until the current alarm interval expires. At the end of an alarm interval period, one notification-event is generated if any threshold crossing events occurred since the start of the alarm interval period. In such a case, another alarm interval period is started right away. ")
mibBuilder.exportSymbols("JUNIPER-SOAM-PM-MIB", jnxSoamLmHistoryStatsSoamPdusReceived=jnxSoamLmHistoryStatsSoamPdusReceived, jnxSoamDmHistoryStatsFrameDelayBackwardAvg=jnxSoamDmHistoryStatsFrameDelayBackwardAvg, jnxSoamLmCurrentStatsSoamPdusSent=jnxSoamLmCurrentStatsSoamPdusSent, jnxSoamPmMepEntry=jnxSoamPmMepEntry, jnxSoamLmThresholdCfgRowStatus=jnxSoamLmThresholdCfgRowStatus, jnxSoamLmCfgTable=jnxSoamLmCfgTable, jnxSoamDmCfgStartTimeType=jnxSoamDmCfgStartTimeType, jnxSoamDmCfgSessionStatus=jnxSoamDmCfgSessionStatus, jnxSoamLmCfgSessionType=jnxSoamLmCfgSessionType, jnxSoamDmCfgTestTlvIncluded=jnxSoamDmCfgTestTlvIncluded, jnxSoamLmHistoryStatsTable=jnxSoamLmHistoryStatsTable, jnxSoamLmCurrentStatsBackwardMinFlr=jnxSoamLmCurrentStatsBackwardMinFlr, jnxSoamDmHistoryStatsIfdvBackwardMin=jnxSoamDmHistoryStatsIfdvBackwardMin, jnxSoamLmCurrentStatsForwardReceivedFrames=jnxSoamLmCurrentStatsForwardReceivedFrames, jnxSoamDmCfgNumIntervalsStored=jnxSoamDmCfgNumIntervalsStored, jnxSoamDmHistoryStatsSuspect=jnxSoamDmHistoryStatsSuspect, jnxSoamDmMeasuredStatsIfdvTwoWay=jnxSoamDmMeasuredStatsIfdvTwoWay, jnxSoamPmNotificationObjThresholdId=jnxSoamPmNotificationObjThresholdId, jnxSoamDmHistoryStatsIfdvForwardAvg=jnxSoamDmHistoryStatsIfdvForwardAvg, jnxSoamLmHistoryStatsEntry=jnxSoamLmHistoryStatsEntry, jnxSoamLmCfgFrameSize=jnxSoamLmCfgFrameSize, jnxSoamDmHistoryStatsIfdvBackwardAvg=jnxSoamDmHistoryStatsIfdvBackwardAvg, jnxSoamDmHistoryStatsSoamPdusReceived=jnxSoamDmHistoryStatsSoamPdusReceived, jnxSoamLmThresholdCfgAvgFlrBackwardThreshold=jnxSoamLmThresholdCfgAvgFlrBackwardThreshold, jnxSoamDmMeasuredStatsIfdvBackward=jnxSoamDmMeasuredStatsIfdvBackward, jnxSoamDmCurrentStatsFrameDelayTwoWayMin=jnxSoamDmCurrentStatsFrameDelayTwoWayMin, jnxSoamLmCfgMessagePeriod=jnxSoamLmCfgMessagePeriod, jnxSoamLmCfgEnabled=jnxSoamLmCfgEnabled, jnxSoamPmMepDmSingleEndedResponder=jnxSoamPmMepDmSingleEndedResponder, jnxSoamDmCfgHistoryClear=jnxSoamDmCfgHistoryClear, jnxSoamLmCfgStartTimeType=jnxSoamLmCfgStartTimeType, jnxSoamLmCurrentStatsElapsedTime=jnxSoamLmCurrentStatsElapsedTime, jnxSoamLmCurrentStatsBackwardTransmittedFrames=jnxSoamLmCurrentStatsBackwardTransmittedFrames, jnxSoamDmThresholdCfgEntry=jnxSoamDmThresholdCfgEntry, jnxSoamPmNotificationObjPriority=jnxSoamPmNotificationObjPriority, jnxSoamLmCfgTestTlvPattern=jnxSoamLmCfgTestTlvPattern, jnxSoamLmMeasuredStatsTable=jnxSoamLmMeasuredStatsTable, jnxSoamLmHistoryStatsEndTime=jnxSoamLmHistoryStatsEndTime, jnxSoamDmCfgMessagePeriod=jnxSoamDmCfgMessagePeriod, jnxSoamDmCfgEnabled=jnxSoamDmCfgEnabled, jnxSoamLmThresholdCfgEntry=jnxSoamLmThresholdCfgEntry, IEEE8021PriorityValue=IEEE8021PriorityValue, jnxSoamLmCfgDestIsMepId=jnxSoamLmCfgDestIsMepId, jnxSoamPmNotificationObj=jnxSoamPmNotificationObj, jnxSoamLmThresholdCfgTable=jnxSoamLmThresholdCfgTable, jnxSoamDmCurrentStatsFrameDelayBackwardMax=jnxSoamDmCurrentStatsFrameDelayBackwardMax, jnxSoamDmCurrentStatsIfdvForwardAvg=jnxSoamDmCurrentStatsIfdvForwardAvg, jnxSoamPmMepTable=jnxSoamPmMepTable, jnxSoamDmHistoryStatsSoamPdusSent=jnxSoamDmHistoryStatsSoamPdusSent, jnxSoamLmCfgAlignMeasurementIntervals=jnxSoamLmCfgAlignMeasurementIntervals, jnxSoamDmCurrentStatsIfdvBackwardAvg=jnxSoamDmCurrentStatsIfdvBackwardAvg, jnxSoamDmMeasuredStatsFrameDelayBackward=jnxSoamDmMeasuredStatsFrameDelayBackward, jnxSoamDmCurrentStatsSoamPdusReceived=jnxSoamDmCurrentStatsSoamPdusReceived, jnxSoamPmNotificationObjSuspect=jnxSoamPmNotificationObjSuspect, jnxSoamDmCfgIndex=jnxSoamDmCfgIndex, jnxSoamDmThresholdCfgAvgIfdvTwoWayThreshold=jnxSoamDmThresholdCfgAvgIfdvTwoWayThreshold, jnxSoamDmCurrentStatsIfdvTwoWayMax=jnxSoamDmCurrentStatsIfdvTwoWayMax, jnxSoamDmHistoryStatsIfdvBackwardMax=jnxSoamDmHistoryStatsIfdvBackwardMax, jnxSoamLmMeasuredStatsEntry=jnxSoamLmMeasuredStatsEntry, jnxSoamDmHistoryStatsFrameDelayTwoWayAvg=jnxSoamDmHistoryStatsFrameDelayTwoWayAvg, jnxSoamLmCurrentStatsBackwardReceivedFrames=jnxSoamLmCurrentStatsBackwardReceivedFrames, jnxSoamLmCfgMeasurementEnable=jnxSoamLmCfgMeasurementEnable, JnxSoamTcDataPatternType=JnxSoamTcDataPatternType, jnxSoamLmSessionStartStopAlarm=jnxSoamLmSessionStartStopAlarm, jnxSoamDmCfgRowStatus=jnxSoamDmCfgRowStatus, jnxSoamLmCurrentStatsBackwardAvgFlr=jnxSoamLmCurrentStatsBackwardAvgFlr, jnxSoamLmCfgRowStatus=jnxSoamLmCfgRowStatus, jnxSoamDmCfgDataPattern=jnxSoamDmCfgDataPattern, jnxSoamLmCurrentStatsStartTime=jnxSoamLmCurrentStatsStartTime, jnxSoamPmNotificationObjDestinationMep=jnxSoamPmNotificationObjDestinationMep, jnxSoamDmSessionStartStopAlarm=jnxSoamDmSessionStartStopAlarm, jnxSoamDmCurrentStatsIfdvForwardMax=jnxSoamDmCurrentStatsIfdvForwardMax, jnxSoamDmMeasuredStatsIfdvForward=jnxSoamDmMeasuredStatsIfdvForward, jnxSoamDmCurrentStatsFrameDelayTwoWayMax=jnxSoamDmCurrentStatsFrameDelayTwoWayMax, jnxSoamLmHistoryStatsBackwardReceivedFrames=jnxSoamLmHistoryStatsBackwardReceivedFrames, jnxSoamPmLmObjects=jnxSoamPmLmObjects, jnxSoamDmCurrentStatsStartTime=jnxSoamDmCurrentStatsStartTime, jnxSoamDmMeasuredStatsEntry=jnxSoamDmMeasuredStatsEntry, JnxSoamTcTestPatternType=JnxSoamTcTestPatternType, jnxSoamDmCfgEntry=jnxSoamDmCfgEntry, jnxSoamDmMeasuredStatsTable=jnxSoamDmMeasuredStatsTable, jnxSoamDmCurrentStatsFrameDelayForwardAvg=jnxSoamDmCurrentStatsFrameDelayForwardAvg, jnxSoamDmHistoryStatsFrameDelayForwardMin=jnxSoamDmHistoryStatsFrameDelayForwardMin, jnxSoamDmHistoryStatsIfdvTwoWayMin=jnxSoamDmHistoryStatsIfdvTwoWayMin, jnxSoamDmHistoryStatsFrameDelayBackwardMax=jnxSoamDmHistoryStatsFrameDelayBackwardMax, jnxSoamPmMepSlmSingleEndedResponder=jnxSoamPmMepSlmSingleEndedResponder, jnxSoamLmCfgDestMepId=jnxSoamLmCfgDestMepId, jnxSoamDmHistoryStatsElapsedTime=jnxSoamDmHistoryStatsElapsedTime, jnxSoamDmHistoryStatsEntry=jnxSoamDmHistoryStatsEntry, jnxSoamDmHistoryStatsIfdvTwoWayMax=jnxSoamDmHistoryStatsIfdvTwoWayMax, jnxSoamLmHistoryStatsForwardMaxFlr=jnxSoamLmHistoryStatsForwardMaxFlr, JnxSoamTcOperationTimeType=JnxSoamTcOperationTimeType, jnxSoamPmThresholdCrossingAlarm=jnxSoamPmThresholdCrossingAlarm, jnxSoamLmCfgNumIntervalsStored=jnxSoamLmCfgNumIntervalsStored, jnxSoamLmCurrentStatsBackwardMaxFlr=jnxSoamLmCurrentStatsBackwardMaxFlr, jnxSoamPmNotifications=jnxSoamPmNotifications, jnxSoamLmCfgTestTlvIncluded=jnxSoamLmCfgTestTlvIncluded, jnxSoamLmCurrentStatsForwardMaxFlr=jnxSoamLmCurrentStatsForwardMaxFlr, jnxSoamDmMeasuredStatsFrameDelayForward=jnxSoamDmMeasuredStatsFrameDelayForward, jnxSoamPmNotificationObjDateAndTime=jnxSoamPmNotificationObjDateAndTime, jnxSoamLmCurrentStatsIndex=jnxSoamLmCurrentStatsIndex, jnxSoamPmNotificationObjThresholdValue=jnxSoamPmNotificationObjThresholdValue, jnxSoamLmCfgAlignMeasurementOffset=jnxSoamLmCfgAlignMeasurementOffset, jnxSoamDmCurrentStatsFrameDelayForwardMin=jnxSoamDmCurrentStatsFrameDelayForwardMin, jnxSoamDmCurrentStatsSuspect=jnxSoamDmCurrentStatsSuspect, jnxSoamDmHistoryStatsTable=jnxSoamDmHistoryStatsTable, jnxSoamDmThresholdCfgRowStatus=jnxSoamDmThresholdCfgRowStatus, jnxSoamLmCurrentStatsForwardTransmittedFrames=jnxSoamLmCurrentStatsForwardTransmittedFrames, jnxSoamDmHistoryStatsIfdvForwardMin=jnxSoamDmHistoryStatsIfdvForwardMin, jnxSoamLmCfgRepetitionTime=jnxSoamLmCfgRepetitionTime, jnxSoamDmCfgAlignMeasurementIntervals=jnxSoamDmCfgAlignMeasurementIntervals, jnxSoamDmThresholdCfgTable=jnxSoamDmThresholdCfgTable, jnxSoamLmHistoryStatsForwardTransmittedFrames=jnxSoamLmHistoryStatsForwardTransmittedFrames, jnxSoamDmCfgDestMepId=jnxSoamDmCfgDestMepId, jnxSoamDmCurrentStatsSoamPdusSent=jnxSoamDmCurrentStatsSoamPdusSent, jnxSoamLmCfgHistoryClear=jnxSoamLmCfgHistoryClear, jnxSoamDmHistoryStatsFrameDelayForwardAvg=jnxSoamDmHistoryStatsFrameDelayForwardAvg, jnxSoamPmDmObjects=jnxSoamPmDmObjects, jnxSoamLmHistoryStatsBackwardTransmittedFrames=jnxSoamLmHistoryStatsBackwardTransmittedFrames, jnxSoamDmCurrentStatsFrameDelayForwardMax=jnxSoamDmCurrentStatsFrameDelayForwardMax, jnxSoamDmCurrentStatsIfdvBackwardMax=jnxSoamDmCurrentStatsIfdvBackwardMax, jnxSoamDmHistoryStatsFrameDelayTwoWayMax=jnxSoamDmHistoryStatsFrameDelayTwoWayMax, jnxSoamLmCfgPriority=jnxSoamLmCfgPriority, jnxSoamLmThresholdCfgIndex=jnxSoamLmThresholdCfgIndex, jnxSoamDmCfgDestIsMepId=jnxSoamDmCfgDestIsMepId, jnxSoamDmHistoryStatsFrameDelayForwardMax=jnxSoamDmHistoryStatsFrameDelayForwardMax, jnxSoamLmCfgEntry=jnxSoamLmCfgEntry, jnxSoamDmCfgPriority=jnxSoamDmCfgPriority, jnxSoamDmMeasuredStatsFrameDelayTwoWay=jnxSoamDmMeasuredStatsFrameDelayTwoWay, jnxSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold=jnxSoamDmThresholdCfgAvgFrameDelayTwoWayThreshold, jnxSoamLmCfgVersion=jnxSoamLmCfgVersion, jnxSoamLmHistoryStatsForwardReceivedFrames=jnxSoamLmHistoryStatsForwardReceivedFrames, jnxSoamDmHistoryStatsFrameDelayBackwardMin=jnxSoamDmHistoryStatsFrameDelayBackwardMin, jnxSoamLmCfgSessionStatus=jnxSoamLmCfgSessionStatus, jnxSoamLmCurrentStatsTable=jnxSoamLmCurrentStatsTable, jnxSoamPmMibConformance=jnxSoamPmMibConformance, jnxSoamDmCurrentStatsEntry=jnxSoamDmCurrentStatsEntry, jnxSoamLmThresholdCfgEnable=jnxSoamLmThresholdCfgEnable, jnxSoamDmCfgSessionType=jnxSoamDmCfgSessionType, jnxSoamPmNotificationObjThresholdConfig=jnxSoamPmNotificationObjThresholdConfig, jnxSoamLmCfgRelativeStartTime=jnxSoamLmCfgRelativeStartTime, jnxSoamLmThresholdCfgAvgFlrForwardThreshold=jnxSoamLmThresholdCfgAvgFlrForwardThreshold, jnxSoamDmHistoryStatsFrameDelayTwoWayMin=jnxSoamDmHistoryStatsFrameDelayTwoWayMin, jnxSoamDmHistoryStatsIndex=jnxSoamDmHistoryStatsIndex, jnxSoamLmHistoryStatsBackwardAvgFlr=jnxSoamLmHistoryStatsBackwardAvgFlr, jnxSoamDmCurrentStatsElapsedTime=jnxSoamDmCurrentStatsElapsedTime, jnxSoamLmMeasuredStatsBackwardFlr=jnxSoamLmMeasuredStatsBackwardFlr, jnxSoamLmCurrentStatsSoamPdusReceived=jnxSoamLmCurrentStatsSoamPdusReceived, jnxSoamLmCurrentStatsForwardAvgFlr=jnxSoamLmCurrentStatsForwardAvgFlr, jnxSoamPmMepOperNextIndex=jnxSoamPmMepOperNextIndex, jnxSoamDmCurrentStatsIfdvBackwardMin=jnxSoamDmCurrentStatsIfdvBackwardMin, jnxSoamLmMeasuredStatsForwardFlr=jnxSoamLmMeasuredStatsForwardFlr, jnxSoamDmCurrentStatsFrameDelayBackwardMin=jnxSoamDmCurrentStatsFrameDelayBackwardMin, jnxSoamLmHistoryStatsForwardAvgFlr=jnxSoamLmHistoryStatsForwardAvgFlr, jnxSoamPmNotificationCfg=jnxSoamPmNotificationCfg, jnxSoamDmHistoryStatsEndTime=jnxSoamDmHistoryStatsEndTime, jnxSoamLmHistoryStatsIndex=jnxSoamLmHistoryStatsIndex, jnxSoamDmCurrentStatsFrameDelayTwoWayAvg=jnxSoamDmCurrentStatsFrameDelayTwoWayAvg, jnxSoamLmHistoryStatsBackwardMinFlr=jnxSoamLmHistoryStatsBackwardMinFlr, jnxSoamLmCfgDataPattern=jnxSoamLmCfgDataPattern, jnxSoamDmCfgRepetitionTime=jnxSoamDmCfgRepetitionTime, jnxSoamDmCfgInterFrameDelayVariationSelectionOffset=jnxSoamDmCfgInterFrameDelayVariationSelectionOffset, jnxSoamLmCurrentStatsEntry=jnxSoamLmCurrentStatsEntry, jnxSoamDmCurrentStatsIndex=jnxSoamDmCurrentStatsIndex, jnxSoamPmMep=jnxSoamPmMep, jnxSoamDmCfgTable=jnxSoamDmCfgTable, jnxSoamLmHistoryStatsForwardMinFlr=jnxSoamLmHistoryStatsForwardMinFlr, jnxSoamDmCurrentStatsIfdvTwoWayAvg=jnxSoamDmCurrentStatsIfdvTwoWayAvg, jnxSoamLmHistoryStatsSuspect=jnxSoamLmHistoryStatsSuspect, PYSNMP_MODULE_ID=jnxSoamPmMib, jnxSoamLmCurrentStatsForwardMinFlr=jnxSoamLmCurrentStatsForwardMinFlr, jnxSoamPmMib=jnxSoamPmMib, jnxSoamLmHistoryStatsElapsedTime=jnxSoamLmHistoryStatsElapsedTime, jnxSoamLmCfgFixedStartDateAndTime=jnxSoamLmCfgFixedStartDateAndTime, jnxSoamLmHistoryStatsBackwardMaxFlr=jnxSoamLmHistoryStatsBackwardMaxFlr, jnxSoamDmCfgType=jnxSoamDmCfgType, jnxSoamLmCfgType=jnxSoamLmCfgType, jnxSoamLmCfgIndex=jnxSoamLmCfgIndex, jnxSoamDmCfgMeasurementEnable=jnxSoamDmCfgMeasurementEnable, jnxSoamPmMibObjects=jnxSoamPmMibObjects, jnxSoamDmCurrentStatsTable=jnxSoamDmCurrentStatsTable, jnxSoamPmNotificationObjCrossingType=jnxSoamPmNotificationObjCrossingType, jnxSoamDmHistoryStatsIfdvTwoWayAvg=jnxSoamDmHistoryStatsIfdvTwoWayAvg, jnxSoamDmThresholdCfgIndex=jnxSoamDmThresholdCfgIndex, jnxSoamLmCurrentStatsSuspect=jnxSoamLmCurrentStatsSuspect, jnxSoamDmCfgVersion=jnxSoamDmCfgVersion, jnxSoamDmCfgTestTlvPattern=jnxSoamDmCfgTestTlvPattern, jnxSoamDmThresholdCfgEnable=jnxSoamDmThresholdCfgEnable, jnxSoamDmCurrentStatsIfdvForwardMin=jnxSoamDmCurrentStatsIfdvForwardMin, jnxSoamDmHistoryStatsIfdvForwardMax=jnxSoamDmHistoryStatsIfdvForwardMax, jnxSoamDmCfgFrameSize=jnxSoamDmCfgFrameSize, jnxSoamDmCurrentStatsIfdvTwoWayMin=jnxSoamDmCurrentStatsIfdvTwoWayMin, jnxSoamLmHistoryStatsSoamPdusSent=jnxSoamLmHistoryStatsSoamPdusSent, jnxSoamPmMepLmSingleEndedResponder=jnxSoamPmMepLmSingleEndedResponder, jnxSoamDmCurrentStatsFrameDelayBackwardAvg=jnxSoamDmCurrentStatsFrameDelayBackwardAvg)
