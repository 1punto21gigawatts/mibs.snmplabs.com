#
# PySNMP MIB module CISCO-LWAPP-DOT11-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-DOT11-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
CLDot11Band, CLDot11ChannelBandwidth = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLDot11Band", "CLDot11ChannelBandwidth")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, Counter32, Counter64, ModuleIdentity, IpAddress, Integer32, Gauge32, ObjectIdentity, MibIdentifier, NotificationType, TimeTicks, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "Counter64", "ModuleIdentity", "IpAddress", "Integer32", "Gauge32", "ObjectIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ciscoLwappDot11MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 612))
ciscoLwappDot11MIB.setRevisions(('2010-05-06 00:00', '2007-01-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappDot11MIB.setRevisionsDescriptions(('Added cldHtDot11nEnable in CldHtMacOperationsEntry Added ciscoLwappDot11CountryChangeNotif in ciscoLwappDot11MIBNotifs Added following in cldConfig: cldMultipleCountryCode cldRegulatoryDomain cldCountryChangeNotifEnable cldLoadBalancing cldLoadBalancingEnable cldLoadBalancingWindowSize cldLoadBalancingDenialCount cldBandSelect cldBandSelectEnable cldBandSelectCycleCount cldBandSelectCycleThreshold cldBandSelectAgeOutSuppression cldBandSelectAgeOutDualBand cldBandSelectClientRssi Added following table: cld11nMcsTable cldCountryTable Added the following OBJECT-GROUPs: ciscoLwappDot11MIBConfigGroup ciscoLwappDot11MIBNotifsGroup ciscoLwappDot11MIBStatusGroup Added ciscoLwappDot11MIBComplianceRev1 in OBJECT-COMPLIANCE.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappDot11MIB.setLastUpdated('201005060000Z')
if mibBuilder.loadTexts: ciscoLwappDot11MIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappDot11MIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappDot11MIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central controllers, that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. This MIB provides the information about the operational parameters of the 802.11 networks. References about specific type of 802.11 flavors like 802.11a/b/g or 802.11n will be made whereever required to indicate that the respective parameters are applicable only to that particular type of 802.11 networks. The relationship between CC and the LWAPP APs can be depicted as follows: +......+ +......+ +......+ + + + + + + + CC + + CC + + CC + + + + + + + +......+ +......+ +......+ .. . . .. . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ + + + + + + + + + AP + + AP + + AP + + AP + + + + + + + + + +......+ +......+ +......+ +......+ . . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ + + + + + + + + + MN + + MN + + MN + + MN + + + + + + + + + +......+ +......+ +......+ +......+ The LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Gratuitous Probe Response (GPR) The Gratuitous Probe Response feature aids in conserving battery power of WLAN-enabled cell phones by providing a high rate packet on the order of tens of milliseconds such that these kind of phones can wake up and wait at predefined intervals, to reduce battery power. The GPR packet is transmitted from the AP at a predefined time interval. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node and client are used interchangeably. TU A measurement of time in units of 1024 microseconds. 802.11n 802.11n builds upon previous 802.11 standards by adding MIMO (multiple-input multiple-output). MIMO uses multiple transmitter and receiver antennas to allow for increased data throughput through spatial multiplexing and increased range . A-MPDU An aggregated format that consists of several MAC Protocol Data Units being aggregated and transmitted in one PHY Service Data Unit. A-MSDU An aggregated format that consists of several MAC Service Data Units being aggregated and transmitted in one MAC Protocol Data Unit. Reduced Inter-Frame Space ( RIFS ) A time interval between multiple transmissions of a single transmitter used to reduce overhead and increase network efficiency. Modulation and Coding Scheme ( MCS ) This is a value that determines the modulation, coding and number of spatial channels. Each scheme specifies the modulation technique, coding rate , number of spatial streams etc and the corresponding data rate. Guard Interval Guard intervals are used to ensure that distinct transmissions do not interfere with one another. The purpose of the guard interval is to introduce immunity to propagation delays, echoes and reflections, to which digital data is normally very sensitive. Media Access Control ( MAC ) The Media Access Control Layer is one of two sublayers that make up the Data Link Layer. The MAC layer is responsible for moving data packets to and from one Network Interface Card (NIC) to another across a shared channel. Suppression Table When the Band Select feature is ON, AP suppresses the probe response to mobile stations on 2.4 GHz. AP suppresses probe response to new mobile stattions for all SSIDs that are being Band Select enabled. Suppressed mobile station and corresponding suprression counts are recorded in a table known as Suppression Table which is stored in internal database of controller. Entries of this table aged-out to make place for new entries. Dual Band Table When AP sees probe request from any mobile station in both 2.4GHz and 5GHz band AP will know that mobile station is capable of operating on both band. Dual band capable mobile stations are recorded in a table known as dual band table which is stored in internal database of controller. This record are kept to make sure 5GHz capable mobile station should join 5GHz band only. Entries in the table will be age out to make space for new entries. The AP will not respond to the dual band mobile station's 2.4GHz probe until is removed from the dual band table. AP fills the dual band table in the following order until it is full: 1) mobile station with 5GHz probe that have associated to 2.4GHz. 2) mobile station with 5GHz probe that also have 2.4GHz probes. 3) mobile station with just 5GHz probe detected and 5GHz association. RSSI Received Signal Strength Indication (RSSI), the IEEE 802.11 standard defines a mechanism by which RF energy is to be measured by the circuitry on a wireless NIC. Its value is measured in dBm and ranges from -128 to 0. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-Capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol. [3] Enhanced Wireless Consortium MAC Specification, v1.24. [4] Enhanced Wireless Consortium PHY Specification, v1.27.")
ciscoLwappDot11MIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 0))
ciscoLwappDot11MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1))
ciscoLwappDot11MIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 2))
cldConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1))
cldStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2))
cldHtMacOperationsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1), )
if mibBuilder.loadTexts: cldHtMacOperationsTable.setStatus('current')
if mibBuilder.loadTexts: cldHtMacOperationsTable.setDescription('This table represents the operational parameters at the MAC layer for the 802.11n networks managed through the controller. An agent adds an entry to this table for every 802.11n band on startup.')
cldHtMacOperationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-MIB", "cldHtDot11nBand"))
if mibBuilder.loadTexts: cldHtMacOperationsEntry.setStatus('current')
if mibBuilder.loadTexts: cldHtMacOperationsEntry.setDescription('Each entry represents the operational parameters at the MAC layer for 802.11n networks.')
cldHtDot11nBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 1), CLDot11Band())
if mibBuilder.loadTexts: cldHtDot11nBand.setStatus('current')
if mibBuilder.loadTexts: cldHtDot11nBand.setDescription('This object identifies the 802.11n band the parameters correspond to.')
cldHtDot11nChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 2), CLDot11ChannelBandwidth().clone('twenty')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: cldHtDot11nChannelBandwidth.setDescription('This object represents the channel bandwidth for the 802.11n networks in the particular band.')
cldHtDot11nRifsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nRifsEnable.setStatus('current')
if mibBuilder.loadTexts: cldHtDot11nRifsEnable.setDescription("This object is used to indicate the support for RIFS on this band. A value of 'true' indicates that RIFS is enabled for this band. A value of 'false' indicates that RIFS is disabled for this band.")
cldHtDot11nAmsduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nAmsduEnable.setStatus('current')
if mibBuilder.loadTexts: cldHtDot11nAmsduEnable.setDescription("This object is used to indicate the support for 802.11n A-MSDU on this band. A value of 'true' indicates that A-MSDU is enabled for this band. A value of 'false' indicates that A-MSDU is disabled for this band.")
cldHtDot11nAmpduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nAmpduEnable.setStatus('current')
if mibBuilder.loadTexts: cldHtDot11nAmpduEnable.setDescription("This object is used to indicate the support for 802.11n A-MPDU on this band. A value of 'true' indicates that A-MPDU is enabled for this band. A value of 'false' indicates that A-MPDU is disabled for this band.")
cldHtDot11nGuardIntervalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nGuardIntervalEnable.setStatus('current')
if mibBuilder.loadTexts: cldHtDot11nGuardIntervalEnable.setDescription("This object is used to indicate the support for 802.11n guard interval on this band. A value of 'true' indicates that guard interval is enabled for this band. A value of 'false' indicates that guard interval is disabled for this band.")
cldHtDot11nEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldHtDot11nEnable.setStatus('current')
if mibBuilder.loadTexts: cldHtDot11nEnable.setDescription("This object is used to enable the controller to manage 802.11n networks. A value of 'true' means the 802.11n network is enabled. A value of 'false' means the 802.11n network is disabled.")
cldMultipleCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldMultipleCountryCode.setStatus('current')
if mibBuilder.loadTexts: cldMultipleCountryCode.setDescription('This object represents the countries in which the controller is operating. Multiple countries can be set. The countries are displayed using a 3 letter code for each country separated by a comma.')
cldRegulatoryDomain = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRegulatoryDomain.setStatus('current')
if mibBuilder.loadTexts: cldRegulatoryDomain.setDescription('This object represents the regulatory domains for the controller. Regulatory domain specifies allowed 802.11 chanels. Multiple domains can be listed seperated with spaces.')
cld11nMcsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4), )
if mibBuilder.loadTexts: cld11nMcsTable.setStatus('current')
if mibBuilder.loadTexts: cld11nMcsTable.setDescription('This table lists the MCS data rates used on the 802.11n networks managed by this controller.')
cld11nMcsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-MIB", "cld11nMcsBand"), (0, "CISCO-LWAPP-DOT11-MIB", "cld11nMcsDataRateIndex"))
if mibBuilder.loadTexts: cld11nMcsEntry.setStatus('current')
if mibBuilder.loadTexts: cld11nMcsEntry.setDescription('An entry in this table represents a MCS data rate for 802.11n band which is uniquely identifies by cld11nMcsDataRateIndex and cld11nMcsBand. All entries are added by the controller at startup. cld11nMcsDataRate are calculated by different permutation of cld11nMcsChannelWidth, cld11nMcsGuardInterval, cld11nMcsModulation etc. Different variables combination can give same data rate.')
cld11nMcsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 1), CLDot11Band())
if mibBuilder.loadTexts: cld11nMcsBand.setStatus('current')
if mibBuilder.loadTexts: cld11nMcsBand.setDescription('This object identifies the 802.11n band to which the data rate is applicable.')
cld11nMcsDataRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cld11nMcsDataRateIndex.setStatus('current')
if mibBuilder.loadTexts: cld11nMcsDataRateIndex.setDescription('This object uniquely identifies the data rate for a particular band.')
cld11nMcsDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cld11nMcsDataRate.setStatus('current')
if mibBuilder.loadTexts: cld11nMcsDataRate.setDescription('The object represents the data rate value for this band.')
cld11nMcsSupportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cld11nMcsSupportEnable.setStatus('current')
if mibBuilder.loadTexts: cld11nMcsSupportEnable.setDescription("This object is used to enable or disable the data rate. When this object is set to 'true' the MCS support is enabled. When this object is set to 'false' the MCS support is disabled..")
cld11nMcsChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 5), Unsigned32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cld11nMcsChannelWidth.setStatus('current')
if mibBuilder.loadTexts: cld11nMcsChannelWidth.setDescription('The object represents the channel width for which cld11nMcsDataRate has been calculated.')
cld11nMcsGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 6), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: cld11nMcsGuardInterval.setStatus('current')
if mibBuilder.loadTexts: cld11nMcsGuardInterval.setDescription('The object represents the guard interval for which cld11nMcsDataRate has been calculated.')
cld11nMcsModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cld11nMcsModulation.setStatus('current')
if mibBuilder.loadTexts: cld11nMcsModulation.setDescription('The object represents the modulation used to calculate cld11nMcsDataRate.')
cld11acMcsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6), )
if mibBuilder.loadTexts: cld11acMcsTable.setStatus('current')
if mibBuilder.loadTexts: cld11acMcsTable.setDescription('This table is used to configure 802.11ac specific MCS data rate settings on a controller.')
cld11acMcsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-MIB", "cld11acMcsSpatialStreamIndex"), (0, "CISCO-LWAPP-DOT11-MIB", "cld11acMcsDataRateIndex"))
if mibBuilder.loadTexts: cld11acMcsEntry.setStatus('current')
if mibBuilder.loadTexts: cld11acMcsEntry.setDescription('An entry in this table represents the additional MCS data rate for 802.11ac band which is uniquely identifies by cld11acMcsSpatialStreamIndex and cld11acMcsDataRateIndex. All entries are added by the controller at startup.')
cld11acMcsSpatialStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cld11acMcsSpatialStreamIndex.setStatus('current')
if mibBuilder.loadTexts: cld11acMcsSpatialStreamIndex.setDescription('The object represents the spatial stream number related to MCS data rate settings on the 802.11ac band.')
cld11acMcsDataRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cld11acMcsDataRateIndex.setStatus('current')
if mibBuilder.loadTexts: cld11acMcsDataRateIndex.setDescription('This object uniquely identifies the data rate for a particular band.')
cld11acMcsSupportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 6, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cld11acMcsSupportEnable.setStatus('current')
if mibBuilder.loadTexts: cld11acMcsSupportEnable.setDescription("This object is used to enable or disable the data rate. When this object is set to 'true' the MCS support is enabled. When this object is set to 'false' the MCS support is disabled..")
cld11acConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 5))
cldVhtDot11acEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 5, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldVhtDot11acEnable.setStatus('current')
if mibBuilder.loadTexts: cldVhtDot11acEnable.setDescription("This object is used to enable the controller to manage 802.11ac networks. A value of 'true' means the 802.11ac network is enabled. A value of 'false' means the 802.11ac network is disabled.")
cldLoadBalancing = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8))
cldLoadBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldLoadBalancingEnable.setStatus('current')
if mibBuilder.loadTexts: cldLoadBalancingEnable.setDescription('This object specifies the mode of Load Balancing. Value of 1(enable) shows that the Load Balancing is enabled and value of 2(disable) shows that it is disabled. If Load balancing is enable and wireless mobile station tries to associate any overloaded AP, association rejection will be sent to mobile station from AP. From 7.0 release onwards Load Balancing cannot be configured globally. cldLoadBalancingEnable will be read-only attribute and it will always be enable. Use cLWlanLoadBalancingEnable to configure it per WLAN.')
cldLoadBalancingWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldLoadBalancingWindowSize.setStatus('current')
if mibBuilder.loadTexts: cldLoadBalancingWindowSize.setDescription('This object specifies the threshold for the difference between number of mobile station a given AP can have and mobile station count of the AP having minimum number of mobile station in the setup. For example, suppose in a network setup there are three APs are connected to Controller, say AP1, AP2 and AP3. AP1 have 2 mobile stations, AP2 have 3 and AP3 have 4 mobile stations. Here AP1 have minimum number of mobile stations i.e. 2. Suppose window size is configured as 2. So every AP can have 2+2=4 mobile stations. So every 5th mobile station will be load balanced. So, if any mobile station tries to join AP3, denial will be sent from AP3. For a mobile station denial will be send only for cldLoadBalancingDenialCount number of time.')
cldLoadBalancingDenialCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldLoadBalancingDenialCount.setStatus('current')
if mibBuilder.loadTexts: cldLoadBalancingDenialCount.setDescription('This object specifies maximum number of association rejection AP will send to a mobile station for a given sequence of association. When a mobile station tries to associate on wireless network, it sends association request to AP. If AP is overloaded and load balancing is enable on controller, AP will send a denial to association request. If there are no other AP in the vicinity of mobile station, it will try to associate same AP again. So to restrict the number of denial sent from AP, cldLoadBalancingDenialCount is defined. After maximum denial count is reached mobile station will be able to associate. Association attempts on an AP from any mobile station before associating any AP is called as sequence of assoociation.')
cldLoadBalancingTrafficThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 8, 4), Unsigned32().clone(50)).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldLoadBalancingTrafficThreshold.setStatus('current')
if mibBuilder.loadTexts: cldLoadBalancingTrafficThreshold.setDescription("This object specifies the traffic threshold that triggers 'uplinkUsage' based load balancing. When the uplink usage of an AP is above this threshold, this AP is valid for 'uplinkUsage' based load balancing, if load balance is enabled by cLWlanLoadBalancingEnable and 'uplinkUsage' mode is chosen by cLWlanLoadBalancingMode at that WLAN.")
cldBandSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9))
cldBandSelectEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldBandSelectEnable.setStatus('current')
if mibBuilder.loadTexts: cldBandSelectEnable.setDescription('This object specifies the mode of Band Select. Value of 1(enable) shows that the Band Select is enabled and value of 2(disable) shows that it is disabled. If Band Select is enable AP suppresses probe response to new mobile station. AP will suppress probe request coming only on 2.4 GHz radio. From 7.0 release onwards Band Select cannot be configured globally. cldBandSelectEnable will be read-only attribute and it will always be enable. Use cLWlanBandSelectEnable to configure it per WLAN.')
cldBandSelectCycleCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectCycleCount.setStatus('current')
if mibBuilder.loadTexts: cldBandSelectCycleCount.setDescription('This object specifies band select probe mobile station count. Suppressed mobile stations and corresponding suppression count are recorded in a suppression table which is stored in internal database of controllers. AP will suppress probe request of a mobile station till value of cycle count. AP will increment cycle counter when a mobile station scan a channel on 2.4GHz band after any time greater than cldBandSelectCycleThreshold. When a mobile station cycle count is reached and if mobile station still sends a probe request then AP will respond to it by probe response. For example, we assume at minimum, a mobile station will stay in a channel for 5 milliseconds and there are 11 channels. If the mobile station scans channel 1 and then the other 10 channels, there should be at least a gap of 10x5 milliseconds between the last time AP hears the mobile station probe and the latest one. AP only increments the count if the difference of time between the latest and the last probe is more than 50 milliseconds.')
cldBandSelectCycleThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(200)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectCycleThreshold.setStatus('current')
if mibBuilder.loadTexts: cldBandSelectCycleThreshold.setDescription('This object specifies time threshold for a new scanning mobile station period. Mobile station cycle counter will increment only if mobile station scans same channel any time after cldBandSelectCycleThreshold is passed. For example, if a mobile station is scanning a channel after every 150 milliseconds and cycle threshold value is configures as 200, then cycle count will be incremented after 300 seconds. But if mobile station is scanning after every 250 milliseconds, then mobile station count will be incremented after 250 milliseconds.')
cldBandSelectAgeOutSuppression = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200)).clone(20)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectAgeOutSuppression.setStatus('current')
if mibBuilder.loadTexts: cldBandSelectAgeOutSuppression.setDescription('Suppressed mobile station are recorded in a suppression table. This object specifies age out period after which entry of mobile station will be removed. All entries will stay in the table until it is aged out or is replaced when table is full. If table is full, and there is no space for new mobile station then AP will replaced the oldest entry on the table that it had responded already. If there as no empty slot in the table, AP has to respond to all the new mobile station until space starts getting available.')
cldBandSelectAgeOutDualBand = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectAgeOutDualBand.setStatus('current')
if mibBuilder.loadTexts: cldBandSelectAgeOutDualBand.setDescription("This objects specifies age out period after which mobile station entry will be removed for dual band AP. When AP sees probe request from any mobile station in both 2.4GHz and 5GHz band AP will know that mobile station is capable of operating on both band. Dual band capable mobile stations are recorded in a dual band table which is stored in internal database of controllers. This record are kept to make sure 5GHz capable mobile station should join 5GHz band only. Entries in the table will be age out to make space for new entries. The AP will not respond to the dual band mobile station's 2.4GHz probe until is removed from the dual band table. AP fills the dual band table in the following order until it is full: 1) mobile station with 5GHz probe that have associated to 2.4GHz. 2) mobile station with 5GHz probe that also have 2.4GHz probes. 3) mobile station with just 5GHz probe detected and 5GHz association.")
cldBandSelectClientRssi = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -20)).clone(-80)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldBandSelectClientRssi.setStatus('current')
if mibBuilder.loadTexts: cldBandSelectClientRssi.setDescription('This object specifies minimum mobile station RSSI threshold. Mobile stations having RSSI below this value will not be recorded in suppressed table. This configuration filter out far away mobile stations with low signal strength. This will limit the number of mobile stations on the table to a reasonable amount.')
cldCountryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1), )
if mibBuilder.loadTexts: cldCountryTable.setStatus('current')
if mibBuilder.loadTexts: cldCountryTable.setDescription('This table provides the list of countries and the network parameters specific to the respective countries. It shows the 802.11 networks, managed by this controller, where controller can operate.')
cldCountryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-MIB", "cldCountryCode"))
if mibBuilder.loadTexts: cldCountryEntry.setStatus('current')
if mibBuilder.loadTexts: cldCountryEntry.setDescription('A conceptual row in cldCountryTable. There is an entry in this table for each country available at the agent, as identified by a value of cldCountryCode. Each entry also displays the corresponding channels supported by the cldCountryCode. All entries are added by the controller at startup.')
cldCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cldCountryCode.setStatus('current')
if mibBuilder.loadTexts: cldCountryCode.setDescription('This object identifies the country for this entry. The 3 letter country code for this index.')
cldCountryName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryName.setStatus('current')
if mibBuilder.loadTexts: cldCountryName.setDescription('This object represents the name of the country for this entry.')
cldCountryDot11aChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryDot11aChannels.setStatus('current')
if mibBuilder.loadTexts: cldCountryDot11aChannels.setDescription('This object represents the 802.11a channels separated by comma.')
cldCountryDot11bChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryDot11bChannels.setStatus('current')
if mibBuilder.loadTexts: cldCountryDot11bChannels.setDescription('This object represents the 802.11b channels separated by comma.')
cldCountryDot11aDcaChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryDot11aDcaChannels.setStatus('current')
if mibBuilder.loadTexts: cldCountryDot11aDcaChannels.setDescription('This object represents the 802.11a DCA channels separated by comma.')
cldCountryDot11bDcaChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldCountryDot11bDcaChannels.setStatus('current')
if mibBuilder.loadTexts: cldCountryDot11bDcaChannels.setDescription('This object represents the 802.11b DCA channels separated by comma.')
cldCountryChangeNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 612, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldCountryChangeNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cldCountryChangeNotifEnable.setDescription("This object is used to control the generation of ciscoLwappDot11CountryChangeNotif notification. A value of 'true' indicates that the agent generates ciscoLwappDot11CountryChangeNotif notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappDot11CountryChangeNotif notification.")
ciscoLwappDot11CountryChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 612, 0, 1)).setObjects(("CISCO-LWAPP-DOT11-MIB", "cldMultipleCountryCode"))
if mibBuilder.loadTexts: ciscoLwappDot11CountryChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11CountryChangeNotif.setDescription('This notification is generated by the controller when the country of operation of 802.11 networks is changed by the administrator. The new country code will be sent in this notification.')
ciscoLwappDot11MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 1))
ciscoLwappDot11MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2))
ciscoLwappDot11MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 1, 1)).setObjects(("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBMacOperGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBCompliance = ciscoLwappDot11MIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappDot11MIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappDot11MIB module.')
ciscoLwappDot11MIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 1, 2)).setObjects(("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBMacOperGroup"), ("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBConfigGroup"), ("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBNotifsGroup"), ("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11MIBStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBComplianceRev1 = ciscoLwappDot11MIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11MIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappDot11MIB module.')
ciscoLwappDot11MIBMacOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2, 1)).setObjects(("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nChannelBandwidth"), ("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nRifsEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nAmsduEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nAmpduEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nGuardIntervalEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBMacOperGroup = ciscoLwappDot11MIBMacOperGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11MIBMacOperGroup.setDescription('This collection of objects represents the operational parameters at the MAC layer for the 802.11n networks.')
ciscoLwappDot11MIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2, 2)).setObjects(("CISCO-LWAPP-DOT11-MIB", "cldHtDot11nEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldMultipleCountryCode"), ("CISCO-LWAPP-DOT11-MIB", "cldRegulatoryDomain"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsDataRate"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsSupportEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryChangeNotifEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldLoadBalancingEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldLoadBalancingWindowSize"), ("CISCO-LWAPP-DOT11-MIB", "cldLoadBalancingDenialCount"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectEnable"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectCycleCount"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectCycleThreshold"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectAgeOutSuppression"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectAgeOutDualBand"), ("CISCO-LWAPP-DOT11-MIB", "cldBandSelectClientRssi"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsChannelWidth"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsGuardInterval"), ("CISCO-LWAPP-DOT11-MIB", "cld11nMcsModulation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBConfigGroup = ciscoLwappDot11MIBConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11MIBConfigGroup.setDescription('This collection of objects specifies the configuration parameters of 802.11i networks.')
ciscoLwappDot11MIBNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2, 3)).setObjects(("CISCO-LWAPP-DOT11-MIB", "ciscoLwappDot11CountryChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBNotifsGroup = ciscoLwappDot11MIBNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11MIBNotifsGroup.setDescription('This collection of objects specifies the notifications generated by the controller.')
ciscoLwappDot11MIBStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 612, 2, 2, 4)).setObjects(("CISCO-LWAPP-DOT11-MIB", "cldCountryName"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryDot11aChannels"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryDot11bChannels"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryDot11aDcaChannels"), ("CISCO-LWAPP-DOT11-MIB", "cldCountryDot11bDcaChannels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11MIBStatusGroup = ciscoLwappDot11MIBStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11MIBStatusGroup.setDescription('This collection of objects specifies the notification objects for 802.11.')
mibBuilder.exportSymbols("CISCO-LWAPP-DOT11-MIB", ciscoLwappDot11MIBConfigGroup=ciscoLwappDot11MIBConfigGroup, ciscoLwappDot11MIBObjects=ciscoLwappDot11MIBObjects, cldHtDot11nChannelBandwidth=cldHtDot11nChannelBandwidth, cldHtDot11nEnable=cldHtDot11nEnable, cldLoadBalancingWindowSize=cldLoadBalancingWindowSize, cldCountryDot11bDcaChannels=cldCountryDot11bDcaChannels, ciscoLwappDot11MIBComplianceRev1=ciscoLwappDot11MIBComplianceRev1, cldCountryCode=cldCountryCode, ciscoLwappDot11MIBGroups=ciscoLwappDot11MIBGroups, cldCountryChangeNotifEnable=cldCountryChangeNotifEnable, ciscoLwappDot11MIBNotifsGroup=ciscoLwappDot11MIBNotifsGroup, cldHtMacOperationsTable=cldHtMacOperationsTable, cldCountryDot11bChannels=cldCountryDot11bChannels, cldLoadBalancingDenialCount=cldLoadBalancingDenialCount, cldCountryDot11aChannels=cldCountryDot11aChannels, cldVhtDot11acEnable=cldVhtDot11acEnable, ciscoLwappDot11MIBCompliances=ciscoLwappDot11MIBCompliances, cldMultipleCountryCode=cldMultipleCountryCode, cldHtDot11nGuardIntervalEnable=cldHtDot11nGuardIntervalEnable, cldHtDot11nRifsEnable=cldHtDot11nRifsEnable, cldHtMacOperationsEntry=cldHtMacOperationsEntry, cldLoadBalancingEnable=cldLoadBalancingEnable, cld11acMcsSupportEnable=cld11acMcsSupportEnable, cldBandSelectEnable=cldBandSelectEnable, cldLoadBalancingTrafficThreshold=cldLoadBalancingTrafficThreshold, ciscoLwappDot11MIBCompliance=ciscoLwappDot11MIBCompliance, cld11nMcsDataRateIndex=cld11nMcsDataRateIndex, cld11nMcsModulation=cld11nMcsModulation, cldStatus=cldStatus, cldHtDot11nAmpduEnable=cldHtDot11nAmpduEnable, ciscoLwappDot11MIBConform=ciscoLwappDot11MIBConform, cldBandSelect=cldBandSelect, cldCountryName=cldCountryName, ciscoLwappDot11MIBNotifs=ciscoLwappDot11MIBNotifs, cldBandSelectClientRssi=cldBandSelectClientRssi, cld11nMcsEntry=cld11nMcsEntry, cld11nMcsDataRate=cld11nMcsDataRate, cldRegulatoryDomain=cldRegulatoryDomain, ciscoLwappDot11MIB=ciscoLwappDot11MIB, cld11nMcsBand=cld11nMcsBand, cld11acMcsSpatialStreamIndex=cld11acMcsSpatialStreamIndex, cld11nMcsSupportEnable=cld11nMcsSupportEnable, cldBandSelectAgeOutSuppression=cldBandSelectAgeOutSuppression, cld11acConfig=cld11acConfig, cldLoadBalancing=cldLoadBalancing, cldCountryDot11aDcaChannels=cldCountryDot11aDcaChannels, cld11acMcsEntry=cld11acMcsEntry, cld11nMcsChannelWidth=cld11nMcsChannelWidth, ciscoLwappDot11MIBMacOperGroup=ciscoLwappDot11MIBMacOperGroup, PYSNMP_MODULE_ID=ciscoLwappDot11MIB, cldConfig=cldConfig, ciscoLwappDot11MIBStatusGroup=ciscoLwappDot11MIBStatusGroup, ciscoLwappDot11CountryChangeNotif=ciscoLwappDot11CountryChangeNotif, cldCountryEntry=cldCountryEntry, cldBandSelectAgeOutDualBand=cldBandSelectAgeOutDualBand, cld11nMcsTable=cld11nMcsTable, cldCountryTable=cldCountryTable, cldHtDot11nBand=cldHtDot11nBand, cld11nMcsGuardInterval=cld11nMcsGuardInterval, cldBandSelectCycleCount=cldBandSelectCycleCount, cld11acMcsTable=cld11acMcsTable, cld11acMcsDataRateIndex=cld11acMcsDataRateIndex, cldHtDot11nAmsduEnable=cldHtDot11nAmsduEnable, cldBandSelectCycleThreshold=cldBandSelectCycleThreshold)
