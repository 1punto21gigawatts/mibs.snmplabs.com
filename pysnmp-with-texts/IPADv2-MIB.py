#
# PySNMP MIB module IPADv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPADv2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ddsNetBPVCount, t1e1RASCount, t1e1LOSSCount, t1e1SESCount, t1e1UASCount, t1e1AISCount, ddsNetFDLCount, t1e1OOFSCount, serialDteDTRAlarmStatus, ddsNetOOFCount, ddsNetLOSCount, ddsNetOOSCount, t1e1BPVSCount, t1e1ESCount, t1e1CSSCount = mibBuilder.importSymbols("DS8200v2-MIB", "ddsNetBPVCount", "t1e1RASCount", "t1e1LOSSCount", "t1e1SESCount", "t1e1UASCount", "t1e1AISCount", "ddsNetFDLCount", "t1e1OOFSCount", "serialDteDTRAlarmStatus", "ddsNetOOFCount", "ddsNetLOSCount", "ddsNetOOSCount", "t1e1BPVSCount", "t1e1ESCount", "t1e1CSSCount")
verilink, hbu = mibBuilder.importSymbols("DS8200v2-TC-MIB", "verilink", "hbu")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, enterprises, NotificationType, IpAddress, Counter32, Integer32, iso, MibIdentifier, TimeTicks, Gauge32, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "enterprises", "NotificationType", "IpAddress", "Counter32", "Integer32", "iso", "MibIdentifier", "TimeTicks", "Gauge32", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipad = ModuleIdentity((1, 3, 6, 1, 4, 1, 321, 100, 1))
if mibBuilder.loadTexts: ipad.setLastUpdated('0011210000Z')
if mibBuilder.loadTexts: ipad.setOrganization('Verilink Corporation')
if mibBuilder.loadTexts: ipad.setContactInfo('support@verilink.com + 1 800 285 2755')
if mibBuilder.loadTexts: ipad.setDescription('IPADv2.MIB updated for SNMPv2.')
ipadFrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 1))
ipadService = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 2))
ipadChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 3))
ipadDLCI = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 4))
ipadEndpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 5))
ipadUser = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 6))
ipadPPP = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 7))
ipadModem = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 8))
ipadSvcAware = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 9))
ipadPktSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 10))
ipadTrapDest = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 11))
ipadMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 12))
ipadRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 13))
ipadSoftKey = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 14))
ipadTCPServer = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 15))
ipadTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 999))
ipadTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0))
ipadSCADAConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 16))
ipadSCADAStats = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 17))
ipadSCADADevLst = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 18))
ipadDS0Config = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 19))
ipadDS0Hist24 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 20))
ipadDS0Hist30 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 21))
ipadHDLCConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 22))
ipadHDLCHist24 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 23))
ipadHDLCHist30 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 24))
ipadAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 25))
ipadNat = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 26))
ipadDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 27))
ipadBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 28))
ipadSmtp = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 29))
ipadEncryption = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 30))
ipadAutoLearnDS0 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 31))
ipadUnitAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 32))
ipadTFTPDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 33))
ipadDataLineMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 34))
ipadOrigPing = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 35))
ipadFrPortTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1), )
if mibBuilder.loadTexts: ipadFrPortTable.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortTable.setDescription('Table of frame relay port parameters.')
ipadFrPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadFrPortService"))
if mibBuilder.loadTexts: ipadFrPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortTableEntry.setDescription('An entry in the ipad frame relay port table.')
ipadFrPortService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortService.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortService.setDescription('Index into the ipad frame relay port table; an entry in the ipad service table.')
ipadFrPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortActive.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortActive.setDescription('Specifies if the port is active.')
ipadFrPortLMIType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ccitt", 2), ("ansi", 3), ("lmi", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortLMIType.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortLMIType.setDescription('Specifies the link management information type used on this port.')
ipadFrPortLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sourcing", 2), ("monitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortLMIMode.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortLMIMode.setDescription('Specifies the link management information mode used on this port.')
ipadFrPortRxInvAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortRxInvAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortRxInvAlmThreshold.setDescription('Sets the rx invalid frames alarm threshold. Setting this field to 0 disables the alarm.')
ipadFrPortRxInvAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortRxInvAlmAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortRxInvAlmAlarm.setDescription('Reports if the invalid frames threshold has been exceeded.')
ipadFrPortTxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortTxAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortTxAlmThreshold.setDescription('Sets the tx throughput alarm threshold (in bits/second). Setting this field to 0 disables the alarm.')
ipadFrPortTxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortTxAlmAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortTxAlmAlarm.setDescription('Reports if the tx throughput threshold has been exceeded.')
ipadFrPortRxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortRxAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortRxAlmThreshold.setDescription('Sets the rx throughput alarm threshold (in bits/second). Setting this field to 0 disables the alarm.')
ipadFrPortRxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortRxAlmAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortRxAlmAlarm.setDescription('Reports if the rx throughput threshold has been exceeded.')
ipadFrPortAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frPortAlarmResetOther", 1), ("frPortAlarmResetClearAlarms", 2), ("frPortAlarmResetClearStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortAlarmReset.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortAlarmReset.setDescription('This is used to clear the current alarm counts.')
ipadServiceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1), )
if mibBuilder.loadTexts: ipadServiceTable.setStatus('current')
if mibBuilder.loadTexts: ipadServiceTable.setDescription('The ipad service table.')
ipadServiceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadServiceIndex"))
if mibBuilder.loadTexts: ipadServiceTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadServiceTableEntry.setDescription('An entry in the ipad service table.')
ipadServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadServiceIndex.setStatus('current')
if mibBuilder.loadTexts: ipadServiceIndex.setDescription('The index for the ipad service table.')
ipadServiceifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100))).clone(namedValues=NamedValues(("disabled", 0), ("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6), ("auxiliary", 7), ("network3", 8), ("atmCES", 9), ("modem", 10), ("virtual", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceifIndex.setStatus('current')
if mibBuilder.loadTexts: ipadServiceifIndex.setDescription('The MIB-II ifIndex for this service.')
ipadServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("other", 1), ("tdm", 2), ("ppp", 3), ("pppMonitor", 4), ("frameRelay", 5), ("frameRelayMonitor", 6), ("ip", 7), ("serial", 8), ("tty", 9), ("scada", 10), ("parallelIO", 11), ("atm", 12), ("hdlcPPP", 13), ("atmCES", 14), ("modem", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceType.setStatus('current')
if mibBuilder.loadTexts: ipadServiceType.setDescription('The type of this service.')
ipadServicePair = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServicePair.setStatus('current')
if mibBuilder.loadTexts: ipadServicePair.setDescription('An entry in this table, which establishes a service pairing.')
ipadServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("down", 3), ("physicalUp", 4), ("protocolUp", 5), ("dead", 6), ("changed", 7), ("training", 8), ("connecting", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ipadServiceStatus.setDescription('This parameter indicates the status of the service. idle - The service is not doing anything or has not been configured for use. down - The physical layer for the service is not ready. training - The physical layer is not ready but is attempting to come up. connecting - The physical layer is not ready but is attempting to come up. physicalUp - The physical layer is ready the service is not ready. protocolUp - The service is able to pass data. dead - The service is inactive because no resources are available to support it. changed - Service parameters were changed and require a save and restart to take effect.')
ipadServiceAddService = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("addService", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceAddService.setStatus('current')
if mibBuilder.loadTexts: ipadServiceAddService.setDescription('Adds a row to the Service Table.')
ipadServiceDeleteService = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceDeleteService.setStatus('current')
if mibBuilder.loadTexts: ipadServiceDeleteService.setDescription('Identifies a Service to be deleted; an index into the Service Table.')
ipadChannelTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1), )
if mibBuilder.loadTexts: ipadChannelTable.setStatus('current')
if mibBuilder.loadTexts: ipadChannelTable.setDescription('The ipad channel table.')
ipadChannelTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadChannelifIndex"), (0, "IPADv2-MIB", "ipadChannelIndex"))
if mibBuilder.loadTexts: ipadChannelTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadChannelTableEntry.setDescription('An entry in the ipad channel table.')
ipadChannelifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelifIndex.setStatus('current')
if mibBuilder.loadTexts: ipadChannelifIndex.setDescription('Primary index into ipad channel table, MIB-II ifIndex.')
ipadChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelIndex.setStatus('current')
if mibBuilder.loadTexts: ipadChannelIndex.setDescription('Channel index for the physical interface.')
ipadChannelService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelService.setStatus('current')
if mibBuilder.loadTexts: ipadChannelService.setDescription('Index into service table for this channel.')
ipadChannelPair = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelPair.setStatus('current')
if mibBuilder.loadTexts: ipadChannelPair.setDescription('Pair for this channel; an entry in the channel table. Use service pair in service table to determine which service contains this channel.')
ipadChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("rate56", 2), ("rate64", 3), ("rate8", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelRate.setStatus('current')
if mibBuilder.loadTexts: ipadChannelRate.setDescription('Rate for this channel.')
ipadChannelIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelIdlePattern.setStatus('current')
if mibBuilder.loadTexts: ipadChannelIdlePattern.setDescription('Idle pattern for this channel.')
ipadDLCITable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1), )
if mibBuilder.loadTexts: ipadDLCITable.setStatus('current')
if mibBuilder.loadTexts: ipadDLCITable.setDescription('The ipad DLCI table.')
ipadDLCITableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDLCIservice"), (0, "IPADv2-MIB", "ipadDLCInumber"))
if mibBuilder.loadTexts: ipadDLCITableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadDLCITableEntry.setDescription('An entry in the ipad DLCI table.')
ipadDLCIservice = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIservice.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIservice.setDescription('An index into the ipad service table.')
ipadDLCInumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCInumber.setStatus('current')
if mibBuilder.loadTexts: ipadDLCInumber.setDescription('The DLCI number for this entry.')
ipadDLCIactive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3), ("pending", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIactive.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIactive.setDescription('Specifies if the DLCI is active.')
ipadDLCIcongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIcongestion.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIcongestion.setDescription('Specifies if the dlci is receiving frames with FECN or BECN bit set.')
ipadDLCIremote = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremote.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIremote.setDescription('Remote DLCI number.')
ipadDLCIremoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremoteUnit.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIremoteUnit.setDescription('Name of the remote DLCI.')
ipadDLCIremoteEquipActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("active", 3), ("sosAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremoteEquipActive.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIremoteEquipActive.setDescription('Reports if the equipment attached to the remote unit is active.')
ipadDLCIencapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rfc1490", 2), ("proprietary", 3), ("rfc1490withEncryption", 4), ("rfc1490withCompression", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIencapsulation.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIencapsulation.setDescription('Type of protocol encapsulation used on this DLCI.')
ipadDLCIproprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("ipx", 3), ("ethertype", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIproprietary.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIproprietary.setDescription('When the encapsulation is proprietary, the traffic type must be configured to gather protocol specific statistics.')
ipadDLCIpropOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIpropOffset.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIpropOffset.setDescription('When the encapsulation is proprietary, this is the number of bytes after the frame relay header to look for the specified protocol decode.')
ipadDLCIinBand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIinBand.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIinBand.setDescription('Determines if frames on this DLCI will be parsed to look for management frames destined for the unit itself.')
ipadDLCICIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCICIR.setStatus('current')
if mibBuilder.loadTexts: ipadDLCICIR.setDescription('Default committed information rate in bits per second.')
ipadDLCIBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIBe.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIBe.setDescription('Default excess burst rate in bits per second.')
ipadDLCIminBC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIminBC.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIminBC.setDescription('If the corresponding interface is configured to enable congestion management, the minimum transfer rate at which the unit will throttle back offering data to the network.')
ipadDLCIrxMon = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIrxMon.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIrxMon.setDescription('Determines if the SLA parameters will be monitored for received frames.')
ipadDLCIdEctrl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIdEctrl.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIdEctrl.setDescription('Determines if the Rx monitor will set the DE bit on all frames received in excess of the CIR before they are switched to their destination port.')
ipadDLCIenableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIenableDelay.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIenableDelay.setDescription('Enable or disable delay.')
ipadDLCItxExCIRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCItxExCIRThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadDLCItxExCIRThreshold.setDescription('Sets the Tx over CIR alarm threshold. This threshold is the number of bits per second in excess of CIR. Setting this field to 0 disables the alarm.')
ipadDLCItxExCIRAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCItxExCIRAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadDLCItxExCIRAlarm.setDescription('Reports if the Tx over CIR threshold has been exceeded.')
ipadDLCItxExBeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCItxExBeThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadDLCItxExBeThreshold.setDescription('Sets the Tx over Be alarm threshold. This threshold is the number of bits per second in excess of Be. Setting this field to 0 disables the alarm.')
ipadDLCItxExBeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCItxExBeAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadDLCItxExBeAlarm.setDescription('Reports if the Tx over Be threshold has been exceeded.')
ipadDLCIrxCongThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIrxCongThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIrxCongThreshold.setDescription('Sets the Rx congestion alarm threshold. This threshold is the number of frames received with BECN/FECN. Setting this field to 0 disables the alarm.')
ipadDLCIrxCongAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIrxCongAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIrxCongAlarm.setDescription('Reports if the Rx congestion threshold has been exceeded.')
ipadDLCIrxBECNinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("alarmCondition", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIrxBECNinCIR.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIrxBECNinCIR.setDescription('Reports if BECN has been received within CIR.')
ipadDLCIUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIUASThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIUASThreshold.setDescription('Sets the UAS (unavailable seconds) alarm threshold. This threshold is the number of seconds passed that the DLCI is unavailable. Setting this field to 0 disables the alarm.')
ipadDLCIUASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIUASAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIUASAlarm.setDescription('Reports if the UAS threshold has been exceeded.')
ipadDLCIAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dlciAlarmResetOther", 1), ("dlciAlarmResetClearAlarms", 2), ("dlciAlarmResetClearStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIAlarmReset.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIAlarmReset.setDescription('This is used to clear the current alarm counts.')
ipadDLCIRoundTripDelaySize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIRoundTripDelaySize.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIRoundTripDelaySize.setDescription('Specifies the packet size in octets used to calculate round trip delay.')
ipadDLCIRoundTripDelayRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIRoundTripDelayRate.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIRoundTripDelayRate.setDescription('Specifies the packet rate in seconds used to calculate round trip delay.')
ipadDLCIRemoteFramesOfferedWithinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteFramesOfferedWithinCIR.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIRemoteFramesOfferedWithinCIR.setDescription('Count of frames sent within CIR from the remote end of the DLCI.')
ipadDLCIRemoteFramesOfferedWithinBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteFramesOfferedWithinBE.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIRemoteFramesOfferedWithinBE.setDescription('Count of frames sent within BE, but over CIR, from the remote end of the DLCI.')
ipadDLCIFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIFramesReceived.setDescription('Count of frames received by the local device on this DLCI.')
ipadDLCIRemoteDataOfferedWithinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteDataOfferedWithinCIR.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIRemoteDataOfferedWithinCIR.setDescription('Count of data octets sent within CIR from the remote end of the DLCI.')
ipadDLCIRemoteDataOfferedWithinBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteDataOfferedWithinBE.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIRemoteDataOfferedWithinBE.setDescription('Count of data octets sent within BE, but over CIR, from the remote end of the DLCI.')
ipadDLCIDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIDataReceived.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIDataReceived.setDescription('Count of data octets received by the local device on this DLCI.')
ipadDLCIRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIRemoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIRemoteIPAddress.setDescription("The IP Address of the device on the remote end of this DLCI. This information is only valid when the remote device supports Verilink's proprietary message exchange.")
ipadDLCICompressionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabledAndNegotiated", 3), ("enabledButNotNegotiated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionStatus.setStatus('current')
if mibBuilder.loadTexts: ipadDLCICompressionStatus.setDescription('This is the current status of the compression engine for this DLCI. disabled(2) indicates that the compression engine is disabled. enabledAndNegotiated(3) indicates that compression is enabled, and has been successfully negotiated with the device at the other end. enabledButNotNegotiated(4) indicated that compression is enabled, but has not been successfully negotiated with the device at the other end. This may be due to the DLCI being down, the other device not having compression enabled or other factors which would inhibit communication.')
ipadDLCICompressionTxOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionTxOctetsIn.setStatus('current')
if mibBuilder.loadTexts: ipadDLCICompressionTxOctetsIn.setDescription('This is a rolling counter of the number of octets given to the compression engine.')
ipadDLCICompressionTxOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionTxOctetsOut.setStatus('current')
if mibBuilder.loadTexts: ipadDLCICompressionTxOctetsOut.setDescription('This is a rolling counter of the number of octets output from the compression engine.')
ipadDLCICompressionRxOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionRxOctetsIn.setStatus('current')
if mibBuilder.loadTexts: ipadDLCICompressionRxOctetsIn.setDescription('This is a rolling counter of the number of octets given to the compression engine.')
ipadDLCICompressionRxOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCICompressionRxOctetsOut.setStatus('current')
if mibBuilder.loadTexts: ipadDLCICompressionRxOctetsOut.setDescription('This is a rolling counter of the number of octets given to the compression engine.')
ipadDLCILastChange = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCILastChange.setStatus('current')
if mibBuilder.loadTexts: ipadDLCILastChange.setDescription('Time of the last change in the DLCI table.')
ipadEndpointTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1), )
if mibBuilder.loadTexts: ipadEndpointTable.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointTable.setDescription('The ipad endpoint table.')
ipadEndpointTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadEndpointIndex"))
if mibBuilder.loadTexts: ipadEndpointTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointTableEntry.setDescription('An entry in the ipad endpoint table.')
ipadEndpointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadEndpointIndex.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointIndex.setDescription('The index into the ipad endpoint table.')
ipadEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointName.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointName.setDescription('The name for the endpoint.')
ipadEndpointService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointService.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointService.setDescription('An index into the ipad service table.')
ipadEndpointDLCInumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointDLCInumber.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointDLCInumber.setDescription('Data link connection identifier for this endpoint; The DLCI number for this entry.')
ipadEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("frLocal", 2), ("frSwitched", 3), ("ipRoute", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointType.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointType.setDescription('Endpoint type.')
ipadEndpointForward = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointForward.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointForward.setDescription('Index into the endpoint names table. This is the endpoint on which data should be forwarded for switched endpoints.')
ipadEndpointBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointBackup.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointBackup.setDescription('Index into the endpoint table. This is the endpoint on which data should be forwarded in the case where the endpoint becomes inactive.')
ipadEndpointRefSLP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRefSLP.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointRefSLP.setDescription('Index into the endpoint table. The service level parameters can be copied from another configured endpoint.')
ipadEndpointRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointRemoteIpAddr.setDescription('IP address for remote.')
ipadEndpointRemoteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRemoteIpMask.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointRemoteIpMask.setDescription('IP address mask for remote.')
ipadEndpointAddEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointAddEndpoint.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointAddEndpoint.setDescription('Identifies an Endpoint to be added.')
ipadEndpointDeleteEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointDeleteEndpoint.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointDeleteEndpoint.setDescription('Identifies an Endpoint to be deleted.')
ipadEndpointLastChange = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadEndpointLastChange.setStatus('current')
if mibBuilder.loadTexts: ipadEndpointLastChange.setDescription('Time of the last change in the Endpoint table.')
ipadUserTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1), )
if mibBuilder.loadTexts: ipadUserTable.setStatus('current')
if mibBuilder.loadTexts: ipadUserTable.setDescription('Table of user selected parameters.')
ipadUserTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadUserIndex"))
if mibBuilder.loadTexts: ipadUserTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadUserTableEntry.setDescription('An entry in the ipad user table.')
ipadUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIndex.setStatus('current')
if mibBuilder.loadTexts: ipadUserIndex.setDescription('Index into the ipad user table.')
ipadUserFilterByDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByDLCI.setStatus('current')
if mibBuilder.loadTexts: ipadUserFilterByDLCI.setDescription('Enables Service+DLCI filtering for this user statistic.')
ipadUserService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserService.setStatus('current')
if mibBuilder.loadTexts: ipadUserService.setDescription('Specifies the service for this user type; identifies an entry in the ipad DLCI table when combined with ipadUserDLCI. Meaningful when ipadUserFilterByDLCI is enabled. Meaningless when collecting PPP statistics.')
ipadUserDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserDLCI.setStatus('current')
if mibBuilder.loadTexts: ipadUserDLCI.setDescription('Specifies the DLCI for this user type; identifies an entry in the ipad DLCI table when combined with ipadUserService. Meaningful when ipadUserFilterByDLCI is enabled. Meaningless when collecting PPP statistics.')
ipadUserFilterByIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByIPAddress.setStatus('current')
if mibBuilder.loadTexts: ipadUserFilterByIPAddress.setDescription('Enables IP address filtering for this user statistic. A packet is counted towards the user statistics if the result of a bitwise-and of an IP address in a transmitted packet with ipadUserIPMask equals ipadUserIPAddress.')
ipadUserIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPAddress.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPAddress.setDescription('Specifies the IP address for this user type.')
ipadUserIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPMask.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPMask.setDescription('Specifies the IP address mask for this user type.')
ipadUserFilterByIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByIPPort.setStatus('current')
if mibBuilder.loadTexts: ipadUserFilterByIPPort.setDescription('Enables IP Port filtering for this user statistic.')
ipadUserIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 7, 11, 17, 20, 21, 23, 25, 31, 37, 42, 53, 66, 69, 70, 79, 80, 88, 92, 101, 107, 109, 110, 111, 113, 119, 137, 138, 139, 153, 161, 162, 163, 164, 169, 179, 194, 201, 202, 204, 206, 213, 395, 396, 444, 494, 533, 540, 541, 600, 749))).clone(namedValues=NamedValues(("rje", 5), ("echo", 7), ("systat", 11), ("qotd", 17), ("ftpdata", 20), ("ftp", 21), ("telnet", 23), ("smtp", 25), ("msgauth", 31), ("time", 37), ("nameserver", 42), ("domain", 53), ("sqlnet", 66), ("tftp", 69), ("gopher", 70), ("finger", 79), ("http", 80), ("kerberos", 88), ("npp", 92), ("hostname", 101), ("rtelnet", 107), ("pop2", 109), ("pop3", 110), ("sunrpc", 111), ("auth", 113), ("nntp", 119), ("netbiosns", 137), ("netbiosdgm", 138), ("netbiosssn", 139), ("sgmp", 153), ("snmp", 161), ("snmptrap", 162), ("cmipman", 163), ("cmipagent", 164), ("send", 169), ("bgp", 179), ("irc", 194), ("atrtmp", 201), ("atnbp", 202), ("atecho", 204), ("atzis", 206), ("ipx", 213), ("netcp", 395), ("netwareip", 396), ("snpp", 444), ("povray", 494), ("netwall", 533), ("uucp", 540), ("uucprlogin", 541), ("ipcserver", 600), ("kerberosadm", 749)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPPort.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPPort.setDescription('Specifies the IP port for this user type.')
ipadUserTxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserTxAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadUserTxAlmThreshold.setDescription('Sets the tx throughput alarm threshold in bits per second. Setting this field to 0 disables the alarm.')
ipadUserTxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserTxAlmAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadUserTxAlmAlarm.setDescription('Reports if the tx throughput threshold has been exceeded.')
ipadUserAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userAlarmResetOther", 1), ("userAlarmResetClearAlarms", 2), ("userAlarmResetClearStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserAlarmReset.setStatus('current')
if mibBuilder.loadTexts: ipadUserAlarmReset.setDescription('This is used to clear the current alarm counts.')
ipadUserVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserVpi.setStatus('current')
if mibBuilder.loadTexts: ipadUserVpi.setDescription('Specifies the Vpi for this user type; identifies a VC when combined with the ipadUserService and ipadUserVci objects. Meaningful when ipadUserFilterByVpiVci is enabled. Meaningless when collecting PPP or Frame Relay statistics.')
ipadUserVci = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserVci.setStatus('current')
if mibBuilder.loadTexts: ipadUserVci.setDescription('Specifies the Vci for this user type; identifies a VC when combined with the ipadUserService and ipadUserVpi objects. Meaningful when ipadUserFilterByVpiVci is enabled. Meaningless when collecting PPP or Frame Relay statistics.')
ipadUserFilterByVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByVpiVci.setStatus('current')
if mibBuilder.loadTexts: ipadUserFilterByVpiVci.setDescription('Enables Vpi/Vci filtering for this user statistic. A packet is counted towards the user statistics if the packet is transmitted on the service/Vpi/Vci combindation specified by ipadUserService, ipadUserVpi, and ipadUserVci.')
ipadUserIPStatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPStatTimeRemaining.setDescription('Specifies seconds until the next IP TopN report is generated.')
ipadUserIPStatTimeDuration = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatTimeDuration.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPStatTimeDuration.setDescription('The value of TimeRemaining when TimeRemaining was last set. Indicates the number of seconds that the next IP TopN report will cover.')
ipadUserIPStatStartTime = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatStartTime.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPStatStartTime.setDescription('The value of SysUpTime when TimeRemaining was last set.')
ipadUserIPStatRequestedReportSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatRequestedReportSize.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPStatRequestedReportSize.setDescription('Determines the requested maximum number of entries in the topN report.')
ipadUserIPStatGrantedReportSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatGrantedReportSize.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPStatGrantedReportSize.setDescription('Determines the granted number of entries in the topN report. This is by definition less than or equal to requested report size.')
ipadUserIPStatReportNumber = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatReportNumber.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPStatReportNumber.setDescription('Specifies the number of reports that have been generated. This value resets to zero when the unit is restarted.')
ipadUserIPStatDiscardType = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byTime", 1), ("byFrames", 2), ("byOctets", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatDiscardType.setStatus('current')
if mibBuilder.loadTexts: ipadUserIPStatDiscardType.setDescription('The internal table used to track TopN statistics is finite in size. On the condition when the internal table is full and a new IP address is encountered, an element already existing in the table must be removed. This variable determines the manner of selection. Writing byTime(1) will cause the entry with the least recent frame to be discarded. That is, all other entries in the table will have transmitted or received at least one packet more recently. Writing byFrames(2) will select the entry with the fewest transmitted or received frames. Writing byOctets(3) will select the entry with the fewest transmitted or received octets. The default is byTime(1).')
ipadPPPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1), )
if mibBuilder.loadTexts: ipadPPPCfgTable.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgTable.setDescription('The ipad PPP configuration table.')
ipadPPPCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadPPPCfgService"))
if mibBuilder.loadTexts: ipadPPPCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgTableEntry.setDescription('An entry in the ipad PPP configuration table.')
ipadPPPCfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPCfgService.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgService.setDescription('The index into the PPP configuration table; an entry in the ipad service table.')
ipadPPPCfgDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("direct", 2), ("dialup", 3), ("demanddial", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgDialMode.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgDialMode.setDescription('Determines the permancency of a communications connection.')
ipadPPPCfgInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgInactivityTimer.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgInactivityTimer.setDescription('Determines when a dial-up or demand-dial connection will be disconnected due to inactivity in both directions. When this parameter is set to zero then the timer is disabled.')
ipadPPPCfgNegotiationInit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegotiationInit.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegotiationInit.setDescription('Determines if the port waits for the other end to initiate parameter negotiations.')
ipadPPPCfgMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgMRU.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgMRU.setDescription('The maximum receive unit the interface will accept. Valid values are in the range 128 - 4096, default is 1500.')
ipadPPPCfgACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgACCM.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgACCM.setDescription('Sets the async control character map used when generating async HDLC frames. Setting a bit in the map causes the corresponding character to be mapped for transparency.')
ipadPPPCfgNegMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegMRU.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegMRU.setDescription('Determines if MRU size is negotiated.')
ipadPPPCfgNegACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegACCM.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegACCM.setDescription('Determines if ACCM is negotiated.')
ipadPPPCfgNegMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegMagic.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegMagic.setDescription('Determines if the magic number is negotiated.')
ipadPPPCfgNegCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegCompression.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegCompression.setDescription('Determines if the PPP protocol header compression is negotiated.')
ipadPPPCfgNegAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegAddress.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegAddress.setDescription('Determines if the PPP HDLC header compression is negotiated.')
ipadPPPCfgNegPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegPAP.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegPAP.setDescription('Determines if PAP is negotiated with the peer when a more secure authentication protocol is rejected.')
ipadPPPCfgNegCHAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegCHAP.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegCHAP.setDescription('Determines if CHAP is negotiated with the peer when a more secure authentication protocol is rejected.')
ipadPPPCfgAllowPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAllowPAP.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgAllowPAP.setDescription('Determines if PAP is allowed to be negotiated by the peer.')
ipadPPPCfgAllowCHAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAllowCHAP.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgAllowCHAP.setDescription('Determines if CHAP is allowed to be negotiated by the peer.')
ipadPPPCfgPAPUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPAPUsername.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgPAPUsername.setDescription('Identification string to determine the user identity.')
ipadPPPCfgPAPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPAPPassword.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgPAPPassword.setDescription('Password string to validate the user identity.')
ipadPPPCfgCHAPUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgCHAPUsername.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgCHAPUsername.setDescription('Identification string to determine the user identity.')
ipadPPPCfgCHAPSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgCHAPSecret.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgCHAPSecret.setDescription('Password string to validate the user identity.')
ipadPPPCfgPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPortIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgPortIpAddress.setDescription("Sets the IP address of the unit's port.")
ipadPPPCfgPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgPeerIpAddress.setDescription("Sets the IP address of the unit's peer.")
ipadPPPCfgNegIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegIpAddress.setDescription('Determines if IP addresses are dynamically negotiated.')
ipadPPPCfgNegIPCPCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIPCPCompression.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegIPCPCompression.setDescription('Determines if Van Jacobson TCPIP header compression is negotiated.')
ipadPPPCfgSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgSubnetMask.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgSubnetMask.setDescription('Specifies the subnet mask.')
ipadPPPCfgAuthChallengeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAuthChallengeInterval.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgAuthChallengeInterval.setDescription('Specifies the authentication challenge interval.')
ipadPPPCfgEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgEndpoint.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgEndpoint.setDescription('Endpoint name to run PPP over another protocol.')
ipadPPPCfgNegIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIpMask.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegIpMask.setDescription('Determines if the subnet Mask is negotiated.')
ipadPPPCfgNegDNSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegDNSAddress.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCfgNegDNSAddress.setDescription('Determines if the DNS address is negotiated.')
ipadPPPPAPTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2), )
if mibBuilder.loadTexts: ipadPPPPAPTable.setStatus('current')
if mibBuilder.loadTexts: ipadPPPPAPTable.setDescription('Table of PAP authentication parameters.')
ipadPPPPAPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadPPPPAPTableIndex"))
if mibBuilder.loadTexts: ipadPPPPAPTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadPPPPAPTableEntry.setDescription('An entry in the ipad PPP PAP table.')
ipadPPPPAPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPPAPTableIndex.setStatus('current')
if mibBuilder.loadTexts: ipadPPPPAPTableIndex.setDescription('The index into the PPP PAP association table.')
ipadPPPPAPTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPPAPTableUsername.setStatus('current')
if mibBuilder.loadTexts: ipadPPPPAPTableUsername.setDescription('Identification string to identify the user.')
ipadPPPPAPTablePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPPAPTablePassword.setStatus('current')
if mibBuilder.loadTexts: ipadPPPPAPTablePassword.setDescription('Password string to validate the user identity.')
ipadPPPCHAPTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3), )
if mibBuilder.loadTexts: ipadPPPCHAPTable.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCHAPTable.setDescription('Table of CHAP authentication parameters.')
ipadPPPCHAPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadPPPCHAPTableIndex"))
if mibBuilder.loadTexts: ipadPPPCHAPTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCHAPTableEntry.setDescription('An entry in the ipad PPP CHAP table.')
ipadPPPCHAPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPCHAPTableIndex.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCHAPTableIndex.setDescription('The index into the PPP CHAP association table.')
ipadPPPCHAPTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCHAPTableUsername.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCHAPTableUsername.setDescription('Identification string to identify the user.')
ipadPPPCHAPTableSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCHAPTableSecret.setStatus('current')
if mibBuilder.loadTexts: ipadPPPCHAPTableSecret.setDescription('Password string to validate the user identity.')
ipadModemDialTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1), )
if mibBuilder.loadTexts: ipadModemDialTable.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialTable.setDescription('Table of modem dialing parameters.')
ipadModemDialTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadModemDialTableIndex"))
if mibBuilder.loadTexts: ipadModemDialTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialTableEntry.setDescription('An entry in the ipad modem dialing parameters table.')
ipadModemDialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDialTableIndex.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialTableIndex.setDescription('The index into the ipad modem dialing parameters table. Equivalent to MIB-II ifIndex.')
ipadModemDialDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialDataIndex.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialDataIndex.setDescription('An index into the Modem Data Table, which selects a modem.')
ipadModemDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialNumber.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialNumber.setDescription('Specifies the telephone number to dial.')
ipadModemDialAbortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialAbortTimer.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialAbortTimer.setDescription('Aborts a connection attempt if a dial-up connection has failed to connect within the specified number of seconds. Range is 1..255.')
ipadModemDialRedialAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialRedialAttempts.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialRedialAttempts.setDescription('Determines how many attempts to initiate a dial-up connection after the initial failure. Range is 0..10.')
ipadModemDialDelayBeforeRedial = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialDelayBeforeRedial.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialDelayBeforeRedial.setDescription('Specifies the number of seconds to wait before redialing. Range is 1..255.')
ipadModemDialLoginScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialLoginScript.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialLoginScript.setDescription('Script string interpreted after an originated dial-up connection is first established.')
ipadModemDialUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialUsername.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialUsername.setDescription('Identification string to determine the user identity.')
ipadModemDialPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialPassword.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialPassword.setDescription('Password string to validate the user identity.')
ipadModemDialChallengeScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialChallengeScript.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialChallengeScript.setDescription('Script string interpreted after an answered dial-up connection is first established.')
ipadModemDialAnswerRings = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialAnswerRings.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialAnswerRings.setDescription('Answers an incoming call on the given number of rings. A value of zero disables answering. Range is 0..255.')
ipadModemDialCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("setupNow", 2), ("dialNow", 3), ("answerNow", 4), ("disconnectNow", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCommand.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialCommand.setDescription('The set values perform the following actions: setupNow - Execute the modem setup scripts dialNow - Initiate dialing procedures answerNow - Initiate answering procedures disconnectNow - Initiate disconnect procedures')
ipadModemDialStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("idle", 3), ("dialing", 4), ("answering", 5), ("negotiating", 6), ("online", 7), ("disconnecting", 8), ("error", 9), ("setup", 10), ("awaitingCallback", 11), ("dialWait", 12), ("ringing", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDialStatus.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialStatus.setDescription('This object reports the current activity of the modem control feature disabled - The feature is not enabled setup - The feature is configuring the modem error - The feature could not setup the modem idle - The feature is ready to operate dialing - The feature is placing a call dialWait - The feature is between call attempts ringing - The feature is waiting for an incoming call to connect or go away answering - The feature is answering a call negotiating - The feature is negotiating the login security online - The feature data path is connected disconnecting - The feature is disconnecting a call awaitingCallback - The feature is waiting for a security callback')
ipadModemDialSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("password", 3), ("callback", 4), ("callbackVerify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialSecurity.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialSecurity.setDescription('disable - Dial-up security not enabled password - Challenge/Login password scripts used callback - Password security followed by answerer calling back callbackVerify - Callback and verify using the callback challenge/response scripts')
ipadModemDialCallbackRedialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCallbackRedialDelay.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialCallbackRedialDelay.setDescription('Specifies the number of seconds to wait before redialing. Range is 1..255.')
ipadModemDialCallbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCallbackTimeout.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialCallbackTimeout.setDescription('This object sets the number of seconds to wait for a security callback before failing the connection attempt.')
ipadModemDialCallbackChalScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCallbackChalScript.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialCallbackChalScript.setDescription('Callback security challenge script interpreted after originating a callback dial-up connection.')
ipadModemDialCallbackRspScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialCallbackRspScript.setStatus('current')
if mibBuilder.loadTexts: ipadModemDialCallbackRspScript.setDescription('Callback security challenge response script interpreted after answering a callback dial-up connection.')
ipadModemDataTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2), )
if mibBuilder.loadTexts: ipadModemDataTable.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataTable.setDescription('Table of modem database parameters.')
ipadModemDataTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadModemDataTableIndex"))
if mibBuilder.loadTexts: ipadModemDataTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataTableEntry.setDescription('An entry in the ipad modem database parameters table.')
ipadModemDataTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDataTableIndex.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataTableIndex.setDescription('The index into the ipad modem database parameters table.')
ipadModemDataModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataModemName.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataModemName.setDescription('Identification string for the modem database.')
ipadModemDataSetupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataSetupScript.setDescription('First script interpreted when a modem port is initialized.')
ipadModemDataDialingScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataDialingScript.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataDialingScript.setDescription('Script interpreted when a dial-up connection is initiated.')
ipadModemDataAnswerScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataAnswerScript.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataAnswerScript.setDescription('Script interpreted when a modem port decides to answer an incoming call.')
ipadModemDataHangupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataHangupScript.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataHangupScript.setDescription('Script interpreted when a dial-up connection is no longer needed.')
ipadModemDataSyncScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSyncScript.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataSyncScript.setDescription('Script interpreted to configure the modem to pass synchronous data.')
ipadModemDataSyncMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("sync", 3), ("v80", 4), ("rfc1662", 5), ("v80crc", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSyncMethod.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataSyncMethod.setDescription('This object specifies how synchronous user data is passed to the modem. none - The modem does not support synchronous user data. sync - The modem directly supports synchronous user data. v80 - Synchronous user data is exchanged using ITU-T V.80 procedures without CRC. v80crc - Synchronous user data is exchanged using ITU-T V.80 procedures with CRC. rfc1662 - Synchronous user data is exchanged using the method described by RFC1662.')
ipadModemDataSetupScript2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript2.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataSetupScript2.setDescription('Second script interpreted when a modem port is initialized.')
ipadModemDataSetupScript3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript3.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataSetupScript3.setDescription('Third script interpreted when a modem port is initialized.')
ipadModemDataSetupScript4 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript4.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataSetupScript4.setDescription('Fourth script interpreted when a modem port is initialized.')
ipadModemDataSetupScript5 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript5.setStatus('current')
if mibBuilder.loadTexts: ipadModemDataSetupScript5.setDescription('Fifth script interpreted when a modem port is initialized.')
ipadDbuTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3), )
if mibBuilder.loadTexts: ipadDbuTable.setStatus('current')
if mibBuilder.loadTexts: ipadDbuTable.setDescription('The Dial Backup configuration table.')
ipadDbuTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDbuIndex"))
if mibBuilder.loadTexts: ipadDbuTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadDbuTableEntry.setDescription('An entry in the Dial Backup configuration table.')
ipadDbuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDbuIndex.setStatus('current')
if mibBuilder.loadTexts: ipadDbuIndex.setDescription('An index into the Dial Backup configuration table. Equivalent to MIB-II ifIndex.')
ipadDbuOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("automatic", 3), ("automaticDaily", 4), ("forceBackup", 5), ("testOriginate", 6), ("testAnswer", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuOperation.setStatus('current')
if mibBuilder.loadTexts: ipadDbuOperation.setDescription('This object specifes the basic operation of the Dial Backup feature. disable - Dial Backup is not to operate automatic - Dial Backup will start and end automatically automaticDaily - Dial Backup will operate automatically within the specified times in the Daily Dial Backup Table forceBackup - The unit will operate in backup mode unconditionally testOriginate - The unit will start backup procedures and hold the dial-up connection testAnswer - The unit will await a call, establish, and hold the dial-up connection')
ipadDbuMonitoredifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuMonitoredifIndex.setStatus('current')
if mibBuilder.loadTexts: ipadDbuMonitoredifIndex.setDescription('Network MIB-II ifIndex monitored by Dial Backup.')
ipadDbuActivator1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("any", 3), ("carrier", 4), ("es", 5), ("ses", 6), ("uas", 7), ("los", 8), ("cs", 9), ("bpv", 10), ("oof", 11), ("ais", 12), ("ras", 13), ("oos", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuActivator1.setStatus('current')
if mibBuilder.loadTexts: ipadDbuActivator1.setDescription('This object specifies what will trigger a dial backup activation. disable - No alarm will trigger any - Trigger on any active alarm listed here carrier - Trigger on LOS, OOF, or OOS alarms es - Trigger on the Errored Seconds alarm ses - Trigger on the Severely Errored Seconds alarm uas - Trigger on the Unavailable Seconds alarm los - Trigger on the Loss Of Signal alarm cs - Trigger on the Controlled Slip alarm bpv - Trigger on the Bipolar Violation alarm oof - Trigger on the Out Of Frame alarm ais - Trigger on the Alarm Indication Signal alarm ras - Trigger on the Remote Alarm Signal alarm oos - Trigger on the Out Of Service alarm')
ipadDbuActivator2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("any", 3), ("carrier", 4), ("es", 5), ("ses", 6), ("uas", 7), ("los", 8), ("cs", 9), ("bpv", 10), ("oof", 11), ("ais", 12), ("ras", 13), ("oos", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuActivator2.setStatus('current')
if mibBuilder.loadTexts: ipadDbuActivator2.setDescription('This object specifies what will trigger a dial backup activation. disable - No alarm will trigger any - Trigger on any active alarm listed here carrier - Trigger on LOS, OOF, or OOS alarms es - Trigger on the Errored Seconds alarm ses - Trigger on the Severely Errored Seconds alarm uas - Trigger on the Unavailable Seconds alarm los - Trigger on the Loss Of Signal alarm cs - Trigger on the Controlled Slip alarm bpv - Trigger on the Bipolar Violation alarm oof - Trigger on the Out Of Frame alarm ais - Trigger on the Alarm Indication Signal alarm ras - Trigger on the Remote Alarm Signal alarm oos - Trigger on the Out Of Service alarm')
ipadDbuRevertDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuRevertDelay.setStatus('current')
if mibBuilder.loadTexts: ipadDbuRevertDelay.setDescription('This object specifies the number of seconds the dial backup activators must be continuously gone before the normal connection is restored.')
ipadDbuTrapDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuTrapDelay.setStatus('current')
if mibBuilder.loadTexts: ipadDbuTrapDelay.setDescription('This object specifies the number of seconds after entering the active state before sending the Dial Backup trap.')
ipadDbuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("standby", 3), ("disallowed", 4), ("dialing", 5), ("answering", 6), ("negotiating", 7), ("awaitingCallback", 8), ("active", 9), ("disconnecting", 10), ("testWaiting", 11), ("testPassed", 12), ("testFailed", 13), ("error", 14), ("setup", 15), ("dialWait", 16), ("ringing", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDbuStatus.setStatus('current')
if mibBuilder.loadTexts: ipadDbuStatus.setDescription('This object reports the current activity of the Dial Backup feature disabled - The feature is not enabled setup - The feature is configuring the modem error - The feature could not setup the modem standby - The feature is ready to operate disallowed - The Dial Backup Daily table prevents activation dialing - The feature is placing a call dialWait - The feature is between call attempts ringing - The feature is waiting for an incoming call to connect or go away answering - The feature is answering a call negotiating - The feature is negotiating the login security awaitingCallback - The feature is waiting for a security callback active - The feature backup path is connected disconnecting - The feature is disconnecting a call testWaiting - The feature is waiting for a link test call testPassed - The feature has successfully tested the backup link testFailed - The feature could not establish the backup link')
ipadDbuTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuTrap.setStatus('current')
if mibBuilder.loadTexts: ipadDbuTrap.setDescription('Enable or disable the Dial Backup trap.')
ipadDbuDailyTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4), )
if mibBuilder.loadTexts: ipadDbuDailyTable.setStatus('current')
if mibBuilder.loadTexts: ipadDbuDailyTable.setDescription('The Daily Dial Backup Times Table.')
ipadDbuDailyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDbuDailyIndex"), (0, "IPADv2-MIB", "ipadDbuDailyDayOfWeek"))
if mibBuilder.loadTexts: ipadDbuDailyTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadDbuDailyTableEntry.setDescription('An entry in the Daily Dial Backup Times Table.')
ipadDbuDailyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDbuDailyIndex.setStatus('current')
if mibBuilder.loadTexts: ipadDbuDailyIndex.setDescription('An index into the Daily Dial Backup Times Table. Equivalent to MIB-II ifIndex.')
ipadDbuDailyDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDbuDailyDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: ipadDbuDailyDayOfWeek.setDescription('This is the day of the week index into the Daily Dial Backup Times Table.')
ipadDbuDailyStart = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("hour00", 1), ("hour01", 2), ("hour02", 3), ("hour03", 4), ("hour04", 5), ("hour05", 6), ("hour06", 7), ("hour07", 8), ("hour08", 9), ("hour09", 10), ("hour10", 11), ("hour11", 12), ("hour12", 13), ("hour13", 14), ("hour14", 15), ("hour15", 16), ("hour16", 17), ("hour17", 18), ("hour18", 19), ("hour19", 20), ("hour20", 21), ("hour21", 22), ("hour22", 23), ("hour23", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuDailyStart.setStatus('current')
if mibBuilder.loadTexts: ipadDbuDailyStart.setDescription('This object is the beginning of a window for Dial Backup activation.')
ipadDbuDailyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("disable", 1), ("hour01", 2), ("hour02", 3), ("hour03", 4), ("hour04", 5), ("hour05", 6), ("hour06", 7), ("hour07", 8), ("hour08", 9), ("hour09", 10), ("hour10", 11), ("hour11", 12), ("hour12", 13), ("hour13", 14), ("hour14", 15), ("hour15", 16), ("hour16", 17), ("hour17", 18), ("hour18", 19), ("hour19", 20), ("hour20", 21), ("hour21", 22), ("hour22", 23), ("hour23", 24), ("hour24", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDbuDailyLength.setStatus('current')
if mibBuilder.loadTexts: ipadDbuDailyLength.setDescription('This object is the size of a window for Dial Backup activation.')
ipadFrPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1), )
if mibBuilder.loadTexts: ipadFrPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTable.setDescription('Port statistics.')
ipadFrPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadFrPortStatsService"), (0, "IPADv2-MIB", "ipadFrPortStatsPeriod"))
if mibBuilder.loadTexts: ipadFrPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsEntry.setDescription('An entry in the service aware ports statistics table.')
ipadFrPortStatsService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsService.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsService.setDescription('Port index in the ipadFrPortStats table; an entry in the ipad service table.')
ipadFrPortStatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("portStatsSummary", 1), ("portStatsCurrent", 2), ("portStatsperiod1", 3), ("portStatsperiod2", 4), ("portStatsperiod3", 5), ("portStatsperiod4", 6), ("portStatsperiod5", 7), ("portStatsperiod6", 8), ("portStatsperiod7", 9), ("portStatsperiod8", 10), ("portStatsperiod9", 11), ("portStatsperiod10", 12), ("portStatsperiod11", 13), ("portStatsperiod12", 14), ("portStatsperiod13", 15), ("portStatsperiod14", 16), ("portStatsperiod15", 17), ("portStatsperiod16", 18), ("portStatsperiod17", 19), ("portStatsperiod18", 20), ("portStatsperiod19", 21), ("portStatsperiod20", 22), ("portStatsperiod21", 23), ("portStatsperiod22", 24), ("portStatsperiod23", 25), ("portStatsperiod24", 26), ("portStatsperiod25", 27), ("portStatsperiod26", 28), ("portStatsperiod27", 29), ("portStatsperiod28", 30), ("portStatsperiod29", 31), ("portStatsperiod30", 32), ("portStatsperiod31", 33), ("portStatsperiod32", 34), ("portStatsperiod33", 35), ("portStatsperiod34", 36), ("portStatsperiod35", 37), ("portStatsperiod36", 38), ("portStatsperiod37", 39), ("portStatsperiod38", 40), ("portStatsperiod39", 41), ("portStatsperiod40", 42), ("portStatsperiod41", 43), ("portStatsperiod42", 44), ("portStatsperiod43", 45), ("portStatsperiod44", 46), ("portStatsperiod45", 47), ("portStatsperiod46", 48), ("portStatsperiod47", 49), ("portStatsperiod48", 50), ("portStatsperiod49", 51), ("portStatsperiod50", 52), ("portStatsperiod51", 53), ("portStatsperiod52", 54), ("portStatsperiod53", 55), ("portStatsperiod54", 56), ("portStatsperiod55", 57), ("portStatsperiod56", 58), ("portStatsperiod57", 59), ("portStatsperiod58", 60), ("portStatsperiod59", 61), ("portStatsperiod60", 62), ("portStatsperiod61", 63), ("portStatsperiod62", 64), ("portStatsperiod63", 65), ("portStatsperiod64", 66), ("portStatsperiod65", 67), ("portStatsperiod66", 68), ("portStatsperiod67", 69), ("portStatsperiod68", 70), ("portStatsperiod69", 71), ("portStatsperiod70", 72), ("portStatsperiod71", 73), ("portStatsperiod72", 74), ("portStatsperiod73", 75), ("portStatsperiod74", 76), ("portStatsperiod75", 77), ("portStatsperiod76", 78), ("portStatsperiod77", 79), ("portStatsperiod78", 80), ("portStatsperiod79", 81), ("portStatsperiod80", 82), ("portStatsperiod81", 83), ("portStatsperiod82", 84), ("portStatsperiod83", 85), ("portStatsperiod84", 86), ("portStatsperiod85", 87), ("portStatsperiod86", 88), ("portStatsperiod87", 89), ("portStatsperiod88", 90), ("portStatsperiod89", 91), ("portStatsperiod90", 92), ("portStatsperiod91", 93), ("portStatsperiod92", 94), ("portStatsperiod93", 95), ("portStatsperiod94", 96), ("portStatsperiod95", 97), ("portStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsPeriod.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsPeriod.setDescription('The index into the port stats 24-hour table.')
ipadFrPortStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxFrames.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTxFrames.setDescription('Number of transmitted frames for the period.')
ipadFrPortStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxFrames.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxFrames.setDescription('Number of received frames for the period.')
ipadFrPortStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxOctets.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTxOctets.setDescription('Number of transmitted octets for the period.')
ipadFrPortStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxOctets.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxOctets.setDescription('Number of received octets for the period.')
ipadFrPortStatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtFrames.setDescription('Number of transmitted management frames for the period.')
ipadFrPortStatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtFrames.setDescription('Number of received management frames for the period.')
ipadFrPortStatsTxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtOctets.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtOctets.setDescription('Number of transmitted management octets for the period.')
ipadFrPortStatsRxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtOctets.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtOctets.setDescription('Number of received management octets for the period.')
ipadFrPortStatsRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxFECN.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxFECN.setDescription('Number of received frames with FECN set for the period.')
ipadFrPortStatsRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxBECN.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxBECN.setDescription('Number of received frames with BECN set for the period.')
ipadFrPortStatsRxInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInvalid.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxInvalid.setDescription('Number of invalid received frames for the period.')
ipadFrPortStatsTxStatInq = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxStatInq.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTxStatInq.setDescription('Number of transmitted status inquiry frames for the period.')
ipadFrPortStatsRxStatInq = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxStatInq.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxStatInq.setDescription('Number of received status inquiry frames for the period.')
ipadFrPortStatsTxStatResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxStatResp.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTxStatResp.setDescription('Number of transmitted status response frames for the period.')
ipadFrPortStatsRxStatResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxStatResp.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxStatResp.setDescription('Number of received status response frames for the period.')
ipadFrPortStatsRxInvLMI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInvLMI.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxInvLMI.setDescription('Number of received frames with an invalid LMI for the period.')
ipadFrPortStatsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsPeak.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsPeak.setDescription('Peak throughput rate for the period (in bits/second).')
ipadFrPortStatsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsAverage.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsAverage.setDescription('Average throughput rate for the period (in bits/second).')
ipadFrPortStatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTimeStamp.setDescription('The value of sysUpTime the last time the statistics were updated.')
ipadFrPortStatsTxAvgPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxAvgPercent.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTxAvgPercent.setDescription('Average Tx throughput percent for the period.')
ipadFrPortStatsTxMaxPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMaxPercent.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTxMaxPercent.setDescription('Maximum Tx throughput percent for the period.')
ipadFrPortStatsTxInstantPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxInstantPercent.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTxInstantPercent.setDescription('Instantaneous Tx throughput percent for the period.')
ipadFrPortStatsTx20PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx20PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTx20PercentSec.setDescription('Number of seconds Tx throughput was 0-20% of bandwidth.')
ipadFrPortStatsTx40PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx40PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTx40PercentSec.setDescription('Number of seconds Tx throughput was 21-40% of bandwidth.')
ipadFrPortStatsTx60PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx60PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTx60PercentSec.setDescription('Number of seconds Tx throughput was 41-60% of bandwidth.')
ipadFrPortStatsTx80PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx80PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTx80PercentSec.setDescription('Number of seconds Tx throughput was 61-80% of bandwidth.')
ipadFrPortStatsTx100PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTx100PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsTx100PercentSec.setDescription('Number of seconds Tx throughput was 81-100% of bandwidth.')
ipadFrPortStatsRxAvgPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxAvgPercent.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxAvgPercent.setDescription('Average Rx throughput percent for the period.')
ipadFrPortStatsRxMaxPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMaxPercent.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxMaxPercent.setDescription('Maximum Rx throughput percent for the period.')
ipadFrPortStatsRxInstantPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInstantPercent.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRxInstantPercent.setDescription('Instantaneous Rx throughput percent for the period.')
ipadFrPortStatsRx20PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx20PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRx20PercentSec.setDescription('Number of seconds Rx throughput was 0-20% of bandwidth.')
ipadFrPortStatsRx40PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx40PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRx40PercentSec.setDescription('Number of seconds Rx throughput was 21-40% of bandwidth.')
ipadFrPortStatsRx60PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx60PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRx60PercentSec.setDescription('Number of seconds Rx throughput was 41-60% of bandwidth.')
ipadFrPortStatsRx80PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx80PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRx80PercentSec.setDescription('Number of seconds Rx throughput was 61-80% of bandwidth.')
ipadFrPortStatsRx100PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRx100PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsRx100PercentSec.setDescription('Number of seconds Rx throughput was 81-100% of bandwidth.')
ipadFrPortStatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsValidIntervals.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortStatsValidIntervals.setDescription('Number of valid intervals in the table excluding the Summary and Current entries.')
ipadDLCIstatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2), )
if mibBuilder.loadTexts: ipadDLCIstatsTable.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsTable.setDescription('Port statistics.')
ipadDLCIstatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDLCIstatsService"), (0, "IPADv2-MIB", "ipadDLCIstatsDLCI"), (0, "IPADv2-MIB", "ipadDLCIstatsPeriod"))
if mibBuilder.loadTexts: ipadDLCIstatsEntry.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsEntry.setDescription('An entry in the service aware DLCI statistics table.')
ipadDLCIstatsService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsService.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsService.setDescription('The service index for the service aware stats table; identifies an entry in the ipad DLCI table when combined with ipadDLCIstatsDLCI.')
ipadDLCIstatsDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDLCI.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsDLCI.setDescription('The DLCI index for the service aware stats table; identifies an entry in the ipad DLCI table when combined with ipadDLCIstatsService.')
ipadDLCIstatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("dlciStatsSummary", 1), ("dlciStatsCurrent", 2), ("dlciStatsperiod1", 3), ("dlciStatsperiod2", 4), ("dlciStatsperiod3", 5), ("dlciStatsperiod4", 6), ("dlciStatsperiod5", 7), ("dlciStatsperiod6", 8), ("dlciStatsperiod7", 9), ("dlciStatsperiod8", 10), ("dlciStatsperiod9", 11), ("dlciStatsperiod10", 12), ("dlciStatsperiod11", 13), ("dlciStatsperiod12", 14), ("dlciStatsperiod13", 15), ("dlciStatsperiod14", 16), ("dlciStatsperiod15", 17), ("dlciStatsperiod16", 18), ("dlciStatsperiod17", 19), ("dlciStatsperiod18", 20), ("dlciStatsperiod19", 21), ("dlciStatsperiod20", 22), ("dlciStatsperiod21", 23), ("dlciStatsperiod22", 24), ("dlciStatsperiod23", 25), ("dlciStatsperiod24", 26), ("dlciStatsperiod25", 27), ("dlciStatsperiod26", 28), ("dlciStatsperiod27", 29), ("dlciStatsperiod28", 30), ("dlciStatsperiod29", 31), ("dlciStatsperiod30", 32), ("dlciStatsperiod31", 33), ("dlciStatsperiod32", 34), ("dlciStatsperiod33", 35), ("dlciStatsperiod34", 36), ("dlciStatsperiod35", 37), ("dlciStatsperiod36", 38), ("dlciStatsperiod37", 39), ("dlciStatsperiod38", 40), ("dlciStatsperiod39", 41), ("dlciStatsperiod40", 42), ("dlciStatsperiod41", 43), ("dlciStatsperiod42", 44), ("dlciStatsperiod43", 45), ("dlciStatsperiod44", 46), ("dlciStatsperiod45", 47), ("dlciStatsperiod46", 48), ("dlciStatsperiod47", 49), ("dlciStatsperiod48", 50), ("dlciStatsperiod49", 51), ("dlciStatsperiod50", 52), ("dlciStatsperiod51", 53), ("dlciStatsperiod52", 54), ("dlciStatsperiod53", 55), ("dlciStatsperiod54", 56), ("dlciStatsperiod55", 57), ("dlciStatsperiod56", 58), ("dlciStatsperiod57", 59), ("dlciStatsperiod58", 60), ("dlciStatsperiod59", 61), ("dlciStatsperiod60", 62), ("dlciStatsperiod61", 63), ("dlciStatsperiod62", 64), ("dlciStatsperiod63", 65), ("dlciStatsperiod64", 66), ("dlciStatsperiod65", 67), ("dlciStatsperiod66", 68), ("dlciStatsperiod67", 69), ("dlciStatsperiod68", 70), ("dlciStatsperiod69", 71), ("dlciStatsperiod70", 72), ("dlciStatsperiod71", 73), ("dlciStatsperiod72", 74), ("dlciStatsperiod73", 75), ("dlciStatsperiod74", 76), ("dlciStatsperiod75", 77), ("dlciStatsperiod76", 78), ("dlciStatsperiod77", 79), ("dlciStatsperiod78", 80), ("dlciStatsperiod79", 81), ("dlciStatsperiod80", 82), ("dlciStatsperiod81", 83), ("dlciStatsperiod82", 84), ("dlciStatsperiod83", 85), ("dlciStatsperiod84", 86), ("dlciStatsperiod85", 87), ("dlciStatsperiod86", 88), ("dlciStatsperiod87", 89), ("dlciStatsperiod88", 90), ("dlciStatsperiod89", 91), ("dlciStatsperiod90", 92), ("dlciStatsperiod91", 93), ("dlciStatsperiod92", 94), ("dlciStatsperiod93", 95), ("dlciStatsperiod94", 96), ("dlciStatsperiod95", 97), ("dlciStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsPeriod.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsPeriod.setDescription('The index into the DLCI stats 24-hour table.')
ipadDLCIstatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxFrames.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsTxFrames.setDescription('The number of transmitted frames for the period.')
ipadDLCIstatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxFrames.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRxFrames.setDescription('The number of received frames for the period.')
ipadDLCIstatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxOctets.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsTxOctets.setDescription('The number of transmitted octets for the period.')
ipadDLCIstatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxOctets.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRxOctets.setDescription('The number of received octets for the period.')
ipadDLCIstatsRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxFECN.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRxFECN.setDescription('The number of received frames with FECN set for the period.')
ipadDLCIstatsRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxBECN.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRxBECN.setDescription('The number of received frames with BECN set for the period.')
ipadDLCIstatsRxDE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxDE.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRxDE.setDescription('The number of received frames with DE bit set for the period.')
ipadDLCIstatsTxExcessCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessCIR.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessCIR.setDescription('The number of transmitted octets in excess of CIR for the period.')
ipadDLCIstatsTxExcessBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessBe.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessBe.setDescription('The number of transmitted octets in excess of Be for the period.')
ipadDLCIstatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtFrames.setDescription('The number of transmitted management frames for the period.')
ipadDLCIstatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtFrames.setDescription('The number of received management frames for the period.')
ipadDLCIstatsTxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtOctets.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtOctets.setDescription('The number of transmitted management octets for the period.')
ipadDLCIstatsRxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtOctets.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtOctets.setDescription('The number of received management octets for the period.')
ipadDLCIstatsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsPeak.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsPeak.setDescription('Peak throughput rate for the period (in bits/second).')
ipadDLCIstatsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsAverage.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsAverage.setDescription('Average throughput rate for the period (in bits/second).')
ipadDLCIstatsDelayPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDelayPeak.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsDelayPeak.setDescription('Peak roundtrip delay for the period.')
ipadDLCIstatsDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDelayAverage.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsDelayAverage.setDescription('Average roundtrip delay for the period.')
ipadDLCIstatsRoundTripTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRoundTripTimeouts.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRoundTripTimeouts.setDescription('Number of timeouts on roundtrip delay for the period.')
ipadDLCIstatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsUAS.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsUAS.setDescription('Number of seconds the DLCI is unavailable.')
ipadDLCIstatsFdrCir = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFdrCir.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsFdrCir.setDescription('')
ipadDLCIstatsDdrCir = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDdrCir.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsDdrCir.setDescription('')
ipadDLCIstatsFdrBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFdrBe.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsFdrBe.setDescription('')
ipadDLCIstatsDdrBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDdrBe.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsDdrBe.setDescription('')
ipadDLCIstatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsTimeStamp.setDescription('The value of sysUpTime the last time the statistics were updated.')
ipadDLCIstatsRemoteFramesOfferedWithinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRemoteFramesOfferedWithinCIR.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRemoteFramesOfferedWithinCIR.setDescription('Count of frames sent within CIR from the remote end of the DLCI.')
ipadDLCIstatsRemoteFramesOfferedWithinBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRemoteFramesOfferedWithinBE.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRemoteFramesOfferedWithinBE.setDescription('Count of frames sent within BE, but over CIR, from the remote end of the DLCI.')
ipadDLCIstatsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsFramesReceived.setDescription('Count of frames received by the local device on this DLCI.')
ipadDLCIstatsFDRCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFDRCIR.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsFDRCIR.setDescription('Frame Delivery Ratio calculated within CIR.')
ipadDLCIstatsFDRBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsFDRBE.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsFDRBE.setDescription('Frame Delivery Ratio caclulated within BE.')
ipadDLCIstatsRemoteDataOfferedWithinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRemoteDataOfferedWithinCIR.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRemoteDataOfferedWithinCIR.setDescription('Count of data octets sent within CIR from the remote end of the DLCI.')
ipadDLCIstatsRemoteDataOfferedWithinBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRemoteDataOfferedWithinBE.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsRemoteDataOfferedWithinBE.setDescription('Count of data octets sent within BE, but over CIR, from the remote end of the DLCI.')
ipadDLCIstatsDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDataReceived.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsDataReceived.setDescription('Count of data octets received by the local device on this DLCI.')
ipadDLCIstatsDDRCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDDRCIR.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsDDRCIR.setDescription('Data Delivery Ratio calculated within CIR.')
ipadDLCIstatsDDRBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDDRBE.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsDDRBE.setDescription('Data Delivery Ratio caclulated within BE.')
ipadDLCIstatsAvgPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsAvgPercent.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsAvgPercent.setDescription('Average throughput percent for the period.')
ipadDLCIstatsMaxPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsMaxPercent.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsMaxPercent.setDescription('Maximum throughput percent for the period.')
ipadDLCIstatsInstantPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsInstantPercent.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsInstantPercent.setDescription('Instantaneous throughput percent for the period.')
ipadDLCIstats20PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats20PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstats20PercentSec.setDescription('Number of seconds throughput was 0-20% of bandwidth.')
ipadDLCIstats40PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats40PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstats40PercentSec.setDescription('Number of seconds throughput was 21-40% of bandwidth.')
ipadDLCIstats60PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats60PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstats60PercentSec.setDescription('Number of seconds throughput was 41-60% of bandwidth.')
ipadDLCIstats80PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats80PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstats80PercentSec.setDescription('Number of seconds throughput was 61-80% of bandwidth.')
ipadDLCIstats100PercentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstats100PercentSec.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstats100PercentSec.setDescription('Number of seconds throughput was 81-100% of bandwidth.')
ipadDLCIstatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsValidIntervals.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsValidIntervals.setDescription('Number of valid intervals in the table excluding the Summary and Current entries.')
ipadDLCIstatsCompressionTxOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionTxOctetsIn.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsCompressionTxOctetsIn.setDescription('Number of octets passed into the compression engine.')
ipadDLCIstatsCompressionTxOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionTxOctetsOut.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsCompressionTxOctetsOut.setDescription('Number of octets passed out of the compression engine.')
ipadDLCIstatsCompressionRxOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionRxOctetsIn.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsCompressionRxOctetsIn.setDescription('Number of octets passed into the compression engine.')
ipadDLCIstatsCompressionRxOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionRxOctetsOut.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsCompressionRxOctetsOut.setDescription('Number of octets passed out of the compression engine.')
ipadDLCIstatsCompressionTxRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionTxRatio.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsCompressionTxRatio.setDescription('Compression Ratio calculated in the transmit direction.')
ipadDLCIstatsCompressionRxRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsCompressionRxRatio.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIstatsCompressionRxRatio.setDescription('Compression Ratio calculation in the receive direction.')
ipadUserStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3), )
if mibBuilder.loadTexts: ipadUserStatsTable.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsTable.setDescription('User-selected protocol statistics.')
ipadUserStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadUserStatsIndex"), (0, "IPADv2-MIB", "ipadUserStatsPeriod"))
if mibBuilder.loadTexts: ipadUserStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsEntry.setDescription('An entry in the user statistics table.')
ipadUserStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsIndex.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsIndex.setDescription('Index into the user statistics table.')
ipadUserStatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("userStatsSummary", 1), ("userStatsCurrent", 2), ("userStatsperiod1", 3), ("userStatsperiod2", 4), ("userStatsperiod3", 5), ("userStatsperiod4", 6), ("userStatsperiod5", 7), ("userStatsperiod6", 8), ("userStatsperiod7", 9), ("userStatsperiod8", 10), ("userStatsperiod9", 11), ("userStatsperiod10", 12), ("userStatsperiod11", 13), ("userStatsperiod12", 14), ("userStatsperiod13", 15), ("userStatsperiod14", 16), ("userStatsperiod15", 17), ("userStatsperiod16", 18), ("userStatsperiod17", 19), ("userStatsperiod18", 20), ("userStatsperiod19", 21), ("userStatsperiod20", 22), ("userStatsperiod21", 23), ("userStatsperiod22", 24), ("userStatsperiod23", 25), ("userStatsperiod24", 26), ("userStatsperiod25", 27), ("userStatsperiod26", 28), ("userStatsperiod27", 29), ("userStatsperiod28", 30), ("userStatsperiod29", 31), ("userStatsperiod30", 32), ("userStatsperiod31", 33), ("userStatsperiod32", 34), ("userStatsperiod33", 35), ("userStatsperiod34", 36), ("userStatsperiod35", 37), ("userStatsperiod36", 38), ("userStatsperiod37", 39), ("userStatsperiod38", 40), ("userStatsperiod39", 41), ("userStatsperiod40", 42), ("userStatsperiod41", 43), ("userStatsperiod42", 44), ("userStatsperiod43", 45), ("userStatsperiod44", 46), ("userStatsperiod45", 47), ("userStatsperiod46", 48), ("userStatsperiod47", 49), ("userStatsperiod48", 50), ("userStatsperiod49", 51), ("userStatsperiod50", 52), ("userStatsperiod51", 53), ("userStatsperiod52", 54), ("userStatsperiod53", 55), ("userStatsperiod54", 56), ("userStatsperiod55", 57), ("userStatsperiod56", 58), ("userStatsperiod57", 59), ("userStatsperiod58", 60), ("userStatsperiod59", 61), ("userStatsperiod60", 62), ("userStatsperiod61", 63), ("userStatsperiod62", 64), ("userStatsperiod63", 65), ("userStatsperiod64", 66), ("userStatsperiod65", 67), ("userStatsperiod66", 68), ("userStatsperiod67", 69), ("userStatsperiod68", 70), ("userStatsperiod69", 71), ("userStatsperiod70", 72), ("userStatsperiod71", 73), ("userStatsperiod72", 74), ("userStatsperiod73", 75), ("userStatsperiod74", 76), ("userStatsperiod75", 77), ("userStatsperiod76", 78), ("userStatsperiod77", 79), ("userStatsperiod78", 80), ("userStatsperiod79", 81), ("userStatsperiod80", 82), ("userStatsperiod81", 83), ("userStatsperiod82", 84), ("userStatsperiod83", 85), ("userStatsperiod84", 86), ("userStatsperiod85", 87), ("userStatsperiod86", 88), ("userStatsperiod87", 89), ("userStatsperiod88", 90), ("userStatsperiod89", 91), ("userStatsperiod90", 92), ("userStatsperiod91", 93), ("userStatsperiod92", 94), ("userStatsperiod93", 95), ("userStatsperiod94", 96), ("userStatsperiod95", 97), ("userStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsPeriod.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsPeriod.setDescription('The index into the user stats 24-hour table.')
ipadUserStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxFrames.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsTxFrames.setDescription('Number of transmitted frames for the period.')
ipadUserStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsRxFrames.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsRxFrames.setDescription('Number of received frames for the period.')
ipadUserStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxOctets.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsTxOctets.setDescription('Number of transmitted octets for the period.')
ipadUserStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsRxOctets.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsRxOctets.setDescription('Number of received octets for the period.')
ipadUserStatsTxRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxRatePeak.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsTxRatePeak.setDescription('Peak throughput rate for the period (in bits/second).')
ipadUserStatsTxRateAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxRateAverage.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsTxRateAverage.setDescription('Average throughput rate for the period (in bits/second).')
ipadUserStatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ipadUserStatsTimeStamp.setDescription('The value of sysUpTime the last time the statistics were updated.')
ipadIPTopNStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4), )
if mibBuilder.loadTexts: ipadIPTopNStatsTable.setStatus('current')
if mibBuilder.loadTexts: ipadIPTopNStatsTable.setDescription('IP TopN statistics.')
ipadIPTopNStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadIPTopNStatsIndex"))
if mibBuilder.loadTexts: ipadIPTopNStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ipadIPTopNStatsEntry.setDescription('An entry in the user statistics table.')
ipadIPTopNStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsIndex.setStatus('current')
if mibBuilder.loadTexts: ipadIPTopNStatsIndex.setDescription('Index into the IP TopN statistics table.')
ipadIPTopNStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsAddress.setStatus('current')
if mibBuilder.loadTexts: ipadIPTopNStatsAddress.setDescription('IP address of this entry.')
ipadIPTopNStatsTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTimestamp.setStatus('current')
if mibBuilder.loadTexts: ipadIPTopNStatsTimestamp.setDescription('Time of last IP frame for this entry.')
ipadIPTopNStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsRxFrames.setStatus('current')
if mibBuilder.loadTexts: ipadIPTopNStatsRxFrames.setDescription('Number of received IP frames for this entry.')
ipadIPTopNStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsRxOctets.setStatus('current')
if mibBuilder.loadTexts: ipadIPTopNStatsRxOctets.setDescription('Number of received IP octets for this entry.')
ipadIPTopNStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTxFrames.setStatus('current')
if mibBuilder.loadTexts: ipadIPTopNStatsTxFrames.setDescription('Number of transmitted IP frames for this entry.')
ipadIPTopNStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTxOctets.setStatus('current')
if mibBuilder.loadTexts: ipadIPTopNStatsTxOctets.setDescription('Number of transmitted IP octets for this entry.')
ipadPktSwOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("other", 1), ("tdm", 2), ("monitor", 3), ("packet", 4), ("remoteConfig", 5), ("profile2", 6), ("profile3", 7), ("profile4", 8), ("profile5", 9), ("profile6", 10), ("profile7", 11), ("profile8", 12), ("profile9", 13), ("profile10", 14), ("profile11", 15), ("profile12", 16), ("profile13", 17), ("profile14", 18), ("profile15", 19), ("profile16", 20), ("profile17", 21), ("profile18", 22), ("profile19", 23), ("profile20", 24), ("profile21", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwOperatingMode.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwOperatingMode.setDescription('Selects overall mode of operation.')
ipadPktSwCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2), )
if mibBuilder.loadTexts: ipadPktSwCfgTable.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgTable.setDescription('The ipad packet switch configuration table.')
ipadPktSwCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadPktSwCfgService"))
if mibBuilder.loadTexts: ipadPktSwCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgTableEntry.setDescription('An entry in the ipad packet switch configuration table.')
ipadPktSwCfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPktSwCfgService.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgService.setDescription('The index into the packet switch configuration table; an entry in the ipad Service table.')
ipadPktSwCfgInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uni", 1), ("ni", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgInterfaceType.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgInterfaceType.setDescription('Network ports should be set to User Network Interface (uni) and user ports should be set to Network Interface (ni).')
ipadPktSwCfgLnkMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("ccitt", 3), ("ansi", 4), ("lmi", 5), ("none", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgLnkMgmtType.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgLnkMgmtType.setDescription('If set to auto, the frame relay LMI type will be learned from the network side. If set to none, all DLCI must be configured.')
ipadPktSwCfgMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgMaxFrameSize.setDescription('This is the maximum frame size configured in the frame relay network.')
ipadPktSwCfgnN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN1.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgnN1.setDescription('Number of keep alive requests between full status request.')
ipadPktSwCfgnN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN2.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgnN2.setDescription('Number of errors from FRAD before alarm.')
ipadPktSwCfgnN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN3.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgnN3.setDescription('Number of events to sample nN2.')
ipadPktSwCfgnT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnT1.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgnT1.setDescription('Delay before issuing a poll sequence.')
ipadPktSwCfgDefCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDefCIR.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgDefCIR.setDescription('Default committed information rate in bits per second.')
ipadPktSwCfgDefExBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDefExBurst.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgDefExBurst.setDescription('Default excess burst rate in bits per second.')
ipadPktSwCfgCIREE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgCIREE.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgCIREE.setDescription('Determines if the interface will enforce CIR and excess burst configured values.')
ipadPktSwCfgLinkInjection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("buffered", 3), ("forced", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgLinkInjection.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgLinkInjection.setDescription('Indicates how to process frames in excess of the CIR when congestion exists.')
ipadPktSwCfgAutoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiagnostic.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiagnostic.setDescription('Determines if the unit will put itself into diagnostic mode everytime it determines that there are no LMI received on a network service.')
ipadPktSwCfgAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiscovery.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiscovery.setDescription('Determines if the unit will learn the DLCIs from the LMMI received on this service.')
ipadPktSwCfgMgmtDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgMgmtDLCI.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgMgmtDLCI.setDescription('Specifies the DLCI that will be used by the unit for management information. Specifying a 0 disables this feature.')
ipadPktSwCfgRoundTripDelaySize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgRoundTripDelaySize.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgRoundTripDelaySize.setDescription('Specifies the packet size in octets used to calculate round trip delay.')
ipadPktSwCfgRoundTripDelayRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgRoundTripDelayRate.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgRoundTripDelayRate.setDescription('Specifies the packet rate in seconds used to calculate round trip delay.')
ipadPktSwCfgAutoIPMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoIPMgmtAddr.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgAutoIPMgmtAddr.setDescription('Look for DLCI (980-995) and uses its IP address.')
ipadPktSwCfgNormalTxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgNormalTxQueueSize.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgNormalTxQueueSize.setDescription('The depth of the normal priority tx queue. This size determines the max number of low priority packets that can be queued in front of high priority traffic.')
ipadPktSwCfgAddDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAddDLCI.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgAddDLCI.setDescription('Identifies a DLCI number to be added.')
ipadPktSwCfgDeleteDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDeleteDLCI.setStatus('current')
if mibBuilder.loadTexts: ipadPktSwCfgDeleteDLCI.setDescription('Identifies a DLCI number to be deleted.')
ipadTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1), )
if mibBuilder.loadTexts: ipadTrapDestTable.setStatus('current')
if mibBuilder.loadTexts: ipadTrapDestTable.setDescription('The ipad trap destination table.')
ipadTrapDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadTrapDestIndex"))
if mibBuilder.loadTexts: ipadTrapDestTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadTrapDestTableEntry.setDescription('An entry in the ipad trap destination table.')
ipadTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTrapDestIndex.setStatus('current')
if mibBuilder.loadTexts: ipadTrapDestIndex.setDescription('Index into the ipad trap destination table.')
ipadTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTrapDestination.setStatus('current')
if mibBuilder.loadTexts: ipadTrapDestination.setDescription('Trap destination.')
ipadFrPortRxInvalidFramesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25000)).setObjects(("IPADv2-MIB", "ipadFrPortRxInvAlmAlarm"))
if mibBuilder.loadTexts: ipadFrPortRxInvalidFramesExceeded.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortRxInvalidFramesExceeded.setDescription('This trap is sent out when an ipad frame relay port receive invalid frames alarm threshold has been exceeded.')
ipadFrPortRxThroughputExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25001)).setObjects(("IPADv2-MIB", "ipadFrPortRxAlmAlarm"))
if mibBuilder.loadTexts: ipadFrPortRxThroughputExceeded.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortRxThroughputExceeded.setDescription('This trap is sent out when an ipad frame relay port receive throughput threshold has been exceeded.')
ipadFrPortTxThroughputExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25002)).setObjects(("IPADv2-MIB", "ipadFrPortTxAlmAlarm"))
if mibBuilder.loadTexts: ipadFrPortTxThroughputExceeded.setStatus('current')
if mibBuilder.loadTexts: ipadFrPortTxThroughputExceeded.setDescription('This trap is sent out when an ipad frame relay port transmit throughput threshold has been exceeded.')
ipadDLCItxCIRexceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25003)).setObjects(("IPADv2-MIB", "ipadDLCItxExCIRAlarm"))
if mibBuilder.loadTexts: ipadDLCItxCIRexceeded.setStatus('current')
if mibBuilder.loadTexts: ipadDLCItxCIRexceeded.setDescription('This trap is sent out when the Tx over CIR threshold has been exceeded. This threshold is the number of frames in excess of CIR.')
ipadDLCItxBEexceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25004)).setObjects(("IPADv2-MIB", "ipadDLCItxExBeAlarm"))
if mibBuilder.loadTexts: ipadDLCItxBEexceeded.setStatus('current')
if mibBuilder.loadTexts: ipadDLCItxBEexceeded.setDescription('This trap is sent out when the Tx over Be threshold has been exceeded. This threshold is the number of frames in excess of Be.')
ipadDLCIRxCongestionExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25005)).setObjects(("IPADv2-MIB", "ipadDLCIrxCongAlarm"))
if mibBuilder.loadTexts: ipadDLCIRxCongestionExceeded.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIRxCongestionExceeded.setDescription('This trap is sent out when the Rx congestion threshold has been exceeded. This threshold is the number of frames received with BECN/FECN.')
ipadUserTxExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25006)).setObjects(("IPADv2-MIB", "ipadUserTxAlmAlarm"))
if mibBuilder.loadTexts: ipadUserTxExceeded.setStatus('current')
if mibBuilder.loadTexts: ipadUserTxExceeded.setDescription('This trap is sent out when the Tx throughput threshold in bits per second has been exceeded. This threshold represents the number of bits for the user-selected protocol.')
ipadDlciRxBECNinCIRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25007)).setObjects(("IPADv2-MIB", "ipadDLCIrxBECNinCIR"))
if mibBuilder.loadTexts: ipadDlciRxBECNinCIRAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadDlciRxBECNinCIRAlarm.setDescription('This trap is sent out when a frame with BECN set has been received within CIR.')
ipadDlciUASExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25008)).setObjects(("IPADv2-MIB", "ipadDLCIUASAlarm"))
if mibBuilder.loadTexts: ipadDlciUASExceeded.setStatus('current')
if mibBuilder.loadTexts: ipadDlciUASExceeded.setDescription('This trap is sent out when the UAS (unavailable seconds) threshold for the DLCI has been exceeded.')
ipadserialDteDTRAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25009)).setObjects(("DS8200v2-MIB", "serialDteDTRAlarmStatus"))
if mibBuilder.loadTexts: ipadserialDteDTRAlarmExists.setStatus('current')
if mibBuilder.loadTexts: ipadserialDteDTRAlarmExists.setDescription('This trap is sent out when a DTR Loss alarm is declared.')
ipadt1e1ESAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25010)).setObjects(("DS8200v2-MIB", "t1e1ESCount"))
if mibBuilder.loadTexts: ipadt1e1ESAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadt1e1ESAlarmDeclared.setDescription('This trap is sent out when an Errored Seconds alarm is declared.')
ipadt1e1SESAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25011)).setObjects(("DS8200v2-MIB", "t1e1SESCount"))
if mibBuilder.loadTexts: ipadt1e1SESAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadt1e1SESAlarmDeclared.setDescription('This trap is sent out when a Severely Errored Seconds alarm is declared.')
ipadt1e1LOSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25012)).setObjects(("DS8200v2-MIB", "t1e1LOSSCount"))
if mibBuilder.loadTexts: ipadt1e1LOSSAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadt1e1LOSSAlarmDeclared.setDescription('This trap is sent out when a Loss of Signal Seconds alarm is declared.')
ipadt1e1UASAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25013)).setObjects(("DS8200v2-MIB", "t1e1UASCount"))
if mibBuilder.loadTexts: ipadt1e1UASAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadt1e1UASAlarmDeclared.setDescription('This trap is sent out when an Unavailable Seconds alarm is declared.')
ipadt1e1CSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25014)).setObjects(("DS8200v2-MIB", "t1e1CSSCount"))
if mibBuilder.loadTexts: ipadt1e1CSSAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadt1e1CSSAlarmDeclared.setDescription('This trap is sent out when a Controlled Slip Seconds alarm is declared.')
ipadt1e1BPVSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25015)).setObjects(("DS8200v2-MIB", "t1e1BPVSCount"))
if mibBuilder.loadTexts: ipadt1e1BPVSAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadt1e1BPVSAlarmDeclared.setDescription('This trap is sent out when a Bipolar Violation Seconds alarm is declared.')
ipadt1e1OOFSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25016)).setObjects(("DS8200v2-MIB", "t1e1OOFSCount"))
if mibBuilder.loadTexts: ipadt1e1OOFSAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadt1e1OOFSAlarmDeclared.setDescription('This trap is sent out when an Out of Frame Seconds alarm is declared.')
ipadt1e1AISAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25017)).setObjects(("DS8200v2-MIB", "t1e1AISCount"))
if mibBuilder.loadTexts: ipadt1e1AISAlarmExists.setStatus('current')
if mibBuilder.loadTexts: ipadt1e1AISAlarmExists.setDescription('This trap is sent out when an Alarm Indication Signal alarm is declared.')
ipadt1e1RASAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25018)).setObjects(("DS8200v2-MIB", "t1e1RASCount"))
if mibBuilder.loadTexts: ipadt1e1RASAlarmExists.setStatus('current')
if mibBuilder.loadTexts: ipadt1e1RASAlarmExists.setDescription('This trap is sent out when a Remote Alarm Signal alarm is declared.')
ipadDLCIremoteSOSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25019)).setObjects(("IPADv2-MIB", "ipadDLCIremoteEquipActive"))
if mibBuilder.loadTexts: ipadDLCIremoteSOSAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadDLCIremoteSOSAlarm.setDescription('This trap is sent when the remote unit for a DLCI senses and reports an SOS condition.')
ipadDdsLOSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25020)).setObjects(("DS8200v2-MIB", "ddsNetLOSCount"))
if mibBuilder.loadTexts: ipadDdsLOSSAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadDdsLOSSAlarmDeclared.setDescription('This trap is sent out when a Loss of Signal Seconds alarm is declared.')
ipadDdsOOFSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25021)).setObjects(("DS8200v2-MIB", "ddsNetOOFCount"))
if mibBuilder.loadTexts: ipadDdsOOFSAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadDdsOOFSAlarmDeclared.setDescription('This trap is sent out when an Out of Frame Seconds alarm is declared.')
ipadDdsOOSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25022)).setObjects(("DS8200v2-MIB", "ddsNetOOSCount"))
if mibBuilder.loadTexts: ipadDdsOOSSAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadDdsOOSSAlarmDeclared.setDescription('This trap is sent out when an Out of Service Seconds alarm is declared.')
ipadDdsFDLSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25023)).setObjects(("DS8200v2-MIB", "ddsNetFDLCount"))
if mibBuilder.loadTexts: ipadDdsFDLSAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadDdsFDLSAlarmDeclared.setDescription('This trap is sent out when a FDL error Seconds alarm is declared.')
ipadDdsBPVSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25024)).setObjects(("DS8200v2-MIB", "ddsNetBPVCount"))
if mibBuilder.loadTexts: ipadDdsBPVSAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadDdsBPVSAlarmDeclared.setDescription('This trap is sent out when a Bipolar Violation Seconds alarm is declared.')
ipadDS0HighAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25025)).setObjects(("IPADv2-MIB", "ipadDS0ConfigHighUtilCount"))
if mibBuilder.loadTexts: ipadDS0HighAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadDS0HighAlarmDeclared.setDescription('This trap is sent out when a high utilization alarm is declared.')
ipadDS0LowAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25026)).setObjects(("IPADv2-MIB", "ipadDS0ConfigLowUtilAlarm"))
if mibBuilder.loadTexts: ipadDS0LowAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadDS0LowAlarmDeclared.setDescription('This trap is sent out when a low utilization alarm is declared.')
ipadHDLCRxHighAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25027)).setObjects(("IPADv2-MIB", "ipadHDLCConfigRxHighUtilCount"))
if mibBuilder.loadTexts: ipadHDLCRxHighAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCRxHighAlarmDeclared.setDescription('This trap is sent out when a high Rx utilization alarm is declared.')
ipadHDLCRxLowAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25028)).setObjects(("IPADv2-MIB", "ipadHDLCConfigRxLowUtilAlarm"))
if mibBuilder.loadTexts: ipadHDLCRxLowAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCRxLowAlarmDeclared.setDescription('This trap is sent out when a low Rx utilization alarm is declared.')
ipadHDLCTxHighAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25029)).setObjects(("IPADv2-MIB", "ipadHDLCConfigTxHighUtilCount"))
if mibBuilder.loadTexts: ipadHDLCTxHighAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCTxHighAlarmDeclared.setDescription('This trap is sent out when a high Tx utilization alarm is declared.')
ipadHDLCTxLowAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25030)).setObjects(("IPADv2-MIB", "ipadHDLCConfigTxLowUtilAlarm"))
if mibBuilder.loadTexts: ipadHDLCTxLowAlarmDeclared.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCTxLowAlarmDeclared.setDescription('This trap is sent out when a low Tx utilization alarm is declared.')
ipadDbuActivated = NotificationType((1, 3, 6, 1, 4, 1, 321, 100, 1, 999, 0, 25031)).setObjects(("IPADv2-MIB", "ipadDbuStatus"))
if mibBuilder.loadTexts: ipadDbuActivated.setStatus('current')
if mibBuilder.loadTexts: ipadDbuActivated.setDescription('This trap is sent out when Dial Backup becomes active.')
ipadMiscPortSettings = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1), )
if mibBuilder.loadTexts: ipadMiscPortSettings.setStatus('current')
if mibBuilder.loadTexts: ipadMiscPortSettings.setDescription('The ipad miscellaneous port settings table.')
ipadMiscPortSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadMiscPortSettingsIndex"))
if mibBuilder.loadTexts: ipadMiscPortSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: ipadMiscPortSettingsEntry.setDescription('An entry in the ipad miscellaneous port settings table.')
ipadMiscPortSettingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscPortSettingsIndex.setStatus('current')
if mibBuilder.loadTexts: ipadMiscPortSettingsIndex.setDescription('The MIB-II ifIndex for this port.')
ipadMiscPortSettingsSerialType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dce", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscPortSettingsSerialType.setStatus('current')
if mibBuilder.loadTexts: ipadMiscPortSettingsSerialType.setDescription('The type of this serial port.')
ipadMiscPortSettingsModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscPortSettingsModemControl.setStatus('current')
if mibBuilder.loadTexts: ipadMiscPortSettingsModemControl.setDescription('Request the attached service to use the modem dialing control feature.')
ipadMiscClearStatusCounts = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clearAll", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscClearStatusCounts.setStatus('current')
if mibBuilder.loadTexts: ipadMiscClearStatusCounts.setDescription('Writing a 2 to this field will clear all status counts.')
ipadMiscEnableServiceAware = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscEnableServiceAware.setStatus('current')
if mibBuilder.loadTexts: ipadMiscEnableServiceAware.setDescription('Writing a 3 to this field will enable service aware statistics gathering.')
ipadMiscShdslConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4), )
if mibBuilder.loadTexts: ipadMiscShdslConfigTable.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslConfigTable.setDescription('The ipad miscellaneous SHDSL configuration table.')
ipadMiscShdslConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadMiscShdslConfigIndex"))
if mibBuilder.loadTexts: ipadMiscShdslConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslConfigEntry.setDescription('An entry in the ipad miscellaneous SHDSL configuration table.')
ipadMiscShdslConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslConfigIndex.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslConfigIndex.setDescription('This object is the index into the SHDSL configuration table.')
ipadMiscShdslTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("isXtuC", 2), ("isXtuR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslTerminalType.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslTerminalType.setDescription('Selects whether the tu is a central or remote site terminal unit. Applicable to HDSL2/SHDSL only.')
ipadMiscShdslTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("shdslTimingOther", 1), ("shdslTimingInternal", 2), ("shdslTimingNetwork", 3), ("shdslTimingEqDTE", 4), ("shdslTimingStation", 5), ("shdslTimingPort1", 6), ("shdslTimingPort2", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslTiming.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslTiming.setDescription("Sets the timing source to synchronize the unit's internal timing generators.")
ipadMiscShdslStationInTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shdslStationInTimingOther", 1), ("shdslStationInTimingNX64", 2), ("shdslStationInTiming1544", 3), ("shdslStationInTiming2048", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslStationInTiming.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslStationInTiming.setDescription('Selects the input timing if SHDSLTiming is set to Station.')
ipadMiscShdslStationTimingNxMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslStationTimingNxMultiple.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslStationTimingNxMultiple.setDescription('Selects the N-multiple when Station Input Timing is set to either NX56 or NX65.')
ipadMiscShdslAutomaticRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscShdslAutomaticRetrain.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslAutomaticRetrain.setDescription('Enable or disable automatic line retraining when needed. Enable is the default. Disable is used for PSD measurement.')
ipadMiscShdslStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5), )
if mibBuilder.loadTexts: ipadMiscShdslStatusTable.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslStatusTable.setDescription('The ipad miscellaneous SHDSL status table.')
ipadMiscShdslStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadMiscShdslStatusIndex"))
if mibBuilder.loadTexts: ipadMiscShdslStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslStatusEntry.setDescription('An entry in the ipad miscellaneous SHDSL status table.')
ipadMiscShdslStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslStatusIndex.setDescription('This object is the index into the SHDSL configuration table.')
ipadMiscShdslConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("handshake", 2), ("training", 3), ("data", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslConnectionStatus.setDescription('This object displays the connection status of Wire Pair 1 of an SHDSL connection.')
ipadMiscShdslDetailedConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslDetailedConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslDetailedConnectionStatus.setDescription('This object displays the detailed connection status of Wire Pair 1 of an SHDSL connection.')
ipadMiscShdslEOCInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslEOCInMessages.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslEOCInMessages.setDescription('This object displays the number of EOC messages received.')
ipadMiscShdslEOCOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslEOCOutMessages.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslEOCOutMessages.setDescription('This object displays the number of EOC messages transmitted.')
ipadMiscShdslConnectionStatusPair2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("handshake", 2), ("training", 3), ("data", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslConnectionStatusPair2.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslConnectionStatusPair2.setDescription('This object displays the connection status of Wire Pair 2 of an SHDSL connection.')
ipadMiscShdslDetailedConnectionStatusPair2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscShdslDetailedConnectionStatusPair2.setStatus('current')
if mibBuilder.loadTexts: ipadMiscShdslDetailedConnectionStatusPair2.setDescription('This object displays the detailed connection status of Wire Pair 2 of an SHDSL connection.')
ipadMiscEnableSupervisoryPort = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscEnableSupervisoryPort.setStatus('current')
if mibBuilder.loadTexts: ipadMiscEnableSupervisoryPort.setDescription('Writing a 2 to this field will disable VT100 and telnet. Writing a 3 to this field will enable VT100 and telnet.')
ipadMiscEnableButtons = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscEnableButtons.setStatus('current')
if mibBuilder.loadTexts: ipadMiscEnableButtons.setDescription('Writing a 2 to this field will disable the buttons. Writing a 3 to this field will enable the buttons.')
ipadMiscBootupConsoleAvail = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscBootupConsoleAvail.setStatus('current')
if mibBuilder.loadTexts: ipadMiscBootupConsoleAvail.setDescription('Writing a 2 to this field will disable the console port for diagnostic messages. Writing a 3 to this field will enable these messages.')
ipadMiscEnableLEDs = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscEnableLEDs.setStatus('current')
if mibBuilder.loadTexts: ipadMiscEnableLEDs.setDescription('Writing a 2 to this field will disable the LEDs. Writing a 3 to this field will enable the LEDs.')
ipadMiscDisableLAN = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("half10", 4), ("full10", 5), ("half100", 6), ("full100", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscDisableLAN.setStatus('current')
if mibBuilder.loadTexts: ipadMiscDisableLAN.setDescription('This parameter defines the setup of the Ethernet LAN port. disable(2) - Disable the Ethernet LAN Port. enable(3) - Enable the Ethernet LAN port and auto-negotiate speed and duplex. half10(4) - Enable the Ethernet LAN port and manually set to 10 Mbps and half-duplex. full10(5) - Enable the Ethernet LAN port and manually set to 10 Mbps and full-duplex. half100(6) - Enable the Ethernet LAN port and manually set to 100 Mbps and half-duplex. full100(7) - Enable the Ethernet LAN port and manually set to 100 Mbps and full-duplex.')
ipadMiscLANStatus = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("half10", 2), ("full10", 3), ("half100", 4), ("full100", 5), ("na", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscLANStatus.setStatus('current')
if mibBuilder.loadTexts: ipadMiscLANStatus.setDescription('This parameter defines the setup of the Ethernet LAN port. down(1) - Port has not negotiated. half10(2) - Port negotiated 10 Mbps and half-duplex. full10(3) - Port negotiated 10 Mbps and full-duplex. half100(4) - Port negotiated 100 Mbps and half-duplex. full100(5) - Port negotiated 100 Mbps and full-duplex. na(6) - Not Applicable (speed/duplex manually set).')
ipadSoftKeyTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1), )
if mibBuilder.loadTexts: ipadSoftKeyTable.setStatus('current')
if mibBuilder.loadTexts: ipadSoftKeyTable.setDescription('Table of software keys.')
ipadSoftKeyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadSoftKeyIndex"))
if mibBuilder.loadTexts: ipadSoftKeyTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadSoftKeyTableEntry.setDescription('An entry in the software key table.')
ipadSoftKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyIndex.setStatus('current')
if mibBuilder.loadTexts: ipadSoftKeyIndex.setDescription('Index into the ipad software key table.')
ipadSoftKeyAcronym = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyAcronym.setStatus('current')
if mibBuilder.loadTexts: ipadSoftKeyAcronym.setDescription('Three-letter acronym for software key.')
ipadSoftKeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyDescription.setStatus('current')
if mibBuilder.loadTexts: ipadSoftKeyDescription.setDescription('Description, if available, of this software key.')
ipadSoftKeyExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyExpirationDate.setStatus('current')
if mibBuilder.loadTexts: ipadSoftKeyExpirationDate.setDescription('Expiration date of this software key in the format YY/MM/DD.')
ipadSoftKeyEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSoftKeyEntry.setStatus('current')
if mibBuilder.loadTexts: ipadSoftKeyEntry.setDescription('Writing a software key will enable that feature (assuming a correct and valid key is entered).')
ipadTCPServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerEnable.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerEnable.setDescription('Enables/disables the TCP Server.')
ipadTCPServerConnTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2), )
if mibBuilder.loadTexts: ipadTCPServerConnTable.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerConnTable.setDescription('Table of TCP Server connections.')
ipadTCPServerConnTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadTCPServerConnIndex"))
if mibBuilder.loadTexts: ipadTCPServerConnTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerConnTableEntry.setDescription('An entry in the TCP Server connection table.')
ipadTCPServerConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTCPServerConnIndex.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerConnIndex.setDescription('Index into the ipad TCP Server Connection table.')
ipadTCPServerConnEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerConnEndpoint.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerConnEndpoint.setDescription('Identifies the endpoint for this connection.')
ipadTCPServerConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerConnLocalPort.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerConnLocalPort.setDescription('Identifies the TCP port for this connection (default: 2000).')
ipadTCPServerConnEnableEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerConnEnableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerConnEnableEntry.setDescription('Enables or disables this entry.')
ipadTCPServerAddConnEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("addnew", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerAddConnEntry.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerAddConnEntry.setDescription('Writing addnew(2) to this field causes a new (blank) connection to be appended to the TCP Server Table.')
ipadTCPServerDeleteConnEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerDeleteConnEntry.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerDeleteConnEntry.setDescription('Identifies a connection table entry to be deleted.')
ipadTCPServerHostAccessTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 5), )
if mibBuilder.loadTexts: ipadTCPServerHostAccessTable.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerHostAccessTable.setDescription('Table of TCP Server IP Host Access List.')
ipadTCPServerHostAccessTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 5, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadTCPServerHostAccessIndex"))
if mibBuilder.loadTexts: ipadTCPServerHostAccessTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerHostAccessTableEntry.setDescription('An entry in the TCP Server Host Access List table.')
ipadTCPServerHostAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTCPServerHostAccessIndex.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerHostAccessIndex.setDescription('Index into the ipad trap destination table.')
ipadTCPServerHostAccessIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 15, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTCPServerHostAccessIPAddr.setStatus('current')
if mibBuilder.loadTexts: ipadTCPServerHostAccessIPAddr.setDescription('Trap destination.')
ipadSCADAConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1), )
if mibBuilder.loadTexts: ipadSCADAConfigTable.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAConfigTable.setDescription('The SCADA config table.')
ipadSCADAConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadSCADACfgIndex"))
if mibBuilder.loadTexts: ipadSCADAConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAConfigTableEntry.setDescription('An entry in the SCADA config table.')
ipadSCADACfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADACfgIndex.setStatus('current')
if mibBuilder.loadTexts: ipadSCADACfgIndex.setDescription('The index for SCADA config table.')
ipadSCADACfgMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgMessageSize.setStatus('current')
if mibBuilder.loadTexts: ipadSCADACfgMessageSize.setDescription('The SCADA message size.')
ipadSCADACfgIdleCharDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgIdleCharDelay.setStatus('current')
if mibBuilder.loadTexts: ipadSCADACfgIdleCharDelay.setDescription('The SCADA idle character delay.')
ipadSCADACfgInputTerminator = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgInputTerminator.setStatus('current')
if mibBuilder.loadTexts: ipadSCADACfgInputTerminator.setDescription('The SCADA input message terminator.')
ipadSCADACfgAddDevLst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("addnew", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgAddDevLst.setStatus('current')
if mibBuilder.loadTexts: ipadSCADACfgAddDevLst.setDescription('Appends an entry to the SCADA device list table.')
ipadSCADACfgDeleteDevLst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgDeleteDevLst.setStatus('current')
if mibBuilder.loadTexts: ipadSCADACfgDeleteDevLst.setDescription('Deletes an entry in the SCADA device list table.')
ipadSCADACfgDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("both", 2), ("output", 3), ("input", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgDataDirection.setStatus('current')
if mibBuilder.loadTexts: ipadSCADACfgDataDirection.setDescription('Data Direction enables for SCADA configuration.')
ipadSCADACfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("async", 2), ("syncVancommHost", 3), ("syncVancommRTU", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgProtocol.setStatus('current')
if mibBuilder.loadTexts: ipadSCADACfgProtocol.setDescription('Configured SCADA Protocol.')
ipadSCADACfgLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("network", 2), ("port", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADACfgLoopback.setStatus('current')
if mibBuilder.loadTexts: ipadSCADACfgLoopback.setDescription('Loopback allows user to loop data to either Network, Serial Port or both.')
ipadSCADAStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1), )
if mibBuilder.loadTexts: ipadSCADAStatsTable.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsTable.setDescription('The SCADA statistics table.')
ipadSCADAStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadSCADAStatsIndex"))
if mibBuilder.loadTexts: ipadSCADAStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsTableEntry.setDescription('An entry in the SCADA statistics table.')
ipadSCADAStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsIndex.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsIndex.setDescription('The index for SCADA Statistics Table.')
ipadSCADAStatsTxChars = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsTxChars.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsTxChars.setDescription('The number of chracters transmitted through SCADA port.')
ipadSCADAStatsRxChars = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsRxChars.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsRxChars.setDescription('The number of chracters received through SCADA port.')
ipadSCADAStatsTxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsTxMsgs.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsTxMsgs.setDescription('The number of messages transmitted through SCADA port.')
ipadSCADAStatsRxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsRxMsgs.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsRxMsgs.setDescription('The number of messages received through SCADA port.')
ipadSCADAStatsRxParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsRxParityErrors.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsRxParityErrors.setDescription('The number of parity errors received from SCADA port.')
ipadSCADAStatsRxFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADAStatsRxFramingErrors.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsRxFramingErrors.setDescription('The number of framming errors received from SCADA port.')
ipadSCADAStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipadSCADAStatsClearOther", 1), ("ipadSCADAStatsClearNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADAStatsClear.setStatus('current')
if mibBuilder.loadTexts: ipadSCADAStatsClear.setDescription('Writing a value of ipadSCADAStatsClearNow(2) to this field causes all existing stats to be cleared immediately.')
ipadSCADADevLstTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1), )
if mibBuilder.loadTexts: ipadSCADADevLstTable.setStatus('current')
if mibBuilder.loadTexts: ipadSCADADevLstTable.setDescription('The SCADA device list table.')
ipadSCADADevLstTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadSCADADevLstIndex"), (0, "IPADv2-MIB", "ipadSCADADevLstDevIndex"))
if mibBuilder.loadTexts: ipadSCADADevLstTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadSCADADevLstTableEntry.setDescription('An entry in the SCADA device list table.')
ipadSCADADevLstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADADevLstIndex.setStatus('current')
if mibBuilder.loadTexts: ipadSCADADevLstIndex.setDescription('The index for SCADA device list table.')
ipadSCADADevLstDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSCADADevLstDevIndex.setStatus('current')
if mibBuilder.loadTexts: ipadSCADADevLstDevIndex.setDescription('The index of device.')
ipadSCADADevLstEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADADevLstEndpointName.setStatus('current')
if mibBuilder.loadTexts: ipadSCADADevLstEndpointName.setDescription('The name of the endpoint.')
ipadSCADADevLstEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSCADADevLstEntryStatus.setStatus('current')
if mibBuilder.loadTexts: ipadSCADADevLstEntryStatus.setDescription('The disabled or dnabled status of the entry.')
ipadDS0ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1), )
if mibBuilder.loadTexts: ipadDS0ConfigTable.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigTable.setDescription('The ipad DS0 Utilization Monitor Config table.')
ipadDS0ConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDS0ConfigIndex"))
if mibBuilder.loadTexts: ipadDS0ConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigTableEntry.setDescription('An entry in the ipad DS0 Utilization Monitor Config table.')
ipadDS0ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigIndex.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigIndex.setDescription('Index into the DS0 Utilization Monitor Config table.')
ipadDS0ConfigNumberDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigNumberDS0.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigNumberDS0.setDescription("Number of DS0's monitored by this table entry.")
ipadDS0ConfigResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigResetTimer.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigResetTimer.setDescription('Number of contiguous seconds a utilization alarm must not be present before the alarm condition is automatically reset.')
ipadDS0ConfigHighUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtil.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigHighUtil.setDescription('What the user considers a high DS0 utilization for this entry. Utilization is expressed as a percentage.')
ipadDS0ConfigHighUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilThreshold.setDescription('Number of seconds a high utilization condition must be present within 15 minutes before an alarm condition is declared.')
ipadDS0ConfigHighUtilStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notExist", 2), ("exists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilStatus.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilStatus.setDescription('Indicates if a high utilization condition exists.')
ipadDS0ConfigHighUtilCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilCount.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilCount.setDescription('The number of seconds in the past 15 minutes that have been greater than or equal to the high utilization parameter. The value is calculated from a sliding window of 15 one-minute buckets.')
ipadDS0ConfigHighUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigHighUtilAlarm.setDescription('Indicates if the high utilization alarm threshold is exceeded.')
ipadDS0ConfigLowUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigLowUtil.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigLowUtil.setDescription('What the user considers an end-of-day low DS0 utilization for this entry. Utilization is expressed as a percentage. When the utilization is set to zero the low utilization alarm is disabled.')
ipadDS0ConfigLowUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0ConfigLowUtilAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigLowUtilAlarm.setDescription('Indicates if the low utilization alarm is declared.')
ipadDS0ConfigReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 19, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("clearAlarms", 2), ("clearHistory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDS0ConfigReset.setStatus('current')
if mibBuilder.loadTexts: ipadDS0ConfigReset.setDescription('The set values perform the following actions: clearAlarms(2) - Clears any active DS0 utilization alarms and counts clearHistory(3) - Clears DS0 utilization history tables.')
ipadDS0Hist24Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1), )
if mibBuilder.loadTexts: ipadDS0Hist24Table.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist24Table.setDescription('The ipad DS0 Utilization Monitor 24-Hour History table.')
ipadDS0Hist24TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDS0Hist24Index"), (0, "IPADv2-MIB", "ipadDS0Hist24HistoricalIndex"))
if mibBuilder.loadTexts: ipadDS0Hist24TableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist24TableEntry.setDescription('An entry in the ipad DS0 Utilization Monitor 24-Hour History table.')
ipadDS0Hist24Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24Index.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist24Index.setDescription('Index into the DS0 Utilization Monitor 24-Hour History table.')
ipadDS0Hist24HistoricalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("statSummary", 1), ("statCurrent", 2), ("statPeriod1", 3), ("statPeriod2", 4), ("statPeriod3", 5), ("statPeriod4", 6), ("statPeriod5", 7), ("statPeriod6", 8), ("statPeriod7", 9), ("statPeriod8", 10), ("statPeriod9", 11), ("statPeriod10", 12), ("statPeriod11", 13), ("statPeriod12", 14), ("statPeriod13", 15), ("statPeriod14", 16), ("statPeriod15", 17), ("statPeriod16", 18), ("statPeriod17", 19), ("statPeriod18", 20), ("statPeriod19", 21), ("statPeriod20", 22), ("statPeriod21", 23), ("statPeriod22", 24), ("statPeriod23", 25), ("statPeriod24", 26), ("statPeriod25", 27), ("statPeriod26", 28), ("statPeriod27", 29), ("statPeriod28", 30), ("statPeriod29", 31), ("statPeriod30", 32), ("statPeriod31", 33), ("statPeriod32", 34), ("statPeriod33", 35), ("statPeriod34", 36), ("statPeriod35", 37), ("statPeriod36", 38), ("statPeriod37", 39), ("statPeriod38", 40), ("statPeriod39", 41), ("statPeriod40", 42), ("statPeriod41", 43), ("statPeriod42", 44), ("statPeriod43", 45), ("statPeriod44", 46), ("statPeriod45", 47), ("statPeriod46", 48), ("statPeriod47", 49), ("statPeriod48", 50), ("statPeriod49", 51), ("statPeriod50", 52), ("statPeriod51", 53), ("statPeriod52", 54), ("statPeriod53", 55), ("statPeriod54", 56), ("statPeriod55", 57), ("statPeriod56", 58), ("statPeriod57", 59), ("statPeriod58", 60), ("statPeriod59", 61), ("statPeriod60", 62), ("statPeriod61", 63), ("statPeriod62", 64), ("statPeriod63", 65), ("statPeriod64", 66), ("statPeriod65", 67), ("statPeriod66", 68), ("statPeriod67", 69), ("statPeriod68", 70), ("statPeriod69", 71), ("statPeriod70", 72), ("statPeriod71", 73), ("statPeriod72", 74), ("statPeriod73", 75), ("statPeriod74", 76), ("statPeriod75", 77), ("statPeriod76", 78), ("statPeriod77", 79), ("statPeriod78", 80), ("statPeriod79", 81), ("statPeriod80", 82), ("statPeriod81", 83), ("statPeriod82", 84), ("statPeriod83", 85), ("statPeriod84", 86), ("statPeriod85", 87), ("statPeriod86", 88), ("statPeriod87", 89), ("statPeriod88", 90), ("statPeriod89", 91), ("statPeriod90", 92), ("statPeriod91", 93), ("statPeriod92", 94), ("statPeriod93", 95), ("statPeriod94", 96), ("statPeriod95", 97), ("statPeriod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24HistoricalIndex.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist24HistoricalIndex.setDescription('Historical index into the DS0 Utilization Monitor 24-Hour History table.')
ipadDS0Hist24Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24Timestamp.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist24Timestamp.setDescription('SysUpTime when the utilization interval completed.')
ipadDS0Hist24HighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24HighUtilSeconds.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist24HighUtilSeconds.setDescription('The number of seconds in the interval that have been greater than or equal to the high utilization parameter.')
ipadDS0Hist24Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 20, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist24Utilization.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist24Utilization.setDescription("The percent of DS0's utilized over the given interval.")
ipadDS0Hist30Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1), )
if mibBuilder.loadTexts: ipadDS0Hist30Table.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist30Table.setDescription('The ipad DS0 Utilization Monitor 30-Day History table.')
ipadDS0Hist30TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDS0Hist30Index"), (0, "IPADv2-MIB", "ipadDS0Hist30HistoricalIndex"))
if mibBuilder.loadTexts: ipadDS0Hist30TableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist30TableEntry.setDescription('An entry in the ipad DS0 Utilization Monitor 30-Day History table.')
ipadDS0Hist30Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30Index.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist30Index.setDescription('Index into the DS0 Utilization Monitor 30-Day History table.')
ipadDS0Hist30HistoricalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("statSummary", 1), ("statDay1", 2), ("statDay2", 3), ("statDay3", 4), ("statDay4", 5), ("statDay5", 6), ("statDay6", 7), ("statDay7", 8), ("statDay8", 9), ("statDay9", 10), ("statDay10", 11), ("statDay11", 12), ("statDay12", 13), ("statDay13", 14), ("statDay14", 15), ("statDay15", 16), ("statDay16", 17), ("statDay17", 18), ("statDay18", 19), ("statDay19", 20), ("statDay20", 21), ("statDay21", 22), ("statDay22", 23), ("statDay23", 24), ("statDay24", 25), ("statDay25", 26), ("statDay26", 27), ("statDay27", 28), ("statDay28", 29), ("statDay29", 30), ("statDay30", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30HistoricalIndex.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist30HistoricalIndex.setDescription('Historical index into the DS0 Utilization Monitor 30-Day History table.')
ipadDS0Hist30Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30Timestamp.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist30Timestamp.setDescription('SysUpTime when the utilization interval completed.')
ipadDS0Hist30HighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30HighUtilSeconds.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist30HighUtilSeconds.setDescription('The number of seconds in the interval that have been greater than or equal to the high utilization parameter.')
ipadDS0Hist30Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 21, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDS0Hist30Utilization.setStatus('current')
if mibBuilder.loadTexts: ipadDS0Hist30Utilization.setDescription("The percent of DS0's utilized over the given interval.")
ipadHDLCConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1), )
if mibBuilder.loadTexts: ipadHDLCConfigTable.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigTable.setDescription('The ipad HDLC Utilization Monitor Config table.')
ipadHDLCConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadHDLCConfigIndex"))
if mibBuilder.loadTexts: ipadHDLCConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigTableEntry.setDescription('An entry in the ipad HDLC Utilization Monitor Config table.')
ipadHDLCConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigIndex.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigIndex.setDescription('Index into the HDLC Utilization Monitor Config table.')
ipadHDLCConfigService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigService.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigService.setDescription('Service the HDLC utilization monitor is attached. 0 = Disabled.')
ipadHDLCConfigServiceBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigServiceBPS.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigServiceBPS.setDescription('Service bit rate.')
ipadHDLCConfigResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigResetTimer.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigResetTimer.setDescription('Number of contiguous seconds a utilization alarm must not be present before the alarm condition is automatically reset.')
ipadHDLCConfigRxHighUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtil.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtil.setDescription('What the user considers a high Rx HDLC utilization for this entry. Utilization is expressed as a percentage.')
ipadHDLCConfigRxHighUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilThreshold.setDescription('Number of seconds a Rx high utilization condition must be present within 15 minutes before an alarm condition is declared.')
ipadHDLCConfigRxHighUtilStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notExist", 2), ("exists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilStatus.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilStatus.setDescription('Indicates if a Rx high utilization condition exists.')
ipadHDLCConfigRxHighUtilCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilCount.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilCount.setDescription('The number of seconds in the past 15 minutes that have been greater than or equal to the Rx high utilization parameter. The value is calculated from a sliding window of 15 one-minute buckets.')
ipadHDLCConfigRxHighUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigRxHighUtilAlarm.setDescription('Indicates if the Rx high utilization alarm threshold is exceeded.')
ipadHDLCConfigRxLowUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigRxLowUtil.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigRxLowUtil.setDescription('What the user considers an end-of-day low Rx HDLC utilization for this entry. Utilization is expressed as a percentage. When the utilization is set to zero the Rx low utilization alarm is disabled.')
ipadHDLCConfigRxLowUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigRxLowUtilAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigRxLowUtilAlarm.setDescription('Indicates if the Rx low utilization alarm is declared.')
ipadHDLCConfigTxHighUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtil.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtil.setDescription('What the user considers a high Tx HDLC utilization for this entry. Utilization is expressed as a percentage.')
ipadHDLCConfigTxHighUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilThreshold.setDescription('Number of seconds a Tx high utilization condition must be present within 15 minutes before an alarm condition is declared.')
ipadHDLCConfigTxHighUtilStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notExist", 2), ("exists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilStatus.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilStatus.setDescription('Indicates if a Tx high utilization condition exists.')
ipadHDLCConfigTxHighUtilCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilCount.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilCount.setDescription('The number of seconds in the past 15 minutes that have been greater than or equal to the Tx high utilization parameter. The value is calculated from a sliding window of 15 one-minute buckets.')
ipadHDLCConfigTxHighUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigTxHighUtilAlarm.setDescription('Indicates if the Tx high utilization alarm threshold is exceeded.')
ipadHDLCConfigTxLowUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigTxLowUtil.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigTxLowUtil.setDescription('What the user considers an end-of-day low Tx HDLC utilization for this entry. Utilization is expressed as a percentage. When the utilization is set to zero the Tx low utilization alarm is disabled.')
ipadHDLCConfigTxLowUtilAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCConfigTxLowUtilAlarm.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigTxLowUtilAlarm.setDescription('Indicates if the Tx low utilization alarm is declared.')
ipadHDLCConfigReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 22, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("clearAlarms", 2), ("clearHistory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadHDLCConfigReset.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCConfigReset.setDescription('The set values perform the following actions: clearAlarms(2) - Clears any active HDLC utilization alarms and counts clearHistory(3) - Clears HDLC utilization history tables.')
ipadHDLCHist24Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1), )
if mibBuilder.loadTexts: ipadHDLCHist24Table.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist24Table.setDescription('The ipad HDLC Utilization Monitor 24-Hour History table.')
ipadHDLCHist24TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadHDLCHist24Index"), (0, "IPADv2-MIB", "ipadHDLCHist24HistoricalIndex"))
if mibBuilder.loadTexts: ipadHDLCHist24TableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist24TableEntry.setDescription('An entry in the ipad HDLC Utilization Monitor 24-Hour History table.')
ipadHDLCHist24Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24Index.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist24Index.setDescription('Index into the HDLC Utilization Monitor 24-Hour History table.')
ipadHDLCHist24HistoricalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("statSummary", 1), ("statCurrent", 2), ("statPeriod1", 3), ("statPeriod2", 4), ("statPeriod3", 5), ("statPeriod4", 6), ("statPeriod5", 7), ("statPeriod6", 8), ("statPeriod7", 9), ("statPeriod8", 10), ("statPeriod9", 11), ("statPeriod10", 12), ("statPeriod11", 13), ("statPeriod12", 14), ("statPeriod13", 15), ("statPeriod14", 16), ("statPeriod15", 17), ("statPeriod16", 18), ("statPeriod17", 19), ("statPeriod18", 20), ("statPeriod19", 21), ("statPeriod20", 22), ("statPeriod21", 23), ("statPeriod22", 24), ("statPeriod23", 25), ("statPeriod24", 26), ("statPeriod25", 27), ("statPeriod26", 28), ("statPeriod27", 29), ("statPeriod28", 30), ("statPeriod29", 31), ("statPeriod30", 32), ("statPeriod31", 33), ("statPeriod32", 34), ("statPeriod33", 35), ("statPeriod34", 36), ("statPeriod35", 37), ("statPeriod36", 38), ("statPeriod37", 39), ("statPeriod38", 40), ("statPeriod39", 41), ("statPeriod40", 42), ("statPeriod41", 43), ("statPeriod42", 44), ("statPeriod43", 45), ("statPeriod44", 46), ("statPeriod45", 47), ("statPeriod46", 48), ("statPeriod47", 49), ("statPeriod48", 50), ("statPeriod49", 51), ("statPeriod50", 52), ("statPeriod51", 53), ("statPeriod52", 54), ("statPeriod53", 55), ("statPeriod54", 56), ("statPeriod55", 57), ("statPeriod56", 58), ("statPeriod57", 59), ("statPeriod58", 60), ("statPeriod59", 61), ("statPeriod60", 62), ("statPeriod61", 63), ("statPeriod62", 64), ("statPeriod63", 65), ("statPeriod64", 66), ("statPeriod65", 67), ("statPeriod66", 68), ("statPeriod67", 69), ("statPeriod68", 70), ("statPeriod69", 71), ("statPeriod70", 72), ("statPeriod71", 73), ("statPeriod72", 74), ("statPeriod73", 75), ("statPeriod74", 76), ("statPeriod75", 77), ("statPeriod76", 78), ("statPeriod77", 79), ("statPeriod78", 80), ("statPeriod79", 81), ("statPeriod80", 82), ("statPeriod81", 83), ("statPeriod82", 84), ("statPeriod83", 85), ("statPeriod84", 86), ("statPeriod85", 87), ("statPeriod86", 88), ("statPeriod87", 89), ("statPeriod88", 90), ("statPeriod89", 91), ("statPeriod90", 92), ("statPeriod91", 93), ("statPeriod92", 94), ("statPeriod93", 95), ("statPeriod94", 96), ("statPeriod95", 97), ("statPeriod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24HistoricalIndex.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist24HistoricalIndex.setDescription('Historical index into the HDLC Utilization Monitor 24-Hour History table.')
ipadHDLCHist24Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24Timestamp.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist24Timestamp.setDescription('SysUpTime when the utilization interval completed.')
ipadHDLCHist24RxHighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24RxHighUtilSeconds.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist24RxHighUtilSeconds.setDescription('The number of seconds in the interval that have been greater than or equal to the Rx high utilization parameter.')
ipadHDLCHist24RxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24RxUtilization.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist24RxUtilization.setDescription('The percent of Rx HDLC bandwidth utilized over the given interval.')
ipadHDLCHist24TxHighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24TxHighUtilSeconds.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist24TxHighUtilSeconds.setDescription('The number of seconds in the interval that have been greater than or equal to the Tx high utilization parameter.')
ipadHDLCHist24TxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 23, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist24TxUtilization.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist24TxUtilization.setDescription('The percent of Tx HDLC bandwidth utilized over the given interval.')
ipadHDLCHist30Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1), )
if mibBuilder.loadTexts: ipadHDLCHist30Table.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist30Table.setDescription('The ipad HDLC Utilization Monitor 30-Day History table.')
ipadHDLCHist30TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadHDLCHist30Index"), (0, "IPADv2-MIB", "ipadHDLCHist30HistoricalIndex"))
if mibBuilder.loadTexts: ipadHDLCHist30TableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist30TableEntry.setDescription('An entry in the ipad HDLC Utilization Monitor 30-Day History table.')
ipadHDLCHist30Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30Index.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist30Index.setDescription('Index into the HDLC Utilization Monitor 30-Day History table.')
ipadHDLCHist30HistoricalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("statSummary", 1), ("statDay1", 2), ("statDay2", 3), ("statDay3", 4), ("statDay4", 5), ("statDay5", 6), ("statDay6", 7), ("statDay7", 8), ("statDay8", 9), ("statDay9", 10), ("statDay10", 11), ("statDay11", 12), ("statDay12", 13), ("statDay13", 14), ("statDay14", 15), ("statDay15", 16), ("statDay16", 17), ("statDay17", 18), ("statDay18", 19), ("statDay19", 20), ("statDay20", 21), ("statDay21", 22), ("statDay22", 23), ("statDay23", 24), ("statDay24", 25), ("statDay25", 26), ("statDay26", 27), ("statDay27", 28), ("statDay28", 29), ("statDay29", 30), ("statDay30", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30HistoricalIndex.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist30HistoricalIndex.setDescription('Historical index into the HDLC Utilization Monitor 30-Day History table.')
ipadHDLCHist30Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30Timestamp.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist30Timestamp.setDescription('SysUpTime when the utilization interval completed.')
ipadHDLCHist30RxHighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30RxHighUtilSeconds.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist30RxHighUtilSeconds.setDescription('The number of seconds in the interval that have been greater than or equal to the Rx high utilization parameter.')
ipadHDLCHist30RxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30RxUtilization.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist30RxUtilization.setDescription('The percent of Rx HDLC bandwidth utilized over the given interval.')
ipadHDLCHist30TxHighUtilSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30TxHighUtilSeconds.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist30TxHighUtilSeconds.setDescription('The number of seconds in the interval that have been greater than or equal to the Tx high utilization parameter.')
ipadHDLCHist30TxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 24, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadHDLCHist30TxUtilization.setStatus('current')
if mibBuilder.loadTexts: ipadHDLCHist30TxUtilization.setDescription('The percent of Tx HDLC bandwidth utilized over the given interval.')
ipadSmtpMailServer = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpMailServer.setStatus('current')
if mibBuilder.loadTexts: ipadSmtpMailServer.setDescription('IP Address of the .')
ipadSmtpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpDomainName.setStatus('current')
if mibBuilder.loadTexts: ipadSmtpDomainName.setDescription('Domain Name of the SMTP client.')
ipadSmtpMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpMailFrom.setStatus('current')
if mibBuilder.loadTexts: ipadSmtpMailFrom.setDescription('Name of the SMTP client, is used in the From section of the email.')
ipadSmtpRecipient1 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient1.setStatus('current')
if mibBuilder.loadTexts: ipadSmtpRecipient1.setDescription('Destination for the email.')
ipadSmtpRecipient2 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient2.setStatus('current')
if mibBuilder.loadTexts: ipadSmtpRecipient2.setDescription('Destination for the email.')
ipadSmtpRecipient3 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient3.setStatus('current')
if mibBuilder.loadTexts: ipadSmtpRecipient3.setDescription('Destination for the email.')
ipadSmtpRecipient4 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient4.setStatus('current')
if mibBuilder.loadTexts: ipadSmtpRecipient4.setDescription('Destination for the email.')
ipadSmtpRecipient5 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 29, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSmtpRecipient5.setStatus('current')
if mibBuilder.loadTexts: ipadSmtpRecipient5.setDescription('Destination for the email.')
ipadEncryptionEnable = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionEnable.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionEnable.setDescription('Allow disabling encryption.')
ipadEncryptionStartupKey = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionStartupKey.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionStartupKey.setDescription('')
ipadEncryptionStartupKeyConfirm = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionStartupKeyConfirm.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionStartupKeyConfirm.setDescription('')
ipadEncryptionType = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blowfish", 1), ("des", 2), ("triple-des", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionType.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionType.setDescription('')
ipadEncryptionKey1 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey1.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey1.setDescription('')
ipadEncryptionKey2 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey2.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey2.setDescription('')
ipadEncryptionKey3 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey3.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey3.setDescription('')
ipadEncryptionKey4 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey4.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey4.setDescription('')
ipadEncryptionKey5 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey5.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey5.setDescription('')
ipadEncryptionKey6 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey6.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey6.setDescription('')
ipadEncryptionKey7 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey7.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey7.setDescription('')
ipadEncryptionKey8 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey8.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey8.setDescription('')
ipadEncryptionKey9 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey9.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey9.setDescription('')
ipadEncryptionKey10 = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 56))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKey10.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKey10.setDescription('')
ipadEncryptionKeyLife = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 30, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEncryptionKeyLife.setStatus('current')
if mibBuilder.loadTexts: ipadEncryptionKeyLife.setDescription('')
ipadAutoLearnDS0Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1), )
if mibBuilder.loadTexts: ipadAutoLearnDS0Table.setStatus('current')
if mibBuilder.loadTexts: ipadAutoLearnDS0Table.setDescription('The ipad Auto Learn DS0 Config table.')
ipadAutoLearnDS0TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadAutoLearnDS0Index"))
if mibBuilder.loadTexts: ipadAutoLearnDS0TableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadAutoLearnDS0TableEntry.setDescription('An entry in the ipad Auto Learn DS0 Config table.')
ipadAutoLearnDS0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadAutoLearnDS0Index.setStatus('current')
if mibBuilder.loadTexts: ipadAutoLearnDS0Index.setDescription('The MIB-II ifIndex into the Auto Learn DS0 Config table.')
ipadAutoLearnDS0Boot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("carrierDown", 4), ("serviceDown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAutoLearnDS0Boot.setStatus('current')
if mibBuilder.loadTexts: ipadAutoLearnDS0Boot.setDescription('Select when to automatically learn DS0 assignments: disable - Do not automatically learn DS0s enable - Learn on boot carrierDown - Learn on boot and while the ifIndex carrier is down serviceDown - Learn on boot and while the first service on ifIndex is down')
ipadAutoLearnDS0Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("learnAs56K", 3), ("learnAs64K", 4), ("learnAsVoice", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAutoLearnDS0Rate.setStatus('current')
if mibBuilder.loadTexts: ipadAutoLearnDS0Rate.setDescription("Select the rate of the learned DS0's.")
ipadAutoLearnDS0Command = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("learnNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadAutoLearnDS0Command.setStatus('current')
if mibBuilder.loadTexts: ipadAutoLearnDS0Command.setDescription("The set values perform the following actions: learnNow(2) - Attempt to learn the active DS0's now.")
ipadUnitAccessTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1), )
if mibBuilder.loadTexts: ipadUnitAccessTable.setStatus('current')
if mibBuilder.loadTexts: ipadUnitAccessTable.setDescription('The ipad Unit Access table.')
ipadUnitAccessTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadAutoLearnDS0Index"))
if mibBuilder.loadTexts: ipadUnitAccessTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadUnitAccessTableEntry.setDescription('An entry in the ipad Unit Access table.')
ipadUnitAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUnitAccessIndex.setStatus('current')
if mibBuilder.loadTexts: ipadUnitAccessIndex.setDescription('The MIB-II Index into the Unit Access table.')
ipadUnitAccessIpa = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUnitAccessIpa.setStatus('current')
if mibBuilder.loadTexts: ipadUnitAccessIpa.setDescription('IP Address of Source to allow Unit Access.')
ipadUnitAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 32, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUnitAccessMask.setStatus('current')
if mibBuilder.loadTexts: ipadUnitAccessMask.setDescription('Mask of Source to allow Unit Access.')
ipadTFTPDownloadServerIpa = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 33, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTFTPDownloadServerIpa.setStatus('current')
if mibBuilder.loadTexts: ipadTFTPDownloadServerIpa.setDescription('TFTP Server IP Address.')
ipadTFTPDownloadFileName = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 33, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTFTPDownloadFileName.setStatus('current')
if mibBuilder.loadTexts: ipadTFTPDownloadFileName.setDescription('TFTP Filename to Download or Upload.')
ipadTFTPDownloadAction = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 33, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("getfile", 1), ("putfile", 2), ("abort", 3), ("idle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTFTPDownloadAction.setStatus('current')
if mibBuilder.loadTexts: ipadTFTPDownloadAction.setDescription('TFTP Action to be performed.')
ipadTFTPDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 33, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("gettingfile", 2), ("puttingfile", 3), ("aborting", 4), ("successful", 5), ("invalidFileName", 6), ("fileAccessFailed", 7), ("invalidFile", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTFTPDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: ipadTFTPDownloadStatus.setDescription('TFTP current status of action.')
ipadDLMConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 1))
ipadDLMConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("analyze", 2), ("live", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMConfigMode.setStatus('current')
if mibBuilder.loadTexts: ipadDLMConfigMode.setDescription('Data Link Monitor on/off switch. Toggles mode from analyze (static) to live (capture).')
ipadDLMConfigBufferManagement = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("wrap", 2), ("stopOnFull", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMConfigBufferManagement.setStatus('current')
if mibBuilder.loadTexts: ipadDLMConfigBufferManagement.setDescription('The DLM has a buffer of n messages. Settings this object to wrap(2) allows the buffer to wrap around and be a continous buffer. stopOnFull(3) forces the capture of packets to stop once the end of the buffer is reached.')
ipadDLMTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2), )
if mibBuilder.loadTexts: ipadDLMTable.setStatus('current')
if mibBuilder.loadTexts: ipadDLMTable.setDescription('The ipad Data Line Monitor configuration table.')
ipadDLMTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDLMServiceIndex"))
if mibBuilder.loadTexts: ipadDLMTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadDLMTableEntry.setDescription('An entry in the ipad DLM config table.')
ipadDLMServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMServiceIndex.setStatus('current')
if mibBuilder.loadTexts: ipadDLMServiceIndex.setDescription('The service index into the DLM table.')
ipadDLMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMEnable.setStatus('current')
if mibBuilder.loadTexts: ipadDLMEnable.setDescription('Enable/Disable the DLM on the specified service.')
ipadDLMTxRxFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("all", 2), ("transmitOnly", 3), ("receiveOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMTxRxFilter.setStatus('current')
if mibBuilder.loadTexts: ipadDLMTxRxFilter.setDescription('Allows the user to capture only received, transmit, or both.')
ipadDLMPatternEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMPatternEnable.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPatternEnable.setDescription('Enable/Disable the search for a specific pattern.')
ipadDLMPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMPattern.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPattern.setDescription('The pattern to search for in the captured packets.')
ipadDLMPatternMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMPatternMask.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPatternMask.setDescription('The mask to use with ipadDLMPattern to search for in the captured packets.')
ipadDLMPatternOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLMPatternOffset.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPatternOffset.setDescription('The offset into the packet to search for the pattern.')
ipadDLMPacketTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3), )
if mibBuilder.loadTexts: ipadDLMPacketTable.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPacketTable.setDescription('The ipad Data Link Monitor packet table.')
ipadDLMPacketTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1), ).setIndexNames((0, "IPADv2-MIB", "ipadDLMPacketIndex"))
if mibBuilder.loadTexts: ipadDLMPacketTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPacketTableEntry.setDescription('An entry in the ipad DLM packet table.')
ipadDLMPacketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketIndex.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPacketIndex.setDescription('The service index into the DLM table.')
ipadDLMPacketServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketServiceIndex.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPacketServiceIndex.setDescription('The service index the packet was captured on.')
ipadDLMPacketTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketTimestamp.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPacketTimestamp.setDescription('The time that the packet was captured.')
ipadDLMPacketDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketDataDirection.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPacketDataDirection.setDescription('The direction the data was goin in respect to the interface.')
ipadDLMPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketSize.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPacketSize.setDescription('The size of the captured packet.')
ipadDLMPacketData = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 34, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLMPacketData.setStatus('current')
if mibBuilder.loadTexts: ipadDLMPacketData.setDescription('The contents of the first 32 bytes of the captured packet.')
ipadOrigPingCommand = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("stop", 2), ("start", 3), ("clearStats", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingCommand.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingCommand.setDescription('Action command to start/stop sending PING messages.')
ipadOrigPingDestIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingDestIPAddr.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingDestIPAddr.setDescription('Destination IP address of sent PING request messages.')
ipadOrigPingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingTimeout.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingTimeout.setDescription('Number of seconds to wait for a reply to a PING request message.')
ipadOrigPingSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingSize.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingSize.setDescription('Number of bytes in a PING request message data field.')
ipadOrigPingToSend = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadOrigPingToSend.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingToSend.setDescription('Number of PING request messages to send.')
ipadOrigPingSent = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingSent.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingSent.setDescription('Number of PING request messages sent.')
ipadOrigPingReplies = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingReplies.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingReplies.setDescription('Number of PING response messages received.')
ipadOrigPingDelayMin = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingDelayMin.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingDelayMin.setDescription('Minimum PING round trip delay in milliseconds.')
ipadOrigPingDelayAvg = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingDelayAvg.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingDelayAvg.setDescription('Average PING round trip delay in milliseconds.')
ipadOrigPingDelayMax = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingDelayMax.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingDelayMax.setDescription('Maximum PING round trip delay in milliseconds.')
ipadOrigPingReport = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingReport.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingReport.setDescription('ASCII status report of originate PING activity.')
ipadOrigPingExceptReport = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 35, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadOrigPingExceptReport.setStatus('current')
if mibBuilder.loadTexts: ipadOrigPingExceptReport.setDescription('ASCII status report of last originate PING exception received.')
mibBuilder.exportSymbols("IPADv2-MIB", ipadHDLCTxHighAlarmDeclared=ipadHDLCTxHighAlarmDeclared, ipadDS0ConfigIndex=ipadDS0ConfigIndex, ipadModemDialCallbackRedialDelay=ipadModemDialCallbackRedialDelay, ipadDS0ConfigTableEntry=ipadDS0ConfigTableEntry, ipadDLCIstatsDelayPeak=ipadDLCIstatsDelayPeak, ipadDdsLOSSAlarmDeclared=ipadDdsLOSSAlarmDeclared, ipadDbuRevertDelay=ipadDbuRevertDelay, ipadSCADACfgDataDirection=ipadSCADACfgDataDirection, ipadDbuActivated=ipadDbuActivated, ipadTFTPDownloadStatus=ipadTFTPDownloadStatus, ipadPPPCfgSubnetMask=ipadPPPCfgSubnetMask, ipadDbuDailyDayOfWeek=ipadDbuDailyDayOfWeek, ipadDLMPacketServiceIndex=ipadDLMPacketServiceIndex, ipadSCADACfgMessageSize=ipadSCADACfgMessageSize, ipadHDLCHist24Table=ipadHDLCHist24Table, ipadDS0Hist30HighUtilSeconds=ipadDS0Hist30HighUtilSeconds, ipadTCPServerHostAccessIndex=ipadTCPServerHostAccessIndex, ipadModemDataDialingScript=ipadModemDataDialingScript, ipadDLCIstatsRemoteDataOfferedWithinCIR=ipadDLCIstatsRemoteDataOfferedWithinCIR, ipadIPTopNStatsTxFrames=ipadIPTopNStatsTxFrames, ipadDLCItxCIRexceeded=ipadDLCItxCIRexceeded, ipadMiscShdslStatusIndex=ipadMiscShdslStatusIndex, ipadDLMTable=ipadDLMTable, ipadServiceTableEntry=ipadServiceTableEntry, ipadPPPCfgNegPAP=ipadPPPCfgNegPAP, ipadFrPortStatsRx20PercentSec=ipadFrPortStatsRx20PercentSec, ipadModemDialUsername=ipadModemDialUsername, ipadFrPortStatsRxMgmtOctets=ipadFrPortStatsRxMgmtOctets, ipadDLCIstatsCompressionTxOctetsOut=ipadDLCIstatsCompressionTxOctetsOut, ipadDLCIstats40PercentSec=ipadDLCIstats40PercentSec, ipadSCADAStatsRxParityErrors=ipadSCADAStatsRxParityErrors, ipadFrPortStatsRxInvalid=ipadFrPortStatsRxInvalid, ipadDbuTrap=ipadDbuTrap, ipadMiscShdslConfigIndex=ipadMiscShdslConfigIndex, ipadHDLCHist30Timestamp=ipadHDLCHist30Timestamp, ipadOrigPingCommand=ipadOrigPingCommand, ipadOrigPingDelayAvg=ipadOrigPingDelayAvg, ipadDLMPacketData=ipadDLMPacketData, ipadTrapDestination=ipadTrapDestination, ipadDLCIRxCongestionExceeded=ipadDLCIRxCongestionExceeded, ipadDLCIstatsAvgPercent=ipadDLCIstatsAvgPercent, ipadDbuDailyTable=ipadDbuDailyTable, ipadUserDLCI=ipadUserDLCI, ipadEndpointTable=ipadEndpointTable, ipadUserIPMask=ipadUserIPMask, ipadHDLCConfigRxLowUtil=ipadHDLCConfigRxLowUtil, ipadHDLCConfigServiceBPS=ipadHDLCConfigServiceBPS, ipadDLCIstatsDDRBE=ipadDLCIstatsDDRBE, ipadEndpointIndex=ipadEndpointIndex, ipadFrPortStatsTx20PercentSec=ipadFrPortStatsTx20PercentSec, ipadSCADADevLstDevIndex=ipadSCADADevLstDevIndex, ipadDLCIstatsPeriod=ipadDLCIstatsPeriod, ipadSmtpMailFrom=ipadSmtpMailFrom, ipadFrPortStatsPeriod=ipadFrPortStatsPeriod, ipadDLCIstatsFDRBE=ipadDLCIstatsFDRBE, ipadDLCIstatsTxFrames=ipadDLCIstatsTxFrames, ipadTFTPDownloadFileName=ipadTFTPDownloadFileName, ipadDLCIstatsInstantPercent=ipadDLCIstatsInstantPercent, ipadPPPCfgTableEntry=ipadPPPCfgTableEntry, ipadSCADADevLstTable=ipadSCADADevLstTable, ipadDbuActivator1=ipadDbuActivator1, ipadDLCIstatsRxFECN=ipadDLCIstatsRxFECN, ipadDS0HighAlarmDeclared=ipadDS0HighAlarmDeclared, ipadPPPCHAPTable=ipadPPPCHAPTable, ipadDLCICompressionStatus=ipadDLCICompressionStatus, ipadSoftKeyTableEntry=ipadSoftKeyTableEntry, ipadDLCITable=ipadDLCITable, ipadHDLCHist24TableEntry=ipadHDLCHist24TableEntry, ipadPPPPAPTableIndex=ipadPPPPAPTableIndex, ipadDLCIstatsDelayAverage=ipadDLCIstatsDelayAverage, ipadEndpointAddEndpoint=ipadEndpointAddEndpoint, ipadPktSwCfgAutoDiscovery=ipadPktSwCfgAutoDiscovery, ipadHDLCConfigTxHighUtilAlarm=ipadHDLCConfigTxHighUtilAlarm, ipadPktSwCfgnN1=ipadPktSwCfgnN1, ipadFrPortStatsAverage=ipadFrPortStatsAverage, ipadEndpointBackup=ipadEndpointBackup, ipadUserTable=ipadUserTable, ipadSoftKeyAcronym=ipadSoftKeyAcronym, ipadSCADACfgIdleCharDelay=ipadSCADACfgIdleCharDelay, ipadUnitAccessTableEntry=ipadUnitAccessTableEntry, ipadFrPortStatsTx80PercentSec=ipadFrPortStatsTx80PercentSec, ipadDdsOOSSAlarmDeclared=ipadDdsOOSSAlarmDeclared, ipadDLCIstatsUAS=ipadDLCIstatsUAS, ipadFrPortTxAlmThreshold=ipadFrPortTxAlmThreshold, ipadHDLCHist30TableEntry=ipadHDLCHist30TableEntry, ipadDLCIcongestion=ipadDLCIcongestion, ipadDLCIRemoteFramesOfferedWithinBE=ipadDLCIRemoteFramesOfferedWithinBE, ipadUserIPStatStartTime=ipadUserIPStatStartTime, ipadPPPCfgAllowCHAP=ipadPPPCfgAllowCHAP, ipadDS0Config=ipadDS0Config, ipadMiscPortSettingsIndex=ipadMiscPortSettingsIndex, ipadSCADAStatsRxFramingErrors=ipadSCADAStatsRxFramingErrors, ipadModemDataSyncScript=ipadModemDataSyncScript, ipadPPPPAPTablePassword=ipadPPPPAPTablePassword, ipadFrPortStatsTxMgmtFrames=ipadFrPortStatsTxMgmtFrames, ipadPPPCHAPTableIndex=ipadPPPCHAPTableIndex, ipadDLCIpropOffset=ipadDLCIpropOffset, ipadDLCIstatsMaxPercent=ipadDLCIstatsMaxPercent, ipadFrPortStatsTx60PercentSec=ipadFrPortStatsTx60PercentSec, ipadOrigPing=ipadOrigPing, ipadDbuTrapDelay=ipadDbuTrapDelay, ipadAutoLearnDS0Command=ipadAutoLearnDS0Command, ipadModemDataTableEntry=ipadModemDataTableEntry, ipadSCADACfgAddDevLst=ipadSCADACfgAddDevLst, ipadMiscShdslConnectionStatus=ipadMiscShdslConnectionStatus, ipadDLCIstatsAverage=ipadDLCIstatsAverage, ipadIPTopNStatsTable=ipadIPTopNStatsTable, ipadDLCIUASAlarm=ipadDLCIUASAlarm, ipadDLMPacketTableEntry=ipadDLMPacketTableEntry, ipadTCPServerConnIndex=ipadTCPServerConnIndex, ipadt1e1OOFSAlarmDeclared=ipadt1e1OOFSAlarmDeclared, ipadDdsBPVSAlarmDeclared=ipadDdsBPVSAlarmDeclared, ipadDLMEnable=ipadDLMEnable, ipadDLCIstatsCompressionTxRatio=ipadDLCIstatsCompressionTxRatio, ipadServiceIndex=ipadServiceIndex, ipadEndpointName=ipadEndpointName, ipadFrPortRxInvalidFramesExceeded=ipadFrPortRxInvalidFramesExceeded, ipadDLCICompressionRxOctetsIn=ipadDLCICompressionRxOctetsIn, ipadUserIPStatReportNumber=ipadUserIPStatReportNumber, ipadOrigPingDestIPAddr=ipadOrigPingDestIPAddr, ipadServiceStatus=ipadServiceStatus, ipadUserIPStatDiscardType=ipadUserIPStatDiscardType, ipadOrigPingSent=ipadOrigPingSent, ipadDlciRxBECNinCIRAlarm=ipadDlciRxBECNinCIRAlarm, ipadUserIPStatTimeDuration=ipadUserIPStatTimeDuration, ipadt1e1UASAlarmDeclared=ipadt1e1UASAlarmDeclared, ipadTCPServer=ipadTCPServer, ipadOrigPingReport=ipadOrigPingReport, ipadDLCIstatsTimeStamp=ipadDLCIstatsTimeStamp, ipadDLCIstatsEntry=ipadDLCIstatsEntry, ipadPPPCHAPTableUsername=ipadPPPCHAPTableUsername, ipadDS0Hist30HistoricalIndex=ipadDS0Hist30HistoricalIndex, ipadMiscShdslStatusTable=ipadMiscShdslStatusTable, ipadPPP=ipadPPP, ipadPktSwCfgCIREE=ipadPktSwCfgCIREE, ipadHDLCConfigTxHighUtilCount=ipadHDLCConfigTxHighUtilCount, ipadTCPServerHostAccessTable=ipadTCPServerHostAccessTable, ipadServiceifIndex=ipadServiceifIndex, ipadChannelService=ipadChannelService, ipadDLCIstatsDLCI=ipadDLCIstatsDLCI, ipadUserStatsRxOctets=ipadUserStatsRxOctets, ipadSCADACfgDeleteDevLst=ipadSCADACfgDeleteDevLst, ipadIPTopNStatsEntry=ipadIPTopNStatsEntry, ipadHDLCTxLowAlarmDeclared=ipadHDLCTxLowAlarmDeclared, ipadDLMConfigBufferManagement=ipadDLMConfigBufferManagement, ipadt1e1RASAlarmExists=ipadt1e1RASAlarmExists, ipadMiscShdslAutomaticRetrain=ipadMiscShdslAutomaticRetrain, ipadDLCIstatsCompressionTxOctetsIn=ipadDLCIstatsCompressionTxOctetsIn, ipadHDLCHist30Index=ipadHDLCHist30Index, ipadModemDataSetupScript5=ipadModemDataSetupScript5, ipadDbuDailyIndex=ipadDbuDailyIndex, ipadDS0Hist24=ipadDS0Hist24, ipadFrPortActive=ipadFrPortActive, ipadDbuDailyLength=ipadDbuDailyLength, ipadFrPortRxInvAlmThreshold=ipadFrPortRxInvAlmThreshold, ipadEncryptionKey4=ipadEncryptionKey4, ipadDS0Hist24TableEntry=ipadDS0Hist24TableEntry, ipadFrPortStatsRxMgmtFrames=ipadFrPortStatsRxMgmtFrames, ipadUserStatsTxRatePeak=ipadUserStatsTxRatePeak, ipadPPPCfgPortIpAddress=ipadPPPCfgPortIpAddress, ipadModemDialCallbackTimeout=ipadModemDialCallbackTimeout, ipadUserIPPort=ipadUserIPPort, ipadt1e1SESAlarmDeclared=ipadt1e1SESAlarmDeclared, ipadDLCIstatsPeak=ipadDLCIstatsPeak, ipadChannelTable=ipadChannelTable, ipadSCADADevLst=ipadSCADADevLst, ipadTrapDestIndex=ipadTrapDestIndex, ipadPktSwCfgDefCIR=ipadPktSwCfgDefCIR, ipadTrapDestTableEntry=ipadTrapDestTableEntry, ipadDbuDailyStart=ipadDbuDailyStart, ipadDLMPatternMask=ipadDLMPatternMask, ipadFrPortStatsRxFrames=ipadFrPortStatsRxFrames, ipadChannelifIndex=ipadChannelifIndex, ipadEndpointDLCInumber=ipadEndpointDLCInumber, ipadMiscBootupConsoleAvail=ipadMiscBootupConsoleAvail, ipadTCPServerDeleteConnEntry=ipadTCPServerDeleteConnEntry, ipadIPTopNStatsRxOctets=ipadIPTopNStatsRxOctets, ipadHDLCHist24=ipadHDLCHist24, ipadMiscLANStatus=ipadMiscLANStatus, ipadModemDataSetupScript=ipadModemDataSetupScript, ipadFrPortStatsService=ipadFrPortStatsService, ipadFrPortStatsTxInstantPercent=ipadFrPortStatsTxInstantPercent, ipadDLCIremoteEquipActive=ipadDLCIremoteEquipActive, ipadFrPort=ipadFrPort, ipadSCADAStatsTableEntry=ipadSCADAStatsTableEntry, ipadSCADADevLstEntryStatus=ipadSCADADevLstEntryStatus, ipadDS0Hist30Index=ipadDS0Hist30Index, ipadDS0Hist30Table=ipadDS0Hist30Table, ipadHDLCConfigRxHighUtilCount=ipadHDLCConfigRxHighUtilCount, ipadHDLCConfigRxHighUtilAlarm=ipadHDLCConfigRxHighUtilAlarm, ipadHDLCConfigTxHighUtil=ipadHDLCConfigTxHighUtil, ipadDLMPacketIndex=ipadDLMPacketIndex, ipadDLCIstats60PercentSec=ipadDLCIstats60PercentSec, ipadEncryptionType=ipadEncryptionType, ipadDS0ConfigHighUtilCount=ipadDS0ConfigHighUtilCount, ipadMiscShdslConfigTable=ipadMiscShdslConfigTable, ipadFrPortStatsRxInstantPercent=ipadFrPortStatsRxInstantPercent, ipadPPPCHAPTableSecret=ipadPPPCHAPTableSecret, ipadHDLCHist24HistoricalIndex=ipadHDLCHist24HistoricalIndex, ipadFrPortStatsRxMaxPercent=ipadFrPortStatsRxMaxPercent, ipadDLCItxExBeAlarm=ipadDLCItxExBeAlarm, ipadDLCIstatsCompressionRxOctetsOut=ipadDLCIstatsCompressionRxOctetsOut, ipadDLCIrxBECNinCIR=ipadDLCIrxBECNinCIR, ipadOrigPingReplies=ipadOrigPingReplies, ipadTFTPDownloadServerIpa=ipadTFTPDownloadServerIpa, ipadOrigPingDelayMax=ipadOrigPingDelayMax, ipadEndpointRefSLP=ipadEndpointRefSLP, ipadMiscPortSettings=ipadMiscPortSettings, ipadPktSwCfgService=ipadPktSwCfgService, ipadMiscEnableLEDs=ipadMiscEnableLEDs, ipadPPPCfgEndpoint=ipadPPPCfgEndpoint, ipadMiscShdslDetailedConnectionStatusPair2=ipadMiscShdslDetailedConnectionStatusPair2, ipadHDLCHist30TxHighUtilSeconds=ipadHDLCHist30TxHighUtilSeconds, ipadHDLCConfigRxHighUtil=ipadHDLCConfigRxHighUtil, ipadUserTxAlmThreshold=ipadUserTxAlmThreshold, ipadUserIPStatTimeRemaining=ipadUserIPStatTimeRemaining, ipadDLCIstatsValidIntervals=ipadDLCIstatsValidIntervals, ipadDLCIstatsFDRCIR=ipadDLCIstatsFDRCIR, ipadDS0ConfigLowUtilAlarm=ipadDS0ConfigLowUtilAlarm, ipadDLCIencapsulation=ipadDLCIencapsulation, ipadFrPortStatsTimeStamp=ipadFrPortStatsTimeStamp, ipadTCPServerHostAccessTableEntry=ipadTCPServerHostAccessTableEntry, ipadDLCIstatsDdrBe=ipadDLCIstatsDdrBe, ipadSCADAStatsTable=ipadSCADAStatsTable, ipadPktSwCfgnN3=ipadPktSwCfgnN3, ipadAutoLearnDS0Rate=ipadAutoLearnDS0Rate, ipadModemDialTableIndex=ipadModemDialTableIndex, ipadDS0Hist30=ipadDS0Hist30, ipadDLCItxExCIRThreshold=ipadDLCItxExCIRThreshold, ipadDS0ConfigLowUtil=ipadDS0ConfigLowUtil, ipadUserIPAddress=ipadUserIPAddress, ipadDS0Hist24Timestamp=ipadDS0Hist24Timestamp, ipadDLCIremote=ipadDLCIremote, ipadDLCIstatsFramesReceived=ipadDLCIstatsFramesReceived, ipadPktSwCfgTableEntry=ipadPktSwCfgTableEntry, ipadDLCIDataReceived=ipadDLCIDataReceived, ipadFrPortLMIMode=ipadFrPortLMIMode, ipadFrPortStatsTxStatInq=ipadFrPortStatsTxStatInq, ipadPPPPAPTable=ipadPPPPAPTable, ipadDLCIrxMon=ipadDLCIrxMon, ipadModemDialCallbackChalScript=ipadModemDialCallbackChalScript, ipadFrPortStatsRx80PercentSec=ipadFrPortStatsRx80PercentSec, ipadModem=ipadModem, ipadHDLCConfigRxHighUtilStatus=ipadHDLCConfigRxHighUtilStatus, ipadMiscShdslEOCInMessages=ipadMiscShdslEOCInMessages, ipadModemDataSetupScript4=ipadModemDataSetupScript4, ipadDLCIstatsRoundTripTimeouts=ipadDLCIstatsRoundTripTimeouts, ipadSmtpRecipient3=ipadSmtpRecipient3, ipadDLCIdEctrl=ipadDLCIdEctrl, ipadHDLCRxLowAlarmDeclared=ipadHDLCRxLowAlarmDeclared, ipadDLCIremoteSOSAlarm=ipadDLCIremoteSOSAlarm, ipadUserIPStatRequestedReportSize=ipadUserIPStatRequestedReportSize, ipadEncryptionKey1=ipadEncryptionKey1, ipadPPPCfgNegAddress=ipadPPPCfgNegAddress)
mibBuilder.exportSymbols("IPADv2-MIB", ipadModemDataModemName=ipadModemDataModemName, ipadIPTopNStatsRxFrames=ipadIPTopNStatsRxFrames, ipadPPPCfgNegIpAddress=ipadPPPCfgNegIpAddress, ipadOrigPingExceptReport=ipadOrigPingExceptReport, ipadUserTxAlmAlarm=ipadUserTxAlmAlarm, ipadSmtpDomainName=ipadSmtpDomainName, ipadFrPortStatsRxBECN=ipadFrPortStatsRxBECN, ipadModemDialTable=ipadModemDialTable, ipadHDLCConfigReset=ipadHDLCConfigReset, ipadHDLCHist24TxHighUtilSeconds=ipadHDLCHist24TxHighUtilSeconds, ipadDLMPatternOffset=ipadDLMPatternOffset, ipadFrPortStatsTxMgmtOctets=ipadFrPortStatsTxMgmtOctets, ipadPPPCfgNegMagic=ipadPPPCfgNegMagic, ipadSCADAStatsRxChars=ipadSCADAStatsRxChars, ipadHDLCHist30RxUtilization=ipadHDLCHist30RxUtilization, ipadMiscEnableSupervisoryPort=ipadMiscEnableSupervisoryPort, ipadEncryptionKeyLife=ipadEncryptionKeyLife, ipadChannelRate=ipadChannelRate, ipadChannelIdlePattern=ipadChannelIdlePattern, ipadDLCIinBand=ipadDLCIinBand, ipadDLCICompressionTxOctetsOut=ipadDLCICompressionTxOctetsOut, ipadServiceType=ipadServiceType, ipadUserFilterByIPAddress=ipadUserFilterByIPAddress, ipadUnitAccessMask=ipadUnitAccessMask, ipadModemDialChallengeScript=ipadModemDialChallengeScript, ipadPktSwitch=ipadPktSwitch, ipadDLCIRemoteDataOfferedWithinBE=ipadDLCIRemoteDataOfferedWithinBE, ipadModemDialAbortTimer=ipadModemDialAbortTimer, ipadDS0Hist30TableEntry=ipadDS0Hist30TableEntry, ipadFrPortStatsTable=ipadFrPortStatsTable, ipadDLMConfig=ipadDLMConfig, ipadPPPCfgNegotiationInit=ipadPPPCfgNegotiationInit, ipadDLCIremoteUnit=ipadDLCIremoteUnit, ipadPPPCfgNegCHAP=ipadPPPCfgNegCHAP, ipadEncryptionKey6=ipadEncryptionKey6, ipadOrigPingTimeout=ipadOrigPingTimeout, ipadAutoLearnDS0=ipadAutoLearnDS0, ipadRouter=ipadRouter, ipadDLCIstatsCompressionRxOctetsIn=ipadDLCIstatsCompressionRxOctetsIn, ipadDataLineMonitor=ipadDataLineMonitor, ipadSvcAware=ipadSvcAware, ipadTCPServerAddConnEntry=ipadTCPServerAddConnEntry, ipadFrPortStatsTx100PercentSec=ipadFrPortStatsTx100PercentSec, ipadFrPortStatsPeak=ipadFrPortStatsPeak, ipadAutoLearnDS0TableEntry=ipadAutoLearnDS0TableEntry, ipadEndpointRemoteIpMask=ipadEndpointRemoteIpMask, ipadIPTopNStatsIndex=ipadIPTopNStatsIndex, ipadIPTopNStatsTxOctets=ipadIPTopNStatsTxOctets, ipadSCADAConfigTable=ipadSCADAConfigTable, ipadDLCI=ipadDLCI, ipadMiscShdslTiming=ipadMiscShdslTiming, ipadHDLCHist24Timestamp=ipadHDLCHist24Timestamp, ipadServicePair=ipadServicePair, ipadDLCIRemoteIPAddress=ipadDLCIRemoteIPAddress, ipadTCPServerConnTableEntry=ipadTCPServerConnTableEntry, ipadDhcp=ipadDhcp, ipadBridge=ipadBridge, ipadDLMPatternEnable=ipadDLMPatternEnable, ipadDLCIstatsTxMgmtFrames=ipadDLCIstatsTxMgmtFrames, ipadDLCIstatsFdrCir=ipadDLCIstatsFdrCir, ipadIPTopNStatsTimestamp=ipadIPTopNStatsTimestamp, ipadFrPortStatsEntry=ipadFrPortStatsEntry, ipadSoftKeyTable=ipadSoftKeyTable, ipadHDLCConfigRxHighUtilThreshold=ipadHDLCConfigRxHighUtilThreshold, ipadEncryption=ipadEncryption, ipadSCADACfgInputTerminator=ipadSCADACfgInputTerminator, ipadSCADADevLstTableEntry=ipadSCADADevLstTableEntry, ipadEncryptionKey2=ipadEncryptionKey2, ipadPPPCfgPAPPassword=ipadPPPCfgPAPPassword, ipadUser=ipadUser, ipadt1e1AISAlarmExists=ipadt1e1AISAlarmExists, ipadPktSwCfgRoundTripDelayRate=ipadPktSwCfgRoundTripDelayRate, ipadDS0ConfigNumberDS0=ipadDS0ConfigNumberDS0, ipadDLCIstatsRemoteDataOfferedWithinBE=ipadDLCIstatsRemoteDataOfferedWithinBE, ipadHDLCHist24Index=ipadHDLCHist24Index, ipadDLCITableEntry=ipadDLCITableEntry, ipadDLCIUASThreshold=ipadDLCIUASThreshold, ipadDS0Hist30Timestamp=ipadDS0Hist30Timestamp, ipadHDLCHist30=ipadHDLCHist30, ipadPPPCfgInactivityTimer=ipadPPPCfgInactivityTimer, ipadDLCIrxCongAlarm=ipadDLCIrxCongAlarm, ipadHDLCHist24TxUtilization=ipadHDLCHist24TxUtilization, ipadModemDialCallbackRspScript=ipadModemDialCallbackRspScript, ipadt1e1BPVSAlarmDeclared=ipadt1e1BPVSAlarmDeclared, ipadSmtpMailServer=ipadSmtpMailServer, ipadFrPortTableEntry=ipadFrPortTableEntry, ipadDLCIRemoteDataOfferedWithinCIR=ipadDLCIRemoteDataOfferedWithinCIR, ipadSmtpRecipient5=ipadSmtpRecipient5, ipadUserStatsTimeStamp=ipadUserStatsTimeStamp, ipadPPPCfgACCM=ipadPPPCfgACCM, ipadSCADAStatsIndex=ipadSCADAStatsIndex, ipadDLMPattern=ipadDLMPattern, ipadFrPortRxThroughputExceeded=ipadFrPortRxThroughputExceeded, ipadPPPCfgNegIpMask=ipadPPPCfgNegIpMask, ipadSCADADevLstEndpointName=ipadSCADADevLstEndpointName, ipadUserVci=ipadUserVci, ipadDLMPacketSize=ipadDLMPacketSize, ipadModemDataHangupScript=ipadModemDataHangupScript, ipadPktSwCfgLnkMgmtType=ipadPktSwCfgLnkMgmtType, ipadDLCIstatsRxDE=ipadDLCIstatsRxDE, ipadPPPCfgNegIPCPCompression=ipadPPPCfgNegIPCPCompression, ipadUserStatsPeriod=ipadUserStatsPeriod, ipadDLMTableEntry=ipadDLMTableEntry, ipadt1e1CSSAlarmDeclared=ipadt1e1CSSAlarmDeclared, ipadDLMPacketTable=ipadDLMPacketTable, ipadDLMPacketDataDirection=ipadDLMPacketDataDirection, ipadTrapDest=ipadTrapDest, ipadDLCIstatsRemoteFramesOfferedWithinCIR=ipadDLCIstatsRemoteFramesOfferedWithinCIR, ipadUserStatsEntry=ipadUserStatsEntry, ipadFrPortStatsRxAvgPercent=ipadFrPortStatsRxAvgPercent, ipadIPTopNStatsAddress=ipadIPTopNStatsAddress, ipadDdsFDLSAlarmDeclared=ipadDdsFDLSAlarmDeclared, ipadHDLCConfig=ipadHDLCConfig, ipadHDLCConfigTxLowUtil=ipadHDLCConfigTxLowUtil, ipadServiceAddService=ipadServiceAddService, ipadHDLCConfigResetTimer=ipadHDLCConfigResetTimer, ipadFrPortStatsRxFECN=ipadFrPortStatsRxFECN, ipadFrPortRxAlmThreshold=ipadFrPortRxAlmThreshold, ipadDLCItxBEexceeded=ipadDLCItxBEexceeded, ipadSCADAStatsRxMsgs=ipadSCADAStatsRxMsgs, ipadHDLCHist30TxUtilization=ipadHDLCHist30TxUtilization, ipadUserStatsTxOctets=ipadUserStatsTxOctets, ipadDLCIRoundTripDelaySize=ipadDLCIRoundTripDelaySize, ipadHDLCConfigTableEntry=ipadHDLCConfigTableEntry, ipadDbuStatus=ipadDbuStatus, ipadFrPortLMIType=ipadFrPortLMIType, ipadSoftKeyIndex=ipadSoftKeyIndex, ipadDLCIenableDelay=ipadDLCIenableDelay, ipadMisc=ipadMisc, ipadDLCItxExBeThreshold=ipadDLCItxExBeThreshold, ipadDLCIproprietary=ipadDLCIproprietary, PYSNMP_MODULE_ID=ipad, ipadServiceDeleteService=ipadServiceDeleteService, ipadEndpointTableEntry=ipadEndpointTableEntry, ipadUserService=ipadUserService, ipadDbuActivator2=ipadDbuActivator2, ipadPktSwCfgLinkInjection=ipadPktSwCfgLinkInjection, ipadMiscShdslEOCOutMessages=ipadMiscShdslEOCOutMessages, ipadUserStatsTxFrames=ipadUserStatsTxFrames, ipadEncryptionEnable=ipadEncryptionEnable, ipadPPPCHAPTableEntry=ipadPPPCHAPTableEntry, ipadDS0Hist24HistoricalIndex=ipadDS0Hist24HistoricalIndex, ipadTCPServerConnLocalPort=ipadTCPServerConnLocalPort, ipadHDLCConfigTxHighUtilStatus=ipadHDLCConfigTxHighUtilStatus, ipadPPPCfgAllowPAP=ipadPPPCfgAllowPAP, ipadDLCIstatsRxFrames=ipadDLCIstatsRxFrames, ipadHDLCHist24RxUtilization=ipadHDLCHist24RxUtilization, ipadDLCIstatsDDRCIR=ipadDLCIstatsDDRCIR, ipadDLCIservice=ipadDLCIservice, ipadFrPortStatsRx40PercentSec=ipadFrPortStatsRx40PercentSec, ipadModemDialAnswerRings=ipadModemDialAnswerRings, ipadMiscShdslStatusEntry=ipadMiscShdslStatusEntry, ipadPktSwCfgDefExBurst=ipadPktSwCfgDefExBurst, ipadUserAlarmReset=ipadUserAlarmReset, ipadModemDataTableIndex=ipadModemDataTableIndex, ipadEncryptionKey9=ipadEncryptionKey9, ipadHDLCConfigTable=ipadHDLCConfigTable, ipadSoftKeyDescription=ipadSoftKeyDescription, ipadModemDialDataIndex=ipadModemDialDataIndex, ipadAutoLearnDS0Boot=ipadAutoLearnDS0Boot, ipadSCADAStatsClear=ipadSCADAStatsClear, ipadUserFilterByIPPort=ipadUserFilterByIPPort, ipadDLCIactive=ipadDLCIactive, ipadModemDataSetupScript3=ipadModemDataSetupScript3, ipadService=ipadService, ipadUserStatsTxRateAverage=ipadUserStatsTxRateAverage, ipadAutoLearnDS0Table=ipadAutoLearnDS0Table, ipadMiscShdslTerminalType=ipadMiscShdslTerminalType, ipadFrPortAlarmReset=ipadFrPortAlarmReset, ipadFrPortStatsRxStatResp=ipadFrPortStatsRxStatResp, ipadModemDialLoginScript=ipadModemDialLoginScript, ipadUserIPStatGrantedReportSize=ipadUserIPStatGrantedReportSize, ipadPPPCfgTable=ipadPPPCfgTable, ipadDbuTable=ipadDbuTable, ipadEndpointService=ipadEndpointService, ipadSCADAConfigTableEntry=ipadSCADAConfigTableEntry, ipadPktSwCfgNormalTxQueueSize=ipadPktSwCfgNormalTxQueueSize, ipadUserTableEntry=ipadUserTableEntry, ipadUserFilterByDLCI=ipadUserFilterByDLCI, ipadTCPServerHostAccessIPAddr=ipadTCPServerHostAccessIPAddr, ipadHDLCRxHighAlarmDeclared=ipadHDLCRxHighAlarmDeclared, ipadFrPortStatsRxInvLMI=ipadFrPortStatsRxInvLMI, ipadDLMPacketTimestamp=ipadDLMPacketTimestamp, ipadFrPortStatsRxStatInq=ipadFrPortStatsRxStatInq, ipadHDLCConfigService=ipadHDLCConfigService, ipadPPPCfgCHAPSecret=ipadPPPCfgCHAPSecret, ipadEncryptionStartupKey=ipadEncryptionStartupKey, ipadDLCICompressionTxOctetsIn=ipadDLCICompressionTxOctetsIn, ipadModemDialDelayBeforeRedial=ipadModemDialDelayBeforeRedial, ipadPPPCfgNegACCM=ipadPPPCfgNegACCM, ipadSCADAStats=ipadSCADAStats, ipadFrPortStatsRx100PercentSec=ipadFrPortStatsRx100PercentSec, ipadDLCIstats20PercentSec=ipadDLCIstats20PercentSec, ipadAtm=ipadAtm, ipadDLCIstats100PercentSec=ipadDLCIstats100PercentSec, ipadDLCICompressionRxOctetsOut=ipadDLCICompressionRxOctetsOut, ipadSmtp=ipadSmtp, ipadSoftKey=ipadSoftKey, ipadFrPortStatsRxOctets=ipadFrPortStatsRxOctets, ipadDLCIminBC=ipadDLCIminBC, ipadOrigPingSize=ipadOrigPingSize, ipadDS0LowAlarmDeclared=ipadDS0LowAlarmDeclared, ipadDLCIstatsDataReceived=ipadDLCIstatsDataReceived, ipadFrPortStatsTxMaxPercent=ipadFrPortStatsTxMaxPercent, ipadMiscShdslConfigEntry=ipadMiscShdslConfigEntry, ipadPktSwCfgnN2=ipadPktSwCfgnN2, ipadServiceTable=ipadServiceTable, ipadChannelIndex=ipadChannelIndex, ipadPktSwCfgMaxFrameSize=ipadPktSwCfgMaxFrameSize, ipadSCADADevLstIndex=ipadSCADADevLstIndex, ipadFrPortTxThroughputExceeded=ipadFrPortTxThroughputExceeded, ipadModemDialRedialAttempts=ipadModemDialRedialAttempts, ipadDLCIstatsDdrCir=ipadDLCIstatsDdrCir, ipadTCPServerConnEndpoint=ipadTCPServerConnEndpoint, ipadDLCIRoundTripDelayRate=ipadDLCIRoundTripDelayRate, ipadPPPPAPTableUsername=ipadPPPPAPTableUsername, ipadSoftKeyExpirationDate=ipadSoftKeyExpirationDate, ipadPktSwCfgInterfaceType=ipadPktSwCfgInterfaceType, ipadPktSwCfgAutoDiagnostic=ipadPktSwCfgAutoDiagnostic, ipadSCADAConfig=ipadSCADAConfig, ipadDLCIBe=ipadDLCIBe, ipadFrPortRxInvAlmAlarm=ipadFrPortRxInvAlmAlarm, ipadDS0Hist30Utilization=ipadDS0Hist30Utilization, ipadUserStatsTable=ipadUserStatsTable, ipadPktSwCfgMgmtDLCI=ipadPktSwCfgMgmtDLCI, ipadDS0ConfigReset=ipadDS0ConfigReset, ipadEndpoint=ipadEndpoint, ipadModemDialSecurity=ipadModemDialSecurity, ipad=ipad, ipadEncryptionKey3=ipadEncryptionKey3, ipadUserStatsIndex=ipadUserStatsIndex, ipadDLCIRemoteFramesOfferedWithinCIR=ipadDLCIRemoteFramesOfferedWithinCIR, ipadDbuTableEntry=ipadDbuTableEntry, ipadDLCIstatsTxExcessBe=ipadDLCIstatsTxExcessBe, ipadDLCILastChange=ipadDLCILastChange, ipadPPPCfgMRU=ipadPPPCfgMRU, ipadDLCIstatsCompressionRxRatio=ipadDLCIstatsCompressionRxRatio, ipadserialDteDTRAlarmExists=ipadserialDteDTRAlarmExists, ipadSmtpRecipient4=ipadSmtpRecipient4, ipadTraps=ipadTraps, ipadMiscPortSettingsModemControl=ipadMiscPortSettingsModemControl, ipadModemDialTableEntry=ipadModemDialTableEntry, ipadDbuOperation=ipadDbuOperation, ipadPPPPAPTableEntry=ipadPPPPAPTableEntry, ipadUserIndex=ipadUserIndex, ipadHDLCHist30RxHighUtilSeconds=ipadHDLCHist30RxHighUtilSeconds, ipadModemDataTable=ipadModemDataTable, ipadChannel=ipadChannel, ipadDS0ConfigTable=ipadDS0ConfigTable, ipadSCADACfgProtocol=ipadSCADACfgProtocol, ipadHDLCHist30Table=ipadHDLCHist30Table, ipadFrPortStatsTxFrames=ipadFrPortStatsTxFrames, ipadUserFilterByVpiVci=ipadUserFilterByVpiVci, ipadDS0Hist24Table=ipadDS0Hist24Table)
mibBuilder.exportSymbols("IPADv2-MIB", ipadDLCIstatsTxMgmtOctets=ipadDLCIstatsTxMgmtOctets, ipadFrPortStatsValidIntervals=ipadFrPortStatsValidIntervals, ipadHDLCHist24RxHighUtilSeconds=ipadHDLCHist24RxHighUtilSeconds, ipadFrPortService=ipadFrPortService, ipadEncryptionKey10=ipadEncryptionKey10, ipadSCADACfgLoopback=ipadSCADACfgLoopback, ipadPktSwCfgTable=ipadPktSwCfgTable, ipadModemDataAnswerScript=ipadModemDataAnswerScript, ipadFrPortStatsTxOctets=ipadFrPortStatsTxOctets, ipadMiscEnableButtons=ipadMiscEnableButtons, ipadDS0ConfigHighUtilStatus=ipadDS0ConfigHighUtilStatus, ipadPPPCfgPeerIpAddress=ipadPPPCfgPeerIpAddress, ipadModemDialPassword=ipadModemDialPassword, ipadPktSwCfgRoundTripDelaySize=ipadPktSwCfgRoundTripDelaySize, ipadMiscShdslStationTimingNxMultiple=ipadMiscShdslStationTimingNxMultiple, ipadMiscShdslConnectionStatusPair2=ipadMiscShdslConnectionStatusPair2, ipadHDLCHist30HistoricalIndex=ipadHDLCHist30HistoricalIndex, ipadDLCIAlarmReset=ipadDLCIAlarmReset, ipadSCADACfgIndex=ipadSCADACfgIndex, ipadMiscDisableLAN=ipadMiscDisableLAN, ipadPktSwCfgDeleteDLCI=ipadPktSwCfgDeleteDLCI, ipadDS0ConfigResetTimer=ipadDS0ConfigResetTimer, ipadUnitAccess=ipadUnitAccess, ipadDLCIrxCongThreshold=ipadDLCIrxCongThreshold, ipadUnitAccessIpa=ipadUnitAccessIpa, ipadModemDialCommand=ipadModemDialCommand, ipadHDLCConfigTxHighUtilThreshold=ipadHDLCConfigTxHighUtilThreshold, ipadDbuIndex=ipadDbuIndex, ipadFrPortStatsRx60PercentSec=ipadFrPortStatsRx60PercentSec, ipadMiscClearStatusCounts=ipadMiscClearStatusCounts, ipadUnitAccessTable=ipadUnitAccessTable, ipadDS0ConfigHighUtilAlarm=ipadDS0ConfigHighUtilAlarm, ipadPktSwCfgnT1=ipadPktSwCfgnT1, ipadDS0ConfigHighUtil=ipadDS0ConfigHighUtil, ipadTCPServerEnable=ipadTCPServerEnable, ipadDdsOOFSAlarmDeclared=ipadDdsOOFSAlarmDeclared, ipadPPPCfgCHAPUsername=ipadPPPCfgCHAPUsername, ipadDLCICIR=ipadDLCICIR, ipadNat=ipadNat, ipadEndpointDeleteEndpoint=ipadEndpointDeleteEndpoint, ipadDS0Hist24Utilization=ipadDS0Hist24Utilization, ipadModemDialStatus=ipadModemDialStatus, ipadDLCIstatsRxBECN=ipadDLCIstatsRxBECN, ipadTrapDestTable=ipadTrapDestTable, ipadDLCIstatsTxExcessCIR=ipadDLCIstatsTxExcessCIR, ipadChannelTableEntry=ipadChannelTableEntry, ipadDLMConfigMode=ipadDLMConfigMode, ipadFrPortTxAlmAlarm=ipadFrPortTxAlmAlarm, ipadMiscPortSettingsEntry=ipadMiscPortSettingsEntry, ipadt1e1ESAlarmDeclared=ipadt1e1ESAlarmDeclared, ipadFrPortStatsTx40PercentSec=ipadFrPortStatsTx40PercentSec, ipadDbuDailyTableEntry=ipadDbuDailyTableEntry, ipadDS0Hist24HighUtilSeconds=ipadDS0Hist24HighUtilSeconds, ipadEncryptionKey5=ipadEncryptionKey5, ipadPktSwCfgAutoIPMgmtAddr=ipadPktSwCfgAutoIPMgmtAddr, ipadDS0ConfigHighUtilThreshold=ipadDS0ConfigHighUtilThreshold, ipadPPPCfgNegDNSAddress=ipadPPPCfgNegDNSAddress, ipadDLMServiceIndex=ipadDLMServiceIndex, ipadDLMTxRxFilter=ipadDLMTxRxFilter, ipadPPPCfgService=ipadPPPCfgService, ipadSoftKeyEntry=ipadSoftKeyEntry, ipadEncryptionStartupKeyConfirm=ipadEncryptionStartupKeyConfirm, ipadHDLCConfigTxLowUtilAlarm=ipadHDLCConfigTxLowUtilAlarm, ipadUserVpi=ipadUserVpi, ipadDlciUASExceeded=ipadDlciUASExceeded, ipadChannelPair=ipadChannelPair, ipadTCPServerConnTable=ipadTCPServerConnTable, ipadHDLCConfigIndex=ipadHDLCConfigIndex, ipadUserStatsRxFrames=ipadUserStatsRxFrames, ipadPPPCfgNegCompression=ipadPPPCfgNegCompression, ipadFrPortStatsTxStatResp=ipadFrPortStatsTxStatResp, ipadMiscShdslStationInTiming=ipadMiscShdslStationInTiming, ipadModemDataSetupScript2=ipadModemDataSetupScript2, ipadDLCItxExCIRAlarm=ipadDLCItxExCIRAlarm, ipadMiscShdslDetailedConnectionStatus=ipadMiscShdslDetailedConnectionStatus, ipadEncryptionKey8=ipadEncryptionKey8, ipadPktSwOperatingMode=ipadPktSwOperatingMode, ipadDLCIstats80PercentSec=ipadDLCIstats80PercentSec, ipadHDLCConfigRxLowUtilAlarm=ipadHDLCConfigRxLowUtilAlarm, ipadDLCIstatsTable=ipadDLCIstatsTable, ipadMiscEnableServiceAware=ipadMiscEnableServiceAware, ipadDS0Hist24Index=ipadDS0Hist24Index, ipadMiscPortSettingsSerialType=ipadMiscPortSettingsSerialType, ipadSmtpRecipient1=ipadSmtpRecipient1, ipadFrPortTable=ipadFrPortTable, ipadDLCInumber=ipadDLCInumber, ipadFrPortStatsTxAvgPercent=ipadFrPortStatsTxAvgPercent, ipadFrPortRxAlmAlarm=ipadFrPortRxAlmAlarm, ipadUserTxExceeded=ipadUserTxExceeded, ipadEndpointForward=ipadEndpointForward, ipadOrigPingToSend=ipadOrigPingToSend, ipadAutoLearnDS0Index=ipadAutoLearnDS0Index, ipadOrigPingDelayMin=ipadOrigPingDelayMin, ipadTFTPDownload=ipadTFTPDownload, ipadDLCIstatsService=ipadDLCIstatsService, ipadTCPServerConnEnableEntry=ipadTCPServerConnEnableEntry, ipadSCADAStatsTxMsgs=ipadSCADAStatsTxMsgs, ipadTrapsPrefix=ipadTrapsPrefix, ipadDLCIFramesReceived=ipadDLCIFramesReceived, ipadEndpointType=ipadEndpointType, ipadEndpointRemoteIpAddr=ipadEndpointRemoteIpAddr, ipadPPPCfgDialMode=ipadPPPCfgDialMode, ipadSCADAStatsTxChars=ipadSCADAStatsTxChars, ipadEncryptionKey7=ipadEncryptionKey7, ipadDbuMonitoredifIndex=ipadDbuMonitoredifIndex, ipadSmtpRecipient2=ipadSmtpRecipient2, ipadt1e1LOSSAlarmDeclared=ipadt1e1LOSSAlarmDeclared, ipadTFTPDownloadAction=ipadTFTPDownloadAction, ipadPPPCfgNegMRU=ipadPPPCfgNegMRU, ipadDLCIstatsRxOctets=ipadDLCIstatsRxOctets, ipadDLCIstatsTxOctets=ipadDLCIstatsTxOctets, ipadDLCIstatsRxMgmtFrames=ipadDLCIstatsRxMgmtFrames, ipadDLCIstatsFdrBe=ipadDLCIstatsFdrBe, ipadUnitAccessIndex=ipadUnitAccessIndex, ipadModemDataSyncMethod=ipadModemDataSyncMethod, ipadPktSwCfgAddDLCI=ipadPktSwCfgAddDLCI, ipadPPPCfgAuthChallengeInterval=ipadPPPCfgAuthChallengeInterval, ipadDLCIstatsRemoteFramesOfferedWithinBE=ipadDLCIstatsRemoteFramesOfferedWithinBE, ipadModemDialNumber=ipadModemDialNumber, ipadDLCIstatsRxMgmtOctets=ipadDLCIstatsRxMgmtOctets, ipadPPPCfgPAPUsername=ipadPPPCfgPAPUsername, ipadEndpointLastChange=ipadEndpointLastChange)
