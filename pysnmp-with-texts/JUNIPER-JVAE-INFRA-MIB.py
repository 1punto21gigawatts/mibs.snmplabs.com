#
# PySNMP MIB module JUNIPER-JVAE-INFRA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-JVAE-INFRA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
InetAddressIPv4, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressIPv6")
jnxJVAEMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxJVAEMibRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, TimeTicks, Counter64, Gauge32, ObjectIdentity, MibIdentifier, Unsigned32, Counter32, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "TimeTicks", "Counter64", "Gauge32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Counter32", "NotificationType", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxJVAEInfraMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1))
jnxJVAEInfraMIB.setRevisions(('2012-08-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxJVAEInfraMIB.setRevisionsDescriptions(('Initial version of JVAE Infrastructure MIB.',))
if mibBuilder.loadTexts: jnxJVAEInfraMIB.setLastUpdated('201208010000Z')
if mibBuilder.loadTexts: jnxJVAEInfraMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxJVAEInfraMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxJVAEInfraMIB.setDescription('The MIB module for JunosV App Engine Infrastructure.')
jnxJVAEInfraNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 0))
jnxJVAEInfraObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1))
jnxJVAEInfraTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1))
jnxJVAECNTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxJVAECNTable.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNTable.setDescription('A table of Compute Nodes.')
jnxJVAECNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNId"))
if mibBuilder.loadTexts: jnxJVAECNEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNEntry.setDescription('A Compute Node.')
jnxJVAECNId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: jnxJVAECNId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNId.setDescription('Id of the Compute Node.')
jnxJVAECNName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNName.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNName.setDescription('Name of the Compute Node.')
jnxJVAECCName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECCName.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECCName.setDescription('Name of the Compute Cluster, to which this Compute Node belongs.')
jnxJVAECNState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("offline", 0), ("online", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNState.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNState.setDescription('State of Compute Node as seen by the VE platform Manager.')
jnxJVAECNLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(26, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNLastStateChange.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNLastStateChange.setDescription('The date and time when last state change was observed for this Compute Node.')
jnxJVAECNRouterIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 6), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRouterIPv4.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRouterIPv4.setDescription('Network address on the router side, which used for all management between the router and Compute Node.')
jnxJVAECNRouterIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 7), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNRouterIPv6.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNRouterIPv6.setDescription('Network address on the router side, which used for all management between the router and Compute Node.')
jnxJVAECNMgmtIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 8), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNMgmtIPv4.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNMgmtIPv4.setDescription('Network address on the compute node side, which used for all management between the router and Compute Node.')
jnxJVAECNMgmtIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 9), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNMgmtIPv6.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNMgmtIPv6.setDescription('Network address on the compute node side, which used for all management between the router and Compute Node.')
jnxJVAECNSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAECNSWVersion.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNSWVersion.setDescription('Compute Node software version.')
jnxJVAEVMTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2), )
if mibBuilder.loadTexts: jnxJVAEVMTable.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMTable.setDescription('A table of virutal machine instances.')
jnxJVAEVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMId"))
if mibBuilder.loadTexts: jnxJVAEVMEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMEntry.setDescription('A virutal machine instance.')
jnxJVAEVMId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127)))
if mibBuilder.loadTexts: jnxJVAEVMId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMId.setDescription('An unique identifier for this virtual machine instance. This identifier is not retained across restart of the subsytem.')
jnxJVAEVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMName.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMName.setDescription('Name of the virtual machine instance.')
jnxJVAEVMCCName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMCCName.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMCCName.setDescription('Name of the compute cluster which the compute node belongs.')
jnxJVAEVMCNName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMCNName.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMCNName.setDescription('Name of the compute node on which the virtual machine runs.')
jnxJVAEVMCNId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMCNId.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMCNId.setDescription('Id of the compute node on which the virtual machine runs.')
jnxJVAEVMUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMUuid.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMUuid.setDescription('UUID of the virtual machine.')
jnxJVAEVMPkg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMPkg.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMPkg.setDescription('Name of package installed on the router holding the imgage for this virtual machine.')
jnxJVAEVMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offline", 0), ("online", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJVAEVMStatus.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMStatus.setDescription('Status of the virtual machine instance.')
jnxJVAECNStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 0, 1)).setObjects(("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNId"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNName"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECCName"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNState"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAECNLastStateChange"))
if mibBuilder.loadTexts: jnxJVAECNStateChange.setStatus('current')
if mibBuilder.loadTexts: jnxJVAECNStateChange.setDescription('This notification is generated whenever compute node state changes.')
jnxJVAEVMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 69, 1, 0, 2)).setObjects(("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMId"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMName"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMCNId"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMUuid"), ("JUNIPER-JVAE-INFRA-MIB", "jnxJVAEVMStatus"))
if mibBuilder.loadTexts: jnxJVAEVMStateChange.setStatus('current')
if mibBuilder.loadTexts: jnxJVAEVMStateChange.setDescription('This notification whenever the virutal machine status changes.')
mibBuilder.exportSymbols("JUNIPER-JVAE-INFRA-MIB", jnxJVAECNLastStateChange=jnxJVAECNLastStateChange, jnxJVAEVMEntry=jnxJVAEVMEntry, jnxJVAEVMStateChange=jnxJVAEVMStateChange, jnxJVAECNMgmtIPv4=jnxJVAECNMgmtIPv4, jnxJVAEVMCCName=jnxJVAEVMCCName, jnxJVAEInfraObjects=jnxJVAEInfraObjects, jnxJVAECNRouterIPv4=jnxJVAECNRouterIPv4, jnxJVAEVMId=jnxJVAEVMId, jnxJVAECNSWVersion=jnxJVAECNSWVersion, jnxJVAEVMUuid=jnxJVAEVMUuid, jnxJVAEVMPkg=jnxJVAEVMPkg, jnxJVAECNId=jnxJVAECNId, jnxJVAECNName=jnxJVAECNName, jnxJVAECNMgmtIPv6=jnxJVAECNMgmtIPv6, jnxJVAEVMTable=jnxJVAEVMTable, jnxJVAEInfraMIB=jnxJVAEInfraMIB, jnxJVAEVMCNName=jnxJVAEVMCNName, jnxJVAECNTable=jnxJVAECNTable, jnxJVAECNStateChange=jnxJVAECNStateChange, jnxJVAECCName=jnxJVAECCName, jnxJVAEInfraNotifications=jnxJVAEInfraNotifications, jnxJVAEVMCNId=jnxJVAEVMCNId, jnxJVAECNEntry=jnxJVAECNEntry, jnxJVAECNState=jnxJVAECNState, jnxJVAEVMStatus=jnxJVAEVMStatus, jnxJVAEInfraTables=jnxJVAEInfraTables, jnxJVAECNRouterIPv6=jnxJVAECNRouterIPv6, PYSNMP_MODULE_ID=jnxJVAEInfraMIB, jnxJVAEVMName=jnxJVAEVMName)
