#
# PySNMP MIB module DPT-SCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DPT-SCSI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, enterprises, Counter32, ModuleIdentity, Counter64, TimeTicks, NotificationType, IpAddress, Integer32, Bits, ObjectIdentity, MibIdentifier, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "enterprises", "Counter32", "ModuleIdentity", "Counter64", "TimeTicks", "NotificationType", "IpAddress", "Integer32", "Bits", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

class DptSignature(DisplayString):
    pass

class HostBusType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("isa", 2), ("eisa", 3), ("pci-32", 4), ("pci-64", 5))

class ScsiBusType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("singleEnded", 2), ("differential", 3), ("lvd", 4), ("fibreChannel", 5))

class IrqType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("invalid", 1), ("level", 2), ("edge", 3))

class DrqNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("zero", 3), ("five", 4), ("six", 5), ("seven", 6))

class MemoryBankType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("empty", 3), ("standard-SIMM", 4), ("standard-DIMM", 5), ("sm4000DPT-ECC-SIMM", 6), ("sm4041DPT-ECC-DIMM", 7), ("sm4050DPT-ECC-EDO-SIMM", 8), ("dm4050DPT-ECC-EDO-SO-DIMM", 9), ("dm4070DPT-ECC-SD-DIMM", 10))

class MemoryBankSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("empty", 3), ("oneMB", 4), ("fourMB", 5), ("sixteenMB", 6), ("thirtytwoMB", 7), ("sixtyfourMB", 8), ("hundredtwentyeightMB", 9), ("twohundredfiftysixMB", 10), ("fivehundredtwelveMB", 11), ("thousandtwentyfourMB", 12))

class CachingModule(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("none", 3), ("cm4000", 4), ("rc4040", 5), ("rc4041", 6), ("embedded", 7), ("ra4050", 8), ("ra4060", 9))

class RaidModule(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("none", 3), ("dm4000", 4), ("rc4040", 5), ("rc4041", 6), ("embedded", 7), ("ra4050", 8), ("ra4060", 9))

class BatteryBackupModule(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("none", 3), ("embedded", 4), ("bb4050", 5), ("bb4060", 6))

class RaidType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("invalid", 1), ("notAssigned", 2), ("raid-0", 3), ("raid-1", 4), ("raid-5", 5), ("redirected", 6), ("hotSpare", 7))

class SoftwareType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("firmware", 1), ("driver", 2), ("operatingSystem", 3), ("application", 4))

class BusWidth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 1), ("serial", 2), ("narrow", 3), ("wide", 4), ("wide32", 5), ("notApplicable", 6))

class BusTerminationType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("on", 2), ("off", 3), ("highOnly", 4), ("auto", 5))

class ScsiVersion(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("invalid", 1), ("scsi-I", 2), ("scsi-II", 3), ("scsi-III", 4))

class DeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 97, 98, 99))
    namedValues = NamedValues(("disk", 1), ("tape", 2), ("printer", 3), ("processor", 4), ("writeOnce", 5), ("cdRom", 6), ("scanner", 7), ("optical", 8), ("jukebox", 9), ("commDev", 10), ("graphicsType10", 11), ("graphicsType11", 12), ("scc", 13), ("ses", 14), ("saf-te", 97), ("host", 98), ("unknown", 99))

class DeviceStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("invalid", 1), ("optimal", 2), ("verifying", 3), ("failed", 4), ("warning", 5), ("formatting", 6), ("formatCertifying", 7), ("missing", 8), ("notCreated", 9), ("degraded", 10), ("building", 11), ("rebuilding", 12), ("verifyFixing", 13), ("abortActivity", 14))

class DeviceWriteMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("writeBack", 3), ("writeThrough", 4), ("noCache", 5))

class YesNoStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("notSupported", 3), ("yes", 4), ("no", 5))

class LowHighStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("notSupported", 3), ("low", 4), ("normal", 5), ("high", 6), ("veryHigh", 7))

class BatteryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("none", 3), ("trickleCharge", 4), ("fastCharge", 5), ("discharge", 6), ("bad", 7), ("full", 8), ("initCharge", 9), ("initDischarge", 10), ("initRecharge", 11), ("maintenanceDischarge", 12), ("maintenanceCharge", 13))

class HbaGenStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("notSupported", 2), ("ok", 3), ("fail", 4), ("error", 5))

class CommandType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("hostCmd", 1), ("scsiCmd", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("invalid", 1), ("active", 2), ("notInService", 3), ("notReady", 4), ("createAndGo", 5), ("createAndWait", 6), ("destroy", 7))

dpt = MibIdentifier((1, 3, 6, 1, 4, 1, 1597))
dptScsi = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1))
dptScsiSys = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 1))
dptScsiHba = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 2))
dptScsiBus = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 3))
dptScsiDev = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 4))
dptScsiArr = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 5))
dptScsiStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 6))
dptScsiEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 7))
dptScsiDummy = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 8))
dptScsiSysRevLevel = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 1), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysRevLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiSysRevLevel.setDescription('DPT SCSI system SNMP agent revision information.')
dptScsiSysEngineSignature = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 2), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysEngineSignature.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiSysEngineSignature.setDescription('DPT signature for the DPT engine. This contains information on engine version and creation date/time.')
dptScsiSysDriverSignature = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 3), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysDriverSignature.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiSysDriverSignature.setDescription('DPT signature for the driver currently in use by the SNMP agent. This contains information on driver version and creation date/time.')
dptScsiSysEventLoggerSignature = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 4), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysEventLoggerSignature.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiSysEventLoggerSignature.setDescription('DPT signature for the event logger/broadcaster currently in use by the SNMP agent. This contains information on event logger/broadcaster version and creation date/time.')
dptScsiSysMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiSysMibRevMajor.setDescription('The Major Revision level. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
dptScsiSysMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiSysMibRevMinor.setDescription('The Minor Revision level. A change in the minor revision level may represent some minor additional support; no changes to any pre-existing information has occurred.')
dptScsiHbaTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1), )
if mibBuilder.loadTexts: dptScsiHbaTable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaTable.setDescription('A list of RAID controllers managed by the DPT SCSI system.')
dptScsiHbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptScsiHbaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaEntry.setDescription("A set of parameters that describe/control a DPT RAID controller. See 'SmartRAID User's Manual' for detailed explanation of the parameters.")
dptScsiHbaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaNumber.setDescription('An index that uniquely identifies a row in dptHbaTable that pertains to a particular controller. The value of this object is the logical device identifier for a DPT controller. As controllers are detected, they are assigned numbers incrementally, starting with 0.')
dptScsiHbaVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaVendor.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaVendor.setDescription('The name of the vendor of the controller.')
dptScsiHbaModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaModel.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaModel.setDescription('The controller model identifier.')
dptScsiHbaFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaFirmware.setDescription('The controller firmware version.')
dptScsiHbaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaSerialNumber.setDescription('The controller serial number.')
dptScsiHbaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaAddress.setDescription('The controller Address (normally displayed in hex.) It is a 32-bit value representing the memory address used by the controller')
dptScsiHbaHostBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 7), HostBusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaHostBusType.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaHostBusType.setDescription('The type of host computer system bus this controller is attached to.')
dptScsiHbaHostBusMaxTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaHostBusMaxTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaHostBusMaxTransferRate.setDescription('The maximum possible transfer rate on the host bus in MB/s.')
dptScsiHbaIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaIrq.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaIrq.setDescription('The controller interrupt level.')
dptScsiHbaIrqType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 10), IrqType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaIrqType.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaIrqType.setDescription('The controller interrupt type (Edge or Level).')
dptScsiHbaDrq = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 11), DrqNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaDrq.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiHbaDrq.setDescription("The controller DMA channel. This object is only applicable for ISA controllers. Its value is 'notApplicable' for the other types of controllers.")
dptScsiHbaRaidModule = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 12), RaidModule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaRaidModule.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaRaidModule.setDescription("Controller RAID module type: SmartRAID Millennium controllers support all RAID levels without the addition of a RAID Module. These controllers will show 'Embedded' for this object. SmartRAID Decade and Century controllers support RAID 0 and RAID 1 by default. RAID 5 support is added by attaching an RA40x0 RAID Accelerator module to the controller. If one is attached it will be indicated in this object.")
dptScsiHbaCachingModule = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 13), CachingModule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaCachingModule.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiHbaCachingModule.setDescription("The controller caching module. 'Embedded' means that the disk array function is built inside the controller (SmartRAID products.)")
dptScsiHbaAudibleAlarmOn = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 14), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaAudibleAlarmOn.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaAudibleAlarmOn.setDescription('This returns the current status of the controller alarm.')
dptScsiHbaUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaUpTime.setDescription('Time elapsed (in hundredths of a second) since the controller was last booted.')
dptScsiHbaEccEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 16), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaEccEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaEccEnabled.setDescription("This indicates whether or not the controller is using DPT ECC memory. 'Yes' means that the installed memory is DPT ECC memory and full ECC protection is active.")
dptScsiHbaBackgroundTaskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBackgroundTaskPriority.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaBackgroundTaskPriority.setDescription("This object controls the priority of array background tasks such as Build, Rebuild and Verify for this controller. The values range from 1 to 10. A value of 1 is the slowest but uses the least amount of the controller's bandwidth. While a value of 10 is the fastest but it uses the most bandwidth. If operations take too long then increase the value for this object. If the system runs too slow when these tasks are active, then decrease the value for this object.")
dptScsiHbaExclusionPeriodEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 18), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaExclusionPeriodEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiHbaExclusionPeriodEnabled.setDescription('Controller exclution period is the time span during which it devotes 100% of its time fulfilling requests for data reads/writes and zero percent on background activities like build/rebuild of arrays. Setting this object to true sets the exclusion period as defined by dptScsiHbaExclusionPeriodStart and dptScsiHbaExclusionPeriodEnd objects. Otherwise, if it is set to false, the exclusion period no effect.')
dptScsiHbaExclusionPeriodStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaExclusionPeriodStart.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiHbaExclusionPeriodStart.setDescription('Hour of beginning of the exclusion period. For example, a value of 0 means that the exclusion starts at 12 a.m. The maximum duration of an exclusion period can be 24 hours. Contoller exclution period is the time span during which it devotes 100% of its time fulfilling requests for data reads/writes and zero percent on background activities like build/rebuild of arrays.')
dptScsiHbaExclusionPeriodEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaExclusionPeriodEnd.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiHbaExclusionPeriodEnd.setDescription('Hour when exclusion period ends. For example, a value of 23 means that the exclusion ends at 11 p.m. The maximum duration of an exclusion period can be 24 hours. If dptScsiHbaExclusionPeriodStart is greater than dptScsiHbaExclusionPeriodEnd, it means that the exclusions period extends over the next day. Contoller exclution period is the time span during which it devotes 100% of its time fulfilling requests for data reads/writes and zero percent on background activities like build/rebuild of arrays.')
dptScsiHbaMaxReadAheadPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaMaxReadAheadPercentage.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiHbaMaxReadAheadPercentage.setDescription('Max percentage of contoller cache RAM devoted to read-ahead pages. This value is not applicable to SmartRAID V and later controllers. For these controllers, this value will be set to 30.')
dptScsiHbaMaxDirtyPagesPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaMaxDirtyPagesPercentage.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiHbaMaxDirtyPagesPercentage.setDescription('Max percentage of controller cache RAM that may contain dirty pages. This value is not applicable to SmartRAID V and later controllers. For these controllers, this value will be set to 80.')
dptScsiHbaWriteBackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaWriteBackDelay.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiHbaWriteBackDelay.setDescription('Write-back delay in milliseconds. This value is not applicable to SmartRAID V and later controllers. For these controllers, this value will be set to 250.')
dptScsiHbaTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 24), LowHighStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaTemperature.setDescription('Temperature status reported by the controller.')
dptScsiHbaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 25), LowHighStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaVoltage.setDescription('5V voltage status reported by the controller.')
dptScsiHbaBadMemoryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBadMemoryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaBadMemoryAddress.setDescription('If the controller detects a cache RAM error, the address of the most recent error is stored here. Otherwise it indicates that no errors have been detected. Valid RAM addresses are from 1 to 0xffffffff.')
dptScsiHbaBatteryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 27), BatteryBackupModule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBatteryModule.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaBatteryModule.setDescription('The Battery Backup Module preserves all controller cache and local memory contents in the event of power loss to the system')
dptScsiHbaBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 28), BatteryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaBatteryStatus.setDescription('Battery status reported by the controller.')
dptScsiHbaHighestBusWithDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaHighestBusWithDevices.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaHighestBusWithDevices.setDescription('The bus number of the highest numbered bus on this controller which has devices currently attached to it.')
dptScsiHbaGeneralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 30), HbaGenStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaGeneralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaGeneralStatus.setDescription('General controller status. The following are the possible values: ok - the controller and all components attached to it, such as disks and arrays, are OK. fail - a component attached to the controller is not OK. error - the agent cannot get status from the controller.')
dptScsiHbaSmorSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 31), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaSmorSignature.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaSmorSignature.setDescription('The controller S.M.O.R. revision information. Not available for SmartRAID IV and earlier controllers.')
dptScsiHbaBiosSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 32), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBiosSignature.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaBiosSignature.setDescription('The controller B.I.O.S. revision information. Not available for SmartRAID IV and earlier controllers.')
dptScsiHbaNvramLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaNvramLayout.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaNvramLayout.setDescription('The controller NVRAM layout revision.')
dptScsiHbaCacheSocketTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2), )
if mibBuilder.loadTexts: dptScsiHbaCacheSocketTable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaCacheSocketTable.setDescription('A list of the cache memory module sockets on the controller.')
dptScsiHbaCacheSocketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiHbaCacheSocketNumber"))
if mibBuilder.loadTexts: dptScsiHbaCacheSocketEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaCacheSocketEntry.setDescription('These parameters describe the cache memory module sockets on a controller.')
dptScsiHbaCacheSocketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaCacheSocketNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaCacheSocketNumber.setDescription('A controller can have up to 4 cache sockets. This is the index in the table of cache memory module sockets.')
dptScsiHbaCacheModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2, 1, 2), MemoryBankType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaCacheModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaCacheModuleType.setDescription('Type of a cache memory module.')
dptScsiHbaCacheModuleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2, 1, 3), MemoryBankSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaCacheModuleSize.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaCacheModuleSize.setDescription('Size of a cache memory module.')
dptScsiBusTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1), )
if mibBuilder.loadTexts: dptScsiBusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusTable.setDescription('A list of the SCSI buses on a system.')
dptScsiBusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"))
if mibBuilder.loadTexts: dptScsiBusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusEntry.setDescription('These parameters describe/control a SCSI Bus. The entry is indexed by dptScsiHbaNumber and dptScsiBusNumber. dptScsiHbaNumber determines to which controller the SCSI bus belongs and dptScsiBusNumber to which SCSI bus.')
dptScsiBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusNumber.setDescription('An index that, along with dptScsHbaNumber uniquely, identifies an entry in the dptScsiBusTable for a particular SCSI Bus.')
dptScsiBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 2), BusWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusWidth.setDescription('The SCSI Bus width.')
dptScsiBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 3), ScsiBusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusType.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusType.setDescription('The SCSI Bus transceiver type.')
dptScsiBusMaxTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusMaxTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusMaxTransferRate.setDescription('The SCSI Bus maximum transfer rate in MB/s. Valid values are 4, 5, 8, 10, 20, 40, 80, 100, 160, etc., depending on the SCSI technology used.')
dptScsiBusHbaScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusHbaScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusHbaScsiId.setDescription('The SCSI ID of the controller on this SCSI Bus.')
dptScsiBusHbaTermPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 6), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusHbaTermPower.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusHbaTermPower.setDescription('Indicates the SCSI term-power setting (on/off) for this bus.')
dptScsiBusHbaTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 7), BusTerminationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusHbaTermination.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusHbaTermination.setDescription('Indicates the SCSI termination setting for this bus.')
dptScsiDevTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1), )
if mibBuilder.loadTexts: dptScsiDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevTable.setDescription('A list of SCSI devices managed by the SNMP agent.')
dptScsiDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptScsiDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevEntry.setDescription('These parameters describe/control a particular SCSI Device. The index for this entry is the logical device address of the SCSI device. The logical device address consists of five components: contoller number, SCSI bus number, Device ID, LUN and level.')
dptScsiDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevId.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevId.setDescription('The SCSI ID of the device.')
dptScsiDevLun = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLun.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevLun.setDescription('The SCSI LUN (logical unit number) of the device.')
dptScsiDevLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevLevel.setDescription('Indicates the Level of the device. Level 0 indicates physical devices, while level 1 and 2 indicate logical devices. It also gives its level in the containment hierarchy of devices. A device is a logical device if it contains other SCSI devices, otherwise it is a physical device. A level 1 array contains only physical devices as its members; a level 2 device has at least one level 1 array as a member. A level 2 device would be a RAID-10 or RAID-50 logical drive.')
dptScsiDevVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevVendor.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevVendor.setDescription('The name of the vendor of the device.')
dptScsiDevModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevModel.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevModel.setDescription('The model name of the device.')
dptScsiDevRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevRevision.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevRevision.setDescription('The revision level of the device.')
dptScsiDevSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevSerialNumber.setDescription('The serial number of the device.')
dptScsiDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 8), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevStatus.setDescription('The administrative state of the device. The following are all the possible values: invalid - current value is invalid. optimal - device is fully functional and is not running diagnostics that may impact performance. verifying - diagnostics are being run on the device. Performance of the device may be affected. failed - catastrophic failure has occurred. warning - user-specified error threshold has been crossed. Device failure may be imminent. formatting - device is being formatted. formatCertifying - a SCSI format with certify command in progress. missing - device is physically missing or does not respond to commands on the SCSI bus. notCreated - array has been defined by the user but the changes are have not been committed to the hardware. degraded - redundant array has a failed component which results in degraded performance and loss of fault-tolerance. building - array is in the process of building. verifyFixing - device is processing an SCSI verify fix command. abortActivity - this value allows the user to abort any background tasks on the controller, such as Build, Rebuild and Verify.')
dptScsiDevBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 9), BusWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevBusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevBusWidth.setDescription('The data width of the SCSI device (not applicable to logical devices).')
dptScsiDevCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevCapacity.setDescription('The storage capacity of the device in MB.')
dptScsiDevLogicalBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLogicalBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevLogicalBlockSize.setDescription('Logical block size of the device in bytes.')
dptScsiDevPhysicalBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevPhysicalBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevPhysicalBlockSize.setDescription('Physical block size of the device in bytes. Not applicable for logical devices and will be the logical block size.')
dptScsiDevNegTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevNegTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevNegTransferRate.setDescription('The negotiated transfer rate of the device in MB/s. For logical devices, this value is not applicable and will return 0.')
dptScsiDevRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 14), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevRemovable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevRemovable.setDescription('Indicates whether or not the device is removable.')
dptScsiDevEccEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 15), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevEccEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiDevEccEnabled.setDescription('Indicates whether the device has ECC enabled or disabled.')
dptScsiDevScsiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 16), ScsiVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevScsiVersion.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevScsiVersion.setDescription('Indicates the SCSI specification version of the device.')
dptScsiDevSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 17), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSoftReset.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevSoftReset.setDescription('Indicates whether the device supports soft reset.')
dptScsiDevCmdQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 18), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevCmdQueuing.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevCmdQueuing.setDescription('Indicates whether the device is supports command queuing.')
dptScsiDevLinkedCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 19), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLinkedCmds.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevLinkedCmds.setDescription('Indicates whether the device support linked commands (not applicable to logical devices).')
dptScsiDevSynchronous = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 20), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSynchronous.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevSynchronous.setDescription('Indicates whether the device supports synchronous data transfers.')
dptScsiDevRelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 21), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevRelAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevRelAddr.setDescription('Indicates whether the device supports relative addressing (not applicable to logical devices).')
dptScsiDevSMART = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 22), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSMART.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevSMART.setDescription('Indicates whether the device supports SMART specifications (not applicable to logical devices).')
dptScsiDevSCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 23), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSCAM.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiDevSCAM.setDescription('Indicates whether the device supports SCAM.')
dptScsiDevBadBlockNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevBadBlockNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevBadBlockNumber.setDescription('If bad blocks have been detected on the device, this is the address of the most recent one. Otherwise it will contain 0 (no error). The first valid block starts at 1. This object is used in the definition of one or more traps.')
dptScsiDevBadBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevBadBlockCount.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevBadBlockCount.setDescription('This represents the total number of the bad blocks encountered most recently on the device starting at the block number dptScsiDevBadBlockNumber. This object is needed in the definition of one or more traps.')
dptScsiDevErrorsAboveThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 26), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevErrorsAboveThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiDevErrorsAboveThreshold.setDescription('Indicates whether or not the error count of the device has reached the threshold. This value is no longer supported.')
dptScsiDevDriveLockingOn = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 27), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevDriveLockingOn.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiDevDriveLockingOn.setDescription('Indicates whether or not the drive is locked. This value is no longer supported.')
dptScsiDevLastReqSenseInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLastReqSenseInfo.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevLastReqSenseInfo.setDescription('Device Request Sense information. It is used in the definition of one or more traps.')
dptScsiDevReadCachingOn = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 29), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevReadCachingOn.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiDevReadCachingOn.setDescription('Indicates whether or not read caching is on. This value is not applicable to SmartRAID V and later controllers.')
dptScsiDevReadCacheMaxRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevReadCacheMaxRecord.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiDevReadCacheMaxRecord.setDescription('Maximum record size for read caching. This value is not applicable to SmartRAID V and later controllers. For these controllers, this value will be 0.')
dptScsiDevWriteCachingOn = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 31), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevWriteCachingOn.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiDevWriteCachingOn.setDescription('Indicates whether or not write caching is on. This value is not applicable to SmartRAID V and later controllers.')
dptScsiDevWriteCacheMaxRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevWriteCacheMaxRecord.setStatus('deprecated')
if mibBuilder.loadTexts: dptScsiDevWriteCacheMaxRecord.setDescription('Maximum record size for write caching. This value is not applicable to SmartRAID V and later controllers. For these controllers, this value will be 0.')
dptScsiDevWriteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 33), DeviceWriteMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevWriteMode.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevWriteMode.setDescription("The write modes are Write-back and Write-through, with write-back being the default. In write-back mode the controller will cache the data and return completion to the host before the data is written to disk. This is the highest performance mode. In write-through mode the controller will always write the data to disk before posting complete to the host. The data may or may not be placed into the controller's cache.")
dptScsiDevSmartStatusOk = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 34), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSmartStatusOk.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevSmartStatusOk.setDescription('Indicates whether the device has reported a SMART error not (not applicable to logical devices).')
dptScsiDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 35), DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevType.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevType.setDescription('Type of device reported.')
dptScsiArrTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1), )
if mibBuilder.loadTexts: dptScsiArrTable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrTable.setDescription('A list of RAID array groups.')
dptScsiArrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptScsiArrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrEntry.setDescription('These parameters describe/control a RAID array group.')
dptScsiArrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 1), RaidType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrType.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrType.setDescription('The RAID type for the Logical Drive. ------------------------------ RAID Disk-fault No.of Level Tolerant Drives ------------------------------ RAID-0 No 2 or more RAID-1 Yes Even number RAID-5 Yes 3 or more Hot Spare - one Redirected - one')
dptScsiArrOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 2), SoftwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrOwner.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrOwner.setDescription('software entity that created this logical device.')
dptScsiArrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrName.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrName.setDescription('Name of the RAID array group.')
dptScsiArrBackgroundProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrBackgroundProgress.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrBackgroundProgress.setDescription('Percentage of completion of an outstanding background operation, e.g., array Build, Rebuild or Verify. If there is no current background process, the value is 100 by default.')
dptScsiArrEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrEntryStatus.setDescription("- 'active': indicates that the table row is available for use by the managed device; - 'notInService': indicates that the table row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady': indicates that the table row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo': supplied by a management station wishing to create a new instance of a table row and to have it available for use by the managed device; (cannot be returned in a get response) - 'createAndWait': supplied by a management station wishing to create a new instance of a table row but not to have it available for use by the managed device; and, (cannot be returned in a get response) - 'destroy': supplied by a management station wishing to delete all of the objects associated with an existing table row. (cannot be returned in a get response) To create new row, a manager sets this object to createAndWait. Agent creates a new row and sets row status to notInService. After the manager creates all the corresponding rows in dptScsiArrMemberTable and has set all the relevant columnar objects, it finally sets dptScsiArrEntryStatus to active which saves all the information to the hardware and performs an array build. If the manager sets dptScsiArrEntryStatus to active or notInService and the required number of drives are not members of this array group (for example, a RAID-5 needs at least 3 drives), then 'inconsistentValue' is returned. To delete an array group, the manager sets this object to destroy. When a row with a particular row index is destroyed, all corresponding rows in dptScsiArrMemberTable are destroyed as well. +---------------+ +--------------+ +--------+ | doesn't exist | --> | notInService | --> | active | +---------------+ +--------------+ +--------+ Array group is Array group is Array group is not created created in the saved to hardware agent and a build is performed")
dptScsiHbaNumberMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: dptScsiHbaNumberMember.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiHbaNumberMember.setDescription('An index that uniquely identifies a row in the dptHbaTable table that pertain to a particular HBA. The value of this object is the logical device identifier for a DPT adapter. In EISA systems, EISA bus slots are scanned, starting from the lowest slot, looking for DPT adapters. In ISA system, DPT adapters are scanned in order of I/O address. As DPT adapters are found, they are assigned numbers incrementally, starting with 0.')
dptScsiBusNumberMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: dptScsiBusNumberMember.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiBusNumberMember.setDescription('An index that, along with dptScsHbaNumber uniquely, identifies an entry in the dptScsiBusTable for a particular SCSI Bus.')
dptScsiDevIdMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: dptScsiDevIdMember.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevIdMember.setDescription('The SCSI Id of the device.')
dptScsiDevLunMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: dptScsiDevLunMember.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevLunMember.setDescription('The SCSI logical unit number of the device.')
dptScsiDevLevelMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: dptScsiDevLevelMember.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiDevLevelMember.setDescription('Indicates whether the device is a physical device (level 0) or a logical device (level 1, level 2, etc). It also gives its level in the containment hierarchy of devices. A device is a logical device if it contains other SCSI devices, otherwise it is a physical device. A level 1 array contains only physical devices as its members; a level 2 device has at least one level 1 array as a member; and so on. In the case of HBA with no RAID capabilities, the only applicable device level is 0.')
dptScsiArrMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 5, 2), )
if mibBuilder.loadTexts: dptScsiArrMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrMemberTable.setDescription('A list of mappings between an array device and its components.')
dptScsiArrMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 5, 2, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"), (0, "DPT-SCSI-MIB", "dptScsiHbaNumberMember"), (0, "DPT-SCSI-MIB", "dptScsiBusNumberMember"), (0, "DPT-SCSI-MIB", "dptScsiDevIdMember"), (0, "DPT-SCSI-MIB", "dptScsiDevLunMember"), (0, "DPT-SCSI-MIB", "dptScsiDevLevelMember"))
if mibBuilder.loadTexts: dptScsiArrMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrMemberEntry.setDescription('These parameters describe/control the mappings between an array and its components. In the index clause, the first set of indices from dptScsiHbaNumber to dptScsiDevLevel describes the array (parent) and the second set represents the member (child).')
dptScsiArrMemberStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrMemberStripeSize.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrMemberStripeSize.setDescription('The stripe size used by the array (in KB). A stripe is a contiguous region for data storage on a disk. Data is distributed evenly across component drives in an array by concatenating interleaved stripes from each drive. If stripe size is not applicable to a particular type of RAID (e.g., hot spare), the value is 0.')
dptScsiArrMemberEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrMemberEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiArrMemberEntryStatus.setDescription("To create a new row, manager sets this object to createAndWait. After successful creation of a row in the agent, it is set to notInService until the parent array is made active and at that time it is set to active as well. Setting it to createAndGo has the same effect as that of createAndWait. +---------------+ +--------------+ +--------+ | doesn't exist | --> | notInService | --> | active | +---------------+ +--------------+ +--------+ A new row is Array group is created in the saved to hardware agent and a build is performed")
dptScsiStatsHbaTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1), )
if mibBuilder.loadTexts: dptScsiStatsHbaTable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaTable.setDescription('A list of controller statistics.')
dptScsiStatsHbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptScsiStatsHbaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaEntry.setDescription('These parameters describe the statistics of an controller.')
dptScsiStatsHbaCacheTotalPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheTotalPages.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaCacheTotalPages.setDescription('Indicates the maximum number of data pages that can be cached on the controller. A page is the smallest region of cache that can be allocated to store data. Each page holds one 512-byte disk sector. The value of this object depends on the memory configuration of the controller.')
dptScsiStatsHbaCacheUsedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheUsedPages.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaCacheUsedPages.setDescription('Indicates the number of data pages residing in the cache memory. This has the same value as dptHbaCacheTotalPages when the cache is full.')
dptScsiStatsHbaCacheDirtyPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheDirtyPages.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaCacheDirtyPages.setDescription('Indicates the number of cache pages that contain dirty data. Dirty data is the data which has been written to the adapter by the computer but has not yet been copied to the disk. This object has a value of 0 after the cache is flushed or allowed to write-back during a period of no disk activity.')
dptScsiStatsHbaCacheReadAheadPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheReadAheadPages.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaCacheReadAheadPages.setDescription('Indicates the number of cache pages that contain read-ahead data. Read-ahead data is read from the drives in anticipation of a future access.')
dptScsiStatsHbaCacheLockedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheLockedPages.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaCacheLockedPages.setDescription('Indicates the number of data pages residing in the cache memory that are presently locked. These data pages do not get paged out until the locks are released.')
dptScsiStatsHbaCacheEccFaultPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheEccFaultPages.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaCacheEccFaultPages.setDescription('The number of cache pages that have had Error Correcting Code (ECC) fault and had been reassigned since power up. ECC is a method of generating redundant information that can be used to detect and correct errors in stored or transmitted data. ')
dptScsiStatsHbaCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCommands.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaCommands.setDescription('The number of commands received by the controller since power up.')
dptScsiStatsHbaMisAlignedTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaMisAlignedTransfers.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaMisAlignedTransfers.setDescription('The number of misaligned data transfers handled by the controller since power up. In a misaligned data transfer, data is accessed on odd byte boundary. These transfers normally take longer to complete than aligned transfers.')
dptScsiStatsHbaScsiResets = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaScsiResets.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsHbaScsiResets.setDescription('The number of SCSI reset commands received by the adapter since power up.')
dptScsiStatsDevTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2), )
if mibBuilder.loadTexts: dptScsiStatsDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevTable.setDescription('A list of Device statistics.')
dptScsiStatsDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptScsiStatsDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevEntry.setDescription('These parameters describe the statistics of a device. The index of this entry is the logical device address of the device. The logical device address consists of four fields: controller number, bus number, device ID, logical unit number and level.')
dptScsiStatsDevReadTotalSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevReadTotalSectors.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevReadTotalSectors.setDescription('The number of sectors read from the device since power up.')
dptScsiStatsDevReadCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevReadCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevReadCacheHits.setDescription('The number of data accesses since power up in which the requested data was found in the cache.')
dptScsiStatsDevReadAheadHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevReadAheadHits.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevReadAheadHits.setDescription('The number of data accesses since power up in which the requested data was found in the read ahead buffer.')
dptScsiStatsDevWriteTotalSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWriteTotalSectors.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWriteTotalSectors.setDescription('The number of sectors written to the device since power up.')
dptScsiStatsDevWriteCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWriteCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWriteCacheHits.setDescription('The number of data writes, since power up, targeted to the device in which the data was written to the cache and not to the disk.')
dptScsiStatsDevWriteBacks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWriteBacks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWriteBacks.setDescription('The number of data writes to the device since power up in which the data was written from the cache to the disk at a time when the device would otherwise be idle.')
dptScsiStatsDevStripesCrosseds = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevStripesCrosseds.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevStripesCrosseds.setDescription('The number of array group accesses that cross stripe boundaries since power up. Only applicable in case of array devices; in other cases, it contains zero.')
dptScsiStatsDevRWCmdsTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3), )
if mibBuilder.loadTexts: dptScsiStatsDevRWCmdsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRWCmdsTable.setDescription('A statistical breakdown of read and write commands.')
dptScsiStatsDevRWCmdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"), (0, "DPT-SCSI-MIB", "dptScsiStatsDevRWCmdsType"))
if mibBuilder.loadTexts: dptScsiStatsDevRWCmdsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRWCmdsEntry.setDescription('These parameters describe the statistics of a device. The index is the logical device address of the device. The logical device address consists of: contoller number, bus number, device ID and logical unit number and device level.')
dptScsiStatsDevRWCmdsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 1), CommandType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRWCmdsType.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRWCmdsType.setDescription('Indicates whether this row represents statistics related to the commands sent by the O/S of the host computer or the SCSI commands sent by the controller to the device to do a physical read or write.')
dptScsiStatsDevRead1Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead1Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead1Ks.setDescription('The number of ScsiDev Group read operations of length <= 1K.')
dptScsiStatsDevRead2Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead2Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead2Ks.setDescription('The number of ScsiDev Group read operations of length > 1K & <= 2K.')
dptScsiStatsDevRead4Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead4Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead4Ks.setDescription('The number of ScsiDev Group read operations of length > 2K & <= 4K.')
dptScsiStatsDevRead8Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead8Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead8Ks.setDescription('The number of ScsiDev Group read operations of length > 4K & <= 8K.')
dptScsiStatsDevRead16Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead16Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead16Ks.setDescription('The number of ScsiDev Group read operations of length > 8K <= 16K.')
dptScsiStatsDevRead32Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead32Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead32Ks.setDescription('The number of ScsiDev Group read operations of length > 16K & <= 32K.')
dptScsiStatsDevRead64Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead64Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead64Ks.setDescription('The number of ScsiDev Group read operations of length > 32K & <= 64k.')
dptScsiStatsDevRead128Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead128Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead128Ks.setDescription('The number of ScsiDev Group read operations of length > 64K & <= 128K.')
dptScsiStatsDevRead256Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead256Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead256Ks.setDescription('The number of ScsiDev Group read operations of length > 128K & <= 256K.')
dptScsiStatsDevRead512Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead512Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead512Ks.setDescription('The number of ScsiDev Group read operations of length > 256K & <= 512K.')
dptScsiStatsDevRead1MBs = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead1MBs.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevRead1MBs.setDescription('The number of ScsiDev Group read operations of length > 512K & <= 1M.')
dptScsiStatsDevReadGreater1MBs = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevReadGreater1MBs.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevReadGreater1MBs.setDescription('The number of ScsiDev Group read operations of length > 1M.')
dptScsiStatsDevWrite1Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite1Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite1Ks.setDescription('The number of ScsiDev Group write operations of length <= 1K.')
dptScsiStatsDevWrite2Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite2Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite2Ks.setDescription('The number of ScsiDev Group write operations of length > 1K & <= 2K.')
dptScsiStatsDevWrite4Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite4Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite4Ks.setDescription('The number of ScsiDev Group write operations of length > 2K & <= 4K.')
dptScsiStatsDevWrite8Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite8Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite8Ks.setDescription('The number of ScsiDev Group write operations of length > 4k & <= 8K.')
dptScsiStatsDevWrite16Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite16Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite16Ks.setDescription('The number of ScsiDev Group write operations of length > 8K & <= 16K.')
dptScsiStatsDevWrite32Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite32Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite32Ks.setDescription('The number of ScsiDev Group write operations of length > 16K & <= 32K.')
dptScsiStatsDevWrite64Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite64Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite64Ks.setDescription('The number of ScsiDev Group write operations of length > 32K & <= 64K.')
dptScsiStatsDevWrite128Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite128Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite128Ks.setDescription('The number of ScsiDev Group write operations of length > 64K & <= 128K.')
dptScsiStatsDevWrite256Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite256Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite256Ks.setDescription('The number of ScsiDev Group write operations of length > 128K & <= 256K.')
dptScsiStatsDevWrite512Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite512Ks.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite512Ks.setDescription('The number of ScsiDev Group write operations of length > 256K & <= 512K.')
dptScsiStatsDevWrite1MBs = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite1MBs.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWrite1MBs.setDescription('The number of ScsiDev Group write operations of length > 512K & <= 1M.')
dptScsiStatsDevWriteGreater1MBs = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWriteGreater1MBs.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiStatsDevWriteGreater1MBs.setDescription('The number of ScsiDev Group write operations of length > 1M.')
dptScsiEventInfo = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiEventInfo.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiEventInfo.setDescription('Represents information in a human readable form (English string) for generic DPT SCSI system traps.')
dptScsiEventAuxVoltage = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 7, 2), LowHighStatus())
if mibBuilder.loadTexts: dptScsiEventAuxVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: dptScsiEventAuxVoltage.setDescription('Auxiliary voltage status reported by the controller.')
dptHbaTemperatureVeryHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,400)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaTemperature"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaTemperatureVeryHighTrap.setDescription('Very high temperature detected on controller.')
dptArrayStatusChangeFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,401)).setObjects(("DPT-SCSI-MIB", "dptScsiDevStatus"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptArrayStatusChangeFailedTrap.setDescription('Array Failed due to multiple drive failures.')
dptHbaVoltageChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,300)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaVoltage"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaVoltageChangeTrap.setDescription('Controller detected 5V voltage is outside of the normal range.')
dptHbaTemperatureHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,301)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaTemperature"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaTemperatureHighTrap.setDescription('High temperature detected on controller.')
dptHbaEccRAMErrorUncorrectableTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,302)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaBadMemoryAddress"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaEccRAMErrorUncorrectableTrap.setDescription('The controller detected and uncorrectable ECC RAM error. dptScsiHbaBadMemoryAddress contains the RAM address.')
dptArrayStatusChangeDegradedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,303)).setObjects(("DPT-SCSI-MIB", "dptScsiDevStatus"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptArrayStatusChangeDegradedTrap.setDescription('Array Degraded due to drive failure.')
dptDevReqSenseSeriousErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,304)).setObjects(("DPT-SCSI-MIB", "dptScsiDevLastReqSenseInfo"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptDevReqSenseSeriousErrorTrap.setDescription('Serious: request sense information from controller.')
dptDevArrayDataInconsistencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,305)).setObjects(("DPT-SCSI-MIB", "dptScsiDevBadBlockNumber"), ("DPT-SCSI-MIB", "dptScsiDevBadBlockCount"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptDevArrayDataInconsistencyTrap.setDescription('Array Data consistency error detected on controller.')
dptHbaErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,306)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaErrorTrap.setDescription('The controller has detected a non-SCSI related error, as defined in the I2O spec.')
dptDevFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,307)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptDevFailedTrap.setDescription('An unprotected drive has failed (visible to the OS).')
dptDevSmartFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,308)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptDevSmartFailedTrap.setDescription('A drive has reported a SMART failure.')
dptHbaAuxVoltageChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,309)).setObjects(("DPT-SCSI-MIB", "dptScsiEventAuxVoltage"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaAuxVoltageChangeTrap.setDescription('Controller detected an auxiliary voltage is outside of the normal range.')
dptHbaEccRAMErrorCorrectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,200)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaBadMemoryAddress"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaEccRAMErrorCorrectedTrap.setDescription('The controller detected and corrected an ECC RAM error. dptScsiHbaBadMemoryAddress contains the RAM address.')
dptDevBlockReassignedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,201)).setObjects(("DPT-SCSI-MIB", "dptScsiDevBadBlockNumber"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptDevBlockReassignedTrap.setDescription('Controller reassigned a block. dptScsiDevBadBlockNumber contains the reassigned block number.')
dptDevReqSenseErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,202)).setObjects(("DPT-SCSI-MIB", "dptScsiDevLastReqSenseInfo"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptDevReqSenseErrorTrap.setDescription('Warning: request sense information from controller.')
dptHbaVoltageNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,100)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaVoltage"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaVoltageNormalTrap.setDescription('5V Voltage has returned to the normal range.')
dptHbaTemperatureNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,101)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaTemperature"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaTemperatureNormalTrap.setDescription('Temperature on controller has returned to normal range.')
dptHbaEccRAMErrorNotFoundTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,102)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaBadMemoryAddress"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaEccRAMErrorNotFoundTrap.setDescription('Controller detected an ECC RAM Error but an ECC error was not found when correction was attempted.')
dptDevStatusChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,103)).setObjects(("DPT-SCSI-MIB", "dptScsiDevStatus"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptDevStatusChangedTrap.setDescription('Status of the device changed.')
dptDevReqSenseTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,104)).setObjects(("DPT-SCSI-MIB", "dptScsiDevLastReqSenseInfo"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptDevReqSenseTrap.setDescription('Request sense information received from controller.')
dptArrayChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,105)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptArrayChangeTrap.setDescription('The software has asked the FW to do an array change.')
dptBatteryChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,106)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiHbaBatteryStatus"))
if mibBuilder.loadTexts: dptBatteryChangeTrap.setDescription('The status of the recharchable battery has changed.')
dptHbaAuxVoltageNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,107)).setObjects(("DPT-SCSI-MIB", "dptScsiEventAuxVoltage"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptHbaAuxVoltageNormalTrap.setDescription('An auxiliary voltage has returned to the normal range.')
dptOtherTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,14)).setObjects(("DPT-SCSI-MIB", "dptScsiEventInfo"))
if mibBuilder.loadTexts: dptOtherTrap.setDescription('Controller event generated with a value dptScsiEventInfo.')
mibBuilder.exportSymbols("DPT-SCSI-MIB", dptScsiHbaEntry=dptScsiHbaEntry, dptScsiStatsDevWriteCacheHits=dptScsiStatsDevWriteCacheHits, dptScsiHbaNumber=dptScsiHbaNumber, dptScsiStatsDevWrite4Ks=dptScsiStatsDevWrite4Ks, dptScsiDevRemovable=dptScsiDevRemovable, dptScsiStatsDevRead256Ks=dptScsiStatsDevRead256Ks, dptScsiDevEccEnabled=dptScsiDevEccEnabled, dptScsiArrEntry=dptScsiArrEntry, dptDevStatusChangedTrap=dptDevStatusChangedTrap, dptScsiStatsDevReadTotalSectors=dptScsiStatsDevReadTotalSectors, dptScsiDevReadCacheMaxRecord=dptScsiDevReadCacheMaxRecord, dptScsiDevCapacity=dptScsiDevCapacity, DeviceStatus=DeviceStatus, dptScsiStatsDevWrite8Ks=dptScsiStatsDevWrite8Ks, dptScsiHbaNvramLayout=dptScsiHbaNvramLayout, dptScsiStatsDevWriteBacks=dptScsiStatsDevWriteBacks, dptHbaEccRAMErrorUncorrectableTrap=dptHbaEccRAMErrorUncorrectableTrap, dptScsiDevBadBlockNumber=dptScsiDevBadBlockNumber, dptScsiDevPhysicalBlockSize=dptScsiDevPhysicalBlockSize, dptScsiDevNegTransferRate=dptScsiDevNegTransferRate, dptScsiDevCmdQueuing=dptScsiDevCmdQueuing, dptDevReqSenseSeriousErrorTrap=dptDevReqSenseSeriousErrorTrap, dptScsiBusMaxTransferRate=dptScsiBusMaxTransferRate, dptScsiHbaVendor=dptScsiHbaVendor, dptScsiDevSerialNumber=dptScsiDevSerialNumber, dptScsiHba=dptScsiHba, dptScsiBusNumber=dptScsiBusNumber, dptScsiStatsDevWrite1Ks=dptScsiStatsDevWrite1Ks, dptArrayStatusChangeFailedTrap=dptArrayStatusChangeFailedTrap, dptScsiDevTable=dptScsiDevTable, dptScsiEvent=dptScsiEvent, dptScsiDummy=dptScsiDummy, dptScsiStatsHbaCommands=dptScsiStatsHbaCommands, dptScsiStatsDevWrite256Ks=dptScsiStatsDevWrite256Ks, dptScsiDevLunMember=dptScsiDevLunMember, dptScsiDevSmartStatusOk=dptScsiDevSmartStatusOk, RowStatus=RowStatus, dptScsiEventAuxVoltage=dptScsiEventAuxVoltage, dptScsiDevErrorsAboveThreshold=dptScsiDevErrorsAboveThreshold, dptHbaErrorTrap=dptHbaErrorTrap, dptScsiHbaHostBusType=dptScsiHbaHostBusType, dptScsiBusHbaTermination=dptScsiBusHbaTermination, RaidType=RaidType, dptScsiSys=dptScsiSys, dptScsiStatsDevRead2Ks=dptScsiStatsDevRead2Ks, dptDevReqSenseErrorTrap=dptDevReqSenseErrorTrap, dptScsiHbaHostBusMaxTransferRate=dptScsiHbaHostBusMaxTransferRate, dptHbaVoltageChangeTrap=dptHbaVoltageChangeTrap, dptScsiHbaHighestBusWithDevices=dptScsiHbaHighestBusWithDevices, dptScsiArrBackgroundProgress=dptScsiArrBackgroundProgress, dptScsiStatsDevWrite1MBs=dptScsiStatsDevWrite1MBs, dptScsiHbaTable=dptScsiHbaTable, dptScsiHbaWriteBackDelay=dptScsiHbaWriteBackDelay, dptScsiDevLevel=dptScsiDevLevel, dptScsiHbaRaidModule=dptScsiHbaRaidModule, dptScsiHbaMaxReadAheadPercentage=dptScsiHbaMaxReadAheadPercentage, dptScsiBusNumberMember=dptScsiBusNumberMember, dptScsiHbaAddress=dptScsiHbaAddress, dptScsiHbaTemperature=dptScsiHbaTemperature, dptScsiDevSMART=dptScsiDevSMART, dptScsiStatsHbaEntry=dptScsiStatsHbaEntry, dptScsiArrMemberEntryStatus=dptScsiArrMemberEntryStatus, dptHbaTemperatureNormalTrap=dptHbaTemperatureNormalTrap, dptScsiStatsHbaCacheTotalPages=dptScsiStatsHbaCacheTotalPages, BatteryBackupModule=BatteryBackupModule, dptScsiBusHbaScsiId=dptScsiBusHbaScsiId, dptScsiDevWriteCachingOn=dptScsiDevWriteCachingOn, dptScsiBusType=dptScsiBusType, dptScsiDevVendor=dptScsiDevVendor, dptScsiDevSynchronous=dptScsiDevSynchronous, dptScsiDevIdMember=dptScsiDevIdMember, dptScsiStatsDevStripesCrosseds=dptScsiStatsDevStripesCrosseds, dptScsiArrEntryStatus=dptScsiArrEntryStatus, dptScsiHbaExclusionPeriodEnd=dptScsiHbaExclusionPeriodEnd, dptDevSmartFailedTrap=dptDevSmartFailedTrap, dptScsiSysEventLoggerSignature=dptScsiSysEventLoggerSignature, dptScsiArrMemberEntry=dptScsiArrMemberEntry, dptScsiHbaSmorSignature=dptScsiHbaSmorSignature, dptScsiArr=dptScsiArr, dptScsiStatsDevRead32Ks=dptScsiStatsDevRead32Ks, dptScsiDevLogicalBlockSize=dptScsiDevLogicalBlockSize, DeviceWriteMode=DeviceWriteMode, dptScsiStatsHbaCacheDirtyPages=dptScsiStatsHbaCacheDirtyPages, dptScsiStatsDevReadCacheHits=dptScsiStatsDevReadCacheHits, DeviceType=DeviceType, dptScsiDevModel=dptScsiDevModel, dptScsiStatsDevRead8Ks=dptScsiStatsDevRead8Ks, dptOtherTrap=dptOtherTrap, dptScsiHbaMaxDirtyPagesPercentage=dptScsiHbaMaxDirtyPagesPercentage, dptScsiHbaCacheSocketTable=dptScsiHbaCacheSocketTable, dptScsiBusEntry=dptScsiBusEntry, dptHbaEccRAMErrorCorrectedTrap=dptHbaEccRAMErrorCorrectedTrap, HbaGenStatus=HbaGenStatus, BusTerminationType=BusTerminationType, dptBatteryChangeTrap=dptBatteryChangeTrap, IrqType=IrqType, DisplayString=DisplayString, dptScsiArrMemberTable=dptScsiArrMemberTable, dptScsiHbaExclusionPeriodStart=dptScsiHbaExclusionPeriodStart, dptScsiDevId=dptScsiDevId, dptScsiDevRelAddr=dptScsiDevRelAddr, dptScsiHbaCachingModule=dptScsiHbaCachingModule, dptScsiStatsDevRead128Ks=dptScsiStatsDevRead128Ks, dptScsiSysMibRevMajor=dptScsiSysMibRevMajor, dptScsiDevType=dptScsiDevType, dptScsiHbaBackgroundTaskPriority=dptScsiHbaBackgroundTaskPriority, ScsiVersion=ScsiVersion, dptHbaVoltageNormalTrap=dptHbaVoltageNormalTrap, dptScsiStatsDevEntry=dptScsiStatsDevEntry, dptScsiHbaCacheSocketEntry=dptScsiHbaCacheSocketEntry, dptScsiDevLastReqSenseInfo=dptScsiDevLastReqSenseInfo, dptScsiStatsHbaScsiResets=dptScsiStatsHbaScsiResets, dptDevArrayDataInconsistencyTrap=dptDevArrayDataInconsistencyTrap, dptScsiHbaIrq=dptScsiHbaIrq, dptScsiDevReadCachingOn=dptScsiDevReadCachingOn, dptScsiEventInfo=dptScsiEventInfo, dptScsiBus=dptScsiBus, dptScsiHbaEccEnabled=dptScsiHbaEccEnabled, dptScsiArrTable=dptScsiArrTable, MemoryBankType=MemoryBankType, SoftwareType=SoftwareType, dptScsiStatsDevReadGreater1MBs=dptScsiStatsDevReadGreater1MBs, dptScsiDevDriveLockingOn=dptScsiDevDriveLockingOn, dptScsiStats=dptScsiStats, RaidModule=RaidModule, dptScsiDevLinkedCmds=dptScsiDevLinkedCmds, dptScsiSysRevLevel=dptScsiSysRevLevel, dptScsiStatsHbaCacheEccFaultPages=dptScsiStatsHbaCacheEccFaultPages, dptHbaAuxVoltageNormalTrap=dptHbaAuxVoltageNormalTrap, dptScsiHbaDrq=dptScsiHbaDrq, dptScsiStatsDevRead512Ks=dptScsiStatsDevRead512Ks, BusWidth=BusWidth, dptScsiSysEngineSignature=dptScsiSysEngineSignature, dptArrayChangeTrap=dptArrayChangeTrap, dptDevBlockReassignedTrap=dptDevBlockReassignedTrap, dptScsiHbaGeneralStatus=dptScsiHbaGeneralStatus, dptScsiArrMemberStripeSize=dptScsiArrMemberStripeSize, dptScsiStatsDevWrite512Ks=dptScsiStatsDevWrite512Ks, DptSignature=DptSignature, dptScsiArrOwner=dptScsiArrOwner, dptScsiDevLevelMember=dptScsiDevLevelMember, dptScsiHbaBatteryStatus=dptScsiHbaBatteryStatus, dptScsiStatsDevRead16Ks=dptScsiStatsDevRead16Ks, BatteryStatus=BatteryStatus, dptDevReqSenseTrap=dptDevReqSenseTrap, dptScsiArrType=dptScsiArrType, dptScsiDevBusWidth=dptScsiDevBusWidth, dptScsiDevWriteCacheMaxRecord=dptScsiDevWriteCacheMaxRecord, dptScsiHbaBatteryModule=dptScsiHbaBatteryModule, dptScsiStatsDevTable=dptScsiStatsDevTable, dptScsiStatsDevWrite32Ks=dptScsiStatsDevWrite32Ks, dptScsiStatsDevWrite2Ks=dptScsiStatsDevWrite2Ks, CommandType=CommandType, dptScsiDevEntry=dptScsiDevEntry, dptScsiHbaCacheSocketNumber=dptScsiHbaCacheSocketNumber, dptScsiStatsDevWrite64Ks=dptScsiStatsDevWrite64Ks, dptScsiDevBadBlockCount=dptScsiDevBadBlockCount, DrqNumber=DrqNumber, dptScsiStatsHbaTable=dptScsiStatsHbaTable, dptScsiStatsDevRWCmdsTable=dptScsiStatsDevRWCmdsTable, dptScsiSysDriverSignature=dptScsiSysDriverSignature, dptScsiStatsDevReadAheadHits=dptScsiStatsDevReadAheadHits, dptScsiStatsDevRead1Ks=dptScsiStatsDevRead1Ks, dptScsiStatsDevRead1MBs=dptScsiStatsDevRead1MBs, MemoryBankSize=MemoryBankSize, dptScsiDevSoftReset=dptScsiDevSoftReset, dptScsiStatsHbaCacheUsedPages=dptScsiStatsHbaCacheUsedPages, dptScsiStatsDevRWCmdsType=dptScsiStatsDevRWCmdsType, HostBusType=HostBusType, dptScsiHbaCacheModuleSize=dptScsiHbaCacheModuleSize, dptScsiHbaCacheModuleType=dptScsiHbaCacheModuleType, dptScsiHbaModel=dptScsiHbaModel, dptScsiDevStatus=dptScsiDevStatus, dptScsiBusHbaTermPower=dptScsiBusHbaTermPower, dptScsiDevScsiVersion=dptScsiDevScsiVersion, dptScsiHbaNumberMember=dptScsiHbaNumberMember, dptScsiHbaIrqType=dptScsiHbaIrqType, dptScsiStatsDevWriteTotalSectors=dptScsiStatsDevWriteTotalSectors, dptScsiBusWidth=dptScsiBusWidth, dptDevFailedTrap=dptDevFailedTrap, LowHighStatus=LowHighStatus, dptScsiDevRevision=dptScsiDevRevision, dptScsiHbaSerialNumber=dptScsiHbaSerialNumber, dptHbaAuxVoltageChangeTrap=dptHbaAuxVoltageChangeTrap, dptScsiStatsDevRead4Ks=dptScsiStatsDevRead4Ks, dptHbaEccRAMErrorNotFoundTrap=dptHbaEccRAMErrorNotFoundTrap, dptScsiDev=dptScsiDev, dptScsiHbaBiosSignature=dptScsiHbaBiosSignature, dptScsiArrName=dptScsiArrName, dptScsiHbaUpTime=dptScsiHbaUpTime, dptScsiSysMibRevMinor=dptScsiSysMibRevMinor, dptScsiHbaExclusionPeriodEnabled=dptScsiHbaExclusionPeriodEnabled, ScsiBusType=ScsiBusType, dptScsiHbaFirmware=dptScsiHbaFirmware, dptScsiDevSCAM=dptScsiDevSCAM, dptScsiHbaVoltage=dptScsiHbaVoltage, dpt=dpt, dptArrayStatusChangeDegradedTrap=dptArrayStatusChangeDegradedTrap, dptScsiStatsDevWriteGreater1MBs=dptScsiStatsDevWriteGreater1MBs, dptScsiDevLun=dptScsiDevLun, CachingModule=CachingModule, dptScsiBusTable=dptScsiBusTable, dptScsiStatsDevRWCmdsEntry=dptScsiStatsDevRWCmdsEntry, dptScsiStatsDevWrite16Ks=dptScsiStatsDevWrite16Ks, dptScsiStatsDevRead64Ks=dptScsiStatsDevRead64Ks, dptScsi=dptScsi, dptScsiStatsHbaCacheReadAheadPages=dptScsiStatsHbaCacheReadAheadPages, dptScsiStatsDevWrite128Ks=dptScsiStatsDevWrite128Ks, dptScsiDevWriteMode=dptScsiDevWriteMode, dptScsiStatsHbaCacheLockedPages=dptScsiStatsHbaCacheLockedPages, dptHbaTemperatureHighTrap=dptHbaTemperatureHighTrap, dptScsiStatsHbaMisAlignedTransfers=dptScsiStatsHbaMisAlignedTransfers, dptHbaTemperatureVeryHighTrap=dptHbaTemperatureVeryHighTrap, YesNoStatus=YesNoStatus, dptScsiHbaBadMemoryAddress=dptScsiHbaBadMemoryAddress, dptScsiHbaAudibleAlarmOn=dptScsiHbaAudibleAlarmOn)
