#
# PySNMP MIB module PPP-IP-NCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PPP-IP-NCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ppp, = mibBuilder.importSymbols("PPP-LCP-MIB", "ppp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, ModuleIdentity, Integer32, Counter64, IpAddress, MibIdentifier, Counter32, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "ModuleIdentity", "Integer32", "Counter64", "IpAddress", "MibIdentifier", "Counter32", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pppIp = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 3))
pppIpTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 3, 1), )
if mibBuilder.loadTexts: pppIpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpTable.setDescription('Table containing the IP parameters and statistics for the local PPP entity.')
pppIpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppIpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpEntry.setDescription('IPCP status information for a particular PPP link.')
pppIpOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpOperStatus.setDescription('The operational status of the IP network protocol. If the value of this object is up then the finite state machine for the IP network protocol has reached the Opened state.')
pppIpLocalToRemoteCompressionProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpLocalToRemoteCompressionProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpLocalToRemoteCompressionProtocol.setDescription('The IP compression protocol that the local PPP-IP entity uses when sending packets to the remote PPP-IP entity. The value of this object is meaningful only when the link has reached the open state (pppIpOperStatus is opened).')
pppIpRemoteToLocalCompressionProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpRemoteToLocalCompressionProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpRemoteToLocalCompressionProtocol.setDescription('The IP compression protocol that the remote PPP-IP entity uses when sending packets to the local PPP-IP entity. The value of this object is meaningful only when the link has reached the open state (pppIpOperStatus is opened).')
pppIpRemoteMaxSlotId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpRemoteMaxSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpRemoteMaxSlotId.setDescription('The Max-Slot-Id parameter that the remote node has advertised and that is in use on the link. If vj-tcp header compression is not in use on the link then the value of this object shall be 0. The value of this object is meaningful only when the link has reached the open state (pppIpOperStatus is opened).')
pppIpLocalMaxSlotId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpLocalMaxSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpLocalMaxSlotId.setDescription('The Max-Slot-Id parameter that the local node has advertised and that is in use on the link. If vj-tcp header compression is not in use on the link then the value of this object shall be 0. The value of this object is meaningful only when the link has reached the open state (pppIpOperStatus is opened).')
pppIpConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 3, 2), )
if mibBuilder.loadTexts: pppIpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpConfigTable.setDescription('Table containing configuration variables for the IPCP for the local PPP entity.')
pppIpConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppIpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpConfigEntry.setDescription('IPCP information for a particular PPP link.')
pppIpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppIpConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpConfigAdminStatus.setDescription("The immediate desired status of the IP network protocol. Setting this object to open will inject an administrative open event into the IP network protocol's finite state machine. Setting this object to close will inject an administrative close event into the IP network protocol's finite state machine.")
pppIpConfigCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppIpConfigCompression.setReference('Section 4.0, Van Jacobson TCP/IP Header Compression of RFC1332.')
if mibBuilder.loadTexts: pppIpConfigCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpConfigCompression.setDescription('If none(1) then the local node will not attempt to negotiate any IP Compression option. Otherwise, the local node will attempt to negotiate compression mode indicated by the enumerated value. Changing this object will have effect when the link is next restarted.')
mibBuilder.exportSymbols("PPP-IP-NCP-MIB", pppIpRemoteToLocalCompressionProtocol=pppIpRemoteToLocalCompressionProtocol, pppIpOperStatus=pppIpOperStatus, pppIpConfigTable=pppIpConfigTable, pppIpLocalMaxSlotId=pppIpLocalMaxSlotId, pppIpConfigCompression=pppIpConfigCompression, pppIpConfigEntry=pppIpConfigEntry, pppIpEntry=pppIpEntry, pppIpTable=pppIpTable, pppIpRemoteMaxSlotId=pppIpRemoteMaxSlotId, pppIp=pppIp, pppIpConfigAdminStatus=pppIpConfigAdminStatus, pppIpLocalToRemoteCompressionProtocol=pppIpLocalToRemoteCompressionProtocol)
